// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import 'dart:convert';
import 'dart:typed_data';

import '../../shared/shared.dart' as _s;
import '../../shared/shared.dart'
    show
        rfc822ToJson,
        iso8601ToJson,
        unixTimestampToJson,
        nonNullableTimeStampFromJson,
        timeStampFromJson;

export '../../shared/shared.dart' show AwsClientCredentials;

/// <p/>
class S3 {
  final _s.RestXmlProtocol _protocol;
  S3({
    required String region,
    _s.AwsClientCredentials? credentials,
    _s.AwsClientCredentialsProvider? credentialsProvider,
    _s.Client? client,
    String? endpointUrl,
  }) : _protocol = _s.RestXmlProtocol(
          client: client,
          service: _s.ServiceMetadata(
            endpointPrefix: 's3',
          ),
          region: region,
          credentials: credentials,
          credentialsProvider: credentialsProvider,
          endpointUrl: endpointUrl,
        );

  /// Closes the internal HTTP client if none was provided at creation.
  /// If a client was passed as a constructor argument, this becomes a noop.
  ///
  /// It's important to close all clients when it's done being used; failing to
  /// do so can cause the Dart process to hang.
  void close() {
    _protocol.close();
  }

  /// This operation aborts a multipart upload. After a multipart upload is
  /// aborted, no additional parts can be uploaded using that upload ID. The
  /// storage consumed by any previously uploaded parts will be freed. However,
  /// if any part uploads are currently in progress, those part uploads might or
  /// might not succeed. As a result, it might be necessary to abort a given
  /// multipart upload multiple times in order to completely free all storage
  /// consumed by all parts.
  ///
  /// To verify that all parts have been removed and prevent getting charged for
  /// the part storage, you should call the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// API operation and ensure that the parts list is empty.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - For information about
  /// permissions required to use the multipart upload, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// Upload and Permissions</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>AbortMultipartUpload</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchUpload].
  ///
  /// Parameter [bucket] :
  /// The bucket name to which the upload was taking place.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Key of the object for which the multipart upload was initiated.
  ///
  /// Parameter [uploadId] :
  /// Upload ID that identifies the multipart upload.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<AbortMultipartUploadOutput> abortMultipartUpload({
    required String bucket,
    required String key,
    required String uploadId,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      'uploadId': [uploadId],
    };
    final $result = await _protocol.sendRaw(
      method: 'DELETE',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return AbortMultipartUploadOutput(
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// Completes a multipart upload by assembling previously uploaded parts.
  ///
  /// You first initiate the multipart upload and then upload all parts using
  /// the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// operation or the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a>
  /// operation. After successfully uploading all relevant parts of an upload,
  /// you call this <code>CompleteMultipartUpload</code> operation to complete
  /// the upload. Upon receiving this request, Amazon S3 concatenates all the
  /// parts in ascending order by part number to create a new object. In the
  /// CompleteMultipartUpload request, you must provide the parts list and
  /// ensure that the parts list is complete. The CompleteMultipartUpload API
  /// operation concatenates the parts that you provide in the list. For each
  /// part in the list, you must provide the <code>PartNumber</code> value and
  /// the <code>ETag</code> value that are returned after that part was
  /// uploaded.
  ///
  /// The processing of a CompleteMultipartUpload request could take several
  /// minutes to finalize. After Amazon S3 begins processing the request, it
  /// sends an HTTP response header that specifies a <code>200 OK</code>
  /// response. While processing is in progress, Amazon S3 periodically sends
  /// white space characters to keep the connection from timing out. A request
  /// could fail after the initial <code>200 OK</code> response has been sent.
  /// This means that a <code>200 OK</code> response can contain either a
  /// success or an error. The error response might be embedded in the <code>200
  /// OK</code> response. If you call this API operation directly, make sure to
  /// design your application to parse the contents of the response and handle
  /// it appropriately. If you use Amazon Web Services SDKs, SDKs handle this
  /// condition. The SDKs detect the embedded error and apply error handling per
  /// your configuration settings (including automatically retrying the request
  /// as appropriate). If the condition persists, the SDKs throw an exception
  /// (or, for the SDKs that don't use exceptions, they return an error).
  ///
  /// Note that if <code>CompleteMultipartUpload</code> fails, applications
  /// should be prepared to retry any failed requests (including 500 error
  /// responses). For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html">Amazon
  /// S3 Error Best Practices</a>.
  /// <important>
  /// You can't use <code>Content-Type: application/x-www-form-urlencoded</code>
  /// for the CompleteMultipartUpload requests. Also, if you don't provide a
  /// <code>Content-Type</code> header, <code>CompleteMultipartUpload</code> can
  /// still return a <code>200 OK</code> response.
  /// </important>
  /// For more information about multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading
  /// Objects Using Multipart Upload</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - For information about
  /// permissions required to use the multipart upload API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// Upload and Permissions</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Special errors</dt> <dd>
  /// <ul>
  /// <li>
  /// Error Code: <code>EntityTooSmall</code>
  ///
  /// <ul>
  /// <li>
  /// Description: Your proposed upload is smaller than the minimum allowed
  /// object size. Each part must be at least 5 MB in size, except the last
  /// part.
  /// </li>
  /// <li>
  /// HTTP Status Code: 400 Bad Request
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Error Code: <code>InvalidPart</code>
  ///
  /// <ul>
  /// <li>
  /// Description: One or more of the specified parts could not be found. The
  /// part might not have been uploaded, or the specified ETag might not have
  /// matched the uploaded part's ETag.
  /// </li>
  /// <li>
  /// HTTP Status Code: 400 Bad Request
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Error Code: <code>InvalidPartOrder</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The list of parts was not in ascending order. The parts list
  /// must be specified in order by part number.
  /// </li>
  /// <li>
  /// HTTP Status Code: 400 Bad Request
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Error Code: <code>NoSuchUpload</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The specified multipart upload does not exist. The upload ID
  /// might be invalid, or the multipart upload might have been aborted or
  /// completed.
  /// </li>
  /// <li>
  /// HTTP Status Code: 404 Not Found
  /// </li>
  /// </ul> </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to
  /// <code>CompleteMultipartUpload</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// Name of the bucket to which the multipart upload was initiated.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which the multipart upload was initiated.
  ///
  /// Parameter [uploadId] :
  /// ID for the initiated multipart upload.
  ///
  /// Parameter [checksumCRC32] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32 checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumCRC32C] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32C checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumSHA1] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 160-bit SHA-1 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumSHA256] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 256-bit SHA-256 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [multipartUpload] :
  /// The container for the multipart upload request information.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// The server-side encryption (SSE) algorithm used to encrypt the object.
  /// This parameter is required only when the object was created using a
  /// checksum algorithm or if your bucket policy requires the use of SSE-C. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html#ssec-require-condition-key">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// The server-side encryption (SSE) customer managed key. This parameter is
  /// needed only when the object was created using a checksum algorithm. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// The MD5 server-side encryption (SSE) customer managed key. This parameter
  /// is needed only when the object was created using a checksum algorithm. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<CompleteMultipartUploadOutput> completeMultipartUpload({
    required String bucket,
    required String key,
    required String uploadId,
    String? checksumCRC32,
    String? checksumCRC32C,
    String? checksumSHA1,
    String? checksumSHA256,
    String? expectedBucketOwner,
    CompletedMultipartUpload? multipartUpload,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
  }) async {
    final headers = <String, String>{
      if (checksumCRC32 != null)
        'x-amz-checksum-crc32': checksumCRC32.toString(),
      if (checksumCRC32C != null)
        'x-amz-checksum-crc32c': checksumCRC32C.toString(),
      if (checksumSHA1 != null) 'x-amz-checksum-sha1': checksumSHA1.toString(),
      if (checksumSHA256 != null)
        'x-amz-checksum-sha256': checksumSHA256.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      'uploadId': [uploadId],
    };
    final $result = await _protocol.sendRaw(
      method: 'POST',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      payload: multipartUpload?.toXml('CompleteMultipartUpload'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return CompleteMultipartUploadOutput(
      bucket: _s.extractXmlStringValue($elem, 'Bucket'),
      checksumCRC32: _s.extractXmlStringValue($elem, 'ChecksumCRC32'),
      checksumCRC32C: _s.extractXmlStringValue($elem, 'ChecksumCRC32C'),
      checksumSHA1: _s.extractXmlStringValue($elem, 'ChecksumSHA1'),
      checksumSHA256: _s.extractXmlStringValue($elem, 'ChecksumSHA256'),
      eTag: _s.extractXmlStringValue($elem, 'ETag'),
      key: _s.extractXmlStringValue($elem, 'Key'),
      location: _s.extractXmlStringValue($elem, 'Location'),
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      expiration:
          _s.extractHeaderStringValue($result.headers, 'x-amz-expiration'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// Creates a copy of an object that is already stored in Amazon S3.
  /// <note>
  /// You can store individual objects of up to 5 TB in Amazon S3. You create a
  /// copy of your object up to 5 GB in size in a single atomic action using
  /// this API. However, to copy an object greater than 5 GB, you must use the
  /// multipart upload Upload Part - Copy (UploadPartCopy) API. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html">Copy
  /// Object Using the REST Multipart Upload API</a>.
  /// </note>
  /// You can copy individual objects between general purpose buckets, between
  /// directory buckets, and between general purpose buckets and directory
  /// buckets.
  /// <note>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note>
  /// Both the Region that you want to copy the object from and the Region that
  /// you want to copy the object to must be enabled for your account. For more
  /// information about how to enable a Region for your account, see <a
  /// href="https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html#manage-acct-regions-enable-standalone">Enable
  /// or disable a Region for standalone accounts</a> in the <i>Amazon Web
  /// Services Account Management Guide</i>.
  /// <important>
  /// Amazon S3 transfer acceleration does not support cross-Region copies. If
  /// you request a cross-Region copy using a transfer acceleration endpoint,
  /// you get a <code>400 Bad Request</code> error. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Transfer
  /// Acceleration</a>.
  /// </important> <dl> <dt>Authentication and authorization</dt> <dd>
  /// All <code>CopyObject</code> requests must be authenticated and signed by
  /// using IAM credentials (access key ID and secret access key for the IAM
  /// identities). All headers with the <code>x-amz-</code> prefix, including
  /// <code>x-amz-copy-source</code>, must be signed. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST
  /// Authentication</a>.
  ///
  /// <b>Directory buckets</b> - You must use the IAM credentials to
  /// authenticate and authorize your access to the <code>CopyObject</code> API
  /// operation, instead of using the temporary security credentials through the
  /// <code>CreateSession</code> API operation.
  ///
  /// Amazon Web Services CLI or SDKs handles authentication and authorization
  /// on your behalf.
  /// </dd> <dt>Permissions</dt> <dd>
  /// You must have <i>read</i> access to the source object and <i>write</i>
  /// access to the destination bucket.
  ///
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - You must have permissions in
  /// an IAM policy based on the source and destination bucket types in a
  /// <code>CopyObject</code> operation.
  ///
  /// <ul>
  /// <li>
  /// If the source object is in a general purpose bucket, you must have <b>
  /// <code>s3:GetObject</code> </b> permission to read the source object that
  /// is being copied.
  /// </li>
  /// <li>
  /// If the destination bucket is a general purpose bucket, you must have <b>
  /// <code>s3:PutObject</code> </b> permission to write the object copy to the
  /// destination bucket.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - You must have permissions in a
  /// bucket policy or an IAM identity-based policy based on the source and
  /// destination bucket types in a <code>CopyObject</code> operation.
  ///
  /// <ul>
  /// <li>
  /// If the source object that you want to copy is in a directory bucket, you
  /// must have the <b> <code>s3express:CreateSession</code> </b> permission in
  /// the <code>Action</code> element of a policy to read the object. By
  /// default, the session is in the <code>ReadWrite</code> mode. If you want to
  /// restrict the access, you can explicitly set the
  /// <code>s3express:SessionMode</code> condition key to <code>ReadOnly</code>
  /// on the copy source bucket.
  /// </li>
  /// <li>
  /// If the copy destination is a directory bucket, you must have the <b>
  /// <code>s3express:CreateSession</code> </b> permission in the
  /// <code>Action</code> element of a policy to write the object to the
  /// destination. The <code>s3express:SessionMode</code> condition key can't be
  /// set to <code>ReadOnly</code> on the copy destination bucket.
  /// </li>
  /// </ul>
  /// For example policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example
  /// bucket policies for S3 Express One Zone</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-identity-policies.html">Amazon
  /// Web Services Identity and Access Management (IAM) identity-based policies
  /// for S3 Express One Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>Response and special errors</dt> <dd>
  /// When the request is an HTTP 1.1 request, the response is chunk encoded.
  /// When the request is not an HTTP 1.1 request, the response would not
  /// contain the <code>Content-Length</code>. You always need to read the
  /// entire response body to check if the copy succeeds. to keep the connection
  /// alive while we copy the data.
  ///
  /// <ul>
  /// <li>
  /// If the copy is successful, you receive a response with information about
  /// the copied object.
  /// </li>
  /// <li>
  /// A copy request might return an error when Amazon S3 receives the copy
  /// request or while Amazon S3 is copying the files. A <code>200 OK</code>
  /// response can contain either a success or an error.
  ///
  /// <ul>
  /// <li>
  /// If the error occurs before the copy action starts, you receive a standard
  /// Amazon S3 error.
  /// </li>
  /// <li>
  /// If the error occurs during the copy operation, the error response is
  /// embedded in the <code>200 OK</code> response. For example, in a
  /// cross-region copy, you may encounter throttling and receive a <code>200
  /// OK</code> response. For more information, see <a
  /// href="https://repost.aws/knowledge-center/s3-resolve-200-internalerror">Resolve
  /// the Error 200 response when copying objects to Amazon S3</a>. The
  /// <code>200 OK</code> status code means the copy was accepted, but it
  /// doesn't mean the copy is complete. Another example is when you disconnect
  /// from Amazon S3 before the copy is complete, Amazon S3 might cancel the
  /// copy and you may receive a <code>200 OK</code> response. You must stay
  /// connected to Amazon S3 until the entire response is successfully received
  /// and processed.
  ///
  /// If you call this API operation directly, make sure to design your
  /// application to parse the content of the response and handle it
  /// appropriately. If you use Amazon Web Services SDKs, SDKs handle this
  /// condition. The SDKs detect the embedded error and apply error handling per
  /// your configuration settings (including automatically retrying the request
  /// as appropriate). If the condition persists, the SDKs throw an exception
  /// (or, for the SDKs that don't use exceptions, they return an error).
  /// </li>
  /// </ul> </li>
  /// </ul> </dd> <dt>Charge</dt> <dd>
  /// The copy request charge is based on the storage class and Region that you
  /// specify for the destination object. The request can also result in a data
  /// retrieval charge for the source if the source storage class bills for data
  /// retrieval. If the copy source is in a different region, the data transfer
  /// is billed to the copy source account. For pricing information, see <a
  /// href="http://aws.amazon.com/s3/pricing/">Amazon S3 pricing</a>.
  /// </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>CopyObject</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [ObjectNotInActiveTierError].
  ///
  /// Parameter [bucket] :
  /// The name of the destination bucket.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [copySource] :
  /// Specifies the source object for the copy operation. The source object can
  /// be up to 5 GB. If the source object is an object that was uploaded by
  /// using a multipart upload, the object copy will be a single part object
  /// after the source object is copied to the destination bucket.
  ///
  /// You specify the value of the copy source in one of two formats, depending
  /// on whether you want to access the source object through an <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access
  /// point</a>:
  ///
  /// <ul>
  /// <li>
  /// For objects not accessed through an access point, specify the name of the
  /// source bucket and the key of the source object, separated by a slash (/).
  /// For example, to copy the object <code>reports/january.pdf</code> from the
  /// general purpose bucket <code>awsexamplebucket</code>, use
  /// <code>awsexamplebucket/reports/january.pdf</code>. The value must be
  /// URL-encoded. To copy the object <code>reports/january.pdf</code> from the
  /// directory bucket <code>awsexamplebucket--use1-az5--x-s3</code>, use
  /// <code>awsexamplebucket--use1-az5--x-s3/reports/january.pdf</code>. The
  /// value must be URL-encoded.
  /// </li>
  /// <li>
  /// For objects accessed through access points, specify the Amazon Resource
  /// Name (ARN) of the object as accessed through the access point, in the
  /// format
  /// <code>arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;</code>.
  /// For example, to copy the object <code>reports/january.pdf</code> through
  /// access point <code>my-access-point</code> owned by account
  /// <code>123456789012</code> in Region <code>us-west-2</code>, use the URL
  /// encoding of
  /// <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>.
  /// The value must be URL encoded.
  /// <note>
  /// <ul>
  /// <li>
  /// Amazon S3 supports copy operations using Access points only when the
  /// source and destination buckets are in the same Amazon Web Services Region.
  /// </li>
  /// <li>
  /// Access points are not supported by directory buckets.
  /// </li>
  /// </ul> </note>
  /// Alternatively, for objects accessed through Amazon S3 on Outposts, specify
  /// the ARN of the object as accessed in the format
  /// <code>arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt;key&gt;</code>.
  /// For example, to copy the object <code>reports/january.pdf</code> through
  /// outpost <code>my-outpost</code> owned by account <code>123456789012</code>
  /// in Region <code>us-west-2</code>, use the URL encoding of
  /// <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>.
  /// The value must be URL-encoded.
  /// </li>
  /// </ul>
  /// If your source bucket versioning is enabled, the
  /// <code>x-amz-copy-source</code> header by default identifies the current
  /// version of an object to copy. If the current version is a delete marker,
  /// Amazon S3 behaves as if the object was deleted. To copy a different
  /// version, use the <code>versionId</code> query parameter. Specifically,
  /// append <code>?versionId=&lt;version-id&gt;</code> to the value (for
  /// example,
  /// <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).
  /// If you don't specify a version ID, Amazon S3 copies the latest version of
  /// the source object.
  ///
  /// If you enable versioning on the destination bucket, Amazon S3 generates a
  /// unique version ID for the copied object. This version ID is different from
  /// the version ID of the source object. Amazon S3 returns the version ID of
  /// the copied object in the <code>x-amz-version-id</code> response header in
  /// the response.
  ///
  /// If you do not enable versioning or suspend it on the destination bucket,
  /// the version ID that Amazon S3 generates in the
  /// <code>x-amz-version-id</code> response header is always null.
  /// <note>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets.
  /// </note>
  ///
  /// Parameter [key] :
  /// The key of the destination object.
  ///
  /// Parameter [acl] :
  /// The canned access control list (ACL) to apply to the object.
  ///
  /// When you copy an object, the ACL metadata is not preserved and is set to
  /// <code>private</code> by default. Only the owner has full access control.
  /// To override the default ACL setting, specify a new ACL when you generate a
  /// copy request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Using
  /// ACLs</a>.
  ///
  /// If the destination bucket that you're copying objects to uses the bucket
  /// owner enforced setting for S3 Object Ownership, ACLs are disabled and no
  /// longer affect permissions. Buckets that use this setting only accept
  /// <code>PUT</code> requests that don't specify an ACL or <code>PUT</code>
  /// requests that specify bucket owner full control ACLs, such as the
  /// <code>bucket-owner-full-control</code> canned ACL or an equivalent form of
  /// this ACL expressed in the XML format. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling
  /// ownership of objects and disabling ACLs</a> in the <i>Amazon S3 User
  /// Guide</i>.
  /// <note>
  /// <ul>
  /// <li>
  /// If your destination bucket uses the bucket owner enforced setting for
  /// Object Ownership, all objects written to the bucket by any account will be
  /// owned by the bucket owner.
  /// </li>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [bucketKeyEnabled] :
  /// Specifies whether Amazon S3 should use an S3 Bucket Key for object
  /// encryption with server-side encryption using Key Management Service (KMS)
  /// keys (SSE-KMS). If a target object uses SSE-KMS, you can enable an S3
  /// Bucket Key for the object.
  ///
  /// Setting this header to <code>true</code> causes Amazon S3 to use an S3
  /// Bucket Key for object encryption with SSE-KMS. Specifying this header with
  /// a COPY action doesn’t affect bucket-level settings for S3 Bucket Key.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon
  /// S3 Bucket Keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [cacheControl] :
  /// Specifies the caching behavior along the request/reply chain.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm that you want Amazon S3 to use to create the
  /// checksum for the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// When you copy an object, if the source object has a checksum, that
  /// checksum value will be copied to the new object by default. If the
  /// <code>CopyObject</code> request does not include this
  /// <code>x-amz-checksum-algorithm</code> header, the checksum algorithm will
  /// be copied from the source object to the destination object (if it's
  /// present on the source object). You can optionally specify a different
  /// checksum algorithm to use with the <code>x-amz-checksum-algorithm</code>
  /// header. Unrecognized or unsupported values will respond with the HTTP
  /// status code <code>400 Bad Request</code>.
  /// <note>
  /// For directory buckets, when you use Amazon Web Services SDKs,
  /// <code>CRC32</code> is the default checksum algorithm that's used for
  /// performance.
  /// </note>
  ///
  /// Parameter [contentDisposition] :
  /// Specifies presentational information for the object. Indicates whether an
  /// object should be displayed in a web browser or downloaded as a file. It
  /// allows specifying the desired filename for the downloaded file.
  ///
  /// Parameter [contentEncoding] :
  /// Specifies what content encodings have been applied to the object and thus
  /// what decoding mechanisms must be applied to obtain the media-type
  /// referenced by the Content-Type header field.
  /// <note>
  /// For directory buckets, only the <code>aws-chunked</code> value is
  /// supported in this header field.
  /// </note>
  ///
  /// Parameter [contentLanguage] :
  /// The language the content is in.
  ///
  /// Parameter [contentType] :
  /// A standard MIME type that describes the format of the object data.
  ///
  /// Parameter [copySourceIfMatch] :
  /// Copies the object if its entity tag (ETag) matches the specified tag.
  ///
  /// If both the <code>x-amz-copy-source-if-match</code> and
  /// <code>x-amz-copy-source-if-unmodified-since</code> headers are present in
  /// the request and evaluate as follows, Amazon S3 returns <code>200 OK</code>
  /// and copies the data:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-copy-source-if-match</code> condition evaluates to true
  /// </li>
  /// <li>
  /// <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to
  /// false
  /// </li>
  /// </ul>
  ///
  /// Parameter [copySourceIfModifiedSince] :
  /// Copies the object if it has been modified since the specified time.
  ///
  /// If both the <code>x-amz-copy-source-if-none-match</code> and
  /// <code>x-amz-copy-source-if-modified-since</code> headers are present in
  /// the request and evaluate as follows, Amazon S3 returns the <code>412
  /// Precondition Failed</code> response code:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-copy-source-if-none-match</code> condition evaluates to false
  /// </li>
  /// <li>
  /// <code>x-amz-copy-source-if-modified-since</code> condition evaluates to
  /// true
  /// </li>
  /// </ul>
  ///
  /// Parameter [copySourceIfNoneMatch] :
  /// Copies the object if its entity tag (ETag) is different than the specified
  /// ETag.
  ///
  /// If both the <code>x-amz-copy-source-if-none-match</code> and
  /// <code>x-amz-copy-source-if-modified-since</code> headers are present in
  /// the request and evaluate as follows, Amazon S3 returns the <code>412
  /// Precondition Failed</code> response code:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-copy-source-if-none-match</code> condition evaluates to false
  /// </li>
  /// <li>
  /// <code>x-amz-copy-source-if-modified-since</code> condition evaluates to
  /// true
  /// </li>
  /// </ul>
  ///
  /// Parameter [copySourceIfUnmodifiedSince] :
  /// Copies the object if it hasn't been modified since the specified time.
  ///
  /// If both the <code>x-amz-copy-source-if-match</code> and
  /// <code>x-amz-copy-source-if-unmodified-since</code> headers are present in
  /// the request and evaluate as follows, Amazon S3 returns <code>200 OK</code>
  /// and copies the data:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-copy-source-if-match</code> condition evaluates to true
  /// </li>
  /// <li>
  /// <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to
  /// false
  /// </li>
  /// </ul>
  ///
  /// Parameter [copySourceSSECustomerAlgorithm] :
  /// Specifies the algorithm to use when decrypting the source object (for
  /// example, <code>AES256</code>).
  ///
  /// If the source object for the copy is stored in Amazon S3 using SSE-C, you
  /// must provide the necessary encryption information in your request so that
  /// Amazon S3 can decrypt the object for copying.
  /// <note>
  /// This functionality is not supported when the source object is in a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [copySourceSSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use to
  /// decrypt the source object. The encryption key provided in this header must
  /// be the same one that was used when the source object was created.
  ///
  /// If the source object for the copy is stored in Amazon S3 using SSE-C, you
  /// must provide the necessary encryption information in your request so that
  /// Amazon S3 can decrypt the object for copying.
  /// <note>
  /// This functionality is not supported when the source object is in a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [copySourceSSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  ///
  /// If the source object for the copy is stored in Amazon S3 using SSE-C, you
  /// must provide the necessary encryption information in your request so that
  /// Amazon S3 can decrypt the object for copying.
  /// <note>
  /// This functionality is not supported when the source object is in a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected destination bucket owner. If the account ID
  /// that you provide does not match the actual owner of the destination
  /// bucket, the request fails with the HTTP status code <code>403
  /// Forbidden</code> (access denied).
  ///
  /// Parameter [expectedSourceBucketOwner] :
  /// The account ID of the expected source bucket owner. If the account ID that
  /// you provide does not match the actual owner of the source bucket, the
  /// request fails with the HTTP status code <code>403 Forbidden</code> (access
  /// denied).
  ///
  /// Parameter [expires] :
  /// The date and time at which the object is no longer cacheable.
  ///
  /// Parameter [grantFullControl] :
  /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantRead] :
  /// Allows grantee to read the object data and its metadata.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantReadACP] :
  /// Allows grantee to read the object ACL.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantWriteACP] :
  /// Allows grantee to write the ACL for the applicable object.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [metadata] :
  /// A map of metadata to store with the object in S3.
  ///
  /// Parameter [metadataDirective] :
  /// Specifies whether the metadata is copied from the source object or
  /// replaced with metadata that's provided in the request. When copying an
  /// object, you can preserve all metadata (the default) or specify new
  /// metadata. If this header isn’t specified, <code>COPY</code> is the default
  /// behavior.
  ///
  /// <b>General purpose bucket</b> - For general purpose buckets, when you
  /// grant permissions, you can use the
  /// <code>s3:x-amz-metadata-directive</code> condition key to enforce certain
  /// metadata behavior when objects are uploaded. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html">Amazon
  /// S3 condition key examples</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <code>x-amz-website-redirect-location</code> is unique to each object and
  /// is not copied when using the <code>x-amz-metadata-directive</code> header.
  /// To copy the value, you must specify
  /// <code>x-amz-website-redirect-location</code> in the request header.
  /// </note>
  ///
  /// Parameter [objectLockLegalHoldStatus] :
  /// Specifies whether you want to apply a legal hold to the object copy.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockMode] :
  /// The Object Lock mode that you want to apply to the object copy.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockRetainUntilDate] :
  /// The date and time when you want the Object Lock of the object copy to
  /// expire.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// <code>AES256</code>).
  ///
  /// When you perform a <code>CopyObject</code> operation, if you want to use a
  /// different type of encryption setting for the target object, you can
  /// specify appropriate encryption-related headers to encrypt the target
  /// object with an Amazon S3 managed key, a KMS key, or a customer-provided
  /// key. If the encryption setting in your request is different from the
  /// default encryption configuration of the destination bucket, the encryption
  /// setting in your request takes precedence.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded. Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [sSEKMSEncryptionContext] :
  /// Specifies the Amazon Web Services KMS Encryption Context to use for object
  /// encryption. The value of this header is a base64-encoded UTF-8 string
  /// holding JSON with the encryption context key-value pairs. This value must
  /// be explicitly added to specify encryption context for
  /// <code>CopyObject</code> requests.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [sSEKMSKeyId] :
  /// Specifies the KMS ID (Key ID, Key ARN, or Key Alias) to use for object
  /// encryption. All GET and PUT requests for an object protected by KMS will
  /// fail if they're not made via SSL or using SigV4. For information about
  /// configuring any of the officially supported Amazon Web Services SDKs and
  /// Amazon Web Services CLI, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying
  /// the Signature Version in Request Authentication</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [serverSideEncryption] :
  /// The server-side encryption algorithm used when storing this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>,
  /// <code>aws:kms:dsse</code>). Unrecognized or unsupported values won’t write
  /// a destination object and will receive a <code>400 Bad Request</code>
  /// response.
  ///
  /// Amazon S3 automatically encrypts all new objects that are copied to an S3
  /// bucket. When copying an object, if you don't specify encryption
  /// information in your copy request, the encryption setting of the target
  /// object is set to the default encryption configuration of the destination
  /// bucket. By default, all buckets have a base level of encryption
  /// configuration that uses server-side encryption with Amazon S3 managed keys
  /// (SSE-S3). If the destination bucket has a default encryption configuration
  /// that uses server-side encryption with Key Management Service (KMS) keys
  /// (SSE-KMS), dual-layer server-side encryption with Amazon Web Services KMS
  /// keys (DSSE-KMS), or server-side encryption with customer-provided
  /// encryption keys (SSE-C), Amazon S3 uses the corresponding KMS key, or a
  /// customer-provided key to encrypt the target object copy.
  ///
  /// When you perform a <code>CopyObject</code> operation, if you want to use a
  /// different type of encryption setting for the target object, you can
  /// specify appropriate encryption-related headers to encrypt the target
  /// object with an Amazon S3 managed key, a KMS key, or a customer-provided
  /// key. If the encryption setting in your request is different from the
  /// default encryption configuration of the destination bucket, the encryption
  /// setting in your request takes precedence.
  ///
  /// With server-side encryption, Amazon S3 encrypts your data as it writes
  /// your data to disks in its data centers and decrypts the data when you
  /// access it. For more information about server-side encryption, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Using
  /// Server-Side Encryption</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  ///
  /// Parameter [storageClass] :
  /// If the <code>x-amz-storage-class</code> header is not used, the copied
  /// object will be stored in the <code>STANDARD</code> Storage Class by
  /// default. The <code>STANDARD</code> storage class provides high durability
  /// and high availability. Depending on performance needs, you can specify a
  /// different Storage Class.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets </b> - For directory buckets, only the S3 Express One
  /// Zone storage class is supported to store newly created objects.
  /// Unsupported storage class values won't write a destination object and will
  /// respond with the HTTP status code <code>400 Bad Request</code>.
  /// </li>
  /// <li>
  /// <b>Amazon S3 on Outposts </b> - S3 on Outposts only uses the
  /// <code>OUTPOSTS</code> Storage Class.
  /// </li>
  /// </ul> </note>
  /// You can use the <code>CopyObject</code> action to change the storage class
  /// of an object that is already stored in Amazon S3 by using the
  /// <code>x-amz-storage-class</code> header. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
  /// Classes</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Before using an object as a source object for the copy operation, you must
  /// restore a copy of it if it meets any of the following conditions:
  ///
  /// <ul>
  /// <li>
  /// The storage class of the source object is <code>GLACIER</code> or
  /// <code>DEEP_ARCHIVE</code>.
  /// </li>
  /// <li>
  /// The storage class of the source object is <code>INTELLIGENT_TIERING</code>
  /// and it's <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/intelligent-tiering-overview.html#intel-tiering-tier-definition">S3
  /// Intelligent-Tiering access tier</a> is <code>Archive Access</code> or
  /// <code>Deep Archive Access</code>.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html">Copying
  /// Objects</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [tagging] :
  /// The tag-set for the object copy in the destination bucket. This value must
  /// be used in conjunction with the <code>x-amz-tagging-directive</code> if
  /// you choose <code>REPLACE</code> for the
  /// <code>x-amz-tagging-directive</code>. If you choose <code>COPY</code> for
  /// the <code>x-amz-tagging-directive</code>, you don't need to set the
  /// <code>x-amz-tagging</code> header, because the tag-set will be copied from
  /// the source object directly. The tag-set must be encoded as URL Query
  /// parameters.
  ///
  /// The default value is the empty value.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets in a
  /// <code>CopyObject</code> operation, only the empty tag-set is supported.
  /// Any requests that attempt to write non-empty tags into directory buckets
  /// will receive a <code>501 Not Implemented</code> status code. When the
  /// destination bucket is a directory bucket, you will receive a <code>501 Not
  /// Implemented</code> response in any of the following situations:
  ///
  /// <ul>
  /// <li>
  /// When you attempt to <code>COPY</code> the tag-set from an S3 source object
  /// that has non-empty tags.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a source object
  /// and set a non-empty value to <code>x-amz-tagging</code>.
  /// </li>
  /// <li>
  /// When you don't set the <code>x-amz-tagging-directive</code> header and the
  /// source object has non-empty tags. This is because the default value of
  /// <code>x-amz-tagging-directive</code> is <code>COPY</code>.
  /// </li>
  /// </ul>
  /// Because only the empty tag-set is supported for directory buckets in a
  /// <code>CopyObject</code> operation, the following situations are allowed:
  ///
  /// <ul>
  /// <li>
  /// When you attempt to <code>COPY</code> the tag-set from a directory bucket
  /// source object that has no tags to a general purpose bucket. It copies an
  /// empty tag-set to the destination object.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a directory bucket
  /// source object and set the <code>x-amz-tagging</code> value of the
  /// directory bucket destination object to empty.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a general purpose
  /// bucket source object that has non-empty tags and set the
  /// <code>x-amz-tagging</code> value of the directory bucket destination
  /// object to empty.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a directory bucket
  /// source object and don't set the <code>x-amz-tagging</code> value of the
  /// directory bucket destination object. This is because the default value of
  /// <code>x-amz-tagging</code> is the empty value.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [taggingDirective] :
  /// Specifies whether the object tag-set is copied from the source object or
  /// replaced with the tag-set that's provided in the request.
  ///
  /// The default value is <code>COPY</code>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets in a
  /// <code>CopyObject</code> operation, only the empty tag-set is supported.
  /// Any requests that attempt to write non-empty tags into directory buckets
  /// will receive a <code>501 Not Implemented</code> status code. When the
  /// destination bucket is a directory bucket, you will receive a <code>501 Not
  /// Implemented</code> response in any of the following situations:
  ///
  /// <ul>
  /// <li>
  /// When you attempt to <code>COPY</code> the tag-set from an S3 source object
  /// that has non-empty tags.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a source object
  /// and set a non-empty value to <code>x-amz-tagging</code>.
  /// </li>
  /// <li>
  /// When you don't set the <code>x-amz-tagging-directive</code> header and the
  /// source object has non-empty tags. This is because the default value of
  /// <code>x-amz-tagging-directive</code> is <code>COPY</code>.
  /// </li>
  /// </ul>
  /// Because only the empty tag-set is supported for directory buckets in a
  /// <code>CopyObject</code> operation, the following situations are allowed:
  ///
  /// <ul>
  /// <li>
  /// When you attempt to <code>COPY</code> the tag-set from a directory bucket
  /// source object that has no tags to a general purpose bucket. It copies an
  /// empty tag-set to the destination object.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a directory bucket
  /// source object and set the <code>x-amz-tagging</code> value of the
  /// directory bucket destination object to empty.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a general purpose
  /// bucket source object that has non-empty tags and set the
  /// <code>x-amz-tagging</code> value of the directory bucket destination
  /// object to empty.
  /// </li>
  /// <li>
  /// When you attempt to <code>REPLACE</code> the tag-set of a directory bucket
  /// source object and don't set the <code>x-amz-tagging</code> value of the
  /// directory bucket destination object. This is because the default value of
  /// <code>x-amz-tagging</code> is the empty value.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [websiteRedirectLocation] :
  /// If the destination bucket is configured as a website, redirects requests
  /// for this object copy to another object in the same bucket or to an
  /// external URL. Amazon S3 stores the value of this header in the object
  /// metadata. This value is unique to each object and is not copied when using
  /// the <code>x-amz-metadata-directive</code> header. Instead, you may opt to
  /// provide this header in combination with the
  /// <code>x-amz-metadata-directive</code> header.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<CopyObjectOutput> copyObject({
    required String bucket,
    required String copySource,
    required String key,
    ObjectCannedACL? acl,
    bool? bucketKeyEnabled,
    String? cacheControl,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentDisposition,
    String? contentEncoding,
    String? contentLanguage,
    String? contentType,
    String? copySourceIfMatch,
    DateTime? copySourceIfModifiedSince,
    String? copySourceIfNoneMatch,
    DateTime? copySourceIfUnmodifiedSince,
    String? copySourceSSECustomerAlgorithm,
    Uint8List? copySourceSSECustomerKey,
    String? copySourceSSECustomerKeyMD5,
    String? expectedBucketOwner,
    String? expectedSourceBucketOwner,
    DateTime? expires,
    String? grantFullControl,
    String? grantRead,
    String? grantReadACP,
    String? grantWriteACP,
    Map<String, String>? metadata,
    MetadataDirective? metadataDirective,
    ObjectLockLegalHoldStatus? objectLockLegalHoldStatus,
    ObjectLockMode? objectLockMode,
    DateTime? objectLockRetainUntilDate,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    String? sSEKMSEncryptionContext,
    String? sSEKMSKeyId,
    ServerSideEncryption? serverSideEncryption,
    StorageClass? storageClass,
    String? tagging,
    TaggingDirective? taggingDirective,
    String? websiteRedirectLocation,
  }) async {
    final headers = <String, String>{
      'x-amz-copy-source': copySource.toString(),
      if (acl != null) 'x-amz-acl': acl.value,
      if (bucketKeyEnabled != null)
        'x-amz-server-side-encryption-bucket-key-enabled':
            bucketKeyEnabled.toString(),
      if (cacheControl != null) 'Cache-Control': cacheControl.toString(),
      if (checksumAlgorithm != null)
        'x-amz-checksum-algorithm': checksumAlgorithm.value,
      if (contentDisposition != null)
        'Content-Disposition': contentDisposition.toString(),
      if (contentEncoding != null)
        'Content-Encoding': contentEncoding.toString(),
      if (contentLanguage != null)
        'Content-Language': contentLanguage.toString(),
      if (contentType != null) 'Content-Type': contentType.toString(),
      if (copySourceIfMatch != null)
        'x-amz-copy-source-if-match': copySourceIfMatch.toString(),
      if (copySourceIfModifiedSince != null)
        'x-amz-copy-source-if-modified-since':
            _s.rfc822ToJson(copySourceIfModifiedSince),
      if (copySourceIfNoneMatch != null)
        'x-amz-copy-source-if-none-match': copySourceIfNoneMatch.toString(),
      if (copySourceIfUnmodifiedSince != null)
        'x-amz-copy-source-if-unmodified-since':
            _s.rfc822ToJson(copySourceIfUnmodifiedSince),
      if (copySourceSSECustomerAlgorithm != null)
        'x-amz-copy-source-server-side-encryption-customer-algorithm':
            copySourceSSECustomerAlgorithm.toString(),
      if (copySourceSSECustomerKey != null)
        'x-amz-copy-source-server-side-encryption-customer-key':
            copySourceSSECustomerKey.toString(),
      if (copySourceSSECustomerKeyMD5 != null)
        'x-amz-copy-source-server-side-encryption-customer-key-MD5':
            copySourceSSECustomerKeyMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (expectedSourceBucketOwner != null)
        'x-amz-source-expected-bucket-owner':
            expectedSourceBucketOwner.toString(),
      if (expires != null) 'Expires': _s.rfc822ToJson(expires),
      if (grantFullControl != null)
        'x-amz-grant-full-control': grantFullControl.toString(),
      if (grantRead != null) 'x-amz-grant-read': grantRead.toString(),
      if (grantReadACP != null) 'x-amz-grant-read-acp': grantReadACP.toString(),
      if (grantWriteACP != null)
        'x-amz-grant-write-acp': grantWriteACP.toString(),
      if (metadata != null)
        ...metadata.map((key, value) => MapEntry('x-amz-meta-$key', value)),
      if (metadataDirective != null)
        'x-amz-metadata-directive': metadataDirective.value,
      if (objectLockLegalHoldStatus != null)
        'x-amz-object-lock-legal-hold': objectLockLegalHoldStatus.value,
      if (objectLockMode != null)
        'x-amz-object-lock-mode': objectLockMode.value,
      if (objectLockRetainUntilDate != null)
        'x-amz-object-lock-retain-until-date':
            _s.iso8601ToJson(objectLockRetainUntilDate),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
      if (sSEKMSEncryptionContext != null)
        'x-amz-server-side-encryption-context':
            sSEKMSEncryptionContext.toString(),
      if (sSEKMSKeyId != null)
        'x-amz-server-side-encryption-aws-kms-key-id': sSEKMSKeyId.toString(),
      if (serverSideEncryption != null)
        'x-amz-server-side-encryption': serverSideEncryption.value,
      if (storageClass != null) 'x-amz-storage-class': storageClass.value,
      if (tagging != null) 'x-amz-tagging': tagging.toString(),
      if (taggingDirective != null)
        'x-amz-tagging-directive': taggingDirective.value,
      if (websiteRedirectLocation != null)
        'x-amz-website-redirect-location': websiteRedirectLocation.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return CopyObjectOutput(
      copyObjectResult: CopyObjectResult.fromXml($elem),
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      copySourceVersionId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-copy-source-version-id'),
      expiration:
          _s.extractHeaderStringValue($result.headers, 'x-amz-expiration'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSEncryptionContext: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-context'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// <note>
  /// This action creates an Amazon S3 bucket. To create an Amazon S3 on
  /// Outposts bucket, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_CreateBucket.html">
  /// <code>CreateBucket</code> </a>.
  /// </note>
  /// Creates a new S3 bucket. To create a bucket, you must set up Amazon S3 and
  /// have a valid Amazon Web Services Access Key ID to authenticate requests.
  /// Anonymous requests are never allowed to create buckets. By creating the
  /// bucket, you become the bucket owner.
  ///
  /// There are two types of buckets: general purpose buckets and directory
  /// buckets. For more information about these bucket types, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html">Creating,
  /// configuring, and working with Amazon S3 buckets</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>General purpose buckets</b> - If you send your
  /// <code>CreateBucket</code> request to the <code>s3.amazonaws.com</code>
  /// global endpoint, the request goes to the <code>us-east-1</code> Region. So
  /// the signature calculations in Signature Version 4 must use
  /// <code>us-east-1</code> as the Region, even if the location constraint in
  /// the request specifies another Region where the bucket is to be created. If
  /// you create a bucket in a Region other than US East (N. Virginia), your
  /// application must be able to handle 307 redirect. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html">Virtual
  /// hosting of buckets</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Regional endpoint. These endpoints support
  /// path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - In addition to the
  /// <code>s3:CreateBucket</code> permission, the following permissions are
  /// required in a policy when your <code>CreateBucket</code> request includes
  /// specific headers:
  ///
  /// <ul>
  /// <li>
  /// <b>Access control lists (ACLs)</b> - In your <code>CreateBucket</code>
  /// request, if you specify an access control list (ACL) and set it to
  /// <code>public-read</code>, <code>public-read-write</code>,
  /// <code>authenticated-read</code>, or if you explicitly specify any other
  /// custom ACLs, both <code>s3:CreateBucket</code> and
  /// <code>s3:PutBucketAcl</code> permissions are required. In your
  /// <code>CreateBucket</code> request, if you set the ACL to
  /// <code>private</code>, or if you don't specify any ACLs, only the
  /// <code>s3:CreateBucket</code> permission is required.
  /// </li>
  /// <li>
  /// <b>Object Lock</b> - In your <code>CreateBucket</code> request, if you set
  /// <code>x-amz-bucket-object-lock-enabled</code> to true, the
  /// <code>s3:PutBucketObjectLockConfiguration</code> and
  /// <code>s3:PutBucketVersioning</code> permissions are required.
  /// </li>
  /// <li>
  /// <b>S3 Object Ownership</b> - If your <code>CreateBucket</code> request
  /// includes the <code>x-amz-object-ownership</code> header, then the
  /// <code>s3:PutBucketOwnershipControls</code> permission is required.
  /// <important>
  /// To set an ACL on a bucket as part of a <code>CreateBucket</code> request,
  /// you must explicitly set S3 Object Ownership for the bucket to a different
  /// value than the default, <code>BucketOwnerEnforced</code>. Additionally, if
  /// your desired bucket ACL grants public access, you must first create the
  /// bucket (without the bucket ACL) and then explicitly disable Block Public
  /// Access on the bucket before using <code>PutBucketAcl</code> to set the
  /// ACL. If you try to create a bucket with a public ACL, the request will
  /// fail.
  ///
  /// For the majority of modern use cases in S3, we recommend that you keep all
  /// Block Public Access settings enabled and keep ACLs disabled. If you would
  /// like to share data with users outside of your account, you can use bucket
  /// policies as needed. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling
  /// ownership of objects and disabling ACLs for your bucket </a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html">Blocking
  /// public access to your Amazon S3 storage </a> in the <i>Amazon S3 User
  /// Guide</i>.
  /// </important> </li>
  /// <li>
  /// <b>S3 Block Public Access</b> - If your specific use case requires
  /// granting public access to your S3 resources, you can disable Block Public
  /// Access. Specifically, you can create a new bucket with Block Public Access
  /// enabled, then separately call the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeletePublicAccessBlock.html">
  /// <code>DeletePublicAccessBlock</code> </a> API. To use this operation, you
  /// must have the <code>s3:PutBucketPublicAccessBlock</code> permission. For
  /// more information about S3 Block Public Access, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html">Blocking
  /// public access to your Amazon S3 storage </a> in the <i>Amazon S3 User
  /// Guide</i>.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - You must have the
  /// <code>s3express:CreateBucket</code> permission in an IAM identity-based
  /// policy instead of a bucket policy. Cross-account access to this API
  /// operation isn't supported. This operation can only be performed by the
  /// Amazon Web Services account that owns the resource. For more information
  /// about directory bucket policies and permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam.html">Amazon
  /// Web Services Identity and Access Management (IAM) for S3 Express One
  /// Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// <important>
  /// The permissions for ACLs, Object Lock, S3 Object Ownership, and S3 Block
  /// Public Access are not supported for directory buckets. For directory
  /// buckets, all Block Public Access settings are enabled at the bucket level
  /// and S3 Object Ownership is set to Bucket owner enforced (ACLs disabled).
  /// These settings can't be modified.
  ///
  /// For more information about permissions for creating and working with
  /// directory buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html">Directory
  /// buckets</a> in the <i>Amazon S3 User Guide</i>. For more information about
  /// supported S3 features for directory buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-one-zone.html#s3-express-features">Features
  /// of S3 Express One Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </important> </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is
  /// <code>s3express-control.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>CreateBucket</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html">DeleteBucket</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [BucketAlreadyExists].
  /// May throw [BucketAlreadyOwnedByYou].
  ///
  /// Parameter [bucket] :
  /// The name of the bucket to create.
  ///
  /// <b>General purpose buckets</b> - For information about bucket naming
  /// restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html">Bucket
  /// naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Directory buckets </b> - When you use this operation with a directory
  /// bucket, you must use path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. Directory bucket
  /// names must be unique in the chosen Availability Zone. Bucket names must
  /// also follow the format <code>
  /// <i>bucket_base_name</i>--<i>az_id</i>--x-s3</code> (for example, <code>
  /// <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>). For information
  /// about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>
  ///
  /// Parameter [acl] :
  /// The canned ACL to apply to the bucket.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [createBucketConfiguration] :
  /// The configuration information for the bucket.
  ///
  /// Parameter [grantFullControl] :
  /// Allows grantee the read, write, read ACP, and write ACP permissions on the
  /// bucket.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [grantRead] :
  /// Allows grantee to list the objects in the bucket.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [grantReadACP] :
  /// Allows grantee to read the bucket ACL.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [grantWrite] :
  /// Allows grantee to create new objects in the bucket.
  ///
  /// For the bucket and object owners of existing objects, also allows
  /// deletions and overwrites of those objects.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [grantWriteACP] :
  /// Allows grantee to write the ACL for the applicable bucket.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockEnabledForBucket] :
  /// Specifies whether you want S3 Object Lock to be enabled for the new
  /// bucket.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<CreateBucketOutput> createBucket({
    required String bucket,
    BucketCannedACL? acl,
    CreateBucketConfiguration? createBucketConfiguration,
    String? grantFullControl,
    String? grantRead,
    String? grantReadACP,
    String? grantWrite,
    String? grantWriteACP,
    bool? objectLockEnabledForBucket,
    ObjectOwnership? objectOwnership,
  }) async {
    final headers = <String, String>{
      if (acl != null) 'x-amz-acl': acl.value,
      if (grantFullControl != null)
        'x-amz-grant-full-control': grantFullControl.toString(),
      if (grantRead != null) 'x-amz-grant-read': grantRead.toString(),
      if (grantReadACP != null) 'x-amz-grant-read-acp': grantReadACP.toString(),
      if (grantWrite != null) 'x-amz-grant-write': grantWrite.toString(),
      if (grantWriteACP != null)
        'x-amz-grant-write-acp': grantWriteACP.toString(),
      if (objectLockEnabledForBucket != null)
        'x-amz-bucket-object-lock-enabled':
            objectLockEnabledForBucket.toString(),
      if (objectOwnership != null)
        'x-amz-object-ownership': objectOwnership.value,
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}',
      headers: headers,
      payload: createBucketConfiguration?.toXml('CreateBucketConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return CreateBucketOutput(
      location: _s.extractHeaderStringValue($result.headers, 'Location'),
    );
  }

  /// This action initiates a multipart upload and returns an upload ID. This
  /// upload ID is used to associate all of the parts in the specific multipart
  /// upload. You specify this upload ID in each of your subsequent upload part
  /// requests (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>).
  /// You also include this upload ID in the final request to either complete or
  /// abort the multipart upload request. For more information about multipart
  /// uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart
  /// Upload Overview</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// After you initiate a multipart upload and upload one or more parts, to
  /// stop being charged for storing the uploaded parts, you must either
  /// complete or abort the multipart upload. Amazon S3 frees up the space used
  /// to store the parts and stops charging you for storing them only after you
  /// either complete or abort a multipart upload.
  /// </note>
  /// If you have configured a lifecycle rule to abort incomplete multipart
  /// uploads, the created multipart upload must be completed within the number
  /// of days specified in the bucket lifecycle configuration. Otherwise, the
  /// incomplete multipart upload becomes eligible for an abort action and
  /// Amazon S3 aborts the multipart upload. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
  /// Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration</a>.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets </b> - S3 Lifecycle is not supported by directory
  /// buckets.
  /// </li>
  /// <li>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note> <dl> <dt>Request signing</dt> <dd>
  /// For request signing, multipart upload is just a series of regular
  /// requests. You initiate a multipart upload, send one or more requests to
  /// upload parts, and then complete the multipart upload process. You sign
  /// each request individually. There is nothing special about signing
  /// multipart upload requests. For more information about signing, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
  /// Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </dd> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - For information about the
  /// permissions required to use the multipart upload API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// upload and permissions</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// To perform a multipart upload with encryption by using an Amazon Web
  /// Services KMS key, the requester must have permission to the
  /// <code>kms:Decrypt</code> and <code>kms:GenerateDataKey*</code> actions on
  /// the key. These permissions are required because Amazon S3 must decrypt and
  /// read data from the encrypted file parts before it completes the multipart
  /// upload. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/mpuoverview.html#mpuAndPermissions">Multipart
  /// upload API and permissions</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">Protecting
  /// data using server-side encryption with Amazon Web Services KMS</a> in the
  /// <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Encryption</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose buckets</b> - Server-side encryption is for data
  /// encryption at rest. Amazon S3 encrypts your data as it writes it to disks
  /// in its data centers and decrypts it when you access it. Amazon S3
  /// automatically encrypts all new objects that are uploaded to an S3 bucket.
  /// When doing a multipart upload, if you don't specify encryption information
  /// in your request, the encryption setting of the uploaded parts is set to
  /// the default encryption configuration of the destination bucket. By
  /// default, all buckets have a base level of encryption configuration that
  /// uses server-side encryption with Amazon S3 managed keys (SSE-S3). If the
  /// destination bucket has a default encryption configuration that uses
  /// server-side encryption with an Key Management Service (KMS) key (SSE-KMS),
  /// or a customer-provided encryption key (SSE-C), Amazon S3 uses the
  /// corresponding KMS key, or a customer-provided key to encrypt the uploaded
  /// parts. When you perform a CreateMultipartUpload operation, if you want to
  /// use a different type of encryption setting for the uploaded parts, you can
  /// request that Amazon S3 encrypts the object with a different encryption key
  /// (such as an Amazon S3 managed key, a KMS key, or a customer-provided key).
  /// When the encryption setting in your request is different from the default
  /// encryption configuration of the destination bucket, the encryption setting
  /// in your request takes precedence. If you choose to provide your own
  /// encryption key, the request headers you provide in <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a>
  /// requests must match the headers you used in the
  /// <code>CreateMultipartUpload</code> request.
  ///
  /// <ul>
  /// <li>
  /// Use KMS keys (SSE-KMS) that include the Amazon Web Services managed key
  /// (<code>aws/s3</code>) and KMS customer managed keys stored in Key
  /// Management Service (KMS) – If you want Amazon Web Services to manage the
  /// keys used to encrypt data, specify the following headers in the request.
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-aws-kms-key-id</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-context</code>
  /// </li>
  /// </ul> <note>
  /// <ul>
  /// <li>
  /// If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but
  /// don't provide <code>x-amz-server-side-encryption-aws-kms-key-id</code>,
  /// Amazon S3 uses the Amazon Web Services managed key (<code>aws/s3</code>
  /// key) in KMS to protect the data.
  /// </li>
  /// <li>
  /// To perform a multipart upload with encryption by using an Amazon Web
  /// Services KMS key, the requester must have permission to the
  /// <code>kms:Decrypt</code> and <code>kms:GenerateDataKey*</code> actions on
  /// the key. These permissions are required because Amazon S3 must decrypt and
  /// read data from the encrypted file parts before it completes the multipart
  /// upload. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/mpuoverview.html#mpuAndPermissions">Multipart
  /// upload API and permissions</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">Protecting
  /// data using server-side encryption with Amazon Web Services KMS</a> in the
  /// <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// If your Identity and Access Management (IAM) user or role is in the same
  /// Amazon Web Services account as the KMS key, then you must have these
  /// permissions on the key policy. If your IAM user or role is in a different
  /// account from the key, then you must have the permissions on both the key
  /// policy and your IAM user or role.
  /// </li>
  /// <li>
  /// All <code>GET</code> and <code>PUT</code> requests for an object protected
  /// by KMS fail if you don't make them by using Secure Sockets Layer (SSL),
  /// Transport Layer Security (TLS), or Signature Version 4. For information
  /// about configuring any of the officially supported Amazon Web Services SDKs
  /// and Amazon Web Services CLI, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying
  /// the Signature Version in Request Authentication</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </li>
  /// </ul> </note>
  /// For more information about server-side encryption with KMS keys (SSE-KMS),
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">Protecting
  /// Data Using Server-Side Encryption with KMS keys</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </li>
  /// <li>
  /// Use customer-provided encryption keys (SSE-C) – If you want to manage your
  /// own encryption keys, provide all the following headers in the request.
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-algorithm</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key-MD5</code>
  /// </li>
  /// </ul>
  /// For more information about server-side encryption with customer-provided
  /// encryption keys (SSE-C), see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html">
  /// Protecting data using server-side encryption with customer-provided
  /// encryption keys (SSE-C)</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory buckets</b> -For directory buckets, only server-side
  /// encryption with Amazon S3 managed keys (SSE-S3) (<code>AES256</code>) is
  /// supported.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to
  /// <code>CreateMultipartUpload</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket where the multipart upload is initiated and where
  /// the object is uploaded.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which the multipart upload is to be initiated.
  ///
  /// Parameter [acl] :
  /// The canned ACL to apply to the object. Amazon S3 supports a set of
  /// predefined ACLs, known as <i>canned ACLs</i>. Each canned ACL has a
  /// predefined set of grantees and permissions. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
  /// ACL</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// By default, all objects are private. Only the owner has full access
  /// control. When uploading an object, you can grant access permissions to
  /// individual Amazon Web Services accounts or to predefined groups defined by
  /// Amazon S3. These permissions are then added to the access control list
  /// (ACL) on the new object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Using
  /// ACLs</a>. One way to grant the permissions using the request headers is to
  /// specify a canned ACL with the <code>x-amz-acl</code> request header.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [bucketKeyEnabled] :
  /// Specifies whether Amazon S3 should use an S3 Bucket Key for object
  /// encryption with server-side encryption using Key Management Service (KMS)
  /// keys (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3
  /// to use an S3 Bucket Key for object encryption with SSE-KMS.
  ///
  /// Specifying this header with an object action doesn’t affect bucket-level
  /// settings for S3 Bucket Key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [cacheControl] :
  /// Specifies caching behavior along the request/reply chain.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm that you want Amazon S3 to use to create the
  /// checksum for the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [contentDisposition] :
  /// Specifies presentational information for the object.
  ///
  /// Parameter [contentEncoding] :
  /// Specifies what content encodings have been applied to the object and thus
  /// what decoding mechanisms must be applied to obtain the media-type
  /// referenced by the Content-Type header field.
  /// <note>
  /// For directory buckets, only the <code>aws-chunked</code> value is
  /// supported in this header field.
  /// </note>
  ///
  /// Parameter [contentLanguage] :
  /// The language that the content is in.
  ///
  /// Parameter [contentType] :
  /// A standard MIME type describing the format of the object data.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [expires] :
  /// The date and time at which the object is no longer cacheable.
  ///
  /// Parameter [grantFullControl] :
  /// Specify access permissions explicitly to give the grantee READ, READ_ACP,
  /// and WRITE_ACP permissions on the object.
  ///
  /// By default, all objects are private. Only the owner has full access
  /// control. When uploading an object, you can use this header to explicitly
  /// grant access permissions to specific Amazon Web Services accounts or
  /// groups. This header maps to specific permissions that Amazon S3 supports
  /// in an ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// You specify each grantee as a type=value pair, where the type is one of
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// <code>id</code> – if the value specified is the canonical user ID of an
  /// Amazon Web Services account
  /// </li>
  /// <li>
  /// <code>uri</code> – if you are granting permissions to a predefined group
  /// </li>
  /// <li>
  /// <code>emailAddress</code> – if the value specified is the email address of
  /// an Amazon Web Services account
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul>
  /// For example, the following <code>x-amz-grant-read</code> header grants the
  /// Amazon Web Services accounts identified by account IDs permissions to read
  /// object data and its metadata:
  ///
  /// <code>x-amz-grant-read: id="11112222333", id="444455556666" </code>
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantRead] :
  /// Specify access permissions explicitly to allow grantee to read the object
  /// data and its metadata.
  ///
  /// By default, all objects are private. Only the owner has full access
  /// control. When uploading an object, you can use this header to explicitly
  /// grant access permissions to specific Amazon Web Services accounts or
  /// groups. This header maps to specific permissions that Amazon S3 supports
  /// in an ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// You specify each grantee as a type=value pair, where the type is one of
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// <code>id</code> – if the value specified is the canonical user ID of an
  /// Amazon Web Services account
  /// </li>
  /// <li>
  /// <code>uri</code> – if you are granting permissions to a predefined group
  /// </li>
  /// <li>
  /// <code>emailAddress</code> – if the value specified is the email address of
  /// an Amazon Web Services account
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul>
  /// For example, the following <code>x-amz-grant-read</code> header grants the
  /// Amazon Web Services accounts identified by account IDs permissions to read
  /// object data and its metadata:
  ///
  /// <code>x-amz-grant-read: id="11112222333", id="444455556666" </code>
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantReadACP] :
  /// Specify access permissions explicitly to allows grantee to read the object
  /// ACL.
  ///
  /// By default, all objects are private. Only the owner has full access
  /// control. When uploading an object, you can use this header to explicitly
  /// grant access permissions to specific Amazon Web Services accounts or
  /// groups. This header maps to specific permissions that Amazon S3 supports
  /// in an ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// You specify each grantee as a type=value pair, where the type is one of
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// <code>id</code> – if the value specified is the canonical user ID of an
  /// Amazon Web Services account
  /// </li>
  /// <li>
  /// <code>uri</code> – if you are granting permissions to a predefined group
  /// </li>
  /// <li>
  /// <code>emailAddress</code> – if the value specified is the email address of
  /// an Amazon Web Services account
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul>
  /// For example, the following <code>x-amz-grant-read</code> header grants the
  /// Amazon Web Services accounts identified by account IDs permissions to read
  /// object data and its metadata:
  ///
  /// <code>x-amz-grant-read: id="11112222333", id="444455556666" </code>
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantWriteACP] :
  /// Specify access permissions explicitly to allows grantee to allow grantee
  /// to write the ACL for the applicable object.
  ///
  /// By default, all objects are private. Only the owner has full access
  /// control. When uploading an object, you can use this header to explicitly
  /// grant access permissions to specific Amazon Web Services accounts or
  /// groups. This header maps to specific permissions that Amazon S3 supports
  /// in an ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// You specify each grantee as a type=value pair, where the type is one of
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// <code>id</code> – if the value specified is the canonical user ID of an
  /// Amazon Web Services account
  /// </li>
  /// <li>
  /// <code>uri</code> – if you are granting permissions to a predefined group
  /// </li>
  /// <li>
  /// <code>emailAddress</code> – if the value specified is the email address of
  /// an Amazon Web Services account
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul>
  /// For example, the following <code>x-amz-grant-read</code> header grants the
  /// Amazon Web Services accounts identified by account IDs permissions to read
  /// object data and its metadata:
  ///
  /// <code>x-amz-grant-read: id="11112222333", id="444455556666" </code>
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [metadata] :
  /// A map of metadata to store with the object in S3.
  ///
  /// Parameter [objectLockLegalHoldStatus] :
  /// Specifies whether you want to apply a legal hold to the uploaded object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockMode] :
  /// Specifies the Object Lock mode that you want to apply to the uploaded
  /// object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockRetainUntilDate] :
  /// Specifies the date and time when you want the Object Lock to expire.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// AES256).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded; Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the customer-provided encryption key
  /// according to RFC 1321. Amazon S3 uses this header for a message integrity
  /// check to ensure that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSEKMSEncryptionContext] :
  /// Specifies the Amazon Web Services KMS Encryption Context to use for object
  /// encryption. The value of this header is a base64-encoded UTF-8 string
  /// holding JSON with the encryption context key-value pairs.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSEKMSKeyId] :
  /// Specifies the ID (Key ID, Key ARN, or Key Alias) of the symmetric
  /// encryption customer managed key to use for object encryption.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [serverSideEncryption] :
  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  ///
  /// Parameter [storageClass] :
  /// By default, Amazon S3 uses the STANDARD Storage Class to store newly
  /// created objects. The STANDARD storage class provides high durability and
  /// high availability. Depending on performance needs, you can specify a
  /// different Storage Class. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
  /// Classes</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <ul>
  /// <li>
  /// For directory buckets, only the S3 Express One Zone storage class is
  /// supported to store newly created objects.
  /// </li>
  /// <li>
  /// Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [tagging] :
  /// The tag-set for the object. The tag-set must be encoded as URL Query
  /// parameters.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [websiteRedirectLocation] :
  /// If the bucket is configured as a website, redirects requests for this
  /// object to another object in the same bucket or to an external URL. Amazon
  /// S3 stores the value of this header in the object metadata.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<CreateMultipartUploadOutput> createMultipartUpload({
    required String bucket,
    required String key,
    ObjectCannedACL? acl,
    bool? bucketKeyEnabled,
    String? cacheControl,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentDisposition,
    String? contentEncoding,
    String? contentLanguage,
    String? contentType,
    String? expectedBucketOwner,
    DateTime? expires,
    String? grantFullControl,
    String? grantRead,
    String? grantReadACP,
    String? grantWriteACP,
    Map<String, String>? metadata,
    ObjectLockLegalHoldStatus? objectLockLegalHoldStatus,
    ObjectLockMode? objectLockMode,
    DateTime? objectLockRetainUntilDate,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    String? sSEKMSEncryptionContext,
    String? sSEKMSKeyId,
    ServerSideEncryption? serverSideEncryption,
    StorageClass? storageClass,
    String? tagging,
    String? websiteRedirectLocation,
  }) async {
    final headers = <String, String>{
      if (acl != null) 'x-amz-acl': acl.value,
      if (bucketKeyEnabled != null)
        'x-amz-server-side-encryption-bucket-key-enabled':
            bucketKeyEnabled.toString(),
      if (cacheControl != null) 'Cache-Control': cacheControl.toString(),
      if (checksumAlgorithm != null)
        'x-amz-checksum-algorithm': checksumAlgorithm.value,
      if (contentDisposition != null)
        'Content-Disposition': contentDisposition.toString(),
      if (contentEncoding != null)
        'Content-Encoding': contentEncoding.toString(),
      if (contentLanguage != null)
        'Content-Language': contentLanguage.toString(),
      if (contentType != null) 'Content-Type': contentType.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (expires != null) 'Expires': _s.rfc822ToJson(expires),
      if (grantFullControl != null)
        'x-amz-grant-full-control': grantFullControl.toString(),
      if (grantRead != null) 'x-amz-grant-read': grantRead.toString(),
      if (grantReadACP != null) 'x-amz-grant-read-acp': grantReadACP.toString(),
      if (grantWriteACP != null)
        'x-amz-grant-write-acp': grantWriteACP.toString(),
      if (metadata != null)
        ...metadata.map((key, value) => MapEntry('x-amz-meta-$key', value)),
      if (objectLockLegalHoldStatus != null)
        'x-amz-object-lock-legal-hold': objectLockLegalHoldStatus.value,
      if (objectLockMode != null)
        'x-amz-object-lock-mode': objectLockMode.value,
      if (objectLockRetainUntilDate != null)
        'x-amz-object-lock-retain-until-date':
            _s.iso8601ToJson(objectLockRetainUntilDate),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
      if (sSEKMSEncryptionContext != null)
        'x-amz-server-side-encryption-context':
            sSEKMSEncryptionContext.toString(),
      if (sSEKMSKeyId != null)
        'x-amz-server-side-encryption-aws-kms-key-id': sSEKMSKeyId.toString(),
      if (serverSideEncryption != null)
        'x-amz-server-side-encryption': serverSideEncryption.value,
      if (storageClass != null) 'x-amz-storage-class': storageClass.value,
      if (tagging != null) 'x-amz-tagging': tagging.toString(),
      if (websiteRedirectLocation != null)
        'x-amz-website-redirect-location': websiteRedirectLocation.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'POST',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?uploads',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return CreateMultipartUploadOutput(
      bucket: _s.extractXmlStringValue($elem, 'Bucket'),
      key: _s.extractXmlStringValue($elem, 'Key'),
      uploadId: _s.extractXmlStringValue($elem, 'UploadId'),
      abortDate:
          _s.extractHeaderDateTimeValue($result.headers, 'x-amz-abort-date'),
      abortRuleId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-abort-rule-id'),
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      checksumAlgorithm: _s
          .extractHeaderStringValue($result.headers, 'x-amz-checksum-algorithm')
          ?.let(ChecksumAlgorithm.fromString),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSEncryptionContext: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-context'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
    );
  }

  /// Creates a session that establishes temporary security credentials to
  /// support fast authentication and authorization for the Zonal endpoint APIs
  /// on directory buckets. For more information about Zonal endpoint APIs that
  /// include the Availability Zone in the request endpoint, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-APIs.html">S3
  /// Express One Zone APIs</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// To make Zonal endpoint API requests on a directory bucket, use the
  /// <code>CreateSession</code> API operation. Specifically, you grant
  /// <code>s3express:CreateSession</code> permission to a bucket in a bucket
  /// policy or an IAM identity-based policy. Then, you use IAM credentials to
  /// make the <code>CreateSession</code> API request on the bucket, which
  /// returns temporary security credentials that include the access key ID,
  /// secret access key, session token, and expiration. These credentials have
  /// associated permissions to access the Zonal endpoint APIs. After the
  /// session is created, you don’t need to use other policies to grant
  /// permissions to each Zonal endpoint API individually. Instead, in your
  /// Zonal endpoint API requests, you sign your requests by applying the
  /// temporary security credentials of the session to the request headers and
  /// following the SigV4 protocol for authentication. You also apply the
  /// session token to the <code>x-amz-s3session-token</code> request header for
  /// authorization. Temporary security credentials are scoped to the bucket and
  /// expire after 5 minutes. After the expiration time, any calls that you make
  /// with those credentials will fail. You must use IAM credentials again to
  /// make a <code>CreateSession</code> API request that generates a new set of
  /// temporary credentials for use. Temporary credentials cannot be extended or
  /// refreshed beyond the original specified interval.
  ///
  /// If you use Amazon Web Services SDKs, SDKs handle the session token
  /// refreshes automatically to avoid service interruptions when a session
  /// expires. We recommend that you use the Amazon Web Services SDKs to
  /// initiate and manage requests to the CreateSession API. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-optimizing-performance-guidelines-design-patterns.html#s3-express-optimizing-performance-session-authentication">Performance
  /// guidelines and design patterns</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <ul>
  /// <li>
  /// You must make requests for this API operation to the Zonal endpoint. These
  /// endpoints support virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b> <code>CopyObject</code> API operation</b> - Unlike other Zonal
  /// endpoint APIs, the <code>CopyObject</code> API operation doesn't use the
  /// temporary security credentials returned from the
  /// <code>CreateSession</code> API operation for authentication and
  /// authorization. For information about authentication and authorization of
  /// the <code>CopyObject</code> API operation on directory buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html">CopyObject</a>.
  /// </li>
  /// <li>
  /// <b> <code>HeadBucket</code> API operation</b> - Unlike other Zonal
  /// endpoint APIs, the <code>HeadBucket</code> API operation doesn't use the
  /// temporary security credentials returned from the
  /// <code>CreateSession</code> API operation for authentication and
  /// authorization. For information about authentication and authorization of
  /// the <code>HeadBucket</code> API operation on directory buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadBucket.html">HeadBucket</a>.
  /// </li>
  /// </ul> </note> <dl> <dt>Permissions</dt> <dd>
  /// To obtain temporary security credentials, you must create a bucket policy
  /// or an IAM identity-based policy that grants
  /// <code>s3express:CreateSession</code> permission to the bucket. In a
  /// policy, you can have the <code>s3express:SessionMode</code> condition key
  /// to control who can create a <code>ReadWrite</code> or
  /// <code>ReadOnly</code> session. For more information about
  /// <code>ReadWrite</code> or <code>ReadOnly</code> sessions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html#API_CreateSession_RequestParameters">
  /// <code>x-amz-create-session-mode</code> </a>. For example policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example
  /// bucket policies for S3 Express One Zone</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-identity-policies.html">Amazon
  /// Web Services Identity and Access Management (IAM) identity-based policies
  /// for S3 Express One Zone</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// To grant cross-account access to Zonal endpoint APIs, the bucket policy
  /// should also grant both accounts the <code>s3express:CreateSession</code>
  /// permission.
  /// </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  ///
  /// May throw [NoSuchBucket].
  ///
  /// Parameter [bucket] :
  /// The name of the bucket that you create a session for.
  ///
  /// Parameter [sessionMode] :
  /// Specifies the mode of the session that will be created, either
  /// <code>ReadWrite</code> or <code>ReadOnly</code>. By default, a
  /// <code>ReadWrite</code> session is created. A <code>ReadWrite</code>
  /// session is capable of executing all the Zonal endpoint APIs on a directory
  /// bucket. A <code>ReadOnly</code> session is constrained to execute the
  /// following Zonal endpoint APIs: <code>GetObject</code>,
  /// <code>HeadObject</code>, <code>ListObjectsV2</code>,
  /// <code>GetObjectAttributes</code>, <code>ListParts</code>, and
  /// <code>ListMultipartUploads</code>.
  Future<CreateSessionOutput> createSession({
    required String bucket,
    SessionMode? sessionMode,
  }) async {
    final headers = <String, String>{
      if (sessionMode != null) 'x-amz-create-session-mode': sessionMode.value,
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?session',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return CreateSessionOutput.fromXml($result.body);
  }

  /// Deletes the S3 bucket. All objects (including all object versions and
  /// delete markers) in the bucket must be deleted before the bucket itself can
  /// be deleted.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets</b> - If multipart uploads in a directory bucket are
  /// in progress, you can't delete the bucket until all the in-progress
  /// multipart uploads are aborted or completed.
  /// </li>
  /// <li>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Regional endpoint. These endpoints support
  /// path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - You must have the
  /// <code>s3:DeleteBucket</code> permission on the specified bucket in a
  /// policy.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - You must have the
  /// <code>s3express:DeleteBucket</code> permission in an IAM identity-based
  /// policy instead of a bucket policy. Cross-account access to this API
  /// operation isn't supported. This operation can only be performed by the
  /// Amazon Web Services account that owns the resource. For more information
  /// about directory bucket policies and permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam.html">Amazon
  /// Web Services Identity and Access Management (IAM) for S3 Express One
  /// Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is
  /// <code>s3express-control.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>DeleteBucket</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// Specifies the bucket being deleted.
  ///
  /// <b>Directory buckets </b> - When you use this operation with a directory
  /// bucket, you must use path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. Directory bucket
  /// names must be unique in the chosen Availability Zone. Bucket names must
  /// also follow the format <code>
  /// <i>bucket_base_name</i>--<i>az_id</i>--x-s3</code> (for example, <code>
  /// <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>). For information
  /// about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  /// <note>
  /// For directory buckets, this header is not supported in this API operation.
  /// If you specify this header, the request fails with the HTTP status code
  /// <code>501 Not Implemented</code>.
  /// </note>
  Future<void> deleteBucket({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes an analytics configuration for the bucket (specified by the
  /// analytics configuration ID).
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutAnalyticsConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about the Amazon S3 analytics feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon
  /// S3 Analytics – Storage Class Analysis</a>.
  ///
  /// The following operations are related to
  /// <code>DeleteBucketAnalyticsConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAnalyticsConfiguration.html">GetBucketAnalyticsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketAnalyticsConfigurations.html">ListBucketAnalyticsConfigurations</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAnalyticsConfiguration.html">PutBucketAnalyticsConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket from which an analytics configuration is deleted.
  ///
  /// Parameter [id] :
  /// The ID that identifies the analytics configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketAnalyticsConfiguration({
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?analytics',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes the <code>cors</code> configuration information set for the
  /// bucket.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutBucketCORS</code> action. The bucket owner has this permission
  /// by default and can grant this permission to others.
  ///
  /// For information about <code>cors</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling
  /// Cross-Origin Resource Sharing</a> in the <i>Amazon S3 User Guide</i>.
  /// <p class="title"> <b>Related Resources</b>
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketCors.html">PutBucketCors</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTOPTIONSobject.html">RESTOPTIONSobject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// Specifies the bucket whose <code>cors</code> configuration is being
  /// deleted.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketCors({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?cors',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This implementation of the DELETE action resets the default encryption for
  /// the bucket as server-side encryption with Amazon S3 managed keys (SSE-S3).
  /// For information about the bucket default encryption feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">Amazon
  /// S3 Bucket Default Encryption</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutEncryptionConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  ///
  /// The following operations are related to
  /// <code>DeleteBucketEncryption</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketEncryption.html">PutBucketEncryption</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketEncryption.html">GetBucketEncryption</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the server-side encryption configuration
  /// to delete.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketEncryption({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?encryption',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes the S3 Intelligent-Tiering configuration from the specified
  /// bucket.
  ///
  /// The S3 Intelligent-Tiering storage class is designed to optimize storage
  /// costs by automatically moving data to the most cost-effective storage
  /// access tier, without performance impact or operational overhead. S3
  /// Intelligent-Tiering delivers automatic cost savings in three low latency
  /// and high throughput access tiers. To get the lowest storage cost on data
  /// that can be accessed in minutes to hours, you can choose to activate
  /// additional archiving capabilities.
  ///
  /// The S3 Intelligent-Tiering storage class is the ideal storage class for
  /// data with unknown, changing, or unpredictable access patterns, independent
  /// of object size or retention period. If the size of an object is less than
  /// 128 KB, it is not monitored and not eligible for auto-tiering. Smaller
  /// objects can be stored, but they are always charged at the Frequent Access
  /// tier rates in the S3 Intelligent-Tiering storage class.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage
  /// class for automatically optimizing frequently and infrequently accessed
  /// objects</a>.
  ///
  /// Operations related to
  /// <code>DeleteBucketIntelligentTieringConfiguration</code> include:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketIntelligentTieringConfiguration.html">GetBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketIntelligentTieringConfiguration.html">PutBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketIntelligentTieringConfigurations.html">ListBucketIntelligentTieringConfigurations</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose configuration you want to modify or
  /// retrieve.
  ///
  /// Parameter [id] :
  /// The ID used to identify the S3 Intelligent-Tiering configuration.
  Future<void> deleteBucketIntelligentTieringConfiguration({
    required String bucket,
    required String id,
  }) async {
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?intelligent-tiering',
      queryParams: $query,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes an inventory configuration (identified by the inventory ID) from
  /// the bucket.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutInventoryConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about the Amazon S3 inventory feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon
  /// S3 Inventory</a>.
  ///
  /// Operations related to <code>DeleteBucketInventoryConfiguration</code>
  /// include:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketInventoryConfiguration.html">GetBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketInventoryConfiguration.html">PutBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketInventoryConfigurations.html">ListBucketInventoryConfigurations</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the inventory configuration to delete.
  ///
  /// Parameter [id] :
  /// The ID used to identify the inventory configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketInventoryConfiguration({
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?inventory',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes the lifecycle configuration from the specified bucket. Amazon S3
  /// removes all the lifecycle configuration rules in the lifecycle subresource
  /// associated with the bucket. Your objects never expire, and Amazon S3 no
  /// longer automatically deletes any objects on the basis of rules contained
  /// in the deleted lifecycle configuration.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutLifecycleConfiguration</code> action. By default, the bucket
  /// owner has this permission and the bucket owner can grant this permission
  /// to others.
  ///
  /// There is usually some time lag before lifecycle configuration deletion is
  /// fully propagated to all the Amazon S3 systems.
  ///
  /// For more information about the object expiration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#intro-lifecycle-rules-actions">Elements
  /// to Describe Lifecycle Actions</a>.
  ///
  /// Related actions include:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html">GetBucketLifecycleConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name of the lifecycle to delete.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketLifecycle({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?lifecycle',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes a metrics configuration for the Amazon CloudWatch request metrics
  /// (specified by the metrics configuration ID) from the bucket. Note that
  /// this doesn't include the daily storage metrics.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutMetricsConfiguration</code> action. The bucket owner has this
  /// permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about CloudWatch request metrics for Amazon S3, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
  /// Metrics with Amazon CloudWatch</a>.
  ///
  /// The following operations are related to
  /// <code>DeleteBucketMetricsConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketMetricsConfiguration.html">GetBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html">PutBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketMetricsConfigurations.html">ListBucketMetricsConfigurations</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
  /// Metrics with Amazon CloudWatch</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the metrics configuration to delete.
  ///
  /// Parameter [id] :
  /// The ID used to identify the metrics configuration. The ID has a 64
  /// character limit and can only contain letters, numbers, periods, dashes,
  /// and underscores.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketMetricsConfiguration({
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?metrics',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Removes <code>OwnershipControls</code> for an Amazon S3 bucket. To use
  /// this operation, you must have the
  /// <code>s3:PutBucketOwnershipControls</code> permission. For more
  /// information about Amazon S3 permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a>.
  ///
  /// For information about Amazon S3 Object Ownership, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/about-object-ownership.html">Using
  /// Object Ownership</a>.
  ///
  /// The following operations are related to
  /// <code>DeleteBucketOwnershipControls</code>:
  ///
  /// <ul>
  /// <li>
  /// <a>GetBucketOwnershipControls</a>
  /// </li>
  /// <li>
  /// <a>PutBucketOwnershipControls</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The Amazon S3 bucket whose <code>OwnershipControls</code> you want to
  /// delete.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketOwnershipControls({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?ownershipControls',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Deletes the policy of a specified bucket.
  /// <note>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Regional endpoint. These endpoints support
  /// path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// If you are using an identity other than the root user of the Amazon Web
  /// Services account that owns the bucket, the calling identity must both have
  /// the <code>DeleteBucketPolicy</code> permissions on the specified bucket
  /// and belong to the bucket owner's account in order to use this operation.
  ///
  /// If you don't have <code>DeleteBucketPolicy</code> permissions, Amazon S3
  /// returns a <code>403 Access Denied</code> error. If you have the correct
  /// permissions, but you're not using an identity that belongs to the bucket
  /// owner's account, Amazon S3 returns a <code>405 Method Not Allowed</code>
  /// error.
  /// <important>
  /// To ensure that bucket owners don't inadvertently lock themselves out of
  /// their own buckets, the root principal in a bucket owner's Amazon Web
  /// Services account can perform the <code>GetBucketPolicy</code>,
  /// <code>PutBucketPolicy</code>, and <code>DeleteBucketPolicy</code> API
  /// actions, even if their bucket policy explicitly denies the root
  /// principal's access. Bucket owner root principals can only be blocked from
  /// performing these API actions by VPC endpoint policies and Amazon Web
  /// Services Organizations policies.
  /// </important>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - The
  /// <code>s3:DeleteBucketPolicy</code> permission is required in a policy. For
  /// more information about general purpose buckets bucket policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using
  /// Bucket Policies and User Policies</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation, you must have the <code>s3express:DeleteBucketPolicy</code>
  /// permission in an IAM identity-based policy instead of a bucket policy.
  /// Cross-account access to this API operation isn't supported. This operation
  /// can only be performed by the Amazon Web Services account that owns the
  /// resource. For more information about directory bucket policies and
  /// permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam.html">Amazon
  /// Web Services Identity and Access Management (IAM) for S3 Express One
  /// Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is
  /// <code>s3express-control.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>DeleteBucketPolicy</code>
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// <b>Directory buckets </b> - When you use this operation with a directory
  /// bucket, you must use path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. Directory bucket
  /// names must be unique in the chosen Availability Zone. Bucket names must
  /// also follow the format <code>
  /// <i>bucket_base_name</i>--<i>az_id</i>--x-s3</code> (for example, <code>
  /// <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>). For information
  /// about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  /// <note>
  /// For directory buckets, this header is not supported in this API operation.
  /// If you specify this header, the request fails with the HTTP status code
  /// <code>501 Not Implemented</code>.
  /// </note>
  Future<void> deleteBucketPolicy({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?policy',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes the replication configuration from the bucket.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutReplicationConfiguration</code> action. The bucket owner has
  /// these permissions by default and can grant it to others. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  /// <note>
  /// It can take a while for the deletion of a replication configuration to
  /// fully propagate.
  /// </note>
  /// For information about replication configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a>
  /// in the <i>Amazon S3 User Guide</i>.
  ///
  /// The following operations are related to
  /// <code>DeleteBucketReplication</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketReplication.html">PutBucketReplication</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketReplication.html">GetBucketReplication</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketReplication({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?replication',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Deletes the tags from the bucket.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutBucketTagging</code> action. By default, the bucket owner has
  /// this permission and can grant this permission to others.
  ///
  /// The following operations are related to <code>DeleteBucketTagging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html">GetBucketTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html">PutBucketTagging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket that has the tag set to be removed.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketTagging({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?tagging',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This action removes the website configuration for a bucket. Amazon S3
  /// returns a <code>200 OK</code> response upon successfully deleting a
  /// website configuration on the specified bucket. You will get a <code>200
  /// OK</code> response if the website configuration you are trying to delete
  /// does not exist on the bucket. Amazon S3 returns a <code>404</code>
  /// response if the bucket specified in the request does not exist.
  ///
  /// This DELETE action requires the <code>S3:DeleteBucketWebsite</code>
  /// permission. By default, only the bucket owner can delete the website
  /// configuration attached to a bucket. However, bucket owners can grant other
  /// users permission to delete the website configuration by writing a bucket
  /// policy granting them the <code>S3:DeleteBucketWebsite</code> permission.
  ///
  /// For more information about hosting websites, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting
  /// Websites on Amazon S3</a>.
  ///
  /// The following operations are related to <code>DeleteBucketWebsite</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketWebsite.html">GetBucketWebsite</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketWebsite.html">PutBucketWebsite</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name for which you want to remove the website configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deleteBucketWebsite({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?website',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Removes an object from a bucket. The behavior depends on the bucket's
  /// versioning state:
  ///
  /// <ul>
  /// <li>
  /// If bucket versioning is not enabled, the operation permanently deletes the
  /// object.
  /// </li>
  /// <li>
  /// If bucket versioning is enabled, the operation inserts a delete marker,
  /// which becomes the current version of the object. To permanently delete an
  /// object in a versioned bucket, you must include the object’s
  /// <code>versionId</code> in the request. For more information about
  /// versioning-enabled buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/DeletingObjectVersions.html">Deleting
  /// object versions from a versioning-enabled bucket</a>.
  /// </li>
  /// <li>
  /// If bucket versioning is suspended, the operation removes the object that
  /// has a null <code>versionId</code>, if there is one, and inserts a delete
  /// marker that becomes the current version of the object. If there isn't an
  /// object with a null <code>versionId</code>, and all versions of the object
  /// have a <code>versionId</code>, Amazon S3 does not remove the object and
  /// only inserts a delete marker. To permanently delete an object that has a
  /// <code>versionId</code>, you must include the object’s
  /// <code>versionId</code> in the request. For more information about
  /// versioning-suspended buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/DeletingObjectsfromVersioningSuspendedBuckets.html">Deleting
  /// objects from versioning-suspended buckets</a>.
  /// </li>
  /// </ul> <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets. For this API operation, only the <code>null</code>
  /// value of the version ID is supported by directory buckets. You can only
  /// specify <code>null</code> to the <code>versionId</code> query parameter in
  /// the request.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note>
  /// To remove a specific version, you must use the <code>versionId</code>
  /// query parameter. Using this query parameter permanently deletes the
  /// version. If the object deleted is a delete marker, Amazon S3 sets the
  /// response header <code>x-amz-delete-marker</code> to true.
  ///
  /// If the object you want to delete is in a bucket where the bucket
  /// versioning configuration is MFA Delete enabled, you must include the
  /// <code>x-amz-mfa</code> request header in the DELETE <code>versionId</code>
  /// request. Requests that include <code>x-amz-mfa</code> must use HTTPS. For
  /// more information about MFA Delete, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html">Using
  /// MFA Delete</a> in the <i>Amazon S3 User Guide</i>. To see sample requests
  /// that use versioning, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete">Sample
  /// Request</a>.
  /// <note>
  /// <b>Directory buckets</b> - MFA delete is not supported by directory
  /// buckets.
  /// </note>
  /// You can delete objects by explicitly calling DELETE Object or calling (<a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html">PutBucketLifecycle</a>)
  /// to enable Amazon S3 to remove them for you. If you want to block users or
  /// accounts from removing or deleting objects from your bucket, you must deny
  /// them the <code>s3:DeleteObject</code>,
  /// <code>s3:DeleteObjectVersion</code>, and
  /// <code>s3:PutLifeCycleConfiguration</code> actions.
  /// <note>
  /// <b>Directory buckets</b> - S3 Lifecycle is not supported by directory
  /// buckets.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - The following permissions are
  /// required in your policies when your <code>DeleteObjects</code> request
  /// includes specific headers.
  ///
  /// <ul>
  /// <li>
  /// <b> <code>s3:DeleteObject</code> </b> - To delete an object from a bucket,
  /// you must always have the <code>s3:DeleteObject</code> permission.
  /// </li>
  /// <li>
  /// <b> <code>s3:DeleteObjectVersion</code> </b> - To delete a specific
  /// version of an object from a versioning-enabled bucket, you must have the
  /// <code>s3:DeleteObjectVersion</code> permission.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following action is related to <code>DeleteObject</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name of the bucket containing the object.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Key name of the object to delete.
  ///
  /// Parameter [bypassGovernanceRetention] :
  /// Indicates whether S3 Object Lock should bypass Governance-mode
  /// restrictions to process this operation. To use this header, you must have
  /// the <code>s3:BypassGovernanceRetention</code> permission.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [mfa] :
  /// The concatenation of the authentication device's serial number, a space,
  /// and the value that is displayed on your authentication device. Required to
  /// permanently delete a versioned object if versioning is configured with MFA
  /// delete enabled.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [versionId] :
  /// Version ID used to reference a specific version of the object.
  /// <note>
  /// For directory buckets in this API operation, only the <code>null</code>
  /// value of the version ID is supported.
  /// </note>
  Future<DeleteObjectOutput> deleteObject({
    required String bucket,
    required String key,
    bool? bypassGovernanceRetention,
    String? expectedBucketOwner,
    String? mfa,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (bypassGovernanceRetention != null)
        'x-amz-bypass-governance-retention':
            bypassGovernanceRetention.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (mfa != null) 'x-amz-mfa': mfa.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'DELETE',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return DeleteObjectOutput(
      deleteMarker:
          _s.extractHeaderBoolValue($result.headers, 'x-amz-delete-marker'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Removes the entire tag set from the specified object. For more information
  /// about managing object tags, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">
  /// Object Tagging</a>.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:DeleteObjectTagging</code> action.
  ///
  /// To delete tags of a specific object version, add the
  /// <code>versionId</code> query parameter in the request. You will need
  /// permission for the <code>s3:DeleteObjectVersionTagging</code> action.
  ///
  /// The following operations are related to <code>DeleteObjectTagging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html">PutObjectTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the objects from which to remove the tags.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The key that identifies the object in the bucket from which to remove all
  /// tags.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// The versionId of the object that the tag-set will be removed from.
  Future<DeleteObjectTaggingOutput> deleteObjectTagging({
    required String bucket,
    required String key,
    String? expectedBucketOwner,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'DELETE',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?tagging',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return DeleteObjectTaggingOutput(
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// This operation enables you to delete multiple objects from a bucket using
  /// a single HTTP request. If you know the object keys that you want to
  /// delete, then this operation provides a suitable alternative to sending
  /// individual delete requests, reducing per-request overhead.
  ///
  /// The request can contain a list of up to 1000 keys that you want to delete.
  /// In the XML, you provide the object key names, and optionally, version IDs
  /// if you want to delete a specific version of the object from a
  /// versioning-enabled bucket. For each key, Amazon S3 performs a delete
  /// operation and returns the result of that delete, success or failure, in
  /// the response. Note that if the object specified in the request is not
  /// found, Amazon S3 returns the result as deleted.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note>
  /// The operation supports two modes for the response: verbose and quiet. By
  /// default, the operation uses verbose mode in which the response includes
  /// the result of deletion of each key in your request. In quiet mode the
  /// response includes only keys where the delete operation encountered an
  /// error. For a successful deletion in a quiet mode, the operation does not
  /// return any information about the delete in the response body.
  ///
  /// When performing this action on an MFA Delete enabled bucket, that attempts
  /// to delete any versioned objects, you must include an MFA token. If you do
  /// not provide one, the entire request will fail, even if there are
  /// non-versioned objects you are trying to delete. If you provide an invalid
  /// token, whether there are versioned keys in the request or not, the entire
  /// Multi-Object Delete request will fail. For information about MFA Delete,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete">MFA
  /// Delete</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <b>Directory buckets</b> - MFA delete is not supported by directory
  /// buckets.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - The following permissions are
  /// required in your policies when your <code>DeleteObjects</code> request
  /// includes specific headers.
  ///
  /// <ul>
  /// <li>
  /// <b> <code>s3:DeleteObject</code> </b> - To delete an object from a bucket,
  /// you must always specify the <code>s3:DeleteObject</code> permission.
  /// </li>
  /// <li>
  /// <b> <code>s3:DeleteObjectVersion</code> </b> - To delete a specific
  /// version of an object from a versiong-enabled bucket, you must specify the
  /// <code>s3:DeleteObjectVersion</code> permission.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Content-MD5 request header</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket</b> - The Content-MD5 request header is required
  /// for all Multi-Object Delete requests. Amazon S3 uses the header value to
  /// ensure that your request body has not been altered in transit.
  /// </li>
  /// <li>
  /// <b>Directory bucket</b> - The Content-MD5 request header or a additional
  /// checksum request header (including <code>x-amz-checksum-crc32</code>,
  /// <code>x-amz-checksum-crc32c</code>, <code>x-amz-checksum-sha1</code>, or
  /// <code>x-amz-checksum-sha256</code>) is required for all Multi-Object
  /// Delete requests.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>DeleteObjects</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the objects to delete.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [delete] :
  /// Container for the request.
  ///
  /// Parameter [bypassGovernanceRetention] :
  /// Specifies whether you want to delete this object even if it has a
  /// Governance-type Object Lock in place. To use this header, you must have
  /// the <code>s3:BypassGovernanceRetention</code> permission.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum-<i>algorithm</i> </code> or
  /// <code>x-amz-trailer</code> header sent. Otherwise, Amazon S3 fails the
  /// request with the HTTP status code <code>400 Bad Request</code>.
  ///
  /// For the <code>x-amz-checksum-<i>algorithm</i> </code> header, replace
  /// <code> <i>algorithm</i> </code> with the supported algorithm from the
  /// following list:
  ///
  /// <ul>
  /// <li>
  /// CRC32
  /// </li>
  /// <li>
  /// CRC32C
  /// </li>
  /// <li>
  /// SHA1
  /// </li>
  /// <li>
  /// SHA256
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If the individual checksum value you provide through
  /// <code>x-amz-checksum-<i>algorithm</i> </code> doesn't match the checksum
  /// algorithm you set through <code>x-amz-sdk-checksum-algorithm</code>,
  /// Amazon S3 ignores any provided <code>ChecksumAlgorithm</code> parameter
  /// and uses the checksum algorithm that matches the provided value in
  /// <code>x-amz-checksum-<i>algorithm</i> </code>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [mfa] :
  /// The concatenation of the authentication device's serial number, a space,
  /// and the value that is displayed on your authentication device. Required to
  /// permanently delete a versioned object if versioning is configured with MFA
  /// delete enabled.
  ///
  /// When performing the <code>DeleteObjects</code> operation on an MFA delete
  /// enabled bucket, which attempts to delete the specified versioned objects,
  /// you must include an MFA token. If you don't provide an MFA token, the
  /// entire request will fail, even if there are non-versioned objects that you
  /// are trying to delete. If you provide an invalid token, whether there are
  /// versioned object keys in the request or not, the entire Multi-Object
  /// Delete request will fail. For information about MFA Delete, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete">
  /// MFA Delete</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<DeleteObjectsOutput> deleteObjects({
    required String bucket,
    required Delete delete,
    bool? bypassGovernanceRetention,
    ChecksumAlgorithm? checksumAlgorithm,
    String? expectedBucketOwner,
    String? mfa,
    RequestPayer? requestPayer,
  }) async {
    final headers = <String, String>{
      if (bypassGovernanceRetention != null)
        'x-amz-bypass-governance-retention':
            bypassGovernanceRetention.toString(),
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (mfa != null) 'x-amz-mfa': mfa.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $result = await _protocol.sendRaw(
      method: 'POST',
      requestUri: '/${Uri.encodeComponent(bucket)}?delete',
      headers: headers,
      payload: delete.toXml('Delete'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return DeleteObjectsOutput(
      deleted:
          $elem.findElements('Deleted').map(DeletedObject.fromXml).toList(),
      errors: $elem.findElements('Error').map(Error.fromXml).toList(),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Removes the <code>PublicAccessBlock</code> configuration for an Amazon S3
  /// bucket. To use this operation, you must have the
  /// <code>s3:PutBucketPublicAccessBlock</code> permission. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// The following operations are related to
  /// <code>DeletePublicAccessBlock</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using
  /// Amazon S3 Block Public Access</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetPublicAccessBlock.html">GetPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutPublicAccessBlock.html">PutPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketPolicyStatus.html">GetBucketPolicyStatus</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration
  /// you want to delete.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> deletePublicAccessBlock({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'DELETE',
      requestUri: '/${Uri.encodeComponent(bucket)}?publicAccessBlock',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This implementation of the GET action uses the <code>accelerate</code>
  /// subresource to return the Transfer Acceleration state of a bucket, which
  /// is either <code>Enabled</code> or <code>Suspended</code>. Amazon S3
  /// Transfer Acceleration is a bucket-level feature that enables you to
  /// perform faster data transfers to and from Amazon S3.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetAccelerateConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  ///
  /// You set the Transfer Acceleration state of an existing bucket to
  /// <code>Enabled</code> or <code>Suspended</code> by using the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAccelerateConfiguration.html">PutBucketAccelerateConfiguration</a>
  /// operation.
  ///
  /// A GET <code>accelerate</code> request does not return a state value for a
  /// bucket that has no transfer acceleration state. A bucket has no Transfer
  /// Acceleration state if a state has never been set on the bucket.
  ///
  /// For more information about transfer acceleration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Transfer
  /// Acceleration</a> in the Amazon S3 User Guide.
  ///
  /// The following operations are related to
  /// <code>GetBucketAccelerateConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAccelerateConfiguration.html">PutBucketAccelerateConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which the accelerate configuration is
  /// retrieved.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketAccelerateConfigurationOutput>
      getBucketAccelerateConfiguration({
    required String bucket,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?accelerate',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketAccelerateConfigurationOutput(
      status: _s
          .extractXmlStringValue($elem, 'Status')
          ?.let(BucketAccelerateStatus.fromString),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This implementation of the <code>GET</code> action uses the
  /// <code>acl</code> subresource to return the access control list (ACL) of a
  /// bucket. To use <code>GET</code> to return the ACL of the bucket, you must
  /// have the <code>READ_ACP</code> access to the bucket. If
  /// <code>READ_ACP</code> permission is granted to the anonymous user, you can
  /// return the ACL of the bucket without using an authorization header.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  /// <note>
  /// If your bucket uses the bucket owner enforced setting for S3 Object
  /// Ownership, requests to read ACLs are still supported and return the
  /// <code>bucket-owner-full-control</code> ACL with the owner being the
  /// account that created the bucket. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">
  /// Controlling object ownership and disabling ACLs</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </note>
  /// The following operations are related to <code>GetBucketAcl</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html">ListObjects</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// Specifies the S3 bucket whose ACL is being requested.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketAclOutput> getBucketAcl({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?acl',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketAclOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This implementation of the GET action returns an analytics configuration
  /// (identified by the analytics configuration ID) from the bucket.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:GetAnalyticsConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">
  /// Permissions Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  ///
  /// For information about Amazon S3 analytics feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon
  /// S3 Analytics – Storage Class Analysis</a> in the <i>Amazon S3 User
  /// Guide</i>.
  ///
  /// The following operations are related to
  /// <code>GetBucketAnalyticsConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketAnalyticsConfiguration.html">DeleteBucketAnalyticsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketAnalyticsConfigurations.html">ListBucketAnalyticsConfigurations</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAnalyticsConfiguration.html">PutBucketAnalyticsConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket from which an analytics configuration is retrieved.
  ///
  /// Parameter [id] :
  /// The ID that identifies the analytics configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketAnalyticsConfigurationOutput>
      getBucketAnalyticsConfiguration({
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?analytics',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketAnalyticsConfigurationOutput(
      analyticsConfiguration: AnalyticsConfiguration.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the Cross-Origin Resource Sharing (CORS) configuration information
  /// set for the bucket.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetBucketCORS</code> action. By default, the bucket owner has
  /// this permission and can grant it to others.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// For more information about CORS, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html"> Enabling
  /// Cross-Origin Resource Sharing</a>.
  ///
  /// The following operations are related to <code>GetBucketCors</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketCors.html">PutBucketCors</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketCors.html">DeleteBucketCors</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name for which to get the cors configuration.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketCorsOutput> getBucketCors({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?cors',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketCorsOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the default encryption configuration for an Amazon S3 bucket. By
  /// default, all buckets have a default encryption configuration that uses
  /// server-side encryption with Amazon S3 managed keys (SSE-S3). For
  /// information about the bucket default encryption feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">Amazon
  /// S3 Bucket Default Encryption</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetEncryptionConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// The following operations are related to <code>GetBucketEncryption</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketEncryption.html">PutBucketEncryption</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketEncryption.html">DeleteBucketEncryption</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket from which the server-side encryption configuration
  /// is retrieved.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketEncryptionOutput> getBucketEncryption({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?encryption',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketEncryptionOutput(
      serverSideEncryptionConfiguration:
          ServerSideEncryptionConfiguration.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Gets the S3 Intelligent-Tiering configuration from the specified bucket.
  ///
  /// The S3 Intelligent-Tiering storage class is designed to optimize storage
  /// costs by automatically moving data to the most cost-effective storage
  /// access tier, without performance impact or operational overhead. S3
  /// Intelligent-Tiering delivers automatic cost savings in three low latency
  /// and high throughput access tiers. To get the lowest storage cost on data
  /// that can be accessed in minutes to hours, you can choose to activate
  /// additional archiving capabilities.
  ///
  /// The S3 Intelligent-Tiering storage class is the ideal storage class for
  /// data with unknown, changing, or unpredictable access patterns, independent
  /// of object size or retention period. If the size of an object is less than
  /// 128 KB, it is not monitored and not eligible for auto-tiering. Smaller
  /// objects can be stored, but they are always charged at the Frequent Access
  /// tier rates in the S3 Intelligent-Tiering storage class.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage
  /// class for automatically optimizing frequently and infrequently accessed
  /// objects</a>.
  ///
  /// Operations related to
  /// <code>GetBucketIntelligentTieringConfiguration</code> include:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketIntelligentTieringConfiguration.html">DeleteBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketIntelligentTieringConfiguration.html">PutBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketIntelligentTieringConfigurations.html">ListBucketIntelligentTieringConfigurations</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose configuration you want to modify or
  /// retrieve.
  ///
  /// Parameter [id] :
  /// The ID used to identify the S3 Intelligent-Tiering configuration.
  Future<GetBucketIntelligentTieringConfigurationOutput>
      getBucketIntelligentTieringConfiguration({
    required String bucket,
    required String id,
  }) async {
    final $query = <String, List<String>>{
      'id': [id],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?intelligent-tiering',
      queryParams: $query,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketIntelligentTieringConfigurationOutput(
      intelligentTieringConfiguration:
          IntelligentTieringConfiguration.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns an inventory configuration (identified by the inventory
  /// configuration ID) from the bucket.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:GetInventoryConfiguration</code> action. The bucket owner has
  /// this permission by default and can grant this permission to others. For
  /// more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about the Amazon S3 inventory feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon
  /// S3 Inventory</a>.
  ///
  /// The following operations are related to
  /// <code>GetBucketInventoryConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketInventoryConfiguration.html">DeleteBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketInventoryConfigurations.html">ListBucketInventoryConfigurations</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketInventoryConfiguration.html">PutBucketInventoryConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the inventory configuration to retrieve.
  ///
  /// Parameter [id] :
  /// The ID used to identify the inventory configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketInventoryConfigurationOutput>
      getBucketInventoryConfiguration({
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?inventory',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketInventoryConfigurationOutput(
      inventoryConfiguration: InventoryConfiguration.fromXml($elem),
    );
  }

  /// <important>
  /// For an updated version of this API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html">GetBucketLifecycleConfiguration</a>.
  /// If you configured a bucket lifecycle using the <code>filter</code>
  /// element, you should see the updated version of this topic. This topic is
  /// provided for backward compatibility.
  /// </important> <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the lifecycle configuration information set on the bucket. For
  /// information about lifecycle configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object
  /// Lifecycle Management</a>.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetLifecycleConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// <code>GetBucketLifecycle</code> has the following special error:
  ///
  /// <ul>
  /// <li>
  /// Error code: <code>NoSuchLifecycleConfiguration</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The lifecycle configuration does not exist.
  /// </li>
  /// <li>
  /// HTTP Status Code: 404 Not Found
  /// </li>
  /// <li>
  /// SOAP Fault Code Prefix: Client
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// The following operations are related to <code>GetBucketLifecycle</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html">GetBucketLifecycleConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html">PutBucketLifecycle</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketLifecycle.html">DeleteBucketLifecycle</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the lifecycle information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  @Deprecated('Deprecated')
  Future<GetBucketLifecycleOutput> getBucketLifecycle({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?lifecycle',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketLifecycleOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note> <note>
  /// Bucket lifecycle configuration now supports specifying a lifecycle rule
  /// using an object key name prefix, one or more object tags, object size, or
  /// any combination of these. Accordingly, this section describes the latest
  /// API. The previous version of the API supported filtering based only on an
  /// object key name prefix, which is supported for backward compatibility. For
  /// the related API description, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycle.html">GetBucketLifecycle</a>.
  /// Accordingly, this section describes the latest API. The response describes
  /// the new filter element that you can use to specify a filter to select a
  /// subset of objects to which the rule applies. If you are using a previous
  /// version of the lifecycle configuration, it still works. For the earlier
  /// action,
  /// </note>
  /// Returns the lifecycle configuration information set on the bucket. For
  /// information about lifecycle configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object
  /// Lifecycle Management</a>.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetLifecycleConfiguration</code> action. The bucket owner has
  /// this permission, by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// <code>GetBucketLifecycleConfiguration</code> has the following special
  /// error:
  ///
  /// <ul>
  /// <li>
  /// Error code: <code>NoSuchLifecycleConfiguration</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The lifecycle configuration does not exist.
  /// </li>
  /// <li>
  /// HTTP Status Code: 404 Not Found
  /// </li>
  /// <li>
  /// SOAP Fault Code Prefix: Client
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// The following operations are related to
  /// <code>GetBucketLifecycleConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycle.html">GetBucketLifecycle</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html">PutBucketLifecycle</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketLifecycle.html">DeleteBucketLifecycle</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the lifecycle information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketLifecycleConfigurationOutput>
      getBucketLifecycleConfiguration({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?lifecycle',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketLifecycleConfigurationOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the Region the bucket resides in. You set the bucket's Region
  /// using the <code>LocationConstraint</code> request parameter in a
  /// <code>CreateBucket</code> request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  /// <note>
  /// We recommend that you use <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadBucket.html">HeadBucket</a>
  /// to return the Region that a bucket resides in. For backward compatibility,
  /// Amazon S3 continues to support GetBucketLocation.
  /// </note>
  /// The following operations are related to <code>GetBucketLocation</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the location.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketLocationOutput> getBucketLocation({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?location',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketLocationOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the logging status of a bucket and the permissions users have to
  /// view and modify that status.
  ///
  /// The following operations are related to <code>GetBucketLogging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLogging.html">PutBucketLogging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name for which to get the logging information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketLoggingOutput> getBucketLogging({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?logging',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketLoggingOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Gets a metrics configuration (specified by the metrics configuration ID)
  /// from the bucket. Note that this doesn't include the daily storage metrics.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:GetMetricsConfiguration</code> action. The bucket owner has this
  /// permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about CloudWatch request metrics for Amazon S3, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
  /// Metrics with Amazon CloudWatch</a>.
  ///
  /// The following operations are related to
  /// <code>GetBucketMetricsConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html">PutBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketMetricsConfiguration.html">DeleteBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketMetricsConfigurations.html">ListBucketMetricsConfigurations</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
  /// Metrics with Amazon CloudWatch</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the metrics configuration to retrieve.
  ///
  /// Parameter [id] :
  /// The ID used to identify the metrics configuration. The ID has a 64
  /// character limit and can only contain letters, numbers, periods, dashes,
  /// and underscores.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketMetricsConfigurationOutput> getBucketMetricsConfiguration({
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?metrics',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketMetricsConfigurationOutput(
      metricsConfiguration: MetricsConfiguration.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// No longer used, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html">GetBucketNotificationConfiguration</a>.
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the notification configuration.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  @Deprecated('Deprecated')
  Future<NotificationConfigurationDeprecated> getBucketNotification({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?notification',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return NotificationConfigurationDeprecated.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the notification configuration of a bucket.
  ///
  /// If notifications are not enabled on the bucket, the action returns an
  /// empty <code>NotificationConfiguration</code> element.
  ///
  /// By default, you must be the bucket owner to read the notification
  /// configuration of a bucket. However, the bucket owner can use a bucket
  /// policy to grant permission to other users to read this configuration with
  /// the <code>s3:GetBucketNotification</code> permission.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// For more information about setting and reading the notification
  /// configuration on a bucket, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Setting
  /// Up Notification of Bucket Events</a>. For more information about bucket
  /// policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using
  /// Bucket Policies</a>.
  ///
  /// The following action is related to <code>GetBucketNotification</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketNotification.html">PutBucketNotification</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the notification configuration.
  ///
  /// When you use this API operation with an access point, provide the alias of
  /// the access point in place of the bucket name.
  ///
  /// When you use this API operation with an Object Lambda access point,
  /// provide the alias of the Object Lambda access point in place of the bucket
  /// name. If the Object Lambda access point alias in a request is not valid,
  /// the error code <code>InvalidAccessPointAliasError</code> is returned. For
  /// more information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<NotificationConfiguration> getBucketNotificationConfiguration({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?notification',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return NotificationConfiguration.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Retrieves <code>OwnershipControls</code> for an Amazon S3 bucket. To use
  /// this operation, you must have the
  /// <code>s3:GetBucketOwnershipControls</code> permission. For more
  /// information about Amazon S3 permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html">Specifying
  /// permissions in a policy</a>.
  ///
  /// For information about Amazon S3 Object Ownership, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Using
  /// Object Ownership</a>.
  ///
  /// The following operations are related to
  /// <code>GetBucketOwnershipControls</code>:
  ///
  /// <ul>
  /// <li>
  /// <a>PutBucketOwnershipControls</a>
  /// </li>
  /// <li>
  /// <a>DeleteBucketOwnershipControls</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose <code>OwnershipControls</code> you
  /// want to retrieve.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketOwnershipControlsOutput> getBucketOwnershipControls({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?ownershipControls',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketOwnershipControlsOutput(
      ownershipControls: OwnershipControls.fromXml($elem),
    );
  }

  /// Returns the policy of a specified bucket.
  /// <note>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Regional endpoint. These endpoints support
  /// path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// If you are using an identity other than the root user of the Amazon Web
  /// Services account that owns the bucket, the calling identity must both have
  /// the <code>GetBucketPolicy</code> permissions on the specified bucket and
  /// belong to the bucket owner's account in order to use this operation.
  ///
  /// If you don't have <code>GetBucketPolicy</code> permissions, Amazon S3
  /// returns a <code>403 Access Denied</code> error. If you have the correct
  /// permissions, but you're not using an identity that belongs to the bucket
  /// owner's account, Amazon S3 returns a <code>405 Method Not Allowed</code>
  /// error.
  /// <important>
  /// To ensure that bucket owners don't inadvertently lock themselves out of
  /// their own buckets, the root principal in a bucket owner's Amazon Web
  /// Services account can perform the <code>GetBucketPolicy</code>,
  /// <code>PutBucketPolicy</code>, and <code>DeleteBucketPolicy</code> API
  /// actions, even if their bucket policy explicitly denies the root
  /// principal's access. Bucket owner root principals can only be blocked from
  /// performing these API actions by VPC endpoint policies and Amazon Web
  /// Services Organizations policies.
  /// </important>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - The
  /// <code>s3:GetBucketPolicy</code> permission is required in a policy. For
  /// more information about general purpose buckets bucket policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using
  /// Bucket Policies and User Policies</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation, you must have the <code>s3express:GetBucketPolicy</code>
  /// permission in an IAM identity-based policy instead of a bucket policy.
  /// Cross-account access to this API operation isn't supported. This operation
  /// can only be performed by the Amazon Web Services account that owns the
  /// resource. For more information about directory bucket policies and
  /// permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam.html">Amazon
  /// Web Services Identity and Access Management (IAM) for S3 Express One
  /// Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>Example bucket policies</dt> <dd>
  /// <b>General purpose buckets example bucket policies</b> - See <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html">Bucket
  /// policy examples</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Directory bucket example bucket policies</b> - See <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example
  /// bucket policies for S3 Express One Zone</a> in the <i>Amazon S3 User
  /// Guide</i>.
  /// </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is
  /// <code>s3express-control.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following action is related to <code>GetBucketPolicy</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name to get the bucket policy for.
  ///
  /// <b>Directory buckets </b> - When you use this operation with a directory
  /// bucket, you must use path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. Directory bucket
  /// names must be unique in the chosen Availability Zone. Bucket names must
  /// also follow the format <code>
  /// <i>bucket_base_name</i>--<i>az_id</i>--x-s3</code> (for example, <code>
  /// <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>). For information
  /// about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>
  ///
  /// <b>Access points</b> - When you use this API operation with an access
  /// point, provide the alias of the access point in place of the bucket name.
  ///
  /// <b>Object Lambda access points</b> - When you use this API operation with
  /// an Object Lambda access point, provide the alias of the Object Lambda
  /// access point in place of the bucket name. If the Object Lambda access
  /// point alias in a request is not valid, the error code
  /// <code>InvalidAccessPointAliasError</code> is returned. For more
  /// information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  /// <note>
  /// For directory buckets, this header is not supported in this API operation.
  /// If you specify this header, the request fails with the HTTP status code
  /// <code>501 Not Implemented</code>.
  /// </note>
  Future<GetBucketPolicyOutput> getBucketPolicy({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?policy',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketPolicyOutput(
      policy: await $result.stream.bytesToString(),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Retrieves the policy status for an Amazon S3 bucket, indicating whether
  /// the bucket is public. In order to use this operation, you must have the
  /// <code>s3:GetBucketPolicyStatus</code> permission. For more information
  /// about Amazon S3 permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a>.
  ///
  /// For more information about when Amazon S3 considers a bucket public, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The
  /// Meaning of "Public"</a>.
  ///
  /// The following operations are related to
  /// <code>GetBucketPolicyStatus</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using
  /// Amazon S3 Block Public Access</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetPublicAccessBlock.html">GetPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutPublicAccessBlock.html">PutPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeletePublicAccessBlock.html">DeletePublicAccessBlock</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose policy status you want to retrieve.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketPolicyStatusOutput> getBucketPolicyStatus({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?policyStatus',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketPolicyStatusOutput(
      policyStatus: PolicyStatus.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the replication configuration of a bucket.
  /// <note>
  /// It can take a while to propagate the put or delete a replication
  /// configuration to all Amazon S3 systems. Therefore, a get request soon
  /// after put or delete can return a wrong result.
  /// </note>
  /// For information about replication configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a>
  /// in the <i>Amazon S3 User Guide</i>.
  ///
  /// This action requires permissions for the
  /// <code>s3:GetReplicationConfiguration</code> action. For more information
  /// about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using
  /// Bucket Policies and User Policies</a>.
  ///
  /// If you include the <code>Filter</code> element in a replication
  /// configuration, you must also include the
  /// <code>DeleteMarkerReplication</code> and <code>Priority</code> elements.
  /// The response also returns those elements.
  ///
  /// For information about <code>GetBucketReplication</code> errors, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ReplicationErrorCodeList">List
  /// of replication-related error codes</a>
  ///
  /// The following operations are related to <code>GetBucketReplication</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketReplication.html">PutBucketReplication</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketReplication.html">DeleteBucketReplication</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name for which to get the replication information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketReplicationOutput> getBucketReplication({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?replication',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetBucketReplicationOutput(
      replicationConfiguration: ReplicationConfiguration.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the request payment configuration of a bucket. To use this version
  /// of the operation, you must be the bucket owner. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester
  /// Pays Buckets</a>.
  ///
  /// The following operations are related to
  /// <code>GetBucketRequestPayment</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html">ListObjects</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the payment request configuration
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketRequestPaymentOutput> getBucketRequestPayment({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?requestPayment',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketRequestPaymentOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the tag set associated with the bucket.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetBucketTagging</code> action. By default, the bucket owner has
  /// this permission and can grant this permission to others.
  ///
  /// <code>GetBucketTagging</code> has the following special error:
  ///
  /// <ul>
  /// <li>
  /// Error code: <code>NoSuchTagSet</code>
  ///
  /// <ul>
  /// <li>
  /// Description: There is no tag set associated with the bucket.
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// The following operations are related to <code>GetBucketTagging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html">PutBucketTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketTagging.html">DeleteBucketTagging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the tagging information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketTaggingOutput> getBucketTagging({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?tagging',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketTaggingOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the versioning state of a bucket.
  ///
  /// To retrieve the versioning state of a bucket, you must be the bucket
  /// owner.
  ///
  /// This implementation also returns the MFA Delete status of the versioning
  /// state. If the MFA Delete status is <code>enabled</code>, the bucket owner
  /// must use an authentication device to change the versioning state of the
  /// bucket.
  ///
  /// The following operations are related to <code>GetBucketVersioning</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to get the versioning information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketVersioningOutput> getBucketVersioning({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?versioning',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketVersioningOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the website configuration for a bucket. To host website on Amazon
  /// S3, you can configure a bucket as website by adding a website
  /// configuration. For more information about hosting websites, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting
  /// Websites on Amazon S3</a>.
  ///
  /// This GET action requires the <code>S3:GetBucketWebsite</code> permission.
  /// By default, only the bucket owner can read the bucket website
  /// configuration. However, bucket owners can allow other users to read the
  /// website configuration by writing a bucket policy granting them the
  /// <code>S3:GetBucketWebsite</code> permission.
  ///
  /// The following operations are related to <code>GetBucketWebsite</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketWebsite.html">DeleteBucketWebsite</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketWebsite.html">PutBucketWebsite</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name for which to get the website configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetBucketWebsiteOutput> getBucketWebsite({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?website',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetBucketWebsiteOutput.fromXml($result.body);
  }

  /// Retrieves an object from Amazon S3.
  ///
  /// In the <code>GetObject</code> request, specify the full key name for the
  /// object.
  ///
  /// <b>General purpose buckets</b> - Both the virtual-hosted-style requests
  /// and the path-style requests are supported. For a virtual hosted-style
  /// request example, if you have the object
  /// <code>photos/2006/February/sample.jpg</code>, specify the object key name
  /// as <code>/photos/2006/February/sample.jpg</code>. For a path-style request
  /// example, if you have the object
  /// <code>photos/2006/February/sample.jpg</code> in the bucket named
  /// <code>examplebucket</code>, specify the object key name as
  /// <code>/examplebucket/photos/2006/February/sample.jpg</code>. For more
  /// information about request types, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket">HTTP
  /// Host Header Bucket Specification</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Directory buckets</b> - Only virtual-hosted-style requests are
  /// supported. For a virtual hosted-style request example, if you have the
  /// object <code>photos/2006/February/sample.jpg</code> in the bucket named
  /// <code>examplebucket--use1-az5--x-s3</code>, specify the object key name as
  /// <code>/photos/2006/February/sample.jpg</code>. Also, when you make
  /// requests to this API operation, your requests are sent to the Zonal
  /// endpoint. These endpoints support virtual-hosted-style requests in the
  /// format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - You must have the required
  /// permissions in a policy. To use <code>GetObject</code>, you must have the
  /// <code>READ</code> access to the object (or version). If you grant
  /// <code>READ</code> access to the anonymous user, the <code>GetObject</code>
  /// operation returns the object without using an authorization header. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// permissions in a policy</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you include a <code>versionId</code> in your request header, you must
  /// have the <code>s3:GetObjectVersion</code> permission to access a specific
  /// version of an object. The <code>s3:GetObject</code> permission is not
  /// required in this scenario.
  ///
  /// If you request the current version of an object without a specific
  /// <code>versionId</code> in the request header, only the
  /// <code>s3:GetObject</code> permission is required. The
  /// <code>s3:GetObjectVersion</code> permission is not required in this
  /// scenario.
  ///
  /// If the object that you request doesn’t exist, the error that Amazon S3
  /// returns depends on whether you also have the <code>s3:ListBucket</code>
  /// permission.
  ///
  /// <ul>
  /// <li>
  /// If you have the <code>s3:ListBucket</code> permission on the bucket,
  /// Amazon S3 returns an HTTP status code <code>404 Not Found</code> error.
  /// </li>
  /// <li>
  /// If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3
  /// returns an HTTP status code <code>403 Access Denied</code> error.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Storage classes</dt> <dd>
  /// If the object you are retrieving is stored in the S3 Glacier Flexible
  /// Retrieval storage class, the S3 Glacier Deep Archive storage class, the S3
  /// Intelligent-Tiering Archive Access tier, or the S3 Intelligent-Tiering
  /// Deep Archive Access tier, before you can retrieve the object you must
  /// first restore a copy using <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>.
  /// Otherwise, this operation returns an <code>InvalidObjectState</code>
  /// error. For information about restoring archived objects, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html">Restoring
  /// Archived Objects</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Directory buckets </b> - For directory buckets, only the S3 Express One
  /// Zone storage class is supported to store newly created objects.
  /// Unsupported storage class values won't write a destination object and will
  /// respond with the HTTP status code <code>400 Bad Request</code>.
  /// </dd> <dt>Encryption</dt> <dd>
  /// Encryption request headers, like
  /// <code>x-amz-server-side-encryption</code>, should not be sent for the
  /// <code>GetObject</code> requests, if your object uses server-side
  /// encryption with Amazon S3 managed encryption keys (SSE-S3), server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS), or dual-layer
  /// server-side encryption with Amazon Web Services KMS keys (DSSE-KMS). If
  /// you include the header in your <code>GetObject</code> requests for the
  /// object that uses these types of keys, you’ll get an HTTP <code>400 Bad
  /// Request</code> error.
  /// </dd> <dt>Overriding response header values through the request</dt> <dd>
  /// There are times when you want to override certain response header values
  /// of a <code>GetObject</code> response. For example, you might override the
  /// <code>Content-Disposition</code> response header value through your
  /// <code>GetObject</code> request.
  ///
  /// You can override values for a set of response headers. These modified
  /// response header values are included only in a successful response, that
  /// is, when the HTTP status code <code>200 OK</code> is returned. The headers
  /// you can override using the following query parameters in the request are a
  /// subset of the headers that Amazon S3 accepts when you create an object.
  ///
  /// The response headers that you can override for the <code>GetObject</code>
  /// response are <code>Cache-Control</code>, <code>Content-Disposition</code>,
  /// <code>Content-Encoding</code>, <code>Content-Language</code>,
  /// <code>Content-Type</code>, and <code>Expires</code>.
  ///
  /// To override values for a set of response headers in the
  /// <code>GetObject</code> response, you can use the following query
  /// parameters in the request.
  ///
  /// <ul>
  /// <li>
  /// <code>response-cache-control</code>
  /// </li>
  /// <li>
  /// <code>response-content-disposition</code>
  /// </li>
  /// <li>
  /// <code>response-content-encoding</code>
  /// </li>
  /// <li>
  /// <code>response-content-language</code>
  /// </li>
  /// <li>
  /// <code>response-content-type</code>
  /// </li>
  /// <li>
  /// <code>response-expires</code>
  /// </li>
  /// </ul> <note>
  /// When you use these parameters, you must sign the request by using either
  /// an Authorization header or a presigned URL. These parameters cannot be
  /// used with an unsigned (anonymous) request.
  /// </note> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>GetObject</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchKey].
  /// May throw [InvalidObjectState].
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Object Lambda access points</b> - When you use this action with an
  /// Object Lambda access point, you must direct requests to the Object Lambda
  /// access point hostname. The Object Lambda access point hostname takes the
  /// form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-object-lambda.<i>Region</i>.amazonaws.com.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Key of the object to get.
  ///
  /// Parameter [checksumMode] :
  /// To retrieve the checksum, this mode must be enabled.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [ifMatch] :
  /// Return the object only if its entity tag (ETag) is the same as the one
  /// specified in this header; otherwise, return a <code>412 Precondition
  /// Failed</code> error.
  ///
  /// If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code>
  /// headers are present in the request as follows: <code>If-Match</code>
  /// condition evaluates to <code>true</code>, and;
  /// <code>If-Unmodified-Since</code> condition evaluates to
  /// <code>false</code>; then, S3 returns <code>200 OK</code> and the data
  /// requested.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [ifModifiedSince] :
  /// Return the object only if it has been modified since the specified time;
  /// otherwise, return a <code>304 Not Modified</code> error.
  ///
  /// If both of the <code>If-None-Match</code> and
  /// <code>If-Modified-Since</code> headers are present in the request as
  /// follows:<code> If-None-Match</code> condition evaluates to
  /// <code>false</code>, and; <code>If-Modified-Since</code> condition
  /// evaluates to <code>true</code>; then, S3 returns <code>304 Not
  /// Modified</code> status code.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [ifNoneMatch] :
  /// Return the object only if its entity tag (ETag) is different from the one
  /// specified in this header; otherwise, return a <code>304 Not
  /// Modified</code> error.
  ///
  /// If both of the <code>If-None-Match</code> and
  /// <code>If-Modified-Since</code> headers are present in the request as
  /// follows:<code> If-None-Match</code> condition evaluates to
  /// <code>false</code>, and; <code>If-Modified-Since</code> condition
  /// evaluates to <code>true</code>; then, S3 returns <code>304 Not
  /// Modified</code> HTTP status code.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [ifUnmodifiedSince] :
  /// Return the object only if it has not been modified since the specified
  /// time; otherwise, return a <code>412 Precondition Failed</code> error.
  ///
  /// If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code>
  /// headers are present in the request as follows: <code>If-Match</code>
  /// condition evaluates to <code>true</code>, and;
  /// <code>If-Unmodified-Since</code> condition evaluates to
  /// <code>false</code>; then, S3 returns <code>200 OK</code> and the data
  /// requested.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [partNumber] :
  /// Part number of the object being read. This is a positive integer between 1
  /// and 10,000. Effectively performs a 'ranged' GET request for the part
  /// specified. Useful for downloading just a part of an object.
  ///
  /// Parameter [range] :
  /// Downloads the specified byte range of an object. For more information
  /// about the HTTP Range header, see <a
  /// href="https://www.rfc-editor.org/rfc/rfc9110.html#name-range">https://www.rfc-editor.org/rfc/rfc9110.html#name-range</a>.
  /// <note>
  /// Amazon S3 doesn't support retrieving multiple ranges of data per
  /// <code>GET</code> request.
  /// </note>
  ///
  /// Parameter [responseCacheControl] :
  /// Sets the <code>Cache-Control</code> header of the response.
  ///
  /// Parameter [responseContentDisposition] :
  /// Sets the <code>Content-Disposition</code> header of the response.
  ///
  /// Parameter [responseContentEncoding] :
  /// Sets the <code>Content-Encoding</code> header of the response.
  ///
  /// Parameter [responseContentLanguage] :
  /// Sets the <code>Content-Language</code> header of the response.
  ///
  /// Parameter [responseContentType] :
  /// Sets the <code>Content-Type</code> header of the response.
  ///
  /// Parameter [responseExpires] :
  /// Sets the <code>Expires</code> header of the response.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when decrypting the object (for example,
  /// <code>AES256</code>).
  ///
  /// If you encrypt an object by using server-side encryption with
  /// customer-provided encryption keys (SSE-C) when you store the object in
  /// Amazon S3, then when you GET the object, you must use the following
  /// headers:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-algorithm</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key-MD5</code>
  /// </li>
  /// </ul>
  /// For more information about SSE-C, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side
  /// Encryption (Using Customer-Provided Encryption Keys)</a> in the <i>Amazon
  /// S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key that you originally
  /// provided for Amazon S3 to encrypt the data before storing it. This value
  /// is used to decrypt the object when recovering it and must match the one
  /// used when storing the data. The key must be appropriate for use with the
  /// algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header.
  ///
  /// If you encrypt an object by using server-side encryption with
  /// customer-provided encryption keys (SSE-C) when you store the object in
  /// Amazon S3, then when you GET the object, you must use the following
  /// headers:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-algorithm</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key-MD5</code>
  /// </li>
  /// </ul>
  /// For more information about SSE-C, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side
  /// Encryption (Using Customer-Provided Encryption Keys)</a> in the <i>Amazon
  /// S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the customer-provided encryption key
  /// according to RFC 1321. Amazon S3 uses this header for a message integrity
  /// check to ensure that the encryption key was transmitted without error.
  ///
  /// If you encrypt an object by using server-side encryption with
  /// customer-provided encryption keys (SSE-C) when you store the object in
  /// Amazon S3, then when you GET the object, you must use the following
  /// headers:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-algorithm</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key-MD5</code>
  /// </li>
  /// </ul>
  /// For more information about SSE-C, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side
  /// Encryption (Using Customer-Provided Encryption Keys)</a> in the <i>Amazon
  /// S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [versionId] :
  /// Version ID used to reference a specific version of the object.
  ///
  /// By default, the <code>GetObject</code> operation returns the current
  /// version of an object. To return a different version, use the
  /// <code>versionId</code> subresource.
  /// <note>
  /// <ul>
  /// <li>
  /// If you include a <code>versionId</code> in your request header, you must
  /// have the <code>s3:GetObjectVersion</code> permission to access a specific
  /// version of an object. The <code>s3:GetObject</code> permission is not
  /// required in this scenario.
  /// </li>
  /// <li>
  /// If you request the current version of an object without a specific
  /// <code>versionId</code> in the request header, only the
  /// <code>s3:GetObject</code> permission is required. The
  /// <code>s3:GetObjectVersion</code> permission is not required in this
  /// scenario.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets. For this API operation, only the <code>null</code>
  /// value of the version ID is supported by directory buckets. You can only
  /// specify <code>null</code> to the <code>versionId</code> query parameter in
  /// the request.
  /// </li>
  /// </ul> </note>
  /// For more information about versioning, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketVersioning.html">PutBucketVersioning</a>.
  Future<GetObjectOutput> getObject({
    required String bucket,
    required String key,
    ChecksumMode? checksumMode,
    String? expectedBucketOwner,
    String? ifMatch,
    DateTime? ifModifiedSince,
    String? ifNoneMatch,
    DateTime? ifUnmodifiedSince,
    int? partNumber,
    String? range,
    RequestPayer? requestPayer,
    String? responseCacheControl,
    String? responseContentDisposition,
    String? responseContentEncoding,
    String? responseContentLanguage,
    String? responseContentType,
    DateTime? responseExpires,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (checksumMode != null) 'x-amz-checksum-mode': checksumMode.value,
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (ifMatch != null) 'If-Match': ifMatch.toString(),
      if (ifModifiedSince != null)
        'If-Modified-Since': _s.rfc822ToJson(ifModifiedSince),
      if (ifNoneMatch != null) 'If-None-Match': ifNoneMatch.toString(),
      if (ifUnmodifiedSince != null)
        'If-Unmodified-Since': _s.rfc822ToJson(ifUnmodifiedSince),
      if (range != null) 'Range': range.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      if (partNumber != null) 'partNumber': [partNumber.toString()],
      if (responseCacheControl != null)
        'response-cache-control': [responseCacheControl],
      if (responseContentDisposition != null)
        'response-content-disposition': [responseContentDisposition],
      if (responseContentEncoding != null)
        'response-content-encoding': [responseContentEncoding],
      if (responseContentLanguage != null)
        'response-content-language': [responseContentLanguage],
      if (responseContentType != null)
        'response-content-type': [responseContentType],
      if (responseExpires != null)
        'response-expires': [_s.rfc822ToJson(responseExpires).toString()],
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetObjectOutput(
      body: await $result.stream.toBytes(),
      acceptRanges:
          _s.extractHeaderStringValue($result.headers, 'accept-ranges'),
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      cacheControl:
          _s.extractHeaderStringValue($result.headers, 'Cache-Control'),
      checksumCRC32:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32'),
      checksumCRC32C:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32c'),
      checksumSHA1:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha1'),
      checksumSHA256:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha256'),
      contentDisposition:
          _s.extractHeaderStringValue($result.headers, 'Content-Disposition'),
      contentEncoding:
          _s.extractHeaderStringValue($result.headers, 'Content-Encoding'),
      contentLanguage:
          _s.extractHeaderStringValue($result.headers, 'Content-Language'),
      contentLength:
          _s.extractHeaderIntValue($result.headers, 'Content-Length'),
      contentRange:
          _s.extractHeaderStringValue($result.headers, 'Content-Range'),
      contentType: _s.extractHeaderStringValue($result.headers, 'Content-Type'),
      deleteMarker:
          _s.extractHeaderBoolValue($result.headers, 'x-amz-delete-marker'),
      eTag: _s.extractHeaderStringValue($result.headers, 'ETag'),
      expiration:
          _s.extractHeaderStringValue($result.headers, 'x-amz-expiration'),
      expires: _s.extractHeaderDateTimeValue($result.headers, 'Expires'),
      expiresString:
          _s.extractHeaderStringValue($result.headers, 'ExpiresString'),
      lastModified:
          _s.extractHeaderDateTimeValue($result.headers, 'Last-Modified'),
      metadata: _s.extractHeaderMapValues($result.headers, 'x-amz-meta-'),
      missingMeta:
          _s.extractHeaderIntValue($result.headers, 'x-amz-missing-meta'),
      objectLockLegalHoldStatus: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-object-lock-legal-hold')
          ?.let(ObjectLockLegalHoldStatus.fromString),
      objectLockMode: _s
          .extractHeaderStringValue($result.headers, 'x-amz-object-lock-mode')
          ?.let(ObjectLockMode.fromString),
      objectLockRetainUntilDate: _s.extractHeaderDateTimeValue(
          $result.headers, 'x-amz-object-lock-retain-until-date',
          parser: _s.timeStampFromJson),
      partsCount:
          _s.extractHeaderIntValue($result.headers, 'x-amz-mp-parts-count'),
      replicationStatus: _s
          .extractHeaderStringValue($result.headers, 'x-amz-replication-status')
          ?.let(ReplicationStatus.fromString),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      restore: _s.extractHeaderStringValue($result.headers, 'x-amz-restore'),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
      storageClass: _s
          .extractHeaderStringValue($result.headers, 'x-amz-storage-class')
          ?.let(StorageClass.fromString),
      tagCount:
          _s.extractHeaderIntValue($result.headers, 'x-amz-tagging-count'),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
      websiteRedirectLocation: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-website-redirect-location'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the access control list (ACL) of an object. To use this operation,
  /// you must have <code>s3:GetObjectAcl</code> permissions or
  /// <code>READ_ACP</code> access to the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#acl-access-policy-permission-mapping">Mapping
  /// of ACL permissions and access policy permissions</a> in the <i>Amazon S3
  /// User Guide</i>
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// By default, GET returns ACL information about the current version of an
  /// object. To return ACL information about a different version, use the
  /// versionId subresource.
  /// <note>
  /// If your bucket uses the bucket owner enforced setting for S3 Object
  /// Ownership, requests to read ACLs are still supported and return the
  /// <code>bucket-owner-full-control</code> ACL with the owner being the
  /// account that created the bucket. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">
  /// Controlling object ownership and disabling ACLs</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </note>
  /// The following operations are related to <code>GetObjectAcl</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchKey].
  ///
  /// Parameter [bucket] :
  /// The bucket name that contains the object for which to get the ACL
  /// information.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The key of the object for which to get the ACL information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// Version ID used to reference a specific version of the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<GetObjectAclOutput> getObjectAcl({
    required String bucket,
    required String key,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?acl',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetObjectAclOutput(
      grants: _s.extractXmlChild($elem, 'AccessControlList')?.let(
          ($elem) => $elem.findElements('Grant').map(Grant.fromXml).toList()),
      owner: _s.extractXmlChild($elem, 'Owner')?.let(Owner.fromXml),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// Retrieves all the metadata from an object without returning the object
  /// itself. This operation is useful if you're interested only in an object's
  /// metadata.
  ///
  /// <code>GetObjectAttributes</code> combines the functionality of
  /// <code>HeadObject</code> and <code>ListParts</code>. All of the data
  /// returned with each of those individual calls can be returned with a single
  /// call to <code>GetObjectAttributes</code>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - To use
  /// <code>GetObjectAttributes</code>, you must have READ access to the object.
  /// The permissions that you need to use this operation with depend on whether
  /// the bucket is versioned. If the bucket is versioned, you need both the
  /// <code>s3:GetObjectVersion</code> and
  /// <code>s3:GetObjectVersionAttributes</code> permissions for this operation.
  /// If the bucket is not versioned, you need the <code>s3:GetObject</code> and
  /// <code>s3:GetObjectAttributes</code> permissions. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a> in the <i>Amazon S3 User Guide</i>. If the
  /// object that you request does not exist, the error Amazon S3 returns
  /// depends on whether you also have the <code>s3:ListBucket</code>
  /// permission.
  ///
  /// <ul>
  /// <li>
  /// If you have the <code>s3:ListBucket</code> permission on the bucket,
  /// Amazon S3 returns an HTTP status code <code>404 Not Found</code> ("no such
  /// key") error.
  /// </li>
  /// <li>
  /// If you don't have the <code>s3:ListBucket</code> permission, Amazon S3
  /// returns an HTTP status code <code>403 Forbidden</code> ("access denied")
  /// error.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Encryption</dt> <dd> <note>
  /// Encryption request headers, like
  /// <code>x-amz-server-side-encryption</code>, should not be sent for
  /// <code>HEAD</code> requests if your object uses server-side encryption with
  /// Key Management Service (KMS) keys (SSE-KMS), dual-layer server-side
  /// encryption with Amazon Web Services KMS keys (DSSE-KMS), or server-side
  /// encryption with Amazon S3 managed encryption keys (SSE-S3). The
  /// <code>x-amz-server-side-encryption</code> header is used when you
  /// <code>PUT</code> an object to S3 and want to specify the encryption
  /// method. If you include this header in a <code>GET</code> request for an
  /// object that uses these types of keys, you’ll get an HTTP <code>400 Bad
  /// Request</code> error. It's because the encryption method can't be changed
  /// when you retrieve the object.
  /// </note>
  /// If you encrypt an object by using server-side encryption with
  /// customer-provided encryption keys (SSE-C) when you store the object in
  /// Amazon S3, then when you retrieve the metadata from the object, you must
  /// use the following headers to provide the encryption key for the server to
  /// be able to retrieve the object's metadata. The headers are:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-algorithm</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key-MD5</code>
  /// </li>
  /// </ul>
  /// For more information about SSE-C, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side
  /// Encryption (Using Customer-Provided Encryption Keys)</a> in the <i>Amazon
  /// S3 User Guide</i>.
  /// <note>
  /// <b>Directory bucket permissions</b> - For directory buckets, only
  /// server-side encryption with Amazon S3 managed keys (SSE-S3)
  /// (<code>AES256</code>) is supported.
  /// </note> </dd> <dt>Versioning</dt> <dd>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets. For this API operation, only the <code>null</code>
  /// value of the version ID is supported by directory buckets. You can only
  /// specify <code>null</code> to the <code>versionId</code> query parameter in
  /// the request.
  /// </dd> <dt>Conditional request headers</dt> <dd>
  /// Consider the following when using request headers:
  ///
  /// <ul>
  /// <li>
  /// If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code>
  /// headers are present in the request as follows, then Amazon S3 returns the
  /// HTTP status code <code>200 OK</code> and the data requested:
  ///
  /// <ul>
  /// <li>
  /// <code>If-Match</code> condition evaluates to <code>true</code>.
  /// </li>
  /// <li>
  /// <code>If-Unmodified-Since</code> condition evaluates to
  /// <code>false</code>.
  /// </li>
  /// </ul>
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  /// </li>
  /// <li>
  /// If both of the <code>If-None-Match</code> and
  /// <code>If-Modified-Since</code> headers are present in the request as
  /// follows, then Amazon S3 returns the HTTP status code <code>304 Not
  /// Modified</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>If-None-Match</code> condition evaluates to <code>false</code>.
  /// </li>
  /// <li>
  /// <code>If-Modified-Since</code> condition evaluates to <code>true</code>.
  /// </li>
  /// </ul>
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following actions are related to <code>GetObjectAttributes</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectLegalHold.html">GetObjectLegalHold</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectLockConfiguration.html">GetObjectLockConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectRetention.html">GetObjectRetention</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadObject.html">HeadObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchKey].
  ///
  /// Parameter [bucket] :
  /// The name of the bucket that contains the object.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The object key.
  ///
  /// Parameter [objectAttributes] :
  /// Specifies the fields at the root level that you want returned in the
  /// response. Fields that you do not specify are not returned.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [maxParts] :
  /// Sets the maximum number of parts to return.
  ///
  /// Parameter [partNumberMarker] :
  /// Specifies the part after which listing should begin. Only parts with
  /// higher part numbers will be listed.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// AES256).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded; Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [versionId] :
  /// The version ID used to reference a specific version of the object.
  /// <note>
  /// S3 Versioning isn't enabled and supported for directory buckets. For this
  /// API operation, only the <code>null</code> value of the version ID is
  /// supported by directory buckets. You can only specify <code>null</code> to
  /// the <code>versionId</code> query parameter in the request.
  /// </note>
  Future<GetObjectAttributesOutput> getObjectAttributes({
    required String bucket,
    required String key,
    required List<ObjectAttributes> objectAttributes,
    String? expectedBucketOwner,
    int? maxParts,
    int? partNumberMarker,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    String? versionId,
  }) async {
    final headers = <String, String>{
      'x-amz-object-attributes': objectAttributes.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (maxParts != null) 'x-amz-max-parts': maxParts.toString(),
      if (partNumberMarker != null)
        'x-amz-part-number-marker': partNumberMarker.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?attributes',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetObjectAttributesOutput(
      checksum: _s.extractXmlChild($elem, 'Checksum')?.let(Checksum.fromXml),
      eTag: _s.extractXmlStringValue($elem, 'ETag'),
      objectParts: _s
          .extractXmlChild($elem, 'ObjectParts')
          ?.let(GetObjectAttributesParts.fromXml),
      objectSize: _s.extractXmlIntValue($elem, 'ObjectSize'),
      storageClass: _s
          .extractXmlStringValue($elem, 'StorageClass')
          ?.let(StorageClass.fromString),
      deleteMarker:
          _s.extractHeaderBoolValue($result.headers, 'x-amz-delete-marker'),
      lastModified:
          _s.extractHeaderDateTimeValue($result.headers, 'Last-Modified'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Gets an object's current legal hold status. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking
  /// Objects</a>.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// The following action is related to <code>GetObjectLegalHold</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object whose legal hold status you want to
  /// retrieve.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The key name for the object whose legal hold status you want to retrieve.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// The version ID of the object whose legal hold status you want to retrieve.
  Future<GetObjectLegalHoldOutput> getObjectLegalHold({
    required String bucket,
    required String key,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?legal-hold',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetObjectLegalHoldOutput(
      legalHold: ObjectLockLegalHold.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Gets the Object Lock configuration for a bucket. The rule specified in the
  /// Object Lock configuration will be applied by default to every new object
  /// placed in the specified bucket. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking
  /// Objects</a>.
  ///
  /// The following action is related to
  /// <code>GetObjectLockConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket whose Object Lock configuration you want to retrieve.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetObjectLockConfigurationOutput> getObjectLockConfiguration({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?object-lock',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetObjectLockConfigurationOutput(
      objectLockConfiguration: ObjectLockConfiguration.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Retrieves an object's retention settings. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking
  /// Objects</a>.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// The following action is related to <code>GetObjectRetention</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object whose retention settings you want to
  /// retrieve.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The key name for the object whose retention settings you want to retrieve.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// The version ID for the object whose retention settings you want to
  /// retrieve.
  Future<GetObjectRetentionOutput> getObjectRetention({
    required String bucket,
    required String key,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?retention',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetObjectRetentionOutput(
      retention: ObjectLockRetention.fromXml($elem),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns the tag-set of an object. You send the GET request against the
  /// tagging subresource associated with the object.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:GetObjectTagging</code> action. By default, the GET action
  /// returns information about current version of an object. For a versioned
  /// bucket, you can have multiple versions of an object in your bucket. To
  /// retrieve tags of any other version, use the versionId query parameter. You
  /// also need permission for the <code>s3:GetObjectVersionTagging</code>
  /// action.
  ///
  /// By default, the bucket owner has this permission and can grant this
  /// permission to others.
  ///
  /// For information about the Amazon S3 object tagging feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">Object
  /// Tagging</a>.
  ///
  /// The following actions are related to <code>GetObjectTagging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjectTagging.html">DeleteObjectTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html">PutObjectTagging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object for which to get the tagging
  /// information.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which to get the tagging information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// The versionId of the object for which to get the tagging information.
  Future<GetObjectTaggingOutput> getObjectTagging({
    required String bucket,
    required String key,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?tagging',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetObjectTaggingOutput(
      tagSet: _s
          .extractXmlChild($elem, 'TagSet')!
          .findElements('Tag')
          .map(Tag.fromXml)
          .toList(),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns torrent files from a bucket. BitTorrent can save you bandwidth
  /// when you're distributing large files.
  /// <note>
  /// You can get torrent only for objects that are less than 5 GB in size, and
  /// that are not encrypted using server-side encryption with a
  /// customer-provided encryption key.
  /// </note>
  /// To use GET, you must have READ access to the object.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// The following action is related to <code>GetObjectTorrent</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the object for which to get the torrent
  /// files.
  ///
  /// Parameter [key] :
  /// The object key for which to get the information.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetObjectTorrentOutput> getObjectTorrent({
    required String bucket,
    required String key,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?torrent',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return GetObjectTorrentOutput(
      body: await $result.stream.toBytes(),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Retrieves the <code>PublicAccessBlock</code> configuration for an Amazon
  /// S3 bucket. To use this operation, you must have the
  /// <code>s3:GetBucketPublicAccessBlock</code> permission. For more
  /// information about Amazon S3 permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a>.
  /// <important>
  /// When Amazon S3 evaluates the <code>PublicAccessBlock</code> configuration
  /// for a bucket or an object, it checks the <code>PublicAccessBlock</code>
  /// configuration for both the bucket (or the bucket that contains the object)
  /// and the bucket owner's account. If the <code>PublicAccessBlock</code>
  /// settings are different between the bucket and the account, Amazon S3 uses
  /// the most restrictive combination of the bucket-level and account-level
  /// settings.
  /// </important>
  /// For more information about when Amazon S3 considers a bucket or an object
  /// public, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The
  /// Meaning of "Public"</a>.
  ///
  /// The following operations are related to <code>GetPublicAccessBlock</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using
  /// Amazon S3 Block Public Access</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutPublicAccessBlock.html">PutPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetPublicAccessBlock.html">GetPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeletePublicAccessBlock.html">DeletePublicAccessBlock</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code>
  /// configuration you want to retrieve.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<GetPublicAccessBlockOutput> getPublicAccessBlock({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?publicAccessBlock',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return GetPublicAccessBlockOutput(
      publicAccessBlockConfiguration:
          PublicAccessBlockConfiguration.fromXml($elem),
    );
  }

  /// You can use this operation to determine if a bucket exists and if you have
  /// permission to access it. The action returns a <code>200 OK</code> if the
  /// bucket exists and you have permission to access it.
  ///
  /// If the bucket does not exist or you do not have permission to access it,
  /// the <code>HEAD</code> request returns a generic <code>400 Bad
  /// Request</code>, <code>403 Forbidden</code> or <code>404 Not Found</code>
  /// code. A message body is not included, so you cannot determine the
  /// exception beyond these HTTP response codes.
  /// <note>
  /// <b>Directory buckets </b> - You must make requests for this API operation
  /// to the Zonal endpoint. These endpoints support virtual-hosted-style
  /// requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Authentication and authorization</dt> <dd>
  /// All <code>HeadBucket</code> requests must be authenticated and signed by
  /// using IAM credentials (access key ID and secret access key for the IAM
  /// identities). All headers with the <code>x-amz-</code> prefix, including
  /// <code>x-amz-copy-source</code>, must be signed. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST
  /// Authentication</a>.
  ///
  /// <b>Directory bucket</b> - You must use IAM credentials to authenticate and
  /// authorize your access to the <code>HeadBucket</code> API operation,
  /// instead of using the temporary security credentials through the
  /// <code>CreateSession</code> API operation.
  ///
  /// Amazon Web Services CLI or SDKs handles authentication and authorization
  /// on your behalf.
  /// </dd> <dt>Permissions</dt> <dd> <p/>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - To use this operation, you
  /// must have permissions to perform the <code>s3:ListBucket</code> action.
  /// The bucket owner has this permission by default and can grant this
  /// permission to others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// access permissions to your Amazon S3 resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - You must have the <b>
  /// <code>s3express:CreateSession</code> </b> permission in the
  /// <code>Action</code> element of a policy. By default, the session is in the
  /// <code>ReadWrite</code> mode. If you want to restrict the access, you can
  /// explicitly set the <code>s3express:SessionMode</code> condition key to
  /// <code>ReadOnly</code> on the bucket.
  ///
  /// For more information about example bucket policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example
  /// bucket policies for S3 Express One Zone</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-identity-policies.html">Amazon
  /// Web Services Identity and Access Management (IAM) identity-based policies
  /// for S3 Express One Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  ///
  /// May throw [NoSuchBucket].
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Object Lambda access points</b> - When you use this API operation with
  /// an Object Lambda access point, provide the alias of the Object Lambda
  /// access point in place of the bucket name. If the Object Lambda access
  /// point alias in a request is not valid, the error code
  /// <code>InvalidAccessPointAliasError</code> is returned. For more
  /// information about <code>InvalidAccessPointAliasError</code>, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List
  /// of Error Codes</a>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<HeadBucketOutput> headBucket({
    required String bucket,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'HEAD',
      requestUri: '/${Uri.encodeComponent(bucket)}',
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return HeadBucketOutput(
      accessPointAlias: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-access-point-alias'),
      bucketLocationName: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-bucket-location-name'),
      bucketLocationType: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-bucket-location-type')
          ?.let(LocationType.fromString),
      bucketRegion:
          _s.extractHeaderStringValue($result.headers, 'x-amz-bucket-region'),
    );
  }

  /// The <code>HEAD</code> operation retrieves metadata from an object without
  /// returning the object itself. This operation is useful if you're interested
  /// only in an object's metadata.
  ///
  /// A <code>HEAD</code> request has the same options as a <code>GET</code>
  /// operation on an object. The response is identical to the <code>GET</code>
  /// response except that there is no response body. Because of this, if the
  /// <code>HEAD</code> request generates an error, it returns a generic code,
  /// such as <code>400 Bad Request</code>, <code>403 Forbidden</code>,
  /// <code>404 Not Found</code>, <code>405 Method Not Allowed</code>, <code>412
  /// Precondition Failed</code>, or <code>304 Not Modified</code>. It's not
  /// possible to retrieve the exact exception of these error codes.
  ///
  /// Request headers are limited to 8 KB in size. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">Common
  /// Request Headers</a>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd> <p/>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - To use <code>HEAD</code>, you
  /// must have the <code>s3:GetObject</code> permission. You need the relevant
  /// read object (or version) permission for this operation. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/list_amazons3.html">Actions,
  /// resources, and condition keys for Amazon S3</a> in the <i>Amazon S3 User
  /// Guide</i>.
  ///
  /// If the object you request doesn't exist, the error that Amazon S3 returns
  /// depends on whether you also have the <code>s3:ListBucket</code>
  /// permission.
  ///
  /// <ul>
  /// <li>
  /// If you have the <code>s3:ListBucket</code> permission on the bucket,
  /// Amazon S3 returns an HTTP status code <code>404 Not Found</code> error.
  /// </li>
  /// <li>
  /// If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3
  /// returns an HTTP status code <code>403 Forbidden</code> error.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Encryption</dt> <dd> <note>
  /// Encryption request headers, like
  /// <code>x-amz-server-side-encryption</code>, should not be sent for
  /// <code>HEAD</code> requests if your object uses server-side encryption with
  /// Key Management Service (KMS) keys (SSE-KMS), dual-layer server-side
  /// encryption with Amazon Web Services KMS keys (DSSE-KMS), or server-side
  /// encryption with Amazon S3 managed encryption keys (SSE-S3). The
  /// <code>x-amz-server-side-encryption</code> header is used when you
  /// <code>PUT</code> an object to S3 and want to specify the encryption
  /// method. If you include this header in a <code>HEAD</code> request for an
  /// object that uses these types of keys, you’ll get an HTTP <code>400 Bad
  /// Request</code> error. It's because the encryption method can't be changed
  /// when you retrieve the object.
  /// </note>
  /// If you encrypt an object by using server-side encryption with
  /// customer-provided encryption keys (SSE-C) when you store the object in
  /// Amazon S3, then when you retrieve the metadata from the object, you must
  /// use the following headers to provide the encryption key for the server to
  /// be able to retrieve the object's metadata. The headers are:
  ///
  /// <ul>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-algorithm</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key</code>
  /// </li>
  /// <li>
  /// <code>x-amz-server-side-encryption-customer-key-MD5</code>
  /// </li>
  /// </ul>
  /// For more information about SSE-C, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side
  /// Encryption (Using Customer-Provided Encryption Keys)</a> in the <i>Amazon
  /// S3 User Guide</i>.
  /// <note>
  /// <b>Directory bucket permissions</b> - For directory buckets, only
  /// server-side encryption with Amazon S3 managed keys (SSE-S3)
  /// (<code>AES256</code>) is supported.
  /// </note> </dd> <dt>Versioning</dt> <dd>
  /// <ul>
  /// <li>
  /// If the current version of the object is a delete marker, Amazon S3 behaves
  /// as if the object was deleted and includes <code>x-amz-delete-marker:
  /// true</code> in the response.
  /// </li>
  /// <li>
  /// If the specified version is a delete marker, the response returns a
  /// <code>405 Method Not Allowed</code> error and the <code>Last-Modified:
  /// timestamp</code> response header.
  /// </li>
  /// </ul> <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets</b> - Delete marker is not supported by directory
  /// buckets.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets. For this API operation, only the <code>null</code>
  /// value of the version ID is supported by directory buckets. You can only
  /// specify <code>null</code> to the <code>versionId</code> query parameter in
  /// the request.
  /// </li>
  /// </ul> </note> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following actions are related to <code>HeadObject</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchKey].
  ///
  /// Parameter [bucket] :
  /// The name of the bucket that contains the object.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The object key.
  ///
  /// Parameter [checksumMode] :
  /// To retrieve the checksum, this parameter must be enabled.
  ///
  /// In addition, if you enable <code>ChecksumMode</code> and the object is
  /// encrypted with Amazon Web Services Key Management Service (Amazon Web
  /// Services KMS), you must have permission to use the
  /// <code>kms:Decrypt</code> action for the request to succeed.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [ifMatch] :
  /// Return the object only if its entity tag (ETag) is the same as the one
  /// specified; otherwise, return a 412 (precondition failed) error.
  ///
  /// If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code>
  /// headers are present in the request as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>If-Match</code> condition evaluates to <code>true</code>, and;
  /// </li>
  /// <li>
  /// <code>If-Unmodified-Since</code> condition evaluates to
  /// <code>false</code>;
  /// </li>
  /// </ul>
  /// Then Amazon S3 returns <code>200 OK</code> and the data requested.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [ifModifiedSince] :
  /// Return the object only if it has been modified since the specified time;
  /// otherwise, return a 304 (not modified) error.
  ///
  /// If both of the <code>If-None-Match</code> and
  /// <code>If-Modified-Since</code> headers are present in the request as
  /// follows:
  ///
  /// <ul>
  /// <li>
  /// <code>If-None-Match</code> condition evaluates to <code>false</code>, and;
  /// </li>
  /// <li>
  /// <code>If-Modified-Since</code> condition evaluates to <code>true</code>;
  /// </li>
  /// </ul>
  /// Then Amazon S3 returns the <code>304 Not Modified</code> response code.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [ifNoneMatch] :
  /// Return the object only if its entity tag (ETag) is different from the one
  /// specified; otherwise, return a 304 (not modified) error.
  ///
  /// If both of the <code>If-None-Match</code> and
  /// <code>If-Modified-Since</code> headers are present in the request as
  /// follows:
  ///
  /// <ul>
  /// <li>
  /// <code>If-None-Match</code> condition evaluates to <code>false</code>, and;
  /// </li>
  /// <li>
  /// <code>If-Modified-Since</code> condition evaluates to <code>true</code>;
  /// </li>
  /// </ul>
  /// Then Amazon S3 returns the <code>304 Not Modified</code> response code.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [ifUnmodifiedSince] :
  /// Return the object only if it has not been modified since the specified
  /// time; otherwise, return a 412 (precondition failed) error.
  ///
  /// If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code>
  /// headers are present in the request as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>If-Match</code> condition evaluates to <code>true</code>, and;
  /// </li>
  /// <li>
  /// <code>If-Unmodified-Since</code> condition evaluates to
  /// <code>false</code>;
  /// </li>
  /// </ul>
  /// Then Amazon S3 returns <code>200 OK</code> and the data requested.
  ///
  /// For more information about conditional requests, see <a
  /// href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.
  ///
  /// Parameter [partNumber] :
  /// Part number of the object being read. This is a positive integer between 1
  /// and 10,000. Effectively performs a 'ranged' HEAD request for the part
  /// specified. Useful querying about the size of the part and the number of
  /// parts in this object.
  ///
  /// Parameter [range] :
  /// HeadObject returns only the metadata for an object. If the Range is
  /// satisfiable, only the <code>ContentLength</code> is affected in the
  /// response. If the Range is not satisfiable, S3 returns a <code>416 -
  /// Requested Range Not Satisfiable</code> error.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// AES256).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded; Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [versionId] :
  /// Version ID used to reference a specific version of the object.
  /// <note>
  /// For directory buckets in this API operation, only the <code>null</code>
  /// value of the version ID is supported.
  /// </note>
  Future<HeadObjectOutput> headObject({
    required String bucket,
    required String key,
    ChecksumMode? checksumMode,
    String? expectedBucketOwner,
    String? ifMatch,
    DateTime? ifModifiedSince,
    String? ifNoneMatch,
    DateTime? ifUnmodifiedSince,
    int? partNumber,
    String? range,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (checksumMode != null) 'x-amz-checksum-mode': checksumMode.value,
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (ifMatch != null) 'If-Match': ifMatch.toString(),
      if (ifModifiedSince != null)
        'If-Modified-Since': _s.rfc822ToJson(ifModifiedSince),
      if (ifNoneMatch != null) 'If-None-Match': ifNoneMatch.toString(),
      if (ifUnmodifiedSince != null)
        'If-Unmodified-Since': _s.rfc822ToJson(ifUnmodifiedSince),
      if (range != null) 'Range': range.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      if (partNumber != null) 'partNumber': [partNumber.toString()],
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'HEAD',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return HeadObjectOutput(
      acceptRanges:
          _s.extractHeaderStringValue($result.headers, 'accept-ranges'),
      archiveStatus: _s
          .extractHeaderStringValue($result.headers, 'x-amz-archive-status')
          ?.let(ArchiveStatus.fromString),
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      cacheControl:
          _s.extractHeaderStringValue($result.headers, 'Cache-Control'),
      checksumCRC32:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32'),
      checksumCRC32C:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32c'),
      checksumSHA1:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha1'),
      checksumSHA256:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha256'),
      contentDisposition:
          _s.extractHeaderStringValue($result.headers, 'Content-Disposition'),
      contentEncoding:
          _s.extractHeaderStringValue($result.headers, 'Content-Encoding'),
      contentLanguage:
          _s.extractHeaderStringValue($result.headers, 'Content-Language'),
      contentLength:
          _s.extractHeaderIntValue($result.headers, 'Content-Length'),
      contentType: _s.extractHeaderStringValue($result.headers, 'Content-Type'),
      deleteMarker:
          _s.extractHeaderBoolValue($result.headers, 'x-amz-delete-marker'),
      eTag: _s.extractHeaderStringValue($result.headers, 'ETag'),
      expiration:
          _s.extractHeaderStringValue($result.headers, 'x-amz-expiration'),
      expires: _s.extractHeaderDateTimeValue($result.headers, 'Expires'),
      expiresString:
          _s.extractHeaderStringValue($result.headers, 'ExpiresString'),
      lastModified:
          _s.extractHeaderDateTimeValue($result.headers, 'Last-Modified'),
      metadata: _s.extractHeaderMapValues($result.headers, 'x-amz-meta-'),
      missingMeta:
          _s.extractHeaderIntValue($result.headers, 'x-amz-missing-meta'),
      objectLockLegalHoldStatus: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-object-lock-legal-hold')
          ?.let(ObjectLockLegalHoldStatus.fromString),
      objectLockMode: _s
          .extractHeaderStringValue($result.headers, 'x-amz-object-lock-mode')
          ?.let(ObjectLockMode.fromString),
      objectLockRetainUntilDate: _s.extractHeaderDateTimeValue(
          $result.headers, 'x-amz-object-lock-retain-until-date',
          parser: _s.timeStampFromJson),
      partsCount:
          _s.extractHeaderIntValue($result.headers, 'x-amz-mp-parts-count'),
      replicationStatus: _s
          .extractHeaderStringValue($result.headers, 'x-amz-replication-status')
          ?.let(ReplicationStatus.fromString),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      restore: _s.extractHeaderStringValue($result.headers, 'x-amz-restore'),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
      storageClass: _s
          .extractHeaderStringValue($result.headers, 'x-amz-storage-class')
          ?.let(StorageClass.fromString),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
      websiteRedirectLocation: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-website-redirect-location'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Lists the analytics configurations for the bucket. You can have up to
  /// 1,000 analytics configurations per bucket.
  ///
  /// This action supports list pagination and does not return more than 100
  /// configurations at a time. You should always check the
  /// <code>IsTruncated</code> element in the response. If there are no more
  /// configurations to list, <code>IsTruncated</code> is set to false. If there
  /// are more configurations to list, <code>IsTruncated</code> is set to true,
  /// and there will be a value in <code>NextContinuationToken</code>. You use
  /// the <code>NextContinuationToken</code> value to continue the pagination of
  /// the list by passing the value in continuation-token in the request to
  /// <code>GET</code> the next page.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:GetAnalyticsConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about Amazon S3 analytics feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon
  /// S3 Analytics – Storage Class Analysis</a>.
  ///
  /// The following operations are related to
  /// <code>ListBucketAnalyticsConfigurations</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAnalyticsConfiguration.html">GetBucketAnalyticsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketAnalyticsConfiguration.html">DeleteBucketAnalyticsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAnalyticsConfiguration.html">PutBucketAnalyticsConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket from which analytics configurations are retrieved.
  ///
  /// Parameter [continuationToken] :
  /// The <code>ContinuationToken</code> that represents a placeholder from
  /// where this request should begin.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<ListBucketAnalyticsConfigurationsOutput>
      listBucketAnalyticsConfigurations({
    required String bucket,
    String? continuationToken,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      if (continuationToken != null) 'continuation-token': [continuationToken],
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?analytics',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return ListBucketAnalyticsConfigurationsOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Lists the S3 Intelligent-Tiering configuration from the specified bucket.
  ///
  /// The S3 Intelligent-Tiering storage class is designed to optimize storage
  /// costs by automatically moving data to the most cost-effective storage
  /// access tier, without performance impact or operational overhead. S3
  /// Intelligent-Tiering delivers automatic cost savings in three low latency
  /// and high throughput access tiers. To get the lowest storage cost on data
  /// that can be accessed in minutes to hours, you can choose to activate
  /// additional archiving capabilities.
  ///
  /// The S3 Intelligent-Tiering storage class is the ideal storage class for
  /// data with unknown, changing, or unpredictable access patterns, independent
  /// of object size or retention period. If the size of an object is less than
  /// 128 KB, it is not monitored and not eligible for auto-tiering. Smaller
  /// objects can be stored, but they are always charged at the Frequent Access
  /// tier rates in the S3 Intelligent-Tiering storage class.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage
  /// class for automatically optimizing frequently and infrequently accessed
  /// objects</a>.
  ///
  /// Operations related to
  /// <code>ListBucketIntelligentTieringConfigurations</code> include:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketIntelligentTieringConfiguration.html">DeleteBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketIntelligentTieringConfiguration.html">PutBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketIntelligentTieringConfiguration.html">GetBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose configuration you want to modify or
  /// retrieve.
  ///
  /// Parameter [continuationToken] :
  /// The <code>ContinuationToken</code> that represents a placeholder from
  /// where this request should begin.
  Future<ListBucketIntelligentTieringConfigurationsOutput>
      listBucketIntelligentTieringConfigurations({
    required String bucket,
    String? continuationToken,
  }) async {
    final $query = <String, List<String>>{
      if (continuationToken != null) 'continuation-token': [continuationToken],
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?intelligent-tiering',
      queryParams: $query,
      exceptionFnMap: _exceptionFns,
    );
    return ListBucketIntelligentTieringConfigurationsOutput.fromXml(
        $result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns a list of inventory configurations for the bucket. You can have up
  /// to 1,000 analytics configurations per bucket.
  ///
  /// This action supports list pagination and does not return more than 100
  /// configurations at a time. Always check the <code>IsTruncated</code>
  /// element in the response. If there are no more configurations to list,
  /// <code>IsTruncated</code> is set to false. If there are more configurations
  /// to list, <code>IsTruncated</code> is set to true, and there is a value in
  /// <code>NextContinuationToken</code>. You use the
  /// <code>NextContinuationToken</code> value to continue the pagination of the
  /// list by passing the value in continuation-token in the request to
  /// <code>GET</code> the next page.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:GetInventoryConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about the Amazon S3 inventory feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon
  /// S3 Inventory</a>
  ///
  /// The following operations are related to
  /// <code>ListBucketInventoryConfigurations</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketInventoryConfiguration.html">GetBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketInventoryConfiguration.html">DeleteBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketInventoryConfiguration.html">PutBucketInventoryConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the inventory configurations to
  /// retrieve.
  ///
  /// Parameter [continuationToken] :
  /// The marker used to continue an inventory configuration listing that has
  /// been truncated. Use the <code>NextContinuationToken</code> from a
  /// previously truncated list response to continue the listing. The
  /// continuation token is an opaque value that Amazon S3 understands.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<ListBucketInventoryConfigurationsOutput>
      listBucketInventoryConfigurations({
    required String bucket,
    String? continuationToken,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      if (continuationToken != null) 'continuation-token': [continuationToken],
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?inventory',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return ListBucketInventoryConfigurationsOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Lists the metrics configurations for the bucket. The metrics
  /// configurations are only for the request metrics of the bucket and do not
  /// provide information on daily storage metrics. You can have up to 1,000
  /// configurations per bucket.
  ///
  /// This action supports list pagination and does not return more than 100
  /// configurations at a time. Always check the <code>IsTruncated</code>
  /// element in the response. If there are no more configurations to list,
  /// <code>IsTruncated</code> is set to false. If there are more configurations
  /// to list, <code>IsTruncated</code> is set to true, and there is a value in
  /// <code>NextContinuationToken</code>. You use the
  /// <code>NextContinuationToken</code> value to continue the pagination of the
  /// list by passing the value in <code>continuation-token</code> in the
  /// request to <code>GET</code> the next page.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:GetMetricsConfiguration</code> action. The bucket owner has this
  /// permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For more information about metrics configurations and CloudWatch request
  /// metrics, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
  /// Metrics with Amazon CloudWatch</a>.
  ///
  /// The following operations are related to
  /// <code>ListBucketMetricsConfigurations</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html">PutBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketMetricsConfiguration.html">GetBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketMetricsConfiguration.html">DeleteBucketMetricsConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the metrics configurations to retrieve.
  ///
  /// Parameter [continuationToken] :
  /// The marker that is used to continue a metrics configuration listing that
  /// has been truncated. Use the <code>NextContinuationToken</code> from a
  /// previously truncated list response to continue the listing. The
  /// continuation token is an opaque value that Amazon S3 understands.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<ListBucketMetricsConfigurationsOutput>
      listBucketMetricsConfigurations({
    required String bucket,
    String? continuationToken,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      if (continuationToken != null) 'continuation-token': [continuationToken],
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?metrics',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    return ListBucketMetricsConfigurationsOutput.fromXml($result.body);
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns a list of all buckets owned by the authenticated sender of the
  /// request. To use this operation, you must have the
  /// <code>s3:ListAllMyBuckets</code> permission.
  ///
  /// For information about Amazon S3 buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html">Creating,
  /// configuring, and working with Amazon S3 buckets</a>.
  Future<ListBucketsOutput> listBuckets() async {
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
    return ListBucketsOutput.fromXml($result.body);
  }

  /// Returns a list of all Amazon S3 directory buckets owned by the
  /// authenticated sender of the request. For more information about directory
  /// buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html">Directory
  /// buckets</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Regional endpoint. These endpoints support
  /// path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// You must have the <code>s3express:ListAllMyDirectoryBuckets</code>
  /// permission in an IAM identity-based policy instead of a bucket policy.
  /// Cross-account access to this API operation isn't supported. This operation
  /// can only be performed by the Amazon Web Services account that owns the
  /// resource. For more information about directory bucket policies and
  /// permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam.html">Amazon
  /// Web Services Identity and Access Management (IAM) for S3 Express One
  /// Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is
  /// <code>s3express-control.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  ///
  /// Parameter [continuationToken] :
  /// <code>ContinuationToken</code> indicates to Amazon S3 that the list is
  /// being continued on this bucket with a token.
  /// <code>ContinuationToken</code> is obfuscated and is not a real key. You
  /// can use this <code>ContinuationToken</code> for pagination of the list
  /// results.
  ///
  /// Parameter [maxDirectoryBuckets] :
  /// Maximum number of buckets to be returned in response. When the number is
  /// more than the count of buckets that are owned by an Amazon Web Services
  /// account, return all the buckets in response.
  Future<ListDirectoryBucketsOutput> listDirectoryBuckets({
    String? continuationToken,
    int? maxDirectoryBuckets,
  }) async {
    _s.validateNumRange(
      'maxDirectoryBuckets',
      maxDirectoryBuckets,
      0,
      1000,
    );
    final $query = <String, List<String>>{
      if (continuationToken != null) 'continuation-token': [continuationToken],
      if (maxDirectoryBuckets != null)
        'max-directory-buckets': [maxDirectoryBuckets.toString()],
    };
    final $result = await _protocol.send(
      method: 'GET',
      requestUri: '/',
      queryParams: $query,
      exceptionFnMap: _exceptionFns,
    );
    return ListDirectoryBucketsOutput.fromXml($result.body);
  }

  /// This operation lists in-progress multipart uploads in a bucket. An
  /// in-progress multipart upload is a multipart upload that has been initiated
  /// by the <code>CreateMultipartUpload</code> request, but has not yet been
  /// completed or aborted.
  /// <note>
  /// <b>Directory buckets</b> - If multipart uploads in a directory bucket are
  /// in progress, you can't delete the bucket until all the in-progress
  /// multipart uploads are aborted or completed.
  /// </note>
  /// The <code>ListMultipartUploads</code> operation returns a maximum of 1,000
  /// multipart uploads in the response. The limit of 1,000 multipart uploads is
  /// also the default value. You can further limit the number of uploads in a
  /// response by specifying the <code>max-uploads</code> request parameter. If
  /// there are more than 1,000 multipart uploads that satisfy your
  /// <code>ListMultipartUploads</code> request, the response returns an
  /// <code>IsTruncated</code> element with the value of <code>true</code>, a
  /// <code>NextKeyMarker</code> element, and a <code>NextUploadIdMarker</code>
  /// element. To list the remaining multipart uploads, you need to make
  /// subsequent <code>ListMultipartUploads</code> requests. In these requests,
  /// include two query parameters: <code>key-marker</code> and
  /// <code>upload-id-marker</code>. Set the value of <code>key-marker</code> to
  /// the <code>NextKeyMarker</code> value from the previous response.
  /// Similarly, set the value of <code>upload-id-marker</code> to the
  /// <code>NextUploadIdMarker</code> value from the previous response.
  /// <note>
  /// <b>Directory buckets</b> - The <code>upload-id-marker</code> element and
  /// the <code>NextUploadIdMarker</code> element aren't supported by directory
  /// buckets. To list the additional multipart uploads, you only need to set
  /// the value of <code>key-marker</code> to the <code>NextKeyMarker</code>
  /// value from the previous response.
  /// </note>
  /// For more information about multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading
  /// Objects Using Multipart Upload</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - For information about
  /// permissions required to use the multipart upload API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// Upload and Permissions</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Sorting of multipart uploads in response</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket</b> - In the <code>ListMultipartUploads</code>
  /// response, the multipart uploads are sorted based on two criteria:
  ///
  /// <ul>
  /// <li>
  /// Key-based sorting - Multipart uploads are initially sorted in ascending
  /// order based on their object keys.
  /// </li>
  /// <li>
  /// Time-based sorting - For uploads that share the same object key, they are
  /// further sorted in ascending order based on the upload initiation time.
  /// Among uploads with the same key, the one that was initiated first will
  /// appear before the ones that were initiated later.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket</b> - In the <code>ListMultipartUploads</code>
  /// response, the multipart uploads aren't sorted lexicographically based on
  /// the object keys.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>ListMultipartUploads</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket to which the multipart upload was initiated.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [delimiter] :
  /// Character you use to group keys.
  ///
  /// All keys that contain the same string between the prefix, if specified,
  /// and the first occurrence of the delimiter after the prefix are grouped
  /// under a single result element, <code>CommonPrefixes</code>. If you don't
  /// specify the prefix parameter, then the substring starts at the beginning
  /// of the key. The keys that are grouped under <code>CommonPrefixes</code>
  /// result element are not returned elsewhere in the response.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, <code>/</code> is the
  /// only supported delimiter.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [keyMarker] :
  /// Specifies the multipart upload after which listing should begin.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>General purpose buckets</b> - For general purpose buckets,
  /// <code>key-marker</code> is an object key. Together with
  /// <code>upload-id-marker</code>, this parameter specifies the multipart
  /// upload after which listing should begin.
  ///
  /// If <code>upload-id-marker</code> is not specified, only the keys
  /// lexicographically greater than the specified <code>key-marker</code> will
  /// be included in the list.
  ///
  /// If <code>upload-id-marker</code> is specified, any multipart uploads for a
  /// key equal to the <code>key-marker</code> might also be included, provided
  /// those multipart uploads have upload IDs lexicographically greater than the
  /// specified <code>upload-id-marker</code>.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - For directory buckets, <code>key-marker</code>
  /// is obfuscated and isn't a real object key. The
  /// <code>upload-id-marker</code> parameter isn't supported by directory
  /// buckets. To list the additional multipart uploads, you only need to set
  /// the value of <code>key-marker</code> to the <code>NextKeyMarker</code>
  /// value from the previous response.
  ///
  /// In the <code>ListMultipartUploads</code> response, the multipart uploads
  /// aren't sorted lexicographically based on the object keys.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [maxUploads] :
  /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return
  /// in the response body. 1,000 is the maximum number of uploads that can be
  /// returned in a response.
  ///
  /// Parameter [prefix] :
  /// Lists in-progress uploads only for those keys that begin with the
  /// specified prefix. You can use prefixes to separate a bucket into different
  /// grouping of keys. (You can think of using <code>prefix</code> to make
  /// groups in the same way that you'd use a folder in a file system.)
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, only prefixes that end
  /// in a delimiter (<code>/</code>) are supported.
  /// </note>
  ///
  /// Parameter [uploadIdMarker] :
  /// Together with key-marker, specifies the multipart upload after which
  /// listing should begin. If key-marker is not specified, the upload-id-marker
  /// parameter is ignored. Otherwise, any multipart uploads for a key equal to
  /// the key-marker might be included in the list only if they have an upload
  /// ID lexicographically greater than the specified
  /// <code>upload-id-marker</code>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<ListMultipartUploadsOutput> listMultipartUploads({
    required String bucket,
    String? delimiter,
    EncodingType? encodingType,
    String? expectedBucketOwner,
    String? keyMarker,
    int? maxUploads,
    String? prefix,
    RequestPayer? requestPayer,
    String? uploadIdMarker,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (delimiter != null) 'delimiter': [delimiter],
      if (encodingType != null) 'encoding-type': [encodingType.value],
      if (keyMarker != null) 'key-marker': [keyMarker],
      if (maxUploads != null) 'max-uploads': [maxUploads.toString()],
      if (prefix != null) 'prefix': [prefix],
      if (uploadIdMarker != null) 'upload-id-marker': [uploadIdMarker],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?uploads',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return ListMultipartUploadsOutput(
      bucket: _s.extractXmlStringValue($elem, 'Bucket'),
      commonPrefixes: $elem
          .findElements('CommonPrefixes')
          .map(CommonPrefix.fromXml)
          .toList(),
      delimiter: _s.extractXmlStringValue($elem, 'Delimiter'),
      encodingType: _s
          .extractXmlStringValue($elem, 'EncodingType')
          ?.let(EncodingType.fromString),
      isTruncated: _s.extractXmlBoolValue($elem, 'IsTruncated'),
      keyMarker: _s.extractXmlStringValue($elem, 'KeyMarker'),
      maxUploads: _s.extractXmlIntValue($elem, 'MaxUploads'),
      nextKeyMarker: _s.extractXmlStringValue($elem, 'NextKeyMarker'),
      nextUploadIdMarker: _s.extractXmlStringValue($elem, 'NextUploadIdMarker'),
      prefix: _s.extractXmlStringValue($elem, 'Prefix'),
      uploadIdMarker: _s.extractXmlStringValue($elem, 'UploadIdMarker'),
      uploads:
          $elem.findElements('Upload').map(MultipartUpload.fromXml).toList(),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns metadata about all versions of the objects in a bucket. You can
  /// also use request parameters as selection criteria to return metadata about
  /// a subset of all the object versions.
  /// <important>
  /// To use this operation, you must have permission to perform the
  /// <code>s3:ListBucketVersions</code> action. Be aware of the name
  /// difference.
  /// </important> <note>
  /// A <code>200 OK</code> response can contain valid or invalid XML. Make sure
  /// to design your application to parse the contents of the response and
  /// handle it appropriately.
  /// </note>
  /// To use this operation, you must have READ access to the bucket.
  ///
  /// The following operations are related to <code>ListObjectVersions</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name that contains the objects.
  ///
  /// Parameter [delimiter] :
  /// A delimiter is a character that you specify to group keys. All keys that
  /// contain the same string between the <code>prefix</code> and the first
  /// occurrence of the delimiter are grouped under a single result element in
  /// <code>CommonPrefixes</code>. These groups are counted as one result
  /// against the <code>max-keys</code> limitation. These keys are not returned
  /// elsewhere in the response.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [keyMarker] :
  /// Specifies the key to start with when listing objects in a bucket.
  ///
  /// Parameter [maxKeys] :
  /// Sets the maximum number of keys returned in the response. By default, the
  /// action returns up to 1,000 key names. The response might contain fewer
  /// keys but will never contain more. If additional keys satisfy the search
  /// criteria, but were not returned because <code>max-keys</code> was
  /// exceeded, the response contains
  /// <code>&lt;isTruncated&gt;true&lt;/isTruncated&gt;</code>. To return the
  /// additional keys, see <code>key-marker</code> and
  /// <code>version-id-marker</code>.
  ///
  /// Parameter [optionalObjectAttributes] :
  /// Specifies the optional fields that you want returned in the response.
  /// Fields that you do not specify are not returned.
  ///
  /// Parameter [prefix] :
  /// Use this parameter to select only those keys that begin with the specified
  /// prefix. You can use prefixes to separate a bucket into different groupings
  /// of keys. (You can think of using <code>prefix</code> to make groups in the
  /// same way that you'd use a folder in a file system.) You can use
  /// <code>prefix</code> with <code>delimiter</code> to roll up numerous
  /// objects into a single result under <code>CommonPrefixes</code>.
  ///
  /// Parameter [versionIdMarker] :
  /// Specifies the object version you want to start listing from.
  Future<ListObjectVersionsOutput> listObjectVersions({
    required String bucket,
    String? delimiter,
    EncodingType? encodingType,
    String? expectedBucketOwner,
    String? keyMarker,
    int? maxKeys,
    List<OptionalObjectAttributes>? optionalObjectAttributes,
    String? prefix,
    RequestPayer? requestPayer,
    String? versionIdMarker,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (optionalObjectAttributes != null)
        'x-amz-optional-object-attributes': optionalObjectAttributes.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (delimiter != null) 'delimiter': [delimiter],
      if (encodingType != null) 'encoding-type': [encodingType.value],
      if (keyMarker != null) 'key-marker': [keyMarker],
      if (maxKeys != null) 'max-keys': [maxKeys.toString()],
      if (prefix != null) 'prefix': [prefix],
      if (versionIdMarker != null) 'version-id-marker': [versionIdMarker],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?versions',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return ListObjectVersionsOutput(
      commonPrefixes: $elem
          .findElements('CommonPrefixes')
          .map(CommonPrefix.fromXml)
          .toList(),
      deleteMarkers: $elem
          .findElements('DeleteMarker')
          .map(DeleteMarkerEntry.fromXml)
          .toList(),
      delimiter: _s.extractXmlStringValue($elem, 'Delimiter'),
      encodingType: _s
          .extractXmlStringValue($elem, 'EncodingType')
          ?.let(EncodingType.fromString),
      isTruncated: _s.extractXmlBoolValue($elem, 'IsTruncated'),
      keyMarker: _s.extractXmlStringValue($elem, 'KeyMarker'),
      maxKeys: _s.extractXmlIntValue($elem, 'MaxKeys'),
      name: _s.extractXmlStringValue($elem, 'Name'),
      nextKeyMarker: _s.extractXmlStringValue($elem, 'NextKeyMarker'),
      nextVersionIdMarker:
          _s.extractXmlStringValue($elem, 'NextVersionIdMarker'),
      prefix: _s.extractXmlStringValue($elem, 'Prefix'),
      versionIdMarker: _s.extractXmlStringValue($elem, 'VersionIdMarker'),
      versions:
          $elem.findElements('Version').map(ObjectVersion.fromXml).toList(),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Returns some or all (up to 1,000) of the objects in a bucket. You can use
  /// the request parameters as selection criteria to return a subset of the
  /// objects in a bucket. A 200 OK response can contain valid or invalid XML.
  /// Be sure to design your application to parse the contents of the response
  /// and handle it appropriately.
  /// <important>
  /// This action has been revised. We recommend that you use the newer version,
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>,
  /// when developing applications. For backward compatibility, Amazon S3
  /// continues to support <code>ListObjects</code>.
  /// </important>
  /// The following operations are related to <code>ListObjects</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchBucket].
  ///
  /// Parameter [bucket] :
  /// The name of the bucket containing the objects.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [delimiter] :
  /// A delimiter is a character that you use to group keys.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [marker] :
  /// Marker is where you want Amazon S3 to start listing from. Amazon S3 starts
  /// listing after this specified key. Marker can be any key in the bucket.
  ///
  /// Parameter [maxKeys] :
  /// Sets the maximum number of keys returned in the response. By default, the
  /// action returns up to 1,000 key names. The response might contain fewer
  /// keys but will never contain more.
  ///
  /// Parameter [optionalObjectAttributes] :
  /// Specifies the optional fields that you want returned in the response.
  /// Fields that you do not specify are not returned.
  ///
  /// Parameter [prefix] :
  /// Limits the response to keys that begin with the specified prefix.
  ///
  /// Parameter [requestPayer] :
  /// Confirms that the requester knows that she or he will be charged for the
  /// list objects request. Bucket owners need not specify this parameter in
  /// their requests.
  Future<ListObjectsOutput> listObjects({
    required String bucket,
    String? delimiter,
    EncodingType? encodingType,
    String? expectedBucketOwner,
    String? marker,
    int? maxKeys,
    List<OptionalObjectAttributes>? optionalObjectAttributes,
    String? prefix,
    RequestPayer? requestPayer,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (optionalObjectAttributes != null)
        'x-amz-optional-object-attributes': optionalObjectAttributes.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (delimiter != null) 'delimiter': [delimiter],
      if (encodingType != null) 'encoding-type': [encodingType.value],
      if (marker != null) 'marker': [marker],
      if (maxKeys != null) 'max-keys': [maxKeys.toString()],
      if (prefix != null) 'prefix': [prefix],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return ListObjectsOutput(
      commonPrefixes: $elem
          .findElements('CommonPrefixes')
          .map(CommonPrefix.fromXml)
          .toList(),
      contents: $elem.findElements('Contents').map(Object.fromXml).toList(),
      delimiter: _s.extractXmlStringValue($elem, 'Delimiter'),
      encodingType: _s
          .extractXmlStringValue($elem, 'EncodingType')
          ?.let(EncodingType.fromString),
      isTruncated: _s.extractXmlBoolValue($elem, 'IsTruncated'),
      marker: _s.extractXmlStringValue($elem, 'Marker'),
      maxKeys: _s.extractXmlIntValue($elem, 'MaxKeys'),
      name: _s.extractXmlStringValue($elem, 'Name'),
      nextMarker: _s.extractXmlStringValue($elem, 'NextMarker'),
      prefix: _s.extractXmlStringValue($elem, 'Prefix'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// Returns some or all (up to 1,000) of the objects in a bucket with each
  /// request. You can use the request parameters as selection criteria to
  /// return a subset of the objects in a bucket. A <code>200 OK</code> response
  /// can contain valid or invalid XML. Make sure to design your application to
  /// parse the contents of the response and handle it appropriately. For more
  /// information about listing objects, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ListingKeysUsingAPIs.html">Listing
  /// object keys programmatically</a> in the <i>Amazon S3 User Guide</i>. To
  /// get a list of your buckets, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - To use this operation, you
  /// must have READ access to the bucket. You must have permission to perform
  /// the <code>s3:ListBucket</code> action. The bucket owner has this
  /// permission by default and can grant this permission to others. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Sorting order of returned objects</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket</b> - For general purpose buckets,
  /// <code>ListObjectsV2</code> returns objects in lexicographical order based
  /// on their key names.
  /// </li>
  /// <li>
  /// <b>Directory bucket</b> - For directory buckets,
  /// <code>ListObjectsV2</code> does not return objects in lexicographical
  /// order.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl> <important>
  /// This section describes the latest revision of this action. We recommend
  /// that you use this revised API operation for application development. For
  /// backward compatibility, Amazon S3 continues to support the prior version
  /// of this API operation, <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html">ListObjects</a>.
  /// </important>
  /// The following operations are related to <code>ListObjectsV2</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchBucket].
  ///
  /// Parameter [bucket] :
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [continuationToken] :
  /// <code>ContinuationToken</code> indicates to Amazon S3 that the list is
  /// being continued on this bucket with a token.
  /// <code>ContinuationToken</code> is obfuscated and is not a real key. You
  /// can use this <code>ContinuationToken</code> for pagination of the list
  /// results.
  ///
  /// Parameter [delimiter] :
  /// A delimiter is a character that you use to group keys.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets</b> - For directory buckets, <code>/</code> is the
  /// only supported delimiter.
  /// </li>
  /// <li>
  /// <b>Directory buckets </b> - When you query <code>ListObjectsV2</code> with
  /// a delimiter during in-progress multipart uploads, the
  /// <code>CommonPrefixes</code> response parameter contains the prefixes that
  /// are associated with the in-progress multipart uploads. For more
  /// information about multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart
  /// Upload Overview</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [encodingType] :
  /// Encoding type used by Amazon S3 to encode object keys in the response. If
  /// using <code>url</code>, non-ASCII characters used in an object's key name
  /// will be URL encoded. For example, the object test_file(3).png will appear
  /// as test_file%283%29.png.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [fetchOwner] :
  /// The owner field is not present in <code>ListObjectsV2</code> by default.
  /// If you want to return the owner field with each key in the result, then
  /// set the <code>FetchOwner</code> field to <code>true</code>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, the bucket owner is
  /// returned as the object owner for all objects.
  /// </note>
  ///
  /// Parameter [maxKeys] :
  /// Sets the maximum number of keys returned in the response. By default, the
  /// action returns up to 1,000 key names. The response might contain fewer
  /// keys but will never contain more.
  ///
  /// Parameter [optionalObjectAttributes] :
  /// Specifies the optional fields that you want returned in the response.
  /// Fields that you do not specify are not returned.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [prefix] :
  /// Limits the response to keys that begin with the specified prefix.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, only prefixes that end
  /// in a delimiter (<code>/</code>) are supported.
  /// </note>
  ///
  /// Parameter [requestPayer] :
  /// Confirms that the requester knows that she or he will be charged for the
  /// list objects request in V2 style. Bucket owners need not specify this
  /// parameter in their requests.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [startAfter] :
  /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3
  /// starts listing after this specified key. StartAfter can be any key in the
  /// bucket.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<ListObjectsV2Output> listObjectsV2({
    required String bucket,
    String? continuationToken,
    String? delimiter,
    EncodingType? encodingType,
    String? expectedBucketOwner,
    bool? fetchOwner,
    int? maxKeys,
    List<OptionalObjectAttributes>? optionalObjectAttributes,
    String? prefix,
    RequestPayer? requestPayer,
    String? startAfter,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (optionalObjectAttributes != null)
        'x-amz-optional-object-attributes': optionalObjectAttributes.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (continuationToken != null) 'continuation-token': [continuationToken],
      if (delimiter != null) 'delimiter': [delimiter],
      if (encodingType != null) 'encoding-type': [encodingType.value],
      if (fetchOwner != null) 'fetch-owner': [fetchOwner.toString()],
      if (maxKeys != null) 'max-keys': [maxKeys.toString()],
      if (prefix != null) 'prefix': [prefix],
      if (startAfter != null) 'start-after': [startAfter],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri: '/${Uri.encodeComponent(bucket)}?list-type=2',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return ListObjectsV2Output(
      commonPrefixes: $elem
          .findElements('CommonPrefixes')
          .map(CommonPrefix.fromXml)
          .toList(),
      contents: $elem.findElements('Contents').map(Object.fromXml).toList(),
      continuationToken: _s.extractXmlStringValue($elem, 'ContinuationToken'),
      delimiter: _s.extractXmlStringValue($elem, 'Delimiter'),
      encodingType: _s
          .extractXmlStringValue($elem, 'EncodingType')
          ?.let(EncodingType.fromString),
      isTruncated: _s.extractXmlBoolValue($elem, 'IsTruncated'),
      keyCount: _s.extractXmlIntValue($elem, 'KeyCount'),
      maxKeys: _s.extractXmlIntValue($elem, 'MaxKeys'),
      name: _s.extractXmlStringValue($elem, 'Name'),
      nextContinuationToken:
          _s.extractXmlStringValue($elem, 'NextContinuationToken'),
      prefix: _s.extractXmlStringValue($elem, 'Prefix'),
      startAfter: _s.extractXmlStringValue($elem, 'StartAfter'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// Lists the parts that have been uploaded for a specific multipart upload.
  ///
  /// To use this operation, you must provide the <code>upload ID</code> in the
  /// request. You obtain this uploadID by sending the initiate multipart upload
  /// request through <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>.
  ///
  /// The <code>ListParts</code> request returns a maximum of 1,000 uploaded
  /// parts. The limit of 1,000 parts is also the default value. You can
  /// restrict the number of parts in a response by specifying the
  /// <code>max-parts</code> request parameter. If your multipart upload
  /// consists of more than 1,000 parts, the response returns an
  /// <code>IsTruncated</code> field with the value of <code>true</code>, and a
  /// <code>NextPartNumberMarker</code> element. To list remaining uploaded
  /// parts, in subsequent <code>ListParts</code> requests, include the
  /// <code>part-number-marker</code> query string parameter and set its value
  /// to the <code>NextPartNumberMarker</code> field value from the previous
  /// response.
  ///
  /// For more information on multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading
  /// Objects Using Multipart Upload</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - For information about
  /// permissions required to use the multipart upload API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// Upload and Permissions</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If the upload was created using server-side encryption with Key Management
  /// Service (KMS) keys (SSE-KMS) or dual-layer server-side encryption with
  /// Amazon Web Services KMS keys (DSSE-KMS), you must have permission to the
  /// <code>kms:Decrypt</code> action for the <code>ListParts</code> request to
  /// succeed.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>ListParts</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html">GetObjectAttributes</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket to which the parts are being uploaded.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which the multipart upload was initiated.
  ///
  /// Parameter [uploadId] :
  /// Upload ID identifying the multipart upload whose parts are being listed.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [maxParts] :
  /// Sets the maximum number of parts to return.
  ///
  /// Parameter [partNumberMarker] :
  /// Specifies the part after which listing should begin. Only parts with
  /// higher part numbers will be listed.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// The server-side encryption (SSE) algorithm used to encrypt the object.
  /// This parameter is needed only when the object was created using a checksum
  /// algorithm. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// The server-side encryption (SSE) customer managed key. This parameter is
  /// needed only when the object was created using a checksum algorithm. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// The MD5 server-side encryption (SSE) customer managed key. This parameter
  /// is needed only when the object was created using a checksum algorithm. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<ListPartsOutput> listParts({
    required String bucket,
    required String key,
    required String uploadId,
    String? expectedBucketOwner,
    int? maxParts,
    int? partNumberMarker,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      'uploadId': [uploadId],
      if (maxParts != null) 'max-parts': [maxParts.toString()],
      if (partNumberMarker != null)
        'part-number-marker': [partNumberMarker.toString()],
    };
    final $result = await _protocol.sendRaw(
      method: 'GET',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return ListPartsOutput(
      bucket: _s.extractXmlStringValue($elem, 'Bucket'),
      checksumAlgorithm: _s
          .extractXmlStringValue($elem, 'ChecksumAlgorithm')
          ?.let(ChecksumAlgorithm.fromString),
      initiator: _s.extractXmlChild($elem, 'Initiator')?.let(Initiator.fromXml),
      isTruncated: _s.extractXmlBoolValue($elem, 'IsTruncated'),
      key: _s.extractXmlStringValue($elem, 'Key'),
      maxParts: _s.extractXmlIntValue($elem, 'MaxParts'),
      nextPartNumberMarker:
          _s.extractXmlIntValue($elem, 'NextPartNumberMarker'),
      owner: _s.extractXmlChild($elem, 'Owner')?.let(Owner.fromXml),
      partNumberMarker: _s.extractXmlIntValue($elem, 'PartNumberMarker'),
      parts: $elem.findElements('Part').map(Part.fromXml).toList(),
      storageClass: _s
          .extractXmlStringValue($elem, 'StorageClass')
          ?.let(StorageClass.fromString),
      uploadId: _s.extractXmlStringValue($elem, 'UploadId'),
      abortDate:
          _s.extractHeaderDateTimeValue($result.headers, 'x-amz-abort-date'),
      abortRuleId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-abort-rule-id'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the accelerate configuration of an existing bucket. Amazon S3
  /// Transfer Acceleration is a bucket-level feature that enables you to
  /// perform faster data transfers to Amazon S3.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutAccelerateConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// The Transfer Acceleration state of a bucket can be set to one of the
  /// following two values:
  ///
  /// <ul>
  /// <li>
  /// Enabled – Enables accelerated data transfers to the bucket.
  /// </li>
  /// <li>
  /// Suspended – Disables accelerated data transfers to the bucket.
  /// </li>
  /// </ul>
  /// The <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAccelerateConfiguration.html">GetBucketAccelerateConfiguration</a>
  /// action returns the transfer acceleration state of a bucket.
  ///
  /// After setting the Transfer Acceleration state of a bucket to Enabled, it
  /// might take up to thirty minutes before the data transfer rates to the
  /// bucket increase.
  ///
  /// The name of the bucket used for Transfer Acceleration must be
  /// DNS-compliant and must not contain periods (".").
  ///
  /// For more information about transfer acceleration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Transfer
  /// Acceleration</a>.
  ///
  /// The following operations are related to
  /// <code>PutBucketAccelerateConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAccelerateConfiguration.html">GetBucketAccelerateConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [accelerateConfiguration] :
  /// Container for setting the transfer acceleration state.
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which the accelerate configuration is set.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketAccelerateConfiguration({
    required AccelerateConfiguration accelerateConfiguration,
    required String bucket,
    ChecksumAlgorithm? checksumAlgorithm,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?accelerate',
      headers: headers,
      payload: accelerateConfiguration.toXml('AccelerateConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the permissions on an existing bucket using access control lists
  /// (ACL). For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Using
  /// ACLs</a>. To set the ACL of a bucket, you must have the
  /// <code>WRITE_ACP</code> permission.
  ///
  /// You can use one of the following two ways to set a bucket's permissions:
  ///
  /// <ul>
  /// <li>
  /// Specify the ACL in the request body
  /// </li>
  /// <li>
  /// Specify permissions using request headers
  /// </li>
  /// </ul> <note>
  /// You cannot specify access permission using both the body and the request
  /// headers.
  /// </note>
  /// Depending on your application needs, you may choose to set the ACL on a
  /// bucket using either the request body or the headers. For example, if you
  /// have an existing application that updates a bucket ACL using the request
  /// body, then you can continue to use that approach.
  /// <important>
  /// If your bucket uses the bucket owner enforced setting for S3 Object
  /// Ownership, ACLs are disabled and no longer affect permissions. You must
  /// use policies to grant access to your bucket and the objects in it.
  /// Requests to set ACLs or update ACLs fail and return the
  /// <code>AccessControlListNotSupported</code> error code. Requests to read
  /// ACLs are still supported. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling
  /// object ownership</a> in the <i>Amazon S3 User Guide</i>.
  /// </important> <dl> <dt>Permissions</dt> <dd>
  /// You can set access permissions by using one of the following methods:
  ///
  /// <ul>
  /// <li>
  /// Specify a canned ACL with the <code>x-amz-acl</code> request header.
  /// Amazon S3 supports a set of predefined ACLs, known as <i>canned ACLs</i>.
  /// Each canned ACL has a predefined set of grantees and permissions. Specify
  /// the canned ACL name as the value of <code>x-amz-acl</code>. If you use
  /// this header, you cannot use other access control-specific headers in your
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
  /// ACL</a>.
  /// </li>
  /// <li>
  /// Specify access permissions explicitly with the
  /// <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,
  /// <code>x-amz-grant-write-acp</code>, and
  /// <code>x-amz-grant-full-control</code> headers. When using these headers,
  /// you specify explicit access permissions and grantees (Amazon Web Services
  /// accounts or Amazon S3 groups) who will receive the permission. If you use
  /// these ACL-specific headers, you cannot use the <code>x-amz-acl</code>
  /// header to set a canned ACL. These parameters map to the set of permissions
  /// that Amazon S3 supports in an ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a>.
  ///
  /// You specify each grantee as a type=value pair, where the type is one of
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// <code>id</code> – if the value specified is the canonical user ID of an
  /// Amazon Web Services account
  /// </li>
  /// <li>
  /// <code>uri</code> – if you are granting permissions to a predefined group
  /// </li>
  /// <li>
  /// <code>emailAddress</code> – if the value specified is the email address of
  /// an Amazon Web Services account
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul>
  /// For example, the following <code>x-amz-grant-write</code> header grants
  /// create, overwrite, and delete objects permission to LogDelivery group
  /// predefined by Amazon S3 and two Amazon Web Services accounts identified by
  /// their email addresses.
  ///
  /// <code>x-amz-grant-write:
  /// uri="http://acs.amazonaws.com/groups/s3/LogDelivery", id="111122223333",
  /// id="555566667777" </code>
  /// </li>
  /// </ul>
  /// You can use either a canned ACL or specify access permissions explicitly.
  /// You cannot do both.
  /// </dd> <dt>Grantee Values</dt> <dd>
  /// You can specify the person (grantee) to whom you're assigning access
  /// rights (using request elements) in the following ways:
  ///
  /// <ul>
  /// <li>
  /// By the person's ID:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="CanonicalUser"&gt;&lt;ID&gt;&lt;&gt;ID&lt;&gt;&lt;/ID&gt;&lt;DisplayName&gt;&lt;&gt;GranteesEmail&lt;&gt;&lt;/DisplayName&gt;
  /// &lt;/Grantee&gt;</code>
  ///
  /// DisplayName is optional and ignored in the request
  /// </li>
  /// <li>
  /// By URI:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="Group"&gt;&lt;URI&gt;&lt;&gt;http://acs.amazonaws.com/groups/global/AuthenticatedUsers&lt;&gt;&lt;/URI&gt;&lt;/Grantee&gt;</code>
  /// </li>
  /// <li>
  /// By Email address:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="AmazonCustomerByEmail"&gt;&lt;EmailAddress&gt;&lt;&gt;Grantees@email.com&lt;&gt;&lt;/EmailAddress&gt;&amp;&lt;/Grantee&gt;</code>
  ///
  /// The grantee is resolved to the CanonicalUser and, in a response to a GET
  /// Object acl request, appears as the CanonicalUser.
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul> </dd> </dl>
  /// The following operations are related to <code>PutBucketAcl</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html">DeleteBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket to which to apply the ACL.
  ///
  /// Parameter [acl] :
  /// The canned ACL to apply to the bucket.
  ///
  /// Parameter [accessControlPolicy] :
  /// Contains the elements that set the ACL permissions for an object per
  /// grantee.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. This header must be
  /// used as a message integrity check to verify that the request body was not
  /// corrupted in transit. For more information, go to <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864.</a>
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [grantFullControl] :
  /// Allows grantee the read, write, read ACP, and write ACP permissions on the
  /// bucket.
  ///
  /// Parameter [grantRead] :
  /// Allows grantee to list the objects in the bucket.
  ///
  /// Parameter [grantReadACP] :
  /// Allows grantee to read the bucket ACL.
  ///
  /// Parameter [grantWrite] :
  /// Allows grantee to create new objects in the bucket.
  ///
  /// For the bucket and object owners of existing objects, also allows
  /// deletions and overwrites of those objects.
  ///
  /// Parameter [grantWriteACP] :
  /// Allows grantee to write the ACL for the applicable bucket.
  Future<void> putBucketAcl({
    required String bucket,
    BucketCannedACL? acl,
    AccessControlPolicy? accessControlPolicy,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    String? grantFullControl,
    String? grantRead,
    String? grantReadACP,
    String? grantWrite,
    String? grantWriteACP,
  }) async {
    final headers = <String, String>{
      if (acl != null) 'x-amz-acl': acl.value,
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (grantFullControl != null)
        'x-amz-grant-full-control': grantFullControl.toString(),
      if (grantRead != null) 'x-amz-grant-read': grantRead.toString(),
      if (grantReadACP != null) 'x-amz-grant-read-acp': grantReadACP.toString(),
      if (grantWrite != null) 'x-amz-grant-write': grantWrite.toString(),
      if (grantWriteACP != null)
        'x-amz-grant-write-acp': grantWriteACP.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?acl',
      headers: headers,
      payload: accessControlPolicy?.toXml('AccessControlPolicy'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets an analytics configuration for the bucket (specified by the analytics
  /// configuration ID). You can have up to 1,000 analytics configurations per
  /// bucket.
  ///
  /// You can choose to have storage class analysis export analysis reports sent
  /// to a comma-separated values (CSV) flat file. See the
  /// <code>DataExport</code> request element. Reports are updated daily and are
  /// based on the object filters that you configure. When selecting data
  /// export, you specify a destination bucket and an optional destination
  /// prefix where the file is written. You can export the data to a destination
  /// bucket in a different account. However, the destination bucket must be in
  /// the same Region as the bucket that you are making the PUT analytics
  /// configuration to. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon
  /// S3 Analytics – Storage Class Analysis</a>.
  /// <important>
  /// You must create a bucket policy on the destination bucket where the
  /// exported file is written to grant permissions to Amazon S3 to write
  /// objects to the bucket. For an example policy, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-9">Granting
  /// Permissions for Amazon S3 Inventory and Storage Class Analysis</a>.
  /// </important>
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutAnalyticsConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// <code>PutBucketAnalyticsConfiguration</code> has the following special
  /// errors:
  ///
  /// <ul>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>HTTP Error: HTTP 400 Bad Request</i>
  /// </li>
  /// <li>
  /// <i>Code: InvalidArgument</i>
  /// </li>
  /// <li>
  /// <i>Cause: Invalid argument.</i>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>HTTP Error: HTTP 400 Bad Request</i>
  /// </li>
  /// <li>
  /// <i>Code: TooManyConfigurations</i>
  /// </li>
  /// <li>
  /// <i>Cause: You are attempting to create a new configuration but have
  /// already reached the 1,000-configuration limit.</i>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>HTTP Error: HTTP 403 Forbidden</i>
  /// </li>
  /// <li>
  /// <i>Code: AccessDenied</i>
  /// </li>
  /// <li>
  /// <i>Cause: You are not the owner of the specified bucket, or you do not
  /// have the s3:PutAnalyticsConfiguration bucket permission to set the
  /// configuration on the bucket.</i>
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// The following operations are related to
  /// <code>PutBucketAnalyticsConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAnalyticsConfiguration.html">GetBucketAnalyticsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketAnalyticsConfiguration.html">DeleteBucketAnalyticsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketAnalyticsConfigurations.html">ListBucketAnalyticsConfigurations</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [analyticsConfiguration] :
  /// The configuration and any analyses for the analytics filter.
  ///
  /// Parameter [bucket] :
  /// The name of the bucket to which an analytics configuration is stored.
  ///
  /// Parameter [id] :
  /// The ID that identifies the analytics configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketAnalyticsConfiguration({
    required AnalyticsConfiguration analyticsConfiguration,
    required String bucket,
    required String id,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?analytics',
      queryParams: $query,
      headers: headers,
      payload: analyticsConfiguration.toXml('AnalyticsConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the <code>cors</code> configuration for your bucket. If the
  /// configuration exists, Amazon S3 replaces it.
  ///
  /// To use this operation, you must be allowed to perform the
  /// <code>s3:PutBucketCORS</code> action. By default, the bucket owner has
  /// this permission and can grant it to others.
  ///
  /// You set this configuration on a bucket so that the bucket can service
  /// cross-origin requests. For example, you might want to enable a request
  /// whose origin is <code>http://www.example.com</code> to access your Amazon
  /// S3 bucket at <code>my.example.bucket.com</code> by using the browser's
  /// <code>XMLHttpRequest</code> capability.
  ///
  /// To enable cross-origin resource sharing (CORS) on a bucket, you add the
  /// <code>cors</code> subresource to the bucket. The <code>cors</code>
  /// subresource is an XML document in which you configure rules that identify
  /// origins and the HTTP methods that can be executed on your bucket. The
  /// document is limited to 64 KB in size.
  ///
  /// When Amazon S3 receives a cross-origin request (or a pre-flight OPTIONS
  /// request) against a bucket, it evaluates the <code>cors</code>
  /// configuration on the bucket and uses the first <code>CORSRule</code> rule
  /// that matches the incoming browser request to enable a cross-origin
  /// request. For a rule to match, the following conditions must be met:
  ///
  /// <ul>
  /// <li>
  /// The request's <code>Origin</code> header must match
  /// <code>AllowedOrigin</code> elements.
  /// </li>
  /// <li>
  /// The request method (for example, GET, PUT, HEAD, and so on) or the
  /// <code>Access-Control-Request-Method</code> header in case of a pre-flight
  /// <code>OPTIONS</code> request must be one of the <code>AllowedMethod</code>
  /// elements.
  /// </li>
  /// <li>
  /// Every header specified in the <code>Access-Control-Request-Headers</code>
  /// request header of a pre-flight request must match an
  /// <code>AllowedHeader</code> element.
  /// </li>
  /// </ul>
  /// For more information about CORS, go to <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling
  /// Cross-Origin Resource Sharing</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// The following operations are related to <code>PutBucketCors</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketCors.html">GetBucketCors</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketCors.html">DeleteBucketCors</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTOPTIONSobject.html">RESTOPTIONSobject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// Specifies the bucket impacted by the <code>cors</code>configuration.
  ///
  /// Parameter [cORSConfiguration] :
  /// Describes the cross-origin access configuration for objects in an Amazon
  /// S3 bucket. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling
  /// Cross-Origin Resource Sharing</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. This header must be
  /// used as a message integrity check to verify that the request body was not
  /// corrupted in transit. For more information, go to <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864.</a>
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketCors({
    required String bucket,
    required CORSConfiguration cORSConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?cors',
      headers: headers,
      payload: cORSConfiguration.toXml('CORSConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This action uses the <code>encryption</code> subresource to configure
  /// default encryption and Amazon S3 Bucket Keys for an existing bucket.
  ///
  /// By default, all buckets have a default encryption configuration that uses
  /// server-side encryption with Amazon S3 managed keys (SSE-S3). You can
  /// optionally configure default encryption for a bucket by using server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS) or dual-layer
  /// server-side encryption with Amazon Web Services KMS keys (DSSE-KMS). If
  /// you specify default encryption by using SSE-KMS, you can also configure <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon
  /// S3 Bucket Keys</a>. If you use PutBucketEncryption to set your <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">default
  /// bucket encryption</a> to SSE-KMS, you should verify that your KMS key ID
  /// is correct. Amazon S3 does not validate the KMS key ID provided in
  /// PutBucketEncryption requests.
  /// <important>
  /// This action requires Amazon Web Services Signature Version 4. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">
  /// Authenticating Requests (Amazon Web Services Signature Version 4)</a>.
  /// </important>
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutEncryptionConfiguration</code> action. The bucket owner has
  /// this permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  ///
  /// The following operations are related to <code>PutBucketEncryption</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketEncryption.html">GetBucketEncryption</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketEncryption.html">DeleteBucketEncryption</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// Specifies default encryption for a bucket using server-side encryption
  /// with different key options. By default, all buckets have a default
  /// encryption configuration that uses server-side encryption with Amazon S3
  /// managed keys (SSE-S3). You can optionally configure default encryption for
  /// a bucket by using server-side encryption with an Amazon Web Services KMS
  /// key (SSE-KMS) or a customer-provided key (SSE-C). For information about
  /// the bucket default encryption feature, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">Amazon
  /// S3 Bucket Default Encryption</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the server-side encryption
  /// configuration.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketEncryption({
    required String bucket,
    required ServerSideEncryptionConfiguration
        serverSideEncryptionConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?encryption',
      headers: headers,
      payload: serverSideEncryptionConfiguration
          .toXml('ServerSideEncryptionConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Puts a S3 Intelligent-Tiering configuration to the specified bucket. You
  /// can have up to 1,000 S3 Intelligent-Tiering configurations per bucket.
  ///
  /// The S3 Intelligent-Tiering storage class is designed to optimize storage
  /// costs by automatically moving data to the most cost-effective storage
  /// access tier, without performance impact or operational overhead. S3
  /// Intelligent-Tiering delivers automatic cost savings in three low latency
  /// and high throughput access tiers. To get the lowest storage cost on data
  /// that can be accessed in minutes to hours, you can choose to activate
  /// additional archiving capabilities.
  ///
  /// The S3 Intelligent-Tiering storage class is the ideal storage class for
  /// data with unknown, changing, or unpredictable access patterns, independent
  /// of object size or retention period. If the size of an object is less than
  /// 128 KB, it is not monitored and not eligible for auto-tiering. Smaller
  /// objects can be stored, but they are always charged at the Frequent Access
  /// tier rates in the S3 Intelligent-Tiering storage class.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage
  /// class for automatically optimizing frequently and infrequently accessed
  /// objects</a>.
  ///
  /// Operations related to
  /// <code>PutBucketIntelligentTieringConfiguration</code> include:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketIntelligentTieringConfiguration.html">DeleteBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketIntelligentTieringConfiguration.html">GetBucketIntelligentTieringConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketIntelligentTieringConfigurations.html">ListBucketIntelligentTieringConfigurations</a>
  /// </li>
  /// </ul> <note>
  /// You only need S3 Intelligent-Tiering enabled on a bucket if you want to
  /// automatically move objects stored in the S3 Intelligent-Tiering storage
  /// class to the Archive Access or Deep Archive Access tier.
  /// </note>
  /// <code>PutBucketIntelligentTieringConfiguration</code> has the following
  /// special errors:
  /// <dl> <dt>HTTP 400 Bad Request Error</dt> <dd>
  /// <i>Code:</i> InvalidArgument
  ///
  /// <i>Cause:</i> Invalid Argument
  /// </dd> <dt>HTTP 400 Bad Request Error</dt> <dd>
  /// <i>Code:</i> TooManyConfigurations
  ///
  /// <i>Cause:</i> You are attempting to create a new configuration but have
  /// already reached the 1,000-configuration limit.
  /// </dd> <dt>HTTP 403 Forbidden Error</dt> <dd>
  /// <i>Cause:</i> You are not the owner of the specified bucket, or you do not
  /// have the <code>s3:PutIntelligentTieringConfiguration</code> bucket
  /// permission to set the configuration on the bucket.
  /// </dd> </dl>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose configuration you want to modify or
  /// retrieve.
  ///
  /// Parameter [id] :
  /// The ID used to identify the S3 Intelligent-Tiering configuration.
  ///
  /// Parameter [intelligentTieringConfiguration] :
  /// Container for S3 Intelligent-Tiering configuration.
  Future<void> putBucketIntelligentTieringConfiguration({
    required String bucket,
    required String id,
    required IntelligentTieringConfiguration intelligentTieringConfiguration,
  }) async {
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?intelligent-tiering',
      queryParams: $query,
      payload: intelligentTieringConfiguration
          .toXml('IntelligentTieringConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This implementation of the <code>PUT</code> action adds an inventory
  /// configuration (identified by the inventory ID) to the bucket. You can have
  /// up to 1,000 inventory configurations per bucket.
  ///
  /// Amazon S3 inventory generates inventories of the objects in the bucket on
  /// a daily or weekly basis, and the results are published to a flat file. The
  /// bucket that is inventoried is called the <i>source</i> bucket, and the
  /// bucket where the inventory flat file is stored is called the
  /// <i>destination</i> bucket. The <i>destination</i> bucket must be in the
  /// same Amazon Web Services Region as the <i>source</i> bucket.
  ///
  /// When you configure an inventory for a <i>source</i> bucket, you specify
  /// the <i>destination</i> bucket where you want the inventory to be stored,
  /// and whether to generate the inventory daily or weekly. You can also
  /// configure what object metadata to include and whether to inventory all
  /// object versions or only current versions. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon
  /// S3 Inventory</a> in the Amazon S3 User Guide.
  /// <important>
  /// You must create a bucket policy on the <i>destination</i> bucket to grant
  /// permissions to Amazon S3 to write objects to the bucket in the defined
  /// location. For an example policy, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-9">
  /// Granting Permissions for Amazon S3 Inventory and Storage Class
  /// Analysis</a>.
  /// </important> <dl> <dt>Permissions</dt> <dd>
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutInventoryConfiguration</code> action. The bucket owner has
  /// this permission by default and can grant this permission to others.
  ///
  /// The <code>s3:PutInventoryConfiguration</code> permission allows a user to
  /// create an <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-inventory.html">S3
  /// Inventory</a> report that includes all object metadata fields available
  /// and to specify the destination bucket to store the inventory. A user with
  /// read access to objects in the destination bucket can also access all
  /// object metadata fields that are available in the inventory report.
  ///
  /// To restrict access to an inventory report, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html#example-bucket-policies-use-case-10">Restricting
  /// access to an Amazon S3 Inventory report</a> in the <i>Amazon S3 User
  /// Guide</i>. For more information about the metadata fields available in S3
  /// Inventory, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-inventory.html#storage-inventory-contents">Amazon
  /// S3 Inventory lists</a> in the <i>Amazon S3 User Guide</i>. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// related to bucket subresource operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Identity
  /// and access management in Amazon S3</a> in the <i>Amazon S3 User Guide</i>.
  /// </dd> </dl>
  /// <code>PutBucketInventoryConfiguration</code> has the following special
  /// errors:
  /// <dl> <dt>HTTP 400 Bad Request Error</dt> <dd>
  /// <i>Code:</i> InvalidArgument
  ///
  /// <i>Cause:</i> Invalid Argument
  /// </dd> <dt>HTTP 400 Bad Request Error</dt> <dd>
  /// <i>Code:</i> TooManyConfigurations
  ///
  /// <i>Cause:</i> You are attempting to create a new configuration but have
  /// already reached the 1,000-configuration limit.
  /// </dd> <dt>HTTP 403 Forbidden Error</dt> <dd>
  /// <i>Cause:</i> You are not the owner of the specified bucket, or you do not
  /// have the <code>s3:PutInventoryConfiguration</code> bucket permission to
  /// set the configuration on the bucket.
  /// </dd> </dl>
  /// The following operations are related to
  /// <code>PutBucketInventoryConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketInventoryConfiguration.html">GetBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketInventoryConfiguration.html">DeleteBucketInventoryConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketInventoryConfigurations.html">ListBucketInventoryConfigurations</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket where the inventory configuration will be stored.
  ///
  /// Parameter [id] :
  /// The ID used to identify the inventory configuration.
  ///
  /// Parameter [inventoryConfiguration] :
  /// Specifies the inventory configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketInventoryConfiguration({
    required String bucket,
    required String id,
    required InventoryConfiguration inventoryConfiguration,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?inventory',
      queryParams: $query,
      headers: headers,
      payload: inventoryConfiguration.toXml('InventoryConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note> <important>
  /// For an updated version of this API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>.
  /// This version has been deprecated. Existing lifecycle configurations will
  /// work. For new lifecycle configurations, use the updated API.
  /// </important>
  /// Creates a new lifecycle configuration for the bucket or replaces an
  /// existing lifecycle configuration. For information about lifecycle
  /// configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object
  /// Lifecycle Management</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// By default, all Amazon S3 resources, including buckets, objects, and
  /// related subresources (for example, lifecycle configuration and website
  /// configuration) are private. Only the resource owner, the Amazon Web
  /// Services account that created the resource, can access it. The resource
  /// owner can optionally grant access permissions to others by writing an
  /// access policy. For this operation, users must get the
  /// <code>s3:PutLifecycleConfiguration</code> permission.
  ///
  /// You can also explicitly deny permissions. Explicit denial also supersedes
  /// any other permissions. If you want to prevent users or accounts from
  /// removing or deleting objects from your bucket, you must deny them
  /// permissions for the following actions:
  ///
  /// <ul>
  /// <li>
  /// <code>s3:DeleteObject</code>
  /// </li>
  /// <li>
  /// <code>s3:DeleteObjectVersion</code>
  /// </li>
  /// <li>
  /// <code>s3:PutLifecycleConfiguration</code>
  /// </li>
  /// </ul>
  /// For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  ///
  /// For more examples of transitioning objects to storage classes such as
  /// STANDARD_IA or ONEZONE_IA, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#lifecycle-configuration-examples">Examples
  /// of Lifecycle Configuration</a>.
  ///
  /// The following operations are related to <code>PutBucketLifecycle</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycle.html">GetBucketLifecycle</a>(Deprecated)
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html">GetBucketLifecycleConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>
  /// </li>
  /// <li>
  /// By default, a resource owner—in this case, a bucket owner, which is the
  /// Amazon Web Services account that created the bucket—can perform any of the
  /// operations. A resource owner can also grant others permission to perform
  /// the operation. For more information, see the following topics in the
  /// Amazon S3 User Guide:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to your Amazon S3 Resources</a>
  /// </li>
  /// </ul> </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// <p/>
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// <p/>
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [lifecycleConfiguration] :
  /// <p/>
  @Deprecated('Deprecated')
  Future<void> putBucketLifecycle({
    required String bucket,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    LifecycleConfiguration? lifecycleConfiguration,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?lifecycle',
      headers: headers,
      payload: lifecycleConfiguration?.toXml('LifecycleConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Creates a new lifecycle configuration for the bucket or replaces an
  /// existing lifecycle configuration. Keep in mind that this will overwrite an
  /// existing lifecycle configuration, so if you want to retain any
  /// configuration details, they must be included in the new lifecycle
  /// configuration. For information about lifecycle configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html">Managing
  /// your storage lifecycle</a>.
  /// <note>
  /// Bucket lifecycle configuration now supports specifying a lifecycle rule
  /// using an object key name prefix, one or more object tags, object size, or
  /// any combination of these. Accordingly, this section describes the latest
  /// API. The previous version of the API supported filtering based only on an
  /// object key name prefix, which is supported for backward compatibility. For
  /// the related API description, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html">PutBucketLifecycle</a>.
  /// </note> <dl> <dt>Rules</dt> <dd>
  /// You specify the lifecycle configuration in your request body. The
  /// lifecycle configuration is specified as XML consisting of one or more
  /// rules. An Amazon S3 Lifecycle configuration can have up to 1,000 rules.
  /// This limit is not adjustable. Each rule consists of the following:
  ///
  /// <ul>
  /// <li>
  /// A filter identifying a subset of objects to which the rule applies. The
  /// filter can be based on a key name prefix, object tags, object size, or any
  /// combination of these.
  /// </li>
  /// <li>
  /// A status indicating whether the rule is in effect.
  /// </li>
  /// <li>
  /// One or more lifecycle transition and expiration actions that you want
  /// Amazon S3 to perform on the objects identified by the filter. If the state
  /// of your bucket is versioning-enabled or versioning-suspended, you can have
  /// many versions of the same object (one current version and zero or more
  /// noncurrent versions). Amazon S3 provides predefined actions that you can
  /// specify for current and noncurrent object versions.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object
  /// Lifecycle Management</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html">Lifecycle
  /// Configuration Elements</a>.
  /// </dd> <dt>Permissions</dt> <dd>
  /// By default, all Amazon S3 resources are private, including buckets,
  /// objects, and related subresources (for example, lifecycle configuration
  /// and website configuration). Only the resource owner (that is, the Amazon
  /// Web Services account that created it) can access the resource. The
  /// resource owner can optionally grant access permissions to others by
  /// writing an access policy. For this operation, a user must get the
  /// <code>s3:PutLifecycleConfiguration</code> permission.
  ///
  /// You can also explicitly deny permissions. An explicit deny also supersedes
  /// any other permissions. If you want to block users or accounts from
  /// removing or deleting objects from your bucket, you must deny them
  /// permissions for the following actions:
  ///
  /// <ul>
  /// <li>
  /// <code>s3:DeleteObject</code>
  /// </li>
  /// <li>
  /// <code>s3:DeleteObjectVersion</code>
  /// </li>
  /// <li>
  /// <code>s3:PutLifecycleConfiguration</code>
  /// </li>
  /// </ul>
  /// For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  /// </dd> </dl>
  /// The following operations are related to
  /// <code>PutBucketLifecycleConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-configuration-examples.html">Examples
  /// of Lifecycle Configuration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html">GetBucketLifecycleConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketLifecycle.html">DeleteBucketLifecycle</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to set the configuration.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [lifecycleConfiguration] :
  /// Container for lifecycle rules. You can add as many as 1,000 rules.
  Future<void> putBucketLifecycleConfiguration({
    required String bucket,
    ChecksumAlgorithm? checksumAlgorithm,
    String? expectedBucketOwner,
    BucketLifecycleConfiguration? lifecycleConfiguration,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?lifecycle',
      headers: headers,
      payload: lifecycleConfiguration?.toXml('LifecycleConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Set the logging parameters for a bucket and to specify permissions for who
  /// can view and modify the logging parameters. All logs are saved to buckets
  /// in the same Amazon Web Services Region as the source bucket. To set the
  /// logging status of a bucket, you must be the bucket owner.
  ///
  /// The bucket owner is automatically granted FULL_CONTROL to all logs. You
  /// use the <code>Grantee</code> request element to grant access to other
  /// people. The <code>Permissions</code> request element specifies the kind of
  /// access the grantee has to the logs.
  /// <important>
  /// If the target bucket for log delivery uses the bucket owner enforced
  /// setting for S3 Object Ownership, you can't use the <code>Grantee</code>
  /// request element to grant access to others. Permissions can only be granted
  /// using policies. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general">Permissions
  /// for server access log delivery</a> in the <i>Amazon S3 User Guide</i>.
  /// </important> <dl> <dt>Grantee Values</dt> <dd>
  /// You can specify the person (grantee) to whom you're assigning access
  /// rights (by using request elements) in the following ways:
  ///
  /// <ul>
  /// <li>
  /// By the person's ID:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="CanonicalUser"&gt;&lt;ID&gt;&lt;&gt;ID&lt;&gt;&lt;/ID&gt;&lt;DisplayName&gt;&lt;&gt;GranteesEmail&lt;&gt;&lt;/DisplayName&gt;
  /// &lt;/Grantee&gt;</code>
  ///
  /// <code>DisplayName</code> is optional and ignored in the request.
  /// </li>
  /// <li>
  /// By Email address:
  ///
  /// <code> &lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="AmazonCustomerByEmail"&gt;&lt;EmailAddress&gt;&lt;&gt;Grantees@email.com&lt;&gt;&lt;/EmailAddress&gt;&lt;/Grantee&gt;</code>
  ///
  /// The grantee is resolved to the <code>CanonicalUser</code> and, in a
  /// response to a <code>GETObjectAcl</code> request, appears as the
  /// CanonicalUser.
  /// </li>
  /// <li>
  /// By URI:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="Group"&gt;&lt;URI&gt;&lt;&gt;http://acs.amazonaws.com/groups/global/AuthenticatedUsers&lt;&gt;&lt;/URI&gt;&lt;/Grantee&gt;</code>
  /// </li>
  /// </ul> </dd> </dl>
  /// To enable logging, you use <code>LoggingEnabled</code> and its children
  /// request elements. To disable logging, you use an empty
  /// <code>BucketLoggingStatus</code> request element:
  ///
  /// <code>&lt;BucketLoggingStatus
  /// xmlns="http://doc.s3.amazonaws.com/2006-03-01" /&gt;</code>
  ///
  /// For more information about server access logging, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html">Server
  /// Access Logging</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// For more information about creating a bucket, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>.
  /// For more information about returning the logging status of a bucket, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLogging.html">GetBucketLogging</a>.
  ///
  /// The following operations are related to <code>PutBucketLogging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html">DeleteBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLogging.html">GetBucketLogging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which to set the logging parameters.
  ///
  /// Parameter [bucketLoggingStatus] :
  /// Container for logging status information.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash of the <code>PutBucketLogging</code> request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketLogging({
    required String bucket,
    required BucketLoggingStatus bucketLoggingStatus,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?logging',
      headers: headers,
      payload: bucketLoggingStatus.toXml('BucketLoggingStatus'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets a metrics configuration (specified by the metrics configuration ID)
  /// for the bucket. You can have up to 1,000 metrics configurations per
  /// bucket. If you're updating an existing metrics configuration, note that
  /// this is a full replacement of the existing metrics configuration. If you
  /// don't include the elements you want to keep, they are erased.
  ///
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutMetricsConfiguration</code> action. The bucket owner has this
  /// permission by default. The bucket owner can grant this permission to
  /// others. For more information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// For information about CloudWatch request metrics for Amazon S3, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
  /// Metrics with Amazon CloudWatch</a>.
  ///
  /// The following operations are related to
  /// <code>PutBucketMetricsConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketMetricsConfiguration.html">DeleteBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketMetricsConfiguration.html">GetBucketMetricsConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketMetricsConfigurations.html">ListBucketMetricsConfigurations</a>
  /// </li>
  /// </ul>
  /// <code>PutBucketMetricsConfiguration</code> has the following special
  /// error:
  ///
  /// <ul>
  /// <li>
  /// Error code: <code>TooManyConfigurations</code>
  ///
  /// <ul>
  /// <li>
  /// Description: You are attempting to create a new configuration but have
  /// already reached the 1,000-configuration limit.
  /// </li>
  /// <li>
  /// HTTP Status Code: HTTP 400 Bad Request
  /// </li>
  /// </ul> </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket for which the metrics configuration is set.
  ///
  /// Parameter [id] :
  /// The ID used to identify the metrics configuration. The ID has a 64
  /// character limit and can only contain letters, numbers, periods, dashes,
  /// and underscores.
  ///
  /// Parameter [metricsConfiguration] :
  /// Specifies the metrics configuration.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketMetricsConfiguration({
    required String bucket,
    required String id,
    required MetricsConfiguration metricsConfiguration,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    final $query = <String, List<String>>{
      'id': [id],
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?metrics',
      queryParams: $query,
      headers: headers,
      payload: metricsConfiguration.toXml('MetricsConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// No longer used, see the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketNotificationConfiguration.html">PutBucketNotificationConfiguration</a>
  /// operation.
  ///
  /// Parameter [bucket] :
  /// The name of the bucket.
  ///
  /// Parameter [notificationConfiguration] :
  /// The container for the configuration.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash of the <code>PutPublicAccessBlock</code> request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  @Deprecated('Deprecated')
  Future<void> putBucketNotification({
    required String bucket,
    required NotificationConfigurationDeprecated notificationConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?notification',
      headers: headers,
      payload: notificationConfiguration.toXml('NotificationConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Enables notifications of specified events for a bucket. For more
  /// information about event notifications, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
  /// Event Notifications</a>.
  ///
  /// Using this API, you can replace an existing notification configuration.
  /// The configuration is an XML file that defines the event types that you
  /// want Amazon S3 to publish and the destination where you want Amazon S3 to
  /// publish an event notification when it detects an event of the specified
  /// type.
  ///
  /// By default, your bucket has no event notifications configured. That is,
  /// the notification configuration will be an empty
  /// <code>NotificationConfiguration</code>.
  ///
  /// <code>&lt;NotificationConfiguration&gt;</code>
  ///
  /// <code>&lt;/NotificationConfiguration&gt;</code>
  ///
  /// This action replaces the existing notification configuration with the
  /// configuration you include in the request body.
  ///
  /// After Amazon S3 receives this request, it first verifies that any Amazon
  /// Simple Notification Service (Amazon SNS) or Amazon Simple Queue Service
  /// (Amazon SQS) destination exists, and that the bucket owner has permission
  /// to publish to it by sending a test notification. In the case of Lambda
  /// destinations, Amazon S3 verifies that the Lambda function permissions
  /// grant Amazon S3 permission to invoke the function from the Amazon S3
  /// bucket. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
  /// Notifications for Amazon S3 Events</a>.
  ///
  /// You can disable notifications by adding the empty
  /// NotificationConfiguration element.
  ///
  /// For more information about the number of event notification configurations
  /// that you can create per bucket, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/s3.html#limits_s3">Amazon
  /// S3 service quotas</a> in <i>Amazon Web Services General Reference</i>.
  ///
  /// By default, only the bucket owner can configure notifications on a bucket.
  /// However, bucket owners can use a bucket policy to grant permission to
  /// other users to set this configuration with the required
  /// <code>s3:PutBucketNotification</code> permission.
  /// <note>
  /// The PUT notification is an atomic operation. For example, suppose your
  /// notification configuration includes SNS topic, SQS queue, and Lambda
  /// function configurations. When you send a PUT request with this
  /// configuration, Amazon S3 sends test messages to your SNS topic. If the
  /// message fails, the entire PUT action will fail, and Amazon S3 will not add
  /// the configuration to your bucket.
  /// </note>
  /// If the configuration in the request body includes only one
  /// <code>TopicConfiguration</code> specifying only the
  /// <code>s3:ReducedRedundancyLostObject</code> event type, the response will
  /// also include the <code>x-amz-sns-test-message-id</code> header containing
  /// the message ID of the test notification sent to the topic.
  ///
  /// The following action is related to
  /// <code>PutBucketNotificationConfiguration</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html">GetBucketNotificationConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [skipDestinationValidation] :
  /// Skips validation of Amazon SQS, Amazon SNS, and Lambda destinations. True
  /// or false value.
  Future<void> putBucketNotificationConfiguration({
    required String bucket,
    required NotificationConfiguration notificationConfiguration,
    String? expectedBucketOwner,
    bool? skipDestinationValidation,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (skipDestinationValidation != null)
        'x-amz-skip-destination-validation':
            skipDestinationValidation.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?notification',
      headers: headers,
      payload: notificationConfiguration.toXml('NotificationConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Creates or modifies <code>OwnershipControls</code> for an Amazon S3
  /// bucket. To use this operation, you must have the
  /// <code>s3:PutBucketOwnershipControls</code> permission. For more
  /// information about Amazon S3 permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/using-with-s3-actions.html">Specifying
  /// permissions in a policy</a>.
  ///
  /// For information about Amazon S3 Object Ownership, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/about-object-ownership.html">Using
  /// object ownership</a>.
  ///
  /// The following operations are related to
  /// <code>PutBucketOwnershipControls</code>:
  ///
  /// <ul>
  /// <li>
  /// <a>GetBucketOwnershipControls</a>
  /// </li>
  /// <li>
  /// <a>DeleteBucketOwnershipControls</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose <code>OwnershipControls</code> you
  /// want to set.
  ///
  /// Parameter [ownershipControls] :
  /// The <code>OwnershipControls</code> (BucketOwnerEnforced,
  /// BucketOwnerPreferred, or ObjectWriter) that you want to apply to this
  /// Amazon S3 bucket.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash of the <code>OwnershipControls</code> request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketOwnershipControls({
    required String bucket,
    required OwnershipControls ownershipControls,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?ownershipControls',
      headers: headers,
      payload: ownershipControls.toXml('OwnershipControls'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Applies an Amazon S3 bucket policy to an Amazon S3 bucket.
  /// <note>
  /// <b>Directory buckets </b> - For directory buckets, you must make requests
  /// for this API operation to the Regional endpoint. These endpoints support
  /// path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// If you are using an identity other than the root user of the Amazon Web
  /// Services account that owns the bucket, the calling identity must both have
  /// the <code>PutBucketPolicy</code> permissions on the specified bucket and
  /// belong to the bucket owner's account in order to use this operation.
  ///
  /// If you don't have <code>PutBucketPolicy</code> permissions, Amazon S3
  /// returns a <code>403 Access Denied</code> error. If you have the correct
  /// permissions, but you're not using an identity that belongs to the bucket
  /// owner's account, Amazon S3 returns a <code>405 Method Not Allowed</code>
  /// error.
  /// <important>
  /// To ensure that bucket owners don't inadvertently lock themselves out of
  /// their own buckets, the root principal in a bucket owner's Amazon Web
  /// Services account can perform the <code>GetBucketPolicy</code>,
  /// <code>PutBucketPolicy</code>, and <code>DeleteBucketPolicy</code> API
  /// actions, even if their bucket policy explicitly denies the root
  /// principal's access. Bucket owner root principals can only be blocked from
  /// performing these API actions by VPC endpoint policies and Amazon Web
  /// Services Organizations policies.
  /// </important>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - The
  /// <code>s3:PutBucketPolicy</code> permission is required in a policy. For
  /// more information about general purpose buckets bucket policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using
  /// Bucket Policies and User Policies</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation, you must have the <code>s3express:PutBucketPolicy</code>
  /// permission in an IAM identity-based policy instead of a bucket policy.
  /// Cross-account access to this API operation isn't supported. This operation
  /// can only be performed by the Amazon Web Services account that owns the
  /// resource. For more information about directory bucket policies and
  /// permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam.html">Amazon
  /// Web Services Identity and Access Management (IAM) for S3 Express One
  /// Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>Example bucket policies</dt> <dd>
  /// <b>General purpose buckets example bucket policies</b> - See <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html">Bucket
  /// policy examples</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Directory bucket example bucket policies</b> - See <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example
  /// bucket policies for S3 Express One Zone</a> in the <i>Amazon S3 User
  /// Guide</i>.
  /// </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is
  /// <code>s3express-control.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>PutBucketPolicy</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html">DeleteBucket</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket.
  ///
  /// <b>Directory buckets </b> - When you use this operation with a directory
  /// bucket, you must use path-style requests in the format
  /// <code>https://s3express-control.<i>region_code</i>.amazonaws.com/<i>bucket-name</i>
  /// </code>. Virtual-hosted-style requests aren't supported. Directory bucket
  /// names must be unique in the chosen Availability Zone. Bucket names must
  /// also follow the format <code>
  /// <i>bucket_base_name</i>--<i>az_id</i>--x-s3</code> (for example, <code>
  /// <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>). For information
  /// about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>
  ///
  /// Parameter [policy] :
  /// The bucket policy as a JSON document.
  ///
  /// For directory buckets, the only IAM action supported in the bucket policy
  /// is <code>s3express:CreateSession</code>.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum-<i>algorithm</i> </code> or
  /// <code>x-amz-trailer</code> header sent. Otherwise, Amazon S3 fails the
  /// request with the HTTP status code <code>400 Bad Request</code>.
  ///
  /// For the <code>x-amz-checksum-<i>algorithm</i> </code> header, replace
  /// <code> <i>algorithm</i> </code> with the supported algorithm from the
  /// following list:
  ///
  /// <ul>
  /// <li>
  /// CRC32
  /// </li>
  /// <li>
  /// CRC32C
  /// </li>
  /// <li>
  /// SHA1
  /// </li>
  /// <li>
  /// SHA256
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If the individual checksum value you provide through
  /// <code>x-amz-checksum-<i>algorithm</i> </code> doesn't match the checksum
  /// algorithm you set through <code>x-amz-sdk-checksum-algorithm</code>,
  /// Amazon S3 ignores any provided <code>ChecksumAlgorithm</code> parameter
  /// and uses the checksum algorithm that matches the provided value in
  /// <code>x-amz-checksum-<i>algorithm</i> </code>.
  /// <note>
  /// For directory buckets, when you use Amazon Web Services SDKs,
  /// <code>CRC32</code> is the default checksum algorithm that's used for
  /// performance.
  /// </note>
  ///
  /// Parameter [confirmRemoveSelfBucketAccess] :
  /// Set this parameter to true to confirm that you want to remove your
  /// permissions to change this bucket policy in the future.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash of the request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  /// <note>
  /// For directory buckets, this header is not supported in this API operation.
  /// If you specify this header, the request fails with the HTTP status code
  /// <code>501 Not Implemented</code>.
  /// </note>
  Future<void> putBucketPolicy({
    required String bucket,
    required String policy,
    ChecksumAlgorithm? checksumAlgorithm,
    bool? confirmRemoveSelfBucketAccess,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (confirmRemoveSelfBucketAccess != null)
        'x-amz-confirm-remove-self-bucket-access':
            confirmRemoveSelfBucketAccess.toString(),
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?policy',
      headers: headers,
      payload: policy,
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Creates a replication configuration or replaces an existing one. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a>
  /// in the <i>Amazon S3 User Guide</i>.
  ///
  /// Specify the replication configuration in the request body. In the
  /// replication configuration, you provide the name of the destination bucket
  /// or buckets where you want Amazon S3 to replicate objects, the IAM role
  /// that Amazon S3 can assume to replicate objects on your behalf, and other
  /// relevant information. You can invoke this request for a specific Amazon
  /// Web Services Region by using the <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-requestedregion">
  /// <code>aws:RequestedRegion</code> </a> condition key.
  ///
  /// A replication configuration must include at least one rule, and can
  /// contain a maximum of 1,000. Each rule identifies a subset of objects to
  /// replicate by filtering the objects in the source bucket. To choose
  /// additional subsets of objects to replicate, add a rule for each subset.
  ///
  /// To specify a subset of the objects in the source bucket to apply a
  /// replication rule to, add the Filter element as a child of the Rule
  /// element. You can filter objects based on an object key prefix, one or more
  /// object tags, or both. When you add the Filter element in the
  /// configuration, you must also add the following elements:
  /// <code>DeleteMarkerReplication</code>, <code>Status</code>, and
  /// <code>Priority</code>.
  /// <note>
  /// If you are using an earlier version of the replication configuration,
  /// Amazon S3 handles replication of delete markers differently. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward
  /// Compatibility</a>.
  /// </note>
  /// For information about enabling versioning on a bucket, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html">Using
  /// Versioning</a>.
  /// <dl> <dt>Handling Replication of Encrypted Objects</dt> <dd>
  /// By default, Amazon S3 doesn't replicate objects that are stored at rest
  /// using server-side encryption with KMS keys. To replicate Amazon Web
  /// Services KMS-encrypted objects, add the following:
  /// <code>SourceSelectionCriteria</code>, <code>SseKmsEncryptedObjects</code>,
  /// <code>Status</code>, <code>EncryptionConfiguration</code>, and
  /// <code>ReplicaKmsKeyID</code>. For information about replication
  /// configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-config-for-kms-objects.html">Replicating
  /// Objects Created with SSE Using KMS keys</a>.
  ///
  /// For information on <code>PutBucketReplication</code> errors, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ReplicationErrorCodeList">List
  /// of replication-related error codes</a>
  /// </dd> <dt>Permissions</dt> <dd>
  /// To create a <code>PutBucketReplication</code> request, you must have
  /// <code>s3:PutReplicationConfiguration</code> permissions for the bucket.
  ///
  /// By default, a resource owner, in this case the Amazon Web Services account
  /// that created the bucket, can perform this operation. The resource owner
  /// can also grant others permissions to perform the operation. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  /// <note>
  /// To perform this operation, the user or role performing the action must
  /// have the <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html">iam:PassRole</a>
  /// permission.
  /// </note> </dd> </dl>
  /// The following operations are related to <code>PutBucketReplication</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketReplication.html">GetBucketReplication</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketReplication.html">DeleteBucketReplication</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. You must use this
  /// header as a message integrity check to verify that the request body was
  /// not corrupted in transit. For more information, see <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [token] :
  /// A token to allow Object Lock to be enabled for an existing bucket.
  Future<void> putBucketReplication({
    required String bucket,
    required ReplicationConfiguration replicationConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    String? token,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (token != null) 'x-amz-bucket-object-lock-token': token.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?replication',
      headers: headers,
      payload: replicationConfiguration.toXml('ReplicationConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the request payment configuration for a bucket. By default, the
  /// bucket owner pays for downloads from the bucket. This configuration
  /// parameter enables the bucket owner (only) to specify that the person
  /// requesting the download will be charged for the download. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester
  /// Pays Buckets</a>.
  ///
  /// The following operations are related to
  /// <code>PutBucketRequestPayment</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketRequestPayment.html">GetBucketRequestPayment</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// Parameter [requestPaymentConfiguration] :
  /// Container for Payer.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. You must use this
  /// header as a message integrity check to verify that the request body was
  /// not corrupted in transit. For more information, see <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketRequestPayment({
    required String bucket,
    required RequestPaymentConfiguration requestPaymentConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?requestPayment',
      headers: headers,
      payload: requestPaymentConfiguration.toXml('RequestPaymentConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the tags for a bucket.
  ///
  /// Use tags to organize your Amazon Web Services bill to reflect your own
  /// cost structure. To do this, sign up to get your Amazon Web Services
  /// account bill with tag key values included. Then, to see the cost of
  /// combined resources, organize your billing information according to
  /// resources with the same tag key values. For example, you can tag several
  /// resources with a specific application name, and then organize your billing
  /// information to see the total cost of that application across several
  /// services. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Cost
  /// Allocation and Tagging</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/CostAllocTagging.html">Using
  /// Cost Allocation in Amazon S3 Bucket Tags</a>.
  /// <note>
  /// When this operation sets the tags for a bucket, it will overwrite any
  /// current tags the bucket already has. You cannot use this operation to add
  /// tags to an existing list of tags.
  /// </note>
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:PutBucketTagging</code> action. The bucket owner has this
  /// permission by default and can grant this permission to others. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a>.
  ///
  /// <code>PutBucketTagging</code> has the following special errors. For more
  /// Amazon S3 errors see, <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">Error
  /// Responses</a>.
  ///
  /// <ul>
  /// <li>
  /// <code>InvalidTag</code> - The tag provided was not a valid tag. This error
  /// can occur if the tag did not pass input validation. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/CostAllocTagging.html">Using
  /// Cost Allocation in Amazon S3 Bucket Tags</a>.
  /// </li>
  /// <li>
  /// <code>MalformedXML</code> - The XML provided does not match the schema.
  /// </li>
  /// <li>
  /// <code>OperationAborted</code> - A conflicting conditional action is
  /// currently in progress against this resource. Please try again.
  /// </li>
  /// <li>
  /// <code>InternalError</code> - The service was unable to apply the provided
  /// tag to the bucket.
  /// </li>
  /// </ul>
  /// The following operations are related to <code>PutBucketTagging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html">GetBucketTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketTagging.html">DeleteBucketTagging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// Parameter [tagging] :
  /// Container for the <code>TagSet</code> and <code>Tag</code> elements.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. You must use this
  /// header as a message integrity check to verify that the request body was
  /// not corrupted in transit. For more information, see <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketTagging({
    required String bucket,
    required Tagging tagging,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?tagging',
      headers: headers,
      payload: tagging.toXml('Tagging'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the versioning state of an existing bucket.
  ///
  /// You can set the versioning state with one of the following values:
  ///
  /// <b>Enabled</b>—Enables versioning for the objects in the bucket. All
  /// objects added to the bucket receive a unique version ID.
  ///
  /// <b>Suspended</b>—Disables versioning for the objects in the bucket. All
  /// objects added to the bucket receive the version ID null.
  ///
  /// If the versioning state has never been set on a bucket, it has no
  /// versioning state; a <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html">GetBucketVersioning</a>
  /// request does not return a versioning state value.
  ///
  /// In order to enable MFA Delete, you must be the bucket owner. If you are
  /// the bucket owner and want to enable MFA Delete in the bucket versioning
  /// configuration, you must include the <code>x-amz-mfa request</code> header
  /// and the <code>Status</code> and the <code>MfaDelete</code> request
  /// elements in a request to set the versioning state of the bucket.
  /// <important>
  /// If you have an object expiration lifecycle configuration in your
  /// non-versioned bucket and you want to maintain the same permanent delete
  /// behavior when you enable versioning, you must add a noncurrent expiration
  /// policy. The noncurrent expiration lifecycle configuration will manage the
  /// deletes of the noncurrent object versions in the version-enabled bucket.
  /// (A version-enabled bucket maintains one current and zero or more
  /// noncurrent object versions.) For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config">Lifecycle
  /// and Versioning</a>.
  /// </important>
  /// The following operations are related to <code>PutBucketVersioning</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html">DeleteBucket</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html">GetBucketVersioning</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// Parameter [versioningConfiguration] :
  /// Container for setting the versioning state.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// &gt;The base64-encoded 128-bit MD5 digest of the data. You must use this
  /// header as a message integrity check to verify that the request body was
  /// not corrupted in transit. For more information, see <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [mfa] :
  /// The concatenation of the authentication device's serial number, a space,
  /// and the value that is displayed on your authentication device.
  Future<void> putBucketVersioning({
    required String bucket,
    required VersioningConfiguration versioningConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    String? mfa,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (mfa != null) 'x-amz-mfa': mfa.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?versioning',
      headers: headers,
      payload: versioningConfiguration.toXml('VersioningConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the configuration of the website that is specified in the
  /// <code>website</code> subresource. To configure a bucket as a website, you
  /// can add this subresource on the bucket with website configuration
  /// information such as the file name of the index document and any redirect
  /// rules. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting
  /// Websites on Amazon S3</a>.
  ///
  /// This PUT action requires the <code>S3:PutBucketWebsite</code> permission.
  /// By default, only the bucket owner can configure the website attached to a
  /// bucket; however, bucket owners can allow other users to set the website
  /// configuration by writing a bucket policy that grants them the
  /// <code>S3:PutBucketWebsite</code> permission.
  ///
  /// To redirect all website requests sent to the bucket's website endpoint,
  /// you add a website configuration with the following elements. Because all
  /// requests are sent to another website, you don't need to provide index
  /// document name for the bucket.
  ///
  /// <ul>
  /// <li>
  /// <code>WebsiteConfiguration</code>
  /// </li>
  /// <li>
  /// <code>RedirectAllRequestsTo</code>
  /// </li>
  /// <li>
  /// <code>HostName</code>
  /// </li>
  /// <li>
  /// <code>Protocol</code>
  /// </li>
  /// </ul>
  /// If you want granular control over redirects, you can use the following
  /// elements to add routing rules that describe conditions for redirecting
  /// requests and information about the redirect destination. In this case, the
  /// website configuration must provide an index document for the bucket,
  /// because some requests might not be redirected.
  ///
  /// <ul>
  /// <li>
  /// <code>WebsiteConfiguration</code>
  /// </li>
  /// <li>
  /// <code>IndexDocument</code>
  /// </li>
  /// <li>
  /// <code>Suffix</code>
  /// </li>
  /// <li>
  /// <code>ErrorDocument</code>
  /// </li>
  /// <li>
  /// <code>Key</code>
  /// </li>
  /// <li>
  /// <code>RoutingRules</code>
  /// </li>
  /// <li>
  /// <code>RoutingRule</code>
  /// </li>
  /// <li>
  /// <code>Condition</code>
  /// </li>
  /// <li>
  /// <code>HttpErrorCodeReturnedEquals</code>
  /// </li>
  /// <li>
  /// <code>KeyPrefixEquals</code>
  /// </li>
  /// <li>
  /// <code>Redirect</code>
  /// </li>
  /// <li>
  /// <code>Protocol</code>
  /// </li>
  /// <li>
  /// <code>HostName</code>
  /// </li>
  /// <li>
  /// <code>ReplaceKeyPrefixWith</code>
  /// </li>
  /// <li>
  /// <code>ReplaceKeyWith</code>
  /// </li>
  /// <li>
  /// <code>HttpRedirectCode</code>
  /// </li>
  /// </ul>
  /// Amazon S3 has a limitation of 50 routing rules per website configuration.
  /// If you require more than 50 routing rules, you can use object redirect.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html">Configuring
  /// an Object Redirect</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// The maximum request length is limited to 128 KB.
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// Parameter [websiteConfiguration] :
  /// Container for the request.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. You must use this
  /// header as a message integrity check to verify that the request body was
  /// not corrupted in transit. For more information, see <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putBucketWebsite({
    required String bucket,
    required WebsiteConfiguration websiteConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?website',
      headers: headers,
      payload: websiteConfiguration.toXml('WebsiteConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Adds an object to a bucket.
  /// <note>
  /// <ul>
  /// <li>
  /// Amazon S3 never adds partial objects; if you receive a success response,
  /// Amazon S3 added the entire object to the bucket. You cannot use
  /// <code>PutObject</code> to only update a single piece of metadata for an
  /// existing object. You must put the entire object with updated metadata if
  /// you want to update some values.
  /// </li>
  /// <li>
  /// If your bucket uses the bucket owner enforced setting for Object
  /// Ownership, ACLs are disabled and no longer affect permissions. All objects
  /// written to the bucket by any account will be owned by the bucket owner.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note>
  /// Amazon S3 is a distributed system. If it receives multiple write requests
  /// for the same object simultaneously, it overwrites all but the last object
  /// written. However, Amazon S3 provides features that can modify this
  /// behavior:
  ///
  /// <ul>
  /// <li>
  /// <b>S3 Object Lock</b> - To prevent objects from being deleted or
  /// overwritten, you can use <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock.html">Amazon
  /// S3 Object Lock</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note> </li>
  /// <li>
  /// <b>S3 Versioning</b> - When you enable versioning for a bucket, if Amazon
  /// S3 receives multiple write requests for the same object simultaneously, it
  /// stores all versions of the objects. For each write request that is made to
  /// the same object, Amazon S3 automatically generates a unique version ID of
  /// that object being stored in Amazon S3. You can retrieve, replace, or
  /// delete any version of the object. For more information about versioning,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html">Adding
  /// Objects to Versioning-Enabled Buckets</a> in the <i>Amazon S3 User
  /// Guide</i>. For information about returning the versioning state of a
  /// bucket, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html">GetBucketVersioning</a>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note> </li>
  /// </ul> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - The following permissions are
  /// required in your policies when your <code>PutObject</code> request
  /// includes specific headers.
  ///
  /// <ul>
  /// <li>
  /// <b> <code>s3:PutObject</code> </b> - To successfully complete the
  /// <code>PutObject</code> request, you must always have the
  /// <code>s3:PutObject</code> permission on a bucket to add an object to it.
  /// </li>
  /// <li>
  /// <b> <code>s3:PutObjectAcl</code> </b> - To successfully change the objects
  /// ACL of your <code>PutObject</code> request, you must have the
  /// <code>s3:PutObjectAcl</code>.
  /// </li>
  /// <li>
  /// <b> <code>s3:PutObjectTagging</code> </b> - To successfully set the
  /// tag-set with your <code>PutObject</code> request, you must have the
  /// <code>s3:PutObjectTagging</code>.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Data integrity with Content-MD5</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket</b> - To ensure that data is not corrupted
  /// traversing the network, use the <code>Content-MD5</code> header. When you
  /// use this header, Amazon S3 checks the object against the provided MD5
  /// value and, if they do not match, Amazon S3 returns an error.
  /// Alternatively, when the object's ETag is its MD5 digest, you can calculate
  /// the MD5 while putting the object to Amazon S3 and compare the returned
  /// ETag to the calculated MD5 value.
  /// </li>
  /// <li>
  /// <b>Directory bucket</b> - This functionality is not supported for
  /// directory buckets.
  /// </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// For more information about related Amazon S3 APIs, see the following:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html">CopyObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name to which the PUT action was initiated.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which the PUT action was initiated.
  ///
  /// Parameter [acl] :
  /// The canned ACL to apply to the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
  /// ACL</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// When adding a new object, you can use headers to grant ACL-based
  /// permissions to individual Amazon Web Services accounts or to predefined
  /// groups defined by Amazon S3. These permissions are then added to the ACL
  /// on the object. By default, all objects are private. Only the owner has
  /// full access control. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html">Managing
  /// ACLs Using the REST API</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If the bucket that you're uploading objects to uses the bucket owner
  /// enforced setting for S3 Object Ownership, ACLs are disabled and no longer
  /// affect permissions. Buckets that use this setting only accept PUT requests
  /// that don't specify an ACL or PUT requests that specify bucket owner full
  /// control ACLs, such as the <code>bucket-owner-full-control</code> canned
  /// ACL or an equivalent form of this ACL expressed in the XML format. PUT
  /// requests that contain other ACLs (for example, custom grants to certain
  /// Amazon Web Services accounts) fail and return a <code>400</code> error
  /// with the error code <code>AccessControlListNotSupported</code>. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">
  /// Controlling ownership of objects and disabling ACLs</a> in the <i>Amazon
  /// S3 User Guide</i>.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [body] :
  /// Object data.
  ///
  /// Parameter [bucketKeyEnabled] :
  /// Specifies whether Amazon S3 should use an S3 Bucket Key for object
  /// encryption with server-side encryption using Key Management Service (KMS)
  /// keys (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3
  /// to use an S3 Bucket Key for object encryption with SSE-KMS.
  ///
  /// Specifying this header with a PUT action doesn’t affect bucket-level
  /// settings for S3 Bucket Key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [cacheControl] :
  /// Can be used to specify caching behavior along the request/reply chain. For
  /// more information, see <a
  /// href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum-<i>algorithm</i> </code> or
  /// <code>x-amz-trailer</code> header sent. Otherwise, Amazon S3 fails the
  /// request with the HTTP status code <code>400 Bad Request</code>.
  ///
  /// For the <code>x-amz-checksum-<i>algorithm</i> </code> header, replace
  /// <code> <i>algorithm</i> </code> with the supported algorithm from the
  /// following list:
  ///
  /// <ul>
  /// <li>
  /// CRC32
  /// </li>
  /// <li>
  /// CRC32C
  /// </li>
  /// <li>
  /// SHA1
  /// </li>
  /// <li>
  /// SHA256
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If the individual checksum value you provide through
  /// <code>x-amz-checksum-<i>algorithm</i> </code> doesn't match the checksum
  /// algorithm you set through <code>x-amz-sdk-checksum-algorithm</code>,
  /// Amazon S3 ignores any provided <code>ChecksumAlgorithm</code> parameter
  /// and uses the checksum algorithm that matches the provided value in
  /// <code>x-amz-checksum-<i>algorithm</i> </code>.
  /// <note>
  /// For directory buckets, when you use Amazon Web Services SDKs,
  /// <code>CRC32</code> is the default checksum algorithm that's used for
  /// performance.
  /// </note>
  ///
  /// Parameter [checksumCRC32] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32 checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumCRC32C] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32C checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumSHA1] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 160-bit SHA-1 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumSHA256] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 256-bit SHA-256 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [contentDisposition] :
  /// Specifies presentational information for the object. For more information,
  /// see <a
  /// href="https://www.rfc-editor.org/rfc/rfc6266#section-4">https://www.rfc-editor.org/rfc/rfc6266#section-4</a>.
  ///
  /// Parameter [contentEncoding] :
  /// Specifies what content encodings have been applied to the object and thus
  /// what decoding mechanisms must be applied to obtain the media-type
  /// referenced by the Content-Type header field. For more information, see <a
  /// href="https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding">https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding</a>.
  ///
  /// Parameter [contentLanguage] :
  /// The language the content is in.
  ///
  /// Parameter [contentLength] :
  /// Size of the body in bytes. This parameter is useful when the size of the
  /// body cannot be determined automatically. For more information, see <a
  /// href="https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length">https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length</a>.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the message (without the headers)
  /// according to RFC 1864. This header can be used as a message integrity
  /// check to verify that the data is the same data that was originally sent.
  /// Although it is optional, we recommend using the Content-MD5 mechanism as
  /// an end-to-end integrity check. For more information about REST request
  /// authentication, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST
  /// Authentication</a>.
  /// <note>
  /// The <code>Content-MD5</code> header is required for any request to upload
  /// an object with a retention period configured using Amazon S3 Object Lock.
  /// For more information about Amazon S3 Object Lock, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html">Amazon
  /// S3 Object Lock Overview</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [contentType] :
  /// A standard MIME type describing the format of the contents. For more
  /// information, see <a
  /// href="https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type">https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type</a>.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [expires] :
  /// The date and time at which the object is no longer cacheable. For more
  /// information, see <a
  /// href="https://www.rfc-editor.org/rfc/rfc7234#section-5.3">https://www.rfc-editor.org/rfc/rfc7234#section-5.3</a>.
  ///
  /// Parameter [grantFullControl] :
  /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantRead] :
  /// Allows grantee to read the object data and its metadata.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantReadACP] :
  /// Allows grantee to read the object ACL.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [grantWriteACP] :
  /// Allows grantee to write the ACL for the applicable object.
  /// <note>
  /// <ul>
  /// <li>
  /// This functionality is not supported for directory buckets.
  /// </li>
  /// <li>
  /// This functionality is not supported for Amazon S3 on Outposts.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [metadata] :
  /// A map of metadata to store with the object in S3.
  ///
  /// Parameter [objectLockLegalHoldStatus] :
  /// Specifies whether a legal hold will be applied to this object. For more
  /// information about S3 Object Lock, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object
  /// Lock</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockMode] :
  /// The Object Lock mode that you want to apply to this object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [objectLockRetainUntilDate] :
  /// The date and time when you want this object's Object Lock to expire. Must
  /// be formatted as a timestamp parameter.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// <code>AES256</code>).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded; Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSEKMSEncryptionContext] :
  /// Specifies the Amazon Web Services KMS Encryption Context to use for object
  /// encryption. The value of this header is a base64-encoded UTF-8 string
  /// holding JSON with the encryption context key-value pairs. This value is
  /// stored as object metadata and automatically gets passed on to Amazon Web
  /// Services KMS for future <code>GetObject</code> or <code>CopyObject</code>
  /// operations on this object. This value must be explicitly added during
  /// <code>CopyObject</code> operations.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSEKMSKeyId] :
  /// If <code>x-amz-server-side-encryption</code> has a valid value of
  /// <code>aws:kms</code> or <code>aws:kms:dsse</code>, this header specifies
  /// the ID (Key ID, Key ARN, or Key Alias) of the Key Management Service (KMS)
  /// symmetric encryption customer managed key that was used for the object. If
  /// you specify <code>x-amz-server-side-encryption:aws:kms</code> or
  /// <code>x-amz-server-side-encryption:aws:kms:dsse</code>, but do not
  /// provide<code> x-amz-server-side-encryption-aws-kms-key-id</code>, Amazon
  /// S3 uses the Amazon Web Services managed key (<code>aws/s3</code>) to
  /// protect the data. If the KMS key does not exist in the same account that's
  /// issuing the command, you must use the full ARN and not just the ID.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [serverSideEncryption] :
  /// The server-side encryption algorithm that was used when you store this
  /// object in Amazon S3 (for example, <code>AES256</code>,
  /// <code>aws:kms</code>, <code>aws:kms:dsse</code>).
  ///
  /// <b>General purpose buckets </b> - You have four mutually exclusive options
  /// to protect data using server-side encryption in Amazon S3, depending on
  /// how you choose to manage the encryption keys. Specifically, the encryption
  /// key options are Amazon S3 managed keys (SSE-S3), Amazon Web Services KMS
  /// keys (SSE-KMS or DSSE-KMS), and customer-provided keys (SSE-C). Amazon S3
  /// encrypts data with server-side encryption by using Amazon S3 managed keys
  /// (SSE-S3) by default. You can optionally tell Amazon S3 to encrypt data at
  /// rest by using server-side encryption with other key options. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using
  /// Server-Side Encryption</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Directory buckets </b> - For directory buckets, only the server-side
  /// encryption with Amazon S3 managed keys (SSE-S3) (<code>AES256</code>)
  /// value is supported.
  ///
  /// Parameter [storageClass] :
  /// By default, Amazon S3 uses the STANDARD Storage Class to store newly
  /// created objects. The STANDARD storage class provides high durability and
  /// high availability. Depending on performance needs, you can specify a
  /// different Storage Class. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
  /// Classes</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <ul>
  /// <li>
  /// For directory buckets, only the S3 Express One Zone storage class is
  /// supported to store newly created objects.
  /// </li>
  /// <li>
  /// Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [tagging] :
  /// The tag-set for the object. The tag-set must be encoded as URL Query
  /// parameters. (For example, "Key1=Value1")
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [websiteRedirectLocation] :
  /// If the bucket is configured as a website, redirects requests for this
  /// object to another object in the same bucket or to an external URL. Amazon
  /// S3 stores the value of this header in the object metadata. For information
  /// about object metadata, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html">Object
  /// Key and Metadata</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// In the following example, the request header sets the redirect to an
  /// object (anotherPage.html) in the same bucket:
  ///
  /// <code>x-amz-website-redirect-location: /anotherPage.html</code>
  ///
  /// In the following example, the request header sets the object redirect to
  /// another website:
  ///
  /// <code>x-amz-website-redirect-location: http://www.example.com/</code>
  ///
  /// For more information about website hosting in Amazon S3, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting
  /// Websites on Amazon S3</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html">How
  /// to Configure Website Page Redirects</a> in the <i>Amazon S3 User
  /// Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<PutObjectOutput> putObject({
    required String bucket,
    required String key,
    ObjectCannedACL? acl,
    Uint8List? body,
    bool? bucketKeyEnabled,
    String? cacheControl,
    ChecksumAlgorithm? checksumAlgorithm,
    String? checksumCRC32,
    String? checksumCRC32C,
    String? checksumSHA1,
    String? checksumSHA256,
    String? contentDisposition,
    String? contentEncoding,
    String? contentLanguage,
    int? contentLength,
    String? contentMD5,
    String? contentType,
    String? expectedBucketOwner,
    DateTime? expires,
    String? grantFullControl,
    String? grantRead,
    String? grantReadACP,
    String? grantWriteACP,
    Map<String, String>? metadata,
    ObjectLockLegalHoldStatus? objectLockLegalHoldStatus,
    ObjectLockMode? objectLockMode,
    DateTime? objectLockRetainUntilDate,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    String? sSEKMSEncryptionContext,
    String? sSEKMSKeyId,
    ServerSideEncryption? serverSideEncryption,
    StorageClass? storageClass,
    String? tagging,
    String? websiteRedirectLocation,
  }) async {
    final headers = <String, String>{
      if (acl != null) 'x-amz-acl': acl.value,
      if (bucketKeyEnabled != null)
        'x-amz-server-side-encryption-bucket-key-enabled':
            bucketKeyEnabled.toString(),
      if (cacheControl != null) 'Cache-Control': cacheControl.toString(),
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (checksumCRC32 != null)
        'x-amz-checksum-crc32': checksumCRC32.toString(),
      if (checksumCRC32C != null)
        'x-amz-checksum-crc32c': checksumCRC32C.toString(),
      if (checksumSHA1 != null) 'x-amz-checksum-sha1': checksumSHA1.toString(),
      if (checksumSHA256 != null)
        'x-amz-checksum-sha256': checksumSHA256.toString(),
      if (contentDisposition != null)
        'Content-Disposition': contentDisposition.toString(),
      if (contentEncoding != null)
        'Content-Encoding': contentEncoding.toString(),
      if (contentLanguage != null)
        'Content-Language': contentLanguage.toString(),
      if (contentLength != null) 'Content-Length': contentLength.toString(),
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (contentType != null) 'Content-Type': contentType.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (expires != null) 'Expires': _s.rfc822ToJson(expires),
      if (grantFullControl != null)
        'x-amz-grant-full-control': grantFullControl.toString(),
      if (grantRead != null) 'x-amz-grant-read': grantRead.toString(),
      if (grantReadACP != null) 'x-amz-grant-read-acp': grantReadACP.toString(),
      if (grantWriteACP != null)
        'x-amz-grant-write-acp': grantWriteACP.toString(),
      if (metadata != null)
        ...metadata.map((key, value) => MapEntry('x-amz-meta-$key', value)),
      if (objectLockLegalHoldStatus != null)
        'x-amz-object-lock-legal-hold': objectLockLegalHoldStatus.value,
      if (objectLockMode != null)
        'x-amz-object-lock-mode': objectLockMode.value,
      if (objectLockRetainUntilDate != null)
        'x-amz-object-lock-retain-until-date':
            _s.iso8601ToJson(objectLockRetainUntilDate),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
      if (sSEKMSEncryptionContext != null)
        'x-amz-server-side-encryption-context':
            sSEKMSEncryptionContext.toString(),
      if (sSEKMSKeyId != null)
        'x-amz-server-side-encryption-aws-kms-key-id': sSEKMSKeyId.toString(),
      if (serverSideEncryption != null)
        'x-amz-server-side-encryption': serverSideEncryption.value,
      if (storageClass != null) 'x-amz-storage-class': storageClass.value,
      if (tagging != null) 'x-amz-tagging': tagging.toString(),
      if (websiteRedirectLocation != null)
        'x-amz-website-redirect-location': websiteRedirectLocation.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      headers: headers,
      payload: body,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return PutObjectOutput(
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      checksumCRC32:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32'),
      checksumCRC32C:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32c'),
      checksumSHA1:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha1'),
      checksumSHA256:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha256'),
      eTag: _s.extractHeaderStringValue($result.headers, 'ETag'),
      expiration:
          _s.extractHeaderStringValue($result.headers, 'x-amz-expiration'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSEncryptionContext: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-context'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Uses the <code>acl</code> subresource to set the access control list (ACL)
  /// permissions for a new or existing object in an S3 bucket. You must have
  /// the <code>WRITE_ACP</code> permission to set the ACL of an object. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#permissions">What
  /// permissions can I grant?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Depending on your application needs, you can choose to set the ACL on an
  /// object using either the request body or the headers. For example, if you
  /// have an existing application that updates a bucket ACL using the request
  /// body, you can continue to use that approach. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a> in the <i>Amazon S3 User Guide</i>.
  /// <important>
  /// If your bucket uses the bucket owner enforced setting for S3 Object
  /// Ownership, ACLs are disabled and no longer affect permissions. You must
  /// use policies to grant access to your bucket and the objects in it.
  /// Requests to set ACLs or update ACLs fail and return the
  /// <code>AccessControlListNotSupported</code> error code. Requests to read
  /// ACLs are still supported. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling
  /// object ownership</a> in the <i>Amazon S3 User Guide</i>.
  /// </important> <dl> <dt>Permissions</dt> <dd>
  /// You can set access permissions using one of the following methods:
  ///
  /// <ul>
  /// <li>
  /// Specify a canned ACL with the <code>x-amz-acl</code> request header.
  /// Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each
  /// canned ACL has a predefined set of grantees and permissions. Specify the
  /// canned ACL name as the value of <code>x-amz-ac</code>l. If you use this
  /// header, you cannot use other access control-specific headers in your
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
  /// ACL</a>.
  /// </li>
  /// <li>
  /// Specify access permissions explicitly with the
  /// <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,
  /// <code>x-amz-grant-write-acp</code>, and
  /// <code>x-amz-grant-full-control</code> headers. When using these headers,
  /// you specify explicit access permissions and grantees (Amazon Web Services
  /// accounts or Amazon S3 groups) who will receive the permission. If you use
  /// these ACL-specific headers, you cannot use <code>x-amz-acl</code> header
  /// to set a canned ACL. These parameters map to the set of permissions that
  /// Amazon S3 supports in an ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
  /// Control List (ACL) Overview</a>.
  ///
  /// You specify each grantee as a type=value pair, where the type is one of
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// <code>id</code> – if the value specified is the canonical user ID of an
  /// Amazon Web Services account
  /// </li>
  /// <li>
  /// <code>uri</code> – if you are granting permissions to a predefined group
  /// </li>
  /// <li>
  /// <code>emailAddress</code> – if the value specified is the email address of
  /// an Amazon Web Services account
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul>
  /// For example, the following <code>x-amz-grant-read</code> header grants
  /// list objects permission to the two Amazon Web Services accounts identified
  /// by their email addresses.
  ///
  /// <code>x-amz-grant-read: emailAddress="xyz@amazon.com",
  /// emailAddress="abc@amazon.com" </code>
  /// </li>
  /// </ul>
  /// You can use either a canned ACL or specify access permissions explicitly.
  /// You cannot do both.
  /// </dd> <dt>Grantee Values</dt> <dd>
  /// You can specify the person (grantee) to whom you're assigning access
  /// rights (using request elements) in the following ways:
  ///
  /// <ul>
  /// <li>
  /// By the person's ID:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="CanonicalUser"&gt;&lt;ID&gt;&lt;&gt;ID&lt;&gt;&lt;/ID&gt;&lt;DisplayName&gt;&lt;&gt;GranteesEmail&lt;&gt;&lt;/DisplayName&gt;
  /// &lt;/Grantee&gt;</code>
  ///
  /// DisplayName is optional and ignored in the request.
  /// </li>
  /// <li>
  /// By URI:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="Group"&gt;&lt;URI&gt;&lt;&gt;http://acs.amazonaws.com/groups/global/AuthenticatedUsers&lt;&gt;&lt;/URI&gt;&lt;/Grantee&gt;</code>
  /// </li>
  /// <li>
  /// By Email address:
  ///
  /// <code>&lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  /// xsi:type="AmazonCustomerByEmail"&gt;&lt;EmailAddress&gt;&lt;&gt;Grantees@email.com&lt;&gt;&lt;/EmailAddress&gt;lt;/Grantee&gt;</code>
  ///
  /// The grantee is resolved to the CanonicalUser and, in a response to a GET
  /// Object acl request, appears as the CanonicalUser.
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note> </li>
  /// </ul> </dd> <dt>Versioning</dt> <dd>
  /// The ACL of an object is set at the object version level. By default, PUT
  /// sets the ACL of the current version of an object. To set the ACL of a
  /// different version, use the <code>versionId</code> subresource.
  /// </dd> </dl>
  /// The following operations are related to <code>PutObjectAcl</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html">CopyObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [NoSuchKey].
  ///
  /// Parameter [bucket] :
  /// The bucket name that contains the object to which you want to attach the
  /// ACL.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Key for which the PUT action was initiated.
  ///
  /// Parameter [acl] :
  /// The canned ACL to apply to the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
  /// ACL</a>.
  ///
  /// Parameter [accessControlPolicy] :
  /// Contains the elements that set the ACL permissions for an object per
  /// grantee.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the data. This header must be
  /// used as a message integrity check to verify that the request body was not
  /// corrupted in transit. For more information, go to <a
  /// href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864.&gt;</a>
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [grantFullControl] :
  /// Allows grantee the read, write, read ACP, and write ACP permissions on the
  /// bucket.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Parameter [grantRead] :
  /// Allows grantee to list the objects in the bucket.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Parameter [grantReadACP] :
  /// Allows grantee to read the bucket ACL.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Parameter [grantWrite] :
  /// Allows grantee to create new objects in the bucket.
  ///
  /// For the bucket and object owners of existing objects, also allows
  /// deletions and overwrites of those objects.
  ///
  /// Parameter [grantWriteACP] :
  /// Allows grantee to write the ACL for the applicable bucket.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Parameter [versionId] :
  /// Version ID used to reference a specific version of the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<PutObjectAclOutput> putObjectAcl({
    required String bucket,
    required String key,
    ObjectCannedACL? acl,
    AccessControlPolicy? accessControlPolicy,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    String? grantFullControl,
    String? grantRead,
    String? grantReadACP,
    String? grantWrite,
    String? grantWriteACP,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (acl != null) 'x-amz-acl': acl.value,
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (grantFullControl != null)
        'x-amz-grant-full-control': grantFullControl.toString(),
      if (grantRead != null) 'x-amz-grant-read': grantRead.toString(),
      if (grantReadACP != null) 'x-amz-grant-read-acp': grantReadACP.toString(),
      if (grantWrite != null) 'x-amz-grant-write': grantWrite.toString(),
      if (grantWriteACP != null)
        'x-amz-grant-write-acp': grantWriteACP.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?acl',
      queryParams: $query,
      headers: headers,
      payload: accessControlPolicy?.toXml('AccessControlPolicy'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return PutObjectAclOutput(
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Applies a legal hold configuration to the specified object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking
  /// Objects</a>.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object that you want to place a legal hold
  /// on.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The key name for the object that you want to place a legal hold on.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash for the request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [legalHold] :
  /// Container element for the legal hold configuration you want to apply to
  /// the specified object.
  ///
  /// Parameter [versionId] :
  /// The version ID of the object that you want to place a legal hold on.
  Future<PutObjectLegalHoldOutput> putObjectLegalHold({
    required String bucket,
    required String key,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    ObjectLockLegalHold? legalHold,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?legal-hold',
      queryParams: $query,
      headers: headers,
      payload: legalHold?.toXml('LegalHold'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return PutObjectLegalHoldOutput(
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Places an Object Lock configuration on the specified bucket. The rule
  /// specified in the Object Lock configuration will be applied by default to
  /// every new object placed in the specified bucket. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking
  /// Objects</a>.
  /// <note>
  /// <ul>
  /// <li>
  /// The <code>DefaultRetention</code> settings require both a mode and a
  /// period.
  /// </li>
  /// <li>
  /// The <code>DefaultRetention</code> period can be either <code>Days</code>
  /// or <code>Years</code> but you must select one. You cannot specify
  /// <code>Days</code> and <code>Years</code> at the same time.
  /// </li>
  /// <li>
  /// You can enable Object Lock for new or existing buckets. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html">Configuring
  /// Object Lock</a>.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [bucket] :
  /// The bucket whose Object Lock configuration you want to create or replace.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash for the request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [objectLockConfiguration] :
  /// The Object Lock configuration that you want to apply to the specified
  /// bucket.
  ///
  /// Parameter [token] :
  /// A token to allow Object Lock to be enabled for an existing bucket.
  Future<PutObjectLockConfigurationOutput> putObjectLockConfiguration({
    required String bucket,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    ObjectLockConfiguration? objectLockConfiguration,
    RequestPayer? requestPayer,
    String? token,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (token != null) 'x-amz-bucket-object-lock-token': token.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?object-lock',
      headers: headers,
      payload: objectLockConfiguration?.toXml('ObjectLockConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return PutObjectLockConfigurationOutput(
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Places an Object Retention configuration on an object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking
  /// Objects</a>. Users or accounts require the
  /// <code>s3:PutObjectRetention</code> permission in order to place an Object
  /// Retention configuration on objects. Bypassing a Governance Retention
  /// configuration requires the <code>s3:BypassGovernanceRetention</code>
  /// permission.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// Parameter [bucket] :
  /// The bucket name that contains the object you want to apply this Object
  /// Retention configuration to.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// The key name for the object that you want to apply this Object Retention
  /// configuration to.
  ///
  /// Parameter [bypassGovernanceRetention] :
  /// Indicates whether this action should bypass Governance-mode restrictions.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash for the request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [retention] :
  /// The container element for the Object Retention configuration.
  ///
  /// Parameter [versionId] :
  /// The version ID for the object that you want to apply this Object Retention
  /// configuration to.
  Future<PutObjectRetentionOutput> putObjectRetention({
    required String bucket,
    required String key,
    bool? bypassGovernanceRetention,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    ObjectLockRetention? retention,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (bypassGovernanceRetention != null)
        'x-amz-bypass-governance-retention':
            bypassGovernanceRetention.toString(),
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?retention',
      queryParams: $query,
      headers: headers,
      payload: retention?.toXml('Retention'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return PutObjectRetentionOutput(
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Sets the supplied tag-set to an object that already exists in a bucket. A
  /// tag is a key-value pair. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html">Object
  /// Tagging</a>.
  ///
  /// You can associate tags with an object by sending a PUT request against the
  /// tagging subresource that is associated with the object. You can retrieve
  /// tags by sending a GET request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a>.
  ///
  /// For tagging-related restrictions related to characters and encodings, see
  /// <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html">Tag
  /// Restrictions</a>. Note that Amazon S3 limits the maximum number of tags to
  /// 10 tags per object.
  ///
  /// To use this operation, you must have permission to perform the
  /// <code>s3:PutObjectTagging</code> action. By default, the bucket owner has
  /// this permission and can grant this permission to others.
  ///
  /// To put tags of any other version, use the <code>versionId</code> query
  /// parameter. You also need permission for the
  /// <code>s3:PutObjectVersionTagging</code> action.
  ///
  /// <code>PutObjectTagging</code> has the following special errors. For more
  /// Amazon S3 errors see, <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">Error
  /// Responses</a>.
  ///
  /// <ul>
  /// <li>
  /// <code>InvalidTag</code> - The tag provided was not a valid tag. This error
  /// can occur if the tag did not pass input validation. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html">Object
  /// Tagging</a>.
  /// </li>
  /// <li>
  /// <code>MalformedXML</code> - The XML provided does not match the schema.
  /// </li>
  /// <li>
  /// <code>OperationAborted</code> - A conflicting conditional action is
  /// currently in progress against this resource. Please try again.
  /// </li>
  /// <li>
  /// <code>InternalError</code> - The service was unable to apply the provided
  /// tag to the object.
  /// </li>
  /// </ul>
  /// The following operations are related to <code>PutObjectTagging</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjectTagging.html">DeleteObjectTagging</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Name of the object key.
  ///
  /// Parameter [tagging] :
  /// Container for the <code>TagSet</code> and <code>Tag</code> elements
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash for the request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// The versionId of the object that the tag-set will be added to.
  Future<PutObjectTaggingOutput> putObjectTagging({
    required String bucket,
    required String key,
    required Tagging tagging,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?tagging',
      queryParams: $query,
      headers: headers,
      payload: tagging.toXml('Tagging'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return PutObjectTaggingOutput(
      versionId:
          _s.extractHeaderStringValue($result.headers, 'x-amz-version-id'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Creates or modifies the <code>PublicAccessBlock</code> configuration for
  /// an Amazon S3 bucket. To use this operation, you must have the
  /// <code>s3:PutBucketPublicAccessBlock</code> permission. For more
  /// information about Amazon S3 permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a>.
  /// <important>
  /// When Amazon S3 evaluates the <code>PublicAccessBlock</code> configuration
  /// for a bucket or an object, it checks the <code>PublicAccessBlock</code>
  /// configuration for both the bucket (or the bucket that contains the object)
  /// and the bucket owner's account. If the <code>PublicAccessBlock</code>
  /// configurations are different between the bucket and the account, Amazon S3
  /// uses the most restrictive combination of the bucket-level and
  /// account-level settings.
  /// </important>
  /// For more information about when Amazon S3 considers a bucket or an object
  /// public, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The
  /// Meaning of "Public"</a>.
  ///
  /// The following operations are related to <code>PutPublicAccessBlock</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetPublicAccessBlock.html">GetPublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeletePublicAccessBlock.html">DeletePublicAccessBlock</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketPolicyStatus.html">GetBucketPolicyStatus</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using
  /// Amazon S3 Block Public Access</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code>
  /// configuration you want to set.
  ///
  /// Parameter [publicAccessBlockConfiguration] :
  /// The <code>PublicAccessBlock</code> configuration that you want to apply to
  /// this Amazon S3 bucket. You can enable the configuration options in any
  /// combination. For more information about when Amazon S3 considers a bucket
  /// or object public, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The
  /// Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [contentMD5] :
  /// The MD5 hash of the <code>PutPublicAccessBlock</code> request body.
  ///
  /// For requests made using the Amazon Web Services Command Line Interface
  /// (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  Future<void> putPublicAccessBlock({
    required String bucket,
    required PublicAccessBlockConfiguration publicAccessBlockConfiguration,
    ChecksumAlgorithm? checksumAlgorithm,
    String? contentMD5,
    String? expectedBucketOwner,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
    };
    await _protocol.send(
      method: 'PUT',
      requestUri: '/${Uri.encodeComponent(bucket)}?publicAccessBlock',
      headers: headers,
      payload: publicAccessBlockConfiguration
          .toXml('PublicAccessBlockConfiguration'),
      exceptionFnMap: _exceptionFns,
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Restores an archived copy of an object back into Amazon S3
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// This action performs the following types of requests:
  ///
  /// <ul>
  /// <li>
  /// <code>restore an archive</code> - Restore an archived object
  /// </li>
  /// </ul>
  /// For more information about the <code>S3</code> structure in the request
  /// body, see the following:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Managing
  /// Access with ACLs</a> in the <i>Amazon S3 User Guide</i>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Protecting
  /// Data Using Server-Side Encryption</a> in the <i>Amazon S3 User Guide</i>
  /// </li>
  /// </ul> <dl> <dt>Permissions</dt> <dd>
  /// To use this operation, you must have permissions to perform the
  /// <code>s3:RestoreObject</code> action. The bucket owner has this permission
  /// by default and can grant this permission to others. For more information
  /// about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
  /// Related to Bucket Subresource Operations</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html">Managing
  /// Access Permissions to Your Amazon S3 Resources</a> in the <i>Amazon S3
  /// User Guide</i>.
  /// </dd> <dt>Restoring objects</dt> <dd>
  /// Objects that you archive to the S3 Glacier Flexible Retrieval Flexible
  /// Retrieval or S3 Glacier Deep Archive storage class, and S3
  /// Intelligent-Tiering Archive or S3 Intelligent-Tiering Deep Archive tiers,
  /// are not accessible in real time. For objects in the S3 Glacier Flexible
  /// Retrieval Flexible Retrieval or S3 Glacier Deep Archive storage classes,
  /// you must first initiate a restore request, and then wait until a temporary
  /// copy of the object is available. If you want a permanent copy of the
  /// object, create a copy of it in the Amazon S3 Standard storage class in
  /// your S3 bucket. To access an archived object, you must restore the object
  /// for the duration (number of days) that you specify. For objects in the
  /// Archive Access or Deep Archive Access tiers of S3 Intelligent-Tiering, you
  /// must first initiate a restore request, and then wait until the object is
  /// moved into the Frequent Access tier.
  ///
  /// To restore a specific object version, you can provide a version ID. If you
  /// don't provide a version ID, Amazon S3 restores the current version.
  ///
  /// When restoring an archived object, you can specify one of the following
  /// data access tier options in the <code>Tier</code> element of the request
  /// body:
  ///
  /// <ul>
  /// <li>
  /// <code>Expedited</code> - Expedited retrievals allow you to quickly access
  /// your data stored in the S3 Glacier Flexible Retrieval Flexible Retrieval
  /// storage class or S3 Intelligent-Tiering Archive tier when occasional
  /// urgent requests for restoring archives are required. For all but the
  /// largest archived objects (250 MB+), data accessed using Expedited
  /// retrievals is typically made available within 1–5 minutes. Provisioned
  /// capacity ensures that retrieval capacity for Expedited retrievals is
  /// available when you need it. Expedited retrievals and provisioned capacity
  /// are not available for objects stored in the S3 Glacier Deep Archive
  /// storage class or S3 Intelligent-Tiering Deep Archive tier.
  /// </li>
  /// <li>
  /// <code>Standard</code> - Standard retrievals allow you to access any of
  /// your archived objects within several hours. This is the default option for
  /// retrieval requests that do not specify the retrieval option. Standard
  /// retrievals typically finish within 3–5 hours for objects stored in the S3
  /// Glacier Flexible Retrieval Flexible Retrieval storage class or S3
  /// Intelligent-Tiering Archive tier. They typically finish within 12 hours
  /// for objects stored in the S3 Glacier Deep Archive storage class or S3
  /// Intelligent-Tiering Deep Archive tier. Standard retrievals are free for
  /// objects stored in S3 Intelligent-Tiering.
  /// </li>
  /// <li>
  /// <code>Bulk</code> - Bulk retrievals free for objects stored in the S3
  /// Glacier Flexible Retrieval and S3 Intelligent-Tiering storage classes,
  /// enabling you to retrieve large amounts, even petabytes, of data at no
  /// cost. Bulk retrievals typically finish within 5–12 hours for objects
  /// stored in the S3 Glacier Flexible Retrieval Flexible Retrieval storage
  /// class or S3 Intelligent-Tiering Archive tier. Bulk retrievals are also the
  /// lowest-cost retrieval option when restoring objects from S3 Glacier Deep
  /// Archive. They typically finish within 48 hours for objects stored in the
  /// S3 Glacier Deep Archive storage class or S3 Intelligent-Tiering Deep
  /// Archive tier.
  /// </li>
  /// </ul>
  /// For more information about archive retrieval options and provisioned
  /// capacity for <code>Expedited</code> data access, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html">Restoring
  /// Archived Objects</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// You can use Amazon S3 restore speed upgrade to change the restore speed to
  /// a faster speed while it is in progress. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html#restoring-objects-upgrade-tier.title.html">
  /// Upgrading the speed of an in-progress restore</a> in the <i>Amazon S3 User
  /// Guide</i>.
  ///
  /// To get the status of object restoration, you can send a <code>HEAD</code>
  /// request. Operations return the <code>x-amz-restore</code> header, which
  /// provides information about the restoration status, in the response. You
  /// can use Amazon S3 event notifications to notify you when a restore is
  /// initiated or completed. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
  /// Amazon S3 Event Notifications</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// After restoring an archived object, you can update the restoration period
  /// by reissuing the request with a new period. Amazon S3 updates the
  /// restoration period relative to the current time and charges only for the
  /// request-there are no data transfer charges. You cannot update the
  /// restoration period when Amazon S3 is actively processing your current
  /// restore request for the object.
  ///
  /// If your bucket has a lifecycle configuration with a rule that includes an
  /// expiration action, the object expiration overrides the life span that you
  /// specify in a restore request. For example, if you restore an object copy
  /// for 10 days, but the object is scheduled to expire in 3 days, Amazon S3
  /// deletes the object in 3 days. For more information about lifecycle
  /// configuration, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object
  /// Lifecycle Management</a> in <i>Amazon S3 User Guide</i>.
  /// </dd> <dt>Responses</dt> <dd>
  /// A successful action returns either the <code>200 OK</code> or <code>202
  /// Accepted</code> status code.
  ///
  /// <ul>
  /// <li>
  /// If the object is not previously restored, then Amazon S3 returns <code>202
  /// Accepted</code> in the response.
  /// </li>
  /// <li>
  /// If the object is previously restored, Amazon S3 returns <code>200
  /// OK</code> in the response.
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// Special errors:
  ///
  /// <ul>
  /// <li>
  /// <i>Code: RestoreAlreadyInProgress</i>
  /// </li>
  /// <li>
  /// <i>Cause: Object restore is already in progress.</i>
  /// </li>
  /// <li>
  /// <i>HTTP Status Code: 409 Conflict</i>
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix: Client</i>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code: GlacierExpeditedRetrievalNotAvailable</i>
  /// </li>
  /// <li>
  /// <i>Cause: expedited retrievals are currently not available. Try again
  /// later. (Returned if there is insufficient capacity to process the
  /// Expedited request. This error applies only to Expedited retrievals and not
  /// to S3 Standard or Bulk retrievals.)</i>
  /// </li>
  /// <li>
  /// <i>HTTP Status Code: 503</i>
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix: N/A</i>
  /// </li>
  /// </ul> </li>
  /// </ul> </dd> </dl>
  /// The following operations are related to <code>RestoreObject</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html">GetBucketNotificationConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// May throw [ObjectAlreadyInActiveTierError].
  ///
  /// Parameter [bucket] :
  /// The bucket name containing the object to restore.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which the action was initiated.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [versionId] :
  /// VersionId used to reference a specific version of the object.
  Future<RestoreObjectOutput> restoreObject({
    required String bucket,
    required String key,
    ChecksumAlgorithm? checksumAlgorithm,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    RestoreRequest? restoreRequest,
    String? versionId,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
    };
    final $query = <String, List<String>>{
      if (versionId != null) 'versionId': [versionId],
    };
    final $result = await _protocol.sendRaw(
      method: 'POST',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?restore',
      queryParams: $query,
      headers: headers,
      payload: restoreRequest?.toXml('RestoreRequest'),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return RestoreObjectOutput(
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      restoreOutputPath: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-restore-output-path'),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// This action filters the contents of an Amazon S3 object based on a simple
  /// structured query language (SQL) statement. In the request, along with the
  /// SQL expression, you must also specify a data serialization format (JSON,
  /// CSV, or Apache Parquet) of the object. Amazon S3 uses this format to parse
  /// object data into records, and returns only records that match the
  /// specified SQL expression. You must also specify the data serialization
  /// format for the response.
  ///
  /// This functionality is not supported for Amazon S3 on Outposts.
  ///
  /// For more information about Amazon S3 Select, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/selecting-content-from-objects.html">Selecting
  /// Content from Objects</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-glacier-select-sql-reference-select.html">SELECT
  /// Command</a> in the <i>Amazon S3 User Guide</i>.
  /// <p/> <dl> <dt>Permissions</dt> <dd>
  /// You must have the <code>s3:GetObject</code> permission for this
  /// operation. Amazon S3 Select does not support anonymous access. For more
  /// information about permissions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying
  /// Permissions in a Policy</a> in the <i>Amazon S3 User Guide</i>.
  /// </dd> <dt>Object Data Formats</dt> <dd>
  /// You can use Amazon S3 Select to query objects that have the following
  /// format properties:
  ///
  /// <ul>
  /// <li>
  /// <i>CSV, JSON, and Parquet</i> - Objects must be in CSV, JSON, or Parquet
  /// format.
  /// </li>
  /// <li>
  /// <i>UTF-8</i> - UTF-8 is the only encoding type Amazon S3 Select supports.
  /// </li>
  /// <li>
  /// <i>GZIP or BZIP2</i> - CSV and JSON files can be compressed using GZIP or
  /// BZIP2. GZIP and BZIP2 are the only compression formats that Amazon S3
  /// Select supports for CSV and JSON files. Amazon S3 Select supports columnar
  /// compression for Parquet using GZIP or Snappy. Amazon S3 Select does not
  /// support whole-object compression for Parquet objects.
  /// </li>
  /// <li>
  /// <i>Server-side encryption</i> - Amazon S3 Select supports querying objects
  /// that are protected with server-side encryption.
  ///
  /// For objects that are encrypted with customer-provided encryption keys
  /// (SSE-C), you must use HTTPS, and you must use the headers that are
  /// documented in the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>.
  /// For more information about SSE-C, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side
  /// Encryption (Using Customer-Provided Encryption Keys)</a> in the <i>Amazon
  /// S3 User Guide</i>.
  ///
  /// For objects that are encrypted with Amazon S3 managed keys (SSE-S3) and
  /// Amazon Web Services KMS keys (SSE-KMS), server-side encryption is handled
  /// transparently, so you don't need to specify anything. For more information
  /// about server-side encryption, including SSE-S3 and SSE-KMS, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Protecting
  /// Data Using Server-Side Encryption</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>Working with the Response Body</dt> <dd>
  /// Given the response size is unknown, Amazon S3 Select streams the response
  /// as a series of messages and includes a <code>Transfer-Encoding</code>
  /// header with <code>chunked</code> as its value in the response. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTSelectObjectAppendix.html">Appendix:
  /// SelectObjectContent Response</a>.
  /// </dd> <dt>GetObject Support</dt> <dd>
  /// The <code>SelectObjectContent</code> action does not support the following
  /// <code>GetObject</code> functionality. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>.
  ///
  /// <ul>
  /// <li>
  /// <code>Range</code>: Although you can specify a scan range for an Amazon S3
  /// Select request (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_SelectObjectContent.html#AmazonS3-SelectObjectContent-request-ScanRange">SelectObjectContentRequest
  /// - ScanRange</a> in the request parameters), you cannot specify the range
  /// of bytes of an object to return.
  /// </li>
  /// <li>
  /// The <code>GLACIER</code>, <code>DEEP_ARCHIVE</code>, and
  /// <code>REDUCED_REDUNDANCY</code> storage classes, or the
  /// <code>ARCHIVE_ACCESS</code> and <code>DEEP_ARCHIVE_ACCESS</code> access
  /// tiers of the <code>INTELLIGENT_TIERING</code> storage class: You cannot
  /// query objects in the <code>GLACIER</code>, <code>DEEP_ARCHIVE</code>, or
  /// <code>REDUCED_REDUNDANCY</code> storage classes, nor objects in the
  /// <code>ARCHIVE_ACCESS</code> or <code>DEEP_ARCHIVE_ACCESS</code> access
  /// tiers of the <code>INTELLIGENT_TIERING</code> storage class. For more
  /// information about storage classes, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html">Using
  /// Amazon S3 storage classes</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>Special Errors</dt> <dd>
  /// For a list of special errors for this operation, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#SelectObjectContentErrorCodeList">List
  /// of SELECT Object Content Error Codes</a>
  /// </dd> </dl>
  /// The following operations are related to <code>SelectObjectContent</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html">GetBucketLifecycleConfiguration</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The S3 bucket.
  ///
  /// Parameter [expression] :
  /// The expression that is used to query the object.
  ///
  /// Parameter [expressionType] :
  /// The type of the provided expression (for example, SQL).
  ///
  /// Parameter [inputSerialization] :
  /// Describes the format of the data in the object that is being queried.
  ///
  /// Parameter [key] :
  /// The object key.
  ///
  /// Parameter [outputSerialization] :
  /// Describes the format of the data that you want Amazon S3 to return in
  /// response.
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [requestProgress] :
  /// Specifies if periodic request progress information should be enabled.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// The server-side encryption (SSE) algorithm used to encrypt the object.
  /// This parameter is needed only when the object was created using a checksum
  /// algorithm. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [sSECustomerKey] :
  /// The server-side encryption (SSE) customer managed key. This parameter is
  /// needed only when the object was created using a checksum algorithm. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// The MD5 server-side encryption (SSE) customer managed key. This parameter
  /// is needed only when the object was created using a checksum algorithm. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [scanRange] :
  /// Specifies the byte range of the object to get the records from. A record
  /// is processed when its first byte is contained by the range. This parameter
  /// is optional, but when specified, it must not be empty. See RFC 2616,
  /// Section 14.35.1 about how to specify the start and end of the range.
  ///
  /// <code>ScanRange</code>may be used in the following ways:
  ///
  /// <ul>
  /// <li>
  /// <code>&lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;end&gt;100&lt;/end&gt;&lt;/scanrange&gt;</code>
  /// - process only the records starting between the bytes 50 and 100
  /// (inclusive, counting from zero)
  /// </li>
  /// <li>
  /// <code>&lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;/scanrange&gt;</code>
  /// - process only the records starting after the byte 50
  /// </li>
  /// <li>
  /// <code>&lt;scanrange&gt;&lt;end&gt;50&lt;/end&gt;&lt;/scanrange&gt;</code>
  /// - process only the records within the last 50 bytes of the file.
  /// </li>
  /// </ul>
  Future<SelectObjectContentOutput> selectObjectContent({
    required String bucket,
    required String expression,
    required ExpressionType expressionType,
    required InputSerialization inputSerialization,
    required String key,
    required OutputSerialization outputSerialization,
    String? expectedBucketOwner,
    RequestProgress? requestProgress,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
    ScanRange? scanRange,
  }) async {
    final headers = <String, String>{
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $result = await _protocol.sendRaw(
      method: 'POST',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}?select&select-type=2',
      headers: headers,
      payload: SelectObjectContentRequest(
              bucket: bucket,
              expression: expression,
              expressionType: expressionType,
              inputSerialization: inputSerialization,
              key: key,
              outputSerialization: outputSerialization,
              expectedBucketOwner: expectedBucketOwner,
              requestProgress: requestProgress,
              sSECustomerAlgorithm: sSECustomerAlgorithm,
              sSECustomerKey: sSECustomerKey,
              sSECustomerKeyMD5: sSECustomerKeyMD5,
              scanRange: scanRange)
          .toXml(
        'SelectObjectContentRequest',
        attributes: [
          _s.XmlAttribute(
              _s.XmlName('xmlns'), 'http://s3.amazonaws.com/doc/2006-03-01/'),
        ],
      ),
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return SelectObjectContentOutput(
      payload: SelectObjectContentEventStream.fromXml($elem),
    );
  }

  /// Uploads a part in a multipart upload.
  /// <note>
  /// In this operation, you provide new data as a part of an object in your
  /// request. However, you have an option to specify your existing Amazon S3
  /// object as a data source for the part you are uploading. To upload a part
  /// from an existing object, you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a>
  /// operation.
  /// </note>
  /// You must initiate a multipart upload (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>)
  /// before you can upload any part. In response to your initiate request,
  /// Amazon S3 returns an upload ID, a unique identifier that you must include
  /// in your upload part request.
  ///
  /// Part numbers can be any number from 1 to 10,000, inclusive. A part number
  /// uniquely identifies a part and also defines its position within the object
  /// being created. If you upload a new part using the same part number that
  /// was used with a previous part, the previously uploaded part is
  /// overwritten.
  ///
  /// For information about maximum and minimum part sizes and other multipart
  /// upload specifications, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html">Multipart
  /// upload limits</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// After you initiate multipart upload and upload one or more parts, you must
  /// either complete or abort multipart upload in order to stop getting charged
  /// for storage of the uploaded parts. Only after you either complete or abort
  /// multipart upload, Amazon S3 frees up the parts storage and stops charging
  /// you for the parts storage.
  /// </note>
  /// For more information on multipart uploads, go to <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart
  /// Upload Overview</a> in the <i>Amazon S3 User Guide </i>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Permissions</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - For information on the
  /// permissions required to use the multipart upload API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// Upload and Permissions</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - To grant access to this API
  /// operation on a directory bucket, we recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a> API operation for session-based
  /// authorization. Specifically, you grant the
  /// <code>s3express:CreateSession</code> permission to the directory bucket in
  /// a bucket policy or an IAM identity-based policy. Then, you make the
  /// <code>CreateSession</code> API call on the bucket to obtain a session
  /// token. With the session token in your request header, you can make API
  /// requests to this operation. After the session token expires, you make
  /// another <code>CreateSession</code> API call to generate a new session
  /// token for use. Amazon Web Services CLI or SDKs create session and refresh
  /// the session token automatically to avoid service interruptions when a
  /// session expires. For more information about authorization, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html">
  /// <code>CreateSession</code> </a>.
  /// </li>
  /// </ul> </dd> <dt>Data integrity</dt> <dd>
  /// <b>General purpose bucket</b> - To ensure that data is not corrupted
  /// traversing the network, specify the <code>Content-MD5</code> header in the
  /// upload part request. Amazon S3 checks the part data against the provided
  /// MD5 value. If they do not match, Amazon S3 returns an error. If the upload
  /// request is signed with Signature Version 4, then Amazon Web Services S3
  /// uses the <code>x-amz-content-sha256</code> header as a checksum instead of
  /// <code>Content-MD5</code>. For more information see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html">Authenticating
  /// Requests: Using the Authorization Header (Amazon Web Services Signature
  /// Version 4)</a>.
  /// <note>
  /// <b>Directory buckets</b> - MD5 is not supported by directory buckets. You
  /// can use checksum algorithms to check object integrity.
  /// </note> </dd> <dt>Encryption</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose bucket</b> - Server-side encryption is for data
  /// encryption at rest. Amazon S3 encrypts your data as it writes it to disks
  /// in its data centers and decrypts it when you access it. You have mutually
  /// exclusive options to protect data using server-side encryption in Amazon
  /// S3, depending on how you choose to manage the encryption keys.
  /// Specifically, the encryption key options are Amazon S3 managed keys
  /// (SSE-S3), Amazon Web Services KMS keys (SSE-KMS), and Customer-Provided
  /// Keys (SSE-C). Amazon S3 encrypts data with server-side encryption using
  /// Amazon S3 managed keys (SSE-S3) by default. You can optionally tell Amazon
  /// S3 to encrypt data at rest using server-side encryption with other key
  /// options. The option you use depends on whether you want to use KMS keys
  /// (SSE-KMS) or provide your own encryption key (SSE-C).
  ///
  /// Server-side encryption is supported by the S3 Multipart Upload operations.
  /// Unless you are using a customer-provided encryption key (SSE-C), you don't
  /// need to specify the encryption parameters in each UploadPart request.
  /// Instead, you only need to specify the server-side encryption parameters in
  /// the initial Initiate Multipart request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>.
  ///
  /// If you request server-side encryption using a customer-provided encryption
  /// key (SSE-C) in your initiate multipart upload request, you must provide
  /// identical encryption information in each part upload using the following
  /// request headers.
  ///
  /// <ul>
  /// <li>
  /// x-amz-server-side-encryption-customer-algorithm
  /// </li>
  /// <li>
  /// x-amz-server-side-encryption-customer-key
  /// </li>
  /// <li>
  /// x-amz-server-side-encryption-customer-key-MD5
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <b>Directory bucket</b> - For directory buckets, only server-side
  /// encryption with Amazon S3 managed keys (SSE-S3) (<code>AES256</code>) is
  /// supported.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using
  /// Server-Side Encryption</a> in the <i>Amazon S3 User Guide</i>.
  /// </dd> <dt>Special errors</dt> <dd>
  /// <ul>
  /// <li>
  /// Error Code: <code>NoSuchUpload</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The specified multipart upload does not exist. The upload ID
  /// might be invalid, or the multipart upload might have been aborted or
  /// completed.
  /// </li>
  /// <li>
  /// HTTP Status Code: 404 Not Found
  /// </li>
  /// <li>
  /// SOAP Fault Code Prefix: Client
  /// </li>
  /// </ul> </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>UploadPart</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The name of the bucket to which the multipart upload was initiated.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [key] :
  /// Object key for which the multipart upload was initiated.
  ///
  /// Parameter [partNumber] :
  /// Part number of part being uploaded. This is a positive integer between 1
  /// and 10,000.
  ///
  /// Parameter [uploadId] :
  /// Upload ID identifying the multipart upload whose part is being uploaded.
  ///
  /// Parameter [body] :
  /// Object data.
  ///
  /// Parameter [checksumAlgorithm] :
  /// Indicates the algorithm used to create the checksum for the object when
  /// you use the SDK. This header will not provide any additional functionality
  /// if you don't use the SDK. When you send this header, there must be a
  /// corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code>
  /// header sent. Otherwise, Amazon S3 fails the request with the HTTP status
  /// code <code>400 Bad Request</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you provide an individual checksum, Amazon S3 ignores any provided
  /// <code>ChecksumAlgorithm</code> parameter.
  ///
  /// This checksum algorithm must be the same for all parts and it match the
  /// checksum value supplied in the <code>CreateMultipartUpload</code> request.
  ///
  /// Parameter [checksumCRC32] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32 checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumCRC32C] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32C checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumSHA1] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 160-bit SHA-1 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [checksumSHA256] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 256-bit SHA-256 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [contentLength] :
  /// Size of the body in bytes. This parameter is useful when the size of the
  /// body cannot be determined automatically.
  ///
  /// Parameter [contentMD5] :
  /// The base64-encoded 128-bit MD5 digest of the part data. This parameter is
  /// auto-populated when using the command from the CLI. This parameter is
  /// required if object lock parameters are specified.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// AES256).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded; Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm header</code>. This
  /// must be the same encryption key specified in the initiate multipart upload
  /// request.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  Future<UploadPartOutput> uploadPart({
    required String bucket,
    required String key,
    required int partNumber,
    required String uploadId,
    Uint8List? body,
    ChecksumAlgorithm? checksumAlgorithm,
    String? checksumCRC32,
    String? checksumCRC32C,
    String? checksumSHA1,
    String? checksumSHA256,
    int? contentLength,
    String? contentMD5,
    String? expectedBucketOwner,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
  }) async {
    final headers = <String, String>{
      if (checksumAlgorithm != null)
        'x-amz-sdk-checksum-algorithm': checksumAlgorithm.value,
      if (checksumCRC32 != null)
        'x-amz-checksum-crc32': checksumCRC32.toString(),
      if (checksumCRC32C != null)
        'x-amz-checksum-crc32c': checksumCRC32C.toString(),
      if (checksumSHA1 != null) 'x-amz-checksum-sha1': checksumSHA1.toString(),
      if (checksumSHA256 != null)
        'x-amz-checksum-sha256': checksumSHA256.toString(),
      if (contentLength != null) 'Content-Length': contentLength.toString(),
      if (contentMD5 != null) 'Content-MD5': contentMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      'partNumber': [partNumber.toString()],
      'uploadId': [uploadId],
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      payload: body,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return UploadPartOutput(
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      checksumCRC32:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32'),
      checksumCRC32C:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-crc32c'),
      checksumSHA1:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha1'),
      checksumSHA256:
          _s.extractHeaderStringValue($result.headers, 'x-amz-checksum-sha256'),
      eTag: _s.extractHeaderStringValue($result.headers, 'ETag'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
    );
  }

  /// Uploads a part by copying data from an existing object as data source. To
  /// specify the data source, you add the request header
  /// <code>x-amz-copy-source</code> in your request. To specify a byte range,
  /// you add the request header <code>x-amz-copy-source-range</code> in your
  /// request.
  ///
  /// For information about maximum and minimum part sizes and other multipart
  /// upload specifications, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html">Multipart
  /// upload limits</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Instead of copying data from an existing object as part data, you might
  /// use the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// action to upload new data as a part of an object in your request.
  /// </note>
  /// You must initiate a multipart upload before you can upload any part. In
  /// response to your initiate request, Amazon S3 returns the upload ID, a
  /// unique identifier that you must include in your upload part request.
  ///
  /// For conceptual information about multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading
  /// Objects Using Multipart Upload</a> in the <i>Amazon S3 User Guide</i>. For
  /// information about copying objects using a single atomic action vs. a
  /// multipart upload, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html">Operations
  /// on Objects</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, you must make requests
  /// for this API operation to the Zonal endpoint. These endpoints support
  /// virtual-hosted-style requests in the format
  /// <code>https://<i>bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com/<i>key-name</i>
  /// </code>. Path-style requests are not supported. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-Regions-and-Zones.html">Regional
  /// and Zonal endpoints</a> in the <i>Amazon S3 User Guide</i>.
  /// </note> <dl> <dt>Authentication and authorization</dt> <dd>
  /// All <code>UploadPartCopy</code> requests must be authenticated and signed
  /// by using IAM credentials (access key ID and secret access key for the IAM
  /// identities). All headers with the <code>x-amz-</code> prefix, including
  /// <code>x-amz-copy-source</code>, must be signed. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST
  /// Authentication</a>.
  ///
  /// <b>Directory buckets</b> - You must use IAM credentials to authenticate
  /// and authorize your access to the <code>UploadPartCopy</code> API
  /// operation, instead of using the temporary security credentials through the
  /// <code>CreateSession</code> API operation.
  ///
  /// Amazon Web Services CLI or SDKs handles authentication and authorization
  /// on your behalf.
  /// </dd> <dt>Permissions</dt> <dd>
  /// You must have <code>READ</code> access to the source object and
  /// <code>WRITE</code> access to the destination bucket.
  ///
  /// <ul>
  /// <li>
  /// <b>General purpose bucket permissions</b> - You must have the permissions
  /// in a policy based on the bucket types of your source bucket and
  /// destination bucket in an <code>UploadPartCopy</code> operation.
  ///
  /// <ul>
  /// <li>
  /// If the source object is in a general purpose bucket, you must have the <b>
  /// <code>s3:GetObject</code> </b> permission to read the source object that
  /// is being copied.
  /// </li>
  /// <li>
  /// If the destination bucket is a general purpose bucket, you must have the
  /// <b> <code>s3:PutObject</code> </b> permission to write the object copy to
  /// the destination bucket.
  /// </li>
  /// </ul>
  /// For information about permissions required to use the multipart upload
  /// API, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart
  /// Upload and Permissions</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Directory bucket permissions</b> - You must have permissions in a
  /// bucket policy or an IAM identity-based policy based on the source and
  /// destination bucket types in an <code>UploadPartCopy</code> operation.
  ///
  /// <ul>
  /// <li>
  /// If the source object that you want to copy is in a directory bucket, you
  /// must have the <b> <code>s3express:CreateSession</code> </b> permission in
  /// the <code>Action</code> element of a policy to read the object . By
  /// default, the session is in the <code>ReadWrite</code> mode. If you want to
  /// restrict the access, you can explicitly set the
  /// <code>s3express:SessionMode</code> condition key to <code>ReadOnly</code>
  /// on the copy source bucket.
  /// </li>
  /// <li>
  /// If the copy destination is a directory bucket, you must have the <b>
  /// <code>s3express:CreateSession</code> </b> permission in the
  /// <code>Action</code> element of a policy to write the object to the
  /// destination. The <code>s3express:SessionMode</code> condition key cannot
  /// be set to <code>ReadOnly</code> on the copy destination.
  /// </li>
  /// </ul>
  /// For example policies, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example
  /// bucket policies for S3 Express One Zone</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-identity-policies.html">Amazon
  /// Web Services Identity and Access Management (IAM) identity-based policies
  /// for S3 Express One Zone</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </dd> <dt>Encryption</dt> <dd>
  /// <ul>
  /// <li>
  /// <b>General purpose buckets </b> - For information about using server-side
  /// encryption with customer-provided encryption keys with the
  /// <code>UploadPartCopy</code> operation, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html">CopyObject</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>.
  /// </li>
  /// <li>
  /// <b>Directory buckets </b> - For directory buckets, only server-side
  /// encryption with Amazon S3 managed keys (SSE-S3) (<code>AES256</code>) is
  /// supported.
  /// </li>
  /// </ul> </dd> <dt>Special errors</dt> <dd>
  /// <ul>
  /// <li>
  /// Error Code: <code>NoSuchUpload</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The specified multipart upload does not exist. The upload ID
  /// might be invalid, or the multipart upload might have been aborted or
  /// completed.
  /// </li>
  /// <li>
  /// HTTP Status Code: 404 Not Found
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Error Code: <code>InvalidRequest</code>
  ///
  /// <ul>
  /// <li>
  /// Description: The specified copy source is not supported as a byte-range
  /// copy source.
  /// </li>
  /// <li>
  /// HTTP Status Code: 400 Bad Request
  /// </li>
  /// </ul> </li>
  /// </ul> </dd> <dt>HTTP Host header syntax</dt> <dd>
  /// <b>Directory buckets </b> - The HTTP Host header syntax is <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// </dd> </dl>
  /// The following operations are related to <code>UploadPartCopy</code>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [bucket] :
  /// The bucket name.
  ///
  /// <b>Directory buckets</b> - When you use this operation with a directory
  /// bucket, you must use virtual-hosted-style requests in the format <code>
  /// <i>Bucket_name</i>.s3express-<i>az_id</i>.<i>region</i>.amazonaws.com</code>.
  /// Path-style requests are not supported. Directory bucket names must be
  /// unique in the chosen Availability Zone. Bucket names must follow the
  /// format <code> <i>bucket_base_name</i>--<i>az-id</i>--x-s3</code> (for
  /// example, <code> <i>DOC-EXAMPLE-BUCKET</i>--<i>usw2-az1</i>--x-s3</code>).
  /// For information about bucket naming restrictions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html">Directory
  /// bucket naming rules</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// <b>Access points</b> - When you use this action with an access point, you
  /// must provide the alias of the access point in place of the bucket name or
  /// specify the access point ARN. When using the access point ARN, you must
  /// direct requests to the access point hostname. The access point hostname
  /// takes the form
  /// <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com.
  /// When using this action with an access point through the Amazon Web
  /// Services SDKs, you provide the access point ARN in place of the bucket
  /// name. For more information about access point ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using
  /// access points</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// Access points and Object Lambda access points are not supported by
  /// directory buckets.
  /// </note>
  /// <b>S3 on Outposts</b> - When you use this action with Amazon S3 on
  /// Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  /// on Outposts hostname takes the form <code>
  /// <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>.
  /// When you use this action with S3 on Outposts through the Amazon Web
  /// Services SDKs, you provide the Outposts access point ARN in place of the
  /// bucket name. For more information about S3 on Outposts ARNs, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What
  /// is S3 on Outposts?</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Parameter [copySource] :
  /// Specifies the source object for the copy operation. You specify the value
  /// in one of two formats, depending on whether you want to access the source
  /// object through an <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access
  /// point</a>:
  ///
  /// <ul>
  /// <li>
  /// For objects not accessed through an access point, specify the name of the
  /// source bucket and key of the source object, separated by a slash (/). For
  /// example, to copy the object <code>reports/january.pdf</code> from the
  /// bucket <code>awsexamplebucket</code>, use
  /// <code>awsexamplebucket/reports/january.pdf</code>. The value must be
  /// URL-encoded.
  /// </li>
  /// <li>
  /// For objects accessed through access points, specify the Amazon Resource
  /// Name (ARN) of the object as accessed through the access point, in the
  /// format
  /// <code>arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;</code>.
  /// For example, to copy the object <code>reports/january.pdf</code> through
  /// access point <code>my-access-point</code> owned by account
  /// <code>123456789012</code> in Region <code>us-west-2</code>, use the URL
  /// encoding of
  /// <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>.
  /// The value must be URL encoded.
  /// <note>
  /// <ul>
  /// <li>
  /// Amazon S3 supports copy operations using Access points only when the
  /// source and destination buckets are in the same Amazon Web Services Region.
  /// </li>
  /// <li>
  /// Access points are not supported by directory buckets.
  /// </li>
  /// </ul> </note>
  /// Alternatively, for objects accessed through Amazon S3 on Outposts, specify
  /// the ARN of the object as accessed in the format
  /// <code>arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt;key&gt;</code>.
  /// For example, to copy the object <code>reports/january.pdf</code> through
  /// outpost <code>my-outpost</code> owned by account <code>123456789012</code>
  /// in Region <code>us-west-2</code>, use the URL encoding of
  /// <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>.
  /// The value must be URL-encoded.
  /// </li>
  /// </ul>
  /// If your bucket has versioning enabled, you could have multiple versions of
  /// the same object. By default, <code>x-amz-copy-source</code> identifies the
  /// current version of the source object to copy. To copy a specific version
  /// of the source object to copy, append
  /// <code>?versionId=&lt;version-id&gt;</code> to the
  /// <code>x-amz-copy-source</code> request header (for example,
  /// <code>x-amz-copy-source:
  /// /awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).
  ///
  /// If the current version is a delete marker and you don't specify a
  /// versionId in the <code>x-amz-copy-source</code> request header, Amazon S3
  /// returns a <code>404 Not Found</code> error, because the object does not
  /// exist. If you specify versionId in the <code>x-amz-copy-source</code> and
  /// the versionId is a delete marker, Amazon S3 returns an HTTP <code>400 Bad
  /// Request</code> error, because you are not allowed to specify a delete
  /// marker as a version for the <code>x-amz-copy-source</code>.
  /// <note>
  /// <b>Directory buckets</b> - S3 Versioning isn't enabled and supported for
  /// directory buckets.
  /// </note>
  ///
  /// Parameter [key] :
  /// Object key for which the multipart upload was initiated.
  ///
  /// Parameter [partNumber] :
  /// Part number of part being copied. This is a positive integer between 1 and
  /// 10,000.
  ///
  /// Parameter [uploadId] :
  /// Upload ID identifying the multipart upload whose part is being copied.
  ///
  /// Parameter [copySourceIfMatch] :
  /// Copies the object if its entity tag (ETag) matches the specified tag.
  ///
  /// If both of the <code>x-amz-copy-source-if-match</code> and
  /// <code>x-amz-copy-source-if-unmodified-since</code> headers are present in
  /// the request as follows:
  ///
  /// <code>x-amz-copy-source-if-match</code> condition evaluates to
  /// <code>true</code>, and;
  ///
  /// <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to
  /// <code>false</code>;
  ///
  /// Amazon S3 returns <code>200 OK</code> and copies the data.
  ///
  /// Parameter [copySourceIfModifiedSince] :
  /// Copies the object if it has been modified since the specified time.
  ///
  /// If both of the <code>x-amz-copy-source-if-none-match</code> and
  /// <code>x-amz-copy-source-if-modified-since</code> headers are present in
  /// the request as follows:
  ///
  /// <code>x-amz-copy-source-if-none-match</code> condition evaluates to
  /// <code>false</code>, and;
  ///
  /// <code>x-amz-copy-source-if-modified-since</code> condition evaluates to
  /// <code>true</code>;
  ///
  /// Amazon S3 returns <code>412 Precondition Failed</code> response code.
  ///
  /// Parameter [copySourceIfNoneMatch] :
  /// Copies the object if its entity tag (ETag) is different than the specified
  /// ETag.
  ///
  /// If both of the <code>x-amz-copy-source-if-none-match</code> and
  /// <code>x-amz-copy-source-if-modified-since</code> headers are present in
  /// the request as follows:
  ///
  /// <code>x-amz-copy-source-if-none-match</code> condition evaluates to
  /// <code>false</code>, and;
  ///
  /// <code>x-amz-copy-source-if-modified-since</code> condition evaluates to
  /// <code>true</code>;
  ///
  /// Amazon S3 returns <code>412 Precondition Failed</code> response code.
  ///
  /// Parameter [copySourceIfUnmodifiedSince] :
  /// Copies the object if it hasn't been modified since the specified time.
  ///
  /// If both of the <code>x-amz-copy-source-if-match</code> and
  /// <code>x-amz-copy-source-if-unmodified-since</code> headers are present in
  /// the request as follows:
  ///
  /// <code>x-amz-copy-source-if-match</code> condition evaluates to
  /// <code>true</code>, and;
  ///
  /// <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to
  /// <code>false</code>;
  ///
  /// Amazon S3 returns <code>200 OK</code> and copies the data.
  ///
  /// Parameter [copySourceRange] :
  /// The range of bytes to copy from the source object. The range value must
  /// use the form bytes=first-last, where the first and last are the zero-based
  /// byte offsets to copy. For example, bytes=0-9 indicates that you want to
  /// copy the first 10 bytes of the source. You can copy a range only if the
  /// source object is greater than 5 MB.
  ///
  /// Parameter [copySourceSSECustomerAlgorithm] :
  /// Specifies the algorithm to use when decrypting the source object (for
  /// example, <code>AES256</code>).
  /// <note>
  /// This functionality is not supported when the source object is in a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [copySourceSSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use to
  /// decrypt the source object. The encryption key provided in this header must
  /// be one that was used when the source object was created.
  /// <note>
  /// This functionality is not supported when the source object is in a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [copySourceSSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported when the source object is in a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [expectedBucketOwner] :
  /// The account ID of the expected destination bucket owner. If the account ID
  /// that you provide does not match the actual owner of the destination
  /// bucket, the request fails with the HTTP status code <code>403
  /// Forbidden</code> (access denied).
  ///
  /// Parameter [expectedSourceBucketOwner] :
  /// The account ID of the expected source bucket owner. If the account ID that
  /// you provide does not match the actual owner of the source bucket, the
  /// request fails with the HTTP status code <code>403 Forbidden</code> (access
  /// denied).
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Specifies the algorithm to use when encrypting the object (for example,
  /// AES256).
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [sSECustomerKey] :
  /// Specifies the customer-provided encryption key for Amazon S3 to use in
  /// encrypting data. This value is used to store the object and then it is
  /// discarded; Amazon S3 does not store the encryption key. The key must be
  /// appropriate for use with the algorithm specified in the
  /// <code>x-amz-server-side-encryption-customer-algorithm</code> header. This
  /// must be the same encryption key specified in the initiate multipart upload
  /// request.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// Specifies the 128-bit MD5 digest of the encryption key according to RFC
  /// 1321. Amazon S3 uses this header for a message integrity check to ensure
  /// that the encryption key was transmitted without error.
  /// <note>
  /// This functionality is not supported when the destination bucket is a
  /// directory bucket.
  /// </note>
  Future<UploadPartCopyOutput> uploadPartCopy({
    required String bucket,
    required String copySource,
    required String key,
    required int partNumber,
    required String uploadId,
    String? copySourceIfMatch,
    DateTime? copySourceIfModifiedSince,
    String? copySourceIfNoneMatch,
    DateTime? copySourceIfUnmodifiedSince,
    String? copySourceRange,
    String? copySourceSSECustomerAlgorithm,
    Uint8List? copySourceSSECustomerKey,
    String? copySourceSSECustomerKeyMD5,
    String? expectedBucketOwner,
    String? expectedSourceBucketOwner,
    RequestPayer? requestPayer,
    String? sSECustomerAlgorithm,
    Uint8List? sSECustomerKey,
    String? sSECustomerKeyMD5,
  }) async {
    final headers = <String, String>{
      'x-amz-copy-source': copySource.toString(),
      if (copySourceIfMatch != null)
        'x-amz-copy-source-if-match': copySourceIfMatch.toString(),
      if (copySourceIfModifiedSince != null)
        'x-amz-copy-source-if-modified-since':
            _s.rfc822ToJson(copySourceIfModifiedSince),
      if (copySourceIfNoneMatch != null)
        'x-amz-copy-source-if-none-match': copySourceIfNoneMatch.toString(),
      if (copySourceIfUnmodifiedSince != null)
        'x-amz-copy-source-if-unmodified-since':
            _s.rfc822ToJson(copySourceIfUnmodifiedSince),
      if (copySourceRange != null)
        'x-amz-copy-source-range': copySourceRange.toString(),
      if (copySourceSSECustomerAlgorithm != null)
        'x-amz-copy-source-server-side-encryption-customer-algorithm':
            copySourceSSECustomerAlgorithm.toString(),
      if (copySourceSSECustomerKey != null)
        'x-amz-copy-source-server-side-encryption-customer-key':
            copySourceSSECustomerKey.toString(),
      if (copySourceSSECustomerKeyMD5 != null)
        'x-amz-copy-source-server-side-encryption-customer-key-MD5':
            copySourceSSECustomerKeyMD5.toString(),
      if (expectedBucketOwner != null)
        'x-amz-expected-bucket-owner': expectedBucketOwner.toString(),
      if (expectedSourceBucketOwner != null)
        'x-amz-source-expected-bucket-owner':
            expectedSourceBucketOwner.toString(),
      if (requestPayer != null) 'x-amz-request-payer': requestPayer.value,
      if (sSECustomerAlgorithm != null)
        'x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKey != null)
        'x-amz-server-side-encryption-customer-key': sSECustomerKey.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
    };
    final $query = <String, List<String>>{
      'partNumber': [partNumber.toString()],
      'uploadId': [uploadId],
    };
    final $result = await _protocol.sendRaw(
      method: 'PUT',
      requestUri:
          '/${Uri.encodeComponent(bucket)}/${key.split('/').map(Uri.encodeComponent).join('/')}',
      queryParams: $query,
      headers: headers,
      exceptionFnMap: _exceptionFns,
    );
    final $elem = await _s.xmlFromResponse($result);
    return UploadPartCopyOutput(
      copyPartResult: CopyPartResult.fromXml($elem),
      bucketKeyEnabled: _s.extractHeaderBoolValue(
          $result.headers, 'x-amz-server-side-encryption-bucket-key-enabled'),
      copySourceVersionId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-copy-source-version-id'),
      requestCharged: _s
          .extractHeaderStringValue($result.headers, 'x-amz-request-charged')
          ?.let(RequestCharged.fromString),
      sSECustomerAlgorithm: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-algorithm'),
      sSECustomerKeyMD5: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-customer-key-MD5'),
      sSEKMSKeyId: _s.extractHeaderStringValue(
          $result.headers, 'x-amz-server-side-encryption-aws-kms-key-id'),
      serverSideEncryption: _s
          .extractHeaderStringValue(
              $result.headers, 'x-amz-server-side-encryption')
          ?.let(ServerSideEncryption.fromString),
    );
  }

  /// <note>
  /// This operation is not supported by directory buckets.
  /// </note>
  /// Passes transformed objects to a <code>GetObject</code> operation when
  /// using Object Lambda access points. For information about Object Lambda
  /// access points, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/transforming-objects.html">Transforming
  /// objects with Object Lambda access points</a> in the <i>Amazon S3 User
  /// Guide</i>.
  ///
  /// This operation supports metadata that can be returned by <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>,
  /// in addition to <code>RequestRoute</code>, <code>RequestToken</code>,
  /// <code>StatusCode</code>, <code>ErrorCode</code>, and
  /// <code>ErrorMessage</code>. The <code>GetObject</code> response metadata is
  /// supported so that the <code>WriteGetObjectResponse</code> caller,
  /// typically an Lambda function, can provide the same metadata when it
  /// internally invokes <code>GetObject</code>. When
  /// <code>WriteGetObjectResponse</code> is called by a customer-owned Lambda
  /// function, the metadata returned to the end user <code>GetObject</code>
  /// call might differ from what Amazon S3 would normally return.
  ///
  /// You can include any number of metadata headers. When including a metadata
  /// header, it should be prefaced with <code>x-amz-meta</code>. For example,
  /// <code>x-amz-meta-my-custom-header: MyCustomValue</code>. The primary use
  /// case for this is to forward <code>GetObject</code> metadata.
  ///
  /// Amazon Web Services provides some prebuilt Lambda functions that you can
  /// use with S3 Object Lambda to detect and redact personally identifiable
  /// information (PII) and decompress S3 objects. These Lambda functions are
  /// available in the Amazon Web Services Serverless Application Repository,
  /// and can be selected through the Amazon Web Services Management Console
  /// when you create your Object Lambda access point.
  ///
  /// Example 1: PII Access Control - This Lambda function uses Amazon
  /// Comprehend, a natural language processing (NLP) service using machine
  /// learning to find insights and relationships in text. It automatically
  /// detects personally identifiable information (PII) such as names,
  /// addresses, dates, credit card numbers, and social security numbers from
  /// documents in your Amazon S3 bucket.
  ///
  /// Example 2: PII Redaction - This Lambda function uses Amazon Comprehend, a
  /// natural language processing (NLP) service using machine learning to find
  /// insights and relationships in text. It automatically redacts personally
  /// identifiable information (PII) such as names, addresses, dates, credit
  /// card numbers, and social security numbers from documents in your Amazon S3
  /// bucket.
  ///
  /// Example 3: Decompression - The Lambda function
  /// S3ObjectLambdaDecompression, is equipped to decompress objects stored in
  /// S3 in one of six compressed file formats including bzip2, gzip, snappy,
  /// zlib, zstandard and ZIP.
  ///
  /// For information on how to view and use these functions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/olap-examples.html">Using
  /// Amazon Web Services built Lambda functions</a> in the <i>Amazon S3 User
  /// Guide</i>.
  ///
  /// Parameter [requestRoute] :
  /// Route prefix to the HTTP URL generated.
  ///
  /// Parameter [requestToken] :
  /// A single use encrypted token that maps <code>WriteGetObjectResponse</code>
  /// to the end user <code>GetObject</code> request.
  ///
  /// Parameter [acceptRanges] :
  /// Indicates that a range of bytes was specified.
  ///
  /// Parameter [body] :
  /// The object data.
  ///
  /// Parameter [bucketKeyEnabled] :
  /// Indicates whether the object stored in Amazon S3 uses an S3 bucket key for
  /// server-side encryption with Amazon Web Services KMS (SSE-KMS).
  ///
  /// Parameter [cacheControl] :
  /// Specifies caching behavior along the request/reply chain.
  ///
  /// Parameter [checksumCRC32] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This specifies the
  /// base64-encoded, 32-bit CRC32 checksum of the object returned by the Object
  /// Lambda function. This may not match the checksum for the object stored in
  /// Amazon S3. Amazon S3 will perform validation of the checksum values only
  /// when the original <code>GetObject</code> request required checksum
  /// validation. For more information about checksums, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Only one checksum header can be specified at a time. If you supply
  /// multiple checksum headers, this request will fail.
  /// <p/>
  ///
  /// Parameter [checksumCRC32C] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This specifies the
  /// base64-encoded, 32-bit CRC32C checksum of the object returned by the
  /// Object Lambda function. This may not match the checksum for the object
  /// stored in Amazon S3. Amazon S3 will perform validation of the checksum
  /// values only when the original <code>GetObject</code> request required
  /// checksum validation. For more information about checksums, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Only one checksum header can be specified at a time. If you supply
  /// multiple checksum headers, this request will fail.
  ///
  /// Parameter [checksumSHA1] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This specifies the
  /// base64-encoded, 160-bit SHA-1 digest of the object returned by the Object
  /// Lambda function. This may not match the checksum for the object stored in
  /// Amazon S3. Amazon S3 will perform validation of the checksum values only
  /// when the original <code>GetObject</code> request required checksum
  /// validation. For more information about checksums, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Only one checksum header can be specified at a time. If you supply
  /// multiple checksum headers, this request will fail.
  ///
  /// Parameter [checksumSHA256] :
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This specifies the
  /// base64-encoded, 256-bit SHA-256 digest of the object returned by the
  /// Object Lambda function. This may not match the checksum for the object
  /// stored in Amazon S3. Amazon S3 will perform validation of the checksum
  /// values only when the original <code>GetObject</code> request required
  /// checksum validation. For more information about checksums, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// Only one checksum header can be specified at a time. If you supply
  /// multiple checksum headers, this request will fail.
  ///
  /// Parameter [contentDisposition] :
  /// Specifies presentational information for the object.
  ///
  /// Parameter [contentEncoding] :
  /// Specifies what content encodings have been applied to the object and thus
  /// what decoding mechanisms must be applied to obtain the media-type
  /// referenced by the Content-Type header field.
  ///
  /// Parameter [contentLanguage] :
  /// The language the content is in.
  ///
  /// Parameter [contentLength] :
  /// The size of the content body in bytes.
  ///
  /// Parameter [contentRange] :
  /// The portion of the object returned in the response.
  ///
  /// Parameter [contentType] :
  /// A standard MIME type describing the format of the object data.
  ///
  /// Parameter [deleteMarker] :
  /// Specifies whether an object stored in Amazon S3 is (<code>true</code>) or
  /// is not (<code>false</code>) a delete marker.
  ///
  /// Parameter [eTag] :
  /// An opaque identifier assigned by a web server to a specific version of a
  /// resource found at a URL.
  ///
  /// Parameter [errorCode] :
  /// A string that uniquely identifies an error condition. Returned in the
  /// &lt;Code&gt; tag of the error XML response for a corresponding
  /// <code>GetObject</code> call. Cannot be used with a successful
  /// <code>StatusCode</code> header or when the transformed object is provided
  /// in the body. All error codes from S3 are sentence-cased. The regular
  /// expression (regex) value is <code>"^[A-Z][a-zA-Z]+$"</code>.
  ///
  /// Parameter [errorMessage] :
  /// Contains a generic description of the error condition. Returned in the
  /// &lt;Message&gt; tag of the error XML response for a corresponding
  /// <code>GetObject</code> call. Cannot be used with a successful
  /// <code>StatusCode</code> header or when the transformed object is provided
  /// in body.
  ///
  /// Parameter [expiration] :
  /// If the object expiration is configured (see PUT Bucket lifecycle), the
  /// response includes this header. It includes the <code>expiry-date</code>
  /// and <code>rule-id</code> key-value pairs that provide the object
  /// expiration information. The value of the <code>rule-id</code> is
  /// URL-encoded.
  ///
  /// Parameter [expires] :
  /// The date and time at which the object is no longer cacheable.
  ///
  /// Parameter [lastModified] :
  /// The date and time that the object was last modified.
  ///
  /// Parameter [metadata] :
  /// A map of metadata to store with the object in S3.
  ///
  /// Parameter [missingMeta] :
  /// Set to the number of metadata entries not returned in
  /// <code>x-amz-meta</code> headers. This can happen if you create metadata
  /// using an API like SOAP that supports more flexible metadata than the REST
  /// API. For example, using SOAP, you can create metadata whose values are not
  /// legal HTTP headers.
  ///
  /// Parameter [objectLockLegalHoldStatus] :
  /// Indicates whether an object stored in Amazon S3 has an active legal hold.
  ///
  /// Parameter [objectLockMode] :
  /// Indicates whether an object stored in Amazon S3 has Object Lock enabled.
  /// For more information about S3 Object Lock, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock.html">Object
  /// Lock</a>.
  ///
  /// Parameter [objectLockRetainUntilDate] :
  /// The date and time when Object Lock is configured to expire.
  ///
  /// Parameter [partsCount] :
  /// The count of parts this object has.
  ///
  /// Parameter [replicationStatus] :
  /// Indicates if request involves bucket that is either a source or
  /// destination in a Replication rule. For more information about S3
  /// Replication, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication.html">Replication</a>.
  ///
  /// Parameter [restore] :
  /// Provides information about object restoration operation and expiration
  /// time of the restored object copy.
  ///
  /// Parameter [sSECustomerAlgorithm] :
  /// Encryption algorithm used if server-side encryption with a
  /// customer-provided encryption key was specified for object stored in Amazon
  /// S3.
  ///
  /// Parameter [sSECustomerKeyMD5] :
  /// 128-bit MD5 digest of customer-provided encryption key used in Amazon S3
  /// to encrypt data stored in S3. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using server-side encryption with customer-provided encryption keys
  /// (SSE-C)</a>.
  ///
  /// Parameter [sSEKMSKeyId] :
  /// If present, specifies the ID (Key ID, Key ARN, or Key Alias) of the Amazon
  /// Web Services Key Management Service (Amazon Web Services KMS) symmetric
  /// encryption customer managed key that was used for stored in Amazon S3
  /// object.
  ///
  /// Parameter [serverSideEncryption] :
  /// The server-side encryption algorithm used when storing requested object in
  /// Amazon S3 (for example, AES256, <code>aws:kms</code>).
  ///
  /// Parameter [statusCode] :
  /// The integer status code for an HTTP response of a corresponding
  /// <code>GetObject</code> request. The following is a list of status codes.
  ///
  /// <ul>
  /// <li>
  /// <code>200 - OK</code>
  /// </li>
  /// <li>
  /// <code>206 - Partial Content</code>
  /// </li>
  /// <li>
  /// <code>304 - Not Modified</code>
  /// </li>
  /// <li>
  /// <code>400 - Bad Request</code>
  /// </li>
  /// <li>
  /// <code>401 - Unauthorized</code>
  /// </li>
  /// <li>
  /// <code>403 - Forbidden</code>
  /// </li>
  /// <li>
  /// <code>404 - Not Found</code>
  /// </li>
  /// <li>
  /// <code>405 - Method Not Allowed</code>
  /// </li>
  /// <li>
  /// <code>409 - Conflict</code>
  /// </li>
  /// <li>
  /// <code>411 - Length Required</code>
  /// </li>
  /// <li>
  /// <code>412 - Precondition Failed</code>
  /// </li>
  /// <li>
  /// <code>416 - Range Not Satisfiable</code>
  /// </li>
  /// <li>
  /// <code>500 - Internal Server Error</code>
  /// </li>
  /// <li>
  /// <code>503 - Service Unavailable</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [storageClass] :
  /// Provides storage class information of the object. Amazon S3 returns this
  /// header for all objects except for S3 Standard storage class objects.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
  /// Classes</a>.
  ///
  /// Parameter [tagCount] :
  /// The number of tags, if any, on the object.
  ///
  /// Parameter [versionId] :
  /// An ID used to reference a specific version of the object.
  Future<void> writeGetObjectResponse({
    required String requestRoute,
    required String requestToken,
    String? acceptRanges,
    Uint8List? body,
    bool? bucketKeyEnabled,
    String? cacheControl,
    String? checksumCRC32,
    String? checksumCRC32C,
    String? checksumSHA1,
    String? checksumSHA256,
    String? contentDisposition,
    String? contentEncoding,
    String? contentLanguage,
    int? contentLength,
    String? contentRange,
    String? contentType,
    bool? deleteMarker,
    String? eTag,
    String? errorCode,
    String? errorMessage,
    String? expiration,
    DateTime? expires,
    DateTime? lastModified,
    Map<String, String>? metadata,
    int? missingMeta,
    ObjectLockLegalHoldStatus? objectLockLegalHoldStatus,
    ObjectLockMode? objectLockMode,
    DateTime? objectLockRetainUntilDate,
    int? partsCount,
    ReplicationStatus? replicationStatus,
    RequestCharged? requestCharged,
    String? restore,
    String? sSECustomerAlgorithm,
    String? sSECustomerKeyMD5,
    String? sSEKMSKeyId,
    ServerSideEncryption? serverSideEncryption,
    int? statusCode,
    StorageClass? storageClass,
    int? tagCount,
    String? versionId,
  }) async {
    final headers = <String, String>{
      'x-amz-request-route': requestRoute.toString(),
      'x-amz-request-token': requestToken.toString(),
      if (acceptRanges != null)
        'x-amz-fwd-header-accept-ranges': acceptRanges.toString(),
      if (bucketKeyEnabled != null)
        'x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled':
            bucketKeyEnabled.toString(),
      if (cacheControl != null)
        'x-amz-fwd-header-Cache-Control': cacheControl.toString(),
      if (checksumCRC32 != null)
        'x-amz-fwd-header-x-amz-checksum-crc32': checksumCRC32.toString(),
      if (checksumCRC32C != null)
        'x-amz-fwd-header-x-amz-checksum-crc32c': checksumCRC32C.toString(),
      if (checksumSHA1 != null)
        'x-amz-fwd-header-x-amz-checksum-sha1': checksumSHA1.toString(),
      if (checksumSHA256 != null)
        'x-amz-fwd-header-x-amz-checksum-sha256': checksumSHA256.toString(),
      if (contentDisposition != null)
        'x-amz-fwd-header-Content-Disposition': contentDisposition.toString(),
      if (contentEncoding != null)
        'x-amz-fwd-header-Content-Encoding': contentEncoding.toString(),
      if (contentLanguage != null)
        'x-amz-fwd-header-Content-Language': contentLanguage.toString(),
      if (contentLength != null) 'Content-Length': contentLength.toString(),
      if (contentRange != null)
        'x-amz-fwd-header-Content-Range': contentRange.toString(),
      if (contentType != null)
        'x-amz-fwd-header-Content-Type': contentType.toString(),
      if (deleteMarker != null)
        'x-amz-fwd-header-x-amz-delete-marker': deleteMarker.toString(),
      if (eTag != null) 'x-amz-fwd-header-ETag': eTag.toString(),
      if (errorCode != null) 'x-amz-fwd-error-code': errorCode.toString(),
      if (errorMessage != null)
        'x-amz-fwd-error-message': errorMessage.toString(),
      if (expiration != null)
        'x-amz-fwd-header-x-amz-expiration': expiration.toString(),
      if (expires != null) 'x-amz-fwd-header-Expires': _s.rfc822ToJson(expires),
      if (lastModified != null)
        'x-amz-fwd-header-Last-Modified': _s.rfc822ToJson(lastModified),
      if (metadata != null)
        ...metadata.map((key, value) => MapEntry('x-amz-meta-$key', value)),
      if (missingMeta != null)
        'x-amz-fwd-header-x-amz-missing-meta': missingMeta.toString(),
      if (objectLockLegalHoldStatus != null)
        'x-amz-fwd-header-x-amz-object-lock-legal-hold':
            objectLockLegalHoldStatus.value,
      if (objectLockMode != null)
        'x-amz-fwd-header-x-amz-object-lock-mode': objectLockMode.value,
      if (objectLockRetainUntilDate != null)
        'x-amz-fwd-header-x-amz-object-lock-retain-until-date':
            _s.iso8601ToJson(objectLockRetainUntilDate),
      if (partsCount != null)
        'x-amz-fwd-header-x-amz-mp-parts-count': partsCount.toString(),
      if (replicationStatus != null)
        'x-amz-fwd-header-x-amz-replication-status': replicationStatus.value,
      if (requestCharged != null)
        'x-amz-fwd-header-x-amz-request-charged': requestCharged.value,
      if (restore != null) 'x-amz-fwd-header-x-amz-restore': restore.toString(),
      if (sSECustomerAlgorithm != null)
        'x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm':
            sSECustomerAlgorithm.toString(),
      if (sSECustomerKeyMD5 != null)
        'x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5':
            sSECustomerKeyMD5.toString(),
      if (sSEKMSKeyId != null)
        'x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id':
            sSEKMSKeyId.toString(),
      if (serverSideEncryption != null)
        'x-amz-fwd-header-x-amz-server-side-encryption':
            serverSideEncryption.value,
      if (statusCode != null) 'x-amz-fwd-status': statusCode.toString(),
      if (storageClass != null)
        'x-amz-fwd-header-x-amz-storage-class': storageClass.value,
      if (tagCount != null)
        'x-amz-fwd-header-x-amz-tagging-count': tagCount.toString(),
      if (versionId != null)
        'x-amz-fwd-header-x-amz-version-id': versionId.toString(),
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/WriteGetObjectResponse',
      headers: headers,
      payload: body,
      exceptionFnMap: _exceptionFns,
    );
  }
}

/// Specifies the days since the initiation of an incomplete multipart upload
/// that Amazon S3 will wait before permanently removing all parts of the
/// upload. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
/// Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle
/// Configuration</a> in the <i>Amazon S3 User Guide</i>.
class AbortIncompleteMultipartUpload {
  /// Specifies the number of days after which Amazon S3 aborts an incomplete
  /// multipart upload.
  final int? daysAfterInitiation;

  AbortIncompleteMultipartUpload({
    this.daysAfterInitiation,
  });
  factory AbortIncompleteMultipartUpload.fromXml(_s.XmlElement elem) {
    return AbortIncompleteMultipartUpload(
      daysAfterInitiation: _s.extractXmlIntValue(elem, 'DaysAfterInitiation'),
    );
  }

  Map<String, dynamic> toJson() {
    final daysAfterInitiation = this.daysAfterInitiation;
    return {
      if (daysAfterInitiation != null)
        'DaysAfterInitiation': daysAfterInitiation,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final daysAfterInitiation = this.daysAfterInitiation;
    final $children = <_s.XmlNode>[
      if (daysAfterInitiation != null)
        _s.encodeXmlIntValue('DaysAfterInitiation', daysAfterInitiation),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class AbortMultipartUploadOutput {
  final RequestCharged? requestCharged;

  AbortMultipartUploadOutput({
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    return {};
  }
}

/// Configures the transfer acceleration state for an Amazon S3 bucket. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Amazon
/// S3 Transfer Acceleration</a> in the <i>Amazon S3 User Guide</i>.
class AccelerateConfiguration {
  /// Specifies the transfer acceleration status of the bucket.
  final BucketAccelerateStatus? status;

  AccelerateConfiguration({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final $children = <_s.XmlNode>[
      if (status != null) _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Contains the elements that set the ACL permissions for an object per
/// grantee.
class AccessControlPolicy {
  /// A list of grants.
  final List<Grant>? grants;

  /// Container for the bucket owner's display name and ID.
  final Owner? owner;

  AccessControlPolicy({
    this.grants,
    this.owner,
  });

  Map<String, dynamic> toJson() {
    final grants = this.grants;
    final owner = this.owner;
    return {
      if (grants != null) 'AccessControlList': grants,
      if (owner != null) 'Owner': owner,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final grants = this.grants;
    final owner = this.owner;
    final $children = <_s.XmlNode>[
      if (grants != null)
        _s.XmlElement(_s.XmlName('AccessControlList'), [],
            grants.map((e) => e.toXml('Grant'))),
      if (owner != null) owner.toXml('Owner'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for information about access control for replicas.
class AccessControlTranslation {
  /// Specifies the replica ownership. For default and valid values, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html">PUT
  /// bucket replication</a> in the <i>Amazon S3 API Reference</i>.
  final OwnerOverride owner;

  AccessControlTranslation({
    required this.owner,
  });
  factory AccessControlTranslation.fromXml(_s.XmlElement elem) {
    return AccessControlTranslation(
      owner: _s
          .extractXmlStringValue(elem, 'Owner')!
          .let(OwnerOverride.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final owner = this.owner;
    return {
      'Owner': owner.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final owner = this.owner;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Owner', owner.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A conjunction (logical AND) of predicates, which is used in evaluating a
/// metrics filter. The operator must have at least two predicates in any
/// combination, and an object must match all of the predicates for the filter
/// to apply.
class AnalyticsAndOperator {
  /// The prefix to use when evaluating an AND predicate: The prefix that an
  /// object must have to be included in the metrics results.
  final String? prefix;

  /// The list of tags to use when evaluating an AND predicate.
  final List<Tag>? tags;

  AnalyticsAndOperator({
    this.prefix,
    this.tags,
  });
  factory AnalyticsAndOperator.fromXml(_s.XmlElement elem) {
    return AnalyticsAndOperator(
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tags: elem.findElements('Tag').map(Tag.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final prefix = this.prefix;
    final tags = this.tags;
    return {
      if (prefix != null) 'Prefix': prefix,
      if (tags != null) 'Tag': tags,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final prefix = this.prefix;
    final tags = this.tags;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tags != null) ...tags.map((e) => e.toXml('Tag')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the configuration and any analyses for the analytics filter of an
/// Amazon S3 bucket.
class AnalyticsConfiguration {
  /// The ID that identifies the analytics configuration.
  final String id;

  /// Contains data related to access patterns to be collected and made available
  /// to analyze the tradeoffs between different storage classes.
  final StorageClassAnalysis storageClassAnalysis;

  /// The filter used to describe a set of objects for analyses. A filter must
  /// have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator).
  /// If no filter is provided, all objects will be considered in any analysis.
  final AnalyticsFilter? filter;

  AnalyticsConfiguration({
    required this.id,
    required this.storageClassAnalysis,
    this.filter,
  });
  factory AnalyticsConfiguration.fromXml(_s.XmlElement elem) {
    return AnalyticsConfiguration(
      id: _s.extractXmlStringValue(elem, 'Id')!,
      storageClassAnalysis: StorageClassAnalysis.fromXml(
          _s.extractXmlChild(elem, 'StorageClassAnalysis')!),
      filter: _s.extractXmlChild(elem, 'Filter')?.let(AnalyticsFilter.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final id = this.id;
    final storageClassAnalysis = this.storageClassAnalysis;
    final filter = this.filter;
    return {
      'Id': id,
      'StorageClassAnalysis': storageClassAnalysis,
      if (filter != null) 'Filter': filter,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final id = this.id;
    final storageClassAnalysis = this.storageClassAnalysis;
    final filter = this.filter;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Id', id),
      if (filter != null) filter.toXml('Filter'),
      storageClassAnalysis.toXml('StorageClassAnalysis'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Where to publish the analytics results.
class AnalyticsExportDestination {
  /// A destination signifying output to an S3 bucket.
  final AnalyticsS3BucketDestination s3BucketDestination;

  AnalyticsExportDestination({
    required this.s3BucketDestination,
  });
  factory AnalyticsExportDestination.fromXml(_s.XmlElement elem) {
    return AnalyticsExportDestination(
      s3BucketDestination: AnalyticsS3BucketDestination.fromXml(
          _s.extractXmlChild(elem, 'S3BucketDestination')!),
    );
  }

  Map<String, dynamic> toJson() {
    final s3BucketDestination = this.s3BucketDestination;
    return {
      'S3BucketDestination': s3BucketDestination,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final s3BucketDestination = this.s3BucketDestination;
    final $children = <_s.XmlNode>[
      s3BucketDestination.toXml('S3BucketDestination'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The filter used to describe a set of objects for analyses. A filter must
/// have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator).
/// If no filter is provided, all objects will be considered in any analysis.
class AnalyticsFilter {
  /// A conjunction (logical AND) of predicates, which is used in evaluating an
  /// analytics filter. The operator must have at least two predicates.
  final AnalyticsAndOperator? and;

  /// The prefix to use when evaluating an analytics filter.
  final String? prefix;

  /// The tag to use when evaluating an analytics filter.
  final Tag? tag;

  AnalyticsFilter({
    this.and,
    this.prefix,
    this.tag,
  });
  factory AnalyticsFilter.fromXml(_s.XmlElement elem) {
    return AnalyticsFilter(
      and: _s.extractXmlChild(elem, 'And')?.let(AnalyticsAndOperator.fromXml),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tag: _s.extractXmlChild(elem, 'Tag')?.let(Tag.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    return {
      if (and != null) 'And': and,
      if (prefix != null) 'Prefix': prefix,
      if (tag != null) 'Tag': tag,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tag != null) tag.toXml('Tag'),
      if (and != null) and.toXml('And'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Contains information about where to publish the analytics results.
class AnalyticsS3BucketDestination {
  /// The Amazon Resource Name (ARN) of the bucket to which data is exported.
  final String bucket;

  /// Specifies the file format used when exporting data to Amazon S3.
  final AnalyticsS3ExportFileFormat format;

  /// The account ID that owns the destination S3 bucket. If no account ID is
  /// provided, the owner is not validated before exporting data.
  /// <note>
  /// Although this value is optional, we strongly recommend that you set it to
  /// help prevent problems if the destination bucket ownership changes.
  /// </note>
  final String? bucketAccountId;

  /// The prefix to use when exporting data. The prefix is prepended to all
  /// results.
  final String? prefix;

  AnalyticsS3BucketDestination({
    required this.bucket,
    required this.format,
    this.bucketAccountId,
    this.prefix,
  });
  factory AnalyticsS3BucketDestination.fromXml(_s.XmlElement elem) {
    return AnalyticsS3BucketDestination(
      bucket: _s.extractXmlStringValue(elem, 'Bucket')!,
      format: _s
          .extractXmlStringValue(elem, 'Format')!
          .let(AnalyticsS3ExportFileFormat.fromString),
      bucketAccountId: _s.extractXmlStringValue(elem, 'BucketAccountId'),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
    );
  }

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final format = this.format;
    final bucketAccountId = this.bucketAccountId;
    final prefix = this.prefix;
    return {
      'Bucket': bucket,
      'Format': format.value,
      if (bucketAccountId != null) 'BucketAccountId': bucketAccountId,
      if (prefix != null) 'Prefix': prefix,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final bucket = this.bucket;
    final format = this.format;
    final bucketAccountId = this.bucketAccountId;
    final prefix = this.prefix;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Format', format.value),
      if (bucketAccountId != null)
        _s.encodeXmlStringValue('BucketAccountId', bucketAccountId),
      _s.encodeXmlStringValue('Bucket', bucket),
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum AnalyticsS3ExportFileFormat {
  csv('CSV'),
  ;

  final String value;

  const AnalyticsS3ExportFileFormat(this.value);

  static AnalyticsS3ExportFileFormat fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AnalyticsS3ExportFileFormat'));
}

enum ArchiveStatus {
  archiveAccess('ARCHIVE_ACCESS'),
  deepArchiveAccess('DEEP_ARCHIVE_ACCESS'),
  ;

  final String value;

  const ArchiveStatus(this.value);

  static ArchiveStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ArchiveStatus'));
}

/// In terms of implementation, a Bucket is a resource.
class Bucket {
  /// Date the bucket was created. This date can change when making changes to
  /// your bucket, such as editing its bucket policy.
  final DateTime? creationDate;

  /// The name of the bucket.
  final String? name;

  Bucket({
    this.creationDate,
    this.name,
  });
  factory Bucket.fromXml(_s.XmlElement elem) {
    return Bucket(
      creationDate: _s.extractXmlDateTimeValue(elem, 'CreationDate'),
      name: _s.extractXmlStringValue(elem, 'Name'),
    );
  }

  Map<String, dynamic> toJson() {
    final creationDate = this.creationDate;
    final name = this.name;
    return {
      if (creationDate != null) 'CreationDate': iso8601ToJson(creationDate),
      if (name != null) 'Name': name,
    };
  }
}

enum BucketAccelerateStatus {
  enabled('Enabled'),
  suspended('Suspended'),
  ;

  final String value;

  const BucketAccelerateStatus(this.value);

  static BucketAccelerateStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum BucketAccelerateStatus'));
}

enum BucketCannedACL {
  private('private'),
  publicRead('public-read'),
  publicReadWrite('public-read-write'),
  authenticatedRead('authenticated-read'),
  ;

  final String value;

  const BucketCannedACL(this.value);

  static BucketCannedACL fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum BucketCannedACL'));
}

/// Specifies the information about the bucket that will be created. For more
/// information about directory buckets, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html">Directory
/// buckets</a> in the <i>Amazon S3 User Guide</i>.
/// <note>
/// This functionality is only supported by directory buckets.
/// </note>
class BucketInfo {
  /// The number of Availability Zone that's used for redundancy for the bucket.
  final DataRedundancy? dataRedundancy;

  /// The type of bucket.
  final BucketType? type;

  BucketInfo({
    this.dataRedundancy,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final dataRedundancy = this.dataRedundancy;
    final type = this.type;
    return {
      if (dataRedundancy != null) 'DataRedundancy': dataRedundancy.value,
      if (type != null) 'Type': type.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final dataRedundancy = this.dataRedundancy;
    final type = this.type;
    final $children = <_s.XmlNode>[
      if (dataRedundancy != null)
        _s.encodeXmlStringValue('DataRedundancy', dataRedundancy.value),
      if (type != null) _s.encodeXmlStringValue('Type', type.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the lifecycle configuration for objects in an Amazon S3 bucket.
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object
/// Lifecycle Management</a> in the <i>Amazon S3 User Guide</i>.
class BucketLifecycleConfiguration {
  /// A lifecycle rule for individual objects in an Amazon S3 bucket.
  final List<LifecycleRule> rules;

  BucketLifecycleConfiguration({
    required this.rules,
  });

  Map<String, dynamic> toJson() {
    final rules = this.rules;
    return {
      'Rule': rules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final rules = this.rules;
    final $children = <_s.XmlNode>[
      ...rules.map((e) => e.toXml('Rule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum BucketLocationConstraint {
  afSouth_1('af-south-1'),
  apEast_1('ap-east-1'),
  apNortheast_1('ap-northeast-1'),
  apNortheast_2('ap-northeast-2'),
  apNortheast_3('ap-northeast-3'),
  apSouth_1('ap-south-1'),
  apSouth_2('ap-south-2'),
  apSoutheast_1('ap-southeast-1'),
  apSoutheast_2('ap-southeast-2'),
  apSoutheast_3('ap-southeast-3'),
  caCentral_1('ca-central-1'),
  cnNorth_1('cn-north-1'),
  cnNorthwest_1('cn-northwest-1'),
  eu('EU'),
  euCentral_1('eu-central-1'),
  euNorth_1('eu-north-1'),
  euSouth_1('eu-south-1'),
  euSouth_2('eu-south-2'),
  euWest_1('eu-west-1'),
  euWest_2('eu-west-2'),
  euWest_3('eu-west-3'),
  meSouth_1('me-south-1'),
  saEast_1('sa-east-1'),
  usEast_2('us-east-2'),
  usGovEast_1('us-gov-east-1'),
  usGovWest_1('us-gov-west-1'),
  usWest_1('us-west-1'),
  usWest_2('us-west-2'),
  ;

  final String value;

  const BucketLocationConstraint(this.value);

  static BucketLocationConstraint fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum BucketLocationConstraint'));
}

/// Container for logging status information.
class BucketLoggingStatus {
  final LoggingEnabled? loggingEnabled;

  BucketLoggingStatus({
    this.loggingEnabled,
  });

  Map<String, dynamic> toJson() {
    final loggingEnabled = this.loggingEnabled;
    return {
      if (loggingEnabled != null) 'LoggingEnabled': loggingEnabled,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final loggingEnabled = this.loggingEnabled;
    final $children = <_s.XmlNode>[
      if (loggingEnabled != null) loggingEnabled.toXml('LoggingEnabled'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum BucketLogsPermission {
  fullControl('FULL_CONTROL'),
  read('READ'),
  write('WRITE'),
  ;

  final String value;

  const BucketLogsPermission(this.value);

  static BucketLogsPermission fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum BucketLogsPermission'));
}

enum BucketType {
  directory('Directory'),
  ;

  final String value;

  const BucketType(this.value);

  static BucketType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum BucketType'));
}

enum BucketVersioningStatus {
  enabled('Enabled'),
  suspended('Suspended'),
  ;

  final String value;

  const BucketVersioningStatus(this.value);

  static BucketVersioningStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum BucketVersioningStatus'));
}

/// Describes the cross-origin access configuration for objects in an Amazon S3
/// bucket. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling
/// Cross-Origin Resource Sharing</a> in the <i>Amazon S3 User Guide</i>.
class CORSConfiguration {
  /// A set of origins and methods (cross-origin access that you want to allow).
  /// You can add up to 100 rules to the configuration.
  final List<CORSRule> cORSRules;

  CORSConfiguration({
    required this.cORSRules,
  });

  Map<String, dynamic> toJson() {
    final cORSRules = this.cORSRules;
    return {
      'CORSRule': cORSRules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final cORSRules = this.cORSRules;
    final $children = <_s.XmlNode>[
      ...cORSRules.map((e) => e.toXml('CORSRule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies a cross-origin access rule for an Amazon S3 bucket.
class CORSRule {
  /// An HTTP method that you allow the origin to execute. Valid values are
  /// <code>GET</code>, <code>PUT</code>, <code>HEAD</code>, <code>POST</code>,
  /// and <code>DELETE</code>.
  final List<String> allowedMethods;

  /// One or more origins you want customers to be able to access the bucket from.
  final List<String> allowedOrigins;

  /// Headers that are specified in the
  /// <code>Access-Control-Request-Headers</code> header. These headers are
  /// allowed in a preflight OPTIONS request. In response to any preflight OPTIONS
  /// request, Amazon S3 returns any requested headers that are allowed.
  final List<String>? allowedHeaders;

  /// One or more headers in the response that you want customers to be able to
  /// access from their applications (for example, from a JavaScript
  /// <code>XMLHttpRequest</code> object).
  final List<String>? exposeHeaders;

  /// Unique identifier for the rule. The value cannot be longer than 255
  /// characters.
  final String? id;

  /// The time in seconds that your browser is to cache the preflight response for
  /// the specified resource.
  final int? maxAgeSeconds;

  CORSRule({
    required this.allowedMethods,
    required this.allowedOrigins,
    this.allowedHeaders,
    this.exposeHeaders,
    this.id,
    this.maxAgeSeconds,
  });
  factory CORSRule.fromXml(_s.XmlElement elem) {
    return CORSRule(
      allowedMethods: _s.extractXmlStringListValues(elem, 'AllowedMethod'),
      allowedOrigins: _s.extractXmlStringListValues(elem, 'AllowedOrigin'),
      allowedHeaders: _s.extractXmlStringListValues(elem, 'AllowedHeader'),
      exposeHeaders: _s.extractXmlStringListValues(elem, 'ExposeHeader'),
      id: _s.extractXmlStringValue(elem, 'ID'),
      maxAgeSeconds: _s.extractXmlIntValue(elem, 'MaxAgeSeconds'),
    );
  }

  Map<String, dynamic> toJson() {
    final allowedMethods = this.allowedMethods;
    final allowedOrigins = this.allowedOrigins;
    final allowedHeaders = this.allowedHeaders;
    final exposeHeaders = this.exposeHeaders;
    final id = this.id;
    final maxAgeSeconds = this.maxAgeSeconds;
    return {
      'AllowedMethod': allowedMethods,
      'AllowedOrigin': allowedOrigins,
      if (allowedHeaders != null) 'AllowedHeader': allowedHeaders,
      if (exposeHeaders != null) 'ExposeHeader': exposeHeaders,
      if (id != null) 'ID': id,
      if (maxAgeSeconds != null) 'MaxAgeSeconds': maxAgeSeconds,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final allowedMethods = this.allowedMethods;
    final allowedOrigins = this.allowedOrigins;
    final allowedHeaders = this.allowedHeaders;
    final exposeHeaders = this.exposeHeaders;
    final id = this.id;
    final maxAgeSeconds = this.maxAgeSeconds;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('ID', id),
      if (allowedHeaders != null)
        ...allowedHeaders
            .map((e) => _s.encodeXmlStringValue('AllowedHeader', e)),
      ...allowedMethods.map((e) => _s.encodeXmlStringValue('AllowedMethod', e)),
      ...allowedOrigins.map((e) => _s.encodeXmlStringValue('AllowedOrigin', e)),
      if (exposeHeaders != null)
        ...exposeHeaders.map((e) => _s.encodeXmlStringValue('ExposeHeader', e)),
      if (maxAgeSeconds != null)
        _s.encodeXmlIntValue('MaxAgeSeconds', maxAgeSeconds),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Describes how an uncompressed comma-separated values (CSV)-formatted input
/// object is formatted.
class CSVInput {
  /// Specifies that CSV field values may contain quoted record delimiters and
  /// such records should be allowed. Default value is FALSE. Setting this value
  /// to TRUE may lower performance.
  final bool? allowQuotedRecordDelimiter;

  /// A single character used to indicate that a row should be ignored when the
  /// character is present at the start of that row. You can specify any character
  /// to indicate a comment line. The default character is <code>#</code>.
  ///
  /// Default: <code>#</code>
  final String? comments;

  /// A single character used to separate individual fields in a record. You can
  /// specify an arbitrary delimiter.
  final String? fieldDelimiter;

  /// Describes the first line of input. Valid values are:
  ///
  /// <ul>
  /// <li>
  /// <code>NONE</code>: First line is not a header.
  /// </li>
  /// <li>
  /// <code>IGNORE</code>: First line is a header, but you can't use the header
  /// values to indicate the column in an expression. You can use column position
  /// (such as _1, _2, …) to indicate the column (<code>SELECT s._1 FROM OBJECT
  /// s</code>).
  /// </li>
  /// <li>
  /// <code>Use</code>: First line is a header, and you can use the header value
  /// to identify a column in an expression (<code>SELECT "name" FROM
  /// OBJECT</code>).
  /// </li>
  /// </ul>
  final FileHeaderInfo? fileHeaderInfo;

  /// A single character used for escaping when the field delimiter is part of the
  /// value. For example, if the value is <code>a, b</code>, Amazon S3 wraps this
  /// field value in quotation marks, as follows: <code>" a , b "</code>.
  ///
  /// Type: String
  ///
  /// Default: <code>"</code>
  ///
  /// Ancestors: <code>CSV</code>
  final String? quoteCharacter;

  /// A single character used for escaping the quotation mark character inside an
  /// already escaped value. For example, the value <code>""" a , b """</code> is
  /// parsed as <code>" a , b "</code>.
  final String? quoteEscapeCharacter;

  /// A single character used to separate individual records in the input. Instead
  /// of the default value, you can specify an arbitrary delimiter.
  final String? recordDelimiter;

  CSVInput({
    this.allowQuotedRecordDelimiter,
    this.comments,
    this.fieldDelimiter,
    this.fileHeaderInfo,
    this.quoteCharacter,
    this.quoteEscapeCharacter,
    this.recordDelimiter,
  });

  Map<String, dynamic> toJson() {
    final allowQuotedRecordDelimiter = this.allowQuotedRecordDelimiter;
    final comments = this.comments;
    final fieldDelimiter = this.fieldDelimiter;
    final fileHeaderInfo = this.fileHeaderInfo;
    final quoteCharacter = this.quoteCharacter;
    final quoteEscapeCharacter = this.quoteEscapeCharacter;
    final recordDelimiter = this.recordDelimiter;
    return {
      if (allowQuotedRecordDelimiter != null)
        'AllowQuotedRecordDelimiter': allowQuotedRecordDelimiter,
      if (comments != null) 'Comments': comments,
      if (fieldDelimiter != null) 'FieldDelimiter': fieldDelimiter,
      if (fileHeaderInfo != null) 'FileHeaderInfo': fileHeaderInfo.value,
      if (quoteCharacter != null) 'QuoteCharacter': quoteCharacter,
      if (quoteEscapeCharacter != null)
        'QuoteEscapeCharacter': quoteEscapeCharacter,
      if (recordDelimiter != null) 'RecordDelimiter': recordDelimiter,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final allowQuotedRecordDelimiter = this.allowQuotedRecordDelimiter;
    final comments = this.comments;
    final fieldDelimiter = this.fieldDelimiter;
    final fileHeaderInfo = this.fileHeaderInfo;
    final quoteCharacter = this.quoteCharacter;
    final quoteEscapeCharacter = this.quoteEscapeCharacter;
    final recordDelimiter = this.recordDelimiter;
    final $children = <_s.XmlNode>[
      if (fileHeaderInfo != null)
        _s.encodeXmlStringValue('FileHeaderInfo', fileHeaderInfo.value),
      if (comments != null) _s.encodeXmlStringValue('Comments', comments),
      if (quoteEscapeCharacter != null)
        _s.encodeXmlStringValue('QuoteEscapeCharacter', quoteEscapeCharacter),
      if (recordDelimiter != null)
        _s.encodeXmlStringValue('RecordDelimiter', recordDelimiter),
      if (fieldDelimiter != null)
        _s.encodeXmlStringValue('FieldDelimiter', fieldDelimiter),
      if (quoteCharacter != null)
        _s.encodeXmlStringValue('QuoteCharacter', quoteCharacter),
      if (allowQuotedRecordDelimiter != null)
        _s.encodeXmlBoolValue(
            'AllowQuotedRecordDelimiter', allowQuotedRecordDelimiter),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Describes how uncompressed comma-separated values (CSV)-formatted results
/// are formatted.
class CSVOutput {
  /// The value used to separate individual fields in a record. You can specify an
  /// arbitrary delimiter.
  final String? fieldDelimiter;

  /// A single character used for escaping when the field delimiter is part of the
  /// value. For example, if the value is <code>a, b</code>, Amazon S3 wraps this
  /// field value in quotation marks, as follows: <code>" a , b "</code>.
  final String? quoteCharacter;

  /// The single character used for escaping the quote character inside an already
  /// escaped value.
  final String? quoteEscapeCharacter;

  /// Indicates whether to use quotation marks around output fields.
  ///
  /// <ul>
  /// <li>
  /// <code>ALWAYS</code>: Always use quotation marks for output fields.
  /// </li>
  /// <li>
  /// <code>ASNEEDED</code>: Use quotation marks for output fields when needed.
  /// </li>
  /// </ul>
  final QuoteFields? quoteFields;

  /// A single character used to separate individual records in the output.
  /// Instead of the default value, you can specify an arbitrary delimiter.
  final String? recordDelimiter;

  CSVOutput({
    this.fieldDelimiter,
    this.quoteCharacter,
    this.quoteEscapeCharacter,
    this.quoteFields,
    this.recordDelimiter,
  });

  Map<String, dynamic> toJson() {
    final fieldDelimiter = this.fieldDelimiter;
    final quoteCharacter = this.quoteCharacter;
    final quoteEscapeCharacter = this.quoteEscapeCharacter;
    final quoteFields = this.quoteFields;
    final recordDelimiter = this.recordDelimiter;
    return {
      if (fieldDelimiter != null) 'FieldDelimiter': fieldDelimiter,
      if (quoteCharacter != null) 'QuoteCharacter': quoteCharacter,
      if (quoteEscapeCharacter != null)
        'QuoteEscapeCharacter': quoteEscapeCharacter,
      if (quoteFields != null) 'QuoteFields': quoteFields.value,
      if (recordDelimiter != null) 'RecordDelimiter': recordDelimiter,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final fieldDelimiter = this.fieldDelimiter;
    final quoteCharacter = this.quoteCharacter;
    final quoteEscapeCharacter = this.quoteEscapeCharacter;
    final quoteFields = this.quoteFields;
    final recordDelimiter = this.recordDelimiter;
    final $children = <_s.XmlNode>[
      if (quoteFields != null)
        _s.encodeXmlStringValue('QuoteFields', quoteFields.value),
      if (quoteEscapeCharacter != null)
        _s.encodeXmlStringValue('QuoteEscapeCharacter', quoteEscapeCharacter),
      if (recordDelimiter != null)
        _s.encodeXmlStringValue('RecordDelimiter', recordDelimiter),
      if (fieldDelimiter != null)
        _s.encodeXmlStringValue('FieldDelimiter', fieldDelimiter),
      if (quoteCharacter != null)
        _s.encodeXmlStringValue('QuoteCharacter', quoteCharacter),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Contains all the possible checksum or digest values for an object.
class Checksum {
  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  Checksum({
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
  });
  factory Checksum.fromXml(_s.XmlElement elem) {
    return Checksum(
      checksumCRC32: _s.extractXmlStringValue(elem, 'ChecksumCRC32'),
      checksumCRC32C: _s.extractXmlStringValue(elem, 'ChecksumCRC32C'),
      checksumSHA1: _s.extractXmlStringValue(elem, 'ChecksumSHA1'),
      checksumSHA256: _s.extractXmlStringValue(elem, 'ChecksumSHA256'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    return {
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
    };
  }
}

enum ChecksumAlgorithm {
  crc32('CRC32'),
  crc32c('CRC32C'),
  sha1('SHA1'),
  sha256('SHA256'),
  ;

  final String value;

  const ChecksumAlgorithm(this.value);

  static ChecksumAlgorithm fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ChecksumAlgorithm'));
}

enum ChecksumMode {
  enabled('ENABLED'),
  ;

  final String value;

  const ChecksumMode(this.value);

  static ChecksumMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ChecksumMode'));
}

/// Container for specifying the Lambda notification configuration.
class CloudFunctionConfiguration {
  /// Lambda cloud function ARN that Amazon S3 can invoke when it detects events
  /// of the specified type.
  final String? cloudFunction;
  final Event? event;

  /// Bucket events for which to send notifications.
  final List<Event>? events;
  final String? id;

  /// The role supporting the invocation of the Lambda function
  final String? invocationRole;

  CloudFunctionConfiguration({
    this.cloudFunction,
    this.event,
    this.events,
    this.id,
    this.invocationRole,
  });
  factory CloudFunctionConfiguration.fromXml(_s.XmlElement elem) {
    return CloudFunctionConfiguration(
      cloudFunction: _s.extractXmlStringValue(elem, 'CloudFunction'),
      event: _s.extractXmlStringValue(elem, 'Event')?.let(Event.fromString),
      events: _s
          .extractXmlStringListValues(elem, 'Event')
          .map(Event.fromString)
          .toList(),
      id: _s.extractXmlStringValue(elem, 'Id'),
      invocationRole: _s.extractXmlStringValue(elem, 'InvocationRole'),
    );
  }

  Map<String, dynamic> toJson() {
    final cloudFunction = this.cloudFunction;
    final event = this.event;
    final events = this.events;
    final id = this.id;
    final invocationRole = this.invocationRole;
    return {
      if (cloudFunction != null) 'CloudFunction': cloudFunction,
      if (event != null) 'Event': event.value,
      if (events != null) 'Event': events.map((e) => e.value).toList(),
      if (id != null) 'Id': id,
      if (invocationRole != null) 'InvocationRole': invocationRole,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final cloudFunction = this.cloudFunction;
    final event = this.event;
    final events = this.events;
    final id = this.id;
    final invocationRole = this.invocationRole;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('Id', id),
      if (event != null) _s.encodeXmlStringValue('Event', event.value),
      if (events != null)
        ...events.map((e) => _s.encodeXmlStringValue('Event', e.value)),
      if (cloudFunction != null)
        _s.encodeXmlStringValue('CloudFunction', cloudFunction),
      if (invocationRole != null)
        _s.encodeXmlStringValue('InvocationRole', invocationRole),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for all (if there are any) keys between Prefix and the next
/// occurrence of the string specified by a delimiter. CommonPrefixes lists keys
/// that act like subdirectories in the directory specified by Prefix. For
/// example, if the prefix is notes/ and the delimiter is a slash (/) as in
/// notes/summer/july, the common prefix is notes/summer/.
class CommonPrefix {
  /// Container for the specified common prefix.
  final String? prefix;

  CommonPrefix({
    this.prefix,
  });
  factory CommonPrefix.fromXml(_s.XmlElement elem) {
    return CommonPrefix(
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
    );
  }

  Map<String, dynamic> toJson() {
    final prefix = this.prefix;
    return {
      if (prefix != null) 'Prefix': prefix,
    };
  }
}

class CompleteMultipartUploadOutput {
  /// The name of the bucket that contains the newly created object. Does not
  /// return the access point ARN or access point alias if used.
  /// <note>
  /// Access points are not supported by directory buckets.
  /// </note>
  final String? bucket;

  /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Entity tag that identifies the newly created object's data. Objects with
  /// different object data will have different entity tags. The entity tag is an
  /// opaque string. The entity tag may or may not be an MD5 digest of the object
  /// data. If the entity tag is not an MD5 digest of the object data, it will
  /// contain one or more nonhexadecimal characters and/or will consist of less
  /// than 32 or more than 32 hexadecimal digits. For more information about how
  /// the entity tag is calculated, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? eTag;

  /// If the object expiration is configured, this will contain the expiration
  /// date (<code>expiry-date</code>) and rule ID (<code>rule-id</code>). The
  /// value of <code>rule-id</code> is URL-encoded.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? expiration;

  /// The object key of the newly created object.
  final String? key;

  /// The URI that identifies the newly created object.
  final String? location;
  final RequestCharged? requestCharged;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when storing this object in Amazon
  /// S3 (for example, <code>AES256</code>, <code>aws:kms</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  /// Version ID of the newly created object, in case the bucket has versioning
  /// turned on.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  CompleteMultipartUploadOutput({
    this.bucket,
    this.bucketKeyEnabled,
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.expiration,
    this.key,
    this.location,
    this.requestCharged,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final expiration = this.expiration;
    final key = this.key;
    final location = this.location;
    final requestCharged = this.requestCharged;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    final versionId = this.versionId;
    return {
      if (bucket != null) 'Bucket': bucket,
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
      if (eTag != null) 'ETag': eTag,
      if (key != null) 'Key': key,
      if (location != null) 'Location': location,
    };
  }
}

/// The container for the completed multipart upload details.
class CompletedMultipartUpload {
  /// Array of CompletedPart data types.
  ///
  /// If you do not supply a valid <code>Part</code> with your request, the
  /// service sends back an HTTP 400 response.
  final List<CompletedPart>? parts;

  CompletedMultipartUpload({
    this.parts,
  });

  Map<String, dynamic> toJson() {
    final parts = this.parts;
    return {
      if (parts != null) 'Part': parts,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final parts = this.parts;
    final $children = <_s.XmlNode>[
      if (parts != null) ...parts.map((e) => e.toXml('Part')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Details of the parts that were uploaded.
class CompletedPart {
  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Entity tag returned when the part was uploaded.
  final String? eTag;

  /// Part number that identifies the part. This is a positive integer between 1
  /// and 10,000.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>General purpose buckets</b> - In <code>CompleteMultipartUpload</code>,
  /// when a additional checksum (including <code>x-amz-checksum-crc32</code>,
  /// <code>x-amz-checksum-crc32c</code>, <code>x-amz-checksum-sha1</code>, or
  /// <code>x-amz-checksum-sha256</code>) is applied to each part, the
  /// <code>PartNumber</code> must start at 1 and the part numbers must be
  /// consecutive. Otherwise, Amazon S3 generates an HTTP <code>400 Bad
  /// Request</code> status code and an <code>InvalidPartOrder</code> error code.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - In <code>CompleteMultipartUpload</code>, the
  /// <code>PartNumber</code> must start at 1 and the part numbers must be
  /// consecutive.
  /// </li>
  /// </ul> </note>
  final int? partNumber;

  CompletedPart({
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.partNumber,
  });

  Map<String, dynamic> toJson() {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final partNumber = this.partNumber;
    return {
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
      if (eTag != null) 'ETag': eTag,
      if (partNumber != null) 'PartNumber': partNumber,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final partNumber = this.partNumber;
    final $children = <_s.XmlNode>[
      if (eTag != null) _s.encodeXmlStringValue('ETag', eTag),
      if (checksumCRC32 != null)
        _s.encodeXmlStringValue('ChecksumCRC32', checksumCRC32),
      if (checksumCRC32C != null)
        _s.encodeXmlStringValue('ChecksumCRC32C', checksumCRC32C),
      if (checksumSHA1 != null)
        _s.encodeXmlStringValue('ChecksumSHA1', checksumSHA1),
      if (checksumSHA256 != null)
        _s.encodeXmlStringValue('ChecksumSHA256', checksumSHA256),
      if (partNumber != null) _s.encodeXmlIntValue('PartNumber', partNumber),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum CompressionType {
  none('NONE'),
  gzip('GZIP'),
  bzip2('BZIP2'),
  ;

  final String value;

  const CompressionType(this.value);

  static CompressionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CompressionType'));
}

/// A container for describing a condition that must be met for the specified
/// redirect to apply. For example, 1. If request is for pages in the
/// <code>/docs</code> folder, redirect to the <code>/documents</code> folder.
/// 2. If request results in HTTP error 4xx, redirect request to another host
/// where you might process the error.
class Condition {
  /// The HTTP error code when the redirect is applied. In the event of an error,
  /// if the error code equals this value, then the specified redirect is applied.
  /// Required when parent element <code>Condition</code> is specified and sibling
  /// <code>KeyPrefixEquals</code> is not specified. If both are specified, then
  /// both must be true for the redirect to be applied.
  final String? httpErrorCodeReturnedEquals;

  /// The object key name prefix when the redirect is applied. For example, to
  /// redirect requests for <code>ExamplePage.html</code>, the key prefix will be
  /// <code>ExamplePage.html</code>. To redirect request for all pages with the
  /// prefix <code>docs/</code>, the key prefix will be <code>/docs</code>, which
  /// identifies all objects in the <code>docs/</code> folder. Required when the
  /// parent element <code>Condition</code> is specified and sibling
  /// <code>HttpErrorCodeReturnedEquals</code> is not specified. If both
  /// conditions are specified, both must be true for the redirect to be applied.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? keyPrefixEquals;

  Condition({
    this.httpErrorCodeReturnedEquals,
    this.keyPrefixEquals,
  });
  factory Condition.fromXml(_s.XmlElement elem) {
    return Condition(
      httpErrorCodeReturnedEquals:
          _s.extractXmlStringValue(elem, 'HttpErrorCodeReturnedEquals'),
      keyPrefixEquals: _s.extractXmlStringValue(elem, 'KeyPrefixEquals'),
    );
  }

  Map<String, dynamic> toJson() {
    final httpErrorCodeReturnedEquals = this.httpErrorCodeReturnedEquals;
    final keyPrefixEquals = this.keyPrefixEquals;
    return {
      if (httpErrorCodeReturnedEquals != null)
        'HttpErrorCodeReturnedEquals': httpErrorCodeReturnedEquals,
      if (keyPrefixEquals != null) 'KeyPrefixEquals': keyPrefixEquals,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final httpErrorCodeReturnedEquals = this.httpErrorCodeReturnedEquals;
    final keyPrefixEquals = this.keyPrefixEquals;
    final $children = <_s.XmlNode>[
      if (httpErrorCodeReturnedEquals != null)
        _s.encodeXmlStringValue(
            'HttpErrorCodeReturnedEquals', httpErrorCodeReturnedEquals),
      if (keyPrefixEquals != null)
        _s.encodeXmlStringValue('KeyPrefixEquals', keyPrefixEquals),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// <p/>
class ContinuationEvent {
  ContinuationEvent();
  factory ContinuationEvent.fromXml(
      // ignore: avoid_unused_constructor_parameters
      _s.XmlElement elem) {
    return ContinuationEvent();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class CopyObjectOutput {
  /// Indicates whether the copied object uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// Container for all response elements.
  final CopyObjectResult? copyObjectResult;

  /// Version ID of the source object that was copied.
  /// <note>
  /// This functionality is not supported when the source object is in a directory
  /// bucket.
  /// </note>
  final String? copySourceVersionId;

  /// If the object expiration is configured, the response includes this header.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? expiration;
  final RequestCharged? requestCharged;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the Amazon Web Services KMS Encryption Context to use
  /// for object encryption. The value of this header is a base64-encoded UTF-8
  /// string holding JSON with the encryption context key-value pairs.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSEncryptionContext;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>,
  /// <code>aws:kms:dsse</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  /// Version ID of the newly created copy.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  CopyObjectOutput({
    this.bucketKeyEnabled,
    this.copyObjectResult,
    this.copySourceVersionId,
    this.expiration,
    this.requestCharged,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSEncryptionContext,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final copyObjectResult = this.copyObjectResult;
    final copySourceVersionId = this.copySourceVersionId;
    final expiration = this.expiration;
    final requestCharged = this.requestCharged;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSEncryptionContext = this.sSEKMSEncryptionContext;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    final versionId = this.versionId;
    return {
      if (copyObjectResult != null) 'CopyObjectResult': copyObjectResult,
    };
  }
}

/// Container for all response elements.
class CopyObjectResult {
  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Returns the ETag of the new object. The ETag reflects only changes to the
  /// contents of an object, not its metadata.
  final String? eTag;

  /// Creation date of the object.
  final DateTime? lastModified;

  CopyObjectResult({
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.lastModified,
  });
  factory CopyObjectResult.fromXml(_s.XmlElement elem) {
    return CopyObjectResult(
      checksumCRC32: _s.extractXmlStringValue(elem, 'ChecksumCRC32'),
      checksumCRC32C: _s.extractXmlStringValue(elem, 'ChecksumCRC32C'),
      checksumSHA1: _s.extractXmlStringValue(elem, 'ChecksumSHA1'),
      checksumSHA256: _s.extractXmlStringValue(elem, 'ChecksumSHA256'),
      eTag: _s.extractXmlStringValue(elem, 'ETag'),
      lastModified: _s.extractXmlDateTimeValue(elem, 'LastModified'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final lastModified = this.lastModified;
    return {
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
      if (eTag != null) 'ETag': eTag,
      if (lastModified != null) 'LastModified': iso8601ToJson(lastModified),
    };
  }
}

/// Container for all response elements.
class CopyPartResult {
  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Entity tag of the object.
  final String? eTag;

  /// Date and time at which the object was uploaded.
  final DateTime? lastModified;

  CopyPartResult({
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.lastModified,
  });
  factory CopyPartResult.fromXml(_s.XmlElement elem) {
    return CopyPartResult(
      checksumCRC32: _s.extractXmlStringValue(elem, 'ChecksumCRC32'),
      checksumCRC32C: _s.extractXmlStringValue(elem, 'ChecksumCRC32C'),
      checksumSHA1: _s.extractXmlStringValue(elem, 'ChecksumSHA1'),
      checksumSHA256: _s.extractXmlStringValue(elem, 'ChecksumSHA256'),
      eTag: _s.extractXmlStringValue(elem, 'ETag'),
      lastModified: _s.extractXmlDateTimeValue(elem, 'LastModified'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final lastModified = this.lastModified;
    return {
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
      if (eTag != null) 'ETag': eTag,
      if (lastModified != null) 'LastModified': iso8601ToJson(lastModified),
    };
  }
}

/// The configuration information for the bucket.
class CreateBucketConfiguration {
  /// Specifies the information about the bucket that will be created.
  /// <note>
  /// This functionality is only supported by directory buckets.
  /// </note>
  final BucketInfo? bucket;

  /// Specifies the location where the bucket will be created.
  ///
  /// For directory buckets, the location type is Availability Zone.
  /// <note>
  /// This functionality is only supported by directory buckets.
  /// </note>
  final LocationInfo? location;

  /// Specifies the Region where the bucket will be created. You might choose a
  /// Region to optimize latency, minimize costs, or address regulatory
  /// requirements. For example, if you reside in Europe, you will probably find
  /// it advantageous to create buckets in the Europe (Ireland) Region. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro">Accessing
  /// a bucket</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// If you don't specify a Region, the bucket is created in the US East (N.
  /// Virginia) Region (us-east-1) by default.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final BucketLocationConstraint? locationConstraint;

  CreateBucketConfiguration({
    this.bucket,
    this.location,
    this.locationConstraint,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final location = this.location;
    final locationConstraint = this.locationConstraint;
    return {
      if (bucket != null) 'Bucket': bucket,
      if (location != null) 'Location': location,
      if (locationConstraint != null)
        'LocationConstraint': locationConstraint.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final bucket = this.bucket;
    final location = this.location;
    final locationConstraint = this.locationConstraint;
    final $children = <_s.XmlNode>[
      if (locationConstraint != null)
        _s.encodeXmlStringValue('LocationConstraint', locationConstraint.value),
      if (location != null) location.toXml('Location'),
      if (bucket != null) bucket.toXml('Bucket'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class CreateBucketOutput {
  /// A forward slash followed by the name of the bucket.
  final String? location;

  CreateBucketOutput({
    this.location,
  });

  Map<String, dynamic> toJson() {
    final location = this.location;
    return {};
  }
}

class CreateMultipartUploadOutput {
  /// If the bucket has a lifecycle rule configured with an action to abort
  /// incomplete multipart uploads and the prefix in the lifecycle rule matches
  /// the object name in the request, the response includes this header. The
  /// header indicates when the initiated multipart upload becomes eligible for an
  /// abort operation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
  /// Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle
  /// Configuration</a> in the <i>Amazon S3 User Guide</i>.
  ///
  /// The response also includes the <code>x-amz-abort-rule-id</code> header that
  /// provides the ID of the lifecycle configuration rule that defines the abort
  /// action.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final DateTime? abortDate;

  /// This header is returned along with the <code>x-amz-abort-date</code> header.
  /// It identifies the applicable lifecycle configuration rule that defines the
  /// action to abort incomplete multipart uploads.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? abortRuleId;

  /// The name of the bucket to which the multipart upload was initiated. Does not
  /// return the access point ARN or access point alias if used.
  /// <note>
  /// Access points are not supported by directory buckets.
  /// </note>
  final String? bucket;

  /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// The algorithm that was used to create a checksum of the object.
  final ChecksumAlgorithm? checksumAlgorithm;

  /// Object key for which the multipart upload was initiated.
  final String? key;
  final RequestCharged? requestCharged;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the Amazon Web Services KMS Encryption Context to use
  /// for object encryption. The value of this header is a base64-encoded UTF-8
  /// string holding JSON with the encryption context key-value pairs.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSEncryptionContext;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  /// ID for the initiated multipart upload.
  final String? uploadId;

  CreateMultipartUploadOutput({
    this.abortDate,
    this.abortRuleId,
    this.bucket,
    this.bucketKeyEnabled,
    this.checksumAlgorithm,
    this.key,
    this.requestCharged,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSEncryptionContext,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
    this.uploadId,
  });

  Map<String, dynamic> toJson() {
    final abortDate = this.abortDate;
    final abortRuleId = this.abortRuleId;
    final bucket = this.bucket;
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final checksumAlgorithm = this.checksumAlgorithm;
    final key = this.key;
    final requestCharged = this.requestCharged;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSEncryptionContext = this.sSEKMSEncryptionContext;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    final uploadId = this.uploadId;
    return {
      if (bucket != null) 'Bucket': bucket,
      if (key != null) 'Key': key,
      if (uploadId != null) 'UploadId': uploadId,
    };
  }
}

class CreateSessionOutput {
  /// The established temporary security credentials for the created session..
  final SessionCredentials credentials;

  CreateSessionOutput({
    required this.credentials,
  });
  factory CreateSessionOutput.fromXml(_s.XmlElement elem) {
    return CreateSessionOutput(
      credentials:
          SessionCredentials.fromXml(_s.extractXmlChild(elem, 'Credentials')!),
    );
  }

  Map<String, dynamic> toJson() {
    final credentials = this.credentials;
    return {
      'Credentials': credentials,
    };
  }
}

enum DataRedundancy {
  singleAvailabilityZone('SingleAvailabilityZone'),
  ;

  final String value;

  const DataRedundancy(this.value);

  static DataRedundancy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DataRedundancy'));
}

/// The container element for specifying the default Object Lock retention
/// settings for new objects placed in the specified bucket.
/// <note>
/// <ul>
/// <li>
/// The <code>DefaultRetention</code> settings require both a mode and a period.
/// </li>
/// <li>
/// The <code>DefaultRetention</code> period can be either <code>Days</code> or
/// <code>Years</code> but you must select one. You cannot specify
/// <code>Days</code> and <code>Years</code> at the same time.
/// </li>
/// </ul> </note>
class DefaultRetention {
  /// The number of days that you want to specify for the default retention
  /// period. Must be used with <code>Mode</code>.
  final int? days;

  /// The default Object Lock retention mode you want to apply to new objects
  /// placed in the specified bucket. Must be used with either <code>Days</code>
  /// or <code>Years</code>.
  final ObjectLockRetentionMode? mode;

  /// The number of years that you want to specify for the default retention
  /// period. Must be used with <code>Mode</code>.
  final int? years;

  DefaultRetention({
    this.days,
    this.mode,
    this.years,
  });
  factory DefaultRetention.fromXml(_s.XmlElement elem) {
    return DefaultRetention(
      days: _s.extractXmlIntValue(elem, 'Days'),
      mode: _s
          .extractXmlStringValue(elem, 'Mode')
          ?.let(ObjectLockRetentionMode.fromString),
      years: _s.extractXmlIntValue(elem, 'Years'),
    );
  }

  Map<String, dynamic> toJson() {
    final days = this.days;
    final mode = this.mode;
    final years = this.years;
    return {
      if (days != null) 'Days': days,
      if (mode != null) 'Mode': mode.value,
      if (years != null) 'Years': years,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final days = this.days;
    final mode = this.mode;
    final years = this.years;
    final $children = <_s.XmlNode>[
      if (mode != null) _s.encodeXmlStringValue('Mode', mode.value),
      if (days != null) _s.encodeXmlIntValue('Days', days),
      if (years != null) _s.encodeXmlIntValue('Years', years),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for the objects to delete.
class Delete {
  /// The object to delete.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, an object that's composed
  /// entirely of whitespace characters is not supported by the
  /// <code>DeleteObjects</code> API operation. The request will receive a
  /// <code>400 Bad Request</code> error and none of the objects in the request
  /// will be deleted.
  /// </note>
  final List<ObjectIdentifier> objects;

  /// Element to enable quiet mode for the request. When you add this element, you
  /// must set its value to <code>true</code>.
  final bool? quiet;

  Delete({
    required this.objects,
    this.quiet,
  });

  Map<String, dynamic> toJson() {
    final objects = this.objects;
    final quiet = this.quiet;
    return {
      'Object': objects,
      if (quiet != null) 'Quiet': quiet,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final objects = this.objects;
    final quiet = this.quiet;
    final $children = <_s.XmlNode>[
      ...objects.map((e) => e.toXml('Object')),
      if (quiet != null) _s.encodeXmlBoolValue('Quiet', quiet),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Information about the delete marker.
class DeleteMarkerEntry {
  /// Specifies whether the object is (true) or is not (false) the latest version
  /// of an object.
  final bool? isLatest;

  /// The object key.
  final String? key;

  /// Date and time when the object was last modified.
  final DateTime? lastModified;

  /// The account that created the delete marker.&gt;
  final Owner? owner;

  /// Version ID of an object.
  final String? versionId;

  DeleteMarkerEntry({
    this.isLatest,
    this.key,
    this.lastModified,
    this.owner,
    this.versionId,
  });
  factory DeleteMarkerEntry.fromXml(_s.XmlElement elem) {
    return DeleteMarkerEntry(
      isLatest: _s.extractXmlBoolValue(elem, 'IsLatest'),
      key: _s.extractXmlStringValue(elem, 'Key'),
      lastModified: _s.extractXmlDateTimeValue(elem, 'LastModified'),
      owner: _s.extractXmlChild(elem, 'Owner')?.let(Owner.fromXml),
      versionId: _s.extractXmlStringValue(elem, 'VersionId'),
    );
  }

  Map<String, dynamic> toJson() {
    final isLatest = this.isLatest;
    final key = this.key;
    final lastModified = this.lastModified;
    final owner = this.owner;
    final versionId = this.versionId;
    return {
      if (isLatest != null) 'IsLatest': isLatest,
      if (key != null) 'Key': key,
      if (lastModified != null) 'LastModified': iso8601ToJson(lastModified),
      if (owner != null) 'Owner': owner,
      if (versionId != null) 'VersionId': versionId,
    };
  }
}

/// Specifies whether Amazon S3 replicates delete markers. If you specify a
/// <code>Filter</code> in your replication configuration, you must also include
/// a <code>DeleteMarkerReplication</code> element. If your <code>Filter</code>
/// includes a <code>Tag</code> element, the
/// <code>DeleteMarkerReplication</code> <code>Status</code> must be set to
/// Disabled, because Amazon S3 does not support replicating delete markers for
/// tag-based rules. For an example configuration, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic
/// Rule Configuration</a>.
///
/// For more information about delete marker replication, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html">Basic
/// Rule Configuration</a>.
/// <note>
/// If you are using an earlier version of the replication configuration, Amazon
/// S3 handles replication of delete markers differently. For more information,
/// see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward
/// Compatibility</a>.
/// </note>
class DeleteMarkerReplication {
  /// Indicates whether to replicate delete markers.
  /// <note>
  /// Indicates whether to replicate delete markers.
  /// </note>
  final DeleteMarkerReplicationStatus? status;

  DeleteMarkerReplication({
    this.status,
  });
  factory DeleteMarkerReplication.fromXml(_s.XmlElement elem) {
    return DeleteMarkerReplication(
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(DeleteMarkerReplicationStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final $children = <_s.XmlNode>[
      if (status != null) _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum DeleteMarkerReplicationStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const DeleteMarkerReplicationStatus(this.value);

  static DeleteMarkerReplicationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DeleteMarkerReplicationStatus'));
}

class DeleteObjectOutput {
  /// Indicates whether the specified object version that was permanently deleted
  /// was (true) or was not (false) a delete marker before deletion. In a simple
  /// DELETE, this header indicates whether (true) or not (false) the current
  /// version of the object is a delete marker.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? deleteMarker;
  final RequestCharged? requestCharged;

  /// Returns the version ID of the delete marker created as a result of the
  /// DELETE operation.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  DeleteObjectOutput({
    this.deleteMarker,
    this.requestCharged,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final deleteMarker = this.deleteMarker;
    final requestCharged = this.requestCharged;
    final versionId = this.versionId;
    return {};
  }
}

class DeleteObjectTaggingOutput {
  /// The versionId of the object the tag-set was removed from.
  final String? versionId;

  DeleteObjectTaggingOutput({
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final versionId = this.versionId;
    return {};
  }
}

class DeleteObjectsOutput {
  /// Container element for a successful delete. It identifies the object that was
  /// successfully deleted.
  final List<DeletedObject>? deleted;

  /// Container for a failed delete action that describes the object that Amazon
  /// S3 attempted to delete and the error it encountered.
  final List<Error>? errors;
  final RequestCharged? requestCharged;

  DeleteObjectsOutput({
    this.deleted,
    this.errors,
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final deleted = this.deleted;
    final errors = this.errors;
    final requestCharged = this.requestCharged;
    return {
      if (deleted != null) 'Deleted': deleted,
      if (errors != null) 'Error': errors,
    };
  }
}

/// Information about the deleted object.
class DeletedObject {
  /// Indicates whether the specified object version that was permanently deleted
  /// was (true) or was not (false) a delete marker before deletion. In a simple
  /// DELETE, this header indicates whether (true) or not (false) the current
  /// version of the object is a delete marker.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? deleteMarker;

  /// The version ID of the delete marker created as a result of the DELETE
  /// operation. If you delete a specific object version, the value returned by
  /// this header is the version ID of the object version deleted.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? deleteMarkerVersionId;

  /// The name of the deleted object.
  final String? key;

  /// The version ID of the deleted object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  DeletedObject({
    this.deleteMarker,
    this.deleteMarkerVersionId,
    this.key,
    this.versionId,
  });
  factory DeletedObject.fromXml(_s.XmlElement elem) {
    return DeletedObject(
      deleteMarker: _s.extractXmlBoolValue(elem, 'DeleteMarker'),
      deleteMarkerVersionId:
          _s.extractXmlStringValue(elem, 'DeleteMarkerVersionId'),
      key: _s.extractXmlStringValue(elem, 'Key'),
      versionId: _s.extractXmlStringValue(elem, 'VersionId'),
    );
  }

  Map<String, dynamic> toJson() {
    final deleteMarker = this.deleteMarker;
    final deleteMarkerVersionId = this.deleteMarkerVersionId;
    final key = this.key;
    final versionId = this.versionId;
    return {
      if (deleteMarker != null) 'DeleteMarker': deleteMarker,
      if (deleteMarkerVersionId != null)
        'DeleteMarkerVersionId': deleteMarkerVersionId,
      if (key != null) 'Key': key,
      if (versionId != null) 'VersionId': versionId,
    };
  }
}

/// Specifies information about where to publish analysis or configuration
/// results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
class Destination {
  /// The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to
  /// store the results.
  final String bucket;

  /// Specify this only in a cross-account scenario (where source and destination
  /// bucket owners are not the same), and you want to change replica ownership to
  /// the Amazon Web Services account that owns the destination bucket. If this is
  /// not specified in the replication configuration, the replicas are owned by
  /// same Amazon Web Services account that owns the source object.
  final AccessControlTranslation? accessControlTranslation;

  /// Destination bucket owner account ID. In a cross-account scenario, if you
  /// direct Amazon S3 to change replica ownership to the Amazon Web Services
  /// account that owns the destination bucket by specifying the
  /// <code>AccessControlTranslation</code> property, this is the account ID of
  /// the destination bucket owner. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-change-owner.html">Replication
  /// Additional Configuration: Changing the Replica Owner</a> in the <i>Amazon S3
  /// User Guide</i>.
  final String? account;

  /// A container that provides information about encryption. If
  /// <code>SourceSelectionCriteria</code> is specified, you must specify this
  /// element.
  final EncryptionConfiguration? encryptionConfiguration;

  /// A container specifying replication metrics-related settings enabling
  /// replication metrics and events.
  final Metrics? metrics;

  /// A container specifying S3 Replication Time Control (S3 RTC), including
  /// whether S3 RTC is enabled and the time when all objects and operations on
  /// objects must be replicated. Must be specified together with a
  /// <code>Metrics</code> block.
  final ReplicationTime? replicationTime;

  /// The storage class to use when replicating objects, such as S3 Standard or
  /// reduced redundancy. By default, Amazon S3 uses the storage class of the
  /// source object to create the object replica.
  ///
  /// For valid values, see the <code>StorageClass</code> element of the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html">PUT
  /// Bucket replication</a> action in the <i>Amazon S3 API Reference</i>.
  final StorageClass? storageClass;

  Destination({
    required this.bucket,
    this.accessControlTranslation,
    this.account,
    this.encryptionConfiguration,
    this.metrics,
    this.replicationTime,
    this.storageClass,
  });
  factory Destination.fromXml(_s.XmlElement elem) {
    return Destination(
      bucket: _s.extractXmlStringValue(elem, 'Bucket')!,
      accessControlTranslation: _s
          .extractXmlChild(elem, 'AccessControlTranslation')
          ?.let(AccessControlTranslation.fromXml),
      account: _s.extractXmlStringValue(elem, 'Account'),
      encryptionConfiguration: _s
          .extractXmlChild(elem, 'EncryptionConfiguration')
          ?.let(EncryptionConfiguration.fromXml),
      metrics: _s.extractXmlChild(elem, 'Metrics')?.let(Metrics.fromXml),
      replicationTime: _s
          .extractXmlChild(elem, 'ReplicationTime')
          ?.let(ReplicationTime.fromXml),
      storageClass: _s
          .extractXmlStringValue(elem, 'StorageClass')
          ?.let(StorageClass.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final accessControlTranslation = this.accessControlTranslation;
    final account = this.account;
    final encryptionConfiguration = this.encryptionConfiguration;
    final metrics = this.metrics;
    final replicationTime = this.replicationTime;
    final storageClass = this.storageClass;
    return {
      'Bucket': bucket,
      if (accessControlTranslation != null)
        'AccessControlTranslation': accessControlTranslation,
      if (account != null) 'Account': account,
      if (encryptionConfiguration != null)
        'EncryptionConfiguration': encryptionConfiguration,
      if (metrics != null) 'Metrics': metrics,
      if (replicationTime != null) 'ReplicationTime': replicationTime,
      if (storageClass != null) 'StorageClass': storageClass.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final bucket = this.bucket;
    final accessControlTranslation = this.accessControlTranslation;
    final account = this.account;
    final encryptionConfiguration = this.encryptionConfiguration;
    final metrics = this.metrics;
    final replicationTime = this.replicationTime;
    final storageClass = this.storageClass;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Bucket', bucket),
      if (account != null) _s.encodeXmlStringValue('Account', account),
      if (storageClass != null)
        _s.encodeXmlStringValue('StorageClass', storageClass.value),
      if (accessControlTranslation != null)
        accessControlTranslation.toXml('AccessControlTranslation'),
      if (encryptionConfiguration != null)
        encryptionConfiguration.toXml('EncryptionConfiguration'),
      if (replicationTime != null) replicationTime.toXml('ReplicationTime'),
      if (metrics != null) metrics.toXml('Metrics'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Requests Amazon S3 to encode the object keys in the response and specifies
/// the encoding method to use. An object key can contain any Unicode character;
/// however, the XML 1.0 parser cannot parse some characters, such as characters
/// with an ASCII value from 0 to 10. For characters that are not supported in
/// XML 1.0, you can add this parameter to request that Amazon S3 encode the
/// keys in the response.
enum EncodingType {
  url('url'),
  ;

  final String value;

  const EncodingType(this.value);

  static EncodingType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EncodingType'));
}

/// Contains the type of server-side encryption used.
class Encryption {
  /// The server-side encryption algorithm used when storing job results in Amazon
  /// S3 (for example, AES256, <code>aws:kms</code>).
  final ServerSideEncryption encryptionType;

  /// If the encryption type is <code>aws:kms</code>, this optional value can be
  /// used to specify the encryption context for the restore results.
  final String? kMSContext;

  /// If the encryption type is <code>aws:kms</code>, this optional value
  /// specifies the ID of the symmetric encryption customer managed key to use for
  /// encryption of job results. Amazon S3 only supports symmetric encryption KMS
  /// keys. For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
  /// keys in KMS</a> in the <i>Amazon Web Services Key Management Service
  /// Developer Guide</i>.
  final String? kMSKeyId;

  Encryption({
    required this.encryptionType,
    this.kMSContext,
    this.kMSKeyId,
  });

  Map<String, dynamic> toJson() {
    final encryptionType = this.encryptionType;
    final kMSContext = this.kMSContext;
    final kMSKeyId = this.kMSKeyId;
    return {
      'EncryptionType': encryptionType.value,
      if (kMSContext != null) 'KMSContext': kMSContext,
      if (kMSKeyId != null) 'KMSKeyId': kMSKeyId,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final encryptionType = this.encryptionType;
    final kMSContext = this.kMSContext;
    final kMSKeyId = this.kMSKeyId;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('EncryptionType', encryptionType.value),
      if (kMSKeyId != null) _s.encodeXmlStringValue('KMSKeyId', kMSKeyId),
      if (kMSContext != null) _s.encodeXmlStringValue('KMSContext', kMSContext),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies encryption-related information for an Amazon S3 bucket that is a
/// destination for replicated objects.
class EncryptionConfiguration {
  /// Specifies the ID (Key ARN or Alias ARN) of the customer managed Amazon Web
  /// Services KMS key stored in Amazon Web Services Key Management Service (KMS)
  /// for the destination bucket. Amazon S3 uses this key to encrypt replica
  /// objects. Amazon S3 only supports symmetric encryption KMS keys. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
  /// keys in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key
  /// Management Service Developer Guide</i>.
  final String? replicaKmsKeyID;

  EncryptionConfiguration({
    this.replicaKmsKeyID,
  });
  factory EncryptionConfiguration.fromXml(_s.XmlElement elem) {
    return EncryptionConfiguration(
      replicaKmsKeyID: _s.extractXmlStringValue(elem, 'ReplicaKmsKeyID'),
    );
  }

  Map<String, dynamic> toJson() {
    final replicaKmsKeyID = this.replicaKmsKeyID;
    return {
      if (replicaKmsKeyID != null) 'ReplicaKmsKeyID': replicaKmsKeyID,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final replicaKmsKeyID = this.replicaKmsKeyID;
    final $children = <_s.XmlNode>[
      if (replicaKmsKeyID != null)
        _s.encodeXmlStringValue('ReplicaKmsKeyID', replicaKmsKeyID),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A message that indicates the request is complete and no more messages will
/// be sent. You should not assume that the request is complete until the client
/// receives an <code>EndEvent</code>.
class EndEvent {
  EndEvent();
  factory EndEvent.fromXml(
      // ignore: avoid_unused_constructor_parameters
      _s.XmlElement elem) {
    return EndEvent();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

/// Container for all error elements.
class Error {
  /// The error code is a string that uniquely identifies an error condition. It
  /// is meant to be read and understood by programs that detect and handle errors
  /// by type. The following is a list of Amazon S3 error codes. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">Error
  /// responses</a>.
  ///
  /// <ul>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> AccessDenied
  /// </li>
  /// <li>
  /// <i>Description:</i> Access Denied
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> AccountProblem
  /// </li>
  /// <li>
  /// <i>Description:</i> There is a problem with your Amazon Web Services account
  /// that prevents the action from completing successfully. Contact Amazon Web
  /// Services Support for further assistance.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> AllAccessDisabled
  /// </li>
  /// <li>
  /// <i>Description:</i> All access to this Amazon S3 resource has been disabled.
  /// Contact Amazon Web Services Support for further assistance.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> AmbiguousGrantByEmailAddress
  /// </li>
  /// <li>
  /// <i>Description:</i> The email address you provided is associated with more
  /// than one account.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> AuthorizationHeaderMalformed
  /// </li>
  /// <li>
  /// <i>Description:</i> The authorization header you provided is invalid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> BadDigest
  /// </li>
  /// <li>
  /// <i>Description:</i> The Content-MD5 you specified did not match what we
  /// received.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> BucketAlreadyExists
  /// </li>
  /// <li>
  /// <i>Description:</i> The requested bucket name is not available. The bucket
  /// namespace is shared by all users of the system. Please select a different
  /// name and try again.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 409 Conflict
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> BucketAlreadyOwnedByYou
  /// </li>
  /// <li>
  /// <i>Description:</i> The bucket you tried to create already exists, and you
  /// own it. Amazon S3 returns this error in all Amazon Web Services Regions
  /// except in the North Virginia Region. For legacy compatibility, if you
  /// re-create an existing bucket that you already own in the North Virginia
  /// Region, Amazon S3 returns 200 OK and resets the bucket access control lists
  /// (ACLs).
  /// </li>
  /// <li>
  /// <i>Code:</i> 409 Conflict (in all Regions except the North Virginia Region)
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> BucketNotEmpty
  /// </li>
  /// <li>
  /// <i>Description:</i> The bucket you tried to delete is not empty.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 409 Conflict
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> CredentialsNotSupported
  /// </li>
  /// <li>
  /// <i>Description:</i> This request does not support credentials.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> CrossLocationLoggingProhibited
  /// </li>
  /// <li>
  /// <i>Description:</i> Cross-location logging not allowed. Buckets in one
  /// geographic location cannot log information to a bucket in another location.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> EntityTooSmall
  /// </li>
  /// <li>
  /// <i>Description:</i> Your proposed upload is smaller than the minimum allowed
  /// object size.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> EntityTooLarge
  /// </li>
  /// <li>
  /// <i>Description:</i> Your proposed upload exceeds the maximum allowed object
  /// size.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> ExpiredToken
  /// </li>
  /// <li>
  /// <i>Description:</i> The provided token has expired.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> IllegalVersioningConfigurationException
  /// </li>
  /// <li>
  /// <i>Description:</i> Indicates that the versioning configuration specified in
  /// the request is invalid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> IncompleteBody
  /// </li>
  /// <li>
  /// <i>Description:</i> You did not provide the number of bytes specified by the
  /// Content-Length HTTP header
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> IncorrectNumberOfFilesInPostRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> POST requires exactly one file upload per request.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InlineDataTooLarge
  /// </li>
  /// <li>
  /// <i>Description:</i> Inline data exceeds the maximum allowed size.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InternalError
  /// </li>
  /// <li>
  /// <i>Description:</i> We encountered an internal error. Please try again.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 500 Internal Server Error
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Server
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidAccessKeyId
  /// </li>
  /// <li>
  /// <i>Description:</i> The Amazon Web Services access key ID you provided does
  /// not exist in our records.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidAddressingHeader
  /// </li>
  /// <li>
  /// <i>Description:</i> You must specify the Anonymous role.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> N/A
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidArgument
  /// </li>
  /// <li>
  /// <i>Description:</i> Invalid Argument
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidBucketName
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified bucket is not valid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidBucketState
  /// </li>
  /// <li>
  /// <i>Description:</i> The request is not valid with the current state of the
  /// bucket.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 409 Conflict
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidDigest
  /// </li>
  /// <li>
  /// <i>Description:</i> The Content-MD5 you specified is not valid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidEncryptionAlgorithmError
  /// </li>
  /// <li>
  /// <i>Description:</i> The encryption request you specified is not valid. The
  /// valid value is AES256.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidLocationConstraint
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified location constraint is not valid. For more
  /// information about Regions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro">How
  /// to Select a Region for Your Buckets</a>.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidObjectState
  /// </li>
  /// <li>
  /// <i>Description:</i> The action is not valid for the current state of the
  /// object.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidPart
  /// </li>
  /// <li>
  /// <i>Description:</i> One or more of the specified parts could not be found.
  /// The part might not have been uploaded, or the specified entity tag might not
  /// have matched the part's entity tag.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidPartOrder
  /// </li>
  /// <li>
  /// <i>Description:</i> The list of parts was not in ascending order. Parts list
  /// must be specified in order by part number.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidPayer
  /// </li>
  /// <li>
  /// <i>Description:</i> All access to this object has been disabled. Please
  /// contact Amazon Web Services Support for further assistance.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidPolicyDocument
  /// </li>
  /// <li>
  /// <i>Description:</i> The content of the form does not meet the conditions
  /// specified in the policy document.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRange
  /// </li>
  /// <li>
  /// <i>Description:</i> The requested range cannot be satisfied.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 416 Requested Range Not Satisfiable
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Please use <code>AWS4-HMAC-SHA256</code>.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> SOAP requests must be made over an HTTPS connection.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Acceleration is not supported for
  /// buckets with non-DNS compliant names.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Acceleration is not supported for
  /// buckets with periods (.) in their names.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Accelerate endpoint only supports
  /// virtual style requests.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Accelerate is not configured on this
  /// bucket.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Accelerate is disabled on this
  /// bucket.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Acceleration is not supported on this
  /// bucket. Contact Amazon Web Services Support for more information.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> Amazon S3 Transfer Acceleration cannot be enabled on
  /// this bucket. Contact Amazon Web Services Support for more information.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>Code:</i> N/A
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidSecurity
  /// </li>
  /// <li>
  /// <i>Description:</i> The provided security credentials are not valid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidSOAPRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> The SOAP request body is invalid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidStorageClass
  /// </li>
  /// <li>
  /// <i>Description:</i> The storage class you specified is not valid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidTargetBucketForLogging
  /// </li>
  /// <li>
  /// <i>Description:</i> The target bucket for logging does not exist, is not
  /// owned by you, or does not have the appropriate grants for the log-delivery
  /// group.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidToken
  /// </li>
  /// <li>
  /// <i>Description:</i> The provided token is malformed or otherwise invalid.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> InvalidURI
  /// </li>
  /// <li>
  /// <i>Description:</i> Couldn't parse the specified URI.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> KeyTooLongError
  /// </li>
  /// <li>
  /// <i>Description:</i> Your key is too long.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MalformedACLError
  /// </li>
  /// <li>
  /// <i>Description:</i> The XML you provided was not well-formed or did not
  /// validate against our published schema.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MalformedPOSTRequest
  /// </li>
  /// <li>
  /// <i>Description:</i> The body of your POST request is not well-formed
  /// multipart/form-data.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MalformedXML
  /// </li>
  /// <li>
  /// <i>Description:</i> This happens when the user sends malformed XML (XML that
  /// doesn't conform to the published XSD) for the configuration. The error
  /// message is, "The XML you provided was not well-formed or did not validate
  /// against our published schema."
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MaxMessageLengthExceeded
  /// </li>
  /// <li>
  /// <i>Description:</i> Your request was too big.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MaxPostPreDataLengthExceededError
  /// </li>
  /// <li>
  /// <i>Description:</i> Your POST request fields preceding the upload file were
  /// too large.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MetadataTooLarge
  /// </li>
  /// <li>
  /// <i>Description:</i> Your metadata headers exceed the maximum allowed
  /// metadata size.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MethodNotAllowed
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified method is not allowed against this
  /// resource.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 405 Method Not Allowed
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MissingAttachment
  /// </li>
  /// <li>
  /// <i>Description:</i> A SOAP attachment was expected, but none were found.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> N/A
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MissingContentLength
  /// </li>
  /// <li>
  /// <i>Description:</i> You must provide the Content-Length HTTP header.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 411 Length Required
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MissingRequestBodyError
  /// </li>
  /// <li>
  /// <i>Description:</i> This happens when the user sends an empty XML document
  /// as a request. The error message is, "Request body is empty."
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MissingSecurityElement
  /// </li>
  /// <li>
  /// <i>Description:</i> The SOAP 1.1 request is missing a security element.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> MissingSecurityHeader
  /// </li>
  /// <li>
  /// <i>Description:</i> Your request is missing a required header.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoLoggingStatusForKey
  /// </li>
  /// <li>
  /// <i>Description:</i> There is no such thing as a logging status subresource
  /// for a key.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoSuchBucket
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified bucket does not exist.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 404 Not Found
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoSuchBucketPolicy
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified bucket does not have a bucket policy.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 404 Not Found
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoSuchKey
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified key does not exist.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 404 Not Found
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoSuchLifecycleConfiguration
  /// </li>
  /// <li>
  /// <i>Description:</i> The lifecycle configuration does not exist.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 404 Not Found
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoSuchUpload
  /// </li>
  /// <li>
  /// <i>Description:</i> The specified multipart upload does not exist. The
  /// upload ID might be invalid, or the multipart upload might have been aborted
  /// or completed.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 404 Not Found
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NoSuchVersion
  /// </li>
  /// <li>
  /// <i>Description:</i> Indicates that the version ID specified in the request
  /// does not match an existing version.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 404 Not Found
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NotImplemented
  /// </li>
  /// <li>
  /// <i>Description:</i> A header you provided implies functionality that is not
  /// implemented.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 501 Not Implemented
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Server
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> NotSignedUp
  /// </li>
  /// <li>
  /// <i>Description:</i> Your account is not signed up for the Amazon S3 service.
  /// You must sign up before you can use Amazon S3. You can sign up at the
  /// following URL: <a href="http://aws.amazon.com/s3">Amazon S3</a>
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> OperationAborted
  /// </li>
  /// <li>
  /// <i>Description:</i> A conflicting conditional action is currently in
  /// progress against this resource. Try again.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 409 Conflict
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> PermanentRedirect
  /// </li>
  /// <li>
  /// <i>Description:</i> The bucket you are attempting to access must be
  /// addressed using the specified endpoint. Send all future requests to this
  /// endpoint.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 301 Moved Permanently
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> PreconditionFailed
  /// </li>
  /// <li>
  /// <i>Description:</i> At least one of the preconditions you specified did not
  /// hold.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 412 Precondition Failed
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> Redirect
  /// </li>
  /// <li>
  /// <i>Description:</i> Temporary redirect.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 307 Moved Temporarily
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> RestoreAlreadyInProgress
  /// </li>
  /// <li>
  /// <i>Description:</i> Object restore is already in progress.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 409 Conflict
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> RequestIsNotMultiPartContent
  /// </li>
  /// <li>
  /// <i>Description:</i> Bucket POST must be of the enclosure-type
  /// multipart/form-data.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> RequestTimeout
  /// </li>
  /// <li>
  /// <i>Description:</i> Your socket connection to the server was not read from
  /// or written to within the timeout period.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> RequestTimeTooSkewed
  /// </li>
  /// <li>
  /// <i>Description:</i> The difference between the request time and the server's
  /// time is too large.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> RequestTorrentOfBucketError
  /// </li>
  /// <li>
  /// <i>Description:</i> Requesting the torrent file of a bucket is not
  /// permitted.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> SignatureDoesNotMatch
  /// </li>
  /// <li>
  /// <i>Description:</i> The request signature we calculated does not match the
  /// signature you provided. Check your Amazon Web Services secret access key and
  /// signing method. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST
  /// Authentication</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html">SOAP
  /// Authentication</a> for details.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 403 Forbidden
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> ServiceUnavailable
  /// </li>
  /// <li>
  /// <i>Description:</i> Service is unable to handle request.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 503 Service Unavailable
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Server
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> SlowDown
  /// </li>
  /// <li>
  /// <i>Description:</i> Reduce your request rate.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 503 Slow Down
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Server
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> TemporaryRedirect
  /// </li>
  /// <li>
  /// <i>Description:</i> You are being redirected to the bucket while DNS
  /// updates.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 307 Moved Temporarily
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> TokenRefreshRequired
  /// </li>
  /// <li>
  /// <i>Description:</i> The provided token must be refreshed.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> TooManyBuckets
  /// </li>
  /// <li>
  /// <i>Description:</i> You have attempted to create more buckets than allowed.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> UnexpectedContent
  /// </li>
  /// <li>
  /// <i>Description:</i> This request does not support content.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> UnresolvableGrantByEmailAddress
  /// </li>
  /// <li>
  /// <i>Description:</i> The email address you provided does not match any
  /// account on record.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <ul>
  /// <li>
  /// <i>Code:</i> UserKeyMustBeSpecified
  /// </li>
  /// <li>
  /// <i>Description:</i> The bucket POST must contain the specified field name.
  /// If it is specified, check the order of the fields.
  /// </li>
  /// <li>
  /// <i>HTTP Status Code:</i> 400 Bad Request
  /// </li>
  /// <li>
  /// <i>SOAP Fault Code Prefix:</i> Client
  /// </li>
  /// </ul> </li>
  /// </ul> <p/>
  final String? code;

  /// The error key.
  final String? key;

  /// The error message contains a generic description of the error condition in
  /// English. It is intended for a human audience. Simple programs display the
  /// message directly to the end user if they encounter an error condition they
  /// don't know how or don't care to handle. Sophisticated programs with more
  /// exhaustive error handling and proper internationalization are more likely to
  /// ignore the error message.
  final String? message;

  /// The version ID of the error.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  Error({
    this.code,
    this.key,
    this.message,
    this.versionId,
  });
  factory Error.fromXml(_s.XmlElement elem) {
    return Error(
      code: _s.extractXmlStringValue(elem, 'Code'),
      key: _s.extractXmlStringValue(elem, 'Key'),
      message: _s.extractXmlStringValue(elem, 'Message'),
      versionId: _s.extractXmlStringValue(elem, 'VersionId'),
    );
  }

  Map<String, dynamic> toJson() {
    final code = this.code;
    final key = this.key;
    final message = this.message;
    final versionId = this.versionId;
    return {
      if (code != null) 'Code': code,
      if (key != null) 'Key': key,
      if (message != null) 'Message': message,
      if (versionId != null) 'VersionId': versionId,
    };
  }
}

/// The error information.
class ErrorDocument {
  /// The object key name to use when a 4XX class error occurs.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String key;

  ErrorDocument({
    required this.key,
  });
  factory ErrorDocument.fromXml(_s.XmlElement elem) {
    return ErrorDocument(
      key: _s.extractXmlStringValue(elem, 'Key')!,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    return {
      'Key': key,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final key = this.key;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Key', key),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The bucket event for which to send notifications.
enum Event {
  s3ReducedRedundancyLostObject('s3:ReducedRedundancyLostObject'),
  s3ObjectCreated('s3:ObjectCreated:*'),
  s3ObjectCreatedPut('s3:ObjectCreated:Put'),
  s3ObjectCreatedPost('s3:ObjectCreated:Post'),
  s3ObjectCreatedCopy('s3:ObjectCreated:Copy'),
  s3ObjectCreatedCompleteMultipartUpload(
      's3:ObjectCreated:CompleteMultipartUpload'),
  s3ObjectRemoved('s3:ObjectRemoved:*'),
  s3ObjectRemovedDelete('s3:ObjectRemoved:Delete'),
  s3ObjectRemovedDeleteMarkerCreated('s3:ObjectRemoved:DeleteMarkerCreated'),
  s3ObjectRestore('s3:ObjectRestore:*'),
  s3ObjectRestorePost('s3:ObjectRestore:Post'),
  s3ObjectRestoreCompleted('s3:ObjectRestore:Completed'),
  s3Replication('s3:Replication:*'),
  s3ReplicationOperationFailedReplication(
      's3:Replication:OperationFailedReplication'),
  s3ReplicationOperationNotTracked('s3:Replication:OperationNotTracked'),
  s3ReplicationOperationMissedThreshold(
      's3:Replication:OperationMissedThreshold'),
  s3ReplicationOperationReplicatedAfterThreshold(
      's3:Replication:OperationReplicatedAfterThreshold'),
  s3ObjectRestoreDelete('s3:ObjectRestore:Delete'),
  s3LifecycleTransition('s3:LifecycleTransition'),
  s3IntelligentTiering('s3:IntelligentTiering'),
  s3ObjectAclPut('s3:ObjectAcl:Put'),
  s3LifecycleExpiration('s3:LifecycleExpiration:*'),
  s3LifecycleExpirationDelete('s3:LifecycleExpiration:Delete'),
  s3LifecycleExpirationDeleteMarkerCreated(
      's3:LifecycleExpiration:DeleteMarkerCreated'),
  s3ObjectTagging('s3:ObjectTagging:*'),
  s3ObjectTaggingPut('s3:ObjectTagging:Put'),
  s3ObjectTaggingDelete('s3:ObjectTagging:Delete'),
  ;

  final String value;

  const Event(this.value);

  static Event fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Event'));
}

/// A container for specifying the configuration for Amazon EventBridge.
class EventBridgeConfiguration {
  EventBridgeConfiguration();
  factory EventBridgeConfiguration.fromXml(
      // ignore: avoid_unused_constructor_parameters
      _s.XmlElement elem) {
    return EventBridgeConfiguration();
  }

  Map<String, dynamic> toJson() {
    return {};
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final $children = <_s.XmlNode>[];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Optional configuration to replicate existing source bucket objects. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication">Replicating
/// Existing Objects</a> in the <i>Amazon S3 User Guide</i>.
class ExistingObjectReplication {
  /// Specifies whether Amazon S3 replicates existing source bucket objects.
  final ExistingObjectReplicationStatus status;

  ExistingObjectReplication({
    required this.status,
  });
  factory ExistingObjectReplication.fromXml(_s.XmlElement elem) {
    return ExistingObjectReplication(
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(ExistingObjectReplicationStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ExistingObjectReplicationStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ExistingObjectReplicationStatus(this.value);

  static ExistingObjectReplicationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ExistingObjectReplicationStatus'));
}

enum ExpirationStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ExpirationStatus(this.value);

  static ExpirationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ExpirationStatus'));
}

enum ExpressionType {
  sql('SQL'),
  ;

  final String value;

  const ExpressionType(this.value);

  static ExpressionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ExpressionType'));
}

enum FileHeaderInfo {
  use('USE'),
  ignore('IGNORE'),
  none('NONE'),
  ;

  final String value;

  const FileHeaderInfo(this.value);

  static FileHeaderInfo fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FileHeaderInfo'));
}

/// Specifies the Amazon S3 object key name to filter on. An object key name is
/// the name assigned to an object in your Amazon S3 bucket. You specify whether
/// to filter on the suffix or prefix of the object key name. A prefix is a
/// specific string of characters at the beginning of an object key name, which
/// you can use to organize objects. For example, you can start the key names of
/// related objects with a prefix, such as <code>2023-</code> or
/// <code>engineering/</code>. Then, you can use <code>FilterRule</code> to find
/// objects in a bucket with key names that have the same prefix. A suffix is
/// similar to a prefix, but it is at the end of the object key name instead of
/// at the beginning.
class FilterRule {
  /// The object key name prefix or suffix identifying one or more objects to
  /// which the filtering rule applies. The maximum length is 1,024 characters.
  /// Overlapping prefixes and suffixes are not supported. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
  /// Event Notifications</a> in the <i>Amazon S3 User Guide</i>.
  final FilterRuleName? name;

  /// The value that the filter searches for in object key names.
  final String? value;

  FilterRule({
    this.name,
    this.value,
  });
  factory FilterRule.fromXml(_s.XmlElement elem) {
    return FilterRule(
      name: _s
          .extractXmlStringValue(elem, 'Name')
          ?.let(FilterRuleName.fromString),
      value: _s.extractXmlStringValue(elem, 'Value'),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      if (name != null) 'Name': name.value,
      if (value != null) 'Value': value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final name = this.name;
    final value = this.value;
    final $children = <_s.XmlNode>[
      if (name != null) _s.encodeXmlStringValue('Name', name.value),
      if (value != null) _s.encodeXmlStringValue('Value', value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum FilterRuleName {
  prefix('prefix'),
  suffix('suffix'),
  ;

  final String value;

  const FilterRuleName(this.value);

  static FilterRuleName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FilterRuleName'));
}

class GetBucketAccelerateConfigurationOutput {
  final RequestCharged? requestCharged;

  /// The accelerate configuration of the bucket.
  final BucketAccelerateStatus? status;

  GetBucketAccelerateConfigurationOutput({
    this.requestCharged,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }
}

class GetBucketAclOutput {
  /// A list of grants.
  final List<Grant>? grants;

  /// Container for the bucket owner's display name and ID.
  final Owner? owner;

  GetBucketAclOutput({
    this.grants,
    this.owner,
  });
  factory GetBucketAclOutput.fromXml(_s.XmlElement elem) {
    return GetBucketAclOutput(
      grants: _s.extractXmlChild(elem, 'AccessControlList')?.let(
          (elem) => elem.findElements('Grant').map(Grant.fromXml).toList()),
      owner: _s.extractXmlChild(elem, 'Owner')?.let(Owner.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final grants = this.grants;
    final owner = this.owner;
    return {
      if (grants != null) 'AccessControlList': grants,
      if (owner != null) 'Owner': owner,
    };
  }
}

class GetBucketAnalyticsConfigurationOutput {
  /// The configuration and any analyses for the analytics filter.
  final AnalyticsConfiguration? analyticsConfiguration;

  GetBucketAnalyticsConfigurationOutput({
    this.analyticsConfiguration,
  });

  Map<String, dynamic> toJson() {
    final analyticsConfiguration = this.analyticsConfiguration;
    return {
      if (analyticsConfiguration != null)
        'AnalyticsConfiguration': analyticsConfiguration,
    };
  }
}

class GetBucketCorsOutput {
  /// A set of origins and methods (cross-origin access that you want to allow).
  /// You can add up to 100 rules to the configuration.
  final List<CORSRule>? cORSRules;

  GetBucketCorsOutput({
    this.cORSRules,
  });
  factory GetBucketCorsOutput.fromXml(_s.XmlElement elem) {
    return GetBucketCorsOutput(
      cORSRules: elem.findElements('CORSRule').map(CORSRule.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final cORSRules = this.cORSRules;
    return {
      if (cORSRules != null) 'CORSRule': cORSRules,
    };
  }
}

class GetBucketEncryptionOutput {
  final ServerSideEncryptionConfiguration? serverSideEncryptionConfiguration;

  GetBucketEncryptionOutput({
    this.serverSideEncryptionConfiguration,
  });

  Map<String, dynamic> toJson() {
    final serverSideEncryptionConfiguration =
        this.serverSideEncryptionConfiguration;
    return {
      if (serverSideEncryptionConfiguration != null)
        'ServerSideEncryptionConfiguration': serverSideEncryptionConfiguration,
    };
  }
}

class GetBucketIntelligentTieringConfigurationOutput {
  /// Container for S3 Intelligent-Tiering configuration.
  final IntelligentTieringConfiguration? intelligentTieringConfiguration;

  GetBucketIntelligentTieringConfigurationOutput({
    this.intelligentTieringConfiguration,
  });

  Map<String, dynamic> toJson() {
    final intelligentTieringConfiguration =
        this.intelligentTieringConfiguration;
    return {
      if (intelligentTieringConfiguration != null)
        'IntelligentTieringConfiguration': intelligentTieringConfiguration,
    };
  }
}

class GetBucketInventoryConfigurationOutput {
  /// Specifies the inventory configuration.
  final InventoryConfiguration? inventoryConfiguration;

  GetBucketInventoryConfigurationOutput({
    this.inventoryConfiguration,
  });

  Map<String, dynamic> toJson() {
    final inventoryConfiguration = this.inventoryConfiguration;
    return {
      if (inventoryConfiguration != null)
        'InventoryConfiguration': inventoryConfiguration,
    };
  }
}

class GetBucketLifecycleConfigurationOutput {
  /// Container for a lifecycle rule.
  final List<LifecycleRule>? rules;

  GetBucketLifecycleConfigurationOutput({
    this.rules,
  });
  factory GetBucketLifecycleConfigurationOutput.fromXml(_s.XmlElement elem) {
    return GetBucketLifecycleConfigurationOutput(
      rules: elem.findElements('Rule').map(LifecycleRule.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final rules = this.rules;
    return {
      if (rules != null) 'Rule': rules,
    };
  }
}

class GetBucketLifecycleOutput {
  /// Container for a lifecycle rule.
  final List<Rule>? rules;

  GetBucketLifecycleOutput({
    this.rules,
  });
  factory GetBucketLifecycleOutput.fromXml(_s.XmlElement elem) {
    return GetBucketLifecycleOutput(
      rules: elem.findElements('Rule').map(Rule.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final rules = this.rules;
    return {
      if (rules != null) 'Rule': rules,
    };
  }
}

class GetBucketLocationOutput {
  /// Specifies the Region where the bucket resides. For a list of all the Amazon
  /// S3 supported location constraints by Region, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a>. Buckets in Region <code>us-east-1</code> have a
  /// LocationConstraint of <code>null</code>.
  final BucketLocationConstraint? locationConstraint;

  GetBucketLocationOutput({
    this.locationConstraint,
  });
  factory GetBucketLocationOutput.fromXml(_s.XmlElement elem) {
    return GetBucketLocationOutput(
      locationConstraint: _s
          .extractXmlStringValue(elem, 'LocationConstraint')
          ?.let(BucketLocationConstraint.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final locationConstraint = this.locationConstraint;
    return {
      if (locationConstraint != null)
        'LocationConstraint': locationConstraint.value,
    };
  }
}

class GetBucketLoggingOutput {
  final LoggingEnabled? loggingEnabled;

  GetBucketLoggingOutput({
    this.loggingEnabled,
  });
  factory GetBucketLoggingOutput.fromXml(_s.XmlElement elem) {
    return GetBucketLoggingOutput(
      loggingEnabled: _s
          .extractXmlChild(elem, 'LoggingEnabled')
          ?.let(LoggingEnabled.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final loggingEnabled = this.loggingEnabled;
    return {
      if (loggingEnabled != null) 'LoggingEnabled': loggingEnabled,
    };
  }
}

class GetBucketMetricsConfigurationOutput {
  /// Specifies the metrics configuration.
  final MetricsConfiguration? metricsConfiguration;

  GetBucketMetricsConfigurationOutput({
    this.metricsConfiguration,
  });

  Map<String, dynamic> toJson() {
    final metricsConfiguration = this.metricsConfiguration;
    return {
      if (metricsConfiguration != null)
        'MetricsConfiguration': metricsConfiguration,
    };
  }
}

class GetBucketOwnershipControlsOutput {
  /// The <code>OwnershipControls</code> (BucketOwnerEnforced,
  /// BucketOwnerPreferred, or ObjectWriter) currently in effect for this Amazon
  /// S3 bucket.
  final OwnershipControls? ownershipControls;

  GetBucketOwnershipControlsOutput({
    this.ownershipControls,
  });

  Map<String, dynamic> toJson() {
    final ownershipControls = this.ownershipControls;
    return {
      if (ownershipControls != null) 'OwnershipControls': ownershipControls,
    };
  }
}

class GetBucketPolicyOutput {
  /// The bucket policy as a JSON document.
  final String? policy;

  GetBucketPolicyOutput({
    this.policy,
  });

  Map<String, dynamic> toJson() {
    final policy = this.policy;
    return {
      if (policy != null) 'Policy': policy,
    };
  }
}

class GetBucketPolicyStatusOutput {
  /// The policy status for the specified bucket.
  final PolicyStatus? policyStatus;

  GetBucketPolicyStatusOutput({
    this.policyStatus,
  });

  Map<String, dynamic> toJson() {
    final policyStatus = this.policyStatus;
    return {
      if (policyStatus != null) 'PolicyStatus': policyStatus,
    };
  }
}

class GetBucketReplicationOutput {
  final ReplicationConfiguration? replicationConfiguration;

  GetBucketReplicationOutput({
    this.replicationConfiguration,
  });

  Map<String, dynamic> toJson() {
    final replicationConfiguration = this.replicationConfiguration;
    return {
      if (replicationConfiguration != null)
        'ReplicationConfiguration': replicationConfiguration,
    };
  }
}

class GetBucketRequestPaymentOutput {
  /// Specifies who pays for the download and request fees.
  final Payer? payer;

  GetBucketRequestPaymentOutput({
    this.payer,
  });
  factory GetBucketRequestPaymentOutput.fromXml(_s.XmlElement elem) {
    return GetBucketRequestPaymentOutput(
      payer: _s.extractXmlStringValue(elem, 'Payer')?.let(Payer.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final payer = this.payer;
    return {
      if (payer != null) 'Payer': payer.value,
    };
  }
}

class GetBucketTaggingOutput {
  /// Contains the tag set.
  final List<Tag> tagSet;

  GetBucketTaggingOutput({
    required this.tagSet,
  });
  factory GetBucketTaggingOutput.fromXml(_s.XmlElement elem) {
    return GetBucketTaggingOutput(
      tagSet: _s
          .extractXmlChild(elem, 'TagSet')!
          .findElements('Tag')
          .map(Tag.fromXml)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final tagSet = this.tagSet;
    return {
      'TagSet': tagSet,
    };
  }
}

class GetBucketVersioningOutput {
  /// Specifies whether MFA delete is enabled in the bucket versioning
  /// configuration. This element is only returned if the bucket has been
  /// configured with MFA delete. If the bucket has never been so configured, this
  /// element is not returned.
  final MFADeleteStatus? mFADelete;

  /// The versioning state of the bucket.
  final BucketVersioningStatus? status;

  GetBucketVersioningOutput({
    this.mFADelete,
    this.status,
  });
  factory GetBucketVersioningOutput.fromXml(_s.XmlElement elem) {
    return GetBucketVersioningOutput(
      mFADelete: _s
          .extractXmlStringValue(elem, 'MfaDelete')
          ?.let(MFADeleteStatus.fromString),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(BucketVersioningStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final mFADelete = this.mFADelete;
    final status = this.status;
    return {
      if (mFADelete != null) 'MfaDelete': mFADelete.value,
      if (status != null) 'Status': status.value,
    };
  }
}

class GetBucketWebsiteOutput {
  /// The object key name of the website error document to use for 4XX class
  /// errors.
  final ErrorDocument? errorDocument;

  /// The name of the index document for the website (for example
  /// <code>index.html</code>).
  final IndexDocument? indexDocument;

  /// Specifies the redirect behavior of all requests to a website endpoint of an
  /// Amazon S3 bucket.
  final RedirectAllRequestsTo? redirectAllRequestsTo;

  /// Rules that define when a redirect is applied and the redirect behavior.
  final List<RoutingRule>? routingRules;

  GetBucketWebsiteOutput({
    this.errorDocument,
    this.indexDocument,
    this.redirectAllRequestsTo,
    this.routingRules,
  });
  factory GetBucketWebsiteOutput.fromXml(_s.XmlElement elem) {
    return GetBucketWebsiteOutput(
      errorDocument:
          _s.extractXmlChild(elem, 'ErrorDocument')?.let(ErrorDocument.fromXml),
      indexDocument:
          _s.extractXmlChild(elem, 'IndexDocument')?.let(IndexDocument.fromXml),
      redirectAllRequestsTo: _s
          .extractXmlChild(elem, 'RedirectAllRequestsTo')
          ?.let(RedirectAllRequestsTo.fromXml),
      routingRules: _s.extractXmlChild(elem, 'RoutingRules')?.let((elem) =>
          elem.findElements('RoutingRule').map(RoutingRule.fromXml).toList()),
    );
  }

  Map<String, dynamic> toJson() {
    final errorDocument = this.errorDocument;
    final indexDocument = this.indexDocument;
    final redirectAllRequestsTo = this.redirectAllRequestsTo;
    final routingRules = this.routingRules;
    return {
      if (errorDocument != null) 'ErrorDocument': errorDocument,
      if (indexDocument != null) 'IndexDocument': indexDocument,
      if (redirectAllRequestsTo != null)
        'RedirectAllRequestsTo': redirectAllRequestsTo,
      if (routingRules != null) 'RoutingRules': routingRules,
    };
  }
}

class GetObjectAclOutput {
  /// A list of grants.
  final List<Grant>? grants;

  /// Container for the bucket owner's display name and ID.
  final Owner? owner;
  final RequestCharged? requestCharged;

  GetObjectAclOutput({
    this.grants,
    this.owner,
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final grants = this.grants;
    final owner = this.owner;
    final requestCharged = this.requestCharged;
    return {
      if (grants != null) 'AccessControlList': grants,
      if (owner != null) 'Owner': owner,
    };
  }
}

class GetObjectAttributesOutput {
  /// The checksum or digest of the object.
  final Checksum? checksum;

  /// Specifies whether the object retrieved was (<code>true</code>) or was not
  /// (<code>false</code>) a delete marker. If <code>false</code>, this response
  /// header does not appear in the response.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? deleteMarker;

  /// An ETag is an opaque identifier assigned by a web server to a specific
  /// version of a resource found at a URL.
  final String? eTag;

  /// The creation date of the object.
  final DateTime? lastModified;

  /// A collection of parts associated with a multipart upload.
  final GetObjectAttributesParts? objectParts;

  /// The size of the object in bytes.
  final int? objectSize;
  final RequestCharged? requestCharged;

  /// Provides the storage class information of the object. Amazon S3 returns this
  /// header for all objects except for S3 Standard storage class objects.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
  /// Classes</a>.
  /// <note>
  /// <b>Directory buckets</b> - Only the S3 Express One Zone storage class is
  /// supported by directory buckets to store objects.
  /// </note>
  final StorageClass? storageClass;

  /// The version ID of the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  GetObjectAttributesOutput({
    this.checksum,
    this.deleteMarker,
    this.eTag,
    this.lastModified,
    this.objectParts,
    this.objectSize,
    this.requestCharged,
    this.storageClass,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final checksum = this.checksum;
    final deleteMarker = this.deleteMarker;
    final eTag = this.eTag;
    final lastModified = this.lastModified;
    final objectParts = this.objectParts;
    final objectSize = this.objectSize;
    final requestCharged = this.requestCharged;
    final storageClass = this.storageClass;
    final versionId = this.versionId;
    return {
      if (checksum != null) 'Checksum': checksum,
      if (eTag != null) 'ETag': eTag,
      if (objectParts != null) 'ObjectParts': objectParts,
      if (objectSize != null) 'ObjectSize': objectSize,
      if (storageClass != null) 'StorageClass': storageClass.value,
    };
  }
}

/// A collection of parts associated with a multipart upload.
class GetObjectAttributesParts {
  /// Indicates whether the returned list of parts is truncated. A value of
  /// <code>true</code> indicates that the list was truncated. A list can be
  /// truncated if the number of parts exceeds the limit returned in the
  /// <code>MaxParts</code> element.
  final bool? isTruncated;

  /// The maximum number of parts allowed in the response.
  final int? maxParts;

  /// When a list is truncated, this element specifies the last part in the list,
  /// as well as the value to use for the <code>PartNumberMarker</code> request
  /// parameter in a subsequent request.
  final int? nextPartNumberMarker;

  /// The marker for the current part.
  final int? partNumberMarker;

  /// A container for elements related to a particular part. A response can
  /// contain zero or more <code>Parts</code> elements.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>General purpose buckets</b> - For <code>GetObjectAttributes</code>, if a
  /// additional checksum (including <code>x-amz-checksum-crc32</code>,
  /// <code>x-amz-checksum-crc32c</code>, <code>x-amz-checksum-sha1</code>, or
  /// <code>x-amz-checksum-sha256</code>) isn't applied to the object specified in
  /// the request, the response doesn't return <code>Part</code>.
  /// </li>
  /// <li>
  /// <b>Directory buckets</b> - For <code>GetObjectAttributes</code>, no matter
  /// whether a additional checksum is applied to the object specified in the
  /// request, the response returns <code>Part</code>.
  /// </li>
  /// </ul> </note>
  final List<ObjectPart>? parts;

  /// The total number of parts.
  final int? totalPartsCount;

  GetObjectAttributesParts({
    this.isTruncated,
    this.maxParts,
    this.nextPartNumberMarker,
    this.partNumberMarker,
    this.parts,
    this.totalPartsCount,
  });
  factory GetObjectAttributesParts.fromXml(_s.XmlElement elem) {
    return GetObjectAttributesParts(
      isTruncated: _s.extractXmlBoolValue(elem, 'IsTruncated'),
      maxParts: _s.extractXmlIntValue(elem, 'MaxParts'),
      nextPartNumberMarker: _s.extractXmlIntValue(elem, 'NextPartNumberMarker'),
      partNumberMarker: _s.extractXmlIntValue(elem, 'PartNumberMarker'),
      parts: elem.findElements('Part').map(ObjectPart.fromXml).toList(),
      totalPartsCount: _s.extractXmlIntValue(elem, 'PartsCount'),
    );
  }

  Map<String, dynamic> toJson() {
    final isTruncated = this.isTruncated;
    final maxParts = this.maxParts;
    final nextPartNumberMarker = this.nextPartNumberMarker;
    final partNumberMarker = this.partNumberMarker;
    final parts = this.parts;
    final totalPartsCount = this.totalPartsCount;
    return {
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (maxParts != null) 'MaxParts': maxParts,
      if (nextPartNumberMarker != null)
        'NextPartNumberMarker': nextPartNumberMarker,
      if (partNumberMarker != null) 'PartNumberMarker': partNumberMarker,
      if (parts != null) 'Part': parts,
      if (totalPartsCount != null) 'PartsCount': totalPartsCount,
    };
  }
}

class GetObjectLegalHoldOutput {
  /// The current legal hold status for the specified object.
  final ObjectLockLegalHold? legalHold;

  GetObjectLegalHoldOutput({
    this.legalHold,
  });

  Map<String, dynamic> toJson() {
    final legalHold = this.legalHold;
    return {
      if (legalHold != null) 'LegalHold': legalHold,
    };
  }
}

class GetObjectLockConfigurationOutput {
  /// The specified bucket's Object Lock configuration.
  final ObjectLockConfiguration? objectLockConfiguration;

  GetObjectLockConfigurationOutput({
    this.objectLockConfiguration,
  });

  Map<String, dynamic> toJson() {
    final objectLockConfiguration = this.objectLockConfiguration;
    return {
      if (objectLockConfiguration != null)
        'ObjectLockConfiguration': objectLockConfiguration,
    };
  }
}

class GetObjectOutput {
  /// Indicates that a range of bytes was specified in the request.
  final String? acceptRanges;

  /// Object data.
  final Uint8List? body;

  /// Indicates whether the object uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// Specifies caching behavior along the request/reply chain.
  final String? cacheControl;

  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Specifies presentational information for the object.
  final String? contentDisposition;

  /// Indicates what content encodings have been applied to the object and thus
  /// what decoding mechanisms must be applied to obtain the media-type referenced
  /// by the Content-Type header field.
  final String? contentEncoding;

  /// The language the content is in.
  final String? contentLanguage;

  /// Size of the body in bytes.
  final int? contentLength;

  /// The portion of the object returned in the response.
  final String? contentRange;

  /// A standard MIME type describing the format of the object data.
  final String? contentType;

  /// Indicates whether the object retrieved was (true) or was not (false) a
  /// Delete Marker. If false, this response header does not appear in the
  /// response.
  /// <note>
  /// <ul>
  /// <li>
  /// If the current version of the object is a delete marker, Amazon S3 behaves
  /// as if the object was deleted and includes <code>x-amz-delete-marker:
  /// true</code> in the response.
  /// </li>
  /// <li>
  /// If the specified version in the request is a delete marker, the response
  /// returns a <code>405 Method Not Allowed</code> error and the
  /// <code>Last-Modified: timestamp</code> response header.
  /// </li>
  /// </ul> </note>
  final bool? deleteMarker;

  /// An entity tag (ETag) is an opaque identifier assigned by a web server to a
  /// specific version of a resource found at a URL.
  final String? eTag;

  /// If the object expiration is configured (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">
  /// <code>PutBucketLifecycleConfiguration</code> </a>), the response includes
  /// this header. It includes the <code>expiry-date</code> and
  /// <code>rule-id</code> key-value pairs providing object expiration
  /// information. The value of the <code>rule-id</code> is URL-encoded.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? expiration;

  /// Deprecated in favor of ExpiresString.
  final DateTime? expires;

  /// The date and time at which the object is no longer cacheable.
  final String? expiresString;

  /// Date and time when the object was last modified.
  ///
  /// <b>General purpose buckets </b> - When you specify a <code>versionId</code>
  /// of the object in your request, if the specified version in the request is a
  /// delete marker, the response returns a <code>405 Method Not Allowed</code>
  /// error and the <code>Last-Modified: timestamp</code> response header.
  final DateTime? lastModified;

  /// A map of metadata to store with the object in S3.
  final Map<String, String>? metadata;

  /// This is set to the number of metadata entries not returned in the headers
  /// that are prefixed with <code>x-amz-meta-</code>. This can happen if you
  /// create metadata using an API like SOAP that supports more flexible metadata
  /// than the REST API. For example, using SOAP, you can create metadata whose
  /// values are not legal HTTP headers.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final int? missingMeta;

  /// Indicates whether this object has an active legal hold. This field is only
  /// returned if you have permission to view an object's legal hold status.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ObjectLockLegalHoldStatus? objectLockLegalHoldStatus;

  /// The Object Lock mode that's currently in place for this object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ObjectLockMode? objectLockMode;

  /// The date and time when this object's Object Lock will expire.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final DateTime? objectLockRetainUntilDate;

  /// The count of parts this object has. This value is only returned if you
  /// specify <code>partNumber</code> in your request and the object was uploaded
  /// as a multipart upload.
  final int? partsCount;

  /// Amazon S3 can return this if your request involves a bucket that is either a
  /// source or destination in a replication rule.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ReplicationStatus? replicationStatus;
  final RequestCharged? requestCharged;

  /// Provides information about object restoration action and expiration time of
  /// the restored object copy.
  /// <note>
  /// This functionality is not supported for directory buckets. Only the S3
  /// Express One Zone storage class is supported by directory buckets to store
  /// objects.
  /// </note>
  final String? restore;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>,
  /// <code>aws:kms:dsse</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  /// Provides storage class information of the object. Amazon S3 returns this
  /// header for all objects except for S3 Standard storage class objects.
  /// <note>
  /// <b>Directory buckets </b> - Only the S3 Express One Zone storage class is
  /// supported by directory buckets to store objects.
  /// </note>
  final StorageClass? storageClass;

  /// The number of tags, if any, on the object, when you have the relevant
  /// permission to read object tags.
  ///
  /// You can use <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a>
  /// to retrieve the tag set associated with an object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final int? tagCount;

  /// Version ID of the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  /// If the bucket is configured as a website, redirects requests for this object
  /// to another object in the same bucket or to an external URL. Amazon S3 stores
  /// the value of this header in the object metadata.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? websiteRedirectLocation;

  GetObjectOutput({
    this.acceptRanges,
    this.body,
    this.bucketKeyEnabled,
    this.cacheControl,
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.contentDisposition,
    this.contentEncoding,
    this.contentLanguage,
    this.contentLength,
    this.contentRange,
    this.contentType,
    this.deleteMarker,
    this.eTag,
    this.expiration,
    this.expires,
    this.expiresString,
    this.lastModified,
    this.metadata,
    this.missingMeta,
    this.objectLockLegalHoldStatus,
    this.objectLockMode,
    this.objectLockRetainUntilDate,
    this.partsCount,
    this.replicationStatus,
    this.requestCharged,
    this.restore,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
    this.storageClass,
    this.tagCount,
    this.versionId,
    this.websiteRedirectLocation,
  });

  Map<String, dynamic> toJson() {
    final acceptRanges = this.acceptRanges;
    final body = this.body;
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final cacheControl = this.cacheControl;
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final contentDisposition = this.contentDisposition;
    final contentEncoding = this.contentEncoding;
    final contentLanguage = this.contentLanguage;
    final contentLength = this.contentLength;
    final contentRange = this.contentRange;
    final contentType = this.contentType;
    final deleteMarker = this.deleteMarker;
    final eTag = this.eTag;
    final expiration = this.expiration;
    final expires = this.expires;
    final expiresString = this.expiresString;
    final lastModified = this.lastModified;
    final metadata = this.metadata;
    final missingMeta = this.missingMeta;
    final objectLockLegalHoldStatus = this.objectLockLegalHoldStatus;
    final objectLockMode = this.objectLockMode;
    final objectLockRetainUntilDate = this.objectLockRetainUntilDate;
    final partsCount = this.partsCount;
    final replicationStatus = this.replicationStatus;
    final requestCharged = this.requestCharged;
    final restore = this.restore;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    final storageClass = this.storageClass;
    final tagCount = this.tagCount;
    final versionId = this.versionId;
    final websiteRedirectLocation = this.websiteRedirectLocation;
    return {
      if (body != null) 'Body': base64Encode(body),
    };
  }
}

class GetObjectRetentionOutput {
  /// The container element for an object's retention settings.
  final ObjectLockRetention? retention;

  GetObjectRetentionOutput({
    this.retention,
  });

  Map<String, dynamic> toJson() {
    final retention = this.retention;
    return {
      if (retention != null) 'Retention': retention,
    };
  }
}

class GetObjectTaggingOutput {
  /// Contains the tag set.
  final List<Tag> tagSet;

  /// The versionId of the object for which you got the tagging information.
  final String? versionId;

  GetObjectTaggingOutput({
    required this.tagSet,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final tagSet = this.tagSet;
    final versionId = this.versionId;
    return {
      'TagSet': tagSet,
    };
  }
}

class GetObjectTorrentOutput {
  /// A Bencoded dictionary as defined by the BitTorrent specification
  final Uint8List? body;
  final RequestCharged? requestCharged;

  GetObjectTorrentOutput({
    this.body,
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final body = this.body;
    final requestCharged = this.requestCharged;
    return {
      if (body != null) 'Body': base64Encode(body),
    };
  }
}

class GetPublicAccessBlockOutput {
  /// The <code>PublicAccessBlock</code> configuration currently in effect for
  /// this Amazon S3 bucket.
  final PublicAccessBlockConfiguration? publicAccessBlockConfiguration;

  GetPublicAccessBlockOutput({
    this.publicAccessBlockConfiguration,
  });

  Map<String, dynamic> toJson() {
    final publicAccessBlockConfiguration = this.publicAccessBlockConfiguration;
    return {
      if (publicAccessBlockConfiguration != null)
        'PublicAccessBlockConfiguration': publicAccessBlockConfiguration,
    };
  }
}

/// Container for S3 Glacier job parameters.
class GlacierJobParameters {
  /// Retrieval tier at which the restore will be processed.
  final Tier tier;

  GlacierJobParameters({
    required this.tier,
  });

  Map<String, dynamic> toJson() {
    final tier = this.tier;
    return {
      'Tier': tier.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final tier = this.tier;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Tier', tier.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for grant information.
class Grant {
  /// The person being granted permissions.
  final Grantee? grantee;

  /// Specifies the permission given to the grantee.
  final Permission? permission;

  Grant({
    this.grantee,
    this.permission,
  });
  factory Grant.fromXml(_s.XmlElement elem) {
    return Grant(
      grantee: _s.extractXmlChild(elem, 'Grantee')?.let(Grantee.fromXml),
      permission: _s
          .extractXmlStringValue(elem, 'Permission')
          ?.let(Permission.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final grantee = this.grantee;
    final permission = this.permission;
    return {
      if (grantee != null) 'Grantee': grantee,
      if (permission != null) 'Permission': permission.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final grantee = this.grantee;
    final permission = this.permission;
    final $children = <_s.XmlNode>[
      if (grantee != null) grantee.toXml('Grantee'),
      if (permission != null)
        _s.encodeXmlStringValue('Permission', permission.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for the person being granted permissions.
class Grantee {
  /// Type of grantee
  final Type type;

  /// Screen name of the grantee.
  final String? displayName;

  /// Email address of the grantee.
  /// <note>
  /// Using email addresses to specify a grantee is only supported in the
  /// following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul>
  /// For a list of all the Amazon S3 supported Regions and endpoints, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions
  /// and Endpoints</a> in the Amazon Web Services General Reference.
  /// </note>
  final String? emailAddress;

  /// The canonical user ID of the grantee.
  final String? id;

  /// URI of the grantee group.
  final String? uri;

  Grantee({
    required this.type,
    this.displayName,
    this.emailAddress,
    this.id,
    this.uri,
  });
  factory Grantee.fromXml(_s.XmlElement elem) {
    return Grantee(
      type:
          _s.extractXmlStringAttribute(elem, 'xsi:type')!.let(Type.fromString),
      displayName: _s.extractXmlStringValue(elem, 'DisplayName'),
      emailAddress: _s.extractXmlStringValue(elem, 'EmailAddress'),
      id: _s.extractXmlStringValue(elem, 'ID'),
      uri: _s.extractXmlStringValue(elem, 'URI'),
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final displayName = this.displayName;
    final emailAddress = this.emailAddress;
    final id = this.id;
    final uri = this.uri;
    return {
      'xsi:type': type.value,
      if (displayName != null) 'DisplayName': displayName,
      if (emailAddress != null) 'EmailAddress': emailAddress,
      if (id != null) 'ID': id,
      if (uri != null) 'URI': uri,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final type = this.type;
    final displayName = this.displayName;
    final emailAddress = this.emailAddress;
    final id = this.id;
    final uri = this.uri;
    final $children = <_s.XmlNode>[
      if (displayName != null)
        _s.encodeXmlStringValue('DisplayName', displayName),
      if (emailAddress != null)
        _s.encodeXmlStringValue('EmailAddress', emailAddress),
      if (id != null) _s.encodeXmlStringValue('ID', id),
      if (uri != null) _s.encodeXmlStringValue('URI', uri),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
      _s.XmlAttribute(_s.XmlName('xsi', 'xmlns'),
          'http://www.w3.org/2001/XMLSchema-instance'),
      _s.XmlAttribute(_s.XmlName('xsi:type'), type.value),
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class HeadBucketOutput {
  /// Indicates whether the bucket name used in the request is an access point
  /// alias.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? accessPointAlias;

  /// The name of the location where the bucket will be created.
  ///
  /// For directory buckets, the AZ ID of the Availability Zone where the bucket
  /// is created. An example AZ ID value is <code>usw2-az1</code>.
  /// <note>
  /// This functionality is only supported by directory buckets.
  /// </note>
  final String? bucketLocationName;

  /// The type of location where the bucket is created.
  /// <note>
  /// This functionality is only supported by directory buckets.
  /// </note>
  final LocationType? bucketLocationType;

  /// The Region that the bucket is located.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? bucketRegion;

  HeadBucketOutput({
    this.accessPointAlias,
    this.bucketLocationName,
    this.bucketLocationType,
    this.bucketRegion,
  });

  Map<String, dynamic> toJson() {
    final accessPointAlias = this.accessPointAlias;
    final bucketLocationName = this.bucketLocationName;
    final bucketLocationType = this.bucketLocationType;
    final bucketRegion = this.bucketRegion;
    return {};
  }
}

class HeadObjectOutput {
  /// Indicates that a range of bytes was specified.
  final String? acceptRanges;

  /// The archive state of the head object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ArchiveStatus? archiveStatus;

  /// Indicates whether the object uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// Specifies caching behavior along the request/reply chain.
  final String? cacheControl;

  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Specifies presentational information for the object.
  final String? contentDisposition;

  /// Indicates what content encodings have been applied to the object and thus
  /// what decoding mechanisms must be applied to obtain the media-type referenced
  /// by the Content-Type header field.
  final String? contentEncoding;

  /// The language the content is in.
  final String? contentLanguage;

  /// Size of the body in bytes.
  final int? contentLength;

  /// A standard MIME type describing the format of the object data.
  final String? contentType;

  /// Specifies whether the object retrieved was (true) or was not (false) a
  /// Delete Marker. If false, this response header does not appear in the
  /// response.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? deleteMarker;

  /// An entity tag (ETag) is an opaque identifier assigned by a web server to a
  /// specific version of a resource found at a URL.
  final String? eTag;

  /// If the object expiration is configured (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">
  /// <code>PutBucketLifecycleConfiguration</code> </a>), the response includes
  /// this header. It includes the <code>expiry-date</code> and
  /// <code>rule-id</code> key-value pairs providing object expiration
  /// information. The value of the <code>rule-id</code> is URL-encoded.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? expiration;

  /// Deprecated in favor of ExpiresString.
  final DateTime? expires;

  /// The date and time at which the object is no longer cacheable.
  final String? expiresString;

  /// Date and time when the object was last modified.
  final DateTime? lastModified;

  /// A map of metadata to store with the object in S3.
  final Map<String, String>? metadata;

  /// This is set to the number of metadata entries not returned in
  /// <code>x-amz-meta</code> headers. This can happen if you create metadata
  /// using an API like SOAP that supports more flexible metadata than the REST
  /// API. For example, using SOAP, you can create metadata whose values are not
  /// legal HTTP headers.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final int? missingMeta;

  /// Specifies whether a legal hold is in effect for this object. This header is
  /// only returned if the requester has the <code>s3:GetObjectLegalHold</code>
  /// permission. This header is not returned if the specified version of this
  /// object has never had a legal hold applied. For more information about S3
  /// Object Lock, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object
  /// Lock</a>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ObjectLockLegalHoldStatus? objectLockLegalHoldStatus;

  /// The Object Lock mode, if any, that's in effect for this object. This header
  /// is only returned if the requester has the <code>s3:GetObjectRetention</code>
  /// permission. For more information about S3 Object Lock, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object
  /// Lock</a>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ObjectLockMode? objectLockMode;

  /// The date and time when the Object Lock retention period expires. This header
  /// is only returned if the requester has the <code>s3:GetObjectRetention</code>
  /// permission.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final DateTime? objectLockRetainUntilDate;

  /// The count of parts this object has. This value is only returned if you
  /// specify <code>partNumber</code> in your request and the object was uploaded
  /// as a multipart upload.
  final int? partsCount;

  /// Amazon S3 can return this header if your request involves a bucket that is
  /// either a source or a destination in a replication rule.
  ///
  /// In replication, you have a source bucket on which you configure replication
  /// and destination bucket or buckets where Amazon S3 stores object replicas.
  /// When you request an object (<code>GetObject</code>) or object metadata
  /// (<code>HeadObject</code>) from these buckets, Amazon S3 will return the
  /// <code>x-amz-replication-status</code> header in the response as follows:
  ///
  /// <ul>
  /// <li>
  /// <b>If requesting an object from the source bucket</b>, Amazon S3 will return
  /// the <code>x-amz-replication-status</code> header if the object in your
  /// request is eligible for replication.
  ///
  /// For example, suppose that in your replication configuration, you specify
  /// object prefix <code>TaxDocs</code> requesting Amazon S3 to replicate objects
  /// with key prefix <code>TaxDocs</code>. Any objects you upload with this key
  /// name prefix, for example <code>TaxDocs/document1.pdf</code>, are eligible
  /// for replication. For any object request with this key name prefix, Amazon S3
  /// will return the <code>x-amz-replication-status</code> header with value
  /// PENDING, COMPLETED or FAILED indicating object replication status.
  /// </li>
  /// <li>
  /// <b>If requesting an object from a destination bucket</b>, Amazon S3 will
  /// return the <code>x-amz-replication-status</code> header with value REPLICA
  /// if the object in your request is a replica that Amazon S3 created and there
  /// is no replica modification replication in progress.
  /// </li>
  /// <li>
  /// <b>When replicating objects to multiple destination buckets</b>, the
  /// <code>x-amz-replication-status</code> header acts differently. The header of
  /// the source object will only return a value of COMPLETED when replication is
  /// successful to all destinations. The header will remain at value PENDING
  /// until replication has completed for all destinations. If one or more
  /// destinations fails replication the header will return FAILED.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Replication</a>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final ReplicationStatus? replicationStatus;
  final RequestCharged? requestCharged;

  /// If the object is an archived object (an object whose storage class is
  /// GLACIER), the response includes this header if either the archive
  /// restoration is in progress (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>
  /// or an archive copy is already restored.
  ///
  /// If an archive copy is already restored, the header value indicates when
  /// Amazon S3 is scheduled to delete the object copy. For example:
  ///
  /// <code>x-amz-restore: ongoing-request="false", expiry-date="Fri, 21 Dec 2012
  /// 00:00:00 GMT"</code>
  ///
  /// If the object restoration is in progress, the header returns the value
  /// <code>ongoing-request="true"</code>.
  ///
  /// For more information about archiving objects, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations">Transitioning
  /// Objects: General Considerations</a>.
  /// <note>
  /// This functionality is not supported for directory buckets. Only the S3
  /// Express One Zone storage class is supported by directory buckets to store
  /// objects.
  /// </note>
  final String? restore;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>,
  /// <code>aws:kms:dsse</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  /// Provides storage class information of the object. Amazon S3 returns this
  /// header for all objects except for S3 Standard storage class objects.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
  /// Classes</a>.
  /// <note>
  /// <b>Directory buckets </b> - Only the S3 Express One Zone storage class is
  /// supported by directory buckets to store objects.
  /// </note>
  final StorageClass? storageClass;

  /// Version ID of the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  /// If the bucket is configured as a website, redirects requests for this object
  /// to another object in the same bucket or to an external URL. Amazon S3 stores
  /// the value of this header in the object metadata.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? websiteRedirectLocation;

  HeadObjectOutput({
    this.acceptRanges,
    this.archiveStatus,
    this.bucketKeyEnabled,
    this.cacheControl,
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.contentDisposition,
    this.contentEncoding,
    this.contentLanguage,
    this.contentLength,
    this.contentType,
    this.deleteMarker,
    this.eTag,
    this.expiration,
    this.expires,
    this.expiresString,
    this.lastModified,
    this.metadata,
    this.missingMeta,
    this.objectLockLegalHoldStatus,
    this.objectLockMode,
    this.objectLockRetainUntilDate,
    this.partsCount,
    this.replicationStatus,
    this.requestCharged,
    this.restore,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
    this.storageClass,
    this.versionId,
    this.websiteRedirectLocation,
  });

  Map<String, dynamic> toJson() {
    final acceptRanges = this.acceptRanges;
    final archiveStatus = this.archiveStatus;
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final cacheControl = this.cacheControl;
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final contentDisposition = this.contentDisposition;
    final contentEncoding = this.contentEncoding;
    final contentLanguage = this.contentLanguage;
    final contentLength = this.contentLength;
    final contentType = this.contentType;
    final deleteMarker = this.deleteMarker;
    final eTag = this.eTag;
    final expiration = this.expiration;
    final expires = this.expires;
    final expiresString = this.expiresString;
    final lastModified = this.lastModified;
    final metadata = this.metadata;
    final missingMeta = this.missingMeta;
    final objectLockLegalHoldStatus = this.objectLockLegalHoldStatus;
    final objectLockMode = this.objectLockMode;
    final objectLockRetainUntilDate = this.objectLockRetainUntilDate;
    final partsCount = this.partsCount;
    final replicationStatus = this.replicationStatus;
    final requestCharged = this.requestCharged;
    final restore = this.restore;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    final storageClass = this.storageClass;
    final versionId = this.versionId;
    final websiteRedirectLocation = this.websiteRedirectLocation;
    return {};
  }
}

/// Container for the <code>Suffix</code> element.
class IndexDocument {
  /// A suffix that is appended to a request that is for a directory on the
  /// website endpoint (for example,if the suffix is index.html and you make a
  /// request to samplebucket/images/ the data that is returned will be for the
  /// object with the key name images/index.html) The suffix must not be empty and
  /// must not include a slash character.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String suffix;

  IndexDocument({
    required this.suffix,
  });
  factory IndexDocument.fromXml(_s.XmlElement elem) {
    return IndexDocument(
      suffix: _s.extractXmlStringValue(elem, 'Suffix')!,
    );
  }

  Map<String, dynamic> toJson() {
    final suffix = this.suffix;
    return {
      'Suffix': suffix,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final suffix = this.suffix;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Suffix', suffix),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container element that identifies who initiated the multipart upload.
class Initiator {
  /// Name of the Principal.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? displayName;

  /// If the principal is an Amazon Web Services account, it provides the
  /// Canonical User ID. If the principal is an IAM User, it provides a user ARN
  /// value.
  /// <note>
  /// <b>Directory buckets</b> - If the principal is an Amazon Web Services
  /// account, it provides the Amazon Web Services account ID. If the principal is
  /// an IAM User, it provides a user ARN value.
  /// </note>
  final String? id;

  Initiator({
    this.displayName,
    this.id,
  });
  factory Initiator.fromXml(_s.XmlElement elem) {
    return Initiator(
      displayName: _s.extractXmlStringValue(elem, 'DisplayName'),
      id: _s.extractXmlStringValue(elem, 'ID'),
    );
  }

  Map<String, dynamic> toJson() {
    final displayName = this.displayName;
    final id = this.id;
    return {
      if (displayName != null) 'DisplayName': displayName,
      if (id != null) 'ID': id,
    };
  }
}

/// Describes the serialization format of the object.
class InputSerialization {
  /// Describes the serialization of a CSV-encoded object.
  final CSVInput? csv;

  /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2.
  /// Default Value: NONE.
  final CompressionType? compressionType;

  /// Specifies JSON as object's input serialization format.
  final JSONInput? json;

  /// Specifies Parquet as object's input serialization format.
  final ParquetInput? parquet;

  InputSerialization({
    this.csv,
    this.compressionType,
    this.json,
    this.parquet,
  });

  Map<String, dynamic> toJson() {
    final csv = this.csv;
    final compressionType = this.compressionType;
    final json = this.json;
    final parquet = this.parquet;
    return {
      if (csv != null) 'CSV': csv,
      if (compressionType != null) 'CompressionType': compressionType.value,
      if (json != null) 'JSON': json,
      if (parquet != null) 'Parquet': parquet,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final csv = this.csv;
    final compressionType = this.compressionType;
    final json = this.json;
    final parquet = this.parquet;
    final $children = <_s.XmlNode>[
      if (csv != null) csv.toXml('CSV'),
      if (compressionType != null)
        _s.encodeXmlStringValue('CompressionType', compressionType.value),
      if (json != null) json.toXml('JSON'),
      if (parquet != null) parquet.toXml('Parquet'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum IntelligentTieringAccessTier {
  archiveAccess('ARCHIVE_ACCESS'),
  deepArchiveAccess('DEEP_ARCHIVE_ACCESS'),
  ;

  final String value;

  const IntelligentTieringAccessTier(this.value);

  static IntelligentTieringAccessTier fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IntelligentTieringAccessTier'));
}

/// A container for specifying S3 Intelligent-Tiering filters. The filters
/// determine the subset of objects to which the rule applies.
class IntelligentTieringAndOperator {
  /// An object key name prefix that identifies the subset of objects to which the
  /// configuration applies.
  final String? prefix;

  /// All of these tags must exist in the object's tag set in order for the
  /// configuration to apply.
  final List<Tag>? tags;

  IntelligentTieringAndOperator({
    this.prefix,
    this.tags,
  });
  factory IntelligentTieringAndOperator.fromXml(_s.XmlElement elem) {
    return IntelligentTieringAndOperator(
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tags: elem.findElements('Tag').map(Tag.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final prefix = this.prefix;
    final tags = this.tags;
    return {
      if (prefix != null) 'Prefix': prefix,
      if (tags != null) 'Tag': tags,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final prefix = this.prefix;
    final tags = this.tags;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tags != null) ...tags.map((e) => e.toXml('Tag')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
///
/// For information about the S3 Intelligent-Tiering storage class, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage
/// class for automatically optimizing frequently and infrequently accessed
/// objects</a>.
class IntelligentTieringConfiguration {
  /// The ID used to identify the S3 Intelligent-Tiering configuration.
  final String id;

  /// Specifies the status of the configuration.
  final IntelligentTieringStatus status;

  /// Specifies the S3 Intelligent-Tiering storage class tier of the
  /// configuration.
  final List<Tiering> tierings;

  /// Specifies a bucket filter. The configuration only includes objects that meet
  /// the filter's criteria.
  final IntelligentTieringFilter? filter;

  IntelligentTieringConfiguration({
    required this.id,
    required this.status,
    required this.tierings,
    this.filter,
  });
  factory IntelligentTieringConfiguration.fromXml(_s.XmlElement elem) {
    return IntelligentTieringConfiguration(
      id: _s.extractXmlStringValue(elem, 'Id')!,
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(IntelligentTieringStatus.fromString),
      tierings: elem.findElements('Tiering').map(Tiering.fromXml).toList(),
      filter: _s
          .extractXmlChild(elem, 'Filter')
          ?.let(IntelligentTieringFilter.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final id = this.id;
    final status = this.status;
    final tierings = this.tierings;
    final filter = this.filter;
    return {
      'Id': id,
      'Status': status.value,
      'Tiering': tierings,
      if (filter != null) 'Filter': filter,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final id = this.id;
    final status = this.status;
    final tierings = this.tierings;
    final filter = this.filter;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Id', id),
      if (filter != null) filter.toXml('Filter'),
      _s.encodeXmlStringValue('Status', status.value),
      ...tierings.map((e) => e.toXml('Tiering')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The <code>Filter</code> is used to identify objects that the S3
/// Intelligent-Tiering configuration applies to.
class IntelligentTieringFilter {
  /// A conjunction (logical AND) of predicates, which is used in evaluating a
  /// metrics filter. The operator must have at least two predicates, and an
  /// object must match all of the predicates in order for the filter to apply.
  final IntelligentTieringAndOperator? and;

  /// An object key name prefix that identifies the subset of objects to which the
  /// rule applies.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? prefix;
  final Tag? tag;

  IntelligentTieringFilter({
    this.and,
    this.prefix,
    this.tag,
  });
  factory IntelligentTieringFilter.fromXml(_s.XmlElement elem) {
    return IntelligentTieringFilter(
      and: _s
          .extractXmlChild(elem, 'And')
          ?.let(IntelligentTieringAndOperator.fromXml),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tag: _s.extractXmlChild(elem, 'Tag')?.let(Tag.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    return {
      if (and != null) 'And': and,
      if (prefix != null) 'Prefix': prefix,
      if (tag != null) 'Tag': tag,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tag != null) tag.toXml('Tag'),
      if (and != null) and.toXml('And'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum IntelligentTieringStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const IntelligentTieringStatus(this.value);

  static IntelligentTieringStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IntelligentTieringStatus'));
}

/// Specifies the inventory configuration for an Amazon S3 bucket. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET
/// Bucket inventory</a> in the <i>Amazon S3 API Reference</i>.
class InventoryConfiguration {
  /// Contains information about where to publish the inventory results.
  final InventoryDestination destination;

  /// The ID used to identify the inventory configuration.
  final String id;

  /// Object versions to include in the inventory list. If set to
  /// <code>All</code>, the list includes all the object versions, which adds the
  /// version-related fields <code>VersionId</code>, <code>IsLatest</code>, and
  /// <code>DeleteMarker</code> to the list. If set to <code>Current</code>, the
  /// list does not contain these version-related fields.
  final InventoryIncludedObjectVersions includedObjectVersions;

  /// Specifies whether the inventory is enabled or disabled. If set to
  /// <code>True</code>, an inventory list is generated. If set to
  /// <code>False</code>, no inventory list is generated.
  final bool isEnabled;

  /// Specifies the schedule for generating inventory results.
  final InventorySchedule schedule;

  /// Specifies an inventory filter. The inventory only includes objects that meet
  /// the filter's criteria.
  final InventoryFilter? filter;

  /// Contains the optional fields that are included in the inventory results.
  final List<InventoryOptionalField>? optionalFields;

  InventoryConfiguration({
    required this.destination,
    required this.id,
    required this.includedObjectVersions,
    required this.isEnabled,
    required this.schedule,
    this.filter,
    this.optionalFields,
  });
  factory InventoryConfiguration.fromXml(_s.XmlElement elem) {
    return InventoryConfiguration(
      destination: InventoryDestination.fromXml(
          _s.extractXmlChild(elem, 'Destination')!),
      id: _s.extractXmlStringValue(elem, 'Id')!,
      includedObjectVersions: _s
          .extractXmlStringValue(elem, 'IncludedObjectVersions')!
          .let(InventoryIncludedObjectVersions.fromString),
      isEnabled: _s.extractXmlBoolValue(elem, 'IsEnabled')!,
      schedule:
          InventorySchedule.fromXml(_s.extractXmlChild(elem, 'Schedule')!),
      filter: _s.extractXmlChild(elem, 'Filter')?.let(InventoryFilter.fromXml),
      optionalFields: _s.extractXmlChild(elem, 'OptionalFields')?.let((elem) =>
          _s
              .extractXmlStringListValues(elem, 'Field')
              .map(InventoryOptionalField.fromString)
              .toList()),
    );
  }

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final id = this.id;
    final includedObjectVersions = this.includedObjectVersions;
    final isEnabled = this.isEnabled;
    final schedule = this.schedule;
    final filter = this.filter;
    final optionalFields = this.optionalFields;
    return {
      'Destination': destination,
      'Id': id,
      'IncludedObjectVersions': includedObjectVersions.value,
      'IsEnabled': isEnabled,
      'Schedule': schedule,
      if (filter != null) 'Filter': filter,
      if (optionalFields != null)
        'OptionalFields': optionalFields.map((e) => e.value).toList(),
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final destination = this.destination;
    final id = this.id;
    final includedObjectVersions = this.includedObjectVersions;
    final isEnabled = this.isEnabled;
    final schedule = this.schedule;
    final filter = this.filter;
    final optionalFields = this.optionalFields;
    final $children = <_s.XmlNode>[
      destination.toXml('Destination'),
      _s.encodeXmlBoolValue('IsEnabled', isEnabled),
      if (filter != null) filter.toXml('Filter'),
      _s.encodeXmlStringValue('Id', id),
      _s.encodeXmlStringValue(
          'IncludedObjectVersions', includedObjectVersions.value),
      if (optionalFields != null)
        _s.XmlElement(
            _s.XmlName('OptionalFields'),
            [],
            optionalFields
                .map((e) => _s.encodeXmlStringValue('Field', e.value))),
      schedule.toXml('Schedule'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the inventory configuration for an Amazon S3 bucket.
class InventoryDestination {
  /// Contains the bucket name, file format, bucket owner (optional), and prefix
  /// (optional) where inventory results are published.
  final InventoryS3BucketDestination s3BucketDestination;

  InventoryDestination({
    required this.s3BucketDestination,
  });
  factory InventoryDestination.fromXml(_s.XmlElement elem) {
    return InventoryDestination(
      s3BucketDestination: InventoryS3BucketDestination.fromXml(
          _s.extractXmlChild(elem, 'S3BucketDestination')!),
    );
  }

  Map<String, dynamic> toJson() {
    final s3BucketDestination = this.s3BucketDestination;
    return {
      'S3BucketDestination': s3BucketDestination,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final s3BucketDestination = this.s3BucketDestination;
    final $children = <_s.XmlNode>[
      s3BucketDestination.toXml('S3BucketDestination'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Contains the type of server-side encryption used to encrypt the inventory
/// results.
class InventoryEncryption {
  /// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
  final SSEKMS? ssekms;

  /// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
  final SSES3? sses3;

  InventoryEncryption({
    this.ssekms,
    this.sses3,
  });
  factory InventoryEncryption.fromXml(_s.XmlElement elem) {
    return InventoryEncryption(
      ssekms: _s.extractXmlChild(elem, 'SSE-KMS')?.let(SSEKMS.fromXml),
      sses3: _s.extractXmlChild(elem, 'SSE-S3')?.let(SSES3.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final ssekms = this.ssekms;
    final sses3 = this.sses3;
    return {
      if (ssekms != null) 'SSE-KMS': ssekms,
      if (sses3 != null) 'SSE-S3': sses3,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final ssekms = this.ssekms;
    final sses3 = this.sses3;
    final $children = <_s.XmlNode>[
      if (sses3 != null) sses3.toXml('SSE-S3'),
      if (ssekms != null) ssekms.toXml('SSE-KMS'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies an inventory filter. The inventory only includes objects that meet
/// the filter's criteria.
class InventoryFilter {
  /// The prefix that an object must have to be included in the inventory results.
  final String prefix;

  InventoryFilter({
    required this.prefix,
  });
  factory InventoryFilter.fromXml(_s.XmlElement elem) {
    return InventoryFilter(
      prefix: _s.extractXmlStringValue(elem, 'Prefix')!,
    );
  }

  Map<String, dynamic> toJson() {
    final prefix = this.prefix;
    return {
      'Prefix': prefix,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final prefix = this.prefix;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Prefix', prefix),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum InventoryFormat {
  csv('CSV'),
  orc('ORC'),
  parquet('Parquet'),
  ;

  final String value;

  const InventoryFormat(this.value);

  static InventoryFormat fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum InventoryFormat'));
}

enum InventoryFrequency {
  daily('Daily'),
  weekly('Weekly'),
  ;

  final String value;

  const InventoryFrequency(this.value);

  static InventoryFrequency fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InventoryFrequency'));
}

enum InventoryIncludedObjectVersions {
  all('All'),
  current('Current'),
  ;

  final String value;

  const InventoryIncludedObjectVersions(this.value);

  static InventoryIncludedObjectVersions fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InventoryIncludedObjectVersions'));
}

enum InventoryOptionalField {
  size('Size'),
  lastModifiedDate('LastModifiedDate'),
  storageClass('StorageClass'),
  eTag('ETag'),
  isMultipartUploaded('IsMultipartUploaded'),
  replicationStatus('ReplicationStatus'),
  encryptionStatus('EncryptionStatus'),
  objectLockRetainUntilDate('ObjectLockRetainUntilDate'),
  objectLockMode('ObjectLockMode'),
  objectLockLegalHoldStatus('ObjectLockLegalHoldStatus'),
  intelligentTieringAccessTier('IntelligentTieringAccessTier'),
  bucketKeyStatus('BucketKeyStatus'),
  checksumAlgorithm('ChecksumAlgorithm'),
  objectAccessControlList('ObjectAccessControlList'),
  objectOwner('ObjectOwner'),
  ;

  final String value;

  const InventoryOptionalField(this.value);

  static InventoryOptionalField fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InventoryOptionalField'));
}

/// Contains the bucket name, file format, bucket owner (optional), and prefix
/// (optional) where inventory results are published.
class InventoryS3BucketDestination {
  /// The Amazon Resource Name (ARN) of the bucket where inventory results will be
  /// published.
  final String bucket;

  /// Specifies the output format of the inventory results.
  final InventoryFormat format;

  /// The account ID that owns the destination S3 bucket. If no account ID is
  /// provided, the owner is not validated before exporting data.
  /// <note>
  /// Although this value is optional, we strongly recommend that you set it to
  /// help prevent problems if the destination bucket ownership changes.
  /// </note>
  final String? accountId;

  /// Contains the type of server-side encryption used to encrypt the inventory
  /// results.
  final InventoryEncryption? encryption;

  /// The prefix that is prepended to all inventory results.
  final String? prefix;

  InventoryS3BucketDestination({
    required this.bucket,
    required this.format,
    this.accountId,
    this.encryption,
    this.prefix,
  });
  factory InventoryS3BucketDestination.fromXml(_s.XmlElement elem) {
    return InventoryS3BucketDestination(
      bucket: _s.extractXmlStringValue(elem, 'Bucket')!,
      format: _s
          .extractXmlStringValue(elem, 'Format')!
          .let(InventoryFormat.fromString),
      accountId: _s.extractXmlStringValue(elem, 'AccountId'),
      encryption: _s
          .extractXmlChild(elem, 'Encryption')
          ?.let(InventoryEncryption.fromXml),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
    );
  }

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final format = this.format;
    final accountId = this.accountId;
    final encryption = this.encryption;
    final prefix = this.prefix;
    return {
      'Bucket': bucket,
      'Format': format.value,
      if (accountId != null) 'AccountId': accountId,
      if (encryption != null) 'Encryption': encryption,
      if (prefix != null) 'Prefix': prefix,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final bucket = this.bucket;
    final format = this.format;
    final accountId = this.accountId;
    final encryption = this.encryption;
    final prefix = this.prefix;
    final $children = <_s.XmlNode>[
      if (accountId != null) _s.encodeXmlStringValue('AccountId', accountId),
      _s.encodeXmlStringValue('Bucket', bucket),
      _s.encodeXmlStringValue('Format', format.value),
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (encryption != null) encryption.toXml('Encryption'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the schedule for generating inventory results.
class InventorySchedule {
  /// Specifies how frequently inventory results are produced.
  final InventoryFrequency frequency;

  InventorySchedule({
    required this.frequency,
  });
  factory InventorySchedule.fromXml(_s.XmlElement elem) {
    return InventorySchedule(
      frequency: _s
          .extractXmlStringValue(elem, 'Frequency')!
          .let(InventoryFrequency.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final frequency = this.frequency;
    return {
      'Frequency': frequency.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final frequency = this.frequency;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Frequency', frequency.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies JSON as object's input serialization format.
class JSONInput {
  /// The type of JSON. Valid values: Document, Lines.
  final JSONType? type;

  JSONInput({
    this.type,
  });

  Map<String, dynamic> toJson() {
    final type = this.type;
    return {
      if (type != null) 'Type': type.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final type = this.type;
    final $children = <_s.XmlNode>[
      if (type != null) _s.encodeXmlStringValue('Type', type.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies JSON as request's output serialization format.
class JSONOutput {
  /// The value used to separate individual records in the output. If no value is
  /// specified, Amazon S3 uses a newline character ('\n').
  final String? recordDelimiter;

  JSONOutput({
    this.recordDelimiter,
  });

  Map<String, dynamic> toJson() {
    final recordDelimiter = this.recordDelimiter;
    return {
      if (recordDelimiter != null) 'RecordDelimiter': recordDelimiter,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final recordDelimiter = this.recordDelimiter;
    final $children = <_s.XmlNode>[
      if (recordDelimiter != null)
        _s.encodeXmlStringValue('RecordDelimiter', recordDelimiter),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum JSONType {
  document('DOCUMENT'),
  lines('LINES'),
  ;

  final String value;

  const JSONType(this.value);

  static JSONType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum JSONType'));
}

/// A container for specifying the configuration for Lambda notifications.
class LambdaFunctionConfiguration {
  /// The Amazon S3 bucket event for which to invoke the Lambda function. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Supported
  /// Event Types</a> in the <i>Amazon S3 User Guide</i>.
  final List<Event> events;

  /// The Amazon Resource Name (ARN) of the Lambda function that Amazon S3 invokes
  /// when the specified event type occurs.
  final String lambdaFunctionArn;
  final NotificationConfigurationFilter? filter;
  final String? id;

  LambdaFunctionConfiguration({
    required this.events,
    required this.lambdaFunctionArn,
    this.filter,
    this.id,
  });
  factory LambdaFunctionConfiguration.fromXml(_s.XmlElement elem) {
    return LambdaFunctionConfiguration(
      events: _s
          .extractXmlStringListValues(elem, 'Event')
          .map(Event.fromString)
          .toList(),
      lambdaFunctionArn: _s.extractXmlStringValue(elem, 'CloudFunction')!,
      filter: _s
          .extractXmlChild(elem, 'Filter')
          ?.let(NotificationConfigurationFilter.fromXml),
      id: _s.extractXmlStringValue(elem, 'Id'),
    );
  }

  Map<String, dynamic> toJson() {
    final events = this.events;
    final lambdaFunctionArn = this.lambdaFunctionArn;
    final filter = this.filter;
    final id = this.id;
    return {
      'Event': events.map((e) => e.value).toList(),
      'CloudFunction': lambdaFunctionArn,
      if (filter != null) 'Filter': filter,
      if (id != null) 'Id': id,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final events = this.events;
    final lambdaFunctionArn = this.lambdaFunctionArn;
    final filter = this.filter;
    final id = this.id;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('Id', id),
      _s.encodeXmlStringValue('CloudFunction', lambdaFunctionArn),
      ...events.map((e) => _s.encodeXmlStringValue('Event', e.value)),
      if (filter != null) filter.toXml('Filter'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for lifecycle rules. You can add as many as 1000 rules.
///
/// For more information see, <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html">Managing
/// your storage lifecycle</a> in the <i>Amazon S3 User Guide</i>.
class LifecycleConfiguration {
  /// Specifies lifecycle configuration rules for an Amazon S3 bucket.
  final List<Rule> rules;

  LifecycleConfiguration({
    required this.rules,
  });

  Map<String, dynamic> toJson() {
    final rules = this.rules;
    return {
      'Rule': rules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final rules = this.rules;
    final $children = <_s.XmlNode>[
      ...rules.map((e) => e.toXml('Rule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for the expiration for the lifecycle of the object.
///
/// For more information see, <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html">Managing
/// your storage lifecycle</a> in the <i>Amazon S3 User Guide</i>.
class LifecycleExpiration {
  /// Indicates at what date the object is to be moved or deleted. The date value
  /// must conform to the ISO 8601 format. The time is always midnight UTC.
  final DateTime? date;

  /// Indicates the lifetime, in days, of the objects that are subject to the
  /// rule. The value must be a non-zero positive integer.
  final int? days;

  /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent
  /// versions. If set to true, the delete marker will be expired; if set to false
  /// the policy takes no action. This cannot be specified with Days or Date in a
  /// Lifecycle Expiration Policy.
  final bool? expiredObjectDeleteMarker;

  LifecycleExpiration({
    this.date,
    this.days,
    this.expiredObjectDeleteMarker,
  });
  factory LifecycleExpiration.fromXml(_s.XmlElement elem) {
    return LifecycleExpiration(
      date: _s.extractXmlDateTimeValue(elem, 'Date',
          parser: _s.timeStampFromJson),
      days: _s.extractXmlIntValue(elem, 'Days'),
      expiredObjectDeleteMarker:
          _s.extractXmlBoolValue(elem, 'ExpiredObjectDeleteMarker'),
    );
  }

  Map<String, dynamic> toJson() {
    final date = this.date;
    final days = this.days;
    final expiredObjectDeleteMarker = this.expiredObjectDeleteMarker;
    return {
      if (date != null) 'Date': iso8601ToJson(date),
      if (days != null) 'Days': days,
      if (expiredObjectDeleteMarker != null)
        'ExpiredObjectDeleteMarker': expiredObjectDeleteMarker,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final date = this.date;
    final days = this.days;
    final expiredObjectDeleteMarker = this.expiredObjectDeleteMarker;
    final $children = <_s.XmlNode>[
      if (date != null)
        _s.encodeXmlDateTimeValue('Date', date, formatter: _s.iso8601ToJson),
      if (days != null) _s.encodeXmlIntValue('Days', days),
      if (expiredObjectDeleteMarker != null)
        _s.encodeXmlBoolValue(
            'ExpiredObjectDeleteMarker', expiredObjectDeleteMarker),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A lifecycle rule for individual objects in an Amazon S3 bucket.
///
/// For more information see, <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html">Managing
/// your storage lifecycle</a> in the <i>Amazon S3 User Guide</i>.
class LifecycleRule {
  /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule
  /// is not currently being applied.
  final ExpirationStatus status;
  final AbortIncompleteMultipartUpload? abortIncompleteMultipartUpload;

  /// Specifies the expiration for the lifecycle of the object in the form of
  /// date, days and, whether the object has a delete marker.
  final LifecycleExpiration? expiration;

  /// The <code>Filter</code> is used to identify objects that a Lifecycle Rule
  /// applies to. A <code>Filter</code> must have exactly one of
  /// <code>Prefix</code>, <code>Tag</code>, or <code>And</code> specified.
  /// <code>Filter</code> is required if the <code>LifecycleRule</code> does not
  /// contain a <code>Prefix</code> element.
  final LifecycleRuleFilter? filter;

  /// Unique identifier for the rule. The value cannot be longer than 255
  /// characters.
  final String? id;
  final NoncurrentVersionExpiration? noncurrentVersionExpiration;

  /// Specifies the transition rule for the lifecycle rule that describes when
  /// noncurrent objects transition to a specific storage class. If your bucket is
  /// versioning-enabled (or versioning is suspended), you can set this action to
  /// request that Amazon S3 transition noncurrent object versions to a specific
  /// storage class at a set period in the object's lifetime.
  final List<NoncurrentVersionTransition>? noncurrentVersionTransitions;

  /// Prefix identifying one or more objects to which the rule applies. This is no
  /// longer used; use <code>Filter</code> instead.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? prefix;

  /// Specifies when an Amazon S3 object transitions to a specified storage class.
  final List<Transition>? transitions;

  LifecycleRule({
    required this.status,
    this.abortIncompleteMultipartUpload,
    this.expiration,
    this.filter,
    this.id,
    this.noncurrentVersionExpiration,
    this.noncurrentVersionTransitions,
    this.prefix,
    this.transitions,
  });
  factory LifecycleRule.fromXml(_s.XmlElement elem) {
    return LifecycleRule(
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(ExpirationStatus.fromString),
      abortIncompleteMultipartUpload: _s
          .extractXmlChild(elem, 'AbortIncompleteMultipartUpload')
          ?.let(AbortIncompleteMultipartUpload.fromXml),
      expiration: _s
          .extractXmlChild(elem, 'Expiration')
          ?.let(LifecycleExpiration.fromXml),
      filter:
          _s.extractXmlChild(elem, 'Filter')?.let(LifecycleRuleFilter.fromXml),
      id: _s.extractXmlStringValue(elem, 'ID'),
      noncurrentVersionExpiration: _s
          .extractXmlChild(elem, 'NoncurrentVersionExpiration')
          ?.let(NoncurrentVersionExpiration.fromXml),
      noncurrentVersionTransitions: elem
          .findElements('NoncurrentVersionTransition')
          .map(NoncurrentVersionTransition.fromXml)
          .toList(),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      transitions:
          elem.findElements('Transition').map(Transition.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final abortIncompleteMultipartUpload = this.abortIncompleteMultipartUpload;
    final expiration = this.expiration;
    final filter = this.filter;
    final id = this.id;
    final noncurrentVersionExpiration = this.noncurrentVersionExpiration;
    final noncurrentVersionTransitions = this.noncurrentVersionTransitions;
    final prefix = this.prefix;
    final transitions = this.transitions;
    return {
      'Status': status.value,
      if (abortIncompleteMultipartUpload != null)
        'AbortIncompleteMultipartUpload': abortIncompleteMultipartUpload,
      if (expiration != null) 'Expiration': expiration,
      if (filter != null) 'Filter': filter,
      if (id != null) 'ID': id,
      if (noncurrentVersionExpiration != null)
        'NoncurrentVersionExpiration': noncurrentVersionExpiration,
      if (noncurrentVersionTransitions != null)
        'NoncurrentVersionTransition': noncurrentVersionTransitions,
      if (prefix != null) 'Prefix': prefix,
      if (transitions != null) 'Transition': transitions,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final abortIncompleteMultipartUpload = this.abortIncompleteMultipartUpload;
    final expiration = this.expiration;
    final filter = this.filter;
    final id = this.id;
    final noncurrentVersionExpiration = this.noncurrentVersionExpiration;
    final noncurrentVersionTransitions = this.noncurrentVersionTransitions;
    final prefix = this.prefix;
    final transitions = this.transitions;
    final $children = <_s.XmlNode>[
      if (expiration != null) expiration.toXml('Expiration'),
      if (id != null) _s.encodeXmlStringValue('ID', id),
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (filter != null) filter.toXml('Filter'),
      _s.encodeXmlStringValue('Status', status.value),
      if (transitions != null) ...transitions.map((e) => e.toXml('Transition')),
      if (noncurrentVersionTransitions != null)
        ...noncurrentVersionTransitions
            .map((e) => e.toXml('NoncurrentVersionTransition')),
      if (noncurrentVersionExpiration != null)
        noncurrentVersionExpiration.toXml('NoncurrentVersionExpiration'),
      if (abortIncompleteMultipartUpload != null)
        abortIncompleteMultipartUpload.toXml('AbortIncompleteMultipartUpload'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// This is used in a Lifecycle Rule Filter to apply a logical AND to two or
/// more predicates. The Lifecycle Rule will apply to any object matching all of
/// the predicates configured inside the And operator.
class LifecycleRuleAndOperator {
  /// Minimum object size to which the rule applies.
  final int? objectSizeGreaterThan;

  /// Maximum object size to which the rule applies.
  final int? objectSizeLessThan;

  /// Prefix identifying one or more objects to which the rule applies.
  final String? prefix;

  /// All of these tags must exist in the object's tag set in order for the rule
  /// to apply.
  final List<Tag>? tags;

  LifecycleRuleAndOperator({
    this.objectSizeGreaterThan,
    this.objectSizeLessThan,
    this.prefix,
    this.tags,
  });
  factory LifecycleRuleAndOperator.fromXml(_s.XmlElement elem) {
    return LifecycleRuleAndOperator(
      objectSizeGreaterThan:
          _s.extractXmlIntValue(elem, 'ObjectSizeGreaterThan'),
      objectSizeLessThan: _s.extractXmlIntValue(elem, 'ObjectSizeLessThan'),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tags: elem.findElements('Tag').map(Tag.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final objectSizeGreaterThan = this.objectSizeGreaterThan;
    final objectSizeLessThan = this.objectSizeLessThan;
    final prefix = this.prefix;
    final tags = this.tags;
    return {
      if (objectSizeGreaterThan != null)
        'ObjectSizeGreaterThan': objectSizeGreaterThan,
      if (objectSizeLessThan != null) 'ObjectSizeLessThan': objectSizeLessThan,
      if (prefix != null) 'Prefix': prefix,
      if (tags != null) 'Tag': tags,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final objectSizeGreaterThan = this.objectSizeGreaterThan;
    final objectSizeLessThan = this.objectSizeLessThan;
    final prefix = this.prefix;
    final tags = this.tags;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tags != null) ...tags.map((e) => e.toXml('Tag')),
      if (objectSizeGreaterThan != null)
        _s.encodeXmlIntValue('ObjectSizeGreaterThan', objectSizeGreaterThan),
      if (objectSizeLessThan != null)
        _s.encodeXmlIntValue('ObjectSizeLessThan', objectSizeLessThan),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The <code>Filter</code> is used to identify objects that a Lifecycle Rule
/// applies to. A <code>Filter</code> can have exactly one of
/// <code>Prefix</code>, <code>Tag</code>, <code>ObjectSizeGreaterThan</code>,
/// <code>ObjectSizeLessThan</code>, or <code>And</code> specified. If the
/// <code>Filter</code> element is left empty, the Lifecycle Rule applies to all
/// objects in the bucket.
class LifecycleRuleFilter {
  final LifecycleRuleAndOperator? and;

  /// Minimum object size to which the rule applies.
  final int? objectSizeGreaterThan;

  /// Maximum object size to which the rule applies.
  final int? objectSizeLessThan;

  /// Prefix identifying one or more objects to which the rule applies.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? prefix;

  /// This tag must exist in the object's tag set in order for the rule to apply.
  final Tag? tag;

  LifecycleRuleFilter({
    this.and,
    this.objectSizeGreaterThan,
    this.objectSizeLessThan,
    this.prefix,
    this.tag,
  });
  factory LifecycleRuleFilter.fromXml(_s.XmlElement elem) {
    return LifecycleRuleFilter(
      and: _s
          .extractXmlChild(elem, 'And')
          ?.let(LifecycleRuleAndOperator.fromXml),
      objectSizeGreaterThan:
          _s.extractXmlIntValue(elem, 'ObjectSizeGreaterThan'),
      objectSizeLessThan: _s.extractXmlIntValue(elem, 'ObjectSizeLessThan'),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tag: _s.extractXmlChild(elem, 'Tag')?.let(Tag.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final and = this.and;
    final objectSizeGreaterThan = this.objectSizeGreaterThan;
    final objectSizeLessThan = this.objectSizeLessThan;
    final prefix = this.prefix;
    final tag = this.tag;
    return {
      if (and != null) 'And': and,
      if (objectSizeGreaterThan != null)
        'ObjectSizeGreaterThan': objectSizeGreaterThan,
      if (objectSizeLessThan != null) 'ObjectSizeLessThan': objectSizeLessThan,
      if (prefix != null) 'Prefix': prefix,
      if (tag != null) 'Tag': tag,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final and = this.and;
    final objectSizeGreaterThan = this.objectSizeGreaterThan;
    final objectSizeLessThan = this.objectSizeLessThan;
    final prefix = this.prefix;
    final tag = this.tag;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tag != null) tag.toXml('Tag'),
      if (objectSizeGreaterThan != null)
        _s.encodeXmlIntValue('ObjectSizeGreaterThan', objectSizeGreaterThan),
      if (objectSizeLessThan != null)
        _s.encodeXmlIntValue('ObjectSizeLessThan', objectSizeLessThan),
      if (and != null) and.toXml('And'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class ListBucketAnalyticsConfigurationsOutput {
  /// The list of analytics configurations for a bucket.
  final List<AnalyticsConfiguration>? analyticsConfigurationList;

  /// The marker that is used as a starting point for this analytics configuration
  /// list response. This value is present if it was sent in the request.
  final String? continuationToken;

  /// Indicates whether the returned list of analytics configurations is complete.
  /// A value of true indicates that the list is not complete and the
  /// NextContinuationToken will be provided for a subsequent request.
  final bool? isTruncated;

  /// <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is
  /// true, which indicates that there are more analytics configurations to list.
  /// The next request must include this <code>NextContinuationToken</code>. The
  /// token is obfuscated and is not a usable value.
  final String? nextContinuationToken;

  ListBucketAnalyticsConfigurationsOutput({
    this.analyticsConfigurationList,
    this.continuationToken,
    this.isTruncated,
    this.nextContinuationToken,
  });
  factory ListBucketAnalyticsConfigurationsOutput.fromXml(_s.XmlElement elem) {
    return ListBucketAnalyticsConfigurationsOutput(
      analyticsConfigurationList: elem
          .findElements('AnalyticsConfiguration')
          .map(AnalyticsConfiguration.fromXml)
          .toList(),
      continuationToken: _s.extractXmlStringValue(elem, 'ContinuationToken'),
      isTruncated: _s.extractXmlBoolValue(elem, 'IsTruncated'),
      nextContinuationToken:
          _s.extractXmlStringValue(elem, 'NextContinuationToken'),
    );
  }

  Map<String, dynamic> toJson() {
    final analyticsConfigurationList = this.analyticsConfigurationList;
    final continuationToken = this.continuationToken;
    final isTruncated = this.isTruncated;
    final nextContinuationToken = this.nextContinuationToken;
    return {
      if (analyticsConfigurationList != null)
        'AnalyticsConfiguration': analyticsConfigurationList,
      if (continuationToken != null) 'ContinuationToken': continuationToken,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (nextContinuationToken != null)
        'NextContinuationToken': nextContinuationToken,
    };
  }
}

class ListBucketIntelligentTieringConfigurationsOutput {
  /// The <code>ContinuationToken</code> that represents a placeholder from where
  /// this request should begin.
  final String? continuationToken;

  /// The list of S3 Intelligent-Tiering configurations for a bucket.
  final List<IntelligentTieringConfiguration>?
      intelligentTieringConfigurationList;

  /// Indicates whether the returned list of analytics configurations is complete.
  /// A value of <code>true</code> indicates that the list is not complete and the
  /// <code>NextContinuationToken</code> will be provided for a subsequent
  /// request.
  final bool? isTruncated;

  /// The marker used to continue this inventory configuration listing. Use the
  /// <code>NextContinuationToken</code> from this response to continue the
  /// listing in a subsequent request. The continuation token is an opaque value
  /// that Amazon S3 understands.
  final String? nextContinuationToken;

  ListBucketIntelligentTieringConfigurationsOutput({
    this.continuationToken,
    this.intelligentTieringConfigurationList,
    this.isTruncated,
    this.nextContinuationToken,
  });
  factory ListBucketIntelligentTieringConfigurationsOutput.fromXml(
      _s.XmlElement elem) {
    return ListBucketIntelligentTieringConfigurationsOutput(
      continuationToken: _s.extractXmlStringValue(elem, 'ContinuationToken'),
      intelligentTieringConfigurationList: elem
          .findElements('IntelligentTieringConfiguration')
          .map(IntelligentTieringConfiguration.fromXml)
          .toList(),
      isTruncated: _s.extractXmlBoolValue(elem, 'IsTruncated'),
      nextContinuationToken:
          _s.extractXmlStringValue(elem, 'NextContinuationToken'),
    );
  }

  Map<String, dynamic> toJson() {
    final continuationToken = this.continuationToken;
    final intelligentTieringConfigurationList =
        this.intelligentTieringConfigurationList;
    final isTruncated = this.isTruncated;
    final nextContinuationToken = this.nextContinuationToken;
    return {
      if (continuationToken != null) 'ContinuationToken': continuationToken,
      if (intelligentTieringConfigurationList != null)
        'IntelligentTieringConfiguration': intelligentTieringConfigurationList,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (nextContinuationToken != null)
        'NextContinuationToken': nextContinuationToken,
    };
  }
}

class ListBucketInventoryConfigurationsOutput {
  /// If sent in the request, the marker that is used as a starting point for this
  /// inventory configuration list response.
  final String? continuationToken;

  /// The list of inventory configurations for a bucket.
  final List<InventoryConfiguration>? inventoryConfigurationList;

  /// Tells whether the returned list of inventory configurations is complete. A
  /// value of true indicates that the list is not complete and the
  /// NextContinuationToken is provided for a subsequent request.
  final bool? isTruncated;

  /// The marker used to continue this inventory configuration listing. Use the
  /// <code>NextContinuationToken</code> from this response to continue the
  /// listing in a subsequent request. The continuation token is an opaque value
  /// that Amazon S3 understands.
  final String? nextContinuationToken;

  ListBucketInventoryConfigurationsOutput({
    this.continuationToken,
    this.inventoryConfigurationList,
    this.isTruncated,
    this.nextContinuationToken,
  });
  factory ListBucketInventoryConfigurationsOutput.fromXml(_s.XmlElement elem) {
    return ListBucketInventoryConfigurationsOutput(
      continuationToken: _s.extractXmlStringValue(elem, 'ContinuationToken'),
      inventoryConfigurationList: elem
          .findElements('InventoryConfiguration')
          .map(InventoryConfiguration.fromXml)
          .toList(),
      isTruncated: _s.extractXmlBoolValue(elem, 'IsTruncated'),
      nextContinuationToken:
          _s.extractXmlStringValue(elem, 'NextContinuationToken'),
    );
  }

  Map<String, dynamic> toJson() {
    final continuationToken = this.continuationToken;
    final inventoryConfigurationList = this.inventoryConfigurationList;
    final isTruncated = this.isTruncated;
    final nextContinuationToken = this.nextContinuationToken;
    return {
      if (continuationToken != null) 'ContinuationToken': continuationToken,
      if (inventoryConfigurationList != null)
        'InventoryConfiguration': inventoryConfigurationList,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (nextContinuationToken != null)
        'NextContinuationToken': nextContinuationToken,
    };
  }
}

class ListBucketMetricsConfigurationsOutput {
  /// The marker that is used as a starting point for this metrics configuration
  /// list response. This value is present if it was sent in the request.
  final String? continuationToken;

  /// Indicates whether the returned list of metrics configurations is complete. A
  /// value of true indicates that the list is not complete and the
  /// NextContinuationToken will be provided for a subsequent request.
  final bool? isTruncated;

  /// The list of metrics configurations for a bucket.
  final List<MetricsConfiguration>? metricsConfigurationList;

  /// The marker used to continue a metrics configuration listing that has been
  /// truncated. Use the <code>NextContinuationToken</code> from a previously
  /// truncated list response to continue the listing. The continuation token is
  /// an opaque value that Amazon S3 understands.
  final String? nextContinuationToken;

  ListBucketMetricsConfigurationsOutput({
    this.continuationToken,
    this.isTruncated,
    this.metricsConfigurationList,
    this.nextContinuationToken,
  });
  factory ListBucketMetricsConfigurationsOutput.fromXml(_s.XmlElement elem) {
    return ListBucketMetricsConfigurationsOutput(
      continuationToken: _s.extractXmlStringValue(elem, 'ContinuationToken'),
      isTruncated: _s.extractXmlBoolValue(elem, 'IsTruncated'),
      metricsConfigurationList: elem
          .findElements('MetricsConfiguration')
          .map(MetricsConfiguration.fromXml)
          .toList(),
      nextContinuationToken:
          _s.extractXmlStringValue(elem, 'NextContinuationToken'),
    );
  }

  Map<String, dynamic> toJson() {
    final continuationToken = this.continuationToken;
    final isTruncated = this.isTruncated;
    final metricsConfigurationList = this.metricsConfigurationList;
    final nextContinuationToken = this.nextContinuationToken;
    return {
      if (continuationToken != null) 'ContinuationToken': continuationToken,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (metricsConfigurationList != null)
        'MetricsConfiguration': metricsConfigurationList,
      if (nextContinuationToken != null)
        'NextContinuationToken': nextContinuationToken,
    };
  }
}

class ListBucketsOutput {
  /// The list of buckets owned by the requester.
  final List<Bucket>? buckets;

  /// The owner of the buckets listed.
  final Owner? owner;

  ListBucketsOutput({
    this.buckets,
    this.owner,
  });
  factory ListBucketsOutput.fromXml(_s.XmlElement elem) {
    return ListBucketsOutput(
      buckets: _s.extractXmlChild(elem, 'Buckets')?.let(
          (elem) => elem.findElements('Bucket').map(Bucket.fromXml).toList()),
      owner: _s.extractXmlChild(elem, 'Owner')?.let(Owner.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final buckets = this.buckets;
    final owner = this.owner;
    return {
      if (buckets != null) 'Buckets': buckets,
      if (owner != null) 'Owner': owner,
    };
  }
}

class ListDirectoryBucketsOutput {
  /// The list of buckets owned by the requester.
  final List<Bucket>? buckets;

  /// If <code>ContinuationToken</code> was sent with the request, it is included
  /// in the response. You can use the returned <code>ContinuationToken</code> for
  /// pagination of the list response.
  final String? continuationToken;

  ListDirectoryBucketsOutput({
    this.buckets,
    this.continuationToken,
  });
  factory ListDirectoryBucketsOutput.fromXml(_s.XmlElement elem) {
    return ListDirectoryBucketsOutput(
      buckets: _s.extractXmlChild(elem, 'Buckets')?.let(
          (elem) => elem.findElements('Bucket').map(Bucket.fromXml).toList()),
      continuationToken: _s.extractXmlStringValue(elem, 'ContinuationToken'),
    );
  }

  Map<String, dynamic> toJson() {
    final buckets = this.buckets;
    final continuationToken = this.continuationToken;
    return {
      if (buckets != null) 'Buckets': buckets,
      if (continuationToken != null) 'ContinuationToken': continuationToken,
    };
  }
}

class ListMultipartUploadsOutput {
  /// The name of the bucket to which the multipart upload was initiated. Does not
  /// return the access point ARN or access point alias if used.
  final String? bucket;

  /// If you specify a delimiter in the request, then the result returns each
  /// distinct key prefix containing the delimiter in a
  /// <code>CommonPrefixes</code> element. The distinct key prefixes are returned
  /// in the <code>Prefix</code> child element.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, only prefixes that end in
  /// a delimiter (<code>/</code>) are supported.
  /// </note>
  final List<CommonPrefix>? commonPrefixes;

  /// Contains the delimiter you specified in the request. If you don't specify a
  /// delimiter in your request, this element is absent from the response.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, <code>/</code> is the only
  /// supported delimiter.
  /// </note>
  final String? delimiter;

  /// Encoding type used by Amazon S3 to encode object keys in the response.
  ///
  /// If you specify the <code>encoding-type</code> request parameter, Amazon S3
  /// includes this element in the response, and returns encoded key name values
  /// in the following response elements:
  ///
  /// <code>Delimiter</code>, <code>KeyMarker</code>, <code>Prefix</code>,
  /// <code>NextKeyMarker</code>, <code>Key</code>.
  final EncodingType? encodingType;

  /// Indicates whether the returned list of multipart uploads is truncated. A
  /// value of true indicates that the list was truncated. The list can be
  /// truncated if the number of multipart uploads exceeds the limit allowed or
  /// specified by max uploads.
  final bool? isTruncated;

  /// The key at or after which the listing began.
  final String? keyMarker;

  /// Maximum number of multipart uploads that could have been included in the
  /// response.
  final int? maxUploads;

  /// When a list is truncated, this element specifies the value that should be
  /// used for the key-marker request parameter in a subsequent request.
  final String? nextKeyMarker;

  /// When a list is truncated, this element specifies the value that should be
  /// used for the <code>upload-id-marker</code> request parameter in a subsequent
  /// request.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? nextUploadIdMarker;

  /// When a prefix is provided in the request, this field contains the specified
  /// prefix. The result contains only keys starting with the specified prefix.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, only prefixes that end in
  /// a delimiter (<code>/</code>) are supported.
  /// </note>
  final String? prefix;
  final RequestCharged? requestCharged;

  /// Together with key-marker, specifies the multipart upload after which listing
  /// should begin. If key-marker is not specified, the upload-id-marker parameter
  /// is ignored. Otherwise, any multipart uploads for a key equal to the
  /// key-marker might be included in the list only if they have an upload ID
  /// lexicographically greater than the specified <code>upload-id-marker</code>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? uploadIdMarker;

  /// Container for elements related to a particular multipart upload. A response
  /// can contain zero or more <code>Upload</code> elements.
  final List<MultipartUpload>? uploads;

  ListMultipartUploadsOutput({
    this.bucket,
    this.commonPrefixes,
    this.delimiter,
    this.encodingType,
    this.isTruncated,
    this.keyMarker,
    this.maxUploads,
    this.nextKeyMarker,
    this.nextUploadIdMarker,
    this.prefix,
    this.requestCharged,
    this.uploadIdMarker,
    this.uploads,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final commonPrefixes = this.commonPrefixes;
    final delimiter = this.delimiter;
    final encodingType = this.encodingType;
    final isTruncated = this.isTruncated;
    final keyMarker = this.keyMarker;
    final maxUploads = this.maxUploads;
    final nextKeyMarker = this.nextKeyMarker;
    final nextUploadIdMarker = this.nextUploadIdMarker;
    final prefix = this.prefix;
    final requestCharged = this.requestCharged;
    final uploadIdMarker = this.uploadIdMarker;
    final uploads = this.uploads;
    return {
      if (bucket != null) 'Bucket': bucket,
      if (commonPrefixes != null) 'CommonPrefixes': commonPrefixes,
      if (delimiter != null) 'Delimiter': delimiter,
      if (encodingType != null) 'EncodingType': encodingType.value,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (keyMarker != null) 'KeyMarker': keyMarker,
      if (maxUploads != null) 'MaxUploads': maxUploads,
      if (nextKeyMarker != null) 'NextKeyMarker': nextKeyMarker,
      if (nextUploadIdMarker != null) 'NextUploadIdMarker': nextUploadIdMarker,
      if (prefix != null) 'Prefix': prefix,
      if (uploadIdMarker != null) 'UploadIdMarker': uploadIdMarker,
      if (uploads != null) 'Upload': uploads,
    };
  }
}

class ListObjectVersionsOutput {
  /// All of the keys rolled up into a common prefix count as a single return when
  /// calculating the number of returns.
  final List<CommonPrefix>? commonPrefixes;

  /// Container for an object that is a delete marker.
  final List<DeleteMarkerEntry>? deleteMarkers;

  /// The delimiter grouping the included keys. A delimiter is a character that
  /// you specify to group keys. All keys that contain the same string between the
  /// prefix and the first occurrence of the delimiter are grouped under a single
  /// result element in <code>CommonPrefixes</code>. These groups are counted as
  /// one result against the <code>max-keys</code> limitation. These keys are not
  /// returned elsewhere in the response.
  final String? delimiter;

  /// Encoding type used by Amazon S3 to encode object key names in the XML
  /// response.
  ///
  /// If you specify the <code>encoding-type</code> request parameter, Amazon S3
  /// includes this element in the response, and returns encoded key name values
  /// in the following response elements:
  ///
  /// <code>KeyMarker, NextKeyMarker, Prefix, Key</code>, and
  /// <code>Delimiter</code>.
  final EncodingType? encodingType;

  /// A flag that indicates whether Amazon S3 returned all of the results that
  /// satisfied the search criteria. If your results were truncated, you can make
  /// a follow-up paginated request by using the <code>NextKeyMarker</code> and
  /// <code>NextVersionIdMarker</code> response parameters as a starting place in
  /// another request to return the rest of the results.
  final bool? isTruncated;

  /// Marks the last key returned in a truncated response.
  final String? keyMarker;

  /// Specifies the maximum number of objects to return.
  final int? maxKeys;

  /// The bucket name.
  final String? name;

  /// When the number of responses exceeds the value of <code>MaxKeys</code>,
  /// <code>NextKeyMarker</code> specifies the first key not returned that
  /// satisfies the search criteria. Use this value for the key-marker request
  /// parameter in a subsequent request.
  final String? nextKeyMarker;

  /// When the number of responses exceeds the value of <code>MaxKeys</code>,
  /// <code>NextVersionIdMarker</code> specifies the first object version not
  /// returned that satisfies the search criteria. Use this value for the
  /// <code>version-id-marker</code> request parameter in a subsequent request.
  final String? nextVersionIdMarker;

  /// Selects objects that start with the value supplied by this parameter.
  final String? prefix;
  final RequestCharged? requestCharged;

  /// Marks the last version of the key returned in a truncated response.
  final String? versionIdMarker;

  /// Container for version information.
  final List<ObjectVersion>? versions;

  ListObjectVersionsOutput({
    this.commonPrefixes,
    this.deleteMarkers,
    this.delimiter,
    this.encodingType,
    this.isTruncated,
    this.keyMarker,
    this.maxKeys,
    this.name,
    this.nextKeyMarker,
    this.nextVersionIdMarker,
    this.prefix,
    this.requestCharged,
    this.versionIdMarker,
    this.versions,
  });

  Map<String, dynamic> toJson() {
    final commonPrefixes = this.commonPrefixes;
    final deleteMarkers = this.deleteMarkers;
    final delimiter = this.delimiter;
    final encodingType = this.encodingType;
    final isTruncated = this.isTruncated;
    final keyMarker = this.keyMarker;
    final maxKeys = this.maxKeys;
    final name = this.name;
    final nextKeyMarker = this.nextKeyMarker;
    final nextVersionIdMarker = this.nextVersionIdMarker;
    final prefix = this.prefix;
    final requestCharged = this.requestCharged;
    final versionIdMarker = this.versionIdMarker;
    final versions = this.versions;
    return {
      if (commonPrefixes != null) 'CommonPrefixes': commonPrefixes,
      if (deleteMarkers != null) 'DeleteMarker': deleteMarkers,
      if (delimiter != null) 'Delimiter': delimiter,
      if (encodingType != null) 'EncodingType': encodingType.value,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (keyMarker != null) 'KeyMarker': keyMarker,
      if (maxKeys != null) 'MaxKeys': maxKeys,
      if (name != null) 'Name': name,
      if (nextKeyMarker != null) 'NextKeyMarker': nextKeyMarker,
      if (nextVersionIdMarker != null)
        'NextVersionIdMarker': nextVersionIdMarker,
      if (prefix != null) 'Prefix': prefix,
      if (versionIdMarker != null) 'VersionIdMarker': versionIdMarker,
      if (versions != null) 'Version': versions,
    };
  }
}

class ListObjectsOutput {
  /// All of the keys (up to 1,000) rolled up in a common prefix count as a single
  /// return when calculating the number of returns.
  ///
  /// A response can contain <code>CommonPrefixes</code> only if you specify a
  /// delimiter.
  ///
  /// <code>CommonPrefixes</code> contains all (if there are any) keys between
  /// <code>Prefix</code> and the next occurrence of the string specified by the
  /// delimiter.
  ///
  /// <code>CommonPrefixes</code> lists keys that act like subdirectories in the
  /// directory specified by <code>Prefix</code>.
  ///
  /// For example, if the prefix is <code>notes/</code> and the delimiter is a
  /// slash (<code>/</code>), as in <code>notes/summer/july</code>, the common
  /// prefix is <code>notes/summer/</code>. All of the keys that roll up into a
  /// common prefix count as a single return when calculating the number of
  /// returns.
  final List<CommonPrefix>? commonPrefixes;

  /// Metadata about each object returned.
  final List<Object>? contents;

  /// Causes keys that contain the same string between the prefix and the first
  /// occurrence of the delimiter to be rolled up into a single result element in
  /// the <code>CommonPrefixes</code> collection. These rolled-up keys are not
  /// returned elsewhere in the response. Each rolled-up result counts as only one
  /// return against the <code>MaxKeys</code> value.
  final String? delimiter;

  /// Encoding type used by Amazon S3 to encode object keys in the response. If
  /// using <code>url</code>, non-ASCII characters used in an object's key name
  /// will be URL encoded. For example, the object test_file(3).png will appear as
  /// test_file%283%29.png.
  final EncodingType? encodingType;

  /// A flag that indicates whether Amazon S3 returned all of the results that
  /// satisfied the search criteria.
  final bool? isTruncated;

  /// Indicates where in the bucket listing begins. Marker is included in the
  /// response if it was sent with the request.
  final String? marker;

  /// The maximum number of keys returned in the response body.
  final int? maxKeys;

  /// The bucket name.
  final String? name;

  /// When the response is truncated (the <code>IsTruncated</code> element value
  /// in the response is <code>true</code>), you can use the key name in this
  /// field as the <code>marker</code> parameter in the subsequent request to get
  /// the next set of objects. Amazon S3 lists objects in alphabetical order.
  /// <note>
  /// This element is returned only if you have the <code>delimiter</code> request
  /// parameter specified. If the response does not include the
  /// <code>NextMarker</code> element and it is truncated, you can use the value
  /// of the last <code>Key</code> element in the response as the
  /// <code>marker</code> parameter in the subsequent request to get the next set
  /// of object keys.
  /// </note>
  final String? nextMarker;

  /// Keys that begin with the indicated prefix.
  final String? prefix;
  final RequestCharged? requestCharged;

  ListObjectsOutput({
    this.commonPrefixes,
    this.contents,
    this.delimiter,
    this.encodingType,
    this.isTruncated,
    this.marker,
    this.maxKeys,
    this.name,
    this.nextMarker,
    this.prefix,
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final commonPrefixes = this.commonPrefixes;
    final contents = this.contents;
    final delimiter = this.delimiter;
    final encodingType = this.encodingType;
    final isTruncated = this.isTruncated;
    final marker = this.marker;
    final maxKeys = this.maxKeys;
    final name = this.name;
    final nextMarker = this.nextMarker;
    final prefix = this.prefix;
    final requestCharged = this.requestCharged;
    return {
      if (commonPrefixes != null) 'CommonPrefixes': commonPrefixes,
      if (contents != null) 'Contents': contents,
      if (delimiter != null) 'Delimiter': delimiter,
      if (encodingType != null) 'EncodingType': encodingType.value,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (marker != null) 'Marker': marker,
      if (maxKeys != null) 'MaxKeys': maxKeys,
      if (name != null) 'Name': name,
      if (nextMarker != null) 'NextMarker': nextMarker,
      if (prefix != null) 'Prefix': prefix,
    };
  }
}

class ListObjectsV2Output {
  /// All of the keys (up to 1,000) that share the same prefix are grouped
  /// together. When counting the total numbers of returns by this API operation,
  /// this group of keys is considered as one item.
  ///
  /// A response can contain <code>CommonPrefixes</code> only if you specify a
  /// delimiter.
  ///
  /// <code>CommonPrefixes</code> contains all (if there are any) keys between
  /// <code>Prefix</code> and the next occurrence of the string specified by a
  /// delimiter.
  ///
  /// <code>CommonPrefixes</code> lists keys that act like subdirectories in the
  /// directory specified by <code>Prefix</code>.
  ///
  /// For example, if the prefix is <code>notes/</code> and the delimiter is a
  /// slash (<code>/</code>) as in <code>notes/summer/july</code>, the common
  /// prefix is <code>notes/summer/</code>. All of the keys that roll up into a
  /// common prefix count as a single return when calculating the number of
  /// returns.
  /// <note>
  /// <ul>
  /// <li>
  /// <b>Directory buckets</b> - For directory buckets, only prefixes that end in
  /// a delimiter (<code>/</code>) are supported.
  /// </li>
  /// <li>
  /// <b>Directory buckets </b> - When you query <code>ListObjectsV2</code> with a
  /// delimiter during in-progress multipart uploads, the
  /// <code>CommonPrefixes</code> response parameter contains the prefixes that
  /// are associated with the in-progress multipart uploads. For more information
  /// about multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart
  /// Upload Overview</a> in the <i>Amazon S3 User Guide</i>.
  /// </li>
  /// </ul> </note>
  final List<CommonPrefix>? commonPrefixes;

  /// Metadata about each object returned.
  final List<Object>? contents;

  /// If <code>ContinuationToken</code> was sent with the request, it is included
  /// in the response. You can use the returned <code>ContinuationToken</code> for
  /// pagination of the list response. You can use this
  /// <code>ContinuationToken</code> for pagination of the list results.
  final String? continuationToken;

  /// Causes keys that contain the same string between the <code>prefix</code> and
  /// the first occurrence of the delimiter to be rolled up into a single result
  /// element in the <code>CommonPrefixes</code> collection. These rolled-up keys
  /// are not returned elsewhere in the response. Each rolled-up result counts as
  /// only one return against the <code>MaxKeys</code> value.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, <code>/</code> is the only
  /// supported delimiter.
  /// </note>
  final String? delimiter;

  /// Encoding type used by Amazon S3 to encode object key names in the XML
  /// response.
  ///
  /// If you specify the <code>encoding-type</code> request parameter, Amazon S3
  /// includes this element in the response, and returns encoded key name values
  /// in the following response elements:
  ///
  /// <code>Delimiter, Prefix, Key,</code> and <code>StartAfter</code>.
  final EncodingType? encodingType;

  /// Set to <code>false</code> if all of the results were returned. Set to
  /// <code>true</code> if more keys are available to return. If the number of
  /// results exceeds that specified by <code>MaxKeys</code>, all of the results
  /// might not be returned.
  final bool? isTruncated;

  /// <code>KeyCount</code> is the number of keys returned with this request.
  /// <code>KeyCount</code> will always be less than or equal to the
  /// <code>MaxKeys</code> field. For example, if you ask for 50 keys, your result
  /// will include 50 keys or fewer.
  final int? keyCount;

  /// Sets the maximum number of keys returned in the response. By default, the
  /// action returns up to 1,000 key names. The response might contain fewer keys
  /// but will never contain more.
  final int? maxKeys;

  /// The bucket name.
  final String? name;

  /// <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is
  /// true, which means there are more keys in the bucket that can be listed. The
  /// next list requests to Amazon S3 can be continued with this
  /// <code>NextContinuationToken</code>. <code>NextContinuationToken</code> is
  /// obfuscated and is not a real key
  final String? nextContinuationToken;

  /// Keys that begin with the indicated prefix.
  /// <note>
  /// <b>Directory buckets</b> - For directory buckets, only prefixes that end in
  /// a delimiter (<code>/</code>) are supported.
  /// </note>
  final String? prefix;
  final RequestCharged? requestCharged;

  /// If StartAfter was sent with the request, it is included in the response.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? startAfter;

  ListObjectsV2Output({
    this.commonPrefixes,
    this.contents,
    this.continuationToken,
    this.delimiter,
    this.encodingType,
    this.isTruncated,
    this.keyCount,
    this.maxKeys,
    this.name,
    this.nextContinuationToken,
    this.prefix,
    this.requestCharged,
    this.startAfter,
  });

  Map<String, dynamic> toJson() {
    final commonPrefixes = this.commonPrefixes;
    final contents = this.contents;
    final continuationToken = this.continuationToken;
    final delimiter = this.delimiter;
    final encodingType = this.encodingType;
    final isTruncated = this.isTruncated;
    final keyCount = this.keyCount;
    final maxKeys = this.maxKeys;
    final name = this.name;
    final nextContinuationToken = this.nextContinuationToken;
    final prefix = this.prefix;
    final requestCharged = this.requestCharged;
    final startAfter = this.startAfter;
    return {
      if (commonPrefixes != null) 'CommonPrefixes': commonPrefixes,
      if (contents != null) 'Contents': contents,
      if (continuationToken != null) 'ContinuationToken': continuationToken,
      if (delimiter != null) 'Delimiter': delimiter,
      if (encodingType != null) 'EncodingType': encodingType.value,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (keyCount != null) 'KeyCount': keyCount,
      if (maxKeys != null) 'MaxKeys': maxKeys,
      if (name != null) 'Name': name,
      if (nextContinuationToken != null)
        'NextContinuationToken': nextContinuationToken,
      if (prefix != null) 'Prefix': prefix,
      if (startAfter != null) 'StartAfter': startAfter,
    };
  }
}

class ListPartsOutput {
  /// If the bucket has a lifecycle rule configured with an action to abort
  /// incomplete multipart uploads and the prefix in the lifecycle rule matches
  /// the object name in the request, then the response includes this header
  /// indicating when the initiated multipart upload will become eligible for
  /// abort operation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
  /// Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration</a>.
  ///
  /// The response will also include the <code>x-amz-abort-rule-id</code> header
  /// that will provide the ID of the lifecycle configuration rule that defines
  /// this action.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final DateTime? abortDate;

  /// This header is returned along with the <code>x-amz-abort-date</code> header.
  /// It identifies applicable lifecycle configuration rule that defines the
  /// action to abort incomplete multipart uploads.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? abortRuleId;

  /// The name of the bucket to which the multipart upload was initiated. Does not
  /// return the access point ARN or access point alias if used.
  final String? bucket;

  /// The algorithm that was used to create a checksum of the object.
  final ChecksumAlgorithm? checksumAlgorithm;

  /// Container element that identifies who initiated the multipart upload. If the
  /// initiator is an Amazon Web Services account, this element provides the same
  /// information as the <code>Owner</code> element. If the initiator is an IAM
  /// User, this element provides the user ARN and display name.
  final Initiator? initiator;

  /// Indicates whether the returned list of parts is truncated. A true value
  /// indicates that the list was truncated. A list can be truncated if the number
  /// of parts exceeds the limit returned in the MaxParts element.
  final bool? isTruncated;

  /// Object key for which the multipart upload was initiated.
  final String? key;

  /// Maximum number of parts that were allowed in the response.
  final int? maxParts;

  /// When a list is truncated, this element specifies the last part in the list,
  /// as well as the value to use for the <code>part-number-marker</code> request
  /// parameter in a subsequent request.
  final int? nextPartNumberMarker;

  /// Container element that identifies the object owner, after the object is
  /// created. If multipart upload is initiated by an IAM user, this element
  /// provides the parent account ID and display name.
  /// <note>
  /// <b>Directory buckets</b> - The bucket owner is returned as the object owner
  /// for all the parts.
  /// </note>
  final Owner? owner;

  /// Specifies the part after which listing should begin. Only parts with higher
  /// part numbers will be listed.
  final int? partNumberMarker;

  /// Container for elements related to a particular part. A response can contain
  /// zero or more <code>Part</code> elements.
  final List<Part>? parts;
  final RequestCharged? requestCharged;

  /// The class of storage used to store the uploaded object.
  /// <note>
  /// <b>Directory buckets</b> - Only the S3 Express One Zone storage class is
  /// supported by directory buckets to store objects.
  /// </note>
  final StorageClass? storageClass;

  /// Upload ID identifying the multipart upload whose parts are being listed.
  final String? uploadId;

  ListPartsOutput({
    this.abortDate,
    this.abortRuleId,
    this.bucket,
    this.checksumAlgorithm,
    this.initiator,
    this.isTruncated,
    this.key,
    this.maxParts,
    this.nextPartNumberMarker,
    this.owner,
    this.partNumberMarker,
    this.parts,
    this.requestCharged,
    this.storageClass,
    this.uploadId,
  });

  Map<String, dynamic> toJson() {
    final abortDate = this.abortDate;
    final abortRuleId = this.abortRuleId;
    final bucket = this.bucket;
    final checksumAlgorithm = this.checksumAlgorithm;
    final initiator = this.initiator;
    final isTruncated = this.isTruncated;
    final key = this.key;
    final maxParts = this.maxParts;
    final nextPartNumberMarker = this.nextPartNumberMarker;
    final owner = this.owner;
    final partNumberMarker = this.partNumberMarker;
    final parts = this.parts;
    final requestCharged = this.requestCharged;
    final storageClass = this.storageClass;
    final uploadId = this.uploadId;
    return {
      if (bucket != null) 'Bucket': bucket,
      if (checksumAlgorithm != null)
        'ChecksumAlgorithm': checksumAlgorithm.value,
      if (initiator != null) 'Initiator': initiator,
      if (isTruncated != null) 'IsTruncated': isTruncated,
      if (key != null) 'Key': key,
      if (maxParts != null) 'MaxParts': maxParts,
      if (nextPartNumberMarker != null)
        'NextPartNumberMarker': nextPartNumberMarker,
      if (owner != null) 'Owner': owner,
      if (partNumberMarker != null) 'PartNumberMarker': partNumberMarker,
      if (parts != null) 'Part': parts,
      if (storageClass != null) 'StorageClass': storageClass.value,
      if (uploadId != null) 'UploadId': uploadId,
    };
  }
}

/// Specifies the location where the bucket will be created.
///
/// For directory buckets, the location type is Availability Zone. For more
/// information about directory buckets, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html">Directory
/// buckets</a> in the <i>Amazon S3 User Guide</i>.
/// <note>
/// This functionality is only supported by directory buckets.
/// </note>
class LocationInfo {
  /// The name of the location where the bucket will be created.
  ///
  /// For directory buckets, the name of the location is the AZ ID of the
  /// Availability Zone where the bucket will be created. An example AZ ID value
  /// is <code>usw2-az1</code>.
  final String? name;

  /// The type of location where the bucket will be created.
  final LocationType? type;

  LocationInfo({
    this.name,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final type = this.type;
    return {
      if (name != null) 'Name': name,
      if (type != null) 'Type': type.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final name = this.name;
    final type = this.type;
    final $children = <_s.XmlNode>[
      if (type != null) _s.encodeXmlStringValue('Type', type.value),
      if (name != null) _s.encodeXmlStringValue('Name', name),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum LocationType {
  availabilityZone('AvailabilityZone'),
  ;

  final String value;

  const LocationType(this.value);

  static LocationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum LocationType'));
}

/// Describes where logs are stored and the prefix that Amazon S3 assigns to all
/// log object keys for a bucket. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT
/// Bucket logging</a> in the <i>Amazon S3 API Reference</i>.
class LoggingEnabled {
  /// Specifies the bucket where you want Amazon S3 to store server access logs.
  /// You can have your logs delivered to any bucket that you own, including the
  /// same bucket that is being logged. You can also configure multiple buckets to
  /// deliver their logs to the same target bucket. In this case, you should
  /// choose a different <code>TargetPrefix</code> for each source bucket so that
  /// the delivered log files can be distinguished by key.
  final String targetBucket;

  /// A prefix for all log object keys. If you store log files from multiple
  /// Amazon S3 buckets in a single bucket, you can use a prefix to distinguish
  /// which log files came from which bucket.
  final String targetPrefix;

  /// Container for granting information.
  ///
  /// Buckets that use the bucket owner enforced setting for Object Ownership
  /// don't support target grants. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general">Permissions
  /// for server access log delivery</a> in the <i>Amazon S3 User Guide</i>.
  final List<TargetGrant>? targetGrants;

  /// Amazon S3 key format for log objects.
  final TargetObjectKeyFormat? targetObjectKeyFormat;

  LoggingEnabled({
    required this.targetBucket,
    required this.targetPrefix,
    this.targetGrants,
    this.targetObjectKeyFormat,
  });
  factory LoggingEnabled.fromXml(_s.XmlElement elem) {
    return LoggingEnabled(
      targetBucket: _s.extractXmlStringValue(elem, 'TargetBucket')!,
      targetPrefix: _s.extractXmlStringValue(elem, 'TargetPrefix')!,
      targetGrants: _s.extractXmlChild(elem, 'TargetGrants')?.let((elem) =>
          elem.findElements('Grant').map(TargetGrant.fromXml).toList()),
      targetObjectKeyFormat: _s
          .extractXmlChild(elem, 'TargetObjectKeyFormat')
          ?.let(TargetObjectKeyFormat.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final targetBucket = this.targetBucket;
    final targetPrefix = this.targetPrefix;
    final targetGrants = this.targetGrants;
    final targetObjectKeyFormat = this.targetObjectKeyFormat;
    return {
      'TargetBucket': targetBucket,
      'TargetPrefix': targetPrefix,
      if (targetGrants != null) 'TargetGrants': targetGrants,
      if (targetObjectKeyFormat != null)
        'TargetObjectKeyFormat': targetObjectKeyFormat,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final targetBucket = this.targetBucket;
    final targetPrefix = this.targetPrefix;
    final targetGrants = this.targetGrants;
    final targetObjectKeyFormat = this.targetObjectKeyFormat;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('TargetBucket', targetBucket),
      if (targetGrants != null)
        _s.XmlElement(_s.XmlName('TargetGrants'), [],
            targetGrants.map((e) => e.toXml('Grant'))),
      _s.encodeXmlStringValue('TargetPrefix', targetPrefix),
      if (targetObjectKeyFormat != null)
        targetObjectKeyFormat.toXml('TargetObjectKeyFormat'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum MFADelete {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const MFADelete(this.value);

  static MFADelete fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum MFADelete'));
}

enum MFADeleteStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const MFADeleteStatus(this.value);

  static MFADeleteStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MFADeleteStatus'));
}

enum MetadataDirective {
  copy('COPY'),
  replace('REPLACE'),
  ;

  final String value;

  const MetadataDirective(this.value);

  static MetadataDirective fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MetadataDirective'));
}

/// A metadata key-value pair to store with an object.
class MetadataEntry {
  /// Name of the object.
  final String? name;

  /// Value of the object.
  final String? value;

  MetadataEntry({
    this.name,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      if (name != null) 'Name': name,
      if (value != null) 'Value': value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final name = this.name;
    final value = this.value;
    final $children = <_s.XmlNode>[
      if (name != null) _s.encodeXmlStringValue('Name', name),
      if (value != null) _s.encodeXmlStringValue('Value', value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container specifying replication metrics-related settings enabling
/// replication metrics and events.
class Metrics {
  /// Specifies whether the replication metrics are enabled.
  final MetricsStatus status;

  /// A container specifying the time threshold for emitting the
  /// <code>s3:Replication:OperationMissedThreshold</code> event.
  final ReplicationTimeValue? eventThreshold;

  Metrics({
    required this.status,
    this.eventThreshold,
  });
  factory Metrics.fromXml(_s.XmlElement elem) {
    return Metrics(
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(MetricsStatus.fromString),
      eventThreshold: _s
          .extractXmlChild(elem, 'EventThreshold')
          ?.let(ReplicationTimeValue.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final eventThreshold = this.eventThreshold;
    return {
      'Status': status.value,
      if (eventThreshold != null) 'EventThreshold': eventThreshold,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final eventThreshold = this.eventThreshold;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Status', status.value),
      if (eventThreshold != null) eventThreshold.toXml('EventThreshold'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A conjunction (logical AND) of predicates, which is used in evaluating a
/// metrics filter. The operator must have at least two predicates, and an
/// object must match all of the predicates in order for the filter to apply.
class MetricsAndOperator {
  /// The access point ARN used when evaluating an <code>AND</code> predicate.
  final String? accessPointArn;

  /// The prefix used when evaluating an AND predicate.
  final String? prefix;

  /// The list of tags used when evaluating an AND predicate.
  final List<Tag>? tags;

  MetricsAndOperator({
    this.accessPointArn,
    this.prefix,
    this.tags,
  });
  factory MetricsAndOperator.fromXml(_s.XmlElement elem) {
    return MetricsAndOperator(
      accessPointArn: _s.extractXmlStringValue(elem, 'AccessPointArn'),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tags: elem.findElements('Tag').map(Tag.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final accessPointArn = this.accessPointArn;
    final prefix = this.prefix;
    final tags = this.tags;
    return {
      if (accessPointArn != null) 'AccessPointArn': accessPointArn,
      if (prefix != null) 'Prefix': prefix,
      if (tags != null) 'Tag': tags,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final accessPointArn = this.accessPointArn;
    final prefix = this.prefix;
    final tags = this.tags;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tags != null) ...tags.map((e) => e.toXml('Tag')),
      if (accessPointArn != null)
        _s.encodeXmlStringValue('AccessPointArn', accessPointArn),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies a metrics configuration for the CloudWatch request metrics
/// (specified by the metrics configuration ID) from an Amazon S3 bucket. If
/// you're updating an existing metrics configuration, note that this is a full
/// replacement of the existing metrics configuration. If you don't include the
/// elements you want to keep, they are erased. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html">PutBucketMetricsConfiguration</a>.
class MetricsConfiguration {
  /// The ID used to identify the metrics configuration. The ID has a 64 character
  /// limit and can only contain letters, numbers, periods, dashes, and
  /// underscores.
  final String id;

  /// Specifies a metrics configuration filter. The metrics configuration will
  /// only include objects that meet the filter's criteria. A filter must be a
  /// prefix, an object tag, an access point ARN, or a conjunction
  /// (MetricsAndOperator).
  final MetricsFilter? filter;

  MetricsConfiguration({
    required this.id,
    this.filter,
  });
  factory MetricsConfiguration.fromXml(_s.XmlElement elem) {
    return MetricsConfiguration(
      id: _s.extractXmlStringValue(elem, 'Id')!,
      filter: _s.extractXmlChild(elem, 'Filter')?.let(MetricsFilter.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final id = this.id;
    final filter = this.filter;
    return {
      'Id': id,
      if (filter != null) 'Filter': filter,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final id = this.id;
    final filter = this.filter;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Id', id),
      if (filter != null) filter.toXml('Filter'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies a metrics configuration filter. The metrics configuration only
/// includes objects that meet the filter's criteria. A filter must be a prefix,
/// an object tag, an access point ARN, or a conjunction (MetricsAndOperator).
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html">PutBucketMetricsConfiguration</a>.
class MetricsFilter {
  /// The access point ARN used when evaluating a metrics filter.
  final String? accessPointArn;

  /// A conjunction (logical AND) of predicates, which is used in evaluating a
  /// metrics filter. The operator must have at least two predicates, and an
  /// object must match all of the predicates in order for the filter to apply.
  final MetricsAndOperator? and;

  /// The prefix used when evaluating a metrics filter.
  final String? prefix;

  /// The tag used when evaluating a metrics filter.
  final Tag? tag;

  MetricsFilter({
    this.accessPointArn,
    this.and,
    this.prefix,
    this.tag,
  });
  factory MetricsFilter.fromXml(_s.XmlElement elem) {
    return MetricsFilter(
      accessPointArn: _s.extractXmlStringValue(elem, 'AccessPointArn'),
      and: _s.extractXmlChild(elem, 'And')?.let(MetricsAndOperator.fromXml),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tag: _s.extractXmlChild(elem, 'Tag')?.let(Tag.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final accessPointArn = this.accessPointArn;
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    return {
      if (accessPointArn != null) 'AccessPointArn': accessPointArn,
      if (and != null) 'And': and,
      if (prefix != null) 'Prefix': prefix,
      if (tag != null) 'Tag': tag,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final accessPointArn = this.accessPointArn;
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tag != null) tag.toXml('Tag'),
      if (accessPointArn != null)
        _s.encodeXmlStringValue('AccessPointArn', accessPointArn),
      if (and != null) and.toXml('And'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum MetricsStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const MetricsStatus(this.value);

  static MetricsStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MetricsStatus'));
}

/// Container for the <code>MultipartUpload</code> for the Amazon S3 object.
class MultipartUpload {
  /// The algorithm that was used to create a checksum of the object.
  final ChecksumAlgorithm? checksumAlgorithm;

  /// Date and time at which the multipart upload was initiated.
  final DateTime? initiated;

  /// Identifies who initiated the multipart upload.
  final Initiator? initiator;

  /// Key of the object for which the multipart upload was initiated.
  final String? key;

  /// Specifies the owner of the object that is part of the multipart upload.
  /// <note>
  /// <b>Directory buckets</b> - The bucket owner is returned as the object owner
  /// for all the objects.
  /// </note>
  final Owner? owner;

  /// The class of storage used to store the object.
  /// <note>
  /// <b>Directory buckets</b> - Only the S3 Express One Zone storage class is
  /// supported by directory buckets to store objects.
  /// </note>
  final StorageClass? storageClass;

  /// Upload ID that identifies the multipart upload.
  final String? uploadId;

  MultipartUpload({
    this.checksumAlgorithm,
    this.initiated,
    this.initiator,
    this.key,
    this.owner,
    this.storageClass,
    this.uploadId,
  });
  factory MultipartUpload.fromXml(_s.XmlElement elem) {
    return MultipartUpload(
      checksumAlgorithm: _s
          .extractXmlStringValue(elem, 'ChecksumAlgorithm')
          ?.let(ChecksumAlgorithm.fromString),
      initiated: _s.extractXmlDateTimeValue(elem, 'Initiated'),
      initiator: _s.extractXmlChild(elem, 'Initiator')?.let(Initiator.fromXml),
      key: _s.extractXmlStringValue(elem, 'Key'),
      owner: _s.extractXmlChild(elem, 'Owner')?.let(Owner.fromXml),
      storageClass: _s
          .extractXmlStringValue(elem, 'StorageClass')
          ?.let(StorageClass.fromString),
      uploadId: _s.extractXmlStringValue(elem, 'UploadId'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumAlgorithm = this.checksumAlgorithm;
    final initiated = this.initiated;
    final initiator = this.initiator;
    final key = this.key;
    final owner = this.owner;
    final storageClass = this.storageClass;
    final uploadId = this.uploadId;
    return {
      if (checksumAlgorithm != null)
        'ChecksumAlgorithm': checksumAlgorithm.value,
      if (initiated != null) 'Initiated': iso8601ToJson(initiated),
      if (initiator != null) 'Initiator': initiator,
      if (key != null) 'Key': key,
      if (owner != null) 'Owner': owner,
      if (storageClass != null) 'StorageClass': storageClass.value,
      if (uploadId != null) 'UploadId': uploadId,
    };
  }
}

/// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3
/// permanently deletes the noncurrent object versions. You set this lifecycle
/// configuration action on a bucket that has versioning enabled (or suspended)
/// to request that Amazon S3 delete noncurrent object versions at a specific
/// period in the object's lifetime.
class NoncurrentVersionExpiration {
  /// Specifies how many newer noncurrent versions must exist before Amazon S3 can
  /// perform the associated action on a given version. If there are this many
  /// more recent noncurrent versions, Amazon S3 will take the associated action.
  /// For more information about noncurrent versions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html">Lifecycle
  /// configuration elements</a> in the <i>Amazon S3 User Guide</i>.
  final int? newerNoncurrentVersions;

  /// Specifies the number of days an object is noncurrent before Amazon S3 can
  /// perform the associated action. The value must be a non-zero positive
  /// integer. For information about the noncurrent days calculations, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
  /// Amazon S3 Calculates When an Object Became Noncurrent</a> in the <i>Amazon
  /// S3 User Guide</i>.
  final int? noncurrentDays;

  NoncurrentVersionExpiration({
    this.newerNoncurrentVersions,
    this.noncurrentDays,
  });
  factory NoncurrentVersionExpiration.fromXml(_s.XmlElement elem) {
    return NoncurrentVersionExpiration(
      newerNoncurrentVersions:
          _s.extractXmlIntValue(elem, 'NewerNoncurrentVersions'),
      noncurrentDays: _s.extractXmlIntValue(elem, 'NoncurrentDays'),
    );
  }

  Map<String, dynamic> toJson() {
    final newerNoncurrentVersions = this.newerNoncurrentVersions;
    final noncurrentDays = this.noncurrentDays;
    return {
      if (newerNoncurrentVersions != null)
        'NewerNoncurrentVersions': newerNoncurrentVersions,
      if (noncurrentDays != null) 'NoncurrentDays': noncurrentDays,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final newerNoncurrentVersions = this.newerNoncurrentVersions;
    final noncurrentDays = this.noncurrentDays;
    final $children = <_s.XmlNode>[
      if (noncurrentDays != null)
        _s.encodeXmlIntValue('NoncurrentDays', noncurrentDays),
      if (newerNoncurrentVersions != null)
        _s.encodeXmlIntValue(
            'NewerNoncurrentVersions', newerNoncurrentVersions),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for the transition rule that describes when noncurrent objects
/// transition to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>,
/// <code>INTELLIGENT_TIERING</code>, <code>GLACIER_IR</code>,
/// <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your
/// bucket is versioning-enabled (or versioning is suspended), you can set this
/// action to request that Amazon S3 transition noncurrent object versions to
/// the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>,
/// <code>INTELLIGENT_TIERING</code>, <code>GLACIER_IR</code>,
/// <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class at a
/// specific period in the object's lifetime.
class NoncurrentVersionTransition {
  /// Specifies how many newer noncurrent versions must exist before Amazon S3 can
  /// perform the associated action on a given version. If there are this many
  /// more recent noncurrent versions, Amazon S3 will take the associated action.
  /// For more information about noncurrent versions, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html">Lifecycle
  /// configuration elements</a> in the <i>Amazon S3 User Guide</i>.
  final int? newerNoncurrentVersions;

  /// Specifies the number of days an object is noncurrent before Amazon S3 can
  /// perform the associated action. For information about the noncurrent days
  /// calculations, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
  /// Amazon S3 Calculates How Long an Object Has Been Noncurrent</a> in the
  /// <i>Amazon S3 User Guide</i>.
  final int? noncurrentDays;

  /// The class of storage used to store the object.
  final TransitionStorageClass? storageClass;

  NoncurrentVersionTransition({
    this.newerNoncurrentVersions,
    this.noncurrentDays,
    this.storageClass,
  });
  factory NoncurrentVersionTransition.fromXml(_s.XmlElement elem) {
    return NoncurrentVersionTransition(
      newerNoncurrentVersions:
          _s.extractXmlIntValue(elem, 'NewerNoncurrentVersions'),
      noncurrentDays: _s.extractXmlIntValue(elem, 'NoncurrentDays'),
      storageClass: _s
          .extractXmlStringValue(elem, 'StorageClass')
          ?.let(TransitionStorageClass.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final newerNoncurrentVersions = this.newerNoncurrentVersions;
    final noncurrentDays = this.noncurrentDays;
    final storageClass = this.storageClass;
    return {
      if (newerNoncurrentVersions != null)
        'NewerNoncurrentVersions': newerNoncurrentVersions,
      if (noncurrentDays != null) 'NoncurrentDays': noncurrentDays,
      if (storageClass != null) 'StorageClass': storageClass.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final newerNoncurrentVersions = this.newerNoncurrentVersions;
    final noncurrentDays = this.noncurrentDays;
    final storageClass = this.storageClass;
    final $children = <_s.XmlNode>[
      if (noncurrentDays != null)
        _s.encodeXmlIntValue('NoncurrentDays', noncurrentDays),
      if (storageClass != null)
        _s.encodeXmlStringValue('StorageClass', storageClass.value),
      if (newerNoncurrentVersions != null)
        _s.encodeXmlIntValue(
            'NewerNoncurrentVersions', newerNoncurrentVersions),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for specifying the notification configuration of the bucket. If
/// this element is empty, notifications are turned off for the bucket.
class NotificationConfiguration {
  /// Enables delivery of events to Amazon EventBridge.
  final EventBridgeConfiguration? eventBridgeConfiguration;

  /// Describes the Lambda functions to invoke and the events for which to invoke
  /// them.
  final List<LambdaFunctionConfiguration>? lambdaFunctionConfigurations;

  /// The Amazon Simple Queue Service queues to publish messages to and the events
  /// for which to publish messages.
  final List<QueueConfiguration>? queueConfigurations;

  /// The topic to which notifications are sent and the events for which
  /// notifications are generated.
  final List<TopicConfiguration>? topicConfigurations;

  NotificationConfiguration({
    this.eventBridgeConfiguration,
    this.lambdaFunctionConfigurations,
    this.queueConfigurations,
    this.topicConfigurations,
  });
  factory NotificationConfiguration.fromXml(_s.XmlElement elem) {
    return NotificationConfiguration(
      eventBridgeConfiguration: _s
          .extractXmlChild(elem, 'EventBridgeConfiguration')
          ?.let(EventBridgeConfiguration.fromXml),
      lambdaFunctionConfigurations: elem
          .findElements('CloudFunctionConfiguration')
          .map(LambdaFunctionConfiguration.fromXml)
          .toList(),
      queueConfigurations: elem
          .findElements('QueueConfiguration')
          .map(QueueConfiguration.fromXml)
          .toList(),
      topicConfigurations: elem
          .findElements('TopicConfiguration')
          .map(TopicConfiguration.fromXml)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final eventBridgeConfiguration = this.eventBridgeConfiguration;
    final lambdaFunctionConfigurations = this.lambdaFunctionConfigurations;
    final queueConfigurations = this.queueConfigurations;
    final topicConfigurations = this.topicConfigurations;
    return {
      if (eventBridgeConfiguration != null)
        'EventBridgeConfiguration': eventBridgeConfiguration,
      if (lambdaFunctionConfigurations != null)
        'CloudFunctionConfiguration': lambdaFunctionConfigurations,
      if (queueConfigurations != null)
        'QueueConfiguration': queueConfigurations,
      if (topicConfigurations != null)
        'TopicConfiguration': topicConfigurations,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final eventBridgeConfiguration = this.eventBridgeConfiguration;
    final lambdaFunctionConfigurations = this.lambdaFunctionConfigurations;
    final queueConfigurations = this.queueConfigurations;
    final topicConfigurations = this.topicConfigurations;
    final $children = <_s.XmlNode>[
      if (topicConfigurations != null)
        ...topicConfigurations.map((e) => e.toXml('TopicConfiguration')),
      if (queueConfigurations != null)
        ...queueConfigurations.map((e) => e.toXml('QueueConfiguration')),
      if (lambdaFunctionConfigurations != null)
        ...lambdaFunctionConfigurations
            .map((e) => e.toXml('CloudFunctionConfiguration')),
      if (eventBridgeConfiguration != null)
        eventBridgeConfiguration.toXml('EventBridgeConfiguration'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class NotificationConfigurationDeprecated {
  /// Container for specifying the Lambda notification configuration.
  final CloudFunctionConfiguration? cloudFunctionConfiguration;

  /// This data type is deprecated. This data type specifies the configuration for
  /// publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue
  /// when Amazon S3 detects specified events.
  final QueueConfigurationDeprecated? queueConfiguration;

  /// This data type is deprecated. A container for specifying the configuration
  /// for publication of messages to an Amazon Simple Notification Service (Amazon
  /// SNS) topic when Amazon S3 detects specified events.
  final TopicConfigurationDeprecated? topicConfiguration;

  NotificationConfigurationDeprecated({
    this.cloudFunctionConfiguration,
    this.queueConfiguration,
    this.topicConfiguration,
  });
  factory NotificationConfigurationDeprecated.fromXml(_s.XmlElement elem) {
    return NotificationConfigurationDeprecated(
      cloudFunctionConfiguration: _s
          .extractXmlChild(elem, 'CloudFunctionConfiguration')
          ?.let(CloudFunctionConfiguration.fromXml),
      queueConfiguration: _s
          .extractXmlChild(elem, 'QueueConfiguration')
          ?.let(QueueConfigurationDeprecated.fromXml),
      topicConfiguration: _s
          .extractXmlChild(elem, 'TopicConfiguration')
          ?.let(TopicConfigurationDeprecated.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final cloudFunctionConfiguration = this.cloudFunctionConfiguration;
    final queueConfiguration = this.queueConfiguration;
    final topicConfiguration = this.topicConfiguration;
    return {
      if (cloudFunctionConfiguration != null)
        'CloudFunctionConfiguration': cloudFunctionConfiguration,
      if (queueConfiguration != null) 'QueueConfiguration': queueConfiguration,
      if (topicConfiguration != null) 'TopicConfiguration': topicConfiguration,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final cloudFunctionConfiguration = this.cloudFunctionConfiguration;
    final queueConfiguration = this.queueConfiguration;
    final topicConfiguration = this.topicConfiguration;
    final $children = <_s.XmlNode>[
      if (topicConfiguration != null)
        topicConfiguration.toXml('TopicConfiguration'),
      if (queueConfiguration != null)
        queueConfiguration.toXml('QueueConfiguration'),
      if (cloudFunctionConfiguration != null)
        cloudFunctionConfiguration.toXml('CloudFunctionConfiguration'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies object key name filtering rules. For information about key name
/// filtering, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html">Configuring
/// event notifications using object key name filtering</a> in the <i>Amazon S3
/// User Guide</i>.
class NotificationConfigurationFilter {
  final S3KeyFilter? key;

  NotificationConfigurationFilter({
    this.key,
  });
  factory NotificationConfigurationFilter.fromXml(_s.XmlElement elem) {
    return NotificationConfigurationFilter(
      key: _s.extractXmlChild(elem, 'S3Key')?.let(S3KeyFilter.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    return {
      if (key != null) 'S3Key': key,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final key = this.key;
    final $children = <_s.XmlNode>[
      if (key != null) key.toXml('S3Key'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// An object consists of data and its descriptive metadata.
class Object {
  /// The algorithm that was used to create a checksum of the object.
  final List<ChecksumAlgorithm>? checksumAlgorithm;

  /// The entity tag is a hash of the object. The ETag reflects changes only to
  /// the contents of an object, not its metadata. The ETag may or may not be an
  /// MD5 digest of the object data. Whether or not it is depends on how the
  /// object was created and how it is encrypted as described below:
  ///
  /// <ul>
  /// <li>
  /// Objects created by the PUT Object, POST Object, or Copy operation, or
  /// through the Amazon Web Services Management Console, and are encrypted by
  /// SSE-S3 or plaintext, have ETags that are an MD5 digest of their object data.
  /// </li>
  /// <li>
  /// Objects created by the PUT Object, POST Object, or Copy operation, or
  /// through the Amazon Web Services Management Console, and are encrypted by
  /// SSE-C or SSE-KMS, have ETags that are not an MD5 digest of their object
  /// data.
  /// </li>
  /// <li>
  /// If an object is created by either the Multipart Upload or Part Copy
  /// operation, the ETag is not an MD5 digest, regardless of the method of
  /// encryption. If an object is larger than 16 MB, the Amazon Web Services
  /// Management Console will upload or copy that object as a Multipart Upload,
  /// and therefore the ETag will not be an MD5 digest.
  /// </li>
  /// </ul> <note>
  /// <b>Directory buckets</b> - MD5 is not supported by directory buckets.
  /// </note>
  final String? eTag;

  /// The name that you assign to an object. You use the object key to retrieve
  /// the object.
  final String? key;

  /// Creation date of the object.
  final DateTime? lastModified;

  /// The owner of the object
  /// <note>
  /// <b>Directory buckets</b> - The bucket owner is returned as the object owner.
  /// </note>
  final Owner? owner;

  /// Specifies the restoration status of an object. Objects in certain storage
  /// classes must be restored before they can be retrieved. For more information
  /// about these storage classes and how to work with archived objects, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html">
  /// Working with archived objects</a> in the <i>Amazon S3 User Guide</i>.
  /// <note>
  /// This functionality is not supported for directory buckets. Only the S3
  /// Express One Zone storage class is supported by directory buckets to store
  /// objects.
  /// </note>
  final RestoreStatus? restoreStatus;

  /// Size in bytes of the object
  final int? size;

  /// The class of storage used to store the object.
  /// <note>
  /// <b>Directory buckets</b> - Only the S3 Express One Zone storage class is
  /// supported by directory buckets to store objects.
  /// </note>
  final ObjectStorageClass? storageClass;

  Object({
    this.checksumAlgorithm,
    this.eTag,
    this.key,
    this.lastModified,
    this.owner,
    this.restoreStatus,
    this.size,
    this.storageClass,
  });
  factory Object.fromXml(_s.XmlElement elem) {
    return Object(
      checksumAlgorithm: _s
          .extractXmlStringListValues(elem, 'ChecksumAlgorithm')
          .map(ChecksumAlgorithm.fromString)
          .toList(),
      eTag: _s.extractXmlStringValue(elem, 'ETag'),
      key: _s.extractXmlStringValue(elem, 'Key'),
      lastModified: _s.extractXmlDateTimeValue(elem, 'LastModified'),
      owner: _s.extractXmlChild(elem, 'Owner')?.let(Owner.fromXml),
      restoreStatus:
          _s.extractXmlChild(elem, 'RestoreStatus')?.let(RestoreStatus.fromXml),
      size: _s.extractXmlIntValue(elem, 'Size'),
      storageClass: _s
          .extractXmlStringValue(elem, 'StorageClass')
          ?.let(ObjectStorageClass.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumAlgorithm = this.checksumAlgorithm;
    final eTag = this.eTag;
    final key = this.key;
    final lastModified = this.lastModified;
    final owner = this.owner;
    final restoreStatus = this.restoreStatus;
    final size = this.size;
    final storageClass = this.storageClass;
    return {
      if (checksumAlgorithm != null)
        'ChecksumAlgorithm': checksumAlgorithm.map((e) => e.value).toList(),
      if (eTag != null) 'ETag': eTag,
      if (key != null) 'Key': key,
      if (lastModified != null) 'LastModified': iso8601ToJson(lastModified),
      if (owner != null) 'Owner': owner,
      if (restoreStatus != null) 'RestoreStatus': restoreStatus,
      if (size != null) 'Size': size,
      if (storageClass != null) 'StorageClass': storageClass.value,
    };
  }
}

enum ObjectAttributes {
  eTag('ETag'),
  checksum('Checksum'),
  objectParts('ObjectParts'),
  storageClass('StorageClass'),
  objectSize('ObjectSize'),
  ;

  final String value;

  const ObjectAttributes(this.value);

  static ObjectAttributes fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ObjectAttributes'));
}

enum ObjectCannedACL {
  private('private'),
  publicRead('public-read'),
  publicReadWrite('public-read-write'),
  authenticatedRead('authenticated-read'),
  awsExecRead('aws-exec-read'),
  bucketOwnerRead('bucket-owner-read'),
  bucketOwnerFullControl('bucket-owner-full-control'),
  ;

  final String value;

  const ObjectCannedACL(this.value);

  static ObjectCannedACL fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ObjectCannedACL'));
}

/// Object Identifier is unique value to identify objects.
class ObjectIdentifier {
  /// Key name of the object.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String key;

  /// Version ID for the specific version of the object to delete.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  ObjectIdentifier({
    required this.key,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final versionId = this.versionId;
    return {
      'Key': key,
      if (versionId != null) 'VersionId': versionId,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final key = this.key;
    final versionId = this.versionId;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Key', key),
      if (versionId != null) _s.encodeXmlStringValue('VersionId', versionId),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The container element for Object Lock configuration parameters.
class ObjectLockConfiguration {
  /// Indicates whether this bucket has an Object Lock configuration enabled.
  /// Enable <code>ObjectLockEnabled</code> when you apply
  /// <code>ObjectLockConfiguration</code> to a bucket.
  final ObjectLockEnabled? objectLockEnabled;

  /// Specifies the Object Lock rule for the specified object. Enable the this
  /// rule when you apply <code>ObjectLockConfiguration</code> to a bucket. Bucket
  /// settings require both a mode and a period. The period can be either
  /// <code>Days</code> or <code>Years</code> but you must select one. You cannot
  /// specify <code>Days</code> and <code>Years</code> at the same time.
  final ObjectLockRule? rule;

  ObjectLockConfiguration({
    this.objectLockEnabled,
    this.rule,
  });
  factory ObjectLockConfiguration.fromXml(_s.XmlElement elem) {
    return ObjectLockConfiguration(
      objectLockEnabled: _s
          .extractXmlStringValue(elem, 'ObjectLockEnabled')
          ?.let(ObjectLockEnabled.fromString),
      rule: _s.extractXmlChild(elem, 'Rule')?.let(ObjectLockRule.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final objectLockEnabled = this.objectLockEnabled;
    final rule = this.rule;
    return {
      if (objectLockEnabled != null)
        'ObjectLockEnabled': objectLockEnabled.value,
      if (rule != null) 'Rule': rule,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final objectLockEnabled = this.objectLockEnabled;
    final rule = this.rule;
    final $children = <_s.XmlNode>[
      if (objectLockEnabled != null)
        _s.encodeXmlStringValue('ObjectLockEnabled', objectLockEnabled.value),
      if (rule != null) rule.toXml('Rule'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ObjectLockEnabled {
  enabled('Enabled'),
  ;

  final String value;

  const ObjectLockEnabled(this.value);

  static ObjectLockEnabled fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ObjectLockEnabled'));
}

/// A legal hold configuration for an object.
class ObjectLockLegalHold {
  /// Indicates whether the specified object has a legal hold in place.
  final ObjectLockLegalHoldStatus? status;

  ObjectLockLegalHold({
    this.status,
  });
  factory ObjectLockLegalHold.fromXml(_s.XmlElement elem) {
    return ObjectLockLegalHold(
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(ObjectLockLegalHoldStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final $children = <_s.XmlNode>[
      if (status != null) _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ObjectLockLegalHoldStatus {
  on('ON'),
  off('OFF'),
  ;

  final String value;

  const ObjectLockLegalHoldStatus(this.value);

  static ObjectLockLegalHoldStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ObjectLockLegalHoldStatus'));
}

enum ObjectLockMode {
  governance('GOVERNANCE'),
  compliance('COMPLIANCE'),
  ;

  final String value;

  const ObjectLockMode(this.value);

  static ObjectLockMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ObjectLockMode'));
}

/// A Retention configuration for an object.
class ObjectLockRetention {
  /// Indicates the Retention mode for the specified object.
  final ObjectLockRetentionMode? mode;

  /// The date on which this Object Lock Retention will expire.
  final DateTime? retainUntilDate;

  ObjectLockRetention({
    this.mode,
    this.retainUntilDate,
  });
  factory ObjectLockRetention.fromXml(_s.XmlElement elem) {
    return ObjectLockRetention(
      mode: _s
          .extractXmlStringValue(elem, 'Mode')
          ?.let(ObjectLockRetentionMode.fromString),
      retainUntilDate: _s.extractXmlDateTimeValue(elem, 'RetainUntilDate',
          parser: _s.timeStampFromJson),
    );
  }

  Map<String, dynamic> toJson() {
    final mode = this.mode;
    final retainUntilDate = this.retainUntilDate;
    return {
      if (mode != null) 'Mode': mode.value,
      if (retainUntilDate != null)
        'RetainUntilDate': iso8601ToJson(retainUntilDate),
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final mode = this.mode;
    final retainUntilDate = this.retainUntilDate;
    final $children = <_s.XmlNode>[
      if (mode != null) _s.encodeXmlStringValue('Mode', mode.value),
      if (retainUntilDate != null)
        _s.encodeXmlDateTimeValue('RetainUntilDate', retainUntilDate,
            formatter: _s.iso8601ToJson),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ObjectLockRetentionMode {
  governance('GOVERNANCE'),
  compliance('COMPLIANCE'),
  ;

  final String value;

  const ObjectLockRetentionMode(this.value);

  static ObjectLockRetentionMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ObjectLockRetentionMode'));
}

/// The container element for an Object Lock rule.
class ObjectLockRule {
  /// The default Object Lock retention mode and period that you want to apply to
  /// new objects placed in the specified bucket. Bucket settings require both a
  /// mode and a period. The period can be either <code>Days</code> or
  /// <code>Years</code> but you must select one. You cannot specify
  /// <code>Days</code> and <code>Years</code> at the same time.
  final DefaultRetention? defaultRetention;

  ObjectLockRule({
    this.defaultRetention,
  });
  factory ObjectLockRule.fromXml(_s.XmlElement elem) {
    return ObjectLockRule(
      defaultRetention: _s
          .extractXmlChild(elem, 'DefaultRetention')
          ?.let(DefaultRetention.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final defaultRetention = this.defaultRetention;
    return {
      if (defaultRetention != null) 'DefaultRetention': defaultRetention,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final defaultRetention = this.defaultRetention;
    final $children = <_s.XmlNode>[
      if (defaultRetention != null) defaultRetention.toXml('DefaultRetention'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The container element for object ownership for a bucket's ownership
/// controls.
///
/// <code>BucketOwnerPreferred</code> - Objects uploaded to the bucket change
/// ownership to the bucket owner if the objects are uploaded with the
/// <code>bucket-owner-full-control</code> canned ACL.
///
/// <code>ObjectWriter</code> - The uploading account will own the object if the
/// object is uploaded with the <code>bucket-owner-full-control</code> canned
/// ACL.
///
/// <code>BucketOwnerEnforced</code> - Access control lists (ACLs) are disabled
/// and no longer affect permissions. The bucket owner automatically owns and
/// has full control over every object in the bucket. The bucket only accepts
/// PUT requests that don't specify an ACL or specify bucket owner full control
/// ACLs (such as the predefined <code>bucket-owner-full-control</code> canned
/// ACL or a custom ACL in XML format that grants the same permissions).
///
/// By default, <code>ObjectOwnership</code> is set to
/// <code>BucketOwnerEnforced</code> and ACLs are disabled. We recommend keeping
/// ACLs disabled, except in uncommon use cases where you must control access
/// for each object individually. For more information about S3 Object
/// Ownership, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling
/// ownership of objects and disabling ACLs for your bucket</a> in the <i>Amazon
/// S3 User Guide</i>.
/// <note>
/// This functionality is not supported for directory buckets. Directory buckets
/// use the bucket owner enforced setting for S3 Object Ownership.
/// </note>
enum ObjectOwnership {
  bucketOwnerPreferred('BucketOwnerPreferred'),
  objectWriter('ObjectWriter'),
  bucketOwnerEnforced('BucketOwnerEnforced'),
  ;

  final String value;

  const ObjectOwnership(this.value);

  static ObjectOwnership fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ObjectOwnership'));
}

/// A container for elements related to an individual part.
class ObjectPart {
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32 checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// The part number identifying the part. This value is a positive integer
  /// between 1 and 10,000.
  final int? partNumber;

  /// The size of the uploaded part in bytes.
  final int? size;

  ObjectPart({
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.partNumber,
    this.size,
  });
  factory ObjectPart.fromXml(_s.XmlElement elem) {
    return ObjectPart(
      checksumCRC32: _s.extractXmlStringValue(elem, 'ChecksumCRC32'),
      checksumCRC32C: _s.extractXmlStringValue(elem, 'ChecksumCRC32C'),
      checksumSHA1: _s.extractXmlStringValue(elem, 'ChecksumSHA1'),
      checksumSHA256: _s.extractXmlStringValue(elem, 'ChecksumSHA256'),
      partNumber: _s.extractXmlIntValue(elem, 'PartNumber'),
      size: _s.extractXmlIntValue(elem, 'Size'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final partNumber = this.partNumber;
    final size = this.size;
    return {
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
      if (partNumber != null) 'PartNumber': partNumber,
      if (size != null) 'Size': size,
    };
  }
}

enum ObjectStorageClass {
  standard('STANDARD'),
  reducedRedundancy('REDUCED_REDUNDANCY'),
  glacier('GLACIER'),
  standardIa('STANDARD_IA'),
  onezoneIa('ONEZONE_IA'),
  intelligentTiering('INTELLIGENT_TIERING'),
  deepArchive('DEEP_ARCHIVE'),
  outposts('OUTPOSTS'),
  glacierIr('GLACIER_IR'),
  snow('SNOW'),
  expressOnezone('EXPRESS_ONEZONE'),
  ;

  final String value;

  const ObjectStorageClass(this.value);

  static ObjectStorageClass fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ObjectStorageClass'));
}

/// The version of an object.
class ObjectVersion {
  /// The algorithm that was used to create a checksum of the object.
  final List<ChecksumAlgorithm>? checksumAlgorithm;

  /// The entity tag is an MD5 hash of that version of the object.
  final String? eTag;

  /// Specifies whether the object is (true) or is not (false) the latest version
  /// of an object.
  final bool? isLatest;

  /// The object key.
  final String? key;

  /// Date and time when the object was last modified.
  final DateTime? lastModified;

  /// Specifies the owner of the object.
  final Owner? owner;

  /// Specifies the restoration status of an object. Objects in certain storage
  /// classes must be restored before they can be retrieved. For more information
  /// about these storage classes and how to work with archived objects, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html">
  /// Working with archived objects</a> in the <i>Amazon S3 User Guide</i>.
  final RestoreStatus? restoreStatus;

  /// Size in bytes of the object.
  final int? size;

  /// The class of storage used to store the object.
  final ObjectVersionStorageClass? storageClass;

  /// Version ID of an object.
  final String? versionId;

  ObjectVersion({
    this.checksumAlgorithm,
    this.eTag,
    this.isLatest,
    this.key,
    this.lastModified,
    this.owner,
    this.restoreStatus,
    this.size,
    this.storageClass,
    this.versionId,
  });
  factory ObjectVersion.fromXml(_s.XmlElement elem) {
    return ObjectVersion(
      checksumAlgorithm: _s
          .extractXmlStringListValues(elem, 'ChecksumAlgorithm')
          .map(ChecksumAlgorithm.fromString)
          .toList(),
      eTag: _s.extractXmlStringValue(elem, 'ETag'),
      isLatest: _s.extractXmlBoolValue(elem, 'IsLatest'),
      key: _s.extractXmlStringValue(elem, 'Key'),
      lastModified: _s.extractXmlDateTimeValue(elem, 'LastModified'),
      owner: _s.extractXmlChild(elem, 'Owner')?.let(Owner.fromXml),
      restoreStatus:
          _s.extractXmlChild(elem, 'RestoreStatus')?.let(RestoreStatus.fromXml),
      size: _s.extractXmlIntValue(elem, 'Size'),
      storageClass: _s
          .extractXmlStringValue(elem, 'StorageClass')
          ?.let(ObjectVersionStorageClass.fromString),
      versionId: _s.extractXmlStringValue(elem, 'VersionId'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumAlgorithm = this.checksumAlgorithm;
    final eTag = this.eTag;
    final isLatest = this.isLatest;
    final key = this.key;
    final lastModified = this.lastModified;
    final owner = this.owner;
    final restoreStatus = this.restoreStatus;
    final size = this.size;
    final storageClass = this.storageClass;
    final versionId = this.versionId;
    return {
      if (checksumAlgorithm != null)
        'ChecksumAlgorithm': checksumAlgorithm.map((e) => e.value).toList(),
      if (eTag != null) 'ETag': eTag,
      if (isLatest != null) 'IsLatest': isLatest,
      if (key != null) 'Key': key,
      if (lastModified != null) 'LastModified': iso8601ToJson(lastModified),
      if (owner != null) 'Owner': owner,
      if (restoreStatus != null) 'RestoreStatus': restoreStatus,
      if (size != null) 'Size': size,
      if (storageClass != null) 'StorageClass': storageClass.value,
      if (versionId != null) 'VersionId': versionId,
    };
  }
}

enum ObjectVersionStorageClass {
  standard('STANDARD'),
  ;

  final String value;

  const ObjectVersionStorageClass(this.value);

  static ObjectVersionStorageClass fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ObjectVersionStorageClass'));
}

enum OptionalObjectAttributes {
  restoreStatus('RestoreStatus'),
  ;

  final String value;

  const OptionalObjectAttributes(this.value);

  static OptionalObjectAttributes fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum OptionalObjectAttributes'));
}

/// Describes the location where the restore job's output is stored.
class OutputLocation {
  /// Describes an S3 location that will receive the results of the restore
  /// request.
  final S3Location? s3;

  OutputLocation({
    this.s3,
  });

  Map<String, dynamic> toJson() {
    final s3 = this.s3;
    return {
      if (s3 != null) 'S3': s3,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final s3 = this.s3;
    final $children = <_s.XmlNode>[
      if (s3 != null) s3.toXml('S3'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Describes how results of the Select job are serialized.
class OutputSerialization {
  /// Describes the serialization of CSV-encoded Select results.
  final CSVOutput? csv;

  /// Specifies JSON as request's output serialization format.
  final JSONOutput? json;

  OutputSerialization({
    this.csv,
    this.json,
  });

  Map<String, dynamic> toJson() {
    final csv = this.csv;
    final json = this.json;
    return {
      if (csv != null) 'CSV': csv,
      if (json != null) 'JSON': json,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final csv = this.csv;
    final json = this.json;
    final $children = <_s.XmlNode>[
      if (csv != null) csv.toXml('CSV'),
      if (json != null) json.toXml('JSON'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for the owner's display name and ID.
class Owner {
  /// Container for the display name of the owner. This value is only supported in
  /// the following Amazon Web Services Regions:
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia)
  /// </li>
  /// <li>
  /// US West (N. California)
  /// </li>
  /// <li>
  /// US West (Oregon)
  /// </li>
  /// <li>
  /// Asia Pacific (Singapore)
  /// </li>
  /// <li>
  /// Asia Pacific (Sydney)
  /// </li>
  /// <li>
  /// Asia Pacific (Tokyo)
  /// </li>
  /// <li>
  /// Europe (Ireland)
  /// </li>
  /// <li>
  /// South America (São Paulo)
  /// </li>
  /// </ul> <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? displayName;

  /// Container for the ID of the owner.
  final String? id;

  Owner({
    this.displayName,
    this.id,
  });
  factory Owner.fromXml(_s.XmlElement elem) {
    return Owner(
      displayName: _s.extractXmlStringValue(elem, 'DisplayName'),
      id: _s.extractXmlStringValue(elem, 'ID'),
    );
  }

  Map<String, dynamic> toJson() {
    final displayName = this.displayName;
    final id = this.id;
    return {
      if (displayName != null) 'DisplayName': displayName,
      if (id != null) 'ID': id,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final displayName = this.displayName;
    final id = this.id;
    final $children = <_s.XmlNode>[
      if (displayName != null)
        _s.encodeXmlStringValue('DisplayName', displayName),
      if (id != null) _s.encodeXmlStringValue('ID', id),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum OwnerOverride {
  destination('Destination'),
  ;

  final String value;

  const OwnerOverride(this.value);

  static OwnerOverride fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum OwnerOverride'));
}

/// The container element for a bucket's ownership controls.
class OwnershipControls {
  /// The container element for an ownership control rule.
  final List<OwnershipControlsRule> rules;

  OwnershipControls({
    required this.rules,
  });
  factory OwnershipControls.fromXml(_s.XmlElement elem) {
    return OwnershipControls(
      rules:
          elem.findElements('Rule').map(OwnershipControlsRule.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final rules = this.rules;
    return {
      'Rule': rules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final rules = this.rules;
    final $children = <_s.XmlNode>[
      ...rules.map((e) => e.toXml('Rule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The container element for an ownership control rule.
class OwnershipControlsRule {
  final ObjectOwnership objectOwnership;

  OwnershipControlsRule({
    required this.objectOwnership,
  });
  factory OwnershipControlsRule.fromXml(_s.XmlElement elem) {
    return OwnershipControlsRule(
      objectOwnership: _s
          .extractXmlStringValue(elem, 'ObjectOwnership')!
          .let(ObjectOwnership.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final objectOwnership = this.objectOwnership;
    return {
      'ObjectOwnership': objectOwnership.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final objectOwnership = this.objectOwnership;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('ObjectOwnership', objectOwnership.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for Parquet.
class ParquetInput {
  ParquetInput();

  Map<String, dynamic> toJson() {
    return {};
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final $children = <_s.XmlNode>[];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for elements related to a part.
class Part {
  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 32-bit CRC32 checksum of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// This header can be used as a data integrity check to verify that the data
  /// received is the same data that was originally sent. This header specifies
  /// the base64-encoded, 256-bit SHA-256 digest of the object. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking
  /// object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Entity tag returned when the part was uploaded.
  final String? eTag;

  /// Date and time at which the part was uploaded.
  final DateTime? lastModified;

  /// Part number identifying the part. This is a positive integer between 1 and
  /// 10,000.
  final int? partNumber;

  /// Size in bytes of the uploaded part data.
  final int? size;

  Part({
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.lastModified,
    this.partNumber,
    this.size,
  });
  factory Part.fromXml(_s.XmlElement elem) {
    return Part(
      checksumCRC32: _s.extractXmlStringValue(elem, 'ChecksumCRC32'),
      checksumCRC32C: _s.extractXmlStringValue(elem, 'ChecksumCRC32C'),
      checksumSHA1: _s.extractXmlStringValue(elem, 'ChecksumSHA1'),
      checksumSHA256: _s.extractXmlStringValue(elem, 'ChecksumSHA256'),
      eTag: _s.extractXmlStringValue(elem, 'ETag'),
      lastModified: _s.extractXmlDateTimeValue(elem, 'LastModified'),
      partNumber: _s.extractXmlIntValue(elem, 'PartNumber'),
      size: _s.extractXmlIntValue(elem, 'Size'),
    );
  }

  Map<String, dynamic> toJson() {
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final lastModified = this.lastModified;
    final partNumber = this.partNumber;
    final size = this.size;
    return {
      if (checksumCRC32 != null) 'ChecksumCRC32': checksumCRC32,
      if (checksumCRC32C != null) 'ChecksumCRC32C': checksumCRC32C,
      if (checksumSHA1 != null) 'ChecksumSHA1': checksumSHA1,
      if (checksumSHA256 != null) 'ChecksumSHA256': checksumSHA256,
      if (eTag != null) 'ETag': eTag,
      if (lastModified != null) 'LastModified': iso8601ToJson(lastModified),
      if (partNumber != null) 'PartNumber': partNumber,
      if (size != null) 'Size': size,
    };
  }
}

enum PartitionDateSource {
  eventTime('EventTime'),
  deliveryTime('DeliveryTime'),
  ;

  final String value;

  const PartitionDateSource(this.value);

  static PartitionDateSource fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum PartitionDateSource'));
}

/// Amazon S3 keys for log objects are partitioned in the following format:
///
/// <code>[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]</code>
///
/// PartitionedPrefix defaults to EventTime delivery when server access logs are
/// delivered.
class PartitionedPrefix {
  /// Specifies the partition date source for the partitioned prefix.
  /// PartitionDateSource can be EventTime or DeliveryTime.
  final PartitionDateSource? partitionDateSource;

  PartitionedPrefix({
    this.partitionDateSource,
  });
  factory PartitionedPrefix.fromXml(_s.XmlElement elem) {
    return PartitionedPrefix(
      partitionDateSource: _s
          .extractXmlStringValue(elem, 'PartitionDateSource')
          ?.let(PartitionDateSource.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final partitionDateSource = this.partitionDateSource;
    return {
      if (partitionDateSource != null)
        'PartitionDateSource': partitionDateSource.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final partitionDateSource = this.partitionDateSource;
    final $children = <_s.XmlNode>[
      if (partitionDateSource != null)
        _s.encodeXmlStringValue(
            'PartitionDateSource', partitionDateSource.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum Payer {
  requester('Requester'),
  bucketOwner('BucketOwner'),
  ;

  final String value;

  const Payer(this.value);

  static Payer fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Payer'));
}

enum Permission {
  fullControl('FULL_CONTROL'),
  write('WRITE'),
  writeAcp('WRITE_ACP'),
  read('READ'),
  readAcp('READ_ACP'),
  ;

  final String value;

  const Permission(this.value);

  static Permission fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Permission'));
}

/// The container element for a bucket's policy status.
class PolicyStatus {
  /// The policy status for this bucket. <code>TRUE</code> indicates that this
  /// bucket is public. <code>FALSE</code> indicates that the bucket is not
  /// public.
  final bool? isPublic;

  PolicyStatus({
    this.isPublic,
  });
  factory PolicyStatus.fromXml(_s.XmlElement elem) {
    return PolicyStatus(
      isPublic: _s.extractXmlBoolValue(elem, 'IsPublic'),
    );
  }

  Map<String, dynamic> toJson() {
    final isPublic = this.isPublic;
    return {
      if (isPublic != null) 'IsPublic': isPublic,
    };
  }
}

/// This data type contains information about progress of an operation.
class Progress {
  /// The current number of uncompressed object bytes processed.
  final int? bytesProcessed;

  /// The current number of bytes of records payload data returned.
  final int? bytesReturned;

  /// The current number of object bytes scanned.
  final int? bytesScanned;

  Progress({
    this.bytesProcessed,
    this.bytesReturned,
    this.bytesScanned,
  });
  factory Progress.fromXml(_s.XmlElement elem) {
    return Progress(
      bytesProcessed: _s.extractXmlIntValue(elem, 'BytesProcessed'),
      bytesReturned: _s.extractXmlIntValue(elem, 'BytesReturned'),
      bytesScanned: _s.extractXmlIntValue(elem, 'BytesScanned'),
    );
  }

  Map<String, dynamic> toJson() {
    final bytesProcessed = this.bytesProcessed;
    final bytesReturned = this.bytesReturned;
    final bytesScanned = this.bytesScanned;
    return {
      if (bytesProcessed != null) 'BytesProcessed': bytesProcessed,
      if (bytesReturned != null) 'BytesReturned': bytesReturned,
      if (bytesScanned != null) 'BytesScanned': bytesScanned,
    };
  }
}

/// This data type contains information about the progress event of an
/// operation.
class ProgressEvent {
  /// The Progress event details.
  final Progress? details;

  ProgressEvent({
    this.details,
  });
  factory ProgressEvent.fromXml(_s.XmlElement elem) {
    return ProgressEvent(
      details: _s.extractXmlChild(elem, 'Details')?.let(Progress.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final details = this.details;
    return {
      if (details != null) 'Details': details,
    };
  }
}

enum Protocol {
  http('http'),
  https('https'),
  ;

  final String value;

  const Protocol(this.value);

  static Protocol fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Protocol'));
}

/// The PublicAccessBlock configuration that you want to apply to this Amazon S3
/// bucket. You can enable the configuration options in any combination. For
/// more information about when Amazon S3 considers a bucket or object public,
/// see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The
/// Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>.
class PublicAccessBlockConfiguration {
  /// Specifies whether Amazon S3 should block public access control lists (ACLs)
  /// for this bucket and objects in this bucket. Setting this element to
  /// <code>TRUE</code> causes the following behavior:
  ///
  /// <ul>
  /// <li>
  /// PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.
  /// </li>
  /// <li>
  /// PUT Object calls fail if the request includes a public ACL.
  /// </li>
  /// <li>
  /// PUT Bucket calls fail if the request includes a public ACL.
  /// </li>
  /// </ul>
  /// Enabling this setting doesn't affect existing policies or ACLs.
  final bool? blockPublicAcls;

  /// Specifies whether Amazon S3 should block public bucket policies for this
  /// bucket. Setting this element to <code>TRUE</code> causes Amazon S3 to reject
  /// calls to PUT Bucket policy if the specified bucket policy allows public
  /// access.
  ///
  /// Enabling this setting doesn't affect existing bucket policies.
  final bool? blockPublicPolicy;

  /// Specifies whether Amazon S3 should ignore public ACLs for this bucket and
  /// objects in this bucket. Setting this element to <code>TRUE</code> causes
  /// Amazon S3 to ignore all public ACLs on this bucket and objects in this
  /// bucket.
  ///
  /// Enabling this setting doesn't affect the persistence of any existing ACLs
  /// and doesn't prevent new public ACLs from being set.
  final bool? ignorePublicAcls;

  /// Specifies whether Amazon S3 should restrict public bucket policies for this
  /// bucket. Setting this element to <code>TRUE</code> restricts access to this
  /// bucket to only Amazon Web Service principals and authorized users within
  /// this account if the bucket has a public policy.
  ///
  /// Enabling this setting doesn't affect previously stored bucket policies,
  /// except that public and cross-account access within any public bucket policy,
  /// including non-public delegation to specific accounts, is blocked.
  final bool? restrictPublicBuckets;

  PublicAccessBlockConfiguration({
    this.blockPublicAcls,
    this.blockPublicPolicy,
    this.ignorePublicAcls,
    this.restrictPublicBuckets,
  });
  factory PublicAccessBlockConfiguration.fromXml(_s.XmlElement elem) {
    return PublicAccessBlockConfiguration(
      blockPublicAcls: _s.extractXmlBoolValue(elem, 'BlockPublicAcls'),
      blockPublicPolicy: _s.extractXmlBoolValue(elem, 'BlockPublicPolicy'),
      ignorePublicAcls: _s.extractXmlBoolValue(elem, 'IgnorePublicAcls'),
      restrictPublicBuckets:
          _s.extractXmlBoolValue(elem, 'RestrictPublicBuckets'),
    );
  }

  Map<String, dynamic> toJson() {
    final blockPublicAcls = this.blockPublicAcls;
    final blockPublicPolicy = this.blockPublicPolicy;
    final ignorePublicAcls = this.ignorePublicAcls;
    final restrictPublicBuckets = this.restrictPublicBuckets;
    return {
      if (blockPublicAcls != null) 'BlockPublicAcls': blockPublicAcls,
      if (blockPublicPolicy != null) 'BlockPublicPolicy': blockPublicPolicy,
      if (ignorePublicAcls != null) 'IgnorePublicAcls': ignorePublicAcls,
      if (restrictPublicBuckets != null)
        'RestrictPublicBuckets': restrictPublicBuckets,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final blockPublicAcls = this.blockPublicAcls;
    final blockPublicPolicy = this.blockPublicPolicy;
    final ignorePublicAcls = this.ignorePublicAcls;
    final restrictPublicBuckets = this.restrictPublicBuckets;
    final $children = <_s.XmlNode>[
      if (blockPublicAcls != null)
        _s.encodeXmlBoolValue('BlockPublicAcls', blockPublicAcls),
      if (ignorePublicAcls != null)
        _s.encodeXmlBoolValue('IgnorePublicAcls', ignorePublicAcls),
      if (blockPublicPolicy != null)
        _s.encodeXmlBoolValue('BlockPublicPolicy', blockPublicPolicy),
      if (restrictPublicBuckets != null)
        _s.encodeXmlBoolValue('RestrictPublicBuckets', restrictPublicBuckets),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class PutObjectAclOutput {
  final RequestCharged? requestCharged;

  PutObjectAclOutput({
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    return {};
  }
}

class PutObjectLegalHoldOutput {
  final RequestCharged? requestCharged;

  PutObjectLegalHoldOutput({
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    return {};
  }
}

class PutObjectLockConfigurationOutput {
  final RequestCharged? requestCharged;

  PutObjectLockConfigurationOutput({
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    return {};
  }
}

class PutObjectOutput {
  /// Indicates whether the uploaded object uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Entity tag for the uploaded object.
  ///
  /// <b>General purpose buckets </b> - To ensure that data is not corrupted
  /// traversing the network, for objects where the ETag is the MD5 digest of the
  /// object, you can calculate the MD5 while putting an object to Amazon S3 and
  /// compare the returned ETag to the calculated MD5 value.
  ///
  /// <b>Directory buckets </b> - The ETag for the object in a directory bucket
  /// isn't the MD5 digest of the object.
  final String? eTag;

  /// If the expiration is configured for the object (see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>)
  /// in the <i>Amazon S3 User Guide</i>, the response includes this header. It
  /// includes the <code>expiry-date</code> and <code>rule-id</code> key-value
  /// pairs that provide information about object expiration. The value of the
  /// <code>rule-id</code> is URL-encoded.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? expiration;
  final RequestCharged? requestCharged;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the Amazon Web Services KMS Encryption Context to use
  /// for object encryption. The value of this header is a base64-encoded UTF-8
  /// string holding JSON with the encryption context key-value pairs. This value
  /// is stored as object metadata and automatically gets passed on to Amazon Web
  /// Services KMS for future <code>GetObject</code> or <code>CopyObject</code>
  /// operations on this object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSEncryptionContext;

  /// If <code>x-amz-server-side-encryption</code> has a valid value of
  /// <code>aws:kms</code> or <code>aws:kms:dsse</code>, this header indicates the
  /// ID of the Key Management Service (KMS) symmetric encryption customer managed
  /// key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>,
  /// <code>aws:kms:dsse</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  /// Version ID of the object.
  ///
  /// If you enable versioning for a bucket, Amazon S3 automatically generates a
  /// unique version ID for the object being stored. Amazon S3 returns this ID in
  /// the response. When you enable versioning for a bucket, if Amazon S3 receives
  /// multiple write requests for the same object simultaneously, it stores all of
  /// the objects. For more information about versioning, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html">Adding
  /// Objects to Versioning-Enabled Buckets</a> in the <i>Amazon S3 User
  /// Guide</i>. For information about returning the versioning state of a bucket,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html">GetBucketVersioning</a>.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? versionId;

  PutObjectOutput({
    this.bucketKeyEnabled,
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.expiration,
    this.requestCharged,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSEncryptionContext,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final expiration = this.expiration;
    final requestCharged = this.requestCharged;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSEncryptionContext = this.sSEKMSEncryptionContext;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    final versionId = this.versionId;
    return {};
  }
}

class PutObjectRetentionOutput {
  final RequestCharged? requestCharged;

  PutObjectRetentionOutput({
    this.requestCharged,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    return {};
  }
}

class PutObjectTaggingOutput {
  /// The versionId of the object the tag-set was added to.
  final String? versionId;

  PutObjectTaggingOutput({
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final versionId = this.versionId;
    return {};
  }
}

/// Specifies the configuration for publishing messages to an Amazon Simple
/// Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
class QueueConfiguration {
  /// A collection of bucket events for which to send notifications
  final List<Event> events;

  /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3
  /// publishes a message when it detects events of the specified type.
  final String queueArn;
  final NotificationConfigurationFilter? filter;
  final String? id;

  QueueConfiguration({
    required this.events,
    required this.queueArn,
    this.filter,
    this.id,
  });
  factory QueueConfiguration.fromXml(_s.XmlElement elem) {
    return QueueConfiguration(
      events: _s
          .extractXmlStringListValues(elem, 'Event')
          .map(Event.fromString)
          .toList(),
      queueArn: _s.extractXmlStringValue(elem, 'Queue')!,
      filter: _s
          .extractXmlChild(elem, 'Filter')
          ?.let(NotificationConfigurationFilter.fromXml),
      id: _s.extractXmlStringValue(elem, 'Id'),
    );
  }

  Map<String, dynamic> toJson() {
    final events = this.events;
    final queueArn = this.queueArn;
    final filter = this.filter;
    final id = this.id;
    return {
      'Event': events.map((e) => e.value).toList(),
      'Queue': queueArn,
      if (filter != null) 'Filter': filter,
      if (id != null) 'Id': id,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final events = this.events;
    final queueArn = this.queueArn;
    final filter = this.filter;
    final id = this.id;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('Id', id),
      _s.encodeXmlStringValue('Queue', queueArn),
      ...events.map((e) => _s.encodeXmlStringValue('Event', e.value)),
      if (filter != null) filter.toXml('Filter'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// This data type is deprecated. Use <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_QueueConfiguration.html">QueueConfiguration</a>
/// for the same purposes. This data type specifies the configuration for
/// publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue
/// when Amazon S3 detects specified events.
class QueueConfigurationDeprecated {
  final Event? event;

  /// A collection of bucket events for which to send notifications.
  final List<Event>? events;
  final String? id;

  /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3
  /// publishes a message when it detects events of the specified type.
  final String? queue;

  QueueConfigurationDeprecated({
    this.event,
    this.events,
    this.id,
    this.queue,
  });
  factory QueueConfigurationDeprecated.fromXml(_s.XmlElement elem) {
    return QueueConfigurationDeprecated(
      event: _s.extractXmlStringValue(elem, 'Event')?.let(Event.fromString),
      events: _s
          .extractXmlStringListValues(elem, 'Event')
          .map(Event.fromString)
          .toList(),
      id: _s.extractXmlStringValue(elem, 'Id'),
      queue: _s.extractXmlStringValue(elem, 'Queue'),
    );
  }

  Map<String, dynamic> toJson() {
    final event = this.event;
    final events = this.events;
    final id = this.id;
    final queue = this.queue;
    return {
      if (event != null) 'Event': event.value,
      if (events != null) 'Event': events.map((e) => e.value).toList(),
      if (id != null) 'Id': id,
      if (queue != null) 'Queue': queue,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final event = this.event;
    final events = this.events;
    final id = this.id;
    final queue = this.queue;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('Id', id),
      if (event != null) _s.encodeXmlStringValue('Event', event.value),
      if (events != null)
        ...events.map((e) => _s.encodeXmlStringValue('Event', e.value)),
      if (queue != null) _s.encodeXmlStringValue('Queue', queue),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum QuoteFields {
  always('ALWAYS'),
  asneeded('ASNEEDED'),
  ;

  final String value;

  const QuoteFields(this.value);

  static QuoteFields fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum QuoteFields'));
}

/// The container for the records event.
class RecordsEvent {
  /// The byte array of partial, one or more result records.
  final Uint8List? payload;

  RecordsEvent({
    this.payload,
  });
  factory RecordsEvent.fromXml(_s.XmlElement elem) {
    return RecordsEvent(
      payload: _s.extractXmlUint8ListValue(elem, 'Payload'),
    );
  }

  Map<String, dynamic> toJson() {
    final payload = this.payload;
    return {
      if (payload != null) 'Payload': base64Encode(payload),
    };
  }
}

/// Specifies how requests are redirected. In the event of an error, you can
/// specify a different error code to return.
class Redirect {
  /// The host name to use in the redirect request.
  final String? hostName;

  /// The HTTP redirect code to use on the response. Not required if one of the
  /// siblings is present.
  final String? httpRedirectCode;

  /// Protocol to use when redirecting requests. The default is the protocol that
  /// is used in the original request.
  final Protocol? protocol;

  /// The object key prefix to use in the redirect request. For example, to
  /// redirect requests for all pages with prefix <code>docs/</code> (objects in
  /// the <code>docs/</code> folder) to <code>documents/</code>, you can set a
  /// condition block with <code>KeyPrefixEquals</code> set to <code>docs/</code>
  /// and in the Redirect set <code>ReplaceKeyPrefixWith</code> to
  /// <code>/documents</code>. Not required if one of the siblings is present. Can
  /// be present only if <code>ReplaceKeyWith</code> is not provided.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? replaceKeyPrefixWith;

  /// The specific object key to use in the redirect request. For example,
  /// redirect request to <code>error.html</code>. Not required if one of the
  /// siblings is present. Can be present only if
  /// <code>ReplaceKeyPrefixWith</code> is not provided.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? replaceKeyWith;

  Redirect({
    this.hostName,
    this.httpRedirectCode,
    this.protocol,
    this.replaceKeyPrefixWith,
    this.replaceKeyWith,
  });
  factory Redirect.fromXml(_s.XmlElement elem) {
    return Redirect(
      hostName: _s.extractXmlStringValue(elem, 'HostName'),
      httpRedirectCode: _s.extractXmlStringValue(elem, 'HttpRedirectCode'),
      protocol:
          _s.extractXmlStringValue(elem, 'Protocol')?.let(Protocol.fromString),
      replaceKeyPrefixWith:
          _s.extractXmlStringValue(elem, 'ReplaceKeyPrefixWith'),
      replaceKeyWith: _s.extractXmlStringValue(elem, 'ReplaceKeyWith'),
    );
  }

  Map<String, dynamic> toJson() {
    final hostName = this.hostName;
    final httpRedirectCode = this.httpRedirectCode;
    final protocol = this.protocol;
    final replaceKeyPrefixWith = this.replaceKeyPrefixWith;
    final replaceKeyWith = this.replaceKeyWith;
    return {
      if (hostName != null) 'HostName': hostName,
      if (httpRedirectCode != null) 'HttpRedirectCode': httpRedirectCode,
      if (protocol != null) 'Protocol': protocol.value,
      if (replaceKeyPrefixWith != null)
        'ReplaceKeyPrefixWith': replaceKeyPrefixWith,
      if (replaceKeyWith != null) 'ReplaceKeyWith': replaceKeyWith,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final hostName = this.hostName;
    final httpRedirectCode = this.httpRedirectCode;
    final protocol = this.protocol;
    final replaceKeyPrefixWith = this.replaceKeyPrefixWith;
    final replaceKeyWith = this.replaceKeyWith;
    final $children = <_s.XmlNode>[
      if (hostName != null) _s.encodeXmlStringValue('HostName', hostName),
      if (httpRedirectCode != null)
        _s.encodeXmlStringValue('HttpRedirectCode', httpRedirectCode),
      if (protocol != null) _s.encodeXmlStringValue('Protocol', protocol.value),
      if (replaceKeyPrefixWith != null)
        _s.encodeXmlStringValue('ReplaceKeyPrefixWith', replaceKeyPrefixWith),
      if (replaceKeyWith != null)
        _s.encodeXmlStringValue('ReplaceKeyWith', replaceKeyWith),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the redirect behavior of all requests to a website endpoint of an
/// Amazon S3 bucket.
class RedirectAllRequestsTo {
  /// Name of the host where requests are redirected.
  final String hostName;

  /// Protocol to use when redirecting requests. The default is the protocol that
  /// is used in the original request.
  final Protocol? protocol;

  RedirectAllRequestsTo({
    required this.hostName,
    this.protocol,
  });
  factory RedirectAllRequestsTo.fromXml(_s.XmlElement elem) {
    return RedirectAllRequestsTo(
      hostName: _s.extractXmlStringValue(elem, 'HostName')!,
      protocol:
          _s.extractXmlStringValue(elem, 'Protocol')?.let(Protocol.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final hostName = this.hostName;
    final protocol = this.protocol;
    return {
      'HostName': hostName,
      if (protocol != null) 'Protocol': protocol.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final hostName = this.hostName;
    final protocol = this.protocol;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('HostName', hostName),
      if (protocol != null) _s.encodeXmlStringValue('Protocol', protocol.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A filter that you can specify for selection for modifications on replicas.
/// Amazon S3 doesn't replicate replica modifications by default. In the latest
/// version of replication configuration (when <code>Filter</code> is
/// specified), you can specify this element and set the status to
/// <code>Enabled</code> to replicate modifications on replicas.
/// <note>
/// If you don't specify the <code>Filter</code> element, Amazon S3 assumes that
/// the replication configuration is the earlier version, V1. In the earlier
/// version, this element is not allowed.
/// </note>
class ReplicaModifications {
  /// Specifies whether Amazon S3 replicates modifications on replicas.
  final ReplicaModificationsStatus status;

  ReplicaModifications({
    required this.status,
  });
  factory ReplicaModifications.fromXml(_s.XmlElement elem) {
    return ReplicaModifications(
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(ReplicaModificationsStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ReplicaModificationsStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ReplicaModificationsStatus(this.value);

  static ReplicaModificationsStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ReplicaModificationsStatus'));
}

/// A container for replication rules. You can add up to 1,000 rules. The
/// maximum size of a replication configuration is 2 MB.
class ReplicationConfiguration {
  /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM)
  /// role that Amazon S3 assumes when replicating objects. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html">How
  /// to Set Up Replication</a> in the <i>Amazon S3 User Guide</i>.
  final String role;

  /// A container for one or more replication rules. A replication configuration
  /// must have at least one rule and can contain a maximum of 1,000 rules.
  final List<ReplicationRule> rules;

  ReplicationConfiguration({
    required this.role,
    required this.rules,
  });
  factory ReplicationConfiguration.fromXml(_s.XmlElement elem) {
    return ReplicationConfiguration(
      role: _s.extractXmlStringValue(elem, 'Role')!,
      rules: elem.findElements('Rule').map(ReplicationRule.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final role = this.role;
    final rules = this.rules;
    return {
      'Role': role,
      'Rule': rules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final role = this.role;
    final rules = this.rules;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Role', role),
      ...rules.map((e) => e.toXml('Rule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies which Amazon S3 objects to replicate and where to store the
/// replicas.
class ReplicationRule {
  /// A container for information about the replication destination and its
  /// configurations including enabling the S3 Replication Time Control (S3 RTC).
  final Destination destination;

  /// Specifies whether the rule is enabled.
  final ReplicationRuleStatus status;
  final DeleteMarkerReplication? deleteMarkerReplication;

  /// Optional configuration to replicate existing source bucket objects. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication">Replicating
  /// Existing Objects</a> in the <i>Amazon S3 User Guide</i>.
  final ExistingObjectReplication? existingObjectReplication;
  final ReplicationRuleFilter? filter;

  /// A unique identifier for the rule. The maximum value is 255 characters.
  final String? id;

  /// An object key name prefix that identifies the object or objects to which the
  /// rule applies. The maximum prefix length is 1,024 characters. To include all
  /// objects in a bucket, specify an empty string.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? prefix;

  /// The priority indicates which rule has precedence whenever two or more
  /// replication rules conflict. Amazon S3 will attempt to replicate objects
  /// according to all replication rules. However, if there are two or more rules
  /// with the same destination bucket, then objects will be replicated according
  /// to the rule with the highest priority. The higher the number, the higher the
  /// priority.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a>
  /// in the <i>Amazon S3 User Guide</i>.
  final int? priority;

  /// A container that describes additional filters for identifying the source
  /// objects that you want to replicate. You can choose to enable or disable the
  /// replication of these objects. Currently, Amazon S3 supports only the filter
  /// that you can specify for objects created with server-side encryption using a
  /// customer managed key stored in Amazon Web Services Key Management Service
  /// (SSE-KMS).
  final SourceSelectionCriteria? sourceSelectionCriteria;

  ReplicationRule({
    required this.destination,
    required this.status,
    this.deleteMarkerReplication,
    this.existingObjectReplication,
    this.filter,
    this.id,
    this.prefix,
    this.priority,
    this.sourceSelectionCriteria,
  });
  factory ReplicationRule.fromXml(_s.XmlElement elem) {
    return ReplicationRule(
      destination:
          Destination.fromXml(_s.extractXmlChild(elem, 'Destination')!),
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(ReplicationRuleStatus.fromString),
      deleteMarkerReplication: _s
          .extractXmlChild(elem, 'DeleteMarkerReplication')
          ?.let(DeleteMarkerReplication.fromXml),
      existingObjectReplication: _s
          .extractXmlChild(elem, 'ExistingObjectReplication')
          ?.let(ExistingObjectReplication.fromXml),
      filter: _s
          .extractXmlChild(elem, 'Filter')
          ?.let(ReplicationRuleFilter.fromXml),
      id: _s.extractXmlStringValue(elem, 'ID'),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      priority: _s.extractXmlIntValue(elem, 'Priority'),
      sourceSelectionCriteria: _s
          .extractXmlChild(elem, 'SourceSelectionCriteria')
          ?.let(SourceSelectionCriteria.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final status = this.status;
    final deleteMarkerReplication = this.deleteMarkerReplication;
    final existingObjectReplication = this.existingObjectReplication;
    final filter = this.filter;
    final id = this.id;
    final prefix = this.prefix;
    final priority = this.priority;
    final sourceSelectionCriteria = this.sourceSelectionCriteria;
    return {
      'Destination': destination,
      'Status': status.value,
      if (deleteMarkerReplication != null)
        'DeleteMarkerReplication': deleteMarkerReplication,
      if (existingObjectReplication != null)
        'ExistingObjectReplication': existingObjectReplication,
      if (filter != null) 'Filter': filter,
      if (id != null) 'ID': id,
      if (prefix != null) 'Prefix': prefix,
      if (priority != null) 'Priority': priority,
      if (sourceSelectionCriteria != null)
        'SourceSelectionCriteria': sourceSelectionCriteria,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final destination = this.destination;
    final status = this.status;
    final deleteMarkerReplication = this.deleteMarkerReplication;
    final existingObjectReplication = this.existingObjectReplication;
    final filter = this.filter;
    final id = this.id;
    final prefix = this.prefix;
    final priority = this.priority;
    final sourceSelectionCriteria = this.sourceSelectionCriteria;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('ID', id),
      if (priority != null) _s.encodeXmlIntValue('Priority', priority),
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (filter != null) filter.toXml('Filter'),
      _s.encodeXmlStringValue('Status', status.value),
      if (sourceSelectionCriteria != null)
        sourceSelectionCriteria.toXml('SourceSelectionCriteria'),
      if (existingObjectReplication != null)
        existingObjectReplication.toXml('ExistingObjectReplication'),
      destination.toXml('Destination'),
      if (deleteMarkerReplication != null)
        deleteMarkerReplication.toXml('DeleteMarkerReplication'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for specifying rule filters. The filters determine the subset of
/// objects to which the rule applies. This element is required only if you
/// specify more than one filter.
///
/// For example:
///
/// <ul>
/// <li>
/// If you specify both a <code>Prefix</code> and a <code>Tag</code> filter,
/// wrap these filters in an <code>And</code> tag.
/// </li>
/// <li>
/// If you specify a filter based on multiple tags, wrap the <code>Tag</code>
/// elements in an <code>And</code> tag.
/// </li>
/// </ul>
class ReplicationRuleAndOperator {
  /// An object key name prefix that identifies the subset of objects to which the
  /// rule applies.
  final String? prefix;

  /// An array of tags containing key and value pairs.
  final List<Tag>? tags;

  ReplicationRuleAndOperator({
    this.prefix,
    this.tags,
  });
  factory ReplicationRuleAndOperator.fromXml(_s.XmlElement elem) {
    return ReplicationRuleAndOperator(
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tags: elem.findElements('Tag').map(Tag.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final prefix = this.prefix;
    final tags = this.tags;
    return {
      if (prefix != null) 'Prefix': prefix,
      if (tags != null) 'Tag': tags,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final prefix = this.prefix;
    final tags = this.tags;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tags != null) ...tags.map((e) => e.toXml('Tag')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A filter that identifies the subset of objects to which the replication rule
/// applies. A <code>Filter</code> must specify exactly one <code>Prefix</code>,
/// <code>Tag</code>, or an <code>And</code> child element.
class ReplicationRuleFilter {
  /// A container for specifying rule filters. The filters determine the subset of
  /// objects to which the rule applies. This element is required only if you
  /// specify more than one filter. For example:
  ///
  /// <ul>
  /// <li>
  /// If you specify both a <code>Prefix</code> and a <code>Tag</code> filter,
  /// wrap these filters in an <code>And</code> tag.
  /// </li>
  /// <li>
  /// If you specify a filter based on multiple tags, wrap the <code>Tag</code>
  /// elements in an <code>And</code> tag.
  /// </li>
  /// </ul>
  final ReplicationRuleAndOperator? and;

  /// An object key name prefix that identifies the subset of objects to which the
  /// rule applies.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String? prefix;

  /// A container for specifying a tag key and value.
  ///
  /// The rule applies only to objects that have the tag in their tag set.
  final Tag? tag;

  ReplicationRuleFilter({
    this.and,
    this.prefix,
    this.tag,
  });
  factory ReplicationRuleFilter.fromXml(_s.XmlElement elem) {
    return ReplicationRuleFilter(
      and: _s
          .extractXmlChild(elem, 'And')
          ?.let(ReplicationRuleAndOperator.fromXml),
      prefix: _s.extractXmlStringValue(elem, 'Prefix'),
      tag: _s.extractXmlChild(elem, 'Tag')?.let(Tag.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    return {
      if (and != null) 'And': and,
      if (prefix != null) 'Prefix': prefix,
      if (tag != null) 'Tag': tag,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final and = this.and;
    final prefix = this.prefix;
    final tag = this.tag;
    final $children = <_s.XmlNode>[
      if (prefix != null) _s.encodeXmlStringValue('Prefix', prefix),
      if (tag != null) tag.toXml('Tag'),
      if (and != null) and.toXml('And'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ReplicationRuleStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ReplicationRuleStatus(this.value);

  static ReplicationRuleStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ReplicationRuleStatus'));
}

enum ReplicationStatus {
  complete('COMPLETE'),
  pending('PENDING'),
  failed('FAILED'),
  replica('REPLICA'),
  completed('COMPLETED'),
  ;

  final String value;

  const ReplicationStatus(this.value);

  static ReplicationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ReplicationStatus'));
}

/// A container specifying S3 Replication Time Control (S3 RTC) related
/// information, including whether S3 RTC is enabled and the time when all
/// objects and operations on objects must be replicated. Must be specified
/// together with a <code>Metrics</code> block.
class ReplicationTime {
  /// Specifies whether the replication time is enabled.
  final ReplicationTimeStatus status;

  /// A container specifying the time by which replication should be complete for
  /// all objects and operations on objects.
  final ReplicationTimeValue time;

  ReplicationTime({
    required this.status,
    required this.time,
  });
  factory ReplicationTime.fromXml(_s.XmlElement elem) {
    return ReplicationTime(
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(ReplicationTimeStatus.fromString),
      time: ReplicationTimeValue.fromXml(_s.extractXmlChild(elem, 'Time')!),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final time = this.time;
    return {
      'Status': status.value,
      'Time': time,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final time = this.time;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Status', status.value),
      time.toXml('Time'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ReplicationTimeStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ReplicationTimeStatus(this.value);

  static ReplicationTimeStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ReplicationTimeStatus'));
}

/// A container specifying the time value for S3 Replication Time Control (S3
/// RTC) and replication metrics <code>EventThreshold</code>.
class ReplicationTimeValue {
  /// Contains an integer specifying time in minutes.
  ///
  /// Valid value: 15
  final int? minutes;

  ReplicationTimeValue({
    this.minutes,
  });
  factory ReplicationTimeValue.fromXml(_s.XmlElement elem) {
    return ReplicationTimeValue(
      minutes: _s.extractXmlIntValue(elem, 'Minutes'),
    );
  }

  Map<String, dynamic> toJson() {
    final minutes = this.minutes;
    return {
      if (minutes != null) 'Minutes': minutes,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final minutes = this.minutes;
    final $children = <_s.XmlNode>[
      if (minutes != null) _s.encodeXmlIntValue('Minutes', minutes),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// If present, indicates that the requester was successfully charged for the
/// request.
/// <note>
/// This functionality is not supported for directory buckets.
/// </note>
enum RequestCharged {
  requester('requester'),
  ;

  final String value;

  const RequestCharged(this.value);

  static RequestCharged fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum RequestCharged'));
}

/// Confirms that the requester knows that they will be charged for the request.
/// Bucket owners need not specify this parameter in their requests. If either
/// the source or destination S3 bucket has Requester Pays enabled, the
/// requester will pay for corresponding charges to copy the object. For
/// information about downloading objects from Requester Pays buckets, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading
/// Objects in Requester Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.
/// <note>
/// This functionality is not supported for directory buckets.
/// </note>
enum RequestPayer {
  requester('requester'),
  ;

  final String value;

  const RequestPayer(this.value);

  static RequestPayer fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum RequestPayer'));
}

/// Container for Payer.
class RequestPaymentConfiguration {
  /// Specifies who pays for the download and request fees.
  final Payer payer;

  RequestPaymentConfiguration({
    required this.payer,
  });

  Map<String, dynamic> toJson() {
    final payer = this.payer;
    return {
      'Payer': payer.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final payer = this.payer;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Payer', payer.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for specifying if periodic <code>QueryProgress</code> messages
/// should be sent.
class RequestProgress {
  /// Specifies whether periodic QueryProgress frames should be sent. Valid
  /// values: TRUE, FALSE. Default value: FALSE.
  final bool? enabled;

  RequestProgress({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'Enabled': enabled,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final enabled = this.enabled;
    final $children = <_s.XmlNode>[
      if (enabled != null) _s.encodeXmlBoolValue('Enabled', enabled),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class RestoreObjectOutput {
  final RequestCharged? requestCharged;

  /// Indicates the path in the provided S3 output location where Select results
  /// will be restored to.
  final String? restoreOutputPath;

  RestoreObjectOutput({
    this.requestCharged,
    this.restoreOutputPath,
  });

  Map<String, dynamic> toJson() {
    final requestCharged = this.requestCharged;
    final restoreOutputPath = this.restoreOutputPath;
    return {};
  }
}

/// Container for restore job parameters.
class RestoreRequest {
  /// Lifetime of the active copy in days. Do not use with restores that specify
  /// <code>OutputLocation</code>.
  ///
  /// The Days element is required for regular restores, and must not be provided
  /// for select requests.
  final int? days;

  /// The optional description for the job.
  final String? description;

  /// S3 Glacier related parameters pertaining to this job. Do not use with
  /// restores that specify <code>OutputLocation</code>.
  final GlacierJobParameters? glacierJobParameters;

  /// Describes the location where the restore job's output is stored.
  final OutputLocation? outputLocation;

  /// Describes the parameters for Select job types.
  final SelectParameters? selectParameters;

  /// Retrieval tier at which the restore will be processed.
  final Tier? tier;

  /// Type of restore request.
  final RestoreRequestType? type;

  RestoreRequest({
    this.days,
    this.description,
    this.glacierJobParameters,
    this.outputLocation,
    this.selectParameters,
    this.tier,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final days = this.days;
    final description = this.description;
    final glacierJobParameters = this.glacierJobParameters;
    final outputLocation = this.outputLocation;
    final selectParameters = this.selectParameters;
    final tier = this.tier;
    final type = this.type;
    return {
      if (days != null) 'Days': days,
      if (description != null) 'Description': description,
      if (glacierJobParameters != null)
        'GlacierJobParameters': glacierJobParameters,
      if (outputLocation != null) 'OutputLocation': outputLocation,
      if (selectParameters != null) 'SelectParameters': selectParameters,
      if (tier != null) 'Tier': tier.value,
      if (type != null) 'Type': type.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final days = this.days;
    final description = this.description;
    final glacierJobParameters = this.glacierJobParameters;
    final outputLocation = this.outputLocation;
    final selectParameters = this.selectParameters;
    final tier = this.tier;
    final type = this.type;
    final $children = <_s.XmlNode>[
      if (days != null) _s.encodeXmlIntValue('Days', days),
      if (glacierJobParameters != null)
        glacierJobParameters.toXml('GlacierJobParameters'),
      if (type != null) _s.encodeXmlStringValue('Type', type.value),
      if (tier != null) _s.encodeXmlStringValue('Tier', tier.value),
      if (description != null)
        _s.encodeXmlStringValue('Description', description),
      if (selectParameters != null) selectParameters.toXml('SelectParameters'),
      if (outputLocation != null) outputLocation.toXml('OutputLocation'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum RestoreRequestType {
  select('SELECT'),
  ;

  final String value;

  const RestoreRequestType(this.value);

  static RestoreRequestType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RestoreRequestType'));
}

/// Specifies the restoration status of an object. Objects in certain storage
/// classes must be restored before they can be retrieved. For more information
/// about these storage classes and how to work with archived objects, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html">
/// Working with archived objects</a> in the <i>Amazon S3 User Guide</i>.
/// <note>
/// This functionality is not supported for directory buckets. Only the S3
/// Express One Zone storage class is supported by directory buckets to store
/// objects.
/// </note>
class RestoreStatus {
  /// Specifies whether the object is currently being restored. If the object
  /// restoration is in progress, the header returns the value <code>TRUE</code>.
  /// For example:
  ///
  /// <code>x-amz-optional-object-attributes: IsRestoreInProgress="true"</code>
  ///
  /// If the object restoration has completed, the header returns the value
  /// <code>FALSE</code>. For example:
  ///
  /// <code>x-amz-optional-object-attributes: IsRestoreInProgress="false",
  /// RestoreExpiryDate="2012-12-21T00:00:00.000Z"</code>
  ///
  /// If the object hasn't been restored, there is no header response.
  final bool? isRestoreInProgress;

  /// Indicates when the restored copy will expire. This value is populated only
  /// if the object has already been restored. For example:
  ///
  /// <code>x-amz-optional-object-attributes: IsRestoreInProgress="false",
  /// RestoreExpiryDate="2012-12-21T00:00:00.000Z"</code>
  final DateTime? restoreExpiryDate;

  RestoreStatus({
    this.isRestoreInProgress,
    this.restoreExpiryDate,
  });
  factory RestoreStatus.fromXml(_s.XmlElement elem) {
    return RestoreStatus(
      isRestoreInProgress: _s.extractXmlBoolValue(elem, 'IsRestoreInProgress'),
      restoreExpiryDate: _s.extractXmlDateTimeValue(elem, 'RestoreExpiryDate'),
    );
  }

  Map<String, dynamic> toJson() {
    final isRestoreInProgress = this.isRestoreInProgress;
    final restoreExpiryDate = this.restoreExpiryDate;
    return {
      if (isRestoreInProgress != null)
        'IsRestoreInProgress': isRestoreInProgress,
      if (restoreExpiryDate != null)
        'RestoreExpiryDate': iso8601ToJson(restoreExpiryDate),
    };
  }
}

/// Specifies the redirect behavior and when a redirect is applied. For more
/// information about routing rules, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects">Configuring
/// advanced conditional redirects</a> in the <i>Amazon S3 User Guide</i>.
class RoutingRule {
  /// Container for redirect information. You can redirect requests to another
  /// host, to another page, or with another protocol. In the event of an error,
  /// you can specify a different error code to return.
  final Redirect redirect;

  /// A container for describing a condition that must be met for the specified
  /// redirect to apply. For example, 1. If request is for pages in the
  /// <code>/docs</code> folder, redirect to the <code>/documents</code> folder.
  /// 2. If request results in HTTP error 4xx, redirect request to another host
  /// where you might process the error.
  final Condition? condition;

  RoutingRule({
    required this.redirect,
    this.condition,
  });
  factory RoutingRule.fromXml(_s.XmlElement elem) {
    return RoutingRule(
      redirect: Redirect.fromXml(_s.extractXmlChild(elem, 'Redirect')!),
      condition: _s.extractXmlChild(elem, 'Condition')?.let(Condition.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final redirect = this.redirect;
    final condition = this.condition;
    return {
      'Redirect': redirect,
      if (condition != null) 'Condition': condition,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final redirect = this.redirect;
    final condition = this.condition;
    final $children = <_s.XmlNode>[
      if (condition != null) condition.toXml('Condition'),
      redirect.toXml('Redirect'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies lifecycle rules for an Amazon S3 bucket. For more information, see
/// <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html">Put
/// Bucket Lifecycle Configuration</a> in the <i>Amazon S3 API Reference</i>.
/// For examples, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html#API_PutBucketLifecycleConfiguration_Examples">Put
/// Bucket Lifecycle Configuration Examples</a>.
class Rule {
  /// Object key prefix that identifies one or more objects to which this rule
  /// applies.
  /// <important>
  /// Replacement must be made for object keys containing special characters (such
  /// as carriage returns) when using XML requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
  /// XML related object key constraints</a>.
  /// </important>
  final String prefix;

  /// If <code>Enabled</code>, the rule is currently being applied. If
  /// <code>Disabled</code>, the rule is not currently being applied.
  final ExpirationStatus status;
  final AbortIncompleteMultipartUpload? abortIncompleteMultipartUpload;

  /// Specifies the expiration for the lifecycle of the object.
  final LifecycleExpiration? expiration;

  /// Unique identifier for the rule. The value can't be longer than 255
  /// characters.
  final String? id;
  final NoncurrentVersionExpiration? noncurrentVersionExpiration;
  final NoncurrentVersionTransition? noncurrentVersionTransition;

  /// Specifies when an object transitions to a specified storage class. For more
  /// information about Amazon S3 lifecycle configuration rules, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html">Transitioning
  /// Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon S3 User Guide</i>.
  final Transition? transition;

  Rule({
    required this.prefix,
    required this.status,
    this.abortIncompleteMultipartUpload,
    this.expiration,
    this.id,
    this.noncurrentVersionExpiration,
    this.noncurrentVersionTransition,
    this.transition,
  });
  factory Rule.fromXml(_s.XmlElement elem) {
    return Rule(
      prefix: _s.extractXmlStringValue(elem, 'Prefix')!,
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(ExpirationStatus.fromString),
      abortIncompleteMultipartUpload: _s
          .extractXmlChild(elem, 'AbortIncompleteMultipartUpload')
          ?.let(AbortIncompleteMultipartUpload.fromXml),
      expiration: _s
          .extractXmlChild(elem, 'Expiration')
          ?.let(LifecycleExpiration.fromXml),
      id: _s.extractXmlStringValue(elem, 'ID'),
      noncurrentVersionExpiration: _s
          .extractXmlChild(elem, 'NoncurrentVersionExpiration')
          ?.let(NoncurrentVersionExpiration.fromXml),
      noncurrentVersionTransition: _s
          .extractXmlChild(elem, 'NoncurrentVersionTransition')
          ?.let(NoncurrentVersionTransition.fromXml),
      transition:
          _s.extractXmlChild(elem, 'Transition')?.let(Transition.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final prefix = this.prefix;
    final status = this.status;
    final abortIncompleteMultipartUpload = this.abortIncompleteMultipartUpload;
    final expiration = this.expiration;
    final id = this.id;
    final noncurrentVersionExpiration = this.noncurrentVersionExpiration;
    final noncurrentVersionTransition = this.noncurrentVersionTransition;
    final transition = this.transition;
    return {
      'Prefix': prefix,
      'Status': status.value,
      if (abortIncompleteMultipartUpload != null)
        'AbortIncompleteMultipartUpload': abortIncompleteMultipartUpload,
      if (expiration != null) 'Expiration': expiration,
      if (id != null) 'ID': id,
      if (noncurrentVersionExpiration != null)
        'NoncurrentVersionExpiration': noncurrentVersionExpiration,
      if (noncurrentVersionTransition != null)
        'NoncurrentVersionTransition': noncurrentVersionTransition,
      if (transition != null) 'Transition': transition,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final prefix = this.prefix;
    final status = this.status;
    final abortIncompleteMultipartUpload = this.abortIncompleteMultipartUpload;
    final expiration = this.expiration;
    final id = this.id;
    final noncurrentVersionExpiration = this.noncurrentVersionExpiration;
    final noncurrentVersionTransition = this.noncurrentVersionTransition;
    final transition = this.transition;
    final $children = <_s.XmlNode>[
      if (expiration != null) expiration.toXml('Expiration'),
      if (id != null) _s.encodeXmlStringValue('ID', id),
      _s.encodeXmlStringValue('Prefix', prefix),
      _s.encodeXmlStringValue('Status', status.value),
      if (transition != null) transition.toXml('Transition'),
      if (noncurrentVersionTransition != null)
        noncurrentVersionTransition.toXml('NoncurrentVersionTransition'),
      if (noncurrentVersionExpiration != null)
        noncurrentVersionExpiration.toXml('NoncurrentVersionExpiration'),
      if (abortIncompleteMultipartUpload != null)
        abortIncompleteMultipartUpload.toXml('AbortIncompleteMultipartUpload'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for object key name prefix and suffix filtering rules.
class S3KeyFilter {
  final List<FilterRule>? filterRules;

  S3KeyFilter({
    this.filterRules,
  });
  factory S3KeyFilter.fromXml(_s.XmlElement elem) {
    return S3KeyFilter(
      filterRules:
          elem.findElements('FilterRule').map(FilterRule.fromXml).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final filterRules = this.filterRules;
    return {
      if (filterRules != null) 'FilterRule': filterRules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final filterRules = this.filterRules;
    final $children = <_s.XmlNode>[
      if (filterRules != null) ...filterRules.map((e) => e.toXml('FilterRule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Describes an Amazon S3 location that will receive the results of the restore
/// request.
class S3Location {
  /// The name of the bucket where the restore results will be placed.
  final String bucketName;

  /// The prefix that is prepended to the restore results for this request.
  final String prefix;

  /// A list of grants that control access to the staged results.
  final List<Grant>? accessControlList;

  /// The canned ACL to apply to the restore results.
  final ObjectCannedACL? cannedACL;
  final Encryption? encryption;

  /// The class of storage used to store the restore results.
  final StorageClass? storageClass;

  /// The tag-set that is applied to the restore results.
  final Tagging? tagging;

  /// A list of metadata to store with the restore results in S3.
  final List<MetadataEntry>? userMetadata;

  S3Location({
    required this.bucketName,
    required this.prefix,
    this.accessControlList,
    this.cannedACL,
    this.encryption,
    this.storageClass,
    this.tagging,
    this.userMetadata,
  });

  Map<String, dynamic> toJson() {
    final bucketName = this.bucketName;
    final prefix = this.prefix;
    final accessControlList = this.accessControlList;
    final cannedACL = this.cannedACL;
    final encryption = this.encryption;
    final storageClass = this.storageClass;
    final tagging = this.tagging;
    final userMetadata = this.userMetadata;
    return {
      'BucketName': bucketName,
      'Prefix': prefix,
      if (accessControlList != null) 'AccessControlList': accessControlList,
      if (cannedACL != null) 'CannedACL': cannedACL.value,
      if (encryption != null) 'Encryption': encryption,
      if (storageClass != null) 'StorageClass': storageClass.value,
      if (tagging != null) 'Tagging': tagging,
      if (userMetadata != null) 'UserMetadata': userMetadata,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final bucketName = this.bucketName;
    final prefix = this.prefix;
    final accessControlList = this.accessControlList;
    final cannedACL = this.cannedACL;
    final encryption = this.encryption;
    final storageClass = this.storageClass;
    final tagging = this.tagging;
    final userMetadata = this.userMetadata;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('BucketName', bucketName),
      _s.encodeXmlStringValue('Prefix', prefix),
      if (encryption != null) encryption.toXml('Encryption'),
      if (cannedACL != null)
        _s.encodeXmlStringValue('CannedACL', cannedACL.value),
      if (accessControlList != null)
        _s.XmlElement(_s.XmlName('AccessControlList'), [],
            accessControlList.map((e) => e.toXml('Grant'))),
      if (tagging != null) tagging.toXml('Tagging'),
      if (userMetadata != null)
        _s.XmlElement(_s.XmlName('UserMetadata'), [],
            userMetadata.map((e) => e.toXml('MetadataEntry'))),
      if (storageClass != null)
        _s.encodeXmlStringValue('StorageClass', storageClass.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
class SSEKMS {
  /// Specifies the ID of the Key Management Service (KMS) symmetric encryption
  /// customer managed key to use for encrypting inventory reports.
  final String keyId;

  SSEKMS({
    required this.keyId,
  });
  factory SSEKMS.fromXml(_s.XmlElement elem) {
    return SSEKMS(
      keyId: _s.extractXmlStringValue(elem, 'KeyId')!,
    );
  }

  Map<String, dynamic> toJson() {
    final keyId = this.keyId;
    return {
      'KeyId': keyId,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final keyId = this.keyId;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('KeyId', keyId),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
class SSES3 {
  SSES3();
  factory SSES3.fromXml(
      // ignore: avoid_unused_constructor_parameters
      _s.XmlElement elem) {
    return SSES3();
  }

  Map<String, dynamic> toJson() {
    return {};
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final $children = <_s.XmlNode>[];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the byte range of the object to get the records from. A record is
/// processed when its first byte is contained by the range. This parameter is
/// optional, but when specified, it must not be empty. See RFC 2616, Section
/// 14.35.1 about how to specify the start and end of the range.
class ScanRange {
  /// Specifies the end of the byte range. This parameter is optional. Valid
  /// values: non-negative integers. The default value is one less than the size
  /// of the object being queried. If only the End parameter is supplied, it is
  /// interpreted to mean scan the last N bytes of the file. For example,
  /// <code>&lt;scanrange&gt;&lt;end&gt;50&lt;/end&gt;&lt;/scanrange&gt;</code>
  /// means scan the last 50 bytes.
  final int? end;

  /// Specifies the start of the byte range. This parameter is optional. Valid
  /// values: non-negative integers. The default value is 0. If only
  /// <code>start</code> is supplied, it means scan from that point to the end of
  /// the file. For example,
  /// <code>&lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;/scanrange&gt;</code>
  /// means scan from byte 50 until the end of the file.
  final int? start;

  ScanRange({
    this.end,
    this.start,
  });

  Map<String, dynamic> toJson() {
    final end = this.end;
    final start = this.start;
    return {
      if (end != null) 'End': end,
      if (start != null) 'Start': start,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final end = this.end;
    final start = this.start;
    final $children = <_s.XmlNode>[
      if (start != null) _s.encodeXmlIntValue('Start', start),
      if (end != null) _s.encodeXmlIntValue('End', end),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The container for selecting objects from a content event stream.
class SelectObjectContentEventStream {
  /// The Continuation Event.
  final ContinuationEvent? cont;

  /// The End Event.
  final EndEvent? end;

  /// The Progress Event.
  final ProgressEvent? progress;

  /// The Records Event.
  final RecordsEvent? records;

  /// The Stats Event.
  final StatsEvent? stats;

  SelectObjectContentEventStream({
    this.cont,
    this.end,
    this.progress,
    this.records,
    this.stats,
  });
  factory SelectObjectContentEventStream.fromXml(_s.XmlElement elem) {
    return SelectObjectContentEventStream(
      cont: _s.extractXmlChild(elem, 'Cont')?.let(ContinuationEvent.fromXml),
      end: _s.extractXmlChild(elem, 'End')?.let(EndEvent.fromXml),
      progress:
          _s.extractXmlChild(elem, 'Progress')?.let(ProgressEvent.fromXml),
      records: _s.extractXmlChild(elem, 'Records')?.let(RecordsEvent.fromXml),
      stats: _s.extractXmlChild(elem, 'Stats')?.let(StatsEvent.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final cont = this.cont;
    final end = this.end;
    final progress = this.progress;
    final records = this.records;
    final stats = this.stats;
    return {
      if (cont != null) 'Cont': cont,
      if (end != null) 'End': end,
      if (progress != null) 'Progress': progress,
      if (records != null) 'Records': records,
      if (stats != null) 'Stats': stats,
    };
  }
}

class SelectObjectContentOutput {
  /// The array of results.
  final SelectObjectContentEventStream? payload;

  SelectObjectContentOutput({
    this.payload,
  });

  Map<String, dynamic> toJson() {
    final payload = this.payload;
    return {
      if (payload != null) 'Payload': payload,
    };
  }
}

/// Request to filter the contents of an Amazon S3 object based on a simple
/// Structured Query Language (SQL) statement. In the request, along with the
/// SQL expression, you must specify a data serialization format (JSON or CSV)
/// of the object. Amazon S3 uses this to parse object data into records. It
/// returns only records that match the specified SQL expression. You must also
/// specify the data serialization format for the response. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html">S3Select
/// API Documentation</a>.
class SelectObjectContentRequest {
  /// The S3 bucket.
  final String bucket;

  /// The expression that is used to query the object.
  final String expression;

  /// The type of the provided expression (for example, SQL).
  final ExpressionType expressionType;

  /// Describes the format of the data in the object that is being queried.
  final InputSerialization inputSerialization;

  /// The object key.
  final String key;

  /// Describes the format of the data that you want Amazon S3 to return in
  /// response.
  final OutputSerialization outputSerialization;

  /// The account ID of the expected bucket owner. If the account ID that you
  /// provide does not match the actual owner of the bucket, the request fails
  /// with the HTTP status code <code>403 Forbidden</code> (access denied).
  final String? expectedBucketOwner;

  /// Specifies if periodic request progress information should be enabled.
  final RequestProgress? requestProgress;

  /// The server-side encryption (SSE) algorithm used to encrypt the object. This
  /// parameter is needed only when the object was created using a checksum
  /// algorithm. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  final String? sSECustomerAlgorithm;

  /// The server-side encryption (SSE) customer managed key. This parameter is
  /// needed only when the object was created using a checksum algorithm. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  final Uint8List? sSECustomerKey;

  /// The MD5 server-side encryption (SSE) customer managed key. This parameter is
  /// needed only when the object was created using a checksum algorithm. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Protecting
  /// data using SSE-C keys</a> in the <i>Amazon S3 User Guide</i>.
  final String? sSECustomerKeyMD5;

  /// Specifies the byte range of the object to get the records from. A record is
  /// processed when its first byte is contained by the range. This parameter is
  /// optional, but when specified, it must not be empty. See RFC 2616, Section
  /// 14.35.1 about how to specify the start and end of the range.
  ///
  /// <code>ScanRange</code>may be used in the following ways:
  ///
  /// <ul>
  /// <li>
  /// <code>&lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;end&gt;100&lt;/end&gt;&lt;/scanrange&gt;</code>
  /// - process only the records starting between the bytes 50 and 100 (inclusive,
  /// counting from zero)
  /// </li>
  /// <li>
  /// <code>&lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;/scanrange&gt;</code>
  /// - process only the records starting after the byte 50
  /// </li>
  /// <li>
  /// <code>&lt;scanrange&gt;&lt;end&gt;50&lt;/end&gt;&lt;/scanrange&gt;</code> -
  /// process only the records within the last 50 bytes of the file.
  /// </li>
  /// </ul>
  final ScanRange? scanRange;

  SelectObjectContentRequest({
    required this.bucket,
    required this.expression,
    required this.expressionType,
    required this.inputSerialization,
    required this.key,
    required this.outputSerialization,
    this.expectedBucketOwner,
    this.requestProgress,
    this.sSECustomerAlgorithm,
    this.sSECustomerKey,
    this.sSECustomerKeyMD5,
    this.scanRange,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final expression = this.expression;
    final expressionType = this.expressionType;
    final inputSerialization = this.inputSerialization;
    final key = this.key;
    final outputSerialization = this.outputSerialization;
    final expectedBucketOwner = this.expectedBucketOwner;
    final requestProgress = this.requestProgress;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKey = this.sSECustomerKey;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final scanRange = this.scanRange;
    return {
      'Expression': expression,
      'ExpressionType': expressionType.value,
      'InputSerialization': inputSerialization,
      'OutputSerialization': outputSerialization,
      if (requestProgress != null) 'RequestProgress': requestProgress,
      if (scanRange != null) 'ScanRange': scanRange,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final bucket = this.bucket;
    final expression = this.expression;
    final expressionType = this.expressionType;
    final inputSerialization = this.inputSerialization;
    final key = this.key;
    final outputSerialization = this.outputSerialization;
    final expectedBucketOwner = this.expectedBucketOwner;
    final requestProgress = this.requestProgress;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKey = this.sSECustomerKey;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final scanRange = this.scanRange;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Expression', expression),
      _s.encodeXmlStringValue('ExpressionType', expressionType.value),
      if (requestProgress != null) requestProgress.toXml('RequestProgress'),
      inputSerialization.toXml('InputSerialization'),
      outputSerialization.toXml('OutputSerialization'),
      if (scanRange != null) scanRange.toXml('ScanRange'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Describes the parameters for Select job types.
class SelectParameters {
  /// The expression that is used to query the object.
  final String expression;

  /// The type of the provided expression (for example, SQL).
  final ExpressionType expressionType;

  /// Describes the serialization format of the object.
  final InputSerialization inputSerialization;

  /// Describes how the results of the Select job are serialized.
  final OutputSerialization outputSerialization;

  SelectParameters({
    required this.expression,
    required this.expressionType,
    required this.inputSerialization,
    required this.outputSerialization,
  });

  Map<String, dynamic> toJson() {
    final expression = this.expression;
    final expressionType = this.expressionType;
    final inputSerialization = this.inputSerialization;
    final outputSerialization = this.outputSerialization;
    return {
      'Expression': expression,
      'ExpressionType': expressionType.value,
      'InputSerialization': inputSerialization,
      'OutputSerialization': outputSerialization,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final expression = this.expression;
    final expressionType = this.expressionType;
    final inputSerialization = this.inputSerialization;
    final outputSerialization = this.outputSerialization;
    final $children = <_s.XmlNode>[
      inputSerialization.toXml('InputSerialization'),
      _s.encodeXmlStringValue('ExpressionType', expressionType.value),
      _s.encodeXmlStringValue('Expression', expression),
      outputSerialization.toXml('OutputSerialization'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum ServerSideEncryption {
  aes256('AES256'),
  awsKms('aws:kms'),
  awsKmsDsse('aws:kms:dsse'),
  ;

  final String value;

  const ServerSideEncryption(this.value);

  static ServerSideEncryption fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ServerSideEncryption'));
}

/// Describes the default server-side encryption to apply to new objects in the
/// bucket. If a PUT Object request doesn't specify any server-side encryption,
/// this default encryption will be applied. If you don't specify a customer
/// managed key at configuration, Amazon S3 automatically creates an Amazon Web
/// Services KMS key in your Amazon Web Services account the first time that you
/// add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses
/// this KMS key for SSE-KMS. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html">PUT
/// Bucket encryption</a> in the <i>Amazon S3 API Reference</i>.
class ServerSideEncryptionByDefault {
  /// Server-side encryption algorithm to use for the default encryption.
  final ServerSideEncryption sSEAlgorithm;

  /// Amazon Web Services Key Management Service (KMS) customer Amazon Web
  /// Services KMS key ID to use for the default encryption. This parameter is
  /// allowed if and only if <code>SSEAlgorithm</code> is set to
  /// <code>aws:kms</code> or <code>aws:kms:dsse</code>.
  ///
  /// You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of
  /// the KMS key.
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key Alias: <code>alias/alias-name</code>
  /// </li>
  /// </ul>
  /// If you use a key ID, you can run into a LogDestination undeliverable error
  /// when creating a VPC flow log.
  ///
  /// If you are using encryption with cross-account or Amazon Web Services
  /// service operations you must use a fully qualified KMS key ARN. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy">Using
  /// encryption for cross-account operations</a>.
  /// <important>
  /// Amazon S3 only supports symmetric encryption KMS keys. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
  /// keys in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key
  /// Management Service Developer Guide</i>.
  /// </important>
  final String? kMSMasterKeyID;

  ServerSideEncryptionByDefault({
    required this.sSEAlgorithm,
    this.kMSMasterKeyID,
  });
  factory ServerSideEncryptionByDefault.fromXml(_s.XmlElement elem) {
    return ServerSideEncryptionByDefault(
      sSEAlgorithm: _s
          .extractXmlStringValue(elem, 'SSEAlgorithm')!
          .let(ServerSideEncryption.fromString),
      kMSMasterKeyID: _s.extractXmlStringValue(elem, 'KMSMasterKeyID'),
    );
  }

  Map<String, dynamic> toJson() {
    final sSEAlgorithm = this.sSEAlgorithm;
    final kMSMasterKeyID = this.kMSMasterKeyID;
    return {
      'SSEAlgorithm': sSEAlgorithm.value,
      if (kMSMasterKeyID != null) 'KMSMasterKeyID': kMSMasterKeyID,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final sSEAlgorithm = this.sSEAlgorithm;
    final kMSMasterKeyID = this.kMSMasterKeyID;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('SSEAlgorithm', sSEAlgorithm.value),
      if (kMSMasterKeyID != null)
        _s.encodeXmlStringValue('KMSMasterKeyID', kMSMasterKeyID),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the default server-side-encryption configuration.
class ServerSideEncryptionConfiguration {
  /// Container for information about a particular server-side encryption
  /// configuration rule.
  final List<ServerSideEncryptionRule> rules;

  ServerSideEncryptionConfiguration({
    required this.rules,
  });
  factory ServerSideEncryptionConfiguration.fromXml(_s.XmlElement elem) {
    return ServerSideEncryptionConfiguration(
      rules: elem
          .findElements('Rule')
          .map(ServerSideEncryptionRule.fromXml)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final rules = this.rules;
    return {
      'Rule': rules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final rules = this.rules;
    final $children = <_s.XmlNode>[
      ...rules.map((e) => e.toXml('Rule')),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies the default server-side encryption configuration.
class ServerSideEncryptionRule {
  /// Specifies the default server-side encryption to apply to new objects in the
  /// bucket. If a PUT Object request doesn't specify any server-side encryption,
  /// this default encryption will be applied.
  final ServerSideEncryptionByDefault? applyServerSideEncryptionByDefault;

  /// Specifies whether Amazon S3 should use an S3 Bucket Key with server-side
  /// encryption using KMS (SSE-KMS) for new objects in the bucket. Existing
  /// objects are not affected. Setting the <code>BucketKeyEnabled</code> element
  /// to <code>true</code> causes Amazon S3 to use an S3 Bucket Key. By default,
  /// S3 Bucket Key is not enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon
  /// S3 Bucket Keys</a> in the <i>Amazon S3 User Guide</i>.
  final bool? bucketKeyEnabled;

  ServerSideEncryptionRule({
    this.applyServerSideEncryptionByDefault,
    this.bucketKeyEnabled,
  });
  factory ServerSideEncryptionRule.fromXml(_s.XmlElement elem) {
    return ServerSideEncryptionRule(
      applyServerSideEncryptionByDefault: _s
          .extractXmlChild(elem, 'ApplyServerSideEncryptionByDefault')
          ?.let(ServerSideEncryptionByDefault.fromXml),
      bucketKeyEnabled: _s.extractXmlBoolValue(elem, 'BucketKeyEnabled'),
    );
  }

  Map<String, dynamic> toJson() {
    final applyServerSideEncryptionByDefault =
        this.applyServerSideEncryptionByDefault;
    final bucketKeyEnabled = this.bucketKeyEnabled;
    return {
      if (applyServerSideEncryptionByDefault != null)
        'ApplyServerSideEncryptionByDefault':
            applyServerSideEncryptionByDefault,
      if (bucketKeyEnabled != null) 'BucketKeyEnabled': bucketKeyEnabled,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final applyServerSideEncryptionByDefault =
        this.applyServerSideEncryptionByDefault;
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final $children = <_s.XmlNode>[
      if (applyServerSideEncryptionByDefault != null)
        applyServerSideEncryptionByDefault
            .toXml('ApplyServerSideEncryptionByDefault'),
      if (bucketKeyEnabled != null)
        _s.encodeXmlBoolValue('BucketKeyEnabled', bucketKeyEnabled),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// The established temporary security credentials of the session.
/// <note>
/// <b>Directory buckets</b> - These session credentials are only supported for
/// the authentication and authorization of Zonal endpoint APIs on directory
/// buckets.
/// </note>
class SessionCredentials {
  /// A unique identifier that's associated with a secret access key. The access
  /// key ID and the secret access key are used together to sign programmatic
  /// Amazon Web Services requests cryptographically.
  final String accessKeyId;

  /// Temporary security credentials expire after a specified interval. After
  /// temporary credentials expire, any calls that you make with those credentials
  /// will fail. So you must generate a new set of temporary credentials.
  /// Temporary credentials cannot be extended or refreshed beyond the original
  /// specified interval.
  final DateTime expiration;

  /// A key that's used with the access key ID to cryptographically sign
  /// programmatic Amazon Web Services requests. Signing a request identifies the
  /// sender and prevents the request from being altered.
  final String secretAccessKey;

  /// A part of the temporary security credentials. The session token is used to
  /// validate the temporary security credentials.
  final String sessionToken;

  SessionCredentials({
    required this.accessKeyId,
    required this.expiration,
    required this.secretAccessKey,
    required this.sessionToken,
  });
  factory SessionCredentials.fromXml(_s.XmlElement elem) {
    return SessionCredentials(
      accessKeyId: _s.extractXmlStringValue(elem, 'AccessKeyId')!,
      expiration: _s.extractXmlDateTimeValue(elem, 'Expiration')!,
      secretAccessKey: _s.extractXmlStringValue(elem, 'SecretAccessKey')!,
      sessionToken: _s.extractXmlStringValue(elem, 'SessionToken')!,
    );
  }

  Map<String, dynamic> toJson() {
    final accessKeyId = this.accessKeyId;
    final expiration = this.expiration;
    final secretAccessKey = this.secretAccessKey;
    final sessionToken = this.sessionToken;
    return {
      'AccessKeyId': accessKeyId,
      'Expiration': iso8601ToJson(expiration),
      'SecretAccessKey': secretAccessKey,
      'SessionToken': sessionToken,
    };
  }
}

enum SessionMode {
  readOnly('ReadOnly'),
  readWrite('ReadWrite'),
  ;

  final String value;

  const SessionMode(this.value);

  static SessionMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SessionMode'));
}

/// To use simple format for S3 keys for log objects, set SimplePrefix to an
/// empty object.
///
/// <code>[DestinationPrefix][YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]</code>
class SimplePrefix {
  SimplePrefix();
  factory SimplePrefix.fromXml(
      // ignore: avoid_unused_constructor_parameters
      _s.XmlElement elem) {
    return SimplePrefix();
  }

  Map<String, dynamic> toJson() {
    return {};
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final $children = <_s.XmlNode>[];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container that describes additional filters for identifying the source
/// objects that you want to replicate. You can choose to enable or disable the
/// replication of these objects. Currently, Amazon S3 supports only the filter
/// that you can specify for objects created with server-side encryption using a
/// customer managed key stored in Amazon Web Services Key Management Service
/// (SSE-KMS).
class SourceSelectionCriteria {
  /// A filter that you can specify for selections for modifications on replicas.
  /// Amazon S3 doesn't replicate replica modifications by default. In the latest
  /// version of replication configuration (when <code>Filter</code> is
  /// specified), you can specify this element and set the status to
  /// <code>Enabled</code> to replicate modifications on replicas.
  /// <note>
  /// If you don't specify the <code>Filter</code> element, Amazon S3 assumes that
  /// the replication configuration is the earlier version, V1. In the earlier
  /// version, this element is not allowed
  /// </note>
  final ReplicaModifications? replicaModifications;

  /// A container for filter information for the selection of Amazon S3 objects
  /// encrypted with Amazon Web Services KMS. If you include
  /// <code>SourceSelectionCriteria</code> in the replication configuration, this
  /// element is required.
  final SseKmsEncryptedObjects? sseKmsEncryptedObjects;

  SourceSelectionCriteria({
    this.replicaModifications,
    this.sseKmsEncryptedObjects,
  });
  factory SourceSelectionCriteria.fromXml(_s.XmlElement elem) {
    return SourceSelectionCriteria(
      replicaModifications: _s
          .extractXmlChild(elem, 'ReplicaModifications')
          ?.let(ReplicaModifications.fromXml),
      sseKmsEncryptedObjects: _s
          .extractXmlChild(elem, 'SseKmsEncryptedObjects')
          ?.let(SseKmsEncryptedObjects.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final replicaModifications = this.replicaModifications;
    final sseKmsEncryptedObjects = this.sseKmsEncryptedObjects;
    return {
      if (replicaModifications != null)
        'ReplicaModifications': replicaModifications,
      if (sseKmsEncryptedObjects != null)
        'SseKmsEncryptedObjects': sseKmsEncryptedObjects,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final replicaModifications = this.replicaModifications;
    final sseKmsEncryptedObjects = this.sseKmsEncryptedObjects;
    final $children = <_s.XmlNode>[
      if (sseKmsEncryptedObjects != null)
        sseKmsEncryptedObjects.toXml('SseKmsEncryptedObjects'),
      if (replicaModifications != null)
        replicaModifications.toXml('ReplicaModifications'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for filter information for the selection of S3 objects encrypted
/// with Amazon Web Services KMS.
class SseKmsEncryptedObjects {
  /// Specifies whether Amazon S3 replicates objects created with server-side
  /// encryption using an Amazon Web Services KMS key stored in Amazon Web
  /// Services Key Management Service.
  final SseKmsEncryptedObjectsStatus status;

  SseKmsEncryptedObjects({
    required this.status,
  });
  factory SseKmsEncryptedObjects.fromXml(_s.XmlElement elem) {
    return SseKmsEncryptedObjects(
      status: _s
          .extractXmlStringValue(elem, 'Status')!
          .let(SseKmsEncryptedObjectsStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final status = this.status;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum SseKmsEncryptedObjectsStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const SseKmsEncryptedObjectsStatus(this.value);

  static SseKmsEncryptedObjectsStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SseKmsEncryptedObjectsStatus'));
}

/// Container for the stats details.
class Stats {
  /// The total number of uncompressed object bytes processed.
  final int? bytesProcessed;

  /// The total number of bytes of records payload data returned.
  final int? bytesReturned;

  /// The total number of object bytes scanned.
  final int? bytesScanned;

  Stats({
    this.bytesProcessed,
    this.bytesReturned,
    this.bytesScanned,
  });
  factory Stats.fromXml(_s.XmlElement elem) {
    return Stats(
      bytesProcessed: _s.extractXmlIntValue(elem, 'BytesProcessed'),
      bytesReturned: _s.extractXmlIntValue(elem, 'BytesReturned'),
      bytesScanned: _s.extractXmlIntValue(elem, 'BytesScanned'),
    );
  }

  Map<String, dynamic> toJson() {
    final bytesProcessed = this.bytesProcessed;
    final bytesReturned = this.bytesReturned;
    final bytesScanned = this.bytesScanned;
    return {
      if (bytesProcessed != null) 'BytesProcessed': bytesProcessed,
      if (bytesReturned != null) 'BytesReturned': bytesReturned,
      if (bytesScanned != null) 'BytesScanned': bytesScanned,
    };
  }
}

/// Container for the Stats Event.
class StatsEvent {
  /// The Stats event details.
  final Stats? details;

  StatsEvent({
    this.details,
  });
  factory StatsEvent.fromXml(_s.XmlElement elem) {
    return StatsEvent(
      details: _s.extractXmlChild(elem, 'Details')?.let(Stats.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final details = this.details;
    return {
      if (details != null) 'Details': details,
    };
  }
}

enum StorageClass {
  standard('STANDARD'),
  reducedRedundancy('REDUCED_REDUNDANCY'),
  standardIa('STANDARD_IA'),
  onezoneIa('ONEZONE_IA'),
  intelligentTiering('INTELLIGENT_TIERING'),
  glacier('GLACIER'),
  deepArchive('DEEP_ARCHIVE'),
  outposts('OUTPOSTS'),
  glacierIr('GLACIER_IR'),
  snow('SNOW'),
  expressOnezone('EXPRESS_ONEZONE'),
  ;

  final String value;

  const StorageClass(this.value);

  static StorageClass fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum StorageClass'));
}

/// Specifies data related to access patterns to be collected and made available
/// to analyze the tradeoffs between different storage classes for an Amazon S3
/// bucket.
class StorageClassAnalysis {
  /// Specifies how data related to the storage class analysis for an Amazon S3
  /// bucket should be exported.
  final StorageClassAnalysisDataExport? dataExport;

  StorageClassAnalysis({
    this.dataExport,
  });
  factory StorageClassAnalysis.fromXml(_s.XmlElement elem) {
    return StorageClassAnalysis(
      dataExport: _s
          .extractXmlChild(elem, 'DataExport')
          ?.let(StorageClassAnalysisDataExport.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final dataExport = this.dataExport;
    return {
      if (dataExport != null) 'DataExport': dataExport,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final dataExport = this.dataExport;
    final $children = <_s.XmlNode>[
      if (dataExport != null) dataExport.toXml('DataExport'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for data related to the storage class analysis for an Amazon S3
/// bucket for export.
class StorageClassAnalysisDataExport {
  /// The place to store the data for an analysis.
  final AnalyticsExportDestination destination;

  /// The version of the output schema to use when exporting data. Must be
  /// <code>V_1</code>.
  final StorageClassAnalysisSchemaVersion outputSchemaVersion;

  StorageClassAnalysisDataExport({
    required this.destination,
    required this.outputSchemaVersion,
  });
  factory StorageClassAnalysisDataExport.fromXml(_s.XmlElement elem) {
    return StorageClassAnalysisDataExport(
      destination: AnalyticsExportDestination.fromXml(
          _s.extractXmlChild(elem, 'Destination')!),
      outputSchemaVersion: _s
          .extractXmlStringValue(elem, 'OutputSchemaVersion')!
          .let(StorageClassAnalysisSchemaVersion.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final outputSchemaVersion = this.outputSchemaVersion;
    return {
      'Destination': destination,
      'OutputSchemaVersion': outputSchemaVersion.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final destination = this.destination;
    final outputSchemaVersion = this.outputSchemaVersion;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('OutputSchemaVersion', outputSchemaVersion.value),
      destination.toXml('Destination'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum StorageClassAnalysisSchemaVersion {
  v_1('V_1'),
  ;

  final String value;

  const StorageClassAnalysisSchemaVersion(this.value);

  static StorageClassAnalysisSchemaVersion fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum StorageClassAnalysisSchemaVersion'));
}

/// A container of a key value name pair.
class Tag {
  /// Name of the object key.
  final String key;

  /// Value of the tag.
  final String value;

  Tag({
    required this.key,
    required this.value,
  });
  factory Tag.fromXml(_s.XmlElement elem) {
    return Tag(
      key: _s.extractXmlStringValue(elem, 'Key')!,
      value: _s.extractXmlStringValue(elem, 'Value')!,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      'Key': key,
      'Value': value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final key = this.key;
    final value = this.value;
    final $children = <_s.XmlNode>[
      _s.encodeXmlStringValue('Key', key),
      _s.encodeXmlStringValue('Value', value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Container for <code>TagSet</code> elements.
class Tagging {
  /// A collection for a set of tags
  final List<Tag> tagSet;

  Tagging({
    required this.tagSet,
  });

  Map<String, dynamic> toJson() {
    final tagSet = this.tagSet;
    return {
      'TagSet': tagSet,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final tagSet = this.tagSet;
    final $children = <_s.XmlNode>[
      _s.XmlElement(
          _s.XmlName('TagSet'), [], tagSet.map((e) => e.toXml('Tag'))),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum TaggingDirective {
  copy('COPY'),
  replace('REPLACE'),
  ;

  final String value;

  const TaggingDirective(this.value);

  static TaggingDirective fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TaggingDirective'));
}

/// Container for granting information.
///
/// Buckets that use the bucket owner enforced setting for Object Ownership
/// don't support target grants. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general">Permissions
/// server access log delivery</a> in the <i>Amazon S3 User Guide</i>.
class TargetGrant {
  /// Container for the person being granted permissions.
  final Grantee? grantee;

  /// Logging permissions assigned to the grantee for the bucket.
  final BucketLogsPermission? permission;

  TargetGrant({
    this.grantee,
    this.permission,
  });
  factory TargetGrant.fromXml(_s.XmlElement elem) {
    return TargetGrant(
      grantee: _s.extractXmlChild(elem, 'Grantee')?.let(Grantee.fromXml),
      permission: _s
          .extractXmlStringValue(elem, 'Permission')
          ?.let(BucketLogsPermission.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final grantee = this.grantee;
    final permission = this.permission;
    return {
      if (grantee != null) 'Grantee': grantee,
      if (permission != null) 'Permission': permission.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final grantee = this.grantee;
    final permission = this.permission;
    final $children = <_s.XmlNode>[
      if (grantee != null) grantee.toXml('Grantee'),
      if (permission != null)
        _s.encodeXmlStringValue('Permission', permission.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Amazon S3 key format for log objects. Only one format, PartitionedPrefix or
/// SimplePrefix, is allowed.
class TargetObjectKeyFormat {
  /// Partitioned S3 key for log objects.
  final PartitionedPrefix? partitionedPrefix;

  /// To use the simple format for S3 keys for log objects. To specify
  /// SimplePrefix format, set SimplePrefix to {}.
  final SimplePrefix? simplePrefix;

  TargetObjectKeyFormat({
    this.partitionedPrefix,
    this.simplePrefix,
  });
  factory TargetObjectKeyFormat.fromXml(_s.XmlElement elem) {
    return TargetObjectKeyFormat(
      partitionedPrefix: _s
          .extractXmlChild(elem, 'PartitionedPrefix')
          ?.let(PartitionedPrefix.fromXml),
      simplePrefix:
          _s.extractXmlChild(elem, 'SimplePrefix')?.let(SimplePrefix.fromXml),
    );
  }

  Map<String, dynamic> toJson() {
    final partitionedPrefix = this.partitionedPrefix;
    final simplePrefix = this.simplePrefix;
    return {
      if (partitionedPrefix != null) 'PartitionedPrefix': partitionedPrefix,
      if (simplePrefix != null) 'SimplePrefix': simplePrefix,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final partitionedPrefix = this.partitionedPrefix;
    final simplePrefix = this.simplePrefix;
    final $children = <_s.XmlNode>[
      if (simplePrefix != null) simplePrefix.toXml('SimplePrefix'),
      if (partitionedPrefix != null)
        partitionedPrefix.toXml('PartitionedPrefix'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum Tier {
  standard('Standard'),
  bulk('Bulk'),
  expedited('Expedited'),
  ;

  final String value;

  const Tier(this.value);

  static Tier fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Tier'));
}

/// The S3 Intelligent-Tiering storage class is designed to optimize storage
/// costs by automatically moving data to the most cost-effective storage access
/// tier, without additional operational overhead.
class Tiering {
  /// S3 Intelligent-Tiering access tier. See <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage
  /// class for automatically optimizing frequently and infrequently accessed
  /// objects</a> for a list of access tiers in the S3 Intelligent-Tiering storage
  /// class.
  final IntelligentTieringAccessTier accessTier;

  /// The number of consecutive days of no access after which an object will be
  /// eligible to be transitioned to the corresponding tier. The minimum number of
  /// days specified for Archive Access tier must be at least 90 days and Deep
  /// Archive Access tier must be at least 180 days. The maximum can be up to 2
  /// years (730 days).
  final int days;

  Tiering({
    required this.accessTier,
    required this.days,
  });
  factory Tiering.fromXml(_s.XmlElement elem) {
    return Tiering(
      accessTier: _s
          .extractXmlStringValue(elem, 'AccessTier')!
          .let(IntelligentTieringAccessTier.fromString),
      days: _s.extractXmlIntValue(elem, 'Days')!,
    );
  }

  Map<String, dynamic> toJson() {
    final accessTier = this.accessTier;
    final days = this.days;
    return {
      'AccessTier': accessTier.value,
      'Days': days,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final accessTier = this.accessTier;
    final days = this.days;
    final $children = <_s.XmlNode>[
      _s.encodeXmlIntValue('Days', days),
      _s.encodeXmlStringValue('AccessTier', accessTier.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for specifying the configuration for publication of messages to
/// an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3
/// detects specified events.
class TopicConfiguration {
  /// The Amazon S3 bucket event about which to send notifications. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Supported
  /// Event Types</a> in the <i>Amazon S3 User Guide</i>.
  final List<Event> events;

  /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3
  /// publishes a message when it detects events of the specified type.
  final String topicArn;
  final NotificationConfigurationFilter? filter;
  final String? id;

  TopicConfiguration({
    required this.events,
    required this.topicArn,
    this.filter,
    this.id,
  });
  factory TopicConfiguration.fromXml(_s.XmlElement elem) {
    return TopicConfiguration(
      events: _s
          .extractXmlStringListValues(elem, 'Event')
          .map(Event.fromString)
          .toList(),
      topicArn: _s.extractXmlStringValue(elem, 'Topic')!,
      filter: _s
          .extractXmlChild(elem, 'Filter')
          ?.let(NotificationConfigurationFilter.fromXml),
      id: _s.extractXmlStringValue(elem, 'Id'),
    );
  }

  Map<String, dynamic> toJson() {
    final events = this.events;
    final topicArn = this.topicArn;
    final filter = this.filter;
    final id = this.id;
    return {
      'Event': events.map((e) => e.value).toList(),
      'Topic': topicArn,
      if (filter != null) 'Filter': filter,
      if (id != null) 'Id': id,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final events = this.events;
    final topicArn = this.topicArn;
    final filter = this.filter;
    final id = this.id;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('Id', id),
      _s.encodeXmlStringValue('Topic', topicArn),
      ...events.map((e) => _s.encodeXmlStringValue('Event', e.value)),
      if (filter != null) filter.toXml('Filter'),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// A container for specifying the configuration for publication of messages to
/// an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3
/// detects specified events. This data type is deprecated. Use <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_TopicConfiguration.html">TopicConfiguration</a>
/// instead.
class TopicConfigurationDeprecated {
  /// Bucket event for which to send notifications.
  final Event? event;

  /// A collection of events related to objects
  final List<Event>? events;
  final String? id;

  /// Amazon SNS topic to which Amazon S3 will publish a message to report the
  /// specified events for the bucket.
  final String? topic;

  TopicConfigurationDeprecated({
    this.event,
    this.events,
    this.id,
    this.topic,
  });
  factory TopicConfigurationDeprecated.fromXml(_s.XmlElement elem) {
    return TopicConfigurationDeprecated(
      event: _s.extractXmlStringValue(elem, 'Event')?.let(Event.fromString),
      events: _s
          .extractXmlStringListValues(elem, 'Event')
          .map(Event.fromString)
          .toList(),
      id: _s.extractXmlStringValue(elem, 'Id'),
      topic: _s.extractXmlStringValue(elem, 'Topic'),
    );
  }

  Map<String, dynamic> toJson() {
    final event = this.event;
    final events = this.events;
    final id = this.id;
    final topic = this.topic;
    return {
      if (event != null) 'Event': event.value,
      if (events != null) 'Event': events.map((e) => e.value).toList(),
      if (id != null) 'Id': id,
      if (topic != null) 'Topic': topic,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final event = this.event;
    final events = this.events;
    final id = this.id;
    final topic = this.topic;
    final $children = <_s.XmlNode>[
      if (id != null) _s.encodeXmlStringValue('Id', id),
      if (events != null)
        ...events.map((e) => _s.encodeXmlStringValue('Event', e.value)),
      if (event != null) _s.encodeXmlStringValue('Event', event.value),
      if (topic != null) _s.encodeXmlStringValue('Topic', topic),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies when an object transitions to a specified storage class. For more
/// information about Amazon S3 lifecycle configuration rules, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html">Transitioning
/// Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon S3 User Guide</i>.
class Transition {
  /// Indicates when objects are transitioned to the specified storage class. The
  /// date value must be in ISO 8601 format. The time is always midnight UTC.
  final DateTime? date;

  /// Indicates the number of days after creation when objects are transitioned to
  /// the specified storage class. The value must be a positive integer.
  final int? days;

  /// The storage class to which you want the object to transition.
  final TransitionStorageClass? storageClass;

  Transition({
    this.date,
    this.days,
    this.storageClass,
  });
  factory Transition.fromXml(_s.XmlElement elem) {
    return Transition(
      date: _s.extractXmlDateTimeValue(elem, 'Date',
          parser: _s.timeStampFromJson),
      days: _s.extractXmlIntValue(elem, 'Days'),
      storageClass: _s
          .extractXmlStringValue(elem, 'StorageClass')
          ?.let(TransitionStorageClass.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final date = this.date;
    final days = this.days;
    final storageClass = this.storageClass;
    return {
      if (date != null) 'Date': iso8601ToJson(date),
      if (days != null) 'Days': days,
      if (storageClass != null) 'StorageClass': storageClass.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final date = this.date;
    final days = this.days;
    final storageClass = this.storageClass;
    final $children = <_s.XmlNode>[
      if (date != null)
        _s.encodeXmlDateTimeValue('Date', date, formatter: _s.iso8601ToJson),
      if (days != null) _s.encodeXmlIntValue('Days', days),
      if (storageClass != null)
        _s.encodeXmlStringValue('StorageClass', storageClass.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

enum TransitionStorageClass {
  glacier('GLACIER'),
  standardIa('STANDARD_IA'),
  onezoneIa('ONEZONE_IA'),
  intelligentTiering('INTELLIGENT_TIERING'),
  deepArchive('DEEP_ARCHIVE'),
  glacierIr('GLACIER_IR'),
  ;

  final String value;

  const TransitionStorageClass(this.value);

  static TransitionStorageClass fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitionStorageClass'));
}

enum Type {
  canonicalUser('CanonicalUser'),
  amazonCustomerByEmail('AmazonCustomerByEmail'),
  group('Group'),
  ;

  final String value;

  const Type(this.value);

  static Type fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Type'));
}

class UploadPartCopyOutput {
  /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// Container for all response elements.
  final CopyPartResult? copyPartResult;

  /// The version of the source object that was copied, if you have enabled
  /// versioning on the source bucket.
  /// <note>
  /// This functionality is not supported when the source object is in a directory
  /// bucket.
  /// </note>
  final String? copySourceVersionId;
  final RequestCharged? requestCharged;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  UploadPartCopyOutput({
    this.bucketKeyEnabled,
    this.copyPartResult,
    this.copySourceVersionId,
    this.requestCharged,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
  });

  Map<String, dynamic> toJson() {
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final copyPartResult = this.copyPartResult;
    final copySourceVersionId = this.copySourceVersionId;
    final requestCharged = this.requestCharged;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    return {
      if (copyPartResult != null) 'CopyPartResult': copyPartResult,
    };
  }
}

class UploadPartOutput {
  /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side
  /// encryption with Key Management Service (KMS) keys (SSE-KMS).
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final bool? bucketKeyEnabled;

  /// The base64-encoded, 32-bit CRC32 checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32;

  /// The base64-encoded, 32-bit CRC32C checksum of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumCRC32C;

  /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use the API operation
  /// on an object that was uploaded using multipart uploads, this value may not
  /// be a direct checksum value of the full object. Instead, it's a calculation
  /// based on the checksum values of each individual part. For more information
  /// about how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA1;

  /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be
  /// present if it was uploaded with the object. When you use an API operation on
  /// an object that was uploaded using multipart uploads, this value may not be a
  /// direct checksum value of the full object. Instead, it's a calculation based
  /// on the checksum values of each individual part. For more information about
  /// how checksums are calculated with multipart uploads, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
  /// Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.
  final String? checksumSHA256;

  /// Entity tag for the uploaded object.
  final String? eTag;
  final RequestCharged? requestCharged;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to confirm the encryption
  /// algorithm that's used.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerAlgorithm;

  /// If server-side encryption with a customer-provided encryption key was
  /// requested, the response will include this header to provide the round-trip
  /// message integrity verification of the customer-provided encryption key.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSECustomerKeyMD5;

  /// If present, indicates the ID of the Key Management Service (KMS) symmetric
  /// encryption customer managed key that was used for the object.
  /// <note>
  /// This functionality is not supported for directory buckets.
  /// </note>
  final String? sSEKMSKeyId;

  /// The server-side encryption algorithm used when you store this object in
  /// Amazon S3 (for example, <code>AES256</code>, <code>aws:kms</code>).
  /// <note>
  /// For directory buckets, only server-side encryption with Amazon S3 managed
  /// keys (SSE-S3) (<code>AES256</code>) is supported.
  /// </note>
  final ServerSideEncryption? serverSideEncryption;

  UploadPartOutput({
    this.bucketKeyEnabled,
    this.checksumCRC32,
    this.checksumCRC32C,
    this.checksumSHA1,
    this.checksumSHA256,
    this.eTag,
    this.requestCharged,
    this.sSECustomerAlgorithm,
    this.sSECustomerKeyMD5,
    this.sSEKMSKeyId,
    this.serverSideEncryption,
  });

  Map<String, dynamic> toJson() {
    final bucketKeyEnabled = this.bucketKeyEnabled;
    final checksumCRC32 = this.checksumCRC32;
    final checksumCRC32C = this.checksumCRC32C;
    final checksumSHA1 = this.checksumSHA1;
    final checksumSHA256 = this.checksumSHA256;
    final eTag = this.eTag;
    final requestCharged = this.requestCharged;
    final sSECustomerAlgorithm = this.sSECustomerAlgorithm;
    final sSECustomerKeyMD5 = this.sSECustomerKeyMD5;
    final sSEKMSKeyId = this.sSEKMSKeyId;
    final serverSideEncryption = this.serverSideEncryption;
    return {};
  }
}

/// Describes the versioning state of an Amazon S3 bucket. For more information,
/// see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html">PUT
/// Bucket versioning</a> in the <i>Amazon S3 API Reference</i>.
class VersioningConfiguration {
  /// Specifies whether MFA delete is enabled in the bucket versioning
  /// configuration. This element is only returned if the bucket has been
  /// configured with MFA delete. If the bucket has never been so configured, this
  /// element is not returned.
  final MFADelete? mFADelete;

  /// The versioning state of the bucket.
  final BucketVersioningStatus? status;

  VersioningConfiguration({
    this.mFADelete,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final mFADelete = this.mFADelete;
    final status = this.status;
    return {
      if (mFADelete != null) 'MfaDelete': mFADelete.value,
      if (status != null) 'Status': status.value,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final mFADelete = this.mFADelete;
    final status = this.status;
    final $children = <_s.XmlNode>[
      if (mFADelete != null)
        _s.encodeXmlStringValue('MfaDelete', mFADelete.value),
      if (status != null) _s.encodeXmlStringValue('Status', status.value),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

/// Specifies website configuration parameters for an Amazon S3 bucket.
class WebsiteConfiguration {
  /// The name of the error document for the website.
  final ErrorDocument? errorDocument;

  /// The name of the index document for the website.
  final IndexDocument? indexDocument;

  /// The redirect behavior for every request to this bucket's website endpoint.
  /// <important>
  /// If you specify this property, you can't specify any other property.
  /// </important>
  final RedirectAllRequestsTo? redirectAllRequestsTo;

  /// Rules that define when a redirect is applied and the redirect behavior.
  final List<RoutingRule>? routingRules;

  WebsiteConfiguration({
    this.errorDocument,
    this.indexDocument,
    this.redirectAllRequestsTo,
    this.routingRules,
  });

  Map<String, dynamic> toJson() {
    final errorDocument = this.errorDocument;
    final indexDocument = this.indexDocument;
    final redirectAllRequestsTo = this.redirectAllRequestsTo;
    final routingRules = this.routingRules;
    return {
      if (errorDocument != null) 'ErrorDocument': errorDocument,
      if (indexDocument != null) 'IndexDocument': indexDocument,
      if (redirectAllRequestsTo != null)
        'RedirectAllRequestsTo': redirectAllRequestsTo,
      if (routingRules != null) 'RoutingRules': routingRules,
    };
  }

  _s.XmlElement toXml(String elemName, {List<_s.XmlAttribute>? attributes}) {
    final errorDocument = this.errorDocument;
    final indexDocument = this.indexDocument;
    final redirectAllRequestsTo = this.redirectAllRequestsTo;
    final routingRules = this.routingRules;
    final $children = <_s.XmlNode>[
      if (errorDocument != null) errorDocument.toXml('ErrorDocument'),
      if (indexDocument != null) indexDocument.toXml('IndexDocument'),
      if (redirectAllRequestsTo != null)
        redirectAllRequestsTo.toXml('RedirectAllRequestsTo'),
      if (routingRules != null)
        _s.XmlElement(_s.XmlName('RoutingRules'), [],
            routingRules.map((e) => e.toXml('RoutingRule'))),
    ];
    final $attributes = <_s.XmlAttribute>[
      ...?attributes,
    ];
    return _s.XmlElement(
      _s.XmlName(elemName),
      $attributes,
      $children,
    );
  }
}

class BucketAlreadyExists extends _s.GenericAwsException {
  BucketAlreadyExists({String? type, String? message})
      : super(type: type, code: 'BucketAlreadyExists', message: message);
}

class BucketAlreadyOwnedByYou extends _s.GenericAwsException {
  BucketAlreadyOwnedByYou({String? type, String? message})
      : super(type: type, code: 'BucketAlreadyOwnedByYou', message: message);
}

class InvalidObjectState extends _s.GenericAwsException {
  InvalidObjectState({String? type, String? message})
      : super(type: type, code: 'InvalidObjectState', message: message);
}

class NoSuchBucket extends _s.GenericAwsException {
  NoSuchBucket({String? type, String? message})
      : super(type: type, code: 'NoSuchBucket', message: message);
}

class NoSuchKey extends _s.GenericAwsException {
  NoSuchKey({String? type, String? message})
      : super(type: type, code: 'NoSuchKey', message: message);
}

class NoSuchUpload extends _s.GenericAwsException {
  NoSuchUpload({String? type, String? message})
      : super(type: type, code: 'NoSuchUpload', message: message);
}

class ObjectAlreadyInActiveTierError extends _s.GenericAwsException {
  ObjectAlreadyInActiveTierError({String? type, String? message})
      : super(
            type: type,
            code: 'ObjectAlreadyInActiveTierError',
            message: message);
}

class ObjectNotInActiveTierError extends _s.GenericAwsException {
  ObjectNotInActiveTierError({String? type, String? message})
      : super(type: type, code: 'ObjectNotInActiveTierError', message: message);
}

final _exceptionFns = <String, _s.AwsExceptionFn>{
  'BucketAlreadyExists': (type, message) =>
      BucketAlreadyExists(type: type, message: message),
  'BucketAlreadyOwnedByYou': (type, message) =>
      BucketAlreadyOwnedByYou(type: type, message: message),
  'InvalidObjectState': (type, message) =>
      InvalidObjectState(type: type, message: message),
  'NoSuchBucket': (type, message) => NoSuchBucket(type: type, message: message),
  'NoSuchKey': (type, message) => NoSuchKey(type: type, message: message),
  'NoSuchUpload': (type, message) => NoSuchUpload(type: type, message: message),
  'ObjectAlreadyInActiveTierError': (type, message) =>
      ObjectAlreadyInActiveTierError(type: type, message: message),
  'ObjectNotInActiveTierError': (type, message) =>
      ObjectNotInActiveTierError(type: type, message: message),
};
