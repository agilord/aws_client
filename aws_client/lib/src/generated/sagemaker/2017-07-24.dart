// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: camel_case_types

import 'dart:convert';
import 'dart:typed_data';

import '../../shared/shared.dart' as _s;
import '../../shared/shared.dart'
    show
        rfc822ToJson,
        iso8601ToJson,
        unixTimestampToJson,
        nonNullableTimeStampFromJson,
        timeStampFromJson;

export '../../shared/shared.dart' show AwsClientCredentials;

/// Provides APIs for creating and managing Amazon SageMaker resources.
///
/// Other Resources:
///
/// <ul>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">Amazon
/// SageMaker Developer Guide</a>
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon
/// Augmented AI Runtime API Reference</a>
/// </li>
/// </ul>
class SageMaker {
  final _s.JsonProtocol _protocol;
  SageMaker({
    required String region,
    _s.AwsClientCredentials? credentials,
    _s.Client? client,
    String? endpointUrl,
  }) : _protocol = _s.JsonProtocol(
          client: client,
          service: _s.ServiceMetadata(
            endpointPrefix: 'api.sagemaker',
            signingName: 'sagemaker',
          ),
          region: region,
          credentials: credentials,
          endpointUrl: endpointUrl,
        );

  /// Creates an <i>association</i> between the source and the destination. A
  /// source can be associated with multiple destinations, and a destination can
  /// be associated with multiple sources. An association is a lineage tracking
  /// entity. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [destinationArn] :
  /// The Amazon Resource Name (ARN) of the destination.
  ///
  /// Parameter [sourceArn] :
  /// The ARN of the source.
  ///
  /// Parameter [associationType] :
  /// The type of association. The following are suggested uses for each type.
  /// Amazon SageMaker places no restrictions on their use.
  ///
  /// <ul>
  /// <li>
  /// ContributedTo - The source contributed to the destination or had a part in
  /// enabling the destination. For example, the training data contributed to
  /// the training job.
  /// </li>
  /// <li>
  /// AssociatedWith - The source is connected to the destination. For example,
  /// an approval workflow is associated with a model deployment.
  /// </li>
  /// <li>
  /// DerivedFrom - The destination is a modification of the source. For
  /// example, a digest output of a channel input for a processing job is
  /// derived from the original inputs.
  /// </li>
  /// <li>
  /// Produced - The source generated the destination. For example, a training
  /// job produced a model artifact.
  /// </li>
  /// </ul>
  Future<AddAssociationResponse> addAssociation({
    required String destinationArn,
    required String sourceArn,
    AssociationEdgeType? associationType,
  }) async {
    ArgumentError.checkNotNull(destinationArn, 'destinationArn');
    _s.validateStringLength(
      'destinationArn',
      destinationArn,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(sourceArn, 'sourceArn');
    _s.validateStringLength(
      'sourceArn',
      sourceArn,
      0,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.AddAssociation'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DestinationArn': destinationArn,
        'SourceArn': sourceArn,
        if (associationType != null)
          'AssociationType': associationType.toValue(),
      },
    );

    return AddAssociationResponse.fromJson(jsonResponse.body);
  }

  /// Adds or overwrites one or more tags for the specified Amazon SageMaker
  /// resource. You can add tags to notebook instances, training jobs,
  /// hyperparameter tuning jobs, batch transform jobs, models, labeling jobs,
  /// work teams, endpoint configurations, and endpoints.
  ///
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource. For more information about tags, see For more information,
  /// see <a
  /// href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon
  /// Web Services Tagging Strategies</a>.
  /// <note>
  /// Tags that you add to a hyperparameter tuning job by calling this API are
  /// also added to any training jobs that the hyperparameter tuning job
  /// launches after you call this API, but not to training jobs that the
  /// hyperparameter tuning job launched before you called this API. To make
  /// sure that the tags associated with a hyperparameter tuning job are also
  /// added to all training jobs that the hyperparameter tuning job launches,
  /// add the tags when you first create the tuning job by specifying them in
  /// the <code>Tags</code> parameter of <a>CreateHyperParameterTuningJob</a>
  /// </note> <note>
  /// Tags that you add to a SageMaker Studio Domain or User Profile by calling
  /// this API are also added to any Apps that the Domain or User Profile
  /// launches after you call this API, but not to Apps that the Domain or User
  /// Profile launched before you called this API. To make sure that the tags
  /// associated with a Domain or User Profile are also added to all Apps that
  /// the Domain or User Profile launches, add the tags when you first create
  /// the Domain or User Profile by specifying them in the <code>Tags</code>
  /// parameter of <a>CreateDomain</a> or <a>CreateUserProfile</a>.
  /// </note>
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the resource that you want to tag.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<AddTagsOutput> addTags({
    required String resourceArn,
    required List<Tag> tags,
  }) async {
    ArgumentError.checkNotNull(resourceArn, 'resourceArn');
    _s.validateStringLength(
      'resourceArn',
      resourceArn,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(tags, 'tags');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.AddTags'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ResourceArn': resourceArn,
        'Tags': tags,
      },
    );

    return AddTagsOutput.fromJson(jsonResponse.body);
  }

  /// Associates a trial component with a trial. A trial component can be
  /// associated with multiple trials. To disassociate a trial component from a
  /// trial, call the <a>DisassociateTrialComponent</a> API.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to associated with the trial.
  ///
  /// Parameter [trialName] :
  /// The name of the trial to associate with.
  Future<AssociateTrialComponentResponse> associateTrialComponent({
    required String trialComponentName,
    required String trialName,
  }) async {
    ArgumentError.checkNotNull(trialComponentName, 'trialComponentName');
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
      isRequired: true,
    );
    ArgumentError.checkNotNull(trialName, 'trialName');
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.AssociateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        'TrialName': trialName,
      },
    );

    return AssociateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Creates an <i>action</i>. An action is a lineage tracking entity that
  /// represents an action or activity. For example, a model deployment or an
  /// HPO job. Generally, an action involves at least one input or output
  /// artifact. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  /// <note>
  /// <code>CreateAction</code> can only be invoked from within an SageMaker
  /// managed environment. This includes SageMaker training jobs, processing
  /// jobs, transform jobs, and SageMaker notebooks. A call to
  /// <code>CreateAction</code> from outside one of these environments results
  /// in an error.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [actionName] :
  /// The name of the action. Must be unique to your account in an Amazon Web
  /// Services Region.
  ///
  /// Parameter [actionType] :
  /// The action type.
  ///
  /// Parameter [source] :
  /// The source type, ID, and URI.
  ///
  /// Parameter [description] :
  /// The description of the action.
  ///
  /// Parameter [properties] :
  /// A list of properties to add to the action.
  ///
  /// Parameter [status] :
  /// The status of the action.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the action.
  Future<CreateActionResponse> createAction({
    required String actionName,
    required String actionType,
    required ActionSource source,
    String? description,
    MetadataProperties? metadataProperties,
    Map<String, String>? properties,
    ActionStatus? status,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(actionName, 'actionName');
    _s.validateStringLength(
      'actionName',
      actionName,
      1,
      120,
      isRequired: true,
    );
    ArgumentError.checkNotNull(actionType, 'actionType');
    _s.validateStringLength(
      'actionType',
      actionType,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(source, 'source');
    _s.validateStringLength(
      'description',
      description,
      0,
      3072,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
        'ActionType': actionType,
        'Source': source,
        if (description != null) 'Description': description,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (properties != null) 'Properties': properties,
        if (status != null) 'Status': status.toValue(),
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateActionResponse.fromJson(jsonResponse.body);
  }

  /// Create a machine learning algorithm that you can use in Amazon SageMaker
  /// and list in the Amazon Web Services Marketplace.
  ///
  /// Parameter [algorithmName] :
  /// The name of the algorithm.
  ///
  /// Parameter [trainingSpecification] :
  /// Specifies details about training jobs run by this algorithm, including the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR path of the container and the version digest of the
  /// algorithm.
  /// </li>
  /// <li>
  /// The hyperparameters that the algorithm supports.
  /// </li>
  /// <li>
  /// The instance types that the algorithm supports for training.
  /// </li>
  /// <li>
  /// Whether the algorithm supports distributed training.
  /// </li>
  /// <li>
  /// The metrics that the algorithm emits to Amazon CloudWatch.
  /// </li>
  /// <li>
  /// Which metrics that the algorithm emits can be used as the objective metric
  /// for hyperparameter tuning jobs.
  /// </li>
  /// <li>
  /// The input channels that the algorithm supports for training data. For
  /// example, an algorithm might support <code>train</code>,
  /// <code>validation</code>, and <code>test</code> channels.
  /// </li>
  /// </ul>
  ///
  /// Parameter [algorithmDescription] :
  /// A description of the algorithm.
  ///
  /// Parameter [certifyForMarketplace] :
  /// Whether to certify the algorithm so that it can be listed in Amazon Web
  /// Services Marketplace.
  ///
  /// Parameter [inferenceSpecification] :
  /// Specifies details about inference jobs that the algorithm runs, including
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR paths of containers that contain the inference code and
  /// model artifacts.
  /// </li>
  /// <li>
  /// The instance types that the algorithm supports for transform jobs and
  /// real-time endpoints used for inference.
  /// </li>
  /// <li>
  /// The input and output content formats that the algorithm supports for
  /// inference.
  /// </li>
  /// </ul>
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [validationSpecification] :
  /// Specifies configurations for one or more training jobs and that Amazon
  /// SageMaker runs to test the algorithm's training code and, optionally, one
  /// or more batch transform jobs that Amazon SageMaker runs to test the
  /// algorithm's inference code.
  Future<CreateAlgorithmOutput> createAlgorithm({
    required String algorithmName,
    required TrainingSpecification trainingSpecification,
    String? algorithmDescription,
    bool? certifyForMarketplace,
    InferenceSpecification? inferenceSpecification,
    List<Tag>? tags,
    AlgorithmValidationSpecification? validationSpecification,
  }) async {
    ArgumentError.checkNotNull(algorithmName, 'algorithmName');
    _s.validateStringLength(
      'algorithmName',
      algorithmName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(trainingSpecification, 'trainingSpecification');
    _s.validateStringLength(
      'algorithmDescription',
      algorithmDescription,
      0,
      1024,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAlgorithm'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmName': algorithmName,
        'TrainingSpecification': trainingSpecification,
        if (algorithmDescription != null)
          'AlgorithmDescription': algorithmDescription,
        if (certifyForMarketplace != null)
          'CertifyForMarketplace': certifyForMarketplace,
        if (inferenceSpecification != null)
          'InferenceSpecification': inferenceSpecification,
        if (tags != null) 'Tags': tags,
        if (validationSpecification != null)
          'ValidationSpecification': validationSpecification,
      },
    );

    return CreateAlgorithmOutput.fromJson(jsonResponse.body);
  }

  /// Creates a running app for the specified UserProfile. Supported apps are
  /// <code>JupyterServer</code> and <code>KernelGateway</code>. This operation
  /// is automatically invoked by Amazon SageMaker Studio upon access to the
  /// associated Domain, and when new kernel configurations are selected by the
  /// user. A user may have multiple Apps active simultaneously.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [appName] :
  /// The name of the app.
  ///
  /// Parameter [appType] :
  /// The type of app. Supported apps are <code>JupyterServer</code> and
  /// <code>KernelGateway</code>. <code>TensorBoard</code> is not supported.
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  ///
  /// Parameter [resourceSpec] :
  /// The instance type and the Amazon Resource Name (ARN) of the SageMaker
  /// image created on the instance.
  ///
  /// Parameter [tags] :
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource.
  Future<CreateAppResponse> createApp({
    required String appName,
    required AppType appType,
    required String domainId,
    required String userProfileName,
    ResourceSpec? resourceSpec,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(appName, 'appName');
    _s.validateStringLength(
      'appName',
      appName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(appType, 'appType');
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateApp'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppName': appName,
        'AppType': appType.toValue(),
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (resourceSpec != null) 'ResourceSpec': resourceSpec,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateAppResponse.fromJson(jsonResponse.body);
  }

  /// Creates a configuration for running a SageMaker image as a KernelGateway
  /// app. The configuration specifies the Amazon Elastic File System (EFS)
  /// storage volume on the image, and a list of the kernels in the image.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig. Must be unique to your account.
  ///
  /// Parameter [kernelGatewayImageConfig] :
  /// The KernelGatewayImageConfig.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the AppImageConfig.
  Future<CreateAppImageConfigResponse> createAppImageConfig({
    required String appImageConfigName,
    KernelGatewayImageConfig? kernelGatewayImageConfig,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(appImageConfigName, 'appImageConfigName');
    _s.validateStringLength(
      'appImageConfigName',
      appImageConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAppImageConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
        if (kernelGatewayImageConfig != null)
          'KernelGatewayImageConfig': kernelGatewayImageConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateAppImageConfigResponse.fromJson(jsonResponse.body);
  }

  /// Creates an <i>artifact</i>. An artifact is a lineage tracking entity that
  /// represents a URI addressable object or data. Some examples are the S3 URI
  /// of a dataset and the ECR registry path of an image. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  /// <note>
  /// <code>CreateArtifact</code> can only be invoked from within an SageMaker
  /// managed environment. This includes SageMaker training jobs, processing
  /// jobs, transform jobs, and SageMaker notebooks. A call to
  /// <code>CreateArtifact</code> from outside one of these environments results
  /// in an error.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [artifactType] :
  /// The artifact type.
  ///
  /// Parameter [source] :
  /// The ID, ID type, and URI of the source.
  ///
  /// Parameter [artifactName] :
  /// The name of the artifact. Must be unique to your account in an Amazon Web
  /// Services Region.
  ///
  /// Parameter [properties] :
  /// A list of properties to add to the artifact.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the artifact.
  Future<CreateArtifactResponse> createArtifact({
    required String artifactType,
    required ArtifactSource source,
    String? artifactName,
    MetadataProperties? metadataProperties,
    Map<String, String>? properties,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(artifactType, 'artifactType');
    _s.validateStringLength(
      'artifactType',
      artifactType,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(source, 'source');
    _s.validateStringLength(
      'artifactName',
      artifactName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ArtifactType': artifactType,
        'Source': source,
        if (artifactName != null) 'ArtifactName': artifactName,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (properties != null) 'Properties': properties,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Creates an Autopilot job.
  ///
  /// Find the best performing model after you run an Autopilot job by calling .
  ///
  /// For information about how to use Autopilot, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate
  /// Model Development with Amazon SageMaker Autopilot</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [autoMLJobName] :
  /// Identifies an Autopilot job. The name must be unique to your account and
  /// is case-insensitive.
  ///
  /// Parameter [inputDataConfig] :
  /// An array of channel objects that describes the input data and its
  /// location. Each channel is a named input source. Similar to
  /// <code>InputDataConfig</code> supported by . Format(s) supported: CSV.
  /// Minimum of 500 rows.
  ///
  /// Parameter [outputDataConfig] :
  /// Provides information about encryption and the Amazon S3 output path needed
  /// to store artifacts from an AutoML job. Format(s) supported: CSV.
  ///
  /// Parameter [roleArn] :
  /// The ARN of the role that is used to access the data.
  ///
  /// Parameter [autoMLJobConfig] :
  /// Contains <code>CompletionCriteria</code> and <code>SecurityConfig</code>
  /// settings for the AutoML job.
  ///
  /// Parameter [autoMLJobObjective] :
  /// Defines the objective metric used to measure the predictive quality of an
  /// AutoML job. You provide an <a>AutoMLJobObjective$MetricName</a> and
  /// Autopilot infers whether to minimize or maximize it.
  ///
  /// Parameter [generateCandidateDefinitionsOnly] :
  /// Generates possible candidates without training the models. A candidate is
  /// a combination of data preprocessors, algorithms, and algorithm parameter
  /// settings.
  ///
  /// Parameter [modelDeployConfig] :
  /// Specifies how to generate the endpoint name for an automatic one-click
  /// Autopilot model deployment.
  ///
  /// Parameter [problemType] :
  /// Defines the type of supervised learning available for the candidates.
  /// Options include: <code>BinaryClassification</code>,
  /// <code>MulticlassClassification</code>, and <code>Regression</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html">
  /// Amazon SageMaker Autopilot problem types and algorithm support</a>.
  ///
  /// Parameter [tags] :
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource.
  Future<CreateAutoMLJobResponse> createAutoMLJob({
    required String autoMLJobName,
    required List<AutoMLChannel> inputDataConfig,
    required AutoMLOutputDataConfig outputDataConfig,
    required String roleArn,
    AutoMLJobConfig? autoMLJobConfig,
    AutoMLJobObjective? autoMLJobObjective,
    bool? generateCandidateDefinitionsOnly,
    ModelDeployConfig? modelDeployConfig,
    ProblemType? problemType,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(autoMLJobName, 'autoMLJobName');
    _s.validateStringLength(
      'autoMLJobName',
      autoMLJobName,
      1,
      32,
      isRequired: true,
    );
    ArgumentError.checkNotNull(inputDataConfig, 'inputDataConfig');
    ArgumentError.checkNotNull(outputDataConfig, 'outputDataConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAutoMLJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
        'InputDataConfig': inputDataConfig,
        'OutputDataConfig': outputDataConfig,
        'RoleArn': roleArn,
        if (autoMLJobConfig != null) 'AutoMLJobConfig': autoMLJobConfig,
        if (autoMLJobObjective != null)
          'AutoMLJobObjective': autoMLJobObjective,
        if (generateCandidateDefinitionsOnly != null)
          'GenerateCandidateDefinitionsOnly': generateCandidateDefinitionsOnly,
        if (modelDeployConfig != null) 'ModelDeployConfig': modelDeployConfig,
        if (problemType != null) 'ProblemType': problemType.toValue(),
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateAutoMLJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a Git repository as a resource in your Amazon SageMaker account.
  /// You can associate the repository with notebook instances so that you can
  /// use Git source control for the notebooks you create. The Git repository is
  /// a resource in your Amazon SageMaker account, so it can be associated with
  /// more than one notebook instance, and it persists independently from the
  /// lifecycle of any notebook instances it is associated with.
  ///
  /// The repository can be hosted either in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository. The name must have 1 to 63 characters.
  /// Valid characters are a-z, A-Z, 0-9, and - (hyphen).
  ///
  /// Parameter [gitConfig] :
  /// Specifies details about the repository, including the URL where the
  /// repository is located, the default branch, and credentials to use to
  /// access the repository.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<CreateCodeRepositoryOutput> createCodeRepository({
    required String codeRepositoryName,
    required GitConfig gitConfig,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(codeRepositoryName, 'codeRepositoryName');
    _s.validateStringLength(
      'codeRepositoryName',
      codeRepositoryName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(gitConfig, 'gitConfig');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateCodeRepository'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
        'GitConfig': gitConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateCodeRepositoryOutput.fromJson(jsonResponse.body);
  }

  /// Starts a model compilation job. After the model has been compiled, Amazon
  /// SageMaker saves the resulting model artifacts to an Amazon Simple Storage
  /// Service (Amazon S3) bucket that you specify.
  ///
  /// If you choose to host your model using Amazon SageMaker hosting services,
  /// you can use the resulting model artifacts as part of the model. You can
  /// also use the artifacts with Amazon Web Services IoT Greengrass. In that
  /// case, deploy them as an ML resource.
  ///
  /// In the request body, you provide the following:
  ///
  /// <ul>
  /// <li>
  /// A name for the compilation job
  /// </li>
  /// <li>
  /// Information about the input model artifacts
  /// </li>
  /// <li>
  /// The output location for the compiled model and the device (target) that
  /// the model runs on
  /// </li>
  /// <li>
  /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker
  /// assumes to perform the model compilation job.
  /// </li>
  /// </ul>
  /// You can also provide a <code>Tag</code> to track the model compilation
  /// job's resource use and costs. The response body contains the
  /// <code>CompilationJobArn</code> for the compiled job.
  ///
  /// To stop a model compilation job, use <a>StopCompilationJob</a>. To get
  /// information about a particular model compilation job, use
  /// <a>DescribeCompilationJob</a>. To get information about multiple model
  /// compilation jobs, use <a>ListCompilationJobs</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [compilationJobName] :
  /// A name for the model compilation job. The name must be unique within the
  /// Amazon Web Services Region and within your Amazon Web Services account.
  ///
  /// Parameter [inputConfig] :
  /// Provides information about the location of input model artifacts, the name
  /// and shape of the expected data inputs, and the framework in which the
  /// model was trained.
  ///
  /// Parameter [outputConfig] :
  /// Provides information about the output location for the compiled model and
  /// the target device the model runs on.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon
  /// SageMaker to perform tasks on your behalf.
  ///
  /// During model compilation, Amazon SageMaker needs your permission to:
  ///
  /// <ul>
  /// <li>
  /// Read input data from an S3 bucket
  /// </li>
  /// <li>
  /// Write model artifacts to an S3 bucket
  /// </li>
  /// <li>
  /// Write logs to Amazon CloudWatch Logs
  /// </li>
  /// <li>
  /// Publish metrics to Amazon CloudWatch
  /// </li>
  /// </ul>
  /// You grant permissions for all of these tasks to an IAM role. To pass this
  /// role to Amazon SageMaker, the caller of this API must have the
  /// <code>iam:PassRole</code> permission. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon
  /// SageMaker Roles.</a>
  ///
  /// Parameter [stoppingCondition] :
  /// Specifies a limit to how long a model compilation job can run. When the
  /// job reaches the time limit, Amazon SageMaker ends the compilation job. Use
  /// this API to cap model training costs.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [vpcConfig] :
  /// A <a>VpcConfig</a> object that specifies the VPC that you want your
  /// compilation job to connect to. Control access to your models by
  /// configuring the VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect
  /// Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.
  Future<CreateCompilationJobResponse> createCompilationJob({
    required String compilationJobName,
    required InputConfig inputConfig,
    required OutputConfig outputConfig,
    required String roleArn,
    required StoppingCondition stoppingCondition,
    List<Tag>? tags,
    NeoVpcConfig? vpcConfig,
  }) async {
    ArgumentError.checkNotNull(compilationJobName, 'compilationJobName');
    _s.validateStringLength(
      'compilationJobName',
      compilationJobName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(inputConfig, 'inputConfig');
    ArgumentError.checkNotNull(outputConfig, 'outputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    ArgumentError.checkNotNull(stoppingCondition, 'stoppingCondition');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateCompilationJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
        'InputConfig': inputConfig,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateCompilationJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a <i>context</i>. A context is a lineage tracking entity that
  /// represents a logical grouping of other tracking or experiment entities.
  /// Some examples are an endpoint and a model package. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  /// <note>
  /// <code>CreateContext</code> can only be invoked from within an SageMaker
  /// managed environment. This includes SageMaker training jobs, processing
  /// jobs, transform jobs, and SageMaker notebooks. A call to
  /// <code>CreateContext</code> from outside one of these environments results
  /// in an error.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [contextName] :
  /// The name of the context. Must be unique to your account in an Amazon Web
  /// Services Region.
  ///
  /// Parameter [contextType] :
  /// The context type.
  ///
  /// Parameter [source] :
  /// The source type, ID, and URI.
  ///
  /// Parameter [description] :
  /// The description of the context.
  ///
  /// Parameter [properties] :
  /// A list of properties to add to the context.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the context.
  Future<CreateContextResponse> createContext({
    required String contextName,
    required String contextType,
    required ContextSource source,
    String? description,
    Map<String, String>? properties,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(contextName, 'contextName');
    _s.validateStringLength(
      'contextName',
      contextName,
      1,
      120,
      isRequired: true,
    );
    ArgumentError.checkNotNull(contextType, 'contextType');
    _s.validateStringLength(
      'contextType',
      contextType,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(source, 'source');
    _s.validateStringLength(
      'description',
      description,
      0,
      3072,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
        'ContextType': contextType,
        'Source': source,
        if (description != null) 'Description': description,
        if (properties != null) 'Properties': properties,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateContextResponse.fromJson(jsonResponse.body);
  }

  /// Creates a definition for a job that monitors data quality and drift. For
  /// information about model monitor, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
  /// SageMaker Model Monitor</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [dataQualityAppSpecification] :
  /// Specifies the container that runs the monitoring job.
  ///
  /// Parameter [dataQualityJobInput] :
  /// A list of inputs for the monitoring job. Currently endpoints are supported
  /// as monitoring inputs.
  ///
  /// Parameter [jobDefinitionName] :
  /// The name for the monitoring job definition.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [dataQualityBaselineConfig] :
  /// Configures the constraints and baselines for the monitoring job.
  ///
  /// Parameter [networkConfig] :
  /// Specifies networking configuration for the monitoring job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateDataQualityJobDefinitionResponse>
      createDataQualityJobDefinition({
    required DataQualityAppSpecification dataQualityAppSpecification,
    required DataQualityJobInput dataQualityJobInput,
    required MonitoringOutputConfig dataQualityJobOutputConfig,
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required String roleArn,
    DataQualityBaselineConfig? dataQualityBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(
        dataQualityAppSpecification, 'dataQualityAppSpecification');
    ArgumentError.checkNotNull(dataQualityJobInput, 'dataQualityJobInput');
    ArgumentError.checkNotNull(
        dataQualityJobOutputConfig, 'dataQualityJobOutputConfig');
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(jobResources, 'jobResources');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateDataQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DataQualityAppSpecification': dataQualityAppSpecification,
        'DataQualityJobInput': dataQualityJobInput,
        'DataQualityJobOutputConfig': dataQualityJobOutputConfig,
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'RoleArn': roleArn,
        if (dataQualityBaselineConfig != null)
          'DataQualityBaselineConfig': dataQualityBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateDataQualityJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Creates a device fleet.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet that the device belongs to.
  ///
  /// Parameter [outputConfig] :
  /// The output configuration for storing sample data collected by the fleet.
  ///
  /// Parameter [description] :
  /// A description of the fleet.
  ///
  /// Parameter [enableIotRoleAlias] :
  /// Whether to create an Amazon Web Services IoT Role Alias during device
  /// fleet creation. The name of the role alias generated will match this
  /// pattern: "SageMakerEdge-{DeviceFleetName}".
  ///
  /// For example, if your device fleet is called "demo-fleet", the name of the
  /// role alias will be "SageMakerEdge-demo-fleet".
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) that has access to Amazon Web Services
  /// Internet of Things (IoT).
  ///
  /// Parameter [tags] :
  /// Creates tags for the specified fleet.
  Future<void> createDeviceFleet({
    required String deviceFleetName,
    required EdgeOutputConfig outputConfig,
    String? description,
    bool? enableIotRoleAlias,
    String? roleArn,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(outputConfig, 'outputConfig');
    _s.validateStringLength(
      'description',
      description,
      1,
      800,
    );
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateDeviceFleet'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'OutputConfig': outputConfig,
        if (description != null) 'Description': description,
        if (enableIotRoleAlias != null)
          'EnableIotRoleAlias': enableIotRoleAlias,
        if (roleArn != null) 'RoleArn': roleArn,
        if (tags != null) 'Tags': tags,
      },
    );
  }

  /// Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain
  /// consists of an associated Amazon Elastic File System (EFS) volume, a list
  /// of authorized users, and a variety of security, application, policy, and
  /// Amazon Virtual Private Cloud (VPC) configurations. An Amazon Web Services
  /// account is limited to one domain per region. Users within a domain can
  /// share notebook files and other artifacts with each other.
  ///
  /// <b>EFS storage</b>
  ///
  /// When a domain is created, an EFS volume is created for use by all of the
  /// users within the domain. Each user receives a private home directory
  /// within the EFS volume for notebooks, Git repositories, and data files.
  ///
  /// SageMaker uses the Amazon Web Services Key Management Service (Amazon Web
  /// Services KMS) to encrypt the EFS volume attached to the domain with an
  /// Amazon Web Services managed customer master key (CMK) by default. For more
  /// control, you can specify a customer managed CMK. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect
  /// Data at Rest Using Encryption</a>.
  ///
  /// <b>VPC configuration</b>
  ///
  /// All SageMaker Studio traffic between the domain and the EFS volume is
  /// through the specified VPC and subnets. For other Studio traffic, you can
  /// specify the <code>AppNetworkAccessType</code> parameter.
  /// <code>AppNetworkAccessType</code> corresponds to the network access type
  /// that you choose when you onboard to Studio. The following options are
  /// available:
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC
  /// managed by Amazon SageMaker, which allows internet access. This is the
  /// default value.
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All Studio traffic is through the specified VPC and
  /// subnets. Internet access is disabled by default. To allow internet access,
  /// you must specify a NAT gateway.
  ///
  /// When internet access is disabled, you won't be able to run a Studio
  /// notebook or to train or host models unless your VPC has an interface
  /// endpoint to the SageMaker API and runtime or a NAT gateway and your
  /// security groups allow outbound connections.
  /// </li>
  /// </ul> <important>
  /// NFS traffic over TCP on port 2049 needs to be allowed in both inbound and
  /// outbound rules in order to launch a SageMaker Studio app successfully.
  /// </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect
  /// SageMaker Studio Notebooks to Resources in a VPC</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [authMode] :
  /// The mode of authentication that members use to access the domain.
  ///
  /// Parameter [defaultUserSettings] :
  /// The default settings to use to create a user profile when
  /// <code>UserSettings</code> isn't specified in the call to the
  /// <code>CreateUserProfile</code> API.
  ///
  /// <code>SecurityGroups</code> is aggregated when specified in both calls.
  /// For all other settings in <code>UserSettings</code>, the values specified
  /// in <code>CreateUserProfile</code> take precedence over those specified in
  /// <code>CreateDomain</code>.
  ///
  /// Parameter [domainName] :
  /// A name for the domain.
  ///
  /// Parameter [subnetIds] :
  /// The VPC subnets that Studio uses for communication.
  ///
  /// Parameter [vpcId] :
  /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for
  /// communication.
  ///
  /// Parameter [appNetworkAccessType] :
  /// Specifies the VPC used for non-EFS traffic. The default value is
  /// <code>PublicInternetOnly</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed
  /// by Amazon SageMaker, which allows direct internet access
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All Studio traffic is through the specified VPC and
  /// subnets
  /// </li>
  /// </ul>
  ///
  /// Parameter [homeEfsFileSystemKmsKeyId] :
  /// This member is deprecated and replaced with <code>KmsKeyId</code>.
  ///
  /// Parameter [kmsKeyId] :
  /// SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached
  /// to the domain with an Amazon Web Services managed customer master key
  /// (CMK) by default. For more control, specify a customer managed CMK.
  ///
  /// Parameter [tags] :
  /// Tags to associated with the Domain. Each tag consists of a key and an
  /// optional value. Tag keys must be unique per resource. Tags are searchable
  /// using the <code>Search</code> API.
  ///
  /// Tags that you specify for the Domain are also added to all Apps that the
  /// Domain launches.
  Future<CreateDomainResponse> createDomain({
    required AuthMode authMode,
    required UserSettings defaultUserSettings,
    required String domainName,
    required List<String> subnetIds,
    required String vpcId,
    AppNetworkAccessType? appNetworkAccessType,
    String? homeEfsFileSystemKmsKeyId,
    String? kmsKeyId,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(authMode, 'authMode');
    ArgumentError.checkNotNull(defaultUserSettings, 'defaultUserSettings');
    ArgumentError.checkNotNull(domainName, 'domainName');
    _s.validateStringLength(
      'domainName',
      domainName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(subnetIds, 'subnetIds');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
    _s.validateStringLength(
      'vpcId',
      vpcId,
      0,
      32,
      isRequired: true,
    );
    _s.validateStringLength(
      'homeEfsFileSystemKmsKeyId',
      homeEfsFileSystemKmsKeyId,
      0,
      2048,
    );
    _s.validateStringLength(
      'kmsKeyId',
      kmsKeyId,
      0,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateDomain'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AuthMode': authMode.toValue(),
        'DefaultUserSettings': defaultUserSettings,
        'DomainName': domainName,
        'SubnetIds': subnetIds,
        'VpcId': vpcId,
        if (appNetworkAccessType != null)
          'AppNetworkAccessType': appNetworkAccessType.toValue(),
        if (homeEfsFileSystemKmsKeyId != null)
          'HomeEfsFileSystemKmsKeyId': homeEfsFileSystemKmsKeyId,
        if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateDomainResponse.fromJson(jsonResponse.body);
  }

  /// Starts a SageMaker Edge Manager model packaging job. Edge Manager will use
  /// the model artifacts from the Amazon Simple Storage Service bucket that you
  /// specify. After the model has been packaged, Amazon SageMaker saves the
  /// resulting artifacts to an S3 bucket that you specify.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the SageMaker Neo compilation job that will be used to locate
  /// model artifacts for packaging.
  ///
  /// Parameter [edgePackagingJobName] :
  /// The name of the edge packaging job.
  ///
  /// Parameter [modelName] :
  /// The name of the model.
  ///
  /// Parameter [modelVersion] :
  /// The version of the model.
  ///
  /// Parameter [outputConfig] :
  /// Provides information about the output location for the packaged model.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon
  /// SageMaker to download and upload the model, and to contact SageMaker Neo.
  ///
  /// Parameter [resourceKey] :
  /// The CMK to use when encrypting the EBS volume the edge packaging job runs
  /// on.
  ///
  /// Parameter [tags] :
  /// Creates tags for the packaging job.
  Future<void> createEdgePackagingJob({
    required String compilationJobName,
    required String edgePackagingJobName,
    required String modelName,
    required String modelVersion,
    required EdgeOutputConfig outputConfig,
    required String roleArn,
    String? resourceKey,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(compilationJobName, 'compilationJobName');
    _s.validateStringLength(
      'compilationJobName',
      compilationJobName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(edgePackagingJobName, 'edgePackagingJobName');
    _s.validateStringLength(
      'edgePackagingJobName',
      edgePackagingJobName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(modelName, 'modelName');
    _s.validateStringLength(
      'modelName',
      modelName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(modelVersion, 'modelVersion');
    _s.validateStringLength(
      'modelVersion',
      modelVersion,
      1,
      30,
      isRequired: true,
    );
    ArgumentError.checkNotNull(outputConfig, 'outputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    _s.validateStringLength(
      'resourceKey',
      resourceKey,
      0,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEdgePackagingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
        'EdgePackagingJobName': edgePackagingJobName,
        'ModelName': modelName,
        'ModelVersion': modelVersion,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        if (resourceKey != null) 'ResourceKey': resourceKey,
        if (tags != null) 'Tags': tags,
      },
    );
  }

  /// Creates an endpoint using the endpoint configuration specified in the
  /// request. Amazon SageMaker uses the endpoint to provision resources and
  /// deploy models. You create the endpoint configuration with the
  /// <a>CreateEndpointConfig</a> API.
  ///
  /// Use this API to deploy models using Amazon SageMaker hosting services.
  ///
  /// For an example that calls this method when deploying a model to Amazon
  /// SageMaker hosting services, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy
  /// the Model to Amazon SageMaker Hosting Services (Amazon Web Services SDK
  /// for Python (Boto 3)).</a>
  /// <note>
  /// You must not delete an <code>EndpointConfig</code> that is in use by an
  /// endpoint that is live or while the <code>UpdateEndpoint</code> or
  /// <code>CreateEndpoint</code> operations are being performed on the
  /// endpoint. To update an endpoint, you must create a new
  /// <code>EndpointConfig</code>.
  /// </note>
  /// The endpoint name must be unique within an Amazon Web Services Region in
  /// your Amazon Web Services account.
  ///
  /// When it receives the request, Amazon SageMaker creates the endpoint,
  /// launches the resources (ML compute instances), and deploys the model(s) on
  /// them.
  /// <note>
  /// When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
  /// verify that your endpoint configuration exists. When you read data from a
  /// DynamoDB table supporting <a
  /// href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
  /// <code>Eventually Consistent Reads</code> </a>, the response might not
  /// reflect the results of a recently completed write operation. The response
  /// might include some stale data. If the dependent entities are not yet in
  /// DynamoDB, this causes a validation error. If you repeat your read request
  /// after a short time, the response should return the latest data. So retry
  /// logic is recommended to handle these possible issues. We also recommend
  /// that customers call <a>DescribeEndpointConfig</a> before calling
  /// <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB
  /// eventually consistent read.
  /// </note>
  /// When Amazon SageMaker receives the request, it sets the endpoint status to
  /// <code>Creating</code>. After it creates the endpoint, it sets the status
  /// to <code>InService</code>. Amazon SageMaker can then process incoming
  /// requests for inferences. To check the status of an endpoint, use the
  /// <a>DescribeEndpoint</a> API.
  ///
  /// If any of the models hosted at this endpoint get model data from an Amazon
  /// S3 location, Amazon SageMaker uses Amazon Web Services Security Token
  /// Service to download model artifacts from the S3 path you provided. Amazon
  /// Web Services STS is activated in your IAM user account by default. If you
  /// previously deactivated Amazon Web Services STS for a region, you need to
  /// reactivate Amazon Web Services STS for that region. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating
  /// and Deactivating Amazon Web Services STS in an Amazon Web Services
  /// Region</a> in the <i>Amazon Web Services Identity and Access Management
  /// User Guide</i>.
  /// <note>
  /// To add the IAM role policies for using this API operation, go to the <a
  /// href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose
  /// Roles in the left navigation pane. Search the IAM role that you want to
  /// grant access to use the <a>CreateEndpoint</a> and
  /// <a>CreateEndpointConfig</a> API operations, add the following policies to
  /// the role.
  ///
  /// <ul>
  /// <li>
  /// Option 1: For a full Amazon SageMaker access, search and attach the
  /// <code>AmazonSageMakerFullAccess</code> policy.
  /// </li>
  /// <li>
  /// Option 2: For granting a limited access to an IAM role, paste the
  /// following Action elements manually into the JSON file of the IAM role:
  ///
  /// <code>"Action": ["sagemaker:CreateEndpoint",
  /// "sagemaker:CreateEndpointConfig"]</code>
  ///
  /// <code>"Resource": [</code>
  ///
  /// <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code>
  ///
  /// <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code>
  ///
  /// <code>]</code>
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">Amazon
  /// SageMaker API Permissions: Actions, Permissions, and Resources
  /// Reference</a>.
  /// </li>
  /// </ul> </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointConfigName] :
  /// The name of an endpoint configuration. For more information, see
  /// <a>CreateEndpointConfig</a>.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint.The name must be unique within an Amazon Web
  /// Services Region in your Amazon Web Services account. The name is
  /// case-insensitive in <code>CreateEndpoint</code>, but the case is preserved
  /// and must be matched in .
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<CreateEndpointOutput> createEndpoint({
    required String endpointConfigName,
    required String endpointName,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(endpointConfigName, 'endpointConfigName');
    _s.validateStringLength(
      'endpointConfigName',
      endpointConfigName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(endpointName, 'endpointName');
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEndpoint'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
        'EndpointName': endpointName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateEndpointOutput.fromJson(jsonResponse.body);
  }

  /// Creates an endpoint configuration that Amazon SageMaker hosting services
  /// uses to deploy models. In the configuration, you identify one or more
  /// models, created using the <code>CreateModel</code> API, to deploy and the
  /// resources that you want Amazon SageMaker to provision. Then you call the
  /// <a>CreateEndpoint</a> API.
  /// <note>
  /// Use this API if you want to use Amazon SageMaker hosting services to
  /// deploy models into production.
  /// </note>
  /// In the request, you define a <code>ProductionVariant</code>, for each
  /// model that you want to deploy. Each <code>ProductionVariant</code>
  /// parameter also describes the resources that you want Amazon SageMaker to
  /// provision. This includes the number and type of ML compute instances to
  /// deploy.
  ///
  /// If you are hosting multiple models, you also assign a
  /// <code>VariantWeight</code> to specify how much traffic you want to
  /// allocate to each model. For example, suppose that you want to host two
  /// models, A and B, and you assign traffic weight 2 for model A and 1 for
  /// model B. Amazon SageMaker distributes two-thirds of the traffic to Model
  /// A, and one-third to model B.
  ///
  /// For an example that calls this method when deploying a model to Amazon
  /// SageMaker hosting services, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy
  /// the Model to Amazon SageMaker Hosting Services (Amazon Web Services SDK
  /// for Python (Boto 3)).</a>
  /// <note>
  /// When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
  /// verify that your endpoint configuration exists. When you read data from a
  /// DynamoDB table supporting <a
  /// href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
  /// <code>Eventually Consistent Reads</code> </a>, the response might not
  /// reflect the results of a recently completed write operation. The response
  /// might include some stale data. If the dependent entities are not yet in
  /// DynamoDB, this causes a validation error. If you repeat your read request
  /// after a short time, the response should return the latest data. So retry
  /// logic is recommended to handle these possible issues. We also recommend
  /// that customers call <a>DescribeEndpointConfig</a> before calling
  /// <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB
  /// eventually consistent read.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the endpoint configuration. You specify this name in a
  /// <a>CreateEndpoint</a> request.
  ///
  /// Parameter [productionVariants] :
  /// An list of <code>ProductionVariant</code> objects, one for each model that
  /// you want to host at this endpoint.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service key that Amazon SageMaker uses to encrypt data on the storage
  /// volume attached to the ML compute instance that hosts the endpoint.
  ///
  /// The KmsKeyId can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  /// The KMS key policy must grant permission to the IAM role that you specify
  /// in your <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests.
  /// For more information, refer to the Amazon Web Services Key Management
  /// Service section<a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">
  /// Using Key Policies in Amazon Web Services KMS </a>
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>KmsKeyId</code> when using an
  /// instance type with local storage. If any of the models that you specify in
  /// the <code>ProductionVariants</code> parameter use nitro-based instances
  /// with local storage, do not specify a value for the <code>KmsKeyId</code>
  /// parameter. If you specify a value for <code>KmsKeyId</code> when using any
  /// nitro-based instances with local storage, the call to
  /// <code>CreateEndpointConfig</code> fails.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<CreateEndpointConfigOutput> createEndpointConfig({
    required String endpointConfigName,
    required List<ProductionVariant> productionVariants,
    DataCaptureConfig? dataCaptureConfig,
    String? kmsKeyId,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(endpointConfigName, 'endpointConfigName');
    _s.validateStringLength(
      'endpointConfigName',
      endpointConfigName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(productionVariants, 'productionVariants');
    _s.validateStringLength(
      'kmsKeyId',
      kmsKeyId,
      0,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEndpointConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
        'ProductionVariants': productionVariants,
        if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
        if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateEndpointConfigOutput.fromJson(jsonResponse.body);
  }

  /// Creates an SageMaker <i>experiment</i>. An experiment is a collection of
  /// <i>trials</i> that are observed, compared and evaluated as a group. A
  /// trial is a set of steps, called <i>trial components</i>, that produce a
  /// machine learning model.
  ///
  /// The goal of an experiment is to determine the components that produce the
  /// best model. Multiple trials are performed, each one isolating and
  /// measuring the impact of a change to one or more inputs, while keeping the
  /// remaining inputs constant.
  ///
  /// When you use SageMaker Studio or the SageMaker Python SDK, all
  /// experiments, trials, and trial components are automatically tracked,
  /// logged, and indexed. When you use the Amazon Web Services SDK for Python
  /// (Boto), you must use the logging APIs provided by the SDK.
  ///
  /// You can add tags to experiments, trials, trial components and then use the
  /// <a>Search</a> API to search for the tags.
  ///
  /// To add a description to an experiment, specify the optional
  /// <code>Description</code> parameter. To add a description later, or to
  /// change the description, call the <a>UpdateExperiment</a> API.
  ///
  /// To get a list of all your experiments, call the <a>ListExperiments</a>
  /// API. To view an experiment's properties, call the
  /// <a>DescribeExperiment</a> API. To get a list of all the trials associated
  /// with an experiment, call the <a>ListTrials</a> API. To create a trial call
  /// the <a>CreateTrial</a> API.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment. The name must be unique in your Amazon Web
  /// Services account and is not case-sensitive.
  ///
  /// Parameter [description] :
  /// The description of the experiment.
  ///
  /// Parameter [displayName] :
  /// The name of the experiment as displayed. The name doesn't need to be
  /// unique. If you don't specify <code>DisplayName</code>, the value in
  /// <code>ExperimentName</code> is displayed.
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with the experiment. You can use <a>Search</a>
  /// API to search on the tags.
  Future<CreateExperimentResponse> createExperiment({
    required String experimentName,
    String? description,
    String? displayName,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(experimentName, 'experimentName');
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      0,
      3072,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a
  /// group of <code>Features</code> defined in the <code>FeatureStore</code> to
  /// describe a <code>Record</code>.
  ///
  /// The <code>FeatureGroup</code> defines the schema and features contained in
  /// the FeatureGroup. A <code>FeatureGroup</code> definition is composed of a
  /// list of <code>Features</code>, a <code>RecordIdentifierFeatureName</code>,
  /// an <code>EventTimeFeatureName</code> and configurations for its
  /// <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon
  /// Web Services service quotas</a> to see the <code>FeatureGroup</code>s
  /// quota for your Amazon Web Services account.
  /// <important>
  /// You must include at least one of <code>OnlineStoreConfig</code> and
  /// <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.
  /// </important>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [eventTimeFeatureName] :
  /// The name of the feature that stores the <code>EventTime</code> of a
  /// <code>Record</code> in a <code>FeatureGroup</code>.
  ///
  /// An <code>EventTime</code> is a point in time when a new event occurs that
  /// corresponds to the creation or update of a <code>Record</code> in a
  /// <code>FeatureGroup</code>. All <code>Records</code> in the
  /// <code>FeatureGroup</code> must have a corresponding
  /// <code>EventTime</code>.
  ///
  /// An <code>EventTime</code> can be a <code>String</code> or
  /// <code>Fractional</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>Fractional</code>: <code>EventTime</code> feature values must be a
  /// Unix timestamp in seconds.
  /// </li>
  /// <li>
  /// <code>String</code>: <code>EventTime</code> feature values must be an
  /// ISO-8601 string in the format. The following formats are supported
  /// <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and
  /// <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code> where <code>yyyy</code>,
  /// <code>MM</code>, and <code>dd</code> represent the year, month, and day
  /// respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>, and if
  /// applicable, <code>SSS</code> represent the hour, month, second and
  /// milliseconds respsectively. <code>'T'</code> and <code>Z</code> are
  /// constants.
  /// </li>
  /// </ul>
  ///
  /// Parameter [featureDefinitions] :
  /// A list of <code>Feature</code> names and types. <code>Name</code> and
  /// <code>Type</code> is compulsory per <code>Feature</code>.
  ///
  /// Valid feature <code>FeatureType</code>s are <code>Integral</code>,
  /// <code>Fractional</code> and <code>String</code>.
  ///
  /// <code>FeatureName</code>s cannot be any of the following:
  /// <code>is_deleted</code>, <code>write_time</code>,
  /// <code>api_invocation_time</code>
  ///
  /// You can create up to 2,500 <code>FeatureDefinition</code>s per
  /// <code>FeatureGroup</code>.
  ///
  /// Parameter [featureGroupName] :
  /// The name of the <code>FeatureGroup</code>. The name must be unique within
  /// an Amazon Web Services Region in an Amazon Web Services account. The name:
  ///
  /// <ul>
  /// <li>
  /// Must start and end with an alphanumeric character.
  /// </li>
  /// <li>
  /// Can only contain alphanumeric character and hyphens. Spaces are not
  /// allowed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [recordIdentifierFeatureName] :
  /// The name of the <code>Feature</code> whose value uniquely identifies a
  /// <code>Record</code> defined in the <code>FeatureStore</code>. Only the
  /// latest record per identifier value will be stored in the
  /// <code>OnlineStore</code>. <code>RecordIdentifierFeatureName</code> must be
  /// one of feature definitions' names.
  ///
  /// You use the <code>RecordIdentifierFeatureName</code> to access data in a
  /// <code>FeatureStore</code>.
  ///
  /// This name:
  ///
  /// <ul>
  /// <li>
  /// Must start and end with an alphanumeric character.
  /// </li>
  /// <li>
  /// Can only contains alphanumeric characters, hyphens, underscores. Spaces
  /// are not allowed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [description] :
  /// A free-form description of a <code>FeatureGroup</code>.
  ///
  /// Parameter [offlineStoreConfig] :
  /// Use this to configure an <code>OfflineFeatureStore</code>. This parameter
  /// allows you to specify:
  ///
  /// <ul>
  /// <li>
  /// The Amazon Simple Storage Service (Amazon S3) location of an
  /// <code>OfflineStore</code>.
  /// </li>
  /// <li>
  /// A configuration for an Amazon Web Services Glue or Amazon Web Services
  /// Hive data cataolgue.
  /// </li>
  /// <li>
  /// An KMS encryption key to encrypt the Amazon S3 location used for
  /// <code>OfflineStore</code>.
  /// </li>
  /// </ul>
  /// To learn more about this parameter, see <a>OfflineStoreConfig</a>.
  ///
  /// Parameter [onlineStoreConfig] :
  /// You can turn the <code>OnlineStore</code> on or off by specifying
  /// <code>True</code> for the <code>EnableOnlineStore</code> flag in
  /// <code>OnlineStoreConfig</code>; the default value is <code>False</code>.
  ///
  /// You can also include an Amazon Web Services KMS key ID
  /// (<code>KMSKeyId</code>) for at-rest encryption of the
  /// <code>OnlineStore</code>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM execution role used to persist
  /// data into the <code>OfflineStore</code> if an
  /// <code>OfflineStoreConfig</code> is provided.
  ///
  /// Parameter [tags] :
  /// Tags used to identify <code>Features</code> in each
  /// <code>FeatureGroup</code>.
  Future<CreateFeatureGroupResponse> createFeatureGroup({
    required String eventTimeFeatureName,
    required List<FeatureDefinition> featureDefinitions,
    required String featureGroupName,
    required String recordIdentifierFeatureName,
    String? description,
    OfflineStoreConfig? offlineStoreConfig,
    OnlineStoreConfig? onlineStoreConfig,
    String? roleArn,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(eventTimeFeatureName, 'eventTimeFeatureName');
    _s.validateStringLength(
      'eventTimeFeatureName',
      eventTimeFeatureName,
      1,
      64,
      isRequired: true,
    );
    ArgumentError.checkNotNull(featureDefinitions, 'featureDefinitions');
    ArgumentError.checkNotNull(featureGroupName, 'featureGroupName');
    _s.validateStringLength(
      'featureGroupName',
      featureGroupName,
      1,
      64,
      isRequired: true,
    );
    ArgumentError.checkNotNull(
        recordIdentifierFeatureName, 'recordIdentifierFeatureName');
    _s.validateStringLength(
      'recordIdentifierFeatureName',
      recordIdentifierFeatureName,
      1,
      64,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      0,
      128,
    );
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateFeatureGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EventTimeFeatureName': eventTimeFeatureName,
        'FeatureDefinitions': featureDefinitions,
        'FeatureGroupName': featureGroupName,
        'RecordIdentifierFeatureName': recordIdentifierFeatureName,
        if (description != null) 'Description': description,
        if (offlineStoreConfig != null)
          'OfflineStoreConfig': offlineStoreConfig,
        if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
        if (roleArn != null) 'RoleArn': roleArn,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateFeatureGroupResponse.fromJson(jsonResponse.body);
  }

  /// Creates a flow definition.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [flowDefinitionName] :
  /// The name of your flow definition.
  ///
  /// Parameter [humanLoopConfig] :
  /// An object containing information about the tasks the human reviewers will
  /// perform.
  ///
  /// Parameter [outputConfig] :
  /// An object containing information about where the human review results will
  /// be uploaded.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the role needed to call other services
  /// on your behalf. For example,
  /// <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.
  ///
  /// Parameter [humanLoopActivationConfig] :
  /// An object containing information about the events that trigger a human
  /// workflow.
  ///
  /// Parameter [humanLoopRequestSource] :
  /// Container for configuring the source of human task requests. Use to
  /// specify if Amazon Rekognition or Amazon Textract is used as an integration
  /// source.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that contain metadata to help you categorize
  /// and organize a flow definition. Each tag consists of a key and a value,
  /// both of which you define.
  Future<CreateFlowDefinitionResponse> createFlowDefinition({
    required String flowDefinitionName,
    required HumanLoopConfig humanLoopConfig,
    required FlowDefinitionOutputConfig outputConfig,
    required String roleArn,
    HumanLoopActivationConfig? humanLoopActivationConfig,
    HumanLoopRequestSource? humanLoopRequestSource,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(flowDefinitionName, 'flowDefinitionName');
    _s.validateStringLength(
      'flowDefinitionName',
      flowDefinitionName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(humanLoopConfig, 'humanLoopConfig');
    ArgumentError.checkNotNull(outputConfig, 'outputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateFlowDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FlowDefinitionName': flowDefinitionName,
        'HumanLoopConfig': humanLoopConfig,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        if (humanLoopActivationConfig != null)
          'HumanLoopActivationConfig': humanLoopActivationConfig,
        if (humanLoopRequestSource != null)
          'HumanLoopRequestSource': humanLoopRequestSource,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateFlowDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Defines the settings you will use for the human review workflow user
  /// interface. Reviewers will see a three-panel interface with an instruction
  /// area, the item to review, and an input area.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [humanTaskUiName] :
  /// The name of the user interface you are creating.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that contain metadata to help you categorize
  /// and organize a human review workflow user interface. Each tag consists of
  /// a key and a value, both of which you define.
  Future<CreateHumanTaskUiResponse> createHumanTaskUi({
    required String humanTaskUiName,
    required UiTemplate uiTemplate,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(humanTaskUiName, 'humanTaskUiName');
    _s.validateStringLength(
      'humanTaskUiName',
      humanTaskUiName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(uiTemplate, 'uiTemplate');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateHumanTaskUi'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskUiName': humanTaskUiName,
        'UiTemplate': uiTemplate,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateHumanTaskUiResponse.fromJson(jsonResponse.body);
  }

  /// Starts a hyperparameter tuning job. A hyperparameter tuning job finds the
  /// best version of a model by running many training jobs on your dataset
  /// using the algorithm you choose and values for hyperparameters within
  /// ranges that you specify. It then chooses the hyperparameter values that
  /// result in a model that performs the best, as measured by an objective
  /// metric that you choose.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [hyperParameterTuningJobConfig] :
  /// The <a>HyperParameterTuningJobConfig</a> object that describes the tuning
  /// job, including the search strategy, the objective metric used to evaluate
  /// training jobs, ranges of parameters to search, and resource limits for the
  /// tuning job. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
  /// Hyperparameter Tuning Works</a>.
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job. This name is the prefix for the names of all
  /// training jobs that this tuning job launches. The name must be unique
  /// within the same Amazon Web Services account and Amazon Web Services
  /// Region. The name must have 1 to 32 characters. Valid characters are a-z,
  /// A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Tags that you specify for the tuning job are also added to all training
  /// jobs that the tuning job launches.
  ///
  /// Parameter [trainingJobDefinition] :
  /// The <a>HyperParameterTrainingJobDefinition</a> object that describes the
  /// training jobs that this tuning job launches, including static
  /// hyperparameters, input data configuration, output data configuration,
  /// resource configuration, and stopping condition.
  ///
  /// Parameter [trainingJobDefinitions] :
  /// A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
  /// for this tuning job.
  ///
  /// Parameter [warmStartConfig] :
  /// Specifies the configuration for starting the hyperparameter tuning job
  /// using one or more previous tuning jobs as a starting point. The results of
  /// previous tuning jobs are used to inform which combinations of
  /// hyperparameters to search over in the new tuning job.
  ///
  /// All training jobs launched by the new hyperparameter tuning job are
  /// evaluated by using the objective metric. If you specify
  /// <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the
  /// <code>WarmStartType</code> value for the warm start configuration, the
  /// training job that performs the best in the new tuning job is compared to
  /// the best training jobs from the parent tuning jobs. From these, the
  /// training job that performs the best as measured by the objective metric is
  /// returned as the overall best training job.
  /// <note>
  /// All training jobs launched by parent hyperparameter tuning jobs and the
  /// new hyperparameter tuning jobs count against the limit of training jobs
  /// for the tuning job.
  /// </note>
  Future<CreateHyperParameterTuningJobResponse> createHyperParameterTuningJob({
    required HyperParameterTuningJobConfig hyperParameterTuningJobConfig,
    required String hyperParameterTuningJobName,
    List<Tag>? tags,
    HyperParameterTrainingJobDefinition? trainingJobDefinition,
    List<HyperParameterTrainingJobDefinition>? trainingJobDefinitions,
    HyperParameterTuningJobWarmStartConfig? warmStartConfig,
  }) async {
    ArgumentError.checkNotNull(
        hyperParameterTuningJobConfig, 'hyperParameterTuningJobConfig');
    ArgumentError.checkNotNull(
        hyperParameterTuningJobName, 'hyperParameterTuningJobName');
    _s.validateStringLength(
      'hyperParameterTuningJobName',
      hyperParameterTuningJobName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateHyperParameterTuningJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobConfig': hyperParameterTuningJobConfig,
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
        if (tags != null) 'Tags': tags,
        if (trainingJobDefinition != null)
          'TrainingJobDefinition': trainingJobDefinition,
        if (trainingJobDefinitions != null)
          'TrainingJobDefinitions': trainingJobDefinitions,
        if (warmStartConfig != null) 'WarmStartConfig': warmStartConfig,
      },
    );

    return CreateHyperParameterTuningJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a custom SageMaker image. A SageMaker image is a set of image
  /// versions. Each image version represents a container image stored in Amazon
  /// Container Registry (ECR). For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring
  /// your own SageMaker image</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [imageName] :
  /// The name of the image. Must be unique to your account.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon
  /// SageMaker to perform tasks on your behalf.
  ///
  /// Parameter [description] :
  /// The description of the image.
  ///
  /// Parameter [displayName] :
  /// The display name of the image. If not provided, <code>ImageName</code> is
  /// displayed.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the image.
  Future<CreateImageResponse> createImage({
    required String imageName,
    required String roleArn,
    String? description,
    String? displayName,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      1,
      512,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      128,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateImage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        'RoleArn': roleArn,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateImageResponse.fromJson(jsonResponse.body);
  }

  /// Creates a version of the SageMaker image specified by
  /// <code>ImageName</code>. The version represents the Amazon Container
  /// Registry (ECR) container image specified by <code>BaseImage</code>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [baseImage] :
  /// The registry path of the container image to use as the starting point for
  /// this version. The path is an Amazon Container Registry (ECR) URI in the
  /// following format:
  ///
  /// <code>&lt;acct-id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repo-name[:tag]
  /// or [@digest]&gt;</code>
  ///
  /// Parameter [imageName] :
  /// The <code>ImageName</code> of the <code>Image</code> to create a version
  /// of.
  ///
  /// Parameter [clientToken] :
  /// A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web
  /// Services SDKs, such as the SDK for Python (Boto3), add a unique value to
  /// the call.
  Future<CreateImageVersionResponse> createImageVersion({
    required String baseImage,
    required String imageName,
    String? clientToken,
  }) async {
    ArgumentError.checkNotNull(baseImage, 'baseImage');
    _s.validateStringLength(
      'baseImage',
      baseImage,
      1,
      255,
      isRequired: true,
    );
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientToken',
      clientToken,
      1,
      36,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateImageVersion'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'BaseImage': baseImage,
        'ImageName': imageName,
        'ClientToken': clientToken ?? _s.generateIdempotencyToken(),
      },
    );

    return CreateImageVersionResponse.fromJson(jsonResponse.body);
  }

  /// Creates a job that uses workers to label the data objects in your input
  /// dataset. You can use the labeled data to train machine learning models.
  ///
  /// You can select your workforce from one of three providers:
  ///
  /// <ul>
  /// <li>
  /// A private workforce that you create. It can include employees,
  /// contractors, and outside experts. Use a private workforce when want the
  /// data to stay within your organization or when a specific set of skills is
  /// required.
  /// </li>
  /// <li>
  /// One or more vendors that you select from the Amazon Web Services
  /// Marketplace. Vendors provide expertise in specific areas.
  /// </li>
  /// <li>
  /// The Amazon Mechanical Turk workforce. This is the largest workforce, but
  /// it should only be used for public data or data that has been stripped of
  /// any personally identifiable information.
  /// </li>
  /// </ul>
  /// You can also use <i>automated data labeling</i> to reduce the number of
  /// data objects that need to be labeled by a human. Automated data labeling
  /// uses <i>active learning</i> to determine if a data object can be labeled
  /// by machine or if it needs to be sent to a human worker. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using
  /// Automated Data Labeling</a>.
  ///
  /// The data objects to be labeled are contained in an Amazon S3 bucket. You
  /// create a <i>manifest file</i> that describes the location of each object.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using
  /// Input and Output Data</a>.
  ///
  /// The output can be used as the manifest file for another labeling job or as
  /// training data for your machine learning models.
  ///
  /// You can use this operation to create a static labeling job or a streaming
  /// labeling job. A static labeling job stops if all data objects in the input
  /// manifest file identified in <code>ManifestS3Uri</code> have been labeled.
  /// A streaming labeling job runs perpetually until it is manually stopped, or
  /// remains idle for 10 days. You can send new data objects to an active
  /// (<code>InProgress</code>) streaming labeling job in real time. To learn
  /// how to create a static labeling job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create
  /// a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To
  /// learn how to create a streaming labeling job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create
  /// a Streaming Labeling Job</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [humanTaskConfig] :
  /// Configures the labeling task and how it is presented to workers;
  /// including, but not limited to price, keywords, and batch size (task
  /// count).
  ///
  /// Parameter [inputConfig] :
  /// Input data for the labeling job, such as the Amazon S3 location of the
  /// data objects and the location of the manifest file that describes the data
  /// objects.
  ///
  /// You must specify at least one of the following: <code>S3DataSource</code>
  /// or <code>SnsDataSource</code>.
  ///
  /// <ul>
  /// <li>
  /// Use <code>SnsDataSource</code> to specify an SNS input topic for a
  /// streaming labeling job. If you do not specify and SNS input topic ARN,
  /// Ground Truth will create a one-time labeling job that stops after all data
  /// objects in the input manifest file have been labeled.
  /// </li>
  /// <li>
  /// Use <code>S3DataSource</code> to specify an input manifest file for both
  /// streaming and one-time labeling jobs. Adding an <code>S3DataSource</code>
  /// is optional if you use <code>SnsDataSource</code> to create a streaming
  /// labeling job.
  /// </li>
  /// </ul>
  /// If you use the Amazon Mechanical Turk workforce, your input data should
  /// not include confidential information, personal information or protected
  /// health information. Use <code>ContentClassifiers</code> to specify that
  /// your data is free of personally identifiable information and adult
  /// content.
  ///
  /// Parameter [labelAttributeName] :
  /// The attribute name to use for the label in the output manifest file. This
  /// is the key for the key/value pair formed with the label that a worker
  /// assigns to the object. The <code>LabelAttributeName</code> must meet the
  /// following requirements.
  ///
  /// <ul>
  /// <li>
  /// The name can't end with "-metadata".
  /// </li>
  /// <li>
  /// If you are using one of the following <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a>, the attribute name <i>must</i> end with "-ref". If the
  /// task type you are using is not listed below, the attribute name <i>must
  /// not</i> end with "-ref".
  ///
  /// <ul>
  /// <li>
  /// Image semantic segmentation (<code>SemanticSegmentation)</code>, and
  /// adjustment (<code>AdjustmentSemanticSegmentation</code>) and verification
  /// (<code>VerificationSemanticSegmentation</code>) labeling jobs for this
  /// task type.
  /// </li>
  /// <li>
  /// Video frame object detection (<code>VideoObjectDetection</code>), and
  /// adjustment and verification (<code>AdjustmentVideoObjectDetection</code>)
  /// labeling jobs for this task type.
  /// </li>
  /// <li>
  /// Video frame object tracking (<code>VideoObjectTracking</code>), and
  /// adjustment and verification (<code>AdjustmentVideoObjectTracking</code>)
  /// labeling jobs for this task type.
  /// </li>
  /// <li>
  /// 3D point cloud semantic segmentation
  /// (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and
  /// verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>)
  /// labeling jobs for this task type.
  /// </li>
  /// <li>
  /// 3D point cloud object tracking (<code>3DPointCloudObjectTracking</code>),
  /// and adjustment and verification
  /// (<code>Adjustment3DPointCloudObjectTracking</code>) labeling jobs for this
  /// task type.
  /// </li>
  /// </ul> </li>
  /// </ul> <p/> <important>
  /// If you are creating an adjustment or verification labeling job, you must
  /// use a <i>different</i> <code>LabelAttributeName</code> than the one used
  /// in the original labeling job. The original labeling job is the Ground
  /// Truth labeling job that produced the labels that you want verified or
  /// adjusted. To learn more about adjustment and verification labeling jobs,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify
  /// and Adjust Labels</a>.
  /// </important>
  ///
  /// Parameter [labelingJobName] :
  /// The name of the labeling job. This name is used to identify the job in a
  /// list of labeling jobs. Labeling job names must be unique within an Amazon
  /// Web Services account and region. <code>LabelingJobName</code> is not case
  /// sensitive. For example, Example-job and example-job are considered the
  /// same labeling job name by Ground Truth.
  ///
  /// Parameter [outputConfig] :
  /// The location of the output data and the Amazon Web Services Key Management
  /// Service key ID for the key used to encrypt the output data, if any.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform
  /// tasks on your behalf during data labeling. You must grant this role the
  /// necessary permissions so that Amazon SageMaker can successfully complete
  /// data labeling.
  ///
  /// Parameter [labelCategoryConfigS3Uri] :
  /// The S3 URI of the file, referred to as a <i>label category configuration
  /// file</i>, that defines the categories used to label the data objects.
  ///
  /// For 3D point cloud and video frame task types, you can add label category
  /// attributes and frame attributes to your label category configuration file.
  /// To learn how, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html">Create
  /// a Labeling Category Configuration File for 3D Point Cloud Labeling
  /// Jobs</a>.
  ///
  /// For all other <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html">custom
  /// tasks</a>, your label category configuration file must be a JSON file in
  /// the following format. Identify the labels you want to use by replacing
  /// <code>label_1</code>,
  /// <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label
  /// categories.
  ///
  /// <code>{ </code>
  ///
  /// <code>"document-version": "2018-11-28",</code>
  ///
  /// <code>"labels": [{"label": "label_1"},{"label": "label_2"},...{"label":
  /// "label_n"}]</code>
  ///
  /// <code>}</code>
  ///
  /// Note the following about the label category configuration file:
  ///
  /// <ul>
  /// <li>
  /// For image classification and text classification (single and multi-label)
  /// you must specify at least two label categories. For all other task types,
  /// the minimum number of label categories required is one.
  /// </li>
  /// <li>
  /// Each label category must be unique, you cannot specify duplicate label
  /// categories.
  /// </li>
  /// <li>
  /// If you create a 3D point cloud or video frame adjustment or verification
  /// labeling job, you must include <code>auditLabelAttributeName</code> in the
  /// label category configuration. Use this parameter to enter the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName">
  /// <code>LabelAttributeName</code> </a> of the labeling job you want to
  /// adjust or verify annotations of.
  /// </li>
  /// </ul>
  ///
  /// Parameter [labelingJobAlgorithmsConfig] :
  /// Configures the information required to perform automated data labeling.
  ///
  /// Parameter [stoppingConditions] :
  /// A set of conditions for stopping the labeling job. If any of the
  /// conditions are met, the job is automatically stopped. You can use these
  /// conditions to control the cost of data labeling.
  ///
  /// Parameter [tags] :
  /// An array of key/value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateLabelingJobResponse> createLabelingJob({
    required HumanTaskConfig humanTaskConfig,
    required LabelingJobInputConfig inputConfig,
    required String labelAttributeName,
    required String labelingJobName,
    required LabelingJobOutputConfig outputConfig,
    required String roleArn,
    String? labelCategoryConfigS3Uri,
    LabelingJobAlgorithmsConfig? labelingJobAlgorithmsConfig,
    LabelingJobStoppingConditions? stoppingConditions,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(humanTaskConfig, 'humanTaskConfig');
    ArgumentError.checkNotNull(inputConfig, 'inputConfig');
    ArgumentError.checkNotNull(labelAttributeName, 'labelAttributeName');
    _s.validateStringLength(
      'labelAttributeName',
      labelAttributeName,
      1,
      127,
      isRequired: true,
    );
    ArgumentError.checkNotNull(labelingJobName, 'labelingJobName');
    _s.validateStringLength(
      'labelingJobName',
      labelingJobName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(outputConfig, 'outputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    _s.validateStringLength(
      'labelCategoryConfigS3Uri',
      labelCategoryConfigS3Uri,
      0,
      1024,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateLabelingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskConfig': humanTaskConfig,
        'InputConfig': inputConfig,
        'LabelAttributeName': labelAttributeName,
        'LabelingJobName': labelingJobName,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        if (labelCategoryConfigS3Uri != null)
          'LabelCategoryConfigS3Uri': labelCategoryConfigS3Uri,
        if (labelingJobAlgorithmsConfig != null)
          'LabelingJobAlgorithmsConfig': labelingJobAlgorithmsConfig,
        if (stoppingConditions != null)
          'StoppingConditions': stoppingConditions,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateLabelingJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a model in Amazon SageMaker. In the request, you name the model
  /// and describe a primary container. For the primary container, you specify
  /// the Docker image that contains inference code, artifacts (from prior
  /// training), and a custom environment map that the inference code uses when
  /// you deploy the model for predictions.
  ///
  /// Use this API to create a model if you want to use Amazon SageMaker hosting
  /// services or run a batch transform job.
  ///
  /// To host your model, you create an endpoint configuration with the
  /// <code>CreateEndpointConfig</code> API, and then create an endpoint with
  /// the <code>CreateEndpoint</code> API. Amazon SageMaker then deploys all of
  /// the containers that you defined for the model in the hosting environment.
  ///
  /// For an example that calls this method when deploying a model to Amazon
  /// SageMaker hosting services, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy
  /// the Model to Amazon SageMaker Hosting Services (Amazon Web Services SDK
  /// for Python (Boto 3)).</a>
  ///
  /// To run a batch transform using your model, you start a job with the
  /// <code>CreateTransformJob</code> API. Amazon SageMaker uses your model and
  /// your dataset to get inferences which are then saved to a specified S3
  /// location.
  ///
  /// In the <code>CreateModel</code> request, you must define a container with
  /// the <code>PrimaryContainer</code> parameter.
  ///
  /// In the request, you also provide an IAM role that Amazon SageMaker can
  /// assume to access model artifacts and docker image for deployment on ML
  /// compute hosting instances or for batch transform jobs. In addition, you
  /// also use the IAM role to manage permissions the inference code needs. For
  /// example, if the inference code access any other Amazon Web Services
  /// resources, you grant necessary permissions via this role.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [executionRoleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can
  /// assume to access model artifacts and docker image for deployment on ML
  /// compute instances or for batch transform jobs. Deploying on ML compute
  /// instances is part of model hosting. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon
  /// SageMaker Roles</a>.
  /// <note>
  /// To be able to pass this role to Amazon SageMaker, the caller of this API
  /// must have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [modelName] :
  /// The name of the new model.
  ///
  /// Parameter [containers] :
  /// Specifies the containers in the inference pipeline.
  ///
  /// Parameter [enableNetworkIsolation] :
  /// Isolates the model container. No inbound or outbound network calls can be
  /// made to or from the model container.
  ///
  /// Parameter [inferenceExecutionConfig] :
  /// Specifies details of how containers in a multi-container endpoint are
  /// called.
  ///
  /// Parameter [primaryContainer] :
  /// The location of the primary docker image containing inference code,
  /// associated artifacts, and custom environment map that the inference code
  /// uses when the model is deployed for predictions.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [vpcConfig] :
  /// A <a>VpcConfig</a> object that specifies the VPC that you want your model
  /// to connect to. Control access to and from your model container by
  /// configuring the VPC. <code>VpcConfig</code> is used in hosting services
  /// and in batch transform. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect
  /// Endpoints by Using an Amazon Virtual Private Cloud</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html">Protect
  /// Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud</a>.
  Future<CreateModelOutput> createModel({
    required String executionRoleArn,
    required String modelName,
    List<ContainerDefinition>? containers,
    bool? enableNetworkIsolation,
    InferenceExecutionConfig? inferenceExecutionConfig,
    ContainerDefinition? primaryContainer,
    List<Tag>? tags,
    VpcConfig? vpcConfig,
  }) async {
    ArgumentError.checkNotNull(executionRoleArn, 'executionRoleArn');
    _s.validateStringLength(
      'executionRoleArn',
      executionRoleArn,
      20,
      2048,
      isRequired: true,
    );
    ArgumentError.checkNotNull(modelName, 'modelName');
    _s.validateStringLength(
      'modelName',
      modelName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModel'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExecutionRoleArn': executionRoleArn,
        'ModelName': modelName,
        if (containers != null) 'Containers': containers,
        if (enableNetworkIsolation != null)
          'EnableNetworkIsolation': enableNetworkIsolation,
        if (inferenceExecutionConfig != null)
          'InferenceExecutionConfig': inferenceExecutionConfig,
        if (primaryContainer != null) 'PrimaryContainer': primaryContainer,
        if (tags != null) 'Tags': tags,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateModelOutput.fromJson(jsonResponse.body);
  }

  /// Creates the definition for a model bias job.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the bias job definition. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  ///
  /// Parameter [modelBiasAppSpecification] :
  /// Configures the model bias job to run a specified Docker container image.
  ///
  /// Parameter [modelBiasJobInput] :
  /// Inputs for the model bias job.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [modelBiasBaselineConfig] :
  /// The baseline configuration for a model bias job.
  ///
  /// Parameter [networkConfig] :
  /// Networking options for a model bias job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateModelBiasJobDefinitionResponse> createModelBiasJobDefinition({
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required ModelBiasAppSpecification modelBiasAppSpecification,
    required ModelBiasJobInput modelBiasJobInput,
    required MonitoringOutputConfig modelBiasJobOutputConfig,
    required String roleArn,
    ModelBiasBaselineConfig? modelBiasBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(jobResources, 'jobResources');
    ArgumentError.checkNotNull(
        modelBiasAppSpecification, 'modelBiasAppSpecification');
    ArgumentError.checkNotNull(modelBiasJobInput, 'modelBiasJobInput');
    ArgumentError.checkNotNull(
        modelBiasJobOutputConfig, 'modelBiasJobOutputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelBiasJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'ModelBiasAppSpecification': modelBiasAppSpecification,
        'ModelBiasJobInput': modelBiasJobInput,
        'ModelBiasJobOutputConfig': modelBiasJobOutputConfig,
        'RoleArn': roleArn,
        if (modelBiasBaselineConfig != null)
          'ModelBiasBaselineConfig': modelBiasBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelBiasJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Creates the definition for a model explainability job.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model explainability job definition. The name must be
  /// unique within an Amazon Web Services Region in the Amazon Web Services
  /// account.
  ///
  /// Parameter [modelExplainabilityAppSpecification] :
  /// Configures the model explainability job to run a specified Docker
  /// container image.
  ///
  /// Parameter [modelExplainabilityJobInput] :
  /// Inputs for the model explainability job.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [modelExplainabilityBaselineConfig] :
  /// The baseline configuration for a model explainability job.
  ///
  /// Parameter [networkConfig] :
  /// Networking options for a model explainability job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateModelExplainabilityJobDefinitionResponse>
      createModelExplainabilityJobDefinition({
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required ModelExplainabilityAppSpecification
        modelExplainabilityAppSpecification,
    required ModelExplainabilityJobInput modelExplainabilityJobInput,
    required MonitoringOutputConfig modelExplainabilityJobOutputConfig,
    required String roleArn,
    ModelExplainabilityBaselineConfig? modelExplainabilityBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(jobResources, 'jobResources');
    ArgumentError.checkNotNull(modelExplainabilityAppSpecification,
        'modelExplainabilityAppSpecification');
    ArgumentError.checkNotNull(
        modelExplainabilityJobInput, 'modelExplainabilityJobInput');
    ArgumentError.checkNotNull(modelExplainabilityJobOutputConfig,
        'modelExplainabilityJobOutputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelExplainabilityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'ModelExplainabilityAppSpecification':
            modelExplainabilityAppSpecification,
        'ModelExplainabilityJobInput': modelExplainabilityJobInput,
        'ModelExplainabilityJobOutputConfig':
            modelExplainabilityJobOutputConfig,
        'RoleArn': roleArn,
        if (modelExplainabilityBaselineConfig != null)
          'ModelExplainabilityBaselineConfig':
              modelExplainabilityBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelExplainabilityJobDefinitionResponse.fromJson(
        jsonResponse.body);
  }

  /// Creates a model package that you can use to create Amazon SageMaker models
  /// or list on Amazon Web Services Marketplace, or a versioned model that is
  /// part of a model group. Buyers can subscribe to model packages listed on
  /// Amazon Web Services Marketplace to create models in Amazon SageMaker.
  ///
  /// To create a model package by specifying a Docker container that contains
  /// your inference code and the Amazon S3 location of your model artifacts,
  /// provide values for <code>InferenceSpecification</code>. To create a model
  /// from an algorithm resource that you created or subscribed to in Amazon Web
  /// Services Marketplace, provide a value for
  /// <code>SourceAlgorithmSpecification</code>.
  /// <note>
  /// There are two types of model packages:
  ///
  /// <ul>
  /// <li>
  /// Versioned - a model that is part of a model group in the model registry.
  /// </li>
  /// <li>
  /// Unversioned - a model package that is not part of a model group.
  /// </li>
  /// </ul> </note>
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [certifyForMarketplace] :
  /// Whether to certify the model package for listing on Amazon Web Services
  /// Marketplace.
  ///
  /// This parameter is optional for unversioned models, and does not apply to
  /// versioned models.
  ///
  /// Parameter [clientToken] :
  /// A unique token that guarantees that the call to this API is idempotent.
  ///
  /// Parameter [inferenceSpecification] :
  /// Specifies details about inference jobs that can be run with models based
  /// on this model package, including the following:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR paths of containers that contain the inference code and
  /// model artifacts.
  /// </li>
  /// <li>
  /// The instance types that the model package supports for transform jobs and
  /// real-time endpoints used for inference.
  /// </li>
  /// <li>
  /// The input and output content formats that the model package supports for
  /// inference.
  /// </li>
  /// </ul>
  ///
  /// Parameter [modelApprovalStatus] :
  /// Whether the model is approved for deployment.
  ///
  /// This parameter is optional for versioned models, and does not apply to
  /// unversioned models.
  ///
  /// For versioned models, the value of this parameter must be set to
  /// <code>Approved</code> to deploy the model.
  ///
  /// Parameter [modelMetrics] :
  /// A structure that contains model metrics reports.
  ///
  /// Parameter [modelPackageDescription] :
  /// A description of the model package.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group that this model version belongs to.
  ///
  /// This parameter is required for versioned models, and does not apply to
  /// unversioned models.
  ///
  /// Parameter [modelPackageName] :
  /// The name of the model package. The name must have 1 to 63 characters.
  /// Valid characters are a-z, A-Z, 0-9, and - (hyphen).
  ///
  /// This parameter is required for unversioned models. It is not applicable to
  /// versioned models.
  ///
  /// Parameter [sourceAlgorithmSpecification] :
  /// Details about the algorithm that was used to create the model package.
  ///
  /// Parameter [tags] :
  /// A list of key value pairs associated with the model. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  ///
  /// Parameter [validationSpecification] :
  /// Specifies configurations for one or more transform jobs that Amazon
  /// SageMaker runs to test the model package.
  Future<CreateModelPackageOutput> createModelPackage({
    bool? certifyForMarketplace,
    String? clientToken,
    InferenceSpecification? inferenceSpecification,
    MetadataProperties? metadataProperties,
    ModelApprovalStatus? modelApprovalStatus,
    ModelMetrics? modelMetrics,
    String? modelPackageDescription,
    String? modelPackageGroupName,
    String? modelPackageName,
    SourceAlgorithmSpecification? sourceAlgorithmSpecification,
    List<Tag>? tags,
    ModelPackageValidationSpecification? validationSpecification,
  }) async {
    _s.validateStringLength(
      'clientToken',
      clientToken,
      1,
      36,
    );
    _s.validateStringLength(
      'modelPackageDescription',
      modelPackageDescription,
      0,
      1024,
    );
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      63,
    );
    _s.validateStringLength(
      'modelPackageName',
      modelPackageName,
      1,
      63,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (certifyForMarketplace != null)
          'CertifyForMarketplace': certifyForMarketplace,
        'ClientToken': clientToken ?? _s.generateIdempotencyToken(),
        if (inferenceSpecification != null)
          'InferenceSpecification': inferenceSpecification,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (modelApprovalStatus != null)
          'ModelApprovalStatus': modelApprovalStatus.toValue(),
        if (modelMetrics != null) 'ModelMetrics': modelMetrics,
        if (modelPackageDescription != null)
          'ModelPackageDescription': modelPackageDescription,
        if (modelPackageGroupName != null)
          'ModelPackageGroupName': modelPackageGroupName,
        if (modelPackageName != null) 'ModelPackageName': modelPackageName,
        if (sourceAlgorithmSpecification != null)
          'SourceAlgorithmSpecification': sourceAlgorithmSpecification,
        if (tags != null) 'Tags': tags,
        if (validationSpecification != null)
          'ValidationSpecification': validationSpecification,
      },
    );

    return CreateModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Creates a model group. A model group contains a group of model versions.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group.
  ///
  /// Parameter [modelPackageGroupDescription] :
  /// A description for the model group.
  ///
  /// Parameter [tags] :
  /// A list of key value pairs associated with the model group. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  Future<CreateModelPackageGroupOutput> createModelPackageGroup({
    required String modelPackageGroupName,
    String? modelPackageGroupDescription,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(modelPackageGroupName, 'modelPackageGroupName');
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'modelPackageGroupDescription',
      modelPackageGroupDescription,
      0,
      1024,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelPackageGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
        if (modelPackageGroupDescription != null)
          'ModelPackageGroupDescription': modelPackageGroupDescription,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelPackageGroupOutput.fromJson(jsonResponse.body);
  }

  /// Creates a definition for a job that monitors model quality and drift. For
  /// information about model monitor, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
  /// SageMaker Model Monitor</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the monitoring job definition.
  ///
  /// Parameter [modelQualityAppSpecification] :
  /// The container that runs the monitoring job.
  ///
  /// Parameter [modelQualityJobInput] :
  /// A list of the inputs that are monitored. Currently endpoints are
  /// supported.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [modelQualityBaselineConfig] :
  /// Specifies the constraints and baselines for the monitoring job.
  ///
  /// Parameter [networkConfig] :
  /// Specifies the network configuration for the monitoring job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateModelQualityJobDefinitionResponse>
      createModelQualityJobDefinition({
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required ModelQualityAppSpecification modelQualityAppSpecification,
    required ModelQualityJobInput modelQualityJobInput,
    required MonitoringOutputConfig modelQualityJobOutputConfig,
    required String roleArn,
    ModelQualityBaselineConfig? modelQualityBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(jobResources, 'jobResources');
    ArgumentError.checkNotNull(
        modelQualityAppSpecification, 'modelQualityAppSpecification');
    ArgumentError.checkNotNull(modelQualityJobInput, 'modelQualityJobInput');
    ArgumentError.checkNotNull(
        modelQualityJobOutputConfig, 'modelQualityJobOutputConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'ModelQualityAppSpecification': modelQualityAppSpecification,
        'ModelQualityJobInput': modelQualityJobInput,
        'ModelQualityJobOutputConfig': modelQualityJobOutputConfig,
        'RoleArn': roleArn,
        if (modelQualityBaselineConfig != null)
          'ModelQualityBaselineConfig': modelQualityBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelQualityJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Creates a schedule that regularly starts Amazon SageMaker Processing Jobs
  /// to monitor the data captured for an Amazon SageMaker Endoint.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [monitoringScheduleConfig] :
  /// The configuration object that specifies the monitoring schedule and
  /// defines the monitoring job.
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the monitoring schedule. The name must be unique within an
  /// Amazon Web Services Region within an Amazon Web Services account.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="
  /// https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateMonitoringScheduleResponse> createMonitoringSchedule({
    required MonitoringScheduleConfig monitoringScheduleConfig,
    required String monitoringScheduleName,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(
        monitoringScheduleConfig, 'monitoringScheduleConfig');
    ArgumentError.checkNotNull(
        monitoringScheduleName, 'monitoringScheduleName');
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateMonitoringSchedule'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleConfig': monitoringScheduleConfig,
        'MonitoringScheduleName': monitoringScheduleName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateMonitoringScheduleResponse.fromJson(jsonResponse.body);
  }

  /// Creates an Amazon SageMaker notebook instance. A notebook instance is a
  /// machine learning (ML) compute instance running on a Jupyter notebook.
  ///
  /// In a <code>CreateNotebookInstance</code> request, specify the type of ML
  /// compute instance that you want to run. Amazon SageMaker launches the
  /// instance, installs common libraries that you can use to explore datasets
  /// for model training, and attaches an ML storage volume to the notebook
  /// instance.
  ///
  /// Amazon SageMaker also provides a set of example notebooks. Each notebook
  /// demonstrates how to use Amazon SageMaker with a specific algorithm or with
  /// a machine learning framework.
  ///
  /// After receiving the request, Amazon SageMaker does the following:
  /// <ol>
  /// <li>
  /// Creates a network interface in the Amazon SageMaker VPC.
  /// </li>
  /// <li>
  /// (Option) If you specified <code>SubnetId</code>, Amazon SageMaker creates
  /// a network interface in your own VPC, which is inferred from the subnet ID
  /// that you provide in the input. When creating this network interface,
  /// Amazon SageMaker attaches the security group that you specified in the
  /// request to the network interface that it creates in your VPC.
  /// </li>
  /// <li>
  /// Launches an EC2 instance of the type specified in the request in the
  /// Amazon SageMaker VPC. If you specified <code>SubnetId</code> of your VPC,
  /// Amazon SageMaker specifies both network interfaces when launching this
  /// instance. This enables inbound traffic from your own VPC to the notebook
  /// instance, assuming that the security groups allow it.
  /// </li> </ol>
  /// After creating the notebook instance, Amazon SageMaker returns its Amazon
  /// Resource Name (ARN). You can't change the name of a notebook instance
  /// after you create it.
  ///
  /// After Amazon SageMaker creates the notebook instance, you can connect to
  /// the Jupyter server and work in Jupyter notebooks. For example, you can
  /// write code to explore a dataset that you can use for model training, train
  /// a model, host models by creating Amazon SageMaker endpoints, and validate
  /// hosted models.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How
  /// It Works</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [instanceType] :
  /// The type of ML compute instance to launch for the notebook instance.
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the new notebook instance.
  ///
  /// Parameter [roleArn] :
  /// When you send any requests to Amazon Web Services resources from the
  /// notebook instance, Amazon SageMaker assumes this role to perform tasks on
  /// your behalf. You must grant this role necessary permissions so Amazon
  /// SageMaker can perform these tasks. The policy must allow the Amazon
  /// SageMaker service principal (sagemaker.amazonaws.com) permissions to
  /// assume this role. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon
  /// SageMaker Roles</a>.
  /// <note>
  /// To be able to pass this role to Amazon SageMaker, the caller of this API
  /// must have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [acceleratorTypes] :
  /// A list of Elastic Inference (EI) instance types to associate with this
  /// notebook instance. Currently, only one instance type can be associated
  /// with a notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using
  /// Elastic Inference in Amazon SageMaker</a>.
  ///
  /// Parameter [additionalCodeRepositories] :
  /// An array of up to three Git repositories to associate with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of
  /// your notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  ///
  /// Parameter [defaultCodeRepository] :
  /// A Git repository to associate with the notebook instance as its default
  /// code repository. This can be either the name of a Git repository stored as
  /// a resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open
  /// a notebook instance, it opens in the directory that contains this
  /// repository. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  ///
  /// Parameter [directInternetAccess] :
  /// Sets whether Amazon SageMaker provides internet access to the notebook
  /// instance. If you set this to <code>Disabled</code> this notebook instance
  /// is able to access resources only in your VPC, and is not be able to
  /// connect to Amazon SageMaker training and endpoint services unless you
  /// configure a NAT Gateway in your VPC.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook
  /// Instances Are Internet-Enabled by Default</a>. You can set the value of
  /// this parameter to <code>Disabled</code> only if you set a value for the
  /// <code>SubnetId</code> parameter.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service key that Amazon SageMaker uses to encrypt data on the storage
  /// volume attached to your notebook instance. The KMS key you provide must be
  /// enabled. For information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling
  /// and Disabling Keys</a> in the <i>Amazon Web Services Key Management
  /// Service Developer Guide</i>.
  ///
  /// Parameter [lifecycleConfigName] :
  /// The name of a lifecycle configuration to associate with the notebook
  /// instance. For information about lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// Parameter [rootAccess] :
  /// Whether root access is enabled or disabled for users of the notebook
  /// instance. The default value is <code>Enabled</code>.
  /// <note>
  /// Lifecycle configurations need root access to be able to set up a notebook
  /// instance. Because of this, lifecycle configurations associated with a
  /// notebook instance always run with root access even if you disable root
  /// access for users.
  /// </note>
  ///
  /// Parameter [securityGroupIds] :
  /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups
  /// must be for the same VPC as specified in the subnet.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet in a VPC to which you would like to have a
  /// connectivity from your ML compute instance.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [volumeSizeInGB] :
  /// The size, in GB, of the ML storage volume to attach to the notebook
  /// instance. The default value is 5 GB.
  Future<CreateNotebookInstanceOutput> createNotebookInstance({
    required InstanceType instanceType,
    required String notebookInstanceName,
    required String roleArn,
    List<NotebookInstanceAcceleratorType>? acceleratorTypes,
    List<String>? additionalCodeRepositories,
    String? defaultCodeRepository,
    DirectInternetAccess? directInternetAccess,
    String? kmsKeyId,
    String? lifecycleConfigName,
    RootAccess? rootAccess,
    List<String>? securityGroupIds,
    String? subnetId,
    List<Tag>? tags,
    int? volumeSizeInGB,
  }) async {
    ArgumentError.checkNotNull(instanceType, 'instanceType');
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    _s.validateStringLength(
      'defaultCodeRepository',
      defaultCodeRepository,
      1,
      1024,
    );
    _s.validateStringLength(
      'kmsKeyId',
      kmsKeyId,
      0,
      2048,
    );
    _s.validateStringLength(
      'lifecycleConfigName',
      lifecycleConfigName,
      0,
      63,
    );
    _s.validateStringLength(
      'subnetId',
      subnetId,
      0,
      32,
    );
    _s.validateNumRange(
      'volumeSizeInGB',
      volumeSizeInGB,
      5,
      16384,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateNotebookInstance'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InstanceType': instanceType.toValue(),
        'NotebookInstanceName': notebookInstanceName,
        'RoleArn': roleArn,
        if (acceleratorTypes != null)
          'AcceleratorTypes': acceleratorTypes.map((e) => e.toValue()).toList(),
        if (additionalCodeRepositories != null)
          'AdditionalCodeRepositories': additionalCodeRepositories,
        if (defaultCodeRepository != null)
          'DefaultCodeRepository': defaultCodeRepository,
        if (directInternetAccess != null)
          'DirectInternetAccess': directInternetAccess.toValue(),
        if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
        if (lifecycleConfigName != null)
          'LifecycleConfigName': lifecycleConfigName,
        if (rootAccess != null) 'RootAccess': rootAccess.toValue(),
        if (securityGroupIds != null) 'SecurityGroupIds': securityGroupIds,
        if (subnetId != null) 'SubnetId': subnetId,
        if (tags != null) 'Tags': tags,
        if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
      },
    );

    return CreateNotebookInstanceOutput.fromJson(jsonResponse.body);
  }

  /// Creates a lifecycle configuration that you can associate with a notebook
  /// instance. A <i>lifecycle configuration</i> is a collection of shell
  /// scripts that run when you create or start a notebook instance.
  ///
  /// Each lifecycle configuration script has a limit of 16384 characters.
  ///
  /// The value of the <code>$PATH</code> environment variable that is available
  /// to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.
  ///
  /// View CloudWatch Logs for notebook instance lifecycle configurations in log
  /// group <code>/aws/sagemaker/NotebookInstances</code> in log stream
  /// <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.
  ///
  /// Lifecycle configuration scripts cannot run for longer than 5 minutes. If a
  /// script runs for longer than 5 minutes, it fails and the notebook instance
  /// is not created or started.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration.
  ///
  /// Parameter [onCreate] :
  /// A shell script that runs only once, when you create a notebook instance.
  /// The shell script must be a base64-encoded string.
  ///
  /// Parameter [onStart] :
  /// A shell script that runs every time you start a notebook instance,
  /// including when you create the notebook instance. The shell script must be
  /// a base64-encoded string.
  Future<CreateNotebookInstanceLifecycleConfigOutput>
      createNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
    List<NotebookInstanceLifecycleHook>? onCreate,
    List<NotebookInstanceLifecycleHook>? onStart,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceLifecycleConfigName,
        'notebookInstanceLifecycleConfigName');
    _s.validateStringLength(
      'notebookInstanceLifecycleConfigName',
      notebookInstanceLifecycleConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateNotebookInstanceLifecycleConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
        if (onCreate != null) 'OnCreate': onCreate,
        if (onStart != null) 'OnStart': onStart,
      },
    );

    return CreateNotebookInstanceLifecycleConfigOutput.fromJson(
        jsonResponse.body);
  }

  /// Creates a pipeline using a JSON pipeline definition.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [pipelineDefinition] :
  /// The JSON pipeline definition of the pipeline.
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the role used by the pipeline to access
  /// and create resources.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [pipelineDescription] :
  /// A description of the pipeline.
  ///
  /// Parameter [pipelineDisplayName] :
  /// The display name of the pipeline.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the created pipeline.
  Future<CreatePipelineResponse> createPipeline({
    required String pipelineDefinition,
    required String pipelineName,
    required String roleArn,
    String? clientRequestToken,
    String? pipelineDescription,
    String? pipelineDisplayName,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(pipelineDefinition, 'pipelineDefinition');
    _s.validateStringLength(
      'pipelineDefinition',
      pipelineDefinition,
      1,
      1048576,
      isRequired: true,
    );
    ArgumentError.checkNotNull(pipelineName, 'pipelineName');
    _s.validateStringLength(
      'pipelineName',
      pipelineName,
      1,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientRequestToken',
      clientRequestToken,
      32,
      128,
    );
    _s.validateStringLength(
      'pipelineDescription',
      pipelineDescription,
      0,
      3072,
    );
    _s.validateStringLength(
      'pipelineDisplayName',
      pipelineDisplayName,
      1,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreatePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineDefinition': pipelineDefinition,
        'PipelineName': pipelineName,
        'RoleArn': roleArn,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (pipelineDescription != null)
          'PipelineDescription': pipelineDescription,
        if (pipelineDisplayName != null)
          'PipelineDisplayName': pipelineDisplayName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreatePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Creates a URL for a specified UserProfile in a Domain. When accessed in a
  /// web browser, the user will be automatically signed in to Amazon SageMaker
  /// Studio, and granted access to all of the Apps and files associated with
  /// the Domain's Amazon Elastic File System (EFS) volume. This operation can
  /// only be called when the authentication mode equals IAM.
  ///
  /// The IAM role or user used to call this API defines the permissions to
  /// access the app. Once the presigned URL is created, no additional
  /// permission is required to access this URL. IAM authorization policies for
  /// this API are also enforced for every HTTP request and WebSocket frame that
  /// attempts to connect to the app.
  ///
  /// You can restrict access to this API and to the URL that it returns to a
  /// list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you
  /// specify. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect
  /// to SageMaker Studio Through an Interface VPC Endpoint</a> .
  /// <note>
  /// The URL that you get from a call to <code>CreatePresignedDomainUrl</code>
  /// has a default timeout of 5 minutes. You can configure this value using
  /// <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout
  /// limit expires, you are directed to the Amazon Web Services console sign-in
  /// page.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The name of the UserProfile to sign-in as.
  ///
  /// Parameter [expiresInSeconds] :
  /// The number of seconds until the pre-signed URL expires. This value
  /// defaults to 300.
  ///
  /// Parameter [sessionExpirationDurationInSeconds] :
  /// The session expiration duration in seconds. This value defaults to 43200.
  Future<CreatePresignedDomainUrlResponse> createPresignedDomainUrl({
    required String domainId,
    required String userProfileName,
    int? expiresInSeconds,
    int? sessionExpirationDurationInSeconds,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    _s.validateNumRange(
      'expiresInSeconds',
      expiresInSeconds,
      5,
      300,
    );
    _s.validateNumRange(
      'sessionExpirationDurationInSeconds',
      sessionExpirationDurationInSeconds,
      1800,
      43200,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreatePresignedDomainUrl'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (expiresInSeconds != null) 'ExpiresInSeconds': expiresInSeconds,
        if (sessionExpirationDurationInSeconds != null)
          'SessionExpirationDurationInSeconds':
              sessionExpirationDurationInSeconds,
      },
    );

    return CreatePresignedDomainUrlResponse.fromJson(jsonResponse.body);
  }

  /// Returns a URL that you can use to connect to the Jupyter server from a
  /// notebook instance. In the Amazon SageMaker console, when you choose
  /// <code>Open</code> next to a notebook instance, Amazon SageMaker opens a
  /// new tab showing the Jupyter server home page from the notebook instance.
  /// The console uses this API to get the URL and show the page.
  ///
  /// The IAM role or user used to call this API defines the permissions to
  /// access the notebook instance. Once the presigned URL is created, no
  /// additional permission is required to access this URL. IAM authorization
  /// policies for this API are also enforced for every HTTP request and
  /// WebSocket frame that attempts to connect to the notebook instance.
  ///
  /// You can restrict access to this API and to the URL that it returns to a
  /// list of IP addresses that you specify. Use the <code>NotIpAddress</code>
  /// condition operator and the <code>aws:SourceIP</code> condition context key
  /// to specify the list of IP addresses that you want to have access to the
  /// notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit
  /// Access to a Notebook Instance by IP Address</a>.
  /// <note>
  /// The URL that you get from a call to
  /// <a>CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If
  /// you try to use the URL after the 5-minute limit expires, you are directed
  /// to the Amazon Web Services console sign-in page.
  /// </note>
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance.
  ///
  /// Parameter [sessionExpirationDurationInSeconds] :
  /// The duration of the session, in seconds. The default is 12 hours.
  Future<CreatePresignedNotebookInstanceUrlOutput>
      createPresignedNotebookInstanceUrl({
    required String notebookInstanceName,
    int? sessionExpirationDurationInSeconds,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    _s.validateNumRange(
      'sessionExpirationDurationInSeconds',
      sessionExpirationDurationInSeconds,
      1800,
      43200,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreatePresignedNotebookInstanceUrl'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
        if (sessionExpirationDurationInSeconds != null)
          'SessionExpirationDurationInSeconds':
              sessionExpirationDurationInSeconds,
      },
    );

    return CreatePresignedNotebookInstanceUrlOutput.fromJson(jsonResponse.body);
  }

  /// Creates a processing job.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appSpecification] :
  /// Configures the processing job to run a specified Docker container image.
  ///
  /// Parameter [processingJobName] :
  /// The name of the processing job. The name must be unique within an Amazon
  /// Web Services Region in the Amazon Web Services account.
  ///
  /// Parameter [processingResources] :
  /// Identifies the resources, ML compute instances, and ML storage volumes to
  /// deploy for a processing job. In distributed training, you specify more
  /// than one instance.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [environment] :
  /// The environment variables to set in the Docker container. Up to 100 key
  /// and values entries in the map are supported.
  ///
  /// Parameter [networkConfig] :
  /// Networking options for a processing job, such as whether to allow inbound
  /// and outbound network calls to and from processing containers, and the VPC
  /// subnets and security groups to use for VPC-enabled processing jobs.
  ///
  /// Parameter [processingInputs] :
  /// An array of inputs configuring the data to download into the processing
  /// container.
  ///
  /// Parameter [processingOutputConfig] :
  /// Output configuration for the processing job.
  ///
  /// Parameter [stoppingCondition] :
  /// The time limit for how long the processing job is allowed to run.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateProcessingJobResponse> createProcessingJob({
    required AppSpecification appSpecification,
    required String processingJobName,
    required ProcessingResources processingResources,
    required String roleArn,
    Map<String, String>? environment,
    ExperimentConfig? experimentConfig,
    NetworkConfig? networkConfig,
    List<ProcessingInput>? processingInputs,
    ProcessingOutputConfig? processingOutputConfig,
    ProcessingStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(appSpecification, 'appSpecification');
    ArgumentError.checkNotNull(processingJobName, 'processingJobName');
    _s.validateStringLength(
      'processingJobName',
      processingJobName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(processingResources, 'processingResources');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateProcessingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppSpecification': appSpecification,
        'ProcessingJobName': processingJobName,
        'ProcessingResources': processingResources,
        'RoleArn': roleArn,
        if (environment != null) 'Environment': environment,
        if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (processingInputs != null) 'ProcessingInputs': processingInputs,
        if (processingOutputConfig != null)
          'ProcessingOutputConfig': processingOutputConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateProcessingJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a machine learning (ML) project that can contain one or more
  /// templates that set up an ML pipeline from training to deploying an
  /// approved model.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [projectName] :
  /// The name of the project.
  ///
  /// Parameter [serviceCatalogProvisioningDetails] :
  /// The product ID and provisioning artifact ID to provision a service
  /// catalog. For information, see <a
  /// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
  /// is Amazon Web Services Service Catalog</a>.
  ///
  /// Parameter [projectDescription] :
  /// A description for the project.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that you want to use to organize and track
  /// your Amazon Web Services resource costs. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  Future<CreateProjectOutput> createProject({
    required String projectName,
    required ServiceCatalogProvisioningDetails
        serviceCatalogProvisioningDetails,
    String? projectDescription,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(projectName, 'projectName');
    _s.validateStringLength(
      'projectName',
      projectName,
      1,
      32,
      isRequired: true,
    );
    ArgumentError.checkNotNull(
        serviceCatalogProvisioningDetails, 'serviceCatalogProvisioningDetails');
    _s.validateStringLength(
      'projectDescription',
      projectDescription,
      0,
      1024,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateProject'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
        'ServiceCatalogProvisioningDetails': serviceCatalogProvisioningDetails,
        if (projectDescription != null)
          'ProjectDescription': projectDescription,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateProjectOutput.fromJson(jsonResponse.body);
  }

  /// Starts a model training job. After training completes, Amazon SageMaker
  /// saves the resulting model artifacts to an Amazon S3 location that you
  /// specify.
  ///
  /// If you choose to host your model using Amazon SageMaker hosting services,
  /// you can use the resulting model artifacts as part of the model. You can
  /// also use the artifacts in a machine learning service other than Amazon
  /// SageMaker, provided that you know how to use them for inference.
  ///
  /// In the request body, you provide the following:
  ///
  /// <ul>
  /// <li>
  /// <code>AlgorithmSpecification</code> - Identifies the training algorithm to
  /// use.
  /// </li>
  /// <li>
  /// <code>HyperParameters</code> - Specify these algorithm-specific parameters
  /// to enable the estimation of model parameters during training.
  /// Hyperparameters can be tuned to optimize this learning process. For a list
  /// of hyperparameters for each training algorithm provided by Amazon
  /// SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  /// </li>
  /// <li>
  /// <code>InputDataConfig</code> - Describes the training dataset and the
  /// Amazon S3, EFS, or FSx location where it is stored.
  /// </li>
  /// <li>
  /// <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you
  /// want Amazon SageMaker to save the results of model training.
  /// </li>
  /// <li>
  /// <code>ResourceConfig</code> - Identifies the resources, ML compute
  /// instances, and ML storage volumes to deploy for model training. In
  /// distributed training, you specify more than one instance.
  /// </li>
  /// <li>
  /// <code>EnableManagedSpotTraining</code> - Optimize the cost of training
  /// machine learning models by up to 80% by using Amazon EC2 Spot instances.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed
  /// Spot Training</a>.
  /// </li>
  /// <li>
  /// <code>RoleArn</code> - The Amazon Resource Name (ARN) that Amazon
  /// SageMaker assumes to perform tasks on your behalf during model training.
  /// You must grant this role the necessary permissions so that Amazon
  /// SageMaker can successfully complete model training.
  /// </li>
  /// <li>
  /// <code>StoppingCondition</code> - To help cap training costs, use
  /// <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use
  /// <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot
  /// training job has to complete.
  /// </li>
  /// <li>
  /// <code>Environment</code> - The environment variables to set in the Docker
  /// container.
  /// </li>
  /// <li>
  /// <code>RetryStrategy</code> - The number of times to retry the job when the
  /// job fails due to an <code>InternalServerError</code>.
  /// </li>
  /// </ul>
  /// For more information about Amazon SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How
  /// It Works</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [algorithmSpecification] :
  /// The registry path of the Docker image that contains the training algorithm
  /// and algorithm-specific metadata, including the input mode. For more
  /// information about algorithms provided by Amazon SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  /// For information about providing your own algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  ///
  /// Parameter [outputDataConfig] :
  /// Specifies the path to the S3 location where you want to store model
  /// artifacts. Amazon SageMaker creates subfolders for the artifacts.
  ///
  /// Parameter [resourceConfig] :
  /// The resources, including the ML compute instances and ML storage volumes,
  /// to use for model training.
  ///
  /// ML storage volumes store model artifacts and incremental states. Training
  /// algorithms might also use ML storage volumes for scratch space. If you
  /// want Amazon SageMaker to use the ML storage volume to store the training
  /// data, choose <code>File</code> as the <code>TrainingInputMode</code> in
  /// the algorithm specification. For distributed training algorithms, specify
  /// an instance count greater than 1.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// During model training, Amazon SageMaker needs your permission to read
  /// input data from an S3 bucket, download a Docker image that contains
  /// training code, write model artifacts to an S3 bucket, write logs to Amazon
  /// CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant
  /// permissions for all of these tasks to an IAM role. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon
  /// SageMaker Roles</a>.
  /// <note>
  /// To be able to pass this role to Amazon SageMaker, the caller of this API
  /// must have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [stoppingCondition] :
  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the
  /// job reaches the time limit, Amazon SageMaker ends the training job. Use
  /// this API to cap model training costs.
  ///
  /// To stop a job, Amazon SageMaker sends the algorithm the
  /// <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
  /// Algorithms can use this 120-second window to save the model artifacts, so
  /// the results of training are not lost.
  ///
  /// Parameter [trainingJobName] :
  /// The name of the training job. The name must be unique within an Amazon Web
  /// Services Region in an Amazon Web Services account.
  ///
  /// Parameter [checkpointConfig] :
  /// Contains information about the output location for managed spot training
  /// checkpoint data.
  ///
  /// Parameter [debugRuleConfigurations] :
  /// Configuration information for Debugger rules for debugging output tensors.
  ///
  /// Parameter [enableInterContainerTrafficEncryption] :
  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security
  /// for distributed training, but training might take longer. How long it
  /// takes depends on the amount of communication between compute instances,
  /// especially if you use a deep learning algorithm in distributed training.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html">Protect
  /// Communications Between ML Compute Instances in a Distributed Training
  /// Job</a>.
  ///
  /// Parameter [enableManagedSpotTraining] :
  /// To train models using managed spot training, choose <code>True</code>.
  /// Managed spot training provides a fully managed and scalable infrastructure
  /// for training machine learning models. this option is useful when training
  /// jobs can be interrupted and when there is flexibility when the training
  /// job is run.
  ///
  /// The complete and intermediate results of jobs are stored in an Amazon S3
  /// bucket, and can be used as a starting point to train models incrementally.
  /// Amazon SageMaker provides metrics and logs in CloudWatch. They can be used
  /// to see when managed spot training jobs are running, interrupted, resumed,
  /// or completed.
  ///
  /// Parameter [enableNetworkIsolation] :
  /// Isolates the training container. No inbound or outbound network calls can
  /// be made, except for calls between peers within a training cluster for
  /// distributed training. If you enable network isolation for training jobs
  /// that are configured to use a VPC, Amazon SageMaker downloads and uploads
  /// customer data and model artifacts through the specified VPC, but the
  /// training container does not have network access.
  ///
  /// Parameter [environment] :
  /// The environment variables to set in the Docker container.
  ///
  /// Parameter [hyperParameters] :
  /// Algorithm-specific parameters that influence the quality of the model. You
  /// set hyperparameters before you start the learning process. For a list of
  /// hyperparameters for each training algorithm provided by Amazon SageMaker,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  ///
  /// You can specify a maximum of 100 hyperparameters. Each hyperparameter is a
  /// key-value pair. Each key and value is limited to 256 characters, as
  /// specified by the <code>Length Constraint</code>.
  ///
  /// Parameter [inputDataConfig] :
  /// An array of <code>Channel</code> objects. Each channel is a named input
  /// source. <code>InputDataConfig</code> describes the input data and its
  /// location.
  ///
  /// Algorithms can accept input data from one or more channels. For example,
  /// an algorithm might have two channels of input data,
  /// <code>training_data</code> and <code>validation_data</code>. The
  /// configuration for each channel provides the S3, EFS, or FSx location where
  /// the input data is stored. It also provides information about the stored
  /// data: the MIME type, compression method, and whether the data is wrapped
  /// in RecordIO format.
  ///
  /// Depending on the input mode that the algorithm supports, Amazon SageMaker
  /// either copies input data files from an S3 bucket to a local directory in
  /// the Docker container, or makes it available as input streams. For example,
  /// if you specify an EFS location, input data files will be made available as
  /// input streams. They do not need to be downloaded.
  ///
  /// Parameter [profilerRuleConfigurations] :
  /// Configuration information for Debugger rules for profiling system and
  /// framework metrics.
  ///
  /// Parameter [retryStrategy] :
  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [vpcConfig] :
  /// A <a>VpcConfig</a> object that specifies the VPC that you want your
  /// training job to connect to. Control access to and from your training
  /// container by configuring the VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  Future<CreateTrainingJobResponse> createTrainingJob({
    required AlgorithmSpecification algorithmSpecification,
    required OutputDataConfig outputDataConfig,
    required ResourceConfig resourceConfig,
    required String roleArn,
    required StoppingCondition stoppingCondition,
    required String trainingJobName,
    CheckpointConfig? checkpointConfig,
    DebugHookConfig? debugHookConfig,
    List<DebugRuleConfiguration>? debugRuleConfigurations,
    bool? enableInterContainerTrafficEncryption,
    bool? enableManagedSpotTraining,
    bool? enableNetworkIsolation,
    Map<String, String>? environment,
    ExperimentConfig? experimentConfig,
    Map<String, String>? hyperParameters,
    List<Channel>? inputDataConfig,
    ProfilerConfig? profilerConfig,
    List<ProfilerRuleConfiguration>? profilerRuleConfigurations,
    RetryStrategy? retryStrategy,
    List<Tag>? tags,
    TensorBoardOutputConfig? tensorBoardOutputConfig,
    VpcConfig? vpcConfig,
  }) async {
    ArgumentError.checkNotNull(
        algorithmSpecification, 'algorithmSpecification');
    ArgumentError.checkNotNull(outputDataConfig, 'outputDataConfig');
    ArgumentError.checkNotNull(resourceConfig, 'resourceConfig');
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    ArgumentError.checkNotNull(stoppingCondition, 'stoppingCondition');
    ArgumentError.checkNotNull(trainingJobName, 'trainingJobName');
    _s.validateStringLength(
      'trainingJobName',
      trainingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTrainingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmSpecification': algorithmSpecification,
        'OutputDataConfig': outputDataConfig,
        'ResourceConfig': resourceConfig,
        'RoleArn': roleArn,
        'StoppingCondition': stoppingCondition,
        'TrainingJobName': trainingJobName,
        if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
        if (debugHookConfig != null) 'DebugHookConfig': debugHookConfig,
        if (debugRuleConfigurations != null)
          'DebugRuleConfigurations': debugRuleConfigurations,
        if (enableInterContainerTrafficEncryption != null)
          'EnableInterContainerTrafficEncryption':
              enableInterContainerTrafficEncryption,
        if (enableManagedSpotTraining != null)
          'EnableManagedSpotTraining': enableManagedSpotTraining,
        if (enableNetworkIsolation != null)
          'EnableNetworkIsolation': enableNetworkIsolation,
        if (environment != null) 'Environment': environment,
        if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
        if (hyperParameters != null) 'HyperParameters': hyperParameters,
        if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
        if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
        if (profilerRuleConfigurations != null)
          'ProfilerRuleConfigurations': profilerRuleConfigurations,
        if (retryStrategy != null) 'RetryStrategy': retryStrategy,
        if (tags != null) 'Tags': tags,
        if (tensorBoardOutputConfig != null)
          'TensorBoardOutputConfig': tensorBoardOutputConfig,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateTrainingJobResponse.fromJson(jsonResponse.body);
  }

  /// Starts a transform job. A transform job uses a trained model to get
  /// inferences on a dataset and saves these results to an Amazon S3 location
  /// that you specify.
  ///
  /// To perform batch transformations, you create a transform job and use the
  /// data that you have readily available.
  ///
  /// In the request body, you provide the following:
  ///
  /// <ul>
  /// <li>
  /// <code>TransformJobName</code> - Identifies the transform job. The name
  /// must be unique within an Amazon Web Services Region in an Amazon Web
  /// Services account.
  /// </li>
  /// <li>
  /// <code>ModelName</code> - Identifies the model to use.
  /// <code>ModelName</code> must be the name of an existing Amazon SageMaker
  /// model in the same Amazon Web Services Region and Amazon Web Services
  /// account. For information on creating a model, see <a>CreateModel</a>.
  /// </li>
  /// <li>
  /// <code>TransformInput</code> - Describes the dataset to be transformed and
  /// the Amazon S3 location where it is stored.
  /// </li>
  /// <li>
  /// <code>TransformOutput</code> - Identifies the Amazon S3 location where you
  /// want Amazon SageMaker to save the results from the transform job.
  /// </li>
  /// <li>
  /// <code>TransformResources</code> - Identifies the ML compute instances for
  /// the transform job.
  /// </li>
  /// </ul>
  /// For more information about how batch transformation works, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch
  /// Transform</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [modelName] :
  /// The name of the model that you want to use for the transform job.
  /// <code>ModelName</code> must be the name of an existing Amazon SageMaker
  /// model within an Amazon Web Services Region in an Amazon Web Services
  /// account.
  ///
  /// Parameter [transformInput] :
  /// Describes the input source and the way the transform job consumes it.
  ///
  /// Parameter [transformJobName] :
  /// The name of the transform job. The name must be unique within an Amazon
  /// Web Services Region in an Amazon Web Services account.
  ///
  /// Parameter [transformOutput] :
  /// Describes the results of the transform job.
  ///
  /// Parameter [transformResources] :
  /// Describes the resources, including ML instance types and ML instance
  /// count, to use for the transform job.
  ///
  /// Parameter [batchStrategy] :
  /// Specifies the number of records to include in a mini-batch for an HTTP
  /// inference request. A <i>record</i> <i/> is a single unit of input data
  /// that inference can be made on. For example, a single line in a CSV file is
  /// a record.
  ///
  /// To enable the batch strategy, you must set the <code>SplitType</code>
  /// property to <code>Line</code>, <code>RecordIO</code>, or
  /// <code>TFRecord</code>.
  ///
  /// To use only one record when making an HTTP invocation request to a
  /// container, set <code>BatchStrategy</code> to <code>SingleRecord</code> and
  /// <code>SplitType</code> to <code>Line</code>.
  ///
  /// To fit as many records in a mini-batch as can fit within the
  /// <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to
  /// <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.
  ///
  /// Parameter [dataProcessing] :
  /// The data structure used to specify the data to be used for inference in a
  /// batch transform job and to associate the data that is relevant to the
  /// prediction results in the output. The input filter provided allows you to
  /// exclude input data that is not needed for inference in a batch transform
  /// job. The output filter provided allows you to include input data relevant
  /// to interpreting the predictions in the output from the job. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate
  /// Prediction Results with their Corresponding Input Records</a>.
  ///
  /// Parameter [environment] :
  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  ///
  /// Parameter [maxConcurrentTransforms] :
  /// The maximum number of parallel requests that can be sent to each instance
  /// in a transform job. If <code>MaxConcurrentTransforms</code> is set to
  /// <code>0</code> or left unset, Amazon SageMaker checks the optional
  /// execution-parameters to determine the settings for your chosen algorithm.
  /// If the execution-parameters endpoint is not enabled, the default value is
  /// <code>1</code>. For more information on execution-parameters, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How
  /// Containers Serve Requests</a>. For built-in algorithms, you don't need to
  /// set a value for <code>MaxConcurrentTransforms</code>.
  ///
  /// Parameter [maxPayloadInMB] :
  /// The maximum allowed size of the payload, in MB. A <i>payload</i> is the
  /// data portion of a record (without metadata). The value in
  /// <code>MaxPayloadInMB</code> must be greater than, or equal to, the size of
  /// a single record. To estimate the size of a record in MB, divide the size
  /// of your dataset by the number of records. To ensure that the records fit
  /// within the maximum payload size, we recommend using a slightly larger
  /// value. The default value is <code>6</code> MB.
  ///
  /// For cases where the payload might be arbitrarily large and is transmitted
  /// using HTTP chunked encoding, set the value to <code>0</code>. This feature
  /// works only in supported algorithms. Currently, Amazon SageMaker built-in
  /// algorithms do not support HTTP chunked encoding.
  ///
  /// Parameter [modelClientConfig] :
  /// Configures the timeout and maximum number of retries for processing a
  /// transform job invocation.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateTransformJobResponse> createTransformJob({
    required String modelName,
    required TransformInput transformInput,
    required String transformJobName,
    required TransformOutput transformOutput,
    required TransformResources transformResources,
    BatchStrategy? batchStrategy,
    DataProcessing? dataProcessing,
    Map<String, String>? environment,
    ExperimentConfig? experimentConfig,
    int? maxConcurrentTransforms,
    int? maxPayloadInMB,
    ModelClientConfig? modelClientConfig,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(modelName, 'modelName');
    _s.validateStringLength(
      'modelName',
      modelName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(transformInput, 'transformInput');
    ArgumentError.checkNotNull(transformJobName, 'transformJobName');
    _s.validateStringLength(
      'transformJobName',
      transformJobName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(transformOutput, 'transformOutput');
    ArgumentError.checkNotNull(transformResources, 'transformResources');
    _s.validateNumRange(
      'maxConcurrentTransforms',
      maxConcurrentTransforms,
      0,
      1152921504606846976,
    );
    _s.validateNumRange(
      'maxPayloadInMB',
      maxPayloadInMB,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTransformJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
        'TransformInput': transformInput,
        'TransformJobName': transformJobName,
        'TransformOutput': transformOutput,
        'TransformResources': transformResources,
        if (batchStrategy != null) 'BatchStrategy': batchStrategy.toValue(),
        if (dataProcessing != null) 'DataProcessing': dataProcessing,
        if (environment != null) 'Environment': environment,
        if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
        if (maxConcurrentTransforms != null)
          'MaxConcurrentTransforms': maxConcurrentTransforms,
        if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
        if (modelClientConfig != null) 'ModelClientConfig': modelClientConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateTransformJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates an SageMaker <i>trial</i>. A trial is a set of steps called
  /// <i>trial components</i> that produce a machine learning model. A trial is
  /// part of a single SageMaker <i>experiment</i>.
  ///
  /// When you use SageMaker Studio or the SageMaker Python SDK, all
  /// experiments, trials, and trial components are automatically tracked,
  /// logged, and indexed. When you use the Amazon Web Services SDK for Python
  /// (Boto), you must use the logging APIs provided by the SDK.
  ///
  /// You can add tags to a trial and then use the <a>Search</a> API to search
  /// for the tags.
  ///
  /// To get a list of all your trials, call the <a>ListTrials</a> API. To view
  /// a trial's properties, call the <a>DescribeTrial</a> API. To create a trial
  /// component, call the <a>CreateTrialComponent</a> API.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to associate the trial with.
  ///
  /// Parameter [trialName] :
  /// The name of the trial. The name must be unique in your Amazon Web Services
  /// account and is not case-sensitive.
  ///
  /// Parameter [displayName] :
  /// The name of the trial as displayed. The name doesn't need to be unique. If
  /// <code>DisplayName</code> isn't specified, <code>TrialName</code> is
  /// displayed.
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with the trial. You can use <a>Search</a> API
  /// to search on the tags.
  Future<CreateTrialResponse> createTrial({
    required String experimentName,
    required String trialName,
    String? displayName,
    MetadataProperties? metadataProperties,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(experimentName, 'experimentName');
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
      isRequired: true,
    );
    ArgumentError.checkNotNull(trialName, 'trialName');
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
        'TrialName': trialName,
        if (displayName != null) 'DisplayName': displayName,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateTrialResponse.fromJson(jsonResponse.body);
  }

  /// Creates a <i>trial component</i>, which is a stage of a machine learning
  /// <i>trial</i>. A trial is composed of one or more trial components. A trial
  /// component can be used in multiple trials.
  ///
  /// Trial components include pre-processing jobs, training jobs, and batch
  /// transform jobs.
  ///
  /// When you use SageMaker Studio or the SageMaker Python SDK, all
  /// experiments, trials, and trial components are automatically tracked,
  /// logged, and indexed. When you use the Amazon Web Services SDK for Python
  /// (Boto), you must use the logging APIs provided by the SDK.
  ///
  /// You can add tags to a trial component and then use the <a>Search</a> API
  /// to search for the tags.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component. The name must be unique in your Amazon Web
  /// Services account and is not case-sensitive.
  ///
  /// Parameter [displayName] :
  /// The name of the component as displayed. The name doesn't need to be
  /// unique. If <code>DisplayName</code> isn't specified,
  /// <code>TrialComponentName</code> is displayed.
  ///
  /// Parameter [endTime] :
  /// When the component ended.
  ///
  /// Parameter [inputArtifacts] :
  /// The input artifacts for the component. Examples of input artifacts are
  /// datasets, algorithms, hyperparameters, source code, and instance types.
  ///
  /// Parameter [outputArtifacts] :
  /// The output artifacts for the component. Examples of output artifacts are
  /// metrics, snapshots, logs, and images.
  ///
  /// Parameter [parameters] :
  /// The hyperparameters for the component.
  ///
  /// Parameter [startTime] :
  /// When the component started.
  ///
  /// Parameter [status] :
  /// The status of the component. States include:
  ///
  /// <ul>
  /// <li>
  /// InProgress
  /// </li>
  /// <li>
  /// Completed
  /// </li>
  /// <li>
  /// Failed
  /// </li>
  /// </ul>
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with the component. You can use <a>Search</a>
  /// API to search on the tags.
  Future<CreateTrialComponentResponse> createTrialComponent({
    required String trialComponentName,
    String? displayName,
    DateTime? endTime,
    Map<String, TrialComponentArtifact>? inputArtifacts,
    MetadataProperties? metadataProperties,
    Map<String, TrialComponentArtifact>? outputArtifacts,
    Map<String, TrialComponentParameterValue>? parameters,
    DateTime? startTime,
    TrialComponentStatus? status,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(trialComponentName, 'trialComponentName');
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        if (displayName != null) 'DisplayName': displayName,
        if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
        if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
        if (parameters != null) 'Parameters': parameters,
        if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
        if (status != null) 'Status': status,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Creates a user profile. A user profile represents a single user within a
  /// domain, and is the main way to reference a "person" for the purposes of
  /// sharing, reporting, and other user-oriented features. This entity is
  /// created when a user onboards to Amazon SageMaker Studio. If an
  /// administrator invites a person by email or imports them from SSO, a user
  /// profile is automatically created. A user profile is the primary holder of
  /// settings for an individual user and has a reference to the user's private
  /// Amazon Elastic File System (EFS) home directory.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [domainId] :
  /// The ID of the associated Domain.
  ///
  /// Parameter [userProfileName] :
  /// A name for the UserProfile. This value is not case sensitive.
  ///
  /// Parameter [singleSignOnUserIdentifier] :
  /// A specifier for the type of value specified in SingleSignOnUserValue.
  /// Currently, the only supported value is "UserName". If the Domain's
  /// AuthMode is SSO, this field is required. If the Domain's AuthMode is not
  /// SSO, this field cannot be specified.
  ///
  /// Parameter [singleSignOnUserValue] :
  /// The username of the associated Amazon Web Services Single Sign-On User for
  /// this UserProfile. If the Domain's AuthMode is SSO, this field is required,
  /// and must match a valid username of a user in your directory. If the
  /// Domain's AuthMode is not SSO, this field cannot be specified.
  ///
  /// Parameter [tags] :
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource.
  ///
  /// Tags that you specify for the User Profile are also added to all Apps that
  /// the User Profile launches.
  ///
  /// Parameter [userSettings] :
  /// A collection of settings.
  Future<CreateUserProfileResponse> createUserProfile({
    required String domainId,
    required String userProfileName,
    String? singleSignOnUserIdentifier,
    String? singleSignOnUserValue,
    List<Tag>? tags,
    UserSettings? userSettings,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'singleSignOnUserValue',
      singleSignOnUserValue,
      0,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateUserProfile'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (singleSignOnUserIdentifier != null)
          'SingleSignOnUserIdentifier': singleSignOnUserIdentifier,
        if (singleSignOnUserValue != null)
          'SingleSignOnUserValue': singleSignOnUserValue,
        if (tags != null) 'Tags': tags,
        if (userSettings != null) 'UserSettings': userSettings,
      },
    );

    return CreateUserProfileResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to create a workforce. This operation will return an
  /// error if a workforce already exists in the Amazon Web Services Region that
  /// you specify. You can only create one workforce in each Amazon Web Services
  /// Region per Amazon Web Services account.
  ///
  /// If you want to create a new workforce in an Amazon Web Services Region
  /// where a workforce already exists, use the API operation to delete the
  /// existing workforce and then use <code>CreateWorkforce</code> to create a
  /// new workforce.
  ///
  /// To create a private workforce using Amazon Cognito, you must specify a
  /// Cognito user pool in <code>CognitoConfig</code>. You can also create an
  /// Amazon Cognito workforce using the Amazon SageMaker console. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
  /// Create a Private Workforce (Amazon Cognito)</a>.
  ///
  /// To create a private workforce using your own OIDC Identity Provider (IdP),
  /// specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP
  /// must support <i>groups</i> because groups are used by Ground Truth and
  /// Amazon A2I to create work teams. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
  /// Create a Private Workforce (OIDC IdP)</a>.
  ///
  /// Parameter [workforceName] :
  /// The name of the private workforce.
  ///
  /// Parameter [cognitoConfig] :
  /// Use this parameter to configure an Amazon Cognito private workforce. A
  /// single Cognito workforce is created using and corresponds to a single <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
  /// Amazon Cognito user pool</a>.
  ///
  /// Do not use <code>OidcConfig</code> if you specify values for
  /// <code>CognitoConfig</code>.
  ///
  /// Parameter [oidcConfig] :
  /// Use this parameter to configure a private workforce using your own OIDC
  /// Identity Provider.
  ///
  /// Do not use <code>CognitoConfig</code> if you specify values for
  /// <code>OidcConfig</code>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that contain metadata to help you categorize
  /// and organize our workforce. Each tag consists of a key and a value, both
  /// of which you define.
  Future<CreateWorkforceResponse> createWorkforce({
    required String workforceName,
    CognitoConfig? cognitoConfig,
    OidcConfig? oidcConfig,
    SourceIpConfig? sourceIpConfig,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(workforceName, 'workforceName');
    _s.validateStringLength(
      'workforceName',
      workforceName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateWorkforce'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
        if (cognitoConfig != null) 'CognitoConfig': cognitoConfig,
        if (oidcConfig != null) 'OidcConfig': oidcConfig,
        if (sourceIpConfig != null) 'SourceIpConfig': sourceIpConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateWorkforceResponse.fromJson(jsonResponse.body);
  }

  /// Creates a new work team for labeling your data. A work team is defined by
  /// one or more Amazon Cognito user pools. You must first create the user
  /// pools before you can create a work team.
  ///
  /// You cannot create more than 25 work teams in an account and region.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [description] :
  /// A description of the work team.
  ///
  /// Parameter [memberDefinitions] :
  /// A list of <code>MemberDefinition</code> objects that contains objects that
  /// identify the workers that make up the work team.
  ///
  /// Workforces can be created using Amazon Cognito or your own OIDC Identity
  /// Provider (IdP). For private workforces created using Amazon Cognito use
  /// <code>CognitoMemberDefinition</code>. For workforces created using your
  /// own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. Do
  /// not provide input for both of these parameters in a single request.
  ///
  /// For workforces created using Amazon Cognito, private work teams correspond
  /// to Amazon Cognito <i>user groups</i> within the user pool used to create a
  /// workforce. All of the <code>CognitoMemberDefinition</code> objects that
  /// make up the member definition must have the same <code>ClientId</code> and
  /// <code>UserPool</code> values. To add a Amazon Cognito user group to an
  /// existing worker pool, see <a href="">Adding groups to a User Pool</a>. For
  /// more information about user pools, see <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon
  /// Cognito User Pools</a>.
  ///
  /// For workforces created using your own OIDC IdP, specify the user groups
  /// that you want to include in your private work team in
  /// <code>OidcMemberDefinition</code> by listing those groups in
  /// <code>Groups</code>.
  ///
  /// Parameter [workteamName] :
  /// The name of the work team. Use this name to identify the work team.
  ///
  /// Parameter [notificationConfiguration] :
  /// Configures notification of workers regarding available or expiring work
  /// items.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html">Resource
  /// Tag</a> and <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
  /// Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  ///
  /// Parameter [workforceName] :
  /// The name of the workforce.
  Future<CreateWorkteamResponse> createWorkteam({
    required String description,
    required List<MemberDefinition> memberDefinitions,
    required String workteamName,
    NotificationConfiguration? notificationConfiguration,
    List<Tag>? tags,
    String? workforceName,
  }) async {
    ArgumentError.checkNotNull(description, 'description');
    _s.validateStringLength(
      'description',
      description,
      1,
      200,
      isRequired: true,
    );
    ArgumentError.checkNotNull(memberDefinitions, 'memberDefinitions');
    ArgumentError.checkNotNull(workteamName, 'workteamName');
    _s.validateStringLength(
      'workteamName',
      workteamName,
      1,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'workforceName',
      workforceName,
      1,
      63,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Description': description,
        'MemberDefinitions': memberDefinitions,
        'WorkteamName': workteamName,
        if (notificationConfiguration != null)
          'NotificationConfiguration': notificationConfiguration,
        if (tags != null) 'Tags': tags,
        if (workforceName != null) 'WorkforceName': workforceName,
      },
    );

    return CreateWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Deletes an action.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionName] :
  /// The name of the action to delete.
  Future<DeleteActionResponse> deleteAction({
    required String actionName,
  }) async {
    ArgumentError.checkNotNull(actionName, 'actionName');
    _s.validateStringLength(
      'actionName',
      actionName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
      },
    );

    return DeleteActionResponse.fromJson(jsonResponse.body);
  }

  /// Removes the specified algorithm from your account.
  ///
  /// Parameter [algorithmName] :
  /// The name of the algorithm to delete.
  Future<void> deleteAlgorithm({
    required String algorithmName,
  }) async {
    ArgumentError.checkNotNull(algorithmName, 'algorithmName');
    _s.validateStringLength(
      'algorithmName',
      algorithmName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAlgorithm'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmName': algorithmName,
      },
    );
  }

  /// Used to stop and delete an app.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appName] :
  /// The name of the app.
  ///
  /// Parameter [appType] :
  /// The type of app.
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  Future<void> deleteApp({
    required String appName,
    required AppType appType,
    required String domainId,
    required String userProfileName,
  }) async {
    ArgumentError.checkNotNull(appName, 'appName');
    _s.validateStringLength(
      'appName',
      appName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(appType, 'appType');
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteApp'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppName': appName,
        'AppType': appType.toValue(),
        'DomainId': domainId,
        'UserProfileName': userProfileName,
      },
    );
  }

  /// Deletes an AppImageConfig.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig to delete.
  Future<void> deleteAppImageConfig({
    required String appImageConfigName,
  }) async {
    ArgumentError.checkNotNull(appImageConfigName, 'appImageConfigName');
    _s.validateStringLength(
      'appImageConfigName',
      appImageConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAppImageConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
      },
    );
  }

  /// Deletes an artifact. Either <code>ArtifactArn</code> or
  /// <code>Source</code> must be specified.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactArn] :
  /// The Amazon Resource Name (ARN) of the artifact to delete.
  ///
  /// Parameter [source] :
  /// The URI of the source.
  Future<DeleteArtifactResponse> deleteArtifact({
    String? artifactArn,
    ArtifactSource? source,
  }) async {
    _s.validateStringLength(
      'artifactArn',
      artifactArn,
      0,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (artifactArn != null) 'ArtifactArn': artifactArn,
        if (source != null) 'Source': source,
      },
    );

    return DeleteArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Deletes an association.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [destinationArn] :
  /// The Amazon Resource Name (ARN) of the destination.
  ///
  /// Parameter [sourceArn] :
  /// The ARN of the source.
  Future<DeleteAssociationResponse> deleteAssociation({
    required String destinationArn,
    required String sourceArn,
  }) async {
    ArgumentError.checkNotNull(destinationArn, 'destinationArn');
    _s.validateStringLength(
      'destinationArn',
      destinationArn,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(sourceArn, 'sourceArn');
    _s.validateStringLength(
      'sourceArn',
      sourceArn,
      0,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAssociation'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DestinationArn': destinationArn,
        'SourceArn': sourceArn,
      },
    );

    return DeleteAssociationResponse.fromJson(jsonResponse.body);
  }

  /// Deletes the specified Git repository from your account.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository to delete.
  Future<void> deleteCodeRepository({
    required String codeRepositoryName,
  }) async {
    ArgumentError.checkNotNull(codeRepositoryName, 'codeRepositoryName');
    _s.validateStringLength(
      'codeRepositoryName',
      codeRepositoryName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteCodeRepository'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
      },
    );
  }

  /// Deletes an context.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextName] :
  /// The name of the context to delete.
  Future<DeleteContextResponse> deleteContext({
    required String contextName,
  }) async {
    ArgumentError.checkNotNull(contextName, 'contextName');
    _s.validateStringLength(
      'contextName',
      contextName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
      },
    );

    return DeleteContextResponse.fromJson(jsonResponse.body);
  }

  /// Deletes a data quality monitoring job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the data quality monitoring job definition to delete.
  Future<void> deleteDataQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteDataQualityJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes a fleet.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet to delete.
  Future<void> deleteDeviceFleet({
    required String deviceFleetName,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteDeviceFleet'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
      },
    );
  }

  /// Used to delete a domain. If you onboarded with IAM mode, you will need to
  /// delete your domain to onboard again using SSO. Use with caution. All of
  /// the members of the domain will lose access to their EFS volume, including
  /// data, notebooks, and other artifacts.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [retentionPolicy] :
  /// The retention policy for this domain, which specifies whether resources
  /// will be retained after the Domain is deleted. By default, all resources
  /// are retained (not automatically deleted).
  Future<void> deleteDomain({
    required String domainId,
    RetentionPolicy? retentionPolicy,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteDomain'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        if (retentionPolicy != null) 'RetentionPolicy': retentionPolicy,
      },
    );
  }

  /// Deletes an endpoint. Amazon SageMaker frees up all of the resources that
  /// were deployed when the endpoint was created.
  ///
  /// Amazon SageMaker retires any custom KMS key grants associated with the
  /// endpoint, meaning you don't need to use the <a
  /// href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a>
  /// API call.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint that you want to delete.
  Future<void> deleteEndpoint({
    required String endpointName,
  }) async {
    ArgumentError.checkNotNull(endpointName, 'endpointName');
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteEndpoint'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointName': endpointName,
      },
    );
  }

  /// Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code>
  /// API deletes only the specified configuration. It does not delete endpoints
  /// created using the configuration.
  ///
  /// You must not delete an <code>EndpointConfig</code> in use by an endpoint
  /// that is live or while the <code>UpdateEndpoint</code> or
  /// <code>CreateEndpoint</code> operations are being performed on the
  /// endpoint. If you delete the <code>EndpointConfig</code> of an endpoint
  /// that is active or being created or updated you may lose visibility into
  /// the instance type the endpoint is using. The endpoint must be deleted in
  /// order to stop incurring charges.
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the endpoint configuration that you want to delete.
  Future<void> deleteEndpointConfig({
    required String endpointConfigName,
  }) async {
    ArgumentError.checkNotNull(endpointConfigName, 'endpointConfigName');
    _s.validateStringLength(
      'endpointConfigName',
      endpointConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteEndpointConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
      },
    );
  }

  /// Deletes an SageMaker experiment. All trials associated with the experiment
  /// must be deleted first. Use the <a>ListTrials</a> API to get a list of the
  /// trials associated with the experiment.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to delete.
  Future<DeleteExperimentResponse> deleteExperiment({
    required String experimentName,
  }) async {
    ArgumentError.checkNotNull(experimentName, 'experimentName');
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
      },
    );

    return DeleteExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Delete the <code>FeatureGroup</code> and any data that was written to the
  /// <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be
  /// accessed from the <code>OnlineStore</code> immediately after
  /// <code>DeleteFeatureGroup</code> is called.
  ///
  /// Data written into the <code>OfflineStore</code> will not be deleted. The
  /// Amazon Web Services Glue database and tables that are automatically
  /// created for your <code>OfflineStore</code> are not deleted.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [featureGroupName] :
  /// The name of the <code>FeatureGroup</code> you want to delete. The name
  /// must be unique within an Amazon Web Services Region in an Amazon Web
  /// Services account.
  Future<void> deleteFeatureGroup({
    required String featureGroupName,
  }) async {
    ArgumentError.checkNotNull(featureGroupName, 'featureGroupName');
    _s.validateStringLength(
      'featureGroupName',
      featureGroupName,
      1,
      64,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteFeatureGroup'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
      },
    );
  }

  /// Deletes the specified flow definition.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [flowDefinitionName] :
  /// The name of the flow definition you are deleting.
  Future<void> deleteFlowDefinition({
    required String flowDefinitionName,
  }) async {
    ArgumentError.checkNotNull(flowDefinitionName, 'flowDefinitionName');
    _s.validateStringLength(
      'flowDefinitionName',
      flowDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteFlowDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FlowDefinitionName': flowDefinitionName,
      },
    );
  }

  /// Use this operation to delete a human task user interface (worker task
  /// template).
  ///
  /// To see a list of human task user interfaces (work task templates) in your
  /// account, use . When you delete a worker task template, it no longer
  /// appears when you call <code>ListHumanTaskUis</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [humanTaskUiName] :
  /// The name of the human task user interface (work task template) you want to
  /// delete.
  Future<void> deleteHumanTaskUi({
    required String humanTaskUiName,
  }) async {
    ArgumentError.checkNotNull(humanTaskUiName, 'humanTaskUiName');
    _s.validateStringLength(
      'humanTaskUiName',
      humanTaskUiName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteHumanTaskUi'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskUiName': humanTaskUiName,
      },
    );
  }

  /// Deletes a SageMaker image and all versions of the image. The container
  /// images aren't deleted.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to delete.
  Future<void> deleteImage({
    required String imageName,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteImage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
      },
    );
  }

  /// Deletes a version of a SageMaker image. The container image the version
  /// represents isn't deleted.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image.
  ///
  /// Parameter [version] :
  /// The version to delete.
  Future<void> deleteImageVersion({
    required String imageName,
    required int version,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(version, 'version');
    _s.validateNumRange(
      'version',
      version,
      0,
      1152921504606846976,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteImageVersion'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        'Version': version,
      },
    );
  }

  /// Deletes a model. The <code>DeleteModel</code> API deletes only the model
  /// entry that was created in Amazon SageMaker when you called the
  /// <code>CreateModel</code> API. It does not delete model artifacts,
  /// inference code, or the IAM role that you specified when creating the
  /// model.
  ///
  /// Parameter [modelName] :
  /// The name of the model to delete.
  Future<void> deleteModel({
    required String modelName,
  }) async {
    ArgumentError.checkNotNull(modelName, 'modelName');
    _s.validateStringLength(
      'modelName',
      modelName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModel'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
      },
    );
  }

  /// Deletes an Amazon SageMaker model bias job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model bias job definition to delete.
  Future<void> deleteModelBiasJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelBiasJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes an Amazon SageMaker model explainability job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model explainability job definition to delete.
  Future<void> deleteModelExplainabilityJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelExplainabilityJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes a model package.
  ///
  /// A model package is used to create Amazon SageMaker models or list on
  /// Amazon Web Services Marketplace. Buyers can subscribe to model packages
  /// listed on Amazon Web Services Marketplace to create models in Amazon
  /// SageMaker.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [modelPackageName] :
  /// The name or Amazon Resource Name (ARN) of the model package to delete.
  ///
  /// When you specify a name, the name must have 1 to 63 characters. Valid
  /// characters are a-z, A-Z, 0-9, and - (hyphen).
  Future<void> deleteModelPackage({
    required String modelPackageName,
  }) async {
    ArgumentError.checkNotNull(modelPackageName, 'modelPackageName');
    _s.validateStringLength(
      'modelPackageName',
      modelPackageName,
      1,
      176,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelPackage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageName': modelPackageName,
      },
    );
  }

  /// Deletes the specified model group.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group to delete.
  Future<void> deleteModelPackageGroup({
    required String modelPackageGroupName,
  }) async {
    ArgumentError.checkNotNull(modelPackageGroupName, 'modelPackageGroupName');
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      170,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelPackageGroup'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );
  }

  /// Deletes a model group resource policy.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group for which to delete the policy.
  Future<void> deleteModelPackageGroupPolicy({
    required String modelPackageGroupName,
  }) async {
    ArgumentError.checkNotNull(modelPackageGroupName, 'modelPackageGroupName');
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelPackageGroupPolicy'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );
  }

  /// Deletes the secified model quality monitoring job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model quality monitoring job definition to delete.
  Future<void> deleteModelQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelQualityJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes a monitoring schedule. Also stops the schedule had not already
  /// been stopped. This does not delete the job execution history of the
  /// monitoring schedule.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the monitoring schedule to delete.
  Future<void> deleteMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    ArgumentError.checkNotNull(
        monitoringScheduleName, 'monitoringScheduleName');
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteMonitoringSchedule'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );
  }

  /// Deletes an Amazon SageMaker notebook instance. Before you can delete a
  /// notebook instance, you must call the <code>StopNotebookInstance</code>
  /// API.
  /// <important>
  /// When you delete a notebook instance, you lose all of your data. Amazon
  /// SageMaker removes the ML compute instance, and deletes the ML storage
  /// volume and the network interface associated with the notebook instance.
  /// </important>
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the Amazon SageMaker notebook instance to delete.
  Future<void> deleteNotebookInstance({
    required String notebookInstanceName,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );
  }

  /// Deletes a notebook instance lifecycle configuration.
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration to delete.
  Future<void> deleteNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceLifecycleConfigName,
        'notebookInstanceLifecycleConfigName');
    _s.validateStringLength(
      'notebookInstanceLifecycleConfigName',
      notebookInstanceLifecycleConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteNotebookInstanceLifecycleConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      },
    );
  }

  /// Deletes a pipeline if there are no running instances of the pipeline. To
  /// delete a pipeline, you must stop all running instances of the pipeline
  /// using the <code>StopPipelineExecution</code> API. When you delete a
  /// pipeline, all instances of the pipeline are deleted.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline to delete.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  Future<DeletePipelineResponse> deletePipeline({
    required String pipelineName,
    String? clientRequestToken,
  }) async {
    ArgumentError.checkNotNull(pipelineName, 'pipelineName');
    _s.validateStringLength(
      'pipelineName',
      pipelineName,
      1,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientRequestToken',
      clientRequestToken,
      32,
      128,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeletePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
      },
    );

    return DeletePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Delete the specified project.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [projectName] :
  /// The name of the project to delete.
  Future<void> deleteProject({
    required String projectName,
  }) async {
    ArgumentError.checkNotNull(projectName, 'projectName');
    _s.validateStringLength(
      'projectName',
      projectName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteProject'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
      },
    );
  }

  /// Deletes the specified tags from an Amazon SageMaker resource.
  ///
  /// To list a resource's tags, use the <code>ListTags</code> API.
  /// <note>
  /// When you call this API to delete tags from a hyperparameter tuning job,
  /// the deleted tags are not removed from training jobs that the
  /// hyperparameter tuning job launched before you called this API.
  /// </note> <note>
  /// When you call this API to delete tags from a SageMaker Studio Domain or
  /// User Profile, the deleted tags are not removed from Apps that the
  /// SageMaker Studio Domain or User Profile launched before you called this
  /// API.
  /// </note>
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the resource whose tags you want to
  /// delete.
  ///
  /// Parameter [tagKeys] :
  /// An array or one or more tag keys to delete.
  Future<void> deleteTags({
    required String resourceArn,
    required List<String> tagKeys,
  }) async {
    ArgumentError.checkNotNull(resourceArn, 'resourceArn');
    _s.validateStringLength(
      'resourceArn',
      resourceArn,
      0,
      256,
      isRequired: true,
    );
    ArgumentError.checkNotNull(tagKeys, 'tagKeys');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteTags'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ResourceArn': resourceArn,
        'TagKeys': tagKeys,
      },
    );
  }

  /// Deletes the specified trial. All trial components that make up the trial
  /// must be deleted first. Use the <a>DescribeTrialComponent</a> API to get
  /// the list of trial components.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialName] :
  /// The name of the trial to delete.
  Future<DeleteTrialResponse> deleteTrial({
    required String trialName,
  }) async {
    ArgumentError.checkNotNull(trialName, 'trialName');
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialName': trialName,
      },
    );

    return DeleteTrialResponse.fromJson(jsonResponse.body);
  }

  /// Deletes the specified trial component. A trial component must be
  /// disassociated from all trials before the trial component can be deleted.
  /// To disassociate a trial component from a trial, call the
  /// <a>DisassociateTrialComponent</a> API.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to delete.
  Future<DeleteTrialComponentResponse> deleteTrialComponent({
    required String trialComponentName,
  }) async {
    ArgumentError.checkNotNull(trialComponentName, 'trialComponentName');
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
      },
    );

    return DeleteTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Deletes a user profile. When a user profile is deleted, the user loses
  /// access to their EFS volume, including data, notebooks, and other
  /// artifacts.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  Future<void> deleteUserProfile({
    required String domainId,
    required String userProfileName,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteUserProfile'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
      },
    );
  }

  /// Use this operation to delete a workforce.
  ///
  /// If you want to create a new workforce in an Amazon Web Services Region
  /// where a workforce already exists, use this operation to delete the
  /// existing workforce and then use to create a new workforce.
  /// <important>
  /// If a private workforce contains one or more work teams, you must use the
  /// operation to delete all work teams before you delete the workforce. If you
  /// try to delete a workforce that contains one or more work teams, you will
  /// recieve a <code>ResourceInUse</code> error.
  /// </important>
  ///
  /// Parameter [workforceName] :
  /// The name of the workforce.
  Future<void> deleteWorkforce({
    required String workforceName,
  }) async {
    ArgumentError.checkNotNull(workforceName, 'workforceName');
    _s.validateStringLength(
      'workforceName',
      workforceName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteWorkforce'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
      },
    );
  }

  /// Deletes an existing work team. This operation can't be undone.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [workteamName] :
  /// The name of the work team to delete.
  Future<DeleteWorkteamResponse> deleteWorkteam({
    required String workteamName,
  }) async {
    ArgumentError.checkNotNull(workteamName, 'workteamName');
    _s.validateStringLength(
      'workteamName',
      workteamName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamName': workteamName,
      },
    );

    return DeleteWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Deregisters the specified devices. After you deregister a device, you will
  /// need to re-register the devices.
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet the devices belong to.
  ///
  /// Parameter [deviceNames] :
  /// The unique IDs of the devices.
  Future<void> deregisterDevices({
    required String deviceFleetName,
    required List<String> deviceNames,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(deviceNames, 'deviceNames');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeregisterDevices'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'DeviceNames': deviceNames,
      },
    );
  }

  /// Describes an action.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionName] :
  /// The name of the action to describe.
  Future<DescribeActionResponse> describeAction({
    required String actionName,
  }) async {
    ArgumentError.checkNotNull(actionName, 'actionName');
    _s.validateStringLength(
      'actionName',
      actionName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
      },
    );

    return DescribeActionResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of the specified algorithm that is in your account.
  ///
  /// Parameter [algorithmName] :
  /// The name of the algorithm to describe.
  Future<DescribeAlgorithmOutput> describeAlgorithm({
    required String algorithmName,
  }) async {
    ArgumentError.checkNotNull(algorithmName, 'algorithmName');
    _s.validateStringLength(
      'algorithmName',
      algorithmName,
      1,
      170,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAlgorithm'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmName': algorithmName,
      },
    );

    return DescribeAlgorithmOutput.fromJson(jsonResponse.body);
  }

  /// Describes the app.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appName] :
  /// The name of the app.
  ///
  /// Parameter [appType] :
  /// The type of app.
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  Future<DescribeAppResponse> describeApp({
    required String appName,
    required AppType appType,
    required String domainId,
    required String userProfileName,
  }) async {
    ArgumentError.checkNotNull(appName, 'appName');
    _s.validateStringLength(
      'appName',
      appName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(appType, 'appType');
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeApp'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppName': appName,
        'AppType': appType.toValue(),
        'DomainId': domainId,
        'UserProfileName': userProfileName,
      },
    );

    return DescribeAppResponse.fromJson(jsonResponse.body);
  }

  /// Describes an AppImageConfig.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig to describe.
  Future<DescribeAppImageConfigResponse> describeAppImageConfig({
    required String appImageConfigName,
  }) async {
    ArgumentError.checkNotNull(appImageConfigName, 'appImageConfigName');
    _s.validateStringLength(
      'appImageConfigName',
      appImageConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAppImageConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
      },
    );

    return DescribeAppImageConfigResponse.fromJson(jsonResponse.body);
  }

  /// Describes an artifact.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactArn] :
  /// The Amazon Resource Name (ARN) of the artifact to describe.
  Future<DescribeArtifactResponse> describeArtifact({
    required String artifactArn,
  }) async {
    ArgumentError.checkNotNull(artifactArn, 'artifactArn');
    _s.validateStringLength(
      'artifactArn',
      artifactArn,
      0,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ArtifactArn': artifactArn,
      },
    );

    return DescribeArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about an Amazon SageMaker AutoML job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// Requests information about an AutoML job using its unique name.
  Future<DescribeAutoMLJobResponse> describeAutoMLJob({
    required String autoMLJobName,
  }) async {
    ArgumentError.checkNotNull(autoMLJobName, 'autoMLJobName');
    _s.validateStringLength(
      'autoMLJobName',
      autoMLJobName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAutoMLJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
      },
    );

    return DescribeAutoMLJobResponse.fromJson(jsonResponse.body);
  }

  /// Gets details about the specified Git repository.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository to describe.
  Future<DescribeCodeRepositoryOutput> describeCodeRepository({
    required String codeRepositoryName,
  }) async {
    ArgumentError.checkNotNull(codeRepositoryName, 'codeRepositoryName');
    _s.validateStringLength(
      'codeRepositoryName',
      codeRepositoryName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeCodeRepository'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
      },
    );

    return DescribeCodeRepositoryOutput.fromJson(jsonResponse.body);
  }

  /// Returns information about a model compilation job.
  ///
  /// To create a model compilation job, use <a>CreateCompilationJob</a>. To get
  /// information about multiple model compilation jobs, use
  /// <a>ListCompilationJobs</a>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the model compilation job that you want information about.
  Future<DescribeCompilationJobResponse> describeCompilationJob({
    required String compilationJobName,
  }) async {
    ArgumentError.checkNotNull(compilationJobName, 'compilationJobName');
    _s.validateStringLength(
      'compilationJobName',
      compilationJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeCompilationJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
      },
    );

    return DescribeCompilationJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes a context.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextName] :
  /// The name of the context to describe.
  Future<DescribeContextResponse> describeContext({
    required String contextName,
  }) async {
    ArgumentError.checkNotNull(contextName, 'contextName');
    _s.validateStringLength(
      'contextName',
      contextName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
      },
    );

    return DescribeContextResponse.fromJson(jsonResponse.body);
  }

  /// Gets the details of a data quality monitoring job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the data quality monitoring job definition to describe.
  Future<DescribeDataQualityJobDefinitionResponse>
      describeDataQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDataQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeDataQualityJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Describes the device.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet the devices belong to.
  ///
  /// Parameter [deviceName] :
  /// The unique ID of the device.
  ///
  /// Parameter [nextToken] :
  /// Next token of device description.
  Future<DescribeDeviceResponse> describeDevice({
    required String deviceFleetName,
    required String deviceName,
    String? nextToken,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(deviceName, 'deviceName');
    _s.validateStringLength(
      'deviceName',
      deviceName,
      1,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDevice'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'DeviceName': deviceName,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return DescribeDeviceResponse.fromJson(jsonResponse.body);
  }

  /// A description of the fleet the device belongs to.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  Future<DescribeDeviceFleetResponse> describeDeviceFleet({
    required String deviceFleetName,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDeviceFleet'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
      },
    );

    return DescribeDeviceFleetResponse.fromJson(jsonResponse.body);
  }

  /// The description of the domain.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  Future<DescribeDomainResponse> describeDomain({
    required String domainId,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDomain'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
      },
    );

    return DescribeDomainResponse.fromJson(jsonResponse.body);
  }

  /// A description of edge packaging jobs.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [edgePackagingJobName] :
  /// The name of the edge packaging job.
  Future<DescribeEdgePackagingJobResponse> describeEdgePackagingJob({
    required String edgePackagingJobName,
  }) async {
    ArgumentError.checkNotNull(edgePackagingJobName, 'edgePackagingJobName');
    _s.validateStringLength(
      'edgePackagingJobName',
      edgePackagingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEdgePackagingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgePackagingJobName': edgePackagingJobName,
      },
    );

    return DescribeEdgePackagingJobResponse.fromJson(jsonResponse.body);
  }

  /// Returns the description of an endpoint.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint.
  Future<DescribeEndpointOutput> describeEndpoint({
    required String endpointName,
  }) async {
    ArgumentError.checkNotNull(endpointName, 'endpointName');
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEndpoint'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointName': endpointName,
      },
    );

    return DescribeEndpointOutput.fromJson(jsonResponse.body);
  }

  /// Returns the description of an endpoint configuration created using the
  /// <code>CreateEndpointConfig</code> API.
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the endpoint configuration.
  Future<DescribeEndpointConfigOutput> describeEndpointConfig({
    required String endpointConfigName,
  }) async {
    ArgumentError.checkNotNull(endpointConfigName, 'endpointConfigName');
    _s.validateStringLength(
      'endpointConfigName',
      endpointConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEndpointConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
      },
    );

    return DescribeEndpointConfigOutput.fromJson(jsonResponse.body);
  }

  /// Provides a list of an experiment's properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to describe.
  Future<DescribeExperimentResponse> describeExperiment({
    required String experimentName,
  }) async {
    ArgumentError.checkNotNull(experimentName, 'experimentName');
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
      },
    );

    return DescribeExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to describe a <code>FeatureGroup</code>. The response
  /// includes information on the creation time, <code>FeatureGroup</code> name,
  /// the unique identifier for each <code>FeatureGroup</code>, and more.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [featureGroupName] :
  /// The name of the <code>FeatureGroup</code> you want described.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination of the list of <code>Features</code>
  /// (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are
  /// returned by default.
  Future<DescribeFeatureGroupResponse> describeFeatureGroup({
    required String featureGroupName,
    String? nextToken,
  }) async {
    ArgumentError.checkNotNull(featureGroupName, 'featureGroupName');
    _s.validateStringLength(
      'featureGroupName',
      featureGroupName,
      1,
      64,
      isRequired: true,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeFeatureGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return DescribeFeatureGroupResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the specified flow definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [flowDefinitionName] :
  /// The name of the flow definition.
  Future<DescribeFlowDefinitionResponse> describeFlowDefinition({
    required String flowDefinitionName,
  }) async {
    ArgumentError.checkNotNull(flowDefinitionName, 'flowDefinitionName');
    _s.validateStringLength(
      'flowDefinitionName',
      flowDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeFlowDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FlowDefinitionName': flowDefinitionName,
      },
    );

    return DescribeFlowDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the requested human task user interface (worker
  /// task template).
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [humanTaskUiName] :
  /// The name of the human task user interface (worker task template) you want
  /// information about.
  Future<DescribeHumanTaskUiResponse> describeHumanTaskUi({
    required String humanTaskUiName,
  }) async {
    ArgumentError.checkNotNull(humanTaskUiName, 'humanTaskUiName');
    _s.validateStringLength(
      'humanTaskUiName',
      humanTaskUiName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeHumanTaskUi'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskUiName': humanTaskUiName,
      },
    );

    return DescribeHumanTaskUiResponse.fromJson(jsonResponse.body);
  }

  /// Gets a description of a hyperparameter tuning job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job.
  Future<DescribeHyperParameterTuningJobResponse>
      describeHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
  }) async {
    ArgumentError.checkNotNull(
        hyperParameterTuningJobName, 'hyperParameterTuningJobName');
    _s.validateStringLength(
      'hyperParameterTuningJobName',
      hyperParameterTuningJobName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeHyperParameterTuningJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
      },
    );

    return DescribeHyperParameterTuningJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes a SageMaker image.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to describe.
  Future<DescribeImageResponse> describeImage({
    required String imageName,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeImage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
      },
    );

    return DescribeImageResponse.fromJson(jsonResponse.body);
  }

  /// Describes a version of a SageMaker image.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image.
  ///
  /// Parameter [version] :
  /// The version of the image. If not specified, the latest version is
  /// described.
  Future<DescribeImageVersionResponse> describeImageVersion({
    required String imageName,
    int? version,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    _s.validateNumRange(
      'version',
      version,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeImageVersion'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (version != null) 'Version': version,
      },
    );

    return DescribeImageVersionResponse.fromJson(jsonResponse.body);
  }

  /// Gets information about a labeling job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [labelingJobName] :
  /// The name of the labeling job to return information for.
  Future<DescribeLabelingJobResponse> describeLabelingJob({
    required String labelingJobName,
  }) async {
    ArgumentError.checkNotNull(labelingJobName, 'labelingJobName');
    _s.validateStringLength(
      'labelingJobName',
      labelingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeLabelingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'LabelingJobName': labelingJobName,
      },
    );

    return DescribeLabelingJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes a model that you created using the <code>CreateModel</code> API.
  ///
  /// Parameter [modelName] :
  /// The name of the model.
  Future<DescribeModelOutput> describeModel({
    required String modelName,
  }) async {
    ArgumentError.checkNotNull(modelName, 'modelName');
    _s.validateStringLength(
      'modelName',
      modelName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModel'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
      },
    );

    return DescribeModelOutput.fromJson(jsonResponse.body);
  }

  /// Returns a description of a model bias job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model bias job definition. The name must be unique within
  /// an Amazon Web Services Region in the Amazon Web Services account.
  Future<DescribeModelBiasJobDefinitionResponse>
      describeModelBiasJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelBiasJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeModelBiasJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of a model explainability job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model explainability job definition. The name must be
  /// unique within an Amazon Web Services Region in the Amazon Web Services
  /// account.
  Future<DescribeModelExplainabilityJobDefinitionResponse>
      describeModelExplainabilityJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelExplainabilityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeModelExplainabilityJobDefinitionResponse.fromJson(
        jsonResponse.body);
  }

  /// Returns a description of the specified model package, which is used to
  /// create Amazon SageMaker models or list them on Amazon Web Services
  /// Marketplace.
  ///
  /// To create models in Amazon SageMaker, buyers can subscribe to model
  /// packages listed on Amazon Web Services Marketplace.
  ///
  /// Parameter [modelPackageName] :
  /// The name or Amazon Resource Name (ARN) of the model package to describe.
  ///
  /// When you specify a name, the name must have 1 to 63 characters. Valid
  /// characters are a-z, A-Z, 0-9, and - (hyphen).
  Future<DescribeModelPackageOutput> describeModelPackage({
    required String modelPackageName,
  }) async {
    ArgumentError.checkNotNull(modelPackageName, 'modelPackageName');
    _s.validateStringLength(
      'modelPackageName',
      modelPackageName,
      1,
      176,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageName': modelPackageName,
      },
    );

    return DescribeModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Gets a description for the specified model group.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group to describe.
  Future<DescribeModelPackageGroupOutput> describeModelPackageGroup({
    required String modelPackageGroupName,
  }) async {
    ArgumentError.checkNotNull(modelPackageGroupName, 'modelPackageGroupName');
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      170,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelPackageGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );

    return DescribeModelPackageGroupOutput.fromJson(jsonResponse.body);
  }

  /// Returns a description of a model quality job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model quality job. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  Future<DescribeModelQualityJobDefinitionResponse>
      describeModelQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    ArgumentError.checkNotNull(jobDefinitionName, 'jobDefinitionName');
    _s.validateStringLength(
      'jobDefinitionName',
      jobDefinitionName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeModelQualityJobDefinitionResponse.fromJson(
        jsonResponse.body);
  }

  /// Describes the schedule for a monitoring job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// Name of a previously created monitoring schedule.
  Future<DescribeMonitoringScheduleResponse> describeMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    ArgumentError.checkNotNull(
        monitoringScheduleName, 'monitoringScheduleName');
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeMonitoringSchedule'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );

    return DescribeMonitoringScheduleResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about a notebook instance.
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance that you want information about.
  Future<DescribeNotebookInstanceOutput> describeNotebookInstance({
    required String notebookInstanceName,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeNotebookInstance'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );

    return DescribeNotebookInstanceOutput.fromJson(jsonResponse.body);
  }

  /// Returns a description of a notebook instance lifecycle configuration.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration to describe.
  Future<DescribeNotebookInstanceLifecycleConfigOutput>
      describeNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceLifecycleConfigName,
        'notebookInstanceLifecycleConfigName');
    _s.validateStringLength(
      'notebookInstanceLifecycleConfigName',
      notebookInstanceLifecycleConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeNotebookInstanceLifecycleConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      },
    );

    return DescribeNotebookInstanceLifecycleConfigOutput.fromJson(
        jsonResponse.body);
  }

  /// Describes the details of a pipeline.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline to describe.
  Future<DescribePipelineResponse> describePipeline({
    required String pipelineName,
  }) async {
    ArgumentError.checkNotNull(pipelineName, 'pipelineName');
    _s.validateStringLength(
      'pipelineName',
      pipelineName,
      1,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
      },
    );

    return DescribePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Describes the details of an execution's pipeline definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  Future<DescribePipelineDefinitionForExecutionResponse>
      describePipelineDefinitionForExecution({
    required String pipelineExecutionArn,
  }) async {
    ArgumentError.checkNotNull(pipelineExecutionArn, 'pipelineExecutionArn');
    _s.validateStringLength(
      'pipelineExecutionArn',
      pipelineExecutionArn,
      0,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribePipelineDefinitionForExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
      },
    );

    return DescribePipelineDefinitionForExecutionResponse.fromJson(
        jsonResponse.body);
  }

  /// Describes the details of a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  Future<DescribePipelineExecutionResponse> describePipelineExecution({
    required String pipelineExecutionArn,
  }) async {
    ArgumentError.checkNotNull(pipelineExecutionArn, 'pipelineExecutionArn');
    _s.validateStringLength(
      'pipelineExecutionArn',
      pipelineExecutionArn,
      0,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribePipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
      },
    );

    return DescribePipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of a processing job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [processingJobName] :
  /// The name of the processing job. The name must be unique within an Amazon
  /// Web Services Region in the Amazon Web Services account.
  Future<DescribeProcessingJobResponse> describeProcessingJob({
    required String processingJobName,
  }) async {
    ArgumentError.checkNotNull(processingJobName, 'processingJobName');
    _s.validateStringLength(
      'processingJobName',
      processingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeProcessingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProcessingJobName': processingJobName,
      },
    );

    return DescribeProcessingJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes the details of a project.
  ///
  /// Parameter [projectName] :
  /// The name of the project to describe.
  Future<DescribeProjectOutput> describeProject({
    required String projectName,
  }) async {
    ArgumentError.checkNotNull(projectName, 'projectName');
    _s.validateStringLength(
      'projectName',
      projectName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeProject'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
      },
    );

    return DescribeProjectOutput.fromJson(jsonResponse.body);
  }

  /// Gets information about a work team provided by a vendor. It returns
  /// details about the subscription with a vendor in the Amazon Web Services
  /// Marketplace.
  ///
  /// Parameter [workteamArn] :
  /// The Amazon Resource Name (ARN) of the subscribed work team to describe.
  Future<DescribeSubscribedWorkteamResponse> describeSubscribedWorkteam({
    required String workteamArn,
  }) async {
    ArgumentError.checkNotNull(workteamArn, 'workteamArn');
    _s.validateStringLength(
      'workteamArn',
      workteamArn,
      0,
      256,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeSubscribedWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamArn': workteamArn,
      },
    );

    return DescribeSubscribedWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about a training job.
  ///
  /// Some of the attributes below only appear if the training job successfully
  /// starts. If the training job fails, <code>TrainingJobStatus</code> is
  /// <code>Failed</code> and, depending on the <code>FailureReason</code>,
  /// attributes like <code>TrainingStartTime</code>,
  /// <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and
  /// <code>BillableTimeInSeconds</code> may not be present in the response.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trainingJobName] :
  /// The name of the training job.
  Future<DescribeTrainingJobResponse> describeTrainingJob({
    required String trainingJobName,
  }) async {
    ArgumentError.checkNotNull(trainingJobName, 'trainingJobName');
    _s.validateStringLength(
      'trainingJobName',
      trainingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTrainingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrainingJobName': trainingJobName,
      },
    );

    return DescribeTrainingJobResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about a transform job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [transformJobName] :
  /// The name of the transform job that you want to view details of.
  Future<DescribeTransformJobResponse> describeTransformJob({
    required String transformJobName,
  }) async {
    ArgumentError.checkNotNull(transformJobName, 'transformJobName');
    _s.validateStringLength(
      'transformJobName',
      transformJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTransformJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TransformJobName': transformJobName,
      },
    );

    return DescribeTransformJobResponse.fromJson(jsonResponse.body);
  }

  /// Provides a list of a trial's properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialName] :
  /// The name of the trial to describe.
  Future<DescribeTrialResponse> describeTrial({
    required String trialName,
  }) async {
    ArgumentError.checkNotNull(trialName, 'trialName');
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialName': trialName,
      },
    );

    return DescribeTrialResponse.fromJson(jsonResponse.body);
  }

  /// Provides a list of a trials component's properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the trial component to describe.
  Future<DescribeTrialComponentResponse> describeTrialComponent({
    required String trialComponentName,
  }) async {
    ArgumentError.checkNotNull(trialComponentName, 'trialComponentName');
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
      },
    );

    return DescribeTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Describes a user profile. For more information, see
  /// <code>CreateUserProfile</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name. This value is not case sensitive.
  Future<DescribeUserProfileResponse> describeUserProfile({
    required String domainId,
    required String userProfileName,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeUserProfile'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
      },
    );

    return DescribeUserProfileResponse.fromJson(jsonResponse.body);
  }

  /// Lists private workforce information, including workforce name, Amazon
  /// Resource Name (ARN), and, if applicable, allowed IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>).
  /// Allowable IP address ranges are the IP addresses that workers can use to
  /// access tasks.
  /// <important>
  /// This operation applies only to private workforces.
  /// </important>
  ///
  /// Parameter [workforceName] :
  /// The name of the private workforce whose access you want to restrict.
  /// <code>WorkforceName</code> is automatically set to <code>default</code>
  /// when a workforce is created and cannot be modified.
  Future<DescribeWorkforceResponse> describeWorkforce({
    required String workforceName,
  }) async {
    ArgumentError.checkNotNull(workforceName, 'workforceName');
    _s.validateStringLength(
      'workforceName',
      workforceName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeWorkforce'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
      },
    );

    return DescribeWorkforceResponse.fromJson(jsonResponse.body);
  }

  /// Gets information about a specific work team. You can see information such
  /// as the create date, the last updated date, membership information, and the
  /// work team's Amazon Resource Name (ARN).
  ///
  /// Parameter [workteamName] :
  /// The name of the work team to return a description of.
  Future<DescribeWorkteamResponse> describeWorkteam({
    required String workteamName,
  }) async {
    ArgumentError.checkNotNull(workteamName, 'workteamName');
    _s.validateStringLength(
      'workteamName',
      workteamName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamName': workteamName,
      },
    );

    return DescribeWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Disables using Service Catalog in SageMaker. Service Catalog is used to
  /// create SageMaker projects.
  Future<void> disableSagemakerServicecatalogPortfolio() async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DisableSagemakerServicecatalogPortfolio'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
    );
  }

  /// Disassociates a trial component from a trial. This doesn't effect other
  /// trials the component is associated with. Before you can delete a
  /// component, you must disassociate the component from all trials it is
  /// associated with. To associate a trial component with a trial, call the
  /// <a>AssociateTrialComponent</a> API.
  ///
  /// To get a list of the trials a component is associated with, use the
  /// <a>Search</a> API. Specify <code>ExperimentTrialComponent</code> for the
  /// <code>Resource</code> parameter. The list appears in the response under
  /// <code>Results.TrialComponent.Parents</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to disassociate from the trial.
  ///
  /// Parameter [trialName] :
  /// The name of the trial to disassociate from.
  Future<DisassociateTrialComponentResponse> disassociateTrialComponent({
    required String trialComponentName,
    required String trialName,
  }) async {
    ArgumentError.checkNotNull(trialComponentName, 'trialComponentName');
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
      isRequired: true,
    );
    ArgumentError.checkNotNull(trialName, 'trialName');
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DisassociateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        'TrialName': trialName,
      },
    );

    return DisassociateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Enables using Service Catalog in SageMaker. Service Catalog is used to
  /// create SageMaker projects.
  Future<void> enableSagemakerServicecatalogPortfolio() async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.EnableSagemakerServicecatalogPortfolio'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
    );
  }

  /// Describes a fleet.
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  Future<GetDeviceFleetReportResponse> getDeviceFleetReport({
    required String deviceFleetName,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetDeviceFleetReport'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
      },
    );

    return GetDeviceFleetReportResponse.fromJson(jsonResponse.body);
  }

  /// Gets a resource policy that manages access for a model group. For
  /// information about resource policies, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
  /// policies and resource-based policies</a> in the <i>Amazon Web Services
  /// Identity and Access Management User Guide.</i>.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group for which to get the resource policy.
  Future<GetModelPackageGroupPolicyOutput> getModelPackageGroupPolicy({
    required String modelPackageGroupName,
  }) async {
    ArgumentError.checkNotNull(modelPackageGroupName, 'modelPackageGroupName');
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetModelPackageGroupPolicy'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );

    return GetModelPackageGroupPolicyOutput.fromJson(jsonResponse.body);
  }

  /// Gets the status of Service Catalog in SageMaker. Service Catalog is used
  /// to create SageMaker projects.
  Future<GetSagemakerServicecatalogPortfolioStatusOutput>
      getSagemakerServicecatalogPortfolioStatus() async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetSagemakerServicecatalogPortfolioStatus'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
    );

    return GetSagemakerServicecatalogPortfolioStatusOutput.fromJson(
        jsonResponse.body);
  }

  /// An auto-complete API for the search functionality in the Amazon SageMaker
  /// console. It returns suggestions of possible matches for the property name
  /// to use in <code>Search</code> queries. Provides suggestions for
  /// <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.
  ///
  /// Parameter [resource] :
  /// The name of the Amazon SageMaker resource to search for.
  ///
  /// Parameter [suggestionQuery] :
  /// Limits the property names that are included in the response.
  Future<GetSearchSuggestionsResponse> getSearchSuggestions({
    required ResourceType resource,
    SuggestionQuery? suggestionQuery,
  }) async {
    ArgumentError.checkNotNull(resource, 'resource');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetSearchSuggestions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Resource': resource.toValue(),
        if (suggestionQuery != null) 'SuggestionQuery': suggestionQuery,
      },
    );

    return GetSearchSuggestionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the actions in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionType] :
  /// A filter that returns only actions of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only actions created on or after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only actions created on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of actions to return in the response. The default value
  /// is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListActions</code> didn't return the full
  /// set of actions, the call returns a token for getting the next set of
  /// actions.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceUri] :
  /// A filter that returns only actions with the specified source URI.
  Future<ListActionsResponse> listActions({
    String? actionType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortActionsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceUri,
  }) async {
    _s.validateStringLength(
      'actionType',
      actionType,
      0,
      256,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'sourceUri',
      sourceUri,
      0,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListActions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (actionType != null) 'ActionType': actionType,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return ListActionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the machine learning algorithms that have been created.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only algorithms created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only algorithms created before the specified time
  /// (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of algorithms to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the algorithm name. This filter returns only algorithms whose
  /// name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListAlgorithms</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of algorithms, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  Future<ListAlgorithmsOutput> listAlgorithms({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    AlgorithmSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAlgorithms'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListAlgorithmsOutput.fromJson(jsonResponse.body);
  }

  /// Lists the AppImageConfigs in your account and their properties. The list
  /// can be filtered by creation time or modified time, and whether the
  /// AppImageConfig name contains a specified string.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only AppImageConfigs created on or after the
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only AppImageConfigs created on or before the
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of AppImageConfigs to return in the response. The
  /// default value is 10.
  ///
  /// Parameter [modifiedTimeAfter] :
  /// A filter that returns only AppImageConfigs modified on or after the
  /// specified time.
  ///
  /// Parameter [modifiedTimeBefore] :
  /// A filter that returns only AppImageConfigs modified on or before the
  /// specified time.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns only AppImageConfigs whose name contains the
  /// specified string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListImages</code> didn't return the full set
  /// of AppImageConfigs, the call returns a token for getting the next set of
  /// AppImageConfigs.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  Future<ListAppImageConfigsResponse> listAppImageConfigs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    DateTime? modifiedTimeAfter,
    DateTime? modifiedTimeBefore,
    String? nameContains,
    String? nextToken,
    AppImageConfigSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAppImageConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modifiedTimeAfter != null)
          'ModifiedTimeAfter': unixTimestampToJson(modifiedTimeAfter),
        if (modifiedTimeBefore != null)
          'ModifiedTimeBefore': unixTimestampToJson(modifiedTimeBefore),
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListAppImageConfigsResponse.fromJson(jsonResponse.body);
  }

  /// Lists apps.
  ///
  /// Parameter [domainIdEquals] :
  /// A parameter to search for the domain ID.
  ///
  /// Parameter [maxResults] :
  /// Returns a list up to a specified limit.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is CreationTime.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is Ascending.
  ///
  /// Parameter [userProfileNameEquals] :
  /// A parameter to search by user profile name.
  Future<ListAppsResponse> listApps({
    String? domainIdEquals,
    int? maxResults,
    String? nextToken,
    AppSortKey? sortBy,
    SortOrder? sortOrder,
    String? userProfileNameEquals,
  }) async {
    _s.validateStringLength(
      'domainIdEquals',
      domainIdEquals,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'userProfileNameEquals',
      userProfileNameEquals,
      0,
      63,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListApps'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (domainIdEquals != null) 'DomainIdEquals': domainIdEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (userProfileNameEquals != null)
          'UserProfileNameEquals': userProfileNameEquals,
      },
    );

    return ListAppsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the artifacts in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactType] :
  /// A filter that returns only artifacts of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only artifacts created on or after the specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only artifacts created on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of artifacts to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListArtifacts</code> didn't return the full
  /// set of artifacts, the call returns a token for getting the next set of
  /// artifacts.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceUri] :
  /// A filter that returns only artifacts with the specified source URI.
  Future<ListArtifactsResponse> listArtifacts({
    String? artifactType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortArtifactsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceUri,
  }) async {
    _s.validateStringLength(
      'artifactType',
      artifactType,
      0,
      256,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'sourceUri',
      sourceUri,
      0,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListArtifacts'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (artifactType != null) 'ArtifactType': artifactType,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return ListArtifactsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the associations in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [associationType] :
  /// A filter that returns only associations of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only associations created on or after the specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only associations created on or before the specified
  /// time.
  ///
  /// Parameter [destinationArn] :
  /// A filter that returns only associations with the specified destination
  /// Amazon Resource Name (ARN).
  ///
  /// Parameter [destinationType] :
  /// A filter that returns only associations with the specified destination
  /// type.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of associations to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListAssociations</code> didn't return the
  /// full set of associations, the call returns a token for getting the next
  /// set of associations.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceArn] :
  /// A filter that returns only associations with the specified source ARN.
  ///
  /// Parameter [sourceType] :
  /// A filter that returns only associations with the specified source type.
  Future<ListAssociationsResponse> listAssociations({
    AssociationEdgeType? associationType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    String? destinationArn,
    String? destinationType,
    int? maxResults,
    String? nextToken,
    SortAssociationsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceArn,
    String? sourceType,
  }) async {
    _s.validateStringLength(
      'destinationArn',
      destinationArn,
      0,
      256,
    );
    _s.validateStringLength(
      'destinationType',
      destinationType,
      0,
      256,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'sourceArn',
      sourceArn,
      0,
      256,
    );
    _s.validateStringLength(
      'sourceType',
      sourceType,
      0,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAssociations'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (associationType != null)
          'AssociationType': associationType.toValue(),
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (destinationArn != null) 'DestinationArn': destinationArn,
        if (destinationType != null) 'DestinationType': destinationType,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (sourceArn != null) 'SourceArn': sourceArn,
        if (sourceType != null) 'SourceType': sourceType,
      },
    );

    return ListAssociationsResponse.fromJson(jsonResponse.body);
  }

  /// Request a list of jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [maxResults] :
  /// Request a list of jobs up to a specified limit.
  ///
  /// Parameter [nameContains] :
  /// Request a list of jobs, using a search filter for name.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// Request a list of jobs, using a filter for status.
  Future<ListAutoMLJobsResponse> listAutoMLJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    AutoMLSortBy? sortBy,
    AutoMLSortOrder? sortOrder,
    AutoMLJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAutoMLJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListAutoMLJobsResponse.fromJson(jsonResponse.body);
  }

  /// List the candidates created for the job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// List the candidates created for the job by providing the job's name.
  ///
  /// Parameter [candidateNameEquals] :
  /// List the candidates for the job and filter by candidate name.
  ///
  /// Parameter [maxResults] :
  /// List the job's candidates up to a specified limit.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>Descending</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// List the candidates for the job and filter by status.
  Future<ListCandidatesForAutoMLJobResponse> listCandidatesForAutoMLJob({
    required String autoMLJobName,
    String? candidateNameEquals,
    int? maxResults,
    String? nextToken,
    CandidateSortBy? sortBy,
    AutoMLSortOrder? sortOrder,
    CandidateStatus? statusEquals,
  }) async {
    ArgumentError.checkNotNull(autoMLJobName, 'autoMLJobName');
    _s.validateStringLength(
      'autoMLJobName',
      autoMLJobName,
      1,
      32,
      isRequired: true,
    );
    _s.validateStringLength(
      'candidateNameEquals',
      candidateNameEquals,
      1,
      64,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListCandidatesForAutoMLJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
        if (candidateNameEquals != null)
          'CandidateNameEquals': candidateNameEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListCandidatesForAutoMLJobResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the Git repositories in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only Git repositories that were created after the
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only Git repositories that were created before the
  /// specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only Git repositories that were last modified after
  /// the specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only Git repositories that were last modified before
  /// the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of Git repositories to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the Git repositories name. This filter returns only
  /// repositories whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of a <code>ListCodeRepositoriesOutput</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To get the next
  /// set of Git repositories, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListCodeRepositoriesOutput> listCodeRepositories({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    CodeRepositorySortBy? sortBy,
    CodeRepositorySortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListCodeRepositories'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListCodeRepositoriesOutput.fromJson(jsonResponse.body);
  }

  /// Lists model compilation jobs that satisfy various filters.
  ///
  /// To create a model compilation job, use <a>CreateCompilationJob</a>. To get
  /// information about a particular model compilation job you have created, use
  /// <a>DescribeCompilationJob</a>.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns the model compilation jobs that were created after a
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns the model compilation jobs that were created before
  /// a specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns the model compilation jobs that were modified after
  /// a specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns the model compilation jobs that were modified before
  /// a specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model compilation jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns the model compilation jobs whose name contains a
  /// specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListCompilationJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model compilation jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves model compilation jobs with a specific
  /// <a>DescribeCompilationJobResponse$CompilationJobStatus</a> status.
  Future<ListCompilationJobsResponse> listCompilationJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListCompilationJobsSortBy? sortBy,
    SortOrder? sortOrder,
    CompilationJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListCompilationJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListCompilationJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the contexts in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextType] :
  /// A filter that returns only contexts of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only contexts created on or after the specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only contexts created on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of contexts to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListContexts</code> didn't return the full
  /// set of contexts, the call returns a token for getting the next set of
  /// contexts.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceUri] :
  /// A filter that returns only contexts with the specified source URI.
  Future<ListContextsResponse> listContexts({
    String? contextType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortContextsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceUri,
  }) async {
    _s.validateStringLength(
      'contextType',
      contextType,
      0,
      256,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'sourceUri',
      sourceUri,
      0,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListContexts'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (contextType != null) 'ContextType': contextType,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return ListContextsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the data quality job definitions in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only data quality monitoring job definitions created
  /// after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only data quality monitoring job definitions created
  /// before the specified time.
  ///
  /// Parameter [endpointName] :
  /// A filter that lists the data quality job definitions associated with the
  /// specified endpoint.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of data quality monitoring job definitions to return in
  /// the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the data quality monitoring job definition name. This filter
  /// returns only data quality monitoring job definitions whose name contains
  /// the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListDataQualityJobDefinitions</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of transform jobs, use the token in the next
  /// request.&gt;
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  Future<ListDataQualityJobDefinitionsResponse> listDataQualityJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDataQualityJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListDataQualityJobDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// Returns a list of devices in the fleet.
  ///
  /// Parameter [creationTimeAfter] :
  /// Filter fleets where packaging job was created after specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Filter fleets where the edge packaging job was created before specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Select fleets where the job was updated after X
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Select fleets where the job was updated before X
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to select.
  ///
  /// Parameter [nameContains] :
  /// Filter for fleets containing this name in their fleet device name.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  ///
  /// Parameter [sortBy] :
  /// The column to sort by.
  ///
  /// Parameter [sortOrder] :
  /// What direction to sort in.
  Future<ListDeviceFleetsResponse> listDeviceFleets({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListDeviceFleetsSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDeviceFleets'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListDeviceFleetsResponse.fromJson(jsonResponse.body);
  }

  /// A list of devices.
  ///
  /// Parameter [deviceFleetName] :
  /// Filter for fleets containing this name in their device fleet name.
  ///
  /// Parameter [latestHeartbeatAfter] :
  /// Select fleets where the job was updated after X
  ///
  /// Parameter [maxResults] :
  /// Maximum number of results to select.
  ///
  /// Parameter [modelName] :
  /// A filter that searches devices that contains this name in any of their
  /// models.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  Future<ListDevicesResponse> listDevices({
    String? deviceFleetName,
    DateTime? latestHeartbeatAfter,
    int? maxResults,
    String? modelName,
    String? nextToken,
  }) async {
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    _s.validateStringLength(
      'modelName',
      modelName,
      1,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDevices'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (deviceFleetName != null) 'DeviceFleetName': deviceFleetName,
        if (latestHeartbeatAfter != null)
          'LatestHeartbeatAfter': unixTimestampToJson(latestHeartbeatAfter),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelName != null) 'ModelName': modelName,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListDevicesResponse.fromJson(jsonResponse.body);
  }

  /// Lists the domains.
  ///
  /// Parameter [maxResults] :
  /// Returns a list up to a specified limit.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  Future<ListDomainsResponse> listDomains({
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDomains'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListDomainsResponse.fromJson(jsonResponse.body);
  }

  /// Returns a list of edge packaging jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// Select jobs where the job was created after specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Select jobs where the job was created before specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Select jobs where the job was updated after specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Select jobs where the job was updated before specified time.
  ///
  /// Parameter [maxResults] :
  /// Maximum number of results to select.
  ///
  /// Parameter [modelNameContains] :
  /// Filter for jobs where the model name contains this string.
  ///
  /// Parameter [nameContains] :
  /// Filter for jobs containing this name in their packaging job name.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  ///
  /// Parameter [sortBy] :
  /// Use to specify what column to sort by.
  ///
  /// Parameter [sortOrder] :
  /// What direction to sort by.
  ///
  /// Parameter [statusEquals] :
  /// The job status to filter for.
  Future<ListEdgePackagingJobsResponse> listEdgePackagingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? modelNameContains,
    String? nameContains,
    String? nextToken,
    ListEdgePackagingJobsSortBy? sortBy,
    SortOrder? sortOrder,
    EdgePackagingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    _s.validateStringLength(
      'modelNameContains',
      modelNameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEdgePackagingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelNameContains != null) 'ModelNameContains': modelNameContains,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListEdgePackagingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists endpoint configurations.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only endpoint configurations with a creation time
  /// greater than or equal to the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only endpoint configurations created before the
  /// specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of training jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the endpoint configuration name. This filter returns only
  /// endpoint configurations whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListEndpointConfig</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of endpoint configurations, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  Future<ListEndpointConfigsOutput> listEndpointConfigs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    EndpointConfigSortKey? sortBy,
    OrderKey? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEndpointConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListEndpointConfigsOutput.fromJson(jsonResponse.body);
  }

  /// Lists endpoints.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only endpoints with a creation time greater than or
  /// equal to the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only endpoints that were created before the
  /// specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only endpoints that were modified after the
  /// specified timestamp.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only endpoints that were modified before the
  /// specified timestamp.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of endpoints to return in the response. This value
  /// defaults to 10.
  ///
  /// Parameter [nameContains] :
  /// A string in endpoint names. This filter returns only endpoints whose name
  /// contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of a <code>ListEndpoints</code> request was truncated, the
  /// response includes a <code>NextToken</code>. To retrieve the next set of
  /// endpoints, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sorts the list of results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only endpoints with the specified status.
  Future<ListEndpointsOutput> listEndpoints({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    EndpointSortKey? sortBy,
    OrderKey? sortOrder,
    EndpointStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEndpoints'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListEndpointsOutput.fromJson(jsonResponse.body);
  }

  /// Lists all the experiments in your account. The list can be filtered to
  /// show only experiments that were created in a specific time range. The list
  /// can be sorted by experiment name or creation time.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only experiments created after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only experiments created before the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of experiments to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListExperiments</code> didn't return the
  /// full set of experiments, the call returns a token for getting the next set
  /// of experiments.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  Future<ListExperimentsResponse> listExperiments({
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortExperimentsBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListExperiments'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListExperimentsResponse.fromJson(jsonResponse.body);
  }

  /// List <code>FeatureGroup</code>s based on given filter and order.
  ///
  /// Parameter [creationTimeAfter] :
  /// Use this parameter to search for <code>FeatureGroups</code>s created after
  /// a specific date and time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Use this parameter to search for <code>FeatureGroups</code>s created
  /// before a specific date and time.
  ///
  /// Parameter [featureGroupStatusEquals] :
  /// A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code>
  /// status.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results returned by <code>ListFeatureGroups</code>.
  ///
  /// Parameter [nameContains] :
  /// A string that partially matches one or more <code>FeatureGroup</code>s
  /// names. Filters <code>FeatureGroup</code>s by name.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination of <code>ListFeatureGroups</code> results.
  ///
  /// Parameter [offlineStoreStatusEquals] :
  /// An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code>
  /// status.
  ///
  /// Parameter [sortBy] :
  /// The value on which the feature group list is sorted.
  ///
  /// Parameter [sortOrder] :
  /// The order in which feature groups are listed.
  Future<ListFeatureGroupsResponse> listFeatureGroups({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    FeatureGroupStatus? featureGroupStatusEquals,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    OfflineStoreStatusValue? offlineStoreStatusEquals,
    FeatureGroupSortBy? sortBy,
    FeatureGroupSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      1,
      64,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListFeatureGroups'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (featureGroupStatusEquals != null)
          'FeatureGroupStatusEquals': featureGroupStatusEquals.toValue(),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (offlineStoreStatusEquals != null)
          'OfflineStoreStatusEquals': offlineStoreStatusEquals.toValue(),
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListFeatureGroupsResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the flow definitions in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only flow definitions with a creation time greater
  /// than or equal to the specified timestamp.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only flow definitions that were created before the
  /// specified timestamp.
  ///
  /// Parameter [maxResults] :
  /// The total number of items to return. If the total number of available
  /// items is more than the value specified in <code>MaxResults</code>, then a
  /// <code>NextToken</code> will be provided in the output that you can use to
  /// resume pagination.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination.
  ///
  /// Parameter [sortOrder] :
  /// An optional value that specifies whether you want the results sorted in
  /// <code>Ascending</code> or <code>Descending</code> order.
  Future<ListFlowDefinitionsResponse> listFlowDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nextToken,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListFlowDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListFlowDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the human task user interfaces in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only human task user interfaces with a creation time
  /// greater than or equal to the specified timestamp.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only human task user interfaces that were created
  /// before the specified timestamp.
  ///
  /// Parameter [maxResults] :
  /// The total number of items to return. If the total number of available
  /// items is more than the value specified in <code>MaxResults</code>, then a
  /// <code>NextToken</code> will be provided in the output that you can use to
  /// resume pagination.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination.
  ///
  /// Parameter [sortOrder] :
  /// An optional value that specifies whether you want the results sorted in
  /// <code>Ascending</code> or <code>Descending</code> order.
  Future<ListHumanTaskUisResponse> listHumanTaskUis({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nextToken,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHumanTaskUis'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListHumanTaskUisResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of <a>HyperParameterTuningJobSummary</a> objects that describe
  /// the hyperparameter tuning jobs launched in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only tuning jobs that were created after the
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only tuning jobs that were created before the
  /// specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only tuning jobs that were modified after the
  /// specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only tuning jobs that were modified before the
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of tuning jobs to return. The default value is 10.
  ///
  /// Parameter [nameContains] :
  /// A string in the tuning job name. This filter returns only tuning jobs
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListHyperParameterTuningJobs</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of tuning jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only tuning jobs with the specified status.
  Future<ListHyperParameterTuningJobsResponse> listHyperParameterTuningJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    HyperParameterTuningJobSortByOptions? sortBy,
    SortOrder? sortOrder,
    HyperParameterTuningJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHyperParameterTuningJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListHyperParameterTuningJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the versions of a specified image and their properties. The list can
  /// be filtered by creation time or modified time.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to list the versions of.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only versions created on or after the specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only versions created on or before the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only versions modified on or after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only versions modified on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of versions to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListImageVersions</code> didn't return the
  /// full set of versions, the call returns a token for getting the next set of
  /// versions.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CREATION_TIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>DESCENDING</code>.
  Future<ListImageVersionsResponse> listImageVersions({
    required String imageName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nextToken,
    ImageVersionSortBy? sortBy,
    ImageVersionSortOrder? sortOrder,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListImageVersions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListImageVersionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the images in your account and their properties. The list can be
  /// filtered by creation time or modified time, and whether the image name
  /// contains a specified string.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only images created on or after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only images created on or before the specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only images modified on or after the specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only images modified on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of images to return in the response. The default value
  /// is 10.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns only images whose name contains the specified
  /// string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListImages</code> didn't return the full set
  /// of images, the call returns a token for getting the next set of images.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CREATION_TIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>DESCENDING</code>.
  Future<ListImagesResponse> listImages({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ImageSortBy? sortBy,
    ImageSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListImages'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListImagesResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of labeling jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only labeling jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only labeling jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only labeling jobs modified after the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only labeling jobs modified before the specified
  /// time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of labeling jobs to return in each page of the
  /// response.
  ///
  /// Parameter [nameContains] :
  /// A string in the labeling job name. This filter returns only labeling jobs
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListLabelingJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of labeling jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only labeling jobs with a specific status.
  Future<ListLabelingJobsResponse> listLabelingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    LabelingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListLabelingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListLabelingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of labeling jobs assigned to a specified work team.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [workteamArn] :
  /// The Amazon Resource Name (ARN) of the work team for which you want to see
  /// labeling jobs for.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only labeling jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only labeling jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [jobReferenceCodeContains] :
  /// A filter the limits jobs to only the ones whose job reference code
  /// contains the specified string.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of labeling jobs to return in each page of the
  /// response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListLabelingJobsForWorkteam</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of labeling jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListLabelingJobsForWorkteamResponse> listLabelingJobsForWorkteam({
    required String workteamArn,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? jobReferenceCodeContains,
    int? maxResults,
    String? nextToken,
    ListLabelingJobsForWorkteamSortByOptions? sortBy,
    SortOrder? sortOrder,
  }) async {
    ArgumentError.checkNotNull(workteamArn, 'workteamArn');
    _s.validateStringLength(
      'workteamArn',
      workteamArn,
      0,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'jobReferenceCodeContains',
      jobReferenceCodeContains,
      1,
      255,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListLabelingJobsForWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamArn': workteamArn,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (jobReferenceCodeContains != null)
          'JobReferenceCodeContains': jobReferenceCodeContains,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListLabelingJobsForWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Lists model bias jobs definitions that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model bias jobs created after a specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model bias jobs created before a specified
  /// time.
  ///
  /// Parameter [endpointName] :
  /// Name of the endpoint to monitor for model bias.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model bias jobs to return in the response. The
  /// default value is 10.
  ///
  /// Parameter [nameContains] :
  /// Filter for model bias jobs whose name contains a specified string.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort results by the <code>Name</code> or
  /// <code>CreationTime</code> field. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  Future<ListModelBiasJobDefinitionsResponse> listModelBiasJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelBiasJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListModelBiasJobDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists model explainability job definitions that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model explainability jobs created after a
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model explainability jobs created before a
  /// specified time.
  ///
  /// Parameter [endpointName] :
  /// Name of the endpoint to monitor for model explainability.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of jobs to return in the response. The default value is
  /// 10.
  ///
  /// Parameter [nameContains] :
  /// Filter for model explainability jobs whose name contains a specified
  /// string.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort results by the <code>Name</code> or
  /// <code>CreationTime</code> field. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  Future<ListModelExplainabilityJobDefinitionsResponse>
      listModelExplainabilityJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelExplainabilityJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListModelExplainabilityJobDefinitionsResponse.fromJson(
        jsonResponse.body);
  }

  /// Gets a list of the model groups in your Amazon Web Services account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model groups created after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model groups created before the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the model group name. This filter returns only model groups
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListModelPackageGroups</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of model groups, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListModelPackageGroupsOutput> listModelPackageGroups({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ModelPackageGroupSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelPackageGroups'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListModelPackageGroupsOutput.fromJson(jsonResponse.body);
  }

  /// Lists the model packages that have been created.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model packages created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model packages created before the specified
  /// time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model packages to return in the response.
  ///
  /// Parameter [modelApprovalStatus] :
  /// A filter that returns only the model packages with the specified approval
  /// status.
  ///
  /// Parameter [modelPackageGroupName] :
  /// A filter that returns only model versions that belong to the specified
  /// model group.
  ///
  /// Parameter [modelPackageType] :
  /// A filter that returns onlyl the model packages of the specified type. This
  /// can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>VERSIONED</code> - List only versioned models.
  /// </li>
  /// <li>
  /// <code>UNVERSIONED</code> - List only unversioined models.
  /// </li>
  /// <li>
  /// <code>BOTH</code> - List both versioned and unversioned models.
  /// </li>
  /// </ul>
  ///
  /// Parameter [nameContains] :
  /// A string in the model package name. This filter returns only model
  /// packages whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModelPackages</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model packages, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  Future<ListModelPackagesOutput> listModelPackages({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    ModelApprovalStatus? modelApprovalStatus,
    String? modelPackageGroupName,
    ModelPackageType? modelPackageType,
    String? nameContains,
    String? nextToken,
    ModelPackageSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      170,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelPackages'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelApprovalStatus != null)
          'ModelApprovalStatus': modelApprovalStatus.toValue(),
        if (modelPackageGroupName != null)
          'ModelPackageGroupName': modelPackageGroupName,
        if (modelPackageType != null)
          'ModelPackageType': modelPackageType.toValue(),
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListModelPackagesOutput.fromJson(jsonResponse.body);
  }

  /// Gets a list of model quality monitoring job definitions in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model quality monitoring job definitions
  /// created after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model quality monitoring job definitions
  /// created before the specified time.
  ///
  /// Parameter [endpointName] :
  /// A filter that returns only model quality monitoring job definitions that
  /// are associated with the specified endpoint.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a call to
  /// <code>ListModelQualityJobDefinitions</code>.
  ///
  /// Parameter [nameContains] :
  /// A string in the transform job name. This filter returns only model quality
  /// monitoring job definitions whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListModelQualityJobDefinitions</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of model quality monitoring job definitions, use the
  /// token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  Future<ListModelQualityJobDefinitionsResponse>
      listModelQualityJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelQualityJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListModelQualityJobDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists models created with the <code>CreateModel</code> API.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only models with a creation time greater than or
  /// equal to the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only models created before the specified time
  /// (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of models to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the training job name. This filter returns only models in the
  /// training job whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModels</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of models, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sorts the list of results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  Future<ListModelsOutput> listModels({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ModelSortKey? sortBy,
    OrderKey? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModels'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListModelsOutput.fromJson(jsonResponse.body);
  }

  /// Returns list of all monitoring job executions.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only jobs created after a specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only jobs created before a specified time.
  ///
  /// Parameter [endpointName] :
  /// Name of a specific endpoint to fetch jobs for.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only jobs modified before a specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only jobs modified after a specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of jobs to return in the response. The default value is
  /// 10.
  ///
  /// Parameter [monitoringJobDefinitionName] :
  /// Gets a list of the monitoring job runs of the specified monitoring job
  /// definitions.
  ///
  /// Parameter [monitoringScheduleName] :
  /// Name of a specific schedule to fetch jobs for.
  ///
  /// Parameter [monitoringTypeEquals] :
  /// A filter that returns only the monitoring job runs of the specified
  /// monitoring type.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [scheduledTimeAfter] :
  /// Filter for jobs scheduled after a specified time.
  ///
  /// Parameter [scheduledTimeBefore] :
  /// Filter for jobs scheduled before a specified time.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
  /// <code>ScheduledTime</code> field. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only jobs with a specific status.
  Future<ListMonitoringExecutionsResponse> listMonitoringExecutions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? monitoringJobDefinitionName,
    String? monitoringScheduleName,
    MonitoringType? monitoringTypeEquals,
    String? nextToken,
    DateTime? scheduledTimeAfter,
    DateTime? scheduledTimeBefore,
    MonitoringExecutionSortKey? sortBy,
    SortOrder? sortOrder,
    ExecutionStatus? statusEquals,
  }) async {
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'monitoringJobDefinitionName',
      monitoringJobDefinitionName,
      1,
      63,
    );
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListMonitoringExecutions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (monitoringJobDefinitionName != null)
          'MonitoringJobDefinitionName': monitoringJobDefinitionName,
        if (monitoringScheduleName != null)
          'MonitoringScheduleName': monitoringScheduleName,
        if (monitoringTypeEquals != null)
          'MonitoringTypeEquals': monitoringTypeEquals.toValue(),
        if (nextToken != null) 'NextToken': nextToken,
        if (scheduledTimeAfter != null)
          'ScheduledTimeAfter': unixTimestampToJson(scheduledTimeAfter),
        if (scheduledTimeBefore != null)
          'ScheduledTimeBefore': unixTimestampToJson(scheduledTimeBefore),
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListMonitoringExecutionsResponse.fromJson(jsonResponse.body);
  }

  /// Returns list of all monitoring schedules.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only monitoring schedules created after a specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only monitoring schedules created before a specified
  /// time.
  ///
  /// Parameter [endpointName] :
  /// Name of a specific endpoint to fetch schedules for.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only monitoring schedules modified after a specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only monitoring schedules modified before a
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of jobs to return in the response. The default value is
  /// 10.
  ///
  /// Parameter [monitoringJobDefinitionName] :
  /// Gets a list of the monitoring schedules for the specified monitoring job
  /// definition.
  ///
  /// Parameter [monitoringTypeEquals] :
  /// A filter that returns only the monitoring schedules for the specified
  /// monitoring type.
  ///
  /// Parameter [nameContains] :
  /// Filter for monitoring schedules whose name contains a specified string.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
  /// <code>ScheduledTime</code> field. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only monitoring schedules modified before a
  /// specified time.
  Future<ListMonitoringSchedulesResponse> listMonitoringSchedules({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? monitoringJobDefinitionName,
    MonitoringType? monitoringTypeEquals,
    String? nameContains,
    String? nextToken,
    MonitoringScheduleSortKey? sortBy,
    SortOrder? sortOrder,
    ScheduleStatus? statusEquals,
  }) async {
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'monitoringJobDefinitionName',
      monitoringJobDefinitionName,
      1,
      63,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListMonitoringSchedules'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (monitoringJobDefinitionName != null)
          'MonitoringJobDefinitionName': monitoringJobDefinitionName,
        if (monitoringTypeEquals != null)
          'MonitoringTypeEquals': monitoringTypeEquals.toValue(),
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListMonitoringSchedulesResponse.fromJson(jsonResponse.body);
  }

  /// Lists notebook instance lifestyle configurations created with the
  /// <a>CreateNotebookInstanceLifecycleConfig</a> API.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only lifecycle configurations that were created
  /// after the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only lifecycle configurations that were created
  /// before the specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only lifecycle configurations that were modified
  /// after the specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only lifecycle configurations that were modified
  /// before the specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of lifecycle configurations to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the lifecycle configuration name. This filter returns only
  /// lifecycle configurations whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of a <code>ListNotebookInstanceLifecycleConfigs</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// get the next set of lifecycle configurations, use the token in the next
  /// request.
  ///
  /// Parameter [sortBy] :
  /// Sorts the list of results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  Future<ListNotebookInstanceLifecycleConfigsOutput>
      listNotebookInstanceLifecycleConfigs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    NotebookInstanceLifecycleConfigSortKey? sortBy,
    NotebookInstanceLifecycleConfigSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListNotebookInstanceLifecycleConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListNotebookInstanceLifecycleConfigsOutput.fromJson(
        jsonResponse.body);
  }

  /// Returns a list of the Amazon SageMaker notebook instances in the
  /// requester's account in an Amazon Web Services Region.
  ///
  /// Parameter [additionalCodeRepositoryEquals] :
  /// A filter that returns only notebook instances with associated with the
  /// specified git repository.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only notebook instances that were created after the
  /// specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only notebook instances that were created before the
  /// specified time (timestamp).
  ///
  /// Parameter [defaultCodeRepositoryContains] :
  /// A string in the name or URL of a Git repository associated with this
  /// notebook instance. This filter returns only notebook instances associated
  /// with a git repository with a name that contains the specified string.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only notebook instances that were modified after the
  /// specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only notebook instances that were modified before
  /// the specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of notebook instances to return.
  ///
  /// Parameter [nameContains] :
  /// A string in the notebook instances' name. This filter returns only
  /// notebook instances whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to the <code>ListNotebookInstances</code> is
  /// truncated, the response includes a <code>NextToken</code>. You can use
  /// this token in your subsequent <code>ListNotebookInstances</code> request
  /// to fetch the next set of notebook instances.
  /// <note>
  /// You might specify a filter or a sort order in your request. When response
  /// is truncated, you must use the same values for the filer and sort order in
  /// the next request.
  /// </note>
  ///
  /// Parameter [notebookInstanceLifecycleConfigNameContains] :
  /// A string in the name of a notebook instances lifecycle configuration
  /// associated with this notebook instance. This filter returns only notebook
  /// instances associated with a lifecycle configuration with a name that
  /// contains the specified string.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only notebook instances with the specified status.
  Future<ListNotebookInstancesOutput> listNotebookInstances({
    String? additionalCodeRepositoryEquals,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? defaultCodeRepositoryContains,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    String? notebookInstanceLifecycleConfigNameContains,
    NotebookInstanceSortKey? sortBy,
    NotebookInstanceSortOrder? sortOrder,
    NotebookInstanceStatus? statusEquals,
  }) async {
    _s.validateStringLength(
      'additionalCodeRepositoryEquals',
      additionalCodeRepositoryEquals,
      1,
      1024,
    );
    _s.validateStringLength(
      'defaultCodeRepositoryContains',
      defaultCodeRepositoryContains,
      0,
      1024,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'notebookInstanceLifecycleConfigNameContains',
      notebookInstanceLifecycleConfigNameContains,
      0,
      63,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListNotebookInstances'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (additionalCodeRepositoryEquals != null)
          'AdditionalCodeRepositoryEquals': additionalCodeRepositoryEquals,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (defaultCodeRepositoryContains != null)
          'DefaultCodeRepositoryContains': defaultCodeRepositoryContains,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (notebookInstanceLifecycleConfigNameContains != null)
          'NotebookInstanceLifecycleConfigNameContains':
              notebookInstanceLifecycleConfigNameContains,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListNotebookInstancesOutput.fromJson(jsonResponse.body);
  }

  /// Gets a list of <code>PipeLineExecutionStep</code> objects.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [maxResults] :
  /// The maximum number of pipeline execution steps to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListPipelineExecutionSteps</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of pipeline execution steps, use the token in the
  /// next request.
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [sortOrder] :
  /// The field by which to sort results. The default is
  /// <code>CreatedTime</code>.
  Future<ListPipelineExecutionStepsResponse> listPipelineExecutionSteps({
    int? maxResults,
    String? nextToken,
    String? pipelineExecutionArn,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'pipelineExecutionArn',
      pipelineExecutionArn,
      0,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelineExecutionSteps'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (pipelineExecutionArn != null)
          'PipelineExecutionArn': pipelineExecutionArn,
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListPipelineExecutionStepsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the pipeline executions.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns the pipeline executions that were created after a
  /// specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns the pipeline executions that were created before a
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of pipeline executions to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListPipelineExecutions</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of pipeline executions, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreatedTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  Future<ListPipelineExecutionsResponse> listPipelineExecutions({
    required String pipelineName,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortPipelineExecutionsBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    ArgumentError.checkNotNull(pipelineName, 'pipelineName');
    _s.validateStringLength(
      'pipelineName',
      pipelineName,
      1,
      256,
      isRequired: true,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelineExecutions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListPipelineExecutionsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of parameters for a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of parameters to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous
  /// <code>ListPipelineParametersForExecution</code> request was truncated, the
  /// response includes a <code>NextToken</code>. To retrieve the next set of
  /// parameters, use the token in the next request.
  Future<ListPipelineParametersForExecutionResponse>
      listPipelineParametersForExecution({
    required String pipelineExecutionArn,
    int? maxResults,
    String? nextToken,
  }) async {
    ArgumentError.checkNotNull(pipelineExecutionArn, 'pipelineExecutionArn');
    _s.validateStringLength(
      'pipelineExecutionArn',
      pipelineExecutionArn,
      0,
      256,
      isRequired: true,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelineParametersForExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListPipelineParametersForExecutionResponse.fromJson(
        jsonResponse.body);
  }

  /// Gets a list of pipelines.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns the pipelines that were created after a specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns the pipelines that were created before a specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of pipelines to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListPipelines</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of pipelines, use the token in the next request.
  ///
  /// Parameter [pipelineNamePrefix] :
  /// The prefix of the pipeline name.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreatedTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  Future<ListPipelinesResponse> listPipelines({
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    String? pipelineNamePrefix,
    SortPipelinesBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'pipelineNamePrefix',
      pipelineNamePrefix,
      1,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelines'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (pipelineNamePrefix != null)
          'PipelineNamePrefix': pipelineNamePrefix,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListPipelinesResponse.fromJson(jsonResponse.body);
  }

  /// Lists processing jobs that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only processing jobs created after the specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only processing jobs created after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only processing jobs modified after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only processing jobs modified before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of processing jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the processing job name. This filter returns only processing
  /// jobs whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListProcessingJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of processing jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only processing jobs with a specific status.
  Future<ListProcessingJobsResponse> listProcessingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    ProcessingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListProcessingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListProcessingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the projects in an Amazon Web Services account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns the projects that were created after a specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns the projects that were created before a specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of projects to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns the projects whose name contains a specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListProjects</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of projects, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListProjectsOutput> listProjects({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ProjectSortBy? sortBy,
    ProjectSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      1,
      32,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListProjects'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListProjectsOutput.fromJson(jsonResponse.body);
  }

  /// Gets a list of the work teams that you are subscribed to in the Amazon Web
  /// Services Marketplace. The list may be empty if no work team satisfies the
  /// filter specified in the <code>NameContains</code> parameter.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of work teams to return in each page of the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the work team name. This filter returns only work teams whose
  /// name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListSubscribedWorkteams</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of labeling jobs, use the token in the next request.
  Future<ListSubscribedWorkteamsResponse> listSubscribedWorkteams({
    int? maxResults,
    String? nameContains,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      1,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListSubscribedWorkteams'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListSubscribedWorkteamsResponse.fromJson(jsonResponse.body);
  }

  /// Returns the tags for the specified Amazon SageMaker resource.
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the resource whose tags you want to
  /// retrieve.
  ///
  /// Parameter [maxResults] :
  /// Maximum number of tags to return.
  ///
  /// Parameter [nextToken] :
  /// If the response to the previous <code>ListTags</code> request is
  /// truncated, Amazon SageMaker returns this token. To retrieve the next set
  /// of tags, use it in the subsequent request.
  Future<ListTagsOutput> listTags({
    required String resourceArn,
    int? maxResults,
    String? nextToken,
  }) async {
    ArgumentError.checkNotNull(resourceArn, 'resourceArn');
    _s.validateStringLength(
      'resourceArn',
      resourceArn,
      0,
      256,
      isRequired: true,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      50,
      1152921504606846976,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTags'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ResourceArn': resourceArn,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListTagsOutput.fromJson(jsonResponse.body);
  }

  /// Lists training jobs.
  /// <note>
  /// When <code>StatusEquals</code> and <code>MaxResults</code> are set at the
  /// same time, the <code>MaxResults</code> number of training jobs are first
  /// retrieved ignoring the <code>StatusEquals</code> parameter and then they
  /// are filtered by the <code>StatusEquals</code> parameter, which is returned
  /// as a response.
  ///
  /// For example, if <code>ListTrainingJobs</code> is invoked with the
  /// following parameters:
  ///
  /// <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code>
  ///
  /// First, 100 trainings jobs with any status, including those other than
  /// <code>InProgress</code>, are selected (sorted according to the creation
  /// time, from the most current to the oldest). Next, those with a status of
  /// <code>InProgress</code> are returned.
  ///
  /// You can quickly test the API using the following Amazon Web Services CLI
  /// code.
  ///
  /// <code>aws sagemaker list-training-jobs --max-results 100 --status-equals
  /// InProgress</code>
  /// </note>
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only training jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only training jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only training jobs modified after the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only training jobs modified before the specified
  /// time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of training jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the training job name. This filter returns only training jobs
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListTrainingJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of training jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only training jobs with a specific status.
  Future<ListTrainingJobsResponse> listTrainingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    TrainingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrainingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListTrainingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of <a>TrainingJobSummary</a> objects that describe the
  /// training jobs that a hyperparameter tuning job launched.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job whose training jobs you want to list.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of training jobs to return. The default value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous
  /// <code>ListTrainingJobsForHyperParameterTuningJob</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of training jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// If the value of this field is <code>FinalObjectiveMetricValue</code>, any
  /// training jobs that did not return an objective metric are not listed.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only training jobs with the specified status.
  Future<ListTrainingJobsForHyperParameterTuningJobResponse>
      listTrainingJobsForHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
    int? maxResults,
    String? nextToken,
    TrainingJobSortByOptions? sortBy,
    SortOrder? sortOrder,
    TrainingJobStatus? statusEquals,
  }) async {
    ArgumentError.checkNotNull(
        hyperParameterTuningJobName, 'hyperParameterTuningJobName');
    _s.validateStringLength(
      'hyperParameterTuningJobName',
      hyperParameterTuningJobName,
      1,
      32,
      isRequired: true,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrainingJobsForHyperParameterTuningJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListTrainingJobsForHyperParameterTuningJobResponse.fromJson(
        jsonResponse.body);
  }

  /// Lists transform jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only transform jobs created after the specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only transform jobs created before the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only transform jobs modified after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only transform jobs modified before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of transform jobs to return in the response. The
  /// default value is <code>10</code>.
  ///
  /// Parameter [nameContains] :
  /// A string in the transform job name. This filter returns only transform
  /// jobs whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListTransformJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of transform jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only transform jobs with a specific status.
  Future<ListTransformJobsResponse> listTransformJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    TransformJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      0,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTransformJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (statusEquals != null) 'StatusEquals': statusEquals.toValue(),
      },
    );

    return ListTransformJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the trial components in your account. You can sort the list by trial
  /// component name or creation time. You can filter the list to show only
  /// components that were created in a specific time range. You can also filter
  /// on one of the following:
  ///
  /// <ul>
  /// <li>
  /// <code>ExperimentName</code>
  /// </li>
  /// <li>
  /// <code>SourceArn</code>
  /// </li>
  /// <li>
  /// <code>TrialName</code>
  /// </li>
  /// </ul>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only components created after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only components created before the specified time.
  ///
  /// Parameter [experimentName] :
  /// A filter that returns only components that are part of the specified
  /// experiment. If you specify <code>ExperimentName</code>, you can't filter
  /// by <code>SourceArn</code> or <code>TrialName</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of components to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListTrialComponents</code> didn't return the
  /// full set of components, the call returns a token for getting the next set
  /// of components.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceArn] :
  /// A filter that returns only components that have the specified source
  /// Amazon Resource Name (ARN). If you specify <code>SourceArn</code>, you
  /// can't filter by <code>ExperimentName</code> or <code>TrialName</code>.
  ///
  /// Parameter [trialName] :
  /// A filter that returns only components that are part of the specified
  /// trial. If you specify <code>TrialName</code>, you can't filter by
  /// <code>ExperimentName</code> or <code>SourceArn</code>.
  Future<ListTrialComponentsResponse> listTrialComponents({
    DateTime? createdAfter,
    DateTime? createdBefore,
    String? experimentName,
    int? maxResults,
    String? nextToken,
    SortTrialComponentsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceArn,
    String? trialName,
  }) async {
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'sourceArn',
      sourceArn,
      0,
      256,
    );
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrialComponents'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (experimentName != null) 'ExperimentName': experimentName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (sourceArn != null) 'SourceArn': sourceArn,
        if (trialName != null) 'TrialName': trialName,
      },
    );

    return ListTrialComponentsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the trials in your account. Specify an experiment name to limit the
  /// list to the trials that are part of that experiment. Specify a trial
  /// component name to limit the list to the trials that associated with that
  /// trial component. The list can be filtered to show only trials that were
  /// created in a specific time range. The list can be sorted by trial name or
  /// creation time.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only trials created after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only trials created before the specified time.
  ///
  /// Parameter [experimentName] :
  /// A filter that returns only trials that are part of the specified
  /// experiment.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of trials to return in the response. The default value
  /// is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListTrials</code> didn't return the full set
  /// of trials, the call returns a token for getting the next set of trials.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [trialComponentName] :
  /// A filter that returns only trials that are associated with the specified
  /// trial component.
  Future<ListTrialsResponse> listTrials({
    DateTime? createdAfter,
    DateTime? createdBefore,
    String? experimentName,
    int? maxResults,
    String? nextToken,
    SortTrialsBy? sortBy,
    SortOrder? sortOrder,
    String? trialComponentName,
  }) async {
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrials'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (experimentName != null) 'ExperimentName': experimentName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (trialComponentName != null)
          'TrialComponentName': trialComponentName,
      },
    );

    return ListTrialsResponse.fromJson(jsonResponse.body);
  }

  /// Lists user profiles.
  ///
  /// Parameter [domainIdEquals] :
  /// A parameter by which to filter the results.
  ///
  /// Parameter [maxResults] :
  /// Returns a list up to a specified limit.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is CreationTime.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is Ascending.
  ///
  /// Parameter [userProfileNameContains] :
  /// A parameter by which to filter the results.
  Future<ListUserProfilesResponse> listUserProfiles({
    String? domainIdEquals,
    int? maxResults,
    String? nextToken,
    UserProfileSortKey? sortBy,
    SortOrder? sortOrder,
    String? userProfileNameContains,
  }) async {
    _s.validateStringLength(
      'domainIdEquals',
      domainIdEquals,
      0,
      63,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'userProfileNameContains',
      userProfileNameContains,
      0,
      63,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListUserProfiles'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (domainIdEquals != null) 'DomainIdEquals': domainIdEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
        if (userProfileNameContains != null)
          'UserProfileNameContains': userProfileNameContains,
      },
    );

    return ListUserProfilesResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to list all private and vendor workforces in an Amazon
  /// Web Services Region. Note that you can only have one private workforce per
  /// Amazon Web Services Region.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of workforces returned in the response.
  ///
  /// Parameter [nameContains] :
  /// A filter you can use to search for workforces using part of the workforce
  /// name.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination.
  ///
  /// Parameter [sortBy] :
  /// Sort workforces using the workforce name or creation date.
  ///
  /// Parameter [sortOrder] :
  /// Sort workforces in ascending or descending order.
  Future<ListWorkforcesResponse> listWorkforces({
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListWorkforcesSortByOptions? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      1,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListWorkforces'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListWorkforcesResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of private work teams that you have defined in a region. The
  /// list may be empty if no work team satisfies the filter specified in the
  /// <code>NameContains</code> parameter.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of work teams to return in each page of the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the work team's name. This filter returns only work teams
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListWorkteams</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of labeling jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListWorkteamsResponse> listWorkteams({
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListWorkteamsSortByOptions? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nameContains',
      nameContains,
      1,
      63,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListWorkteams'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.toValue(),
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return ListWorkteamsResponse.fromJson(jsonResponse.body);
  }

  /// Adds a resouce policy to control access to a model group. For information
  /// about resoure policies, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
  /// policies and resource-based policies</a> in the <i>Amazon Web Services
  /// Identity and Access Management User Guide.</i>.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group to add a resource policy to.
  ///
  /// Parameter [resourcePolicy] :
  /// The resource policy for the model group.
  Future<PutModelPackageGroupPolicyOutput> putModelPackageGroupPolicy({
    required String modelPackageGroupName,
    required String resourcePolicy,
  }) async {
    ArgumentError.checkNotNull(modelPackageGroupName, 'modelPackageGroupName');
    _s.validateStringLength(
      'modelPackageGroupName',
      modelPackageGroupName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(resourcePolicy, 'resourcePolicy');
    _s.validateStringLength(
      'resourcePolicy',
      resourcePolicy,
      1,
      20480,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.PutModelPackageGroupPolicy'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
        'ResourcePolicy': resourcePolicy,
      },
    );

    return PutModelPackageGroupPolicyOutput.fromJson(jsonResponse.body);
  }

  /// Register devices.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  ///
  /// Parameter [devices] :
  /// A list of devices to register with SageMaker Edge Manager.
  ///
  /// Parameter [tags] :
  /// The tags associated with devices.
  Future<void> registerDevices({
    required String deviceFleetName,
    required List<Device> devices,
    List<Tag>? tags,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(devices, 'devices');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.RegisterDevices'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'Devices': devices,
        if (tags != null) 'Tags': tags,
      },
    );
  }

  /// Renders the UI template so that you can preview the worker's experience.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) that has access to the S3 objects that are
  /// used by the template.
  ///
  /// Parameter [task] :
  /// A <code>RenderableTask</code> object containing a representative task to
  /// render.
  ///
  /// Parameter [humanTaskUiArn] :
  /// The <code>HumanTaskUiArn</code> of the worker UI that you want to render.
  /// Do not provide a <code>HumanTaskUiArn</code> if you use the
  /// <code>UiTemplate</code> parameter.
  ///
  /// See a list of available Human Ui Amazon Resource Names (ARNs) in
  /// <a>UiConfig</a>.
  ///
  /// Parameter [uiTemplate] :
  /// A <code>Template</code> object containing the worker UI template to
  /// render.
  Future<RenderUiTemplateResponse> renderUiTemplate({
    required String roleArn,
    required RenderableTask task,
    String? humanTaskUiArn,
    UiTemplate? uiTemplate,
  }) async {
    ArgumentError.checkNotNull(roleArn, 'roleArn');
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
      isRequired: true,
    );
    ArgumentError.checkNotNull(task, 'task');
    _s.validateStringLength(
      'humanTaskUiArn',
      humanTaskUiArn,
      0,
      1024,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.RenderUiTemplate'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'RoleArn': roleArn,
        'Task': task,
        if (humanTaskUiArn != null) 'HumanTaskUiArn': humanTaskUiArn,
        if (uiTemplate != null) 'UiTemplate': uiTemplate,
      },
    );

    return RenderUiTemplateResponse.fromJson(jsonResponse.body);
  }

  /// Finds Amazon SageMaker resources that match a search query. Matching
  /// resources are returned as a list of <code>SearchRecord</code> objects in
  /// the response. You can sort the search results by any resource property in
  /// a ascending or descending order.
  ///
  /// You can query against the following value types: numeric, text, Boolean,
  /// and timestamp.
  ///
  /// Parameter [resource] :
  /// The name of the Amazon SageMaker resource to search for.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return.
  ///
  /// Parameter [nextToken] :
  /// If more than <code>MaxResults</code> resources match the specified
  /// <code>SearchExpression</code>, the response includes a
  /// <code>NextToken</code>. The <code>NextToken</code> can be passed to the
  /// next <code>SearchRequest</code> to continue retrieving results.
  ///
  /// Parameter [searchExpression] :
  /// A Boolean conditional statement. Resources must satisfy this condition to
  /// be included in search results. You must provide at least one
  /// subexpression, filter, or nested filter. The maximum number of recursive
  /// <code>SubExpressions</code>, <code>NestedFilters</code>, and
  /// <code>Filters</code> that can be included in a
  /// <code>SearchExpression</code> object is 50.
  ///
  /// Parameter [sortBy] :
  /// The name of the resource property used to sort the
  /// <code>SearchResults</code>. The default is <code>LastModifiedTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// How <code>SearchResults</code> are ordered. Valid values are
  /// <code>Ascending</code> or <code>Descending</code>. The default is
  /// <code>Descending</code>.
  Future<SearchResponse> search({
    required ResourceType resource,
    int? maxResults,
    String? nextToken,
    SearchExpression? searchExpression,
    String? sortBy,
    SearchSortOrder? sortOrder,
  }) async {
    ArgumentError.checkNotNull(resource, 'resource');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      0,
      8192,
    );
    _s.validateStringLength(
      'sortBy',
      sortBy,
      1,
      255,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.Search'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Resource': resource.toValue(),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (searchExpression != null) 'SearchExpression': searchExpression,
        if (sortBy != null) 'SortBy': sortBy,
        if (sortOrder != null) 'SortOrder': sortOrder.toValue(),
      },
    );

    return SearchResponse.fromJson(jsonResponse.body);
  }

  /// Notifies the pipeline that the execution of a callback step failed, along
  /// with a message describing why. When a callback step is run, the pipeline
  /// generates a callback token and includes the token in a message sent to
  /// Amazon Simple Queue Service (Amazon SQS).
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [callbackToken] :
  /// The pipeline generated token from the Amazon SQS queue.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [failureReason] :
  /// A message describing why the step failed.
  Future<SendPipelineExecutionStepFailureResponse>
      sendPipelineExecutionStepFailure({
    required String callbackToken,
    String? clientRequestToken,
    String? failureReason,
  }) async {
    ArgumentError.checkNotNull(callbackToken, 'callbackToken');
    _s.validateStringLength(
      'callbackToken',
      callbackToken,
      10,
      10,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientRequestToken',
      clientRequestToken,
      32,
      128,
    );
    _s.validateStringLength(
      'failureReason',
      failureReason,
      0,
      256,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.SendPipelineExecutionStepFailure'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CallbackToken': callbackToken,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (failureReason != null) 'FailureReason': failureReason,
      },
    );

    return SendPipelineExecutionStepFailureResponse.fromJson(jsonResponse.body);
  }

  /// Notifies the pipeline that the execution of a callback step succeeded and
  /// provides a list of the step's output parameters. When a callback step is
  /// run, the pipeline generates a callback token and includes the token in a
  /// message sent to Amazon Simple Queue Service (Amazon SQS).
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [callbackToken] :
  /// The pipeline generated token from the Amazon SQS queue.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [outputParameters] :
  /// A list of the output parameters of the callback step.
  Future<SendPipelineExecutionStepSuccessResponse>
      sendPipelineExecutionStepSuccess({
    required String callbackToken,
    String? clientRequestToken,
    List<OutputParameter>? outputParameters,
  }) async {
    ArgumentError.checkNotNull(callbackToken, 'callbackToken');
    _s.validateStringLength(
      'callbackToken',
      callbackToken,
      10,
      10,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientRequestToken',
      clientRequestToken,
      32,
      128,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.SendPipelineExecutionStepSuccess'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CallbackToken': callbackToken,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (outputParameters != null) 'OutputParameters': outputParameters,
      },
    );

    return SendPipelineExecutionStepSuccessResponse.fromJson(jsonResponse.body);
  }

  /// Starts a previously stopped monitoring schedule.
  /// <note>
  /// By default, when you successfully create a new schedule, the status of a
  /// monitoring schedule is <code>scheduled</code>.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the schedule to start.
  Future<void> startMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    ArgumentError.checkNotNull(
        monitoringScheduleName, 'monitoringScheduleName');
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartMonitoringSchedule'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );
  }

  /// Launches an ML compute instance with the latest version of the libraries
  /// and attaches your ML storage volume. After configuring the notebook
  /// instance, Amazon SageMaker sets the notebook instance status to
  /// <code>InService</code>. A notebook instance's status must be
  /// <code>InService</code> before you can connect to your Jupyter notebook.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance to start.
  Future<void> startNotebookInstance({
    required String notebookInstanceName,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );
  }

  /// Starts a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [pipelineExecutionDescription] :
  /// The description of the pipeline execution.
  ///
  /// Parameter [pipelineExecutionDisplayName] :
  /// The display name of the pipeline execution.
  ///
  /// Parameter [pipelineParameters] :
  /// Contains a list of pipeline parameters. This list can be empty.
  Future<StartPipelineExecutionResponse> startPipelineExecution({
    required String pipelineName,
    String? clientRequestToken,
    String? pipelineExecutionDescription,
    String? pipelineExecutionDisplayName,
    List<Parameter>? pipelineParameters,
  }) async {
    ArgumentError.checkNotNull(pipelineName, 'pipelineName');
    _s.validateStringLength(
      'pipelineName',
      pipelineName,
      1,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientRequestToken',
      clientRequestToken,
      32,
      128,
    );
    _s.validateStringLength(
      'pipelineExecutionDescription',
      pipelineExecutionDescription,
      0,
      3072,
    );
    _s.validateStringLength(
      'pipelineExecutionDisplayName',
      pipelineExecutionDisplayName,
      1,
      82,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartPipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (pipelineExecutionDescription != null)
          'PipelineExecutionDescription': pipelineExecutionDescription,
        if (pipelineExecutionDisplayName != null)
          'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
        if (pipelineParameters != null)
          'PipelineParameters': pipelineParameters,
      },
    );

    return StartPipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// A method for forcing the termination of a running job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// The name of the object you are requesting.
  Future<void> stopAutoMLJob({
    required String autoMLJobName,
  }) async {
    ArgumentError.checkNotNull(autoMLJobName, 'autoMLJobName');
    _s.validateStringLength(
      'autoMLJobName',
      autoMLJobName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopAutoMLJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
      },
    );
  }

  /// Stops a model compilation job.
  ///
  /// To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal.
  /// This gracefully shuts the job down. If the job hasn't stopped, it sends
  /// the SIGKILL signal.
  ///
  /// When it receives a <code>StopCompilationJob</code> request, Amazon
  /// SageMaker changes the <a>CompilationJobSummary$CompilationJobStatus</a> of
  /// the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it
  /// sets the <a>CompilationJobSummary$CompilationJobStatus</a> to
  /// <code>Stopped</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the model compilation job to stop.
  Future<void> stopCompilationJob({
    required String compilationJobName,
  }) async {
    ArgumentError.checkNotNull(compilationJobName, 'compilationJobName');
    _s.validateStringLength(
      'compilationJobName',
      compilationJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopCompilationJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
      },
    );
  }

  /// Request to stop an edge packaging job.
  ///
  /// Parameter [edgePackagingJobName] :
  /// The name of the edge packaging job.
  Future<void> stopEdgePackagingJob({
    required String edgePackagingJobName,
  }) async {
    ArgumentError.checkNotNull(edgePackagingJobName, 'edgePackagingJobName');
    _s.validateStringLength(
      'edgePackagingJobName',
      edgePackagingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopEdgePackagingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgePackagingJobName': edgePackagingJobName,
      },
    );
  }

  /// Stops a running hyperparameter tuning job and all running training jobs
  /// that the tuning job launched.
  ///
  /// All model artifacts output from the training jobs are stored in Amazon
  /// Simple Storage Service (Amazon S3). All data that the training jobs write
  /// to Amazon CloudWatch Logs are still available in CloudWatch. After the
  /// tuning job moves to the <code>Stopped</code> state, it releases all
  /// reserved resources for the tuning job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job to stop.
  Future<void> stopHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
  }) async {
    ArgumentError.checkNotNull(
        hyperParameterTuningJobName, 'hyperParameterTuningJobName');
    _s.validateStringLength(
      'hyperParameterTuningJobName',
      hyperParameterTuningJobName,
      1,
      32,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopHyperParameterTuningJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
      },
    );
  }

  /// Stops a running labeling job. A job that is stopped cannot be restarted.
  /// Any results obtained before the job is stopped are placed in the Amazon S3
  /// output bucket.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [labelingJobName] :
  /// The name of the labeling job to stop.
  Future<void> stopLabelingJob({
    required String labelingJobName,
  }) async {
    ArgumentError.checkNotNull(labelingJobName, 'labelingJobName');
    _s.validateStringLength(
      'labelingJobName',
      labelingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopLabelingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'LabelingJobName': labelingJobName,
      },
    );
  }

  /// Stops a previously started monitoring schedule.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the schedule to stop.
  Future<void> stopMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    ArgumentError.checkNotNull(
        monitoringScheduleName, 'monitoringScheduleName');
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopMonitoringSchedule'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );
  }

  /// Terminates the ML compute instance. Before terminating the instance,
  /// Amazon SageMaker disconnects the ML storage volume from it. Amazon
  /// SageMaker preserves the ML storage volume. Amazon SageMaker stops charging
  /// you for the ML compute instance when you call
  /// <code>StopNotebookInstance</code>.
  ///
  /// To access data on the ML storage volume for a notebook instance that has
  /// been terminated, call the <code>StartNotebookInstance</code> API.
  /// <code>StartNotebookInstance</code> launches another ML compute instance,
  /// configures it, and attaches the preserved ML storage volume so you can
  /// continue your work.
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance to terminate.
  Future<void> stopNotebookInstance({
    required String notebookInstanceName,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );
  }

  /// Stops a pipeline execution.
  ///
  /// A pipeline execution won't stop while a callback step is running. When you
  /// call <code>StopPipelineExecution</code> on a pipeline execution with a
  /// running callback step, SageMaker Pipelines sends an additional Amazon SQS
  /// message to the specified SQS queue. The body of the SQS message contains a
  /// "Status" field which is set to "Stopping".
  ///
  /// You should add logic to your Amazon SQS message consumer to take any
  /// needed action (for example, resource cleanup) upon receipt of the message
  /// followed by a call to <code>SendPipelineExecutionStepSuccess</code> or
  /// <code>SendPipelineExecutionStepFailure</code>.
  ///
  /// Only when SageMaker Pipelines receives one of these calls will it stop the
  /// pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  Future<StopPipelineExecutionResponse> stopPipelineExecution({
    required String pipelineExecutionArn,
    String? clientRequestToken,
  }) async {
    ArgumentError.checkNotNull(pipelineExecutionArn, 'pipelineExecutionArn');
    _s.validateStringLength(
      'pipelineExecutionArn',
      pipelineExecutionArn,
      0,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'clientRequestToken',
      clientRequestToken,
      32,
      128,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopPipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
      },
    );

    return StopPipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Stops a processing job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [processingJobName] :
  /// The name of the processing job to stop.
  Future<void> stopProcessingJob({
    required String processingJobName,
  }) async {
    ArgumentError.checkNotNull(processingJobName, 'processingJobName');
    _s.validateStringLength(
      'processingJobName',
      processingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopProcessingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProcessingJobName': processingJobName,
      },
    );
  }

  /// Stops a training job. To stop a job, Amazon SageMaker sends the algorithm
  /// the <code>SIGTERM</code> signal, which delays job termination for 120
  /// seconds. Algorithms might use this 120-second window to save the model
  /// artifacts, so the results of the training is not lost.
  ///
  /// When it receives a <code>StopTrainingJob</code> request, Amazon SageMaker
  /// changes the status of the job to <code>Stopping</code>. After Amazon
  /// SageMaker stops the job, it sets the status to <code>Stopped</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trainingJobName] :
  /// The name of the training job to stop.
  Future<void> stopTrainingJob({
    required String trainingJobName,
  }) async {
    ArgumentError.checkNotNull(trainingJobName, 'trainingJobName');
    _s.validateStringLength(
      'trainingJobName',
      trainingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopTrainingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrainingJobName': trainingJobName,
      },
    );
  }

  /// Stops a transform job.
  ///
  /// When Amazon SageMaker receives a <code>StopTransformJob</code> request,
  /// the status of the job changes to <code>Stopping</code>. After Amazon
  /// SageMaker stops the job, the status is set to <code>Stopped</code>. When
  /// you stop a transform job before it is completed, Amazon SageMaker doesn't
  /// store the job's output in Amazon S3.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [transformJobName] :
  /// The name of the transform job to stop.
  Future<void> stopTransformJob({
    required String transformJobName,
  }) async {
    ArgumentError.checkNotNull(transformJobName, 'transformJobName');
    _s.validateStringLength(
      'transformJobName',
      transformJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopTransformJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TransformJobName': transformJobName,
      },
    );
  }

  /// Updates an action.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionName] :
  /// The name of the action to update.
  ///
  /// Parameter [description] :
  /// The new description for the action.
  ///
  /// Parameter [properties] :
  /// The new list of properties. Overwrites the current property list.
  ///
  /// Parameter [propertiesToRemove] :
  /// A list of properties to remove.
  ///
  /// Parameter [status] :
  /// The new status for the action.
  Future<UpdateActionResponse> updateAction({
    required String actionName,
    String? description,
    Map<String, String>? properties,
    List<String>? propertiesToRemove,
    ActionStatus? status,
  }) async {
    ArgumentError.checkNotNull(actionName, 'actionName');
    _s.validateStringLength(
      'actionName',
      actionName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      0,
      3072,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
        if (description != null) 'Description': description,
        if (properties != null) 'Properties': properties,
        if (propertiesToRemove != null)
          'PropertiesToRemove': propertiesToRemove,
        if (status != null) 'Status': status.toValue(),
      },
    );

    return UpdateActionResponse.fromJson(jsonResponse.body);
  }

  /// Updates the properties of an AppImageConfig.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig to update.
  ///
  /// Parameter [kernelGatewayImageConfig] :
  /// The new KernelGateway app to run on the image.
  Future<UpdateAppImageConfigResponse> updateAppImageConfig({
    required String appImageConfigName,
    KernelGatewayImageConfig? kernelGatewayImageConfig,
  }) async {
    ArgumentError.checkNotNull(appImageConfigName, 'appImageConfigName');
    _s.validateStringLength(
      'appImageConfigName',
      appImageConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateAppImageConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
        if (kernelGatewayImageConfig != null)
          'KernelGatewayImageConfig': kernelGatewayImageConfig,
      },
    );

    return UpdateAppImageConfigResponse.fromJson(jsonResponse.body);
  }

  /// Updates an artifact.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactArn] :
  /// The Amazon Resource Name (ARN) of the artifact to update.
  ///
  /// Parameter [artifactName] :
  /// The new name for the artifact.
  ///
  /// Parameter [properties] :
  /// The new list of properties. Overwrites the current property list.
  ///
  /// Parameter [propertiesToRemove] :
  /// A list of properties to remove.
  Future<UpdateArtifactResponse> updateArtifact({
    required String artifactArn,
    String? artifactName,
    Map<String, String>? properties,
    List<String>? propertiesToRemove,
  }) async {
    ArgumentError.checkNotNull(artifactArn, 'artifactArn');
    _s.validateStringLength(
      'artifactArn',
      artifactArn,
      0,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'artifactName',
      artifactName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ArtifactArn': artifactArn,
        if (artifactName != null) 'ArtifactName': artifactName,
        if (properties != null) 'Properties': properties,
        if (propertiesToRemove != null)
          'PropertiesToRemove': propertiesToRemove,
      },
    );

    return UpdateArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Updates the specified Git repository with the specified values.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository to update.
  ///
  /// Parameter [gitConfig] :
  /// The configuration of the git repository, including the URL and the Amazon
  /// Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that
  /// contains the credentials used to access the repository. The secret must
  /// have a staging label of <code>AWSCURRENT</code> and must be in the
  /// following format:
  ///
  /// <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code>
  Future<UpdateCodeRepositoryOutput> updateCodeRepository({
    required String codeRepositoryName,
    GitConfigForUpdate? gitConfig,
  }) async {
    ArgumentError.checkNotNull(codeRepositoryName, 'codeRepositoryName');
    _s.validateStringLength(
      'codeRepositoryName',
      codeRepositoryName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateCodeRepository'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
        if (gitConfig != null) 'GitConfig': gitConfig,
      },
    );

    return UpdateCodeRepositoryOutput.fromJson(jsonResponse.body);
  }

  /// Updates a context.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextName] :
  /// The name of the context to update.
  ///
  /// Parameter [description] :
  /// The new description for the context.
  ///
  /// Parameter [properties] :
  /// The new list of properties. Overwrites the current property list.
  ///
  /// Parameter [propertiesToRemove] :
  /// A list of properties to remove.
  Future<UpdateContextResponse> updateContext({
    required String contextName,
    String? description,
    Map<String, String>? properties,
    List<String>? propertiesToRemove,
  }) async {
    ArgumentError.checkNotNull(contextName, 'contextName');
    _s.validateStringLength(
      'contextName',
      contextName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      0,
      3072,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
        if (description != null) 'Description': description,
        if (properties != null) 'Properties': properties,
        if (propertiesToRemove != null)
          'PropertiesToRemove': propertiesToRemove,
      },
    );

    return UpdateContextResponse.fromJson(jsonResponse.body);
  }

  /// Updates a fleet of devices.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  ///
  /// Parameter [outputConfig] :
  /// Output configuration for storing sample data collected by the fleet.
  ///
  /// Parameter [description] :
  /// Description of the fleet.
  ///
  /// Parameter [enableIotRoleAlias] :
  /// Whether to create an Amazon Web Services IoT Role Alias during device
  /// fleet creation. The name of the role alias generated will match this
  /// pattern: "SageMakerEdge-{DeviceFleetName}".
  ///
  /// For example, if your device fleet is called "demo-fleet", the name of the
  /// role alias will be "SageMakerEdge-demo-fleet".
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the device.
  Future<void> updateDeviceFleet({
    required String deviceFleetName,
    required EdgeOutputConfig outputConfig,
    String? description,
    bool? enableIotRoleAlias,
    String? roleArn,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(outputConfig, 'outputConfig');
    _s.validateStringLength(
      'description',
      description,
      1,
      800,
    );
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateDeviceFleet'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'OutputConfig': outputConfig,
        if (description != null) 'Description': description,
        if (enableIotRoleAlias != null)
          'EnableIotRoleAlias': enableIotRoleAlias,
        if (roleArn != null) 'RoleArn': roleArn,
      },
    );
  }

  /// Updates one or more devices in a fleet.
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet the devices belong to.
  ///
  /// Parameter [devices] :
  /// List of devices to register with Edge Manager agent.
  Future<void> updateDevices({
    required String deviceFleetName,
    required List<Device> devices,
  }) async {
    ArgumentError.checkNotNull(deviceFleetName, 'deviceFleetName');
    _s.validateStringLength(
      'deviceFleetName',
      deviceFleetName,
      1,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(devices, 'devices');
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateDevices'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'Devices': devices,
      },
    );
  }

  /// Updates the default settings for new user profiles in the domain.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The ID of the domain to be updated.
  ///
  /// Parameter [defaultUserSettings] :
  /// A collection of settings.
  Future<UpdateDomainResponse> updateDomain({
    required String domainId,
    UserSettings? defaultUserSettings,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateDomain'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        if (defaultUserSettings != null)
          'DefaultUserSettings': defaultUserSettings,
      },
    );

    return UpdateDomainResponse.fromJson(jsonResponse.body);
  }

  /// Deploys the new <code>EndpointConfig</code> specified in the request,
  /// switches to using newly created endpoint, and then deletes resources
  /// provisioned for the endpoint using the previous
  /// <code>EndpointConfig</code> (there is no availability loss).
  ///
  /// When Amazon SageMaker receives the request, it sets the endpoint status to
  /// <code>Updating</code>. After updating the endpoint, it sets the status to
  /// <code>InService</code>. To check the status of an endpoint, use the
  /// <a>DescribeEndpoint</a> API.
  /// <note>
  /// You must not delete an <code>EndpointConfig</code> in use by an endpoint
  /// that is live or while the <code>UpdateEndpoint</code> or
  /// <code>CreateEndpoint</code> operations are being performed on the
  /// endpoint. To update an endpoint, you must create a new
  /// <code>EndpointConfig</code>.
  ///
  /// If you delete the <code>EndpointConfig</code> of an endpoint that is
  /// active or being created or updated you may lose visibility into the
  /// instance type the endpoint is using. The endpoint must be deleted in order
  /// to stop incurring charges.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the new endpoint configuration.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint whose configuration you want to update.
  ///
  /// Parameter [deploymentConfig] :
  /// The deployment configuration for the endpoint to be updated.
  ///
  /// Parameter [excludeRetainedVariantProperties] :
  /// When you are updating endpoint resources with
  /// <a>UpdateEndpointInput$RetainAllVariantProperties</a>, whose value is set
  /// to <code>true</code>, <code>ExcludeRetainedVariantProperties</code>
  /// specifies the list of type <a>VariantProperty</a> to override with the
  /// values provided by <code>EndpointConfig</code>. If you don't specify a
  /// value for <code>ExcludeAllVariantProperties</code>, no variant properties
  /// are overridden.
  ///
  /// Parameter [retainAllVariantProperties] :
  /// When updating endpoint resources, enables or disables the retention of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">variant
  /// properties</a>, such as the instance count or the variant weight. To
  /// retain the variant properties of an endpoint when updating it, set
  /// <code>RetainAllVariantProperties</code> to <code>true</code>. To use the
  /// variant properties specified in a new <code>EndpointConfig</code> call
  /// when updating an endpoint, set <code>RetainAllVariantProperties</code> to
  /// <code>false</code>. The default is <code>false</code>.
  Future<UpdateEndpointOutput> updateEndpoint({
    required String endpointConfigName,
    required String endpointName,
    DeploymentConfig? deploymentConfig,
    List<VariantProperty>? excludeRetainedVariantProperties,
    bool? retainAllVariantProperties,
  }) async {
    ArgumentError.checkNotNull(endpointConfigName, 'endpointConfigName');
    _s.validateStringLength(
      'endpointConfigName',
      endpointConfigName,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(endpointName, 'endpointName');
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateEndpoint'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
        'EndpointName': endpointName,
        if (deploymentConfig != null) 'DeploymentConfig': deploymentConfig,
        if (excludeRetainedVariantProperties != null)
          'ExcludeRetainedVariantProperties': excludeRetainedVariantProperties,
        if (retainAllVariantProperties != null)
          'RetainAllVariantProperties': retainAllVariantProperties,
      },
    );

    return UpdateEndpointOutput.fromJson(jsonResponse.body);
  }

  /// Updates variant weight of one or more variants associated with an existing
  /// endpoint, or capacity of one variant associated with an existing endpoint.
  /// When it receives the request, Amazon SageMaker sets the endpoint status to
  /// <code>Updating</code>. After updating the endpoint, it sets the status to
  /// <code>InService</code>. To check the status of an endpoint, use the
  /// <a>DescribeEndpoint</a> API.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [desiredWeightsAndCapacities] :
  /// An object that provides new capacity and weight values for a variant.
  ///
  /// Parameter [endpointName] :
  /// The name of an existing Amazon SageMaker endpoint.
  Future<UpdateEndpointWeightsAndCapacitiesOutput>
      updateEndpointWeightsAndCapacities({
    required List<DesiredWeightAndCapacity> desiredWeightsAndCapacities,
    required String endpointName,
  }) async {
    ArgumentError.checkNotNull(
        desiredWeightsAndCapacities, 'desiredWeightsAndCapacities');
    ArgumentError.checkNotNull(endpointName, 'endpointName');
    _s.validateStringLength(
      'endpointName',
      endpointName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateEndpointWeightsAndCapacities'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DesiredWeightsAndCapacities': desiredWeightsAndCapacities,
        'EndpointName': endpointName,
      },
    );

    return UpdateEndpointWeightsAndCapacitiesOutput.fromJson(jsonResponse.body);
  }

  /// Adds, updates, or removes the description of an experiment. Updates the
  /// display name of an experiment.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to update.
  ///
  /// Parameter [description] :
  /// The description of the experiment.
  ///
  /// Parameter [displayName] :
  /// The name of the experiment as displayed. The name doesn't need to be
  /// unique. If <code>DisplayName</code> isn't specified,
  /// <code>ExperimentName</code> is displayed.
  Future<UpdateExperimentResponse> updateExperiment({
    required String experimentName,
    String? description,
    String? displayName,
  }) async {
    ArgumentError.checkNotNull(experimentName, 'experimentName');
    _s.validateStringLength(
      'experimentName',
      experimentName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      0,
      3072,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
      },
    );

    return UpdateExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Updates the properties of a SageMaker image. To change the image's tags,
  /// use the <a>AddTags</a> and <a>DeleteTags</a> APIs.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to update.
  ///
  /// Parameter [deleteProperties] :
  /// A list of properties to delete. Only the <code>Description</code> and
  /// <code>DisplayName</code> properties can be deleted.
  ///
  /// Parameter [description] :
  /// The new description for the image.
  ///
  /// Parameter [displayName] :
  /// The new display name for the image.
  ///
  /// Parameter [roleArn] :
  /// The new Amazon Resource Name (ARN) for the IAM role that enables Amazon
  /// SageMaker to perform tasks on your behalf.
  Future<UpdateImageResponse> updateImage({
    required String imageName,
    List<String>? deleteProperties,
    String? description,
    String? displayName,
    String? roleArn,
  }) async {
    ArgumentError.checkNotNull(imageName, 'imageName');
    _s.validateStringLength(
      'imageName',
      imageName,
      1,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      1,
      512,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      128,
    );
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateImage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (deleteProperties != null) 'DeleteProperties': deleteProperties,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
        if (roleArn != null) 'RoleArn': roleArn,
      },
    );

    return UpdateImageResponse.fromJson(jsonResponse.body);
  }

  /// Updates a versioned model.
  ///
  /// Parameter [modelApprovalStatus] :
  /// The approval status of the model.
  ///
  /// Parameter [modelPackageArn] :
  /// The Amazon Resource Name (ARN) of the model.
  ///
  /// Parameter [approvalDescription] :
  /// A description for the approval status of the model.
  Future<UpdateModelPackageOutput> updateModelPackage({
    required ModelApprovalStatus modelApprovalStatus,
    required String modelPackageArn,
    String? approvalDescription,
  }) async {
    ArgumentError.checkNotNull(modelApprovalStatus, 'modelApprovalStatus');
    ArgumentError.checkNotNull(modelPackageArn, 'modelPackageArn');
    _s.validateStringLength(
      'modelPackageArn',
      modelPackageArn,
      1,
      2048,
      isRequired: true,
    );
    _s.validateStringLength(
      'approvalDescription',
      approvalDescription,
      0,
      1024,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelApprovalStatus': modelApprovalStatus.toValue(),
        'ModelPackageArn': modelPackageArn,
        if (approvalDescription != null)
          'ApprovalDescription': approvalDescription,
      },
    );

    return UpdateModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Updates a previously created schedule.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleConfig] :
  /// The configuration object that specifies the monitoring schedule and
  /// defines the monitoring job.
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the monitoring schedule. The name must be unique within an
  /// Amazon Web Services Region within an Amazon Web Services account.
  Future<UpdateMonitoringScheduleResponse> updateMonitoringSchedule({
    required MonitoringScheduleConfig monitoringScheduleConfig,
    required String monitoringScheduleName,
  }) async {
    ArgumentError.checkNotNull(
        monitoringScheduleConfig, 'monitoringScheduleConfig');
    ArgumentError.checkNotNull(
        monitoringScheduleName, 'monitoringScheduleName');
    _s.validateStringLength(
      'monitoringScheduleName',
      monitoringScheduleName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateMonitoringSchedule'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleConfig': monitoringScheduleConfig,
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );

    return UpdateMonitoringScheduleResponse.fromJson(jsonResponse.body);
  }

  /// Updates a notebook instance. NotebookInstance updates include upgrading or
  /// downgrading the ML compute instance used for your notebook instance to
  /// accommodate changes in your workload requirements.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance to update.
  ///
  /// Parameter [acceleratorTypes] :
  /// A list of the Elastic Inference (EI) instance types to associate with this
  /// notebook instance. Currently only one EI instance type can be associated
  /// with a notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using
  /// Elastic Inference in Amazon SageMaker</a>.
  ///
  /// Parameter [additionalCodeRepositories] :
  /// An array of up to three Git repositories to associate with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of
  /// your notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  ///
  /// Parameter [defaultCodeRepository] :
  /// The Git repository to associate with the notebook instance as its default
  /// code repository. This can be either the name of a Git repository stored as
  /// a resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open
  /// a notebook instance, it opens in the directory that contains this
  /// repository. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  ///
  /// Parameter [disassociateAcceleratorTypes] :
  /// A list of the Elastic Inference (EI) instance types to remove from this
  /// notebook instance. This operation is idempotent. If you specify an
  /// accelerator type that is not associated with the notebook instance when
  /// you call this method, it does not throw an error.
  ///
  /// Parameter [disassociateAdditionalCodeRepositories] :
  /// A list of names or URLs of the default Git repositories to remove from
  /// this notebook instance. This operation is idempotent. If you specify a Git
  /// repository that is not associated with the notebook instance when you call
  /// this method, it does not throw an error.
  ///
  /// Parameter [disassociateDefaultCodeRepository] :
  /// The name or URL of the default Git repository to remove from this notebook
  /// instance. This operation is idempotent. If you specify a Git repository
  /// that is not associated with the notebook instance when you call this
  /// method, it does not throw an error.
  ///
  /// Parameter [disassociateLifecycleConfig] :
  /// Set to <code>true</code> to remove the notebook instance lifecycle
  /// configuration currently associated with the notebook instance. This
  /// operation is idempotent. If you specify a lifecycle configuration that is
  /// not associated with the notebook instance when you call this method, it
  /// does not throw an error.
  ///
  /// Parameter [instanceType] :
  /// The Amazon ML compute instance type.
  ///
  /// Parameter [lifecycleConfigName] :
  /// The name of a lifecycle configuration to associate with the notebook
  /// instance. For information about lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can
  /// assume to access the notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon
  /// SageMaker Roles</a>.
  /// <note>
  /// To be able to pass this role to Amazon SageMaker, the caller of this API
  /// must have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [rootAccess] :
  /// Whether root access is enabled or disabled for users of the notebook
  /// instance. The default value is <code>Enabled</code>.
  /// <note>
  /// If you set this to <code>Disabled</code>, users don't have root access on
  /// the notebook instance, but lifecycle configuration scripts still run with
  /// root permissions.
  /// </note>
  ///
  /// Parameter [volumeSizeInGB] :
  /// The size, in GB, of the ML storage volume to attach to the notebook
  /// instance. The default value is 5 GB. ML storage volumes are encrypted, so
  /// Amazon SageMaker can't determine the amount of available free space on the
  /// volume. Because of this, you can increase the volume size when you update
  /// a notebook instance, but you can't decrease the volume size. If you want
  /// to decrease the size of the ML storage volume in use, create a new
  /// notebook instance with the desired size.
  Future<void> updateNotebookInstance({
    required String notebookInstanceName,
    List<NotebookInstanceAcceleratorType>? acceleratorTypes,
    List<String>? additionalCodeRepositories,
    String? defaultCodeRepository,
    bool? disassociateAcceleratorTypes,
    bool? disassociateAdditionalCodeRepositories,
    bool? disassociateDefaultCodeRepository,
    bool? disassociateLifecycleConfig,
    InstanceType? instanceType,
    String? lifecycleConfigName,
    String? roleArn,
    RootAccess? rootAccess,
    int? volumeSizeInGB,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceName, 'notebookInstanceName');
    _s.validateStringLength(
      'notebookInstanceName',
      notebookInstanceName,
      0,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'defaultCodeRepository',
      defaultCodeRepository,
      1,
      1024,
    );
    _s.validateStringLength(
      'lifecycleConfigName',
      lifecycleConfigName,
      0,
      63,
    );
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
    );
    _s.validateNumRange(
      'volumeSizeInGB',
      volumeSizeInGB,
      5,
      16384,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
        if (acceleratorTypes != null)
          'AcceleratorTypes': acceleratorTypes.map((e) => e.toValue()).toList(),
        if (additionalCodeRepositories != null)
          'AdditionalCodeRepositories': additionalCodeRepositories,
        if (defaultCodeRepository != null)
          'DefaultCodeRepository': defaultCodeRepository,
        if (disassociateAcceleratorTypes != null)
          'DisassociateAcceleratorTypes': disassociateAcceleratorTypes,
        if (disassociateAdditionalCodeRepositories != null)
          'DisassociateAdditionalCodeRepositories':
              disassociateAdditionalCodeRepositories,
        if (disassociateDefaultCodeRepository != null)
          'DisassociateDefaultCodeRepository':
              disassociateDefaultCodeRepository,
        if (disassociateLifecycleConfig != null)
          'DisassociateLifecycleConfig': disassociateLifecycleConfig,
        if (instanceType != null) 'InstanceType': instanceType.toValue(),
        if (lifecycleConfigName != null)
          'LifecycleConfigName': lifecycleConfigName,
        if (roleArn != null) 'RoleArn': roleArn,
        if (rootAccess != null) 'RootAccess': rootAccess.toValue(),
        if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
      },
    );
  }

  /// Updates a notebook instance lifecycle configuration created with the
  /// <a>CreateNotebookInstanceLifecycleConfig</a> API.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration.
  ///
  /// Parameter [onCreate] :
  /// The shell script that runs only once, when you create a notebook instance.
  /// The shell script must be a base64-encoded string.
  ///
  /// Parameter [onStart] :
  /// The shell script that runs every time you start a notebook instance,
  /// including when you create the notebook instance. The shell script must be
  /// a base64-encoded string.
  Future<void> updateNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
    List<NotebookInstanceLifecycleHook>? onCreate,
    List<NotebookInstanceLifecycleHook>? onStart,
  }) async {
    ArgumentError.checkNotNull(notebookInstanceLifecycleConfigName,
        'notebookInstanceLifecycleConfigName');
    _s.validateStringLength(
      'notebookInstanceLifecycleConfigName',
      notebookInstanceLifecycleConfigName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateNotebookInstanceLifecycleConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
        if (onCreate != null) 'OnCreate': onCreate,
        if (onStart != null) 'OnStart': onStart,
      },
    );
  }

  /// Updates a pipeline.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline to update.
  ///
  /// Parameter [pipelineDefinition] :
  /// The JSON pipeline definition.
  ///
  /// Parameter [pipelineDescription] :
  /// The description of the pipeline.
  ///
  /// Parameter [pipelineDisplayName] :
  /// The display name of the pipeline.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
  Future<UpdatePipelineResponse> updatePipeline({
    required String pipelineName,
    String? pipelineDefinition,
    String? pipelineDescription,
    String? pipelineDisplayName,
    String? roleArn,
  }) async {
    ArgumentError.checkNotNull(pipelineName, 'pipelineName');
    _s.validateStringLength(
      'pipelineName',
      pipelineName,
      1,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'pipelineDefinition',
      pipelineDefinition,
      1,
      1048576,
    );
    _s.validateStringLength(
      'pipelineDescription',
      pipelineDescription,
      0,
      3072,
    );
    _s.validateStringLength(
      'pipelineDisplayName',
      pipelineDisplayName,
      1,
      256,
    );
    _s.validateStringLength(
      'roleArn',
      roleArn,
      20,
      2048,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdatePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        if (pipelineDefinition != null)
          'PipelineDefinition': pipelineDefinition,
        if (pipelineDescription != null)
          'PipelineDescription': pipelineDescription,
        if (pipelineDisplayName != null)
          'PipelineDisplayName': pipelineDisplayName,
        if (roleArn != null) 'RoleArn': roleArn,
      },
    );

    return UpdatePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Updates a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [pipelineExecutionDescription] :
  /// The description of the pipeline execution.
  ///
  /// Parameter [pipelineExecutionDisplayName] :
  /// The display name of the pipeline execution.
  Future<UpdatePipelineExecutionResponse> updatePipelineExecution({
    required String pipelineExecutionArn,
    String? pipelineExecutionDescription,
    String? pipelineExecutionDisplayName,
  }) async {
    ArgumentError.checkNotNull(pipelineExecutionArn, 'pipelineExecutionArn');
    _s.validateStringLength(
      'pipelineExecutionArn',
      pipelineExecutionArn,
      0,
      256,
      isRequired: true,
    );
    _s.validateStringLength(
      'pipelineExecutionDescription',
      pipelineExecutionDescription,
      0,
      3072,
    );
    _s.validateStringLength(
      'pipelineExecutionDisplayName',
      pipelineExecutionDisplayName,
      1,
      82,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdatePipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        if (pipelineExecutionDescription != null)
          'PipelineExecutionDescription': pipelineExecutionDescription,
        if (pipelineExecutionDisplayName != null)
          'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      },
    );

    return UpdatePipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Update a model training job to request a new Debugger profiling
  /// configuration.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trainingJobName] :
  /// The name of a training job to update the Debugger profiling configuration.
  ///
  /// Parameter [profilerConfig] :
  /// Configuration information for Debugger system monitoring, framework
  /// profiling, and storage paths.
  ///
  /// Parameter [profilerRuleConfigurations] :
  /// Configuration information for Debugger rules for profiling system and
  /// framework metrics.
  Future<UpdateTrainingJobResponse> updateTrainingJob({
    required String trainingJobName,
    ProfilerConfigForUpdate? profilerConfig,
    List<ProfilerRuleConfiguration>? profilerRuleConfigurations,
  }) async {
    ArgumentError.checkNotNull(trainingJobName, 'trainingJobName');
    _s.validateStringLength(
      'trainingJobName',
      trainingJobName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateTrainingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrainingJobName': trainingJobName,
        if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
        if (profilerRuleConfigurations != null)
          'ProfilerRuleConfigurations': profilerRuleConfigurations,
      },
    );

    return UpdateTrainingJobResponse.fromJson(jsonResponse.body);
  }

  /// Updates the display name of a trial.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialName] :
  /// The name of the trial to update.
  ///
  /// Parameter [displayName] :
  /// The name of the trial as displayed. The name doesn't need to be unique. If
  /// <code>DisplayName</code> isn't specified, <code>TrialName</code> is
  /// displayed.
  Future<UpdateTrialResponse> updateTrial({
    required String trialName,
    String? displayName,
  }) async {
    ArgumentError.checkNotNull(trialName, 'trialName');
    _s.validateStringLength(
      'trialName',
      trialName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialName': trialName,
        if (displayName != null) 'DisplayName': displayName,
      },
    );

    return UpdateTrialResponse.fromJson(jsonResponse.body);
  }

  /// Updates one or more properties of a trial component.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to update.
  ///
  /// Parameter [displayName] :
  /// The name of the component as displayed. The name doesn't need to be
  /// unique. If <code>DisplayName</code> isn't specified,
  /// <code>TrialComponentName</code> is displayed.
  ///
  /// Parameter [endTime] :
  /// When the component ended.
  ///
  /// Parameter [inputArtifacts] :
  /// Replaces all of the component's input artifacts with the specified
  /// artifacts.
  ///
  /// Parameter [inputArtifactsToRemove] :
  /// The input artifacts to remove from the component.
  ///
  /// Parameter [outputArtifacts] :
  /// Replaces all of the component's output artifacts with the specified
  /// artifacts.
  ///
  /// Parameter [outputArtifactsToRemove] :
  /// The output artifacts to remove from the component.
  ///
  /// Parameter [parameters] :
  /// Replaces all of the component's hyperparameters with the specified
  /// hyperparameters.
  ///
  /// Parameter [parametersToRemove] :
  /// The hyperparameters to remove from the component.
  ///
  /// Parameter [startTime] :
  /// When the component started.
  ///
  /// Parameter [status] :
  /// The new status of the component.
  Future<UpdateTrialComponentResponse> updateTrialComponent({
    required String trialComponentName,
    String? displayName,
    DateTime? endTime,
    Map<String, TrialComponentArtifact>? inputArtifacts,
    List<String>? inputArtifactsToRemove,
    Map<String, TrialComponentArtifact>? outputArtifacts,
    List<String>? outputArtifactsToRemove,
    Map<String, TrialComponentParameterValue>? parameters,
    List<String>? parametersToRemove,
    DateTime? startTime,
    TrialComponentStatus? status,
  }) async {
    ArgumentError.checkNotNull(trialComponentName, 'trialComponentName');
    _s.validateStringLength(
      'trialComponentName',
      trialComponentName,
      1,
      120,
      isRequired: true,
    );
    _s.validateStringLength(
      'displayName',
      displayName,
      1,
      120,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        if (displayName != null) 'DisplayName': displayName,
        if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
        if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
        if (inputArtifactsToRemove != null)
          'InputArtifactsToRemove': inputArtifactsToRemove,
        if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
        if (outputArtifactsToRemove != null)
          'OutputArtifactsToRemove': outputArtifactsToRemove,
        if (parameters != null) 'Parameters': parameters,
        if (parametersToRemove != null)
          'ParametersToRemove': parametersToRemove,
        if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
        if (status != null) 'Status': status,
      },
    );

    return UpdateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Updates a user profile.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  ///
  /// Parameter [userSettings] :
  /// A collection of settings.
  Future<UpdateUserProfileResponse> updateUserProfile({
    required String domainId,
    required String userProfileName,
    UserSettings? userSettings,
  }) async {
    ArgumentError.checkNotNull(domainId, 'domainId');
    _s.validateStringLength(
      'domainId',
      domainId,
      0,
      63,
      isRequired: true,
    );
    ArgumentError.checkNotNull(userProfileName, 'userProfileName');
    _s.validateStringLength(
      'userProfileName',
      userProfileName,
      0,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateUserProfile'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (userSettings != null) 'UserSettings': userSettings,
      },
    );

    return UpdateUserProfileResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to update your workforce. You can use this operation to
  /// require that workers use specific IP addresses to work on tasks and to
  /// update your OpenID Connect (OIDC) Identity Provider (IdP) workforce
  /// configuration.
  ///
  /// Use <code>SourceIpConfig</code> to restrict worker access to tasks to a
  /// specific range of IP addresses. You specify allowed IP addresses by
  /// creating a list of up to ten <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>.
  /// By default, a workforce isn't restricted to specific IP addresses. If you
  /// specify a range of IP addresses, workers who attempt to access tasks using
  /// any IP address outside the specified range are denied and get a <code>Not
  /// Found</code> error message on the worker portal.
  ///
  /// Use <code>OidcConfig</code> to update the configuration of a workforce
  /// created using your own OIDC IdP.
  /// <important>
  /// You can only update your OIDC IdP configuration when there are no work
  /// teams associated with your workforce. You can delete work teams using the
  /// operation.
  /// </important>
  /// After restricting access to a range of IP addresses or updating your OIDC
  /// IdP configuration with this operation, you can view details about your
  /// update workforce using the operation.
  /// <important>
  /// This operation only applies to private workforces.
  /// </important>
  ///
  /// Parameter [workforceName] :
  /// The name of the private workforce that you want to update. You can find
  /// your workforce name by using the operation.
  ///
  /// Parameter [oidcConfig] :
  /// Use this parameter to update your OIDC Identity Provider (IdP)
  /// configuration for a workforce made using your own IdP.
  ///
  /// Parameter [sourceIpConfig] :
  /// A list of one to ten worker IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>)
  /// that can be used to access tasks assigned to this workforce.
  ///
  /// Maximum: Ten CIDR values
  Future<UpdateWorkforceResponse> updateWorkforce({
    required String workforceName,
    OidcConfig? oidcConfig,
    SourceIpConfig? sourceIpConfig,
  }) async {
    ArgumentError.checkNotNull(workforceName, 'workforceName');
    _s.validateStringLength(
      'workforceName',
      workforceName,
      1,
      63,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateWorkforce'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
        if (oidcConfig != null) 'OidcConfig': oidcConfig,
        if (sourceIpConfig != null) 'SourceIpConfig': sourceIpConfig,
      },
    );

    return UpdateWorkforceResponse.fromJson(jsonResponse.body);
  }

  /// Updates an existing work team with new member definitions or description.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [workteamName] :
  /// The name of the work team to update.
  ///
  /// Parameter [description] :
  /// An updated description for the work team.
  ///
  /// Parameter [memberDefinitions] :
  /// A list of <code>MemberDefinition</code> objects that contains objects that
  /// identify the workers that make up the work team.
  ///
  /// Workforces can be created using Amazon Cognito or your own OIDC Identity
  /// Provider (IdP). For private workforces created using Amazon Cognito use
  /// <code>CognitoMemberDefinition</code>. For workforces created using your
  /// own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>.
  /// You should not provide input for both of these parameters in a single
  /// request.
  ///
  /// For workforces created using Amazon Cognito, private work teams correspond
  /// to Amazon Cognito <i>user groups</i> within the user pool used to create a
  /// workforce. All of the <code>CognitoMemberDefinition</code> objects that
  /// make up the member definition must have the same <code>ClientId</code> and
  /// <code>UserPool</code> values. To add a Amazon Cognito user group to an
  /// existing worker pool, see <a href="">Adding groups to a User Pool</a>. For
  /// more information about user pools, see <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon
  /// Cognito User Pools</a>.
  ///
  /// For workforces created using your own OIDC IdP, specify the user groups
  /// that you want to include in your private work team in
  /// <code>OidcMemberDefinition</code> by listing those groups in
  /// <code>Groups</code>. Be aware that user groups that are already in the
  /// work team must also be listed in <code>Groups</code> when you make this
  /// request to remain on the work team. If you do not include these user
  /// groups, they will no longer be associated with the work team you update.
  ///
  /// Parameter [notificationConfiguration] :
  /// Configures SNS topic notifications for available or expiring work items
  Future<UpdateWorkteamResponse> updateWorkteam({
    required String workteamName,
    String? description,
    List<MemberDefinition>? memberDefinitions,
    NotificationConfiguration? notificationConfiguration,
  }) async {
    ArgumentError.checkNotNull(workteamName, 'workteamName');
    _s.validateStringLength(
      'workteamName',
      workteamName,
      1,
      63,
      isRequired: true,
    );
    _s.validateStringLength(
      'description',
      description,
      1,
      200,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamName': workteamName,
        if (description != null) 'Description': description,
        if (memberDefinitions != null) 'MemberDefinitions': memberDefinitions,
        if (notificationConfiguration != null)
          'NotificationConfiguration': notificationConfiguration,
      },
    );

    return UpdateWorkteamResponse.fromJson(jsonResponse.body);
  }
}

/// A structure describing the source of an action.
class ActionSource {
  /// The URI of the source.
  final String sourceUri;

  /// The ID of the source.
  final String? sourceId;

  /// The type of the source.
  final String? sourceType;

  ActionSource({
    required this.sourceUri,
    this.sourceId,
    this.sourceType,
  });

  factory ActionSource.fromJson(Map<String, dynamic> json) {
    return ActionSource(
      sourceUri: json['SourceUri'] as String,
      sourceId: json['SourceId'] as String?,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceUri = this.sourceUri;
    final sourceId = this.sourceId;
    final sourceType = this.sourceType;
    return {
      'SourceUri': sourceUri,
      if (sourceId != null) 'SourceId': sourceId,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

enum ActionStatus {
  unknown,
  inProgress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on ActionStatus {
  String toValue() {
    switch (this) {
      case ActionStatus.unknown:
        return 'Unknown';
      case ActionStatus.inProgress:
        return 'InProgress';
      case ActionStatus.completed:
        return 'Completed';
      case ActionStatus.failed:
        return 'Failed';
      case ActionStatus.stopping:
        return 'Stopping';
      case ActionStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  ActionStatus toActionStatus() {
    switch (this) {
      case 'Unknown':
        return ActionStatus.unknown;
      case 'InProgress':
        return ActionStatus.inProgress;
      case 'Completed':
        return ActionStatus.completed;
      case 'Failed':
        return ActionStatus.failed;
      case 'Stopping':
        return ActionStatus.stopping;
      case 'Stopped':
        return ActionStatus.stopped;
    }
    throw Exception('$this is not known in enum ActionStatus');
  }
}

/// Lists the properties of an <i>action</i>. An action represents an action or
/// activity. Some examples are a workflow step and a model deployment.
/// Generally, an action involves at least one input artifact or output
/// artifact.
class ActionSummary {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  /// The name of the action.
  final String? actionName;

  /// The type of the action.
  final String? actionType;

  /// When the action was created.
  final DateTime? creationTime;

  /// When the action was last modified.
  final DateTime? lastModifiedTime;

  /// The source of the action.
  final ActionSource? source;

  /// The status of the action.
  final ActionStatus? status;

  ActionSummary({
    this.actionArn,
    this.actionName,
    this.actionType,
    this.creationTime,
    this.lastModifiedTime,
    this.source,
    this.status,
  });

  factory ActionSummary.fromJson(Map<String, dynamic> json) {
    return ActionSummary(
      actionArn: json['ActionArn'] as String?,
      actionName: json['ActionName'] as String?,
      actionType: json['ActionType'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ActionSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.toActionStatus(),
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    final actionName = this.actionName;
    final actionType = this.actionType;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    final status = this.status;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
      if (actionName != null) 'ActionName': actionName,
      if (actionType != null) 'ActionType': actionType,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
      if (status != null) 'Status': status.toValue(),
    };
  }
}

class AddAssociationResponse {
  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The ARN of the source.
  final String? sourceArn;

  AddAssociationResponse({
    this.destinationArn,
    this.sourceArn,
  });

  factory AddAssociationResponse.fromJson(Map<String, dynamic> json) {
    return AddAssociationResponse(
      destinationArn: json['DestinationArn'] as String?,
      sourceArn: json['SourceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationArn = this.destinationArn;
    final sourceArn = this.sourceArn;
    return {
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (sourceArn != null) 'SourceArn': sourceArn,
    };
  }
}

class AddTagsOutput {
  /// A list of tags associated with the Amazon SageMaker resource.
  final List<Tag>? tags;

  AddTagsOutput({
    this.tags,
  });

  factory AddTagsOutput.fromJson(Map<String, dynamic> json) {
    return AddTagsOutput(
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final tags = this.tags;
    return {
      if (tags != null) 'Tags': tags,
    };
  }
}

/// Edge Manager agent version.
class AgentVersion {
  /// The number of Edge Manager agents.
  final int agentCount;

  /// Version of the agent.
  final String version;

  AgentVersion({
    required this.agentCount,
    required this.version,
  });

  factory AgentVersion.fromJson(Map<String, dynamic> json) {
    return AgentVersion(
      agentCount: json['AgentCount'] as int,
      version: json['Version'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final agentCount = this.agentCount;
    final version = this.version;
    return {
      'AgentCount': agentCount,
      'Version': version,
    };
  }
}

/// This API is not supported.
class Alarm {
  /// <p/>
  final String? alarmName;

  Alarm({
    this.alarmName,
  });

  factory Alarm.fromJson(Map<String, dynamic> json) {
    return Alarm(
      alarmName: json['AlarmName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final alarmName = this.alarmName;
    return {
      if (alarmName != null) 'AlarmName': alarmName,
    };
  }
}

enum AlgorithmSortBy {
  name,
  creationTime,
}

extension on AlgorithmSortBy {
  String toValue() {
    switch (this) {
      case AlgorithmSortBy.name:
        return 'Name';
      case AlgorithmSortBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  AlgorithmSortBy toAlgorithmSortBy() {
    switch (this) {
      case 'Name':
        return AlgorithmSortBy.name;
      case 'CreationTime':
        return AlgorithmSortBy.creationTime;
    }
    throw Exception('$this is not known in enum AlgorithmSortBy');
  }
}

/// Specifies the training algorithm to use in a <a>CreateTrainingJob</a>
/// request.
///
/// For more information about algorithms provided by Amazon SageMaker, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
/// For information about using your own algorithms, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
/// Your Own Algorithms with Amazon SageMaker</a>.
class AlgorithmSpecification {
  /// The input mode that the algorithm supports. For the input modes that Amazon
  /// SageMaker algorithms support, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  /// If an algorithm supports the <code>File</code> input mode, Amazon SageMaker
  /// downloads the training data from S3 to the provisioned ML storage Volume,
  /// and mounts the directory to docker volume for training container. If an
  /// algorithm supports the <code>Pipe</code> input mode, Amazon SageMaker
  /// streams data directly from S3 to the container.
  ///
  /// In File mode, make sure you provision ML storage volume with sufficient
  /// capacity to accommodate the data download from S3. In addition to the
  /// training data, the ML storage volume also stores the output model. The
  /// algorithm container use ML storage volume to also store intermediate
  /// information, if any.
  ///
  /// For distributed algorithms using File mode, training data is distributed
  /// uniformly, and your training duration is predictable if the input data
  /// objects size is approximately same. Amazon SageMaker does not split the
  /// files any further for model training. If the object sizes are skewed,
  /// training won't be optimal as the data distribution is also skewed where one
  /// host in a training cluster is overloaded, thus becoming bottleneck in
  /// training.
  final TrainingInputMode trainingInputMode;

  /// The name of the algorithm resource to use for the training job. This must be
  /// an algorithm resource that you created or subscribe to on Amazon Web
  /// Services Marketplace. If you specify a value for this parameter, you can't
  /// specify a value for <code>TrainingImage</code>.
  final String? algorithmName;

  /// To generate and save time-series metrics during training, set to
  /// <code>true</code>. The default is <code>false</code> and time-series metrics
  /// aren't generated except in the following cases:
  ///
  /// <ul>
  /// <li>
  /// You use one of the Amazon SageMaker built-in algorithms
  /// </li>
  /// <li>
  /// You use one of the following <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html">Prebuilt
  /// Amazon SageMaker Docker Images</a>:
  ///
  /// <ul>
  /// <li>
  /// Tensorflow (version &gt;= 1.15)
  /// </li>
  /// <li>
  /// MXNet (version &gt;= 1.6)
  /// </li>
  /// <li>
  /// PyTorch (version &gt;= 1.3)
  /// </li>
  /// </ul> </li>
  /// <li>
  /// You specify at least one <a>MetricDefinition</a>
  /// </li>
  /// </ul>
  final bool? enableSageMakerMetricsTimeSeries;

  /// A list of metric definition objects. Each object specifies the metric name
  /// and regular expressions used to parse algorithm logs. Amazon SageMaker
  /// publishes each metric to Amazon CloudWatch.
  final List<MetricDefinition>? metricDefinitions;

  /// The registry path of the Docker image that contains the training algorithm.
  /// For information about docker registry paths for built-in algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Algorithms
  /// Provided by Amazon SageMaker: Common Parameters</a>. Amazon SageMaker
  /// supports both <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  final String? trainingImage;

  AlgorithmSpecification({
    required this.trainingInputMode,
    this.algorithmName,
    this.enableSageMakerMetricsTimeSeries,
    this.metricDefinitions,
    this.trainingImage,
  });

  factory AlgorithmSpecification.fromJson(Map<String, dynamic> json) {
    return AlgorithmSpecification(
      trainingInputMode:
          (json['TrainingInputMode'] as String).toTrainingInputMode(),
      algorithmName: json['AlgorithmName'] as String?,
      enableSageMakerMetricsTimeSeries:
          json['EnableSageMakerMetricsTimeSeries'] as bool?,
      metricDefinitions: (json['MetricDefinitions'] as List?)
          ?.whereNotNull()
          .map((e) => MetricDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingImage: json['TrainingImage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingInputMode = this.trainingInputMode;
    final algorithmName = this.algorithmName;
    final enableSageMakerMetricsTimeSeries =
        this.enableSageMakerMetricsTimeSeries;
    final metricDefinitions = this.metricDefinitions;
    final trainingImage = this.trainingImage;
    return {
      'TrainingInputMode': trainingInputMode.toValue(),
      if (algorithmName != null) 'AlgorithmName': algorithmName,
      if (enableSageMakerMetricsTimeSeries != null)
        'EnableSageMakerMetricsTimeSeries': enableSageMakerMetricsTimeSeries,
      if (metricDefinitions != null) 'MetricDefinitions': metricDefinitions,
      if (trainingImage != null) 'TrainingImage': trainingImage,
    };
  }
}

enum AlgorithmStatus {
  pending,
  inProgress,
  completed,
  failed,
  deleting,
}

extension on AlgorithmStatus {
  String toValue() {
    switch (this) {
      case AlgorithmStatus.pending:
        return 'Pending';
      case AlgorithmStatus.inProgress:
        return 'InProgress';
      case AlgorithmStatus.completed:
        return 'Completed';
      case AlgorithmStatus.failed:
        return 'Failed';
      case AlgorithmStatus.deleting:
        return 'Deleting';
    }
  }
}

extension on String {
  AlgorithmStatus toAlgorithmStatus() {
    switch (this) {
      case 'Pending':
        return AlgorithmStatus.pending;
      case 'InProgress':
        return AlgorithmStatus.inProgress;
      case 'Completed':
        return AlgorithmStatus.completed;
      case 'Failed':
        return AlgorithmStatus.failed;
      case 'Deleting':
        return AlgorithmStatus.deleting;
    }
    throw Exception('$this is not known in enum AlgorithmStatus');
  }
}

/// Specifies the validation and image scan statuses of the algorithm.
class AlgorithmStatusDetails {
  /// The status of the scan of the algorithm's Docker image container.
  final List<AlgorithmStatusItem>? imageScanStatuses;

  /// The status of algorithm validation.
  final List<AlgorithmStatusItem>? validationStatuses;

  AlgorithmStatusDetails({
    this.imageScanStatuses,
    this.validationStatuses,
  });

  factory AlgorithmStatusDetails.fromJson(Map<String, dynamic> json) {
    return AlgorithmStatusDetails(
      imageScanStatuses: (json['ImageScanStatuses'] as List?)
          ?.whereNotNull()
          .map((e) => AlgorithmStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationStatuses: (json['ValidationStatuses'] as List?)
          ?.whereNotNull()
          .map((e) => AlgorithmStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final imageScanStatuses = this.imageScanStatuses;
    final validationStatuses = this.validationStatuses;
    return {
      if (imageScanStatuses != null) 'ImageScanStatuses': imageScanStatuses,
      if (validationStatuses != null) 'ValidationStatuses': validationStatuses,
    };
  }
}

/// Represents the overall status of an algorithm.
class AlgorithmStatusItem {
  /// The name of the algorithm for which the overall status is being reported.
  final String name;

  /// The current status.
  final DetailedAlgorithmStatus status;

  /// if the overall status is <code>Failed</code>, the reason for the failure.
  final String? failureReason;

  AlgorithmStatusItem({
    required this.name,
    required this.status,
    this.failureReason,
  });

  factory AlgorithmStatusItem.fromJson(Map<String, dynamic> json) {
    return AlgorithmStatusItem(
      name: json['Name'] as String,
      status: (json['Status'] as String).toDetailedAlgorithmStatus(),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final status = this.status;
    final failureReason = this.failureReason;
    return {
      'Name': name,
      'Status': status.toValue(),
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// Provides summary information about an algorithm.
class AlgorithmSummary {
  /// The Amazon Resource Name (ARN) of the algorithm.
  final String algorithmArn;

  /// The name of the algorithm that is described by the summary.
  final String algorithmName;

  /// The overall status of the algorithm.
  final AlgorithmStatus algorithmStatus;

  /// A timestamp that shows when the algorithm was created.
  final DateTime creationTime;

  /// A brief description of the algorithm.
  final String? algorithmDescription;

  AlgorithmSummary({
    required this.algorithmArn,
    required this.algorithmName,
    required this.algorithmStatus,
    required this.creationTime,
    this.algorithmDescription,
  });

  factory AlgorithmSummary.fromJson(Map<String, dynamic> json) {
    return AlgorithmSummary(
      algorithmArn: json['AlgorithmArn'] as String,
      algorithmName: json['AlgorithmName'] as String,
      algorithmStatus: (json['AlgorithmStatus'] as String).toAlgorithmStatus(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      algorithmDescription: json['AlgorithmDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmArn = this.algorithmArn;
    final algorithmName = this.algorithmName;
    final algorithmStatus = this.algorithmStatus;
    final creationTime = this.creationTime;
    final algorithmDescription = this.algorithmDescription;
    return {
      'AlgorithmArn': algorithmArn,
      'AlgorithmName': algorithmName,
      'AlgorithmStatus': algorithmStatus.toValue(),
      'CreationTime': unixTimestampToJson(creationTime),
      if (algorithmDescription != null)
        'AlgorithmDescription': algorithmDescription,
    };
  }
}

/// Defines a training job and a batch transform job that Amazon SageMaker runs
/// to validate your algorithm.
///
/// The data provided in the validation profile is made available to your buyers
/// on Amazon Web Services Marketplace.
class AlgorithmValidationProfile {
  /// The name of the profile for the algorithm. The name must have 1 to 63
  /// characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
  final String profileName;

  /// The <code>TrainingJobDefinition</code> object that describes the training
  /// job that Amazon SageMaker runs to validate your algorithm.
  final TrainingJobDefinition trainingJobDefinition;

  /// The <code>TransformJobDefinition</code> object that describes the transform
  /// job that Amazon SageMaker runs to validate your algorithm.
  final TransformJobDefinition? transformJobDefinition;

  AlgorithmValidationProfile({
    required this.profileName,
    required this.trainingJobDefinition,
    this.transformJobDefinition,
  });

  factory AlgorithmValidationProfile.fromJson(Map<String, dynamic> json) {
    return AlgorithmValidationProfile(
      profileName: json['ProfileName'] as String,
      trainingJobDefinition: TrainingJobDefinition.fromJson(
          json['TrainingJobDefinition'] as Map<String, dynamic>),
      transformJobDefinition: json['TransformJobDefinition'] != null
          ? TransformJobDefinition.fromJson(
              json['TransformJobDefinition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final profileName = this.profileName;
    final trainingJobDefinition = this.trainingJobDefinition;
    final transformJobDefinition = this.transformJobDefinition;
    return {
      'ProfileName': profileName,
      'TrainingJobDefinition': trainingJobDefinition,
      if (transformJobDefinition != null)
        'TransformJobDefinition': transformJobDefinition,
    };
  }
}

/// Specifies configurations for one or more training jobs that Amazon SageMaker
/// runs to test the algorithm.
class AlgorithmValidationSpecification {
  /// An array of <code>AlgorithmValidationProfile</code> objects, each of which
  /// specifies a training job and batch transform job that Amazon SageMaker runs
  /// to validate your algorithm.
  final List<AlgorithmValidationProfile> validationProfiles;

  /// The IAM roles that Amazon SageMaker uses to run the training jobs.
  final String validationRole;

  AlgorithmValidationSpecification({
    required this.validationProfiles,
    required this.validationRole,
  });

  factory AlgorithmValidationSpecification.fromJson(Map<String, dynamic> json) {
    return AlgorithmValidationSpecification(
      validationProfiles: (json['ValidationProfiles'] as List)
          .whereNotNull()
          .map((e) =>
              AlgorithmValidationProfile.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationRole: json['ValidationRole'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final validationProfiles = this.validationProfiles;
    final validationRole = this.validationRole;
    return {
      'ValidationProfiles': validationProfiles,
      'ValidationRole': validationRole,
    };
  }
}

/// Configures how labels are consolidated across human workers and processes
/// output data.
class AnnotationConsolidationConfig {
  /// The Amazon Resource Name (ARN) of a Lambda function implements the logic for
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html">annotation
  /// consolidation</a> and to process output data.
  ///
  /// This parameter is required for all labeling jobs. For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a>, use one of the following Amazon SageMaker Ground Truth
  /// Lambda function ARNs for <code>AnnotationConsolidationLambdaArn</code>. For
  /// custom labeling workflows, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-postlambda">Post-annotation
  /// Lambda</a>.
  ///
  /// <b>Bounding box</b> - Finds the most similar boxes from different workers
  /// based on the Jaccard index of the boxes.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Image classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of an image based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label image classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of an image based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel annotations from workers as
  /// "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Text classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of text based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>rn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label text classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of text based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Named entity recognition</b> - Groups similar selections and calculates
  /// aggregate boundaries, resolving to most-assigned label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// </ul>
  /// <b>Video Classification</b> - Use this task type when you need workers to
  /// classify videos using predefined labels that you specify. Workers are shown
  /// videos and are asked to choose one label for each video.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection</b> - Use this task type to have workers
  /// identify and locate objects in a sequence of video frames (images extracted
  /// from a video) using bounding boxes. For example, you can use this task to
  /// ask workers to identify and localize various objects in a series of video
  /// frames, such as cars, bikes, and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking</b> - Use this task type to have workers
  /// track the movement of objects in a sequence of video frames (images
  /// extracted from a video) using bounding boxes. For example, you can use this
  /// task to ask workers to track the movement of objects, such as cars, bikes,
  /// and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Detection</b> - Use this task type when you want
  /// workers to classify objects in a 3D point cloud by drawing 3D cuboids around
  /// objects. For example, you can use this task type to ask workers to identify
  /// different types of objects in a point cloud, such as cars, bikes, and
  /// pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Tracking</b> - Use this task type when you want
  /// workers to draw 3D cuboids around objects that appear in a sequence of 3D
  /// point cloud frames. For example, you can use this task type to ask workers
  /// to track the movement of vehicles across multiple point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Semantic Segmentation</b> - Use this task type when you
  /// want workers to create a point-level semantic segmentation masks by painting
  /// objects in a 3D point cloud using different colors where each color is
  /// assigned to one of the classes you specify.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
  ///
  /// Use label verification and adjustment jobs to review and adjust labels. To
  /// learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify
  /// and Adjust Labels </a>.
  ///
  /// <b>Semantic Segmentation Adjustment</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel adjusted annotations from
  /// workers as "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Semantic Segmentation Verification</b> - Uses a variant of the
  /// Expectation Maximization approach to estimate the true class of verification
  /// judgment for semantic segmentation labels based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Bounding Box Adjustment</b> - Finds the most similar boxes from different
  /// workers based on the Jaccard index of the adjusted annotations.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Bounding Box Verification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true class of verification judgement
  /// for bounding box labels based on annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to classify and localize objects in a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to track object movement across a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Detection Adjustment</b> - Use this task type when
  /// you want workers to adjust 3D cuboids around objects in a 3D point cloud.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Tracking Adjustment</b> - Use this task type when
  /// you want workers to adjust 3D cuboids around objects that appear in a
  /// sequence of 3D point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Semantic Segmentation Adjustment</b> - Use this task type
  /// when you want workers to adjust a point-level semantic segmentation masks
  /// using a paint tool.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  final String annotationConsolidationLambdaArn;

  AnnotationConsolidationConfig({
    required this.annotationConsolidationLambdaArn,
  });

  factory AnnotationConsolidationConfig.fromJson(Map<String, dynamic> json) {
    return AnnotationConsolidationConfig(
      annotationConsolidationLambdaArn:
          json['AnnotationConsolidationLambdaArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final annotationConsolidationLambdaArn =
        this.annotationConsolidationLambdaArn;
    return {
      'AnnotationConsolidationLambdaArn': annotationConsolidationLambdaArn,
    };
  }
}

/// Details about an Amazon SageMaker app.
class AppDetails {
  /// The name of the app.
  final String? appName;

  /// The type of app.
  final AppType? appType;

  /// The creation time.
  final DateTime? creationTime;

  /// The domain ID.
  final String? domainId;

  /// The status.
  final AppStatus? status;

  /// The user profile name.
  final String? userProfileName;

  AppDetails({
    this.appName,
    this.appType,
    this.creationTime,
    this.domainId,
    this.status,
    this.userProfileName,
  });

  factory AppDetails.fromJson(Map<String, dynamic> json) {
    return AppDetails(
      appName: json['AppName'] as String?,
      appType: (json['AppType'] as String?)?.toAppType(),
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      status: (json['Status'] as String?)?.toAppStatus(),
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appName = this.appName;
    final appType = this.appType;
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final status = this.status;
    final userProfileName = this.userProfileName;
    return {
      if (appName != null) 'AppName': appName,
      if (appType != null) 'AppType': appType.toValue(),
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (status != null) 'Status': status.toValue(),
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

/// The configuration for running a SageMaker image as a KernelGateway app.
class AppImageConfigDetails {
  /// The Amazon Resource Name (ARN) of the AppImageConfig.
  final String? appImageConfigArn;

  /// The name of the AppImageConfig. Must be unique to your account.
  final String? appImageConfigName;

  /// When the AppImageConfig was created.
  final DateTime? creationTime;

  /// The configuration for the file system and kernels in the SageMaker image.
  final KernelGatewayImageConfig? kernelGatewayImageConfig;

  /// When the AppImageConfig was last modified.
  final DateTime? lastModifiedTime;

  AppImageConfigDetails({
    this.appImageConfigArn,
    this.appImageConfigName,
    this.creationTime,
    this.kernelGatewayImageConfig,
    this.lastModifiedTime,
  });

  factory AppImageConfigDetails.fromJson(Map<String, dynamic> json) {
    return AppImageConfigDetails(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
      appImageConfigName: json['AppImageConfigName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      kernelGatewayImageConfig: json['KernelGatewayImageConfig'] != null
          ? KernelGatewayImageConfig.fromJson(
              json['KernelGatewayImageConfig'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    final appImageConfigName = this.appImageConfigName;
    final creationTime = this.creationTime;
    final kernelGatewayImageConfig = this.kernelGatewayImageConfig;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
      if (appImageConfigName != null) 'AppImageConfigName': appImageConfigName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (kernelGatewayImageConfig != null)
        'KernelGatewayImageConfig': kernelGatewayImageConfig,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

enum AppImageConfigSortKey {
  creationTime,
  lastModifiedTime,
  name,
}

extension on AppImageConfigSortKey {
  String toValue() {
    switch (this) {
      case AppImageConfigSortKey.creationTime:
        return 'CreationTime';
      case AppImageConfigSortKey.lastModifiedTime:
        return 'LastModifiedTime';
      case AppImageConfigSortKey.name:
        return 'Name';
    }
  }
}

extension on String {
  AppImageConfigSortKey toAppImageConfigSortKey() {
    switch (this) {
      case 'CreationTime':
        return AppImageConfigSortKey.creationTime;
      case 'LastModifiedTime':
        return AppImageConfigSortKey.lastModifiedTime;
      case 'Name':
        return AppImageConfigSortKey.name;
    }
    throw Exception('$this is not known in enum AppImageConfigSortKey');
  }
}

enum AppInstanceType {
  system,
  mlT3Micro,
  mlT3Small,
  mlT3Medium,
  mlT3Large,
  mlT3Xlarge,
  mlT3_2xlarge,
  mlM5Large,
  mlM5Xlarge,
  mlM5_2xlarge,
  mlM5_4xlarge,
  mlM5_8xlarge,
  mlM5_12xlarge,
  mlM5_16xlarge,
  mlM5_24xlarge,
  mlC5Large,
  mlC5Xlarge,
  mlC5_2xlarge,
  mlC5_4xlarge,
  mlC5_9xlarge,
  mlC5_12xlarge,
  mlC5_18xlarge,
  mlC5_24xlarge,
  mlP3_2xlarge,
  mlP3_8xlarge,
  mlP3_16xlarge,
  mlG4dnXlarge,
  mlG4dn_2xlarge,
  mlG4dn_4xlarge,
  mlG4dn_8xlarge,
  mlG4dn_12xlarge,
  mlG4dn_16xlarge,
}

extension on AppInstanceType {
  String toValue() {
    switch (this) {
      case AppInstanceType.system:
        return 'system';
      case AppInstanceType.mlT3Micro:
        return 'ml.t3.micro';
      case AppInstanceType.mlT3Small:
        return 'ml.t3.small';
      case AppInstanceType.mlT3Medium:
        return 'ml.t3.medium';
      case AppInstanceType.mlT3Large:
        return 'ml.t3.large';
      case AppInstanceType.mlT3Xlarge:
        return 'ml.t3.xlarge';
      case AppInstanceType.mlT3_2xlarge:
        return 'ml.t3.2xlarge';
      case AppInstanceType.mlM5Large:
        return 'ml.m5.large';
      case AppInstanceType.mlM5Xlarge:
        return 'ml.m5.xlarge';
      case AppInstanceType.mlM5_2xlarge:
        return 'ml.m5.2xlarge';
      case AppInstanceType.mlM5_4xlarge:
        return 'ml.m5.4xlarge';
      case AppInstanceType.mlM5_8xlarge:
        return 'ml.m5.8xlarge';
      case AppInstanceType.mlM5_12xlarge:
        return 'ml.m5.12xlarge';
      case AppInstanceType.mlM5_16xlarge:
        return 'ml.m5.16xlarge';
      case AppInstanceType.mlM5_24xlarge:
        return 'ml.m5.24xlarge';
      case AppInstanceType.mlC5Large:
        return 'ml.c5.large';
      case AppInstanceType.mlC5Xlarge:
        return 'ml.c5.xlarge';
      case AppInstanceType.mlC5_2xlarge:
        return 'ml.c5.2xlarge';
      case AppInstanceType.mlC5_4xlarge:
        return 'ml.c5.4xlarge';
      case AppInstanceType.mlC5_9xlarge:
        return 'ml.c5.9xlarge';
      case AppInstanceType.mlC5_12xlarge:
        return 'ml.c5.12xlarge';
      case AppInstanceType.mlC5_18xlarge:
        return 'ml.c5.18xlarge';
      case AppInstanceType.mlC5_24xlarge:
        return 'ml.c5.24xlarge';
      case AppInstanceType.mlP3_2xlarge:
        return 'ml.p3.2xlarge';
      case AppInstanceType.mlP3_8xlarge:
        return 'ml.p3.8xlarge';
      case AppInstanceType.mlP3_16xlarge:
        return 'ml.p3.16xlarge';
      case AppInstanceType.mlG4dnXlarge:
        return 'ml.g4dn.xlarge';
      case AppInstanceType.mlG4dn_2xlarge:
        return 'ml.g4dn.2xlarge';
      case AppInstanceType.mlG4dn_4xlarge:
        return 'ml.g4dn.4xlarge';
      case AppInstanceType.mlG4dn_8xlarge:
        return 'ml.g4dn.8xlarge';
      case AppInstanceType.mlG4dn_12xlarge:
        return 'ml.g4dn.12xlarge';
      case AppInstanceType.mlG4dn_16xlarge:
        return 'ml.g4dn.16xlarge';
    }
  }
}

extension on String {
  AppInstanceType toAppInstanceType() {
    switch (this) {
      case 'system':
        return AppInstanceType.system;
      case 'ml.t3.micro':
        return AppInstanceType.mlT3Micro;
      case 'ml.t3.small':
        return AppInstanceType.mlT3Small;
      case 'ml.t3.medium':
        return AppInstanceType.mlT3Medium;
      case 'ml.t3.large':
        return AppInstanceType.mlT3Large;
      case 'ml.t3.xlarge':
        return AppInstanceType.mlT3Xlarge;
      case 'ml.t3.2xlarge':
        return AppInstanceType.mlT3_2xlarge;
      case 'ml.m5.large':
        return AppInstanceType.mlM5Large;
      case 'ml.m5.xlarge':
        return AppInstanceType.mlM5Xlarge;
      case 'ml.m5.2xlarge':
        return AppInstanceType.mlM5_2xlarge;
      case 'ml.m5.4xlarge':
        return AppInstanceType.mlM5_4xlarge;
      case 'ml.m5.8xlarge':
        return AppInstanceType.mlM5_8xlarge;
      case 'ml.m5.12xlarge':
        return AppInstanceType.mlM5_12xlarge;
      case 'ml.m5.16xlarge':
        return AppInstanceType.mlM5_16xlarge;
      case 'ml.m5.24xlarge':
        return AppInstanceType.mlM5_24xlarge;
      case 'ml.c5.large':
        return AppInstanceType.mlC5Large;
      case 'ml.c5.xlarge':
        return AppInstanceType.mlC5Xlarge;
      case 'ml.c5.2xlarge':
        return AppInstanceType.mlC5_2xlarge;
      case 'ml.c5.4xlarge':
        return AppInstanceType.mlC5_4xlarge;
      case 'ml.c5.9xlarge':
        return AppInstanceType.mlC5_9xlarge;
      case 'ml.c5.12xlarge':
        return AppInstanceType.mlC5_12xlarge;
      case 'ml.c5.18xlarge':
        return AppInstanceType.mlC5_18xlarge;
      case 'ml.c5.24xlarge':
        return AppInstanceType.mlC5_24xlarge;
      case 'ml.p3.2xlarge':
        return AppInstanceType.mlP3_2xlarge;
      case 'ml.p3.8xlarge':
        return AppInstanceType.mlP3_8xlarge;
      case 'ml.p3.16xlarge':
        return AppInstanceType.mlP3_16xlarge;
      case 'ml.g4dn.xlarge':
        return AppInstanceType.mlG4dnXlarge;
      case 'ml.g4dn.2xlarge':
        return AppInstanceType.mlG4dn_2xlarge;
      case 'ml.g4dn.4xlarge':
        return AppInstanceType.mlG4dn_4xlarge;
      case 'ml.g4dn.8xlarge':
        return AppInstanceType.mlG4dn_8xlarge;
      case 'ml.g4dn.12xlarge':
        return AppInstanceType.mlG4dn_12xlarge;
      case 'ml.g4dn.16xlarge':
        return AppInstanceType.mlG4dn_16xlarge;
    }
    throw Exception('$this is not known in enum AppInstanceType');
  }
}

enum AppNetworkAccessType {
  publicInternetOnly,
  vpcOnly,
}

extension on AppNetworkAccessType {
  String toValue() {
    switch (this) {
      case AppNetworkAccessType.publicInternetOnly:
        return 'PublicInternetOnly';
      case AppNetworkAccessType.vpcOnly:
        return 'VpcOnly';
    }
  }
}

extension on String {
  AppNetworkAccessType toAppNetworkAccessType() {
    switch (this) {
      case 'PublicInternetOnly':
        return AppNetworkAccessType.publicInternetOnly;
      case 'VpcOnly':
        return AppNetworkAccessType.vpcOnly;
    }
    throw Exception('$this is not known in enum AppNetworkAccessType');
  }
}

enum AppSortKey {
  creationTime,
}

extension on AppSortKey {
  String toValue() {
    switch (this) {
      case AppSortKey.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  AppSortKey toAppSortKey() {
    switch (this) {
      case 'CreationTime':
        return AppSortKey.creationTime;
    }
    throw Exception('$this is not known in enum AppSortKey');
  }
}

/// Configuration to run a processing job in a specified container image.
class AppSpecification {
  /// The container image to be run by the processing job.
  final String imageUri;

  /// The arguments for a container used to run a processing job.
  final List<String>? containerArguments;

  /// The entrypoint for a container used to run a processing job.
  final List<String>? containerEntrypoint;

  AppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
  });

  factory AppSpecification.fromJson(Map<String, dynamic> json) {
    return AppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
    };
  }
}

enum AppStatus {
  deleted,
  deleting,
  failed,
  inService,
  pending,
}

extension on AppStatus {
  String toValue() {
    switch (this) {
      case AppStatus.deleted:
        return 'Deleted';
      case AppStatus.deleting:
        return 'Deleting';
      case AppStatus.failed:
        return 'Failed';
      case AppStatus.inService:
        return 'InService';
      case AppStatus.pending:
        return 'Pending';
    }
  }
}

extension on String {
  AppStatus toAppStatus() {
    switch (this) {
      case 'Deleted':
        return AppStatus.deleted;
      case 'Deleting':
        return AppStatus.deleting;
      case 'Failed':
        return AppStatus.failed;
      case 'InService':
        return AppStatus.inService;
      case 'Pending':
        return AppStatus.pending;
    }
    throw Exception('$this is not known in enum AppStatus');
  }
}

enum AppType {
  jupyterServer,
  kernelGateway,
  tensorBoard,
}

extension on AppType {
  String toValue() {
    switch (this) {
      case AppType.jupyterServer:
        return 'JupyterServer';
      case AppType.kernelGateway:
        return 'KernelGateway';
      case AppType.tensorBoard:
        return 'TensorBoard';
    }
  }
}

extension on String {
  AppType toAppType() {
    switch (this) {
      case 'JupyterServer':
        return AppType.jupyterServer;
      case 'KernelGateway':
        return AppType.kernelGateway;
      case 'TensorBoard':
        return AppType.tensorBoard;
    }
    throw Exception('$this is not known in enum AppType');
  }
}

/// A structure describing the source of an artifact.
class ArtifactSource {
  /// The URI of the source.
  final String sourceUri;

  /// A list of source types.
  final List<ArtifactSourceType>? sourceTypes;

  ArtifactSource({
    required this.sourceUri,
    this.sourceTypes,
  });

  factory ArtifactSource.fromJson(Map<String, dynamic> json) {
    return ArtifactSource(
      sourceUri: json['SourceUri'] as String,
      sourceTypes: (json['SourceTypes'] as List?)
          ?.whereNotNull()
          .map((e) => ArtifactSourceType.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final sourceUri = this.sourceUri;
    final sourceTypes = this.sourceTypes;
    return {
      'SourceUri': sourceUri,
      if (sourceTypes != null) 'SourceTypes': sourceTypes,
    };
  }
}

enum ArtifactSourceIdType {
  mD5Hash,
  s3ETag,
  s3Version,
  custom,
}

extension on ArtifactSourceIdType {
  String toValue() {
    switch (this) {
      case ArtifactSourceIdType.mD5Hash:
        return 'MD5Hash';
      case ArtifactSourceIdType.s3ETag:
        return 'S3ETag';
      case ArtifactSourceIdType.s3Version:
        return 'S3Version';
      case ArtifactSourceIdType.custom:
        return 'Custom';
    }
  }
}

extension on String {
  ArtifactSourceIdType toArtifactSourceIdType() {
    switch (this) {
      case 'MD5Hash':
        return ArtifactSourceIdType.mD5Hash;
      case 'S3ETag':
        return ArtifactSourceIdType.s3ETag;
      case 'S3Version':
        return ArtifactSourceIdType.s3Version;
      case 'Custom':
        return ArtifactSourceIdType.custom;
    }
    throw Exception('$this is not known in enum ArtifactSourceIdType');
  }
}

/// The ID and ID type of an artifact source.
class ArtifactSourceType {
  /// The type of ID.
  final ArtifactSourceIdType sourceIdType;

  /// The ID.
  final String value;

  ArtifactSourceType({
    required this.sourceIdType,
    required this.value,
  });

  factory ArtifactSourceType.fromJson(Map<String, dynamic> json) {
    return ArtifactSourceType(
      sourceIdType: (json['SourceIdType'] as String).toArtifactSourceIdType(),
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceIdType = this.sourceIdType;
    final value = this.value;
    return {
      'SourceIdType': sourceIdType.toValue(),
      'Value': value,
    };
  }
}

/// Lists a summary of the properties of an artifact. An artifact represents a
/// URI addressable object or data. Some examples are a dataset and a model.
class ArtifactSummary {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  /// The name of the artifact.
  final String? artifactName;

  /// The type of the artifact.
  final String? artifactType;

  /// When the artifact was created.
  final DateTime? creationTime;

  /// When the artifact was last modified.
  final DateTime? lastModifiedTime;

  /// The source of the artifact.
  final ArtifactSource? source;

  ArtifactSummary({
    this.artifactArn,
    this.artifactName,
    this.artifactType,
    this.creationTime,
    this.lastModifiedTime,
    this.source,
  });

  factory ArtifactSummary.fromJson(Map<String, dynamic> json) {
    return ArtifactSummary(
      artifactArn: json['ArtifactArn'] as String?,
      artifactName: json['ArtifactName'] as String?,
      artifactType: json['ArtifactType'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ArtifactSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    final artifactName = this.artifactName;
    final artifactType = this.artifactType;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
      if (artifactName != null) 'ArtifactName': artifactName,
      if (artifactType != null) 'ArtifactType': artifactType,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
    };
  }
}

enum AssemblyType {
  none,
  line,
}

extension on AssemblyType {
  String toValue() {
    switch (this) {
      case AssemblyType.none:
        return 'None';
      case AssemblyType.line:
        return 'Line';
    }
  }
}

extension on String {
  AssemblyType toAssemblyType() {
    switch (this) {
      case 'None':
        return AssemblyType.none;
      case 'Line':
        return AssemblyType.line;
    }
    throw Exception('$this is not known in enum AssemblyType');
  }
}

class AssociateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The ARN of the trial component.
  final String? trialComponentArn;

  AssociateTrialComponentResponse({
    this.trialArn,
    this.trialComponentArn,
  });

  factory AssociateTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return AssociateTrialComponentResponse(
      trialArn: json['TrialArn'] as String?,
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

enum AssociationEdgeType {
  contributedTo,
  associatedWith,
  derivedFrom,
  produced,
}

extension on AssociationEdgeType {
  String toValue() {
    switch (this) {
      case AssociationEdgeType.contributedTo:
        return 'ContributedTo';
      case AssociationEdgeType.associatedWith:
        return 'AssociatedWith';
      case AssociationEdgeType.derivedFrom:
        return 'DerivedFrom';
      case AssociationEdgeType.produced:
        return 'Produced';
    }
  }
}

extension on String {
  AssociationEdgeType toAssociationEdgeType() {
    switch (this) {
      case 'ContributedTo':
        return AssociationEdgeType.contributedTo;
      case 'AssociatedWith':
        return AssociationEdgeType.associatedWith;
      case 'DerivedFrom':
        return AssociationEdgeType.derivedFrom;
      case 'Produced':
        return AssociationEdgeType.produced;
    }
    throw Exception('$this is not known in enum AssociationEdgeType');
  }
}

/// Lists a summary of the properties of an association. An association is an
/// entity that links other lineage or experiment entities. An example would be
/// an association between a training job and a model.
class AssociationSummary {
  /// The type of the association.
  final AssociationEdgeType? associationType;
  final UserContext? createdBy;

  /// When the association was created.
  final DateTime? creationTime;

  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The name of the destination.
  final String? destinationName;

  /// The destination type.
  final String? destinationType;

  /// The ARN of the source.
  final String? sourceArn;

  /// The name of the source.
  final String? sourceName;

  /// The source type.
  final String? sourceType;

  AssociationSummary({
    this.associationType,
    this.createdBy,
    this.creationTime,
    this.destinationArn,
    this.destinationName,
    this.destinationType,
    this.sourceArn,
    this.sourceName,
    this.sourceType,
  });

  factory AssociationSummary.fromJson(Map<String, dynamic> json) {
    return AssociationSummary(
      associationType:
          (json['AssociationType'] as String?)?.toAssociationEdgeType(),
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      destinationArn: json['DestinationArn'] as String?,
      destinationName: json['DestinationName'] as String?,
      destinationType: json['DestinationType'] as String?,
      sourceArn: json['SourceArn'] as String?,
      sourceName: json['SourceName'] as String?,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final associationType = this.associationType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final destinationArn = this.destinationArn;
    final destinationName = this.destinationName;
    final destinationType = this.destinationType;
    final sourceArn = this.sourceArn;
    final sourceName = this.sourceName;
    final sourceType = this.sourceType;
    return {
      if (associationType != null) 'AssociationType': associationType.toValue(),
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (destinationName != null) 'DestinationName': destinationName,
      if (destinationType != null) 'DestinationType': destinationType,
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (sourceName != null) 'SourceName': sourceName,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// Configuration for Athena Dataset Definition input.
class AthenaDatasetDefinition {
  final String catalog;
  final String database;
  final AthenaResultFormat outputFormat;

  /// The location in Amazon S3 where Athena query results are stored.
  final String outputS3Uri;
  final String queryString;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data generated from an Athena query
  /// execution.
  final String? kmsKeyId;
  final AthenaResultCompressionType? outputCompression;
  final String? workGroup;

  AthenaDatasetDefinition({
    required this.catalog,
    required this.database,
    required this.outputFormat,
    required this.outputS3Uri,
    required this.queryString,
    this.kmsKeyId,
    this.outputCompression,
    this.workGroup,
  });

  factory AthenaDatasetDefinition.fromJson(Map<String, dynamic> json) {
    return AthenaDatasetDefinition(
      catalog: json['Catalog'] as String,
      database: json['Database'] as String,
      outputFormat: (json['OutputFormat'] as String).toAthenaResultFormat(),
      outputS3Uri: json['OutputS3Uri'] as String,
      queryString: json['QueryString'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      outputCompression: (json['OutputCompression'] as String?)
          ?.toAthenaResultCompressionType(),
      workGroup: json['WorkGroup'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final catalog = this.catalog;
    final database = this.database;
    final outputFormat = this.outputFormat;
    final outputS3Uri = this.outputS3Uri;
    final queryString = this.queryString;
    final kmsKeyId = this.kmsKeyId;
    final outputCompression = this.outputCompression;
    final workGroup = this.workGroup;
    return {
      'Catalog': catalog,
      'Database': database,
      'OutputFormat': outputFormat.toValue(),
      'OutputS3Uri': outputS3Uri,
      'QueryString': queryString,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (outputCompression != null)
        'OutputCompression': outputCompression.toValue(),
      if (workGroup != null) 'WorkGroup': workGroup,
    };
  }
}

/// The compression used for Athena query results.
enum AthenaResultCompressionType {
  gzip,
  snappy,
  zlib,
}

extension on AthenaResultCompressionType {
  String toValue() {
    switch (this) {
      case AthenaResultCompressionType.gzip:
        return 'GZIP';
      case AthenaResultCompressionType.snappy:
        return 'SNAPPY';
      case AthenaResultCompressionType.zlib:
        return 'ZLIB';
    }
  }
}

extension on String {
  AthenaResultCompressionType toAthenaResultCompressionType() {
    switch (this) {
      case 'GZIP':
        return AthenaResultCompressionType.gzip;
      case 'SNAPPY':
        return AthenaResultCompressionType.snappy;
      case 'ZLIB':
        return AthenaResultCompressionType.zlib;
    }
    throw Exception('$this is not known in enum AthenaResultCompressionType');
  }
}

/// The data storage format for Athena query results.
enum AthenaResultFormat {
  parquet,
  orc,
  avro,
  json,
  textfile,
}

extension on AthenaResultFormat {
  String toValue() {
    switch (this) {
      case AthenaResultFormat.parquet:
        return 'PARQUET';
      case AthenaResultFormat.orc:
        return 'ORC';
      case AthenaResultFormat.avro:
        return 'AVRO';
      case AthenaResultFormat.json:
        return 'JSON';
      case AthenaResultFormat.textfile:
        return 'TEXTFILE';
    }
  }
}

extension on String {
  AthenaResultFormat toAthenaResultFormat() {
    switch (this) {
      case 'PARQUET':
        return AthenaResultFormat.parquet;
      case 'ORC':
        return AthenaResultFormat.orc;
      case 'AVRO':
        return AthenaResultFormat.avro;
      case 'JSON':
        return AthenaResultFormat.json;
      case 'TEXTFILE':
        return AthenaResultFormat.textfile;
    }
    throw Exception('$this is not known in enum AthenaResultFormat');
  }
}

enum AuthMode {
  sso,
  iam,
}

extension on AuthMode {
  String toValue() {
    switch (this) {
      case AuthMode.sso:
        return 'SSO';
      case AuthMode.iam:
        return 'IAM';
    }
  }
}

extension on String {
  AuthMode toAuthMode() {
    switch (this) {
      case 'SSO':
        return AuthMode.sso;
      case 'IAM':
        return AuthMode.iam;
    }
    throw Exception('$this is not known in enum AuthMode');
  }
}

/// An Autopilot job returns recommendations, or candidates. Each candidate has
/// futher details about the steps involved and the status.
class AutoMLCandidate {
  /// The name of the candidate.
  final String candidateName;

  /// The candidate's status.
  final CandidateStatus candidateStatus;

  /// Information about the candidate's steps.
  final List<AutoMLCandidateStep> candidateSteps;

  /// The creation time.
  final DateTime creationTime;

  /// The last modified time.
  final DateTime lastModifiedTime;

  /// The objective's status.
  final ObjectiveStatus objectiveStatus;

  /// The AutoML candidate's properties.
  final CandidateProperties? candidateProperties;

  /// The end time.
  final DateTime? endTime;

  /// The failure reason.
  final String? failureReason;
  final FinalAutoMLJobObjectiveMetric? finalAutoMLJobObjectiveMetric;

  /// Information about the inference container definitions.
  final List<AutoMLContainerDefinition>? inferenceContainers;

  AutoMLCandidate({
    required this.candidateName,
    required this.candidateStatus,
    required this.candidateSteps,
    required this.creationTime,
    required this.lastModifiedTime,
    required this.objectiveStatus,
    this.candidateProperties,
    this.endTime,
    this.failureReason,
    this.finalAutoMLJobObjectiveMetric,
    this.inferenceContainers,
  });

  factory AutoMLCandidate.fromJson(Map<String, dynamic> json) {
    return AutoMLCandidate(
      candidateName: json['CandidateName'] as String,
      candidateStatus: (json['CandidateStatus'] as String).toCandidateStatus(),
      candidateSteps: (json['CandidateSteps'] as List)
          .whereNotNull()
          .map((e) => AutoMLCandidateStep.fromJson(e as Map<String, dynamic>))
          .toList(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      objectiveStatus: (json['ObjectiveStatus'] as String).toObjectiveStatus(),
      candidateProperties: json['CandidateProperties'] != null
          ? CandidateProperties.fromJson(
              json['CandidateProperties'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      finalAutoMLJobObjectiveMetric:
          json['FinalAutoMLJobObjectiveMetric'] != null
              ? FinalAutoMLJobObjectiveMetric.fromJson(
                  json['FinalAutoMLJobObjectiveMetric'] as Map<String, dynamic>)
              : null,
      inferenceContainers: (json['InferenceContainers'] as List?)
          ?.whereNotNull()
          .map((e) =>
              AutoMLContainerDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final candidateName = this.candidateName;
    final candidateStatus = this.candidateStatus;
    final candidateSteps = this.candidateSteps;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final objectiveStatus = this.objectiveStatus;
    final candidateProperties = this.candidateProperties;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final finalAutoMLJobObjectiveMetric = this.finalAutoMLJobObjectiveMetric;
    final inferenceContainers = this.inferenceContainers;
    return {
      'CandidateName': candidateName,
      'CandidateStatus': candidateStatus.toValue(),
      'CandidateSteps': candidateSteps,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'ObjectiveStatus': objectiveStatus.toValue(),
      if (candidateProperties != null)
        'CandidateProperties': candidateProperties,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalAutoMLJobObjectiveMetric != null)
        'FinalAutoMLJobObjectiveMetric': finalAutoMLJobObjectiveMetric,
      if (inferenceContainers != null)
        'InferenceContainers': inferenceContainers,
    };
  }
}

/// Information about the steps for a candidate and what step it is working on.
class AutoMLCandidateStep {
  /// The ARN for the candidate's step.
  final String candidateStepArn;

  /// The name for the candidate's step.
  final String candidateStepName;

  /// Whether the candidate is at the transform, training, or processing step.
  final CandidateStepType candidateStepType;

  AutoMLCandidateStep({
    required this.candidateStepArn,
    required this.candidateStepName,
    required this.candidateStepType,
  });

  factory AutoMLCandidateStep.fromJson(Map<String, dynamic> json) {
    return AutoMLCandidateStep(
      candidateStepArn: json['CandidateStepArn'] as String,
      candidateStepName: json['CandidateStepName'] as String,
      candidateStepType:
          (json['CandidateStepType'] as String).toCandidateStepType(),
    );
  }

  Map<String, dynamic> toJson() {
    final candidateStepArn = this.candidateStepArn;
    final candidateStepName = this.candidateStepName;
    final candidateStepType = this.candidateStepType;
    return {
      'CandidateStepArn': candidateStepArn,
      'CandidateStepName': candidateStepName,
      'CandidateStepType': candidateStepType.toValue(),
    };
  }
}

/// A channel is a named input source that training algorithms can consume. For
/// more information, see .
class AutoMLChannel {
  /// The data source for an AutoML channel.
  final AutoMLDataSource dataSource;

  /// The name of the target variable in supervised learning, usually represented
  /// by 'y'.
  final String targetAttributeName;

  /// You can use <code>Gzip</code> or <code>None</code>. The default value is
  /// <code>None</code>.
  final CompressionType? compressionType;

  AutoMLChannel({
    required this.dataSource,
    required this.targetAttributeName,
    this.compressionType,
  });

  factory AutoMLChannel.fromJson(Map<String, dynamic> json) {
    return AutoMLChannel(
      dataSource:
          AutoMLDataSource.fromJson(json['DataSource'] as Map<String, dynamic>),
      targetAttributeName: json['TargetAttributeName'] as String,
      compressionType:
          (json['CompressionType'] as String?)?.toCompressionType(),
    );
  }

  Map<String, dynamic> toJson() {
    final dataSource = this.dataSource;
    final targetAttributeName = this.targetAttributeName;
    final compressionType = this.compressionType;
    return {
      'DataSource': dataSource,
      'TargetAttributeName': targetAttributeName,
      if (compressionType != null) 'CompressionType': compressionType.toValue(),
    };
  }
}

/// A list of container definitions that describe the different containers that
/// make up an AutoML candidate. For more information, see .
class AutoMLContainerDefinition {
  /// The ECR path of the container. For more information, see .
  final String image;

  /// The location of the model artifacts. For more information, see .
  final String modelDataUrl;

  /// The environment variables to set in the container. For more information, see
  /// .
  final Map<String, String>? environment;

  AutoMLContainerDefinition({
    required this.image,
    required this.modelDataUrl,
    this.environment,
  });

  factory AutoMLContainerDefinition.fromJson(Map<String, dynamic> json) {
    return AutoMLContainerDefinition(
      image: json['Image'] as String,
      modelDataUrl: json['ModelDataUrl'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final image = this.image;
    final modelDataUrl = this.modelDataUrl;
    final environment = this.environment;
    return {
      'Image': image,
      'ModelDataUrl': modelDataUrl,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// The data source for the Autopilot job.
class AutoMLDataSource {
  /// The Amazon S3 location of the input data.
  /// <note>
  /// The input data must be in CSV format and contain at least 500 rows.
  /// </note>
  final AutoMLS3DataSource s3DataSource;

  AutoMLDataSource({
    required this.s3DataSource,
  });

  factory AutoMLDataSource.fromJson(Map<String, dynamic> json) {
    return AutoMLDataSource(
      s3DataSource: AutoMLS3DataSource.fromJson(
          json['S3DataSource'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    return {
      'S3DataSource': s3DataSource,
    };
  }
}

/// The artifacts that are generated during an AutoML job.
class AutoMLJobArtifacts {
  /// The URL of the notebook location.
  final String? candidateDefinitionNotebookLocation;

  /// The URL of the notebook location.
  final String? dataExplorationNotebookLocation;

  AutoMLJobArtifacts({
    this.candidateDefinitionNotebookLocation,
    this.dataExplorationNotebookLocation,
  });

  factory AutoMLJobArtifacts.fromJson(Map<String, dynamic> json) {
    return AutoMLJobArtifacts(
      candidateDefinitionNotebookLocation:
          json['CandidateDefinitionNotebookLocation'] as String?,
      dataExplorationNotebookLocation:
          json['DataExplorationNotebookLocation'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final candidateDefinitionNotebookLocation =
        this.candidateDefinitionNotebookLocation;
    final dataExplorationNotebookLocation =
        this.dataExplorationNotebookLocation;
    return {
      if (candidateDefinitionNotebookLocation != null)
        'CandidateDefinitionNotebookLocation':
            candidateDefinitionNotebookLocation,
      if (dataExplorationNotebookLocation != null)
        'DataExplorationNotebookLocation': dataExplorationNotebookLocation,
    };
  }
}

/// How long a job is allowed to run, or how many candidates a job is allowed to
/// generate.
class AutoMLJobCompletionCriteria {
  /// The maximum runtime, in seconds, an AutoML job has to complete.
  final int? maxAutoMLJobRuntimeInSeconds;

  /// The maximum number of times a training job is allowed to run.
  final int? maxCandidates;

  /// The maximum time, in seconds, a training job is allowed to run as part of an
  /// AutoML job.
  final int? maxRuntimePerTrainingJobInSeconds;

  AutoMLJobCompletionCriteria({
    this.maxAutoMLJobRuntimeInSeconds,
    this.maxCandidates,
    this.maxRuntimePerTrainingJobInSeconds,
  });

  factory AutoMLJobCompletionCriteria.fromJson(Map<String, dynamic> json) {
    return AutoMLJobCompletionCriteria(
      maxAutoMLJobRuntimeInSeconds:
          json['MaxAutoMLJobRuntimeInSeconds'] as int?,
      maxCandidates: json['MaxCandidates'] as int?,
      maxRuntimePerTrainingJobInSeconds:
          json['MaxRuntimePerTrainingJobInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxAutoMLJobRuntimeInSeconds = this.maxAutoMLJobRuntimeInSeconds;
    final maxCandidates = this.maxCandidates;
    final maxRuntimePerTrainingJobInSeconds =
        this.maxRuntimePerTrainingJobInSeconds;
    return {
      if (maxAutoMLJobRuntimeInSeconds != null)
        'MaxAutoMLJobRuntimeInSeconds': maxAutoMLJobRuntimeInSeconds,
      if (maxCandidates != null) 'MaxCandidates': maxCandidates,
      if (maxRuntimePerTrainingJobInSeconds != null)
        'MaxRuntimePerTrainingJobInSeconds': maxRuntimePerTrainingJobInSeconds,
    };
  }
}

/// A collection of settings used for an AutoML job.
class AutoMLJobConfig {
  /// How long an AutoML job is allowed to run, or how many candidates a job is
  /// allowed to generate.
  final AutoMLJobCompletionCriteria? completionCriteria;

  /// The security configuration for traffic encryption or Amazon VPC settings.
  final AutoMLSecurityConfig? securityConfig;

  AutoMLJobConfig({
    this.completionCriteria,
    this.securityConfig,
  });

  factory AutoMLJobConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLJobConfig(
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      securityConfig: json['SecurityConfig'] != null
          ? AutoMLSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final completionCriteria = this.completionCriteria;
    final securityConfig = this.securityConfig;
    return {
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
    };
  }
}

/// Specifies a metric to minimize or maximize as the objective of a job.
class AutoMLJobObjective {
  /// The name of the objective metric used to measure the predictive quality of a
  /// machine learning system. This metric is optimized during training to provide
  /// the best estimate for model parameter values from data.
  ///
  /// Here are the options:
  ///
  /// <ul>
  /// <li>
  /// <code>MSE</code>: The mean squared error (MSE) is the average of the squared
  /// differences between the predicted and actual values. It is used for
  /// regression. MSE values are always positive: the better a model is at
  /// predicting the actual values, the smaller the MSE value. When the data
  /// contains outliers, they tend to dominate the MSE, which might cause subpar
  /// prediction performance.
  /// </li>
  /// <li>
  /// <code>Accuracy</code>: The ratio of the number of correctly classified items
  /// to the total number of (correctly and incorrectly) classified items. It is
  /// used for binary and multiclass classification. It measures how close the
  /// predicted class values are to the actual values. Accuracy values vary
  /// between zero and one: one indicates perfect accuracy and zero indicates
  /// perfect inaccuracy.
  /// </li>
  /// <li>
  /// <code>F1</code>: The F1 score is the harmonic mean of the precision and
  /// recall. It is used for binary classification into classes traditionally
  /// referred to as positive and negative. Predictions are said to be true when
  /// they match their actual (correct) class and false when they do not.
  /// Precision is the ratio of the true positive predictions to all positive
  /// predictions (including the false positives) in a data set and measures the
  /// quality of the prediction when it predicts the positive class. Recall (or
  /// sensitivity) is the ratio of the true positive predictions to all actual
  /// positive instances and measures how completely a model predicts the actual
  /// class members in a data set. The standard F1 score weighs precision and
  /// recall equally. But which metric is paramount typically depends on specific
  /// aspects of a problem. F1 scores vary between zero and one: one indicates the
  /// best possible performance and zero the worst.
  /// </li>
  /// <li>
  /// <code>AUC</code>: The area under the curve (AUC) metric is used to compare
  /// and evaluate binary classification by algorithms such as logistic regression
  /// that return probabilities. A threshold is needed to map the probabilities
  /// into classifications. The relevant curve is the receiver operating
  /// characteristic curve that plots the true positive rate (TPR) of predictions
  /// (or recall) against the false positive rate (FPR) as a function of the
  /// threshold value, above which a prediction is considered positive. Increasing
  /// the threshold results in fewer false positives but more false negatives. AUC
  /// is the area under this receiver operating characteristic curve and so
  /// provides an aggregated measure of the model performance across all possible
  /// classification thresholds. The AUC score can also be interpreted as the
  /// probability that a randomly selected positive data point is more likely to
  /// be predicted positive than a randomly selected negative example. AUC scores
  /// vary between zero and one: a score of one indicates perfect accuracy and a
  /// score of one half indicates that the prediction is not better than a random
  /// classifier. Values under one half predict less accurately than a random
  /// predictor. But such consistently bad predictors can simply be inverted to
  /// obtain better than random predictors.
  /// </li>
  /// <li>
  /// <code>F1macro</code>: The F1macro score applies F1 scoring to multiclass
  /// classification. In this context, you have multiple classes to predict. You
  /// just calculate the precision and recall for each class as you did for the
  /// positive class in binary classification. Then, use these values to calculate
  /// the F1 score for each class and average them to obtain the F1macro score.
  /// F1macro scores vary between zero and one: one indicates the best possible
  /// performance and zero the worst.
  /// </li>
  /// </ul>
  /// If you do not specify a metric explicitly, the default behavior is to
  /// automatically use:
  ///
  /// <ul>
  /// <li>
  /// <code>MSE</code>: for regression.
  /// </li>
  /// <li>
  /// <code>F1</code>: for binary classification
  /// </li>
  /// <li>
  /// <code>Accuracy</code>: for multiclass classification.
  /// </li>
  /// </ul>
  final AutoMLMetricEnum metricName;

  AutoMLJobObjective({
    required this.metricName,
  });

  factory AutoMLJobObjective.fromJson(Map<String, dynamic> json) {
    return AutoMLJobObjective(
      metricName: (json['MetricName'] as String).toAutoMLMetricEnum(),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    return {
      'MetricName': metricName.toValue(),
    };
  }
}

enum AutoMLJobObjectiveType {
  maximize,
  minimize,
}

extension on AutoMLJobObjectiveType {
  String toValue() {
    switch (this) {
      case AutoMLJobObjectiveType.maximize:
        return 'Maximize';
      case AutoMLJobObjectiveType.minimize:
        return 'Minimize';
    }
  }
}

extension on String {
  AutoMLJobObjectiveType toAutoMLJobObjectiveType() {
    switch (this) {
      case 'Maximize':
        return AutoMLJobObjectiveType.maximize;
      case 'Minimize':
        return AutoMLJobObjectiveType.minimize;
    }
    throw Exception('$this is not known in enum AutoMLJobObjectiveType');
  }
}

enum AutoMLJobSecondaryStatus {
  starting,
  analyzingData,
  featureEngineering,
  modelTuning,
  maxCandidatesReached,
  failed,
  stopped,
  maxAutoMLJobRuntimeReached,
  stopping,
  candidateDefinitionsGenerated,
  generatingExplainabilityReport,
  completed,
  explainabilityError,
  deployingModel,
  modelDeploymentError,
}

extension on AutoMLJobSecondaryStatus {
  String toValue() {
    switch (this) {
      case AutoMLJobSecondaryStatus.starting:
        return 'Starting';
      case AutoMLJobSecondaryStatus.analyzingData:
        return 'AnalyzingData';
      case AutoMLJobSecondaryStatus.featureEngineering:
        return 'FeatureEngineering';
      case AutoMLJobSecondaryStatus.modelTuning:
        return 'ModelTuning';
      case AutoMLJobSecondaryStatus.maxCandidatesReached:
        return 'MaxCandidatesReached';
      case AutoMLJobSecondaryStatus.failed:
        return 'Failed';
      case AutoMLJobSecondaryStatus.stopped:
        return 'Stopped';
      case AutoMLJobSecondaryStatus.maxAutoMLJobRuntimeReached:
        return 'MaxAutoMLJobRuntimeReached';
      case AutoMLJobSecondaryStatus.stopping:
        return 'Stopping';
      case AutoMLJobSecondaryStatus.candidateDefinitionsGenerated:
        return 'CandidateDefinitionsGenerated';
      case AutoMLJobSecondaryStatus.generatingExplainabilityReport:
        return 'GeneratingExplainabilityReport';
      case AutoMLJobSecondaryStatus.completed:
        return 'Completed';
      case AutoMLJobSecondaryStatus.explainabilityError:
        return 'ExplainabilityError';
      case AutoMLJobSecondaryStatus.deployingModel:
        return 'DeployingModel';
      case AutoMLJobSecondaryStatus.modelDeploymentError:
        return 'ModelDeploymentError';
    }
  }
}

extension on String {
  AutoMLJobSecondaryStatus toAutoMLJobSecondaryStatus() {
    switch (this) {
      case 'Starting':
        return AutoMLJobSecondaryStatus.starting;
      case 'AnalyzingData':
        return AutoMLJobSecondaryStatus.analyzingData;
      case 'FeatureEngineering':
        return AutoMLJobSecondaryStatus.featureEngineering;
      case 'ModelTuning':
        return AutoMLJobSecondaryStatus.modelTuning;
      case 'MaxCandidatesReached':
        return AutoMLJobSecondaryStatus.maxCandidatesReached;
      case 'Failed':
        return AutoMLJobSecondaryStatus.failed;
      case 'Stopped':
        return AutoMLJobSecondaryStatus.stopped;
      case 'MaxAutoMLJobRuntimeReached':
        return AutoMLJobSecondaryStatus.maxAutoMLJobRuntimeReached;
      case 'Stopping':
        return AutoMLJobSecondaryStatus.stopping;
      case 'CandidateDefinitionsGenerated':
        return AutoMLJobSecondaryStatus.candidateDefinitionsGenerated;
      case 'GeneratingExplainabilityReport':
        return AutoMLJobSecondaryStatus.generatingExplainabilityReport;
      case 'Completed':
        return AutoMLJobSecondaryStatus.completed;
      case 'ExplainabilityError':
        return AutoMLJobSecondaryStatus.explainabilityError;
      case 'DeployingModel':
        return AutoMLJobSecondaryStatus.deployingModel;
      case 'ModelDeploymentError':
        return AutoMLJobSecondaryStatus.modelDeploymentError;
    }
    throw Exception('$this is not known in enum AutoMLJobSecondaryStatus');
  }
}

enum AutoMLJobStatus {
  completed,
  inProgress,
  failed,
  stopped,
  stopping,
}

extension on AutoMLJobStatus {
  String toValue() {
    switch (this) {
      case AutoMLJobStatus.completed:
        return 'Completed';
      case AutoMLJobStatus.inProgress:
        return 'InProgress';
      case AutoMLJobStatus.failed:
        return 'Failed';
      case AutoMLJobStatus.stopped:
        return 'Stopped';
      case AutoMLJobStatus.stopping:
        return 'Stopping';
    }
  }
}

extension on String {
  AutoMLJobStatus toAutoMLJobStatus() {
    switch (this) {
      case 'Completed':
        return AutoMLJobStatus.completed;
      case 'InProgress':
        return AutoMLJobStatus.inProgress;
      case 'Failed':
        return AutoMLJobStatus.failed;
      case 'Stopped':
        return AutoMLJobStatus.stopped;
      case 'Stopping':
        return AutoMLJobStatus.stopping;
    }
    throw Exception('$this is not known in enum AutoMLJobStatus');
  }
}

/// Provides a summary about an AutoML job.
class AutoMLJobSummary {
  /// The ARN of the AutoML job.
  final String autoMLJobArn;

  /// The name of the AutoML you are requesting.
  final String autoMLJobName;

  /// The secondary status of the AutoML job.
  final AutoMLJobSecondaryStatus autoMLJobSecondaryStatus;

  /// The status of the AutoML job.
  final AutoMLJobStatus autoMLJobStatus;

  /// When the AutoML job was created.
  final DateTime creationTime;

  /// When the AutoML job was last modified.
  final DateTime lastModifiedTime;

  /// The end time of an AutoML job.
  final DateTime? endTime;

  /// The failure reason of an AutoML job.
  final String? failureReason;

  /// The list of reasons for partial failures within an AutoML job.
  final List<AutoMLPartialFailureReason>? partialFailureReasons;

  AutoMLJobSummary({
    required this.autoMLJobArn,
    required this.autoMLJobName,
    required this.autoMLJobSecondaryStatus,
    required this.autoMLJobStatus,
    required this.creationTime,
    required this.lastModifiedTime,
    this.endTime,
    this.failureReason,
    this.partialFailureReasons,
  });

  factory AutoMLJobSummary.fromJson(Map<String, dynamic> json) {
    return AutoMLJobSummary(
      autoMLJobArn: json['AutoMLJobArn'] as String,
      autoMLJobName: json['AutoMLJobName'] as String,
      autoMLJobSecondaryStatus: (json['AutoMLJobSecondaryStatus'] as String)
          .toAutoMLJobSecondaryStatus(),
      autoMLJobStatus: (json['AutoMLJobStatus'] as String).toAutoMLJobStatus(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      partialFailureReasons: (json['PartialFailureReasons'] as List?)
          ?.whereNotNull()
          .map((e) =>
              AutoMLPartialFailureReason.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final autoMLJobName = this.autoMLJobName;
    final autoMLJobSecondaryStatus = this.autoMLJobSecondaryStatus;
    final autoMLJobStatus = this.autoMLJobStatus;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final partialFailureReasons = this.partialFailureReasons;
    return {
      'AutoMLJobArn': autoMLJobArn,
      'AutoMLJobName': autoMLJobName,
      'AutoMLJobSecondaryStatus': autoMLJobSecondaryStatus.toValue(),
      'AutoMLJobStatus': autoMLJobStatus.toValue(),
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (partialFailureReasons != null)
        'PartialFailureReasons': partialFailureReasons,
    };
  }
}

enum AutoMLMetricEnum {
  accuracy,
  mse,
  f1,
  f1macro,
  auc,
}

extension on AutoMLMetricEnum {
  String toValue() {
    switch (this) {
      case AutoMLMetricEnum.accuracy:
        return 'Accuracy';
      case AutoMLMetricEnum.mse:
        return 'MSE';
      case AutoMLMetricEnum.f1:
        return 'F1';
      case AutoMLMetricEnum.f1macro:
        return 'F1macro';
      case AutoMLMetricEnum.auc:
        return 'AUC';
    }
  }
}

extension on String {
  AutoMLMetricEnum toAutoMLMetricEnum() {
    switch (this) {
      case 'Accuracy':
        return AutoMLMetricEnum.accuracy;
      case 'MSE':
        return AutoMLMetricEnum.mse;
      case 'F1':
        return AutoMLMetricEnum.f1;
      case 'F1macro':
        return AutoMLMetricEnum.f1macro;
      case 'AUC':
        return AutoMLMetricEnum.auc;
    }
    throw Exception('$this is not known in enum AutoMLMetricEnum');
  }
}

/// The output data configuration.
class AutoMLOutputDataConfig {
  /// The Amazon S3 output path. Must be 128 characters or less.
  final String s3OutputPath;

  /// The Amazon Web Services KMS encryption key ID.
  final String? kmsKeyId;

  AutoMLOutputDataConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
  });

  factory AutoMLOutputDataConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLOutputDataConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// The reason for a partial failure of an AutoML job.
class AutoMLPartialFailureReason {
  /// The message containing the reason for a partial failure of an AutoML job.
  final String? partialFailureMessage;

  AutoMLPartialFailureReason({
    this.partialFailureMessage,
  });

  factory AutoMLPartialFailureReason.fromJson(Map<String, dynamic> json) {
    return AutoMLPartialFailureReason(
      partialFailureMessage: json['PartialFailureMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final partialFailureMessage = this.partialFailureMessage;
    return {
      if (partialFailureMessage != null)
        'PartialFailureMessage': partialFailureMessage,
    };
  }
}

/// The Amazon S3 data source.
class AutoMLS3DataSource {
  /// The data type.
  final AutoMLS3DataType s3DataType;

  /// The URL to the Amazon S3 data source.
  final String s3Uri;

  AutoMLS3DataSource({
    required this.s3DataType,
    required this.s3Uri,
  });

  factory AutoMLS3DataSource.fromJson(Map<String, dynamic> json) {
    return AutoMLS3DataSource(
      s3DataType: (json['S3DataType'] as String).toAutoMLS3DataType(),
      s3Uri: json['S3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    return {
      'S3DataType': s3DataType.toValue(),
      'S3Uri': s3Uri,
    };
  }
}

enum AutoMLS3DataType {
  manifestFile,
  s3Prefix,
}

extension on AutoMLS3DataType {
  String toValue() {
    switch (this) {
      case AutoMLS3DataType.manifestFile:
        return 'ManifestFile';
      case AutoMLS3DataType.s3Prefix:
        return 'S3Prefix';
    }
  }
}

extension on String {
  AutoMLS3DataType toAutoMLS3DataType() {
    switch (this) {
      case 'ManifestFile':
        return AutoMLS3DataType.manifestFile;
      case 'S3Prefix':
        return AutoMLS3DataType.s3Prefix;
    }
    throw Exception('$this is not known in enum AutoMLS3DataType');
  }
}

/// Security options.
class AutoMLSecurityConfig {
  /// Whether to use traffic encryption between the container layers.
  final bool? enableInterContainerTrafficEncryption;

  /// The key used to encrypt stored data.
  final String? volumeKmsKeyId;

  /// The VPC configuration.
  final VpcConfig? vpcConfig;

  AutoMLSecurityConfig({
    this.enableInterContainerTrafficEncryption,
    this.volumeKmsKeyId,
    this.vpcConfig,
  });

  factory AutoMLSecurityConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLSecurityConfig(
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    final vpcConfig = this.vpcConfig;
    return {
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

enum AutoMLSortBy {
  name,
  creationTime,
  status,
}

extension on AutoMLSortBy {
  String toValue() {
    switch (this) {
      case AutoMLSortBy.name:
        return 'Name';
      case AutoMLSortBy.creationTime:
        return 'CreationTime';
      case AutoMLSortBy.status:
        return 'Status';
    }
  }
}

extension on String {
  AutoMLSortBy toAutoMLSortBy() {
    switch (this) {
      case 'Name':
        return AutoMLSortBy.name;
      case 'CreationTime':
        return AutoMLSortBy.creationTime;
      case 'Status':
        return AutoMLSortBy.status;
    }
    throw Exception('$this is not known in enum AutoMLSortBy');
  }
}

enum AutoMLSortOrder {
  ascending,
  descending,
}

extension on AutoMLSortOrder {
  String toValue() {
    switch (this) {
      case AutoMLSortOrder.ascending:
        return 'Ascending';
      case AutoMLSortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  AutoMLSortOrder toAutoMLSortOrder() {
    switch (this) {
      case 'Ascending':
        return AutoMLSortOrder.ascending;
      case 'Descending':
        return AutoMLSortOrder.descending;
    }
    throw Exception('$this is not known in enum AutoMLSortOrder');
  }
}

/// Currently, the <code>AutoRollbackConfig</code> API is not supported.
class AutoRollbackConfig {
  /// <p/>
  final List<Alarm>? alarms;

  AutoRollbackConfig({
    this.alarms,
  });

  factory AutoRollbackConfig.fromJson(Map<String, dynamic> json) {
    return AutoRollbackConfig(
      alarms: (json['Alarms'] as List?)
          ?.whereNotNull()
          .map((e) => Alarm.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final alarms = this.alarms;
    return {
      if (alarms != null) 'Alarms': alarms,
    };
  }
}

enum AwsManagedHumanLoopRequestSource {
  awsRekognitionDetectModerationLabelsImageV3,
  awsTextractAnalyzeDocumentFormsV1,
}

extension on AwsManagedHumanLoopRequestSource {
  String toValue() {
    switch (this) {
      case AwsManagedHumanLoopRequestSource
          .awsRekognitionDetectModerationLabelsImageV3:
        return 'AWS/Rekognition/DetectModerationLabels/Image/V3';
      case AwsManagedHumanLoopRequestSource.awsTextractAnalyzeDocumentFormsV1:
        return 'AWS/Textract/AnalyzeDocument/Forms/V1';
    }
  }
}

extension on String {
  AwsManagedHumanLoopRequestSource toAwsManagedHumanLoopRequestSource() {
    switch (this) {
      case 'AWS/Rekognition/DetectModerationLabels/Image/V3':
        return AwsManagedHumanLoopRequestSource
            .awsRekognitionDetectModerationLabelsImageV3;
      case 'AWS/Textract/AnalyzeDocument/Forms/V1':
        return AwsManagedHumanLoopRequestSource
            .awsTextractAnalyzeDocumentFormsV1;
    }
    throw Exception(
        '$this is not known in enum AwsManagedHumanLoopRequestSource');
  }
}

enum BatchStrategy {
  multiRecord,
  singleRecord,
}

extension on BatchStrategy {
  String toValue() {
    switch (this) {
      case BatchStrategy.multiRecord:
        return 'MultiRecord';
      case BatchStrategy.singleRecord:
        return 'SingleRecord';
    }
  }
}

extension on String {
  BatchStrategy toBatchStrategy() {
    switch (this) {
      case 'MultiRecord':
        return BatchStrategy.multiRecord;
      case 'SingleRecord':
        return BatchStrategy.singleRecord;
    }
    throw Exception('$this is not known in enum BatchStrategy');
  }
}

/// Contains bias metrics for a model.
class Bias {
  /// The bias report for a model
  final MetricsSource? report;

  Bias({
    this.report,
  });

  factory Bias.fromJson(Map<String, dynamic> json) {
    return Bias(
      report: json['Report'] != null
          ? MetricsSource.fromJson(json['Report'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final report = this.report;
    return {
      if (report != null) 'Report': report,
    };
  }
}

/// Currently, the <code>BlueGreenUpdatePolicy</code> API is not supported.
class BlueGreenUpdatePolicy {
  /// <p/>
  final TrafficRoutingConfig trafficRoutingConfiguration;

  /// <p/>
  final int? maximumExecutionTimeoutInSeconds;

  /// <p/>
  final int? terminationWaitInSeconds;

  BlueGreenUpdatePolicy({
    required this.trafficRoutingConfiguration,
    this.maximumExecutionTimeoutInSeconds,
    this.terminationWaitInSeconds,
  });

  factory BlueGreenUpdatePolicy.fromJson(Map<String, dynamic> json) {
    return BlueGreenUpdatePolicy(
      trafficRoutingConfiguration: TrafficRoutingConfig.fromJson(
          json['TrafficRoutingConfiguration'] as Map<String, dynamic>),
      maximumExecutionTimeoutInSeconds:
          json['MaximumExecutionTimeoutInSeconds'] as int?,
      terminationWaitInSeconds: json['TerminationWaitInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final trafficRoutingConfiguration = this.trafficRoutingConfiguration;
    final maximumExecutionTimeoutInSeconds =
        this.maximumExecutionTimeoutInSeconds;
    final terminationWaitInSeconds = this.terminationWaitInSeconds;
    return {
      'TrafficRoutingConfiguration': trafficRoutingConfiguration,
      if (maximumExecutionTimeoutInSeconds != null)
        'MaximumExecutionTimeoutInSeconds': maximumExecutionTimeoutInSeconds,
      if (terminationWaitInSeconds != null)
        'TerminationWaitInSeconds': terminationWaitInSeconds,
    };
  }
}

enum BooleanOperator {
  and,
  or,
}

extension on BooleanOperator {
  String toValue() {
    switch (this) {
      case BooleanOperator.and:
        return 'And';
      case BooleanOperator.or:
        return 'Or';
    }
  }
}

extension on String {
  BooleanOperator toBooleanOperator() {
    switch (this) {
      case 'And':
        return BooleanOperator.and;
      case 'Or':
        return BooleanOperator.or;
    }
    throw Exception('$this is not known in enum BooleanOperator');
  }
}

/// Details on the cache hit of a pipeline execution step.
class CacheHitResult {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? sourcePipelineExecutionArn;

  CacheHitResult({
    this.sourcePipelineExecutionArn,
  });

  factory CacheHitResult.fromJson(Map<String, dynamic> json) {
    return CacheHitResult(
      sourcePipelineExecutionArn: json['SourcePipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourcePipelineExecutionArn = this.sourcePipelineExecutionArn;
    return {
      if (sourcePipelineExecutionArn != null)
        'SourcePipelineExecutionArn': sourcePipelineExecutionArn,
    };
  }
}

/// Metadata about a callback step.
class CallbackStepMetadata {
  /// The pipeline generated token from the Amazon SQS queue.
  final String? callbackToken;

  /// A list of the output parameters of the callback step.
  final List<OutputParameter>? outputParameters;

  /// The URL of the Amazon Simple Queue Service (Amazon SQS) queue used by the
  /// callback step.
  final String? sqsQueueUrl;

  CallbackStepMetadata({
    this.callbackToken,
    this.outputParameters,
    this.sqsQueueUrl,
  });

  factory CallbackStepMetadata.fromJson(Map<String, dynamic> json) {
    return CallbackStepMetadata(
      callbackToken: json['CallbackToken'] as String?,
      outputParameters: (json['OutputParameters'] as List?)
          ?.whereNotNull()
          .map((e) => OutputParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
      sqsQueueUrl: json['SqsQueueUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final callbackToken = this.callbackToken;
    final outputParameters = this.outputParameters;
    final sqsQueueUrl = this.sqsQueueUrl;
    return {
      if (callbackToken != null) 'CallbackToken': callbackToken,
      if (outputParameters != null) 'OutputParameters': outputParameters,
      if (sqsQueueUrl != null) 'SqsQueueUrl': sqsQueueUrl,
    };
  }
}

/// The location of artifacts for an AutoML candidate job.
class CandidateArtifactLocations {
  /// The Amazon S3 prefix to the explainability artifacts generated for the
  /// AutoML candidate.
  final String explainability;

  CandidateArtifactLocations({
    required this.explainability,
  });

  factory CandidateArtifactLocations.fromJson(Map<String, dynamic> json) {
    return CandidateArtifactLocations(
      explainability: json['Explainability'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final explainability = this.explainability;
    return {
      'Explainability': explainability,
    };
  }
}

/// The properties of an AutoML candidate job.
class CandidateProperties {
  /// The Amazon S3 prefix to the artifacts generated for an AutoML candidate.
  final CandidateArtifactLocations? candidateArtifactLocations;

  CandidateProperties({
    this.candidateArtifactLocations,
  });

  factory CandidateProperties.fromJson(Map<String, dynamic> json) {
    return CandidateProperties(
      candidateArtifactLocations: json['CandidateArtifactLocations'] != null
          ? CandidateArtifactLocations.fromJson(
              json['CandidateArtifactLocations'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final candidateArtifactLocations = this.candidateArtifactLocations;
    return {
      if (candidateArtifactLocations != null)
        'CandidateArtifactLocations': candidateArtifactLocations,
    };
  }
}

enum CandidateSortBy {
  creationTime,
  status,
  finalObjectiveMetricValue,
}

extension on CandidateSortBy {
  String toValue() {
    switch (this) {
      case CandidateSortBy.creationTime:
        return 'CreationTime';
      case CandidateSortBy.status:
        return 'Status';
      case CandidateSortBy.finalObjectiveMetricValue:
        return 'FinalObjectiveMetricValue';
    }
  }
}

extension on String {
  CandidateSortBy toCandidateSortBy() {
    switch (this) {
      case 'CreationTime':
        return CandidateSortBy.creationTime;
      case 'Status':
        return CandidateSortBy.status;
      case 'FinalObjectiveMetricValue':
        return CandidateSortBy.finalObjectiveMetricValue;
    }
    throw Exception('$this is not known in enum CandidateSortBy');
  }
}

enum CandidateStatus {
  completed,
  inProgress,
  failed,
  stopped,
  stopping,
}

extension on CandidateStatus {
  String toValue() {
    switch (this) {
      case CandidateStatus.completed:
        return 'Completed';
      case CandidateStatus.inProgress:
        return 'InProgress';
      case CandidateStatus.failed:
        return 'Failed';
      case CandidateStatus.stopped:
        return 'Stopped';
      case CandidateStatus.stopping:
        return 'Stopping';
    }
  }
}

extension on String {
  CandidateStatus toCandidateStatus() {
    switch (this) {
      case 'Completed':
        return CandidateStatus.completed;
      case 'InProgress':
        return CandidateStatus.inProgress;
      case 'Failed':
        return CandidateStatus.failed;
      case 'Stopped':
        return CandidateStatus.stopped;
      case 'Stopping':
        return CandidateStatus.stopping;
    }
    throw Exception('$this is not known in enum CandidateStatus');
  }
}

enum CandidateStepType {
  awsSageMakerTrainingJob,
  awsSageMakerTransformJob,
  awsSageMakerProcessingJob,
}

extension on CandidateStepType {
  String toValue() {
    switch (this) {
      case CandidateStepType.awsSageMakerTrainingJob:
        return 'AWS::SageMaker::TrainingJob';
      case CandidateStepType.awsSageMakerTransformJob:
        return 'AWS::SageMaker::TransformJob';
      case CandidateStepType.awsSageMakerProcessingJob:
        return 'AWS::SageMaker::ProcessingJob';
    }
  }
}

extension on String {
  CandidateStepType toCandidateStepType() {
    switch (this) {
      case 'AWS::SageMaker::TrainingJob':
        return CandidateStepType.awsSageMakerTrainingJob;
      case 'AWS::SageMaker::TransformJob':
        return CandidateStepType.awsSageMakerTransformJob;
      case 'AWS::SageMaker::ProcessingJob':
        return CandidateStepType.awsSageMakerProcessingJob;
    }
    throw Exception('$this is not known in enum CandidateStepType');
  }
}

/// Currently, the <code>CapacitySize</code> API is not supported.
class CapacitySize {
  /// This API is not supported.
  final CapacitySizeType type;

  /// <p/>
  final int value;

  CapacitySize({
    required this.type,
    required this.value,
  });

  factory CapacitySize.fromJson(Map<String, dynamic> json) {
    return CapacitySize(
      type: (json['Type'] as String).toCapacitySizeType(),
      value: json['Value'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final value = this.value;
    return {
      'Type': type.toValue(),
      'Value': value,
    };
  }
}

enum CapacitySizeType {
  instanceCount,
  capacityPercent,
}

extension on CapacitySizeType {
  String toValue() {
    switch (this) {
      case CapacitySizeType.instanceCount:
        return 'INSTANCE_COUNT';
      case CapacitySizeType.capacityPercent:
        return 'CAPACITY_PERCENT';
    }
  }
}

extension on String {
  CapacitySizeType toCapacitySizeType() {
    switch (this) {
      case 'INSTANCE_COUNT':
        return CapacitySizeType.instanceCount;
      case 'CAPACITY_PERCENT':
        return CapacitySizeType.capacityPercent;
    }
    throw Exception('$this is not known in enum CapacitySizeType');
  }
}

/// <p/>
class CaptureContentTypeHeader {
  /// <p/>
  final List<String>? csvContentTypes;

  /// <p/>
  final List<String>? jsonContentTypes;

  CaptureContentTypeHeader({
    this.csvContentTypes,
    this.jsonContentTypes,
  });

  factory CaptureContentTypeHeader.fromJson(Map<String, dynamic> json) {
    return CaptureContentTypeHeader(
      csvContentTypes: (json['CsvContentTypes'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      jsonContentTypes: (json['JsonContentTypes'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final csvContentTypes = this.csvContentTypes;
    final jsonContentTypes = this.jsonContentTypes;
    return {
      if (csvContentTypes != null) 'CsvContentTypes': csvContentTypes,
      if (jsonContentTypes != null) 'JsonContentTypes': jsonContentTypes,
    };
  }
}

enum CaptureMode {
  input,
  output,
}

extension on CaptureMode {
  String toValue() {
    switch (this) {
      case CaptureMode.input:
        return 'Input';
      case CaptureMode.output:
        return 'Output';
    }
  }
}

extension on String {
  CaptureMode toCaptureMode() {
    switch (this) {
      case 'Input':
        return CaptureMode.input;
      case 'Output':
        return CaptureMode.output;
    }
    throw Exception('$this is not known in enum CaptureMode');
  }
}

/// <p/>
class CaptureOption {
  /// <p/>
  final CaptureMode captureMode;

  CaptureOption({
    required this.captureMode,
  });

  factory CaptureOption.fromJson(Map<String, dynamic> json) {
    return CaptureOption(
      captureMode: (json['CaptureMode'] as String).toCaptureMode(),
    );
  }

  Map<String, dynamic> toJson() {
    final captureMode = this.captureMode;
    return {
      'CaptureMode': captureMode.toValue(),
    };
  }
}

enum CaptureStatus {
  started,
  stopped,
}

extension on CaptureStatus {
  String toValue() {
    switch (this) {
      case CaptureStatus.started:
        return 'Started';
      case CaptureStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  CaptureStatus toCaptureStatus() {
    switch (this) {
      case 'Started':
        return CaptureStatus.started;
      case 'Stopped':
        return CaptureStatus.stopped;
    }
    throw Exception('$this is not known in enum CaptureStatus');
  }
}

/// A list of categorical hyperparameters to tune.
class CategoricalParameterRange {
  /// The name of the categorical hyperparameter to tune.
  final String name;

  /// A list of the categories for the hyperparameter.
  final List<String> values;

  CategoricalParameterRange({
    required this.name,
    required this.values,
  });

  factory CategoricalParameterRange.fromJson(Map<String, dynamic> json) {
    return CategoricalParameterRange(
      name: json['Name'] as String,
      values: (json['Values'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final values = this.values;
    return {
      'Name': name,
      'Values': values,
    };
  }
}

/// Defines the possible values for a categorical hyperparameter.
class CategoricalParameterRangeSpecification {
  /// The allowed categories for the hyperparameter.
  final List<String> values;

  CategoricalParameterRangeSpecification({
    required this.values,
  });

  factory CategoricalParameterRangeSpecification.fromJson(
      Map<String, dynamic> json) {
    return CategoricalParameterRangeSpecification(
      values: (json['Values'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final values = this.values;
    return {
      'Values': values,
    };
  }
}

/// A channel is a named input source that training algorithms can consume.
class Channel {
  /// The name of the channel.
  final String channelName;

  /// The location of the channel data.
  final DataSource dataSource;

  /// If training data is compressed, the compression type. The default value is
  /// <code>None</code>. <code>CompressionType</code> is used only in Pipe input
  /// mode. In File mode, leave this field unset or set it to None.
  final CompressionType? compressionType;

  /// The MIME type of the data.
  final String? contentType;

  /// (Optional) The input mode to use for the data channel in a training job. If
  /// you don't set a value for <code>InputMode</code>, Amazon SageMaker uses the
  /// value set for <code>TrainingInputMode</code>. Use this parameter to override
  /// the <code>TrainingInputMode</code> setting in a
  /// <a>AlgorithmSpecification</a> request when you have a channel that needs a
  /// different input mode from the training job's general setting. To download
  /// the data from Amazon Simple Storage Service (Amazon S3) to the provisioned
  /// ML storage volume, and mount the directory to a Docker volume, use
  /// <code>File</code> input mode. To stream data directly from Amazon S3 to the
  /// container, choose <code>Pipe</code> input mode.
  ///
  /// To use a model for incremental training, choose <code>File</code> input
  /// model.
  final TrainingInputMode? inputMode;

  /// <p/>
  /// Specify RecordIO as the value when input data is in raw format but the
  /// training algorithm requires the RecordIO format. In this case, Amazon
  /// SageMaker wraps each individual S3 object in a RecordIO record. If the input
  /// data is already in RecordIO format, you don't need to set this attribute.
  /// For more information, see <a
  /// href="https://mxnet.apache.org/api/architecture/note_data_loading#data-format">Create
  /// a Dataset Using RecordIO</a>.
  ///
  /// In File mode, leave this field unset or set it to None.
  final RecordWrapper? recordWrapperType;

  /// A configuration for a shuffle option for input data in a channel. If you use
  /// <code>S3Prefix</code> for <code>S3DataType</code>, this shuffles the results
  /// of the S3 key prefix matches. If you use <code>ManifestFile</code>, the
  /// order of the S3 object references in the <code>ManifestFile</code> is
  /// shuffled. If you use <code>AugmentedManifestFile</code>, the order of the
  /// JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The
  /// shuffling order is determined using the <code>Seed</code> value.
  ///
  /// For Pipe input mode, shuffling is done at the start of every epoch. With
  /// large datasets this ensures that the order of the training data is different
  /// for each epoch, it helps reduce bias and possible overfitting. In a
  /// multi-node training job when ShuffleConfig is combined with
  /// <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data
  /// is shuffled across nodes so that the content sent to a particular node on
  /// the first epoch might be sent to a different node on the second epoch.
  final ShuffleConfig? shuffleConfig;

  Channel({
    required this.channelName,
    required this.dataSource,
    this.compressionType,
    this.contentType,
    this.inputMode,
    this.recordWrapperType,
    this.shuffleConfig,
  });

  factory Channel.fromJson(Map<String, dynamic> json) {
    return Channel(
      channelName: json['ChannelName'] as String,
      dataSource:
          DataSource.fromJson(json['DataSource'] as Map<String, dynamic>),
      compressionType:
          (json['CompressionType'] as String?)?.toCompressionType(),
      contentType: json['ContentType'] as String?,
      inputMode: (json['InputMode'] as String?)?.toTrainingInputMode(),
      recordWrapperType:
          (json['RecordWrapperType'] as String?)?.toRecordWrapper(),
      shuffleConfig: json['ShuffleConfig'] != null
          ? ShuffleConfig.fromJson(
              json['ShuffleConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final channelName = this.channelName;
    final dataSource = this.dataSource;
    final compressionType = this.compressionType;
    final contentType = this.contentType;
    final inputMode = this.inputMode;
    final recordWrapperType = this.recordWrapperType;
    final shuffleConfig = this.shuffleConfig;
    return {
      'ChannelName': channelName,
      'DataSource': dataSource,
      if (compressionType != null) 'CompressionType': compressionType.toValue(),
      if (contentType != null) 'ContentType': contentType,
      if (inputMode != null) 'InputMode': inputMode.toValue(),
      if (recordWrapperType != null)
        'RecordWrapperType': recordWrapperType.toValue(),
      if (shuffleConfig != null) 'ShuffleConfig': shuffleConfig,
    };
  }
}

/// Defines a named input source, called a channel, to be used by an algorithm.
class ChannelSpecification {
  /// The name of the channel.
  final String name;

  /// The supported MIME types for the data.
  final List<String> supportedContentTypes;

  /// The allowed input mode, either FILE or PIPE.
  ///
  /// In FILE mode, Amazon SageMaker copies the data from the input source onto
  /// the local Amazon Elastic Block Store (Amazon EBS) volumes before starting
  /// your training algorithm. This is the most commonly used input mode.
  ///
  /// In PIPE mode, Amazon SageMaker streams input data from the source directly
  /// to your algorithm without using the EBS volume.
  final List<TrainingInputMode> supportedInputModes;

  /// A brief description of the channel.
  final String? description;

  /// Indicates whether the channel is required by the algorithm.
  final bool? isRequired;

  /// The allowed compression types, if data compression is used.
  final List<CompressionType>? supportedCompressionTypes;

  ChannelSpecification({
    required this.name,
    required this.supportedContentTypes,
    required this.supportedInputModes,
    this.description,
    this.isRequired,
    this.supportedCompressionTypes,
  });

  factory ChannelSpecification.fromJson(Map<String, dynamic> json) {
    return ChannelSpecification(
      name: json['Name'] as String,
      supportedContentTypes: (json['SupportedContentTypes'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
      supportedInputModes: (json['SupportedInputModes'] as List)
          .whereNotNull()
          .map((e) => (e as String).toTrainingInputMode())
          .toList(),
      description: json['Description'] as String?,
      isRequired: json['IsRequired'] as bool?,
      supportedCompressionTypes: (json['SupportedCompressionTypes'] as List?)
          ?.whereNotNull()
          .map((e) => (e as String).toCompressionType())
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final supportedContentTypes = this.supportedContentTypes;
    final supportedInputModes = this.supportedInputModes;
    final description = this.description;
    final isRequired = this.isRequired;
    final supportedCompressionTypes = this.supportedCompressionTypes;
    return {
      'Name': name,
      'SupportedContentTypes': supportedContentTypes,
      'SupportedInputModes':
          supportedInputModes.map((e) => e.toValue()).toList(),
      if (description != null) 'Description': description,
      if (isRequired != null) 'IsRequired': isRequired,
      if (supportedCompressionTypes != null)
        'SupportedCompressionTypes':
            supportedCompressionTypes.map((e) => e.toValue()).toList(),
    };
  }
}

/// Contains information about the output location for managed spot training
/// checkpoint data.
class CheckpointConfig {
  /// Identifies the S3 path where you want Amazon SageMaker to store checkpoints.
  /// For example, <code>s3://bucket-name/key-name-prefix</code>.
  final String s3Uri;

  /// (Optional) The local directory where checkpoints are written. The default
  /// directory is <code>/opt/ml/checkpoints/</code>.
  final String? localPath;

  CheckpointConfig({
    required this.s3Uri,
    this.localPath,
  });

  factory CheckpointConfig.fromJson(Map<String, dynamic> json) {
    return CheckpointConfig(
      s3Uri: json['S3Uri'] as String,
      localPath: json['LocalPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    final localPath = this.localPath;
    return {
      'S3Uri': s3Uri,
      if (localPath != null) 'LocalPath': localPath,
    };
  }
}

enum CodeRepositorySortBy {
  name,
  creationTime,
  lastModifiedTime,
}

extension on CodeRepositorySortBy {
  String toValue() {
    switch (this) {
      case CodeRepositorySortBy.name:
        return 'Name';
      case CodeRepositorySortBy.creationTime:
        return 'CreationTime';
      case CodeRepositorySortBy.lastModifiedTime:
        return 'LastModifiedTime';
    }
  }
}

extension on String {
  CodeRepositorySortBy toCodeRepositorySortBy() {
    switch (this) {
      case 'Name':
        return CodeRepositorySortBy.name;
      case 'CreationTime':
        return CodeRepositorySortBy.creationTime;
      case 'LastModifiedTime':
        return CodeRepositorySortBy.lastModifiedTime;
    }
    throw Exception('$this is not known in enum CodeRepositorySortBy');
  }
}

enum CodeRepositorySortOrder {
  ascending,
  descending,
}

extension on CodeRepositorySortOrder {
  String toValue() {
    switch (this) {
      case CodeRepositorySortOrder.ascending:
        return 'Ascending';
      case CodeRepositorySortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  CodeRepositorySortOrder toCodeRepositorySortOrder() {
    switch (this) {
      case 'Ascending':
        return CodeRepositorySortOrder.ascending;
      case 'Descending':
        return CodeRepositorySortOrder.descending;
    }
    throw Exception('$this is not known in enum CodeRepositorySortOrder');
  }
}

/// Specifies summary information about a Git repository.
class CodeRepositorySummary {
  /// The Amazon Resource Name (ARN) of the Git repository.
  final String codeRepositoryArn;

  /// The name of the Git repository.
  final String codeRepositoryName;

  /// The date and time that the Git repository was created.
  final DateTime creationTime;

  /// The date and time that the Git repository was last modified.
  final DateTime lastModifiedTime;

  /// Configuration details for the Git repository, including the URL where it is
  /// located and the ARN of the Amazon Web Services Secrets Manager secret that
  /// contains the credentials used to access the repository.
  final GitConfig? gitConfig;

  CodeRepositorySummary({
    required this.codeRepositoryArn,
    required this.codeRepositoryName,
    required this.creationTime,
    required this.lastModifiedTime,
    this.gitConfig,
  });

  factory CodeRepositorySummary.fromJson(Map<String, dynamic> json) {
    return CodeRepositorySummary(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
      codeRepositoryName: json['CodeRepositoryName'] as String,
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      gitConfig: json['GitConfig'] != null
          ? GitConfig.fromJson(json['GitConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    final codeRepositoryName = this.codeRepositoryName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final gitConfig = this.gitConfig;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
      'CodeRepositoryName': codeRepositoryName,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (gitConfig != null) 'GitConfig': gitConfig,
    };
  }
}

/// Use this parameter to configure your Amazon Cognito workforce. A single
/// Cognito workforce is created using and corresponds to a single <a
/// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
/// Amazon Cognito user pool</a>.
class CognitoConfig {
  /// The client ID for your Amazon Cognito user pool.
  final String clientId;

  /// A <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
  /// user pool</a> is a user directory in Amazon Cognito. With a user pool, your
  /// users can sign in to your web or mobile app through Amazon Cognito. Your
  /// users can also sign in through social identity providers like Google,
  /// Facebook, Amazon, or Apple, and through SAML identity providers.
  final String userPool;

  CognitoConfig({
    required this.clientId,
    required this.userPool,
  });

  factory CognitoConfig.fromJson(Map<String, dynamic> json) {
    return CognitoConfig(
      clientId: json['ClientId'] as String,
      userPool: json['UserPool'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clientId = this.clientId;
    final userPool = this.userPool;
    return {
      'ClientId': clientId,
      'UserPool': userPool,
    };
  }
}

/// Identifies a Amazon Cognito user group. A user group can be used in on or
/// more work teams.
class CognitoMemberDefinition {
  /// An identifier for an application client. You must create the app client ID
  /// using Amazon Cognito.
  final String clientId;

  /// An identifier for a user group.
  final String userGroup;

  /// An identifier for a user pool. The user pool must be in the same region as
  /// the service that you are calling.
  final String userPool;

  CognitoMemberDefinition({
    required this.clientId,
    required this.userGroup,
    required this.userPool,
  });

  factory CognitoMemberDefinition.fromJson(Map<String, dynamic> json) {
    return CognitoMemberDefinition(
      clientId: json['ClientId'] as String,
      userGroup: json['UserGroup'] as String,
      userPool: json['UserPool'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clientId = this.clientId;
    final userGroup = this.userGroup;
    final userPool = this.userPool;
    return {
      'ClientId': clientId,
      'UserGroup': userGroup,
      'UserPool': userPool,
    };
  }
}

/// Configuration information for the Debugger output tensor collections.
class CollectionConfiguration {
  /// The name of the tensor collection. The name must be unique relative to other
  /// rule configuration names.
  final String? collectionName;

  /// Parameter values for the tensor collection. The allowed parameters are
  /// <code>"name"</code>, <code>"include_regex"</code>,
  /// <code>"reduction_config"</code>, <code>"save_config"</code>,
  /// <code>"tensor_names"</code>, and <code>"save_histogram"</code>.
  final Map<String, String>? collectionParameters;

  CollectionConfiguration({
    this.collectionName,
    this.collectionParameters,
  });

  factory CollectionConfiguration.fromJson(Map<String, dynamic> json) {
    return CollectionConfiguration(
      collectionName: json['CollectionName'] as String?,
      collectionParameters:
          (json['CollectionParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final collectionName = this.collectionName;
    final collectionParameters = this.collectionParameters;
    return {
      if (collectionName != null) 'CollectionName': collectionName,
      if (collectionParameters != null)
        'CollectionParameters': collectionParameters,
    };
  }
}

enum CompilationJobStatus {
  inprogress,
  completed,
  failed,
  starting,
  stopping,
  stopped,
}

extension on CompilationJobStatus {
  String toValue() {
    switch (this) {
      case CompilationJobStatus.inprogress:
        return 'INPROGRESS';
      case CompilationJobStatus.completed:
        return 'COMPLETED';
      case CompilationJobStatus.failed:
        return 'FAILED';
      case CompilationJobStatus.starting:
        return 'STARTING';
      case CompilationJobStatus.stopping:
        return 'STOPPING';
      case CompilationJobStatus.stopped:
        return 'STOPPED';
    }
  }
}

extension on String {
  CompilationJobStatus toCompilationJobStatus() {
    switch (this) {
      case 'INPROGRESS':
        return CompilationJobStatus.inprogress;
      case 'COMPLETED':
        return CompilationJobStatus.completed;
      case 'FAILED':
        return CompilationJobStatus.failed;
      case 'STARTING':
        return CompilationJobStatus.starting;
      case 'STOPPING':
        return CompilationJobStatus.stopping;
      case 'STOPPED':
        return CompilationJobStatus.stopped;
    }
    throw Exception('$this is not known in enum CompilationJobStatus');
  }
}

/// A summary of a model compilation job.
class CompilationJobSummary {
  /// The Amazon Resource Name (ARN) of the model compilation job.
  final String compilationJobArn;

  /// The name of the model compilation job that you want a summary for.
  final String compilationJobName;

  /// The status of the model compilation job.
  final CompilationJobStatus compilationJobStatus;

  /// The time when the model compilation job was created.
  final DateTime creationTime;

  /// The time when the model compilation job completed.
  final DateTime? compilationEndTime;

  /// The time when the model compilation job started.
  final DateTime? compilationStartTime;

  /// The type of device that the model will run on after the compilation job has
  /// completed.
  final TargetDevice? compilationTargetDevice;

  /// The type of accelerator that the model will run on after the compilation job
  /// has completed.
  final TargetPlatformAccelerator? compilationTargetPlatformAccelerator;

  /// The type of architecture that the model will run on after the compilation
  /// job has completed.
  final TargetPlatformArch? compilationTargetPlatformArch;

  /// The type of OS that the model will run on after the compilation job has
  /// completed.
  final TargetPlatformOs? compilationTargetPlatformOs;

  /// The time when the model compilation job was last modified.
  final DateTime? lastModifiedTime;

  CompilationJobSummary({
    required this.compilationJobArn,
    required this.compilationJobName,
    required this.compilationJobStatus,
    required this.creationTime,
    this.compilationEndTime,
    this.compilationStartTime,
    this.compilationTargetDevice,
    this.compilationTargetPlatformAccelerator,
    this.compilationTargetPlatformArch,
    this.compilationTargetPlatformOs,
    this.lastModifiedTime,
  });

  factory CompilationJobSummary.fromJson(Map<String, dynamic> json) {
    return CompilationJobSummary(
      compilationJobArn: json['CompilationJobArn'] as String,
      compilationJobName: json['CompilationJobName'] as String,
      compilationJobStatus:
          (json['CompilationJobStatus'] as String).toCompilationJobStatus(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      compilationEndTime: timeStampFromJson(json['CompilationEndTime']),
      compilationStartTime: timeStampFromJson(json['CompilationStartTime']),
      compilationTargetDevice:
          (json['CompilationTargetDevice'] as String?)?.toTargetDevice(),
      compilationTargetPlatformAccelerator:
          (json['CompilationTargetPlatformAccelerator'] as String?)
              ?.toTargetPlatformAccelerator(),
      compilationTargetPlatformArch:
          (json['CompilationTargetPlatformArch'] as String?)
              ?.toTargetPlatformArch(),
      compilationTargetPlatformOs:
          (json['CompilationTargetPlatformOs'] as String?)
              ?.toTargetPlatformOs(),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobArn = this.compilationJobArn;
    final compilationJobName = this.compilationJobName;
    final compilationJobStatus = this.compilationJobStatus;
    final creationTime = this.creationTime;
    final compilationEndTime = this.compilationEndTime;
    final compilationStartTime = this.compilationStartTime;
    final compilationTargetDevice = this.compilationTargetDevice;
    final compilationTargetPlatformAccelerator =
        this.compilationTargetPlatformAccelerator;
    final compilationTargetPlatformArch = this.compilationTargetPlatformArch;
    final compilationTargetPlatformOs = this.compilationTargetPlatformOs;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CompilationJobArn': compilationJobArn,
      'CompilationJobName': compilationJobName,
      'CompilationJobStatus': compilationJobStatus.toValue(),
      'CreationTime': unixTimestampToJson(creationTime),
      if (compilationEndTime != null)
        'CompilationEndTime': unixTimestampToJson(compilationEndTime),
      if (compilationStartTime != null)
        'CompilationStartTime': unixTimestampToJson(compilationStartTime),
      if (compilationTargetDevice != null)
        'CompilationTargetDevice': compilationTargetDevice.toValue(),
      if (compilationTargetPlatformAccelerator != null)
        'CompilationTargetPlatformAccelerator':
            compilationTargetPlatformAccelerator.toValue(),
      if (compilationTargetPlatformArch != null)
        'CompilationTargetPlatformArch':
            compilationTargetPlatformArch.toValue(),
      if (compilationTargetPlatformOs != null)
        'CompilationTargetPlatformOs': compilationTargetPlatformOs.toValue(),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

enum CompressionType {
  none,
  gzip,
}

extension on CompressionType {
  String toValue() {
    switch (this) {
      case CompressionType.none:
        return 'None';
      case CompressionType.gzip:
        return 'Gzip';
    }
  }
}

extension on String {
  CompressionType toCompressionType() {
    switch (this) {
      case 'None':
        return CompressionType.none;
      case 'Gzip':
        return CompressionType.gzip;
    }
    throw Exception('$this is not known in enum CompressionType');
  }
}

enum ConditionOutcome {
  $true,
  $false,
}

extension on ConditionOutcome {
  String toValue() {
    switch (this) {
      case ConditionOutcome.$true:
        return 'True';
      case ConditionOutcome.$false:
        return 'False';
    }
  }
}

extension on String {
  ConditionOutcome toConditionOutcome() {
    switch (this) {
      case 'True':
        return ConditionOutcome.$true;
      case 'False':
        return ConditionOutcome.$false;
    }
    throw Exception('$this is not known in enum ConditionOutcome');
  }
}

/// Metadata for a Condition step.
class ConditionStepMetadata {
  /// The outcome of the Condition step evaluation.
  final ConditionOutcome? outcome;

  ConditionStepMetadata({
    this.outcome,
  });

  factory ConditionStepMetadata.fromJson(Map<String, dynamic> json) {
    return ConditionStepMetadata(
      outcome: (json['Outcome'] as String?)?.toConditionOutcome(),
    );
  }

  Map<String, dynamic> toJson() {
    final outcome = this.outcome;
    return {
      if (outcome != null) 'Outcome': outcome.toValue(),
    };
  }
}

/// Describes the container, as part of model definition.
class ContainerDefinition {
  /// This parameter is ignored for models that contain only a
  /// <code>PrimaryContainer</code>.
  ///
  /// When a <code>ContainerDefinition</code> is part of an inference pipeline,
  /// the value of the parameter uniquely identifies the container for the
  /// purposes of logging and metrics. For information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html">Use
  /// Logs and Metrics to Monitor an Inference Pipeline</a>. If you don't specify
  /// a value for this parameter for a <code>ContainerDefinition</code> that is
  /// part of an inference pipeline, a unique name is automatically assigned based
  /// on the position of the <code>ContainerDefinition</code> in the pipeline. If
  /// you specify a value for the <code>ContainerHostName</code> for any
  /// <code>ContainerDefinition</code> that is part of an inference pipeline, you
  /// must specify a value for the <code>ContainerHostName</code> parameter of
  /// every <code>ContainerDefinition</code> in that pipeline.
  final String? containerHostname;

  /// The environment variables to set in the Docker container. Each key and value
  /// in the <code>Environment</code> string to string map can have length of up
  /// to 1024. We support up to 16 entries in the map.
  final Map<String, String>? environment;

  /// The path where inference code is stored. This can be either in Amazon EC2
  /// Container Registry or in a Docker registry that is accessible from the same
  /// VPC that you configure for your endpoint. If you are using your own custom
  /// algorithm instead of an algorithm provided by Amazon SageMaker, the
  /// inference code must meet Amazon SageMaker requirements. Amazon SageMaker
  /// supports both <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>
  final String? image;

  /// Specifies whether the model container is in Amazon ECR or a private Docker
  /// registry accessible from your Amazon Virtual Private Cloud (VPC). For
  /// information about storing containers in a private Docker registry, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html">Use
  /// a Private Docker Registry for Real-Time Inference Containers</a>
  final ImageConfig? imageConfig;

  /// Whether the container hosts a single model or multiple models.
  final ContainerMode? mode;

  /// The S3 path where the model artifacts, which result from model training, are
  /// stored. This path must point to a single gzip compressed tar archive
  /// (.tar.gz suffix). The S3 path is required for Amazon SageMaker built-in
  /// algorithms, but not if you use your own algorithms. For more information on
  /// built-in algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Common
  /// Parameters</a>.
  /// <note>
  /// The model artifacts must be in an S3 bucket that is in the same region as
  /// the model or endpoint you are creating.
  /// </note>
  /// If you provide a value for this parameter, Amazon SageMaker uses Amazon Web
  /// Services Security Token Service to download model artifacts from the S3 path
  /// you provide. Amazon Web Services STS is activated in your IAM user account
  /// by default. If you previously deactivated Amazon Web Services STS for a
  /// region, you need to reactivate Amazon Web Services STS for that region. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating
  /// and Deactivating Amazon Web Services STS in an Amazon Web Services
  /// Region</a> in the <i>Amazon Web Services Identity and Access Management User
  /// Guide</i>.
  /// <important>
  /// If you use a built-in algorithm to create a model, Amazon SageMaker requires
  /// that you provide a S3 path to the model artifacts in
  /// <code>ModelDataUrl</code>.
  /// </important>
  final String? modelDataUrl;

  /// The name or Amazon Resource Name (ARN) of the model package to use to create
  /// the model.
  final String? modelPackageName;

  /// Specifies additional configuration for multi-model endpoints.
  final MultiModelConfig? multiModelConfig;

  ContainerDefinition({
    this.containerHostname,
    this.environment,
    this.image,
    this.imageConfig,
    this.mode,
    this.modelDataUrl,
    this.modelPackageName,
    this.multiModelConfig,
  });

  factory ContainerDefinition.fromJson(Map<String, dynamic> json) {
    return ContainerDefinition(
      containerHostname: json['ContainerHostname'] as String?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      image: json['Image'] as String?,
      imageConfig: json['ImageConfig'] != null
          ? ImageConfig.fromJson(json['ImageConfig'] as Map<String, dynamic>)
          : null,
      mode: (json['Mode'] as String?)?.toContainerMode(),
      modelDataUrl: json['ModelDataUrl'] as String?,
      modelPackageName: json['ModelPackageName'] as String?,
      multiModelConfig: json['MultiModelConfig'] != null
          ? MultiModelConfig.fromJson(
              json['MultiModelConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final containerHostname = this.containerHostname;
    final environment = this.environment;
    final image = this.image;
    final imageConfig = this.imageConfig;
    final mode = this.mode;
    final modelDataUrl = this.modelDataUrl;
    final modelPackageName = this.modelPackageName;
    final multiModelConfig = this.multiModelConfig;
    return {
      if (containerHostname != null) 'ContainerHostname': containerHostname,
      if (environment != null) 'Environment': environment,
      if (image != null) 'Image': image,
      if (imageConfig != null) 'ImageConfig': imageConfig,
      if (mode != null) 'Mode': mode.toValue(),
      if (modelDataUrl != null) 'ModelDataUrl': modelDataUrl,
      if (modelPackageName != null) 'ModelPackageName': modelPackageName,
      if (multiModelConfig != null) 'MultiModelConfig': multiModelConfig,
    };
  }
}

enum ContainerMode {
  singleModel,
  multiModel,
}

extension on ContainerMode {
  String toValue() {
    switch (this) {
      case ContainerMode.singleModel:
        return 'SingleModel';
      case ContainerMode.multiModel:
        return 'MultiModel';
    }
  }
}

extension on String {
  ContainerMode toContainerMode() {
    switch (this) {
      case 'SingleModel':
        return ContainerMode.singleModel;
      case 'MultiModel':
        return ContainerMode.multiModel;
    }
    throw Exception('$this is not known in enum ContainerMode');
  }
}

enum ContentClassifier {
  freeOfPersonallyIdentifiableInformation,
  freeOfAdultContent,
}

extension on ContentClassifier {
  String toValue() {
    switch (this) {
      case ContentClassifier.freeOfPersonallyIdentifiableInformation:
        return 'FreeOfPersonallyIdentifiableInformation';
      case ContentClassifier.freeOfAdultContent:
        return 'FreeOfAdultContent';
    }
  }
}

extension on String {
  ContentClassifier toContentClassifier() {
    switch (this) {
      case 'FreeOfPersonallyIdentifiableInformation':
        return ContentClassifier.freeOfPersonallyIdentifiableInformation;
      case 'FreeOfAdultContent':
        return ContentClassifier.freeOfAdultContent;
    }
    throw Exception('$this is not known in enum ContentClassifier');
  }
}

/// A structure describing the source of a context.
class ContextSource {
  /// The URI of the source.
  final String sourceUri;

  /// The ID of the source.
  final String? sourceId;

  /// The type of the source.
  final String? sourceType;

  ContextSource({
    required this.sourceUri,
    this.sourceId,
    this.sourceType,
  });

  factory ContextSource.fromJson(Map<String, dynamic> json) {
    return ContextSource(
      sourceUri: json['SourceUri'] as String,
      sourceId: json['SourceId'] as String?,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceUri = this.sourceUri;
    final sourceId = this.sourceId;
    final sourceType = this.sourceType;
    return {
      'SourceUri': sourceUri,
      if (sourceId != null) 'SourceId': sourceId,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// Lists a summary of the properties of a context. A context provides a logical
/// grouping of other entities.
class ContextSummary {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  /// The name of the context.
  final String? contextName;

  /// The type of the context.
  final String? contextType;

  /// When the context was created.
  final DateTime? creationTime;

  /// When the context was last modified.
  final DateTime? lastModifiedTime;

  /// The source of the context.
  final ContextSource? source;

  ContextSummary({
    this.contextArn,
    this.contextName,
    this.contextType,
    this.creationTime,
    this.lastModifiedTime,
    this.source,
  });

  factory ContextSummary.fromJson(Map<String, dynamic> json) {
    return ContextSummary(
      contextArn: json['ContextArn'] as String?,
      contextName: json['ContextName'] as String?,
      contextType: json['ContextType'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ContextSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    final contextName = this.contextName;
    final contextType = this.contextType;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
      if (contextName != null) 'ContextName': contextName,
      if (contextType != null) 'ContextType': contextType,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
    };
  }
}

/// A list of continuous hyperparameters to tune.
class ContinuousParameterRange {
  /// The maximum value for the hyperparameter. The tuning job uses floating-point
  /// values between <code>MinValue</code> value and this value for tuning.
  final String maxValue;

  /// The minimum value for the hyperparameter. The tuning job uses floating-point
  /// values between this value and <code>MaxValue</code>for tuning.
  final String minValue;

  /// The name of the continuous hyperparameter to tune.
  final String name;

  /// The scale that hyperparameter tuning uses to search the hyperparameter
  /// range. For information about choosing a hyperparameter scale, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter
  /// Scaling</a>. One of the following values:
  /// <dl> <dt>Auto</dt> <dd>
  /// Amazon SageMaker hyperparameter tuning chooses the best scale for the
  /// hyperparameter.
  /// </dd> <dt>Linear</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a linear scale.
  /// </dd> <dt>Logarithmic</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a logarithmic scale.
  ///
  /// Logarithmic scaling works only for ranges that have only values greater than
  /// 0.
  /// </dd> <dt>ReverseLogarithmic</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a reverse logarithmic scale.
  ///
  /// Reverse logarithmic scaling works only for ranges that are entirely within
  /// the range 0&lt;=x&lt;1.0.
  /// </dd> </dl>
  final HyperParameterScalingType? scalingType;

  ContinuousParameterRange({
    required this.maxValue,
    required this.minValue,
    required this.name,
    this.scalingType,
  });

  factory ContinuousParameterRange.fromJson(Map<String, dynamic> json) {
    return ContinuousParameterRange(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
      name: json['Name'] as String,
      scalingType:
          (json['ScalingType'] as String?)?.toHyperParameterScalingType(),
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    final name = this.name;
    final scalingType = this.scalingType;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
      'Name': name,
      if (scalingType != null) 'ScalingType': scalingType.toValue(),
    };
  }
}

/// Defines the possible values for a continuous hyperparameter.
class ContinuousParameterRangeSpecification {
  /// The maximum floating-point value allowed.
  final String maxValue;

  /// The minimum floating-point value allowed.
  final String minValue;

  ContinuousParameterRangeSpecification({
    required this.maxValue,
    required this.minValue,
  });

  factory ContinuousParameterRangeSpecification.fromJson(
      Map<String, dynamic> json) {
    return ContinuousParameterRangeSpecification(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
    };
  }
}

class CreateActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  CreateActionResponse({
    this.actionArn,
  });

  factory CreateActionResponse.fromJson(Map<String, dynamic> json) {
    return CreateActionResponse(
      actionArn: json['ActionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
    };
  }
}

class CreateAlgorithmOutput {
  /// The Amazon Resource Name (ARN) of the new algorithm.
  final String algorithmArn;

  CreateAlgorithmOutput({
    required this.algorithmArn,
  });

  factory CreateAlgorithmOutput.fromJson(Map<String, dynamic> json) {
    return CreateAlgorithmOutput(
      algorithmArn: json['AlgorithmArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmArn = this.algorithmArn;
    return {
      'AlgorithmArn': algorithmArn,
    };
  }
}

class CreateAppImageConfigResponse {
  /// The Amazon Resource Name (ARN) of the AppImageConfig.
  final String? appImageConfigArn;

  CreateAppImageConfigResponse({
    this.appImageConfigArn,
  });

  factory CreateAppImageConfigResponse.fromJson(Map<String, dynamic> json) {
    return CreateAppImageConfigResponse(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
    };
  }
}

class CreateAppResponse {
  /// The Amazon Resource Name (ARN) of the app.
  final String? appArn;

  CreateAppResponse({
    this.appArn,
  });

  factory CreateAppResponse.fromJson(Map<String, dynamic> json) {
    return CreateAppResponse(
      appArn: json['AppArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appArn = this.appArn;
    return {
      if (appArn != null) 'AppArn': appArn,
    };
  }
}

class CreateArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  CreateArtifactResponse({
    this.artifactArn,
  });

  factory CreateArtifactResponse.fromJson(Map<String, dynamic> json) {
    return CreateArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
    };
  }
}

class CreateAutoMLJobResponse {
  /// The unique ARN that is assigned to the AutoML job when it is created.
  final String autoMLJobArn;

  CreateAutoMLJobResponse({
    required this.autoMLJobArn,
  });

  factory CreateAutoMLJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateAutoMLJobResponse(
      autoMLJobArn: json['AutoMLJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    return {
      'AutoMLJobArn': autoMLJobArn,
    };
  }
}

class CreateCodeRepositoryOutput {
  /// The Amazon Resource Name (ARN) of the new repository.
  final String codeRepositoryArn;

  CreateCodeRepositoryOutput({
    required this.codeRepositoryArn,
  });

  factory CreateCodeRepositoryOutput.fromJson(Map<String, dynamic> json) {
    return CreateCodeRepositoryOutput(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
    };
  }
}

class CreateCompilationJobResponse {
  /// If the action is successful, the service sends back an HTTP 200 response.
  /// Amazon SageMaker returns the following data in JSON format:
  ///
  /// <ul>
  /// <li>
  /// <code>CompilationJobArn</code>: The Amazon Resource Name (ARN) of the
  /// compiled job.
  /// </li>
  /// </ul>
  final String compilationJobArn;

  CreateCompilationJobResponse({
    required this.compilationJobArn,
  });

  factory CreateCompilationJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateCompilationJobResponse(
      compilationJobArn: json['CompilationJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobArn = this.compilationJobArn;
    return {
      'CompilationJobArn': compilationJobArn,
    };
  }
}

class CreateContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  CreateContextResponse({
    this.contextArn,
  });

  factory CreateContextResponse.fromJson(Map<String, dynamic> json) {
    return CreateContextResponse(
      contextArn: json['ContextArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
    };
  }
}

class CreateDataQualityJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the job definition.
  final String jobDefinitionArn;

  CreateDataQualityJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateDataQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateDataQualityJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateDomainResponse {
  /// The Amazon Resource Name (ARN) of the created domain.
  final String? domainArn;

  /// The URL to the created domain.
  final String? url;

  CreateDomainResponse({
    this.domainArn,
    this.url,
  });

  factory CreateDomainResponse.fromJson(Map<String, dynamic> json) {
    return CreateDomainResponse(
      domainArn: json['DomainArn'] as String?,
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainArn = this.domainArn;
    final url = this.url;
    return {
      if (domainArn != null) 'DomainArn': domainArn,
      if (url != null) 'Url': url,
    };
  }
}

class CreateEndpointConfigOutput {
  /// The Amazon Resource Name (ARN) of the endpoint configuration.
  final String endpointConfigArn;

  CreateEndpointConfigOutput({
    required this.endpointConfigArn,
  });

  factory CreateEndpointConfigOutput.fromJson(Map<String, dynamic> json) {
    return CreateEndpointConfigOutput(
      endpointConfigArn: json['EndpointConfigArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointConfigArn = this.endpointConfigArn;
    return {
      'EndpointConfigArn': endpointConfigArn,
    };
  }
}

class CreateEndpointOutput {
  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  CreateEndpointOutput({
    required this.endpointArn,
  });

  factory CreateEndpointOutput.fromJson(Map<String, dynamic> json) {
    return CreateEndpointOutput(
      endpointArn: json['EndpointArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointArn = this.endpointArn;
    return {
      'EndpointArn': endpointArn,
    };
  }
}

class CreateExperimentResponse {
  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  CreateExperimentResponse({
    this.experimentArn,
  });

  factory CreateExperimentResponse.fromJson(Map<String, dynamic> json) {
    return CreateExperimentResponse(
      experimentArn: json['ExperimentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentArn = this.experimentArn;
    return {
      if (experimentArn != null) 'ExperimentArn': experimentArn,
    };
  }
}

class CreateFeatureGroupResponse {
  /// The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>. This is a
  /// unique identifier for the feature group.
  final String featureGroupArn;

  CreateFeatureGroupResponse({
    required this.featureGroupArn,
  });

  factory CreateFeatureGroupResponse.fromJson(Map<String, dynamic> json) {
    return CreateFeatureGroupResponse(
      featureGroupArn: json['FeatureGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupArn = this.featureGroupArn;
    return {
      'FeatureGroupArn': featureGroupArn,
    };
  }
}

class CreateFlowDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the flow definition you create.
  final String flowDefinitionArn;

  CreateFlowDefinitionResponse({
    required this.flowDefinitionArn,
  });

  factory CreateFlowDefinitionResponse.fromJson(Map<String, dynamic> json) {
    return CreateFlowDefinitionResponse(
      flowDefinitionArn: json['FlowDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final flowDefinitionArn = this.flowDefinitionArn;
    return {
      'FlowDefinitionArn': flowDefinitionArn,
    };
  }
}

class CreateHumanTaskUiResponse {
  /// The Amazon Resource Name (ARN) of the human review workflow user interface
  /// you create.
  final String humanTaskUiArn;

  CreateHumanTaskUiResponse({
    required this.humanTaskUiArn,
  });

  factory CreateHumanTaskUiResponse.fromJson(Map<String, dynamic> json) {
    return CreateHumanTaskUiResponse(
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiArn = this.humanTaskUiArn;
    return {
      'HumanTaskUiArn': humanTaskUiArn,
    };
  }
}

class CreateHyperParameterTuningJobResponse {
  /// The Amazon Resource Name (ARN) of the tuning job. Amazon SageMaker assigns
  /// an ARN to a hyperparameter tuning job when you create it.
  final String hyperParameterTuningJobArn;

  CreateHyperParameterTuningJobResponse({
    required this.hyperParameterTuningJobArn,
  });

  factory CreateHyperParameterTuningJobResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateHyperParameterTuningJobResponse(
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    return {
      'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
    };
  }
}

class CreateImageResponse {
  /// The Amazon Resource Name (ARN) of the image.
  final String? imageArn;

  CreateImageResponse({
    this.imageArn,
  });

  factory CreateImageResponse.fromJson(Map<String, dynamic> json) {
    return CreateImageResponse(
      imageArn: json['ImageArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageArn = this.imageArn;
    return {
      if (imageArn != null) 'ImageArn': imageArn,
    };
  }
}

class CreateImageVersionResponse {
  /// The Amazon Resource Name (ARN) of the image version.
  final String? imageVersionArn;

  CreateImageVersionResponse({
    this.imageVersionArn,
  });

  factory CreateImageVersionResponse.fromJson(Map<String, dynamic> json) {
    return CreateImageVersionResponse(
      imageVersionArn: json['ImageVersionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageVersionArn = this.imageVersionArn;
    return {
      if (imageVersionArn != null) 'ImageVersionArn': imageVersionArn,
    };
  }
}

class CreateLabelingJobResponse {
  /// The Amazon Resource Name (ARN) of the labeling job. You use this ARN to
  /// identify the labeling job.
  final String labelingJobArn;

  CreateLabelingJobResponse({
    required this.labelingJobArn,
  });

  factory CreateLabelingJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateLabelingJobResponse(
      labelingJobArn: json['LabelingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobArn = this.labelingJobArn;
    return {
      'LabelingJobArn': labelingJobArn,
    };
  }
}

class CreateModelBiasJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the model bias job.
  final String jobDefinitionArn;

  CreateModelBiasJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateModelBiasJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateModelBiasJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateModelExplainabilityJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the model explainability job.
  final String jobDefinitionArn;

  CreateModelExplainabilityJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateModelExplainabilityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateModelExplainabilityJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateModelOutput {
  /// The ARN of the model created in Amazon SageMaker.
  final String modelArn;

  CreateModelOutput({
    required this.modelArn,
  });

  factory CreateModelOutput.fromJson(Map<String, dynamic> json) {
    return CreateModelOutput(
      modelArn: json['ModelArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelArn = this.modelArn;
    return {
      'ModelArn': modelArn,
    };
  }
}

class CreateModelPackageGroupOutput {
  /// The Amazon Resource Name (ARN) of the model group.
  final String modelPackageGroupArn;

  CreateModelPackageGroupOutput({
    required this.modelPackageGroupArn,
  });

  factory CreateModelPackageGroupOutput.fromJson(Map<String, dynamic> json) {
    return CreateModelPackageGroupOutput(
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageGroupArn = this.modelPackageGroupArn;
    return {
      'ModelPackageGroupArn': modelPackageGroupArn,
    };
  }
}

class CreateModelPackageOutput {
  /// The Amazon Resource Name (ARN) of the new model package.
  final String modelPackageArn;

  CreateModelPackageOutput({
    required this.modelPackageArn,
  });

  factory CreateModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return CreateModelPackageOutput(
      modelPackageArn: json['ModelPackageArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageArn = this.modelPackageArn;
    return {
      'ModelPackageArn': modelPackageArn,
    };
  }
}

class CreateModelQualityJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the model quality monitoring job.
  final String jobDefinitionArn;

  CreateModelQualityJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateModelQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateModelQualityJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateMonitoringScheduleResponse {
  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  CreateMonitoringScheduleResponse({
    required this.monitoringScheduleArn,
  });

  factory CreateMonitoringScheduleResponse.fromJson(Map<String, dynamic> json) {
    return CreateMonitoringScheduleResponse(
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleArn = this.monitoringScheduleArn;
    return {
      'MonitoringScheduleArn': monitoringScheduleArn,
    };
  }
}

class CreateNotebookInstanceLifecycleConfigOutput {
  /// The Amazon Resource Name (ARN) of the lifecycle configuration.
  final String? notebookInstanceLifecycleConfigArn;

  CreateNotebookInstanceLifecycleConfigOutput({
    this.notebookInstanceLifecycleConfigArn,
  });

  factory CreateNotebookInstanceLifecycleConfigOutput.fromJson(
      Map<String, dynamic> json) {
    return CreateNotebookInstanceLifecycleConfigOutput(
      notebookInstanceLifecycleConfigArn:
          json['NotebookInstanceLifecycleConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceLifecycleConfigArn =
        this.notebookInstanceLifecycleConfigArn;
    return {
      if (notebookInstanceLifecycleConfigArn != null)
        'NotebookInstanceLifecycleConfigArn':
            notebookInstanceLifecycleConfigArn,
    };
  }
}

class CreateNotebookInstanceOutput {
  /// The Amazon Resource Name (ARN) of the notebook instance.
  final String? notebookInstanceArn;

  CreateNotebookInstanceOutput({
    this.notebookInstanceArn,
  });

  factory CreateNotebookInstanceOutput.fromJson(Map<String, dynamic> json) {
    return CreateNotebookInstanceOutput(
      notebookInstanceArn: json['NotebookInstanceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceArn = this.notebookInstanceArn;
    return {
      if (notebookInstanceArn != null)
        'NotebookInstanceArn': notebookInstanceArn,
    };
  }
}

class CreatePipelineResponse {
  /// The Amazon Resource Name (ARN) of the created pipeline.
  final String? pipelineArn;

  CreatePipelineResponse({
    this.pipelineArn,
  });

  factory CreatePipelineResponse.fromJson(Map<String, dynamic> json) {
    return CreatePipelineResponse(
      pipelineArn: json['PipelineArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineArn = this.pipelineArn;
    return {
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
    };
  }
}

class CreatePresignedDomainUrlResponse {
  /// The presigned URL.
  final String? authorizedUrl;

  CreatePresignedDomainUrlResponse({
    this.authorizedUrl,
  });

  factory CreatePresignedDomainUrlResponse.fromJson(Map<String, dynamic> json) {
    return CreatePresignedDomainUrlResponse(
      authorizedUrl: json['AuthorizedUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizedUrl = this.authorizedUrl;
    return {
      if (authorizedUrl != null) 'AuthorizedUrl': authorizedUrl,
    };
  }
}

class CreatePresignedNotebookInstanceUrlOutput {
  /// A JSON object that contains the URL string.
  final String? authorizedUrl;

  CreatePresignedNotebookInstanceUrlOutput({
    this.authorizedUrl,
  });

  factory CreatePresignedNotebookInstanceUrlOutput.fromJson(
      Map<String, dynamic> json) {
    return CreatePresignedNotebookInstanceUrlOutput(
      authorizedUrl: json['AuthorizedUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizedUrl = this.authorizedUrl;
    return {
      if (authorizedUrl != null) 'AuthorizedUrl': authorizedUrl,
    };
  }
}

class CreateProcessingJobResponse {
  /// The Amazon Resource Name (ARN) of the processing job.
  final String processingJobArn;

  CreateProcessingJobResponse({
    required this.processingJobArn,
  });

  factory CreateProcessingJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateProcessingJobResponse(
      processingJobArn: json['ProcessingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final processingJobArn = this.processingJobArn;
    return {
      'ProcessingJobArn': processingJobArn,
    };
  }
}

class CreateProjectOutput {
  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  /// The ID of the new project.
  final String projectId;

  CreateProjectOutput({
    required this.projectArn,
    required this.projectId,
  });

  factory CreateProjectOutput.fromJson(Map<String, dynamic> json) {
    return CreateProjectOutput(
      projectArn: json['ProjectArn'] as String,
      projectId: json['ProjectId'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final projectArn = this.projectArn;
    final projectId = this.projectId;
    return {
      'ProjectArn': projectArn,
      'ProjectId': projectId,
    };
  }
}

class CreateTrainingJobResponse {
  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  CreateTrainingJobResponse({
    required this.trainingJobArn,
  });

  factory CreateTrainingJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateTrainingJobResponse(
      trainingJobArn: json['TrainingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobArn = this.trainingJobArn;
    return {
      'TrainingJobArn': trainingJobArn,
    };
  }
}

class CreateTransformJobResponse {
  /// The Amazon Resource Name (ARN) of the transform job.
  final String transformJobArn;

  CreateTransformJobResponse({
    required this.transformJobArn,
  });

  factory CreateTransformJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateTransformJobResponse(
      transformJobArn: json['TransformJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final transformJobArn = this.transformJobArn;
    return {
      'TransformJobArn': transformJobArn,
    };
  }
}

class CreateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  CreateTrialComponentResponse({
    this.trialComponentArn,
  });

  factory CreateTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return CreateTrialComponentResponse(
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

class CreateTrialResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  CreateTrialResponse({
    this.trialArn,
  });

  factory CreateTrialResponse.fromJson(Map<String, dynamic> json) {
    return CreateTrialResponse(
      trialArn: json['TrialArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
    };
  }
}

class CreateUserProfileResponse {
  /// The user profile Amazon Resource Name (ARN).
  final String? userProfileArn;

  CreateUserProfileResponse({
    this.userProfileArn,
  });

  factory CreateUserProfileResponse.fromJson(Map<String, dynamic> json) {
    return CreateUserProfileResponse(
      userProfileArn: json['UserProfileArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final userProfileArn = this.userProfileArn;
    return {
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
    };
  }
}

class CreateWorkforceResponse {
  /// The Amazon Resource Name (ARN) of the workforce.
  final String workforceArn;

  CreateWorkforceResponse({
    required this.workforceArn,
  });

  factory CreateWorkforceResponse.fromJson(Map<String, dynamic> json) {
    return CreateWorkforceResponse(
      workforceArn: json['WorkforceArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final workforceArn = this.workforceArn;
    return {
      'WorkforceArn': workforceArn,
    };
  }
}

class CreateWorkteamResponse {
  /// The Amazon Resource Name (ARN) of the work team. You can use this ARN to
  /// identify the work team.
  final String? workteamArn;

  CreateWorkteamResponse({
    this.workteamArn,
  });

  factory CreateWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return CreateWorkteamResponse(
      workteamArn: json['WorkteamArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workteamArn = this.workteamArn;
    return {
      if (workteamArn != null) 'WorkteamArn': workteamArn,
    };
  }
}

/// A custom SageMaker image. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring
/// your own SageMaker image</a>.
class CustomImage {
  /// The name of the AppImageConfig.
  final String appImageConfigName;

  /// The name of the CustomImage. Must be unique to your account.
  final String imageName;

  /// The version number of the CustomImage.
  final int? imageVersionNumber;

  CustomImage({
    required this.appImageConfigName,
    required this.imageName,
    this.imageVersionNumber,
  });

  factory CustomImage.fromJson(Map<String, dynamic> json) {
    return CustomImage(
      appImageConfigName: json['AppImageConfigName'] as String,
      imageName: json['ImageName'] as String,
      imageVersionNumber: json['ImageVersionNumber'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigName = this.appImageConfigName;
    final imageName = this.imageName;
    final imageVersionNumber = this.imageVersionNumber;
    return {
      'AppImageConfigName': appImageConfigName,
      'ImageName': imageName,
      if (imageVersionNumber != null) 'ImageVersionNumber': imageVersionNumber,
    };
  }
}

/// <p/>
class DataCaptureConfig {
  /// <p/>
  final List<CaptureOption> captureOptions;

  /// <p/>
  final String destinationS3Uri;

  /// <p/>
  final int initialSamplingPercentage;

  /// <p/>
  final CaptureContentTypeHeader? captureContentTypeHeader;

  /// <p/>
  final bool? enableCapture;

  /// <p/>
  final String? kmsKeyId;

  DataCaptureConfig({
    required this.captureOptions,
    required this.destinationS3Uri,
    required this.initialSamplingPercentage,
    this.captureContentTypeHeader,
    this.enableCapture,
    this.kmsKeyId,
  });

  factory DataCaptureConfig.fromJson(Map<String, dynamic> json) {
    return DataCaptureConfig(
      captureOptions: (json['CaptureOptions'] as List)
          .whereNotNull()
          .map((e) => CaptureOption.fromJson(e as Map<String, dynamic>))
          .toList(),
      destinationS3Uri: json['DestinationS3Uri'] as String,
      initialSamplingPercentage: json['InitialSamplingPercentage'] as int,
      captureContentTypeHeader: json['CaptureContentTypeHeader'] != null
          ? CaptureContentTypeHeader.fromJson(
              json['CaptureContentTypeHeader'] as Map<String, dynamic>)
          : null,
      enableCapture: json['EnableCapture'] as bool?,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final captureOptions = this.captureOptions;
    final destinationS3Uri = this.destinationS3Uri;
    final initialSamplingPercentage = this.initialSamplingPercentage;
    final captureContentTypeHeader = this.captureContentTypeHeader;
    final enableCapture = this.enableCapture;
    final kmsKeyId = this.kmsKeyId;
    return {
      'CaptureOptions': captureOptions,
      'DestinationS3Uri': destinationS3Uri,
      'InitialSamplingPercentage': initialSamplingPercentage,
      if (captureContentTypeHeader != null)
        'CaptureContentTypeHeader': captureContentTypeHeader,
      if (enableCapture != null) 'EnableCapture': enableCapture,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// <p/>
class DataCaptureConfigSummary {
  /// <p/>
  final CaptureStatus captureStatus;

  /// <p/>
  final int currentSamplingPercentage;

  /// <p/>
  final String destinationS3Uri;

  /// <p/>
  final bool enableCapture;

  /// <p/>
  final String kmsKeyId;

  DataCaptureConfigSummary({
    required this.captureStatus,
    required this.currentSamplingPercentage,
    required this.destinationS3Uri,
    required this.enableCapture,
    required this.kmsKeyId,
  });

  factory DataCaptureConfigSummary.fromJson(Map<String, dynamic> json) {
    return DataCaptureConfigSummary(
      captureStatus: (json['CaptureStatus'] as String).toCaptureStatus(),
      currentSamplingPercentage: json['CurrentSamplingPercentage'] as int,
      destinationS3Uri: json['DestinationS3Uri'] as String,
      enableCapture: json['EnableCapture'] as bool,
      kmsKeyId: json['KmsKeyId'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final captureStatus = this.captureStatus;
    final currentSamplingPercentage = this.currentSamplingPercentage;
    final destinationS3Uri = this.destinationS3Uri;
    final enableCapture = this.enableCapture;
    final kmsKeyId = this.kmsKeyId;
    return {
      'CaptureStatus': captureStatus.toValue(),
      'CurrentSamplingPercentage': currentSamplingPercentage,
      'DestinationS3Uri': destinationS3Uri,
      'EnableCapture': enableCapture,
      'KmsKeyId': kmsKeyId,
    };
  }
}

/// The meta data of the Glue table which serves as data catalog for the
/// <code>OfflineStore</code>.
class DataCatalogConfig {
  /// The name of the Glue table catalog.
  final String catalog;

  /// The name of the Glue table database.
  final String database;

  /// The name of the Glue table.
  final String tableName;

  DataCatalogConfig({
    required this.catalog,
    required this.database,
    required this.tableName,
  });

  factory DataCatalogConfig.fromJson(Map<String, dynamic> json) {
    return DataCatalogConfig(
      catalog: json['Catalog'] as String,
      database: json['Database'] as String,
      tableName: json['TableName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final catalog = this.catalog;
    final database = this.database;
    final tableName = this.tableName;
    return {
      'Catalog': catalog,
      'Database': database,
      'TableName': tableName,
    };
  }
}

enum DataDistributionType {
  fullyReplicated,
  shardedByS3Key,
}

extension on DataDistributionType {
  String toValue() {
    switch (this) {
      case DataDistributionType.fullyReplicated:
        return 'FullyReplicated';
      case DataDistributionType.shardedByS3Key:
        return 'ShardedByS3Key';
    }
  }
}

extension on String {
  DataDistributionType toDataDistributionType() {
    switch (this) {
      case 'FullyReplicated':
        return DataDistributionType.fullyReplicated;
      case 'ShardedByS3Key':
        return DataDistributionType.shardedByS3Key;
    }
    throw Exception('$this is not known in enum DataDistributionType');
  }
}

/// The data structure used to specify the data to be used for inference in a
/// batch transform job and to associate the data that is relevant to the
/// prediction results in the output. The input filter provided allows you to
/// exclude input data that is not needed for inference in a batch transform
/// job. The output filter provided allows you to include input data relevant to
/// interpreting the predictions in the output from the job. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate
/// Prediction Results with their Corresponding Input Records</a>.
class DataProcessing {
  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a>
  /// expression used to select a portion of the input data to pass to the
  /// algorithm. Use the <code>InputFilter</code> parameter to exclude fields,
  /// such as an ID column, from the input. If you want Amazon SageMaker to pass
  /// the entire input dataset to the algorithm, accept the default value
  /// <code>$</code>.
  ///
  /// Examples: <code>"$"</code>, <code>"$[1:]"</code>, <code>"$.features"</code>
  final String? inputFilter;

  /// Specifies the source of the data to join with the transformed data. The
  /// valid values are <code>None</code> and <code>Input</code>. The default value
  /// is <code>None</code>, which specifies not to join the input with the
  /// transformed data. If you want the batch transform job to join the original
  /// input data with the transformed data, set <code>JoinSource</code> to
  /// <code>Input</code>. You can specify <code>OutputFilter</code> as an
  /// additional filter to select a portion of the joined dataset and store it in
  /// the output file.
  ///
  /// For JSON or JSONLines objects, such as a JSON array, Amazon SageMaker adds
  /// the transformed data to the input JSON object in an attribute called
  /// <code>SageMakerOutput</code>. The joined result for JSON must be a key-value
  /// pair object. If the input is not a key-value pair object, Amazon SageMaker
  /// creates a new JSON file. In the new JSON file, and the input data is stored
  /// under the <code>SageMakerInput</code> key and the results are stored in
  /// <code>SageMakerOutput</code>.
  ///
  /// For CSV data, Amazon SageMaker takes each row as a JSON array and joins the
  /// transformed data with the input by appending each transformed row to the end
  /// of the input. The joined data has the original input data followed by the
  /// transformed data and the output is a CSV file.
  ///
  /// For information on how joining in applied, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow">Workflow
  /// for Associating Inferences with Input Records</a>.
  final JoinSource? joinSource;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a>
  /// expression used to select a portion of the joined dataset to save in the
  /// output file for a batch transform job. If you want Amazon SageMaker to store
  /// the entire input dataset in the output file, leave the default value,
  /// <code>$</code>. If you specify indexes that aren't within the dimension size
  /// of the joined dataset, you get an error.
  ///
  /// Examples: <code>"$"</code>, <code>"$[0,5:]"</code>,
  /// <code>"$['id','SageMakerOutput']"</code>
  final String? outputFilter;

  DataProcessing({
    this.inputFilter,
    this.joinSource,
    this.outputFilter,
  });

  factory DataProcessing.fromJson(Map<String, dynamic> json) {
    return DataProcessing(
      inputFilter: json['InputFilter'] as String?,
      joinSource: (json['JoinSource'] as String?)?.toJoinSource(),
      outputFilter: json['OutputFilter'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final inputFilter = this.inputFilter;
    final joinSource = this.joinSource;
    final outputFilter = this.outputFilter;
    return {
      if (inputFilter != null) 'InputFilter': inputFilter,
      if (joinSource != null) 'JoinSource': joinSource.toValue(),
      if (outputFilter != null) 'OutputFilter': outputFilter,
    };
  }
}

/// Information about the container that a data quality monitoring job runs.
class DataQualityAppSpecification {
  /// The container image that the data quality monitoring job runs.
  final String imageUri;

  /// The arguments to send to the container that the monitoring job runs.
  final List<String>? containerArguments;

  /// The entrypoint for a container used to run a monitoring job.
  final List<String>? containerEntrypoint;

  /// Sets the environment variables in the container that the monitoring job
  /// runs.
  final Map<String, String>? environment;

  /// An Amazon S3 URI to a script that is called after analysis has been
  /// performed. Applicable only for the built-in (first party) containers.
  final String? postAnalyticsProcessorSourceUri;

  /// An Amazon S3 URI to a script that is called per row prior to running
  /// analysis. It can base64 decode the payload and convert it into a flatted
  /// json so that the built-in container can use the converted data. Applicable
  /// only for the built-in (first party) containers.
  final String? recordPreprocessorSourceUri;

  DataQualityAppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
    this.environment,
    this.postAnalyticsProcessorSourceUri,
    this.recordPreprocessorSourceUri,
  });

  factory DataQualityAppSpecification.fromJson(Map<String, dynamic> json) {
    return DataQualityAppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      postAnalyticsProcessorSourceUri:
          json['PostAnalyticsProcessorSourceUri'] as String?,
      recordPreprocessorSourceUri:
          json['RecordPreprocessorSourceUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final environment = this.environment;
    final postAnalyticsProcessorSourceUri =
        this.postAnalyticsProcessorSourceUri;
    final recordPreprocessorSourceUri = this.recordPreprocessorSourceUri;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (environment != null) 'Environment': environment,
      if (postAnalyticsProcessorSourceUri != null)
        'PostAnalyticsProcessorSourceUri': postAnalyticsProcessorSourceUri,
      if (recordPreprocessorSourceUri != null)
        'RecordPreprocessorSourceUri': recordPreprocessorSourceUri,
    };
  }
}

/// Configuration for monitoring constraints and monitoring statistics. These
/// baseline resources are compared against the results of the current job from
/// the series of jobs scheduled to collect data periodically.
class DataQualityBaselineConfig {
  /// The name of the job that performs baselining for the data quality monitoring
  /// job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;
  final MonitoringStatisticsResource? statisticsResource;

  DataQualityBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
    this.statisticsResource,
  });

  factory DataQualityBaselineConfig.fromJson(Map<String, dynamic> json) {
    return DataQualityBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
      statisticsResource: json['StatisticsResource'] != null
          ? MonitoringStatisticsResource.fromJson(
              json['StatisticsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    final statisticsResource = this.statisticsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
      if (statisticsResource != null) 'StatisticsResource': statisticsResource,
    };
  }
}

/// The input for the data quality monitoring job. Currently endpoints are
/// supported for input.
class DataQualityJobInput {
  final EndpointInput endpointInput;

  DataQualityJobInput({
    required this.endpointInput,
  });

  factory DataQualityJobInput.fromJson(Map<String, dynamic> json) {
    return DataQualityJobInput(
      endpointInput:
          EndpointInput.fromJson(json['EndpointInput'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointInput = this.endpointInput;
    return {
      'EndpointInput': endpointInput,
    };
  }
}

/// Describes the location of the channel data.
class DataSource {
  /// The file system that is associated with a channel.
  final FileSystemDataSource? fileSystemDataSource;

  /// The S3 location of the data source that is associated with a channel.
  final S3DataSource? s3DataSource;

  DataSource({
    this.fileSystemDataSource,
    this.s3DataSource,
  });

  factory DataSource.fromJson(Map<String, dynamic> json) {
    return DataSource(
      fileSystemDataSource: json['FileSystemDataSource'] != null
          ? FileSystemDataSource.fromJson(
              json['FileSystemDataSource'] as Map<String, dynamic>)
          : null,
      s3DataSource: json['S3DataSource'] != null
          ? S3DataSource.fromJson(json['S3DataSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final fileSystemDataSource = this.fileSystemDataSource;
    final s3DataSource = this.s3DataSource;
    return {
      if (fileSystemDataSource != null)
        'FileSystemDataSource': fileSystemDataSource,
      if (s3DataSource != null) 'S3DataSource': s3DataSource,
    };
  }
}

/// Configuration for Dataset Definition inputs. The Dataset Definition input
/// must specify exactly one of either <code>AthenaDatasetDefinition</code> or
/// <code>RedshiftDatasetDefinition</code> types.
class DatasetDefinition {
  final AthenaDatasetDefinition? athenaDatasetDefinition;

  /// Whether the generated dataset is <code>FullyReplicated</code> or
  /// <code>ShardedByS3Key</code> (default).
  final DataDistributionType? dataDistributionType;

  /// Whether to use <code>File</code> or <code>Pipe</code> input mode. In
  /// <code>File</code> (default) mode, Amazon SageMaker copies the data from the
  /// input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes
  /// before starting your training algorithm. This is the most commonly used
  /// input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data
  /// from the source directly to your algorithm without using the EBS volume.
  final InputMode? inputMode;

  /// The local path where you want Amazon SageMaker to download the Dataset
  /// Definition inputs to run a processing job. <code>LocalPath</code> is an
  /// absolute path to the input data. This is a required parameter when
  /// <code>AppManaged</code> is <code>False</code> (default).
  final String? localPath;
  final RedshiftDatasetDefinition? redshiftDatasetDefinition;

  DatasetDefinition({
    this.athenaDatasetDefinition,
    this.dataDistributionType,
    this.inputMode,
    this.localPath,
    this.redshiftDatasetDefinition,
  });

  factory DatasetDefinition.fromJson(Map<String, dynamic> json) {
    return DatasetDefinition(
      athenaDatasetDefinition: json['AthenaDatasetDefinition'] != null
          ? AthenaDatasetDefinition.fromJson(
              json['AthenaDatasetDefinition'] as Map<String, dynamic>)
          : null,
      dataDistributionType:
          (json['DataDistributionType'] as String?)?.toDataDistributionType(),
      inputMode: (json['InputMode'] as String?)?.toInputMode(),
      localPath: json['LocalPath'] as String?,
      redshiftDatasetDefinition: json['RedshiftDatasetDefinition'] != null
          ? RedshiftDatasetDefinition.fromJson(
              json['RedshiftDatasetDefinition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final athenaDatasetDefinition = this.athenaDatasetDefinition;
    final dataDistributionType = this.dataDistributionType;
    final inputMode = this.inputMode;
    final localPath = this.localPath;
    final redshiftDatasetDefinition = this.redshiftDatasetDefinition;
    return {
      if (athenaDatasetDefinition != null)
        'AthenaDatasetDefinition': athenaDatasetDefinition,
      if (dataDistributionType != null)
        'DataDistributionType': dataDistributionType.toValue(),
      if (inputMode != null) 'InputMode': inputMode.toValue(),
      if (localPath != null) 'LocalPath': localPath,
      if (redshiftDatasetDefinition != null)
        'RedshiftDatasetDefinition': redshiftDatasetDefinition,
    };
  }
}

/// Configuration information for the Debugger hook parameters, metric and
/// tensor collections, and storage paths. To learn more about how to configure
/// the <code>DebugHookConfig</code> parameter, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
/// the SageMaker and Debugger Configuration API Operations to Create, Update,
/// and Debug Your Training Job</a>.
class DebugHookConfig {
  /// Path to Amazon S3 storage location for metrics and tensors.
  final String s3OutputPath;

  /// Configuration information for Debugger tensor collections. To learn more
  /// about how to configure the <code>CollectionConfiguration</code> parameter,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
  /// the SageMaker and Debugger Configuration API Operations to Create, Update,
  /// and Debug Your Training Job</a>.
  final List<CollectionConfiguration>? collectionConfigurations;

  /// Configuration information for the Debugger hook parameters.
  final Map<String, String>? hookParameters;

  /// Path to local storage location for metrics and tensors. Defaults to
  /// <code>/opt/ml/output/tensors/</code>.
  final String? localPath;

  DebugHookConfig({
    required this.s3OutputPath,
    this.collectionConfigurations,
    this.hookParameters,
    this.localPath,
  });

  factory DebugHookConfig.fromJson(Map<String, dynamic> json) {
    return DebugHookConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      collectionConfigurations: (json['CollectionConfigurations'] as List?)
          ?.whereNotNull()
          .map((e) =>
              CollectionConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      hookParameters: (json['HookParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      localPath: json['LocalPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final collectionConfigurations = this.collectionConfigurations;
    final hookParameters = this.hookParameters;
    final localPath = this.localPath;
    return {
      'S3OutputPath': s3OutputPath,
      if (collectionConfigurations != null)
        'CollectionConfigurations': collectionConfigurations,
      if (hookParameters != null) 'HookParameters': hookParameters,
      if (localPath != null) 'LocalPath': localPath,
    };
  }
}

/// Configuration information for SageMaker Debugger rules for debugging. To
/// learn more about how to configure the <code>DebugRuleConfiguration</code>
/// parameter, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
/// the SageMaker and Debugger Configuration API Operations to Create, Update,
/// and Debug Your Training Job</a>.
class DebugRuleConfiguration {
  /// The name of the rule configuration. It must be unique relative to other rule
  /// configuration names.
  final String ruleConfigurationName;

  /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
  final String ruleEvaluatorImage;

  /// The instance type to deploy a Debugger custom rule for debugging a training
  /// job.
  final ProcessingInstanceType? instanceType;

  /// Path to local storage location for output of rules. Defaults to
  /// <code>/opt/ml/processing/output/rule/</code>.
  final String? localPath;

  /// Runtime configuration for rule container.
  final Map<String, String>? ruleParameters;

  /// Path to Amazon S3 storage location for rules.
  final String? s3OutputPath;

  /// The size, in GB, of the ML storage volume attached to the processing
  /// instance.
  final int? volumeSizeInGB;

  DebugRuleConfiguration({
    required this.ruleConfigurationName,
    required this.ruleEvaluatorImage,
    this.instanceType,
    this.localPath,
    this.ruleParameters,
    this.s3OutputPath,
    this.volumeSizeInGB,
  });

  factory DebugRuleConfiguration.fromJson(Map<String, dynamic> json) {
    return DebugRuleConfiguration(
      ruleConfigurationName: json['RuleConfigurationName'] as String,
      ruleEvaluatorImage: json['RuleEvaluatorImage'] as String,
      instanceType:
          (json['InstanceType'] as String?)?.toProcessingInstanceType(),
      localPath: json['LocalPath'] as String?,
      ruleParameters: (json['RuleParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      s3OutputPath: json['S3OutputPath'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluatorImage = this.ruleEvaluatorImage;
    final instanceType = this.instanceType;
    final localPath = this.localPath;
    final ruleParameters = this.ruleParameters;
    final s3OutputPath = this.s3OutputPath;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      'RuleConfigurationName': ruleConfigurationName,
      'RuleEvaluatorImage': ruleEvaluatorImage,
      if (instanceType != null) 'InstanceType': instanceType.toValue(),
      if (localPath != null) 'LocalPath': localPath,
      if (ruleParameters != null) 'RuleParameters': ruleParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

/// Information about the status of the rule evaluation.
class DebugRuleEvaluationStatus {
  /// Timestamp when the rule evaluation status was last modified.
  final DateTime? lastModifiedTime;

  /// The name of the rule configuration.
  final String? ruleConfigurationName;

  /// The Amazon Resource Name (ARN) of the rule evaluation job.
  final String? ruleEvaluationJobArn;

  /// Status of the rule evaluation.
  final RuleEvaluationStatus? ruleEvaluationStatus;

  /// Details from the rule evaluation.
  final String? statusDetails;

  DebugRuleEvaluationStatus({
    this.lastModifiedTime,
    this.ruleConfigurationName,
    this.ruleEvaluationJobArn,
    this.ruleEvaluationStatus,
    this.statusDetails,
  });

  factory DebugRuleEvaluationStatus.fromJson(Map<String, dynamic> json) {
    return DebugRuleEvaluationStatus(
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      ruleConfigurationName: json['RuleConfigurationName'] as String?,
      ruleEvaluationJobArn: json['RuleEvaluationJobArn'] as String?,
      ruleEvaluationStatus:
          (json['RuleEvaluationStatus'] as String?)?.toRuleEvaluationStatus(),
      statusDetails: json['StatusDetails'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final lastModifiedTime = this.lastModifiedTime;
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluationJobArn = this.ruleEvaluationJobArn;
    final ruleEvaluationStatus = this.ruleEvaluationStatus;
    final statusDetails = this.statusDetails;
    return {
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (ruleConfigurationName != null)
        'RuleConfigurationName': ruleConfigurationName,
      if (ruleEvaluationJobArn != null)
        'RuleEvaluationJobArn': ruleEvaluationJobArn,
      if (ruleEvaluationStatus != null)
        'RuleEvaluationStatus': ruleEvaluationStatus.toValue(),
      if (statusDetails != null) 'StatusDetails': statusDetails,
    };
  }
}

class DeleteActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  DeleteActionResponse({
    this.actionArn,
  });

  factory DeleteActionResponse.fromJson(Map<String, dynamic> json) {
    return DeleteActionResponse(
      actionArn: json['ActionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
    };
  }
}

class DeleteArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  DeleteArtifactResponse({
    this.artifactArn,
  });

  factory DeleteArtifactResponse.fromJson(Map<String, dynamic> json) {
    return DeleteArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
    };
  }
}

class DeleteAssociationResponse {
  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The ARN of the source.
  final String? sourceArn;

  DeleteAssociationResponse({
    this.destinationArn,
    this.sourceArn,
  });

  factory DeleteAssociationResponse.fromJson(Map<String, dynamic> json) {
    return DeleteAssociationResponse(
      destinationArn: json['DestinationArn'] as String?,
      sourceArn: json['SourceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationArn = this.destinationArn;
    final sourceArn = this.sourceArn;
    return {
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (sourceArn != null) 'SourceArn': sourceArn,
    };
  }
}

class DeleteContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  DeleteContextResponse({
    this.contextArn,
  });

  factory DeleteContextResponse.fromJson(Map<String, dynamic> json) {
    return DeleteContextResponse(
      contextArn: json['ContextArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
    };
  }
}

class DeleteExperimentResponse {
  /// The Amazon Resource Name (ARN) of the experiment that is being deleted.
  final String? experimentArn;

  DeleteExperimentResponse({
    this.experimentArn,
  });

  factory DeleteExperimentResponse.fromJson(Map<String, dynamic> json) {
    return DeleteExperimentResponse(
      experimentArn: json['ExperimentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentArn = this.experimentArn;
    return {
      if (experimentArn != null) 'ExperimentArn': experimentArn,
    };
  }
}

class DeleteFlowDefinitionResponse {
  DeleteFlowDefinitionResponse();

  factory DeleteFlowDefinitionResponse.fromJson(Map<String, dynamic> _) {
    return DeleteFlowDefinitionResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteHumanTaskUiResponse {
  DeleteHumanTaskUiResponse();

  factory DeleteHumanTaskUiResponse.fromJson(Map<String, dynamic> _) {
    return DeleteHumanTaskUiResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteImageResponse {
  DeleteImageResponse();

  factory DeleteImageResponse.fromJson(Map<String, dynamic> _) {
    return DeleteImageResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteImageVersionResponse {
  DeleteImageVersionResponse();

  factory DeleteImageVersionResponse.fromJson(Map<String, dynamic> _) {
    return DeleteImageVersionResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeletePipelineResponse {
  /// The Amazon Resource Name (ARN) of the pipeline to delete.
  final String? pipelineArn;

  DeletePipelineResponse({
    this.pipelineArn,
  });

  factory DeletePipelineResponse.fromJson(Map<String, dynamic> json) {
    return DeletePipelineResponse(
      pipelineArn: json['PipelineArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineArn = this.pipelineArn;
    return {
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
    };
  }
}

class DeleteTagsOutput {
  DeleteTagsOutput();

  factory DeleteTagsOutput.fromJson(Map<String, dynamic> _) {
    return DeleteTagsOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the component is being deleted.
  final String? trialComponentArn;

  DeleteTrialComponentResponse({
    this.trialComponentArn,
  });

  factory DeleteTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return DeleteTrialComponentResponse(
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

class DeleteTrialResponse {
  /// The Amazon Resource Name (ARN) of the trial that is being deleted.
  final String? trialArn;

  DeleteTrialResponse({
    this.trialArn,
  });

  factory DeleteTrialResponse.fromJson(Map<String, dynamic> json) {
    return DeleteTrialResponse(
      trialArn: json['TrialArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
    };
  }
}

class DeleteWorkforceResponse {
  DeleteWorkforceResponse();

  factory DeleteWorkforceResponse.fromJson(Map<String, dynamic> _) {
    return DeleteWorkforceResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteWorkteamResponse {
  /// Returns <code>true</code> if the work team was successfully deleted;
  /// otherwise, returns <code>false</code>.
  final bool success;

  DeleteWorkteamResponse({
    required this.success,
  });

  factory DeleteWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return DeleteWorkteamResponse(
      success: json['Success'] as bool,
    );
  }

  Map<String, dynamic> toJson() {
    final success = this.success;
    return {
      'Success': success,
    };
  }
}

/// Gets the Amazon EC2 Container Registry path of the docker image of the model
/// that is hosted in this <a>ProductionVariant</a>.
///
/// If you used the <code>registry/repository[:tag]</code> form to specify the
/// image path of the primary container when you created the model hosted in
/// this <code>ProductionVariant</code>, the path resolves to a path of the form
/// <code>registry/repository[@digest]</code>. A digest is a hash value that
/// identifies a specific version of an image. For information about Amazon ECR
/// paths, see <a
/// href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling
/// an Image</a> in the <i>Amazon ECR User Guide</i>.
class DeployedImage {
  /// The date and time when the image path for the model resolved to the
  /// <code>ResolvedImage</code>
  final DateTime? resolutionTime;

  /// The specific digest path of the image hosted in this
  /// <code>ProductionVariant</code>.
  final String? resolvedImage;

  /// The image path you specified when you created the model.
  final String? specifiedImage;

  DeployedImage({
    this.resolutionTime,
    this.resolvedImage,
    this.specifiedImage,
  });

  factory DeployedImage.fromJson(Map<String, dynamic> json) {
    return DeployedImage(
      resolutionTime: timeStampFromJson(json['ResolutionTime']),
      resolvedImage: json['ResolvedImage'] as String?,
      specifiedImage: json['SpecifiedImage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final resolutionTime = this.resolutionTime;
    final resolvedImage = this.resolvedImage;
    final specifiedImage = this.specifiedImage;
    return {
      if (resolutionTime != null)
        'ResolutionTime': unixTimestampToJson(resolutionTime),
      if (resolvedImage != null) 'ResolvedImage': resolvedImage,
      if (specifiedImage != null) 'SpecifiedImage': specifiedImage,
    };
  }
}

/// Currently, the <code>DeploymentConfig</code> API is not supported.
class DeploymentConfig {
  /// <p/>
  final BlueGreenUpdatePolicy blueGreenUpdatePolicy;

  /// <p/>
  final AutoRollbackConfig? autoRollbackConfiguration;

  DeploymentConfig({
    required this.blueGreenUpdatePolicy,
    this.autoRollbackConfiguration,
  });

  factory DeploymentConfig.fromJson(Map<String, dynamic> json) {
    return DeploymentConfig(
      blueGreenUpdatePolicy: BlueGreenUpdatePolicy.fromJson(
          json['BlueGreenUpdatePolicy'] as Map<String, dynamic>),
      autoRollbackConfiguration: json['AutoRollbackConfiguration'] != null
          ? AutoRollbackConfig.fromJson(
              json['AutoRollbackConfiguration'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final blueGreenUpdatePolicy = this.blueGreenUpdatePolicy;
    final autoRollbackConfiguration = this.autoRollbackConfiguration;
    return {
      'BlueGreenUpdatePolicy': blueGreenUpdatePolicy,
      if (autoRollbackConfiguration != null)
        'AutoRollbackConfiguration': autoRollbackConfiguration,
    };
  }
}

class DescribeActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  /// The name of the action.
  final String? actionName;

  /// The type of the action.
  final String? actionType;
  final UserContext? createdBy;

  /// When the action was created.
  final DateTime? creationTime;

  /// The description of the action.
  final String? description;
  final UserContext? lastModifiedBy;

  /// When the action was last modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// A list of the action's properties.
  final Map<String, String>? properties;

  /// The source of the action.
  final ActionSource? source;

  /// The status of the action.
  final ActionStatus? status;

  DescribeActionResponse({
    this.actionArn,
    this.actionName,
    this.actionType,
    this.createdBy,
    this.creationTime,
    this.description,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.properties,
    this.source,
    this.status,
  });

  factory DescribeActionResponse.fromJson(Map<String, dynamic> json) {
    return DescribeActionResponse(
      actionArn: json['ActionArn'] as String?,
      actionName: json['ActionName'] as String?,
      actionType: json['ActionType'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      properties: (json['Properties'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      source: json['Source'] != null
          ? ActionSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.toActionStatus(),
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    final actionName = this.actionName;
    final actionType = this.actionType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final properties = this.properties;
    final source = this.source;
    final status = this.status;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
      if (actionName != null) 'ActionName': actionName,
      if (actionType != null) 'ActionType': actionType,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (properties != null) 'Properties': properties,
      if (source != null) 'Source': source,
      if (status != null) 'Status': status.toValue(),
    };
  }
}

class DescribeAlgorithmOutput {
  /// The Amazon Resource Name (ARN) of the algorithm.
  final String algorithmArn;

  /// The name of the algorithm being described.
  final String algorithmName;

  /// The current status of the algorithm.
  final AlgorithmStatus algorithmStatus;

  /// Details about the current status of the algorithm.
  final AlgorithmStatusDetails algorithmStatusDetails;

  /// A timestamp specifying when the algorithm was created.
  final DateTime creationTime;

  /// Details about training jobs run by this algorithm.
  final TrainingSpecification trainingSpecification;

  /// A brief summary about the algorithm.
  final String? algorithmDescription;

  /// Whether the algorithm is certified to be listed in Amazon Web Services
  /// Marketplace.
  final bool? certifyForMarketplace;

  /// Details about inference jobs that the algorithm runs.
  final InferenceSpecification? inferenceSpecification;

  /// The product identifier of the algorithm.
  final String? productId;

  /// Details about configurations for one or more training jobs that Amazon
  /// SageMaker runs to test the algorithm.
  final AlgorithmValidationSpecification? validationSpecification;

  DescribeAlgorithmOutput({
    required this.algorithmArn,
    required this.algorithmName,
    required this.algorithmStatus,
    required this.algorithmStatusDetails,
    required this.creationTime,
    required this.trainingSpecification,
    this.algorithmDescription,
    this.certifyForMarketplace,
    this.inferenceSpecification,
    this.productId,
    this.validationSpecification,
  });

  factory DescribeAlgorithmOutput.fromJson(Map<String, dynamic> json) {
    return DescribeAlgorithmOutput(
      algorithmArn: json['AlgorithmArn'] as String,
      algorithmName: json['AlgorithmName'] as String,
      algorithmStatus: (json['AlgorithmStatus'] as String).toAlgorithmStatus(),
      algorithmStatusDetails: AlgorithmStatusDetails.fromJson(
          json['AlgorithmStatusDetails'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      trainingSpecification: TrainingSpecification.fromJson(
          json['TrainingSpecification'] as Map<String, dynamic>),
      algorithmDescription: json['AlgorithmDescription'] as String?,
      certifyForMarketplace: json['CertifyForMarketplace'] as bool?,
      inferenceSpecification: json['InferenceSpecification'] != null
          ? InferenceSpecification.fromJson(
              json['InferenceSpecification'] as Map<String, dynamic>)
          : null,
      productId: json['ProductId'] as String?,
      validationSpecification: json['ValidationSpecification'] != null
          ? AlgorithmValidationSpecification.fromJson(
              json['ValidationSpecification'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmArn = this.algorithmArn;
    final algorithmName = this.algorithmName;
    final algorithmStatus = this.algorithmStatus;
    final algorithmStatusDetails = this.algorithmStatusDetails;
    final creationTime = this.creationTime;
    final trainingSpecification = this.trainingSpecification;
    final algorithmDescription = this.algorithmDescription;
    final certifyForMarketplace = this.certifyForMarketplace;
    final inferenceSpecification = this.inferenceSpecification;
    final productId = this.productId;
    final validationSpecification = this.validationSpecification;
    return {
      'AlgorithmArn': algorithmArn,
      'AlgorithmName': algorithmName,
      'AlgorithmStatus': algorithmStatus.toValue(),
      'AlgorithmStatusDetails': algorithmStatusDetails,
      'CreationTime': unixTimestampToJson(creationTime),
      'TrainingSpecification': trainingSpecification,
      if (algorithmDescription != null)
        'AlgorithmDescription': algorithmDescription,
      if (certifyForMarketplace != null)
        'CertifyForMarketplace': certifyForMarketplace,
      if (inferenceSpecification != null)
        'InferenceSpecification': inferenceSpecification,
      if (productId != null) 'ProductId': productId,
      if (validationSpecification != null)
        'ValidationSpecification': validationSpecification,
    };
  }
}

class DescribeAppImageConfigResponse {
  /// The Amazon Resource Name (ARN) of the AppImageConfig.
  final String? appImageConfigArn;

  /// The name of the AppImageConfig.
  final String? appImageConfigName;

  /// When the AppImageConfig was created.
  final DateTime? creationTime;

  /// The configuration of a KernelGateway app.
  final KernelGatewayImageConfig? kernelGatewayImageConfig;

  /// When the AppImageConfig was last modified.
  final DateTime? lastModifiedTime;

  DescribeAppImageConfigResponse({
    this.appImageConfigArn,
    this.appImageConfigName,
    this.creationTime,
    this.kernelGatewayImageConfig,
    this.lastModifiedTime,
  });

  factory DescribeAppImageConfigResponse.fromJson(Map<String, dynamic> json) {
    return DescribeAppImageConfigResponse(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
      appImageConfigName: json['AppImageConfigName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      kernelGatewayImageConfig: json['KernelGatewayImageConfig'] != null
          ? KernelGatewayImageConfig.fromJson(
              json['KernelGatewayImageConfig'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    final appImageConfigName = this.appImageConfigName;
    final creationTime = this.creationTime;
    final kernelGatewayImageConfig = this.kernelGatewayImageConfig;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
      if (appImageConfigName != null) 'AppImageConfigName': appImageConfigName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (kernelGatewayImageConfig != null)
        'KernelGatewayImageConfig': kernelGatewayImageConfig,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

class DescribeAppResponse {
  /// The Amazon Resource Name (ARN) of the app.
  final String? appArn;

  /// The name of the app.
  final String? appName;

  /// The type of app.
  final AppType? appType;

  /// The creation time.
  final DateTime? creationTime;

  /// The domain ID.
  final String? domainId;

  /// The failure reason.
  final String? failureReason;

  /// The timestamp of the last health check.
  final DateTime? lastHealthCheckTimestamp;

  /// The timestamp of the last user's activity.
  final DateTime? lastUserActivityTimestamp;

  /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image
  /// created on the instance.
  final ResourceSpec? resourceSpec;

  /// The status.
  final AppStatus? status;

  /// The user profile name.
  final String? userProfileName;

  DescribeAppResponse({
    this.appArn,
    this.appName,
    this.appType,
    this.creationTime,
    this.domainId,
    this.failureReason,
    this.lastHealthCheckTimestamp,
    this.lastUserActivityTimestamp,
    this.resourceSpec,
    this.status,
    this.userProfileName,
  });

  factory DescribeAppResponse.fromJson(Map<String, dynamic> json) {
    return DescribeAppResponse(
      appArn: json['AppArn'] as String?,
      appName: json['AppName'] as String?,
      appType: (json['AppType'] as String?)?.toAppType(),
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastHealthCheckTimestamp:
          timeStampFromJson(json['LastHealthCheckTimestamp']),
      lastUserActivityTimestamp:
          timeStampFromJson(json['LastUserActivityTimestamp']),
      resourceSpec: json['ResourceSpec'] != null
          ? ResourceSpec.fromJson(json['ResourceSpec'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.toAppStatus(),
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appArn = this.appArn;
    final appName = this.appName;
    final appType = this.appType;
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final failureReason = this.failureReason;
    final lastHealthCheckTimestamp = this.lastHealthCheckTimestamp;
    final lastUserActivityTimestamp = this.lastUserActivityTimestamp;
    final resourceSpec = this.resourceSpec;
    final status = this.status;
    final userProfileName = this.userProfileName;
    return {
      if (appArn != null) 'AppArn': appArn,
      if (appName != null) 'AppName': appName,
      if (appType != null) 'AppType': appType.toValue(),
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastHealthCheckTimestamp != null)
        'LastHealthCheckTimestamp':
            unixTimestampToJson(lastHealthCheckTimestamp),
      if (lastUserActivityTimestamp != null)
        'LastUserActivityTimestamp':
            unixTimestampToJson(lastUserActivityTimestamp),
      if (resourceSpec != null) 'ResourceSpec': resourceSpec,
      if (status != null) 'Status': status.toValue(),
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

class DescribeArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  /// The name of the artifact.
  final String? artifactName;

  /// The type of the artifact.
  final String? artifactType;
  final UserContext? createdBy;

  /// When the artifact was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// When the artifact was last modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// A list of the artifact's properties.
  final Map<String, String>? properties;

  /// The source of the artifact.
  final ArtifactSource? source;

  DescribeArtifactResponse({
    this.artifactArn,
    this.artifactName,
    this.artifactType,
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.properties,
    this.source,
  });

  factory DescribeArtifactResponse.fromJson(Map<String, dynamic> json) {
    return DescribeArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
      artifactName: json['ArtifactName'] as String?,
      artifactType: json['ArtifactType'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      properties: (json['Properties'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      source: json['Source'] != null
          ? ArtifactSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    final artifactName = this.artifactName;
    final artifactType = this.artifactType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final properties = this.properties;
    final source = this.source;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
      if (artifactName != null) 'ArtifactName': artifactName,
      if (artifactType != null) 'ArtifactType': artifactType,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (properties != null) 'Properties': properties,
      if (source != null) 'Source': source,
    };
  }
}

class DescribeAutoMLJobResponse {
  /// Returns the ARN of the AutoML job.
  final String autoMLJobArn;

  /// Returns the name of the AutoML job.
  final String autoMLJobName;

  /// Returns the secondary status of the AutoML job.
  final AutoMLJobSecondaryStatus autoMLJobSecondaryStatus;

  /// Returns the status of the AutoML job.
  final AutoMLJobStatus autoMLJobStatus;

  /// Returns the creation time of the AutoML job.
  final DateTime creationTime;

  /// Returns the input data configuration for the AutoML job..
  final List<AutoMLChannel> inputDataConfig;

  /// Returns the job's last modified time.
  final DateTime lastModifiedTime;

  /// Returns the job's output data config.
  final AutoMLOutputDataConfig outputDataConfig;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) role that has read permission to the input data
  /// location and write permission to the output data location in Amazon S3.
  final String roleArn;

  /// Returns information on the job's artifacts found in
  /// <code>AutoMLJobArtifacts</code>.
  final AutoMLJobArtifacts? autoMLJobArtifacts;

  /// Returns the configuration for the AutoML job.
  final AutoMLJobConfig? autoMLJobConfig;

  /// Returns the job's objective.
  final AutoMLJobObjective? autoMLJobObjective;

  /// Returns the job's best <code>AutoMLCandidate</code>.
  final AutoMLCandidate? bestCandidate;

  /// Returns the end time of the AutoML job.
  final DateTime? endTime;

  /// Returns the failure reason for an AutoML job, when applicable.
  final String? failureReason;

  /// Indicates whether the output for an AutoML job generates candidate
  /// definitions only.
  final bool? generateCandidateDefinitionsOnly;

  /// Indicates whether the model was deployed automatically to an endpoint and
  /// the name of that endpoint if deployed automatically.
  final ModelDeployConfig? modelDeployConfig;

  /// Provides information about endpoint for the model deployment.
  final ModelDeployResult? modelDeployResult;

  /// Returns a list of reasons for partial failures within an AutoML job.
  final List<AutoMLPartialFailureReason>? partialFailureReasons;

  /// Returns the job's problem type.
  final ProblemType? problemType;

  /// This contains <code>ProblemType</code>, <code>AutoMLJobObjective</code> and
  /// <code>CompletionCriteria</code>. If you do not provide these values, they
  /// are auto-inferred. If you do provide them, the values used are the ones you
  /// provide.
  final ResolvedAttributes? resolvedAttributes;

  DescribeAutoMLJobResponse({
    required this.autoMLJobArn,
    required this.autoMLJobName,
    required this.autoMLJobSecondaryStatus,
    required this.autoMLJobStatus,
    required this.creationTime,
    required this.inputDataConfig,
    required this.lastModifiedTime,
    required this.outputDataConfig,
    required this.roleArn,
    this.autoMLJobArtifacts,
    this.autoMLJobConfig,
    this.autoMLJobObjective,
    this.bestCandidate,
    this.endTime,
    this.failureReason,
    this.generateCandidateDefinitionsOnly,
    this.modelDeployConfig,
    this.modelDeployResult,
    this.partialFailureReasons,
    this.problemType,
    this.resolvedAttributes,
  });

  factory DescribeAutoMLJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeAutoMLJobResponse(
      autoMLJobArn: json['AutoMLJobArn'] as String,
      autoMLJobName: json['AutoMLJobName'] as String,
      autoMLJobSecondaryStatus: (json['AutoMLJobSecondaryStatus'] as String)
          .toAutoMLJobSecondaryStatus(),
      autoMLJobStatus: (json['AutoMLJobStatus'] as String).toAutoMLJobStatus(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      inputDataConfig: (json['InputDataConfig'] as List)
          .whereNotNull()
          .map((e) => AutoMLChannel.fromJson(e as Map<String, dynamic>))
          .toList(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputDataConfig: AutoMLOutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      autoMLJobArtifacts: json['AutoMLJobArtifacts'] != null
          ? AutoMLJobArtifacts.fromJson(
              json['AutoMLJobArtifacts'] as Map<String, dynamic>)
          : null,
      autoMLJobConfig: json['AutoMLJobConfig'] != null
          ? AutoMLJobConfig.fromJson(
              json['AutoMLJobConfig'] as Map<String, dynamic>)
          : null,
      autoMLJobObjective: json['AutoMLJobObjective'] != null
          ? AutoMLJobObjective.fromJson(
              json['AutoMLJobObjective'] as Map<String, dynamic>)
          : null,
      bestCandidate: json['BestCandidate'] != null
          ? AutoMLCandidate.fromJson(
              json['BestCandidate'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      generateCandidateDefinitionsOnly:
          json['GenerateCandidateDefinitionsOnly'] as bool?,
      modelDeployConfig: json['ModelDeployConfig'] != null
          ? ModelDeployConfig.fromJson(
              json['ModelDeployConfig'] as Map<String, dynamic>)
          : null,
      modelDeployResult: json['ModelDeployResult'] != null
          ? ModelDeployResult.fromJson(
              json['ModelDeployResult'] as Map<String, dynamic>)
          : null,
      partialFailureReasons: (json['PartialFailureReasons'] as List?)
          ?.whereNotNull()
          .map((e) =>
              AutoMLPartialFailureReason.fromJson(e as Map<String, dynamic>))
          .toList(),
      problemType: (json['ProblemType'] as String?)?.toProblemType(),
      resolvedAttributes: json['ResolvedAttributes'] != null
          ? ResolvedAttributes.fromJson(
              json['ResolvedAttributes'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final autoMLJobName = this.autoMLJobName;
    final autoMLJobSecondaryStatus = this.autoMLJobSecondaryStatus;
    final autoMLJobStatus = this.autoMLJobStatus;
    final creationTime = this.creationTime;
    final inputDataConfig = this.inputDataConfig;
    final lastModifiedTime = this.lastModifiedTime;
    final outputDataConfig = this.outputDataConfig;
    final roleArn = this.roleArn;
    final autoMLJobArtifacts = this.autoMLJobArtifacts;
    final autoMLJobConfig = this.autoMLJobConfig;
    final autoMLJobObjective = this.autoMLJobObjective;
    final bestCandidate = this.bestCandidate;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final generateCandidateDefinitionsOnly =
        this.generateCandidateDefinitionsOnly;
    final modelDeployConfig = this.modelDeployConfig;
    final modelDeployResult = this.modelDeployResult;
    final partialFailureReasons = this.partialFailureReasons;
    final problemType = this.problemType;
    final resolvedAttributes = this.resolvedAttributes;
    return {
      'AutoMLJobArn': autoMLJobArn,
      'AutoMLJobName': autoMLJobName,
      'AutoMLJobSecondaryStatus': autoMLJobSecondaryStatus.toValue(),
      'AutoMLJobStatus': autoMLJobStatus.toValue(),
      'CreationTime': unixTimestampToJson(creationTime),
      'InputDataConfig': inputDataConfig,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputDataConfig': outputDataConfig,
      'RoleArn': roleArn,
      if (autoMLJobArtifacts != null) 'AutoMLJobArtifacts': autoMLJobArtifacts,
      if (autoMLJobConfig != null) 'AutoMLJobConfig': autoMLJobConfig,
      if (autoMLJobObjective != null) 'AutoMLJobObjective': autoMLJobObjective,
      if (bestCandidate != null) 'BestCandidate': bestCandidate,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (generateCandidateDefinitionsOnly != null)
        'GenerateCandidateDefinitionsOnly': generateCandidateDefinitionsOnly,
      if (modelDeployConfig != null) 'ModelDeployConfig': modelDeployConfig,
      if (modelDeployResult != null) 'ModelDeployResult': modelDeployResult,
      if (partialFailureReasons != null)
        'PartialFailureReasons': partialFailureReasons,
      if (problemType != null) 'ProblemType': problemType.toValue(),
      if (resolvedAttributes != null) 'ResolvedAttributes': resolvedAttributes,
    };
  }
}

class DescribeCodeRepositoryOutput {
  /// The Amazon Resource Name (ARN) of the Git repository.
  final String codeRepositoryArn;

  /// The name of the Git repository.
  final String codeRepositoryName;

  /// The date and time that the repository was created.
  final DateTime creationTime;

  /// The date and time that the repository was last changed.
  final DateTime lastModifiedTime;

  /// Configuration details about the repository, including the URL where the
  /// repository is located, the default branch, and the Amazon Resource Name
  /// (ARN) of the Amazon Web Services Secrets Manager secret that contains the
  /// credentials used to access the repository.
  final GitConfig? gitConfig;

  DescribeCodeRepositoryOutput({
    required this.codeRepositoryArn,
    required this.codeRepositoryName,
    required this.creationTime,
    required this.lastModifiedTime,
    this.gitConfig,
  });

  factory DescribeCodeRepositoryOutput.fromJson(Map<String, dynamic> json) {
    return DescribeCodeRepositoryOutput(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
      codeRepositoryName: json['CodeRepositoryName'] as String,
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      gitConfig: json['GitConfig'] != null
          ? GitConfig.fromJson(json['GitConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    final codeRepositoryName = this.codeRepositoryName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final gitConfig = this.gitConfig;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
      'CodeRepositoryName': codeRepositoryName,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (gitConfig != null) 'GitConfig': gitConfig,
    };
  }
}

class DescribeCompilationJobResponse {
  /// The Amazon Resource Name (ARN) of the model compilation job.
  final String compilationJobArn;

  /// The name of the model compilation job.
  final String compilationJobName;

  /// The status of the model compilation job.
  final CompilationJobStatus compilationJobStatus;

  /// The time that the model compilation job was created.
  final DateTime creationTime;

  /// If a model compilation job failed, the reason it failed.
  final String failureReason;

  /// Information about the location in Amazon S3 of the input model artifacts,
  /// the name and shape of the expected data inputs, and the framework in which
  /// the model was trained.
  final InputConfig inputConfig;

  /// The time that the status of the model compilation job was last modified.
  final DateTime lastModifiedTime;

  /// Information about the location in Amazon S3 that has been configured for
  /// storing the model artifacts used in the compilation job.
  final ModelArtifacts modelArtifacts;

  /// Information about the output location for the compiled model and the target
  /// device that the model runs on.
  final OutputConfig outputConfig;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes
  /// to perform the model compilation job.
  final String roleArn;

  /// Specifies a limit to how long a model compilation job can run. When the job
  /// reaches the time limit, Amazon SageMaker ends the compilation job. Use this
  /// API to cap model training costs.
  final StoppingCondition stoppingCondition;

  /// The time when the model compilation job on a compilation job instance ended.
  /// For a successful or stopped job, this is when the job's model artifacts have
  /// finished uploading. For a failed job, this is when Amazon SageMaker detected
  /// that the job failed.
  final DateTime? compilationEndTime;

  /// The time when the model compilation job started the
  /// <code>CompilationJob</code> instances.
  ///
  /// You are billed for the time between this timestamp and the timestamp in the
  /// <a>DescribeCompilationJobResponse$CompilationEndTime</a> field. In Amazon
  /// CloudWatch Logs, the start time might be later than this time. That's
  /// because it takes time to download the compilation job, which depends on the
  /// size of the compilation job container.
  final DateTime? compilationStartTime;

  /// The inference image to use when compiling a model. Specify an image only if
  /// the target device is a cloud instance.
  final String? inferenceImage;

  /// Provides a BLAKE2 hash value that identifies the compiled model artifacts in
  /// Amazon S3.
  final ModelDigests? modelDigests;

  /// A <a>VpcConfig</a> object that specifies the VPC that you want your
  /// compilation job to connect to. Control access to your models by configuring
  /// the VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect
  /// Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.
  final NeoVpcConfig? vpcConfig;

  DescribeCompilationJobResponse({
    required this.compilationJobArn,
    required this.compilationJobName,
    required this.compilationJobStatus,
    required this.creationTime,
    required this.failureReason,
    required this.inputConfig,
    required this.lastModifiedTime,
    required this.modelArtifacts,
    required this.outputConfig,
    required this.roleArn,
    required this.stoppingCondition,
    this.compilationEndTime,
    this.compilationStartTime,
    this.inferenceImage,
    this.modelDigests,
    this.vpcConfig,
  });

  factory DescribeCompilationJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeCompilationJobResponse(
      compilationJobArn: json['CompilationJobArn'] as String,
      compilationJobName: json['CompilationJobName'] as String,
      compilationJobStatus:
          (json['CompilationJobStatus'] as String).toCompilationJobStatus(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      failureReason: json['FailureReason'] as String,
      inputConfig:
          InputConfig.fromJson(json['InputConfig'] as Map<String, dynamic>),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      modelArtifacts: ModelArtifacts.fromJson(
          json['ModelArtifacts'] as Map<String, dynamic>),
      outputConfig:
          OutputConfig.fromJson(json['OutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      compilationEndTime: timeStampFromJson(json['CompilationEndTime']),
      compilationStartTime: timeStampFromJson(json['CompilationStartTime']),
      inferenceImage: json['InferenceImage'] as String?,
      modelDigests: json['ModelDigests'] != null
          ? ModelDigests.fromJson(json['ModelDigests'] as Map<String, dynamic>)
          : null,
      vpcConfig: json['VpcConfig'] != null
          ? NeoVpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobArn = this.compilationJobArn;
    final compilationJobName = this.compilationJobName;
    final compilationJobStatus = this.compilationJobStatus;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final inputConfig = this.inputConfig;
    final lastModifiedTime = this.lastModifiedTime;
    final modelArtifacts = this.modelArtifacts;
    final outputConfig = this.outputConfig;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final compilationEndTime = this.compilationEndTime;
    final compilationStartTime = this.compilationStartTime;
    final inferenceImage = this.inferenceImage;
    final modelDigests = this.modelDigests;
    final vpcConfig = this.vpcConfig;
    return {
      'CompilationJobArn': compilationJobArn,
      'CompilationJobName': compilationJobName,
      'CompilationJobStatus': compilationJobStatus.toValue(),
      'CreationTime': unixTimestampToJson(creationTime),
      'FailureReason': failureReason,
      'InputConfig': inputConfig,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'ModelArtifacts': modelArtifacts,
      'OutputConfig': outputConfig,
      'RoleArn': roleArn,
      'StoppingCondition': stoppingCondition,
      if (compilationEndTime != null)
        'CompilationEndTime': unixTimestampToJson(compilationEndTime),
      if (compilationStartTime != null)
        'CompilationStartTime': unixTimestampToJson(compilationStartTime),
      if (inferenceImage != null) 'InferenceImage': inferenceImage,
      if (modelDigests != null) 'ModelDigests': modelDigests,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  /// The name of the context.
  final String? contextName;

  /// The type of the context.
  final String? contextType;
  final UserContext? createdBy;

  /// When the context was created.
  final DateTime? creationTime;

  /// The description of the context.
  final String? description;
  final UserContext? lastModifiedBy;

  /// When the context was last modified.
  final DateTime? lastModifiedTime;

  /// A list of the context's properties.
  final Map<String, String>? properties;

  /// The source of the context.
  final ContextSource? source;

  DescribeContextResponse({
    this.contextArn,
    this.contextName,
    this.contextType,
    this.createdBy,
    this.creationTime,
    this.description,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.properties,
    this.source,
  });

  factory DescribeContextResponse.fromJson(Map<String, dynamic> json) {
    return DescribeContextResponse(
      contextArn: json['ContextArn'] as String?,
      contextName: json['ContextName'] as String?,
      contextType: json['ContextType'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      properties: (json['Properties'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      source: json['Source'] != null
          ? ContextSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    final contextName = this.contextName;
    final contextType = this.contextType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final properties = this.properties;
    final source = this.source;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
      if (contextName != null) 'ContextName': contextName,
      if (contextType != null) 'ContextType': contextType,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (properties != null) 'Properties': properties,
      if (source != null) 'Source': source,
    };
  }
}

class DescribeDataQualityJobDefinitionResponse {
  /// The time that the data quality monitoring job definition was created.
  final DateTime creationTime;

  /// Information about the container that runs the data quality monitoring job.
  final DataQualityAppSpecification dataQualityAppSpecification;

  /// The list of inputs for the data quality monitoring job. Currently endpoints
  /// are supported.
  final DataQualityJobInput dataQualityJobInput;
  final MonitoringOutputConfig dataQualityJobOutputConfig;

  /// The Amazon Resource Name (ARN) of the data quality monitoring job
  /// definition.
  final String jobDefinitionArn;

  /// The name of the data quality monitoring job definition.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String roleArn;

  /// The constraints and baselines for the data quality monitoring job
  /// definition.
  final DataQualityBaselineConfig? dataQualityBaselineConfig;

  /// The networking configuration for the data quality monitoring job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeDataQualityJobDefinitionResponse({
    required this.creationTime,
    required this.dataQualityAppSpecification,
    required this.dataQualityJobInput,
    required this.dataQualityJobOutputConfig,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.roleArn,
    this.dataQualityBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeDataQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeDataQualityJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      dataQualityAppSpecification: DataQualityAppSpecification.fromJson(
          json['DataQualityAppSpecification'] as Map<String, dynamic>),
      dataQualityJobInput: DataQualityJobInput.fromJson(
          json['DataQualityJobInput'] as Map<String, dynamic>),
      dataQualityJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['DataQualityJobOutputConfig'] as Map<String, dynamic>),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      dataQualityBaselineConfig: json['DataQualityBaselineConfig'] != null
          ? DataQualityBaselineConfig.fromJson(
              json['DataQualityBaselineConfig'] as Map<String, dynamic>)
          : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final dataQualityAppSpecification = this.dataQualityAppSpecification;
    final dataQualityJobInput = this.dataQualityJobInput;
    final dataQualityJobOutputConfig = this.dataQualityJobOutputConfig;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final roleArn = this.roleArn;
    final dataQualityBaselineConfig = this.dataQualityBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'DataQualityAppSpecification': dataQualityAppSpecification,
      'DataQualityJobInput': dataQualityJobInput,
      'DataQualityJobOutputConfig': dataQualityJobOutputConfig,
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'RoleArn': roleArn,
      if (dataQualityBaselineConfig != null)
        'DataQualityBaselineConfig': dataQualityBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeDeviceFleetResponse {
  /// Timestamp of when the device fleet was created.
  final DateTime creationTime;

  /// The The Amazon Resource Name (ARN) of the fleet.
  final String deviceFleetArn;

  /// The name of the fleet.
  final String deviceFleetName;

  /// Timestamp of when the device fleet was last updated.
  final DateTime lastModifiedTime;

  /// The output configuration for storing sampled data.
  final EdgeOutputConfig outputConfig;

  /// A description of the fleet.
  final String? description;

  /// The Amazon Resource Name (ARN) alias created in Amazon Web Services Internet
  /// of Things (IoT).
  final String? iotRoleAlias;

  /// The Amazon Resource Name (ARN) that has access to Amazon Web Services
  /// Internet of Things (IoT).
  final String? roleArn;

  DescribeDeviceFleetResponse({
    required this.creationTime,
    required this.deviceFleetArn,
    required this.deviceFleetName,
    required this.lastModifiedTime,
    required this.outputConfig,
    this.description,
    this.iotRoleAlias,
    this.roleArn,
  });

  factory DescribeDeviceFleetResponse.fromJson(Map<String, dynamic> json) {
    return DescribeDeviceFleetResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      deviceFleetArn: json['DeviceFleetArn'] as String,
      deviceFleetName: json['DeviceFleetName'] as String,
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputConfig: EdgeOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      description: json['Description'] as String?,
      iotRoleAlias: json['IotRoleAlias'] as String?,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final deviceFleetArn = this.deviceFleetArn;
    final deviceFleetName = this.deviceFleetName;
    final lastModifiedTime = this.lastModifiedTime;
    final outputConfig = this.outputConfig;
    final description = this.description;
    final iotRoleAlias = this.iotRoleAlias;
    final roleArn = this.roleArn;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'DeviceFleetArn': deviceFleetArn,
      'DeviceFleetName': deviceFleetName,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputConfig': outputConfig,
      if (description != null) 'Description': description,
      if (iotRoleAlias != null) 'IotRoleAlias': iotRoleAlias,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeDeviceResponse {
  /// The name of the fleet the device belongs to.
  final String deviceFleetName;

  /// The unique identifier of the device.
  final String deviceName;

  /// The timestamp of the last registration or de-reregistration.
  final DateTime registrationTime;

  /// A description of the device.
  final String? description;

  /// The Amazon Resource Name (ARN) of the device.
  final String? deviceArn;

  /// The Amazon Web Services Internet of Things (IoT) object thing name
  /// associated with the device.
  final String? iotThingName;

  /// The last heartbeat received from the device.
  final DateTime? latestHeartbeat;

  /// The maximum number of models.
  final int? maxModels;

  /// Models on the device.
  final List<EdgeModel>? models;

  /// The response from the last list when returning a list large enough to need
  /// tokening.
  final String? nextToken;

  DescribeDeviceResponse({
    required this.deviceFleetName,
    required this.deviceName,
    required this.registrationTime,
    this.description,
    this.deviceArn,
    this.iotThingName,
    this.latestHeartbeat,
    this.maxModels,
    this.models,
    this.nextToken,
  });

  factory DescribeDeviceResponse.fromJson(Map<String, dynamic> json) {
    return DescribeDeviceResponse(
      deviceFleetName: json['DeviceFleetName'] as String,
      deviceName: json['DeviceName'] as String,
      registrationTime:
          nonNullableTimeStampFromJson(json['RegistrationTime'] as Object),
      description: json['Description'] as String?,
      deviceArn: json['DeviceArn'] as String?,
      iotThingName: json['IotThingName'] as String?,
      latestHeartbeat: timeStampFromJson(json['LatestHeartbeat']),
      maxModels: json['MaxModels'] as int?,
      models: (json['Models'] as List?)
          ?.whereNotNull()
          .map((e) => EdgeModel.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetName = this.deviceFleetName;
    final deviceName = this.deviceName;
    final registrationTime = this.registrationTime;
    final description = this.description;
    final deviceArn = this.deviceArn;
    final iotThingName = this.iotThingName;
    final latestHeartbeat = this.latestHeartbeat;
    final maxModels = this.maxModels;
    final models = this.models;
    final nextToken = this.nextToken;
    return {
      'DeviceFleetName': deviceFleetName,
      'DeviceName': deviceName,
      'RegistrationTime': unixTimestampToJson(registrationTime),
      if (description != null) 'Description': description,
      if (deviceArn != null) 'DeviceArn': deviceArn,
      if (iotThingName != null) 'IotThingName': iotThingName,
      if (latestHeartbeat != null)
        'LatestHeartbeat': unixTimestampToJson(latestHeartbeat),
      if (maxModels != null) 'MaxModels': maxModels,
      if (models != null) 'Models': models,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class DescribeDomainResponse {
  /// Specifies the VPC used for non-EFS traffic. The default value is
  /// <code>PublicInternetOnly</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed
  /// by Amazon SageMaker, which allows direct internet access
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All Studio traffic is through the specified VPC and
  /// subnets
  /// </li>
  /// </ul>
  final AppNetworkAccessType? appNetworkAccessType;

  /// The domain's authentication mode.
  final AuthMode? authMode;

  /// The creation time.
  final DateTime? creationTime;

  /// Settings which are applied to UserProfiles in this domain if settings are
  /// not explicitly specified in a given UserProfile.
  final UserSettings? defaultUserSettings;

  /// The domain's Amazon Resource Name (ARN).
  final String? domainArn;

  /// The domain ID.
  final String? domainId;

  /// The domain name.
  final String? domainName;

  /// The failure reason.
  final String? failureReason;

  /// The ID of the Amazon Elastic File System (EFS) managed by this Domain.
  final String? homeEfsFileSystemId;

  /// This member is deprecated and replaced with <code>KmsKeyId</code>.
  final String? homeEfsFileSystemKmsKeyId;

  /// The Amazon Web Services KMS customer managed CMK used to encrypt the EFS
  /// volume attached to the domain.
  final String? kmsKeyId;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The SSO managed application instance ID.
  final String? singleSignOnManagedApplicationInstanceId;

  /// The status.
  final DomainStatus? status;

  /// The VPC subnets that Studio uses for communication.
  final List<String>? subnetIds;

  /// The domain's URL.
  final String? url;

  /// The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for
  /// communication.
  final String? vpcId;

  DescribeDomainResponse({
    this.appNetworkAccessType,
    this.authMode,
    this.creationTime,
    this.defaultUserSettings,
    this.domainArn,
    this.domainId,
    this.domainName,
    this.failureReason,
    this.homeEfsFileSystemId,
    this.homeEfsFileSystemKmsKeyId,
    this.kmsKeyId,
    this.lastModifiedTime,
    this.singleSignOnManagedApplicationInstanceId,
    this.status,
    this.subnetIds,
    this.url,
    this.vpcId,
  });

  factory DescribeDomainResponse.fromJson(Map<String, dynamic> json) {
    return DescribeDomainResponse(
      appNetworkAccessType:
          (json['AppNetworkAccessType'] as String?)?.toAppNetworkAccessType(),
      authMode: (json['AuthMode'] as String?)?.toAuthMode(),
      creationTime: timeStampFromJson(json['CreationTime']),
      defaultUserSettings: json['DefaultUserSettings'] != null
          ? UserSettings.fromJson(
              json['DefaultUserSettings'] as Map<String, dynamic>)
          : null,
      domainArn: json['DomainArn'] as String?,
      domainId: json['DomainId'] as String?,
      domainName: json['DomainName'] as String?,
      failureReason: json['FailureReason'] as String?,
      homeEfsFileSystemId: json['HomeEfsFileSystemId'] as String?,
      homeEfsFileSystemKmsKeyId: json['HomeEfsFileSystemKmsKeyId'] as String?,
      kmsKeyId: json['KmsKeyId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      singleSignOnManagedApplicationInstanceId:
          json['SingleSignOnManagedApplicationInstanceId'] as String?,
      status: (json['Status'] as String?)?.toDomainStatus(),
      subnetIds: (json['SubnetIds'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      url: json['Url'] as String?,
      vpcId: json['VpcId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appNetworkAccessType = this.appNetworkAccessType;
    final authMode = this.authMode;
    final creationTime = this.creationTime;
    final defaultUserSettings = this.defaultUserSettings;
    final domainArn = this.domainArn;
    final domainId = this.domainId;
    final domainName = this.domainName;
    final failureReason = this.failureReason;
    final homeEfsFileSystemId = this.homeEfsFileSystemId;
    final homeEfsFileSystemKmsKeyId = this.homeEfsFileSystemKmsKeyId;
    final kmsKeyId = this.kmsKeyId;
    final lastModifiedTime = this.lastModifiedTime;
    final singleSignOnManagedApplicationInstanceId =
        this.singleSignOnManagedApplicationInstanceId;
    final status = this.status;
    final subnetIds = this.subnetIds;
    final url = this.url;
    final vpcId = this.vpcId;
    return {
      if (appNetworkAccessType != null)
        'AppNetworkAccessType': appNetworkAccessType.toValue(),
      if (authMode != null) 'AuthMode': authMode.toValue(),
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (defaultUserSettings != null)
        'DefaultUserSettings': defaultUserSettings,
      if (domainArn != null) 'DomainArn': domainArn,
      if (domainId != null) 'DomainId': domainId,
      if (domainName != null) 'DomainName': domainName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (homeEfsFileSystemId != null)
        'HomeEfsFileSystemId': homeEfsFileSystemId,
      if (homeEfsFileSystemKmsKeyId != null)
        'HomeEfsFileSystemKmsKeyId': homeEfsFileSystemKmsKeyId,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (singleSignOnManagedApplicationInstanceId != null)
        'SingleSignOnManagedApplicationInstanceId':
            singleSignOnManagedApplicationInstanceId,
      if (status != null) 'Status': status.toValue(),
      if (subnetIds != null) 'SubnetIds': subnetIds,
      if (url != null) 'Url': url,
      if (vpcId != null) 'VpcId': vpcId,
    };
  }
}

class DescribeEdgePackagingJobResponse {
  /// The Amazon Resource Name (ARN) of the edge packaging job.
  final String edgePackagingJobArn;

  /// The name of the edge packaging job.
  final String edgePackagingJobName;

  /// The current status of the packaging job.
  final EdgePackagingJobStatus edgePackagingJobStatus;

  /// The name of the SageMaker Neo compilation job that is used to locate model
  /// artifacts that are being packaged.
  final String? compilationJobName;

  /// The timestamp of when the packaging job was created.
  final DateTime? creationTime;

  /// Returns a message describing the job status and error messages.
  final String? edgePackagingJobStatusMessage;

  /// The timestamp of when the job was last updated.
  final DateTime? lastModifiedTime;

  /// The Amazon Simple Storage (S3) URI where model artifacts ares stored.
  final String? modelArtifact;

  /// The name of the model.
  final String? modelName;

  /// The signature document of files in the model artifact.
  final String? modelSignature;

  /// The version of the model.
  final String? modelVersion;

  /// The output configuration for the edge packaging job.
  final EdgeOutputConfig? outputConfig;

  /// The output of a SageMaker Edge Manager deployable resource.
  final EdgePresetDeploymentOutput? presetDeploymentOutput;

  /// The CMK to use when encrypting the EBS volume the job run on.
  final String? resourceKey;

  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
  /// to download and upload the model, and to contact Neo.
  final String? roleArn;

  DescribeEdgePackagingJobResponse({
    required this.edgePackagingJobArn,
    required this.edgePackagingJobName,
    required this.edgePackagingJobStatus,
    this.compilationJobName,
    this.creationTime,
    this.edgePackagingJobStatusMessage,
    this.lastModifiedTime,
    this.modelArtifact,
    this.modelName,
    this.modelSignature,
    this.modelVersion,
    this.outputConfig,
    this.presetDeploymentOutput,
    this.resourceKey,
    this.roleArn,
  });

  factory DescribeEdgePackagingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeEdgePackagingJobResponse(
      edgePackagingJobArn: json['EdgePackagingJobArn'] as String,
      edgePackagingJobName: json['EdgePackagingJobName'] as String,
      edgePackagingJobStatus:
          (json['EdgePackagingJobStatus'] as String).toEdgePackagingJobStatus(),
      compilationJobName: json['CompilationJobName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      edgePackagingJobStatusMessage:
          json['EdgePackagingJobStatusMessage'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelArtifact: json['ModelArtifact'] as String?,
      modelName: json['ModelName'] as String?,
      modelSignature: json['ModelSignature'] as String?,
      modelVersion: json['ModelVersion'] as String?,
      outputConfig: json['OutputConfig'] != null
          ? EdgeOutputConfig.fromJson(
              json['OutputConfig'] as Map<String, dynamic>)
          : null,
      presetDeploymentOutput: json['PresetDeploymentOutput'] != null
          ? EdgePresetDeploymentOutput.fromJson(
              json['PresetDeploymentOutput'] as Map<String, dynamic>)
          : null,
      resourceKey: json['ResourceKey'] as String?,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobArn = this.edgePackagingJobArn;
    final edgePackagingJobName = this.edgePackagingJobName;
    final edgePackagingJobStatus = this.edgePackagingJobStatus;
    final compilationJobName = this.compilationJobName;
    final creationTime = this.creationTime;
    final edgePackagingJobStatusMessage = this.edgePackagingJobStatusMessage;
    final lastModifiedTime = this.lastModifiedTime;
    final modelArtifact = this.modelArtifact;
    final modelName = this.modelName;
    final modelSignature = this.modelSignature;
    final modelVersion = this.modelVersion;
    final outputConfig = this.outputConfig;
    final presetDeploymentOutput = this.presetDeploymentOutput;
    final resourceKey = this.resourceKey;
    final roleArn = this.roleArn;
    return {
      'EdgePackagingJobArn': edgePackagingJobArn,
      'EdgePackagingJobName': edgePackagingJobName,
      'EdgePackagingJobStatus': edgePackagingJobStatus.toValue(),
      if (compilationJobName != null) 'CompilationJobName': compilationJobName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (edgePackagingJobStatusMessage != null)
        'EdgePackagingJobStatusMessage': edgePackagingJobStatusMessage,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelArtifact != null) 'ModelArtifact': modelArtifact,
      if (modelName != null) 'ModelName': modelName,
      if (modelSignature != null) 'ModelSignature': modelSignature,
      if (modelVersion != null) 'ModelVersion': modelVersion,
      if (outputConfig != null) 'OutputConfig': outputConfig,
      if (presetDeploymentOutput != null)
        'PresetDeploymentOutput': presetDeploymentOutput,
      if (resourceKey != null) 'ResourceKey': resourceKey,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeEndpointConfigOutput {
  /// A timestamp that shows when the endpoint configuration was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint configuration.
  final String endpointConfigArn;

  /// Name of the Amazon SageMaker endpoint configuration.
  final String endpointConfigName;

  /// An array of <code>ProductionVariant</code> objects, one for each model that
  /// you want to host at this endpoint.
  final List<ProductionVariant> productionVariants;
  final DataCaptureConfig? dataCaptureConfig;

  /// Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when
  /// storing it on the ML storage volume attached to the instance.
  final String? kmsKeyId;

  DescribeEndpointConfigOutput({
    required this.creationTime,
    required this.endpointConfigArn,
    required this.endpointConfigName,
    required this.productionVariants,
    this.dataCaptureConfig,
    this.kmsKeyId,
  });

  factory DescribeEndpointConfigOutput.fromJson(Map<String, dynamic> json) {
    return DescribeEndpointConfigOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointConfigArn: json['EndpointConfigArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
      productionVariants: (json['ProductionVariants'] as List)
          .whereNotNull()
          .map((e) => ProductionVariant.fromJson(e as Map<String, dynamic>))
          .toList(),
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? DataCaptureConfig.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointConfigArn = this.endpointConfigArn;
    final endpointConfigName = this.endpointConfigName;
    final productionVariants = this.productionVariants;
    final dataCaptureConfig = this.dataCaptureConfig;
    final kmsKeyId = this.kmsKeyId;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointConfigArn': endpointConfigArn,
      'EndpointConfigName': endpointConfigName,
      'ProductionVariants': productionVariants,
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

class DescribeEndpointOutput {
  /// A timestamp that shows when the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// The name of the endpoint configuration associated with this endpoint.
  final String endpointConfigName;

  /// Name of the endpoint.
  final String endpointName;

  /// The status of the endpoint.
  ///
  /// <ul>
  /// <li>
  /// <code>OutOfService</code>: Endpoint is not available to take incoming
  /// requests.
  /// </li>
  /// <li>
  /// <code>Creating</code>: <a>CreateEndpoint</a> is executing.
  /// </li>
  /// <li>
  /// <code>Updating</code>: <a>UpdateEndpoint</a> or
  /// <a>UpdateEndpointWeightsAndCapacities</a> is executing.
  /// </li>
  /// <li>
  /// <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot
  /// be updated or deleted or re-scaled until it has completed. This maintenance
  /// operation does not change any customer-specified values such as VPC config,
  /// KMS encryption, model, instance type, or instance count.
  /// </li>
  /// <li>
  /// <code>RollingBack</code>: Endpoint fails to scale up or down or change its
  /// variant weight and is in the process of rolling back to its previous
  /// configuration. Once the rollback completes, endpoint returns to an
  /// <code>InService</code> status. This transitional status only applies to an
  /// endpoint that has autoscaling enabled and is undergoing variant weight or
  /// capacity changes as part of an <a>UpdateEndpointWeightsAndCapacities</a>
  /// call or when the <a>UpdateEndpointWeightsAndCapacities</a> operation is
  /// called explicitly.
  /// </li>
  /// <li>
  /// <code>InService</code>: Endpoint is available to process incoming requests.
  /// </li>
  /// <li>
  /// <code>Deleting</code>: <a>DeleteEndpoint</a> is executing.
  /// </li>
  /// <li>
  /// <code>Failed</code>: Endpoint could not be created, updated, or re-scaled.
  /// Use <a>DescribeEndpointOutput$FailureReason</a> for information about the
  /// failure. <a>DeleteEndpoint</a> is the only operation that can be performed
  /// on a failed endpoint.
  /// </li>
  /// </ul>
  final EndpointStatus endpointStatus;

  /// A timestamp that shows when the endpoint was last modified.
  final DateTime lastModifiedTime;
  final DataCaptureConfigSummary? dataCaptureConfig;

  /// If the status of the endpoint is <code>Failed</code>, the reason why it
  /// failed.
  final String? failureReason;

  /// The most recent deployment configuration for the endpoint.
  final DeploymentConfig? lastDeploymentConfig;

  /// An array of <a>ProductionVariantSummary</a> objects, one for each model
  /// hosted behind this endpoint.
  final List<ProductionVariantSummary>? productionVariants;

  DescribeEndpointOutput({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointConfigName,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
    this.dataCaptureConfig,
    this.failureReason,
    this.lastDeploymentConfig,
    this.productionVariants,
  });

  factory DescribeEndpointOutput.fromJson(Map<String, dynamic> json) {
    return DescribeEndpointOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus: (json['EndpointStatus'] as String).toEndpointStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? DataCaptureConfigSummary.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      lastDeploymentConfig: json['LastDeploymentConfig'] != null
          ? DeploymentConfig.fromJson(
              json['LastDeploymentConfig'] as Map<String, dynamic>)
          : null,
      productionVariants: (json['ProductionVariants'] as List?)
          ?.whereNotNull()
          .map((e) =>
              ProductionVariantSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointConfigName = this.endpointConfigName;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final dataCaptureConfig = this.dataCaptureConfig;
    final failureReason = this.failureReason;
    final lastDeploymentConfig = this.lastDeploymentConfig;
    final productionVariants = this.productionVariants;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointConfigName': endpointConfigName,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastDeploymentConfig != null)
        'LastDeploymentConfig': lastDeploymentConfig,
      if (productionVariants != null) 'ProductionVariants': productionVariants,
    };
  }
}

class DescribeExperimentResponse {
  /// Who created the experiment.
  final UserContext? createdBy;

  /// When the experiment was created.
  final DateTime? creationTime;

  /// The description of the experiment.
  final String? description;

  /// The name of the experiment as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>ExperimentName</code> is displayed.
  final String? displayName;

  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  /// The name of the experiment.
  final String? experimentName;

  /// Who last modified the experiment.
  final UserContext? lastModifiedBy;

  /// When the experiment was last modified.
  final DateTime? lastModifiedTime;

  /// The ARN of the source and, optionally, the type.
  final ExperimentSource? source;

  DescribeExperimentResponse({
    this.createdBy,
    this.creationTime,
    this.description,
    this.displayName,
    this.experimentArn,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.source,
  });

  factory DescribeExperimentResponse.fromJson(Map<String, dynamic> json) {
    return DescribeExperimentResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      experimentArn: json['ExperimentArn'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ExperimentSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final experimentArn = this.experimentArn;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (experimentArn != null) 'ExperimentArn': experimentArn,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
    };
  }
}

class DescribeFeatureGroupResponse {
  /// A timestamp indicating when SageMaker created the <code>FeatureGroup</code>.
  final DateTime creationTime;

  /// The name of the feature that stores the <code>EventTime</code> of a Record
  /// in a <code>FeatureGroup</code>.
  ///
  /// An <code>EventTime</code> is a point in time when a new event occurs that
  /// corresponds to the creation or update of a <code>Record</code> in a
  /// <code>FeatureGroup</code>. All <code>Records</code> in the
  /// <code>FeatureGroup</code> have a corresponding <code>EventTime</code>.
  final String eventTimeFeatureName;

  /// A list of the <code>Features</code> in the <code>FeatureGroup</code>. Each
  /// feature is defined by a <code>FeatureName</code> and
  /// <code>FeatureType</code>.
  final List<FeatureDefinition> featureDefinitions;

  /// The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>.
  final String featureGroupArn;

  /// he name of the <code>FeatureGroup</code>.
  final String featureGroupName;

  /// A token to resume pagination of the list of <code>Features</code>
  /// (<code>FeatureDefinitions</code>).
  final String nextToken;

  /// The name of the <code>Feature</code> used for <code>RecordIdentifier</code>,
  /// whose value uniquely identifies a record stored in the feature store.
  final String recordIdentifierFeatureName;

  /// A free form description of the feature group.
  final String? description;

  /// The reason that the <code>FeatureGroup</code> failed to be replicated in the
  /// <code>OfflineStore</code>. This is failure can occur because:
  ///
  /// <ul>
  /// <li>
  /// The <code>FeatureGroup</code> could not be created in the
  /// <code>OfflineStore</code>.
  /// </li>
  /// <li>
  /// The <code>FeatureGroup</code> could not be deleted from the
  /// <code>OfflineStore</code>.
  /// </li>
  /// </ul>
  final String? failureReason;

  /// The status of the feature group.
  final FeatureGroupStatus? featureGroupStatus;

  /// The configuration of the <code>OfflineStore</code>, inducing the S3 location
  /// of the <code>OfflineStore</code>, Amazon Web Services Glue or Amazon Web
  /// Services Hive data catalogue configurations, and the security configuration.
  final OfflineStoreConfig? offlineStoreConfig;

  /// The status of the <code>OfflineStore</code>. Notifies you if replicating
  /// data into the <code>OfflineStore</code> has failed. Returns either:
  /// <code>Active</code> or <code>Blocked</code>
  final OfflineStoreStatus? offlineStoreStatus;

  /// The configuration for the <code>OnlineStore</code>.
  final OnlineStoreConfig? onlineStoreConfig;

  /// The Amazon Resource Name (ARN) of the IAM execution role used to persist
  /// data into the <code>OfflineStore</code> if an
  /// <code>OfflineStoreConfig</code> is provided.
  final String? roleArn;

  DescribeFeatureGroupResponse({
    required this.creationTime,
    required this.eventTimeFeatureName,
    required this.featureDefinitions,
    required this.featureGroupArn,
    required this.featureGroupName,
    required this.nextToken,
    required this.recordIdentifierFeatureName,
    this.description,
    this.failureReason,
    this.featureGroupStatus,
    this.offlineStoreConfig,
    this.offlineStoreStatus,
    this.onlineStoreConfig,
    this.roleArn,
  });

  factory DescribeFeatureGroupResponse.fromJson(Map<String, dynamic> json) {
    return DescribeFeatureGroupResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      eventTimeFeatureName: json['EventTimeFeatureName'] as String,
      featureDefinitions: (json['FeatureDefinitions'] as List)
          .whereNotNull()
          .map((e) => FeatureDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      featureGroupArn: json['FeatureGroupArn'] as String,
      featureGroupName: json['FeatureGroupName'] as String,
      nextToken: json['NextToken'] as String,
      recordIdentifierFeatureName:
          json['RecordIdentifierFeatureName'] as String,
      description: json['Description'] as String?,
      failureReason: json['FailureReason'] as String?,
      featureGroupStatus:
          (json['FeatureGroupStatus'] as String?)?.toFeatureGroupStatus(),
      offlineStoreConfig: json['OfflineStoreConfig'] != null
          ? OfflineStoreConfig.fromJson(
              json['OfflineStoreConfig'] as Map<String, dynamic>)
          : null,
      offlineStoreStatus: json['OfflineStoreStatus'] != null
          ? OfflineStoreStatus.fromJson(
              json['OfflineStoreStatus'] as Map<String, dynamic>)
          : null,
      onlineStoreConfig: json['OnlineStoreConfig'] != null
          ? OnlineStoreConfig.fromJson(
              json['OnlineStoreConfig'] as Map<String, dynamic>)
          : null,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final eventTimeFeatureName = this.eventTimeFeatureName;
    final featureDefinitions = this.featureDefinitions;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final nextToken = this.nextToken;
    final recordIdentifierFeatureName = this.recordIdentifierFeatureName;
    final description = this.description;
    final failureReason = this.failureReason;
    final featureGroupStatus = this.featureGroupStatus;
    final offlineStoreConfig = this.offlineStoreConfig;
    final offlineStoreStatus = this.offlineStoreStatus;
    final onlineStoreConfig = this.onlineStoreConfig;
    final roleArn = this.roleArn;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EventTimeFeatureName': eventTimeFeatureName,
      'FeatureDefinitions': featureDefinitions,
      'FeatureGroupArn': featureGroupArn,
      'FeatureGroupName': featureGroupName,
      'NextToken': nextToken,
      'RecordIdentifierFeatureName': recordIdentifierFeatureName,
      if (description != null) 'Description': description,
      if (failureReason != null) 'FailureReason': failureReason,
      if (featureGroupStatus != null)
        'FeatureGroupStatus': featureGroupStatus.toValue(),
      if (offlineStoreConfig != null) 'OfflineStoreConfig': offlineStoreConfig,
      if (offlineStoreStatus != null) 'OfflineStoreStatus': offlineStoreStatus,
      if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeFlowDefinitionResponse {
  /// The timestamp when the flow definition was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the flow defintion.
  final String flowDefinitionArn;

  /// The Amazon Resource Name (ARN) of the flow definition.
  final String flowDefinitionName;

  /// The status of the flow definition. Valid values are listed below.
  final FlowDefinitionStatus flowDefinitionStatus;

  /// An object containing information about who works on the task, the workforce
  /// task price, and other task details.
  final HumanLoopConfig humanLoopConfig;

  /// An object containing information about the output file.
  final FlowDefinitionOutputConfig outputConfig;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) execution role for the flow definition.
  final String roleArn;

  /// The reason your flow definition failed.
  final String? failureReason;

  /// An object containing information about what triggers a human review
  /// workflow.
  final HumanLoopActivationConfig? humanLoopActivationConfig;

  /// Container for configuring the source of human task requests. Used to specify
  /// if Amazon Rekognition or Amazon Textract is used as an integration source.
  final HumanLoopRequestSource? humanLoopRequestSource;

  DescribeFlowDefinitionResponse({
    required this.creationTime,
    required this.flowDefinitionArn,
    required this.flowDefinitionName,
    required this.flowDefinitionStatus,
    required this.humanLoopConfig,
    required this.outputConfig,
    required this.roleArn,
    this.failureReason,
    this.humanLoopActivationConfig,
    this.humanLoopRequestSource,
  });

  factory DescribeFlowDefinitionResponse.fromJson(Map<String, dynamic> json) {
    return DescribeFlowDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      flowDefinitionArn: json['FlowDefinitionArn'] as String,
      flowDefinitionName: json['FlowDefinitionName'] as String,
      flowDefinitionStatus:
          (json['FlowDefinitionStatus'] as String).toFlowDefinitionStatus(),
      humanLoopConfig: HumanLoopConfig.fromJson(
          json['HumanLoopConfig'] as Map<String, dynamic>),
      outputConfig: FlowDefinitionOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      failureReason: json['FailureReason'] as String?,
      humanLoopActivationConfig: json['HumanLoopActivationConfig'] != null
          ? HumanLoopActivationConfig.fromJson(
              json['HumanLoopActivationConfig'] as Map<String, dynamic>)
          : null,
      humanLoopRequestSource: json['HumanLoopRequestSource'] != null
          ? HumanLoopRequestSource.fromJson(
              json['HumanLoopRequestSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final flowDefinitionArn = this.flowDefinitionArn;
    final flowDefinitionName = this.flowDefinitionName;
    final flowDefinitionStatus = this.flowDefinitionStatus;
    final humanLoopConfig = this.humanLoopConfig;
    final outputConfig = this.outputConfig;
    final roleArn = this.roleArn;
    final failureReason = this.failureReason;
    final humanLoopActivationConfig = this.humanLoopActivationConfig;
    final humanLoopRequestSource = this.humanLoopRequestSource;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FlowDefinitionArn': flowDefinitionArn,
      'FlowDefinitionName': flowDefinitionName,
      'FlowDefinitionStatus': flowDefinitionStatus.toValue(),
      'HumanLoopConfig': humanLoopConfig,
      'OutputConfig': outputConfig,
      'RoleArn': roleArn,
      if (failureReason != null) 'FailureReason': failureReason,
      if (humanLoopActivationConfig != null)
        'HumanLoopActivationConfig': humanLoopActivationConfig,
      if (humanLoopRequestSource != null)
        'HumanLoopRequestSource': humanLoopRequestSource,
    };
  }
}

class DescribeHumanTaskUiResponse {
  /// The timestamp when the human task user interface was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the human task user interface (worker task
  /// template).
  final String humanTaskUiArn;

  /// The name of the human task user interface (worker task template).
  final String humanTaskUiName;
  final UiTemplateInfo uiTemplate;

  /// The status of the human task user interface (worker task template). Valid
  /// values are listed below.
  final HumanTaskUiStatus? humanTaskUiStatus;

  DescribeHumanTaskUiResponse({
    required this.creationTime,
    required this.humanTaskUiArn,
    required this.humanTaskUiName,
    required this.uiTemplate,
    this.humanTaskUiStatus,
  });

  factory DescribeHumanTaskUiResponse.fromJson(Map<String, dynamic> json) {
    return DescribeHumanTaskUiResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
      humanTaskUiName: json['HumanTaskUiName'] as String,
      uiTemplate:
          UiTemplateInfo.fromJson(json['UiTemplate'] as Map<String, dynamic>),
      humanTaskUiStatus:
          (json['HumanTaskUiStatus'] as String?)?.toHumanTaskUiStatus(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final humanTaskUiArn = this.humanTaskUiArn;
    final humanTaskUiName = this.humanTaskUiName;
    final uiTemplate = this.uiTemplate;
    final humanTaskUiStatus = this.humanTaskUiStatus;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HumanTaskUiArn': humanTaskUiArn,
      'HumanTaskUiName': humanTaskUiName,
      'UiTemplate': uiTemplate,
      if (humanTaskUiStatus != null)
        'HumanTaskUiStatus': humanTaskUiStatus.toValue(),
    };
  }
}

class DescribeHyperParameterTuningJobResponse {
  /// The date and time that the tuning job started.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the tuning job.
  final String hyperParameterTuningJobArn;

  /// The <a>HyperParameterTuningJobConfig</a> object that specifies the
  /// configuration of the tuning job.
  final HyperParameterTuningJobConfig hyperParameterTuningJobConfig;

  /// The name of the tuning job.
  final String hyperParameterTuningJobName;

  /// The status of the tuning job: InProgress, Completed, Failed, Stopping, or
  /// Stopped.
  final HyperParameterTuningJobStatus hyperParameterTuningJobStatus;

  /// The <a>ObjectiveStatusCounters</a> object that specifies the number of
  /// training jobs, categorized by the status of their final objective metric,
  /// that this tuning job launched.
  final ObjectiveStatusCounters objectiveStatusCounters;

  /// The <a>TrainingJobStatusCounters</a> object that specifies the number of
  /// training jobs, categorized by status, that this tuning job launched.
  final TrainingJobStatusCounters trainingJobStatusCounters;

  /// A <a>TrainingJobSummary</a> object that describes the training job that
  /// completed with the best current <a>HyperParameterTuningJobObjective</a>.
  final HyperParameterTrainingJobSummary? bestTrainingJob;

  /// If the tuning job failed, the reason it failed.
  final String? failureReason;

  /// The date and time that the tuning job ended.
  final DateTime? hyperParameterTuningEndTime;

  /// The date and time that the status of the tuning job was modified.
  final DateTime? lastModifiedTime;

  /// If the hyperparameter tuning job is an warm start tuning job with a
  /// <code>WarmStartType</code> of <code>IDENTICAL_DATA_AND_ALGORITHM</code>,
  /// this is the <a>TrainingJobSummary</a> for the training job with the best
  /// objective metric value of all training jobs launched by this tuning job and
  /// all parent jobs specified for the warm start tuning job.
  final HyperParameterTrainingJobSummary? overallBestTrainingJob;

  /// The <a>HyperParameterTrainingJobDefinition</a> object that specifies the
  /// definition of the training jobs that this tuning job launches.
  final HyperParameterTrainingJobDefinition? trainingJobDefinition;

  /// A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
  /// for this tuning job.
  final List<HyperParameterTrainingJobDefinition>? trainingJobDefinitions;

  /// The configuration for starting the hyperparameter parameter tuning job using
  /// one or more previous tuning jobs as a starting point. The results of
  /// previous tuning jobs are used to inform which combinations of
  /// hyperparameters to search over in the new tuning job.
  final HyperParameterTuningJobWarmStartConfig? warmStartConfig;

  DescribeHyperParameterTuningJobResponse({
    required this.creationTime,
    required this.hyperParameterTuningJobArn,
    required this.hyperParameterTuningJobConfig,
    required this.hyperParameterTuningJobName,
    required this.hyperParameterTuningJobStatus,
    required this.objectiveStatusCounters,
    required this.trainingJobStatusCounters,
    this.bestTrainingJob,
    this.failureReason,
    this.hyperParameterTuningEndTime,
    this.lastModifiedTime,
    this.overallBestTrainingJob,
    this.trainingJobDefinition,
    this.trainingJobDefinitions,
    this.warmStartConfig,
  });

  factory DescribeHyperParameterTuningJobResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeHyperParameterTuningJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String,
      hyperParameterTuningJobConfig: HyperParameterTuningJobConfig.fromJson(
          json['HyperParameterTuningJobConfig'] as Map<String, dynamic>),
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String,
      hyperParameterTuningJobStatus:
          (json['HyperParameterTuningJobStatus'] as String)
              .toHyperParameterTuningJobStatus(),
      objectiveStatusCounters: ObjectiveStatusCounters.fromJson(
          json['ObjectiveStatusCounters'] as Map<String, dynamic>),
      trainingJobStatusCounters: TrainingJobStatusCounters.fromJson(
          json['TrainingJobStatusCounters'] as Map<String, dynamic>),
      bestTrainingJob: json['BestTrainingJob'] != null
          ? HyperParameterTrainingJobSummary.fromJson(
              json['BestTrainingJob'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      hyperParameterTuningEndTime:
          timeStampFromJson(json['HyperParameterTuningEndTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      overallBestTrainingJob: json['OverallBestTrainingJob'] != null
          ? HyperParameterTrainingJobSummary.fromJson(
              json['OverallBestTrainingJob'] as Map<String, dynamic>)
          : null,
      trainingJobDefinition: json['TrainingJobDefinition'] != null
          ? HyperParameterTrainingJobDefinition.fromJson(
              json['TrainingJobDefinition'] as Map<String, dynamic>)
          : null,
      trainingJobDefinitions: (json['TrainingJobDefinitions'] as List?)
          ?.whereNotNull()
          .map((e) => HyperParameterTrainingJobDefinition.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      warmStartConfig: json['WarmStartConfig'] != null
          ? HyperParameterTuningJobWarmStartConfig.fromJson(
              json['WarmStartConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    final hyperParameterTuningJobConfig = this.hyperParameterTuningJobConfig;
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    final hyperParameterTuningJobStatus = this.hyperParameterTuningJobStatus;
    final objectiveStatusCounters = this.objectiveStatusCounters;
    final trainingJobStatusCounters = this.trainingJobStatusCounters;
    final bestTrainingJob = this.bestTrainingJob;
    final failureReason = this.failureReason;
    final hyperParameterTuningEndTime = this.hyperParameterTuningEndTime;
    final lastModifiedTime = this.lastModifiedTime;
    final overallBestTrainingJob = this.overallBestTrainingJob;
    final trainingJobDefinition = this.trainingJobDefinition;
    final trainingJobDefinitions = this.trainingJobDefinitions;
    final warmStartConfig = this.warmStartConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
      'HyperParameterTuningJobConfig': hyperParameterTuningJobConfig,
      'HyperParameterTuningJobName': hyperParameterTuningJobName,
      'HyperParameterTuningJobStatus': hyperParameterTuningJobStatus.toValue(),
      'ObjectiveStatusCounters': objectiveStatusCounters,
      'TrainingJobStatusCounters': trainingJobStatusCounters,
      if (bestTrainingJob != null) 'BestTrainingJob': bestTrainingJob,
      if (failureReason != null) 'FailureReason': failureReason,
      if (hyperParameterTuningEndTime != null)
        'HyperParameterTuningEndTime':
            unixTimestampToJson(hyperParameterTuningEndTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (overallBestTrainingJob != null)
        'OverallBestTrainingJob': overallBestTrainingJob,
      if (trainingJobDefinition != null)
        'TrainingJobDefinition': trainingJobDefinition,
      if (trainingJobDefinitions != null)
        'TrainingJobDefinitions': trainingJobDefinitions,
      if (warmStartConfig != null) 'WarmStartConfig': warmStartConfig,
    };
  }
}

class DescribeImageResponse {
  /// When the image was created.
  final DateTime? creationTime;

  /// The description of the image.
  final String? description;

  /// The name of the image as displayed.
  final String? displayName;

  /// When a create, update, or delete operation fails, the reason for the
  /// failure.
  final String? failureReason;

  /// The Amazon Resource Name (ARN) of the image.
  final String? imageArn;

  /// The name of the image.
  final String? imageName;

  /// The status of the image.
  final ImageStatus? imageStatus;

  /// When the image was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the IAM role that enables Amazon SageMaker
  /// to perform tasks on your behalf.
  final String? roleArn;

  DescribeImageResponse({
    this.creationTime,
    this.description,
    this.displayName,
    this.failureReason,
    this.imageArn,
    this.imageName,
    this.imageStatus,
    this.lastModifiedTime,
    this.roleArn,
  });

  factory DescribeImageResponse.fromJson(Map<String, dynamic> json) {
    return DescribeImageResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      failureReason: json['FailureReason'] as String?,
      imageArn: json['ImageArn'] as String?,
      imageName: json['ImageName'] as String?,
      imageStatus: (json['ImageStatus'] as String?)?.toImageStatus(),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final failureReason = this.failureReason;
    final imageArn = this.imageArn;
    final imageName = this.imageName;
    final imageStatus = this.imageStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final roleArn = this.roleArn;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (imageArn != null) 'ImageArn': imageArn,
      if (imageName != null) 'ImageName': imageName,
      if (imageStatus != null) 'ImageStatus': imageStatus.toValue(),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeImageVersionResponse {
  /// The registry path of the container image on which this image version is
  /// based.
  final String? baseImage;

  /// The registry path of the container image that contains this image version.
  final String? containerImage;

  /// When the version was created.
  final DateTime? creationTime;

  /// When a create or delete operation fails, the reason for the failure.
  final String? failureReason;

  /// The Amazon Resource Name (ARN) of the image the version is based on.
  final String? imageArn;

  /// The ARN of the version.
  final String? imageVersionArn;

  /// The status of the version.
  final ImageVersionStatus? imageVersionStatus;

  /// When the version was last modified.
  final DateTime? lastModifiedTime;

  /// The version number.
  final int? version;

  DescribeImageVersionResponse({
    this.baseImage,
    this.containerImage,
    this.creationTime,
    this.failureReason,
    this.imageArn,
    this.imageVersionArn,
    this.imageVersionStatus,
    this.lastModifiedTime,
    this.version,
  });

  factory DescribeImageVersionResponse.fromJson(Map<String, dynamic> json) {
    return DescribeImageVersionResponse(
      baseImage: json['BaseImage'] as String?,
      containerImage: json['ContainerImage'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      imageArn: json['ImageArn'] as String?,
      imageVersionArn: json['ImageVersionArn'] as String?,
      imageVersionStatus:
          (json['ImageVersionStatus'] as String?)?.toImageVersionStatus(),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      version: json['Version'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final baseImage = this.baseImage;
    final containerImage = this.containerImage;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final imageArn = this.imageArn;
    final imageVersionArn = this.imageVersionArn;
    final imageVersionStatus = this.imageVersionStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final version = this.version;
    return {
      if (baseImage != null) 'BaseImage': baseImage,
      if (containerImage != null) 'ContainerImage': containerImage,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (imageArn != null) 'ImageArn': imageArn,
      if (imageVersionArn != null) 'ImageVersionArn': imageVersionArn,
      if (imageVersionStatus != null)
        'ImageVersionStatus': imageVersionStatus.toValue(),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (version != null) 'Version': version,
    };
  }
}

class DescribeLabelingJobResponse {
  /// The date and time that the labeling job was created.
  final DateTime creationTime;

  /// Configuration information required for human workers to complete a labeling
  /// task.
  final HumanTaskConfig humanTaskConfig;

  /// Input configuration information for the labeling job, such as the Amazon S3
  /// location of the data objects and the location of the manifest file that
  /// describes the data objects.
  final LabelingJobInputConfig inputConfig;

  /// A unique identifier for work done as part of a labeling job.
  final String jobReferenceCode;

  /// Provides a breakdown of the number of data objects labeled by humans, the
  /// number of objects labeled by machine, the number of objects than couldn't be
  /// labeled, and the total number of objects labeled.
  final LabelCounters labelCounters;

  /// The Amazon Resource Name (ARN) of the labeling job.
  final String labelingJobArn;

  /// The name assigned to the labeling job when it was created.
  final String labelingJobName;

  /// The processing status of the labeling job.
  final LabelingJobStatus labelingJobStatus;

  /// The date and time that the labeling job was last updated.
  final DateTime lastModifiedTime;

  /// The location of the job's output data and the Amazon Web Services Key
  /// Management Service key ID for the key used to encrypt the output data, if
  /// any.
  final LabelingJobOutputConfig outputConfig;

  /// The Amazon Resource Name (ARN) that Amazon SageMaker assumes to perform
  /// tasks on your behalf during data labeling.
  final String roleArn;

  /// If the job failed, the reason that it failed.
  final String? failureReason;

  /// The attribute used as the label in the output manifest file.
  final String? labelAttributeName;

  /// The S3 location of the JSON file that defines the categories used to label
  /// data objects. Please note the following label-category limits:
  ///
  /// <ul>
  /// <li>
  /// Semantic segmentation labeling jobs using automated labeling: 20 labels
  /// </li>
  /// <li>
  /// Box bounding labeling jobs (all): 10 labels
  /// </li>
  /// </ul>
  /// The file is a JSON structure in the following format:
  ///
  /// <code>{</code>
  ///
  /// <code> "document-version": "2018-11-28"</code>
  ///
  /// <code> "labels": [</code>
  ///
  /// <code> {</code>
  ///
  /// <code> "label": "<i>label 1</i>"</code>
  ///
  /// <code> },</code>
  ///
  /// <code> {</code>
  ///
  /// <code> "label": "<i>label 2</i>"</code>
  ///
  /// <code> },</code>
  ///
  /// <code> ...</code>
  ///
  /// <code> {</code>
  ///
  /// <code> "label": "<i>label n</i>"</code>
  ///
  /// <code> }</code>
  ///
  /// <code> ]</code>
  ///
  /// <code>}</code>
  final String? labelCategoryConfigS3Uri;

  /// Configuration information for automated data labeling.
  final LabelingJobAlgorithmsConfig? labelingJobAlgorithmsConfig;

  /// The location of the output produced by the labeling job.
  final LabelingJobOutput? labelingJobOutput;

  /// A set of conditions for stopping a labeling job. If any of the conditions
  /// are met, the job is automatically stopped.
  final LabelingJobStoppingConditions? stoppingConditions;

  /// An array of key-value pairs. You can use tags to categorize your Amazon Web
  /// Services resources in different ways, for example, by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  final List<Tag>? tags;

  DescribeLabelingJobResponse({
    required this.creationTime,
    required this.humanTaskConfig,
    required this.inputConfig,
    required this.jobReferenceCode,
    required this.labelCounters,
    required this.labelingJobArn,
    required this.labelingJobName,
    required this.labelingJobStatus,
    required this.lastModifiedTime,
    required this.outputConfig,
    required this.roleArn,
    this.failureReason,
    this.labelAttributeName,
    this.labelCategoryConfigS3Uri,
    this.labelingJobAlgorithmsConfig,
    this.labelingJobOutput,
    this.stoppingConditions,
    this.tags,
  });

  factory DescribeLabelingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeLabelingJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      humanTaskConfig: HumanTaskConfig.fromJson(
          json['HumanTaskConfig'] as Map<String, dynamic>),
      inputConfig: LabelingJobInputConfig.fromJson(
          json['InputConfig'] as Map<String, dynamic>),
      jobReferenceCode: json['JobReferenceCode'] as String,
      labelCounters:
          LabelCounters.fromJson(json['LabelCounters'] as Map<String, dynamic>),
      labelingJobArn: json['LabelingJobArn'] as String,
      labelingJobName: json['LabelingJobName'] as String,
      labelingJobStatus:
          (json['LabelingJobStatus'] as String).toLabelingJobStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputConfig: LabelingJobOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      failureReason: json['FailureReason'] as String?,
      labelAttributeName: json['LabelAttributeName'] as String?,
      labelCategoryConfigS3Uri: json['LabelCategoryConfigS3Uri'] as String?,
      labelingJobAlgorithmsConfig: json['LabelingJobAlgorithmsConfig'] != null
          ? LabelingJobAlgorithmsConfig.fromJson(
              json['LabelingJobAlgorithmsConfig'] as Map<String, dynamic>)
          : null,
      labelingJobOutput: json['LabelingJobOutput'] != null
          ? LabelingJobOutput.fromJson(
              json['LabelingJobOutput'] as Map<String, dynamic>)
          : null,
      stoppingConditions: json['StoppingConditions'] != null
          ? LabelingJobStoppingConditions.fromJson(
              json['StoppingConditions'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final humanTaskConfig = this.humanTaskConfig;
    final inputConfig = this.inputConfig;
    final jobReferenceCode = this.jobReferenceCode;
    final labelCounters = this.labelCounters;
    final labelingJobArn = this.labelingJobArn;
    final labelingJobName = this.labelingJobName;
    final labelingJobStatus = this.labelingJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final outputConfig = this.outputConfig;
    final roleArn = this.roleArn;
    final failureReason = this.failureReason;
    final labelAttributeName = this.labelAttributeName;
    final labelCategoryConfigS3Uri = this.labelCategoryConfigS3Uri;
    final labelingJobAlgorithmsConfig = this.labelingJobAlgorithmsConfig;
    final labelingJobOutput = this.labelingJobOutput;
    final stoppingConditions = this.stoppingConditions;
    final tags = this.tags;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HumanTaskConfig': humanTaskConfig,
      'InputConfig': inputConfig,
      'JobReferenceCode': jobReferenceCode,
      'LabelCounters': labelCounters,
      'LabelingJobArn': labelingJobArn,
      'LabelingJobName': labelingJobName,
      'LabelingJobStatus': labelingJobStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputConfig': outputConfig,
      'RoleArn': roleArn,
      if (failureReason != null) 'FailureReason': failureReason,
      if (labelAttributeName != null) 'LabelAttributeName': labelAttributeName,
      if (labelCategoryConfigS3Uri != null)
        'LabelCategoryConfigS3Uri': labelCategoryConfigS3Uri,
      if (labelingJobAlgorithmsConfig != null)
        'LabelingJobAlgorithmsConfig': labelingJobAlgorithmsConfig,
      if (labelingJobOutput != null) 'LabelingJobOutput': labelingJobOutput,
      if (stoppingConditions != null) 'StoppingConditions': stoppingConditions,
      if (tags != null) 'Tags': tags,
    };
  }
}

class DescribeModelBiasJobDefinitionResponse {
  /// The time at which the model bias job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model bias job.
  final String jobDefinitionArn;

  /// The name of the bias job definition. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// Configures the model bias job to run a specified Docker container image.
  final ModelBiasAppSpecification modelBiasAppSpecification;

  /// Inputs for the model bias job.
  final ModelBiasJobInput modelBiasJobInput;
  final MonitoringOutputConfig modelBiasJobOutputConfig;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) role that has read permission to the input data
  /// location and write permission to the output data location in Amazon S3.
  final String roleArn;

  /// The baseline configuration for a model bias job.
  final ModelBiasBaselineConfig? modelBiasBaselineConfig;

  /// Networking options for a model bias job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeModelBiasJobDefinitionResponse({
    required this.creationTime,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.modelBiasAppSpecification,
    required this.modelBiasJobInput,
    required this.modelBiasJobOutputConfig,
    required this.roleArn,
    this.modelBiasBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeModelBiasJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelBiasJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      modelBiasAppSpecification: ModelBiasAppSpecification.fromJson(
          json['ModelBiasAppSpecification'] as Map<String, dynamic>),
      modelBiasJobInput: ModelBiasJobInput.fromJson(
          json['ModelBiasJobInput'] as Map<String, dynamic>),
      modelBiasJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['ModelBiasJobOutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      modelBiasBaselineConfig: json['ModelBiasBaselineConfig'] != null
          ? ModelBiasBaselineConfig.fromJson(
              json['ModelBiasBaselineConfig'] as Map<String, dynamic>)
          : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final modelBiasAppSpecification = this.modelBiasAppSpecification;
    final modelBiasJobInput = this.modelBiasJobInput;
    final modelBiasJobOutputConfig = this.modelBiasJobOutputConfig;
    final roleArn = this.roleArn;
    final modelBiasBaselineConfig = this.modelBiasBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'ModelBiasAppSpecification': modelBiasAppSpecification,
      'ModelBiasJobInput': modelBiasJobInput,
      'ModelBiasJobOutputConfig': modelBiasJobOutputConfig,
      'RoleArn': roleArn,
      if (modelBiasBaselineConfig != null)
        'ModelBiasBaselineConfig': modelBiasBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeModelExplainabilityJobDefinitionResponse {
  /// The time at which the model explainability job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model explainability job.
  final String jobDefinitionArn;

  /// The name of the explainability job definition. The name must be unique
  /// within an Amazon Web Services Region in the Amazon Web Services account.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// Configures the model explainability job to run a specified Docker container
  /// image.
  final ModelExplainabilityAppSpecification modelExplainabilityAppSpecification;

  /// Inputs for the model explainability job.
  final ModelExplainabilityJobInput modelExplainabilityJobInput;
  final MonitoringOutputConfig modelExplainabilityJobOutputConfig;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) role that has read permission to the input data
  /// location and write permission to the output data location in Amazon S3.
  final String roleArn;

  /// The baseline configuration for a model explainability job.
  final ModelExplainabilityBaselineConfig? modelExplainabilityBaselineConfig;

  /// Networking options for a model explainability job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeModelExplainabilityJobDefinitionResponse({
    required this.creationTime,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.modelExplainabilityAppSpecification,
    required this.modelExplainabilityJobInput,
    required this.modelExplainabilityJobOutputConfig,
    required this.roleArn,
    this.modelExplainabilityBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeModelExplainabilityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelExplainabilityJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      modelExplainabilityAppSpecification:
          ModelExplainabilityAppSpecification.fromJson(
              json['ModelExplainabilityAppSpecification']
                  as Map<String, dynamic>),
      modelExplainabilityJobInput: ModelExplainabilityJobInput.fromJson(
          json['ModelExplainabilityJobInput'] as Map<String, dynamic>),
      modelExplainabilityJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['ModelExplainabilityJobOutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      modelExplainabilityBaselineConfig:
          json['ModelExplainabilityBaselineConfig'] != null
              ? ModelExplainabilityBaselineConfig.fromJson(
                  json['ModelExplainabilityBaselineConfig']
                      as Map<String, dynamic>)
              : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final modelExplainabilityAppSpecification =
        this.modelExplainabilityAppSpecification;
    final modelExplainabilityJobInput = this.modelExplainabilityJobInput;
    final modelExplainabilityJobOutputConfig =
        this.modelExplainabilityJobOutputConfig;
    final roleArn = this.roleArn;
    final modelExplainabilityBaselineConfig =
        this.modelExplainabilityBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'ModelExplainabilityAppSpecification':
          modelExplainabilityAppSpecification,
      'ModelExplainabilityJobInput': modelExplainabilityJobInput,
      'ModelExplainabilityJobOutputConfig': modelExplainabilityJobOutputConfig,
      'RoleArn': roleArn,
      if (modelExplainabilityBaselineConfig != null)
        'ModelExplainabilityBaselineConfig': modelExplainabilityBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeModelOutput {
  /// A timestamp that shows when the model was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the IAM role that you specified for the
  /// model.
  final String executionRoleArn;

  /// The Amazon Resource Name (ARN) of the model.
  final String modelArn;

  /// Name of the Amazon SageMaker model.
  final String modelName;

  /// The containers in the inference pipeline.
  final List<ContainerDefinition>? containers;

  /// If <code>True</code>, no inbound or outbound network calls can be made to or
  /// from the model container.
  final bool? enableNetworkIsolation;

  /// Specifies details of how containers in a multi-container endpoint are
  /// called.
  final InferenceExecutionConfig? inferenceExecutionConfig;

  /// The location of the primary inference code, associated artifacts, and custom
  /// environment map that the inference code uses when it is deployed in
  /// production.
  final ContainerDefinition? primaryContainer;

  /// A <a>VpcConfig</a> object that specifies the VPC that this model has access
  /// to. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect
  /// Endpoints by Using an Amazon Virtual Private Cloud</a>
  final VpcConfig? vpcConfig;

  DescribeModelOutput({
    required this.creationTime,
    required this.executionRoleArn,
    required this.modelArn,
    required this.modelName,
    this.containers,
    this.enableNetworkIsolation,
    this.inferenceExecutionConfig,
    this.primaryContainer,
    this.vpcConfig,
  });

  factory DescribeModelOutput.fromJson(Map<String, dynamic> json) {
    return DescribeModelOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      executionRoleArn: json['ExecutionRoleArn'] as String,
      modelArn: json['ModelArn'] as String,
      modelName: json['ModelName'] as String,
      containers: (json['Containers'] as List?)
          ?.whereNotNull()
          .map((e) => ContainerDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      inferenceExecutionConfig: json['InferenceExecutionConfig'] != null
          ? InferenceExecutionConfig.fromJson(
              json['InferenceExecutionConfig'] as Map<String, dynamic>)
          : null,
      primaryContainer: json['PrimaryContainer'] != null
          ? ContainerDefinition.fromJson(
              json['PrimaryContainer'] as Map<String, dynamic>)
          : null,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final executionRoleArn = this.executionRoleArn;
    final modelArn = this.modelArn;
    final modelName = this.modelName;
    final containers = this.containers;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final inferenceExecutionConfig = this.inferenceExecutionConfig;
    final primaryContainer = this.primaryContainer;
    final vpcConfig = this.vpcConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ExecutionRoleArn': executionRoleArn,
      'ModelArn': modelArn,
      'ModelName': modelName,
      if (containers != null) 'Containers': containers,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (inferenceExecutionConfig != null)
        'InferenceExecutionConfig': inferenceExecutionConfig,
      if (primaryContainer != null) 'PrimaryContainer': primaryContainer,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeModelPackageGroupOutput {
  final UserContext createdBy;

  /// The time that the model group was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model group.
  final String modelPackageGroupArn;

  /// The name of the model group.
  final String modelPackageGroupName;

  /// The status of the model group.
  final ModelPackageGroupStatus modelPackageGroupStatus;

  /// A description of the model group.
  final String? modelPackageGroupDescription;

  DescribeModelPackageGroupOutput({
    required this.createdBy,
    required this.creationTime,
    required this.modelPackageGroupArn,
    required this.modelPackageGroupName,
    required this.modelPackageGroupStatus,
    this.modelPackageGroupDescription,
  });

  factory DescribeModelPackageGroupOutput.fromJson(Map<String, dynamic> json) {
    return DescribeModelPackageGroupOutput(
      createdBy:
          UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
      modelPackageGroupName: json['ModelPackageGroupName'] as String,
      modelPackageGroupStatus: (json['ModelPackageGroupStatus'] as String)
          .toModelPackageGroupStatus(),
      modelPackageGroupDescription:
          json['ModelPackageGroupDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final modelPackageGroupArn = this.modelPackageGroupArn;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageGroupStatus = this.modelPackageGroupStatus;
    final modelPackageGroupDescription = this.modelPackageGroupDescription;
    return {
      'CreatedBy': createdBy,
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageGroupArn': modelPackageGroupArn,
      'ModelPackageGroupName': modelPackageGroupName,
      'ModelPackageGroupStatus': modelPackageGroupStatus.toValue(),
      if (modelPackageGroupDescription != null)
        'ModelPackageGroupDescription': modelPackageGroupDescription,
    };
  }
}

class DescribeModelPackageOutput {
  /// A timestamp specifying when the model package was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model package.
  final String modelPackageArn;

  /// The name of the model package being described.
  final String modelPackageName;

  /// The current status of the model package.
  final ModelPackageStatus modelPackageStatus;

  /// Details about the current status of the model package.
  final ModelPackageStatusDetails modelPackageStatusDetails;

  /// A description provided for the model approval.
  final String? approvalDescription;

  /// Whether the model package is certified for listing on Amazon Web Services
  /// Marketplace.
  final bool? certifyForMarketplace;
  final UserContext? createdBy;

  /// Details about inference jobs that can be run with models based on this model
  /// package.
  final InferenceSpecification? inferenceSpecification;
  final UserContext? lastModifiedBy;

  /// The last time the model package was modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The approval status of the model package.
  final ModelApprovalStatus? modelApprovalStatus;

  /// Metrics for the model.
  final ModelMetrics? modelMetrics;

  /// A brief summary of the model package.
  final String? modelPackageDescription;

  /// If the model is a versioned model, the name of the model group that the
  /// versioned model belongs to.
  final String? modelPackageGroupName;

  /// The version of the model package.
  final int? modelPackageVersion;

  /// Details about the algorithm that was used to create the model package.
  final SourceAlgorithmSpecification? sourceAlgorithmSpecification;

  /// Configurations for one or more transform jobs that Amazon SageMaker runs to
  /// test the model package.
  final ModelPackageValidationSpecification? validationSpecification;

  DescribeModelPackageOutput({
    required this.creationTime,
    required this.modelPackageArn,
    required this.modelPackageName,
    required this.modelPackageStatus,
    required this.modelPackageStatusDetails,
    this.approvalDescription,
    this.certifyForMarketplace,
    this.createdBy,
    this.inferenceSpecification,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.modelApprovalStatus,
    this.modelMetrics,
    this.modelPackageDescription,
    this.modelPackageGroupName,
    this.modelPackageVersion,
    this.sourceAlgorithmSpecification,
    this.validationSpecification,
  });

  factory DescribeModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return DescribeModelPackageOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageArn: json['ModelPackageArn'] as String,
      modelPackageName: json['ModelPackageName'] as String,
      modelPackageStatus:
          (json['ModelPackageStatus'] as String).toModelPackageStatus(),
      modelPackageStatusDetails: ModelPackageStatusDetails.fromJson(
          json['ModelPackageStatusDetails'] as Map<String, dynamic>),
      approvalDescription: json['ApprovalDescription'] as String?,
      certifyForMarketplace: json['CertifyForMarketplace'] as bool?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      inferenceSpecification: json['InferenceSpecification'] != null
          ? InferenceSpecification.fromJson(
              json['InferenceSpecification'] as Map<String, dynamic>)
          : null,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      modelApprovalStatus:
          (json['ModelApprovalStatus'] as String?)?.toModelApprovalStatus(),
      modelMetrics: json['ModelMetrics'] != null
          ? ModelMetrics.fromJson(json['ModelMetrics'] as Map<String, dynamic>)
          : null,
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
      sourceAlgorithmSpecification: json['SourceAlgorithmSpecification'] != null
          ? SourceAlgorithmSpecification.fromJson(
              json['SourceAlgorithmSpecification'] as Map<String, dynamic>)
          : null,
      validationSpecification: json['ValidationSpecification'] != null
          ? ModelPackageValidationSpecification.fromJson(
              json['ValidationSpecification'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageName = this.modelPackageName;
    final modelPackageStatus = this.modelPackageStatus;
    final modelPackageStatusDetails = this.modelPackageStatusDetails;
    final approvalDescription = this.approvalDescription;
    final certifyForMarketplace = this.certifyForMarketplace;
    final createdBy = this.createdBy;
    final inferenceSpecification = this.inferenceSpecification;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelMetrics = this.modelMetrics;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageVersion = this.modelPackageVersion;
    final sourceAlgorithmSpecification = this.sourceAlgorithmSpecification;
    final validationSpecification = this.validationSpecification;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageArn': modelPackageArn,
      'ModelPackageName': modelPackageName,
      'ModelPackageStatus': modelPackageStatus.toValue(),
      'ModelPackageStatusDetails': modelPackageStatusDetails,
      if (approvalDescription != null)
        'ApprovalDescription': approvalDescription,
      if (certifyForMarketplace != null)
        'CertifyForMarketplace': certifyForMarketplace,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (inferenceSpecification != null)
        'InferenceSpecification': inferenceSpecification,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.toValue(),
      if (modelMetrics != null) 'ModelMetrics': modelMetrics,
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
      if (sourceAlgorithmSpecification != null)
        'SourceAlgorithmSpecification': sourceAlgorithmSpecification,
      if (validationSpecification != null)
        'ValidationSpecification': validationSpecification,
    };
  }
}

class DescribeModelQualityJobDefinitionResponse {
  /// The time at which the model quality job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model quality job.
  final String jobDefinitionArn;

  /// The name of the quality job definition. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// Configures the model quality job to run a specified Docker container image.
  final ModelQualityAppSpecification modelQualityAppSpecification;

  /// Inputs for the model quality job.
  final ModelQualityJobInput modelQualityJobInput;
  final MonitoringOutputConfig modelQualityJobOutputConfig;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String roleArn;

  /// The baseline configuration for a model quality job.
  final ModelQualityBaselineConfig? modelQualityBaselineConfig;

  /// Networking options for a model quality job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeModelQualityJobDefinitionResponse({
    required this.creationTime,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.modelQualityAppSpecification,
    required this.modelQualityJobInput,
    required this.modelQualityJobOutputConfig,
    required this.roleArn,
    this.modelQualityBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeModelQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelQualityJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      modelQualityAppSpecification: ModelQualityAppSpecification.fromJson(
          json['ModelQualityAppSpecification'] as Map<String, dynamic>),
      modelQualityJobInput: ModelQualityJobInput.fromJson(
          json['ModelQualityJobInput'] as Map<String, dynamic>),
      modelQualityJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['ModelQualityJobOutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      modelQualityBaselineConfig: json['ModelQualityBaselineConfig'] != null
          ? ModelQualityBaselineConfig.fromJson(
              json['ModelQualityBaselineConfig'] as Map<String, dynamic>)
          : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final modelQualityAppSpecification = this.modelQualityAppSpecification;
    final modelQualityJobInput = this.modelQualityJobInput;
    final modelQualityJobOutputConfig = this.modelQualityJobOutputConfig;
    final roleArn = this.roleArn;
    final modelQualityBaselineConfig = this.modelQualityBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'ModelQualityAppSpecification': modelQualityAppSpecification,
      'ModelQualityJobInput': modelQualityJobInput,
      'ModelQualityJobOutputConfig': modelQualityJobOutputConfig,
      'RoleArn': roleArn,
      if (modelQualityBaselineConfig != null)
        'ModelQualityBaselineConfig': modelQualityBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeMonitoringScheduleResponse {
  /// The time at which the monitoring job was created.
  final DateTime creationTime;

  /// The time at which the monitoring job was last modified.
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  /// The configuration object that specifies the monitoring schedule and defines
  /// the monitoring job.
  final MonitoringScheduleConfig monitoringScheduleConfig;

  /// Name of the monitoring schedule.
  final String monitoringScheduleName;

  /// The status of an monitoring job.
  final ScheduleStatus monitoringScheduleStatus;

  /// The name of the endpoint for the monitoring job.
  final String? endpointName;

  /// A string, up to one KB in size, that contains the reason a monitoring job
  /// failed, if it failed.
  final String? failureReason;

  /// Describes metadata on the last execution to run, if there was one.
  final MonitoringExecutionSummary? lastMonitoringExecutionSummary;

  /// The type of the monitoring job that this schedule runs. This is one of the
  /// following values.
  ///
  /// <ul>
  /// <li>
  /// <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring
  /// job.
  /// </li>
  /// <li>
  /// <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring
  /// job.
  /// </li>
  /// <li>
  /// <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.
  /// </li>
  /// <li>
  /// <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability
  /// monitoring job.
  /// </li>
  /// </ul>
  final MonitoringType? monitoringType;

  DescribeMonitoringScheduleResponse({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.monitoringScheduleArn,
    required this.monitoringScheduleConfig,
    required this.monitoringScheduleName,
    required this.monitoringScheduleStatus,
    this.endpointName,
    this.failureReason,
    this.lastMonitoringExecutionSummary,
    this.monitoringType,
  });

  factory DescribeMonitoringScheduleResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeMonitoringScheduleResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
      monitoringScheduleConfig: MonitoringScheduleConfig.fromJson(
          json['MonitoringScheduleConfig'] as Map<String, dynamic>),
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
      monitoringScheduleStatus:
          (json['MonitoringScheduleStatus'] as String).toScheduleStatus(),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastMonitoringExecutionSummary: json['LastMonitoringExecutionSummary'] !=
              null
          ? MonitoringExecutionSummary.fromJson(
              json['LastMonitoringExecutionSummary'] as Map<String, dynamic>)
          : null,
      monitoringType: (json['MonitoringType'] as String?)?.toMonitoringType(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleConfig = this.monitoringScheduleConfig;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final lastMonitoringExecutionSummary = this.lastMonitoringExecutionSummary;
    final monitoringType = this.monitoringType;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringScheduleArn': monitoringScheduleArn,
      'MonitoringScheduleConfig': monitoringScheduleConfig,
      'MonitoringScheduleName': monitoringScheduleName,
      'MonitoringScheduleStatus': monitoringScheduleStatus.toValue(),
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastMonitoringExecutionSummary != null)
        'LastMonitoringExecutionSummary': lastMonitoringExecutionSummary,
      if (monitoringType != null) 'MonitoringType': monitoringType.toValue(),
    };
  }
}

class DescribeNotebookInstanceLifecycleConfigOutput {
  /// A timestamp that tells when the lifecycle configuration was created.
  final DateTime? creationTime;

  /// A timestamp that tells when the lifecycle configuration was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lifecycle configuration.
  final String? notebookInstanceLifecycleConfigArn;

  /// The name of the lifecycle configuration.
  final String? notebookInstanceLifecycleConfigName;

  /// The shell script that runs only once, when you create a notebook instance.
  final List<NotebookInstanceLifecycleHook>? onCreate;

  /// The shell script that runs every time you start a notebook instance,
  /// including when you create the notebook instance.
  final List<NotebookInstanceLifecycleHook>? onStart;

  DescribeNotebookInstanceLifecycleConfigOutput({
    this.creationTime,
    this.lastModifiedTime,
    this.notebookInstanceLifecycleConfigArn,
    this.notebookInstanceLifecycleConfigName,
    this.onCreate,
    this.onStart,
  });

  factory DescribeNotebookInstanceLifecycleConfigOutput.fromJson(
      Map<String, dynamic> json) {
    return DescribeNotebookInstanceLifecycleConfigOutput(
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      notebookInstanceLifecycleConfigArn:
          json['NotebookInstanceLifecycleConfigArn'] as String?,
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String?,
      onCreate: (json['OnCreate'] as List?)
          ?.whereNotNull()
          .map((e) =>
              NotebookInstanceLifecycleHook.fromJson(e as Map<String, dynamic>))
          .toList(),
      onStart: (json['OnStart'] as List?)
          ?.whereNotNull()
          .map((e) =>
              NotebookInstanceLifecycleHook.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final notebookInstanceLifecycleConfigArn =
        this.notebookInstanceLifecycleConfigArn;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final onCreate = this.onCreate;
    final onStart = this.onStart;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (notebookInstanceLifecycleConfigArn != null)
        'NotebookInstanceLifecycleConfigArn':
            notebookInstanceLifecycleConfigArn,
      if (notebookInstanceLifecycleConfigName != null)
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      if (onCreate != null) 'OnCreate': onCreate,
      if (onStart != null) 'OnStart': onStart,
    };
  }
}

class DescribeNotebookInstanceOutput {
  /// A list of the Elastic Inference (EI) instance types associated with this
  /// notebook instance. Currently only one EI instance type can be associated
  /// with a notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
  /// Inference in Amazon SageMaker</a>.
  final List<NotebookInstanceAcceleratorType>? acceleratorTypes;

  /// An array of up to three Git repositories associated with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of your
  /// notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  final List<String>? additionalCodeRepositories;

  /// A timestamp. Use this parameter to return the time when the notebook
  /// instance was created
  final DateTime? creationTime;

  /// The Git repository associated with the notebook instance as its default code
  /// repository. This can be either the name of a Git repository stored as a
  /// resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open a
  /// notebook instance, it opens in the directory that contains this repository.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  final String? defaultCodeRepository;

  /// Describes whether Amazon SageMaker provides internet access to the notebook
  /// instance. If this value is set to <i>Disabled</i>, the notebook instance
  /// does not have internet access, and cannot connect to Amazon SageMaker
  /// training and endpoint services.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook
  /// Instances Are Internet-Enabled by Default</a>.
  final DirectInternetAccess? directInternetAccess;

  /// If status is <code>Failed</code>, the reason it failed.
  final String? failureReason;

  /// The type of ML compute instance running on the notebook instance.
  final InstanceType? instanceType;

  /// The Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data
  /// when storing it on the ML storage volume attached to the instance.
  final String? kmsKeyId;

  /// A timestamp. Use this parameter to retrieve the time when the notebook
  /// instance was last modified.
  final DateTime? lastModifiedTime;

  /// The network interface IDs that Amazon SageMaker created at the time of
  /// creating the instance.
  final String? networkInterfaceId;

  /// The Amazon Resource Name (ARN) of the notebook instance.
  final String? notebookInstanceArn;

  /// Returns the name of a notebook instance lifecycle configuration.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>
  final String? notebookInstanceLifecycleConfigName;

  /// The name of the Amazon SageMaker notebook instance.
  final String? notebookInstanceName;

  /// The status of the notebook instance.
  final NotebookInstanceStatus? notebookInstanceStatus;

  /// The Amazon Resource Name (ARN) of the IAM role associated with the instance.
  final String? roleArn;

  /// Whether root access is enabled or disabled for users of the notebook
  /// instance.
  /// <note>
  /// Lifecycle configurations need root access to be able to set up a notebook
  /// instance. Because of this, lifecycle configurations associated with a
  /// notebook instance always run with root access even if you disable root
  /// access for users.
  /// </note>
  final RootAccess? rootAccess;

  /// The IDs of the VPC security groups.
  final List<String>? securityGroups;

  /// The ID of the VPC subnet.
  final String? subnetId;

  /// The URL that you use to connect to the Jupyter notebook that is running in
  /// your notebook instance.
  final String? url;

  /// The size, in GB, of the ML storage volume attached to the notebook instance.
  final int? volumeSizeInGB;

  DescribeNotebookInstanceOutput({
    this.acceleratorTypes,
    this.additionalCodeRepositories,
    this.creationTime,
    this.defaultCodeRepository,
    this.directInternetAccess,
    this.failureReason,
    this.instanceType,
    this.kmsKeyId,
    this.lastModifiedTime,
    this.networkInterfaceId,
    this.notebookInstanceArn,
    this.notebookInstanceLifecycleConfigName,
    this.notebookInstanceName,
    this.notebookInstanceStatus,
    this.roleArn,
    this.rootAccess,
    this.securityGroups,
    this.subnetId,
    this.url,
    this.volumeSizeInGB,
  });

  factory DescribeNotebookInstanceOutput.fromJson(Map<String, dynamic> json) {
    return DescribeNotebookInstanceOutput(
      acceleratorTypes: (json['AcceleratorTypes'] as List?)
          ?.whereNotNull()
          .map((e) => (e as String).toNotebookInstanceAcceleratorType())
          .toList(),
      additionalCodeRepositories: (json['AdditionalCodeRepositories'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      creationTime: timeStampFromJson(json['CreationTime']),
      defaultCodeRepository: json['DefaultCodeRepository'] as String?,
      directInternetAccess:
          (json['DirectInternetAccess'] as String?)?.toDirectInternetAccess(),
      failureReason: json['FailureReason'] as String?,
      instanceType: (json['InstanceType'] as String?)?.toInstanceType(),
      kmsKeyId: json['KmsKeyId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      networkInterfaceId: json['NetworkInterfaceId'] as String?,
      notebookInstanceArn: json['NotebookInstanceArn'] as String?,
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String?,
      notebookInstanceName: json['NotebookInstanceName'] as String?,
      notebookInstanceStatus: (json['NotebookInstanceStatus'] as String?)
          ?.toNotebookInstanceStatus(),
      roleArn: json['RoleArn'] as String?,
      rootAccess: (json['RootAccess'] as String?)?.toRootAccess(),
      securityGroups: (json['SecurityGroups'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      subnetId: json['SubnetId'] as String?,
      url: json['Url'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final acceleratorTypes = this.acceleratorTypes;
    final additionalCodeRepositories = this.additionalCodeRepositories;
    final creationTime = this.creationTime;
    final defaultCodeRepository = this.defaultCodeRepository;
    final directInternetAccess = this.directInternetAccess;
    final failureReason = this.failureReason;
    final instanceType = this.instanceType;
    final kmsKeyId = this.kmsKeyId;
    final lastModifiedTime = this.lastModifiedTime;
    final networkInterfaceId = this.networkInterfaceId;
    final notebookInstanceArn = this.notebookInstanceArn;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final notebookInstanceName = this.notebookInstanceName;
    final notebookInstanceStatus = this.notebookInstanceStatus;
    final roleArn = this.roleArn;
    final rootAccess = this.rootAccess;
    final securityGroups = this.securityGroups;
    final subnetId = this.subnetId;
    final url = this.url;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      if (acceleratorTypes != null)
        'AcceleratorTypes': acceleratorTypes.map((e) => e.toValue()).toList(),
      if (additionalCodeRepositories != null)
        'AdditionalCodeRepositories': additionalCodeRepositories,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (defaultCodeRepository != null)
        'DefaultCodeRepository': defaultCodeRepository,
      if (directInternetAccess != null)
        'DirectInternetAccess': directInternetAccess.toValue(),
      if (failureReason != null) 'FailureReason': failureReason,
      if (instanceType != null) 'InstanceType': instanceType.toValue(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (networkInterfaceId != null) 'NetworkInterfaceId': networkInterfaceId,
      if (notebookInstanceArn != null)
        'NotebookInstanceArn': notebookInstanceArn,
      if (notebookInstanceLifecycleConfigName != null)
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      if (notebookInstanceName != null)
        'NotebookInstanceName': notebookInstanceName,
      if (notebookInstanceStatus != null)
        'NotebookInstanceStatus': notebookInstanceStatus.toValue(),
      if (roleArn != null) 'RoleArn': roleArn,
      if (rootAccess != null) 'RootAccess': rootAccess.toValue(),
      if (securityGroups != null) 'SecurityGroups': securityGroups,
      if (subnetId != null) 'SubnetId': subnetId,
      if (url != null) 'Url': url,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

class DescribePipelineDefinitionForExecutionResponse {
  /// The time when the pipeline was created.
  final DateTime? creationTime;

  /// The JSON pipeline definition.
  final String? pipelineDefinition;

  DescribePipelineDefinitionForExecutionResponse({
    this.creationTime,
    this.pipelineDefinition,
  });

  factory DescribePipelineDefinitionForExecutionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribePipelineDefinitionForExecutionResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      pipelineDefinition: json['PipelineDefinition'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final pipelineDefinition = this.pipelineDefinition;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (pipelineDefinition != null) 'PipelineDefinition': pipelineDefinition,
    };
  }
}

class DescribePipelineExecutionResponse {
  final UserContext? createdBy;

  /// The time when the pipeline execution was created.
  final DateTime? creationTime;

  /// If the execution failed, a message describing why.
  final String? failureReason;
  final UserContext? lastModifiedBy;

  /// The time when the pipeline execution was modified last.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  /// The description of the pipeline execution.
  final String? pipelineExecutionDescription;

  /// The display name of the pipeline execution.
  final String? pipelineExecutionDisplayName;

  /// The status of the pipeline execution.
  final PipelineExecutionStatus? pipelineExecutionStatus;
  final PipelineExperimentConfig? pipelineExperimentConfig;

  DescribePipelineExecutionResponse({
    this.createdBy,
    this.creationTime,
    this.failureReason,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.pipelineArn,
    this.pipelineExecutionArn,
    this.pipelineExecutionDescription,
    this.pipelineExecutionDisplayName,
    this.pipelineExecutionStatus,
    this.pipelineExperimentConfig,
  });

  factory DescribePipelineExecutionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribePipelineExecutionResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      pipelineArn: json['PipelineArn'] as String?,
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
      pipelineExecutionDescription:
          json['PipelineExecutionDescription'] as String?,
      pipelineExecutionDisplayName:
          json['PipelineExecutionDisplayName'] as String?,
      pipelineExecutionStatus: (json['PipelineExecutionStatus'] as String?)
          ?.toPipelineExecutionStatus(),
      pipelineExperimentConfig: json['PipelineExperimentConfig'] != null
          ? PipelineExperimentConfig.fromJson(
              json['PipelineExperimentConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final pipelineArn = this.pipelineArn;
    final pipelineExecutionArn = this.pipelineExecutionArn;
    final pipelineExecutionDescription = this.pipelineExecutionDescription;
    final pipelineExecutionDisplayName = this.pipelineExecutionDisplayName;
    final pipelineExecutionStatus = this.pipelineExecutionStatus;
    final pipelineExperimentConfig = this.pipelineExperimentConfig;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
      if (pipelineExecutionDescription != null)
        'PipelineExecutionDescription': pipelineExecutionDescription,
      if (pipelineExecutionDisplayName != null)
        'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      if (pipelineExecutionStatus != null)
        'PipelineExecutionStatus': pipelineExecutionStatus.toValue(),
      if (pipelineExperimentConfig != null)
        'PipelineExperimentConfig': pipelineExperimentConfig,
    };
  }
}

class DescribePipelineResponse {
  final UserContext? createdBy;

  /// The time when the pipeline was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// The time when the pipeline was last modified.
  final DateTime? lastModifiedTime;

  /// The time when the pipeline was last run.
  final DateTime? lastRunTime;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The JSON pipeline definition.
  final String? pipelineDefinition;

  /// The description of the pipeline.
  final String? pipelineDescription;

  /// The display name of the pipeline.
  final String? pipelineDisplayName;

  /// The name of the pipeline.
  final String? pipelineName;

  /// The status of the pipeline execution.
  final PipelineStatus? pipelineStatus;

  /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
  final String? roleArn;

  DescribePipelineResponse({
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lastRunTime,
    this.pipelineArn,
    this.pipelineDefinition,
    this.pipelineDescription,
    this.pipelineDisplayName,
    this.pipelineName,
    this.pipelineStatus,
    this.roleArn,
  });

  factory DescribePipelineResponse.fromJson(Map<String, dynamic> json) {
    return DescribePipelineResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastRunTime: timeStampFromJson(json['LastRunTime']),
      pipelineArn: json['PipelineArn'] as String?,
      pipelineDefinition: json['PipelineDefinition'] as String?,
      pipelineDescription: json['PipelineDescription'] as String?,
      pipelineDisplayName: json['PipelineDisplayName'] as String?,
      pipelineName: json['PipelineName'] as String?,
      pipelineStatus: (json['PipelineStatus'] as String?)?.toPipelineStatus(),
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lastRunTime = this.lastRunTime;
    final pipelineArn = this.pipelineArn;
    final pipelineDefinition = this.pipelineDefinition;
    final pipelineDescription = this.pipelineDescription;
    final pipelineDisplayName = this.pipelineDisplayName;
    final pipelineName = this.pipelineName;
    final pipelineStatus = this.pipelineStatus;
    final roleArn = this.roleArn;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastRunTime != null) 'LastRunTime': unixTimestampToJson(lastRunTime),
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineDefinition != null) 'PipelineDefinition': pipelineDefinition,
      if (pipelineDescription != null)
        'PipelineDescription': pipelineDescription,
      if (pipelineDisplayName != null)
        'PipelineDisplayName': pipelineDisplayName,
      if (pipelineName != null) 'PipelineName': pipelineName,
      if (pipelineStatus != null) 'PipelineStatus': pipelineStatus.toValue(),
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeProcessingJobResponse {
  /// Configures the processing job to run a specified container image.
  final AppSpecification appSpecification;

  /// The time at which the processing job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the processing job.
  final String processingJobArn;

  /// The name of the processing job. The name must be unique within an Amazon Web
  /// Services Region in the Amazon Web Services account.
  final String processingJobName;

  /// Provides the status of a processing job.
  final ProcessingJobStatus processingJobStatus;

  /// Identifies the resources, ML compute instances, and ML storage volumes to
  /// deploy for a processing job. In distributed training, you specify more than
  /// one instance.
  final ProcessingResources processingResources;

  /// The ARN of an AutoML job associated with this processing job.
  final String? autoMLJobArn;

  /// The environment variables set in the Docker container.
  final Map<String, String>? environment;

  /// An optional string, up to one KB in size, that contains metadata from the
  /// processing container when the processing job exits.
  final String? exitMessage;

  /// The configuration information used to create an experiment.
  final ExperimentConfig? experimentConfig;

  /// A string, up to one KB in size, that contains the reason a processing job
  /// failed, if it failed.
  final String? failureReason;

  /// The time at which the processing job was last modified.
  final DateTime? lastModifiedTime;

  /// The ARN of a monitoring schedule for an endpoint associated with this
  /// processing job.
  final String? monitoringScheduleArn;

  /// Networking options for a processing job.
  final NetworkConfig? networkConfig;

  /// The time at which the processing job completed.
  final DateTime? processingEndTime;

  /// The inputs for a processing job.
  final List<ProcessingInput>? processingInputs;

  /// Output configuration for the processing job.
  final ProcessingOutputConfig? processingOutputConfig;

  /// The time at which the processing job started.
  final DateTime? processingStartTime;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String? roleArn;

  /// The time limit for how long the processing job is allowed to run.
  final ProcessingStoppingCondition? stoppingCondition;

  /// The ARN of a training job associated with this processing job.
  final String? trainingJobArn;

  DescribeProcessingJobResponse({
    required this.appSpecification,
    required this.creationTime,
    required this.processingJobArn,
    required this.processingJobName,
    required this.processingJobStatus,
    required this.processingResources,
    this.autoMLJobArn,
    this.environment,
    this.exitMessage,
    this.experimentConfig,
    this.failureReason,
    this.lastModifiedTime,
    this.monitoringScheduleArn,
    this.networkConfig,
    this.processingEndTime,
    this.processingInputs,
    this.processingOutputConfig,
    this.processingStartTime,
    this.roleArn,
    this.stoppingCondition,
    this.trainingJobArn,
  });

  factory DescribeProcessingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeProcessingJobResponse(
      appSpecification: AppSpecification.fromJson(
          json['AppSpecification'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      processingJobArn: json['ProcessingJobArn'] as String,
      processingJobName: json['ProcessingJobName'] as String,
      processingJobStatus:
          (json['ProcessingJobStatus'] as String).toProcessingJobStatus(),
      processingResources: ProcessingResources.fromJson(
          json['ProcessingResources'] as Map<String, dynamic>),
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      exitMessage: json['ExitMessage'] as String?,
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      networkConfig: json['NetworkConfig'] != null
          ? NetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      processingEndTime: timeStampFromJson(json['ProcessingEndTime']),
      processingInputs: (json['ProcessingInputs'] as List?)
          ?.whereNotNull()
          .map((e) => ProcessingInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      processingOutputConfig: json['ProcessingOutputConfig'] != null
          ? ProcessingOutputConfig.fromJson(
              json['ProcessingOutputConfig'] as Map<String, dynamic>)
          : null,
      processingStartTime: timeStampFromJson(json['ProcessingStartTime']),
      roleArn: json['RoleArn'] as String?,
      stoppingCondition: json['StoppingCondition'] != null
          ? ProcessingStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
      trainingJobArn: json['TrainingJobArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appSpecification = this.appSpecification;
    final creationTime = this.creationTime;
    final processingJobArn = this.processingJobArn;
    final processingJobName = this.processingJobName;
    final processingJobStatus = this.processingJobStatus;
    final processingResources = this.processingResources;
    final autoMLJobArn = this.autoMLJobArn;
    final environment = this.environment;
    final exitMessage = this.exitMessage;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final networkConfig = this.networkConfig;
    final processingEndTime = this.processingEndTime;
    final processingInputs = this.processingInputs;
    final processingOutputConfig = this.processingOutputConfig;
    final processingStartTime = this.processingStartTime;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final trainingJobArn = this.trainingJobArn;
    return {
      'AppSpecification': appSpecification,
      'CreationTime': unixTimestampToJson(creationTime),
      'ProcessingJobArn': processingJobArn,
      'ProcessingJobName': processingJobName,
      'ProcessingJobStatus': processingJobStatus.toValue(),
      'ProcessingResources': processingResources,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (environment != null) 'Environment': environment,
      if (exitMessage != null) 'ExitMessage': exitMessage,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (processingEndTime != null)
        'ProcessingEndTime': unixTimestampToJson(processingEndTime),
      if (processingInputs != null) 'ProcessingInputs': processingInputs,
      if (processingOutputConfig != null)
        'ProcessingOutputConfig': processingOutputConfig,
      if (processingStartTime != null)
        'ProcessingStartTime': unixTimestampToJson(processingStartTime),
      if (roleArn != null) 'RoleArn': roleArn,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
      if (trainingJobArn != null) 'TrainingJobArn': trainingJobArn,
    };
  }
}

class DescribeProjectOutput {
  /// The time when the project was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  /// The ID of the project.
  final String projectId;

  /// The name of the project.
  final String projectName;

  /// The status of the project.
  final ProjectStatus projectStatus;

  /// Information used to provision a service catalog product. For information,
  /// see <a
  /// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
  /// is Amazon Web Services Service Catalog</a>.
  final ServiceCatalogProvisioningDetails serviceCatalogProvisioningDetails;
  final UserContext? createdBy;

  /// The description of the project.
  final String? projectDescription;

  /// Information about a provisioned service catalog product.
  final ServiceCatalogProvisionedProductDetails?
      serviceCatalogProvisionedProductDetails;

  DescribeProjectOutput({
    required this.creationTime,
    required this.projectArn,
    required this.projectId,
    required this.projectName,
    required this.projectStatus,
    required this.serviceCatalogProvisioningDetails,
    this.createdBy,
    this.projectDescription,
    this.serviceCatalogProvisionedProductDetails,
  });

  factory DescribeProjectOutput.fromJson(Map<String, dynamic> json) {
    return DescribeProjectOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      projectArn: json['ProjectArn'] as String,
      projectId: json['ProjectId'] as String,
      projectName: json['ProjectName'] as String,
      projectStatus: (json['ProjectStatus'] as String).toProjectStatus(),
      serviceCatalogProvisioningDetails:
          ServiceCatalogProvisioningDetails.fromJson(
              json['ServiceCatalogProvisioningDetails']
                  as Map<String, dynamic>),
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      projectDescription: json['ProjectDescription'] as String?,
      serviceCatalogProvisionedProductDetails:
          json['ServiceCatalogProvisionedProductDetails'] != null
              ? ServiceCatalogProvisionedProductDetails.fromJson(
                  json['ServiceCatalogProvisionedProductDetails']
                      as Map<String, dynamic>)
              : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final projectArn = this.projectArn;
    final projectId = this.projectId;
    final projectName = this.projectName;
    final projectStatus = this.projectStatus;
    final serviceCatalogProvisioningDetails =
        this.serviceCatalogProvisioningDetails;
    final createdBy = this.createdBy;
    final projectDescription = this.projectDescription;
    final serviceCatalogProvisionedProductDetails =
        this.serviceCatalogProvisionedProductDetails;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ProjectArn': projectArn,
      'ProjectId': projectId,
      'ProjectName': projectName,
      'ProjectStatus': projectStatus.toValue(),
      'ServiceCatalogProvisioningDetails': serviceCatalogProvisioningDetails,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (projectDescription != null) 'ProjectDescription': projectDescription,
      if (serviceCatalogProvisionedProductDetails != null)
        'ServiceCatalogProvisionedProductDetails':
            serviceCatalogProvisionedProductDetails,
    };
  }
}

class DescribeSubscribedWorkteamResponse {
  /// A <code>Workteam</code> instance that contains information about the work
  /// team.
  final SubscribedWorkteam subscribedWorkteam;

  DescribeSubscribedWorkteamResponse({
    required this.subscribedWorkteam,
  });

  factory DescribeSubscribedWorkteamResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeSubscribedWorkteamResponse(
      subscribedWorkteam: SubscribedWorkteam.fromJson(
          json['SubscribedWorkteam'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final subscribedWorkteam = this.subscribedWorkteam;
    return {
      'SubscribedWorkteam': subscribedWorkteam,
    };
  }
}

class DescribeTrainingJobResponse {
  /// Information about the algorithm used for training, and algorithm metadata.
  final AlgorithmSpecification algorithmSpecification;

  /// A timestamp that indicates when the training job was created.
  final DateTime creationTime;

  /// Information about the Amazon S3 location that is configured for storing
  /// model artifacts.
  final ModelArtifacts modelArtifacts;

  /// Resources, including ML compute instances and ML storage volumes, that are
  /// configured for model training.
  final ResourceConfig resourceConfig;

  /// Provides detailed information about the state of the training job. For
  /// detailed information on the secondary status of the training job, see
  /// <code>StatusMessage</code> under <a>SecondaryStatusTransition</a>.
  ///
  /// Amazon SageMaker provides primary statuses and secondary statuses that apply
  /// to each of them:
  /// <dl> <dt>InProgress</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Starting</code> - Starting the training job.
  /// </li>
  /// <li>
  /// <code>Downloading</code> - An optional stage for algorithms that support
  /// <code>File</code> training input mode. It indicates that data is being
  /// downloaded to the ML storage volumes.
  /// </li>
  /// <li>
  /// <code>Training</code> - Training is in progress.
  /// </li>
  /// <li>
  /// <code>Interrupted</code> - The job stopped because the managed spot training
  /// instances were interrupted.
  /// </li>
  /// <li>
  /// <code>Uploading</code> - Training is complete and the model artifacts are
  /// being uploaded to the S3 location.
  /// </li>
  /// </ul> </dd> <dt>Completed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// </ul> </dd> <dt>Failed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Failed</code> - The training job has failed. The reason for the
  /// failure is returned in the <code>FailureReason</code> field of
  /// <code>DescribeTrainingJobResponse</code>.
  /// </li>
  /// </ul> </dd> <dt>Stopped</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>MaxRuntimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed runtime.
  /// </li>
  /// <li>
  /// <code>MaxWaitTimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed wait time.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul> </dd> <dt>Stopping</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Stopping</code> - Stopping the training job.
  /// </li>
  /// </ul> </dd> </dl> <important>
  /// Valid values for <code>SecondaryStatus</code> are subject to change.
  /// </important>
  /// We no longer support the following secondary statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>LaunchingMLInstances</code>
  /// </li>
  /// <li>
  /// <code>PreparingTraining</code>
  /// </li>
  /// <li>
  /// <code>DownloadingTrainingImage</code>
  /// </li>
  /// </ul>
  final SecondaryStatus secondaryStatus;

  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the job
  /// reaches the time limit, Amazon SageMaker ends the training job. Use this API
  /// to cap model training costs.
  ///
  /// To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code>
  /// signal, which delays job termination for 120 seconds. Algorithms can use
  /// this 120-second window to save the model artifacts, so the results of
  /// training are not lost.
  final StoppingCondition stoppingCondition;

  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  /// Name of the model training job.
  final String trainingJobName;

  /// The status of the training job.
  ///
  /// Amazon SageMaker provides the following training job statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code> - The training is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// <li>
  /// <code>Failed</code> - The training job has failed. To see the reason for the
  /// failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeTrainingJobResponse</code> call.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - The training job is stopping.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul>
  /// For more detailed information, see <code>SecondaryStatus</code>.
  final TrainingJobStatus trainingJobStatus;

  /// The Amazon Resource Name (ARN) of an AutoML job.
  final String? autoMLJobArn;

  /// The billable time in seconds. Billable time refers to the absolute
  /// wall-clock time.
  ///
  /// Multiply <code>BillableTimeInSeconds</code> by the number of instances
  /// (<code>InstanceCount</code>) in your training cluster to get the total
  /// compute time Amazon SageMaker will bill you if you run distributed training.
  /// The formula is as follows: <code>BillableTimeInSeconds *
  /// InstanceCount</code> .
  ///
  /// You can calculate the savings from using managed spot training using the
  /// formula <code>(1 - BillableTimeInSeconds / TrainingTimeInSeconds) *
  /// 100</code>. For example, if <code>BillableTimeInSeconds</code> is 100 and
  /// <code>TrainingTimeInSeconds</code> is 500, the savings is 80%.
  final int? billableTimeInSeconds;
  final CheckpointConfig? checkpointConfig;
  final DebugHookConfig? debugHookConfig;

  /// Configuration information for Debugger rules for debugging output tensors.
  final List<DebugRuleConfiguration>? debugRuleConfigurations;

  /// Evaluation status of Debugger rules for debugging on a training job.
  final List<DebugRuleEvaluationStatus>? debugRuleEvaluationStatuses;

  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security for
  /// distributed training, but training might take longer. How long it takes
  /// depends on the amount of communication between compute instances, especially
  /// if you use a deep learning algorithms in distributed training.
  final bool? enableInterContainerTrafficEncryption;

  /// A Boolean indicating whether managed spot training is enabled
  /// (<code>True</code>) or not (<code>False</code>).
  final bool? enableManagedSpotTraining;

  /// If you want to allow inbound or outbound network calls, except for calls
  /// between peers within a training cluster for distributed training, choose
  /// <code>True</code>. If you enable network isolation for training jobs that
  /// are configured to use a VPC, Amazon SageMaker downloads and uploads customer
  /// data and model artifacts through the specified VPC, but the training
  /// container does not have network access.
  final bool? enableNetworkIsolation;

  /// The environment variables to set in the Docker container.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the training job failed, the reason it failed.
  final String? failureReason;

  /// A collection of <code>MetricData</code> objects that specify the names,
  /// values, and dates and times that the training algorithm emitted to Amazon
  /// CloudWatch.
  final List<MetricData>? finalMetricDataList;

  /// Algorithm-specific parameters.
  final Map<String, String>? hyperParameters;

  /// An array of <code>Channel</code> objects that describes each data input
  /// channel.
  final List<Channel>? inputDataConfig;

  /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling
  /// job that created the transform or training job.
  final String? labelingJobArn;

  /// A timestamp that indicates when the status of the training job was last
  /// modified.
  final DateTime? lastModifiedTime;

  /// The S3 path where model artifacts that you configured when creating the job
  /// are stored. Amazon SageMaker creates subfolders for model artifacts.
  final OutputDataConfig? outputDataConfig;
  final ProfilerConfig? profilerConfig;

  /// Configuration information for Debugger rules for profiling system and
  /// framework metrics.
  final List<ProfilerRuleConfiguration>? profilerRuleConfigurations;

  /// Evaluation status of Debugger rules for profiling on a training job.
  final List<ProfilerRuleEvaluationStatus>? profilerRuleEvaluationStatuses;

  /// Profiling status of a training job.
  final ProfilingStatus? profilingStatus;

  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  final RetryStrategy? retryStrategy;

  /// The Amazon Web Services Identity and Access Management (IAM) role configured
  /// for the training job.
  final String? roleArn;

  /// A history of all of the secondary statuses that the training job has
  /// transitioned through.
  final List<SecondaryStatusTransition>? secondaryStatusTransitions;
  final TensorBoardOutputConfig? tensorBoardOutputConfig;

  /// Indicates the time when the training job ends on training instances. You are
  /// billed for the time interval between the value of
  /// <code>TrainingStartTime</code> and this time. For successful jobs and
  /// stopped jobs, this is the time after model artifacts are uploaded. For
  /// failed jobs, this is the time when Amazon SageMaker detects a job failure.
  final DateTime? trainingEndTime;

  /// Indicates the time when the training job starts on training instances. You
  /// are billed for the time interval between this time and the value of
  /// <code>TrainingEndTime</code>. The start time in CloudWatch Logs might be
  /// later than this time. The difference is due to the time it takes to download
  /// the training data and to the size of the training container.
  final DateTime? trainingStartTime;

  /// The training time in seconds.
  final int? trainingTimeInSeconds;

  /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job
  /// if the training job was launched by a hyperparameter tuning job.
  final String? tuningJobArn;

  /// A <a>VpcConfig</a> object that specifies the VPC that this training job has
  /// access to. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  final VpcConfig? vpcConfig;

  DescribeTrainingJobResponse({
    required this.algorithmSpecification,
    required this.creationTime,
    required this.modelArtifacts,
    required this.resourceConfig,
    required this.secondaryStatus,
    required this.stoppingCondition,
    required this.trainingJobArn,
    required this.trainingJobName,
    required this.trainingJobStatus,
    this.autoMLJobArn,
    this.billableTimeInSeconds,
    this.checkpointConfig,
    this.debugHookConfig,
    this.debugRuleConfigurations,
    this.debugRuleEvaluationStatuses,
    this.enableInterContainerTrafficEncryption,
    this.enableManagedSpotTraining,
    this.enableNetworkIsolation,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.finalMetricDataList,
    this.hyperParameters,
    this.inputDataConfig,
    this.labelingJobArn,
    this.lastModifiedTime,
    this.outputDataConfig,
    this.profilerConfig,
    this.profilerRuleConfigurations,
    this.profilerRuleEvaluationStatuses,
    this.profilingStatus,
    this.retryStrategy,
    this.roleArn,
    this.secondaryStatusTransitions,
    this.tensorBoardOutputConfig,
    this.trainingEndTime,
    this.trainingStartTime,
    this.trainingTimeInSeconds,
    this.tuningJobArn,
    this.vpcConfig,
  });

  factory DescribeTrainingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTrainingJobResponse(
      algorithmSpecification: AlgorithmSpecification.fromJson(
          json['AlgorithmSpecification'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelArtifacts: ModelArtifacts.fromJson(
          json['ModelArtifacts'] as Map<String, dynamic>),
      resourceConfig: ResourceConfig.fromJson(
          json['ResourceConfig'] as Map<String, dynamic>),
      secondaryStatus: (json['SecondaryStatus'] as String).toSecondaryStatus(),
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      trainingJobArn: json['TrainingJobArn'] as String,
      trainingJobName: json['TrainingJobName'] as String,
      trainingJobStatus:
          (json['TrainingJobStatus'] as String).toTrainingJobStatus(),
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      billableTimeInSeconds: json['BillableTimeInSeconds'] as int?,
      checkpointConfig: json['CheckpointConfig'] != null
          ? CheckpointConfig.fromJson(
              json['CheckpointConfig'] as Map<String, dynamic>)
          : null,
      debugHookConfig: json['DebugHookConfig'] != null
          ? DebugHookConfig.fromJson(
              json['DebugHookConfig'] as Map<String, dynamic>)
          : null,
      debugRuleConfigurations: (json['DebugRuleConfigurations'] as List?)
          ?.whereNotNull()
          .map(
              (e) => DebugRuleConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      debugRuleEvaluationStatuses:
          (json['DebugRuleEvaluationStatuses'] as List?)
              ?.whereNotNull()
              .map((e) =>
                  DebugRuleEvaluationStatus.fromJson(e as Map<String, dynamic>))
              .toList(),
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableManagedSpotTraining: json['EnableManagedSpotTraining'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      finalMetricDataList: (json['FinalMetricDataList'] as List?)
          ?.whereNotNull()
          .map((e) => MetricData.fromJson(e as Map<String, dynamic>))
          .toList(),
      hyperParameters: (json['HyperParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      inputDataConfig: (json['InputDataConfig'] as List?)
          ?.whereNotNull()
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      labelingJobArn: json['LabelingJobArn'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      outputDataConfig: json['OutputDataConfig'] != null
          ? OutputDataConfig.fromJson(
              json['OutputDataConfig'] as Map<String, dynamic>)
          : null,
      profilerConfig: json['ProfilerConfig'] != null
          ? ProfilerConfig.fromJson(
              json['ProfilerConfig'] as Map<String, dynamic>)
          : null,
      profilerRuleConfigurations: (json['ProfilerRuleConfigurations'] as List?)
          ?.whereNotNull()
          .map((e) =>
              ProfilerRuleConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      profilerRuleEvaluationStatuses: (json['ProfilerRuleEvaluationStatuses']
              as List?)
          ?.whereNotNull()
          .map((e) =>
              ProfilerRuleEvaluationStatus.fromJson(e as Map<String, dynamic>))
          .toList(),
      profilingStatus:
          (json['ProfilingStatus'] as String?)?.toProfilingStatus(),
      retryStrategy: json['RetryStrategy'] != null
          ? RetryStrategy.fromJson(
              json['RetryStrategy'] as Map<String, dynamic>)
          : null,
      roleArn: json['RoleArn'] as String?,
      secondaryStatusTransitions: (json['SecondaryStatusTransitions'] as List?)
          ?.whereNotNull()
          .map((e) =>
              SecondaryStatusTransition.fromJson(e as Map<String, dynamic>))
          .toList(),
      tensorBoardOutputConfig: json['TensorBoardOutputConfig'] != null
          ? TensorBoardOutputConfig.fromJson(
              json['TensorBoardOutputConfig'] as Map<String, dynamic>)
          : null,
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      trainingStartTime: timeStampFromJson(json['TrainingStartTime']),
      trainingTimeInSeconds: json['TrainingTimeInSeconds'] as int?,
      tuningJobArn: json['TuningJobArn'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSpecification = this.algorithmSpecification;
    final creationTime = this.creationTime;
    final modelArtifacts = this.modelArtifacts;
    final resourceConfig = this.resourceConfig;
    final secondaryStatus = this.secondaryStatus;
    final stoppingCondition = this.stoppingCondition;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final autoMLJobArn = this.autoMLJobArn;
    final billableTimeInSeconds = this.billableTimeInSeconds;
    final checkpointConfig = this.checkpointConfig;
    final debugHookConfig = this.debugHookConfig;
    final debugRuleConfigurations = this.debugRuleConfigurations;
    final debugRuleEvaluationStatuses = this.debugRuleEvaluationStatuses;
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableManagedSpotTraining = this.enableManagedSpotTraining;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final finalMetricDataList = this.finalMetricDataList;
    final hyperParameters = this.hyperParameters;
    final inputDataConfig = this.inputDataConfig;
    final labelingJobArn = this.labelingJobArn;
    final lastModifiedTime = this.lastModifiedTime;
    final outputDataConfig = this.outputDataConfig;
    final profilerConfig = this.profilerConfig;
    final profilerRuleConfigurations = this.profilerRuleConfigurations;
    final profilerRuleEvaluationStatuses = this.profilerRuleEvaluationStatuses;
    final profilingStatus = this.profilingStatus;
    final retryStrategy = this.retryStrategy;
    final roleArn = this.roleArn;
    final secondaryStatusTransitions = this.secondaryStatusTransitions;
    final tensorBoardOutputConfig = this.tensorBoardOutputConfig;
    final trainingEndTime = this.trainingEndTime;
    final trainingStartTime = this.trainingStartTime;
    final trainingTimeInSeconds = this.trainingTimeInSeconds;
    final tuningJobArn = this.tuningJobArn;
    final vpcConfig = this.vpcConfig;
    return {
      'AlgorithmSpecification': algorithmSpecification,
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelArtifacts': modelArtifacts,
      'ResourceConfig': resourceConfig,
      'SecondaryStatus': secondaryStatus.toValue(),
      'StoppingCondition': stoppingCondition,
      'TrainingJobArn': trainingJobArn,
      'TrainingJobName': trainingJobName,
      'TrainingJobStatus': trainingJobStatus.toValue(),
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (billableTimeInSeconds != null)
        'BillableTimeInSeconds': billableTimeInSeconds,
      if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
      if (debugHookConfig != null) 'DebugHookConfig': debugHookConfig,
      if (debugRuleConfigurations != null)
        'DebugRuleConfigurations': debugRuleConfigurations,
      if (debugRuleEvaluationStatuses != null)
        'DebugRuleEvaluationStatuses': debugRuleEvaluationStatuses,
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableManagedSpotTraining != null)
        'EnableManagedSpotTraining': enableManagedSpotTraining,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalMetricDataList != null)
        'FinalMetricDataList': finalMetricDataList,
      if (hyperParameters != null) 'HyperParameters': hyperParameters,
      if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (outputDataConfig != null) 'OutputDataConfig': outputDataConfig,
      if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
      if (profilerRuleConfigurations != null)
        'ProfilerRuleConfigurations': profilerRuleConfigurations,
      if (profilerRuleEvaluationStatuses != null)
        'ProfilerRuleEvaluationStatuses': profilerRuleEvaluationStatuses,
      if (profilingStatus != null) 'ProfilingStatus': profilingStatus.toValue(),
      if (retryStrategy != null) 'RetryStrategy': retryStrategy,
      if (roleArn != null) 'RoleArn': roleArn,
      if (secondaryStatusTransitions != null)
        'SecondaryStatusTransitions': secondaryStatusTransitions,
      if (tensorBoardOutputConfig != null)
        'TensorBoardOutputConfig': tensorBoardOutputConfig,
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (trainingStartTime != null)
        'TrainingStartTime': unixTimestampToJson(trainingStartTime),
      if (trainingTimeInSeconds != null)
        'TrainingTimeInSeconds': trainingTimeInSeconds,
      if (tuningJobArn != null) 'TuningJobArn': tuningJobArn,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeTransformJobResponse {
  /// A timestamp that shows when the transform Job was created.
  final DateTime creationTime;

  /// The name of the model used in the transform job.
  final String modelName;

  /// Describes the dataset to be transformed and the Amazon S3 location where it
  /// is stored.
  final TransformInput transformInput;

  /// The Amazon Resource Name (ARN) of the transform job.
  final String transformJobArn;

  /// The name of the transform job.
  final String transformJobName;

  /// The status of the transform job. If the transform job failed, the reason is
  /// returned in the <code>FailureReason</code> field.
  final TransformJobStatus transformJobStatus;

  /// Describes the resources, including ML instance types and ML instance count,
  /// to use for the transform job.
  final TransformResources transformResources;

  /// The Amazon Resource Name (ARN) of the AutoML transform job.
  final String? autoMLJobArn;

  /// Specifies the number of records to include in a mini-batch for an HTTP
  /// inference request. A <i>record</i> <i/> is a single unit of input data that
  /// inference can be made on. For example, a single line in a CSV file is a
  /// record.
  ///
  /// To enable the batch strategy, you must set <code>SplitType</code> to
  /// <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.
  final BatchStrategy? batchStrategy;
  final DataProcessing? dataProcessing;

  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the transform job failed, <code>FailureReason</code> describes why it
  /// failed. A transform job creates a log file, which includes error messages,
  /// and stores it as an Amazon S3 object. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html">Log
  /// Amazon SageMaker Events with Amazon CloudWatch</a>.
  final String? failureReason;

  /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling
  /// job that created the transform or training job.
  final String? labelingJobArn;

  /// The maximum number of parallel requests on each instance node that can be
  /// launched in a transform job. The default value is 1.
  final int? maxConcurrentTransforms;

  /// The maximum payload size, in MB, used in the transform job.
  final int? maxPayloadInMB;

  /// The timeout and maximum number of retries for processing a transform job
  /// invocation.
  final ModelClientConfig? modelClientConfig;

  /// Indicates when the transform job has been completed, or has stopped or
  /// failed. You are billed for the time interval between this time and the value
  /// of <code>TransformStartTime</code>.
  final DateTime? transformEndTime;

  /// Identifies the Amazon S3 location where you want Amazon SageMaker to save
  /// the results from the transform job.
  final TransformOutput? transformOutput;

  /// Indicates when the transform job starts on ML instances. You are billed for
  /// the time interval between this time and the value of
  /// <code>TransformEndTime</code>.
  final DateTime? transformStartTime;

  DescribeTransformJobResponse({
    required this.creationTime,
    required this.modelName,
    required this.transformInput,
    required this.transformJobArn,
    required this.transformJobName,
    required this.transformJobStatus,
    required this.transformResources,
    this.autoMLJobArn,
    this.batchStrategy,
    this.dataProcessing,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.labelingJobArn,
    this.maxConcurrentTransforms,
    this.maxPayloadInMB,
    this.modelClientConfig,
    this.transformEndTime,
    this.transformOutput,
    this.transformStartTime,
  });

  factory DescribeTransformJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTransformJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelName: json['ModelName'] as String,
      transformInput: TransformInput.fromJson(
          json['TransformInput'] as Map<String, dynamic>),
      transformJobArn: json['TransformJobArn'] as String,
      transformJobName: json['TransformJobName'] as String,
      transformJobStatus:
          (json['TransformJobStatus'] as String).toTransformJobStatus(),
      transformResources: TransformResources.fromJson(
          json['TransformResources'] as Map<String, dynamic>),
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      batchStrategy: (json['BatchStrategy'] as String?)?.toBatchStrategy(),
      dataProcessing: json['DataProcessing'] != null
          ? DataProcessing.fromJson(
              json['DataProcessing'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      labelingJobArn: json['LabelingJobArn'] as String?,
      maxConcurrentTransforms: json['MaxConcurrentTransforms'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
      modelClientConfig: json['ModelClientConfig'] != null
          ? ModelClientConfig.fromJson(
              json['ModelClientConfig'] as Map<String, dynamic>)
          : null,
      transformEndTime: timeStampFromJson(json['TransformEndTime']),
      transformOutput: json['TransformOutput'] != null
          ? TransformOutput.fromJson(
              json['TransformOutput'] as Map<String, dynamic>)
          : null,
      transformStartTime: timeStampFromJson(json['TransformStartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelName = this.modelName;
    final transformInput = this.transformInput;
    final transformJobArn = this.transformJobArn;
    final transformJobName = this.transformJobName;
    final transformJobStatus = this.transformJobStatus;
    final transformResources = this.transformResources;
    final autoMLJobArn = this.autoMLJobArn;
    final batchStrategy = this.batchStrategy;
    final dataProcessing = this.dataProcessing;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final labelingJobArn = this.labelingJobArn;
    final maxConcurrentTransforms = this.maxConcurrentTransforms;
    final maxPayloadInMB = this.maxPayloadInMB;
    final modelClientConfig = this.modelClientConfig;
    final transformEndTime = this.transformEndTime;
    final transformOutput = this.transformOutput;
    final transformStartTime = this.transformStartTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelName': modelName,
      'TransformInput': transformInput,
      'TransformJobArn': transformJobArn,
      'TransformJobName': transformJobName,
      'TransformJobStatus': transformJobStatus.toValue(),
      'TransformResources': transformResources,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (batchStrategy != null) 'BatchStrategy': batchStrategy.toValue(),
      if (dataProcessing != null) 'DataProcessing': dataProcessing,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (maxConcurrentTransforms != null)
        'MaxConcurrentTransforms': maxConcurrentTransforms,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
      if (modelClientConfig != null) 'ModelClientConfig': modelClientConfig,
      if (transformEndTime != null)
        'TransformEndTime': unixTimestampToJson(transformEndTime),
      if (transformOutput != null) 'TransformOutput': transformOutput,
      if (transformStartTime != null)
        'TransformStartTime': unixTimestampToJson(transformStartTime),
    };
  }
}

class DescribeTrialComponentResponse {
  /// Who created the component.
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The name of the component as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialComponentName</code> is displayed.
  final String? displayName;

  /// When the component ended.
  final DateTime? endTime;

  /// The input artifacts of the component.
  final Map<String, TrialComponentArtifact>? inputArtifacts;

  /// Who last modified the component.
  final UserContext? lastModifiedBy;

  /// When the component was last modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The metrics for the component.
  final List<TrialComponentMetricSummary>? metrics;

  /// The output artifacts of the component.
  final Map<String, TrialComponentArtifact>? outputArtifacts;

  /// The hyperparameters of the component.
  final Map<String, TrialComponentParameterValue>? parameters;

  /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
  final TrialComponentSource? source;

  /// When the component started.
  final DateTime? startTime;

  /// The status of the component. States include:
  ///
  /// <ul>
  /// <li>
  /// InProgress
  /// </li>
  /// <li>
  /// Completed
  /// </li>
  /// <li>
  /// Failed
  /// </li>
  /// </ul>
  final TrialComponentStatus? status;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;

  DescribeTrialComponentResponse({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.endTime,
    this.inputArtifacts,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.metrics,
    this.outputArtifacts,
    this.parameters,
    this.source,
    this.startTime,
    this.status,
    this.trialComponentArn,
    this.trialComponentName,
  });

  factory DescribeTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTrialComponentResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      endTime: timeStampFromJson(json['EndTime']),
      inputArtifacts: (json['InputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      metrics: (json['Metrics'] as List?)
          ?.whereNotNull()
          .map((e) =>
              TrialComponentMetricSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputArtifacts: (json['OutputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      parameters: (json['Parameters'] as Map<String, dynamic>?)?.map((k, e) =>
          MapEntry(
              k,
              TrialComponentParameterValue.fromJson(
                  e as Map<String, dynamic>))),
      source: json['Source'] != null
          ? TrialComponentSource.fromJson(
              json['Source'] as Map<String, dynamic>)
          : null,
      startTime: timeStampFromJson(json['StartTime']),
      status: json['Status'] != null
          ? TrialComponentStatus.fromJson(
              json['Status'] as Map<String, dynamic>)
          : null,
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final endTime = this.endTime;
    final inputArtifacts = this.inputArtifacts;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final metrics = this.metrics;
    final outputArtifacts = this.outputArtifacts;
    final parameters = this.parameters;
    final source = this.source;
    final startTime = this.startTime;
    final status = this.status;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (metrics != null) 'Metrics': metrics,
      if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
      if (parameters != null) 'Parameters': parameters,
      if (source != null) 'Source': source,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (status != null) 'Status': status,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
    };
  }
}

class DescribeTrialResponse {
  /// Who created the trial.
  final UserContext? createdBy;

  /// When the trial was created.
  final DateTime? creationTime;

  /// The name of the trial as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialName</code> is displayed.
  final String? displayName;

  /// The name of the experiment the trial is part of.
  final String? experimentName;

  /// Who last modified the trial.
  final UserContext? lastModifiedBy;

  /// When the trial was last modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
  final TrialSource? source;

  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The name of the trial.
  final String? trialName;

  DescribeTrialResponse({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.source,
    this.trialArn,
    this.trialName,
  });

  factory DescribeTrialResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTrialResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      source: json['Source'] != null
          ? TrialSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      trialArn: json['TrialArn'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final source = this.source;
    final trialArn = this.trialArn;
    final trialName = this.trialName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (source != null) 'Source': source,
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

class DescribeUserProfileResponse {
  /// The creation time.
  final DateTime? creationTime;

  /// The ID of the domain that contains the profile.
  final String? domainId;

  /// The failure reason.
  final String? failureReason;

  /// The ID of the user's profile in the Amazon Elastic File System (EFS) volume.
  final String? homeEfsFileSystemUid;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The SSO user identifier.
  final String? singleSignOnUserIdentifier;

  /// The SSO user value.
  final String? singleSignOnUserValue;

  /// The status.
  final UserProfileStatus? status;

  /// The user profile Amazon Resource Name (ARN).
  final String? userProfileArn;

  /// The user profile name.
  final String? userProfileName;

  /// A collection of settings.
  final UserSettings? userSettings;

  DescribeUserProfileResponse({
    this.creationTime,
    this.domainId,
    this.failureReason,
    this.homeEfsFileSystemUid,
    this.lastModifiedTime,
    this.singleSignOnUserIdentifier,
    this.singleSignOnUserValue,
    this.status,
    this.userProfileArn,
    this.userProfileName,
    this.userSettings,
  });

  factory DescribeUserProfileResponse.fromJson(Map<String, dynamic> json) {
    return DescribeUserProfileResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      failureReason: json['FailureReason'] as String?,
      homeEfsFileSystemUid: json['HomeEfsFileSystemUid'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      singleSignOnUserIdentifier: json['SingleSignOnUserIdentifier'] as String?,
      singleSignOnUserValue: json['SingleSignOnUserValue'] as String?,
      status: (json['Status'] as String?)?.toUserProfileStatus(),
      userProfileArn: json['UserProfileArn'] as String?,
      userProfileName: json['UserProfileName'] as String?,
      userSettings: json['UserSettings'] != null
          ? UserSettings.fromJson(json['UserSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final failureReason = this.failureReason;
    final homeEfsFileSystemUid = this.homeEfsFileSystemUid;
    final lastModifiedTime = this.lastModifiedTime;
    final singleSignOnUserIdentifier = this.singleSignOnUserIdentifier;
    final singleSignOnUserValue = this.singleSignOnUserValue;
    final status = this.status;
    final userProfileArn = this.userProfileArn;
    final userProfileName = this.userProfileName;
    final userSettings = this.userSettings;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (failureReason != null) 'FailureReason': failureReason,
      if (homeEfsFileSystemUid != null)
        'HomeEfsFileSystemUid': homeEfsFileSystemUid,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (singleSignOnUserIdentifier != null)
        'SingleSignOnUserIdentifier': singleSignOnUserIdentifier,
      if (singleSignOnUserValue != null)
        'SingleSignOnUserValue': singleSignOnUserValue,
      if (status != null) 'Status': status.toValue(),
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
      if (userProfileName != null) 'UserProfileName': userProfileName,
      if (userSettings != null) 'UserSettings': userSettings,
    };
  }
}

class DescribeWorkforceResponse {
  /// A single private workforce, which is automatically created when you create
  /// your first private work team. You can create one private work force in each
  /// Amazon Web Services Region. By default, any workforce-related API operation
  /// used in a specific region will apply to the workforce created in that
  /// region. To learn how to create a private workforce, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create
  /// a Private Workforce</a>.
  final Workforce workforce;

  DescribeWorkforceResponse({
    required this.workforce,
  });

  factory DescribeWorkforceResponse.fromJson(Map<String, dynamic> json) {
    return DescribeWorkforceResponse(
      workforce: Workforce.fromJson(json['Workforce'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workforce = this.workforce;
    return {
      'Workforce': workforce,
    };
  }
}

class DescribeWorkteamResponse {
  /// A <code>Workteam</code> instance that contains information about the work
  /// team.
  final Workteam workteam;

  DescribeWorkteamResponse({
    required this.workteam,
  });

  factory DescribeWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return DescribeWorkteamResponse(
      workteam: Workteam.fromJson(json['Workteam'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workteam = this.workteam;
    return {
      'Workteam': workteam,
    };
  }
}

/// Specifies weight and capacity values for a production variant.
class DesiredWeightAndCapacity {
  /// The name of the variant to update.
  final String variantName;

  /// The variant's capacity.
  final int? desiredInstanceCount;

  /// The variant's weight.
  final double? desiredWeight;

  DesiredWeightAndCapacity({
    required this.variantName,
    this.desiredInstanceCount,
    this.desiredWeight,
  });

  factory DesiredWeightAndCapacity.fromJson(Map<String, dynamic> json) {
    return DesiredWeightAndCapacity(
      variantName: json['VariantName'] as String,
      desiredInstanceCount: json['DesiredInstanceCount'] as int?,
      desiredWeight: json['DesiredWeight'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final variantName = this.variantName;
    final desiredInstanceCount = this.desiredInstanceCount;
    final desiredWeight = this.desiredWeight;
    return {
      'VariantName': variantName,
      if (desiredInstanceCount != null)
        'DesiredInstanceCount': desiredInstanceCount,
      if (desiredWeight != null) 'DesiredWeight': desiredWeight,
    };
  }
}

enum DetailedAlgorithmStatus {
  notStarted,
  inProgress,
  completed,
  failed,
}

extension on DetailedAlgorithmStatus {
  String toValue() {
    switch (this) {
      case DetailedAlgorithmStatus.notStarted:
        return 'NotStarted';
      case DetailedAlgorithmStatus.inProgress:
        return 'InProgress';
      case DetailedAlgorithmStatus.completed:
        return 'Completed';
      case DetailedAlgorithmStatus.failed:
        return 'Failed';
    }
  }
}

extension on String {
  DetailedAlgorithmStatus toDetailedAlgorithmStatus() {
    switch (this) {
      case 'NotStarted':
        return DetailedAlgorithmStatus.notStarted;
      case 'InProgress':
        return DetailedAlgorithmStatus.inProgress;
      case 'Completed':
        return DetailedAlgorithmStatus.completed;
      case 'Failed':
        return DetailedAlgorithmStatus.failed;
    }
    throw Exception('$this is not known in enum DetailedAlgorithmStatus');
  }
}

enum DetailedModelPackageStatus {
  notStarted,
  inProgress,
  completed,
  failed,
}

extension on DetailedModelPackageStatus {
  String toValue() {
    switch (this) {
      case DetailedModelPackageStatus.notStarted:
        return 'NotStarted';
      case DetailedModelPackageStatus.inProgress:
        return 'InProgress';
      case DetailedModelPackageStatus.completed:
        return 'Completed';
      case DetailedModelPackageStatus.failed:
        return 'Failed';
    }
  }
}

extension on String {
  DetailedModelPackageStatus toDetailedModelPackageStatus() {
    switch (this) {
      case 'NotStarted':
        return DetailedModelPackageStatus.notStarted;
      case 'InProgress':
        return DetailedModelPackageStatus.inProgress;
      case 'Completed':
        return DetailedModelPackageStatus.completed;
      case 'Failed':
        return DetailedModelPackageStatus.failed;
    }
    throw Exception('$this is not known in enum DetailedModelPackageStatus');
  }
}

/// Information of a particular device.
class Device {
  /// The name of the device.
  final String deviceName;

  /// Description of the device.
  final String? description;

  /// Amazon Web Services Internet of Things (IoT) object name.
  final String? iotThingName;

  Device({
    required this.deviceName,
    this.description,
    this.iotThingName,
  });

  factory Device.fromJson(Map<String, dynamic> json) {
    return Device(
      deviceName: json['DeviceName'] as String,
      description: json['Description'] as String?,
      iotThingName: json['IotThingName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final description = this.description;
    final iotThingName = this.iotThingName;
    return {
      'DeviceName': deviceName,
      if (description != null) 'Description': description,
      if (iotThingName != null) 'IotThingName': iotThingName,
    };
  }
}

/// Summary of the device fleet.
class DeviceFleetSummary {
  /// Amazon Resource Name (ARN) of the device fleet.
  final String deviceFleetArn;

  /// Name of the device fleet.
  final String deviceFleetName;

  /// Timestamp of when the device fleet was created.
  final DateTime? creationTime;

  /// Timestamp of when the device fleet was last updated.
  final DateTime? lastModifiedTime;

  DeviceFleetSummary({
    required this.deviceFleetArn,
    required this.deviceFleetName,
    this.creationTime,
    this.lastModifiedTime,
  });

  factory DeviceFleetSummary.fromJson(Map<String, dynamic> json) {
    return DeviceFleetSummary(
      deviceFleetArn: json['DeviceFleetArn'] as String,
      deviceFleetName: json['DeviceFleetName'] as String,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetArn = this.deviceFleetArn;
    final deviceFleetName = this.deviceFleetName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'DeviceFleetArn': deviceFleetArn,
      'DeviceFleetName': deviceFleetName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Status of devices.
class DeviceStats {
  /// The number of devices connected with a heartbeat.
  final int connectedDeviceCount;

  /// The number of registered devices.
  final int registeredDeviceCount;

  DeviceStats({
    required this.connectedDeviceCount,
    required this.registeredDeviceCount,
  });

  factory DeviceStats.fromJson(Map<String, dynamic> json) {
    return DeviceStats(
      connectedDeviceCount: json['ConnectedDeviceCount'] as int,
      registeredDeviceCount: json['RegisteredDeviceCount'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final connectedDeviceCount = this.connectedDeviceCount;
    final registeredDeviceCount = this.registeredDeviceCount;
    return {
      'ConnectedDeviceCount': connectedDeviceCount,
      'RegisteredDeviceCount': registeredDeviceCount,
    };
  }
}

/// Summary of the device.
class DeviceSummary {
  /// Amazon Resource Name (ARN) of the device.
  final String deviceArn;

  /// The unique identifier of the device.
  final String deviceName;

  /// A description of the device.
  final String? description;

  /// The name of the fleet the device belongs to.
  final String? deviceFleetName;

  /// The Amazon Web Services Internet of Things (IoT) object thing name
  /// associated with the device..
  final String? iotThingName;

  /// The last heartbeat received from the device.
  final DateTime? latestHeartbeat;

  /// Models on the device.
  final List<EdgeModelSummary>? models;

  /// The timestamp of the last registration or de-reregistration.
  final DateTime? registrationTime;

  DeviceSummary({
    required this.deviceArn,
    required this.deviceName,
    this.description,
    this.deviceFleetName,
    this.iotThingName,
    this.latestHeartbeat,
    this.models,
    this.registrationTime,
  });

  factory DeviceSummary.fromJson(Map<String, dynamic> json) {
    return DeviceSummary(
      deviceArn: json['DeviceArn'] as String,
      deviceName: json['DeviceName'] as String,
      description: json['Description'] as String?,
      deviceFleetName: json['DeviceFleetName'] as String?,
      iotThingName: json['IotThingName'] as String?,
      latestHeartbeat: timeStampFromJson(json['LatestHeartbeat']),
      models: (json['Models'] as List?)
          ?.whereNotNull()
          .map((e) => EdgeModelSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      registrationTime: timeStampFromJson(json['RegistrationTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceArn = this.deviceArn;
    final deviceName = this.deviceName;
    final description = this.description;
    final deviceFleetName = this.deviceFleetName;
    final iotThingName = this.iotThingName;
    final latestHeartbeat = this.latestHeartbeat;
    final models = this.models;
    final registrationTime = this.registrationTime;
    return {
      'DeviceArn': deviceArn,
      'DeviceName': deviceName,
      if (description != null) 'Description': description,
      if (deviceFleetName != null) 'DeviceFleetName': deviceFleetName,
      if (iotThingName != null) 'IotThingName': iotThingName,
      if (latestHeartbeat != null)
        'LatestHeartbeat': unixTimestampToJson(latestHeartbeat),
      if (models != null) 'Models': models,
      if (registrationTime != null)
        'RegistrationTime': unixTimestampToJson(registrationTime),
    };
  }
}

enum DirectInternetAccess {
  enabled,
  disabled,
}

extension on DirectInternetAccess {
  String toValue() {
    switch (this) {
      case DirectInternetAccess.enabled:
        return 'Enabled';
      case DirectInternetAccess.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  DirectInternetAccess toDirectInternetAccess() {
    switch (this) {
      case 'Enabled':
        return DirectInternetAccess.enabled;
      case 'Disabled':
        return DirectInternetAccess.disabled;
    }
    throw Exception('$this is not known in enum DirectInternetAccess');
  }
}

class DisableSagemakerServicecatalogPortfolioOutput {
  DisableSagemakerServicecatalogPortfolioOutput();

  factory DisableSagemakerServicecatalogPortfolioOutput.fromJson(
      Map<String, dynamic> _) {
    return DisableSagemakerServicecatalogPortfolioOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DisassociateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The ARN of the trial component.
  final String? trialComponentArn;

  DisassociateTrialComponentResponse({
    this.trialArn,
    this.trialComponentArn,
  });

  factory DisassociateTrialComponentResponse.fromJson(
      Map<String, dynamic> json) {
    return DisassociateTrialComponentResponse(
      trialArn: json['TrialArn'] as String?,
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

/// The domain's details.
class DomainDetails {
  /// The creation time.
  final DateTime? creationTime;

  /// The domain's Amazon Resource Name (ARN).
  final String? domainArn;

  /// The domain ID.
  final String? domainId;

  /// The domain name.
  final String? domainName;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The status.
  final DomainStatus? status;

  /// The domain's URL.
  final String? url;

  DomainDetails({
    this.creationTime,
    this.domainArn,
    this.domainId,
    this.domainName,
    this.lastModifiedTime,
    this.status,
    this.url,
  });

  factory DomainDetails.fromJson(Map<String, dynamic> json) {
    return DomainDetails(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainArn: json['DomainArn'] as String?,
      domainId: json['DomainId'] as String?,
      domainName: json['DomainName'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      status: (json['Status'] as String?)?.toDomainStatus(),
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainArn = this.domainArn;
    final domainId = this.domainId;
    final domainName = this.domainName;
    final lastModifiedTime = this.lastModifiedTime;
    final status = this.status;
    final url = this.url;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainArn != null) 'DomainArn': domainArn,
      if (domainId != null) 'DomainId': domainId,
      if (domainName != null) 'DomainName': domainName,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (status != null) 'Status': status.toValue(),
      if (url != null) 'Url': url,
    };
  }
}

enum DomainStatus {
  deleting,
  failed,
  inService,
  pending,
  updating,
  updateFailed,
  deleteFailed,
}

extension on DomainStatus {
  String toValue() {
    switch (this) {
      case DomainStatus.deleting:
        return 'Deleting';
      case DomainStatus.failed:
        return 'Failed';
      case DomainStatus.inService:
        return 'InService';
      case DomainStatus.pending:
        return 'Pending';
      case DomainStatus.updating:
        return 'Updating';
      case DomainStatus.updateFailed:
        return 'Update_Failed';
      case DomainStatus.deleteFailed:
        return 'Delete_Failed';
    }
  }
}

extension on String {
  DomainStatus toDomainStatus() {
    switch (this) {
      case 'Deleting':
        return DomainStatus.deleting;
      case 'Failed':
        return DomainStatus.failed;
      case 'InService':
        return DomainStatus.inService;
      case 'Pending':
        return DomainStatus.pending;
      case 'Updating':
        return DomainStatus.updating;
      case 'Update_Failed':
        return DomainStatus.updateFailed;
      case 'Delete_Failed':
        return DomainStatus.deleteFailed;
    }
    throw Exception('$this is not known in enum DomainStatus');
  }
}

/// The model on the edge device.
class EdgeModel {
  /// The name of the model.
  final String modelName;

  /// The model version.
  final String modelVersion;

  /// The timestamp of the last inference that was made.
  final DateTime? latestInference;

  /// The timestamp of the last data sample taken.
  final DateTime? latestSampleTime;

  EdgeModel({
    required this.modelName,
    required this.modelVersion,
    this.latestInference,
    this.latestSampleTime,
  });

  factory EdgeModel.fromJson(Map<String, dynamic> json) {
    return EdgeModel(
      modelName: json['ModelName'] as String,
      modelVersion: json['ModelVersion'] as String,
      latestInference: timeStampFromJson(json['LatestInference']),
      latestSampleTime: timeStampFromJson(json['LatestSampleTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    final latestInference = this.latestInference;
    final latestSampleTime = this.latestSampleTime;
    return {
      'ModelName': modelName,
      'ModelVersion': modelVersion,
      if (latestInference != null)
        'LatestInference': unixTimestampToJson(latestInference),
      if (latestSampleTime != null)
        'LatestSampleTime': unixTimestampToJson(latestSampleTime),
    };
  }
}

/// Status of edge devices with this model.
class EdgeModelStat {
  /// The number of devices that have this model version, a heart beat, and are
  /// currently running.
  final int activeDeviceCount;

  /// The number of devices that have this model version and have a heart beat.
  final int connectedDeviceCount;

  /// The name of the model.
  final String modelName;

  /// The model version.
  final String modelVersion;

  /// The number of devices that have this model version and do not have a heart
  /// beat.
  final int offlineDeviceCount;

  /// The number of devices with this model version and are producing sample data.
  final int samplingDeviceCount;

  EdgeModelStat({
    required this.activeDeviceCount,
    required this.connectedDeviceCount,
    required this.modelName,
    required this.modelVersion,
    required this.offlineDeviceCount,
    required this.samplingDeviceCount,
  });

  factory EdgeModelStat.fromJson(Map<String, dynamic> json) {
    return EdgeModelStat(
      activeDeviceCount: json['ActiveDeviceCount'] as int,
      connectedDeviceCount: json['ConnectedDeviceCount'] as int,
      modelName: json['ModelName'] as String,
      modelVersion: json['ModelVersion'] as String,
      offlineDeviceCount: json['OfflineDeviceCount'] as int,
      samplingDeviceCount: json['SamplingDeviceCount'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final activeDeviceCount = this.activeDeviceCount;
    final connectedDeviceCount = this.connectedDeviceCount;
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    final offlineDeviceCount = this.offlineDeviceCount;
    final samplingDeviceCount = this.samplingDeviceCount;
    return {
      'ActiveDeviceCount': activeDeviceCount,
      'ConnectedDeviceCount': connectedDeviceCount,
      'ModelName': modelName,
      'ModelVersion': modelVersion,
      'OfflineDeviceCount': offlineDeviceCount,
      'SamplingDeviceCount': samplingDeviceCount,
    };
  }
}

/// Summary of model on edge device.
class EdgeModelSummary {
  /// The name of the model.
  final String modelName;

  /// The version model.
  final String modelVersion;

  EdgeModelSummary({
    required this.modelName,
    required this.modelVersion,
  });

  factory EdgeModelSummary.fromJson(Map<String, dynamic> json) {
    return EdgeModelSummary(
      modelName: json['ModelName'] as String,
      modelVersion: json['ModelVersion'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    return {
      'ModelName': modelName,
      'ModelVersion': modelVersion,
    };
  }
}

/// The output configuration.
class EdgeOutputConfig {
  /// The Amazon Simple Storage (S3) bucker URI.
  final String s3OutputLocation;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume after
  /// compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses
  /// the default KMS key for Amazon S3 for your role's account.
  final String? kmsKeyId;

  /// The configuration used to create deployment artifacts. Specify configuration
  /// options with a JSON string. The available configuration options for each
  /// type are:
  ///
  /// <ul>
  /// <li>
  /// <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component.
  /// If not specified, the default name generated consists of
  /// "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging
  /// job.
  /// </li>
  /// <li>
  /// <code>ComponentDescription</code> (optional) - Description of the component.
  /// </li>
  /// <li>
  /// <code>ComponentVersion</code> (optional) - The version of the component.
  /// <note>
  /// Amazon Web Services IoT Greengrass uses semantic versions for components.
  /// Semantic versions follow a<i> major.minor.patch</i> number system. For
  /// example, version 1.0.0 represents the first major release for a component.
  /// For more information, see the <a href="https://semver.org/">semantic version
  /// specification</a>.
  /// </note> </li>
  /// <li>
  /// <code>PlatformOS</code> (optional) - The name of the operating system for
  /// the platform. Supported platforms include Windows and Linux.
  /// </li>
  /// <li>
  /// <code>PlatformArchitecture</code> (optional) - The processor architecture
  /// for the platform.
  ///
  /// Supported architectures Windows include: Windows32_x86, Windows64_x64.
  ///
  /// Supported architectures for Linux include: Linux x86_64, Linux ARMV8.
  /// </li>
  /// </ul>
  final String? presetDeploymentConfig;

  /// The deployment type SageMaker Edge Manager will create. Currently only
  /// supports Amazon Web Services IoT Greengrass Version 2 components.
  final EdgePresetDeploymentType? presetDeploymentType;

  EdgeOutputConfig({
    required this.s3OutputLocation,
    this.kmsKeyId,
    this.presetDeploymentConfig,
    this.presetDeploymentType,
  });

  factory EdgeOutputConfig.fromJson(Map<String, dynamic> json) {
    return EdgeOutputConfig(
      s3OutputLocation: json['S3OutputLocation'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      presetDeploymentConfig: json['PresetDeploymentConfig'] as String?,
      presetDeploymentType: (json['PresetDeploymentType'] as String?)
          ?.toEdgePresetDeploymentType(),
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputLocation = this.s3OutputLocation;
    final kmsKeyId = this.kmsKeyId;
    final presetDeploymentConfig = this.presetDeploymentConfig;
    final presetDeploymentType = this.presetDeploymentType;
    return {
      'S3OutputLocation': s3OutputLocation,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (presetDeploymentConfig != null)
        'PresetDeploymentConfig': presetDeploymentConfig,
      if (presetDeploymentType != null)
        'PresetDeploymentType': presetDeploymentType.toValue(),
    };
  }
}

enum EdgePackagingJobStatus {
  starting,
  inprogress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on EdgePackagingJobStatus {
  String toValue() {
    switch (this) {
      case EdgePackagingJobStatus.starting:
        return 'STARTING';
      case EdgePackagingJobStatus.inprogress:
        return 'INPROGRESS';
      case EdgePackagingJobStatus.completed:
        return 'COMPLETED';
      case EdgePackagingJobStatus.failed:
        return 'FAILED';
      case EdgePackagingJobStatus.stopping:
        return 'STOPPING';
      case EdgePackagingJobStatus.stopped:
        return 'STOPPED';
    }
  }
}

extension on String {
  EdgePackagingJobStatus toEdgePackagingJobStatus() {
    switch (this) {
      case 'STARTING':
        return EdgePackagingJobStatus.starting;
      case 'INPROGRESS':
        return EdgePackagingJobStatus.inprogress;
      case 'COMPLETED':
        return EdgePackagingJobStatus.completed;
      case 'FAILED':
        return EdgePackagingJobStatus.failed;
      case 'STOPPING':
        return EdgePackagingJobStatus.stopping;
      case 'STOPPED':
        return EdgePackagingJobStatus.stopped;
    }
    throw Exception('$this is not known in enum EdgePackagingJobStatus');
  }
}

/// Summary of edge packaging job.
class EdgePackagingJobSummary {
  /// The Amazon Resource Name (ARN) of the edge packaging job.
  final String edgePackagingJobArn;

  /// The name of the edge packaging job.
  final String edgePackagingJobName;

  /// The status of the edge packaging job.
  final EdgePackagingJobStatus edgePackagingJobStatus;

  /// The name of the SageMaker Neo compilation job.
  final String? compilationJobName;

  /// The timestamp of when the job was created.
  final DateTime? creationTime;

  /// The timestamp of when the edge packaging job was last updated.
  final DateTime? lastModifiedTime;

  /// The name of the model.
  final String? modelName;

  /// The version of the model.
  final String? modelVersion;

  EdgePackagingJobSummary({
    required this.edgePackagingJobArn,
    required this.edgePackagingJobName,
    required this.edgePackagingJobStatus,
    this.compilationJobName,
    this.creationTime,
    this.lastModifiedTime,
    this.modelName,
    this.modelVersion,
  });

  factory EdgePackagingJobSummary.fromJson(Map<String, dynamic> json) {
    return EdgePackagingJobSummary(
      edgePackagingJobArn: json['EdgePackagingJobArn'] as String,
      edgePackagingJobName: json['EdgePackagingJobName'] as String,
      edgePackagingJobStatus:
          (json['EdgePackagingJobStatus'] as String).toEdgePackagingJobStatus(),
      compilationJobName: json['CompilationJobName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelName: json['ModelName'] as String?,
      modelVersion: json['ModelVersion'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobArn = this.edgePackagingJobArn;
    final edgePackagingJobName = this.edgePackagingJobName;
    final edgePackagingJobStatus = this.edgePackagingJobStatus;
    final compilationJobName = this.compilationJobName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    return {
      'EdgePackagingJobArn': edgePackagingJobArn,
      'EdgePackagingJobName': edgePackagingJobName,
      'EdgePackagingJobStatus': edgePackagingJobStatus.toValue(),
      if (compilationJobName != null) 'CompilationJobName': compilationJobName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelName != null) 'ModelName': modelName,
      if (modelVersion != null) 'ModelVersion': modelVersion,
    };
  }
}

/// The output of a SageMaker Edge Manager deployable resource.
class EdgePresetDeploymentOutput {
  /// The deployment type created by SageMaker Edge Manager. Currently only
  /// supports Amazon Web Services IoT Greengrass Version 2 components.
  final EdgePresetDeploymentType type;

  /// The Amazon Resource Name (ARN) of the generated deployable resource.
  final String? artifact;

  /// The status of the deployable resource.
  final EdgePresetDeploymentStatus? status;

  /// Returns a message describing the status of the deployed resource.
  final String? statusMessage;

  EdgePresetDeploymentOutput({
    required this.type,
    this.artifact,
    this.status,
    this.statusMessage,
  });

  factory EdgePresetDeploymentOutput.fromJson(Map<String, dynamic> json) {
    return EdgePresetDeploymentOutput(
      type: (json['Type'] as String).toEdgePresetDeploymentType(),
      artifact: json['Artifact'] as String?,
      status: (json['Status'] as String?)?.toEdgePresetDeploymentStatus(),
      statusMessage: json['StatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final artifact = this.artifact;
    final status = this.status;
    final statusMessage = this.statusMessage;
    return {
      'Type': type.toValue(),
      if (artifact != null) 'Artifact': artifact,
      if (status != null) 'Status': status.toValue(),
      if (statusMessage != null) 'StatusMessage': statusMessage,
    };
  }
}

enum EdgePresetDeploymentStatus {
  completed,
  failed,
}

extension on EdgePresetDeploymentStatus {
  String toValue() {
    switch (this) {
      case EdgePresetDeploymentStatus.completed:
        return 'COMPLETED';
      case EdgePresetDeploymentStatus.failed:
        return 'FAILED';
    }
  }
}

extension on String {
  EdgePresetDeploymentStatus toEdgePresetDeploymentStatus() {
    switch (this) {
      case 'COMPLETED':
        return EdgePresetDeploymentStatus.completed;
      case 'FAILED':
        return EdgePresetDeploymentStatus.failed;
    }
    throw Exception('$this is not known in enum EdgePresetDeploymentStatus');
  }
}

enum EdgePresetDeploymentType {
  greengrassV2Component,
}

extension on EdgePresetDeploymentType {
  String toValue() {
    switch (this) {
      case EdgePresetDeploymentType.greengrassV2Component:
        return 'GreengrassV2Component';
    }
  }
}

extension on String {
  EdgePresetDeploymentType toEdgePresetDeploymentType() {
    switch (this) {
      case 'GreengrassV2Component':
        return EdgePresetDeploymentType.greengrassV2Component;
    }
    throw Exception('$this is not known in enum EdgePresetDeploymentType');
  }
}

class EnableSagemakerServicecatalogPortfolioOutput {
  EnableSagemakerServicecatalogPortfolioOutput();

  factory EnableSagemakerServicecatalogPortfolioOutput.fromJson(
      Map<String, dynamic> _) {
    return EnableSagemakerServicecatalogPortfolioOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

/// A hosted endpoint for real-time inference.
class Endpoint {
  /// The time that the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// The endpoint configuration associated with the endpoint.
  final String endpointConfigName;

  /// The name of the endpoint.
  final String endpointName;

  /// The status of the endpoint.
  final EndpointStatus endpointStatus;

  /// The last time the endpoint was modified.
  final DateTime lastModifiedTime;
  final DataCaptureConfigSummary? dataCaptureConfig;

  /// If the endpoint failed, the reason it failed.
  final String? failureReason;

  /// A list of monitoring schedules for the endpoint. For information about model
  /// monitoring, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
  /// SageMaker Model Monitor</a>.
  final List<MonitoringSchedule>? monitoringSchedules;

  /// A list of the production variants hosted on the endpoint. Each production
  /// variant is a model.
  final List<ProductionVariantSummary>? productionVariants;

  /// A list of the tags associated with the endpoint. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  Endpoint({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointConfigName,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
    this.dataCaptureConfig,
    this.failureReason,
    this.monitoringSchedules,
    this.productionVariants,
    this.tags,
  });

  factory Endpoint.fromJson(Map<String, dynamic> json) {
    return Endpoint(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus: (json['EndpointStatus'] as String).toEndpointStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? DataCaptureConfigSummary.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      monitoringSchedules: (json['MonitoringSchedules'] as List?)
          ?.whereNotNull()
          .map((e) => MonitoringSchedule.fromJson(e as Map<String, dynamic>))
          .toList(),
      productionVariants: (json['ProductionVariants'] as List?)
          ?.whereNotNull()
          .map((e) =>
              ProductionVariantSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointConfigName = this.endpointConfigName;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final dataCaptureConfig = this.dataCaptureConfig;
    final failureReason = this.failureReason;
    final monitoringSchedules = this.monitoringSchedules;
    final productionVariants = this.productionVariants;
    final tags = this.tags;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointConfigName': endpointConfigName,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (monitoringSchedules != null)
        'MonitoringSchedules': monitoringSchedules,
      if (productionVariants != null) 'ProductionVariants': productionVariants,
      if (tags != null) 'Tags': tags,
    };
  }
}

enum EndpointConfigSortKey {
  name,
  creationTime,
}

extension on EndpointConfigSortKey {
  String toValue() {
    switch (this) {
      case EndpointConfigSortKey.name:
        return 'Name';
      case EndpointConfigSortKey.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  EndpointConfigSortKey toEndpointConfigSortKey() {
    switch (this) {
      case 'Name':
        return EndpointConfigSortKey.name;
      case 'CreationTime':
        return EndpointConfigSortKey.creationTime;
    }
    throw Exception('$this is not known in enum EndpointConfigSortKey');
  }
}

/// Provides summary information for an endpoint configuration.
class EndpointConfigSummary {
  /// A timestamp that shows when the endpoint configuration was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint configuration.
  final String endpointConfigArn;

  /// The name of the endpoint configuration.
  final String endpointConfigName;

  EndpointConfigSummary({
    required this.creationTime,
    required this.endpointConfigArn,
    required this.endpointConfigName,
  });

  factory EndpointConfigSummary.fromJson(Map<String, dynamic> json) {
    return EndpointConfigSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointConfigArn: json['EndpointConfigArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointConfigArn = this.endpointConfigArn;
    final endpointConfigName = this.endpointConfigName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointConfigArn': endpointConfigArn,
      'EndpointConfigName': endpointConfigName,
    };
  }
}

/// Input object for the endpoint
class EndpointInput {
  /// An endpoint in customer's account which has enabled
  /// <code>DataCaptureConfig</code> enabled.
  final String endpointName;

  /// Path to the filesystem where the endpoint data is available to the
  /// container.
  final String localPath;

  /// If specified, monitoring jobs substract this time from the end time. For
  /// information about using offsets for scheduling monitoring jobs, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule
  /// Model Quality Monitoring Jobs</a>.
  final String? endTimeOffset;

  /// The attributes of the input data that are the input features.
  final String? featuresAttribute;

  /// The attribute of the input data that represents the ground truth label.
  final String? inferenceAttribute;

  /// In a classification problem, the attribute that represents the class
  /// probability.
  final String? probabilityAttribute;

  /// The threshold for the class probability to be evaluated as a positive
  /// result.
  final double? probabilityThresholdAttribute;

  /// Whether input data distributed in Amazon S3 is fully replicated or sharded
  /// by an S3 key. Defaults to <code>FullyReplicated</code>
  final ProcessingS3DataDistributionType? s3DataDistributionType;

  /// Whether the <code>Pipe</code> or <code>File</code> is used as the input mode
  /// for transfering data for the monitoring job. <code>Pipe</code> mode is
  /// recommended for large datasets. <code>File</code> mode is useful for small
  /// files that fit in memory. Defaults to <code>File</code>.
  final ProcessingS3InputMode? s3InputMode;

  /// If specified, monitoring jobs substract this time from the start time. For
  /// information about using offsets for scheduling monitoring jobs, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule
  /// Model Quality Monitoring Jobs</a>.
  final String? startTimeOffset;

  EndpointInput({
    required this.endpointName,
    required this.localPath,
    this.endTimeOffset,
    this.featuresAttribute,
    this.inferenceAttribute,
    this.probabilityAttribute,
    this.probabilityThresholdAttribute,
    this.s3DataDistributionType,
    this.s3InputMode,
    this.startTimeOffset,
  });

  factory EndpointInput.fromJson(Map<String, dynamic> json) {
    return EndpointInput(
      endpointName: json['EndpointName'] as String,
      localPath: json['LocalPath'] as String,
      endTimeOffset: json['EndTimeOffset'] as String?,
      featuresAttribute: json['FeaturesAttribute'] as String?,
      inferenceAttribute: json['InferenceAttribute'] as String?,
      probabilityAttribute: json['ProbabilityAttribute'] as String?,
      probabilityThresholdAttribute:
          json['ProbabilityThresholdAttribute'] as double?,
      s3DataDistributionType: (json['S3DataDistributionType'] as String?)
          ?.toProcessingS3DataDistributionType(),
      s3InputMode: (json['S3InputMode'] as String?)?.toProcessingS3InputMode(),
      startTimeOffset: json['StartTimeOffset'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    final localPath = this.localPath;
    final endTimeOffset = this.endTimeOffset;
    final featuresAttribute = this.featuresAttribute;
    final inferenceAttribute = this.inferenceAttribute;
    final probabilityAttribute = this.probabilityAttribute;
    final probabilityThresholdAttribute = this.probabilityThresholdAttribute;
    final s3DataDistributionType = this.s3DataDistributionType;
    final s3InputMode = this.s3InputMode;
    final startTimeOffset = this.startTimeOffset;
    return {
      'EndpointName': endpointName,
      'LocalPath': localPath,
      if (endTimeOffset != null) 'EndTimeOffset': endTimeOffset,
      if (featuresAttribute != null) 'FeaturesAttribute': featuresAttribute,
      if (inferenceAttribute != null) 'InferenceAttribute': inferenceAttribute,
      if (probabilityAttribute != null)
        'ProbabilityAttribute': probabilityAttribute,
      if (probabilityThresholdAttribute != null)
        'ProbabilityThresholdAttribute': probabilityThresholdAttribute,
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.toValue(),
      if (s3InputMode != null) 'S3InputMode': s3InputMode.toValue(),
      if (startTimeOffset != null) 'StartTimeOffset': startTimeOffset,
    };
  }
}

enum EndpointSortKey {
  name,
  creationTime,
  status,
}

extension on EndpointSortKey {
  String toValue() {
    switch (this) {
      case EndpointSortKey.name:
        return 'Name';
      case EndpointSortKey.creationTime:
        return 'CreationTime';
      case EndpointSortKey.status:
        return 'Status';
    }
  }
}

extension on String {
  EndpointSortKey toEndpointSortKey() {
    switch (this) {
      case 'Name':
        return EndpointSortKey.name;
      case 'CreationTime':
        return EndpointSortKey.creationTime;
      case 'Status':
        return EndpointSortKey.status;
    }
    throw Exception('$this is not known in enum EndpointSortKey');
  }
}

enum EndpointStatus {
  outOfService,
  creating,
  updating,
  systemUpdating,
  rollingBack,
  inService,
  deleting,
  failed,
}

extension on EndpointStatus {
  String toValue() {
    switch (this) {
      case EndpointStatus.outOfService:
        return 'OutOfService';
      case EndpointStatus.creating:
        return 'Creating';
      case EndpointStatus.updating:
        return 'Updating';
      case EndpointStatus.systemUpdating:
        return 'SystemUpdating';
      case EndpointStatus.rollingBack:
        return 'RollingBack';
      case EndpointStatus.inService:
        return 'InService';
      case EndpointStatus.deleting:
        return 'Deleting';
      case EndpointStatus.failed:
        return 'Failed';
    }
  }
}

extension on String {
  EndpointStatus toEndpointStatus() {
    switch (this) {
      case 'OutOfService':
        return EndpointStatus.outOfService;
      case 'Creating':
        return EndpointStatus.creating;
      case 'Updating':
        return EndpointStatus.updating;
      case 'SystemUpdating':
        return EndpointStatus.systemUpdating;
      case 'RollingBack':
        return EndpointStatus.rollingBack;
      case 'InService':
        return EndpointStatus.inService;
      case 'Deleting':
        return EndpointStatus.deleting;
      case 'Failed':
        return EndpointStatus.failed;
    }
    throw Exception('$this is not known in enum EndpointStatus');
  }
}

/// Provides summary information for an endpoint.
class EndpointSummary {
  /// A timestamp that shows when the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// The name of the endpoint.
  final String endpointName;

  /// The status of the endpoint.
  ///
  /// <ul>
  /// <li>
  /// <code>OutOfService</code>: Endpoint is not available to take incoming
  /// requests.
  /// </li>
  /// <li>
  /// <code>Creating</code>: <a>CreateEndpoint</a> is executing.
  /// </li>
  /// <li>
  /// <code>Updating</code>: <a>UpdateEndpoint</a> or
  /// <a>UpdateEndpointWeightsAndCapacities</a> is executing.
  /// </li>
  /// <li>
  /// <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot
  /// be updated or deleted or re-scaled until it has completed. This maintenance
  /// operation does not change any customer-specified values such as VPC config,
  /// KMS encryption, model, instance type, or instance count.
  /// </li>
  /// <li>
  /// <code>RollingBack</code>: Endpoint fails to scale up or down or change its
  /// variant weight and is in the process of rolling back to its previous
  /// configuration. Once the rollback completes, endpoint returns to an
  /// <code>InService</code> status. This transitional status only applies to an
  /// endpoint that has autoscaling enabled and is undergoing variant weight or
  /// capacity changes as part of an <a>UpdateEndpointWeightsAndCapacities</a>
  /// call or when the <a>UpdateEndpointWeightsAndCapacities</a> operation is
  /// called explicitly.
  /// </li>
  /// <li>
  /// <code>InService</code>: Endpoint is available to process incoming requests.
  /// </li>
  /// <li>
  /// <code>Deleting</code>: <a>DeleteEndpoint</a> is executing.
  /// </li>
  /// <li>
  /// <code>Failed</code>: Endpoint could not be created, updated, or re-scaled.
  /// Use <a>DescribeEndpointOutput$FailureReason</a> for information about the
  /// failure. <a>DeleteEndpoint</a> is the only operation that can be performed
  /// on a failed endpoint.
  /// </li>
  /// </ul>
  /// To get a list of endpoints with a specified status, use the
  /// <a>ListEndpointsInput$StatusEquals</a> filter.
  final EndpointStatus endpointStatus;

  /// A timestamp that shows when the endpoint was last modified.
  final DateTime lastModifiedTime;

  EndpointSummary({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
  });

  factory EndpointSummary.fromJson(Map<String, dynamic> json) {
    return EndpointSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus: (json['EndpointStatus'] as String).toEndpointStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

enum ExecutionStatus {
  pending,
  completed,
  completedWithViolations,
  inProgress,
  failed,
  stopping,
  stopped,
}

extension on ExecutionStatus {
  String toValue() {
    switch (this) {
      case ExecutionStatus.pending:
        return 'Pending';
      case ExecutionStatus.completed:
        return 'Completed';
      case ExecutionStatus.completedWithViolations:
        return 'CompletedWithViolations';
      case ExecutionStatus.inProgress:
        return 'InProgress';
      case ExecutionStatus.failed:
        return 'Failed';
      case ExecutionStatus.stopping:
        return 'Stopping';
      case ExecutionStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  ExecutionStatus toExecutionStatus() {
    switch (this) {
      case 'Pending':
        return ExecutionStatus.pending;
      case 'Completed':
        return ExecutionStatus.completed;
      case 'CompletedWithViolations':
        return ExecutionStatus.completedWithViolations;
      case 'InProgress':
        return ExecutionStatus.inProgress;
      case 'Failed':
        return ExecutionStatus.failed;
      case 'Stopping':
        return ExecutionStatus.stopping;
      case 'Stopped':
        return ExecutionStatus.stopped;
    }
    throw Exception('$this is not known in enum ExecutionStatus');
  }
}

/// The properties of an experiment as returned by the <a>Search</a> API.
class Experiment {
  final UserContext? createdBy;

  /// When the experiment was created.
  final DateTime? creationTime;

  /// The description of the experiment.
  final String? description;

  /// The name of the experiment as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>ExperimentName</code> is displayed.
  final String? displayName;

  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  /// The name of the experiment.
  final String? experimentName;
  final UserContext? lastModifiedBy;

  /// When the experiment was last modified.
  final DateTime? lastModifiedTime;
  final ExperimentSource? source;

  /// The list of tags that are associated with the experiment. You can use
  /// <a>Search</a> API to search on the tags.
  final List<Tag>? tags;

  Experiment({
    this.createdBy,
    this.creationTime,
    this.description,
    this.displayName,
    this.experimentArn,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.source,
    this.tags,
  });

  factory Experiment.fromJson(Map<String, dynamic> json) {
    return Experiment(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      experimentArn: json['ExperimentArn'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ExperimentSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final experimentArn = this.experimentArn;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (experimentArn != null) 'ExperimentArn': experimentArn,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// Associates a SageMaker job as a trial component with an experiment and
/// trial. Specified when you call the following APIs:
///
/// <ul>
/// <li>
/// <a>CreateProcessingJob</a>
/// </li>
/// <li>
/// <a>CreateTrainingJob</a>
/// </li>
/// <li>
/// <a>CreateTransformJob</a>
/// </li>
/// </ul>
class ExperimentConfig {
  /// The name of an existing experiment to associate the trial component with.
  final String? experimentName;

  /// The display name for the trial component. If this key isn't specified, the
  /// display name is the trial component name.
  final String? trialComponentDisplayName;

  /// The name of an existing trial to associate the trial component with. If not
  /// specified, a new trial is created.
  final String? trialName;

  ExperimentConfig({
    this.experimentName,
    this.trialComponentDisplayName,
    this.trialName,
  });

  factory ExperimentConfig.fromJson(Map<String, dynamic> json) {
    return ExperimentConfig(
      experimentName: json['ExperimentName'] as String?,
      trialComponentDisplayName: json['TrialComponentDisplayName'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentName = this.experimentName;
    final trialComponentDisplayName = this.trialComponentDisplayName;
    final trialName = this.trialName;
    return {
      if (experimentName != null) 'ExperimentName': experimentName,
      if (trialComponentDisplayName != null)
        'TrialComponentDisplayName': trialComponentDisplayName,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

/// The source of the experiment.
class ExperimentSource {
  /// The Amazon Resource Name (ARN) of the source.
  final String sourceArn;

  /// The source type.
  final String? sourceType;

  ExperimentSource({
    required this.sourceArn,
    this.sourceType,
  });

  factory ExperimentSource.fromJson(Map<String, dynamic> json) {
    return ExperimentSource(
      sourceArn: json['SourceArn'] as String,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceArn = this.sourceArn;
    final sourceType = this.sourceType;
    return {
      'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// A summary of the properties of an experiment. To get the complete set of
/// properties, call the <a>DescribeExperiment</a> API and provide the
/// <code>ExperimentName</code>.
class ExperimentSummary {
  /// When the experiment was created.
  final DateTime? creationTime;

  /// The name of the experiment as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>ExperimentName</code> is displayed.
  final String? displayName;

  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  /// The name of the experiment.
  final String? experimentName;
  final ExperimentSource? experimentSource;

  /// When the experiment was last modified.
  final DateTime? lastModifiedTime;

  ExperimentSummary({
    this.creationTime,
    this.displayName,
    this.experimentArn,
    this.experimentName,
    this.experimentSource,
    this.lastModifiedTime,
  });

  factory ExperimentSummary.fromJson(Map<String, dynamic> json) {
    return ExperimentSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      experimentArn: json['ExperimentArn'] as String?,
      experimentName: json['ExperimentName'] as String?,
      experimentSource: json['ExperimentSource'] != null
          ? ExperimentSource.fromJson(
              json['ExperimentSource'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final experimentArn = this.experimentArn;
    final experimentName = this.experimentName;
    final experimentSource = this.experimentSource;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (experimentArn != null) 'ExperimentArn': experimentArn,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (experimentSource != null) 'ExperimentSource': experimentSource,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Contains explainability metrics for a model.
class Explainability {
  /// The explainability report for a model.
  final MetricsSource? report;

  Explainability({
    this.report,
  });

  factory Explainability.fromJson(Map<String, dynamic> json) {
    return Explainability(
      report: json['Report'] != null
          ? MetricsSource.fromJson(json['Report'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final report = this.report;
    return {
      if (report != null) 'Report': report,
    };
  }
}

/// A list of features. You must include <code>FeatureName</code> and
/// <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are
/// <code>Integral</code>, <code>Fractional</code> and <code>String</code>.
class FeatureDefinition {
  /// The name of a feature. The type must be a string. <code>FeatureName</code>
  /// cannot be any of the following: <code>is_deleted</code>,
  /// <code>write_time</code>, <code>api_invocation_time</code>.
  final String? featureName;

  /// The value type of a feature. Valid values are Integral, Fractional, or
  /// String.
  final FeatureType? featureType;

  FeatureDefinition({
    this.featureName,
    this.featureType,
  });

  factory FeatureDefinition.fromJson(Map<String, dynamic> json) {
    return FeatureDefinition(
      featureName: json['FeatureName'] as String?,
      featureType: (json['FeatureType'] as String?)?.toFeatureType(),
    );
  }

  Map<String, dynamic> toJson() {
    final featureName = this.featureName;
    final featureType = this.featureType;
    return {
      if (featureName != null) 'FeatureName': featureName,
      if (featureType != null) 'FeatureType': featureType.toValue(),
    };
  }
}

/// Amazon SageMaker Feature Store stores features in a collection called
/// Feature Group. A Feature Group can be visualized as a table which has rows,
/// with a unique identifier for each row where each column in the table is a
/// feature. In principle, a Feature Group is composed of features and values
/// per features.
class FeatureGroup {
  /// The time a <code>FeatureGroup</code> was created.
  final DateTime? creationTime;

  /// A free form description of a <code>FeatureGroup</code>.
  final String? description;

  /// The name of the feature that stores the <code>EventTime</code> of a Record
  /// in a <code>FeatureGroup</code>.
  ///
  /// A <code>EventTime</code> is point in time when a new event occurs that
  /// corresponds to the creation or update of a <code>Record</code> in
  /// <code>FeatureGroup</code>. All <code>Records</code> in the
  /// <code>FeatureGroup</code> must have a corresponding <code>EventTime</code>.
  final String? eventTimeFeatureName;

  /// The reason that the <code>FeatureGroup</code> failed to be replicated in the
  /// <code>OfflineStore</code>. This is failure may be due to a failure to create
  /// a <code>FeatureGroup</code> in or delete a <code>FeatureGroup</code> from
  /// the <code>OfflineStore</code>.
  final String? failureReason;

  /// A list of <code>Feature</code>s. Each <code>Feature</code> must include a
  /// <code>FeatureName</code> and a <code>FeatureType</code>.
  ///
  /// Valid <code>FeatureType</code>s are <code>Integral</code>,
  /// <code>Fractional</code> and <code>String</code>.
  ///
  /// <code>FeatureName</code>s cannot be any of the following:
  /// <code>is_deleted</code>, <code>write_time</code>,
  /// <code>api_invocation_time</code>.
  ///
  /// You can create up to 2,500 <code>FeatureDefinition</code>s per
  /// <code>FeatureGroup</code>.
  final List<FeatureDefinition>? featureDefinitions;

  /// The Amazon Resource Name (ARN) of a <code>FeatureGroup</code>.
  final String? featureGroupArn;

  /// The name of the <code>FeatureGroup</code>.
  final String? featureGroupName;

  /// A <code>FeatureGroup</code> status.
  final FeatureGroupStatus? featureGroupStatus;
  final OfflineStoreConfig? offlineStoreConfig;
  final OfflineStoreStatus? offlineStoreStatus;
  final OnlineStoreConfig? onlineStoreConfig;

  /// The name of the <code>Feature</code> whose value uniquely identifies a
  /// <code>Record</code> defined in the <code>FeatureGroup</code>
  /// <code>FeatureDefinitions</code>.
  final String? recordIdentifierFeatureName;

  /// The Amazon Resource Name (ARN) of the IAM execution role used to create the
  /// feature group.
  final String? roleArn;

  /// Tags used to define a <code>FeatureGroup</code>.
  final List<Tag>? tags;

  FeatureGroup({
    this.creationTime,
    this.description,
    this.eventTimeFeatureName,
    this.failureReason,
    this.featureDefinitions,
    this.featureGroupArn,
    this.featureGroupName,
    this.featureGroupStatus,
    this.offlineStoreConfig,
    this.offlineStoreStatus,
    this.onlineStoreConfig,
    this.recordIdentifierFeatureName,
    this.roleArn,
    this.tags,
  });

  factory FeatureGroup.fromJson(Map<String, dynamic> json) {
    return FeatureGroup(
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      eventTimeFeatureName: json['EventTimeFeatureName'] as String?,
      failureReason: json['FailureReason'] as String?,
      featureDefinitions: (json['FeatureDefinitions'] as List?)
          ?.whereNotNull()
          .map((e) => FeatureDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      featureGroupArn: json['FeatureGroupArn'] as String?,
      featureGroupName: json['FeatureGroupName'] as String?,
      featureGroupStatus:
          (json['FeatureGroupStatus'] as String?)?.toFeatureGroupStatus(),
      offlineStoreConfig: json['OfflineStoreConfig'] != null
          ? OfflineStoreConfig.fromJson(
              json['OfflineStoreConfig'] as Map<String, dynamic>)
          : null,
      offlineStoreStatus: json['OfflineStoreStatus'] != null
          ? OfflineStoreStatus.fromJson(
              json['OfflineStoreStatus'] as Map<String, dynamic>)
          : null,
      onlineStoreConfig: json['OnlineStoreConfig'] != null
          ? OnlineStoreConfig.fromJson(
              json['OnlineStoreConfig'] as Map<String, dynamic>)
          : null,
      recordIdentifierFeatureName:
          json['RecordIdentifierFeatureName'] as String?,
      roleArn: json['RoleArn'] as String?,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final eventTimeFeatureName = this.eventTimeFeatureName;
    final failureReason = this.failureReason;
    final featureDefinitions = this.featureDefinitions;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final featureGroupStatus = this.featureGroupStatus;
    final offlineStoreConfig = this.offlineStoreConfig;
    final offlineStoreStatus = this.offlineStoreStatus;
    final onlineStoreConfig = this.onlineStoreConfig;
    final recordIdentifierFeatureName = this.recordIdentifierFeatureName;
    final roleArn = this.roleArn;
    final tags = this.tags;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (eventTimeFeatureName != null)
        'EventTimeFeatureName': eventTimeFeatureName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (featureDefinitions != null) 'FeatureDefinitions': featureDefinitions,
      if (featureGroupArn != null) 'FeatureGroupArn': featureGroupArn,
      if (featureGroupName != null) 'FeatureGroupName': featureGroupName,
      if (featureGroupStatus != null)
        'FeatureGroupStatus': featureGroupStatus.toValue(),
      if (offlineStoreConfig != null) 'OfflineStoreConfig': offlineStoreConfig,
      if (offlineStoreStatus != null) 'OfflineStoreStatus': offlineStoreStatus,
      if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
      if (recordIdentifierFeatureName != null)
        'RecordIdentifierFeatureName': recordIdentifierFeatureName,
      if (roleArn != null) 'RoleArn': roleArn,
      if (tags != null) 'Tags': tags,
    };
  }
}

enum FeatureGroupSortBy {
  name,
  featureGroupStatus,
  offlineStoreStatus,
  creationTime,
}

extension on FeatureGroupSortBy {
  String toValue() {
    switch (this) {
      case FeatureGroupSortBy.name:
        return 'Name';
      case FeatureGroupSortBy.featureGroupStatus:
        return 'FeatureGroupStatus';
      case FeatureGroupSortBy.offlineStoreStatus:
        return 'OfflineStoreStatus';
      case FeatureGroupSortBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  FeatureGroupSortBy toFeatureGroupSortBy() {
    switch (this) {
      case 'Name':
        return FeatureGroupSortBy.name;
      case 'FeatureGroupStatus':
        return FeatureGroupSortBy.featureGroupStatus;
      case 'OfflineStoreStatus':
        return FeatureGroupSortBy.offlineStoreStatus;
      case 'CreationTime':
        return FeatureGroupSortBy.creationTime;
    }
    throw Exception('$this is not known in enum FeatureGroupSortBy');
  }
}

enum FeatureGroupSortOrder {
  ascending,
  descending,
}

extension on FeatureGroupSortOrder {
  String toValue() {
    switch (this) {
      case FeatureGroupSortOrder.ascending:
        return 'Ascending';
      case FeatureGroupSortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  FeatureGroupSortOrder toFeatureGroupSortOrder() {
    switch (this) {
      case 'Ascending':
        return FeatureGroupSortOrder.ascending;
      case 'Descending':
        return FeatureGroupSortOrder.descending;
    }
    throw Exception('$this is not known in enum FeatureGroupSortOrder');
  }
}

enum FeatureGroupStatus {
  creating,
  created,
  createFailed,
  deleting,
  deleteFailed,
}

extension on FeatureGroupStatus {
  String toValue() {
    switch (this) {
      case FeatureGroupStatus.creating:
        return 'Creating';
      case FeatureGroupStatus.created:
        return 'Created';
      case FeatureGroupStatus.createFailed:
        return 'CreateFailed';
      case FeatureGroupStatus.deleting:
        return 'Deleting';
      case FeatureGroupStatus.deleteFailed:
        return 'DeleteFailed';
    }
  }
}

extension on String {
  FeatureGroupStatus toFeatureGroupStatus() {
    switch (this) {
      case 'Creating':
        return FeatureGroupStatus.creating;
      case 'Created':
        return FeatureGroupStatus.created;
      case 'CreateFailed':
        return FeatureGroupStatus.createFailed;
      case 'Deleting':
        return FeatureGroupStatus.deleting;
      case 'DeleteFailed':
        return FeatureGroupStatus.deleteFailed;
    }
    throw Exception('$this is not known in enum FeatureGroupStatus');
  }
}

/// The name, Arn, <code>CreationTime</code>, <code>FeatureGroup</code> values,
/// <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of
/// a <code>FeatureGroup</code>.
class FeatureGroupSummary {
  /// A timestamp indicating the time of creation time of the
  /// <code>FeatureGroup</code>.
  final DateTime creationTime;

  /// Unique identifier for the <code>FeatureGroup</code>.
  final String featureGroupArn;

  /// The name of <code>FeatureGroup</code>.
  final String featureGroupName;

  /// The status of a FeatureGroup. The status can be any of the following:
  /// <code>Creating</code>, <code>Created</code>, <code>CreateFail</code>,
  /// <code>Deleting</code> or <code>DetailFail</code>.
  final FeatureGroupStatus? featureGroupStatus;

  /// Notifies you if replicating data into the <code>OfflineStore</code> has
  /// failed. Returns either: <code>Active</code> or <code>Blocked</code>.
  final OfflineStoreStatus? offlineStoreStatus;

  FeatureGroupSummary({
    required this.creationTime,
    required this.featureGroupArn,
    required this.featureGroupName,
    this.featureGroupStatus,
    this.offlineStoreStatus,
  });

  factory FeatureGroupSummary.fromJson(Map<String, dynamic> json) {
    return FeatureGroupSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      featureGroupArn: json['FeatureGroupArn'] as String,
      featureGroupName: json['FeatureGroupName'] as String,
      featureGroupStatus:
          (json['FeatureGroupStatus'] as String?)?.toFeatureGroupStatus(),
      offlineStoreStatus: json['OfflineStoreStatus'] != null
          ? OfflineStoreStatus.fromJson(
              json['OfflineStoreStatus'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final featureGroupStatus = this.featureGroupStatus;
    final offlineStoreStatus = this.offlineStoreStatus;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FeatureGroupArn': featureGroupArn,
      'FeatureGroupName': featureGroupName,
      if (featureGroupStatus != null)
        'FeatureGroupStatus': featureGroupStatus.toValue(),
      if (offlineStoreStatus != null) 'OfflineStoreStatus': offlineStoreStatus,
    };
  }
}

enum FeatureType {
  integral,
  fractional,
  string,
}

extension on FeatureType {
  String toValue() {
    switch (this) {
      case FeatureType.integral:
        return 'Integral';
      case FeatureType.fractional:
        return 'Fractional';
      case FeatureType.string:
        return 'String';
    }
  }
}

extension on String {
  FeatureType toFeatureType() {
    switch (this) {
      case 'Integral':
        return FeatureType.integral;
      case 'Fractional':
        return FeatureType.fractional;
      case 'String':
        return FeatureType.string;
    }
    throw Exception('$this is not known in enum FeatureType');
  }
}

enum FileSystemAccessMode {
  rw,
  ro,
}

extension on FileSystemAccessMode {
  String toValue() {
    switch (this) {
      case FileSystemAccessMode.rw:
        return 'rw';
      case FileSystemAccessMode.ro:
        return 'ro';
    }
  }
}

extension on String {
  FileSystemAccessMode toFileSystemAccessMode() {
    switch (this) {
      case 'rw':
        return FileSystemAccessMode.rw;
      case 'ro':
        return FileSystemAccessMode.ro;
    }
    throw Exception('$this is not known in enum FileSystemAccessMode');
  }
}

/// The Amazon Elastic File System (EFS) storage configuration for a SageMaker
/// image.
class FileSystemConfig {
  /// The default POSIX group ID (GID). If not specified, defaults to
  /// <code>100</code>.
  final int? defaultGid;

  /// The default POSIX user ID (UID). If not specified, defaults to
  /// <code>1000</code>.
  final int? defaultUid;

  /// The path within the image to mount the user's EFS home directory. The
  /// directory should be empty. If not specified, defaults to
  /// <i>/home/sagemaker-user</i>.
  final String? mountPath;

  FileSystemConfig({
    this.defaultGid,
    this.defaultUid,
    this.mountPath,
  });

  factory FileSystemConfig.fromJson(Map<String, dynamic> json) {
    return FileSystemConfig(
      defaultGid: json['DefaultGid'] as int?,
      defaultUid: json['DefaultUid'] as int?,
      mountPath: json['MountPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultGid = this.defaultGid;
    final defaultUid = this.defaultUid;
    final mountPath = this.mountPath;
    return {
      if (defaultGid != null) 'DefaultGid': defaultGid,
      if (defaultUid != null) 'DefaultUid': defaultUid,
      if (mountPath != null) 'MountPath': mountPath,
    };
  }
}

/// Specifies a file system data source for a channel.
class FileSystemDataSource {
  /// The full path to the directory to associate with the channel.
  final String directoryPath;

  /// The access mode of the mount of the directory associated with the channel. A
  /// directory can be mounted either in <code>ro</code> (read-only) or
  /// <code>rw</code> (read-write) mode.
  final FileSystemAccessMode fileSystemAccessMode;

  /// The file system id.
  final String fileSystemId;

  /// The file system type.
  final FileSystemType fileSystemType;

  FileSystemDataSource({
    required this.directoryPath,
    required this.fileSystemAccessMode,
    required this.fileSystemId,
    required this.fileSystemType,
  });

  factory FileSystemDataSource.fromJson(Map<String, dynamic> json) {
    return FileSystemDataSource(
      directoryPath: json['DirectoryPath'] as String,
      fileSystemAccessMode:
          (json['FileSystemAccessMode'] as String).toFileSystemAccessMode(),
      fileSystemId: json['FileSystemId'] as String,
      fileSystemType: (json['FileSystemType'] as String).toFileSystemType(),
    );
  }

  Map<String, dynamic> toJson() {
    final directoryPath = this.directoryPath;
    final fileSystemAccessMode = this.fileSystemAccessMode;
    final fileSystemId = this.fileSystemId;
    final fileSystemType = this.fileSystemType;
    return {
      'DirectoryPath': directoryPath,
      'FileSystemAccessMode': fileSystemAccessMode.toValue(),
      'FileSystemId': fileSystemId,
      'FileSystemType': fileSystemType.toValue(),
    };
  }
}

enum FileSystemType {
  efs,
  fSxLustre,
}

extension on FileSystemType {
  String toValue() {
    switch (this) {
      case FileSystemType.efs:
        return 'EFS';
      case FileSystemType.fSxLustre:
        return 'FSxLustre';
    }
  }
}

extension on String {
  FileSystemType toFileSystemType() {
    switch (this) {
      case 'EFS':
        return FileSystemType.efs;
      case 'FSxLustre':
        return FileSystemType.fSxLustre;
    }
    throw Exception('$this is not known in enum FileSystemType');
  }
}

/// A conditional statement for a search expression that includes a resource
/// property, a Boolean operator, and a value. Resources that match the
/// statement are returned in the results from the <a>Search</a> API.
///
/// If you specify a <code>Value</code>, but not an <code>Operator</code>,
/// Amazon SageMaker uses the equals operator.
///
/// In search, there are several property types:
/// <dl> <dt>Metrics</dt> <dd>
/// To define a metric filter, enter a value using the form
/// <code>"Metrics.&lt;name&gt;"</code>, where <code>&lt;name&gt;</code> is a
/// metric name. For example, the following filter searches for training jobs
/// with an <code>"accuracy"</code> metric greater than <code>"0.9"</code>:
///
/// <code>{</code>
///
/// <code>"Name": "Metrics.accuracy",</code>
///
/// <code>"Operator": "GreaterThan",</code>
///
/// <code>"Value": "0.9"</code>
///
/// <code>}</code>
/// </dd> <dt>HyperParameters</dt> <dd>
/// To define a hyperparameter filter, enter a value with the form
/// <code>"HyperParameters.&lt;name&gt;"</code>. Decimal hyperparameter values
/// are treated as a decimal in a comparison if the specified <code>Value</code>
/// is also a decimal value. If the specified <code>Value</code> is an integer,
/// the decimal hyperparameter values are treated as integers. For example, the
/// following filter is satisfied by training jobs with a
/// <code>"learning_rate"</code> hyperparameter that is less than
/// <code>"0.5"</code>:
///
/// <code> {</code>
///
/// <code> "Name": "HyperParameters.learning_rate",</code>
///
/// <code> "Operator": "LessThan",</code>
///
/// <code> "Value": "0.5"</code>
///
/// <code> }</code>
/// </dd> <dt>Tags</dt> <dd>
/// To define a tag filter, enter a value with the form
/// <code>Tags.&lt;key&gt;</code>.
/// </dd> </dl>
class Filter {
  /// A resource property name. For example, <code>TrainingJobName</code>. For
  /// valid property names, see <a>SearchRecord</a>. You must specify a valid
  /// property for the resource.
  final String name;

  /// A Boolean binary operator that is used to evaluate the filter. The operator
  /// field contains one of the following values:
  /// <dl> <dt>Equals</dt> <dd>
  /// The value of <code>Name</code> equals <code>Value</code>.
  /// </dd> <dt>NotEquals</dt> <dd>
  /// The value of <code>Name</code> doesn't equal <code>Value</code>.
  /// </dd> <dt>Exists</dt> <dd>
  /// The <code>Name</code> property exists.
  /// </dd> <dt>NotExists</dt> <dd>
  /// The <code>Name</code> property does not exist.
  /// </dd> <dt>GreaterThan</dt> <dd>
  /// The value of <code>Name</code> is greater than <code>Value</code>. Not
  /// supported for text properties.
  /// </dd> <dt>GreaterThanOrEqualTo</dt> <dd>
  /// The value of <code>Name</code> is greater than or equal to
  /// <code>Value</code>. Not supported for text properties.
  /// </dd> <dt>LessThan</dt> <dd>
  /// The value of <code>Name</code> is less than <code>Value</code>. Not
  /// supported for text properties.
  /// </dd> <dt>LessThanOrEqualTo</dt> <dd>
  /// The value of <code>Name</code> is less than or equal to <code>Value</code>.
  /// Not supported for text properties.
  /// </dd> <dt>In</dt> <dd>
  /// The value of <code>Name</code> is one of the comma delimited strings in
  /// <code>Value</code>. Only supported for text properties.
  /// </dd> <dt>Contains</dt> <dd>
  /// The value of <code>Name</code> contains the string <code>Value</code>. Only
  /// supported for text properties.
  ///
  /// A <code>SearchExpression</code> can include the <code>Contains</code>
  /// operator multiple times when the value of <code>Name</code> is one of the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// <code>Experiment.DisplayName</code>
  /// </li>
  /// <li>
  /// <code>Experiment.ExperimentName</code>
  /// </li>
  /// <li>
  /// <code>Experiment.Tags</code>
  /// </li>
  /// <li>
  /// <code>Trial.DisplayName</code>
  /// </li>
  /// <li>
  /// <code>Trial.TrialName</code>
  /// </li>
  /// <li>
  /// <code>Trial.Tags</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.DisplayName</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.TrialComponentName</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.Tags</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.InputArtifacts</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.OutputArtifacts</code>
  /// </li>
  /// </ul>
  /// A <code>SearchExpression</code> can include only one <code>Contains</code>
  /// operator for all other values of <code>Name</code>. In these cases, if you
  /// include multiple <code>Contains</code> operators in the
  /// <code>SearchExpression</code>, the result is the following error message:
  /// "<code>'CONTAINS' operator usage limit of 1 exceeded.</code>"
  /// </dd> </dl>
  final Operator? operator;

  /// A value used with <code>Name</code> and <code>Operator</code> to determine
  /// which resources satisfy the filter's condition. For numerical properties,
  /// <code>Value</code> must be an integer or floating-point decimal. For
  /// timestamp properties, <code>Value</code> must be an ISO 8601 date-time
  /// string of the following format: <code>YYYY-mm-dd'T'HH:MM:SS</code>.
  final String? value;

  Filter({
    required this.name,
    this.operator,
    this.value,
  });

  factory Filter.fromJson(Map<String, dynamic> json) {
    return Filter(
      name: json['Name'] as String,
      operator: (json['Operator'] as String?)?.toOperator(),
      value: json['Value'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final operator = this.operator;
    final value = this.value;
    return {
      'Name': name,
      if (operator != null) 'Operator': operator.toValue(),
      if (value != null) 'Value': value,
    };
  }
}

/// The best candidate result from an AutoML training job.
class FinalAutoMLJobObjectiveMetric {
  /// The name of the metric with the best result. For a description of the
  /// possible objective metrics, see <a>AutoMLJobObjective$MetricName</a>.
  final AutoMLMetricEnum metricName;

  /// The value of the metric with the best result.
  final double value;

  /// The type of metric with the best result.
  final AutoMLJobObjectiveType? type;

  FinalAutoMLJobObjectiveMetric({
    required this.metricName,
    required this.value,
    this.type,
  });

  factory FinalAutoMLJobObjectiveMetric.fromJson(Map<String, dynamic> json) {
    return FinalAutoMLJobObjectiveMetric(
      metricName: (json['MetricName'] as String).toAutoMLMetricEnum(),
      value: json['Value'] as double,
      type: (json['Type'] as String?)?.toAutoMLJobObjectiveType(),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final value = this.value;
    final type = this.type;
    return {
      'MetricName': metricName.toValue(),
      'Value': value,
      if (type != null) 'Type': type.toValue(),
    };
  }
}

/// Shows the final value for the objective metric for a training job that was
/// launched by a hyperparameter tuning job. You define the objective metric in
/// the <code>HyperParameterTuningJobObjective</code> parameter of
/// <a>HyperParameterTuningJobConfig</a>.
class FinalHyperParameterTuningJobObjectiveMetric {
  /// The name of the objective metric.
  final String metricName;

  /// The value of the objective metric.
  final double value;

  /// Whether to minimize or maximize the objective metric. Valid values are
  /// Minimize and Maximize.
  final HyperParameterTuningJobObjectiveType? type;

  FinalHyperParameterTuningJobObjectiveMetric({
    required this.metricName,
    required this.value,
    this.type,
  });

  factory FinalHyperParameterTuningJobObjectiveMetric.fromJson(
      Map<String, dynamic> json) {
    return FinalHyperParameterTuningJobObjectiveMetric(
      metricName: json['MetricName'] as String,
      value: json['Value'] as double,
      type: (json['Type'] as String?)?.toHyperParameterTuningJobObjectiveType(),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final value = this.value;
    final type = this.type;
    return {
      'MetricName': metricName,
      'Value': value,
      if (type != null) 'Type': type.toValue(),
    };
  }
}

/// Contains information about where human output will be stored.
class FlowDefinitionOutputConfig {
  /// The Amazon S3 path where the object containing human output will be made
  /// available.
  ///
  /// To learn more about the format of Amazon A2I output data, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-output-data.html">Amazon
  /// A2I Output Data</a>.
  final String s3OutputPath;

  /// The Amazon Key Management Service (KMS) key ID for server-side encryption.
  final String? kmsKeyId;

  FlowDefinitionOutputConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
  });

  factory FlowDefinitionOutputConfig.fromJson(Map<String, dynamic> json) {
    return FlowDefinitionOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum FlowDefinitionStatus {
  initializing,
  active,
  failed,
  deleting,
}

extension on FlowDefinitionStatus {
  String toValue() {
    switch (this) {
      case FlowDefinitionStatus.initializing:
        return 'Initializing';
      case FlowDefinitionStatus.active:
        return 'Active';
      case FlowDefinitionStatus.failed:
        return 'Failed';
      case FlowDefinitionStatus.deleting:
        return 'Deleting';
    }
  }
}

extension on String {
  FlowDefinitionStatus toFlowDefinitionStatus() {
    switch (this) {
      case 'Initializing':
        return FlowDefinitionStatus.initializing;
      case 'Active':
        return FlowDefinitionStatus.active;
      case 'Failed':
        return FlowDefinitionStatus.failed;
      case 'Deleting':
        return FlowDefinitionStatus.deleting;
    }
    throw Exception('$this is not known in enum FlowDefinitionStatus');
  }
}

/// Contains summary information about the flow definition.
class FlowDefinitionSummary {
  /// The timestamp when SageMaker created the flow definition.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the flow definition.
  final String flowDefinitionArn;

  /// The name of the flow definition.
  final String flowDefinitionName;

  /// The status of the flow definition. Valid values:
  final FlowDefinitionStatus flowDefinitionStatus;

  /// The reason why the flow definition creation failed. A failure reason is
  /// returned only when the flow definition status is <code>Failed</code>.
  final String? failureReason;

  FlowDefinitionSummary({
    required this.creationTime,
    required this.flowDefinitionArn,
    required this.flowDefinitionName,
    required this.flowDefinitionStatus,
    this.failureReason,
  });

  factory FlowDefinitionSummary.fromJson(Map<String, dynamic> json) {
    return FlowDefinitionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      flowDefinitionArn: json['FlowDefinitionArn'] as String,
      flowDefinitionName: json['FlowDefinitionName'] as String,
      flowDefinitionStatus:
          (json['FlowDefinitionStatus'] as String).toFlowDefinitionStatus(),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final flowDefinitionArn = this.flowDefinitionArn;
    final flowDefinitionName = this.flowDefinitionName;
    final flowDefinitionStatus = this.flowDefinitionStatus;
    final failureReason = this.failureReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FlowDefinitionArn': flowDefinitionArn,
      'FlowDefinitionName': flowDefinitionName,
      'FlowDefinitionStatus': flowDefinitionStatus.toValue(),
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

enum Framework {
  tensorflow,
  keras,
  mxnet,
  onnx,
  pytorch,
  xgboost,
  tflite,
  darknet,
  sklearn,
}

extension on Framework {
  String toValue() {
    switch (this) {
      case Framework.tensorflow:
        return 'TENSORFLOW';
      case Framework.keras:
        return 'KERAS';
      case Framework.mxnet:
        return 'MXNET';
      case Framework.onnx:
        return 'ONNX';
      case Framework.pytorch:
        return 'PYTORCH';
      case Framework.xgboost:
        return 'XGBOOST';
      case Framework.tflite:
        return 'TFLITE';
      case Framework.darknet:
        return 'DARKNET';
      case Framework.sklearn:
        return 'SKLEARN';
    }
  }
}

extension on String {
  Framework toFramework() {
    switch (this) {
      case 'TENSORFLOW':
        return Framework.tensorflow;
      case 'KERAS':
        return Framework.keras;
      case 'MXNET':
        return Framework.mxnet;
      case 'ONNX':
        return Framework.onnx;
      case 'PYTORCH':
        return Framework.pytorch;
      case 'XGBOOST':
        return Framework.xgboost;
      case 'TFLITE':
        return Framework.tflite;
      case 'DARKNET':
        return Framework.darknet;
      case 'SKLEARN':
        return Framework.sklearn;
    }
    throw Exception('$this is not known in enum Framework');
  }
}

class GetDeviceFleetReportResponse {
  /// The Amazon Resource Name (ARN) of the device.
  final String deviceFleetArn;

  /// The name of the fleet.
  final String deviceFleetName;

  /// The versions of Edge Manager agent deployed on the fleet.
  final List<AgentVersion>? agentVersions;

  /// Description of the fleet.
  final String? description;

  /// Status of devices.
  final DeviceStats? deviceStats;

  /// Status of model on device.
  final List<EdgeModelStat>? modelStats;

  /// The output configuration for storing sample data collected by the fleet.
  final EdgeOutputConfig? outputConfig;

  /// Timestamp of when the report was generated.
  final DateTime? reportGenerated;

  GetDeviceFleetReportResponse({
    required this.deviceFleetArn,
    required this.deviceFleetName,
    this.agentVersions,
    this.description,
    this.deviceStats,
    this.modelStats,
    this.outputConfig,
    this.reportGenerated,
  });

  factory GetDeviceFleetReportResponse.fromJson(Map<String, dynamic> json) {
    return GetDeviceFleetReportResponse(
      deviceFleetArn: json['DeviceFleetArn'] as String,
      deviceFleetName: json['DeviceFleetName'] as String,
      agentVersions: (json['AgentVersions'] as List?)
          ?.whereNotNull()
          .map((e) => AgentVersion.fromJson(e as Map<String, dynamic>))
          .toList(),
      description: json['Description'] as String?,
      deviceStats: json['DeviceStats'] != null
          ? DeviceStats.fromJson(json['DeviceStats'] as Map<String, dynamic>)
          : null,
      modelStats: (json['ModelStats'] as List?)
          ?.whereNotNull()
          .map((e) => EdgeModelStat.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputConfig: json['OutputConfig'] != null
          ? EdgeOutputConfig.fromJson(
              json['OutputConfig'] as Map<String, dynamic>)
          : null,
      reportGenerated: timeStampFromJson(json['ReportGenerated']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetArn = this.deviceFleetArn;
    final deviceFleetName = this.deviceFleetName;
    final agentVersions = this.agentVersions;
    final description = this.description;
    final deviceStats = this.deviceStats;
    final modelStats = this.modelStats;
    final outputConfig = this.outputConfig;
    final reportGenerated = this.reportGenerated;
    return {
      'DeviceFleetArn': deviceFleetArn,
      'DeviceFleetName': deviceFleetName,
      if (agentVersions != null) 'AgentVersions': agentVersions,
      if (description != null) 'Description': description,
      if (deviceStats != null) 'DeviceStats': deviceStats,
      if (modelStats != null) 'ModelStats': modelStats,
      if (outputConfig != null) 'OutputConfig': outputConfig,
      if (reportGenerated != null)
        'ReportGenerated': unixTimestampToJson(reportGenerated),
    };
  }
}

class GetModelPackageGroupPolicyOutput {
  /// The resource policy for the model group.
  final String resourcePolicy;

  GetModelPackageGroupPolicyOutput({
    required this.resourcePolicy,
  });

  factory GetModelPackageGroupPolicyOutput.fromJson(Map<String, dynamic> json) {
    return GetModelPackageGroupPolicyOutput(
      resourcePolicy: json['ResourcePolicy'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final resourcePolicy = this.resourcePolicy;
    return {
      'ResourcePolicy': resourcePolicy,
    };
  }
}

class GetSagemakerServicecatalogPortfolioStatusOutput {
  /// Whether Service Catalog is enabled or disabled in SageMaker.
  final SagemakerServicecatalogStatus? status;

  GetSagemakerServicecatalogPortfolioStatusOutput({
    this.status,
  });

  factory GetSagemakerServicecatalogPortfolioStatusOutput.fromJson(
      Map<String, dynamic> json) {
    return GetSagemakerServicecatalogPortfolioStatusOutput(
      status: (json['Status'] as String?)?.toSagemakerServicecatalogStatus(),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.toValue(),
    };
  }
}

class GetSearchSuggestionsResponse {
  /// A list of property names for a <code>Resource</code> that match a
  /// <code>SuggestionQuery</code>.
  final List<PropertyNameSuggestion>? propertyNameSuggestions;

  GetSearchSuggestionsResponse({
    this.propertyNameSuggestions,
  });

  factory GetSearchSuggestionsResponse.fromJson(Map<String, dynamic> json) {
    return GetSearchSuggestionsResponse(
      propertyNameSuggestions: (json['PropertyNameSuggestions'] as List?)
          ?.whereNotNull()
          .map(
              (e) => PropertyNameSuggestion.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final propertyNameSuggestions = this.propertyNameSuggestions;
    return {
      if (propertyNameSuggestions != null)
        'PropertyNameSuggestions': propertyNameSuggestions,
    };
  }
}

/// Specifies configuration details for a Git repository in your Amazon Web
/// Services account.
class GitConfig {
  /// The URL where the Git repository is located.
  final String repositoryUrl;

  /// The default branch for the Git repository.
  final String? branch;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager
  /// secret that contains the credentials used to access the git repository. The
  /// secret must have a staging label of <code>AWSCURRENT</code> and must be in
  /// the following format:
  ///
  /// <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code>
  final String? secretArn;

  GitConfig({
    required this.repositoryUrl,
    this.branch,
    this.secretArn,
  });

  factory GitConfig.fromJson(Map<String, dynamic> json) {
    return GitConfig(
      repositoryUrl: json['RepositoryUrl'] as String,
      branch: json['Branch'] as String?,
      secretArn: json['SecretArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryUrl = this.repositoryUrl;
    final branch = this.branch;
    final secretArn = this.secretArn;
    return {
      'RepositoryUrl': repositoryUrl,
      if (branch != null) 'Branch': branch,
      if (secretArn != null) 'SecretArn': secretArn,
    };
  }
}

/// Specifies configuration details for a Git repository when the repository is
/// updated.
class GitConfigForUpdate {
  /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager
  /// secret that contains the credentials used to access the git repository. The
  /// secret must have a staging label of <code>AWSCURRENT</code> and must be in
  /// the following format:
  ///
  /// <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code>
  final String? secretArn;

  GitConfigForUpdate({
    this.secretArn,
  });

  factory GitConfigForUpdate.fromJson(Map<String, dynamic> json) {
    return GitConfigForUpdate(
      secretArn: json['SecretArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final secretArn = this.secretArn;
    return {
      if (secretArn != null) 'SecretArn': secretArn,
    };
  }
}

/// Defines under what conditions SageMaker creates a human loop. Used within .
/// See for the required format of activation conditions.
class HumanLoopActivationConditionsConfig {
  /// JSON expressing use-case specific conditions declaratively. If any condition
  /// is matched, atomic tasks are created against the configured work team. The
  /// set of conditions is different for Rekognition and Textract. For more
  /// information about how to structure the JSON, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html">JSON
  /// Schema for Human Loop Activation Conditions in Amazon Augmented AI</a> in
  /// the <i>Amazon SageMaker Developer Guide</i>.
  final Object humanLoopActivationConditions;

  HumanLoopActivationConditionsConfig({
    required this.humanLoopActivationConditions,
  });

  factory HumanLoopActivationConditionsConfig.fromJson(
      Map<String, dynamic> json) {
    return HumanLoopActivationConditionsConfig(
      humanLoopActivationConditions:
          jsonDecode(json['HumanLoopActivationConditions'] as String) as Object,
    );
  }

  Map<String, dynamic> toJson() {
    final humanLoopActivationConditions = this.humanLoopActivationConditions;
    return {
      'HumanLoopActivationConditions':
          jsonEncode(humanLoopActivationConditions),
    };
  }
}

/// Provides information about how and under what conditions SageMaker creates a
/// human loop. If <code>HumanLoopActivationConfig</code> is not given, then all
/// requests go to humans.
class HumanLoopActivationConfig {
  /// Container structure for defining under what conditions SageMaker creates a
  /// human loop.
  final HumanLoopActivationConditionsConfig humanLoopActivationConditionsConfig;

  HumanLoopActivationConfig({
    required this.humanLoopActivationConditionsConfig,
  });

  factory HumanLoopActivationConfig.fromJson(Map<String, dynamic> json) {
    return HumanLoopActivationConfig(
      humanLoopActivationConditionsConfig:
          HumanLoopActivationConditionsConfig.fromJson(
              json['HumanLoopActivationConditionsConfig']
                  as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final humanLoopActivationConditionsConfig =
        this.humanLoopActivationConditionsConfig;
    return {
      'HumanLoopActivationConditionsConfig':
          humanLoopActivationConditionsConfig,
    };
  }
}

/// Describes the work to be performed by human workers.
class HumanLoopConfig {
  /// The Amazon Resource Name (ARN) of the human task user interface.
  ///
  /// You can use standard HTML and Crowd HTML Elements to create a custom worker
  /// task template. You use this template to create a human task UI.
  ///
  /// To learn how to create a custom HTML template, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html">Create
  /// Custom Worker Task Template</a>.
  ///
  /// To learn how to create a human task UI, which is a worker task template that
  /// can be used in a flow definition, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-worker-template-console.html">Create
  /// and Delete a Worker Task Templates</a>.
  final String humanTaskUiArn;

  /// The number of distinct workers who will perform the same task on each
  /// object. For example, if <code>TaskCount</code> is set to <code>3</code> for
  /// an image classification labeling job, three workers will classify each input
  /// image. Increasing <code>TaskCount</code> can improve label accuracy.
  final int taskCount;

  /// A description for the human worker task.
  final String taskDescription;

  /// A title for the human worker task.
  final String taskTitle;

  /// Amazon Resource Name (ARN) of a team of workers. To learn more about the
  /// types of workforces and work teams you can create and use with Amazon A2I,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management.html">Create
  /// and Manage Workforces</a>.
  final String workteamArn;
  final PublicWorkforceTaskPrice? publicWorkforceTaskPrice;

  /// The length of time that a task remains available for review by human
  /// workers.
  final int? taskAvailabilityLifetimeInSeconds;

  /// Keywords used to describe the task so that workers can discover the task.
  final List<String>? taskKeywords;

  /// The amount of time that a worker has to complete a task. The default value
  /// is 3,600 seconds (1 hour).
  final int? taskTimeLimitInSeconds;

  HumanLoopConfig({
    required this.humanTaskUiArn,
    required this.taskCount,
    required this.taskDescription,
    required this.taskTitle,
    required this.workteamArn,
    this.publicWorkforceTaskPrice,
    this.taskAvailabilityLifetimeInSeconds,
    this.taskKeywords,
    this.taskTimeLimitInSeconds,
  });

  factory HumanLoopConfig.fromJson(Map<String, dynamic> json) {
    return HumanLoopConfig(
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
      taskCount: json['TaskCount'] as int,
      taskDescription: json['TaskDescription'] as String,
      taskTitle: json['TaskTitle'] as String,
      workteamArn: json['WorkteamArn'] as String,
      publicWorkforceTaskPrice: json['PublicWorkforceTaskPrice'] != null
          ? PublicWorkforceTaskPrice.fromJson(
              json['PublicWorkforceTaskPrice'] as Map<String, dynamic>)
          : null,
      taskAvailabilityLifetimeInSeconds:
          json['TaskAvailabilityLifetimeInSeconds'] as int?,
      taskKeywords: (json['TaskKeywords'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      taskTimeLimitInSeconds: json['TaskTimeLimitInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiArn = this.humanTaskUiArn;
    final taskCount = this.taskCount;
    final taskDescription = this.taskDescription;
    final taskTitle = this.taskTitle;
    final workteamArn = this.workteamArn;
    final publicWorkforceTaskPrice = this.publicWorkforceTaskPrice;
    final taskAvailabilityLifetimeInSeconds =
        this.taskAvailabilityLifetimeInSeconds;
    final taskKeywords = this.taskKeywords;
    final taskTimeLimitInSeconds = this.taskTimeLimitInSeconds;
    return {
      'HumanTaskUiArn': humanTaskUiArn,
      'TaskCount': taskCount,
      'TaskDescription': taskDescription,
      'TaskTitle': taskTitle,
      'WorkteamArn': workteamArn,
      if (publicWorkforceTaskPrice != null)
        'PublicWorkforceTaskPrice': publicWorkforceTaskPrice,
      if (taskAvailabilityLifetimeInSeconds != null)
        'TaskAvailabilityLifetimeInSeconds': taskAvailabilityLifetimeInSeconds,
      if (taskKeywords != null) 'TaskKeywords': taskKeywords,
      if (taskTimeLimitInSeconds != null)
        'TaskTimeLimitInSeconds': taskTimeLimitInSeconds,
    };
  }
}

/// Container for configuring the source of human task requests.
class HumanLoopRequestSource {
  /// Specifies whether Amazon Rekognition or Amazon Textract are used as the
  /// integration source. The default field settings and JSON parsing rules are
  /// different based on the integration source. Valid values:
  final AwsManagedHumanLoopRequestSource awsManagedHumanLoopRequestSource;

  HumanLoopRequestSource({
    required this.awsManagedHumanLoopRequestSource,
  });

  factory HumanLoopRequestSource.fromJson(Map<String, dynamic> json) {
    return HumanLoopRequestSource(
      awsManagedHumanLoopRequestSource:
          (json['AwsManagedHumanLoopRequestSource'] as String)
              .toAwsManagedHumanLoopRequestSource(),
    );
  }

  Map<String, dynamic> toJson() {
    final awsManagedHumanLoopRequestSource =
        this.awsManagedHumanLoopRequestSource;
    return {
      'AwsManagedHumanLoopRequestSource':
          awsManagedHumanLoopRequestSource.toValue(),
    };
  }
}

/// Information required for human workers to complete a labeling task.
class HumanTaskConfig {
  /// Configures how labels are consolidated across human workers.
  final AnnotationConsolidationConfig annotationConsolidationConfig;

  /// The number of human workers that will label an object.
  final int numberOfHumanWorkersPerDataObject;

  /// The Amazon Resource Name (ARN) of a Lambda function that is run before a
  /// data object is sent to a human worker. Use this function to provide input to
  /// a custom labeling job.
  ///
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a>, use one of the following Amazon SageMaker Ground Truth
  /// Lambda function ARNs for <code>PreHumanTaskLambdaArn</code>. For custom
  /// labeling workflows, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-prelambda">Pre-annotation
  /// Lambda</a>.
  ///
  /// <b>Bounding box</b> - Finds the most similar boxes from different workers
  /// based on the Jaccard index of the boxes.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Image classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of an image based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label image classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of an image based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel annotations from workers as
  /// "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Text classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of text based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label text classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of text based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Named entity recognition</b> - Groups similar selections and calculates
  /// aggregate boundaries, resolving to most-assigned label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// </ul>
  /// <b>Video Classification</b> - Use this task type when you need workers to
  /// classify videos using predefined labels that you specify. Workers are shown
  /// videos and are asked to choose one label for each video.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection</b> - Use this task type to have workers
  /// identify and locate objects in a sequence of video frames (images extracted
  /// from a video) using bounding boxes. For example, you can use this task to
  /// ask workers to identify and localize various objects in a series of video
  /// frames, such as cars, bikes, and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking</b> - Use this task type to have workers
  /// track the movement of objects in a sequence of video frames (images
  /// extracted from a video) using bounding boxes. For example, you can use this
  /// task to ask workers to track the movement of objects, such as cars, bikes,
  /// and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Modalities</b>
  ///
  /// Use the following pre-annotation lambdas for 3D point cloud labeling
  /// modality tasks. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-task-types.html">3D
  /// Point Cloud Task types </a> to learn more.
  ///
  /// <b>3D Point Cloud Object Detection</b> - Use this task type when you want
  /// workers to classify objects in a 3D point cloud by drawing 3D cuboids around
  /// objects. For example, you can use this task type to ask workers to identify
  /// different types of objects in a point cloud, such as cars, bikes, and
  /// pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Tracking</b> - Use this task type when you want
  /// workers to draw 3D cuboids around objects that appear in a sequence of 3D
  /// point cloud frames. For example, you can use this task type to ask workers
  /// to track the movement of vehicles across multiple point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Semantic Segmentation</b> - Use this task type when you
  /// want workers to create a point-level semantic segmentation masks by painting
  /// objects in a 3D point cloud using different colors where each color is
  /// assigned to one of the classes you specify.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
  ///
  /// Use label verification and adjustment jobs to review and adjust labels. To
  /// learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify
  /// and Adjust Labels </a>.
  ///
  /// <b>Bounding box verification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true class of verification judgement
  /// for bounding box labels based on annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Bounding box adjustment</b> - Finds the most similar boxes from different
  /// workers based on the Jaccard index of the adjusted annotations.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation verification</b> - Uses a variant of the
  /// Expectation Maximization approach to estimate the true class of verification
  /// judgment for semantic segmentation labels based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation adjustment</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel adjusted annotations from
  /// workers as "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to classify and localize objects in a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to track object movement across a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D point cloud object detection adjustment</b> - Adjust 3D cuboids in a
  /// point cloud frame.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D point cloud object tracking adjustment</b> - Adjust 3D cuboids across
  /// a sequence of point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D point cloud semantic segmentation adjustment</b> - Adjust semantic
  /// segmentation masks in a 3D point cloud.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  final String preHumanTaskLambdaArn;

  /// A description of the task for your human workers.
  final String taskDescription;

  /// The amount of time that a worker has to complete a task.
  ///
  /// If you create a custom labeling job, the maximum value for this parameter is
  /// 8 hours (28,800 seconds).
  ///
  /// If you create a labeling job using a <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task type</a> the maximum for this parameter depends on the task type you
  /// use:
  ///
  /// <ul>
  /// <li>
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-images.html">image</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-text.html">text</a>
  /// labeling jobs, the maximum is 8 hours (28,800 seconds).
  /// </li>
  /// <li>
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud.html">3D
  /// point cloud</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-video.html">video
  /// frame</a> labeling jobs, the maximum is 7 days (604,800 seconds). If you
  /// want to change these limits, contact Amazon Web Services Support.
  /// </li>
  /// </ul>
  final int taskTimeLimitInSeconds;

  /// A title for the task for your human workers.
  final String taskTitle;

  /// Information about the user interface that workers use to complete the
  /// labeling task.
  final UiConfig uiConfig;

  /// The Amazon Resource Name (ARN) of the work team assigned to complete the
  /// tasks.
  final String workteamArn;

  /// Defines the maximum number of data objects that can be labeled by human
  /// workers at the same time. Also referred to as batch size. Each object may
  /// have more than one worker at one time. The default value is 1000 objects.
  final int? maxConcurrentTaskCount;

  /// The price that you pay for each task performed by an Amazon Mechanical Turk
  /// worker.
  final PublicWorkforceTaskPrice? publicWorkforceTaskPrice;

  /// The length of time that a task remains available for labeling by human
  /// workers. The default and maximum values for this parameter depend on the
  /// type of workforce you use.
  ///
  /// <ul>
  /// <li>
  /// If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours
  /// (43,200 seconds). The default is 6 hours (21,600 seconds).
  /// </li>
  /// <li>
  /// If you choose a private or vendor workforce, the default value is 10 days
  /// (864,000 seconds). For most users, the maximum is also 10 days. If you want
  /// to change this limit, contact Amazon Web Services Support.
  /// </li>
  /// </ul>
  final int? taskAvailabilityLifetimeInSeconds;

  /// Keywords used to describe the task so that workers on Amazon Mechanical Turk
  /// can discover the task.
  final List<String>? taskKeywords;

  HumanTaskConfig({
    required this.annotationConsolidationConfig,
    required this.numberOfHumanWorkersPerDataObject,
    required this.preHumanTaskLambdaArn,
    required this.taskDescription,
    required this.taskTimeLimitInSeconds,
    required this.taskTitle,
    required this.uiConfig,
    required this.workteamArn,
    this.maxConcurrentTaskCount,
    this.publicWorkforceTaskPrice,
    this.taskAvailabilityLifetimeInSeconds,
    this.taskKeywords,
  });

  factory HumanTaskConfig.fromJson(Map<String, dynamic> json) {
    return HumanTaskConfig(
      annotationConsolidationConfig: AnnotationConsolidationConfig.fromJson(
          json['AnnotationConsolidationConfig'] as Map<String, dynamic>),
      numberOfHumanWorkersPerDataObject:
          json['NumberOfHumanWorkersPerDataObject'] as int,
      preHumanTaskLambdaArn: json['PreHumanTaskLambdaArn'] as String,
      taskDescription: json['TaskDescription'] as String,
      taskTimeLimitInSeconds: json['TaskTimeLimitInSeconds'] as int,
      taskTitle: json['TaskTitle'] as String,
      uiConfig: UiConfig.fromJson(json['UiConfig'] as Map<String, dynamic>),
      workteamArn: json['WorkteamArn'] as String,
      maxConcurrentTaskCount: json['MaxConcurrentTaskCount'] as int?,
      publicWorkforceTaskPrice: json['PublicWorkforceTaskPrice'] != null
          ? PublicWorkforceTaskPrice.fromJson(
              json['PublicWorkforceTaskPrice'] as Map<String, dynamic>)
          : null,
      taskAvailabilityLifetimeInSeconds:
          json['TaskAvailabilityLifetimeInSeconds'] as int?,
      taskKeywords: (json['TaskKeywords'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final annotationConsolidationConfig = this.annotationConsolidationConfig;
    final numberOfHumanWorkersPerDataObject =
        this.numberOfHumanWorkersPerDataObject;
    final preHumanTaskLambdaArn = this.preHumanTaskLambdaArn;
    final taskDescription = this.taskDescription;
    final taskTimeLimitInSeconds = this.taskTimeLimitInSeconds;
    final taskTitle = this.taskTitle;
    final uiConfig = this.uiConfig;
    final workteamArn = this.workteamArn;
    final maxConcurrentTaskCount = this.maxConcurrentTaskCount;
    final publicWorkforceTaskPrice = this.publicWorkforceTaskPrice;
    final taskAvailabilityLifetimeInSeconds =
        this.taskAvailabilityLifetimeInSeconds;
    final taskKeywords = this.taskKeywords;
    return {
      'AnnotationConsolidationConfig': annotationConsolidationConfig,
      'NumberOfHumanWorkersPerDataObject': numberOfHumanWorkersPerDataObject,
      'PreHumanTaskLambdaArn': preHumanTaskLambdaArn,
      'TaskDescription': taskDescription,
      'TaskTimeLimitInSeconds': taskTimeLimitInSeconds,
      'TaskTitle': taskTitle,
      'UiConfig': uiConfig,
      'WorkteamArn': workteamArn,
      if (maxConcurrentTaskCount != null)
        'MaxConcurrentTaskCount': maxConcurrentTaskCount,
      if (publicWorkforceTaskPrice != null)
        'PublicWorkforceTaskPrice': publicWorkforceTaskPrice,
      if (taskAvailabilityLifetimeInSeconds != null)
        'TaskAvailabilityLifetimeInSeconds': taskAvailabilityLifetimeInSeconds,
      if (taskKeywords != null) 'TaskKeywords': taskKeywords,
    };
  }
}

enum HumanTaskUiStatus {
  active,
  deleting,
}

extension on HumanTaskUiStatus {
  String toValue() {
    switch (this) {
      case HumanTaskUiStatus.active:
        return 'Active';
      case HumanTaskUiStatus.deleting:
        return 'Deleting';
    }
  }
}

extension on String {
  HumanTaskUiStatus toHumanTaskUiStatus() {
    switch (this) {
      case 'Active':
        return HumanTaskUiStatus.active;
      case 'Deleting':
        return HumanTaskUiStatus.deleting;
    }
    throw Exception('$this is not known in enum HumanTaskUiStatus');
  }
}

/// Container for human task user interface information.
class HumanTaskUiSummary {
  /// A timestamp when SageMaker created the human task user interface.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the human task user interface.
  final String humanTaskUiArn;

  /// The name of the human task user interface.
  final String humanTaskUiName;

  HumanTaskUiSummary({
    required this.creationTime,
    required this.humanTaskUiArn,
    required this.humanTaskUiName,
  });

  factory HumanTaskUiSummary.fromJson(Map<String, dynamic> json) {
    return HumanTaskUiSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
      humanTaskUiName: json['HumanTaskUiName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final humanTaskUiArn = this.humanTaskUiArn;
    final humanTaskUiName = this.humanTaskUiName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HumanTaskUiArn': humanTaskUiArn,
      'HumanTaskUiName': humanTaskUiName,
    };
  }
}

/// Specifies which training algorithm to use for training jobs that a
/// hyperparameter tuning job launches and the metrics to monitor.
class HyperParameterAlgorithmSpecification {
  /// The input mode that the algorithm supports: File or Pipe. In File input
  /// mode, Amazon SageMaker downloads the training data from Amazon S3 to the
  /// storage volume that is attached to the training instance and mounts the
  /// directory to the Docker volume for the training container. In Pipe input
  /// mode, Amazon SageMaker streams data directly from Amazon S3 to the
  /// container.
  ///
  /// If you specify File mode, make sure that you provision the storage volume
  /// that is attached to the training instance with enough capacity to
  /// accommodate the training data downloaded from Amazon S3, the model
  /// artifacts, and intermediate information.
  /// <p/>
  /// For more information about input modes, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  final TrainingInputMode trainingInputMode;

  /// The name of the resource algorithm to use for the hyperparameter tuning job.
  /// If you specify a value for this parameter, do not specify a value for
  /// <code>TrainingImage</code>.
  final String? algorithmName;

  /// An array of <a>MetricDefinition</a> objects that specify the metrics that
  /// the algorithm emits.
  final List<MetricDefinition>? metricDefinitions;

  /// The registry path of the Docker image that contains the training algorithm.
  /// For information about Docker registry paths for built-in algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Algorithms
  /// Provided by Amazon SageMaker: Common Parameters</a>. Amazon SageMaker
  /// supports both <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  final String? trainingImage;

  HyperParameterAlgorithmSpecification({
    required this.trainingInputMode,
    this.algorithmName,
    this.metricDefinitions,
    this.trainingImage,
  });

  factory HyperParameterAlgorithmSpecification.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterAlgorithmSpecification(
      trainingInputMode:
          (json['TrainingInputMode'] as String).toTrainingInputMode(),
      algorithmName: json['AlgorithmName'] as String?,
      metricDefinitions: (json['MetricDefinitions'] as List?)
          ?.whereNotNull()
          .map((e) => MetricDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingImage: json['TrainingImage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingInputMode = this.trainingInputMode;
    final algorithmName = this.algorithmName;
    final metricDefinitions = this.metricDefinitions;
    final trainingImage = this.trainingImage;
    return {
      'TrainingInputMode': trainingInputMode.toValue(),
      if (algorithmName != null) 'AlgorithmName': algorithmName,
      if (metricDefinitions != null) 'MetricDefinitions': metricDefinitions,
      if (trainingImage != null) 'TrainingImage': trainingImage,
    };
  }
}

enum HyperParameterScalingType {
  auto,
  linear,
  logarithmic,
  reverseLogarithmic,
}

extension on HyperParameterScalingType {
  String toValue() {
    switch (this) {
      case HyperParameterScalingType.auto:
        return 'Auto';
      case HyperParameterScalingType.linear:
        return 'Linear';
      case HyperParameterScalingType.logarithmic:
        return 'Logarithmic';
      case HyperParameterScalingType.reverseLogarithmic:
        return 'ReverseLogarithmic';
    }
  }
}

extension on String {
  HyperParameterScalingType toHyperParameterScalingType() {
    switch (this) {
      case 'Auto':
        return HyperParameterScalingType.auto;
      case 'Linear':
        return HyperParameterScalingType.linear;
      case 'Logarithmic':
        return HyperParameterScalingType.logarithmic;
      case 'ReverseLogarithmic':
        return HyperParameterScalingType.reverseLogarithmic;
    }
    throw Exception('$this is not known in enum HyperParameterScalingType');
  }
}

/// Defines a hyperparameter to be used by an algorithm.
class HyperParameterSpecification {
  /// The name of this hyperparameter. The name must be unique.
  final String name;

  /// The type of this hyperparameter. The valid types are <code>Integer</code>,
  /// <code>Continuous</code>, <code>Categorical</code>, and
  /// <code>FreeText</code>.
  final ParameterType type;

  /// The default value for this hyperparameter. If a default value is specified,
  /// a hyperparameter cannot be required.
  final String? defaultValue;

  /// A brief description of the hyperparameter.
  final String? description;

  /// Indicates whether this hyperparameter is required.
  final bool? isRequired;

  /// Indicates whether this hyperparameter is tunable in a hyperparameter tuning
  /// job.
  final bool? isTunable;

  /// The allowed range for this hyperparameter.
  final ParameterRange? range;

  HyperParameterSpecification({
    required this.name,
    required this.type,
    this.defaultValue,
    this.description,
    this.isRequired,
    this.isTunable,
    this.range,
  });

  factory HyperParameterSpecification.fromJson(Map<String, dynamic> json) {
    return HyperParameterSpecification(
      name: json['Name'] as String,
      type: (json['Type'] as String).toParameterType(),
      defaultValue: json['DefaultValue'] as String?,
      description: json['Description'] as String?,
      isRequired: json['IsRequired'] as bool?,
      isTunable: json['IsTunable'] as bool?,
      range: json['Range'] != null
          ? ParameterRange.fromJson(json['Range'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final type = this.type;
    final defaultValue = this.defaultValue;
    final description = this.description;
    final isRequired = this.isRequired;
    final isTunable = this.isTunable;
    final range = this.range;
    return {
      'Name': name,
      'Type': type.toValue(),
      if (defaultValue != null) 'DefaultValue': defaultValue,
      if (description != null) 'Description': description,
      if (isRequired != null) 'IsRequired': isRequired,
      if (isTunable != null) 'IsTunable': isTunable,
      if (range != null) 'Range': range,
    };
  }
}

/// Defines the training jobs launched by a hyperparameter tuning job.
class HyperParameterTrainingJobDefinition {
  /// The <a>HyperParameterAlgorithmSpecification</a> object that specifies the
  /// resource algorithm to use for the training jobs that the tuning job
  /// launches.
  final HyperParameterAlgorithmSpecification algorithmSpecification;

  /// Specifies the path to the Amazon S3 bucket where you store model artifacts
  /// from the training jobs that the tuning job launches.
  final OutputDataConfig outputDataConfig;

  /// The resources, including the compute instances and storage volumes, to use
  /// for the training jobs that the tuning job launches.
  ///
  /// Storage volumes store model artifacts and incremental states. Training
  /// algorithms might also use storage volumes for scratch space. If you want
  /// Amazon SageMaker to use the storage volume to store the training data,
  /// choose <code>File</code> as the <code>TrainingInputMode</code> in the
  /// algorithm specification. For distributed training algorithms, specify an
  /// instance count greater than 1.
  final ResourceConfig resourceConfig;

  /// The Amazon Resource Name (ARN) of the IAM role associated with the training
  /// jobs that the tuning job launches.
  final String roleArn;

  /// Specifies a limit to how long a model hyperparameter training job can run.
  /// It also specifies how long a managed spot training job has to complete. When
  /// the job reaches the time limit, Amazon SageMaker ends the training job. Use
  /// this API to cap model training costs.
  final StoppingCondition stoppingCondition;
  final CheckpointConfig? checkpointConfig;

  /// The job definition name.
  final String? definitionName;

  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security for
  /// distributed training, but training might take longer. How long it takes
  /// depends on the amount of communication between compute instances, especially
  /// if you use a deep learning algorithm in distributed training.
  final bool? enableInterContainerTrafficEncryption;

  /// A Boolean indicating whether managed spot training is enabled
  /// (<code>True</code>) or not (<code>False</code>).
  final bool? enableManagedSpotTraining;

  /// Isolates the training container. No inbound or outbound network calls can be
  /// made, except for calls between peers within a training cluster for
  /// distributed training. If network isolation is used for training jobs that
  /// are configured to use a VPC, Amazon SageMaker downloads and uploads customer
  /// data and model artifacts through the specified VPC, but the training
  /// container does not have network access.
  final bool? enableNetworkIsolation;
  final ParameterRanges? hyperParameterRanges;

  /// An array of <a>Channel</a> objects that specify the input for the training
  /// jobs that the tuning job launches.
  final List<Channel>? inputDataConfig;

  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  final RetryStrategy? retryStrategy;

  /// Specifies the values of hyperparameters that do not change for the tuning
  /// job.
  final Map<String, String>? staticHyperParameters;
  final HyperParameterTuningJobObjective? tuningObjective;

  /// The <a>VpcConfig</a> object that specifies the VPC that you want the
  /// training jobs that this hyperparameter tuning job launches to connect to.
  /// Control access to and from your training container by configuring the VPC.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  final VpcConfig? vpcConfig;

  HyperParameterTrainingJobDefinition({
    required this.algorithmSpecification,
    required this.outputDataConfig,
    required this.resourceConfig,
    required this.roleArn,
    required this.stoppingCondition,
    this.checkpointConfig,
    this.definitionName,
    this.enableInterContainerTrafficEncryption,
    this.enableManagedSpotTraining,
    this.enableNetworkIsolation,
    this.hyperParameterRanges,
    this.inputDataConfig,
    this.retryStrategy,
    this.staticHyperParameters,
    this.tuningObjective,
    this.vpcConfig,
  });

  factory HyperParameterTrainingJobDefinition.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTrainingJobDefinition(
      algorithmSpecification: HyperParameterAlgorithmSpecification.fromJson(
          json['AlgorithmSpecification'] as Map<String, dynamic>),
      outputDataConfig: OutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      resourceConfig: ResourceConfig.fromJson(
          json['ResourceConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      checkpointConfig: json['CheckpointConfig'] != null
          ? CheckpointConfig.fromJson(
              json['CheckpointConfig'] as Map<String, dynamic>)
          : null,
      definitionName: json['DefinitionName'] as String?,
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableManagedSpotTraining: json['EnableManagedSpotTraining'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      hyperParameterRanges: json['HyperParameterRanges'] != null
          ? ParameterRanges.fromJson(
              json['HyperParameterRanges'] as Map<String, dynamic>)
          : null,
      inputDataConfig: (json['InputDataConfig'] as List?)
          ?.whereNotNull()
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      retryStrategy: json['RetryStrategy'] != null
          ? RetryStrategy.fromJson(
              json['RetryStrategy'] as Map<String, dynamic>)
          : null,
      staticHyperParameters:
          (json['StaticHyperParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
      tuningObjective: json['TuningObjective'] != null
          ? HyperParameterTuningJobObjective.fromJson(
              json['TuningObjective'] as Map<String, dynamic>)
          : null,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSpecification = this.algorithmSpecification;
    final outputDataConfig = this.outputDataConfig;
    final resourceConfig = this.resourceConfig;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final checkpointConfig = this.checkpointConfig;
    final definitionName = this.definitionName;
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableManagedSpotTraining = this.enableManagedSpotTraining;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final hyperParameterRanges = this.hyperParameterRanges;
    final inputDataConfig = this.inputDataConfig;
    final retryStrategy = this.retryStrategy;
    final staticHyperParameters = this.staticHyperParameters;
    final tuningObjective = this.tuningObjective;
    final vpcConfig = this.vpcConfig;
    return {
      'AlgorithmSpecification': algorithmSpecification,
      'OutputDataConfig': outputDataConfig,
      'ResourceConfig': resourceConfig,
      'RoleArn': roleArn,
      'StoppingCondition': stoppingCondition,
      if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
      if (definitionName != null) 'DefinitionName': definitionName,
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableManagedSpotTraining != null)
        'EnableManagedSpotTraining': enableManagedSpotTraining,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (hyperParameterRanges != null)
        'HyperParameterRanges': hyperParameterRanges,
      if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
      if (retryStrategy != null) 'RetryStrategy': retryStrategy,
      if (staticHyperParameters != null)
        'StaticHyperParameters': staticHyperParameters,
      if (tuningObjective != null) 'TuningObjective': tuningObjective,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// Specifies summary information about a training job.
class HyperParameterTrainingJobSummary {
  /// The date and time that the training job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  /// The name of the training job.
  final String trainingJobName;

  /// The status of the training job.
  final TrainingJobStatus trainingJobStatus;

  /// A list of the hyperparameters for which you specified ranges to search.
  final Map<String, String> tunedHyperParameters;

  /// The reason that the training job failed.
  final String? failureReason;

  /// The <a>FinalHyperParameterTuningJobObjectiveMetric</a> object that specifies
  /// the value of the objective metric of the tuning job that launched this
  /// training job.
  final FinalHyperParameterTuningJobObjectiveMetric?
      finalHyperParameterTuningJobObjectiveMetric;

  /// The status of the objective metric for the training job:
  ///
  /// <ul>
  /// <li>
  /// Succeeded: The final objective metric for the training job was evaluated by
  /// the hyperparameter tuning job and used in the hyperparameter tuning process.
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// Pending: The training job is in progress and evaluation of its final
  /// objective metric is pending.
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// Failed: The final objective metric for the training job was not evaluated,
  /// and was not used in the hyperparameter tuning process. This typically occurs
  /// when the training job failed or did not emit an objective metric.
  /// </li>
  /// </ul>
  final ObjectiveStatus? objectiveStatus;

  /// Specifies the time when the training job ends on training instances. You are
  /// billed for the time interval between the value of
  /// <code>TrainingStartTime</code> and this time. For successful jobs and
  /// stopped jobs, this is the time after model artifacts are uploaded. For
  /// failed jobs, this is the time when Amazon SageMaker detects a job failure.
  final DateTime? trainingEndTime;

  /// The training job definition name.
  final String? trainingJobDefinitionName;

  /// The date and time that the training job started.
  final DateTime? trainingStartTime;

  /// The HyperParameter tuning job that launched the training job.
  final String? tuningJobName;

  HyperParameterTrainingJobSummary({
    required this.creationTime,
    required this.trainingJobArn,
    required this.trainingJobName,
    required this.trainingJobStatus,
    required this.tunedHyperParameters,
    this.failureReason,
    this.finalHyperParameterTuningJobObjectiveMetric,
    this.objectiveStatus,
    this.trainingEndTime,
    this.trainingJobDefinitionName,
    this.trainingStartTime,
    this.tuningJobName,
  });

  factory HyperParameterTrainingJobSummary.fromJson(Map<String, dynamic> json) {
    return HyperParameterTrainingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      trainingJobArn: json['TrainingJobArn'] as String,
      trainingJobName: json['TrainingJobName'] as String,
      trainingJobStatus:
          (json['TrainingJobStatus'] as String).toTrainingJobStatus(),
      tunedHyperParameters:
          (json['TunedHyperParameters'] as Map<String, dynamic>)
              .map((k, e) => MapEntry(k, e as String)),
      failureReason: json['FailureReason'] as String?,
      finalHyperParameterTuningJobObjectiveMetric:
          json['FinalHyperParameterTuningJobObjectiveMetric'] != null
              ? FinalHyperParameterTuningJobObjectiveMetric.fromJson(
                  json['FinalHyperParameterTuningJobObjectiveMetric']
                      as Map<String, dynamic>)
              : null,
      objectiveStatus:
          (json['ObjectiveStatus'] as String?)?.toObjectiveStatus(),
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      trainingJobDefinitionName: json['TrainingJobDefinitionName'] as String?,
      trainingStartTime: timeStampFromJson(json['TrainingStartTime']),
      tuningJobName: json['TuningJobName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final tunedHyperParameters = this.tunedHyperParameters;
    final failureReason = this.failureReason;
    final finalHyperParameterTuningJobObjectiveMetric =
        this.finalHyperParameterTuningJobObjectiveMetric;
    final objectiveStatus = this.objectiveStatus;
    final trainingEndTime = this.trainingEndTime;
    final trainingJobDefinitionName = this.trainingJobDefinitionName;
    final trainingStartTime = this.trainingStartTime;
    final tuningJobName = this.tuningJobName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'TrainingJobArn': trainingJobArn,
      'TrainingJobName': trainingJobName,
      'TrainingJobStatus': trainingJobStatus.toValue(),
      'TunedHyperParameters': tunedHyperParameters,
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalHyperParameterTuningJobObjectiveMetric != null)
        'FinalHyperParameterTuningJobObjectiveMetric':
            finalHyperParameterTuningJobObjectiveMetric,
      if (objectiveStatus != null) 'ObjectiveStatus': objectiveStatus.toValue(),
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (trainingJobDefinitionName != null)
        'TrainingJobDefinitionName': trainingJobDefinitionName,
      if (trainingStartTime != null)
        'TrainingStartTime': unixTimestampToJson(trainingStartTime),
      if (tuningJobName != null) 'TuningJobName': tuningJobName,
    };
  }
}

/// Configures a hyperparameter tuning job.
class HyperParameterTuningJobConfig {
  /// The <a>ResourceLimits</a> object that specifies the maximum number of
  /// training jobs and parallel training jobs for this tuning job.
  final ResourceLimits resourceLimits;

  /// Specifies how hyperparameter tuning chooses the combinations of
  /// hyperparameter values to use for the training job it launches. To use the
  /// Bayesian search strategy, set this to <code>Bayesian</code>. To randomly
  /// search, set it to <code>Random</code>. For information about search
  /// strategies, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
  /// Hyperparameter Tuning Works</a>.
  final HyperParameterTuningJobStrategyType strategy;

  /// The <a>HyperParameterTuningJobObjective</a> object that specifies the
  /// objective metric for this tuning job.
  final HyperParameterTuningJobObjective? hyperParameterTuningJobObjective;

  /// The <a>ParameterRanges</a> object that specifies the ranges of
  /// hyperparameters that this tuning job searches.
  final ParameterRanges? parameterRanges;

  /// Specifies whether to use early stopping for training jobs launched by the
  /// hyperparameter tuning job. This can be one of the following values (the
  /// default value is <code>OFF</code>):
  /// <dl> <dt>OFF</dt> <dd>
  /// Training jobs launched by the hyperparameter tuning job do not use early
  /// stopping.
  /// </dd> <dt>AUTO</dt> <dd>
  /// Amazon SageMaker stops training jobs launched by the hyperparameter tuning
  /// job when they are unlikely to perform better than previously completed
  /// training jobs. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">Stop
  /// Training Jobs Early</a>.
  /// </dd> </dl>
  final TrainingJobEarlyStoppingType? trainingJobEarlyStoppingType;

  /// The tuning job's completion criteria.
  final TuningJobCompletionCriteria? tuningJobCompletionCriteria;

  HyperParameterTuningJobConfig({
    required this.resourceLimits,
    required this.strategy,
    this.hyperParameterTuningJobObjective,
    this.parameterRanges,
    this.trainingJobEarlyStoppingType,
    this.tuningJobCompletionCriteria,
  });

  factory HyperParameterTuningJobConfig.fromJson(Map<String, dynamic> json) {
    return HyperParameterTuningJobConfig(
      resourceLimits: ResourceLimits.fromJson(
          json['ResourceLimits'] as Map<String, dynamic>),
      strategy:
          (json['Strategy'] as String).toHyperParameterTuningJobStrategyType(),
      hyperParameterTuningJobObjective:
          json['HyperParameterTuningJobObjective'] != null
              ? HyperParameterTuningJobObjective.fromJson(
                  json['HyperParameterTuningJobObjective']
                      as Map<String, dynamic>)
              : null,
      parameterRanges: json['ParameterRanges'] != null
          ? ParameterRanges.fromJson(
              json['ParameterRanges'] as Map<String, dynamic>)
          : null,
      trainingJobEarlyStoppingType:
          (json['TrainingJobEarlyStoppingType'] as String?)
              ?.toTrainingJobEarlyStoppingType(),
      tuningJobCompletionCriteria: json['TuningJobCompletionCriteria'] != null
          ? TuningJobCompletionCriteria.fromJson(
              json['TuningJobCompletionCriteria'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final resourceLimits = this.resourceLimits;
    final strategy = this.strategy;
    final hyperParameterTuningJobObjective =
        this.hyperParameterTuningJobObjective;
    final parameterRanges = this.parameterRanges;
    final trainingJobEarlyStoppingType = this.trainingJobEarlyStoppingType;
    final tuningJobCompletionCriteria = this.tuningJobCompletionCriteria;
    return {
      'ResourceLimits': resourceLimits,
      'Strategy': strategy.toValue(),
      if (hyperParameterTuningJobObjective != null)
        'HyperParameterTuningJobObjective': hyperParameterTuningJobObjective,
      if (parameterRanges != null) 'ParameterRanges': parameterRanges,
      if (trainingJobEarlyStoppingType != null)
        'TrainingJobEarlyStoppingType': trainingJobEarlyStoppingType.toValue(),
      if (tuningJobCompletionCriteria != null)
        'TuningJobCompletionCriteria': tuningJobCompletionCriteria,
    };
  }
}

/// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
/// tuning uses the value of this metric to evaluate the training jobs it
/// launches, and returns the training job that results in either the highest or
/// lowest value for this metric, depending on the value you specify for the
/// <code>Type</code> parameter.
class HyperParameterTuningJobObjective {
  /// The name of the metric to use for the objective metric.
  final String metricName;

  /// Whether to minimize or maximize the objective metric.
  final HyperParameterTuningJobObjectiveType type;

  HyperParameterTuningJobObjective({
    required this.metricName,
    required this.type,
  });

  factory HyperParameterTuningJobObjective.fromJson(Map<String, dynamic> json) {
    return HyperParameterTuningJobObjective(
      metricName: json['MetricName'] as String,
      type: (json['Type'] as String).toHyperParameterTuningJobObjectiveType(),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final type = this.type;
    return {
      'MetricName': metricName,
      'Type': type.toValue(),
    };
  }
}

enum HyperParameterTuningJobObjectiveType {
  maximize,
  minimize,
}

extension on HyperParameterTuningJobObjectiveType {
  String toValue() {
    switch (this) {
      case HyperParameterTuningJobObjectiveType.maximize:
        return 'Maximize';
      case HyperParameterTuningJobObjectiveType.minimize:
        return 'Minimize';
    }
  }
}

extension on String {
  HyperParameterTuningJobObjectiveType
      toHyperParameterTuningJobObjectiveType() {
    switch (this) {
      case 'Maximize':
        return HyperParameterTuningJobObjectiveType.maximize;
      case 'Minimize':
        return HyperParameterTuningJobObjectiveType.minimize;
    }
    throw Exception(
        '$this is not known in enum HyperParameterTuningJobObjectiveType');
  }
}

enum HyperParameterTuningJobSortByOptions {
  name,
  status,
  creationTime,
}

extension on HyperParameterTuningJobSortByOptions {
  String toValue() {
    switch (this) {
      case HyperParameterTuningJobSortByOptions.name:
        return 'Name';
      case HyperParameterTuningJobSortByOptions.status:
        return 'Status';
      case HyperParameterTuningJobSortByOptions.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  HyperParameterTuningJobSortByOptions
      toHyperParameterTuningJobSortByOptions() {
    switch (this) {
      case 'Name':
        return HyperParameterTuningJobSortByOptions.name;
      case 'Status':
        return HyperParameterTuningJobSortByOptions.status;
      case 'CreationTime':
        return HyperParameterTuningJobSortByOptions.creationTime;
    }
    throw Exception(
        '$this is not known in enum HyperParameterTuningJobSortByOptions');
  }
}

enum HyperParameterTuningJobStatus {
  completed,
  inProgress,
  failed,
  stopped,
  stopping,
}

extension on HyperParameterTuningJobStatus {
  String toValue() {
    switch (this) {
      case HyperParameterTuningJobStatus.completed:
        return 'Completed';
      case HyperParameterTuningJobStatus.inProgress:
        return 'InProgress';
      case HyperParameterTuningJobStatus.failed:
        return 'Failed';
      case HyperParameterTuningJobStatus.stopped:
        return 'Stopped';
      case HyperParameterTuningJobStatus.stopping:
        return 'Stopping';
    }
  }
}

extension on String {
  HyperParameterTuningJobStatus toHyperParameterTuningJobStatus() {
    switch (this) {
      case 'Completed':
        return HyperParameterTuningJobStatus.completed;
      case 'InProgress':
        return HyperParameterTuningJobStatus.inProgress;
      case 'Failed':
        return HyperParameterTuningJobStatus.failed;
      case 'Stopped':
        return HyperParameterTuningJobStatus.stopped;
      case 'Stopping':
        return HyperParameterTuningJobStatus.stopping;
    }
    throw Exception('$this is not known in enum HyperParameterTuningJobStatus');
  }
}

/// The strategy hyperparameter tuning uses to find the best combination of
/// hyperparameters for your model. Currently, the only supported value is
/// <code>Bayesian</code>.
enum HyperParameterTuningJobStrategyType {
  bayesian,
  random,
}

extension on HyperParameterTuningJobStrategyType {
  String toValue() {
    switch (this) {
      case HyperParameterTuningJobStrategyType.bayesian:
        return 'Bayesian';
      case HyperParameterTuningJobStrategyType.random:
        return 'Random';
    }
  }
}

extension on String {
  HyperParameterTuningJobStrategyType toHyperParameterTuningJobStrategyType() {
    switch (this) {
      case 'Bayesian':
        return HyperParameterTuningJobStrategyType.bayesian;
      case 'Random':
        return HyperParameterTuningJobStrategyType.random;
    }
    throw Exception(
        '$this is not known in enum HyperParameterTuningJobStrategyType');
  }
}

/// Provides summary information about a hyperparameter tuning job.
class HyperParameterTuningJobSummary {
  /// The date and time that the tuning job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the tuning job.
  final String hyperParameterTuningJobArn;

  /// The name of the tuning job.
  final String hyperParameterTuningJobName;

  /// The status of the tuning job.
  final HyperParameterTuningJobStatus hyperParameterTuningJobStatus;

  /// The <a>ObjectiveStatusCounters</a> object that specifies the numbers of
  /// training jobs, categorized by objective metric status, that this tuning job
  /// launched.
  final ObjectiveStatusCounters objectiveStatusCounters;

  /// Specifies the search strategy hyperparameter tuning uses to choose which
  /// hyperparameters to use for each iteration. Currently, the only valid value
  /// is Bayesian.
  final HyperParameterTuningJobStrategyType strategy;

  /// The <a>TrainingJobStatusCounters</a> object that specifies the numbers of
  /// training jobs, categorized by status, that this tuning job launched.
  final TrainingJobStatusCounters trainingJobStatusCounters;

  /// The date and time that the tuning job ended.
  final DateTime? hyperParameterTuningEndTime;

  /// The date and time that the tuning job was modified.
  final DateTime? lastModifiedTime;

  /// The <a>ResourceLimits</a> object that specifies the maximum number of
  /// training jobs and parallel training jobs allowed for this tuning job.
  final ResourceLimits? resourceLimits;

  HyperParameterTuningJobSummary({
    required this.creationTime,
    required this.hyperParameterTuningJobArn,
    required this.hyperParameterTuningJobName,
    required this.hyperParameterTuningJobStatus,
    required this.objectiveStatusCounters,
    required this.strategy,
    required this.trainingJobStatusCounters,
    this.hyperParameterTuningEndTime,
    this.lastModifiedTime,
    this.resourceLimits,
  });

  factory HyperParameterTuningJobSummary.fromJson(Map<String, dynamic> json) {
    return HyperParameterTuningJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String,
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String,
      hyperParameterTuningJobStatus:
          (json['HyperParameterTuningJobStatus'] as String)
              .toHyperParameterTuningJobStatus(),
      objectiveStatusCounters: ObjectiveStatusCounters.fromJson(
          json['ObjectiveStatusCounters'] as Map<String, dynamic>),
      strategy:
          (json['Strategy'] as String).toHyperParameterTuningJobStrategyType(),
      trainingJobStatusCounters: TrainingJobStatusCounters.fromJson(
          json['TrainingJobStatusCounters'] as Map<String, dynamic>),
      hyperParameterTuningEndTime:
          timeStampFromJson(json['HyperParameterTuningEndTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      resourceLimits: json['ResourceLimits'] != null
          ? ResourceLimits.fromJson(
              json['ResourceLimits'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    final hyperParameterTuningJobStatus = this.hyperParameterTuningJobStatus;
    final objectiveStatusCounters = this.objectiveStatusCounters;
    final strategy = this.strategy;
    final trainingJobStatusCounters = this.trainingJobStatusCounters;
    final hyperParameterTuningEndTime = this.hyperParameterTuningEndTime;
    final lastModifiedTime = this.lastModifiedTime;
    final resourceLimits = this.resourceLimits;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
      'HyperParameterTuningJobName': hyperParameterTuningJobName,
      'HyperParameterTuningJobStatus': hyperParameterTuningJobStatus.toValue(),
      'ObjectiveStatusCounters': objectiveStatusCounters,
      'Strategy': strategy.toValue(),
      'TrainingJobStatusCounters': trainingJobStatusCounters,
      if (hyperParameterTuningEndTime != null)
        'HyperParameterTuningEndTime':
            unixTimestampToJson(hyperParameterTuningEndTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (resourceLimits != null) 'ResourceLimits': resourceLimits,
    };
  }
}

/// Specifies the configuration for a hyperparameter tuning job that uses one or
/// more previous hyperparameter tuning jobs as a starting point. The results of
/// previous tuning jobs are used to inform which combinations of
/// hyperparameters to search over in the new tuning job.
///
/// All training jobs launched by the new hyperparameter tuning job are
/// evaluated by using the objective metric, and the training job that performs
/// the best is compared to the best training jobs from the parent tuning jobs.
/// From these, the training job that performs the best as measured by the
/// objective metric is returned as the overall best training job.
/// <note>
/// All training jobs launched by parent hyperparameter tuning jobs and the new
/// hyperparameter tuning jobs count against the limit of training jobs for the
/// tuning job.
/// </note>
class HyperParameterTuningJobWarmStartConfig {
  /// An array of hyperparameter tuning jobs that are used as the starting point
  /// for the new hyperparameter tuning job. For more information about warm
  /// starting a hyperparameter tuning job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-warm-start.html">Using
  /// a Previous Hyperparameter Tuning Job as a Starting Point</a>.
  ///
  /// Hyperparameter tuning jobs created before October 1, 2018 cannot be used as
  /// parent jobs for warm start tuning jobs.
  final List<ParentHyperParameterTuningJob> parentHyperParameterTuningJobs;

  /// Specifies one of the following:
  /// <dl> <dt>IDENTICAL_DATA_AND_ALGORITHM</dt> <dd>
  /// The new hyperparameter tuning job uses the same input data and training
  /// image as the parent tuning jobs. You can change the hyperparameter ranges to
  /// search and the maximum number of training jobs that the hyperparameter
  /// tuning job launches. You cannot use a new version of the training algorithm,
  /// unless the changes in the new version do not affect the algorithm itself.
  /// For example, changes that improve logging or adding support for a different
  /// data format are allowed. You can also change hyperparameters from tunable to
  /// static, and from static to tunable, but the total number of static plus
  /// tunable hyperparameters must remain the same as it is in all parent jobs.
  /// The objective metric for the new tuning job must be the same as for all
  /// parent jobs.
  /// </dd> <dt>TRANSFER_LEARNING</dt> <dd>
  /// The new hyperparameter tuning job can include input data, hyperparameter
  /// ranges, maximum number of concurrent training jobs, and maximum number of
  /// training jobs that are different than those of its parent hyperparameter
  /// tuning jobs. The training image can also be a different version from the
  /// version used in the parent hyperparameter tuning job. You can also change
  /// hyperparameters from tunable to static, and from static to tunable, but the
  /// total number of static plus tunable hyperparameters must remain the same as
  /// it is in all parent jobs. The objective metric for the new tuning job must
  /// be the same as for all parent jobs.
  /// </dd> </dl>
  final HyperParameterTuningJobWarmStartType warmStartType;

  HyperParameterTuningJobWarmStartConfig({
    required this.parentHyperParameterTuningJobs,
    required this.warmStartType,
  });

  factory HyperParameterTuningJobWarmStartConfig.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningJobWarmStartConfig(
      parentHyperParameterTuningJobs: (json['ParentHyperParameterTuningJobs']
              as List)
          .whereNotNull()
          .map((e) =>
              ParentHyperParameterTuningJob.fromJson(e as Map<String, dynamic>))
          .toList(),
      warmStartType: (json['WarmStartType'] as String)
          .toHyperParameterTuningJobWarmStartType(),
    );
  }

  Map<String, dynamic> toJson() {
    final parentHyperParameterTuningJobs = this.parentHyperParameterTuningJobs;
    final warmStartType = this.warmStartType;
    return {
      'ParentHyperParameterTuningJobs': parentHyperParameterTuningJobs,
      'WarmStartType': warmStartType.toValue(),
    };
  }
}

enum HyperParameterTuningJobWarmStartType {
  identicalDataAndAlgorithm,
  transferLearning,
}

extension on HyperParameterTuningJobWarmStartType {
  String toValue() {
    switch (this) {
      case HyperParameterTuningJobWarmStartType.identicalDataAndAlgorithm:
        return 'IdenticalDataAndAlgorithm';
      case HyperParameterTuningJobWarmStartType.transferLearning:
        return 'TransferLearning';
    }
  }
}

extension on String {
  HyperParameterTuningJobWarmStartType
      toHyperParameterTuningJobWarmStartType() {
    switch (this) {
      case 'IdenticalDataAndAlgorithm':
        return HyperParameterTuningJobWarmStartType.identicalDataAndAlgorithm;
      case 'TransferLearning':
        return HyperParameterTuningJobWarmStartType.transferLearning;
    }
    throw Exception(
        '$this is not known in enum HyperParameterTuningJobWarmStartType');
  }
}

/// A SageMaker image. A SageMaker image represents a set of container images
/// that are derived from a common base container image. Each of these container
/// images is represented by a SageMaker <code>ImageVersion</code>.
class Image {
  /// When the image was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the image.
  final String imageArn;

  /// The name of the image.
  final String imageName;

  /// The status of the image.
  final ImageStatus imageStatus;

  /// When the image was last modified.
  final DateTime lastModifiedTime;

  /// The description of the image.
  final String? description;

  /// The name of the image as displayed.
  final String? displayName;

  /// When a create, update, or delete operation fails, the reason for the
  /// failure.
  final String? failureReason;

  Image({
    required this.creationTime,
    required this.imageArn,
    required this.imageName,
    required this.imageStatus,
    required this.lastModifiedTime,
    this.description,
    this.displayName,
    this.failureReason,
  });

  factory Image.fromJson(Map<String, dynamic> json) {
    return Image(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      imageArn: json['ImageArn'] as String,
      imageName: json['ImageName'] as String,
      imageStatus: (json['ImageStatus'] as String).toImageStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final imageArn = this.imageArn;
    final imageName = this.imageName;
    final imageStatus = this.imageStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final description = this.description;
    final displayName = this.displayName;
    final failureReason = this.failureReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ImageArn': imageArn,
      'ImageName': imageName,
      'ImageStatus': imageStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// Specifies whether the model container is in Amazon ECR or a private Docker
/// registry accessible from your Amazon Virtual Private Cloud (VPC).
class ImageConfig {
  /// Set this to one of the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>Platform</code> - The model image is hosted in Amazon ECR.
  /// </li>
  /// <li>
  /// <code>Vpc</code> - The model image is hosted in a private Docker registry in
  /// your VPC.
  /// </li>
  /// </ul>
  final RepositoryAccessMode repositoryAccessMode;

  /// (Optional) Specifies an authentication configuration for the private docker
  /// registry where your model image is hosted. Specify a value for this property
  /// only if you specified <code>Vpc</code> as the value for the
  /// <code>RepositoryAccessMode</code> field, and the private Docker registry
  /// where the model image is hosted requires authentication.
  final RepositoryAuthConfig? repositoryAuthConfig;

  ImageConfig({
    required this.repositoryAccessMode,
    this.repositoryAuthConfig,
  });

  factory ImageConfig.fromJson(Map<String, dynamic> json) {
    return ImageConfig(
      repositoryAccessMode:
          (json['RepositoryAccessMode'] as String).toRepositoryAccessMode(),
      repositoryAuthConfig: json['RepositoryAuthConfig'] != null
          ? RepositoryAuthConfig.fromJson(
              json['RepositoryAuthConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryAccessMode = this.repositoryAccessMode;
    final repositoryAuthConfig = this.repositoryAuthConfig;
    return {
      'RepositoryAccessMode': repositoryAccessMode.toValue(),
      if (repositoryAuthConfig != null)
        'RepositoryAuthConfig': repositoryAuthConfig,
    };
  }
}

enum ImageSortBy {
  creationTime,
  lastModifiedTime,
  imageName,
}

extension on ImageSortBy {
  String toValue() {
    switch (this) {
      case ImageSortBy.creationTime:
        return 'CREATION_TIME';
      case ImageSortBy.lastModifiedTime:
        return 'LAST_MODIFIED_TIME';
      case ImageSortBy.imageName:
        return 'IMAGE_NAME';
    }
  }
}

extension on String {
  ImageSortBy toImageSortBy() {
    switch (this) {
      case 'CREATION_TIME':
        return ImageSortBy.creationTime;
      case 'LAST_MODIFIED_TIME':
        return ImageSortBy.lastModifiedTime;
      case 'IMAGE_NAME':
        return ImageSortBy.imageName;
    }
    throw Exception('$this is not known in enum ImageSortBy');
  }
}

enum ImageSortOrder {
  ascending,
  descending,
}

extension on ImageSortOrder {
  String toValue() {
    switch (this) {
      case ImageSortOrder.ascending:
        return 'ASCENDING';
      case ImageSortOrder.descending:
        return 'DESCENDING';
    }
  }
}

extension on String {
  ImageSortOrder toImageSortOrder() {
    switch (this) {
      case 'ASCENDING':
        return ImageSortOrder.ascending;
      case 'DESCENDING':
        return ImageSortOrder.descending;
    }
    throw Exception('$this is not known in enum ImageSortOrder');
  }
}

enum ImageStatus {
  creating,
  created,
  createFailed,
  updating,
  updateFailed,
  deleting,
  deleteFailed,
}

extension on ImageStatus {
  String toValue() {
    switch (this) {
      case ImageStatus.creating:
        return 'CREATING';
      case ImageStatus.created:
        return 'CREATED';
      case ImageStatus.createFailed:
        return 'CREATE_FAILED';
      case ImageStatus.updating:
        return 'UPDATING';
      case ImageStatus.updateFailed:
        return 'UPDATE_FAILED';
      case ImageStatus.deleting:
        return 'DELETING';
      case ImageStatus.deleteFailed:
        return 'DELETE_FAILED';
    }
  }
}

extension on String {
  ImageStatus toImageStatus() {
    switch (this) {
      case 'CREATING':
        return ImageStatus.creating;
      case 'CREATED':
        return ImageStatus.created;
      case 'CREATE_FAILED':
        return ImageStatus.createFailed;
      case 'UPDATING':
        return ImageStatus.updating;
      case 'UPDATE_FAILED':
        return ImageStatus.updateFailed;
      case 'DELETING':
        return ImageStatus.deleting;
      case 'DELETE_FAILED':
        return ImageStatus.deleteFailed;
    }
    throw Exception('$this is not known in enum ImageStatus');
  }
}

/// A version of a SageMaker <code>Image</code>. A version represents an
/// existing container image.
class ImageVersion {
  /// When the version was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the image the version is based on.
  final String imageArn;

  /// The ARN of the version.
  final String imageVersionArn;

  /// The status of the version.
  final ImageVersionStatus imageVersionStatus;

  /// When the version was last modified.
  final DateTime lastModifiedTime;

  /// The version number.
  final int version;

  /// When a create or delete operation fails, the reason for the failure.
  final String? failureReason;

  ImageVersion({
    required this.creationTime,
    required this.imageArn,
    required this.imageVersionArn,
    required this.imageVersionStatus,
    required this.lastModifiedTime,
    required this.version,
    this.failureReason,
  });

  factory ImageVersion.fromJson(Map<String, dynamic> json) {
    return ImageVersion(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      imageArn: json['ImageArn'] as String,
      imageVersionArn: json['ImageVersionArn'] as String,
      imageVersionStatus:
          (json['ImageVersionStatus'] as String).toImageVersionStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      version: json['Version'] as int,
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final imageArn = this.imageArn;
    final imageVersionArn = this.imageVersionArn;
    final imageVersionStatus = this.imageVersionStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final version = this.version;
    final failureReason = this.failureReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ImageArn': imageArn,
      'ImageVersionArn': imageVersionArn,
      'ImageVersionStatus': imageVersionStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'Version': version,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

enum ImageVersionSortBy {
  creationTime,
  lastModifiedTime,
  version,
}

extension on ImageVersionSortBy {
  String toValue() {
    switch (this) {
      case ImageVersionSortBy.creationTime:
        return 'CREATION_TIME';
      case ImageVersionSortBy.lastModifiedTime:
        return 'LAST_MODIFIED_TIME';
      case ImageVersionSortBy.version:
        return 'VERSION';
    }
  }
}

extension on String {
  ImageVersionSortBy toImageVersionSortBy() {
    switch (this) {
      case 'CREATION_TIME':
        return ImageVersionSortBy.creationTime;
      case 'LAST_MODIFIED_TIME':
        return ImageVersionSortBy.lastModifiedTime;
      case 'VERSION':
        return ImageVersionSortBy.version;
    }
    throw Exception('$this is not known in enum ImageVersionSortBy');
  }
}

enum ImageVersionSortOrder {
  ascending,
  descending,
}

extension on ImageVersionSortOrder {
  String toValue() {
    switch (this) {
      case ImageVersionSortOrder.ascending:
        return 'ASCENDING';
      case ImageVersionSortOrder.descending:
        return 'DESCENDING';
    }
  }
}

extension on String {
  ImageVersionSortOrder toImageVersionSortOrder() {
    switch (this) {
      case 'ASCENDING':
        return ImageVersionSortOrder.ascending;
      case 'DESCENDING':
        return ImageVersionSortOrder.descending;
    }
    throw Exception('$this is not known in enum ImageVersionSortOrder');
  }
}

enum ImageVersionStatus {
  creating,
  created,
  createFailed,
  deleting,
  deleteFailed,
}

extension on ImageVersionStatus {
  String toValue() {
    switch (this) {
      case ImageVersionStatus.creating:
        return 'CREATING';
      case ImageVersionStatus.created:
        return 'CREATED';
      case ImageVersionStatus.createFailed:
        return 'CREATE_FAILED';
      case ImageVersionStatus.deleting:
        return 'DELETING';
      case ImageVersionStatus.deleteFailed:
        return 'DELETE_FAILED';
    }
  }
}

extension on String {
  ImageVersionStatus toImageVersionStatus() {
    switch (this) {
      case 'CREATING':
        return ImageVersionStatus.creating;
      case 'CREATED':
        return ImageVersionStatus.created;
      case 'CREATE_FAILED':
        return ImageVersionStatus.createFailed;
      case 'DELETING':
        return ImageVersionStatus.deleting;
      case 'DELETE_FAILED':
        return ImageVersionStatus.deleteFailed;
    }
    throw Exception('$this is not known in enum ImageVersionStatus');
  }
}

/// Specifies details about how containers in a multi-container endpoint are
/// run.
class InferenceExecutionConfig {
  /// How containers in a multi-container are run. The following values are valid.
  ///
  /// <ul>
  /// <li>
  /// <code>SERIAL</code> - Containers run as a serial pipeline.
  /// </li>
  /// <li>
  /// <code>DIRECT</code> - Only the individual container that you specify is run.
  /// </li>
  /// </ul>
  final InferenceExecutionMode mode;

  InferenceExecutionConfig({
    required this.mode,
  });

  factory InferenceExecutionConfig.fromJson(Map<String, dynamic> json) {
    return InferenceExecutionConfig(
      mode: (json['Mode'] as String).toInferenceExecutionMode(),
    );
  }

  Map<String, dynamic> toJson() {
    final mode = this.mode;
    return {
      'Mode': mode.toValue(),
    };
  }
}

enum InferenceExecutionMode {
  serial,
  direct,
}

extension on InferenceExecutionMode {
  String toValue() {
    switch (this) {
      case InferenceExecutionMode.serial:
        return 'Serial';
      case InferenceExecutionMode.direct:
        return 'Direct';
    }
  }
}

extension on String {
  InferenceExecutionMode toInferenceExecutionMode() {
    switch (this) {
      case 'Serial':
        return InferenceExecutionMode.serial;
      case 'Direct':
        return InferenceExecutionMode.direct;
    }
    throw Exception('$this is not known in enum InferenceExecutionMode');
  }
}

/// Defines how to perform inference generation after a training job is run.
class InferenceSpecification {
  /// The Amazon ECR registry path of the Docker image that contains the inference
  /// code.
  final List<ModelPackageContainerDefinition> containers;

  /// The supported MIME types for the input data.
  final List<String> supportedContentTypes;

  /// The supported MIME types for the output data.
  final List<String> supportedResponseMIMETypes;

  /// A list of the instance types that are used to generate inferences in
  /// real-time.
  ///
  /// This parameter is required for unversioned models, and optional for
  /// versioned models.
  final List<ProductionVariantInstanceType>?
      supportedRealtimeInferenceInstanceTypes;

  /// A list of the instance types on which a transformation job can be run or on
  /// which an endpoint can be deployed.
  ///
  /// This parameter is required for unversioned models, and optional for
  /// versioned models.
  final List<TransformInstanceType>? supportedTransformInstanceTypes;

  InferenceSpecification({
    required this.containers,
    required this.supportedContentTypes,
    required this.supportedResponseMIMETypes,
    this.supportedRealtimeInferenceInstanceTypes,
    this.supportedTransformInstanceTypes,
  });

  factory InferenceSpecification.fromJson(Map<String, dynamic> json) {
    return InferenceSpecification(
      containers: (json['Containers'] as List)
          .whereNotNull()
          .map((e) => ModelPackageContainerDefinition.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      supportedContentTypes: (json['SupportedContentTypes'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
      supportedResponseMIMETypes: (json['SupportedResponseMIMETypes'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
      supportedRealtimeInferenceInstanceTypes:
          (json['SupportedRealtimeInferenceInstanceTypes'] as List?)
              ?.whereNotNull()
              .map((e) => (e as String).toProductionVariantInstanceType())
              .toList(),
      supportedTransformInstanceTypes:
          (json['SupportedTransformInstanceTypes'] as List?)
              ?.whereNotNull()
              .map((e) => (e as String).toTransformInstanceType())
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final containers = this.containers;
    final supportedContentTypes = this.supportedContentTypes;
    final supportedResponseMIMETypes = this.supportedResponseMIMETypes;
    final supportedRealtimeInferenceInstanceTypes =
        this.supportedRealtimeInferenceInstanceTypes;
    final supportedTransformInstanceTypes =
        this.supportedTransformInstanceTypes;
    return {
      'Containers': containers,
      'SupportedContentTypes': supportedContentTypes,
      'SupportedResponseMIMETypes': supportedResponseMIMETypes,
      if (supportedRealtimeInferenceInstanceTypes != null)
        'SupportedRealtimeInferenceInstanceTypes':
            supportedRealtimeInferenceInstanceTypes
                .map((e) => e.toValue())
                .toList(),
      if (supportedTransformInstanceTypes != null)
        'SupportedTransformInstanceTypes':
            supportedTransformInstanceTypes.map((e) => e.toValue()).toList(),
    };
  }
}

/// Contains information about the location of input model artifacts, the name
/// and shape of the expected data inputs, and the framework in which the model
/// was trained.
class InputConfig {
  /// Specifies the name and shape of the expected data inputs for your trained
  /// model with a JSON dictionary form. The data inputs are
  /// <a>InputConfig$Framework</a> specific.
  ///
  /// <ul>
  /// <li>
  /// <code>TensorFlow</code>: You must specify the name and shape (NHWC format)
  /// of the expected data inputs using a dictionary format for your trained
  /// model. The dictionary formats required for the console and CLI are
  /// different.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input":[1,1024,1024,3]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input\":[1,1024,1024,3]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Examples for two inputs:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"data1": [1,28,28,1],
  /// "data2":[1,28,28,1]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"data1\": [1,28,28,1],
  /// \"data2\":[1,28,28,1]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <code>KERAS</code>: You must specify the name and shape (NCHW format) of
  /// expected data inputs using a dictionary format for your trained model. Note
  /// that while Keras model artifacts should be uploaded in NHWC (channel-last)
  /// format, <code>DataInputConfig</code> should be specified in NCHW
  /// (channel-first) format. The dictionary formats required for the console and
  /// CLI are different.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input_1":[1,3,224,224]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input_1\":[1,3,224,224]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Examples for two inputs:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input_1": [1,3,224,224],
  /// "input_2":[1,3,224,224]} </code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input_1\": [1,3,224,224],
  /// \"input_2\":[1,3,224,224]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <code>MXNET/ONNX/DARKNET</code>: You must specify the name and shape (NCHW
  /// format) of the expected data inputs in order using a dictionary format for
  /// your trained model. The dictionary formats required for the console and CLI
  /// are different.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"data":[1,3,1024,1024]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"data\":[1,3,1024,1024]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Examples for two inputs:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"var1": [1,1,28,28], "var2":[1,1,28,28]}
  /// </code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"var1\": [1,1,28,28], \"var2\":[1,1,28,28]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <code>PyTorch</code>: You can either specify the name and shape (NCHW
  /// format) of expected data inputs in order using a dictionary format for your
  /// trained model or you can specify the shape only using a list format. The
  /// dictionary formats required for the console and CLI are different. The list
  /// formats for the console and CLI are the same.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input in dictionary format:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input0":[1,3,224,224]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input0\":[1,3,224,224]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Example for one input in list format: <code>[[1,3,224,224]]</code>
  /// </li>
  /// <li>
  /// Examples for two inputs in dictionary format:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input0":[1,3,224,224],
  /// "input1":[1,3,224,224]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input0\":[1,3,224,224], \"input1\":[1,3,224,224]}
  /// </code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Example for two inputs in list format: <code>[[1,3,224,224],
  /// [1,3,224,224]]</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>XGBOOST</code>: input data name and shape are not needed.
  /// </li>
  /// </ul>
  /// <code>DataInputConfig</code> supports the following parameters for
  /// <code>CoreML</code> <a>OutputConfig$TargetDevice</a> (ML Model format):
  ///
  /// <ul>
  /// <li>
  /// <code>shape</code>: Input shape, for example <code>{"input_1": {"shape":
  /// [1,224,224,3]}}</code>. In addition to static input shapes, CoreML converter
  /// supports Flexible input shapes:
  ///
  /// <ul>
  /// <li>
  /// Range Dimension. You can use the Range Dimension feature if you know the
  /// input shape will be within some specific interval in that dimension, for
  /// example: <code>{"input_1": {"shape": ["1..10", 224, 224, 3]}}</code>
  /// </li>
  /// <li>
  /// Enumerated shapes. Sometimes, the models are trained to work only on a
  /// select set of inputs. You can enumerate all supported input shapes, for
  /// example: <code>{"input_1": {"shape": [[1, 224, 224, 3], [1, 160, 160,
  /// 3]]}}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>default_shape</code>: Default input shape. You can set a default shape
  /// during conversion for both Range Dimension and Enumerated Shapes. For
  /// example <code>{"input_1": {"shape": ["1..10", 224, 224, 3], "default_shape":
  /// [1, 224, 224, 3]}}</code>
  /// </li>
  /// <li>
  /// <code>type</code>: Input type. Allowed values: <code>Image</code> and
  /// <code>Tensor</code>. By default, the converter generates an ML Model with
  /// inputs of type Tensor (MultiArray). User can set input type to be Image.
  /// Image input type requires additional input parameters such as
  /// <code>bias</code> and <code>scale</code>.
  /// </li>
  /// <li>
  /// <code>bias</code>: If the input type is an Image, you need to provide the
  /// bias vector.
  /// </li>
  /// <li>
  /// <code>scale</code>: If the input type is an Image, you need to provide a
  /// scale factor.
  /// </li>
  /// </ul>
  /// CoreML <code>ClassifierConfig</code> parameters can be specified using
  /// <a>OutputConfig$CompilerOptions</a>. CoreML converter supports Tensorflow
  /// and PyTorch models. CoreML conversion examples:
  ///
  /// <ul>
  /// <li>
  /// Tensor type input:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"input_1": {"shape": [[1,224,224,3],
  /// [1,160,160,3]], "default_shape": [1,224,224,3]}}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Tensor type input without input name (PyTorch):
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]],
  /// "default_shape": [1,3,224,224]}]</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Image type input:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"input_1": {"shape": [[1,224,224,3],
  /// [1,160,160,3]], "default_shape": [1,224,224,3], "type": "Image", "bias":
  /// [-1,-1,-1], "scale": 0.007843137255}}</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Image type input without input name (PyTorch):
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]],
  /// "default_shape": [1,3,224,224], "type": "Image", "bias": [-1,-1,-1],
  /// "scale": 0.007843137255}]</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// Depending on the model format, <code>DataInputConfig</code> requires the
  /// following parameters for <code>ml_eia2</code> <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-TargetDevice">OutputConfig:TargetDevice</a>.
  ///
  /// <ul>
  /// <li>
  /// For TensorFlow models saved in the SavedModel format, specify the input
  /// names from <code>signature_def_key</code> and the input model shapes for
  /// <code>DataInputConfig</code>. Specify the <code>signature_def_key</code> in
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions">
  /// <code>OutputConfig:CompilerOptions</code> </a> if the model does not use
  /// TensorFlow's default signature def key. For example:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"inputs": [1, 224, 224, 3]}</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"signature_def_key": "serving_custom"}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// For TensorFlow models saved as a frozen graph, specify the input tensor
  /// names and shapes in <code>DataInputConfig</code> and the output tensor names
  /// for <code>output_names</code> in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions">
  /// <code>OutputConfig:CompilerOptions</code> </a>. For example:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"input_tensor:0": [1, 224, 224, 3]}</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"output_names": ["output_tensor:0"]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  final String dataInputConfig;

  /// Identifies the framework in which the model was trained. For example:
  /// TENSORFLOW.
  final Framework framework;

  /// The S3 path where the model artifacts, which result from model training, are
  /// stored. This path must point to a single gzip compressed tar archive
  /// (.tar.gz suffix).
  final String s3Uri;

  /// Specifies the framework version to use.
  ///
  /// This API field is only supported for PyTorch framework versions
  /// <code>1.4</code>, <code>1.5</code>, and <code>1.6</code> for cloud instance
  /// target devices: <code>ml_c4</code>, <code>ml_c5</code>, <code>ml_m4</code>,
  /// <code>ml_m5</code>, <code>ml_p2</code>, <code>ml_p3</code>, and
  /// <code>ml_g4dn</code>.
  final String? frameworkVersion;

  InputConfig({
    required this.dataInputConfig,
    required this.framework,
    required this.s3Uri,
    this.frameworkVersion,
  });

  factory InputConfig.fromJson(Map<String, dynamic> json) {
    return InputConfig(
      dataInputConfig: json['DataInputConfig'] as String,
      framework: (json['Framework'] as String).toFramework(),
      s3Uri: json['S3Uri'] as String,
      frameworkVersion: json['FrameworkVersion'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final dataInputConfig = this.dataInputConfig;
    final framework = this.framework;
    final s3Uri = this.s3Uri;
    final frameworkVersion = this.frameworkVersion;
    return {
      'DataInputConfig': dataInputConfig,
      'Framework': framework.toValue(),
      'S3Uri': s3Uri,
      if (frameworkVersion != null) 'FrameworkVersion': frameworkVersion,
    };
  }
}

enum InputMode {
  pipe,
  file,
}

extension on InputMode {
  String toValue() {
    switch (this) {
      case InputMode.pipe:
        return 'Pipe';
      case InputMode.file:
        return 'File';
    }
  }
}

extension on String {
  InputMode toInputMode() {
    switch (this) {
      case 'Pipe':
        return InputMode.pipe;
      case 'File':
        return InputMode.file;
    }
    throw Exception('$this is not known in enum InputMode');
  }
}

enum InstanceType {
  mlT2Medium,
  mlT2Large,
  mlT2Xlarge,
  mlT2_2xlarge,
  mlT3Medium,
  mlT3Large,
  mlT3Xlarge,
  mlT3_2xlarge,
  mlM4Xlarge,
  mlM4_2xlarge,
  mlM4_4xlarge,
  mlM4_10xlarge,
  mlM4_16xlarge,
  mlM5Xlarge,
  mlM5_2xlarge,
  mlM5_4xlarge,
  mlM5_12xlarge,
  mlM5_24xlarge,
  mlC4Xlarge,
  mlC4_2xlarge,
  mlC4_4xlarge,
  mlC4_8xlarge,
  mlC5Xlarge,
  mlC5_2xlarge,
  mlC5_4xlarge,
  mlC5_9xlarge,
  mlC5_18xlarge,
  mlC5dXlarge,
  mlC5d_2xlarge,
  mlC5d_4xlarge,
  mlC5d_9xlarge,
  mlC5d_18xlarge,
  mlP2Xlarge,
  mlP2_8xlarge,
  mlP2_16xlarge,
  mlP3_2xlarge,
  mlP3_8xlarge,
  mlP3_16xlarge,
}

extension on InstanceType {
  String toValue() {
    switch (this) {
      case InstanceType.mlT2Medium:
        return 'ml.t2.medium';
      case InstanceType.mlT2Large:
        return 'ml.t2.large';
      case InstanceType.mlT2Xlarge:
        return 'ml.t2.xlarge';
      case InstanceType.mlT2_2xlarge:
        return 'ml.t2.2xlarge';
      case InstanceType.mlT3Medium:
        return 'ml.t3.medium';
      case InstanceType.mlT3Large:
        return 'ml.t3.large';
      case InstanceType.mlT3Xlarge:
        return 'ml.t3.xlarge';
      case InstanceType.mlT3_2xlarge:
        return 'ml.t3.2xlarge';
      case InstanceType.mlM4Xlarge:
        return 'ml.m4.xlarge';
      case InstanceType.mlM4_2xlarge:
        return 'ml.m4.2xlarge';
      case InstanceType.mlM4_4xlarge:
        return 'ml.m4.4xlarge';
      case InstanceType.mlM4_10xlarge:
        return 'ml.m4.10xlarge';
      case InstanceType.mlM4_16xlarge:
        return 'ml.m4.16xlarge';
      case InstanceType.mlM5Xlarge:
        return 'ml.m5.xlarge';
      case InstanceType.mlM5_2xlarge:
        return 'ml.m5.2xlarge';
      case InstanceType.mlM5_4xlarge:
        return 'ml.m5.4xlarge';
      case InstanceType.mlM5_12xlarge:
        return 'ml.m5.12xlarge';
      case InstanceType.mlM5_24xlarge:
        return 'ml.m5.24xlarge';
      case InstanceType.mlC4Xlarge:
        return 'ml.c4.xlarge';
      case InstanceType.mlC4_2xlarge:
        return 'ml.c4.2xlarge';
      case InstanceType.mlC4_4xlarge:
        return 'ml.c4.4xlarge';
      case InstanceType.mlC4_8xlarge:
        return 'ml.c4.8xlarge';
      case InstanceType.mlC5Xlarge:
        return 'ml.c5.xlarge';
      case InstanceType.mlC5_2xlarge:
        return 'ml.c5.2xlarge';
      case InstanceType.mlC5_4xlarge:
        return 'ml.c5.4xlarge';
      case InstanceType.mlC5_9xlarge:
        return 'ml.c5.9xlarge';
      case InstanceType.mlC5_18xlarge:
        return 'ml.c5.18xlarge';
      case InstanceType.mlC5dXlarge:
        return 'ml.c5d.xlarge';
      case InstanceType.mlC5d_2xlarge:
        return 'ml.c5d.2xlarge';
      case InstanceType.mlC5d_4xlarge:
        return 'ml.c5d.4xlarge';
      case InstanceType.mlC5d_9xlarge:
        return 'ml.c5d.9xlarge';
      case InstanceType.mlC5d_18xlarge:
        return 'ml.c5d.18xlarge';
      case InstanceType.mlP2Xlarge:
        return 'ml.p2.xlarge';
      case InstanceType.mlP2_8xlarge:
        return 'ml.p2.8xlarge';
      case InstanceType.mlP2_16xlarge:
        return 'ml.p2.16xlarge';
      case InstanceType.mlP3_2xlarge:
        return 'ml.p3.2xlarge';
      case InstanceType.mlP3_8xlarge:
        return 'ml.p3.8xlarge';
      case InstanceType.mlP3_16xlarge:
        return 'ml.p3.16xlarge';
    }
  }
}

extension on String {
  InstanceType toInstanceType() {
    switch (this) {
      case 'ml.t2.medium':
        return InstanceType.mlT2Medium;
      case 'ml.t2.large':
        return InstanceType.mlT2Large;
      case 'ml.t2.xlarge':
        return InstanceType.mlT2Xlarge;
      case 'ml.t2.2xlarge':
        return InstanceType.mlT2_2xlarge;
      case 'ml.t3.medium':
        return InstanceType.mlT3Medium;
      case 'ml.t3.large':
        return InstanceType.mlT3Large;
      case 'ml.t3.xlarge':
        return InstanceType.mlT3Xlarge;
      case 'ml.t3.2xlarge':
        return InstanceType.mlT3_2xlarge;
      case 'ml.m4.xlarge':
        return InstanceType.mlM4Xlarge;
      case 'ml.m4.2xlarge':
        return InstanceType.mlM4_2xlarge;
      case 'ml.m4.4xlarge':
        return InstanceType.mlM4_4xlarge;
      case 'ml.m4.10xlarge':
        return InstanceType.mlM4_10xlarge;
      case 'ml.m4.16xlarge':
        return InstanceType.mlM4_16xlarge;
      case 'ml.m5.xlarge':
        return InstanceType.mlM5Xlarge;
      case 'ml.m5.2xlarge':
        return InstanceType.mlM5_2xlarge;
      case 'ml.m5.4xlarge':
        return InstanceType.mlM5_4xlarge;
      case 'ml.m5.12xlarge':
        return InstanceType.mlM5_12xlarge;
      case 'ml.m5.24xlarge':
        return InstanceType.mlM5_24xlarge;
      case 'ml.c4.xlarge':
        return InstanceType.mlC4Xlarge;
      case 'ml.c4.2xlarge':
        return InstanceType.mlC4_2xlarge;
      case 'ml.c4.4xlarge':
        return InstanceType.mlC4_4xlarge;
      case 'ml.c4.8xlarge':
        return InstanceType.mlC4_8xlarge;
      case 'ml.c5.xlarge':
        return InstanceType.mlC5Xlarge;
      case 'ml.c5.2xlarge':
        return InstanceType.mlC5_2xlarge;
      case 'ml.c5.4xlarge':
        return InstanceType.mlC5_4xlarge;
      case 'ml.c5.9xlarge':
        return InstanceType.mlC5_9xlarge;
      case 'ml.c5.18xlarge':
        return InstanceType.mlC5_18xlarge;
      case 'ml.c5d.xlarge':
        return InstanceType.mlC5dXlarge;
      case 'ml.c5d.2xlarge':
        return InstanceType.mlC5d_2xlarge;
      case 'ml.c5d.4xlarge':
        return InstanceType.mlC5d_4xlarge;
      case 'ml.c5d.9xlarge':
        return InstanceType.mlC5d_9xlarge;
      case 'ml.c5d.18xlarge':
        return InstanceType.mlC5d_18xlarge;
      case 'ml.p2.xlarge':
        return InstanceType.mlP2Xlarge;
      case 'ml.p2.8xlarge':
        return InstanceType.mlP2_8xlarge;
      case 'ml.p2.16xlarge':
        return InstanceType.mlP2_16xlarge;
      case 'ml.p3.2xlarge':
        return InstanceType.mlP3_2xlarge;
      case 'ml.p3.8xlarge':
        return InstanceType.mlP3_8xlarge;
      case 'ml.p3.16xlarge':
        return InstanceType.mlP3_16xlarge;
    }
    throw Exception('$this is not known in enum InstanceType');
  }
}

/// For a hyperparameter of the integer type, specifies the range that a
/// hyperparameter tuning job searches.
class IntegerParameterRange {
  /// The maximum value of the hyperparameter to search.
  final String maxValue;

  /// The minimum value of the hyperparameter to search.
  final String minValue;

  /// The name of the hyperparameter to search.
  final String name;

  /// The scale that hyperparameter tuning uses to search the hyperparameter
  /// range. For information about choosing a hyperparameter scale, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter
  /// Scaling</a>. One of the following values:
  /// <dl> <dt>Auto</dt> <dd>
  /// Amazon SageMaker hyperparameter tuning chooses the best scale for the
  /// hyperparameter.
  /// </dd> <dt>Linear</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a linear scale.
  /// </dd> <dt>Logarithmic</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a logarithmic scale.
  ///
  /// Logarithmic scaling works only for ranges that have only values greater than
  /// 0.
  /// </dd> </dl>
  final HyperParameterScalingType? scalingType;

  IntegerParameterRange({
    required this.maxValue,
    required this.minValue,
    required this.name,
    this.scalingType,
  });

  factory IntegerParameterRange.fromJson(Map<String, dynamic> json) {
    return IntegerParameterRange(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
      name: json['Name'] as String,
      scalingType:
          (json['ScalingType'] as String?)?.toHyperParameterScalingType(),
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    final name = this.name;
    final scalingType = this.scalingType;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
      'Name': name,
      if (scalingType != null) 'ScalingType': scalingType.toValue(),
    };
  }
}

/// Defines the possible values for an integer hyperparameter.
class IntegerParameterRangeSpecification {
  /// The maximum integer value allowed.
  final String maxValue;

  /// The minimum integer value allowed.
  final String minValue;

  IntegerParameterRangeSpecification({
    required this.maxValue,
    required this.minValue,
  });

  factory IntegerParameterRangeSpecification.fromJson(
      Map<String, dynamic> json) {
    return IntegerParameterRangeSpecification(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
    };
  }
}

enum JoinSource {
  input,
  none,
}

extension on JoinSource {
  String toValue() {
    switch (this) {
      case JoinSource.input:
        return 'Input';
      case JoinSource.none:
        return 'None';
    }
  }
}

extension on String {
  JoinSource toJoinSource() {
    switch (this) {
      case 'Input':
        return JoinSource.input;
      case 'None':
        return JoinSource.none;
    }
    throw Exception('$this is not known in enum JoinSource');
  }
}

/// The JupyterServer app settings.
class JupyterServerAppSettings {
  /// The default instance type and the Amazon Resource Name (ARN) of the default
  /// SageMaker image used by the JupyterServer app.
  final ResourceSpec? defaultResourceSpec;

  JupyterServerAppSettings({
    this.defaultResourceSpec,
  });

  factory JupyterServerAppSettings.fromJson(Map<String, dynamic> json) {
    return JupyterServerAppSettings(
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

/// The KernelGateway app settings.
class KernelGatewayAppSettings {
  /// A list of custom SageMaker images that are configured to run as a
  /// KernelGateway app.
  final List<CustomImage>? customImages;

  /// The default instance type and the Amazon Resource Name (ARN) of the default
  /// SageMaker image used by the KernelGateway app.
  final ResourceSpec? defaultResourceSpec;

  KernelGatewayAppSettings({
    this.customImages,
    this.defaultResourceSpec,
  });

  factory KernelGatewayAppSettings.fromJson(Map<String, dynamic> json) {
    return KernelGatewayAppSettings(
      customImages: (json['CustomImages'] as List?)
          ?.whereNotNull()
          .map((e) => CustomImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final customImages = this.customImages;
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (customImages != null) 'CustomImages': customImages,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

/// The configuration for the file system and kernels in a SageMaker image
/// running as a KernelGateway app.
class KernelGatewayImageConfig {
  /// The specification of the Jupyter kernels in the image.
  final List<KernelSpec> kernelSpecs;

  /// The Amazon Elastic File System (EFS) storage configuration for a SageMaker
  /// image.
  final FileSystemConfig? fileSystemConfig;

  KernelGatewayImageConfig({
    required this.kernelSpecs,
    this.fileSystemConfig,
  });

  factory KernelGatewayImageConfig.fromJson(Map<String, dynamic> json) {
    return KernelGatewayImageConfig(
      kernelSpecs: (json['KernelSpecs'] as List)
          .whereNotNull()
          .map((e) => KernelSpec.fromJson(e as Map<String, dynamic>))
          .toList(),
      fileSystemConfig: json['FileSystemConfig'] != null
          ? FileSystemConfig.fromJson(
              json['FileSystemConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final kernelSpecs = this.kernelSpecs;
    final fileSystemConfig = this.fileSystemConfig;
    return {
      'KernelSpecs': kernelSpecs,
      if (fileSystemConfig != null) 'FileSystemConfig': fileSystemConfig,
    };
  }
}

/// The specification of a Jupyter kernel.
class KernelSpec {
  /// The name of the Jupyter kernel in the image. This value is case sensitive.
  final String name;

  /// The display name of the kernel.
  final String? displayName;

  KernelSpec({
    required this.name,
    this.displayName,
  });

  factory KernelSpec.fromJson(Map<String, dynamic> json) {
    return KernelSpec(
      name: json['Name'] as String,
      displayName: json['DisplayName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final displayName = this.displayName;
    return {
      'Name': name,
      if (displayName != null) 'DisplayName': displayName,
    };
  }
}

/// Provides a breakdown of the number of objects labeled.
class LabelCounters {
  /// The total number of objects that could not be labeled due to an error.
  final int? failedNonRetryableError;

  /// The total number of objects labeled by a human worker.
  final int? humanLabeled;

  /// The total number of objects labeled by automated data labeling.
  final int? machineLabeled;

  /// The total number of objects labeled.
  final int? totalLabeled;

  /// The total number of objects not yet labeled.
  final int? unlabeled;

  LabelCounters({
    this.failedNonRetryableError,
    this.humanLabeled,
    this.machineLabeled,
    this.totalLabeled,
    this.unlabeled,
  });

  factory LabelCounters.fromJson(Map<String, dynamic> json) {
    return LabelCounters(
      failedNonRetryableError: json['FailedNonRetryableError'] as int?,
      humanLabeled: json['HumanLabeled'] as int?,
      machineLabeled: json['MachineLabeled'] as int?,
      totalLabeled: json['TotalLabeled'] as int?,
      unlabeled: json['Unlabeled'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final failedNonRetryableError = this.failedNonRetryableError;
    final humanLabeled = this.humanLabeled;
    final machineLabeled = this.machineLabeled;
    final totalLabeled = this.totalLabeled;
    final unlabeled = this.unlabeled;
    return {
      if (failedNonRetryableError != null)
        'FailedNonRetryableError': failedNonRetryableError,
      if (humanLabeled != null) 'HumanLabeled': humanLabeled,
      if (machineLabeled != null) 'MachineLabeled': machineLabeled,
      if (totalLabeled != null) 'TotalLabeled': totalLabeled,
      if (unlabeled != null) 'Unlabeled': unlabeled,
    };
  }
}

/// Provides counts for human-labeled tasks in the labeling job.
class LabelCountersForWorkteam {
  /// The total number of data objects labeled by a human worker.
  final int? humanLabeled;

  /// The total number of data objects that need to be labeled by a human worker.
  final int? pendingHuman;

  /// The total number of tasks in the labeling job.
  final int? total;

  LabelCountersForWorkteam({
    this.humanLabeled,
    this.pendingHuman,
    this.total,
  });

  factory LabelCountersForWorkteam.fromJson(Map<String, dynamic> json) {
    return LabelCountersForWorkteam(
      humanLabeled: json['HumanLabeled'] as int?,
      pendingHuman: json['PendingHuman'] as int?,
      total: json['Total'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanLabeled = this.humanLabeled;
    final pendingHuman = this.pendingHuman;
    final total = this.total;
    return {
      if (humanLabeled != null) 'HumanLabeled': humanLabeled,
      if (pendingHuman != null) 'PendingHuman': pendingHuman,
      if (total != null) 'Total': total,
    };
  }
}

/// Provides configuration information for auto-labeling of your data objects. A
/// <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to
/// use auto-labeling.
class LabelingJobAlgorithmsConfig {
  /// Specifies the Amazon Resource Name (ARN) of the algorithm used for
  /// auto-labeling. You must select one of the following ARNs:
  ///
  /// <ul>
  /// <li>
  /// <i>Image classification</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/image-classification</code>
  /// </li>
  /// <li>
  /// <i>Text classification</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/text-classification</code>
  /// </li>
  /// <li>
  /// <i>Object detection</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/object-detection</code>
  /// </li>
  /// <li>
  /// <i>Semantic Segmentation</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/semantic-segmentation</code>
  /// </li>
  /// </ul>
  final String labelingJobAlgorithmSpecificationArn;

  /// At the end of an auto-label job Ground Truth sends the Amazon Resource Name
  /// (ARN) of the final model used for auto-labeling. You can use this model as
  /// the starting point for subsequent similar jobs by providing the ARN of the
  /// model here.
  final String? initialActiveLearningModelArn;

  /// Provides configuration information for a labeling job.
  final LabelingJobResourceConfig? labelingJobResourceConfig;

  LabelingJobAlgorithmsConfig({
    required this.labelingJobAlgorithmSpecificationArn,
    this.initialActiveLearningModelArn,
    this.labelingJobResourceConfig,
  });

  factory LabelingJobAlgorithmsConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobAlgorithmsConfig(
      labelingJobAlgorithmSpecificationArn:
          json['LabelingJobAlgorithmSpecificationArn'] as String,
      initialActiveLearningModelArn:
          json['InitialActiveLearningModelArn'] as String?,
      labelingJobResourceConfig: json['LabelingJobResourceConfig'] != null
          ? LabelingJobResourceConfig.fromJson(
              json['LabelingJobResourceConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobAlgorithmSpecificationArn =
        this.labelingJobAlgorithmSpecificationArn;
    final initialActiveLearningModelArn = this.initialActiveLearningModelArn;
    final labelingJobResourceConfig = this.labelingJobResourceConfig;
    return {
      'LabelingJobAlgorithmSpecificationArn':
          labelingJobAlgorithmSpecificationArn,
      if (initialActiveLearningModelArn != null)
        'InitialActiveLearningModelArn': initialActiveLearningModelArn,
      if (labelingJobResourceConfig != null)
        'LabelingJobResourceConfig': labelingJobResourceConfig,
    };
  }
}

/// Attributes of the data specified by the customer. Use these to describe the
/// data to be labeled.
class LabelingJobDataAttributes {
  /// Declares that your content is free of personally identifiable information or
  /// adult content. Amazon SageMaker may restrict the Amazon Mechanical Turk
  /// workers that can view your task based on this information.
  final List<ContentClassifier>? contentClassifiers;

  LabelingJobDataAttributes({
    this.contentClassifiers,
  });

  factory LabelingJobDataAttributes.fromJson(Map<String, dynamic> json) {
    return LabelingJobDataAttributes(
      contentClassifiers: (json['ContentClassifiers'] as List?)
          ?.whereNotNull()
          .map((e) => (e as String).toContentClassifier())
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final contentClassifiers = this.contentClassifiers;
    return {
      if (contentClassifiers != null)
        'ContentClassifiers':
            contentClassifiers.map((e) => e.toValue()).toList(),
    };
  }
}

/// Provides information about the location of input data.
///
/// You must specify at least one of the following: <code>S3DataSource</code> or
/// <code>SnsDataSource</code>.
///
/// Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming
/// labeling job. If you do not specify and SNS input topic ARN, Ground Truth
/// will create a one-time labeling job.
///
/// Use <code>S3DataSource</code> to specify an input manifest file for both
/// streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is
/// optional if you use <code>SnsDataSource</code> to create a streaming
/// labeling job.
class LabelingJobDataSource {
  /// The Amazon S3 location of the input data objects.
  final LabelingJobS3DataSource? s3DataSource;

  /// An Amazon SNS data source used for streaming labeling jobs. To learn more,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-send-data">Send
  /// Data to a Streaming Labeling Job</a>.
  final LabelingJobSnsDataSource? snsDataSource;

  LabelingJobDataSource({
    this.s3DataSource,
    this.snsDataSource,
  });

  factory LabelingJobDataSource.fromJson(Map<String, dynamic> json) {
    return LabelingJobDataSource(
      s3DataSource: json['S3DataSource'] != null
          ? LabelingJobS3DataSource.fromJson(
              json['S3DataSource'] as Map<String, dynamic>)
          : null,
      snsDataSource: json['SnsDataSource'] != null
          ? LabelingJobSnsDataSource.fromJson(
              json['SnsDataSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    final snsDataSource = this.snsDataSource;
    return {
      if (s3DataSource != null) 'S3DataSource': s3DataSource,
      if (snsDataSource != null) 'SnsDataSource': snsDataSource,
    };
  }
}

/// Provides summary information for a work team.
class LabelingJobForWorkteamSummary {
  /// The date and time that the labeling job was created.
  final DateTime creationTime;

  /// A unique identifier for a labeling job. You can use this to refer to a
  /// specific labeling job.
  final String jobReferenceCode;

  /// The Amazon Web Services account ID of the account used to start the labeling
  /// job.
  final String workRequesterAccountId;

  /// Provides information about the progress of a labeling job.
  final LabelCountersForWorkteam? labelCounters;

  /// The name of the labeling job that the work team is assigned to.
  final String? labelingJobName;

  /// The configured number of workers per data object.
  final int? numberOfHumanWorkersPerDataObject;

  LabelingJobForWorkteamSummary({
    required this.creationTime,
    required this.jobReferenceCode,
    required this.workRequesterAccountId,
    this.labelCounters,
    this.labelingJobName,
    this.numberOfHumanWorkersPerDataObject,
  });

  factory LabelingJobForWorkteamSummary.fromJson(Map<String, dynamic> json) {
    return LabelingJobForWorkteamSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobReferenceCode: json['JobReferenceCode'] as String,
      workRequesterAccountId: json['WorkRequesterAccountId'] as String,
      labelCounters: json['LabelCounters'] != null
          ? LabelCountersForWorkteam.fromJson(
              json['LabelCounters'] as Map<String, dynamic>)
          : null,
      labelingJobName: json['LabelingJobName'] as String?,
      numberOfHumanWorkersPerDataObject:
          json['NumberOfHumanWorkersPerDataObject'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobReferenceCode = this.jobReferenceCode;
    final workRequesterAccountId = this.workRequesterAccountId;
    final labelCounters = this.labelCounters;
    final labelingJobName = this.labelingJobName;
    final numberOfHumanWorkersPerDataObject =
        this.numberOfHumanWorkersPerDataObject;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobReferenceCode': jobReferenceCode,
      'WorkRequesterAccountId': workRequesterAccountId,
      if (labelCounters != null) 'LabelCounters': labelCounters,
      if (labelingJobName != null) 'LabelingJobName': labelingJobName,
      if (numberOfHumanWorkersPerDataObject != null)
        'NumberOfHumanWorkersPerDataObject': numberOfHumanWorkersPerDataObject,
    };
  }
}

/// Input configuration information for a labeling job.
class LabelingJobInputConfig {
  /// The location of the input data.
  final LabelingJobDataSource dataSource;

  /// Attributes of the data specified by the customer.
  final LabelingJobDataAttributes? dataAttributes;

  LabelingJobInputConfig({
    required this.dataSource,
    this.dataAttributes,
  });

  factory LabelingJobInputConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobInputConfig(
      dataSource: LabelingJobDataSource.fromJson(
          json['DataSource'] as Map<String, dynamic>),
      dataAttributes: json['DataAttributes'] != null
          ? LabelingJobDataAttributes.fromJson(
              json['DataAttributes'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final dataSource = this.dataSource;
    final dataAttributes = this.dataAttributes;
    return {
      'DataSource': dataSource,
      if (dataAttributes != null) 'DataAttributes': dataAttributes,
    };
  }
}

/// Specifies the location of the output produced by the labeling job.
class LabelingJobOutput {
  /// The Amazon S3 bucket location of the manifest file for labeled data.
  final String outputDatasetS3Uri;

  /// The Amazon Resource Name (ARN) for the most recent Amazon SageMaker model
  /// trained as part of automated data labeling.
  final String? finalActiveLearningModelArn;

  LabelingJobOutput({
    required this.outputDatasetS3Uri,
    this.finalActiveLearningModelArn,
  });

  factory LabelingJobOutput.fromJson(Map<String, dynamic> json) {
    return LabelingJobOutput(
      outputDatasetS3Uri: json['OutputDatasetS3Uri'] as String,
      finalActiveLearningModelArn:
          json['FinalActiveLearningModelArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final outputDatasetS3Uri = this.outputDatasetS3Uri;
    final finalActiveLearningModelArn = this.finalActiveLearningModelArn;
    return {
      'OutputDatasetS3Uri': outputDatasetS3Uri,
      if (finalActiveLearningModelArn != null)
        'FinalActiveLearningModelArn': finalActiveLearningModelArn,
    };
  }
}

/// Output configuration information for a labeling job.
class LabelingJobOutputConfig {
  /// The Amazon S3 location to write output data.
  final String s3OutputPath;

  /// The Amazon Web Services Key Management Service ID of the key used to encrypt
  /// the output data, if any.
  ///
  /// If you provide your own KMS key ID, you must add the required permissions to
  /// your KMS key described in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-permission.html#sms-security-kms-permissions">Encrypt
  /// Output Data and Storage Volume with Amazon Web Services KMS</a>.
  ///
  /// If you don't provide a KMS key ID, Amazon SageMaker uses the default Amazon
  /// Web Services KMS key for Amazon S3 for your role's account to encrypt your
  /// output data.
  ///
  /// If you use a bucket policy with an <code>s3:PutObject</code> permission that
  /// only allows objects with server-side encryption, set the condition key of
  /// <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  final String? kmsKeyId;

  /// An Amazon Simple Notification Service (Amazon SNS) output topic ARN. Provide
  /// a <code>SnsTopicArn</code> if you want to do real time chaining to another
  /// streaming job and receive an Amazon SNS notifications each time a data
  /// object is submitted by a worker.
  ///
  /// If you provide an <code>SnsTopicArn</code> in <code>OutputConfig</code>,
  /// when workers complete labeling tasks, Ground Truth will send labeling task
  /// output data to the SNS output topic you specify here.
  ///
  /// To learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-output-data">Receive
  /// Output Data from a Streaming Labeling Job</a>.
  final String? snsTopicArn;

  LabelingJobOutputConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
    this.snsTopicArn,
  });

  factory LabelingJobOutputConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      snsTopicArn: json['SnsTopicArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    final snsTopicArn = this.snsTopicArn;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (snsTopicArn != null) 'SnsTopicArn': snsTopicArn,
    };
  }
}

/// Configure encryption on the storage volume attached to the ML compute
/// instance used to run automated data labeling model training and inference.
class LabelingJobResourceConfig {
  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume attached to
  /// the ML compute instance(s) that run the training and inference jobs used for
  /// automated data labeling.
  ///
  /// You can only specify a <code>VolumeKmsKeyId</code> when you create a
  /// labeling job with automated data labeling enabled using the API operation
  /// <code>CreateLabelingJob</code>. You cannot specify an Amazon Web Services
  /// KMS customer managed CMK to encrypt the storage volume used for automated
  /// data labeling model training and inference when you create a labeling job
  /// using the console. To learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security.html">Output
  /// Data and Storage Volume Encryption</a>.
  ///
  /// The <code>VolumeKmsKeyId</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// </ul>
  final String? volumeKmsKeyId;

  LabelingJobResourceConfig({
    this.volumeKmsKeyId,
  });

  factory LabelingJobResourceConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobResourceConfig(
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// The Amazon S3 location of the input data objects.
class LabelingJobS3DataSource {
  /// The Amazon S3 location of the manifest file that describes the input data
  /// objects.
  ///
  /// The input manifest file referenced in <code>ManifestS3Uri</code> must
  /// contain one of the following keys: <code>source-ref</code> or
  /// <code>source</code>. The value of the keys are interpreted as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>source-ref</code>: The source of the object is the Amazon S3 object
  /// specified in the value. Use this value when the object is a binary object,
  /// such as an image.
  /// </li>
  /// <li>
  /// <code>source</code>: The source of the object is the value. Use this value
  /// when the object is a text value.
  /// </li>
  /// </ul>
  /// If you are a new user of Ground Truth, it is recommended you review <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-input-data-input-manifest.html">Use
  /// an Input Manifest File </a> in the Amazon SageMaker Developer Guide to learn
  /// how to create an input manifest file.
  final String manifestS3Uri;

  LabelingJobS3DataSource({
    required this.manifestS3Uri,
  });

  factory LabelingJobS3DataSource.fromJson(Map<String, dynamic> json) {
    return LabelingJobS3DataSource(
      manifestS3Uri: json['ManifestS3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final manifestS3Uri = this.manifestS3Uri;
    return {
      'ManifestS3Uri': manifestS3Uri,
    };
  }
}

/// An Amazon SNS data source used for streaming labeling jobs.
class LabelingJobSnsDataSource {
  /// The Amazon SNS input topic Amazon Resource Name (ARN). Specify the ARN of
  /// the input topic you will use to send new data objects to a streaming
  /// labeling job.
  final String snsTopicArn;

  LabelingJobSnsDataSource({
    required this.snsTopicArn,
  });

  factory LabelingJobSnsDataSource.fromJson(Map<String, dynamic> json) {
    return LabelingJobSnsDataSource(
      snsTopicArn: json['SnsTopicArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final snsTopicArn = this.snsTopicArn;
    return {
      'SnsTopicArn': snsTopicArn,
    };
  }
}

enum LabelingJobStatus {
  initializing,
  inProgress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on LabelingJobStatus {
  String toValue() {
    switch (this) {
      case LabelingJobStatus.initializing:
        return 'Initializing';
      case LabelingJobStatus.inProgress:
        return 'InProgress';
      case LabelingJobStatus.completed:
        return 'Completed';
      case LabelingJobStatus.failed:
        return 'Failed';
      case LabelingJobStatus.stopping:
        return 'Stopping';
      case LabelingJobStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  LabelingJobStatus toLabelingJobStatus() {
    switch (this) {
      case 'Initializing':
        return LabelingJobStatus.initializing;
      case 'InProgress':
        return LabelingJobStatus.inProgress;
      case 'Completed':
        return LabelingJobStatus.completed;
      case 'Failed':
        return LabelingJobStatus.failed;
      case 'Stopping':
        return LabelingJobStatus.stopping;
      case 'Stopped':
        return LabelingJobStatus.stopped;
    }
    throw Exception('$this is not known in enum LabelingJobStatus');
  }
}

/// A set of conditions for stopping a labeling job. If any of the conditions
/// are met, the job is automatically stopped. You can use these conditions to
/// control the cost of data labeling.
/// <note>
/// Labeling jobs fail after 30 days with an appropriate client error message.
/// </note>
class LabelingJobStoppingConditions {
  /// The maximum number of objects that can be labeled by human workers.
  final int? maxHumanLabeledObjectCount;

  /// The maximum number of input data objects that should be labeled.
  final int? maxPercentageOfInputDatasetLabeled;

  LabelingJobStoppingConditions({
    this.maxHumanLabeledObjectCount,
    this.maxPercentageOfInputDatasetLabeled,
  });

  factory LabelingJobStoppingConditions.fromJson(Map<String, dynamic> json) {
    return LabelingJobStoppingConditions(
      maxHumanLabeledObjectCount: json['MaxHumanLabeledObjectCount'] as int?,
      maxPercentageOfInputDatasetLabeled:
          json['MaxPercentageOfInputDatasetLabeled'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxHumanLabeledObjectCount = this.maxHumanLabeledObjectCount;
    final maxPercentageOfInputDatasetLabeled =
        this.maxPercentageOfInputDatasetLabeled;
    return {
      if (maxHumanLabeledObjectCount != null)
        'MaxHumanLabeledObjectCount': maxHumanLabeledObjectCount,
      if (maxPercentageOfInputDatasetLabeled != null)
        'MaxPercentageOfInputDatasetLabeled':
            maxPercentageOfInputDatasetLabeled,
    };
  }
}

/// Provides summary information about a labeling job.
class LabelingJobSummary {
  /// The date and time that the job was created (timestamp).
  final DateTime creationTime;

  /// Counts showing the progress of the labeling job.
  final LabelCounters labelCounters;

  /// The Amazon Resource Name (ARN) assigned to the labeling job when it was
  /// created.
  final String labelingJobArn;

  /// The name of the labeling job.
  final String labelingJobName;

  /// The current status of the labeling job.
  final LabelingJobStatus labelingJobStatus;

  /// The date and time that the job was last modified (timestamp).
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of a Lambda function. The function is run
  /// before each data object is sent to a worker.
  final String preHumanTaskLambdaArn;

  /// The Amazon Resource Name (ARN) of the work team assigned to the job.
  final String workteamArn;

  /// The Amazon Resource Name (ARN) of the Lambda function used to consolidate
  /// the annotations from individual workers into a label for a data object. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html">Annotation
  /// Consolidation</a>.
  final String? annotationConsolidationLambdaArn;

  /// If the <code>LabelingJobStatus</code> field is <code>Failed</code>, this
  /// field contains a description of the error.
  final String? failureReason;

  /// Input configuration for the labeling job.
  final LabelingJobInputConfig? inputConfig;

  /// The location of the output produced by the labeling job.
  final LabelingJobOutput? labelingJobOutput;

  LabelingJobSummary({
    required this.creationTime,
    required this.labelCounters,
    required this.labelingJobArn,
    required this.labelingJobName,
    required this.labelingJobStatus,
    required this.lastModifiedTime,
    required this.preHumanTaskLambdaArn,
    required this.workteamArn,
    this.annotationConsolidationLambdaArn,
    this.failureReason,
    this.inputConfig,
    this.labelingJobOutput,
  });

  factory LabelingJobSummary.fromJson(Map<String, dynamic> json) {
    return LabelingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      labelCounters:
          LabelCounters.fromJson(json['LabelCounters'] as Map<String, dynamic>),
      labelingJobArn: json['LabelingJobArn'] as String,
      labelingJobName: json['LabelingJobName'] as String,
      labelingJobStatus:
          (json['LabelingJobStatus'] as String).toLabelingJobStatus(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      preHumanTaskLambdaArn: json['PreHumanTaskLambdaArn'] as String,
      workteamArn: json['WorkteamArn'] as String,
      annotationConsolidationLambdaArn:
          json['AnnotationConsolidationLambdaArn'] as String?,
      failureReason: json['FailureReason'] as String?,
      inputConfig: json['InputConfig'] != null
          ? LabelingJobInputConfig.fromJson(
              json['InputConfig'] as Map<String, dynamic>)
          : null,
      labelingJobOutput: json['LabelingJobOutput'] != null
          ? LabelingJobOutput.fromJson(
              json['LabelingJobOutput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final labelCounters = this.labelCounters;
    final labelingJobArn = this.labelingJobArn;
    final labelingJobName = this.labelingJobName;
    final labelingJobStatus = this.labelingJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final preHumanTaskLambdaArn = this.preHumanTaskLambdaArn;
    final workteamArn = this.workteamArn;
    final annotationConsolidationLambdaArn =
        this.annotationConsolidationLambdaArn;
    final failureReason = this.failureReason;
    final inputConfig = this.inputConfig;
    final labelingJobOutput = this.labelingJobOutput;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LabelCounters': labelCounters,
      'LabelingJobArn': labelingJobArn,
      'LabelingJobName': labelingJobName,
      'LabelingJobStatus': labelingJobStatus.toValue(),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'PreHumanTaskLambdaArn': preHumanTaskLambdaArn,
      'WorkteamArn': workteamArn,
      if (annotationConsolidationLambdaArn != null)
        'AnnotationConsolidationLambdaArn': annotationConsolidationLambdaArn,
      if (failureReason != null) 'FailureReason': failureReason,
      if (inputConfig != null) 'InputConfig': inputConfig,
      if (labelingJobOutput != null) 'LabelingJobOutput': labelingJobOutput,
    };
  }
}

class ListActionsResponse {
  /// A list of actions and their properties.
  final List<ActionSummary>? actionSummaries;

  /// A token for getting the next set of actions, if there are any.
  final String? nextToken;

  ListActionsResponse({
    this.actionSummaries,
    this.nextToken,
  });

  factory ListActionsResponse.fromJson(Map<String, dynamic> json) {
    return ListActionsResponse(
      actionSummaries: (json['ActionSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => ActionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionSummaries = this.actionSummaries;
    final nextToken = this.nextToken;
    return {
      if (actionSummaries != null) 'ActionSummaries': actionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAlgorithmsOutput {
  /// &gt;An array of <code>AlgorithmSummary</code> objects, each of which lists
  /// an algorithm.
  final List<AlgorithmSummary> algorithmSummaryList;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of algorithms, use it in the subsequent request.
  final String? nextToken;

  ListAlgorithmsOutput({
    required this.algorithmSummaryList,
    this.nextToken,
  });

  factory ListAlgorithmsOutput.fromJson(Map<String, dynamic> json) {
    return ListAlgorithmsOutput(
      algorithmSummaryList: (json['AlgorithmSummaryList'] as List)
          .whereNotNull()
          .map((e) => AlgorithmSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSummaryList = this.algorithmSummaryList;
    final nextToken = this.nextToken;
    return {
      'AlgorithmSummaryList': algorithmSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAppImageConfigsResponse {
  /// A list of AppImageConfigs and their properties.
  final List<AppImageConfigDetails>? appImageConfigs;

  /// A token for getting the next set of AppImageConfigs, if there are any.
  final String? nextToken;

  ListAppImageConfigsResponse({
    this.appImageConfigs,
    this.nextToken,
  });

  factory ListAppImageConfigsResponse.fromJson(Map<String, dynamic> json) {
    return ListAppImageConfigsResponse(
      appImageConfigs: (json['AppImageConfigs'] as List?)
          ?.whereNotNull()
          .map((e) => AppImageConfigDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigs = this.appImageConfigs;
    final nextToken = this.nextToken;
    return {
      if (appImageConfigs != null) 'AppImageConfigs': appImageConfigs,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAppsResponse {
  /// The list of apps.
  final List<AppDetails>? apps;

  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  ListAppsResponse({
    this.apps,
    this.nextToken,
  });

  factory ListAppsResponse.fromJson(Map<String, dynamic> json) {
    return ListAppsResponse(
      apps: (json['Apps'] as List?)
          ?.whereNotNull()
          .map((e) => AppDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final apps = this.apps;
    final nextToken = this.nextToken;
    return {
      if (apps != null) 'Apps': apps,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListArtifactsResponse {
  /// A list of artifacts and their properties.
  final List<ArtifactSummary>? artifactSummaries;

  /// A token for getting the next set of artifacts, if there are any.
  final String? nextToken;

  ListArtifactsResponse({
    this.artifactSummaries,
    this.nextToken,
  });

  factory ListArtifactsResponse.fromJson(Map<String, dynamic> json) {
    return ListArtifactsResponse(
      artifactSummaries: (json['ArtifactSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => ArtifactSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactSummaries = this.artifactSummaries;
    final nextToken = this.nextToken;
    return {
      if (artifactSummaries != null) 'ArtifactSummaries': artifactSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAssociationsResponse {
  /// A list of associations and their properties.
  final List<AssociationSummary>? associationSummaries;

  /// A token for getting the next set of associations, if there are any.
  final String? nextToken;

  ListAssociationsResponse({
    this.associationSummaries,
    this.nextToken,
  });

  factory ListAssociationsResponse.fromJson(Map<String, dynamic> json) {
    return ListAssociationsResponse(
      associationSummaries: (json['AssociationSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => AssociationSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final associationSummaries = this.associationSummaries;
    final nextToken = this.nextToken;
    return {
      if (associationSummaries != null)
        'AssociationSummaries': associationSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAutoMLJobsResponse {
  /// Returns a summary list of jobs.
  final List<AutoMLJobSummary> autoMLJobSummaries;

  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  final String? nextToken;

  ListAutoMLJobsResponse({
    required this.autoMLJobSummaries,
    this.nextToken,
  });

  factory ListAutoMLJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListAutoMLJobsResponse(
      autoMLJobSummaries: (json['AutoMLJobSummaries'] as List)
          .whereNotNull()
          .map((e) => AutoMLJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobSummaries = this.autoMLJobSummaries;
    final nextToken = this.nextToken;
    return {
      'AutoMLJobSummaries': autoMLJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListCandidatesForAutoMLJobResponse {
  /// Summaries about the <code>AutoMLCandidates</code>.
  final List<AutoMLCandidate> candidates;

  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  final String? nextToken;

  ListCandidatesForAutoMLJobResponse({
    required this.candidates,
    this.nextToken,
  });

  factory ListCandidatesForAutoMLJobResponse.fromJson(
      Map<String, dynamic> json) {
    return ListCandidatesForAutoMLJobResponse(
      candidates: (json['Candidates'] as List)
          .whereNotNull()
          .map((e) => AutoMLCandidate.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final candidates = this.candidates;
    final nextToken = this.nextToken;
    return {
      'Candidates': candidates,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListCodeRepositoriesOutput {
  /// Gets a list of summaries of the Git repositories. Each summary specifies the
  /// following values for the repository:
  ///
  /// <ul>
  /// <li>
  /// Name
  /// </li>
  /// <li>
  /// Amazon Resource Name (ARN)
  /// </li>
  /// <li>
  /// Creation time
  /// </li>
  /// <li>
  /// Last modified time
  /// </li>
  /// <li>
  /// Configuration information, including the URL location of the repository and
  /// the ARN of the Amazon Web Services Secrets Manager secret that contains the
  /// credentials used to access the repository.
  /// </li>
  /// </ul>
  final List<CodeRepositorySummary> codeRepositorySummaryList;

  /// If the result of a <code>ListCodeRepositoriesOutput</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To get the next
  /// set of Git repositories, use the token in the next request.
  final String? nextToken;

  ListCodeRepositoriesOutput({
    required this.codeRepositorySummaryList,
    this.nextToken,
  });

  factory ListCodeRepositoriesOutput.fromJson(Map<String, dynamic> json) {
    return ListCodeRepositoriesOutput(
      codeRepositorySummaryList: (json['CodeRepositorySummaryList'] as List)
          .whereNotNull()
          .map((e) => CodeRepositorySummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositorySummaryList = this.codeRepositorySummaryList;
    final nextToken = this.nextToken;
    return {
      'CodeRepositorySummaryList': codeRepositorySummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListCompilationJobsResponse {
  /// An array of <a>CompilationJobSummary</a> objects, each describing a model
  /// compilation job.
  final List<CompilationJobSummary> compilationJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this
  /// <code>NextToken</code>. To retrieve the next set of model compilation jobs,
  /// use this token in the next request.
  final String? nextToken;

  ListCompilationJobsResponse({
    required this.compilationJobSummaries,
    this.nextToken,
  });

  factory ListCompilationJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListCompilationJobsResponse(
      compilationJobSummaries: (json['CompilationJobSummaries'] as List)
          .whereNotNull()
          .map((e) => CompilationJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobSummaries = this.compilationJobSummaries;
    final nextToken = this.nextToken;
    return {
      'CompilationJobSummaries': compilationJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListCompilationJobsSortBy {
  name,
  creationTime,
  status,
}

extension on ListCompilationJobsSortBy {
  String toValue() {
    switch (this) {
      case ListCompilationJobsSortBy.name:
        return 'Name';
      case ListCompilationJobsSortBy.creationTime:
        return 'CreationTime';
      case ListCompilationJobsSortBy.status:
        return 'Status';
    }
  }
}

extension on String {
  ListCompilationJobsSortBy toListCompilationJobsSortBy() {
    switch (this) {
      case 'Name':
        return ListCompilationJobsSortBy.name;
      case 'CreationTime':
        return ListCompilationJobsSortBy.creationTime;
      case 'Status':
        return ListCompilationJobsSortBy.status;
    }
    throw Exception('$this is not known in enum ListCompilationJobsSortBy');
  }
}

class ListContextsResponse {
  /// A list of contexts and their properties.
  final List<ContextSummary>? contextSummaries;

  /// A token for getting the next set of contexts, if there are any.
  final String? nextToken;

  ListContextsResponse({
    this.contextSummaries,
    this.nextToken,
  });

  factory ListContextsResponse.fromJson(Map<String, dynamic> json) {
    return ListContextsResponse(
      contextSummaries: (json['ContextSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => ContextSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextSummaries = this.contextSummaries;
    final nextToken = this.nextToken;
    return {
      if (contextSummaries != null) 'ContextSummaries': contextSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListDataQualityJobDefinitionsResponse {
  /// A list of data quality monitoring job definitions.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// If the result of the previous <code>ListDataQualityJobDefinitions</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of data quality monitoring job definitions, use the
  /// token in the next request.
  final String? nextToken;

  ListDataQualityJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListDataQualityJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListDataQualityJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .whereNotNull()
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListDeviceFleetsResponse {
  /// Summary of the device fleet.
  final List<DeviceFleetSummary> deviceFleetSummaries;

  /// The response from the last list when returning a list large enough to need
  /// tokening.
  final String? nextToken;

  ListDeviceFleetsResponse({
    required this.deviceFleetSummaries,
    this.nextToken,
  });

  factory ListDeviceFleetsResponse.fromJson(Map<String, dynamic> json) {
    return ListDeviceFleetsResponse(
      deviceFleetSummaries: (json['DeviceFleetSummaries'] as List)
          .whereNotNull()
          .map((e) => DeviceFleetSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetSummaries = this.deviceFleetSummaries;
    final nextToken = this.nextToken;
    return {
      'DeviceFleetSummaries': deviceFleetSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListDeviceFleetsSortBy {
  name,
  creationTime,
  lastModifiedTime,
}

extension on ListDeviceFleetsSortBy {
  String toValue() {
    switch (this) {
      case ListDeviceFleetsSortBy.name:
        return 'NAME';
      case ListDeviceFleetsSortBy.creationTime:
        return 'CREATION_TIME';
      case ListDeviceFleetsSortBy.lastModifiedTime:
        return 'LAST_MODIFIED_TIME';
    }
  }
}

extension on String {
  ListDeviceFleetsSortBy toListDeviceFleetsSortBy() {
    switch (this) {
      case 'NAME':
        return ListDeviceFleetsSortBy.name;
      case 'CREATION_TIME':
        return ListDeviceFleetsSortBy.creationTime;
      case 'LAST_MODIFIED_TIME':
        return ListDeviceFleetsSortBy.lastModifiedTime;
    }
    throw Exception('$this is not known in enum ListDeviceFleetsSortBy');
  }
}

class ListDevicesResponse {
  /// Summary of devices.
  final List<DeviceSummary> deviceSummaries;

  /// The response from the last list when returning a list large enough to need
  /// tokening.
  final String? nextToken;

  ListDevicesResponse({
    required this.deviceSummaries,
    this.nextToken,
  });

  factory ListDevicesResponse.fromJson(Map<String, dynamic> json) {
    return ListDevicesResponse(
      deviceSummaries: (json['DeviceSummaries'] as List)
          .whereNotNull()
          .map((e) => DeviceSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceSummaries = this.deviceSummaries;
    final nextToken = this.nextToken;
    return {
      'DeviceSummaries': deviceSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListDomainsResponse {
  /// The list of domains.
  final List<DomainDetails>? domains;

  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  ListDomainsResponse({
    this.domains,
    this.nextToken,
  });

  factory ListDomainsResponse.fromJson(Map<String, dynamic> json) {
    return ListDomainsResponse(
      domains: (json['Domains'] as List?)
          ?.whereNotNull()
          .map((e) => DomainDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domains = this.domains;
    final nextToken = this.nextToken;
    return {
      if (domains != null) 'Domains': domains,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListEdgePackagingJobsResponse {
  /// Summaries of edge packaging jobs.
  final List<EdgePackagingJobSummary> edgePackagingJobSummaries;

  /// Token to use when calling the next page of results.
  final String? nextToken;

  ListEdgePackagingJobsResponse({
    required this.edgePackagingJobSummaries,
    this.nextToken,
  });

  factory ListEdgePackagingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListEdgePackagingJobsResponse(
      edgePackagingJobSummaries: (json['EdgePackagingJobSummaries'] as List)
          .whereNotNull()
          .map((e) =>
              EdgePackagingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobSummaries = this.edgePackagingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'EdgePackagingJobSummaries': edgePackagingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListEdgePackagingJobsSortBy {
  name,
  modelName,
  creationTime,
  lastModifiedTime,
  status,
}

extension on ListEdgePackagingJobsSortBy {
  String toValue() {
    switch (this) {
      case ListEdgePackagingJobsSortBy.name:
        return 'NAME';
      case ListEdgePackagingJobsSortBy.modelName:
        return 'MODEL_NAME';
      case ListEdgePackagingJobsSortBy.creationTime:
        return 'CREATION_TIME';
      case ListEdgePackagingJobsSortBy.lastModifiedTime:
        return 'LAST_MODIFIED_TIME';
      case ListEdgePackagingJobsSortBy.status:
        return 'STATUS';
    }
  }
}

extension on String {
  ListEdgePackagingJobsSortBy toListEdgePackagingJobsSortBy() {
    switch (this) {
      case 'NAME':
        return ListEdgePackagingJobsSortBy.name;
      case 'MODEL_NAME':
        return ListEdgePackagingJobsSortBy.modelName;
      case 'CREATION_TIME':
        return ListEdgePackagingJobsSortBy.creationTime;
      case 'LAST_MODIFIED_TIME':
        return ListEdgePackagingJobsSortBy.lastModifiedTime;
      case 'STATUS':
        return ListEdgePackagingJobsSortBy.status;
    }
    throw Exception('$this is not known in enum ListEdgePackagingJobsSortBy');
  }
}

class ListEndpointConfigsOutput {
  /// An array of endpoint configurations.
  final List<EndpointConfigSummary> endpointConfigs;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of endpoint configurations, use it in the subsequent
  /// request
  final String? nextToken;

  ListEndpointConfigsOutput({
    required this.endpointConfigs,
    this.nextToken,
  });

  factory ListEndpointConfigsOutput.fromJson(Map<String, dynamic> json) {
    return ListEndpointConfigsOutput(
      endpointConfigs: (json['EndpointConfigs'] as List)
          .whereNotNull()
          .map((e) => EndpointConfigSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointConfigs = this.endpointConfigs;
    final nextToken = this.nextToken;
    return {
      'EndpointConfigs': endpointConfigs,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListEndpointsOutput {
  /// An array or endpoint objects.
  final List<EndpointSummary> endpoints;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of training jobs, use it in the subsequent request.
  final String? nextToken;

  ListEndpointsOutput({
    required this.endpoints,
    this.nextToken,
  });

  factory ListEndpointsOutput.fromJson(Map<String, dynamic> json) {
    return ListEndpointsOutput(
      endpoints: (json['Endpoints'] as List)
          .whereNotNull()
          .map((e) => EndpointSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpoints = this.endpoints;
    final nextToken = this.nextToken;
    return {
      'Endpoints': endpoints,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListExperimentsResponse {
  /// A list of the summaries of your experiments.
  final List<ExperimentSummary>? experimentSummaries;

  /// A token for getting the next set of experiments, if there are any.
  final String? nextToken;

  ListExperimentsResponse({
    this.experimentSummaries,
    this.nextToken,
  });

  factory ListExperimentsResponse.fromJson(Map<String, dynamic> json) {
    return ListExperimentsResponse(
      experimentSummaries: (json['ExperimentSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => ExperimentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentSummaries = this.experimentSummaries;
    final nextToken = this.nextToken;
    return {
      if (experimentSummaries != null)
        'ExperimentSummaries': experimentSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListFeatureGroupsResponse {
  /// A summary of feature groups.
  final List<FeatureGroupSummary> featureGroupSummaries;

  /// A token to resume pagination of <code>ListFeatureGroups</code> results.
  final String nextToken;

  ListFeatureGroupsResponse({
    required this.featureGroupSummaries,
    required this.nextToken,
  });

  factory ListFeatureGroupsResponse.fromJson(Map<String, dynamic> json) {
    return ListFeatureGroupsResponse(
      featureGroupSummaries: (json['FeatureGroupSummaries'] as List)
          .whereNotNull()
          .map((e) => FeatureGroupSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupSummaries = this.featureGroupSummaries;
    final nextToken = this.nextToken;
    return {
      'FeatureGroupSummaries': featureGroupSummaries,
      'NextToken': nextToken,
    };
  }
}

class ListFlowDefinitionsResponse {
  /// An array of objects describing the flow definitions.
  final List<FlowDefinitionSummary> flowDefinitionSummaries;

  /// A token to resume pagination.
  final String? nextToken;

  ListFlowDefinitionsResponse({
    required this.flowDefinitionSummaries,
    this.nextToken,
  });

  factory ListFlowDefinitionsResponse.fromJson(Map<String, dynamic> json) {
    return ListFlowDefinitionsResponse(
      flowDefinitionSummaries: (json['FlowDefinitionSummaries'] as List)
          .whereNotNull()
          .map((e) => FlowDefinitionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final flowDefinitionSummaries = this.flowDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'FlowDefinitionSummaries': flowDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHumanTaskUisResponse {
  /// An array of objects describing the human task user interfaces.
  final List<HumanTaskUiSummary> humanTaskUiSummaries;

  /// A token to resume pagination.
  final String? nextToken;

  ListHumanTaskUisResponse({
    required this.humanTaskUiSummaries,
    this.nextToken,
  });

  factory ListHumanTaskUisResponse.fromJson(Map<String, dynamic> json) {
    return ListHumanTaskUisResponse(
      humanTaskUiSummaries: (json['HumanTaskUiSummaries'] as List)
          .whereNotNull()
          .map((e) => HumanTaskUiSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiSummaries = this.humanTaskUiSummaries;
    final nextToken = this.nextToken;
    return {
      'HumanTaskUiSummaries': humanTaskUiSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHyperParameterTuningJobsResponse {
  /// A list of <a>HyperParameterTuningJobSummary</a> objects that describe the
  /// tuning jobs that the <code>ListHyperParameterTuningJobs</code> request
  /// returned.
  final List<HyperParameterTuningJobSummary> hyperParameterTuningJobSummaries;

  /// If the result of this <code>ListHyperParameterTuningJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of tuning jobs, use the token in the next request.
  final String? nextToken;

  ListHyperParameterTuningJobsResponse({
    required this.hyperParameterTuningJobSummaries,
    this.nextToken,
  });

  factory ListHyperParameterTuningJobsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListHyperParameterTuningJobsResponse(
      hyperParameterTuningJobSummaries:
          (json['HyperParameterTuningJobSummaries'] as List)
              .whereNotNull()
              .map((e) => HyperParameterTuningJobSummary.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperParameterTuningJobSummaries =
        this.hyperParameterTuningJobSummaries;
    final nextToken = this.nextToken;
    return {
      'HyperParameterTuningJobSummaries': hyperParameterTuningJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListImageVersionsResponse {
  /// A list of versions and their properties.
  final List<ImageVersion>? imageVersions;

  /// A token for getting the next set of versions, if there are any.
  final String? nextToken;

  ListImageVersionsResponse({
    this.imageVersions,
    this.nextToken,
  });

  factory ListImageVersionsResponse.fromJson(Map<String, dynamic> json) {
    return ListImageVersionsResponse(
      imageVersions: (json['ImageVersions'] as List?)
          ?.whereNotNull()
          .map((e) => ImageVersion.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageVersions = this.imageVersions;
    final nextToken = this.nextToken;
    return {
      if (imageVersions != null) 'ImageVersions': imageVersions,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListImagesResponse {
  /// A list of images and their properties.
  final List<Image>? images;

  /// A token for getting the next set of images, if there are any.
  final String? nextToken;

  ListImagesResponse({
    this.images,
    this.nextToken,
  });

  factory ListImagesResponse.fromJson(Map<String, dynamic> json) {
    return ListImagesResponse(
      images: (json['Images'] as List?)
          ?.whereNotNull()
          .map((e) => Image.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final images = this.images;
    final nextToken = this.nextToken;
    return {
      if (images != null) 'Images': images,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListLabelingJobsForWorkteamResponse {
  /// An array of <code>LabelingJobSummary</code> objects, each describing a
  /// labeling job.
  final List<LabelingJobForWorkteamSummary> labelingJobSummaryList;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of labeling jobs, use it in the subsequent request.
  final String? nextToken;

  ListLabelingJobsForWorkteamResponse({
    required this.labelingJobSummaryList,
    this.nextToken,
  });

  factory ListLabelingJobsForWorkteamResponse.fromJson(
      Map<String, dynamic> json) {
    return ListLabelingJobsForWorkteamResponse(
      labelingJobSummaryList: (json['LabelingJobSummaryList'] as List)
          .whereNotNull()
          .map((e) =>
              LabelingJobForWorkteamSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobSummaryList = this.labelingJobSummaryList;
    final nextToken = this.nextToken;
    return {
      'LabelingJobSummaryList': labelingJobSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListLabelingJobsForWorkteamSortByOptions {
  creationTime,
}

extension on ListLabelingJobsForWorkteamSortByOptions {
  String toValue() {
    switch (this) {
      case ListLabelingJobsForWorkteamSortByOptions.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  ListLabelingJobsForWorkteamSortByOptions
      toListLabelingJobsForWorkteamSortByOptions() {
    switch (this) {
      case 'CreationTime':
        return ListLabelingJobsForWorkteamSortByOptions.creationTime;
    }
    throw Exception(
        '$this is not known in enum ListLabelingJobsForWorkteamSortByOptions');
  }
}

class ListLabelingJobsResponse {
  /// An array of <code>LabelingJobSummary</code> objects, each describing a
  /// labeling job.
  final List<LabelingJobSummary>? labelingJobSummaryList;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of labeling jobs, use it in the subsequent request.
  final String? nextToken;

  ListLabelingJobsResponse({
    this.labelingJobSummaryList,
    this.nextToken,
  });

  factory ListLabelingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListLabelingJobsResponse(
      labelingJobSummaryList: (json['LabelingJobSummaryList'] as List?)
          ?.whereNotNull()
          .map((e) => LabelingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobSummaryList = this.labelingJobSummaryList;
    final nextToken = this.nextToken;
    return {
      if (labelingJobSummaryList != null)
        'LabelingJobSummaryList': labelingJobSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelBiasJobDefinitionsResponse {
  /// A JSON array in which each element is a summary for a model bias jobs.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of jobs, use it in the subsequent request.
  final String? nextToken;

  ListModelBiasJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListModelBiasJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListModelBiasJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .whereNotNull()
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelExplainabilityJobDefinitionsResponse {
  /// A JSON array in which each element is a summary for a explainability bias
  /// jobs.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of jobs, use it in the subsequent request.
  final String? nextToken;

  ListModelExplainabilityJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListModelExplainabilityJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListModelExplainabilityJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .whereNotNull()
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelPackageGroupsOutput {
  /// A list of summaries of the model groups in your Amazon Web Services account.
  final List<ModelPackageGroupSummary> modelPackageGroupSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of model groups, use it in the subsequent request.
  final String? nextToken;

  ListModelPackageGroupsOutput({
    required this.modelPackageGroupSummaryList,
    this.nextToken,
  });

  factory ListModelPackageGroupsOutput.fromJson(Map<String, dynamic> json) {
    return ListModelPackageGroupsOutput(
      modelPackageGroupSummaryList:
          (json['ModelPackageGroupSummaryList'] as List)
              .whereNotNull()
              .map((e) =>
                  ModelPackageGroupSummary.fromJson(e as Map<String, dynamic>))
              .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageGroupSummaryList = this.modelPackageGroupSummaryList;
    final nextToken = this.nextToken;
    return {
      'ModelPackageGroupSummaryList': modelPackageGroupSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelPackagesOutput {
  /// An array of <code>ModelPackageSummary</code> objects, each of which lists a
  /// model package.
  final List<ModelPackageSummary> modelPackageSummaryList;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of model packages, use it in the subsequent request.
  final String? nextToken;

  ListModelPackagesOutput({
    required this.modelPackageSummaryList,
    this.nextToken,
  });

  factory ListModelPackagesOutput.fromJson(Map<String, dynamic> json) {
    return ListModelPackagesOutput(
      modelPackageSummaryList: (json['ModelPackageSummaryList'] as List)
          .whereNotNull()
          .map((e) => ModelPackageSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageSummaryList = this.modelPackageSummaryList;
    final nextToken = this.nextToken;
    return {
      'ModelPackageSummaryList': modelPackageSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelQualityJobDefinitionsResponse {
  /// A list of summaries of model quality monitoring job definitions.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of model quality monitoring job definitions, use it in
  /// the next request.
  final String? nextToken;

  ListModelQualityJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListModelQualityJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListModelQualityJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .whereNotNull()
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelsOutput {
  /// An array of <code>ModelSummary</code> objects, each of which lists a model.
  final List<ModelSummary> models;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of models, use it in the subsequent request.
  final String? nextToken;

  ListModelsOutput({
    required this.models,
    this.nextToken,
  });

  factory ListModelsOutput.fromJson(Map<String, dynamic> json) {
    return ListModelsOutput(
      models: (json['Models'] as List)
          .whereNotNull()
          .map((e) => ModelSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final models = this.models;
    final nextToken = this.nextToken;
    return {
      'Models': models,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListMonitoringExecutionsResponse {
  /// A JSON array in which each element is a summary for a monitoring execution.
  final List<MonitoringExecutionSummary> monitoringExecutionSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of jobs, use it in the subsequent reques
  final String? nextToken;

  ListMonitoringExecutionsResponse({
    required this.monitoringExecutionSummaries,
    this.nextToken,
  });

  factory ListMonitoringExecutionsResponse.fromJson(Map<String, dynamic> json) {
    return ListMonitoringExecutionsResponse(
      monitoringExecutionSummaries: (json['MonitoringExecutionSummaries']
              as List)
          .whereNotNull()
          .map((e) =>
              MonitoringExecutionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringExecutionSummaries = this.monitoringExecutionSummaries;
    final nextToken = this.nextToken;
    return {
      'MonitoringExecutionSummaries': monitoringExecutionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListMonitoringSchedulesResponse {
  /// A JSON array in which each element is a summary for a monitoring schedule.
  final List<MonitoringScheduleSummary> monitoringScheduleSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of jobs, use it in the subsequent request.
  final String? nextToken;

  ListMonitoringSchedulesResponse({
    required this.monitoringScheduleSummaries,
    this.nextToken,
  });

  factory ListMonitoringSchedulesResponse.fromJson(Map<String, dynamic> json) {
    return ListMonitoringSchedulesResponse(
      monitoringScheduleSummaries: (json['MonitoringScheduleSummaries'] as List)
          .whereNotNull()
          .map((e) =>
              MonitoringScheduleSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleSummaries = this.monitoringScheduleSummaries;
    final nextToken = this.nextToken;
    return {
      'MonitoringScheduleSummaries': monitoringScheduleSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListNotebookInstanceLifecycleConfigsOutput {
  /// If the response is truncated, Amazon SageMaker returns this token. To get
  /// the next set of lifecycle configurations, use it in the next request.
  final String? nextToken;

  /// An array of <code>NotebookInstanceLifecycleConfiguration</code> objects,
  /// each listing a lifecycle configuration.
  final List<NotebookInstanceLifecycleConfigSummary>?
      notebookInstanceLifecycleConfigs;

  ListNotebookInstanceLifecycleConfigsOutput({
    this.nextToken,
    this.notebookInstanceLifecycleConfigs,
  });

  factory ListNotebookInstanceLifecycleConfigsOutput.fromJson(
      Map<String, dynamic> json) {
    return ListNotebookInstanceLifecycleConfigsOutput(
      nextToken: json['NextToken'] as String?,
      notebookInstanceLifecycleConfigs:
          (json['NotebookInstanceLifecycleConfigs'] as List?)
              ?.whereNotNull()
              .map((e) => NotebookInstanceLifecycleConfigSummary.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final notebookInstanceLifecycleConfigs =
        this.notebookInstanceLifecycleConfigs;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (notebookInstanceLifecycleConfigs != null)
        'NotebookInstanceLifecycleConfigs': notebookInstanceLifecycleConfigs,
    };
  }
}

class ListNotebookInstancesOutput {
  /// If the response to the previous <code>ListNotebookInstances</code> request
  /// was truncated, Amazon SageMaker returns this token. To retrieve the next set
  /// of notebook instances, use the token in the next request.
  final String? nextToken;

  /// An array of <code>NotebookInstanceSummary</code> objects, one for each
  /// notebook instance.
  final List<NotebookInstanceSummary>? notebookInstances;

  ListNotebookInstancesOutput({
    this.nextToken,
    this.notebookInstances,
  });

  factory ListNotebookInstancesOutput.fromJson(Map<String, dynamic> json) {
    return ListNotebookInstancesOutput(
      nextToken: json['NextToken'] as String?,
      notebookInstances: (json['NotebookInstances'] as List?)
          ?.whereNotNull()
          .map((e) =>
              NotebookInstanceSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final notebookInstances = this.notebookInstances;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (notebookInstances != null) 'NotebookInstances': notebookInstances,
    };
  }
}

class ListPipelineExecutionStepsResponse {
  /// If the result of the previous <code>ListPipelineExecutionSteps</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of pipeline execution steps, use the token in the next
  /// request.
  final String? nextToken;

  /// A list of <code>PipeLineExecutionStep</code> objects. Each
  /// <code>PipeLineExecutionStep</code> consists of StepName, StartTime, EndTime,
  /// StepStatus, and Metadata. Metadata is an object with properties for each job
  /// that contains relevant information about the job created by the step.
  final List<PipelineExecutionStep>? pipelineExecutionSteps;

  ListPipelineExecutionStepsResponse({
    this.nextToken,
    this.pipelineExecutionSteps,
  });

  factory ListPipelineExecutionStepsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListPipelineExecutionStepsResponse(
      nextToken: json['NextToken'] as String?,
      pipelineExecutionSteps: (json['PipelineExecutionSteps'] as List?)
          ?.whereNotNull()
          .map((e) => PipelineExecutionStep.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineExecutionSteps = this.pipelineExecutionSteps;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineExecutionSteps != null)
        'PipelineExecutionSteps': pipelineExecutionSteps,
    };
  }
}

class ListPipelineExecutionsResponse {
  /// If the result of the previous <code>ListPipelineExecutions</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of pipeline executions, use the token in the next request.
  final String? nextToken;

  /// Contains a sorted list of pipeline execution summary objects matching the
  /// specified filters. Each run summary includes the Amazon Resource Name (ARN)
  /// of the pipeline execution, the run date, and the status. This list can be
  /// empty.
  final List<PipelineExecutionSummary>? pipelineExecutionSummaries;

  ListPipelineExecutionsResponse({
    this.nextToken,
    this.pipelineExecutionSummaries,
  });

  factory ListPipelineExecutionsResponse.fromJson(Map<String, dynamic> json) {
    return ListPipelineExecutionsResponse(
      nextToken: json['NextToken'] as String?,
      pipelineExecutionSummaries: (json['PipelineExecutionSummaries'] as List?)
          ?.whereNotNull()
          .map((e) =>
              PipelineExecutionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineExecutionSummaries = this.pipelineExecutionSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineExecutionSummaries != null)
        'PipelineExecutionSummaries': pipelineExecutionSummaries,
    };
  }
}

class ListPipelineParametersForExecutionResponse {
  /// If the result of the previous
  /// <code>ListPipelineParametersForExecution</code> request was truncated, the
  /// response includes a <code>NextToken</code>. To retrieve the next set of
  /// parameters, use the token in the next request.
  final String? nextToken;

  /// Contains a list of pipeline parameters. This list can be empty.
  final List<Parameter>? pipelineParameters;

  ListPipelineParametersForExecutionResponse({
    this.nextToken,
    this.pipelineParameters,
  });

  factory ListPipelineParametersForExecutionResponse.fromJson(
      Map<String, dynamic> json) {
    return ListPipelineParametersForExecutionResponse(
      nextToken: json['NextToken'] as String?,
      pipelineParameters: (json['PipelineParameters'] as List?)
          ?.whereNotNull()
          .map((e) => Parameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineParameters = this.pipelineParameters;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineParameters != null) 'PipelineParameters': pipelineParameters,
    };
  }
}

class ListPipelinesResponse {
  /// If the result of the previous <code>ListPipelines</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of pipelines, use the token in the next request.
  final String? nextToken;

  /// Contains a sorted list of <code>PipelineSummary</code> objects matching the
  /// specified filters. Each <code>PipelineSummary</code> consists of
  /// PipelineArn, PipelineName, ExperimentName, PipelineDescription,
  /// CreationTime, LastModifiedTime, LastRunTime, and RoleArn. This list can be
  /// empty.
  final List<PipelineSummary>? pipelineSummaries;

  ListPipelinesResponse({
    this.nextToken,
    this.pipelineSummaries,
  });

  factory ListPipelinesResponse.fromJson(Map<String, dynamic> json) {
    return ListPipelinesResponse(
      nextToken: json['NextToken'] as String?,
      pipelineSummaries: (json['PipelineSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => PipelineSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineSummaries = this.pipelineSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineSummaries != null) 'PipelineSummaries': pipelineSummaries,
    };
  }
}

class ListProcessingJobsResponse {
  /// An array of <code>ProcessingJobSummary</code> objects, each listing a
  /// processing job.
  final List<ProcessingJobSummary> processingJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of processing jobs, use it in the subsequent request.
  final String? nextToken;

  ListProcessingJobsResponse({
    required this.processingJobSummaries,
    this.nextToken,
  });

  factory ListProcessingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListProcessingJobsResponse(
      processingJobSummaries: (json['ProcessingJobSummaries'] as List)
          .whereNotNull()
          .map((e) => ProcessingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final processingJobSummaries = this.processingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'ProcessingJobSummaries': processingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListProjectsOutput {
  /// A list of summaries of projects.
  final List<ProjectSummary> projectSummaryList;

  /// If the result of the previous <code>ListCompilationJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model compilation jobs, use the token in the next request.
  final String? nextToken;

  ListProjectsOutput({
    required this.projectSummaryList,
    this.nextToken,
  });

  factory ListProjectsOutput.fromJson(Map<String, dynamic> json) {
    return ListProjectsOutput(
      projectSummaryList: (json['ProjectSummaryList'] as List)
          .whereNotNull()
          .map((e) => ProjectSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final projectSummaryList = this.projectSummaryList;
    final nextToken = this.nextToken;
    return {
      'ProjectSummaryList': projectSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListSubscribedWorkteamsResponse {
  /// An array of <code>Workteam</code> objects, each describing a work team.
  final List<SubscribedWorkteam> subscribedWorkteams;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of work teams, use it in the subsequent request.
  final String? nextToken;

  ListSubscribedWorkteamsResponse({
    required this.subscribedWorkteams,
    this.nextToken,
  });

  factory ListSubscribedWorkteamsResponse.fromJson(Map<String, dynamic> json) {
    return ListSubscribedWorkteamsResponse(
      subscribedWorkteams: (json['SubscribedWorkteams'] as List)
          .whereNotNull()
          .map((e) => SubscribedWorkteam.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final subscribedWorkteams = this.subscribedWorkteams;
    final nextToken = this.nextToken;
    return {
      'SubscribedWorkteams': subscribedWorkteams,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTagsOutput {
  /// If response is truncated, Amazon SageMaker includes a token in the response.
  /// You can use this token in your subsequent request to fetch next set of
  /// tokens.
  final String? nextToken;

  /// An array of <code>Tag</code> objects, each with a tag key and a value.
  final List<Tag>? tags;

  ListTagsOutput({
    this.nextToken,
    this.tags,
  });

  factory ListTagsOutput.fromJson(Map<String, dynamic> json) {
    return ListTagsOutput(
      nextToken: json['NextToken'] as String?,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final tags = this.tags;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (tags != null) 'Tags': tags,
    };
  }
}

class ListTrainingJobsForHyperParameterTuningJobResponse {
  /// A list of <a>TrainingJobSummary</a> objects that describe the training jobs
  /// that the <code>ListTrainingJobsForHyperParameterTuningJob</code> request
  /// returned.
  final List<HyperParameterTrainingJobSummary> trainingJobSummaries;

  /// If the result of this
  /// <code>ListTrainingJobsForHyperParameterTuningJob</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of training jobs, use the token in the next request.
  final String? nextToken;

  ListTrainingJobsForHyperParameterTuningJobResponse({
    required this.trainingJobSummaries,
    this.nextToken,
  });

  factory ListTrainingJobsForHyperParameterTuningJobResponse.fromJson(
      Map<String, dynamic> json) {
    return ListTrainingJobsForHyperParameterTuningJobResponse(
      trainingJobSummaries: (json['TrainingJobSummaries'] as List)
          .whereNotNull()
          .map((e) => HyperParameterTrainingJobSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobSummaries = this.trainingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'TrainingJobSummaries': trainingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTrainingJobsResponse {
  /// An array of <code>TrainingJobSummary</code> objects, each listing a training
  /// job.
  final List<TrainingJobSummary> trainingJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of training jobs, use it in the subsequent request.
  final String? nextToken;

  ListTrainingJobsResponse({
    required this.trainingJobSummaries,
    this.nextToken,
  });

  factory ListTrainingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListTrainingJobsResponse(
      trainingJobSummaries: (json['TrainingJobSummaries'] as List)
          .whereNotNull()
          .map((e) => TrainingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobSummaries = this.trainingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'TrainingJobSummaries': trainingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTransformJobsResponse {
  /// An array of <code>TransformJobSummary</code> objects.
  final List<TransformJobSummary> transformJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of transform jobs, use it in the next request.
  final String? nextToken;

  ListTransformJobsResponse({
    required this.transformJobSummaries,
    this.nextToken,
  });

  factory ListTransformJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListTransformJobsResponse(
      transformJobSummaries: (json['TransformJobSummaries'] as List)
          .whereNotNull()
          .map((e) => TransformJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final transformJobSummaries = this.transformJobSummaries;
    final nextToken = this.nextToken;
    return {
      'TransformJobSummaries': transformJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTrialComponentsResponse {
  /// A token for getting the next set of components, if there are any.
  final String? nextToken;

  /// A list of the summaries of your trial components.
  final List<TrialComponentSummary>? trialComponentSummaries;

  ListTrialComponentsResponse({
    this.nextToken,
    this.trialComponentSummaries,
  });

  factory ListTrialComponentsResponse.fromJson(Map<String, dynamic> json) {
    return ListTrialComponentsResponse(
      nextToken: json['NextToken'] as String?,
      trialComponentSummaries: (json['TrialComponentSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => TrialComponentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trialComponentSummaries = this.trialComponentSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (trialComponentSummaries != null)
        'TrialComponentSummaries': trialComponentSummaries,
    };
  }
}

class ListTrialsResponse {
  /// A token for getting the next set of trials, if there are any.
  final String? nextToken;

  /// A list of the summaries of your trials.
  final List<TrialSummary>? trialSummaries;

  ListTrialsResponse({
    this.nextToken,
    this.trialSummaries,
  });

  factory ListTrialsResponse.fromJson(Map<String, dynamic> json) {
    return ListTrialsResponse(
      nextToken: json['NextToken'] as String?,
      trialSummaries: (json['TrialSummaries'] as List?)
          ?.whereNotNull()
          .map((e) => TrialSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trialSummaries = this.trialSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (trialSummaries != null) 'TrialSummaries': trialSummaries,
    };
  }
}

class ListUserProfilesResponse {
  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  /// The list of user profiles.
  final List<UserProfileDetails>? userProfiles;

  ListUserProfilesResponse({
    this.nextToken,
    this.userProfiles,
  });

  factory ListUserProfilesResponse.fromJson(Map<String, dynamic> json) {
    return ListUserProfilesResponse(
      nextToken: json['NextToken'] as String?,
      userProfiles: (json['UserProfiles'] as List?)
          ?.whereNotNull()
          .map((e) => UserProfileDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final userProfiles = this.userProfiles;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (userProfiles != null) 'UserProfiles': userProfiles,
    };
  }
}

class ListWorkforcesResponse {
  /// A list containing information about your workforce.
  final List<Workforce> workforces;

  /// A token to resume pagination.
  final String? nextToken;

  ListWorkforcesResponse({
    required this.workforces,
    this.nextToken,
  });

  factory ListWorkforcesResponse.fromJson(Map<String, dynamic> json) {
    return ListWorkforcesResponse(
      workforces: (json['Workforces'] as List)
          .whereNotNull()
          .map((e) => Workforce.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workforces = this.workforces;
    final nextToken = this.nextToken;
    return {
      'Workforces': workforces,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListWorkforcesSortByOptions {
  name,
  createDate,
}

extension on ListWorkforcesSortByOptions {
  String toValue() {
    switch (this) {
      case ListWorkforcesSortByOptions.name:
        return 'Name';
      case ListWorkforcesSortByOptions.createDate:
        return 'CreateDate';
    }
  }
}

extension on String {
  ListWorkforcesSortByOptions toListWorkforcesSortByOptions() {
    switch (this) {
      case 'Name':
        return ListWorkforcesSortByOptions.name;
      case 'CreateDate':
        return ListWorkforcesSortByOptions.createDate;
    }
    throw Exception('$this is not known in enum ListWorkforcesSortByOptions');
  }
}

class ListWorkteamsResponse {
  /// An array of <code>Workteam</code> objects, each describing a work team.
  final List<Workteam> workteams;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of work teams, use it in the subsequent request.
  final String? nextToken;

  ListWorkteamsResponse({
    required this.workteams,
    this.nextToken,
  });

  factory ListWorkteamsResponse.fromJson(Map<String, dynamic> json) {
    return ListWorkteamsResponse(
      workteams: (json['Workteams'] as List)
          .whereNotNull()
          .map((e) => Workteam.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workteams = this.workteams;
    final nextToken = this.nextToken;
    return {
      'Workteams': workteams,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListWorkteamsSortByOptions {
  name,
  createDate,
}

extension on ListWorkteamsSortByOptions {
  String toValue() {
    switch (this) {
      case ListWorkteamsSortByOptions.name:
        return 'Name';
      case ListWorkteamsSortByOptions.createDate:
        return 'CreateDate';
    }
  }
}

extension on String {
  ListWorkteamsSortByOptions toListWorkteamsSortByOptions() {
    switch (this) {
      case 'Name':
        return ListWorkteamsSortByOptions.name;
      case 'CreateDate':
        return ListWorkteamsSortByOptions.createDate;
    }
    throw Exception('$this is not known in enum ListWorkteamsSortByOptions');
  }
}

/// Defines an Amazon Cognito or your own OIDC IdP user group that is part of a
/// work team.
class MemberDefinition {
  /// The Amazon Cognito user group that is part of the work team.
  final CognitoMemberDefinition? cognitoMemberDefinition;

  /// A list user groups that exist in your OIDC Identity Provider (IdP). One to
  /// ten groups can be used to create a single private work team. When you add a
  /// user group to the list of <code>Groups</code>, you can add that user group
  /// to one or more private work teams. If you add a user group to a private work
  /// team, all workers in that user group are added to the work team.
  final OidcMemberDefinition? oidcMemberDefinition;

  MemberDefinition({
    this.cognitoMemberDefinition,
    this.oidcMemberDefinition,
  });

  factory MemberDefinition.fromJson(Map<String, dynamic> json) {
    return MemberDefinition(
      cognitoMemberDefinition: json['CognitoMemberDefinition'] != null
          ? CognitoMemberDefinition.fromJson(
              json['CognitoMemberDefinition'] as Map<String, dynamic>)
          : null,
      oidcMemberDefinition: json['OidcMemberDefinition'] != null
          ? OidcMemberDefinition.fromJson(
              json['OidcMemberDefinition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final cognitoMemberDefinition = this.cognitoMemberDefinition;
    final oidcMemberDefinition = this.oidcMemberDefinition;
    return {
      if (cognitoMemberDefinition != null)
        'CognitoMemberDefinition': cognitoMemberDefinition,
      if (oidcMemberDefinition != null)
        'OidcMemberDefinition': oidcMemberDefinition,
    };
  }
}

/// Metadata properties of the tracking entity, trial, or trial component.
class MetadataProperties {
  /// The commit ID.
  final String? commitId;

  /// The entity this entity was generated by.
  final String? generatedBy;

  /// The project ID.
  final String? projectId;

  /// The repository.
  final String? repository;

  MetadataProperties({
    this.commitId,
    this.generatedBy,
    this.projectId,
    this.repository,
  });

  factory MetadataProperties.fromJson(Map<String, dynamic> json) {
    return MetadataProperties(
      commitId: json['CommitId'] as String?,
      generatedBy: json['GeneratedBy'] as String?,
      projectId: json['ProjectId'] as String?,
      repository: json['Repository'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final commitId = this.commitId;
    final generatedBy = this.generatedBy;
    final projectId = this.projectId;
    final repository = this.repository;
    return {
      if (commitId != null) 'CommitId': commitId,
      if (generatedBy != null) 'GeneratedBy': generatedBy,
      if (projectId != null) 'ProjectId': projectId,
      if (repository != null) 'Repository': repository,
    };
  }
}

/// The name, value, and date and time of a metric that was emitted to Amazon
/// CloudWatch.
class MetricData {
  /// The name of the metric.
  final String? metricName;

  /// The date and time that the algorithm emitted the metric.
  final DateTime? timestamp;

  /// The value of the metric.
  final double? value;

  MetricData({
    this.metricName,
    this.timestamp,
    this.value,
  });

  factory MetricData.fromJson(Map<String, dynamic> json) {
    return MetricData(
      metricName: json['MetricName'] as String?,
      timestamp: timeStampFromJson(json['Timestamp']),
      value: json['Value'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final timestamp = this.timestamp;
    final value = this.value;
    return {
      if (metricName != null) 'MetricName': metricName,
      if (timestamp != null) 'Timestamp': unixTimestampToJson(timestamp),
      if (value != null) 'Value': value,
    };
  }
}

/// Specifies a metric that the training algorithm writes to <code>stderr</code>
/// or <code>stdout</code>. Amazon SageMakerhyperparameter tuning captures all
/// defined metrics. You specify one metric that a hyperparameter tuning job
/// uses as its objective metric to choose the best training job.
class MetricDefinition {
  /// The name of the metric.
  final String name;

  /// A regular expression that searches the output of a training job and gets the
  /// value of the metric. For more information about using regular expressions to
  /// define metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics.html">Defining
  /// Objective Metrics</a>.
  final String regex;

  MetricDefinition({
    required this.name,
    required this.regex,
  });

  factory MetricDefinition.fromJson(Map<String, dynamic> json) {
    return MetricDefinition(
      name: json['Name'] as String,
      regex: json['Regex'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final regex = this.regex;
    return {
      'Name': name,
      'Regex': regex,
    };
  }
}

/// <p/>
class MetricsSource {
  /// <p/>
  final String contentType;

  /// <p/>
  final String s3Uri;

  /// <p/>
  final String? contentDigest;

  MetricsSource({
    required this.contentType,
    required this.s3Uri,
    this.contentDigest,
  });

  factory MetricsSource.fromJson(Map<String, dynamic> json) {
    return MetricsSource(
      contentType: json['ContentType'] as String,
      s3Uri: json['S3Uri'] as String,
      contentDigest: json['ContentDigest'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contentType = this.contentType;
    final s3Uri = this.s3Uri;
    final contentDigest = this.contentDigest;
    return {
      'ContentType': contentType,
      'S3Uri': s3Uri,
      if (contentDigest != null) 'ContentDigest': contentDigest,
    };
  }
}

enum ModelApprovalStatus {
  approved,
  rejected,
  pendingManualApproval,
}

extension on ModelApprovalStatus {
  String toValue() {
    switch (this) {
      case ModelApprovalStatus.approved:
        return 'Approved';
      case ModelApprovalStatus.rejected:
        return 'Rejected';
      case ModelApprovalStatus.pendingManualApproval:
        return 'PendingManualApproval';
    }
  }
}

extension on String {
  ModelApprovalStatus toModelApprovalStatus() {
    switch (this) {
      case 'Approved':
        return ModelApprovalStatus.approved;
      case 'Rejected':
        return ModelApprovalStatus.rejected;
      case 'PendingManualApproval':
        return ModelApprovalStatus.pendingManualApproval;
    }
    throw Exception('$this is not known in enum ModelApprovalStatus');
  }
}

/// Provides information about the location that is configured for storing model
/// artifacts.
///
/// Model artifacts are the output that results from training a model, and
/// typically consist of trained parameters, a model defintion that describes
/// how to compute inferences, and other metadata.
class ModelArtifacts {
  /// The path of the S3 object that contains the model artifacts. For example,
  /// <code>s3://bucket-name/keynameprefix/model.tar.gz</code>.
  final String s3ModelArtifacts;

  ModelArtifacts({
    required this.s3ModelArtifacts,
  });

  factory ModelArtifacts.fromJson(Map<String, dynamic> json) {
    return ModelArtifacts(
      s3ModelArtifacts: json['S3ModelArtifacts'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3ModelArtifacts = this.s3ModelArtifacts;
    return {
      'S3ModelArtifacts': s3ModelArtifacts,
    };
  }
}

/// Docker container image configuration object for the model bias job.
class ModelBiasAppSpecification {
  /// JSON formatted S3 file that defines bias parameters. For more information on
  /// this JSON configuration file, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/json-bias-parameter-config.html">Configure
  /// bias parameters</a>.
  final String configUri;

  /// The container image to be run by the model bias job.
  final String imageUri;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  ModelBiasAppSpecification({
    required this.configUri,
    required this.imageUri,
    this.environment,
  });

  factory ModelBiasAppSpecification.fromJson(Map<String, dynamic> json) {
    return ModelBiasAppSpecification(
      configUri: json['ConfigUri'] as String,
      imageUri: json['ImageUri'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final configUri = this.configUri;
    final imageUri = this.imageUri;
    final environment = this.environment;
    return {
      'ConfigUri': configUri,
      'ImageUri': imageUri,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// The configuration for a baseline model bias job.
class ModelBiasBaselineConfig {
  /// The name of the baseline model bias job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;

  ModelBiasBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
  });

  factory ModelBiasBaselineConfig.fromJson(Map<String, dynamic> json) {
    return ModelBiasBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
    };
  }
}

/// Inputs for the model bias job.
class ModelBiasJobInput {
  final EndpointInput endpointInput;

  /// Location of ground truth labels to use in model bias job.
  final MonitoringGroundTruthS3Input groundTruthS3Input;

  ModelBiasJobInput({
    required this.endpointInput,
    required this.groundTruthS3Input,
  });

  factory ModelBiasJobInput.fromJson(Map<String, dynamic> json) {
    return ModelBiasJobInput(
      endpointInput:
          EndpointInput.fromJson(json['EndpointInput'] as Map<String, dynamic>),
      groundTruthS3Input: MonitoringGroundTruthS3Input.fromJson(
          json['GroundTruthS3Input'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointInput = this.endpointInput;
    final groundTruthS3Input = this.groundTruthS3Input;
    return {
      'EndpointInput': endpointInput,
      'GroundTruthS3Input': groundTruthS3Input,
    };
  }
}

enum ModelCacheSetting {
  enabled,
  disabled,
}

extension on ModelCacheSetting {
  String toValue() {
    switch (this) {
      case ModelCacheSetting.enabled:
        return 'Enabled';
      case ModelCacheSetting.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  ModelCacheSetting toModelCacheSetting() {
    switch (this) {
      case 'Enabled':
        return ModelCacheSetting.enabled;
      case 'Disabled':
        return ModelCacheSetting.disabled;
    }
    throw Exception('$this is not known in enum ModelCacheSetting');
  }
}

/// Configures the timeout and maximum number of retries for processing a
/// transform job invocation.
class ModelClientConfig {
  /// The maximum number of retries when invocation requests are failing.
  final int? invocationsMaxRetries;

  /// The timeout value in seconds for an invocation request.
  final int? invocationsTimeoutInSeconds;

  ModelClientConfig({
    this.invocationsMaxRetries,
    this.invocationsTimeoutInSeconds,
  });

  factory ModelClientConfig.fromJson(Map<String, dynamic> json) {
    return ModelClientConfig(
      invocationsMaxRetries: json['InvocationsMaxRetries'] as int?,
      invocationsTimeoutInSeconds: json['InvocationsTimeoutInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final invocationsMaxRetries = this.invocationsMaxRetries;
    final invocationsTimeoutInSeconds = this.invocationsTimeoutInSeconds;
    return {
      if (invocationsMaxRetries != null)
        'InvocationsMaxRetries': invocationsMaxRetries,
      if (invocationsTimeoutInSeconds != null)
        'InvocationsTimeoutInSeconds': invocationsTimeoutInSeconds,
    };
  }
}

/// Data quality constraints and statistics for a model.
class ModelDataQuality {
  /// Data quality constraints for a model.
  final MetricsSource? constraints;

  /// Data quality statistics for a model.
  final MetricsSource? statistics;

  ModelDataQuality({
    this.constraints,
    this.statistics,
  });

  factory ModelDataQuality.fromJson(Map<String, dynamic> json) {
    return ModelDataQuality(
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
      statistics: json['Statistics'] != null
          ? MetricsSource.fromJson(json['Statistics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final constraints = this.constraints;
    final statistics = this.statistics;
    return {
      if (constraints != null) 'Constraints': constraints,
      if (statistics != null) 'Statistics': statistics,
    };
  }
}

/// Specifies how to generate the endpoint name for an automatic one-click
/// Autopilot model deployment.
class ModelDeployConfig {
  /// Set to <code>True</code> to automatically generate an endpoint name for a
  /// one-click Autopilot model deployment; set to <code>False</code> otherwise.
  /// The default value is <code>False</code>.
  /// <note>
  /// If you set <code>AutoGenerateEndpointName</code> to <code>True</code>, do
  /// not specify the <code>EndpointName</code>; otherwise a 400 error is thrown.
  /// </note>
  final bool? autoGenerateEndpointName;

  /// Specifies the endpoint name to use for a one-click Autopilot model
  /// deployment if the endpoint name is not generated automatically.
  /// <note>
  /// Specify the <code>EndpointName</code> if and only if you set
  /// <code>AutoGenerateEndpointName</code> to <code>False</code>; otherwise a 400
  /// error is thrown.
  /// </note>
  final String? endpointName;

  ModelDeployConfig({
    this.autoGenerateEndpointName,
    this.endpointName,
  });

  factory ModelDeployConfig.fromJson(Map<String, dynamic> json) {
    return ModelDeployConfig(
      autoGenerateEndpointName: json['AutoGenerateEndpointName'] as bool?,
      endpointName: json['EndpointName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final autoGenerateEndpointName = this.autoGenerateEndpointName;
    final endpointName = this.endpointName;
    return {
      if (autoGenerateEndpointName != null)
        'AutoGenerateEndpointName': autoGenerateEndpointName,
      if (endpointName != null) 'EndpointName': endpointName,
    };
  }
}

/// Provides information about the endpoint of the model deployment.
class ModelDeployResult {
  /// The name of the endpoint to which the model has been deployed.
  /// <note>
  /// If model deployment fails, this field is omitted from the response.
  /// </note>
  final String? endpointName;

  ModelDeployResult({
    this.endpointName,
  });

  factory ModelDeployResult.fromJson(Map<String, dynamic> json) {
    return ModelDeployResult(
      endpointName: json['EndpointName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    return {
      if (endpointName != null) 'EndpointName': endpointName,
    };
  }
}

/// Provides information to verify the integrity of stored model artifacts.
class ModelDigests {
  /// Provides a hash value that uniquely identifies the stored model artifacts.
  final String? artifactDigest;

  ModelDigests({
    this.artifactDigest,
  });

  factory ModelDigests.fromJson(Map<String, dynamic> json) {
    return ModelDigests(
      artifactDigest: json['ArtifactDigest'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactDigest = this.artifactDigest;
    return {
      if (artifactDigest != null) 'ArtifactDigest': artifactDigest,
    };
  }
}

/// Docker container image configuration object for the model explainability
/// job.
class ModelExplainabilityAppSpecification {
  /// JSON formatted S3 file that defines explainability parameters. For more
  /// information on this JSON configuration file, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/json-model-explainability-parameter-config.html">Configure
  /// model explainability parameters</a>.
  final String configUri;

  /// The container image to be run by the model explainability job.
  final String imageUri;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  ModelExplainabilityAppSpecification({
    required this.configUri,
    required this.imageUri,
    this.environment,
  });

  factory ModelExplainabilityAppSpecification.fromJson(
      Map<String, dynamic> json) {
    return ModelExplainabilityAppSpecification(
      configUri: json['ConfigUri'] as String,
      imageUri: json['ImageUri'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final configUri = this.configUri;
    final imageUri = this.imageUri;
    final environment = this.environment;
    return {
      'ConfigUri': configUri,
      'ImageUri': imageUri,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// The configuration for a baseline model explainability job.
class ModelExplainabilityBaselineConfig {
  /// The name of the baseline model explainability job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;

  ModelExplainabilityBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
  });

  factory ModelExplainabilityBaselineConfig.fromJson(
      Map<String, dynamic> json) {
    return ModelExplainabilityBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
    };
  }
}

/// Inputs for the model explainability job.
class ModelExplainabilityJobInput {
  final EndpointInput endpointInput;

  ModelExplainabilityJobInput({
    required this.endpointInput,
  });

  factory ModelExplainabilityJobInput.fromJson(Map<String, dynamic> json) {
    return ModelExplainabilityJobInput(
      endpointInput:
          EndpointInput.fromJson(json['EndpointInput'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointInput = this.endpointInput;
    return {
      'EndpointInput': endpointInput,
    };
  }
}

/// Contains metrics captured from a model.
class ModelMetrics {
  /// Metrics that measure bais in a model.
  final Bias? bias;

  /// Metrics that help explain a model.
  final Explainability? explainability;

  /// Metrics that measure the quality of the input data for a model.
  final ModelDataQuality? modelDataQuality;

  /// Metrics that measure the quality of a model.
  final ModelQuality? modelQuality;

  ModelMetrics({
    this.bias,
    this.explainability,
    this.modelDataQuality,
    this.modelQuality,
  });

  factory ModelMetrics.fromJson(Map<String, dynamic> json) {
    return ModelMetrics(
      bias: json['Bias'] != null
          ? Bias.fromJson(json['Bias'] as Map<String, dynamic>)
          : null,
      explainability: json['Explainability'] != null
          ? Explainability.fromJson(
              json['Explainability'] as Map<String, dynamic>)
          : null,
      modelDataQuality: json['ModelDataQuality'] != null
          ? ModelDataQuality.fromJson(
              json['ModelDataQuality'] as Map<String, dynamic>)
          : null,
      modelQuality: json['ModelQuality'] != null
          ? ModelQuality.fromJson(json['ModelQuality'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final bias = this.bias;
    final explainability = this.explainability;
    final modelDataQuality = this.modelDataQuality;
    final modelQuality = this.modelQuality;
    return {
      if (bias != null) 'Bias': bias,
      if (explainability != null) 'Explainability': explainability,
      if (modelDataQuality != null) 'ModelDataQuality': modelDataQuality,
      if (modelQuality != null) 'ModelQuality': modelQuality,
    };
  }
}

/// A versioned model that can be deployed for SageMaker inference.
class ModelPackage {
  /// A description provided when the model approval is set.
  final String? approvalDescription;

  /// Whether the model package is to be certified to be listed on Amazon Web
  /// Services Marketplace. For information about listing model packages on Amazon
  /// Web Services Marketplace, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html">List
  /// Your Algorithm or Model Package on Amazon Web Services Marketplace</a>.
  final bool? certifyForMarketplace;
  final UserContext? createdBy;

  /// The time that the model package was created.
  final DateTime? creationTime;
  final InferenceSpecification? inferenceSpecification;
  final UserContext? lastModifiedBy;

  /// The last time the model package was modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The approval status of the model. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>APPROVED</code> - The model is approved
  /// </li>
  /// <li>
  /// <code>REJECTED</code> - The model is rejected.
  /// </li>
  /// <li>
  /// <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
  /// approval.
  /// </li>
  /// </ul>
  final ModelApprovalStatus? modelApprovalStatus;

  /// Metrics for the model.
  final ModelMetrics? modelMetrics;

  /// The Amazon Resource Name (ARN) of the model package.
  final String? modelPackageArn;

  /// The description of the model package.
  final String? modelPackageDescription;

  /// The model group to which the model belongs.
  final String? modelPackageGroupName;

  /// The name of the model.
  final String? modelPackageName;

  /// The status of the model package. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The model package is pending being created.
  /// </li>
  /// <li>
  /// <code>IN_PROGRESS</code> - The model package is in the process of being
  /// created.
  /// </li>
  /// <li>
  /// <code>COMPLETED</code> - The model package was successfully created.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - The model package failed.
  /// </li>
  /// <li>
  /// <code>DELETING</code> - The model package is in the process of being
  /// deleted.
  /// </li>
  /// </ul>
  final ModelPackageStatus? modelPackageStatus;
  final ModelPackageStatusDetails? modelPackageStatusDetails;

  /// The version number of a versioned model.
  final int? modelPackageVersion;
  final SourceAlgorithmSpecification? sourceAlgorithmSpecification;

  /// A list of the tags associated with the model package. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;
  final ModelPackageValidationSpecification? validationSpecification;

  ModelPackage({
    this.approvalDescription,
    this.certifyForMarketplace,
    this.createdBy,
    this.creationTime,
    this.inferenceSpecification,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.modelApprovalStatus,
    this.modelMetrics,
    this.modelPackageArn,
    this.modelPackageDescription,
    this.modelPackageGroupName,
    this.modelPackageName,
    this.modelPackageStatus,
    this.modelPackageStatusDetails,
    this.modelPackageVersion,
    this.sourceAlgorithmSpecification,
    this.tags,
    this.validationSpecification,
  });

  factory ModelPackage.fromJson(Map<String, dynamic> json) {
    return ModelPackage(
      approvalDescription: json['ApprovalDescription'] as String?,
      certifyForMarketplace: json['CertifyForMarketplace'] as bool?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      inferenceSpecification: json['InferenceSpecification'] != null
          ? InferenceSpecification.fromJson(
              json['InferenceSpecification'] as Map<String, dynamic>)
          : null,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      modelApprovalStatus:
          (json['ModelApprovalStatus'] as String?)?.toModelApprovalStatus(),
      modelMetrics: json['ModelMetrics'] != null
          ? ModelMetrics.fromJson(json['ModelMetrics'] as Map<String, dynamic>)
          : null,
      modelPackageArn: json['ModelPackageArn'] as String?,
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageName: json['ModelPackageName'] as String?,
      modelPackageStatus:
          (json['ModelPackageStatus'] as String?)?.toModelPackageStatus(),
      modelPackageStatusDetails: json['ModelPackageStatusDetails'] != null
          ? ModelPackageStatusDetails.fromJson(
              json['ModelPackageStatusDetails'] as Map<String, dynamic>)
          : null,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
      sourceAlgorithmSpecification: json['SourceAlgorithmSpecification'] != null
          ? SourceAlgorithmSpecification.fromJson(
              json['SourceAlgorithmSpecification'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationSpecification: json['ValidationSpecification'] != null
          ? ModelPackageValidationSpecification.fromJson(
              json['ValidationSpecification'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final approvalDescription = this.approvalDescription;
    final certifyForMarketplace = this.certifyForMarketplace;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final inferenceSpecification = this.inferenceSpecification;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelMetrics = this.modelMetrics;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageName = this.modelPackageName;
    final modelPackageStatus = this.modelPackageStatus;
    final modelPackageStatusDetails = this.modelPackageStatusDetails;
    final modelPackageVersion = this.modelPackageVersion;
    final sourceAlgorithmSpecification = this.sourceAlgorithmSpecification;
    final tags = this.tags;
    final validationSpecification = this.validationSpecification;
    return {
      if (approvalDescription != null)
        'ApprovalDescription': approvalDescription,
      if (certifyForMarketplace != null)
        'CertifyForMarketplace': certifyForMarketplace,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (inferenceSpecification != null)
        'InferenceSpecification': inferenceSpecification,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.toValue(),
      if (modelMetrics != null) 'ModelMetrics': modelMetrics,
      if (modelPackageArn != null) 'ModelPackageArn': modelPackageArn,
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageName != null) 'ModelPackageName': modelPackageName,
      if (modelPackageStatus != null)
        'ModelPackageStatus': modelPackageStatus.toValue(),
      if (modelPackageStatusDetails != null)
        'ModelPackageStatusDetails': modelPackageStatusDetails,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
      if (sourceAlgorithmSpecification != null)
        'SourceAlgorithmSpecification': sourceAlgorithmSpecification,
      if (tags != null) 'Tags': tags,
      if (validationSpecification != null)
        'ValidationSpecification': validationSpecification,
    };
  }
}

/// Describes the Docker container for the model package.
class ModelPackageContainerDefinition {
  /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is
  /// stored.
  ///
  /// If you are using your own custom algorithm instead of an algorithm provided
  /// by Amazon SageMaker, the inference code must meet Amazon SageMaker
  /// requirements. Amazon SageMaker supports both
  /// <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  final String image;

  /// The DNS host name for the Docker container.
  final String? containerHostname;

  /// The environment variables to set in the Docker container. Each key and value
  /// in the <code>Environment</code> string to string map can have length of up
  /// to 1024. We support up to 16 entries in the map.
  final Map<String, String>? environment;

  /// An MD5 hash of the training algorithm that identifies the Docker image used
  /// for training.
  final String? imageDigest;

  /// The Amazon S3 path where the model artifacts, which result from model
  /// training, are stored. This path must point to a single <code>gzip</code>
  /// compressed tar archive (<code>.tar.gz</code> suffix).
  /// <note>
  /// The model artifacts must be in an S3 bucket that is in the same region as
  /// the model package.
  /// </note>
  final String? modelDataUrl;

  /// The Amazon Web Services Marketplace product ID of the model package.
  final String? productId;

  ModelPackageContainerDefinition({
    required this.image,
    this.containerHostname,
    this.environment,
    this.imageDigest,
    this.modelDataUrl,
    this.productId,
  });

  factory ModelPackageContainerDefinition.fromJson(Map<String, dynamic> json) {
    return ModelPackageContainerDefinition(
      image: json['Image'] as String,
      containerHostname: json['ContainerHostname'] as String?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      imageDigest: json['ImageDigest'] as String?,
      modelDataUrl: json['ModelDataUrl'] as String?,
      productId: json['ProductId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final image = this.image;
    final containerHostname = this.containerHostname;
    final environment = this.environment;
    final imageDigest = this.imageDigest;
    final modelDataUrl = this.modelDataUrl;
    final productId = this.productId;
    return {
      'Image': image,
      if (containerHostname != null) 'ContainerHostname': containerHostname,
      if (environment != null) 'Environment': environment,
      if (imageDigest != null) 'ImageDigest': imageDigest,
      if (modelDataUrl != null) 'ModelDataUrl': modelDataUrl,
      if (productId != null) 'ProductId': productId,
    };
  }
}

/// A group of versioned models in the model registry.
class ModelPackageGroup {
  final UserContext? createdBy;

  /// The time that the model group was created.
  final DateTime? creationTime;

  /// The Amazon Resource Name (ARN) of the model group.
  final String? modelPackageGroupArn;

  /// The description for the model group.
  final String? modelPackageGroupDescription;

  /// The name of the model group.
  final String? modelPackageGroupName;

  /// The status of the model group. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The model group is pending being created.
  /// </li>
  /// <li>
  /// <code>IN_PROGRESS</code> - The model group is in the process of being
  /// created.
  /// </li>
  /// <li>
  /// <code>COMPLETED</code> - The model group was successfully created.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - The model group failed.
  /// </li>
  /// <li>
  /// <code>DELETING</code> - The model group is in the process of being deleted.
  /// </li>
  /// <li>
  /// <code>DELETE_FAILED</code> - SageMaker failed to delete the model group.
  /// </li>
  /// </ul>
  final ModelPackageGroupStatus? modelPackageGroupStatus;

  /// A list of the tags associated with the model group. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  ModelPackageGroup({
    this.createdBy,
    this.creationTime,
    this.modelPackageGroupArn,
    this.modelPackageGroupDescription,
    this.modelPackageGroupName,
    this.modelPackageGroupStatus,
    this.tags,
  });

  factory ModelPackageGroup.fromJson(Map<String, dynamic> json) {
    return ModelPackageGroup(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String?,
      modelPackageGroupDescription:
          json['ModelPackageGroupDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageGroupStatus: (json['ModelPackageGroupStatus'] as String?)
          ?.toModelPackageGroupStatus(),
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final modelPackageGroupArn = this.modelPackageGroupArn;
    final modelPackageGroupDescription = this.modelPackageGroupDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageGroupStatus = this.modelPackageGroupStatus;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (modelPackageGroupArn != null)
        'ModelPackageGroupArn': modelPackageGroupArn,
      if (modelPackageGroupDescription != null)
        'ModelPackageGroupDescription': modelPackageGroupDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageGroupStatus != null)
        'ModelPackageGroupStatus': modelPackageGroupStatus.toValue(),
      if (tags != null) 'Tags': tags,
    };
  }
}

enum ModelPackageGroupSortBy {
  name,
  creationTime,
}

extension on ModelPackageGroupSortBy {
  String toValue() {
    switch (this) {
      case ModelPackageGroupSortBy.name:
        return 'Name';
      case ModelPackageGroupSortBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  ModelPackageGroupSortBy toModelPackageGroupSortBy() {
    switch (this) {
      case 'Name':
        return ModelPackageGroupSortBy.name;
      case 'CreationTime':
        return ModelPackageGroupSortBy.creationTime;
    }
    throw Exception('$this is not known in enum ModelPackageGroupSortBy');
  }
}

enum ModelPackageGroupStatus {
  pending,
  inProgress,
  completed,
  failed,
  deleting,
  deleteFailed,
}

extension on ModelPackageGroupStatus {
  String toValue() {
    switch (this) {
      case ModelPackageGroupStatus.pending:
        return 'Pending';
      case ModelPackageGroupStatus.inProgress:
        return 'InProgress';
      case ModelPackageGroupStatus.completed:
        return 'Completed';
      case ModelPackageGroupStatus.failed:
        return 'Failed';
      case ModelPackageGroupStatus.deleting:
        return 'Deleting';
      case ModelPackageGroupStatus.deleteFailed:
        return 'DeleteFailed';
    }
  }
}

extension on String {
  ModelPackageGroupStatus toModelPackageGroupStatus() {
    switch (this) {
      case 'Pending':
        return ModelPackageGroupStatus.pending;
      case 'InProgress':
        return ModelPackageGroupStatus.inProgress;
      case 'Completed':
        return ModelPackageGroupStatus.completed;
      case 'Failed':
        return ModelPackageGroupStatus.failed;
      case 'Deleting':
        return ModelPackageGroupStatus.deleting;
      case 'DeleteFailed':
        return ModelPackageGroupStatus.deleteFailed;
    }
    throw Exception('$this is not known in enum ModelPackageGroupStatus');
  }
}

/// Summary information about a model group.
class ModelPackageGroupSummary {
  /// The time that the model group was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model group.
  final String modelPackageGroupArn;

  /// The name of the model group.
  final String modelPackageGroupName;

  /// The status of the model group.
  final ModelPackageGroupStatus modelPackageGroupStatus;

  /// A description of the model group.
  final String? modelPackageGroupDescription;

  ModelPackageGroupSummary({
    required this.creationTime,
    required this.modelPackageGroupArn,
    required this.modelPackageGroupName,
    required this.modelPackageGroupStatus,
    this.modelPackageGroupDescription,
  });

  factory ModelPackageGroupSummary.fromJson(Map<String, dynamic> json) {
    return ModelPackageGroupSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
      modelPackageGroupName: json['ModelPackageGroupName'] as String,
      modelPackageGroupStatus: (json['ModelPackageGroupStatus'] as String)
          .toModelPackageGroupStatus(),
      modelPackageGroupDescription:
          json['ModelPackageGroupDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelPackageGroupArn = this.modelPackageGroupArn;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageGroupStatus = this.modelPackageGroupStatus;
    final modelPackageGroupDescription = this.modelPackageGroupDescription;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageGroupArn': modelPackageGroupArn,
      'ModelPackageGroupName': modelPackageGroupName,
      'ModelPackageGroupStatus': modelPackageGroupStatus.toValue(),
      if (modelPackageGroupDescription != null)
        'ModelPackageGroupDescription': modelPackageGroupDescription,
    };
  }
}

enum ModelPackageSortBy {
  name,
  creationTime,
}

extension on ModelPackageSortBy {
  String toValue() {
    switch (this) {
      case ModelPackageSortBy.name:
        return 'Name';
      case ModelPackageSortBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  ModelPackageSortBy toModelPackageSortBy() {
    switch (this) {
      case 'Name':
        return ModelPackageSortBy.name;
      case 'CreationTime':
        return ModelPackageSortBy.creationTime;
    }
    throw Exception('$this is not known in enum ModelPackageSortBy');
  }
}

enum ModelPackageStatus {
  pending,
  inProgress,
  completed,
  failed,
  deleting,
}

extension on ModelPackageStatus {
  String toValue() {
    switch (this) {
      case ModelPackageStatus.pending:
        return 'Pending';
      case ModelPackageStatus.inProgress:
        return 'InProgress';
      case ModelPackageStatus.completed:
        return 'Completed';
      case ModelPackageStatus.failed:
        return 'Failed';
      case ModelPackageStatus.deleting:
        return 'Deleting';
    }
  }
}

extension on String {
  ModelPackageStatus toModelPackageStatus() {
    switch (this) {
      case 'Pending':
        return ModelPackageStatus.pending;
      case 'InProgress':
        return ModelPackageStatus.inProgress;
      case 'Completed':
        return ModelPackageStatus.completed;
      case 'Failed':
        return ModelPackageStatus.failed;
      case 'Deleting':
        return ModelPackageStatus.deleting;
    }
    throw Exception('$this is not known in enum ModelPackageStatus');
  }
}

/// Specifies the validation and image scan statuses of the model package.
class ModelPackageStatusDetails {
  /// The validation status of the model package.
  final List<ModelPackageStatusItem> validationStatuses;

  /// The status of the scan of the Docker image container for the model package.
  final List<ModelPackageStatusItem>? imageScanStatuses;

  ModelPackageStatusDetails({
    required this.validationStatuses,
    this.imageScanStatuses,
  });

  factory ModelPackageStatusDetails.fromJson(Map<String, dynamic> json) {
    return ModelPackageStatusDetails(
      validationStatuses: (json['ValidationStatuses'] as List)
          .whereNotNull()
          .map(
              (e) => ModelPackageStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
      imageScanStatuses: (json['ImageScanStatuses'] as List?)
          ?.whereNotNull()
          .map(
              (e) => ModelPackageStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final validationStatuses = this.validationStatuses;
    final imageScanStatuses = this.imageScanStatuses;
    return {
      'ValidationStatuses': validationStatuses,
      if (imageScanStatuses != null) 'ImageScanStatuses': imageScanStatuses,
    };
  }
}

/// Represents the overall status of a model package.
class ModelPackageStatusItem {
  /// The name of the model package for which the overall status is being
  /// reported.
  final String name;

  /// The current status.
  final DetailedModelPackageStatus status;

  /// if the overall status is <code>Failed</code>, the reason for the failure.
  final String? failureReason;

  ModelPackageStatusItem({
    required this.name,
    required this.status,
    this.failureReason,
  });

  factory ModelPackageStatusItem.fromJson(Map<String, dynamic> json) {
    return ModelPackageStatusItem(
      name: json['Name'] as String,
      status: (json['Status'] as String).toDetailedModelPackageStatus(),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final status = this.status;
    final failureReason = this.failureReason;
    return {
      'Name': name,
      'Status': status.toValue(),
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// Provides summary information about a model package.
class ModelPackageSummary {
  /// A timestamp that shows when the model package was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model package.
  final String modelPackageArn;

  /// The name of the model package.
  final String modelPackageName;

  /// The overall status of the model package.
  final ModelPackageStatus modelPackageStatus;

  /// The approval status of the model. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>APPROVED</code> - The model is approved
  /// </li>
  /// <li>
  /// <code>REJECTED</code> - The model is rejected.
  /// </li>
  /// <li>
  /// <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
  /// approval.
  /// </li>
  /// </ul>
  final ModelApprovalStatus? modelApprovalStatus;

  /// A brief description of the model package.
  final String? modelPackageDescription;

  /// If the model package is a versioned model, the model group that the
  /// versioned model belongs to.
  final String? modelPackageGroupName;

  /// If the model package is a versioned model, the version of the model.
  final int? modelPackageVersion;

  ModelPackageSummary({
    required this.creationTime,
    required this.modelPackageArn,
    required this.modelPackageName,
    required this.modelPackageStatus,
    this.modelApprovalStatus,
    this.modelPackageDescription,
    this.modelPackageGroupName,
    this.modelPackageVersion,
  });

  factory ModelPackageSummary.fromJson(Map<String, dynamic> json) {
    return ModelPackageSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageArn: json['ModelPackageArn'] as String,
      modelPackageName: json['ModelPackageName'] as String,
      modelPackageStatus:
          (json['ModelPackageStatus'] as String).toModelPackageStatus(),
      modelApprovalStatus:
          (json['ModelApprovalStatus'] as String?)?.toModelApprovalStatus(),
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageName = this.modelPackageName;
    final modelPackageStatus = this.modelPackageStatus;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageVersion = this.modelPackageVersion;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageArn': modelPackageArn,
      'ModelPackageName': modelPackageName,
      'ModelPackageStatus': modelPackageStatus.toValue(),
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.toValue(),
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
    };
  }
}

enum ModelPackageType {
  versioned,
  unversioned,
  both,
}

extension on ModelPackageType {
  String toValue() {
    switch (this) {
      case ModelPackageType.versioned:
        return 'Versioned';
      case ModelPackageType.unversioned:
        return 'Unversioned';
      case ModelPackageType.both:
        return 'Both';
    }
  }
}

extension on String {
  ModelPackageType toModelPackageType() {
    switch (this) {
      case 'Versioned':
        return ModelPackageType.versioned;
      case 'Unversioned':
        return ModelPackageType.unversioned;
      case 'Both':
        return ModelPackageType.both;
    }
    throw Exception('$this is not known in enum ModelPackageType');
  }
}

/// Contains data, such as the inputs and targeted instance types that are used
/// in the process of validating the model package.
///
/// The data provided in the validation profile is made available to your buyers
/// on Amazon Web Services Marketplace.
class ModelPackageValidationProfile {
  /// The name of the profile for the model package.
  final String profileName;

  /// The <code>TransformJobDefinition</code> object that describes the transform
  /// job used for the validation of the model package.
  final TransformJobDefinition transformJobDefinition;

  ModelPackageValidationProfile({
    required this.profileName,
    required this.transformJobDefinition,
  });

  factory ModelPackageValidationProfile.fromJson(Map<String, dynamic> json) {
    return ModelPackageValidationProfile(
      profileName: json['ProfileName'] as String,
      transformJobDefinition: TransformJobDefinition.fromJson(
          json['TransformJobDefinition'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final profileName = this.profileName;
    final transformJobDefinition = this.transformJobDefinition;
    return {
      'ProfileName': profileName,
      'TransformJobDefinition': transformJobDefinition,
    };
  }
}

/// Specifies batch transform jobs that Amazon SageMaker runs to validate your
/// model package.
class ModelPackageValidationSpecification {
  /// An array of <code>ModelPackageValidationProfile</code> objects, each of
  /// which specifies a batch transform job that Amazon SageMaker runs to validate
  /// your model package.
  final List<ModelPackageValidationProfile> validationProfiles;

  /// The IAM roles to be used for the validation of the model package.
  final String validationRole;

  ModelPackageValidationSpecification({
    required this.validationProfiles,
    required this.validationRole,
  });

  factory ModelPackageValidationSpecification.fromJson(
      Map<String, dynamic> json) {
    return ModelPackageValidationSpecification(
      validationProfiles: (json['ValidationProfiles'] as List)
          .whereNotNull()
          .map((e) =>
              ModelPackageValidationProfile.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationRole: json['ValidationRole'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final validationProfiles = this.validationProfiles;
    final validationRole = this.validationRole;
    return {
      'ValidationProfiles': validationProfiles,
      'ValidationRole': validationRole,
    };
  }
}

/// Model quality statistics and constraints.
class ModelQuality {
  /// Model quality constraints.
  final MetricsSource? constraints;

  /// Model quality statistics.
  final MetricsSource? statistics;

  ModelQuality({
    this.constraints,
    this.statistics,
  });

  factory ModelQuality.fromJson(Map<String, dynamic> json) {
    return ModelQuality(
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
      statistics: json['Statistics'] != null
          ? MetricsSource.fromJson(json['Statistics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final constraints = this.constraints;
    final statistics = this.statistics;
    return {
      if (constraints != null) 'Constraints': constraints,
      if (statistics != null) 'Statistics': statistics,
    };
  }
}

/// Container image configuration object for the monitoring job.
class ModelQualityAppSpecification {
  /// The address of the container image that the monitoring job runs.
  final String imageUri;

  /// An array of arguments for the container used to run the monitoring job.
  final List<String>? containerArguments;

  /// Specifies the entrypoint for a container that the monitoring job runs.
  final List<String>? containerEntrypoint;

  /// Sets the environment variables in the container that the monitoring job
  /// runs.
  final Map<String, String>? environment;

  /// An Amazon S3 URI to a script that is called after analysis has been
  /// performed. Applicable only for the built-in (first party) containers.
  final String? postAnalyticsProcessorSourceUri;

  /// The machine learning problem type of the model that the monitoring job
  /// monitors.
  final MonitoringProblemType? problemType;

  /// An Amazon S3 URI to a script that is called per row prior to running
  /// analysis. It can base64 decode the payload and convert it into a flatted
  /// json so that the built-in container can use the converted data. Applicable
  /// only for the built-in (first party) containers.
  final String? recordPreprocessorSourceUri;

  ModelQualityAppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
    this.environment,
    this.postAnalyticsProcessorSourceUri,
    this.problemType,
    this.recordPreprocessorSourceUri,
  });

  factory ModelQualityAppSpecification.fromJson(Map<String, dynamic> json) {
    return ModelQualityAppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      postAnalyticsProcessorSourceUri:
          json['PostAnalyticsProcessorSourceUri'] as String?,
      problemType: (json['ProblemType'] as String?)?.toMonitoringProblemType(),
      recordPreprocessorSourceUri:
          json['RecordPreprocessorSourceUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final environment = this.environment;
    final postAnalyticsProcessorSourceUri =
        this.postAnalyticsProcessorSourceUri;
    final problemType = this.problemType;
    final recordPreprocessorSourceUri = this.recordPreprocessorSourceUri;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (environment != null) 'Environment': environment,
      if (postAnalyticsProcessorSourceUri != null)
        'PostAnalyticsProcessorSourceUri': postAnalyticsProcessorSourceUri,
      if (problemType != null) 'ProblemType': problemType.toValue(),
      if (recordPreprocessorSourceUri != null)
        'RecordPreprocessorSourceUri': recordPreprocessorSourceUri,
    };
  }
}

/// Configuration for monitoring constraints and monitoring statistics. These
/// baseline resources are compared against the results of the current job from
/// the series of jobs scheduled to collect data periodically.
class ModelQualityBaselineConfig {
  /// The name of the job that performs baselining for the monitoring job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;

  ModelQualityBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
  });

  factory ModelQualityBaselineConfig.fromJson(Map<String, dynamic> json) {
    return ModelQualityBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
    };
  }
}

/// The input for the model quality monitoring job. Currently endponts are
/// supported for input for model quality monitoring jobs.
class ModelQualityJobInput {
  final EndpointInput endpointInput;

  /// The ground truth label provided for the model.
  final MonitoringGroundTruthS3Input groundTruthS3Input;

  ModelQualityJobInput({
    required this.endpointInput,
    required this.groundTruthS3Input,
  });

  factory ModelQualityJobInput.fromJson(Map<String, dynamic> json) {
    return ModelQualityJobInput(
      endpointInput:
          EndpointInput.fromJson(json['EndpointInput'] as Map<String, dynamic>),
      groundTruthS3Input: MonitoringGroundTruthS3Input.fromJson(
          json['GroundTruthS3Input'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointInput = this.endpointInput;
    final groundTruthS3Input = this.groundTruthS3Input;
    return {
      'EndpointInput': endpointInput,
      'GroundTruthS3Input': groundTruthS3Input,
    };
  }
}

enum ModelSortKey {
  name,
  creationTime,
}

extension on ModelSortKey {
  String toValue() {
    switch (this) {
      case ModelSortKey.name:
        return 'Name';
      case ModelSortKey.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  ModelSortKey toModelSortKey() {
    switch (this) {
      case 'Name':
        return ModelSortKey.name;
      case 'CreationTime':
        return ModelSortKey.creationTime;
    }
    throw Exception('$this is not known in enum ModelSortKey');
  }
}

/// Metadata for Model steps.
class ModelStepMetadata {
  /// The Amazon Resource Name (ARN) of the created model.
  final String? arn;

  ModelStepMetadata({
    this.arn,
  });

  factory ModelStepMetadata.fromJson(Map<String, dynamic> json) {
    return ModelStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides summary information about a model.
class ModelSummary {
  /// A timestamp that indicates when the model was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model.
  final String modelArn;

  /// The name of the model that you want a summary for.
  final String modelName;

  ModelSummary({
    required this.creationTime,
    required this.modelArn,
    required this.modelName,
  });

  factory ModelSummary.fromJson(Map<String, dynamic> json) {
    return ModelSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelArn: json['ModelArn'] as String,
      modelName: json['ModelName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelArn = this.modelArn;
    final modelName = this.modelName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelArn': modelArn,
      'ModelName': modelName,
    };
  }
}

/// Container image configuration object for the monitoring job.
class MonitoringAppSpecification {
  /// The container image to be run by the monitoring job.
  final String imageUri;

  /// An array of arguments for the container used to run the monitoring job.
  final List<String>? containerArguments;

  /// Specifies the entrypoint for a container used to run the monitoring job.
  final List<String>? containerEntrypoint;

  /// An Amazon S3 URI to a script that is called after analysis has been
  /// performed. Applicable only for the built-in (first party) containers.
  final String? postAnalyticsProcessorSourceUri;

  /// An Amazon S3 URI to a script that is called per row prior to running
  /// analysis. It can base64 decode the payload and convert it into a flatted
  /// json so that the built-in container can use the converted data. Applicable
  /// only for the built-in (first party) containers.
  final String? recordPreprocessorSourceUri;

  MonitoringAppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
    this.postAnalyticsProcessorSourceUri,
    this.recordPreprocessorSourceUri,
  });

  factory MonitoringAppSpecification.fromJson(Map<String, dynamic> json) {
    return MonitoringAppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      postAnalyticsProcessorSourceUri:
          json['PostAnalyticsProcessorSourceUri'] as String?,
      recordPreprocessorSourceUri:
          json['RecordPreprocessorSourceUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final postAnalyticsProcessorSourceUri =
        this.postAnalyticsProcessorSourceUri;
    final recordPreprocessorSourceUri = this.recordPreprocessorSourceUri;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (postAnalyticsProcessorSourceUri != null)
        'PostAnalyticsProcessorSourceUri': postAnalyticsProcessorSourceUri,
      if (recordPreprocessorSourceUri != null)
        'RecordPreprocessorSourceUri': recordPreprocessorSourceUri,
    };
  }
}

/// Configuration for monitoring constraints and monitoring statistics. These
/// baseline resources are compared against the results of the current job from
/// the series of jobs scheduled to collect data periodically.
class MonitoringBaselineConfig {
  /// The name of the job that performs baselining for the monitoring job.
  final String? baseliningJobName;

  /// The baseline constraint file in Amazon S3 that the current monitoring job
  /// should validated against.
  final MonitoringConstraintsResource? constraintsResource;

  /// The baseline statistics file in Amazon S3 that the current monitoring job
  /// should be validated against.
  final MonitoringStatisticsResource? statisticsResource;

  MonitoringBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
    this.statisticsResource,
  });

  factory MonitoringBaselineConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
      statisticsResource: json['StatisticsResource'] != null
          ? MonitoringStatisticsResource.fromJson(
              json['StatisticsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    final statisticsResource = this.statisticsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
      if (statisticsResource != null) 'StatisticsResource': statisticsResource,
    };
  }
}

/// Configuration for the cluster used to run model monitoring jobs.
class MonitoringClusterConfig {
  /// The number of ML compute instances to use in the model monitoring job. For
  /// distributed processing jobs, specify a value greater than 1. The default
  /// value is 1.
  final int instanceCount;

  /// The ML compute instance type for the processing job.
  final ProcessingInstanceType instanceType;

  /// The size of the ML storage volume, in gigabytes, that you want to provision.
  /// You must specify sufficient ML storage for your scenario.
  final int volumeSizeInGB;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume attached to
  /// the ML compute instance(s) that run the model monitoring job.
  final String? volumeKmsKeyId;

  MonitoringClusterConfig({
    required this.instanceCount,
    required this.instanceType,
    required this.volumeSizeInGB,
    this.volumeKmsKeyId,
  });

  factory MonitoringClusterConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringClusterConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType: (json['InstanceType'] as String).toProcessingInstanceType(),
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeSizeInGB = this.volumeSizeInGB;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.toValue(),
      'VolumeSizeInGB': volumeSizeInGB,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// The constraints resource for a monitoring job.
class MonitoringConstraintsResource {
  /// The Amazon S3 URI for the constraints resource.
  final String? s3Uri;

  MonitoringConstraintsResource({
    this.s3Uri,
  });

  factory MonitoringConstraintsResource.fromJson(Map<String, dynamic> json) {
    return MonitoringConstraintsResource(
      s3Uri: json['S3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    return {
      if (s3Uri != null) 'S3Uri': s3Uri,
    };
  }
}

enum MonitoringExecutionSortKey {
  creationTime,
  scheduledTime,
  status,
}

extension on MonitoringExecutionSortKey {
  String toValue() {
    switch (this) {
      case MonitoringExecutionSortKey.creationTime:
        return 'CreationTime';
      case MonitoringExecutionSortKey.scheduledTime:
        return 'ScheduledTime';
      case MonitoringExecutionSortKey.status:
        return 'Status';
    }
  }
}

extension on String {
  MonitoringExecutionSortKey toMonitoringExecutionSortKey() {
    switch (this) {
      case 'CreationTime':
        return MonitoringExecutionSortKey.creationTime;
      case 'ScheduledTime':
        return MonitoringExecutionSortKey.scheduledTime;
      case 'Status':
        return MonitoringExecutionSortKey.status;
    }
    throw Exception('$this is not known in enum MonitoringExecutionSortKey');
  }
}

/// Summary of information about the last monitoring job to run.
class MonitoringExecutionSummary {
  /// The time at which the monitoring job was created.
  final DateTime creationTime;

  /// A timestamp that indicates the last time the monitoring job was modified.
  final DateTime lastModifiedTime;

  /// The status of the monitoring job.
  final ExecutionStatus monitoringExecutionStatus;

  /// The name of the monitoring schedule.
  final String monitoringScheduleName;

  /// The time the monitoring job was scheduled.
  final DateTime scheduledTime;

  /// The name of the endpoint used to run the monitoring job.
  final String? endpointName;

  /// Contains the reason a monitoring job failed, if it failed.
  final String? failureReason;

  /// The name of the monitoring job.
  final String? monitoringJobDefinitionName;

  /// The type of the monitoring job.
  final MonitoringType? monitoringType;

  /// The Amazon Resource Name (ARN) of the monitoring job.
  final String? processingJobArn;

  MonitoringExecutionSummary({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.monitoringExecutionStatus,
    required this.monitoringScheduleName,
    required this.scheduledTime,
    this.endpointName,
    this.failureReason,
    this.monitoringJobDefinitionName,
    this.monitoringType,
    this.processingJobArn,
  });

  factory MonitoringExecutionSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringExecutionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringExecutionStatus:
          (json['MonitoringExecutionStatus'] as String).toExecutionStatus(),
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
      scheduledTime:
          nonNullableTimeStampFromJson(json['ScheduledTime'] as Object),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String?,
      monitoringType: (json['MonitoringType'] as String?)?.toMonitoringType(),
      processingJobArn: json['ProcessingJobArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringExecutionStatus = this.monitoringExecutionStatus;
    final monitoringScheduleName = this.monitoringScheduleName;
    final scheduledTime = this.scheduledTime;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    final monitoringType = this.monitoringType;
    final processingJobArn = this.processingJobArn;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringExecutionStatus': monitoringExecutionStatus.toValue(),
      'MonitoringScheduleName': monitoringScheduleName,
      'ScheduledTime': unixTimestampToJson(scheduledTime),
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (monitoringJobDefinitionName != null)
        'MonitoringJobDefinitionName': monitoringJobDefinitionName,
      if (monitoringType != null) 'MonitoringType': monitoringType.toValue(),
      if (processingJobArn != null) 'ProcessingJobArn': processingJobArn,
    };
  }
}

/// The ground truth labels for the dataset used for the monitoring job.
class MonitoringGroundTruthS3Input {
  /// The address of the Amazon S3 location of the ground truth labels.
  final String? s3Uri;

  MonitoringGroundTruthS3Input({
    this.s3Uri,
  });

  factory MonitoringGroundTruthS3Input.fromJson(Map<String, dynamic> json) {
    return MonitoringGroundTruthS3Input(
      s3Uri: json['S3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    return {
      if (s3Uri != null) 'S3Uri': s3Uri,
    };
  }
}

/// The inputs for a monitoring job.
class MonitoringInput {
  /// The endpoint for a monitoring job.
  final EndpointInput endpointInput;

  MonitoringInput({
    required this.endpointInput,
  });

  factory MonitoringInput.fromJson(Map<String, dynamic> json) {
    return MonitoringInput(
      endpointInput:
          EndpointInput.fromJson(json['EndpointInput'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointInput = this.endpointInput;
    return {
      'EndpointInput': endpointInput,
    };
  }
}

/// Defines the monitoring job.
class MonitoringJobDefinition {
  /// Configures the monitoring job to run a specified Docker container image.
  final MonitoringAppSpecification monitoringAppSpecification;

  /// The array of inputs for the monitoring job. Currently we support monitoring
  /// an Amazon SageMaker Endpoint.
  final List<MonitoringInput> monitoringInputs;

  /// The array of outputs from the monitoring job to be uploaded to Amazon Simple
  /// Storage Service (Amazon S3).
  final MonitoringOutputConfig monitoringOutputConfig;

  /// Identifies the resources, ML compute instances, and ML storage volumes to
  /// deploy for a monitoring job. In distributed processing, you specify more
  /// than one instance.
  final MonitoringResources monitoringResources;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String roleArn;

  /// Baseline configuration used to validate that the data conforms to the
  /// specified constraints and statistics
  final MonitoringBaselineConfig? baselineConfig;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  /// Specifies networking options for an monitoring job.
  final NetworkConfig? networkConfig;

  /// Specifies a time limit for how long the monitoring job is allowed to run.
  final MonitoringStoppingCondition? stoppingCondition;

  MonitoringJobDefinition({
    required this.monitoringAppSpecification,
    required this.monitoringInputs,
    required this.monitoringOutputConfig,
    required this.monitoringResources,
    required this.roleArn,
    this.baselineConfig,
    this.environment,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory MonitoringJobDefinition.fromJson(Map<String, dynamic> json) {
    return MonitoringJobDefinition(
      monitoringAppSpecification: MonitoringAppSpecification.fromJson(
          json['MonitoringAppSpecification'] as Map<String, dynamic>),
      monitoringInputs: (json['MonitoringInputs'] as List)
          .whereNotNull()
          .map((e) => MonitoringInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      monitoringOutputConfig: MonitoringOutputConfig.fromJson(
          json['MonitoringOutputConfig'] as Map<String, dynamic>),
      monitoringResources: MonitoringResources.fromJson(
          json['MonitoringResources'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      baselineConfig: json['BaselineConfig'] != null
          ? MonitoringBaselineConfig.fromJson(
              json['BaselineConfig'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      networkConfig: json['NetworkConfig'] != null
          ? NetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringAppSpecification = this.monitoringAppSpecification;
    final monitoringInputs = this.monitoringInputs;
    final monitoringOutputConfig = this.monitoringOutputConfig;
    final monitoringResources = this.monitoringResources;
    final roleArn = this.roleArn;
    final baselineConfig = this.baselineConfig;
    final environment = this.environment;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'MonitoringAppSpecification': monitoringAppSpecification,
      'MonitoringInputs': monitoringInputs,
      'MonitoringOutputConfig': monitoringOutputConfig,
      'MonitoringResources': monitoringResources,
      'RoleArn': roleArn,
      if (baselineConfig != null) 'BaselineConfig': baselineConfig,
      if (environment != null) 'Environment': environment,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

enum MonitoringJobDefinitionSortKey {
  name,
  creationTime,
}

extension on MonitoringJobDefinitionSortKey {
  String toValue() {
    switch (this) {
      case MonitoringJobDefinitionSortKey.name:
        return 'Name';
      case MonitoringJobDefinitionSortKey.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  MonitoringJobDefinitionSortKey toMonitoringJobDefinitionSortKey() {
    switch (this) {
      case 'Name':
        return MonitoringJobDefinitionSortKey.name;
      case 'CreationTime':
        return MonitoringJobDefinitionSortKey.creationTime;
    }
    throw Exception(
        '$this is not known in enum MonitoringJobDefinitionSortKey');
  }
}

/// Summary information about a monitoring job.
class MonitoringJobDefinitionSummary {
  /// The time that the monitoring job was created.
  final DateTime creationTime;

  /// The name of the endpoint that the job monitors.
  final String endpointName;

  /// The Amazon Resource Name (ARN) of the monitoring job.
  final String monitoringJobDefinitionArn;

  /// The name of the monitoring job.
  final String monitoringJobDefinitionName;

  MonitoringJobDefinitionSummary({
    required this.creationTime,
    required this.endpointName,
    required this.monitoringJobDefinitionArn,
    required this.monitoringJobDefinitionName,
  });

  factory MonitoringJobDefinitionSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringJobDefinitionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointName: json['EndpointName'] as String,
      monitoringJobDefinitionArn: json['MonitoringJobDefinitionArn'] as String,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointName = this.endpointName;
    final monitoringJobDefinitionArn = this.monitoringJobDefinitionArn;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointName': endpointName,
      'MonitoringJobDefinitionArn': monitoringJobDefinitionArn,
      'MonitoringJobDefinitionName': monitoringJobDefinitionName,
    };
  }
}

/// The networking configuration for the monitoring job.
class MonitoringNetworkConfig {
  /// Whether to encrypt all communications between the instances used for the
  /// monitoring jobs. Choose <code>True</code> to encrypt communications.
  /// Encryption provides greater security for distributed jobs, but the
  /// processing might take longer.
  final bool? enableInterContainerTrafficEncryption;

  /// Whether to allow inbound and outbound network calls to and from the
  /// containers used for the monitoring job.
  final bool? enableNetworkIsolation;
  final VpcConfig? vpcConfig;

  MonitoringNetworkConfig({
    this.enableInterContainerTrafficEncryption,
    this.enableNetworkIsolation,
    this.vpcConfig,
  });

  factory MonitoringNetworkConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringNetworkConfig(
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final vpcConfig = this.vpcConfig;
    return {
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// The output object for a monitoring job.
class MonitoringOutput {
  /// The Amazon S3 storage location where the results of a monitoring job are
  /// saved.
  final MonitoringS3Output s3Output;

  MonitoringOutput({
    required this.s3Output,
  });

  factory MonitoringOutput.fromJson(Map<String, dynamic> json) {
    return MonitoringOutput(
      s3Output:
          MonitoringS3Output.fromJson(json['S3Output'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final s3Output = this.s3Output;
    return {
      'S3Output': s3Output,
    };
  }
}

/// The output configuration for monitoring jobs.
class MonitoringOutputConfig {
  /// Monitoring outputs for monitoring jobs. This is where the output of the
  /// periodic monitoring jobs is uploaded.
  final List<MonitoringOutput> monitoringOutputs;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the model artifacts at rest using
  /// Amazon S3 server-side encryption.
  final String? kmsKeyId;

  MonitoringOutputConfig({
    required this.monitoringOutputs,
    this.kmsKeyId,
  });

  factory MonitoringOutputConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringOutputConfig(
      monitoringOutputs: (json['MonitoringOutputs'] as List)
          .whereNotNull()
          .map((e) => MonitoringOutput.fromJson(e as Map<String, dynamic>))
          .toList(),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringOutputs = this.monitoringOutputs;
    final kmsKeyId = this.kmsKeyId;
    return {
      'MonitoringOutputs': monitoringOutputs,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum MonitoringProblemType {
  binaryClassification,
  multiclassClassification,
  regression,
}

extension on MonitoringProblemType {
  String toValue() {
    switch (this) {
      case MonitoringProblemType.binaryClassification:
        return 'BinaryClassification';
      case MonitoringProblemType.multiclassClassification:
        return 'MulticlassClassification';
      case MonitoringProblemType.regression:
        return 'Regression';
    }
  }
}

extension on String {
  MonitoringProblemType toMonitoringProblemType() {
    switch (this) {
      case 'BinaryClassification':
        return MonitoringProblemType.binaryClassification;
      case 'MulticlassClassification':
        return MonitoringProblemType.multiclassClassification;
      case 'Regression':
        return MonitoringProblemType.regression;
    }
    throw Exception('$this is not known in enum MonitoringProblemType');
  }
}

/// Identifies the resources to deploy for a monitoring job.
class MonitoringResources {
  /// The configuration for the cluster resources used to run the processing job.
  final MonitoringClusterConfig clusterConfig;

  MonitoringResources({
    required this.clusterConfig,
  });

  factory MonitoringResources.fromJson(Map<String, dynamic> json) {
    return MonitoringResources(
      clusterConfig: MonitoringClusterConfig.fromJson(
          json['ClusterConfig'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterConfig = this.clusterConfig;
    return {
      'ClusterConfig': clusterConfig,
    };
  }
}

/// Information about where and how you want to store the results of a
/// monitoring job.
class MonitoringS3Output {
  /// The local path to the Amazon S3 storage location where Amazon SageMaker
  /// saves the results of a monitoring job. LocalPath is an absolute path for the
  /// output data.
  final String localPath;

  /// A URI that identifies the Amazon S3 storage location where Amazon SageMaker
  /// saves the results of a monitoring job.
  final String s3Uri;

  /// Whether to upload the results of the monitoring job continuously or after
  /// the job completes.
  final ProcessingS3UploadMode? s3UploadMode;

  MonitoringS3Output({
    required this.localPath,
    required this.s3Uri,
    this.s3UploadMode,
  });

  factory MonitoringS3Output.fromJson(Map<String, dynamic> json) {
    return MonitoringS3Output(
      localPath: json['LocalPath'] as String,
      s3Uri: json['S3Uri'] as String,
      s3UploadMode:
          (json['S3UploadMode'] as String?)?.toProcessingS3UploadMode(),
    );
  }

  Map<String, dynamic> toJson() {
    final localPath = this.localPath;
    final s3Uri = this.s3Uri;
    final s3UploadMode = this.s3UploadMode;
    return {
      'LocalPath': localPath,
      'S3Uri': s3Uri,
      if (s3UploadMode != null) 'S3UploadMode': s3UploadMode.toValue(),
    };
  }
}

/// A schedule for a model monitoring job. For information about model monitor,
/// see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
/// SageMaker Model Monitor</a>.
class MonitoringSchedule {
  /// The time that the monitoring schedule was created.
  final DateTime? creationTime;

  /// The endpoint that hosts the model being monitored.
  final String? endpointName;

  /// If the monitoring schedule failed, the reason it failed.
  final String? failureReason;

  /// The last time the monitoring schedule was changed.
  final DateTime? lastModifiedTime;
  final MonitoringExecutionSummary? lastMonitoringExecutionSummary;

  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String? monitoringScheduleArn;
  final MonitoringScheduleConfig? monitoringScheduleConfig;

  /// The name of the monitoring schedule.
  final String? monitoringScheduleName;

  /// The status of the monitoring schedule. This can be one of the following
  /// values.
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The schedule is pending being created.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - The schedule failed.
  /// </li>
  /// <li>
  /// <code>SCHEDULED</code> - The schedule was successfully created.
  /// </li>
  /// <li>
  /// <code>STOPPED</code> - The schedule was stopped.
  /// </li>
  /// </ul>
  final ScheduleStatus? monitoringScheduleStatus;

  /// The type of the monitoring job definition to schedule.
  final MonitoringType? monitoringType;

  /// A list of the tags associated with the monitoring schedlue. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  MonitoringSchedule({
    this.creationTime,
    this.endpointName,
    this.failureReason,
    this.lastModifiedTime,
    this.lastMonitoringExecutionSummary,
    this.monitoringScheduleArn,
    this.monitoringScheduleConfig,
    this.monitoringScheduleName,
    this.monitoringScheduleStatus,
    this.monitoringType,
    this.tags,
  });

  factory MonitoringSchedule.fromJson(Map<String, dynamic> json) {
    return MonitoringSchedule(
      creationTime: timeStampFromJson(json['CreationTime']),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastMonitoringExecutionSummary: json['LastMonitoringExecutionSummary'] !=
              null
          ? MonitoringExecutionSummary.fromJson(
              json['LastMonitoringExecutionSummary'] as Map<String, dynamic>)
          : null,
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      monitoringScheduleConfig: json['MonitoringScheduleConfig'] != null
          ? MonitoringScheduleConfig.fromJson(
              json['MonitoringScheduleConfig'] as Map<String, dynamic>)
          : null,
      monitoringScheduleName: json['MonitoringScheduleName'] as String?,
      monitoringScheduleStatus:
          (json['MonitoringScheduleStatus'] as String?)?.toScheduleStatus(),
      monitoringType: (json['MonitoringType'] as String?)?.toMonitoringType(),
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final lastMonitoringExecutionSummary = this.lastMonitoringExecutionSummary;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleConfig = this.monitoringScheduleConfig;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final monitoringType = this.monitoringType;
    final tags = this.tags;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastMonitoringExecutionSummary != null)
        'LastMonitoringExecutionSummary': lastMonitoringExecutionSummary,
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (monitoringScheduleConfig != null)
        'MonitoringScheduleConfig': monitoringScheduleConfig,
      if (monitoringScheduleName != null)
        'MonitoringScheduleName': monitoringScheduleName,
      if (monitoringScheduleStatus != null)
        'MonitoringScheduleStatus': monitoringScheduleStatus.toValue(),
      if (monitoringType != null) 'MonitoringType': monitoringType.toValue(),
      if (tags != null) 'Tags': tags,
    };
  }
}

/// Configures the monitoring schedule and defines the monitoring job.
class MonitoringScheduleConfig {
  /// Defines the monitoring job.
  final MonitoringJobDefinition? monitoringJobDefinition;

  /// The name of the monitoring job definition to schedule.
  final String? monitoringJobDefinitionName;

  /// The type of the monitoring job definition to schedule.
  final MonitoringType? monitoringType;

  /// Configures the monitoring schedule.
  final ScheduleConfig? scheduleConfig;

  MonitoringScheduleConfig({
    this.monitoringJobDefinition,
    this.monitoringJobDefinitionName,
    this.monitoringType,
    this.scheduleConfig,
  });

  factory MonitoringScheduleConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringScheduleConfig(
      monitoringJobDefinition: json['MonitoringJobDefinition'] != null
          ? MonitoringJobDefinition.fromJson(
              json['MonitoringJobDefinition'] as Map<String, dynamic>)
          : null,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String?,
      monitoringType: (json['MonitoringType'] as String?)?.toMonitoringType(),
      scheduleConfig: json['ScheduleConfig'] != null
          ? ScheduleConfig.fromJson(
              json['ScheduleConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringJobDefinition = this.monitoringJobDefinition;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    final monitoringType = this.monitoringType;
    final scheduleConfig = this.scheduleConfig;
    return {
      if (monitoringJobDefinition != null)
        'MonitoringJobDefinition': monitoringJobDefinition,
      if (monitoringJobDefinitionName != null)
        'MonitoringJobDefinitionName': monitoringJobDefinitionName,
      if (monitoringType != null) 'MonitoringType': monitoringType.toValue(),
      if (scheduleConfig != null) 'ScheduleConfig': scheduleConfig,
    };
  }
}

enum MonitoringScheduleSortKey {
  name,
  creationTime,
  status,
}

extension on MonitoringScheduleSortKey {
  String toValue() {
    switch (this) {
      case MonitoringScheduleSortKey.name:
        return 'Name';
      case MonitoringScheduleSortKey.creationTime:
        return 'CreationTime';
      case MonitoringScheduleSortKey.status:
        return 'Status';
    }
  }
}

extension on String {
  MonitoringScheduleSortKey toMonitoringScheduleSortKey() {
    switch (this) {
      case 'Name':
        return MonitoringScheduleSortKey.name;
      case 'CreationTime':
        return MonitoringScheduleSortKey.creationTime;
      case 'Status':
        return MonitoringScheduleSortKey.status;
    }
    throw Exception('$this is not known in enum MonitoringScheduleSortKey');
  }
}

/// Summarizes the monitoring schedule.
class MonitoringScheduleSummary {
  /// The creation time of the monitoring schedule.
  final DateTime creationTime;

  /// The last time the monitoring schedule was modified.
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  /// The name of the monitoring schedule.
  final String monitoringScheduleName;

  /// The status of the monitoring schedule.
  final ScheduleStatus monitoringScheduleStatus;

  /// The name of the endpoint using the monitoring schedule.
  final String? endpointName;

  /// The name of the monitoring job definition that the schedule is for.
  final String? monitoringJobDefinitionName;

  /// The type of the monitoring job definition that the schedule is for.
  final MonitoringType? monitoringType;

  MonitoringScheduleSummary({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.monitoringScheduleArn,
    required this.monitoringScheduleName,
    required this.monitoringScheduleStatus,
    this.endpointName,
    this.monitoringJobDefinitionName,
    this.monitoringType,
  });

  factory MonitoringScheduleSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringScheduleSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
      monitoringScheduleStatus:
          (json['MonitoringScheduleStatus'] as String).toScheduleStatus(),
      endpointName: json['EndpointName'] as String?,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String?,
      monitoringType: (json['MonitoringType'] as String?)?.toMonitoringType(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final endpointName = this.endpointName;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    final monitoringType = this.monitoringType;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringScheduleArn': monitoringScheduleArn,
      'MonitoringScheduleName': monitoringScheduleName,
      'MonitoringScheduleStatus': monitoringScheduleStatus.toValue(),
      if (endpointName != null) 'EndpointName': endpointName,
      if (monitoringJobDefinitionName != null)
        'MonitoringJobDefinitionName': monitoringJobDefinitionName,
      if (monitoringType != null) 'MonitoringType': monitoringType.toValue(),
    };
  }
}

/// The statistics resource for a monitoring job.
class MonitoringStatisticsResource {
  /// The Amazon S3 URI for the statistics resource.
  final String? s3Uri;

  MonitoringStatisticsResource({
    this.s3Uri,
  });

  factory MonitoringStatisticsResource.fromJson(Map<String, dynamic> json) {
    return MonitoringStatisticsResource(
      s3Uri: json['S3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    return {
      if (s3Uri != null) 'S3Uri': s3Uri,
    };
  }
}

/// A time limit for how long the monitoring job is allowed to run before
/// stopping.
class MonitoringStoppingCondition {
  /// The maximum runtime allowed in seconds.
  /// <note>
  /// The <code>MaxRuntimeInSeconds</code> cannot exceed the frequency of the job.
  /// For data quality and model explainability, this can be up to 3600 seconds
  /// for an hourly schedule. For model bias and model quality hourly schedules,
  /// this can be up to 1800 seconds.
  /// </note>
  final int maxRuntimeInSeconds;

  MonitoringStoppingCondition({
    required this.maxRuntimeInSeconds,
  });

  factory MonitoringStoppingCondition.fromJson(Map<String, dynamic> json) {
    return MonitoringStoppingCondition(
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    return {
      'MaxRuntimeInSeconds': maxRuntimeInSeconds,
    };
  }
}

enum MonitoringType {
  dataQuality,
  modelQuality,
  modelBias,
  modelExplainability,
}

extension on MonitoringType {
  String toValue() {
    switch (this) {
      case MonitoringType.dataQuality:
        return 'DataQuality';
      case MonitoringType.modelQuality:
        return 'ModelQuality';
      case MonitoringType.modelBias:
        return 'ModelBias';
      case MonitoringType.modelExplainability:
        return 'ModelExplainability';
    }
  }
}

extension on String {
  MonitoringType toMonitoringType() {
    switch (this) {
      case 'DataQuality':
        return MonitoringType.dataQuality;
      case 'ModelQuality':
        return MonitoringType.modelQuality;
      case 'ModelBias':
        return MonitoringType.modelBias;
      case 'ModelExplainability':
        return MonitoringType.modelExplainability;
    }
    throw Exception('$this is not known in enum MonitoringType');
  }
}

/// Specifies additional configuration for hosting multi-model endpoints.
class MultiModelConfig {
  /// Whether to cache models for a multi-model endpoint. By default, multi-model
  /// endpoints cache models so that a model does not have to be loaded into
  /// memory each time it is invoked. Some use cases do not benefit from model
  /// caching. For example, if an endpoint hosts a large number of models that are
  /// each invoked infrequently, the endpoint might perform better if you disable
  /// model caching. To disable model caching, set the value of this parameter to
  /// <code>Disabled</code>.
  final ModelCacheSetting? modelCacheSetting;

  MultiModelConfig({
    this.modelCacheSetting,
  });

  factory MultiModelConfig.fromJson(Map<String, dynamic> json) {
    return MultiModelConfig(
      modelCacheSetting:
          (json['ModelCacheSetting'] as String?)?.toModelCacheSetting(),
    );
  }

  Map<String, dynamic> toJson() {
    final modelCacheSetting = this.modelCacheSetting;
    return {
      if (modelCacheSetting != null)
        'ModelCacheSetting': modelCacheSetting.toValue(),
    };
  }
}

/// The <a>VpcConfig</a> configuration object that specifies the VPC that you
/// want the compilation jobs to connect to. For more information on controlling
/// access to your Amazon S3 buckets used for compilation job, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Give
/// Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon
/// VPC</a>.
class NeoVpcConfig {
  /// The VPC security group IDs. IDs have the form of <code>sg-xxxxxxxx</code>.
  /// Specify the security groups for the VPC that is specified in the
  /// <code>Subnets</code> field.
  final List<String> securityGroupIds;

  /// The ID of the subnets in the VPC that you want to connect the compilation
  /// job to for accessing the model in Amazon S3.
  final List<String> subnets;

  NeoVpcConfig({
    required this.securityGroupIds,
    required this.subnets,
  });

  factory NeoVpcConfig.fromJson(Map<String, dynamic> json) {
    return NeoVpcConfig(
      securityGroupIds: (json['SecurityGroupIds'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
      subnets: (json['Subnets'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    return {
      'SecurityGroupIds': securityGroupIds,
      'Subnets': subnets,
    };
  }
}

/// A list of nested <a>Filter</a> objects. A resource must satisfy the
/// conditions of all filters to be included in the results returned from the
/// <a>Search</a> API.
///
/// For example, to filter on a training job's <code>InputDataConfig</code>
/// property with a specific channel name and <code>S3Uri</code> prefix, define
/// the following filters:
///
/// <ul>
/// <li>
/// <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals",
/// "Value":"train"}',</code>
/// </li>
/// <li>
/// <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri",
/// "Operator":"Contains", "Value":"mybucket/catdata"}'</code>
/// </li>
/// </ul>
class NestedFilters {
  /// A list of filters. Each filter acts on a property. Filters must contain at
  /// least one <code>Filters</code> value. For example, a
  /// <code>NestedFilters</code> call might include a filter on the
  /// <code>PropertyName</code> parameter of the <code>InputDataConfig</code>
  /// property: <code>InputDataConfig.DataSource.S3DataSource.S3Uri</code>.
  final List<Filter> filters;

  /// The name of the property to use in the nested filters. The value must match
  /// a listed property name, such as <code>InputDataConfig</code>.
  final String nestedPropertyName;

  NestedFilters({
    required this.filters,
    required this.nestedPropertyName,
  });

  factory NestedFilters.fromJson(Map<String, dynamic> json) {
    return NestedFilters(
      filters: (json['Filters'] as List)
          .whereNotNull()
          .map((e) => Filter.fromJson(e as Map<String, dynamic>))
          .toList(),
      nestedPropertyName: json['NestedPropertyName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final filters = this.filters;
    final nestedPropertyName = this.nestedPropertyName;
    return {
      'Filters': filters,
      'NestedPropertyName': nestedPropertyName,
    };
  }
}

/// Networking options for a job, such as network traffic encryption between
/// containers, whether to allow inbound and outbound network calls to and from
/// containers, and the VPC subnets and security groups to use for VPC-enabled
/// jobs.
class NetworkConfig {
  /// Whether to encrypt all communications between distributed processing jobs.
  /// Choose <code>True</code> to encrypt communications. Encryption provides
  /// greater security for distributed processing jobs, but the processing might
  /// take longer.
  final bool? enableInterContainerTrafficEncryption;

  /// Whether to allow inbound and outbound network calls to and from the
  /// containers used for the processing job.
  final bool? enableNetworkIsolation;
  final VpcConfig? vpcConfig;

  NetworkConfig({
    this.enableInterContainerTrafficEncryption,
    this.enableNetworkIsolation,
    this.vpcConfig,
  });

  factory NetworkConfig.fromJson(Map<String, dynamic> json) {
    return NetworkConfig(
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final vpcConfig = this.vpcConfig;
    return {
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

enum NotebookInstanceAcceleratorType {
  mlEia1Medium,
  mlEia1Large,
  mlEia1Xlarge,
  mlEia2Medium,
  mlEia2Large,
  mlEia2Xlarge,
}

extension on NotebookInstanceAcceleratorType {
  String toValue() {
    switch (this) {
      case NotebookInstanceAcceleratorType.mlEia1Medium:
        return 'ml.eia1.medium';
      case NotebookInstanceAcceleratorType.mlEia1Large:
        return 'ml.eia1.large';
      case NotebookInstanceAcceleratorType.mlEia1Xlarge:
        return 'ml.eia1.xlarge';
      case NotebookInstanceAcceleratorType.mlEia2Medium:
        return 'ml.eia2.medium';
      case NotebookInstanceAcceleratorType.mlEia2Large:
        return 'ml.eia2.large';
      case NotebookInstanceAcceleratorType.mlEia2Xlarge:
        return 'ml.eia2.xlarge';
    }
  }
}

extension on String {
  NotebookInstanceAcceleratorType toNotebookInstanceAcceleratorType() {
    switch (this) {
      case 'ml.eia1.medium':
        return NotebookInstanceAcceleratorType.mlEia1Medium;
      case 'ml.eia1.large':
        return NotebookInstanceAcceleratorType.mlEia1Large;
      case 'ml.eia1.xlarge':
        return NotebookInstanceAcceleratorType.mlEia1Xlarge;
      case 'ml.eia2.medium':
        return NotebookInstanceAcceleratorType.mlEia2Medium;
      case 'ml.eia2.large':
        return NotebookInstanceAcceleratorType.mlEia2Large;
      case 'ml.eia2.xlarge':
        return NotebookInstanceAcceleratorType.mlEia2Xlarge;
    }
    throw Exception(
        '$this is not known in enum NotebookInstanceAcceleratorType');
  }
}

enum NotebookInstanceLifecycleConfigSortKey {
  name,
  creationTime,
  lastModifiedTime,
}

extension on NotebookInstanceLifecycleConfigSortKey {
  String toValue() {
    switch (this) {
      case NotebookInstanceLifecycleConfigSortKey.name:
        return 'Name';
      case NotebookInstanceLifecycleConfigSortKey.creationTime:
        return 'CreationTime';
      case NotebookInstanceLifecycleConfigSortKey.lastModifiedTime:
        return 'LastModifiedTime';
    }
  }
}

extension on String {
  NotebookInstanceLifecycleConfigSortKey
      toNotebookInstanceLifecycleConfigSortKey() {
    switch (this) {
      case 'Name':
        return NotebookInstanceLifecycleConfigSortKey.name;
      case 'CreationTime':
        return NotebookInstanceLifecycleConfigSortKey.creationTime;
      case 'LastModifiedTime':
        return NotebookInstanceLifecycleConfigSortKey.lastModifiedTime;
    }
    throw Exception(
        '$this is not known in enum NotebookInstanceLifecycleConfigSortKey');
  }
}

enum NotebookInstanceLifecycleConfigSortOrder {
  ascending,
  descending,
}

extension on NotebookInstanceLifecycleConfigSortOrder {
  String toValue() {
    switch (this) {
      case NotebookInstanceLifecycleConfigSortOrder.ascending:
        return 'Ascending';
      case NotebookInstanceLifecycleConfigSortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  NotebookInstanceLifecycleConfigSortOrder
      toNotebookInstanceLifecycleConfigSortOrder() {
    switch (this) {
      case 'Ascending':
        return NotebookInstanceLifecycleConfigSortOrder.ascending;
      case 'Descending':
        return NotebookInstanceLifecycleConfigSortOrder.descending;
    }
    throw Exception(
        '$this is not known in enum NotebookInstanceLifecycleConfigSortOrder');
  }
}

/// Provides a summary of a notebook instance lifecycle configuration.
class NotebookInstanceLifecycleConfigSummary {
  /// The Amazon Resource Name (ARN) of the lifecycle configuration.
  final String notebookInstanceLifecycleConfigArn;

  /// The name of the lifecycle configuration.
  final String notebookInstanceLifecycleConfigName;

  /// A timestamp that tells when the lifecycle configuration was created.
  final DateTime? creationTime;

  /// A timestamp that tells when the lifecycle configuration was last modified.
  final DateTime? lastModifiedTime;

  NotebookInstanceLifecycleConfigSummary({
    required this.notebookInstanceLifecycleConfigArn,
    required this.notebookInstanceLifecycleConfigName,
    this.creationTime,
    this.lastModifiedTime,
  });

  factory NotebookInstanceLifecycleConfigSummary.fromJson(
      Map<String, dynamic> json) {
    return NotebookInstanceLifecycleConfigSummary(
      notebookInstanceLifecycleConfigArn:
          json['NotebookInstanceLifecycleConfigArn'] as String,
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceLifecycleConfigArn =
        this.notebookInstanceLifecycleConfigArn;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'NotebookInstanceLifecycleConfigArn': notebookInstanceLifecycleConfigArn,
      'NotebookInstanceLifecycleConfigName':
          notebookInstanceLifecycleConfigName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Contains the notebook instance lifecycle configuration script.
///
/// Each lifecycle configuration script has a limit of 16384 characters.
///
/// The value of the <code>$PATH</code> environment variable that is available
/// to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.
///
/// View CloudWatch Logs for notebook instance lifecycle configurations in log
/// group <code>/aws/sagemaker/NotebookInstances</code> in log stream
/// <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.
///
/// Lifecycle configuration scripts cannot run for longer than 5 minutes. If a
/// script runs for longer than 5 minutes, it fails and the notebook instance is
/// not created or started.
///
/// For information about notebook instance lifestyle configurations, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
/// 2.1: (Optional) Customize a Notebook Instance</a>.
class NotebookInstanceLifecycleHook {
  /// A base64-encoded string that contains a shell script for a notebook instance
  /// lifecycle configuration.
  final String? content;

  NotebookInstanceLifecycleHook({
    this.content,
  });

  factory NotebookInstanceLifecycleHook.fromJson(Map<String, dynamic> json) {
    return NotebookInstanceLifecycleHook(
      content: json['Content'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final content = this.content;
    return {
      if (content != null) 'Content': content,
    };
  }
}

enum NotebookInstanceSortKey {
  name,
  creationTime,
  status,
}

extension on NotebookInstanceSortKey {
  String toValue() {
    switch (this) {
      case NotebookInstanceSortKey.name:
        return 'Name';
      case NotebookInstanceSortKey.creationTime:
        return 'CreationTime';
      case NotebookInstanceSortKey.status:
        return 'Status';
    }
  }
}

extension on String {
  NotebookInstanceSortKey toNotebookInstanceSortKey() {
    switch (this) {
      case 'Name':
        return NotebookInstanceSortKey.name;
      case 'CreationTime':
        return NotebookInstanceSortKey.creationTime;
      case 'Status':
        return NotebookInstanceSortKey.status;
    }
    throw Exception('$this is not known in enum NotebookInstanceSortKey');
  }
}

enum NotebookInstanceSortOrder {
  ascending,
  descending,
}

extension on NotebookInstanceSortOrder {
  String toValue() {
    switch (this) {
      case NotebookInstanceSortOrder.ascending:
        return 'Ascending';
      case NotebookInstanceSortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  NotebookInstanceSortOrder toNotebookInstanceSortOrder() {
    switch (this) {
      case 'Ascending':
        return NotebookInstanceSortOrder.ascending;
      case 'Descending':
        return NotebookInstanceSortOrder.descending;
    }
    throw Exception('$this is not known in enum NotebookInstanceSortOrder');
  }
}

enum NotebookInstanceStatus {
  pending,
  inService,
  stopping,
  stopped,
  failed,
  deleting,
  updating,
}

extension on NotebookInstanceStatus {
  String toValue() {
    switch (this) {
      case NotebookInstanceStatus.pending:
        return 'Pending';
      case NotebookInstanceStatus.inService:
        return 'InService';
      case NotebookInstanceStatus.stopping:
        return 'Stopping';
      case NotebookInstanceStatus.stopped:
        return 'Stopped';
      case NotebookInstanceStatus.failed:
        return 'Failed';
      case NotebookInstanceStatus.deleting:
        return 'Deleting';
      case NotebookInstanceStatus.updating:
        return 'Updating';
    }
  }
}

extension on String {
  NotebookInstanceStatus toNotebookInstanceStatus() {
    switch (this) {
      case 'Pending':
        return NotebookInstanceStatus.pending;
      case 'InService':
        return NotebookInstanceStatus.inService;
      case 'Stopping':
        return NotebookInstanceStatus.stopping;
      case 'Stopped':
        return NotebookInstanceStatus.stopped;
      case 'Failed':
        return NotebookInstanceStatus.failed;
      case 'Deleting':
        return NotebookInstanceStatus.deleting;
      case 'Updating':
        return NotebookInstanceStatus.updating;
    }
    throw Exception('$this is not known in enum NotebookInstanceStatus');
  }
}

/// Provides summary information for an Amazon SageMaker notebook instance.
class NotebookInstanceSummary {
  /// The Amazon Resource Name (ARN) of the notebook instance.
  final String notebookInstanceArn;

  /// The name of the notebook instance that you want a summary for.
  final String notebookInstanceName;

  /// An array of up to three Git repositories associated with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of your
  /// notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  final List<String>? additionalCodeRepositories;

  /// A timestamp that shows when the notebook instance was created.
  final DateTime? creationTime;

  /// The Git repository associated with the notebook instance as its default code
  /// repository. This can be either the name of a Git repository stored as a
  /// resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open a
  /// notebook instance, it opens in the directory that contains this repository.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with Amazon SageMaker Notebook Instances</a>.
  final String? defaultCodeRepository;

  /// The type of ML compute instance that the notebook instance is running on.
  final InstanceType? instanceType;

  /// A timestamp that shows when the notebook instance was last modified.
  final DateTime? lastModifiedTime;

  /// The name of a notebook instance lifecycle configuration associated with this
  /// notebook instance.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  final String? notebookInstanceLifecycleConfigName;

  /// The status of the notebook instance.
  final NotebookInstanceStatus? notebookInstanceStatus;

  /// The URL that you use to connect to the Jupyter instance running in your
  /// notebook instance.
  final String? url;

  NotebookInstanceSummary({
    required this.notebookInstanceArn,
    required this.notebookInstanceName,
    this.additionalCodeRepositories,
    this.creationTime,
    this.defaultCodeRepository,
    this.instanceType,
    this.lastModifiedTime,
    this.notebookInstanceLifecycleConfigName,
    this.notebookInstanceStatus,
    this.url,
  });

  factory NotebookInstanceSummary.fromJson(Map<String, dynamic> json) {
    return NotebookInstanceSummary(
      notebookInstanceArn: json['NotebookInstanceArn'] as String,
      notebookInstanceName: json['NotebookInstanceName'] as String,
      additionalCodeRepositories: (json['AdditionalCodeRepositories'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      creationTime: timeStampFromJson(json['CreationTime']),
      defaultCodeRepository: json['DefaultCodeRepository'] as String?,
      instanceType: (json['InstanceType'] as String?)?.toInstanceType(),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String?,
      notebookInstanceStatus: (json['NotebookInstanceStatus'] as String?)
          ?.toNotebookInstanceStatus(),
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceArn = this.notebookInstanceArn;
    final notebookInstanceName = this.notebookInstanceName;
    final additionalCodeRepositories = this.additionalCodeRepositories;
    final creationTime = this.creationTime;
    final defaultCodeRepository = this.defaultCodeRepository;
    final instanceType = this.instanceType;
    final lastModifiedTime = this.lastModifiedTime;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final notebookInstanceStatus = this.notebookInstanceStatus;
    final url = this.url;
    return {
      'NotebookInstanceArn': notebookInstanceArn,
      'NotebookInstanceName': notebookInstanceName,
      if (additionalCodeRepositories != null)
        'AdditionalCodeRepositories': additionalCodeRepositories,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (defaultCodeRepository != null)
        'DefaultCodeRepository': defaultCodeRepository,
      if (instanceType != null) 'InstanceType': instanceType.toValue(),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (notebookInstanceLifecycleConfigName != null)
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      if (notebookInstanceStatus != null)
        'NotebookInstanceStatus': notebookInstanceStatus.toValue(),
      if (url != null) 'Url': url,
    };
  }
}

enum NotebookOutputOption {
  allowed,
  disabled,
}

extension on NotebookOutputOption {
  String toValue() {
    switch (this) {
      case NotebookOutputOption.allowed:
        return 'Allowed';
      case NotebookOutputOption.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  NotebookOutputOption toNotebookOutputOption() {
    switch (this) {
      case 'Allowed':
        return NotebookOutputOption.allowed;
      case 'Disabled':
        return NotebookOutputOption.disabled;
    }
    throw Exception('$this is not known in enum NotebookOutputOption');
  }
}

/// Configures SNS notifications of available or expiring work items for work
/// teams.
class NotificationConfiguration {
  /// The ARN for the SNS topic to which notifications should be published.
  final String? notificationTopicArn;

  NotificationConfiguration({
    this.notificationTopicArn,
  });

  factory NotificationConfiguration.fromJson(Map<String, dynamic> json) {
    return NotificationConfiguration(
      notificationTopicArn: json['NotificationTopicArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notificationTopicArn = this.notificationTopicArn;
    return {
      if (notificationTopicArn != null)
        'NotificationTopicArn': notificationTopicArn,
    };
  }
}

enum ObjectiveStatus {
  succeeded,
  pending,
  failed,
}

extension on ObjectiveStatus {
  String toValue() {
    switch (this) {
      case ObjectiveStatus.succeeded:
        return 'Succeeded';
      case ObjectiveStatus.pending:
        return 'Pending';
      case ObjectiveStatus.failed:
        return 'Failed';
    }
  }
}

extension on String {
  ObjectiveStatus toObjectiveStatus() {
    switch (this) {
      case 'Succeeded':
        return ObjectiveStatus.succeeded;
      case 'Pending':
        return ObjectiveStatus.pending;
      case 'Failed':
        return ObjectiveStatus.failed;
    }
    throw Exception('$this is not known in enum ObjectiveStatus');
  }
}

/// Specifies the number of training jobs that this hyperparameter tuning job
/// launched, categorized by the status of their objective metric. The objective
/// metric status shows whether the final objective metric for the training job
/// has been evaluated by the tuning job and used in the hyperparameter tuning
/// process.
class ObjectiveStatusCounters {
  /// The number of training jobs whose final objective metric was not evaluated
  /// and used in the hyperparameter tuning process. This typically occurs when
  /// the training job failed or did not emit an objective metric.
  final int? failed;

  /// The number of training jobs that are in progress and pending evaluation of
  /// their final objective metric.
  final int? pending;

  /// The number of training jobs whose final objective metric was evaluated by
  /// the hyperparameter tuning job and used in the hyperparameter tuning process.
  final int? succeeded;

  ObjectiveStatusCounters({
    this.failed,
    this.pending,
    this.succeeded,
  });

  factory ObjectiveStatusCounters.fromJson(Map<String, dynamic> json) {
    return ObjectiveStatusCounters(
      failed: json['Failed'] as int?,
      pending: json['Pending'] as int?,
      succeeded: json['Succeeded'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final failed = this.failed;
    final pending = this.pending;
    final succeeded = this.succeeded;
    return {
      if (failed != null) 'Failed': failed,
      if (pending != null) 'Pending': pending,
      if (succeeded != null) 'Succeeded': succeeded,
    };
  }
}

/// The configuration of an <code>OfflineStore</code>.
///
/// Provide an <code>OfflineStoreConfig</code> in a request to
/// <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.
///
/// To encrypt an <code>OfflineStore</code> using at rest data encryption,
/// specify Amazon Web Services Key Management Service (KMS) key ID, or
/// <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.
class OfflineStoreConfig {
  /// The Amazon Simple Storage (Amazon S3) location of <code>OfflineStore</code>.
  final S3StorageConfig s3StorageConfig;

  /// The meta data of the Glue table that is autogenerated when an
  /// <code>OfflineStore</code> is created.
  final DataCatalogConfig? dataCatalogConfig;

  /// Set to <code>True</code> to disable the automatic creation of an Amazon Web
  /// Services Glue table when configuring an <code>OfflineStore</code>.
  final bool? disableGlueTableCreation;

  OfflineStoreConfig({
    required this.s3StorageConfig,
    this.dataCatalogConfig,
    this.disableGlueTableCreation,
  });

  factory OfflineStoreConfig.fromJson(Map<String, dynamic> json) {
    return OfflineStoreConfig(
      s3StorageConfig: S3StorageConfig.fromJson(
          json['S3StorageConfig'] as Map<String, dynamic>),
      dataCatalogConfig: json['DataCatalogConfig'] != null
          ? DataCatalogConfig.fromJson(
              json['DataCatalogConfig'] as Map<String, dynamic>)
          : null,
      disableGlueTableCreation: json['DisableGlueTableCreation'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3StorageConfig = this.s3StorageConfig;
    final dataCatalogConfig = this.dataCatalogConfig;
    final disableGlueTableCreation = this.disableGlueTableCreation;
    return {
      'S3StorageConfig': s3StorageConfig,
      if (dataCatalogConfig != null) 'DataCatalogConfig': dataCatalogConfig,
      if (disableGlueTableCreation != null)
        'DisableGlueTableCreation': disableGlueTableCreation,
    };
  }
}

/// The status of <code>OfflineStore</code>.
class OfflineStoreStatus {
  /// An <code>OfflineStore</code> status.
  final OfflineStoreStatusValue status;

  /// The justification for why the OfflineStoreStatus is Blocked (if applicable).
  final String? blockedReason;

  OfflineStoreStatus({
    required this.status,
    this.blockedReason,
  });

  factory OfflineStoreStatus.fromJson(Map<String, dynamic> json) {
    return OfflineStoreStatus(
      status: (json['Status'] as String).toOfflineStoreStatusValue(),
      blockedReason: json['BlockedReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final blockedReason = this.blockedReason;
    return {
      'Status': status.toValue(),
      if (blockedReason != null) 'BlockedReason': blockedReason,
    };
  }
}

enum OfflineStoreStatusValue {
  active,
  blocked,
  disabled,
}

extension on OfflineStoreStatusValue {
  String toValue() {
    switch (this) {
      case OfflineStoreStatusValue.active:
        return 'Active';
      case OfflineStoreStatusValue.blocked:
        return 'Blocked';
      case OfflineStoreStatusValue.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  OfflineStoreStatusValue toOfflineStoreStatusValue() {
    switch (this) {
      case 'Active':
        return OfflineStoreStatusValue.active;
      case 'Blocked':
        return OfflineStoreStatusValue.blocked;
      case 'Disabled':
        return OfflineStoreStatusValue.disabled;
    }
    throw Exception('$this is not known in enum OfflineStoreStatusValue');
  }
}

/// Use this parameter to configure your OIDC Identity Provider (IdP).
class OidcConfig {
  /// The OIDC IdP authorization endpoint used to configure your private
  /// workforce.
  final String authorizationEndpoint;

  /// The OIDC IdP client ID used to configure your private workforce.
  final String clientId;

  /// The OIDC IdP client secret used to configure your private workforce.
  final String clientSecret;

  /// The OIDC IdP issuer used to configure your private workforce.
  final String issuer;

  /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private
  /// workforce.
  final String jwksUri;

  /// The OIDC IdP logout endpoint used to configure your private workforce.
  final String logoutEndpoint;

  /// The OIDC IdP token endpoint used to configure your private workforce.
  final String tokenEndpoint;

  /// The OIDC IdP user information endpoint used to configure your private
  /// workforce.
  final String userInfoEndpoint;

  OidcConfig({
    required this.authorizationEndpoint,
    required this.clientId,
    required this.clientSecret,
    required this.issuer,
    required this.jwksUri,
    required this.logoutEndpoint,
    required this.tokenEndpoint,
    required this.userInfoEndpoint,
  });

  factory OidcConfig.fromJson(Map<String, dynamic> json) {
    return OidcConfig(
      authorizationEndpoint: json['AuthorizationEndpoint'] as String,
      clientId: json['ClientId'] as String,
      clientSecret: json['ClientSecret'] as String,
      issuer: json['Issuer'] as String,
      jwksUri: json['JwksUri'] as String,
      logoutEndpoint: json['LogoutEndpoint'] as String,
      tokenEndpoint: json['TokenEndpoint'] as String,
      userInfoEndpoint: json['UserInfoEndpoint'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final clientSecret = this.clientSecret;
    final issuer = this.issuer;
    final jwksUri = this.jwksUri;
    final logoutEndpoint = this.logoutEndpoint;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      'AuthorizationEndpoint': authorizationEndpoint,
      'ClientId': clientId,
      'ClientSecret': clientSecret,
      'Issuer': issuer,
      'JwksUri': jwksUri,
      'LogoutEndpoint': logoutEndpoint,
      'TokenEndpoint': tokenEndpoint,
      'UserInfoEndpoint': userInfoEndpoint,
    };
  }
}

/// Your OIDC IdP workforce configuration.
class OidcConfigForResponse {
  /// The OIDC IdP authorization endpoint used to configure your private
  /// workforce.
  final String? authorizationEndpoint;

  /// The OIDC IdP client ID used to configure your private workforce.
  final String? clientId;

  /// The OIDC IdP issuer used to configure your private workforce.
  final String? issuer;

  /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private
  /// workforce.
  final String? jwksUri;

  /// The OIDC IdP logout endpoint used to configure your private workforce.
  final String? logoutEndpoint;

  /// The OIDC IdP token endpoint used to configure your private workforce.
  final String? tokenEndpoint;

  /// The OIDC IdP user information endpoint used to configure your private
  /// workforce.
  final String? userInfoEndpoint;

  OidcConfigForResponse({
    this.authorizationEndpoint,
    this.clientId,
    this.issuer,
    this.jwksUri,
    this.logoutEndpoint,
    this.tokenEndpoint,
    this.userInfoEndpoint,
  });

  factory OidcConfigForResponse.fromJson(Map<String, dynamic> json) {
    return OidcConfigForResponse(
      authorizationEndpoint: json['AuthorizationEndpoint'] as String?,
      clientId: json['ClientId'] as String?,
      issuer: json['Issuer'] as String?,
      jwksUri: json['JwksUri'] as String?,
      logoutEndpoint: json['LogoutEndpoint'] as String?,
      tokenEndpoint: json['TokenEndpoint'] as String?,
      userInfoEndpoint: json['UserInfoEndpoint'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final issuer = this.issuer;
    final jwksUri = this.jwksUri;
    final logoutEndpoint = this.logoutEndpoint;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      if (authorizationEndpoint != null)
        'AuthorizationEndpoint': authorizationEndpoint,
      if (clientId != null) 'ClientId': clientId,
      if (issuer != null) 'Issuer': issuer,
      if (jwksUri != null) 'JwksUri': jwksUri,
      if (logoutEndpoint != null) 'LogoutEndpoint': logoutEndpoint,
      if (tokenEndpoint != null) 'TokenEndpoint': tokenEndpoint,
      if (userInfoEndpoint != null) 'UserInfoEndpoint': userInfoEndpoint,
    };
  }
}

/// A list of user groups that exist in your OIDC Identity Provider (IdP). One
/// to ten groups can be used to create a single private work team. When you add
/// a user group to the list of <code>Groups</code>, you can add that user group
/// to one or more private work teams. If you add a user group to a private work
/// team, all workers in that user group are added to the work team.
class OidcMemberDefinition {
  /// A list of comma seperated strings that identifies user groups in your OIDC
  /// IdP. Each user group is made up of a group of private workers.
  final List<String> groups;

  OidcMemberDefinition({
    required this.groups,
  });

  factory OidcMemberDefinition.fromJson(Map<String, dynamic> json) {
    return OidcMemberDefinition(
      groups: (json['Groups'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final groups = this.groups;
    return {
      'Groups': groups,
    };
  }
}

/// Use this to specify the Amazon Web Services Key Management Service (KMS) Key
/// ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn
/// <code>OnlineStore</code> on or off by specifying the
/// <code>EnableOnlineStore</code> flag at General Assembly; the default value
/// is <code>False</code>.
class OnlineStoreConfig {
  /// Turn <code>OnlineStore</code> off by specifying <code>False</code> for the
  /// <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by
  /// specifying <code>True</code> for the <code>EnableOnlineStore</code> flag.
  ///
  /// The default value is <code>False</code>.
  final bool? enableOnlineStore;

  /// Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of
  /// your <code>OnlineStore</code>.
  final OnlineStoreSecurityConfig? securityConfig;

  OnlineStoreConfig({
    this.enableOnlineStore,
    this.securityConfig,
  });

  factory OnlineStoreConfig.fromJson(Map<String, dynamic> json) {
    return OnlineStoreConfig(
      enableOnlineStore: json['EnableOnlineStore'] as bool?,
      securityConfig: json['SecurityConfig'] != null
          ? OnlineStoreSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableOnlineStore = this.enableOnlineStore;
    final securityConfig = this.securityConfig;
    return {
      if (enableOnlineStore != null) 'EnableOnlineStore': enableOnlineStore,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
    };
  }
}

/// The security configuration for <code>OnlineStore</code>.
class OnlineStoreSecurityConfig {
  /// The ID of the Amazon Web Services Key Management Service (Amazon Web
  /// Services KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3
  /// objects at rest using Amazon S3 server-side encryption.
  ///
  /// The caller (either IAM user or IAM role) of <code>CreateFeatureGroup</code>
  /// must have below permissions to the <code>OnlineStore</code>
  /// <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>"kms:Encrypt"</code>
  /// </li>
  /// <li>
  /// <code>"kms:Decrypt"</code>
  /// </li>
  /// <li>
  /// <code>"kms:DescribeKey"</code>
  /// </li>
  /// <li>
  /// <code>"kms:CreateGrant"</code>
  /// </li>
  /// <li>
  /// <code>"kms:RetireGrant"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ReEncryptFrom"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ReEncryptTo"</code>
  /// </li>
  /// <li>
  /// <code>"kms:GenerateDataKey"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ListAliases"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ListGrants"</code>
  /// </li>
  /// <li>
  /// <code>"kms:RevokeGrant"</code>
  /// </li>
  /// </ul>
  /// The caller (either IAM user or IAM role) to all DataPlane operations
  /// (<code>PutRecord</code>, <code>GetRecord</code>, <code>DeleteRecord</code>)
  /// must have the following permissions to the <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>"kms:Decrypt"</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  OnlineStoreSecurityConfig({
    this.kmsKeyId,
  });

  factory OnlineStoreSecurityConfig.fromJson(Map<String, dynamic> json) {
    return OnlineStoreSecurityConfig(
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum Operator {
  equals,
  notEquals,
  greaterThan,
  greaterThanOrEqualTo,
  lessThan,
  lessThanOrEqualTo,
  contains,
  exists,
  notExists,
  $in,
}

extension on Operator {
  String toValue() {
    switch (this) {
      case Operator.equals:
        return 'Equals';
      case Operator.notEquals:
        return 'NotEquals';
      case Operator.greaterThan:
        return 'GreaterThan';
      case Operator.greaterThanOrEqualTo:
        return 'GreaterThanOrEqualTo';
      case Operator.lessThan:
        return 'LessThan';
      case Operator.lessThanOrEqualTo:
        return 'LessThanOrEqualTo';
      case Operator.contains:
        return 'Contains';
      case Operator.exists:
        return 'Exists';
      case Operator.notExists:
        return 'NotExists';
      case Operator.$in:
        return 'In';
    }
  }
}

extension on String {
  Operator toOperator() {
    switch (this) {
      case 'Equals':
        return Operator.equals;
      case 'NotEquals':
        return Operator.notEquals;
      case 'GreaterThan':
        return Operator.greaterThan;
      case 'GreaterThanOrEqualTo':
        return Operator.greaterThanOrEqualTo;
      case 'LessThan':
        return Operator.lessThan;
      case 'LessThanOrEqualTo':
        return Operator.lessThanOrEqualTo;
      case 'Contains':
        return Operator.contains;
      case 'Exists':
        return Operator.exists;
      case 'NotExists':
        return Operator.notExists;
      case 'In':
        return Operator.$in;
    }
    throw Exception('$this is not known in enum Operator');
  }
}

enum OrderKey {
  ascending,
  descending,
}

extension on OrderKey {
  String toValue() {
    switch (this) {
      case OrderKey.ascending:
        return 'Ascending';
      case OrderKey.descending:
        return 'Descending';
    }
  }
}

extension on String {
  OrderKey toOrderKey() {
    switch (this) {
      case 'Ascending':
        return OrderKey.ascending;
      case 'Descending':
        return OrderKey.descending;
    }
    throw Exception('$this is not known in enum OrderKey');
  }
}

/// Contains information about the output location for the compiled model and
/// the target device that the model runs on. <code>TargetDevice</code> and
/// <code>TargetPlatform</code> are mutually exclusive, so you need to choose
/// one between the two to specify your target device or platform. If you cannot
/// find your device you want to use from the <code>TargetDevice</code> list,
/// use <code>TargetPlatform</code> to describe the platform of your edge device
/// and <code>CompilerOptions</code> if there are specific settings that are
/// required or recommended to use for particular TargetPlatform.
class OutputConfig {
  /// Identifies the S3 bucket where you want Amazon SageMaker to store the model
  /// artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.
  final String s3OutputLocation;

  /// Specifies additional parameters for compiler options in JSON format. The
  /// compiler options are <code>TargetPlatform</code> specific. It is required
  /// for NVIDIA accelerators and highly recommended for CPU compilations. For any
  /// other cases, it is optional to specify <code>CompilerOptions.</code>
  ///
  /// <ul>
  /// <li>
  /// <code>DTYPE</code>: Specifies the data type for the input. When compiling
  /// for <code>ml_*</code> (except for <code>ml_inf</code>) instances using
  /// PyTorch framework, provide the data type (dtype) of the model's input.
  /// <code>"float32"</code> is used if <code>"DTYPE"</code> is not specified.
  /// Options for data type are:
  ///
  /// <ul>
  /// <li>
  /// float32: Use either <code>"float"</code> or <code>"float32"</code>.
  /// </li>
  /// <li>
  /// int64: Use either <code>"int64"</code> or <code>"long"</code>.
  /// </li>
  /// </ul>
  /// For example, <code>{"dtype" : "float32"}</code>.
  /// </li>
  /// <li>
  /// <code>CPU</code>: Compilation for CPU supports the following compiler
  /// options.
  ///
  /// <ul>
  /// <li>
  /// <code>mcpu</code>: CPU micro-architecture. For example, <code>{'mcpu':
  /// 'skylake-avx512'}</code>
  /// </li>
  /// <li>
  /// <code>mattr</code>: CPU flags. For example, <code>{'mattr': ['+neon',
  /// '+vfpv4']}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>ARM</code>: Details of ARM CPU compilations.
  ///
  /// <ul>
  /// <li>
  /// <code>NEON</code>: NEON is an implementation of the Advanced SIMD extension
  /// used in ARMv7 processors.
  ///
  /// For example, add <code>{'mattr': ['+neon']}</code> to the compiler options
  /// if compiling for ARM 32-bit platform with the NEON support.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>NVIDIA</code>: Compilation for NVIDIA GPU supports the following
  /// compiler options.
  ///
  /// <ul>
  /// <li>
  /// <code>gpu_code</code>: Specifies the targeted architecture.
  /// </li>
  /// <li>
  /// <code>trt-ver</code>: Specifies the TensorRT versions in x.y.z. format.
  /// </li>
  /// <li>
  /// <code>cuda-ver</code>: Specifies the CUDA version in x.y format.
  /// </li>
  /// </ul>
  /// For example, <code>{'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver':
  /// '10.1'}</code>
  /// </li>
  /// <li>
  /// <code>ANDROID</code>: Compilation for the Android OS supports the following
  /// compiler options:
  ///
  /// <ul>
  /// <li>
  /// <code>ANDROID_PLATFORM</code>: Specifies the Android API levels. Available
  /// levels range from 21 to 29. For example, <code>{'ANDROID_PLATFORM':
  /// 28}</code>.
  /// </li>
  /// <li>
  /// <code>mattr</code>: Add <code>{'mattr': ['+neon']}</code> to compiler
  /// options if compiling for ARM 32-bit platform with NEON support.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>INFERENTIA</code>: Compilation for target ml_inf1 uses compiler
  /// options passed in as a JSON string. For example, <code>"CompilerOptions":
  /// "\"--verbose 1 --num-neuroncores 2 -O2\""</code>.
  ///
  /// For information about supported compiler options, see <a
  /// href="https://github.com/aws/aws-neuron-sdk/blob/master/docs/neuron-cc/command-line-reference.md">
  /// Neuron Compiler CLI</a>.
  /// </li>
  /// <li>
  /// <code>CoreML</code>: Compilation for the CoreML
  /// <a>OutputConfig$TargetDevice</a> supports the following compiler options:
  ///
  /// <ul>
  /// <li>
  /// <code>class_labels</code>: Specifies the classification labels file name
  /// inside input tar.gz file. For example, <code>{"class_labels":
  /// "imagenet_labels_1000.txt"}</code>. Labels inside the txt file should be
  /// separated by newlines.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>EIA</code>: Compilation for the Elastic Inference Accelerator supports
  /// the following compiler options:
  ///
  /// <ul>
  /// <li>
  /// <code>precision_mode</code>: Specifies the precision of compiled artifacts.
  /// Supported values are <code>"FP16"</code> and <code>"FP32"</code>. Default is
  /// <code>"FP32"</code>.
  /// </li>
  /// <li>
  /// <code>signature_def_key</code>: Specifies the signature to use for models in
  /// SavedModel format. Defaults is TensorFlow's default signature def key.
  /// </li>
  /// <li>
  /// <code>output_names</code>: Specifies a list of output tensor names for
  /// models in FrozenGraph format. Set at most one API field, either:
  /// <code>signature_def_key</code> or <code>output_names</code>.
  /// </li>
  /// </ul>
  /// For example: <code>{"precision_mode": "FP32", "output_names":
  /// ["output:0"]}</code>
  /// </li>
  /// </ul>
  final String? compilerOptions;

  /// The Amazon Web Services Key Management Service key (Amazon Web Services KMS)
  /// that Amazon SageMaker uses to encrypt your output models with Amazon S3
  /// server-side encryption after compilation job. If you don't provide a KMS key
  /// ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's
  /// account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KmsKeyId can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  /// Identifies the target device or the machine learning instance that you want
  /// to run your model on after the compilation has completed. Alternatively, you
  /// can specify OS, architecture, and accelerator using <a>TargetPlatform</a>
  /// fields. It can be used instead of <code>TargetPlatform</code>.
  final TargetDevice? targetDevice;

  /// Contains information about a target platform that you want your model to run
  /// on, such as OS, architecture, and accelerators. It is an alternative of
  /// <code>TargetDevice</code>.
  ///
  /// The following examples show how to configure the <code>TargetPlatform</code>
  /// and <code>CompilerOptions</code> JSON strings for popular target platforms:
  ///
  /// <ul>
  /// <li>
  /// Raspberry Pi 3 Model B+
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"},</code>
  ///
  /// <code> "CompilerOptions": {'mattr': ['+neon']}</code>
  /// </li>
  /// <li>
  /// Jetson TX2
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator":
  /// "NVIDIA"},</code>
  ///
  /// <code> "CompilerOptions": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1',
  /// 'cuda-ver': '10.0'}</code>
  /// </li>
  /// <li>
  /// EC2 m5.2xlarge instance OS
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator":
  /// "NVIDIA"},</code>
  ///
  /// <code> "CompilerOptions": {'mcpu': 'skylake-avx512'}</code>
  /// </li>
  /// <li>
  /// RK3399
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator":
  /// "MALI"}</code>
  /// </li>
  /// <li>
  /// ARMv7 phone (CPU)
  ///
  /// <code>"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"},</code>
  ///
  /// <code> "CompilerOptions": {'ANDROID_PLATFORM': 25, 'mattr':
  /// ['+neon']}</code>
  /// </li>
  /// <li>
  /// ARMv8 phone (CPU)
  ///
  /// <code>"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"},</code>
  ///
  /// <code> "CompilerOptions": {'ANDROID_PLATFORM': 29}</code>
  /// </li>
  /// </ul>
  final TargetPlatform? targetPlatform;

  OutputConfig({
    required this.s3OutputLocation,
    this.compilerOptions,
    this.kmsKeyId,
    this.targetDevice,
    this.targetPlatform,
  });

  factory OutputConfig.fromJson(Map<String, dynamic> json) {
    return OutputConfig(
      s3OutputLocation: json['S3OutputLocation'] as String,
      compilerOptions: json['CompilerOptions'] as String?,
      kmsKeyId: json['KmsKeyId'] as String?,
      targetDevice: (json['TargetDevice'] as String?)?.toTargetDevice(),
      targetPlatform: json['TargetPlatform'] != null
          ? TargetPlatform.fromJson(
              json['TargetPlatform'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputLocation = this.s3OutputLocation;
    final compilerOptions = this.compilerOptions;
    final kmsKeyId = this.kmsKeyId;
    final targetDevice = this.targetDevice;
    final targetPlatform = this.targetPlatform;
    return {
      'S3OutputLocation': s3OutputLocation,
      if (compilerOptions != null) 'CompilerOptions': compilerOptions,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (targetDevice != null) 'TargetDevice': targetDevice.toValue(),
      if (targetPlatform != null) 'TargetPlatform': targetPlatform,
    };
  }
}

/// Provides information about how to store model training results (model
/// artifacts).
class OutputDataConfig {
  /// Identifies the S3 path where you want Amazon SageMaker to store the model
  /// artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.
  final String s3OutputPath;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the model artifacts at rest using
  /// Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of
  /// the following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // KMS Key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key Alias
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
  /// </li>
  /// </ul>
  /// If you use a KMS key ID or an alias of your master key, the Amazon SageMaker
  /// execution role must include permissions to call <code>kms:Encrypt</code>. If
  /// you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key
  /// for Amazon S3 for your role's account. Amazon SageMaker uses server-side
  /// encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you
  /// use a bucket policy with an <code>s3:PutObject</code> permission that only
  /// allows objects with server-side encryption, set the condition key of
  /// <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify in
  /// your <code>CreateTrainingJob</code>, <code>CreateTransformJob</code>, or
  /// <code>CreateHyperParameterTuningJob</code> requests. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  final String? kmsKeyId;

  OutputDataConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
  });

  factory OutputDataConfig.fromJson(Map<String, dynamic> json) {
    return OutputDataConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// An output parameter of a pipeline step.
class OutputParameter {
  /// The name of the output parameter.
  final String name;

  /// The value of the output parameter.
  final String value;

  OutputParameter({
    required this.name,
    required this.value,
  });

  factory OutputParameter.fromJson(Map<String, dynamic> json) {
    return OutputParameter(
      name: json['Name'] as String,
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      'Name': name,
      'Value': value,
    };
  }
}

/// Assigns a value to a named Pipeline parameter.
class Parameter {
  /// The name of the parameter to assign a value to. This parameter name must
  /// match a named parameter in the pipeline definition.
  final String name;

  /// The literal value for the parameter.
  final String value;

  Parameter({
    required this.name,
    required this.value,
  });

  factory Parameter.fromJson(Map<String, dynamic> json) {
    return Parameter(
      name: json['Name'] as String,
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      'Name': name,
      'Value': value,
    };
  }
}

/// Defines the possible values for categorical, continuous, and integer
/// hyperparameters to be used by an algorithm.
class ParameterRange {
  /// A <code>CategoricalParameterRangeSpecification</code> object that defines
  /// the possible values for a categorical hyperparameter.
  final CategoricalParameterRangeSpecification?
      categoricalParameterRangeSpecification;

  /// A <code>ContinuousParameterRangeSpecification</code> object that defines the
  /// possible values for a continuous hyperparameter.
  final ContinuousParameterRangeSpecification?
      continuousParameterRangeSpecification;

  /// A <code>IntegerParameterRangeSpecification</code> object that defines the
  /// possible values for an integer hyperparameter.
  final IntegerParameterRangeSpecification? integerParameterRangeSpecification;

  ParameterRange({
    this.categoricalParameterRangeSpecification,
    this.continuousParameterRangeSpecification,
    this.integerParameterRangeSpecification,
  });

  factory ParameterRange.fromJson(Map<String, dynamic> json) {
    return ParameterRange(
      categoricalParameterRangeSpecification:
          json['CategoricalParameterRangeSpecification'] != null
              ? CategoricalParameterRangeSpecification.fromJson(
                  json['CategoricalParameterRangeSpecification']
                      as Map<String, dynamic>)
              : null,
      continuousParameterRangeSpecification:
          json['ContinuousParameterRangeSpecification'] != null
              ? ContinuousParameterRangeSpecification.fromJson(
                  json['ContinuousParameterRangeSpecification']
                      as Map<String, dynamic>)
              : null,
      integerParameterRangeSpecification:
          json['IntegerParameterRangeSpecification'] != null
              ? IntegerParameterRangeSpecification.fromJson(
                  json['IntegerParameterRangeSpecification']
                      as Map<String, dynamic>)
              : null,
    );
  }

  Map<String, dynamic> toJson() {
    final categoricalParameterRangeSpecification =
        this.categoricalParameterRangeSpecification;
    final continuousParameterRangeSpecification =
        this.continuousParameterRangeSpecification;
    final integerParameterRangeSpecification =
        this.integerParameterRangeSpecification;
    return {
      if (categoricalParameterRangeSpecification != null)
        'CategoricalParameterRangeSpecification':
            categoricalParameterRangeSpecification,
      if (continuousParameterRangeSpecification != null)
        'ContinuousParameterRangeSpecification':
            continuousParameterRangeSpecification,
      if (integerParameterRangeSpecification != null)
        'IntegerParameterRangeSpecification':
            integerParameterRangeSpecification,
    };
  }
}

/// Specifies ranges of integer, continuous, and categorical hyperparameters
/// that a hyperparameter tuning job searches. The hyperparameter tuning job
/// launches training jobs with hyperparameter values within these ranges to
/// find the combination of values that result in the training job with the best
/// performance as measured by the objective metric of the hyperparameter tuning
/// job.
/// <note>
/// You can specify a maximum of 20 hyperparameters that a hyperparameter tuning
/// job can search over. Every possible value of a categorical parameter range
/// counts against this limit.
/// </note>
class ParameterRanges {
  /// The array of <a>CategoricalParameterRange</a> objects that specify ranges of
  /// categorical hyperparameters that a hyperparameter tuning job searches.
  final List<CategoricalParameterRange>? categoricalParameterRanges;

  /// The array of <a>ContinuousParameterRange</a> objects that specify ranges of
  /// continuous hyperparameters that a hyperparameter tuning job searches.
  final List<ContinuousParameterRange>? continuousParameterRanges;

  /// The array of <a>IntegerParameterRange</a> objects that specify ranges of
  /// integer hyperparameters that a hyperparameter tuning job searches.
  final List<IntegerParameterRange>? integerParameterRanges;

  ParameterRanges({
    this.categoricalParameterRanges,
    this.continuousParameterRanges,
    this.integerParameterRanges,
  });

  factory ParameterRanges.fromJson(Map<String, dynamic> json) {
    return ParameterRanges(
      categoricalParameterRanges: (json['CategoricalParameterRanges'] as List?)
          ?.whereNotNull()
          .map((e) =>
              CategoricalParameterRange.fromJson(e as Map<String, dynamic>))
          .toList(),
      continuousParameterRanges: (json['ContinuousParameterRanges'] as List?)
          ?.whereNotNull()
          .map((e) =>
              ContinuousParameterRange.fromJson(e as Map<String, dynamic>))
          .toList(),
      integerParameterRanges: (json['IntegerParameterRanges'] as List?)
          ?.whereNotNull()
          .map((e) => IntegerParameterRange.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final categoricalParameterRanges = this.categoricalParameterRanges;
    final continuousParameterRanges = this.continuousParameterRanges;
    final integerParameterRanges = this.integerParameterRanges;
    return {
      if (categoricalParameterRanges != null)
        'CategoricalParameterRanges': categoricalParameterRanges,
      if (continuousParameterRanges != null)
        'ContinuousParameterRanges': continuousParameterRanges,
      if (integerParameterRanges != null)
        'IntegerParameterRanges': integerParameterRanges,
    };
  }
}

enum ParameterType {
  integer,
  continuous,
  categorical,
  freeText,
}

extension on ParameterType {
  String toValue() {
    switch (this) {
      case ParameterType.integer:
        return 'Integer';
      case ParameterType.continuous:
        return 'Continuous';
      case ParameterType.categorical:
        return 'Categorical';
      case ParameterType.freeText:
        return 'FreeText';
    }
  }
}

extension on String {
  ParameterType toParameterType() {
    switch (this) {
      case 'Integer':
        return ParameterType.integer;
      case 'Continuous':
        return ParameterType.continuous;
      case 'Categorical':
        return ParameterType.categorical;
      case 'FreeText':
        return ParameterType.freeText;
    }
    throw Exception('$this is not known in enum ParameterType');
  }
}

/// The trial that a trial component is associated with and the experiment the
/// trial is part of. A component might not be associated with a trial. A
/// component can be associated with multiple trials.
class Parent {
  /// The name of the experiment.
  final String? experimentName;

  /// The name of the trial.
  final String? trialName;

  Parent({
    this.experimentName,
    this.trialName,
  });

  factory Parent.fromJson(Map<String, dynamic> json) {
    return Parent(
      experimentName: json['ExperimentName'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentName = this.experimentName;
    final trialName = this.trialName;
    return {
      if (experimentName != null) 'ExperimentName': experimentName,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

/// A previously completed or stopped hyperparameter tuning job to be used as a
/// starting point for a new hyperparameter tuning job.
class ParentHyperParameterTuningJob {
  /// The name of the hyperparameter tuning job to be used as a starting point for
  /// a new hyperparameter tuning job.
  final String? hyperParameterTuningJobName;

  ParentHyperParameterTuningJob({
    this.hyperParameterTuningJobName,
  });

  factory ParentHyperParameterTuningJob.fromJson(Map<String, dynamic> json) {
    return ParentHyperParameterTuningJob(
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    return {
      if (hyperParameterTuningJobName != null)
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
    };
  }
}

/// A SageMaker Model Building Pipeline instance.
class Pipeline {
  final UserContext? createdBy;

  /// The creation time of the pipeline.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// The time that the pipeline was last modified.
  final DateTime? lastModifiedTime;

  /// The time when the pipeline was last run.
  final DateTime? lastRunTime;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The description of the pipeline.
  final String? pipelineDescription;

  /// The display name of the pipeline.
  final String? pipelineDisplayName;

  /// The name of the pipeline.
  final String? pipelineName;

  /// The status of the pipeline.
  final PipelineStatus? pipelineStatus;

  /// The Amazon Resource Name (ARN) of the role that created the pipeline.
  final String? roleArn;

  /// A list of tags that apply to the pipeline.
  final List<Tag>? tags;

  Pipeline({
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lastRunTime,
    this.pipelineArn,
    this.pipelineDescription,
    this.pipelineDisplayName,
    this.pipelineName,
    this.pipelineStatus,
    this.roleArn,
    this.tags,
  });

  factory Pipeline.fromJson(Map<String, dynamic> json) {
    return Pipeline(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastRunTime: timeStampFromJson(json['LastRunTime']),
      pipelineArn: json['PipelineArn'] as String?,
      pipelineDescription: json['PipelineDescription'] as String?,
      pipelineDisplayName: json['PipelineDisplayName'] as String?,
      pipelineName: json['PipelineName'] as String?,
      pipelineStatus: (json['PipelineStatus'] as String?)?.toPipelineStatus(),
      roleArn: json['RoleArn'] as String?,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lastRunTime = this.lastRunTime;
    final pipelineArn = this.pipelineArn;
    final pipelineDescription = this.pipelineDescription;
    final pipelineDisplayName = this.pipelineDisplayName;
    final pipelineName = this.pipelineName;
    final pipelineStatus = this.pipelineStatus;
    final roleArn = this.roleArn;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastRunTime != null) 'LastRunTime': unixTimestampToJson(lastRunTime),
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineDescription != null)
        'PipelineDescription': pipelineDescription,
      if (pipelineDisplayName != null)
        'PipelineDisplayName': pipelineDisplayName,
      if (pipelineName != null) 'PipelineName': pipelineName,
      if (pipelineStatus != null) 'PipelineStatus': pipelineStatus.toValue(),
      if (roleArn != null) 'RoleArn': roleArn,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// An execution of a pipeline.
class PipelineExecution {
  final UserContext? createdBy;

  /// The creation time of the pipeline execution.
  final DateTime? creationTime;

  /// If the execution failed, a message describing why.
  final String? failureReason;
  final UserContext? lastModifiedBy;

  /// The time that the pipeline execution was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the pipeline that was executed.
  final String? pipelineArn;

  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  /// The description of the pipeline execution.
  final String? pipelineExecutionDescription;

  /// The display name of the pipeline execution.
  final String? pipelineExecutionDisplayName;

  /// The status of the pipeline status.
  final PipelineExecutionStatus? pipelineExecutionStatus;
  final PipelineExperimentConfig? pipelineExperimentConfig;

  /// Contains a list of pipeline parameters. This list can be empty.
  final List<Parameter>? pipelineParameters;

  PipelineExecution({
    this.createdBy,
    this.creationTime,
    this.failureReason,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.pipelineArn,
    this.pipelineExecutionArn,
    this.pipelineExecutionDescription,
    this.pipelineExecutionDisplayName,
    this.pipelineExecutionStatus,
    this.pipelineExperimentConfig,
    this.pipelineParameters,
  });

  factory PipelineExecution.fromJson(Map<String, dynamic> json) {
    return PipelineExecution(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      pipelineArn: json['PipelineArn'] as String?,
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
      pipelineExecutionDescription:
          json['PipelineExecutionDescription'] as String?,
      pipelineExecutionDisplayName:
          json['PipelineExecutionDisplayName'] as String?,
      pipelineExecutionStatus: (json['PipelineExecutionStatus'] as String?)
          ?.toPipelineExecutionStatus(),
      pipelineExperimentConfig: json['PipelineExperimentConfig'] != null
          ? PipelineExperimentConfig.fromJson(
              json['PipelineExperimentConfig'] as Map<String, dynamic>)
          : null,
      pipelineParameters: (json['PipelineParameters'] as List?)
          ?.whereNotNull()
          .map((e) => Parameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final pipelineArn = this.pipelineArn;
    final pipelineExecutionArn = this.pipelineExecutionArn;
    final pipelineExecutionDescription = this.pipelineExecutionDescription;
    final pipelineExecutionDisplayName = this.pipelineExecutionDisplayName;
    final pipelineExecutionStatus = this.pipelineExecutionStatus;
    final pipelineExperimentConfig = this.pipelineExperimentConfig;
    final pipelineParameters = this.pipelineParameters;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
      if (pipelineExecutionDescription != null)
        'PipelineExecutionDescription': pipelineExecutionDescription,
      if (pipelineExecutionDisplayName != null)
        'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      if (pipelineExecutionStatus != null)
        'PipelineExecutionStatus': pipelineExecutionStatus.toValue(),
      if (pipelineExperimentConfig != null)
        'PipelineExperimentConfig': pipelineExperimentConfig,
      if (pipelineParameters != null) 'PipelineParameters': pipelineParameters,
    };
  }
}

enum PipelineExecutionStatus {
  executing,
  stopping,
  stopped,
  failed,
  succeeded,
}

extension on PipelineExecutionStatus {
  String toValue() {
    switch (this) {
      case PipelineExecutionStatus.executing:
        return 'Executing';
      case PipelineExecutionStatus.stopping:
        return 'Stopping';
      case PipelineExecutionStatus.stopped:
        return 'Stopped';
      case PipelineExecutionStatus.failed:
        return 'Failed';
      case PipelineExecutionStatus.succeeded:
        return 'Succeeded';
    }
  }
}

extension on String {
  PipelineExecutionStatus toPipelineExecutionStatus() {
    switch (this) {
      case 'Executing':
        return PipelineExecutionStatus.executing;
      case 'Stopping':
        return PipelineExecutionStatus.stopping;
      case 'Stopped':
        return PipelineExecutionStatus.stopped;
      case 'Failed':
        return PipelineExecutionStatus.failed;
      case 'Succeeded':
        return PipelineExecutionStatus.succeeded;
    }
    throw Exception('$this is not known in enum PipelineExecutionStatus');
  }
}

/// An execution of a step in a pipeline.
class PipelineExecutionStep {
  /// If this pipeline execution step was cached, details on the cache hit.
  final CacheHitResult? cacheHitResult;

  /// The time that the step stopped executing.
  final DateTime? endTime;

  /// The reason why the step failed execution. This is only returned if the step
  /// failed its execution.
  final String? failureReason;

  /// Metadata for the step execution.
  final PipelineExecutionStepMetadata? metadata;

  /// The time that the step started executing.
  final DateTime? startTime;

  /// The name of the step that is executed.
  final String? stepName;

  /// The status of the step execution.
  final StepStatus? stepStatus;

  PipelineExecutionStep({
    this.cacheHitResult,
    this.endTime,
    this.failureReason,
    this.metadata,
    this.startTime,
    this.stepName,
    this.stepStatus,
  });

  factory PipelineExecutionStep.fromJson(Map<String, dynamic> json) {
    return PipelineExecutionStep(
      cacheHitResult: json['CacheHitResult'] != null
          ? CacheHitResult.fromJson(
              json['CacheHitResult'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      metadata: json['Metadata'] != null
          ? PipelineExecutionStepMetadata.fromJson(
              json['Metadata'] as Map<String, dynamic>)
          : null,
      startTime: timeStampFromJson(json['StartTime']),
      stepName: json['StepName'] as String?,
      stepStatus: (json['StepStatus'] as String?)?.toStepStatus(),
    );
  }

  Map<String, dynamic> toJson() {
    final cacheHitResult = this.cacheHitResult;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final metadata = this.metadata;
    final startTime = this.startTime;
    final stepName = this.stepName;
    final stepStatus = this.stepStatus;
    return {
      if (cacheHitResult != null) 'CacheHitResult': cacheHitResult,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (metadata != null) 'Metadata': metadata,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (stepName != null) 'StepName': stepName,
      if (stepStatus != null) 'StepStatus': stepStatus.toValue(),
    };
  }
}

/// Metadata for a step execution.
class PipelineExecutionStepMetadata {
  final CallbackStepMetadata? callback;

  /// If this is a Condition step metadata object, details on the condition.
  final ConditionStepMetadata? condition;

  /// Metadata for the Model step.
  final ModelStepMetadata? model;

  /// The Amazon Resource Name (ARN) of the processing job that was run by this
  /// step execution.
  final ProcessingJobStepMetadata? processingJob;

  /// Metadata for the RegisterModel step.
  final RegisterModelStepMetadata? registerModel;

  /// The Amazon Resource Name (ARN) of the training job that was run by this step
  /// execution.
  final TrainingJobStepMetadata? trainingJob;

  /// The Amazon Resource Name (ARN) of the transform job that was run by this
  /// step execution.
  final TransformJobStepMetadata? transformJob;

  /// The Amazon Resource Name (ARN) of the tuning job that was run by this step
  /// execution.
  final TuningJobStepMetaData? tuningJob;

  PipelineExecutionStepMetadata({
    this.callback,
    this.condition,
    this.model,
    this.processingJob,
    this.registerModel,
    this.trainingJob,
    this.transformJob,
    this.tuningJob,
  });

  factory PipelineExecutionStepMetadata.fromJson(Map<String, dynamic> json) {
    return PipelineExecutionStepMetadata(
      callback: json['Callback'] != null
          ? CallbackStepMetadata.fromJson(
              json['Callback'] as Map<String, dynamic>)
          : null,
      condition: json['Condition'] != null
          ? ConditionStepMetadata.fromJson(
              json['Condition'] as Map<String, dynamic>)
          : null,
      model: json['Model'] != null
          ? ModelStepMetadata.fromJson(json['Model'] as Map<String, dynamic>)
          : null,
      processingJob: json['ProcessingJob'] != null
          ? ProcessingJobStepMetadata.fromJson(
              json['ProcessingJob'] as Map<String, dynamic>)
          : null,
      registerModel: json['RegisterModel'] != null
          ? RegisterModelStepMetadata.fromJson(
              json['RegisterModel'] as Map<String, dynamic>)
          : null,
      trainingJob: json['TrainingJob'] != null
          ? TrainingJobStepMetadata.fromJson(
              json['TrainingJob'] as Map<String, dynamic>)
          : null,
      transformJob: json['TransformJob'] != null
          ? TransformJobStepMetadata.fromJson(
              json['TransformJob'] as Map<String, dynamic>)
          : null,
      tuningJob: json['TuningJob'] != null
          ? TuningJobStepMetaData.fromJson(
              json['TuningJob'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final callback = this.callback;
    final condition = this.condition;
    final model = this.model;
    final processingJob = this.processingJob;
    final registerModel = this.registerModel;
    final trainingJob = this.trainingJob;
    final transformJob = this.transformJob;
    final tuningJob = this.tuningJob;
    return {
      if (callback != null) 'Callback': callback,
      if (condition != null) 'Condition': condition,
      if (model != null) 'Model': model,
      if (processingJob != null) 'ProcessingJob': processingJob,
      if (registerModel != null) 'RegisterModel': registerModel,
      if (trainingJob != null) 'TrainingJob': trainingJob,
      if (transformJob != null) 'TransformJob': transformJob,
      if (tuningJob != null) 'TuningJob': tuningJob,
    };
  }
}

/// A pipeline execution summary.
class PipelineExecutionSummary {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  /// The description of the pipeline execution.
  final String? pipelineExecutionDescription;

  /// The display name of the pipeline execution.
  final String? pipelineExecutionDisplayName;

  /// The status of the pipeline execution.
  final PipelineExecutionStatus? pipelineExecutionStatus;

  /// The start time of the pipeline execution.
  final DateTime? startTime;

  PipelineExecutionSummary({
    this.pipelineExecutionArn,
    this.pipelineExecutionDescription,
    this.pipelineExecutionDisplayName,
    this.pipelineExecutionStatus,
    this.startTime,
  });

  factory PipelineExecutionSummary.fromJson(Map<String, dynamic> json) {
    return PipelineExecutionSummary(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
      pipelineExecutionDescription:
          json['PipelineExecutionDescription'] as String?,
      pipelineExecutionDisplayName:
          json['PipelineExecutionDisplayName'] as String?,
      pipelineExecutionStatus: (json['PipelineExecutionStatus'] as String?)
          ?.toPipelineExecutionStatus(),
      startTime: timeStampFromJson(json['StartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    final pipelineExecutionDescription = this.pipelineExecutionDescription;
    final pipelineExecutionDisplayName = this.pipelineExecutionDisplayName;
    final pipelineExecutionStatus = this.pipelineExecutionStatus;
    final startTime = this.startTime;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
      if (pipelineExecutionDescription != null)
        'PipelineExecutionDescription': pipelineExecutionDescription,
      if (pipelineExecutionDisplayName != null)
        'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      if (pipelineExecutionStatus != null)
        'PipelineExecutionStatus': pipelineExecutionStatus.toValue(),
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
    };
  }
}

/// Specifies the names of the experiment and trial created by a pipeline.
class PipelineExperimentConfig {
  /// The name of the experiment.
  final String? experimentName;

  /// The name of the trial.
  final String? trialName;

  PipelineExperimentConfig({
    this.experimentName,
    this.trialName,
  });

  factory PipelineExperimentConfig.fromJson(Map<String, dynamic> json) {
    return PipelineExperimentConfig(
      experimentName: json['ExperimentName'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentName = this.experimentName;
    final trialName = this.trialName;
    return {
      if (experimentName != null) 'ExperimentName': experimentName,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

enum PipelineStatus {
  active,
}

extension on PipelineStatus {
  String toValue() {
    switch (this) {
      case PipelineStatus.active:
        return 'Active';
    }
  }
}

extension on String {
  PipelineStatus toPipelineStatus() {
    switch (this) {
      case 'Active':
        return PipelineStatus.active;
    }
    throw Exception('$this is not known in enum PipelineStatus');
  }
}

/// A summary of a pipeline.
class PipelineSummary {
  /// The creation time of the pipeline.
  final DateTime? creationTime;

  /// The last time that a pipeline execution began.
  final DateTime? lastExecutionTime;

  /// The time that the pipeline was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The description of the pipeline.
  final String? pipelineDescription;

  /// The display name of the pipeline.
  final String? pipelineDisplayName;

  /// The name of the pipeline.
  final String? pipelineName;

  /// The Amazon Resource Name (ARN) that the pipeline used to execute.
  final String? roleArn;

  PipelineSummary({
    this.creationTime,
    this.lastExecutionTime,
    this.lastModifiedTime,
    this.pipelineArn,
    this.pipelineDescription,
    this.pipelineDisplayName,
    this.pipelineName,
    this.roleArn,
  });

  factory PipelineSummary.fromJson(Map<String, dynamic> json) {
    return PipelineSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      lastExecutionTime: timeStampFromJson(json['LastExecutionTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      pipelineArn: json['PipelineArn'] as String?,
      pipelineDescription: json['PipelineDescription'] as String?,
      pipelineDisplayName: json['PipelineDisplayName'] as String?,
      pipelineName: json['PipelineName'] as String?,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastExecutionTime = this.lastExecutionTime;
    final lastModifiedTime = this.lastModifiedTime;
    final pipelineArn = this.pipelineArn;
    final pipelineDescription = this.pipelineDescription;
    final pipelineDisplayName = this.pipelineDisplayName;
    final pipelineName = this.pipelineName;
    final roleArn = this.roleArn;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastExecutionTime != null)
        'LastExecutionTime': unixTimestampToJson(lastExecutionTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineDescription != null)
        'PipelineDescription': pipelineDescription,
      if (pipelineDisplayName != null)
        'PipelineDisplayName': pipelineDisplayName,
      if (pipelineName != null) 'PipelineName': pipelineName,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

enum ProblemType {
  binaryClassification,
  multiclassClassification,
  regression,
}

extension on ProblemType {
  String toValue() {
    switch (this) {
      case ProblemType.binaryClassification:
        return 'BinaryClassification';
      case ProblemType.multiclassClassification:
        return 'MulticlassClassification';
      case ProblemType.regression:
        return 'Regression';
    }
  }
}

extension on String {
  ProblemType toProblemType() {
    switch (this) {
      case 'BinaryClassification':
        return ProblemType.binaryClassification;
      case 'MulticlassClassification':
        return ProblemType.multiclassClassification;
      case 'Regression':
        return ProblemType.regression;
    }
    throw Exception('$this is not known in enum ProblemType');
  }
}

/// Configuration for the cluster used to run a processing job.
class ProcessingClusterConfig {
  /// The number of ML compute instances to use in the processing job. For
  /// distributed processing jobs, specify a value greater than 1. The default
  /// value is 1.
  final int instanceCount;

  /// The ML compute instance type for the processing job.
  final ProcessingInstanceType instanceType;

  /// The size of the ML storage volume in gigabytes that you want to provision.
  /// You must specify sufficient ML storage for your scenario.
  /// <note>
  /// Certain Nitro-based instances include local storage with a fixed total size,
  /// dependent on the instance type. When using these instances for processing,
  /// Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2
  /// storage. You can't request a <code>VolumeSizeInGB</code> greater than the
  /// total size of the local instance storage.
  ///
  /// For a list of instance types that support local instance storage, including
  /// the total size per instance type, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  /// </note>
  final int volumeSizeInGB;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume attached to
  /// the ML compute instance(s) that run the processing job.
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>VolumeKmsKeyId</code> when using
  /// an instance type with local storage.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  final String? volumeKmsKeyId;

  ProcessingClusterConfig({
    required this.instanceCount,
    required this.instanceType,
    required this.volumeSizeInGB,
    this.volumeKmsKeyId,
  });

  factory ProcessingClusterConfig.fromJson(Map<String, dynamic> json) {
    return ProcessingClusterConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType: (json['InstanceType'] as String).toProcessingInstanceType(),
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeSizeInGB = this.volumeSizeInGB;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.toValue(),
      'VolumeSizeInGB': volumeSizeInGB,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// Configuration for processing job outputs in Amazon SageMaker Feature Store.
class ProcessingFeatureStoreOutput {
  /// The name of the Amazon SageMaker FeatureGroup to use as the destination for
  /// processing job output. Note that your processing script is responsible for
  /// putting records into your Feature Store.
  final String featureGroupName;

  ProcessingFeatureStoreOutput({
    required this.featureGroupName,
  });

  factory ProcessingFeatureStoreOutput.fromJson(Map<String, dynamic> json) {
    return ProcessingFeatureStoreOutput(
      featureGroupName: json['FeatureGroupName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupName = this.featureGroupName;
    return {
      'FeatureGroupName': featureGroupName,
    };
  }
}

/// The inputs for a processing job. The processing input must specify exactly
/// one of either <code>S3Input</code> or <code>DatasetDefinition</code> types.
class ProcessingInput {
  /// The name for the processing job input.
  final String inputName;

  /// When <code>True</code>, input operations such as data download are managed
  /// natively by the processing job application. When <code>False</code>
  /// (default), input operations are managed by Amazon SageMaker.
  final bool? appManaged;

  /// Configuration for a Dataset Definition input.
  final DatasetDefinition? datasetDefinition;

  /// Configuration for downloading input data from Amazon S3 into the processing
  /// container.
  final ProcessingS3Input? s3Input;

  ProcessingInput({
    required this.inputName,
    this.appManaged,
    this.datasetDefinition,
    this.s3Input,
  });

  factory ProcessingInput.fromJson(Map<String, dynamic> json) {
    return ProcessingInput(
      inputName: json['InputName'] as String,
      appManaged: json['AppManaged'] as bool?,
      datasetDefinition: json['DatasetDefinition'] != null
          ? DatasetDefinition.fromJson(
              json['DatasetDefinition'] as Map<String, dynamic>)
          : null,
      s3Input: json['S3Input'] != null
          ? ProcessingS3Input.fromJson(json['S3Input'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final inputName = this.inputName;
    final appManaged = this.appManaged;
    final datasetDefinition = this.datasetDefinition;
    final s3Input = this.s3Input;
    return {
      'InputName': inputName,
      if (appManaged != null) 'AppManaged': appManaged,
      if (datasetDefinition != null) 'DatasetDefinition': datasetDefinition,
      if (s3Input != null) 'S3Input': s3Input,
    };
  }
}

enum ProcessingInstanceType {
  mlT3Medium,
  mlT3Large,
  mlT3Xlarge,
  mlT3_2xlarge,
  mlM4Xlarge,
  mlM4_2xlarge,
  mlM4_4xlarge,
  mlM4_10xlarge,
  mlM4_16xlarge,
  mlC4Xlarge,
  mlC4_2xlarge,
  mlC4_4xlarge,
  mlC4_8xlarge,
  mlP2Xlarge,
  mlP2_8xlarge,
  mlP2_16xlarge,
  mlP3_2xlarge,
  mlP3_8xlarge,
  mlP3_16xlarge,
  mlC5Xlarge,
  mlC5_2xlarge,
  mlC5_4xlarge,
  mlC5_9xlarge,
  mlC5_18xlarge,
  mlM5Large,
  mlM5Xlarge,
  mlM5_2xlarge,
  mlM5_4xlarge,
  mlM5_12xlarge,
  mlM5_24xlarge,
  mlR5Large,
  mlR5Xlarge,
  mlR5_2xlarge,
  mlR5_4xlarge,
  mlR5_8xlarge,
  mlR5_12xlarge,
  mlR5_16xlarge,
  mlR5_24xlarge,
  mlG4dnXlarge,
  mlG4dn_2xlarge,
  mlG4dn_4xlarge,
  mlG4dn_8xlarge,
  mlG4dn_12xlarge,
  mlG4dn_16xlarge,
}

extension on ProcessingInstanceType {
  String toValue() {
    switch (this) {
      case ProcessingInstanceType.mlT3Medium:
        return 'ml.t3.medium';
      case ProcessingInstanceType.mlT3Large:
        return 'ml.t3.large';
      case ProcessingInstanceType.mlT3Xlarge:
        return 'ml.t3.xlarge';
      case ProcessingInstanceType.mlT3_2xlarge:
        return 'ml.t3.2xlarge';
      case ProcessingInstanceType.mlM4Xlarge:
        return 'ml.m4.xlarge';
      case ProcessingInstanceType.mlM4_2xlarge:
        return 'ml.m4.2xlarge';
      case ProcessingInstanceType.mlM4_4xlarge:
        return 'ml.m4.4xlarge';
      case ProcessingInstanceType.mlM4_10xlarge:
        return 'ml.m4.10xlarge';
      case ProcessingInstanceType.mlM4_16xlarge:
        return 'ml.m4.16xlarge';
      case ProcessingInstanceType.mlC4Xlarge:
        return 'ml.c4.xlarge';
      case ProcessingInstanceType.mlC4_2xlarge:
        return 'ml.c4.2xlarge';
      case ProcessingInstanceType.mlC4_4xlarge:
        return 'ml.c4.4xlarge';
      case ProcessingInstanceType.mlC4_8xlarge:
        return 'ml.c4.8xlarge';
      case ProcessingInstanceType.mlP2Xlarge:
        return 'ml.p2.xlarge';
      case ProcessingInstanceType.mlP2_8xlarge:
        return 'ml.p2.8xlarge';
      case ProcessingInstanceType.mlP2_16xlarge:
        return 'ml.p2.16xlarge';
      case ProcessingInstanceType.mlP3_2xlarge:
        return 'ml.p3.2xlarge';
      case ProcessingInstanceType.mlP3_8xlarge:
        return 'ml.p3.8xlarge';
      case ProcessingInstanceType.mlP3_16xlarge:
        return 'ml.p3.16xlarge';
      case ProcessingInstanceType.mlC5Xlarge:
        return 'ml.c5.xlarge';
      case ProcessingInstanceType.mlC5_2xlarge:
        return 'ml.c5.2xlarge';
      case ProcessingInstanceType.mlC5_4xlarge:
        return 'ml.c5.4xlarge';
      case ProcessingInstanceType.mlC5_9xlarge:
        return 'ml.c5.9xlarge';
      case ProcessingInstanceType.mlC5_18xlarge:
        return 'ml.c5.18xlarge';
      case ProcessingInstanceType.mlM5Large:
        return 'ml.m5.large';
      case ProcessingInstanceType.mlM5Xlarge:
        return 'ml.m5.xlarge';
      case ProcessingInstanceType.mlM5_2xlarge:
        return 'ml.m5.2xlarge';
      case ProcessingInstanceType.mlM5_4xlarge:
        return 'ml.m5.4xlarge';
      case ProcessingInstanceType.mlM5_12xlarge:
        return 'ml.m5.12xlarge';
      case ProcessingInstanceType.mlM5_24xlarge:
        return 'ml.m5.24xlarge';
      case ProcessingInstanceType.mlR5Large:
        return 'ml.r5.large';
      case ProcessingInstanceType.mlR5Xlarge:
        return 'ml.r5.xlarge';
      case ProcessingInstanceType.mlR5_2xlarge:
        return 'ml.r5.2xlarge';
      case ProcessingInstanceType.mlR5_4xlarge:
        return 'ml.r5.4xlarge';
      case ProcessingInstanceType.mlR5_8xlarge:
        return 'ml.r5.8xlarge';
      case ProcessingInstanceType.mlR5_12xlarge:
        return 'ml.r5.12xlarge';
      case ProcessingInstanceType.mlR5_16xlarge:
        return 'ml.r5.16xlarge';
      case ProcessingInstanceType.mlR5_24xlarge:
        return 'ml.r5.24xlarge';
      case ProcessingInstanceType.mlG4dnXlarge:
        return 'ml.g4dn.xlarge';
      case ProcessingInstanceType.mlG4dn_2xlarge:
        return 'ml.g4dn.2xlarge';
      case ProcessingInstanceType.mlG4dn_4xlarge:
        return 'ml.g4dn.4xlarge';
      case ProcessingInstanceType.mlG4dn_8xlarge:
        return 'ml.g4dn.8xlarge';
      case ProcessingInstanceType.mlG4dn_12xlarge:
        return 'ml.g4dn.12xlarge';
      case ProcessingInstanceType.mlG4dn_16xlarge:
        return 'ml.g4dn.16xlarge';
    }
  }
}

extension on String {
  ProcessingInstanceType toProcessingInstanceType() {
    switch (this) {
      case 'ml.t3.medium':
        return ProcessingInstanceType.mlT3Medium;
      case 'ml.t3.large':
        return ProcessingInstanceType.mlT3Large;
      case 'ml.t3.xlarge':
        return ProcessingInstanceType.mlT3Xlarge;
      case 'ml.t3.2xlarge':
        return ProcessingInstanceType.mlT3_2xlarge;
      case 'ml.m4.xlarge':
        return ProcessingInstanceType.mlM4Xlarge;
      case 'ml.m4.2xlarge':
        return ProcessingInstanceType.mlM4_2xlarge;
      case 'ml.m4.4xlarge':
        return ProcessingInstanceType.mlM4_4xlarge;
      case 'ml.m4.10xlarge':
        return ProcessingInstanceType.mlM4_10xlarge;
      case 'ml.m4.16xlarge':
        return ProcessingInstanceType.mlM4_16xlarge;
      case 'ml.c4.xlarge':
        return ProcessingInstanceType.mlC4Xlarge;
      case 'ml.c4.2xlarge':
        return ProcessingInstanceType.mlC4_2xlarge;
      case 'ml.c4.4xlarge':
        return ProcessingInstanceType.mlC4_4xlarge;
      case 'ml.c4.8xlarge':
        return ProcessingInstanceType.mlC4_8xlarge;
      case 'ml.p2.xlarge':
        return ProcessingInstanceType.mlP2Xlarge;
      case 'ml.p2.8xlarge':
        return ProcessingInstanceType.mlP2_8xlarge;
      case 'ml.p2.16xlarge':
        return ProcessingInstanceType.mlP2_16xlarge;
      case 'ml.p3.2xlarge':
        return ProcessingInstanceType.mlP3_2xlarge;
      case 'ml.p3.8xlarge':
        return ProcessingInstanceType.mlP3_8xlarge;
      case 'ml.p3.16xlarge':
        return ProcessingInstanceType.mlP3_16xlarge;
      case 'ml.c5.xlarge':
        return ProcessingInstanceType.mlC5Xlarge;
      case 'ml.c5.2xlarge':
        return ProcessingInstanceType.mlC5_2xlarge;
      case 'ml.c5.4xlarge':
        return ProcessingInstanceType.mlC5_4xlarge;
      case 'ml.c5.9xlarge':
        return ProcessingInstanceType.mlC5_9xlarge;
      case 'ml.c5.18xlarge':
        return ProcessingInstanceType.mlC5_18xlarge;
      case 'ml.m5.large':
        return ProcessingInstanceType.mlM5Large;
      case 'ml.m5.xlarge':
        return ProcessingInstanceType.mlM5Xlarge;
      case 'ml.m5.2xlarge':
        return ProcessingInstanceType.mlM5_2xlarge;
      case 'ml.m5.4xlarge':
        return ProcessingInstanceType.mlM5_4xlarge;
      case 'ml.m5.12xlarge':
        return ProcessingInstanceType.mlM5_12xlarge;
      case 'ml.m5.24xlarge':
        return ProcessingInstanceType.mlM5_24xlarge;
      case 'ml.r5.large':
        return ProcessingInstanceType.mlR5Large;
      case 'ml.r5.xlarge':
        return ProcessingInstanceType.mlR5Xlarge;
      case 'ml.r5.2xlarge':
        return ProcessingInstanceType.mlR5_2xlarge;
      case 'ml.r5.4xlarge':
        return ProcessingInstanceType.mlR5_4xlarge;
      case 'ml.r5.8xlarge':
        return ProcessingInstanceType.mlR5_8xlarge;
      case 'ml.r5.12xlarge':
        return ProcessingInstanceType.mlR5_12xlarge;
      case 'ml.r5.16xlarge':
        return ProcessingInstanceType.mlR5_16xlarge;
      case 'ml.r5.24xlarge':
        return ProcessingInstanceType.mlR5_24xlarge;
      case 'ml.g4dn.xlarge':
        return ProcessingInstanceType.mlG4dnXlarge;
      case 'ml.g4dn.2xlarge':
        return ProcessingInstanceType.mlG4dn_2xlarge;
      case 'ml.g4dn.4xlarge':
        return ProcessingInstanceType.mlG4dn_4xlarge;
      case 'ml.g4dn.8xlarge':
        return ProcessingInstanceType.mlG4dn_8xlarge;
      case 'ml.g4dn.12xlarge':
        return ProcessingInstanceType.mlG4dn_12xlarge;
      case 'ml.g4dn.16xlarge':
        return ProcessingInstanceType.mlG4dn_16xlarge;
    }
    throw Exception('$this is not known in enum ProcessingInstanceType');
  }
}

/// An Amazon SageMaker processing job that is used to analyze data and evaluate
/// models. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process
/// Data and Evaluate Models</a>.
class ProcessingJob {
  final AppSpecification? appSpecification;

  /// The Amazon Resource Name (ARN) of the AutoML job associated with this
  /// processing job.
  final String? autoMLJobArn;

  /// The time the processing job was created.
  final DateTime? creationTime;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  /// A string, up to one KB in size, that contains metadata from the processing
  /// container when the processing job exits.
  final String? exitMessage;
  final ExperimentConfig? experimentConfig;

  /// A string, up to one KB in size, that contains the reason a processing job
  /// failed, if it failed.
  final String? failureReason;

  /// The time the processing job was last modified.
  final DateTime? lastModifiedTime;

  /// The ARN of a monitoring schedule for an endpoint associated with this
  /// processing job.
  final String? monitoringScheduleArn;
  final NetworkConfig? networkConfig;

  /// The time that the processing job ended.
  final DateTime? processingEndTime;

  /// List of input configurations for the processing job.
  final List<ProcessingInput>? processingInputs;

  /// The ARN of the processing job.
  final String? processingJobArn;

  /// The name of the processing job.
  final String? processingJobName;

  /// The status of the processing job.
  final ProcessingJobStatus? processingJobStatus;
  final ProcessingOutputConfig? processingOutputConfig;
  final ProcessingResources? processingResources;

  /// The time that the processing job started.
  final DateTime? processingStartTime;

  /// The ARN of the role used to create the processing job.
  final String? roleArn;
  final ProcessingStoppingCondition? stoppingCondition;

  /// An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  final List<Tag>? tags;

  /// The ARN of the training job associated with this processing job.
  final String? trainingJobArn;

  ProcessingJob({
    this.appSpecification,
    this.autoMLJobArn,
    this.creationTime,
    this.environment,
    this.exitMessage,
    this.experimentConfig,
    this.failureReason,
    this.lastModifiedTime,
    this.monitoringScheduleArn,
    this.networkConfig,
    this.processingEndTime,
    this.processingInputs,
    this.processingJobArn,
    this.processingJobName,
    this.processingJobStatus,
    this.processingOutputConfig,
    this.processingResources,
    this.processingStartTime,
    this.roleArn,
    this.stoppingCondition,
    this.tags,
    this.trainingJobArn,
  });

  factory ProcessingJob.fromJson(Map<String, dynamic> json) {
    return ProcessingJob(
      appSpecification: json['AppSpecification'] != null
          ? AppSpecification.fromJson(
              json['AppSpecification'] as Map<String, dynamic>)
          : null,
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      exitMessage: json['ExitMessage'] as String?,
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      networkConfig: json['NetworkConfig'] != null
          ? NetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      processingEndTime: timeStampFromJson(json['ProcessingEndTime']),
      processingInputs: (json['ProcessingInputs'] as List?)
          ?.whereNotNull()
          .map((e) => ProcessingInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      processingJobArn: json['ProcessingJobArn'] as String?,
      processingJobName: json['ProcessingJobName'] as String?,
      processingJobStatus:
          (json['ProcessingJobStatus'] as String?)?.toProcessingJobStatus(),
      processingOutputConfig: json['ProcessingOutputConfig'] != null
          ? ProcessingOutputConfig.fromJson(
              json['ProcessingOutputConfig'] as Map<String, dynamic>)
          : null,
      processingResources: json['ProcessingResources'] != null
          ? ProcessingResources.fromJson(
              json['ProcessingResources'] as Map<String, dynamic>)
          : null,
      processingStartTime: timeStampFromJson(json['ProcessingStartTime']),
      roleArn: json['RoleArn'] as String?,
      stoppingCondition: json['StoppingCondition'] != null
          ? ProcessingStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingJobArn: json['TrainingJobArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appSpecification = this.appSpecification;
    final autoMLJobArn = this.autoMLJobArn;
    final creationTime = this.creationTime;
    final environment = this.environment;
    final exitMessage = this.exitMessage;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final networkConfig = this.networkConfig;
    final processingEndTime = this.processingEndTime;
    final processingInputs = this.processingInputs;
    final processingJobArn = this.processingJobArn;
    final processingJobName = this.processingJobName;
    final processingJobStatus = this.processingJobStatus;
    final processingOutputConfig = this.processingOutputConfig;
    final processingResources = this.processingResources;
    final processingStartTime = this.processingStartTime;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final tags = this.tags;
    final trainingJobArn = this.trainingJobArn;
    return {
      if (appSpecification != null) 'AppSpecification': appSpecification,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (environment != null) 'Environment': environment,
      if (exitMessage != null) 'ExitMessage': exitMessage,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (processingEndTime != null)
        'ProcessingEndTime': unixTimestampToJson(processingEndTime),
      if (processingInputs != null) 'ProcessingInputs': processingInputs,
      if (processingJobArn != null) 'ProcessingJobArn': processingJobArn,
      if (processingJobName != null) 'ProcessingJobName': processingJobName,
      if (processingJobStatus != null)
        'ProcessingJobStatus': processingJobStatus.toValue(),
      if (processingOutputConfig != null)
        'ProcessingOutputConfig': processingOutputConfig,
      if (processingResources != null)
        'ProcessingResources': processingResources,
      if (processingStartTime != null)
        'ProcessingStartTime': unixTimestampToJson(processingStartTime),
      if (roleArn != null) 'RoleArn': roleArn,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
      if (tags != null) 'Tags': tags,
      if (trainingJobArn != null) 'TrainingJobArn': trainingJobArn,
    };
  }
}

enum ProcessingJobStatus {
  inProgress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on ProcessingJobStatus {
  String toValue() {
    switch (this) {
      case ProcessingJobStatus.inProgress:
        return 'InProgress';
      case ProcessingJobStatus.completed:
        return 'Completed';
      case ProcessingJobStatus.failed:
        return 'Failed';
      case ProcessingJobStatus.stopping:
        return 'Stopping';
      case ProcessingJobStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  ProcessingJobStatus toProcessingJobStatus() {
    switch (this) {
      case 'InProgress':
        return ProcessingJobStatus.inProgress;
      case 'Completed':
        return ProcessingJobStatus.completed;
      case 'Failed':
        return ProcessingJobStatus.failed;
      case 'Stopping':
        return ProcessingJobStatus.stopping;
      case 'Stopped':
        return ProcessingJobStatus.stopped;
    }
    throw Exception('$this is not known in enum ProcessingJobStatus');
  }
}

/// Metadata for a processing job step.
class ProcessingJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the processing job.
  final String? arn;

  ProcessingJobStepMetadata({
    this.arn,
  });

  factory ProcessingJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return ProcessingJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Summary of information about a processing job.
class ProcessingJobSummary {
  /// The time at which the processing job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the processing job..
  final String processingJobArn;

  /// The name of the processing job.
  final String processingJobName;

  /// The status of the processing job.
  final ProcessingJobStatus processingJobStatus;

  /// An optional string, up to one KB in size, that contains metadata from the
  /// processing container when the processing job exits.
  final String? exitMessage;

  /// A string, up to one KB in size, that contains the reason a processing job
  /// failed, if it failed.
  final String? failureReason;

  /// A timestamp that indicates the last time the processing job was modified.
  final DateTime? lastModifiedTime;

  /// The time at which the processing job completed.
  final DateTime? processingEndTime;

  ProcessingJobSummary({
    required this.creationTime,
    required this.processingJobArn,
    required this.processingJobName,
    required this.processingJobStatus,
    this.exitMessage,
    this.failureReason,
    this.lastModifiedTime,
    this.processingEndTime,
  });

  factory ProcessingJobSummary.fromJson(Map<String, dynamic> json) {
    return ProcessingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      processingJobArn: json['ProcessingJobArn'] as String,
      processingJobName: json['ProcessingJobName'] as String,
      processingJobStatus:
          (json['ProcessingJobStatus'] as String).toProcessingJobStatus(),
      exitMessage: json['ExitMessage'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      processingEndTime: timeStampFromJson(json['ProcessingEndTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final processingJobArn = this.processingJobArn;
    final processingJobName = this.processingJobName;
    final processingJobStatus = this.processingJobStatus;
    final exitMessage = this.exitMessage;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final processingEndTime = this.processingEndTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ProcessingJobArn': processingJobArn,
      'ProcessingJobName': processingJobName,
      'ProcessingJobStatus': processingJobStatus.toValue(),
      if (exitMessage != null) 'ExitMessage': exitMessage,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (processingEndTime != null)
        'ProcessingEndTime': unixTimestampToJson(processingEndTime),
    };
  }
}

/// Describes the results of a processing job. The processing output must
/// specify exactly one of either <code>S3Output</code> or
/// <code>FeatureStoreOutput</code> types.
class ProcessingOutput {
  /// The name for the processing job output.
  final String outputName;

  /// When <code>True</code>, output operations such as data upload are managed
  /// natively by the processing job application. When <code>False</code>
  /// (default), output operations are managed by Amazon SageMaker.
  final bool? appManaged;

  /// Configuration for processing job outputs in Amazon SageMaker Feature Store.
  /// This processing output type is only supported when <code>AppManaged</code>
  /// is specified.
  final ProcessingFeatureStoreOutput? featureStoreOutput;

  /// Configuration for processing job outputs in Amazon S3.
  final ProcessingS3Output? s3Output;

  ProcessingOutput({
    required this.outputName,
    this.appManaged,
    this.featureStoreOutput,
    this.s3Output,
  });

  factory ProcessingOutput.fromJson(Map<String, dynamic> json) {
    return ProcessingOutput(
      outputName: json['OutputName'] as String,
      appManaged: json['AppManaged'] as bool?,
      featureStoreOutput: json['FeatureStoreOutput'] != null
          ? ProcessingFeatureStoreOutput.fromJson(
              json['FeatureStoreOutput'] as Map<String, dynamic>)
          : null,
      s3Output: json['S3Output'] != null
          ? ProcessingS3Output.fromJson(
              json['S3Output'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final outputName = this.outputName;
    final appManaged = this.appManaged;
    final featureStoreOutput = this.featureStoreOutput;
    final s3Output = this.s3Output;
    return {
      'OutputName': outputName,
      if (appManaged != null) 'AppManaged': appManaged,
      if (featureStoreOutput != null) 'FeatureStoreOutput': featureStoreOutput,
      if (s3Output != null) 'S3Output': s3Output,
    };
  }
}

/// Configuration for uploading output from the processing container.
class ProcessingOutputConfig {
  /// An array of outputs configuring the data to upload from the processing
  /// container.
  final List<ProcessingOutput> outputs;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the processing job output.
  /// <code>KmsKeyId</code> can be an ID of a KMS key, ARN of a KMS key, alias of
  /// a KMS key, or alias of a KMS key. The <code>KmsKeyId</code> is applied to
  /// all outputs.
  final String? kmsKeyId;

  ProcessingOutputConfig({
    required this.outputs,
    this.kmsKeyId,
  });

  factory ProcessingOutputConfig.fromJson(Map<String, dynamic> json) {
    return ProcessingOutputConfig(
      outputs: (json['Outputs'] as List)
          .whereNotNull()
          .map((e) => ProcessingOutput.fromJson(e as Map<String, dynamic>))
          .toList(),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final outputs = this.outputs;
    final kmsKeyId = this.kmsKeyId;
    return {
      'Outputs': outputs,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// Identifies the resources, ML compute instances, and ML storage volumes to
/// deploy for a processing job. In distributed training, you specify more than
/// one instance.
class ProcessingResources {
  /// The configuration for the resources in a cluster used to run the processing
  /// job.
  final ProcessingClusterConfig clusterConfig;

  ProcessingResources({
    required this.clusterConfig,
  });

  factory ProcessingResources.fromJson(Map<String, dynamic> json) {
    return ProcessingResources(
      clusterConfig: ProcessingClusterConfig.fromJson(
          json['ClusterConfig'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterConfig = this.clusterConfig;
    return {
      'ClusterConfig': clusterConfig,
    };
  }
}

enum ProcessingS3CompressionType {
  none,
  gzip,
}

extension on ProcessingS3CompressionType {
  String toValue() {
    switch (this) {
      case ProcessingS3CompressionType.none:
        return 'None';
      case ProcessingS3CompressionType.gzip:
        return 'Gzip';
    }
  }
}

extension on String {
  ProcessingS3CompressionType toProcessingS3CompressionType() {
    switch (this) {
      case 'None':
        return ProcessingS3CompressionType.none;
      case 'Gzip':
        return ProcessingS3CompressionType.gzip;
    }
    throw Exception('$this is not known in enum ProcessingS3CompressionType');
  }
}

enum ProcessingS3DataDistributionType {
  fullyReplicated,
  shardedByS3Key,
}

extension on ProcessingS3DataDistributionType {
  String toValue() {
    switch (this) {
      case ProcessingS3DataDistributionType.fullyReplicated:
        return 'FullyReplicated';
      case ProcessingS3DataDistributionType.shardedByS3Key:
        return 'ShardedByS3Key';
    }
  }
}

extension on String {
  ProcessingS3DataDistributionType toProcessingS3DataDistributionType() {
    switch (this) {
      case 'FullyReplicated':
        return ProcessingS3DataDistributionType.fullyReplicated;
      case 'ShardedByS3Key':
        return ProcessingS3DataDistributionType.shardedByS3Key;
    }
    throw Exception(
        '$this is not known in enum ProcessingS3DataDistributionType');
  }
}

enum ProcessingS3DataType {
  manifestFile,
  s3Prefix,
}

extension on ProcessingS3DataType {
  String toValue() {
    switch (this) {
      case ProcessingS3DataType.manifestFile:
        return 'ManifestFile';
      case ProcessingS3DataType.s3Prefix:
        return 'S3Prefix';
    }
  }
}

extension on String {
  ProcessingS3DataType toProcessingS3DataType() {
    switch (this) {
      case 'ManifestFile':
        return ProcessingS3DataType.manifestFile;
      case 'S3Prefix':
        return ProcessingS3DataType.s3Prefix;
    }
    throw Exception('$this is not known in enum ProcessingS3DataType');
  }
}

/// Configuration for downloading input data from Amazon S3 into the processing
/// container.
class ProcessingS3Input {
  /// Whether you use an <code>S3Prefix</code> or a <code>ManifestFile</code> for
  /// the data type. If you choose <code>S3Prefix</code>, <code>S3Uri</code>
  /// identifies a key name prefix. Amazon SageMaker uses all objects with the
  /// specified key name prefix for the processing job. If you choose
  /// <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that is a
  /// manifest file containing a list of object keys that you want Amazon
  /// SageMaker to use for the processing job.
  final ProcessingS3DataType s3DataType;

  /// The URI of the Amazon S3 prefix Amazon SageMaker downloads data required to
  /// run a processing job.
  final String s3Uri;

  /// The local path in your container where you want Amazon SageMaker to write
  /// input data to. <code>LocalPath</code> is an absolute path to the input data
  /// and must begin with <code>/opt/ml/processing/</code>. <code>LocalPath</code>
  /// is a required parameter when <code>AppManaged</code> is <code>False</code>
  /// (default).
  final String? localPath;

  /// Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the
  /// processing container. <code>Gzip</code> can only be used when
  /// <code>Pipe</code> mode is specified as the <code>S3InputMode</code>. In
  /// <code>Pipe</code> mode, Amazon SageMaker streams input data from the source
  /// directly to your container without using the EBS volume.
  final ProcessingS3CompressionType? s3CompressionType;

  /// Whether to distribute the data from Amazon S3 to all processing instances
  /// with <code>FullyReplicated</code>, or whether the data from Amazon S3 is
  /// shared by Amazon S3 key, downloading one shard of data to each processing
  /// instance.
  final ProcessingS3DataDistributionType? s3DataDistributionType;

  /// Whether to use <code>File</code> or <code>Pipe</code> input mode. In File
  /// mode, Amazon SageMaker copies the data from the input source onto the local
  /// ML storage volume before starting your processing container. This is the
  /// most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker
  /// streams input data from the source directly to your processing container
  /// into named pipes without using the ML storage volume.
  final ProcessingS3InputMode? s3InputMode;

  ProcessingS3Input({
    required this.s3DataType,
    required this.s3Uri,
    this.localPath,
    this.s3CompressionType,
    this.s3DataDistributionType,
    this.s3InputMode,
  });

  factory ProcessingS3Input.fromJson(Map<String, dynamic> json) {
    return ProcessingS3Input(
      s3DataType: (json['S3DataType'] as String).toProcessingS3DataType(),
      s3Uri: json['S3Uri'] as String,
      localPath: json['LocalPath'] as String?,
      s3CompressionType: (json['S3CompressionType'] as String?)
          ?.toProcessingS3CompressionType(),
      s3DataDistributionType: (json['S3DataDistributionType'] as String?)
          ?.toProcessingS3DataDistributionType(),
      s3InputMode: (json['S3InputMode'] as String?)?.toProcessingS3InputMode(),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    final localPath = this.localPath;
    final s3CompressionType = this.s3CompressionType;
    final s3DataDistributionType = this.s3DataDistributionType;
    final s3InputMode = this.s3InputMode;
    return {
      'S3DataType': s3DataType.toValue(),
      'S3Uri': s3Uri,
      if (localPath != null) 'LocalPath': localPath,
      if (s3CompressionType != null)
        'S3CompressionType': s3CompressionType.toValue(),
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.toValue(),
      if (s3InputMode != null) 'S3InputMode': s3InputMode.toValue(),
    };
  }
}

enum ProcessingS3InputMode {
  pipe,
  file,
}

extension on ProcessingS3InputMode {
  String toValue() {
    switch (this) {
      case ProcessingS3InputMode.pipe:
        return 'Pipe';
      case ProcessingS3InputMode.file:
        return 'File';
    }
  }
}

extension on String {
  ProcessingS3InputMode toProcessingS3InputMode() {
    switch (this) {
      case 'Pipe':
        return ProcessingS3InputMode.pipe;
      case 'File':
        return ProcessingS3InputMode.file;
    }
    throw Exception('$this is not known in enum ProcessingS3InputMode');
  }
}

/// Configuration for uploading output data to Amazon S3 from the processing
/// container.
class ProcessingS3Output {
  /// The local path of a directory where you want Amazon SageMaker to upload its
  /// contents to Amazon S3. <code>LocalPath</code> is an absolute path to a
  /// directory containing output files. This directory will be created by the
  /// platform and exist when your container's entrypoint is invoked.
  final String localPath;

  /// Whether to upload the results of the processing job continuously or after
  /// the job completes.
  final ProcessingS3UploadMode s3UploadMode;

  /// A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker
  /// to save the results of a processing job.
  final String s3Uri;

  ProcessingS3Output({
    required this.localPath,
    required this.s3UploadMode,
    required this.s3Uri,
  });

  factory ProcessingS3Output.fromJson(Map<String, dynamic> json) {
    return ProcessingS3Output(
      localPath: json['LocalPath'] as String,
      s3UploadMode: (json['S3UploadMode'] as String).toProcessingS3UploadMode(),
      s3Uri: json['S3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final localPath = this.localPath;
    final s3UploadMode = this.s3UploadMode;
    final s3Uri = this.s3Uri;
    return {
      'LocalPath': localPath,
      'S3UploadMode': s3UploadMode.toValue(),
      'S3Uri': s3Uri,
    };
  }
}

enum ProcessingS3UploadMode {
  continuous,
  endOfJob,
}

extension on ProcessingS3UploadMode {
  String toValue() {
    switch (this) {
      case ProcessingS3UploadMode.continuous:
        return 'Continuous';
      case ProcessingS3UploadMode.endOfJob:
        return 'EndOfJob';
    }
  }
}

extension on String {
  ProcessingS3UploadMode toProcessingS3UploadMode() {
    switch (this) {
      case 'Continuous':
        return ProcessingS3UploadMode.continuous;
      case 'EndOfJob':
        return ProcessingS3UploadMode.endOfJob;
    }
    throw Exception('$this is not known in enum ProcessingS3UploadMode');
  }
}

/// Configures conditions under which the processing job should be stopped, such
/// as how long the processing job has been running. After the condition is met,
/// the processing job is stopped.
class ProcessingStoppingCondition {
  /// Specifies the maximum runtime in seconds.
  final int maxRuntimeInSeconds;

  ProcessingStoppingCondition({
    required this.maxRuntimeInSeconds,
  });

  factory ProcessingStoppingCondition.fromJson(Map<String, dynamic> json) {
    return ProcessingStoppingCondition(
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    return {
      'MaxRuntimeInSeconds': maxRuntimeInSeconds,
    };
  }
}

/// Identifies a model that you want to host and the resources chosen to deploy
/// for hosting it. If you are deploying multiple models, tell Amazon SageMaker
/// how to distribute traffic among the models by specifying variant weights.
class ProductionVariant {
  /// Number of instances to launch initially.
  final int initialInstanceCount;

  /// The ML compute instance type.
  final ProductionVariantInstanceType instanceType;

  /// The name of the model that you want to host. This is the name that you
  /// specified when creating the model.
  final String modelName;

  /// The name of the production variant.
  final String variantName;

  /// The size of the Elastic Inference (EI) instance to use for the production
  /// variant. EI instances provide on-demand GPU computing for inference. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
  /// Inference in Amazon SageMaker</a>.
  final ProductionVariantAcceleratorType? acceleratorType;

  /// Specifies configuration for a core dump from the model container when the
  /// process crashes.
  final ProductionVariantCoreDumpConfig? coreDumpConfig;

  /// Determines initial traffic distribution among all of the models that you
  /// specify in the endpoint configuration. The traffic to a production variant
  /// is determined by the ratio of the <code>VariantWeight</code> to the sum of
  /// all <code>VariantWeight</code> values across all ProductionVariants. If
  /// unspecified, it defaults to 1.0.
  final double? initialVariantWeight;

  ProductionVariant({
    required this.initialInstanceCount,
    required this.instanceType,
    required this.modelName,
    required this.variantName,
    this.acceleratorType,
    this.coreDumpConfig,
    this.initialVariantWeight,
  });

  factory ProductionVariant.fromJson(Map<String, dynamic> json) {
    return ProductionVariant(
      initialInstanceCount: json['InitialInstanceCount'] as int,
      instanceType:
          (json['InstanceType'] as String).toProductionVariantInstanceType(),
      modelName: json['ModelName'] as String,
      variantName: json['VariantName'] as String,
      acceleratorType: (json['AcceleratorType'] as String?)
          ?.toProductionVariantAcceleratorType(),
      coreDumpConfig: json['CoreDumpConfig'] != null
          ? ProductionVariantCoreDumpConfig.fromJson(
              json['CoreDumpConfig'] as Map<String, dynamic>)
          : null,
      initialVariantWeight: json['InitialVariantWeight'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final initialInstanceCount = this.initialInstanceCount;
    final instanceType = this.instanceType;
    final modelName = this.modelName;
    final variantName = this.variantName;
    final acceleratorType = this.acceleratorType;
    final coreDumpConfig = this.coreDumpConfig;
    final initialVariantWeight = this.initialVariantWeight;
    return {
      'InitialInstanceCount': initialInstanceCount,
      'InstanceType': instanceType.toValue(),
      'ModelName': modelName,
      'VariantName': variantName,
      if (acceleratorType != null) 'AcceleratorType': acceleratorType.toValue(),
      if (coreDumpConfig != null) 'CoreDumpConfig': coreDumpConfig,
      if (initialVariantWeight != null)
        'InitialVariantWeight': initialVariantWeight,
    };
  }
}

enum ProductionVariantAcceleratorType {
  mlEia1Medium,
  mlEia1Large,
  mlEia1Xlarge,
  mlEia2Medium,
  mlEia2Large,
  mlEia2Xlarge,
}

extension on ProductionVariantAcceleratorType {
  String toValue() {
    switch (this) {
      case ProductionVariantAcceleratorType.mlEia1Medium:
        return 'ml.eia1.medium';
      case ProductionVariantAcceleratorType.mlEia1Large:
        return 'ml.eia1.large';
      case ProductionVariantAcceleratorType.mlEia1Xlarge:
        return 'ml.eia1.xlarge';
      case ProductionVariantAcceleratorType.mlEia2Medium:
        return 'ml.eia2.medium';
      case ProductionVariantAcceleratorType.mlEia2Large:
        return 'ml.eia2.large';
      case ProductionVariantAcceleratorType.mlEia2Xlarge:
        return 'ml.eia2.xlarge';
    }
  }
}

extension on String {
  ProductionVariantAcceleratorType toProductionVariantAcceleratorType() {
    switch (this) {
      case 'ml.eia1.medium':
        return ProductionVariantAcceleratorType.mlEia1Medium;
      case 'ml.eia1.large':
        return ProductionVariantAcceleratorType.mlEia1Large;
      case 'ml.eia1.xlarge':
        return ProductionVariantAcceleratorType.mlEia1Xlarge;
      case 'ml.eia2.medium':
        return ProductionVariantAcceleratorType.mlEia2Medium;
      case 'ml.eia2.large':
        return ProductionVariantAcceleratorType.mlEia2Large;
      case 'ml.eia2.xlarge':
        return ProductionVariantAcceleratorType.mlEia2Xlarge;
    }
    throw Exception(
        '$this is not known in enum ProductionVariantAcceleratorType');
  }
}

/// Specifies configuration for a core dump from the model container when the
/// process crashes.
class ProductionVariantCoreDumpConfig {
  /// The Amazon S3 bucket to send the core dump to.
  final String destinationS3Uri;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the core dump data at rest using
  /// Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of
  /// the following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // KMS Key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key Alias
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
  /// </li>
  /// </ul>
  /// If you use a KMS key ID or an alias of your master key, the Amazon SageMaker
  /// execution role must include permissions to call <code>kms:Encrypt</code>. If
  /// you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key
  /// for Amazon S3 for your role's account. Amazon SageMaker uses server-side
  /// encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you
  /// use a bucket policy with an <code>s3:PutObject</code> permission that only
  /// allows objects with server-side encryption, set the condition key of
  /// <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify in
  /// your <code>CreateEndpoint</code> and <code>UpdateEndpoint</code> requests.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  final String? kmsKeyId;

  ProductionVariantCoreDumpConfig({
    required this.destinationS3Uri,
    this.kmsKeyId,
  });

  factory ProductionVariantCoreDumpConfig.fromJson(Map<String, dynamic> json) {
    return ProductionVariantCoreDumpConfig(
      destinationS3Uri: json['DestinationS3Uri'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationS3Uri = this.destinationS3Uri;
    final kmsKeyId = this.kmsKeyId;
    return {
      'DestinationS3Uri': destinationS3Uri,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum ProductionVariantInstanceType {
  mlT2Medium,
  mlT2Large,
  mlT2Xlarge,
  mlT2_2xlarge,
  mlM4Xlarge,
  mlM4_2xlarge,
  mlM4_4xlarge,
  mlM4_10xlarge,
  mlM4_16xlarge,
  mlM5Large,
  mlM5Xlarge,
  mlM5_2xlarge,
  mlM5_4xlarge,
  mlM5_12xlarge,
  mlM5_24xlarge,
  mlM5dLarge,
  mlM5dXlarge,
  mlM5d_2xlarge,
  mlM5d_4xlarge,
  mlM5d_12xlarge,
  mlM5d_24xlarge,
  mlC4Large,
  mlC4Xlarge,
  mlC4_2xlarge,
  mlC4_4xlarge,
  mlC4_8xlarge,
  mlP2Xlarge,
  mlP2_8xlarge,
  mlP2_16xlarge,
  mlP3_2xlarge,
  mlP3_8xlarge,
  mlP3_16xlarge,
  mlC5Large,
  mlC5Xlarge,
  mlC5_2xlarge,
  mlC5_4xlarge,
  mlC5_9xlarge,
  mlC5_18xlarge,
  mlC5dLarge,
  mlC5dXlarge,
  mlC5d_2xlarge,
  mlC5d_4xlarge,
  mlC5d_9xlarge,
  mlC5d_18xlarge,
  mlG4dnXlarge,
  mlG4dn_2xlarge,
  mlG4dn_4xlarge,
  mlG4dn_8xlarge,
  mlG4dn_12xlarge,
  mlG4dn_16xlarge,
  mlR5Large,
  mlR5Xlarge,
  mlR5_2xlarge,
  mlR5_4xlarge,
  mlR5_12xlarge,
  mlR5_24xlarge,
  mlR5dLarge,
  mlR5dXlarge,
  mlR5d_2xlarge,
  mlR5d_4xlarge,
  mlR5d_12xlarge,
  mlR5d_24xlarge,
  mlInf1Xlarge,
  mlInf1_2xlarge,
  mlInf1_6xlarge,
  mlInf1_24xlarge,
}

extension on ProductionVariantInstanceType {
  String toValue() {
    switch (this) {
      case ProductionVariantInstanceType.mlT2Medium:
        return 'ml.t2.medium';
      case ProductionVariantInstanceType.mlT2Large:
        return 'ml.t2.large';
      case ProductionVariantInstanceType.mlT2Xlarge:
        return 'ml.t2.xlarge';
      case ProductionVariantInstanceType.mlT2_2xlarge:
        return 'ml.t2.2xlarge';
      case ProductionVariantInstanceType.mlM4Xlarge:
        return 'ml.m4.xlarge';
      case ProductionVariantInstanceType.mlM4_2xlarge:
        return 'ml.m4.2xlarge';
      case ProductionVariantInstanceType.mlM4_4xlarge:
        return 'ml.m4.4xlarge';
      case ProductionVariantInstanceType.mlM4_10xlarge:
        return 'ml.m4.10xlarge';
      case ProductionVariantInstanceType.mlM4_16xlarge:
        return 'ml.m4.16xlarge';
      case ProductionVariantInstanceType.mlM5Large:
        return 'ml.m5.large';
      case ProductionVariantInstanceType.mlM5Xlarge:
        return 'ml.m5.xlarge';
      case ProductionVariantInstanceType.mlM5_2xlarge:
        return 'ml.m5.2xlarge';
      case ProductionVariantInstanceType.mlM5_4xlarge:
        return 'ml.m5.4xlarge';
      case ProductionVariantInstanceType.mlM5_12xlarge:
        return 'ml.m5.12xlarge';
      case ProductionVariantInstanceType.mlM5_24xlarge:
        return 'ml.m5.24xlarge';
      case ProductionVariantInstanceType.mlM5dLarge:
        return 'ml.m5d.large';
      case ProductionVariantInstanceType.mlM5dXlarge:
        return 'ml.m5d.xlarge';
      case ProductionVariantInstanceType.mlM5d_2xlarge:
        return 'ml.m5d.2xlarge';
      case ProductionVariantInstanceType.mlM5d_4xlarge:
        return 'ml.m5d.4xlarge';
      case ProductionVariantInstanceType.mlM5d_12xlarge:
        return 'ml.m5d.12xlarge';
      case ProductionVariantInstanceType.mlM5d_24xlarge:
        return 'ml.m5d.24xlarge';
      case ProductionVariantInstanceType.mlC4Large:
        return 'ml.c4.large';
      case ProductionVariantInstanceType.mlC4Xlarge:
        return 'ml.c4.xlarge';
      case ProductionVariantInstanceType.mlC4_2xlarge:
        return 'ml.c4.2xlarge';
      case ProductionVariantInstanceType.mlC4_4xlarge:
        return 'ml.c4.4xlarge';
      case ProductionVariantInstanceType.mlC4_8xlarge:
        return 'ml.c4.8xlarge';
      case ProductionVariantInstanceType.mlP2Xlarge:
        return 'ml.p2.xlarge';
      case ProductionVariantInstanceType.mlP2_8xlarge:
        return 'ml.p2.8xlarge';
      case ProductionVariantInstanceType.mlP2_16xlarge:
        return 'ml.p2.16xlarge';
      case ProductionVariantInstanceType.mlP3_2xlarge:
        return 'ml.p3.2xlarge';
      case ProductionVariantInstanceType.mlP3_8xlarge:
        return 'ml.p3.8xlarge';
      case ProductionVariantInstanceType.mlP3_16xlarge:
        return 'ml.p3.16xlarge';
      case ProductionVariantInstanceType.mlC5Large:
        return 'ml.c5.large';
      case ProductionVariantInstanceType.mlC5Xlarge:
        return 'ml.c5.xlarge';
      case ProductionVariantInstanceType.mlC5_2xlarge:
        return 'ml.c5.2xlarge';
      case ProductionVariantInstanceType.mlC5_4xlarge:
        return 'ml.c5.4xlarge';
      case ProductionVariantInstanceType.mlC5_9xlarge:
        return 'ml.c5.9xlarge';
      case ProductionVariantInstanceType.mlC5_18xlarge:
        return 'ml.c5.18xlarge';
      case ProductionVariantInstanceType.mlC5dLarge:
        return 'ml.c5d.large';
      case ProductionVariantInstanceType.mlC5dXlarge:
        return 'ml.c5d.xlarge';
      case ProductionVariantInstanceType.mlC5d_2xlarge:
        return 'ml.c5d.2xlarge';
      case ProductionVariantInstanceType.mlC5d_4xlarge:
        return 'ml.c5d.4xlarge';
      case ProductionVariantInstanceType.mlC5d_9xlarge:
        return 'ml.c5d.9xlarge';
      case ProductionVariantInstanceType.mlC5d_18xlarge:
        return 'ml.c5d.18xlarge';
      case ProductionVariantInstanceType.mlG4dnXlarge:
        return 'ml.g4dn.xlarge';
      case ProductionVariantInstanceType.mlG4dn_2xlarge:
        return 'ml.g4dn.2xlarge';
      case ProductionVariantInstanceType.mlG4dn_4xlarge:
        return 'ml.g4dn.4xlarge';
      case ProductionVariantInstanceType.mlG4dn_8xlarge:
        return 'ml.g4dn.8xlarge';
      case ProductionVariantInstanceType.mlG4dn_12xlarge:
        return 'ml.g4dn.12xlarge';
      case ProductionVariantInstanceType.mlG4dn_16xlarge:
        return 'ml.g4dn.16xlarge';
      case ProductionVariantInstanceType.mlR5Large:
        return 'ml.r5.large';
      case ProductionVariantInstanceType.mlR5Xlarge:
        return 'ml.r5.xlarge';
      case ProductionVariantInstanceType.mlR5_2xlarge:
        return 'ml.r5.2xlarge';
      case ProductionVariantInstanceType.mlR5_4xlarge:
        return 'ml.r5.4xlarge';
      case ProductionVariantInstanceType.mlR5_12xlarge:
        return 'ml.r5.12xlarge';
      case ProductionVariantInstanceType.mlR5_24xlarge:
        return 'ml.r5.24xlarge';
      case ProductionVariantInstanceType.mlR5dLarge:
        return 'ml.r5d.large';
      case ProductionVariantInstanceType.mlR5dXlarge:
        return 'ml.r5d.xlarge';
      case ProductionVariantInstanceType.mlR5d_2xlarge:
        return 'ml.r5d.2xlarge';
      case ProductionVariantInstanceType.mlR5d_4xlarge:
        return 'ml.r5d.4xlarge';
      case ProductionVariantInstanceType.mlR5d_12xlarge:
        return 'ml.r5d.12xlarge';
      case ProductionVariantInstanceType.mlR5d_24xlarge:
        return 'ml.r5d.24xlarge';
      case ProductionVariantInstanceType.mlInf1Xlarge:
        return 'ml.inf1.xlarge';
      case ProductionVariantInstanceType.mlInf1_2xlarge:
        return 'ml.inf1.2xlarge';
      case ProductionVariantInstanceType.mlInf1_6xlarge:
        return 'ml.inf1.6xlarge';
      case ProductionVariantInstanceType.mlInf1_24xlarge:
        return 'ml.inf1.24xlarge';
    }
  }
}

extension on String {
  ProductionVariantInstanceType toProductionVariantInstanceType() {
    switch (this) {
      case 'ml.t2.medium':
        return ProductionVariantInstanceType.mlT2Medium;
      case 'ml.t2.large':
        return ProductionVariantInstanceType.mlT2Large;
      case 'ml.t2.xlarge':
        return ProductionVariantInstanceType.mlT2Xlarge;
      case 'ml.t2.2xlarge':
        return ProductionVariantInstanceType.mlT2_2xlarge;
      case 'ml.m4.xlarge':
        return ProductionVariantInstanceType.mlM4Xlarge;
      case 'ml.m4.2xlarge':
        return ProductionVariantInstanceType.mlM4_2xlarge;
      case 'ml.m4.4xlarge':
        return ProductionVariantInstanceType.mlM4_4xlarge;
      case 'ml.m4.10xlarge':
        return ProductionVariantInstanceType.mlM4_10xlarge;
      case 'ml.m4.16xlarge':
        return ProductionVariantInstanceType.mlM4_16xlarge;
      case 'ml.m5.large':
        return ProductionVariantInstanceType.mlM5Large;
      case 'ml.m5.xlarge':
        return ProductionVariantInstanceType.mlM5Xlarge;
      case 'ml.m5.2xlarge':
        return ProductionVariantInstanceType.mlM5_2xlarge;
      case 'ml.m5.4xlarge':
        return ProductionVariantInstanceType.mlM5_4xlarge;
      case 'ml.m5.12xlarge':
        return ProductionVariantInstanceType.mlM5_12xlarge;
      case 'ml.m5.24xlarge':
        return ProductionVariantInstanceType.mlM5_24xlarge;
      case 'ml.m5d.large':
        return ProductionVariantInstanceType.mlM5dLarge;
      case 'ml.m5d.xlarge':
        return ProductionVariantInstanceType.mlM5dXlarge;
      case 'ml.m5d.2xlarge':
        return ProductionVariantInstanceType.mlM5d_2xlarge;
      case 'ml.m5d.4xlarge':
        return ProductionVariantInstanceType.mlM5d_4xlarge;
      case 'ml.m5d.12xlarge':
        return ProductionVariantInstanceType.mlM5d_12xlarge;
      case 'ml.m5d.24xlarge':
        return ProductionVariantInstanceType.mlM5d_24xlarge;
      case 'ml.c4.large':
        return ProductionVariantInstanceType.mlC4Large;
      case 'ml.c4.xlarge':
        return ProductionVariantInstanceType.mlC4Xlarge;
      case 'ml.c4.2xlarge':
        return ProductionVariantInstanceType.mlC4_2xlarge;
      case 'ml.c4.4xlarge':
        return ProductionVariantInstanceType.mlC4_4xlarge;
      case 'ml.c4.8xlarge':
        return ProductionVariantInstanceType.mlC4_8xlarge;
      case 'ml.p2.xlarge':
        return ProductionVariantInstanceType.mlP2Xlarge;
      case 'ml.p2.8xlarge':
        return ProductionVariantInstanceType.mlP2_8xlarge;
      case 'ml.p2.16xlarge':
        return ProductionVariantInstanceType.mlP2_16xlarge;
      case 'ml.p3.2xlarge':
        return ProductionVariantInstanceType.mlP3_2xlarge;
      case 'ml.p3.8xlarge':
        return ProductionVariantInstanceType.mlP3_8xlarge;
      case 'ml.p3.16xlarge':
        return ProductionVariantInstanceType.mlP3_16xlarge;
      case 'ml.c5.large':
        return ProductionVariantInstanceType.mlC5Large;
      case 'ml.c5.xlarge':
        return ProductionVariantInstanceType.mlC5Xlarge;
      case 'ml.c5.2xlarge':
        return ProductionVariantInstanceType.mlC5_2xlarge;
      case 'ml.c5.4xlarge':
        return ProductionVariantInstanceType.mlC5_4xlarge;
      case 'ml.c5.9xlarge':
        return ProductionVariantInstanceType.mlC5_9xlarge;
      case 'ml.c5.18xlarge':
        return ProductionVariantInstanceType.mlC5_18xlarge;
      case 'ml.c5d.large':
        return ProductionVariantInstanceType.mlC5dLarge;
      case 'ml.c5d.xlarge':
        return ProductionVariantInstanceType.mlC5dXlarge;
      case 'ml.c5d.2xlarge':
        return ProductionVariantInstanceType.mlC5d_2xlarge;
      case 'ml.c5d.4xlarge':
        return ProductionVariantInstanceType.mlC5d_4xlarge;
      case 'ml.c5d.9xlarge':
        return ProductionVariantInstanceType.mlC5d_9xlarge;
      case 'ml.c5d.18xlarge':
        return ProductionVariantInstanceType.mlC5d_18xlarge;
      case 'ml.g4dn.xlarge':
        return ProductionVariantInstanceType.mlG4dnXlarge;
      case 'ml.g4dn.2xlarge':
        return ProductionVariantInstanceType.mlG4dn_2xlarge;
      case 'ml.g4dn.4xlarge':
        return ProductionVariantInstanceType.mlG4dn_4xlarge;
      case 'ml.g4dn.8xlarge':
        return ProductionVariantInstanceType.mlG4dn_8xlarge;
      case 'ml.g4dn.12xlarge':
        return ProductionVariantInstanceType.mlG4dn_12xlarge;
      case 'ml.g4dn.16xlarge':
        return ProductionVariantInstanceType.mlG4dn_16xlarge;
      case 'ml.r5.large':
        return ProductionVariantInstanceType.mlR5Large;
      case 'ml.r5.xlarge':
        return ProductionVariantInstanceType.mlR5Xlarge;
      case 'ml.r5.2xlarge':
        return ProductionVariantInstanceType.mlR5_2xlarge;
      case 'ml.r5.4xlarge':
        return ProductionVariantInstanceType.mlR5_4xlarge;
      case 'ml.r5.12xlarge':
        return ProductionVariantInstanceType.mlR5_12xlarge;
      case 'ml.r5.24xlarge':
        return ProductionVariantInstanceType.mlR5_24xlarge;
      case 'ml.r5d.large':
        return ProductionVariantInstanceType.mlR5dLarge;
      case 'ml.r5d.xlarge':
        return ProductionVariantInstanceType.mlR5dXlarge;
      case 'ml.r5d.2xlarge':
        return ProductionVariantInstanceType.mlR5d_2xlarge;
      case 'ml.r5d.4xlarge':
        return ProductionVariantInstanceType.mlR5d_4xlarge;
      case 'ml.r5d.12xlarge':
        return ProductionVariantInstanceType.mlR5d_12xlarge;
      case 'ml.r5d.24xlarge':
        return ProductionVariantInstanceType.mlR5d_24xlarge;
      case 'ml.inf1.xlarge':
        return ProductionVariantInstanceType.mlInf1Xlarge;
      case 'ml.inf1.2xlarge':
        return ProductionVariantInstanceType.mlInf1_2xlarge;
      case 'ml.inf1.6xlarge':
        return ProductionVariantInstanceType.mlInf1_6xlarge;
      case 'ml.inf1.24xlarge':
        return ProductionVariantInstanceType.mlInf1_24xlarge;
    }
    throw Exception('$this is not known in enum ProductionVariantInstanceType');
  }
}

/// Describes weight and capacities for a production variant associated with an
/// endpoint. If you sent a request to the
/// <code>UpdateEndpointWeightsAndCapacities</code> API and the endpoint status
/// is <code>Updating</code>, you get different desired and current values.
class ProductionVariantSummary {
  /// The name of the variant.
  final String variantName;

  /// The number of instances associated with the variant.
  final int? currentInstanceCount;

  /// The weight associated with the variant.
  final double? currentWeight;

  /// An array of <code>DeployedImage</code> objects that specify the Amazon EC2
  /// Container Registry paths of the inference images deployed on instances of
  /// this <code>ProductionVariant</code>.
  final List<DeployedImage>? deployedImages;

  /// The number of instances requested in the
  /// <code>UpdateEndpointWeightsAndCapacities</code> request.
  final int? desiredInstanceCount;

  /// The requested weight, as specified in the
  /// <code>UpdateEndpointWeightsAndCapacities</code> request.
  final double? desiredWeight;

  ProductionVariantSummary({
    required this.variantName,
    this.currentInstanceCount,
    this.currentWeight,
    this.deployedImages,
    this.desiredInstanceCount,
    this.desiredWeight,
  });

  factory ProductionVariantSummary.fromJson(Map<String, dynamic> json) {
    return ProductionVariantSummary(
      variantName: json['VariantName'] as String,
      currentInstanceCount: json['CurrentInstanceCount'] as int?,
      currentWeight: json['CurrentWeight'] as double?,
      deployedImages: (json['DeployedImages'] as List?)
          ?.whereNotNull()
          .map((e) => DeployedImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      desiredInstanceCount: json['DesiredInstanceCount'] as int?,
      desiredWeight: json['DesiredWeight'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final variantName = this.variantName;
    final currentInstanceCount = this.currentInstanceCount;
    final currentWeight = this.currentWeight;
    final deployedImages = this.deployedImages;
    final desiredInstanceCount = this.desiredInstanceCount;
    final desiredWeight = this.desiredWeight;
    return {
      'VariantName': variantName,
      if (currentInstanceCount != null)
        'CurrentInstanceCount': currentInstanceCount,
      if (currentWeight != null) 'CurrentWeight': currentWeight,
      if (deployedImages != null) 'DeployedImages': deployedImages,
      if (desiredInstanceCount != null)
        'DesiredInstanceCount': desiredInstanceCount,
      if (desiredWeight != null) 'DesiredWeight': desiredWeight,
    };
  }
}

/// Configuration information for Debugger system monitoring, framework
/// profiling, and storage paths.
class ProfilerConfig {
  /// Path to Amazon S3 storage location for system and framework metrics.
  final String s3OutputPath;

  /// A time interval for capturing system metrics in milliseconds. Available
  /// values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1
  /// minute) milliseconds. The default value is 500 milliseconds.
  final int? profilingIntervalInMilliseconds;

  /// Configuration information for capturing framework metrics. Available key
  /// strings for different profiling options are
  /// <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>,
  /// and <code>DataLoaderProfilingConfig</code>. The following codes are
  /// configuration structures for the <code>ProfilingParameters</code> parameter.
  /// To learn more about how to configure the <code>ProfilingParameters</code>
  /// parameter, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
  /// the SageMaker and Debugger Configuration API Operations to Create, Update,
  /// and Debug Your Training Job</a>.
  final Map<String, String>? profilingParameters;

  ProfilerConfig({
    required this.s3OutputPath,
    this.profilingIntervalInMilliseconds,
    this.profilingParameters,
  });

  factory ProfilerConfig.fromJson(Map<String, dynamic> json) {
    return ProfilerConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      profilingIntervalInMilliseconds:
          json['ProfilingIntervalInMilliseconds'] as int?,
      profilingParameters:
          (json['ProfilingParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final profilingIntervalInMilliseconds =
        this.profilingIntervalInMilliseconds;
    final profilingParameters = this.profilingParameters;
    return {
      'S3OutputPath': s3OutputPath,
      if (profilingIntervalInMilliseconds != null)
        'ProfilingIntervalInMilliseconds': profilingIntervalInMilliseconds,
      if (profilingParameters != null)
        'ProfilingParameters': profilingParameters,
    };
  }
}

/// Configuration information for updating the Debugger profile parameters,
/// system and framework metrics configurations, and storage paths.
class ProfilerConfigForUpdate {
  /// To disable Debugger monitoring and profiling, set to <code>True</code>.
  final bool? disableProfiler;

  /// A time interval for capturing system metrics in milliseconds. Available
  /// values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1
  /// minute) milliseconds. The default value is 500 milliseconds.
  final int? profilingIntervalInMilliseconds;

  /// Configuration information for capturing framework metrics. Available key
  /// strings for different profiling options are
  /// <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>,
  /// and <code>DataLoaderProfilingConfig</code>. The following codes are
  /// configuration structures for the <code>ProfilingParameters</code> parameter.
  /// To learn more about how to configure the <code>ProfilingParameters</code>
  /// parameter, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
  /// the SageMaker and Debugger Configuration API Operations to Create, Update,
  /// and Debug Your Training Job</a>.
  final Map<String, String>? profilingParameters;

  /// Path to Amazon S3 storage location for system and framework metrics.
  final String? s3OutputPath;

  ProfilerConfigForUpdate({
    this.disableProfiler,
    this.profilingIntervalInMilliseconds,
    this.profilingParameters,
    this.s3OutputPath,
  });

  factory ProfilerConfigForUpdate.fromJson(Map<String, dynamic> json) {
    return ProfilerConfigForUpdate(
      disableProfiler: json['DisableProfiler'] as bool?,
      profilingIntervalInMilliseconds:
          json['ProfilingIntervalInMilliseconds'] as int?,
      profilingParameters:
          (json['ProfilingParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
      s3OutputPath: json['S3OutputPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final disableProfiler = this.disableProfiler;
    final profilingIntervalInMilliseconds =
        this.profilingIntervalInMilliseconds;
    final profilingParameters = this.profilingParameters;
    final s3OutputPath = this.s3OutputPath;
    return {
      if (disableProfiler != null) 'DisableProfiler': disableProfiler,
      if (profilingIntervalInMilliseconds != null)
        'ProfilingIntervalInMilliseconds': profilingIntervalInMilliseconds,
      if (profilingParameters != null)
        'ProfilingParameters': profilingParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

/// Configuration information for profiling rules.
class ProfilerRuleConfiguration {
  /// The name of the rule configuration. It must be unique relative to other rule
  /// configuration names.
  final String ruleConfigurationName;

  /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
  final String ruleEvaluatorImage;

  /// The instance type to deploy a Debugger custom rule for profiling a training
  /// job.
  final ProcessingInstanceType? instanceType;

  /// Path to local storage location for output of rules. Defaults to
  /// <code>/opt/ml/processing/output/rule/</code>.
  final String? localPath;

  /// Runtime configuration for rule container.
  final Map<String, String>? ruleParameters;

  /// Path to Amazon S3 storage location for rules.
  final String? s3OutputPath;

  /// The size, in GB, of the ML storage volume attached to the processing
  /// instance.
  final int? volumeSizeInGB;

  ProfilerRuleConfiguration({
    required this.ruleConfigurationName,
    required this.ruleEvaluatorImage,
    this.instanceType,
    this.localPath,
    this.ruleParameters,
    this.s3OutputPath,
    this.volumeSizeInGB,
  });

  factory ProfilerRuleConfiguration.fromJson(Map<String, dynamic> json) {
    return ProfilerRuleConfiguration(
      ruleConfigurationName: json['RuleConfigurationName'] as String,
      ruleEvaluatorImage: json['RuleEvaluatorImage'] as String,
      instanceType:
          (json['InstanceType'] as String?)?.toProcessingInstanceType(),
      localPath: json['LocalPath'] as String?,
      ruleParameters: (json['RuleParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      s3OutputPath: json['S3OutputPath'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluatorImage = this.ruleEvaluatorImage;
    final instanceType = this.instanceType;
    final localPath = this.localPath;
    final ruleParameters = this.ruleParameters;
    final s3OutputPath = this.s3OutputPath;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      'RuleConfigurationName': ruleConfigurationName,
      'RuleEvaluatorImage': ruleEvaluatorImage,
      if (instanceType != null) 'InstanceType': instanceType.toValue(),
      if (localPath != null) 'LocalPath': localPath,
      if (ruleParameters != null) 'RuleParameters': ruleParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

/// Information about the status of the rule evaluation.
class ProfilerRuleEvaluationStatus {
  /// Timestamp when the rule evaluation status was last modified.
  final DateTime? lastModifiedTime;

  /// The name of the rule configuration.
  final String? ruleConfigurationName;

  /// The Amazon Resource Name (ARN) of the rule evaluation job.
  final String? ruleEvaluationJobArn;

  /// Status of the rule evaluation.
  final RuleEvaluationStatus? ruleEvaluationStatus;

  /// Details from the rule evaluation.
  final String? statusDetails;

  ProfilerRuleEvaluationStatus({
    this.lastModifiedTime,
    this.ruleConfigurationName,
    this.ruleEvaluationJobArn,
    this.ruleEvaluationStatus,
    this.statusDetails,
  });

  factory ProfilerRuleEvaluationStatus.fromJson(Map<String, dynamic> json) {
    return ProfilerRuleEvaluationStatus(
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      ruleConfigurationName: json['RuleConfigurationName'] as String?,
      ruleEvaluationJobArn: json['RuleEvaluationJobArn'] as String?,
      ruleEvaluationStatus:
          (json['RuleEvaluationStatus'] as String?)?.toRuleEvaluationStatus(),
      statusDetails: json['StatusDetails'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final lastModifiedTime = this.lastModifiedTime;
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluationJobArn = this.ruleEvaluationJobArn;
    final ruleEvaluationStatus = this.ruleEvaluationStatus;
    final statusDetails = this.statusDetails;
    return {
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (ruleConfigurationName != null)
        'RuleConfigurationName': ruleConfigurationName,
      if (ruleEvaluationJobArn != null)
        'RuleEvaluationJobArn': ruleEvaluationJobArn,
      if (ruleEvaluationStatus != null)
        'RuleEvaluationStatus': ruleEvaluationStatus.toValue(),
      if (statusDetails != null) 'StatusDetails': statusDetails,
    };
  }
}

enum ProfilingStatus {
  enabled,
  disabled,
}

extension on ProfilingStatus {
  String toValue() {
    switch (this) {
      case ProfilingStatus.enabled:
        return 'Enabled';
      case ProfilingStatus.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  ProfilingStatus toProfilingStatus() {
    switch (this) {
      case 'Enabled':
        return ProfilingStatus.enabled;
      case 'Disabled':
        return ProfilingStatus.disabled;
    }
    throw Exception('$this is not known in enum ProfilingStatus');
  }
}

enum ProjectSortBy {
  name,
  creationTime,
}

extension on ProjectSortBy {
  String toValue() {
    switch (this) {
      case ProjectSortBy.name:
        return 'Name';
      case ProjectSortBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  ProjectSortBy toProjectSortBy() {
    switch (this) {
      case 'Name':
        return ProjectSortBy.name;
      case 'CreationTime':
        return ProjectSortBy.creationTime;
    }
    throw Exception('$this is not known in enum ProjectSortBy');
  }
}

enum ProjectSortOrder {
  ascending,
  descending,
}

extension on ProjectSortOrder {
  String toValue() {
    switch (this) {
      case ProjectSortOrder.ascending:
        return 'Ascending';
      case ProjectSortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  ProjectSortOrder toProjectSortOrder() {
    switch (this) {
      case 'Ascending':
        return ProjectSortOrder.ascending;
      case 'Descending':
        return ProjectSortOrder.descending;
    }
    throw Exception('$this is not known in enum ProjectSortOrder');
  }
}

enum ProjectStatus {
  pending,
  createInProgress,
  createCompleted,
  createFailed,
  deleteInProgress,
  deleteFailed,
  deleteCompleted,
}

extension on ProjectStatus {
  String toValue() {
    switch (this) {
      case ProjectStatus.pending:
        return 'Pending';
      case ProjectStatus.createInProgress:
        return 'CreateInProgress';
      case ProjectStatus.createCompleted:
        return 'CreateCompleted';
      case ProjectStatus.createFailed:
        return 'CreateFailed';
      case ProjectStatus.deleteInProgress:
        return 'DeleteInProgress';
      case ProjectStatus.deleteFailed:
        return 'DeleteFailed';
      case ProjectStatus.deleteCompleted:
        return 'DeleteCompleted';
    }
  }
}

extension on String {
  ProjectStatus toProjectStatus() {
    switch (this) {
      case 'Pending':
        return ProjectStatus.pending;
      case 'CreateInProgress':
        return ProjectStatus.createInProgress;
      case 'CreateCompleted':
        return ProjectStatus.createCompleted;
      case 'CreateFailed':
        return ProjectStatus.createFailed;
      case 'DeleteInProgress':
        return ProjectStatus.deleteInProgress;
      case 'DeleteFailed':
        return ProjectStatus.deleteFailed;
      case 'DeleteCompleted':
        return ProjectStatus.deleteCompleted;
    }
    throw Exception('$this is not known in enum ProjectStatus');
  }
}

/// Information about a project.
class ProjectSummary {
  /// The time that the project was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  /// The ID of the project.
  final String projectId;

  /// The name of the project.
  final String projectName;

  /// The status of the project.
  final ProjectStatus projectStatus;

  /// The description of the project.
  final String? projectDescription;

  ProjectSummary({
    required this.creationTime,
    required this.projectArn,
    required this.projectId,
    required this.projectName,
    required this.projectStatus,
    this.projectDescription,
  });

  factory ProjectSummary.fromJson(Map<String, dynamic> json) {
    return ProjectSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      projectArn: json['ProjectArn'] as String,
      projectId: json['ProjectId'] as String,
      projectName: json['ProjectName'] as String,
      projectStatus: (json['ProjectStatus'] as String).toProjectStatus(),
      projectDescription: json['ProjectDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final projectArn = this.projectArn;
    final projectId = this.projectId;
    final projectName = this.projectName;
    final projectStatus = this.projectStatus;
    final projectDescription = this.projectDescription;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ProjectArn': projectArn,
      'ProjectId': projectId,
      'ProjectName': projectName,
      'ProjectStatus': projectStatus.toValue(),
      if (projectDescription != null) 'ProjectDescription': projectDescription,
    };
  }
}

/// Part of the <code>SuggestionQuery</code> type. Specifies a hint for
/// retrieving property names that begin with the specified text.
class PropertyNameQuery {
  /// Text that begins a property's name.
  final String propertyNameHint;

  PropertyNameQuery({
    required this.propertyNameHint,
  });

  factory PropertyNameQuery.fromJson(Map<String, dynamic> json) {
    return PropertyNameQuery(
      propertyNameHint: json['PropertyNameHint'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final propertyNameHint = this.propertyNameHint;
    return {
      'PropertyNameHint': propertyNameHint,
    };
  }
}

/// A property name returned from a <code>GetSearchSuggestions</code> call that
/// specifies a value in the <code>PropertyNameQuery</code> field.
class PropertyNameSuggestion {
  /// A suggested property name based on what you entered in the search textbox in
  /// the Amazon SageMaker console.
  final String? propertyName;

  PropertyNameSuggestion({
    this.propertyName,
  });

  factory PropertyNameSuggestion.fromJson(Map<String, dynamic> json) {
    return PropertyNameSuggestion(
      propertyName: json['PropertyName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final propertyName = this.propertyName;
    return {
      if (propertyName != null) 'PropertyName': propertyName,
    };
  }
}

/// A key value pair used when you provision a project as a service catalog
/// product. For information, see <a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ProvisioningParameter {
  /// The key that identifies a provisioning parameter.
  final String? key;

  /// The value of the provisioning parameter.
  final String? value;

  ProvisioningParameter({
    this.key,
    this.value,
  });

  factory ProvisioningParameter.fromJson(Map<String, dynamic> json) {
    return ProvisioningParameter(
      key: json['Key'] as String?,
      value: json['Value'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

/// Defines the amount of money paid to an Amazon Mechanical Turk worker for
/// each task performed.
///
/// Use one of the following prices for bounding box tasks. Prices are in US
/// dollars and should be based on the complexity of the task; the longer it
/// takes in your initial testing, the more you should offer.
///
/// <ul>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 1.200
/// </li>
/// </ul>
/// Use one of the following prices for image classification, text
/// classification, and custom tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 0.012
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 1.200
/// </li>
/// </ul>
/// Use one of the following prices for semantic segmentation tasks. Prices are
/// in US dollars.
///
/// <ul>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 1.200
/// </li>
/// </ul>
/// Use one of the following prices for Textract AnalyzeDocument Important Form
/// Key Amazon Augmented AI review tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 2.400
/// </li>
/// <li>
/// 2.280
/// </li>
/// <li>
/// 2.160
/// </li>
/// <li>
/// 2.040
/// </li>
/// <li>
/// 1.920
/// </li>
/// <li>
/// 1.800
/// </li>
/// <li>
/// 1.680
/// </li>
/// <li>
/// 1.560
/// </li>
/// <li>
/// 1.440
/// </li>
/// <li>
/// 1.320
/// </li>
/// <li>
/// 1.200
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.012
/// </li>
/// </ul>
/// Use one of the following prices for Rekognition DetectModerationLabels
/// Amazon Augmented AI review tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 1.200
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.012
/// </li>
/// </ul>
/// Use one of the following prices for Amazon Augmented AI custom human review
/// tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 1.200
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.012
/// </li>
/// </ul>
class PublicWorkforceTaskPrice {
  /// Defines the amount of money paid to an Amazon Mechanical Turk worker in
  /// United States dollars.
  final USD? amountInUsd;

  PublicWorkforceTaskPrice({
    this.amountInUsd,
  });

  factory PublicWorkforceTaskPrice.fromJson(Map<String, dynamic> json) {
    return PublicWorkforceTaskPrice(
      amountInUsd: json['AmountInUsd'] != null
          ? USD.fromJson(json['AmountInUsd'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final amountInUsd = this.amountInUsd;
    return {
      if (amountInUsd != null) 'AmountInUsd': amountInUsd,
    };
  }
}

class PutModelPackageGroupPolicyOutput {
  /// The Amazon Resource Name (ARN) of the model package group.
  final String modelPackageGroupArn;

  PutModelPackageGroupPolicyOutput({
    required this.modelPackageGroupArn,
  });

  factory PutModelPackageGroupPolicyOutput.fromJson(Map<String, dynamic> json) {
    return PutModelPackageGroupPolicyOutput(
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageGroupArn = this.modelPackageGroupArn;
    return {
      'ModelPackageGroupArn': modelPackageGroupArn,
    };
  }
}

enum RecordWrapper {
  none,
  recordIO,
}

extension on RecordWrapper {
  String toValue() {
    switch (this) {
      case RecordWrapper.none:
        return 'None';
      case RecordWrapper.recordIO:
        return 'RecordIO';
    }
  }
}

extension on String {
  RecordWrapper toRecordWrapper() {
    switch (this) {
      case 'None':
        return RecordWrapper.none;
      case 'RecordIO':
        return RecordWrapper.recordIO;
    }
    throw Exception('$this is not known in enum RecordWrapper');
  }
}

/// Configuration for Redshift Dataset Definition input.
class RedshiftDatasetDefinition {
  final String clusterId;

  /// The IAM role attached to your Redshift cluster that Amazon SageMaker uses to
  /// generate datasets.
  final String clusterRoleArn;
  final String database;
  final String dbUser;
  final RedshiftResultFormat outputFormat;

  /// The location in Amazon S3 where the Redshift query results are stored.
  final String outputS3Uri;
  final String queryString;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data from a Redshift execution.
  final String? kmsKeyId;
  final RedshiftResultCompressionType? outputCompression;

  RedshiftDatasetDefinition({
    required this.clusterId,
    required this.clusterRoleArn,
    required this.database,
    required this.dbUser,
    required this.outputFormat,
    required this.outputS3Uri,
    required this.queryString,
    this.kmsKeyId,
    this.outputCompression,
  });

  factory RedshiftDatasetDefinition.fromJson(Map<String, dynamic> json) {
    return RedshiftDatasetDefinition(
      clusterId: json['ClusterId'] as String,
      clusterRoleArn: json['ClusterRoleArn'] as String,
      database: json['Database'] as String,
      dbUser: json['DbUser'] as String,
      outputFormat: (json['OutputFormat'] as String).toRedshiftResultFormat(),
      outputS3Uri: json['OutputS3Uri'] as String,
      queryString: json['QueryString'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      outputCompression: (json['OutputCompression'] as String?)
          ?.toRedshiftResultCompressionType(),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterId = this.clusterId;
    final clusterRoleArn = this.clusterRoleArn;
    final database = this.database;
    final dbUser = this.dbUser;
    final outputFormat = this.outputFormat;
    final outputS3Uri = this.outputS3Uri;
    final queryString = this.queryString;
    final kmsKeyId = this.kmsKeyId;
    final outputCompression = this.outputCompression;
    return {
      'ClusterId': clusterId,
      'ClusterRoleArn': clusterRoleArn,
      'Database': database,
      'DbUser': dbUser,
      'OutputFormat': outputFormat.toValue(),
      'OutputS3Uri': outputS3Uri,
      'QueryString': queryString,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (outputCompression != null)
        'OutputCompression': outputCompression.toValue(),
    };
  }
}

/// The compression used for Redshift query results.
enum RedshiftResultCompressionType {
  none,
  gzip,
  bzip2,
  zstd,
  snappy,
}

extension on RedshiftResultCompressionType {
  String toValue() {
    switch (this) {
      case RedshiftResultCompressionType.none:
        return 'None';
      case RedshiftResultCompressionType.gzip:
        return 'GZIP';
      case RedshiftResultCompressionType.bzip2:
        return 'BZIP2';
      case RedshiftResultCompressionType.zstd:
        return 'ZSTD';
      case RedshiftResultCompressionType.snappy:
        return 'SNAPPY';
    }
  }
}

extension on String {
  RedshiftResultCompressionType toRedshiftResultCompressionType() {
    switch (this) {
      case 'None':
        return RedshiftResultCompressionType.none;
      case 'GZIP':
        return RedshiftResultCompressionType.gzip;
      case 'BZIP2':
        return RedshiftResultCompressionType.bzip2;
      case 'ZSTD':
        return RedshiftResultCompressionType.zstd;
      case 'SNAPPY':
        return RedshiftResultCompressionType.snappy;
    }
    throw Exception('$this is not known in enum RedshiftResultCompressionType');
  }
}

/// The data storage format for Redshift query results.
enum RedshiftResultFormat {
  parquet,
  csv,
}

extension on RedshiftResultFormat {
  String toValue() {
    switch (this) {
      case RedshiftResultFormat.parquet:
        return 'PARQUET';
      case RedshiftResultFormat.csv:
        return 'CSV';
    }
  }
}

extension on String {
  RedshiftResultFormat toRedshiftResultFormat() {
    switch (this) {
      case 'PARQUET':
        return RedshiftResultFormat.parquet;
      case 'CSV':
        return RedshiftResultFormat.csv;
    }
    throw Exception('$this is not known in enum RedshiftResultFormat');
  }
}

/// Metadata for a register model job step.
class RegisterModelStepMetadata {
  /// The Amazon Resource Name (ARN) of the model package.
  final String? arn;

  RegisterModelStepMetadata({
    this.arn,
  });

  factory RegisterModelStepMetadata.fromJson(Map<String, dynamic> json) {
    return RegisterModelStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

class RenderUiTemplateResponse {
  /// A list of one or more <code>RenderingError</code> objects if any were
  /// encountered while rendering the template. If there were no errors, the list
  /// is empty.
  final List<RenderingError> errors;

  /// A Liquid template that renders the HTML for the worker UI.
  final String renderedContent;

  RenderUiTemplateResponse({
    required this.errors,
    required this.renderedContent,
  });

  factory RenderUiTemplateResponse.fromJson(Map<String, dynamic> json) {
    return RenderUiTemplateResponse(
      errors: (json['Errors'] as List)
          .whereNotNull()
          .map((e) => RenderingError.fromJson(e as Map<String, dynamic>))
          .toList(),
      renderedContent: json['RenderedContent'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final errors = this.errors;
    final renderedContent = this.renderedContent;
    return {
      'Errors': errors,
      'RenderedContent': renderedContent,
    };
  }
}

/// Contains input values for a task.
class RenderableTask {
  /// A JSON object that contains values for the variables defined in the
  /// template. It is made available to the template under the substitution
  /// variable <code>task.input</code>. For example, if you define a variable
  /// <code>task.input.text</code> in your template, you can supply the variable
  /// in the JSON object as <code>"text": "sample text"</code>.
  final String input;

  RenderableTask({
    required this.input,
  });

  factory RenderableTask.fromJson(Map<String, dynamic> json) {
    return RenderableTask(
      input: json['Input'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final input = this.input;
    return {
      'Input': input,
    };
  }
}

/// A description of an error that occurred while rendering the template.
class RenderingError {
  /// A unique identifier for a specific class of errors.
  final String code;

  /// A human-readable message describing the error.
  final String message;

  RenderingError({
    required this.code,
    required this.message,
  });

  factory RenderingError.fromJson(Map<String, dynamic> json) {
    return RenderingError(
      code: json['Code'] as String,
      message: json['Message'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      'Code': code,
      'Message': message,
    };
  }
}

enum RepositoryAccessMode {
  platform,
  vpc,
}

extension on RepositoryAccessMode {
  String toValue() {
    switch (this) {
      case RepositoryAccessMode.platform:
        return 'Platform';
      case RepositoryAccessMode.vpc:
        return 'Vpc';
    }
  }
}

extension on String {
  RepositoryAccessMode toRepositoryAccessMode() {
    switch (this) {
      case 'Platform':
        return RepositoryAccessMode.platform;
      case 'Vpc':
        return RepositoryAccessMode.vpc;
    }
    throw Exception('$this is not known in enum RepositoryAccessMode');
  }
}

/// Specifies an authentication configuration for the private docker registry
/// where your model image is hosted. Specify a value for this property only if
/// you specified <code>Vpc</code> as the value for the
/// <code>RepositoryAccessMode</code> field of the <code>ImageConfig</code>
/// object that you passed to a call to <code>CreateModel</code> and the private
/// Docker registry where the model image is hosted requires authentication.
class RepositoryAuthConfig {
  /// The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function
  /// that provides credentials to authenticate to the private Docker registry
  /// where your model image is hosted. For information about how to create an
  /// Amazon Web Services Lambda function, see <a
  /// href="https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html">Create
  /// a Lambda function with the console</a> in the <i>Amazon Web Services Lambda
  /// Developer Guide</i>.
  final String repositoryCredentialsProviderArn;

  RepositoryAuthConfig({
    required this.repositoryCredentialsProviderArn,
  });

  factory RepositoryAuthConfig.fromJson(Map<String, dynamic> json) {
    return RepositoryAuthConfig(
      repositoryCredentialsProviderArn:
          json['RepositoryCredentialsProviderArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryCredentialsProviderArn =
        this.repositoryCredentialsProviderArn;
    return {
      'RepositoryCredentialsProviderArn': repositoryCredentialsProviderArn,
    };
  }
}

/// The resolved attributes.
class ResolvedAttributes {
  final AutoMLJobObjective? autoMLJobObjective;
  final AutoMLJobCompletionCriteria? completionCriteria;

  /// The problem type.
  final ProblemType? problemType;

  ResolvedAttributes({
    this.autoMLJobObjective,
    this.completionCriteria,
    this.problemType,
  });

  factory ResolvedAttributes.fromJson(Map<String, dynamic> json) {
    return ResolvedAttributes(
      autoMLJobObjective: json['AutoMLJobObjective'] != null
          ? AutoMLJobObjective.fromJson(
              json['AutoMLJobObjective'] as Map<String, dynamic>)
          : null,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      problemType: (json['ProblemType'] as String?)?.toProblemType(),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobObjective = this.autoMLJobObjective;
    final completionCriteria = this.completionCriteria;
    final problemType = this.problemType;
    return {
      if (autoMLJobObjective != null) 'AutoMLJobObjective': autoMLJobObjective,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (problemType != null) 'ProblemType': problemType.toValue(),
    };
  }
}

/// Describes the resources, including ML compute instances and ML storage
/// volumes, to use for model training.
class ResourceConfig {
  /// The number of ML compute instances to use. For distributed training, provide
  /// a value greater than 1.
  final int instanceCount;

  /// The ML compute instance type.
  final TrainingInstanceType instanceType;

  /// The size of the ML storage volume that you want to provision.
  ///
  /// ML storage volumes store model artifacts and incremental states. Training
  /// algorithms might also use the ML storage volume for scratch space. If you
  /// want to store the training data in the ML storage volume, choose
  /// <code>File</code> as the <code>TrainingInputMode</code> in the algorithm
  /// specification.
  ///
  /// You must specify sufficient ML storage for your scenario.
  /// <note>
  /// Amazon SageMaker supports only the General Purpose SSD (gp2) ML storage
  /// volume type.
  /// </note> <note>
  /// Certain Nitro-based instances include local storage with a fixed total size,
  /// dependent on the instance type. When using these instances for training,
  /// Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2
  /// storage. You can't request a <code>VolumeSizeInGB</code> greater than the
  /// total size of the local instance storage.
  ///
  /// For a list of instance types that support local instance storage, including
  /// the total size per instance type, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  /// </note>
  final int volumeSizeInGB;

  /// The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data
  /// on the storage volume attached to the ML compute instance(s) that run the
  /// training job.
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>VolumeKmsKeyId</code> when using
  /// an instance type with local storage.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  /// The <code>VolumeKmsKeyId</code> can be in any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// </ul>
  final String? volumeKmsKeyId;

  ResourceConfig({
    required this.instanceCount,
    required this.instanceType,
    required this.volumeSizeInGB,
    this.volumeKmsKeyId,
  });

  factory ResourceConfig.fromJson(Map<String, dynamic> json) {
    return ResourceConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType: (json['InstanceType'] as String).toTrainingInstanceType(),
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeSizeInGB = this.volumeSizeInGB;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.toValue(),
      'VolumeSizeInGB': volumeSizeInGB,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// Specifies the maximum number of training jobs and parallel training jobs
/// that a hyperparameter tuning job can launch.
class ResourceLimits {
  /// The maximum number of training jobs that a hyperparameter tuning job can
  /// launch.
  final int maxNumberOfTrainingJobs;

  /// The maximum number of concurrent training jobs that a hyperparameter tuning
  /// job can launch.
  final int maxParallelTrainingJobs;

  ResourceLimits({
    required this.maxNumberOfTrainingJobs,
    required this.maxParallelTrainingJobs,
  });

  factory ResourceLimits.fromJson(Map<String, dynamic> json) {
    return ResourceLimits(
      maxNumberOfTrainingJobs: json['MaxNumberOfTrainingJobs'] as int,
      maxParallelTrainingJobs: json['MaxParallelTrainingJobs'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxNumberOfTrainingJobs = this.maxNumberOfTrainingJobs;
    final maxParallelTrainingJobs = this.maxParallelTrainingJobs;
    return {
      'MaxNumberOfTrainingJobs': maxNumberOfTrainingJobs,
      'MaxParallelTrainingJobs': maxParallelTrainingJobs,
    };
  }
}

/// Specifies the ARN's of a SageMaker image and SageMaker image version, and
/// the instance type that the version runs on.
class ResourceSpec {
  /// The instance type that the image version runs on.
  final AppInstanceType? instanceType;

  /// The ARN of the SageMaker image that the image version belongs to.
  final String? sageMakerImageArn;

  /// The ARN of the image version created on the instance.
  final String? sageMakerImageVersionArn;

  ResourceSpec({
    this.instanceType,
    this.sageMakerImageArn,
    this.sageMakerImageVersionArn,
  });

  factory ResourceSpec.fromJson(Map<String, dynamic> json) {
    return ResourceSpec(
      instanceType: (json['InstanceType'] as String?)?.toAppInstanceType(),
      sageMakerImageArn: json['SageMakerImageArn'] as String?,
      sageMakerImageVersionArn: json['SageMakerImageVersionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceType = this.instanceType;
    final sageMakerImageArn = this.sageMakerImageArn;
    final sageMakerImageVersionArn = this.sageMakerImageVersionArn;
    return {
      if (instanceType != null) 'InstanceType': instanceType.toValue(),
      if (sageMakerImageArn != null) 'SageMakerImageArn': sageMakerImageArn,
      if (sageMakerImageVersionArn != null)
        'SageMakerImageVersionArn': sageMakerImageVersionArn,
    };
  }
}

enum ResourceType {
  trainingJob,
  experiment,
  experimentTrial,
  experimentTrialComponent,
  endpoint,
  modelPackage,
  modelPackageGroup,
  pipeline,
  pipelineExecution,
  featureGroup,
}

extension on ResourceType {
  String toValue() {
    switch (this) {
      case ResourceType.trainingJob:
        return 'TrainingJob';
      case ResourceType.experiment:
        return 'Experiment';
      case ResourceType.experimentTrial:
        return 'ExperimentTrial';
      case ResourceType.experimentTrialComponent:
        return 'ExperimentTrialComponent';
      case ResourceType.endpoint:
        return 'Endpoint';
      case ResourceType.modelPackage:
        return 'ModelPackage';
      case ResourceType.modelPackageGroup:
        return 'ModelPackageGroup';
      case ResourceType.pipeline:
        return 'Pipeline';
      case ResourceType.pipelineExecution:
        return 'PipelineExecution';
      case ResourceType.featureGroup:
        return 'FeatureGroup';
    }
  }
}

extension on String {
  ResourceType toResourceType() {
    switch (this) {
      case 'TrainingJob':
        return ResourceType.trainingJob;
      case 'Experiment':
        return ResourceType.experiment;
      case 'ExperimentTrial':
        return ResourceType.experimentTrial;
      case 'ExperimentTrialComponent':
        return ResourceType.experimentTrialComponent;
      case 'Endpoint':
        return ResourceType.endpoint;
      case 'ModelPackage':
        return ResourceType.modelPackage;
      case 'ModelPackageGroup':
        return ResourceType.modelPackageGroup;
      case 'Pipeline':
        return ResourceType.pipeline;
      case 'PipelineExecution':
        return ResourceType.pipelineExecution;
      case 'FeatureGroup':
        return ResourceType.featureGroup;
    }
    throw Exception('$this is not known in enum ResourceType');
  }
}

/// The retention policy for data stored on an Amazon Elastic File System (EFS)
/// volume.
class RetentionPolicy {
  /// The default is <code>Retain</code>, which specifies to keep the data stored
  /// on the EFS volume.
  ///
  /// Specify <code>Delete</code> to delete the data stored on the EFS volume.
  final RetentionType? homeEfsFileSystem;

  RetentionPolicy({
    this.homeEfsFileSystem,
  });

  factory RetentionPolicy.fromJson(Map<String, dynamic> json) {
    return RetentionPolicy(
      homeEfsFileSystem:
          (json['HomeEfsFileSystem'] as String?)?.toRetentionType(),
    );
  }

  Map<String, dynamic> toJson() {
    final homeEfsFileSystem = this.homeEfsFileSystem;
    return {
      if (homeEfsFileSystem != null)
        'HomeEfsFileSystem': homeEfsFileSystem.toValue(),
    };
  }
}

enum RetentionType {
  retain,
  delete,
}

extension on RetentionType {
  String toValue() {
    switch (this) {
      case RetentionType.retain:
        return 'Retain';
      case RetentionType.delete:
        return 'Delete';
    }
  }
}

extension on String {
  RetentionType toRetentionType() {
    switch (this) {
      case 'Retain':
        return RetentionType.retain;
      case 'Delete':
        return RetentionType.delete;
    }
    throw Exception('$this is not known in enum RetentionType');
  }
}

/// The retry strategy to use when a training job fails due to an
/// <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as
/// part of the <code>CreateTrainingJob</code> and
/// <code>CreateHyperParameterTuningJob</code> requests. You can add the
/// <code>StoppingCondition</code> parameter to the request to limit the
/// training time for the complete job.
class RetryStrategy {
  /// The number of times to retry the job. When the job is retried, it's
  /// <code>SecondaryStatus</code> is changed to <code>STARTING</code>.
  final int maximumRetryAttempts;

  RetryStrategy({
    required this.maximumRetryAttempts,
  });

  factory RetryStrategy.fromJson(Map<String, dynamic> json) {
    return RetryStrategy(
      maximumRetryAttempts: json['MaximumRetryAttempts'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maximumRetryAttempts = this.maximumRetryAttempts;
    return {
      'MaximumRetryAttempts': maximumRetryAttempts,
    };
  }
}

enum RootAccess {
  enabled,
  disabled,
}

extension on RootAccess {
  String toValue() {
    switch (this) {
      case RootAccess.enabled:
        return 'Enabled';
      case RootAccess.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  RootAccess toRootAccess() {
    switch (this) {
      case 'Enabled':
        return RootAccess.enabled;
      case 'Disabled':
        return RootAccess.disabled;
    }
    throw Exception('$this is not known in enum RootAccess');
  }
}

enum RuleEvaluationStatus {
  inProgress,
  noIssuesFound,
  issuesFound,
  error,
  stopping,
  stopped,
}

extension on RuleEvaluationStatus {
  String toValue() {
    switch (this) {
      case RuleEvaluationStatus.inProgress:
        return 'InProgress';
      case RuleEvaluationStatus.noIssuesFound:
        return 'NoIssuesFound';
      case RuleEvaluationStatus.issuesFound:
        return 'IssuesFound';
      case RuleEvaluationStatus.error:
        return 'Error';
      case RuleEvaluationStatus.stopping:
        return 'Stopping';
      case RuleEvaluationStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  RuleEvaluationStatus toRuleEvaluationStatus() {
    switch (this) {
      case 'InProgress':
        return RuleEvaluationStatus.inProgress;
      case 'NoIssuesFound':
        return RuleEvaluationStatus.noIssuesFound;
      case 'IssuesFound':
        return RuleEvaluationStatus.issuesFound;
      case 'Error':
        return RuleEvaluationStatus.error;
      case 'Stopping':
        return RuleEvaluationStatus.stopping;
      case 'Stopped':
        return RuleEvaluationStatus.stopped;
    }
    throw Exception('$this is not known in enum RuleEvaluationStatus');
  }
}

enum S3DataDistribution {
  fullyReplicated,
  shardedByS3Key,
}

extension on S3DataDistribution {
  String toValue() {
    switch (this) {
      case S3DataDistribution.fullyReplicated:
        return 'FullyReplicated';
      case S3DataDistribution.shardedByS3Key:
        return 'ShardedByS3Key';
    }
  }
}

extension on String {
  S3DataDistribution toS3DataDistribution() {
    switch (this) {
      case 'FullyReplicated':
        return S3DataDistribution.fullyReplicated;
      case 'ShardedByS3Key':
        return S3DataDistribution.shardedByS3Key;
    }
    throw Exception('$this is not known in enum S3DataDistribution');
  }
}

/// Describes the S3 data source.
class S3DataSource {
  /// If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
  /// name prefix. Amazon SageMaker uses all objects that match the specified key
  /// name prefix for model training.
  ///
  /// If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an
  /// object that is a manifest file containing a list of object keys that you
  /// want Amazon SageMaker to use for model training.
  ///
  /// If you choose <code>AugmentedManifestFile</code>, S3Uri identifies an object
  /// that is an augmented manifest file in JSON lines format. This file contains
  /// the data you want to use for model training.
  /// <code>AugmentedManifestFile</code> can only be used if the Channel's input
  /// mode is <code>Pipe</code>.
  final S3DataType s3DataType;

  /// Depending on the value specified for the <code>S3DataType</code>, identifies
  /// either a key name prefix or a manifest. For example:
  ///
  /// <ul>
  /// <li>
  /// A key name prefix might look like this:
  /// <code>s3://bucketname/exampleprefix</code>
  /// </li>
  /// <li>
  /// A manifest might look like this:
  /// <code>s3://bucketname/example.manifest</code>
  ///
  /// A manifest is an S3 object which is a JSON file consisting of an array of
  /// elements. The first element is a prefix which is followed by one or more
  /// suffixes. SageMaker appends the suffix elements to the prefix to get a full
  /// set of <code>S3Uri</code>. Note that the prefix must be a valid non-empty
  /// <code>S3Uri</code> that precludes users from specifying a manifest whose
  /// individual <code>S3Uri</code> is sourced from different S3 buckets.
  ///
  /// The following code example shows a valid manifest format:
  ///
  /// <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
  ///
  /// <code> "relative/path/to/custdata-1",</code>
  ///
  /// <code> "relative/path/custdata-2",</code>
  ///
  /// <code> ...</code>
  ///
  /// <code> "relative/path/custdata-N"</code>
  ///
  /// <code>]</code>
  ///
  /// This JSON is equivalent to the following <code>S3Uri</code> list:
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
  ///
  /// <code>...</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
  ///
  /// The complete set of <code>S3Uri</code> in this manifest is the input data
  /// for the channel for this data source. The object that each
  /// <code>S3Uri</code> points to must be readable by the IAM role that Amazon
  /// SageMaker uses to perform tasks on your behalf.
  /// </li>
  /// </ul>
  final String s3Uri;

  /// A list of one or more attribute names to use that are found in a specified
  /// augmented manifest file.
  final List<String>? attributeNames;

  /// If you want Amazon SageMaker to replicate the entire dataset on each ML
  /// compute instance that is launched for model training, specify
  /// <code>FullyReplicated</code>.
  ///
  /// If you want Amazon SageMaker to replicate a subset of data on each ML
  /// compute instance that is launched for model training, specify
  /// <code>ShardedByS3Key</code>. If there are <i>n</i> ML compute instances
  /// launched for a training job, each instance gets approximately 1/<i>n</i> of
  /// the number of S3 objects. In this case, model training on each machine uses
  /// only the subset of training data.
  ///
  /// Don't choose more ML compute instances for training than available S3
  /// objects. If you do, some nodes won't get any data and you will pay for nodes
  /// that aren't getting any training data. This applies in both File and Pipe
  /// modes. Keep this in mind when developing algorithms.
  ///
  /// In distributed training, where you use multiple ML compute EC2 instances,
  /// you might choose <code>ShardedByS3Key</code>. If the algorithm requires
  /// copying training data to the ML storage volume (when
  /// <code>TrainingInputMode</code> is set to <code>File</code>), this copies
  /// 1/<i>n</i> of the number of objects.
  final S3DataDistribution? s3DataDistributionType;

  S3DataSource({
    required this.s3DataType,
    required this.s3Uri,
    this.attributeNames,
    this.s3DataDistributionType,
  });

  factory S3DataSource.fromJson(Map<String, dynamic> json) {
    return S3DataSource(
      s3DataType: (json['S3DataType'] as String).toS3DataType(),
      s3Uri: json['S3Uri'] as String,
      attributeNames: (json['AttributeNames'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      s3DataDistributionType:
          (json['S3DataDistributionType'] as String?)?.toS3DataDistribution(),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    final attributeNames = this.attributeNames;
    final s3DataDistributionType = this.s3DataDistributionType;
    return {
      'S3DataType': s3DataType.toValue(),
      'S3Uri': s3Uri,
      if (attributeNames != null) 'AttributeNames': attributeNames,
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.toValue(),
    };
  }
}

enum S3DataType {
  manifestFile,
  s3Prefix,
  augmentedManifestFile,
}

extension on S3DataType {
  String toValue() {
    switch (this) {
      case S3DataType.manifestFile:
        return 'ManifestFile';
      case S3DataType.s3Prefix:
        return 'S3Prefix';
      case S3DataType.augmentedManifestFile:
        return 'AugmentedManifestFile';
    }
  }
}

extension on String {
  S3DataType toS3DataType() {
    switch (this) {
      case 'ManifestFile':
        return S3DataType.manifestFile;
      case 'S3Prefix':
        return S3DataType.s3Prefix;
      case 'AugmentedManifestFile':
        return S3DataType.augmentedManifestFile;
    }
    throw Exception('$this is not known in enum S3DataType');
  }
}

/// The Amazon Simple Storage (Amazon S3) location and and security
/// configuration for <code>OfflineStore</code>.
class S3StorageConfig {
  /// The S3 URI, or location in Amazon S3, of <code>OfflineStore</code>.
  ///
  /// S3 URIs have a format similar to the following:
  /// <code>s3://example-bucket/prefix/</code>.
  final String s3Uri;

  /// The Amazon Web Services Key Management Service (KMS) key ID of the key used
  /// to encrypt any objects written into the <code>OfflineStore</code> S3
  /// location.
  ///
  /// The IAM <code>roleARN</code> that is passed as a parameter to
  /// <code>CreateFeatureGroup</code> must have below permissions to the
  /// <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>"kms:GenerateDataKey"</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  /// The S3 path where offline records are written.
  final String? resolvedOutputS3Uri;

  S3StorageConfig({
    required this.s3Uri,
    this.kmsKeyId,
    this.resolvedOutputS3Uri,
  });

  factory S3StorageConfig.fromJson(Map<String, dynamic> json) {
    return S3StorageConfig(
      s3Uri: json['S3Uri'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      resolvedOutputS3Uri: json['ResolvedOutputS3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    final kmsKeyId = this.kmsKeyId;
    final resolvedOutputS3Uri = this.resolvedOutputS3Uri;
    return {
      'S3Uri': s3Uri,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (resolvedOutputS3Uri != null)
        'ResolvedOutputS3Uri': resolvedOutputS3Uri,
    };
  }
}

enum SagemakerServicecatalogStatus {
  enabled,
  disabled,
}

extension on SagemakerServicecatalogStatus {
  String toValue() {
    switch (this) {
      case SagemakerServicecatalogStatus.enabled:
        return 'Enabled';
      case SagemakerServicecatalogStatus.disabled:
        return 'Disabled';
    }
  }
}

extension on String {
  SagemakerServicecatalogStatus toSagemakerServicecatalogStatus() {
    switch (this) {
      case 'Enabled':
        return SagemakerServicecatalogStatus.enabled;
      case 'Disabled':
        return SagemakerServicecatalogStatus.disabled;
    }
    throw Exception('$this is not known in enum SagemakerServicecatalogStatus');
  }
}

/// Configuration details about the monitoring schedule.
class ScheduleConfig {
  /// A cron expression that describes details about the monitoring schedule.
  ///
  /// Currently the only supported cron expressions are:
  ///
  /// <ul>
  /// <li>
  /// If you want to set the job to start every hour, please use the following:
  ///
  /// <code>Hourly: cron(0 * ? * * *)</code>
  /// </li>
  /// <li>
  /// If you want to start the job daily:
  ///
  /// <code>cron(0 [00-23] ? * * *)</code>
  /// </li>
  /// </ul>
  /// For example, the following are valid cron expressions:
  ///
  /// <ul>
  /// <li>
  /// Daily at noon UTC: <code>cron(0 12 ? * * *)</code>
  /// </li>
  /// <li>
  /// Daily at midnight UTC: <code>cron(0 0 ? * * *)</code>
  /// </li>
  /// </ul>
  /// To support running every 6, 12 hours, the following are also supported:
  ///
  /// <code>cron(0 [00-23]/[01-24] ? * * *)</code>
  ///
  /// For example, the following are valid cron expressions:
  ///
  /// <ul>
  /// <li>
  /// Every 12 hours, starting at 5pm UTC: <code>cron(0 17/12 ? * * *)</code>
  /// </li>
  /// <li>
  /// Every two hours starting at midnight: <code>cron(0 0/2 ? * * *)</code>
  /// </li>
  /// </ul> <note>
  /// <ul>
  /// <li>
  /// Even though the cron expression is set to start at 5PM UTC, note that there
  /// could be a delay of 0-20 minutes from the actual requested time to run the
  /// execution.
  /// </li>
  /// <li>
  /// We recommend that if you would like a daily schedule, you do not provide
  /// this parameter. Amazon SageMaker will pick a time for running every day.
  /// </li>
  /// </ul> </note>
  final String scheduleExpression;

  ScheduleConfig({
    required this.scheduleExpression,
  });

  factory ScheduleConfig.fromJson(Map<String, dynamic> json) {
    return ScheduleConfig(
      scheduleExpression: json['ScheduleExpression'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final scheduleExpression = this.scheduleExpression;
    return {
      'ScheduleExpression': scheduleExpression,
    };
  }
}

enum ScheduleStatus {
  pending,
  failed,
  scheduled,
  stopped,
}

extension on ScheduleStatus {
  String toValue() {
    switch (this) {
      case ScheduleStatus.pending:
        return 'Pending';
      case ScheduleStatus.failed:
        return 'Failed';
      case ScheduleStatus.scheduled:
        return 'Scheduled';
      case ScheduleStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  ScheduleStatus toScheduleStatus() {
    switch (this) {
      case 'Pending':
        return ScheduleStatus.pending;
      case 'Failed':
        return ScheduleStatus.failed;
      case 'Scheduled':
        return ScheduleStatus.scheduled;
      case 'Stopped':
        return ScheduleStatus.stopped;
    }
    throw Exception('$this is not known in enum ScheduleStatus');
  }
}

/// A multi-expression that searches for the specified resource or resources in
/// a search. All resource objects that satisfy the expression's condition are
/// included in the search results. You must specify at least one subexpression,
/// filter, or nested filter. A <code>SearchExpression</code> can contain up to
/// twenty elements.
///
/// A <code>SearchExpression</code> contains the following components:
///
/// <ul>
/// <li>
/// A list of <code>Filter</code> objects. Each filter defines a simple Boolean
/// expression comprised of a resource property name, Boolean operator, and
/// value.
/// </li>
/// <li>
/// A list of <code>NestedFilter</code> objects. Each nested filter defines a
/// list of Boolean expressions using a list of resource properties. A nested
/// filter is satisfied if a single object in the list satisfies all Boolean
/// expressions.
/// </li>
/// <li>
/// A list of <code>SearchExpression</code> objects. A search expression object
/// can be nested in a list of search expression objects.
/// </li>
/// <li>
/// A Boolean operator: <code>And</code> or <code>Or</code>.
/// </li>
/// </ul>
class SearchExpression {
  /// A list of filter objects.
  final List<Filter>? filters;

  /// A list of nested filter objects.
  final List<NestedFilters>? nestedFilters;

  /// A Boolean operator used to evaluate the search expression. If you want every
  /// conditional statement in all lists to be satisfied for the entire search
  /// expression to be true, specify <code>And</code>. If only a single
  /// conditional statement needs to be true for the entire search expression to
  /// be true, specify <code>Or</code>. The default value is <code>And</code>.
  final BooleanOperator? operator;

  /// A list of search expression objects.
  final List<SearchExpression>? subExpressions;

  SearchExpression({
    this.filters,
    this.nestedFilters,
    this.operator,
    this.subExpressions,
  });

  factory SearchExpression.fromJson(Map<String, dynamic> json) {
    return SearchExpression(
      filters: (json['Filters'] as List?)
          ?.whereNotNull()
          .map((e) => Filter.fromJson(e as Map<String, dynamic>))
          .toList(),
      nestedFilters: (json['NestedFilters'] as List?)
          ?.whereNotNull()
          .map((e) => NestedFilters.fromJson(e as Map<String, dynamic>))
          .toList(),
      operator: (json['Operator'] as String?)?.toBooleanOperator(),
      subExpressions: (json['SubExpressions'] as List?)
          ?.whereNotNull()
          .map((e) => SearchExpression.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final filters = this.filters;
    final nestedFilters = this.nestedFilters;
    final operator = this.operator;
    final subExpressions = this.subExpressions;
    return {
      if (filters != null) 'Filters': filters,
      if (nestedFilters != null) 'NestedFilters': nestedFilters,
      if (operator != null) 'Operator': operator.toValue(),
      if (subExpressions != null) 'SubExpressions': subExpressions,
    };
  }
}

/// A single resource returned as part of the <a>Search</a> API response.
class SearchRecord {
  final Endpoint? endpoint;

  /// The properties of an experiment.
  final Experiment? experiment;
  final FeatureGroup? featureGroup;
  final ModelPackage? modelPackage;
  final ModelPackageGroup? modelPackageGroup;
  final Pipeline? pipeline;
  final PipelineExecution? pipelineExecution;

  /// The properties of a training job.
  final TrainingJob? trainingJob;

  /// The properties of a trial.
  final Trial? trial;

  /// The properties of a trial component.
  final TrialComponent? trialComponent;

  SearchRecord({
    this.endpoint,
    this.experiment,
    this.featureGroup,
    this.modelPackage,
    this.modelPackageGroup,
    this.pipeline,
    this.pipelineExecution,
    this.trainingJob,
    this.trial,
    this.trialComponent,
  });

  factory SearchRecord.fromJson(Map<String, dynamic> json) {
    return SearchRecord(
      endpoint: json['Endpoint'] != null
          ? Endpoint.fromJson(json['Endpoint'] as Map<String, dynamic>)
          : null,
      experiment: json['Experiment'] != null
          ? Experiment.fromJson(json['Experiment'] as Map<String, dynamic>)
          : null,
      featureGroup: json['FeatureGroup'] != null
          ? FeatureGroup.fromJson(json['FeatureGroup'] as Map<String, dynamic>)
          : null,
      modelPackage: json['ModelPackage'] != null
          ? ModelPackage.fromJson(json['ModelPackage'] as Map<String, dynamic>)
          : null,
      modelPackageGroup: json['ModelPackageGroup'] != null
          ? ModelPackageGroup.fromJson(
              json['ModelPackageGroup'] as Map<String, dynamic>)
          : null,
      pipeline: json['Pipeline'] != null
          ? Pipeline.fromJson(json['Pipeline'] as Map<String, dynamic>)
          : null,
      pipelineExecution: json['PipelineExecution'] != null
          ? PipelineExecution.fromJson(
              json['PipelineExecution'] as Map<String, dynamic>)
          : null,
      trainingJob: json['TrainingJob'] != null
          ? TrainingJob.fromJson(json['TrainingJob'] as Map<String, dynamic>)
          : null,
      trial: json['Trial'] != null
          ? Trial.fromJson(json['Trial'] as Map<String, dynamic>)
          : null,
      trialComponent: json['TrialComponent'] != null
          ? TrialComponent.fromJson(
              json['TrialComponent'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final endpoint = this.endpoint;
    final experiment = this.experiment;
    final featureGroup = this.featureGroup;
    final modelPackage = this.modelPackage;
    final modelPackageGroup = this.modelPackageGroup;
    final pipeline = this.pipeline;
    final pipelineExecution = this.pipelineExecution;
    final trainingJob = this.trainingJob;
    final trial = this.trial;
    final trialComponent = this.trialComponent;
    return {
      if (endpoint != null) 'Endpoint': endpoint,
      if (experiment != null) 'Experiment': experiment,
      if (featureGroup != null) 'FeatureGroup': featureGroup,
      if (modelPackage != null) 'ModelPackage': modelPackage,
      if (modelPackageGroup != null) 'ModelPackageGroup': modelPackageGroup,
      if (pipeline != null) 'Pipeline': pipeline,
      if (pipelineExecution != null) 'PipelineExecution': pipelineExecution,
      if (trainingJob != null) 'TrainingJob': trainingJob,
      if (trial != null) 'Trial': trial,
      if (trialComponent != null) 'TrialComponent': trialComponent,
    };
  }
}

class SearchResponse {
  /// If the result of the previous <code>Search</code> request was truncated, the
  /// response includes a NextToken. To retrieve the next set of results, use the
  /// token in the next request.
  final String? nextToken;

  /// A list of <code>SearchRecord</code> objects.
  final List<SearchRecord>? results;

  SearchResponse({
    this.nextToken,
    this.results,
  });

  factory SearchResponse.fromJson(Map<String, dynamic> json) {
    return SearchResponse(
      nextToken: json['NextToken'] as String?,
      results: (json['Results'] as List?)
          ?.whereNotNull()
          .map((e) => SearchRecord.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final results = this.results;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (results != null) 'Results': results,
    };
  }
}

enum SearchSortOrder {
  ascending,
  descending,
}

extension on SearchSortOrder {
  String toValue() {
    switch (this) {
      case SearchSortOrder.ascending:
        return 'Ascending';
      case SearchSortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  SearchSortOrder toSearchSortOrder() {
    switch (this) {
      case 'Ascending':
        return SearchSortOrder.ascending;
      case 'Descending':
        return SearchSortOrder.descending;
    }
    throw Exception('$this is not known in enum SearchSortOrder');
  }
}

enum SecondaryStatus {
  starting,
  launchingMLInstances,
  preparingTrainingStack,
  downloading,
  downloadingTrainingImage,
  training,
  uploading,
  stopping,
  stopped,
  maxRuntimeExceeded,
  completed,
  failed,
  interrupted,
  maxWaitTimeExceeded,
  updating,
  restarting,
}

extension on SecondaryStatus {
  String toValue() {
    switch (this) {
      case SecondaryStatus.starting:
        return 'Starting';
      case SecondaryStatus.launchingMLInstances:
        return 'LaunchingMLInstances';
      case SecondaryStatus.preparingTrainingStack:
        return 'PreparingTrainingStack';
      case SecondaryStatus.downloading:
        return 'Downloading';
      case SecondaryStatus.downloadingTrainingImage:
        return 'DownloadingTrainingImage';
      case SecondaryStatus.training:
        return 'Training';
      case SecondaryStatus.uploading:
        return 'Uploading';
      case SecondaryStatus.stopping:
        return 'Stopping';
      case SecondaryStatus.stopped:
        return 'Stopped';
      case SecondaryStatus.maxRuntimeExceeded:
        return 'MaxRuntimeExceeded';
      case SecondaryStatus.completed:
        return 'Completed';
      case SecondaryStatus.failed:
        return 'Failed';
      case SecondaryStatus.interrupted:
        return 'Interrupted';
      case SecondaryStatus.maxWaitTimeExceeded:
        return 'MaxWaitTimeExceeded';
      case SecondaryStatus.updating:
        return 'Updating';
      case SecondaryStatus.restarting:
        return 'Restarting';
    }
  }
}

extension on String {
  SecondaryStatus toSecondaryStatus() {
    switch (this) {
      case 'Starting':
        return SecondaryStatus.starting;
      case 'LaunchingMLInstances':
        return SecondaryStatus.launchingMLInstances;
      case 'PreparingTrainingStack':
        return SecondaryStatus.preparingTrainingStack;
      case 'Downloading':
        return SecondaryStatus.downloading;
      case 'DownloadingTrainingImage':
        return SecondaryStatus.downloadingTrainingImage;
      case 'Training':
        return SecondaryStatus.training;
      case 'Uploading':
        return SecondaryStatus.uploading;
      case 'Stopping':
        return SecondaryStatus.stopping;
      case 'Stopped':
        return SecondaryStatus.stopped;
      case 'MaxRuntimeExceeded':
        return SecondaryStatus.maxRuntimeExceeded;
      case 'Completed':
        return SecondaryStatus.completed;
      case 'Failed':
        return SecondaryStatus.failed;
      case 'Interrupted':
        return SecondaryStatus.interrupted;
      case 'MaxWaitTimeExceeded':
        return SecondaryStatus.maxWaitTimeExceeded;
      case 'Updating':
        return SecondaryStatus.updating;
      case 'Restarting':
        return SecondaryStatus.restarting;
    }
    throw Exception('$this is not known in enum SecondaryStatus');
  }
}

/// An array element of
/// <a>DescribeTrainingJobResponse$SecondaryStatusTransitions</a>. It provides
/// additional details about a status that the training job has transitioned
/// through. A training job can be in one of several states, for example,
/// starting, downloading, training, or uploading. Within each state, there are
/// a number of intermediate states. For example, within the starting state,
/// Amazon SageMaker could be starting the training job or launching the ML
/// instances. These transitional states are referred to as the job's secondary
/// status.
/// <p/>
class SecondaryStatusTransition {
  /// A timestamp that shows when the training job transitioned to the current
  /// secondary status state.
  final DateTime startTime;

  /// Contains a secondary status information from a training job.
  ///
  /// Status might be one of the following secondary statuses:
  /// <dl> <dt>InProgress</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Starting</code> - Starting the training job.
  /// </li>
  /// <li>
  /// <code>Downloading</code> - An optional stage for algorithms that support
  /// <code>File</code> training input mode. It indicates that data is being
  /// downloaded to the ML storage volumes.
  /// </li>
  /// <li>
  /// <code>Training</code> - Training is in progress.
  /// </li>
  /// <li>
  /// <code>Uploading</code> - Training is complete and the model artifacts are
  /// being uploaded to the S3 location.
  /// </li>
  /// </ul> </dd> <dt>Completed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// </ul> </dd> <dt>Failed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Failed</code> - The training job has failed. The reason for the
  /// failure is returned in the <code>FailureReason</code> field of
  /// <code>DescribeTrainingJobResponse</code>.
  /// </li>
  /// </ul> </dd> <dt>Stopped</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>MaxRuntimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed runtime.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul> </dd> <dt>Stopping</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Stopping</code> - Stopping the training job.
  /// </li>
  /// </ul> </dd> </dl>
  /// We no longer support the following secondary statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>LaunchingMLInstances</code>
  /// </li>
  /// <li>
  /// <code>PreparingTrainingStack</code>
  /// </li>
  /// <li>
  /// <code>DownloadingTrainingImage</code>
  /// </li>
  /// </ul>
  final SecondaryStatus status;

  /// A timestamp that shows when the training job transitioned out of this
  /// secondary status state into another secondary status state or when the
  /// training job has ended.
  final DateTime? endTime;

  /// A detailed description of the progress within a secondary status.
  ///
  /// Amazon SageMaker provides secondary statuses and status messages that apply
  /// to each of them:
  /// <dl> <dt>Starting</dt> <dd>
  /// <ul>
  /// <li>
  /// Starting the training job.
  /// </li>
  /// <li>
  /// Launching requested ML instances.
  /// </li>
  /// <li>
  /// Insufficient capacity error from EC2 while launching instances, retrying!
  /// </li>
  /// <li>
  /// Launched instance was unhealthy, replacing it!
  /// </li>
  /// <li>
  /// Preparing the instances for training.
  /// </li>
  /// </ul> </dd> <dt>Training</dt> <dd>
  /// <ul>
  /// <li>
  /// Downloading the training image.
  /// </li>
  /// <li>
  /// Training image download completed. Training in progress.
  /// </li>
  /// </ul> </dd> </dl> <important>
  /// Status messages are subject to change. Therefore, we recommend not including
  /// them in code that programmatically initiates actions. For examples, don't
  /// use status messages in if statements.
  /// </important>
  /// To have an overview of your training job's progress, view
  /// <code>TrainingJobStatus</code> and <code>SecondaryStatus</code> in
  /// <a>DescribeTrainingJob</a>, and <code>StatusMessage</code> together. For
  /// example, at the start of a training job, you might see the following:
  ///
  /// <ul>
  /// <li>
  /// <code>TrainingJobStatus</code> - InProgress
  /// </li>
  /// <li>
  /// <code>SecondaryStatus</code> - Training
  /// </li>
  /// <li>
  /// <code>StatusMessage</code> - Downloading the training image
  /// </li>
  /// </ul>
  final String? statusMessage;

  SecondaryStatusTransition({
    required this.startTime,
    required this.status,
    this.endTime,
    this.statusMessage,
  });

  factory SecondaryStatusTransition.fromJson(Map<String, dynamic> json) {
    return SecondaryStatusTransition(
      startTime: nonNullableTimeStampFromJson(json['StartTime'] as Object),
      status: (json['Status'] as String).toSecondaryStatus(),
      endTime: timeStampFromJson(json['EndTime']),
      statusMessage: json['StatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final startTime = this.startTime;
    final status = this.status;
    final endTime = this.endTime;
    final statusMessage = this.statusMessage;
    return {
      'StartTime': unixTimestampToJson(startTime),
      'Status': status.toValue(),
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (statusMessage != null) 'StatusMessage': statusMessage,
    };
  }
}

class SendPipelineExecutionStepFailureResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  SendPipelineExecutionStepFailureResponse({
    this.pipelineExecutionArn,
  });

  factory SendPipelineExecutionStepFailureResponse.fromJson(
      Map<String, dynamic> json) {
    return SendPipelineExecutionStepFailureResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

class SendPipelineExecutionStepSuccessResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  SendPipelineExecutionStepSuccessResponse({
    this.pipelineExecutionArn,
  });

  factory SendPipelineExecutionStepSuccessResponse.fromJson(
      Map<String, dynamic> json) {
    return SendPipelineExecutionStepSuccessResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

/// Details of a provisioned service catalog product. For information about
/// service catalog, see <a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ServiceCatalogProvisionedProductDetails {
  /// The ID of the provisioned product.
  final String? provisionedProductId;

  /// The current status of the product.
  ///
  /// <ul>
  /// <li>
  /// <code>AVAILABLE</code> - Stable state, ready to perform any operation. The
  /// most recent operation succeeded and completed.
  /// </li>
  /// <li>
  /// <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not
  /// have valid results. Wait for an AVAILABLE status before performing
  /// operations.
  /// </li>
  /// <li>
  /// <code>TAINTED</code> - Stable state, ready to perform any operation. The
  /// stack has completed the requested operation but is not exactly what was
  /// requested. For example, a request to update to a new version failed and the
  /// stack rolled back to the current version.
  /// </li>
  /// <li>
  /// <code>ERROR</code> - An unexpected error occurred. The provisioned product
  /// exists but the stack is not running. For example, CloudFormation received a
  /// parameter value that was not valid and could not launch the stack.
  /// </li>
  /// <li>
  /// <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were
  /// performed to provision a new product, but resources have not yet been
  /// created. After reviewing the list of resources to be created, execute the
  /// plan. Wait for an AVAILABLE status before performing operations.
  /// </li>
  /// </ul>
  final String? provisionedProductStatusMessage;

  ServiceCatalogProvisionedProductDetails({
    this.provisionedProductId,
    this.provisionedProductStatusMessage,
  });

  factory ServiceCatalogProvisionedProductDetails.fromJson(
      Map<String, dynamic> json) {
    return ServiceCatalogProvisionedProductDetails(
      provisionedProductId: json['ProvisionedProductId'] as String?,
      provisionedProductStatusMessage:
          json['ProvisionedProductStatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final provisionedProductId = this.provisionedProductId;
    final provisionedProductStatusMessage =
        this.provisionedProductStatusMessage;
    return {
      if (provisionedProductId != null)
        'ProvisionedProductId': provisionedProductId,
      if (provisionedProductStatusMessage != null)
        'ProvisionedProductStatusMessage': provisionedProductStatusMessage,
    };
  }
}

/// Details that you specify to provision a service catalog product. For
/// information about service catalog, see .<a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ServiceCatalogProvisioningDetails {
  /// The ID of the product to provision.
  final String productId;

  /// The ID of the provisioning artifact.
  final String provisioningArtifactId;

  /// The path identifier of the product. This value is optional if the product
  /// has a default path, and required if the product has more than one path.
  final String? pathId;

  /// A list of key value pairs that you specify when you provision a product.
  final List<ProvisioningParameter>? provisioningParameters;

  ServiceCatalogProvisioningDetails({
    required this.productId,
    required this.provisioningArtifactId,
    this.pathId,
    this.provisioningParameters,
  });

  factory ServiceCatalogProvisioningDetails.fromJson(
      Map<String, dynamic> json) {
    return ServiceCatalogProvisioningDetails(
      productId: json['ProductId'] as String,
      provisioningArtifactId: json['ProvisioningArtifactId'] as String,
      pathId: json['PathId'] as String?,
      provisioningParameters: (json['ProvisioningParameters'] as List?)
          ?.whereNotNull()
          .map((e) => ProvisioningParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final productId = this.productId;
    final provisioningArtifactId = this.provisioningArtifactId;
    final pathId = this.pathId;
    final provisioningParameters = this.provisioningParameters;
    return {
      'ProductId': productId,
      'ProvisioningArtifactId': provisioningArtifactId,
      if (pathId != null) 'PathId': pathId,
      if (provisioningParameters != null)
        'ProvisioningParameters': provisioningParameters,
    };
  }
}

/// Specifies options for sharing SageMaker Studio notebooks. These settings are
/// specified as part of <code>DefaultUserSettings</code> when the
/// <code>CreateDomain</code> API is called, and as part of
/// <code>UserSettings</code> when the <code>CreateUserProfile</code> API is
/// called. When <code>SharingSettings</code> is not specified, notebook sharing
/// isn't allowed.
class SharingSettings {
  /// Whether to include the notebook cell output when sharing the notebook. The
  /// default is <code>Disabled</code>.
  final NotebookOutputOption? notebookOutputOption;

  /// When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon
  /// Web Services Key Management Service (KMS) encryption key ID used to encrypt
  /// the notebook cell output in the Amazon S3 bucket.
  final String? s3KmsKeyId;

  /// When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon
  /// S3 bucket used to store the shared notebook snapshots.
  final String? s3OutputPath;

  SharingSettings({
    this.notebookOutputOption,
    this.s3KmsKeyId,
    this.s3OutputPath,
  });

  factory SharingSettings.fromJson(Map<String, dynamic> json) {
    return SharingSettings(
      notebookOutputOption:
          (json['NotebookOutputOption'] as String?)?.toNotebookOutputOption(),
      s3KmsKeyId: json['S3KmsKeyId'] as String?,
      s3OutputPath: json['S3OutputPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookOutputOption = this.notebookOutputOption;
    final s3KmsKeyId = this.s3KmsKeyId;
    final s3OutputPath = this.s3OutputPath;
    return {
      if (notebookOutputOption != null)
        'NotebookOutputOption': notebookOutputOption.toValue(),
      if (s3KmsKeyId != null) 'S3KmsKeyId': s3KmsKeyId,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

/// A configuration for a shuffle option for input data in a channel. If you use
/// <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key
/// prefix matches are shuffled. If you use <code>ManifestFile</code>, the order
/// of the S3 object references in the <code>ManifestFile</code> is shuffled. If
/// you use <code>AugmentedManifestFile</code>, the order of the JSON lines in
/// the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is
/// determined using the <code>Seed</code> value.
///
/// For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling
/// is done at the start of every epoch. With large datasets, this ensures that
/// the order of the training data is different for each epoch, and it helps
/// reduce bias and possible overfitting. In a multi-node training job when
/// <code>ShuffleConfig</code> is combined with
/// <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data
/// is shuffled across nodes so that the content sent to a particular node on
/// the first epoch might be sent to a different node on the second epoch.
class ShuffleConfig {
  /// Determines the shuffling order in <code>ShuffleConfig</code> value.
  final int seed;

  ShuffleConfig({
    required this.seed,
  });

  factory ShuffleConfig.fromJson(Map<String, dynamic> json) {
    return ShuffleConfig(
      seed: json['Seed'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final seed = this.seed;
    return {
      'Seed': seed,
    };
  }
}

enum SortActionsBy {
  name,
  creationTime,
}

extension on SortActionsBy {
  String toValue() {
    switch (this) {
      case SortActionsBy.name:
        return 'Name';
      case SortActionsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortActionsBy toSortActionsBy() {
    switch (this) {
      case 'Name':
        return SortActionsBy.name;
      case 'CreationTime':
        return SortActionsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortActionsBy');
  }
}

enum SortArtifactsBy {
  creationTime,
}

extension on SortArtifactsBy {
  String toValue() {
    switch (this) {
      case SortArtifactsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortArtifactsBy toSortArtifactsBy() {
    switch (this) {
      case 'CreationTime':
        return SortArtifactsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortArtifactsBy');
  }
}

enum SortAssociationsBy {
  sourceArn,
  destinationArn,
  sourceType,
  destinationType,
  creationTime,
}

extension on SortAssociationsBy {
  String toValue() {
    switch (this) {
      case SortAssociationsBy.sourceArn:
        return 'SourceArn';
      case SortAssociationsBy.destinationArn:
        return 'DestinationArn';
      case SortAssociationsBy.sourceType:
        return 'SourceType';
      case SortAssociationsBy.destinationType:
        return 'DestinationType';
      case SortAssociationsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortAssociationsBy toSortAssociationsBy() {
    switch (this) {
      case 'SourceArn':
        return SortAssociationsBy.sourceArn;
      case 'DestinationArn':
        return SortAssociationsBy.destinationArn;
      case 'SourceType':
        return SortAssociationsBy.sourceType;
      case 'DestinationType':
        return SortAssociationsBy.destinationType;
      case 'CreationTime':
        return SortAssociationsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortAssociationsBy');
  }
}

enum SortBy {
  name,
  creationTime,
  status,
}

extension on SortBy {
  String toValue() {
    switch (this) {
      case SortBy.name:
        return 'Name';
      case SortBy.creationTime:
        return 'CreationTime';
      case SortBy.status:
        return 'Status';
    }
  }
}

extension on String {
  SortBy toSortBy() {
    switch (this) {
      case 'Name':
        return SortBy.name;
      case 'CreationTime':
        return SortBy.creationTime;
      case 'Status':
        return SortBy.status;
    }
    throw Exception('$this is not known in enum SortBy');
  }
}

enum SortContextsBy {
  name,
  creationTime,
}

extension on SortContextsBy {
  String toValue() {
    switch (this) {
      case SortContextsBy.name:
        return 'Name';
      case SortContextsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortContextsBy toSortContextsBy() {
    switch (this) {
      case 'Name':
        return SortContextsBy.name;
      case 'CreationTime':
        return SortContextsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortContextsBy');
  }
}

enum SortExperimentsBy {
  name,
  creationTime,
}

extension on SortExperimentsBy {
  String toValue() {
    switch (this) {
      case SortExperimentsBy.name:
        return 'Name';
      case SortExperimentsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortExperimentsBy toSortExperimentsBy() {
    switch (this) {
      case 'Name':
        return SortExperimentsBy.name;
      case 'CreationTime':
        return SortExperimentsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortExperimentsBy');
  }
}

enum SortOrder {
  ascending,
  descending,
}

extension on SortOrder {
  String toValue() {
    switch (this) {
      case SortOrder.ascending:
        return 'Ascending';
      case SortOrder.descending:
        return 'Descending';
    }
  }
}

extension on String {
  SortOrder toSortOrder() {
    switch (this) {
      case 'Ascending':
        return SortOrder.ascending;
      case 'Descending':
        return SortOrder.descending;
    }
    throw Exception('$this is not known in enum SortOrder');
  }
}

enum SortPipelineExecutionsBy {
  creationTime,
  pipelineExecutionArn,
}

extension on SortPipelineExecutionsBy {
  String toValue() {
    switch (this) {
      case SortPipelineExecutionsBy.creationTime:
        return 'CreationTime';
      case SortPipelineExecutionsBy.pipelineExecutionArn:
        return 'PipelineExecutionArn';
    }
  }
}

extension on String {
  SortPipelineExecutionsBy toSortPipelineExecutionsBy() {
    switch (this) {
      case 'CreationTime':
        return SortPipelineExecutionsBy.creationTime;
      case 'PipelineExecutionArn':
        return SortPipelineExecutionsBy.pipelineExecutionArn;
    }
    throw Exception('$this is not known in enum SortPipelineExecutionsBy');
  }
}

enum SortPipelinesBy {
  name,
  creationTime,
}

extension on SortPipelinesBy {
  String toValue() {
    switch (this) {
      case SortPipelinesBy.name:
        return 'Name';
      case SortPipelinesBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortPipelinesBy toSortPipelinesBy() {
    switch (this) {
      case 'Name':
        return SortPipelinesBy.name;
      case 'CreationTime':
        return SortPipelinesBy.creationTime;
    }
    throw Exception('$this is not known in enum SortPipelinesBy');
  }
}

enum SortTrialComponentsBy {
  name,
  creationTime,
}

extension on SortTrialComponentsBy {
  String toValue() {
    switch (this) {
      case SortTrialComponentsBy.name:
        return 'Name';
      case SortTrialComponentsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortTrialComponentsBy toSortTrialComponentsBy() {
    switch (this) {
      case 'Name':
        return SortTrialComponentsBy.name;
      case 'CreationTime':
        return SortTrialComponentsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortTrialComponentsBy');
  }
}

enum SortTrialsBy {
  name,
  creationTime,
}

extension on SortTrialsBy {
  String toValue() {
    switch (this) {
      case SortTrialsBy.name:
        return 'Name';
      case SortTrialsBy.creationTime:
        return 'CreationTime';
    }
  }
}

extension on String {
  SortTrialsBy toSortTrialsBy() {
    switch (this) {
      case 'Name':
        return SortTrialsBy.name;
      case 'CreationTime':
        return SortTrialsBy.creationTime;
    }
    throw Exception('$this is not known in enum SortTrialsBy');
  }
}

/// Specifies an algorithm that was used to create the model package. The
/// algorithm must be either an algorithm resource in your Amazon SageMaker
/// account or an algorithm in Amazon Web Services Marketplace that you are
/// subscribed to.
class SourceAlgorithm {
  /// The name of an algorithm that was used to create the model package. The
  /// algorithm must be either an algorithm resource in your Amazon SageMaker
  /// account or an algorithm in Amazon Web Services Marketplace that you are
  /// subscribed to.
  final String algorithmName;

  /// The Amazon S3 path where the model artifacts, which result from model
  /// training, are stored. This path must point to a single <code>gzip</code>
  /// compressed tar archive (<code>.tar.gz</code> suffix).
  /// <note>
  /// The model artifacts must be in an S3 bucket that is in the same region as
  /// the algorithm.
  /// </note>
  final String? modelDataUrl;

  SourceAlgorithm({
    required this.algorithmName,
    this.modelDataUrl,
  });

  factory SourceAlgorithm.fromJson(Map<String, dynamic> json) {
    return SourceAlgorithm(
      algorithmName: json['AlgorithmName'] as String,
      modelDataUrl: json['ModelDataUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmName = this.algorithmName;
    final modelDataUrl = this.modelDataUrl;
    return {
      'AlgorithmName': algorithmName,
      if (modelDataUrl != null) 'ModelDataUrl': modelDataUrl,
    };
  }
}

/// A list of algorithms that were used to create a model package.
class SourceAlgorithmSpecification {
  /// A list of the algorithms that were used to create a model package.
  final List<SourceAlgorithm> sourceAlgorithms;

  SourceAlgorithmSpecification({
    required this.sourceAlgorithms,
  });

  factory SourceAlgorithmSpecification.fromJson(Map<String, dynamic> json) {
    return SourceAlgorithmSpecification(
      sourceAlgorithms: (json['SourceAlgorithms'] as List)
          .whereNotNull()
          .map((e) => SourceAlgorithm.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final sourceAlgorithms = this.sourceAlgorithms;
    return {
      'SourceAlgorithms': sourceAlgorithms,
    };
  }
}

/// A list of IP address ranges (<a
/// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>).
/// Used to create an allow list of IP addresses for a private workforce.
/// Workers will only be able to login to their worker portal from an IP address
/// within this range. By default, a workforce isn't restricted to specific IP
/// addresses.
class SourceIpConfig {
  /// A list of one to ten <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Classless
  /// Inter-Domain Routing</a> (CIDR) values.
  ///
  /// Maximum: Ten CIDR values
  /// <note>
  /// The following Length Constraints apply to individual CIDR values in the CIDR
  /// value list.
  /// </note>
  final List<String> cidrs;

  SourceIpConfig({
    required this.cidrs,
  });

  factory SourceIpConfig.fromJson(Map<String, dynamic> json) {
    return SourceIpConfig(
      cidrs: (json['Cidrs'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final cidrs = this.cidrs;
    return {
      'Cidrs': cidrs,
    };
  }
}

enum SplitType {
  none,
  line,
  recordIO,
  tFRecord,
}

extension on SplitType {
  String toValue() {
    switch (this) {
      case SplitType.none:
        return 'None';
      case SplitType.line:
        return 'Line';
      case SplitType.recordIO:
        return 'RecordIO';
      case SplitType.tFRecord:
        return 'TFRecord';
    }
  }
}

extension on String {
  SplitType toSplitType() {
    switch (this) {
      case 'None':
        return SplitType.none;
      case 'Line':
        return SplitType.line;
      case 'RecordIO':
        return SplitType.recordIO;
      case 'TFRecord':
        return SplitType.tFRecord;
    }
    throw Exception('$this is not known in enum SplitType');
  }
}

class StartPipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  StartPipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory StartPipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return StartPipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

enum StepStatus {
  starting,
  executing,
  stopping,
  stopped,
  failed,
  succeeded,
}

extension on StepStatus {
  String toValue() {
    switch (this) {
      case StepStatus.starting:
        return 'Starting';
      case StepStatus.executing:
        return 'Executing';
      case StepStatus.stopping:
        return 'Stopping';
      case StepStatus.stopped:
        return 'Stopped';
      case StepStatus.failed:
        return 'Failed';
      case StepStatus.succeeded:
        return 'Succeeded';
    }
  }
}

extension on String {
  StepStatus toStepStatus() {
    switch (this) {
      case 'Starting':
        return StepStatus.starting;
      case 'Executing':
        return StepStatus.executing;
      case 'Stopping':
        return StepStatus.stopping;
      case 'Stopped':
        return StepStatus.stopped;
      case 'Failed':
        return StepStatus.failed;
      case 'Succeeded':
        return StepStatus.succeeded;
    }
    throw Exception('$this is not known in enum StepStatus');
  }
}

class StopPipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  StopPipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory StopPipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return StopPipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

/// Specifies a limit to how long a model training job, model compilation job,
/// or hyperparameter tuning job can run. It also specifies how long a managed
/// Spot training job has to complete. When the job reaches the time limit,
/// Amazon SageMaker ends the training or compilation job. Use this API to cap
/// model training costs.
///
/// To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code>
/// signal, which delays job termination for 120 seconds. Algorithms can use
/// this 120-second window to save the model artifacts, so the results of
/// training are not lost.
///
/// The training algorithms provided by Amazon SageMaker automatically save the
/// intermediate results of a model training job when possible. This attempt to
/// save artifacts is only a best effort case as model might not be in a state
/// from which it can be saved. For example, if training has just started, the
/// model might not be ready to save. When saved, this intermediate data is a
/// valid model artifact. You can use it to create a model with
/// <code>CreateModel</code>.
/// <note>
/// The Neural Topic Model (NTM) currently does not support saving intermediate
/// model artifacts. When training NTMs, make sure that the maximum runtime is
/// sufficient for the training job to complete.
/// </note>
class StoppingCondition {
  /// The maximum length of time, in seconds, that a training or compilation job
  /// can run. If the job does not complete during this time, Amazon SageMaker
  /// ends the job.
  ///
  /// When <code>RetryStrategy</code> is specified in the job request,
  /// <code>MaxRuntimeInSeconds</code> specifies the maximum time for all of the
  /// attempts in total, not each individual attempt.
  ///
  /// The default value is 1 day. The maximum value is 28 days.
  final int? maxRuntimeInSeconds;

  /// The maximum length of time, in seconds, that a managed Spot training job has
  /// to complete. It is the amount of time spent waiting for Spot capacity plus
  /// the amount of time the job can run. It must be equal to or greater than
  /// <code>MaxRuntimeInSeconds</code>. If the job does not complete during this
  /// time, Amazon SageMaker ends the job.
  ///
  /// When <code>RetryStrategy</code> is specified in the job request,
  /// <code>MaxWaitTimeInSeconds</code> specifies the maximum time for all of the
  /// attempts in total, not each individual attempt.
  final int? maxWaitTimeInSeconds;

  StoppingCondition({
    this.maxRuntimeInSeconds,
    this.maxWaitTimeInSeconds,
  });

  factory StoppingCondition.fromJson(Map<String, dynamic> json) {
    return StoppingCondition(
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int?,
      maxWaitTimeInSeconds: json['MaxWaitTimeInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    final maxWaitTimeInSeconds = this.maxWaitTimeInSeconds;
    return {
      if (maxRuntimeInSeconds != null)
        'MaxRuntimeInSeconds': maxRuntimeInSeconds,
      if (maxWaitTimeInSeconds != null)
        'MaxWaitTimeInSeconds': maxWaitTimeInSeconds,
    };
  }
}

/// Describes a work team of a vendor that does the a labelling job.
class SubscribedWorkteam {
  /// The Amazon Resource Name (ARN) of the vendor that you have subscribed.
  final String workteamArn;

  /// Marketplace product listing ID.
  final String? listingId;

  /// The description of the vendor from the Amazon Marketplace.
  final String? marketplaceDescription;

  /// The title of the service provided by the vendor in the Amazon Marketplace.
  final String? marketplaceTitle;

  /// The name of the vendor in the Amazon Marketplace.
  final String? sellerName;

  SubscribedWorkteam({
    required this.workteamArn,
    this.listingId,
    this.marketplaceDescription,
    this.marketplaceTitle,
    this.sellerName,
  });

  factory SubscribedWorkteam.fromJson(Map<String, dynamic> json) {
    return SubscribedWorkteam(
      workteamArn: json['WorkteamArn'] as String,
      listingId: json['ListingId'] as String?,
      marketplaceDescription: json['MarketplaceDescription'] as String?,
      marketplaceTitle: json['MarketplaceTitle'] as String?,
      sellerName: json['SellerName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workteamArn = this.workteamArn;
    final listingId = this.listingId;
    final marketplaceDescription = this.marketplaceDescription;
    final marketplaceTitle = this.marketplaceTitle;
    final sellerName = this.sellerName;
    return {
      'WorkteamArn': workteamArn,
      if (listingId != null) 'ListingId': listingId,
      if (marketplaceDescription != null)
        'MarketplaceDescription': marketplaceDescription,
      if (marketplaceTitle != null) 'MarketplaceTitle': marketplaceTitle,
      if (sellerName != null) 'SellerName': sellerName,
    };
  }
}

/// Specified in the <a>GetSearchSuggestions</a> request. Limits the property
/// names that are included in the response.
class SuggestionQuery {
  /// Defines a property name hint. Only property names that begin with the
  /// specified hint are included in the response.
  final PropertyNameQuery? propertyNameQuery;

  SuggestionQuery({
    this.propertyNameQuery,
  });

  factory SuggestionQuery.fromJson(Map<String, dynamic> json) {
    return SuggestionQuery(
      propertyNameQuery: json['PropertyNameQuery'] != null
          ? PropertyNameQuery.fromJson(
              json['PropertyNameQuery'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final propertyNameQuery = this.propertyNameQuery;
    return {
      if (propertyNameQuery != null) 'PropertyNameQuery': propertyNameQuery,
    };
  }
}

/// A tag object that consists of a key and an optional value, used to manage
/// metadata for Amazon SageMaker Amazon Web Services resources.
///
/// You can add tags to notebook instances, training jobs, hyperparameter tuning
/// jobs, batch transform jobs, models, labeling jobs, work teams, endpoint
/// configurations, and endpoints. For more information on adding tags to Amazon
/// SageMaker resources, see <a>AddTags</a>.
///
/// For more information on adding metadata to your Amazon Web Services
/// resources with tagging, see <a
/// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
/// Amazon Web Services resources</a>. For advice on best practices for managing
/// Amazon Web Services resources with tagging, see <a
/// href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging
/// Best Practices: Implement an Effective Amazon Web Services Resource Tagging
/// Strategy</a>.
class Tag {
  /// The tag key. Tag keys must be unique per resource.
  final String key;

  /// The tag value.
  final String value;

  Tag({
    required this.key,
    required this.value,
  });

  factory Tag.fromJson(Map<String, dynamic> json) {
    return Tag(
      key: json['Key'] as String,
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      'Key': key,
      'Value': value,
    };
  }
}

enum TargetDevice {
  lambda,
  mlM4,
  mlM5,
  mlC4,
  mlC5,
  mlP2,
  mlP3,
  mlG4dn,
  mlInf1,
  mlEia2,
  jetsonTx1,
  jetsonTx2,
  jetsonNano,
  jetsonXavier,
  rasp3b,
  imx8qm,
  deeplens,
  rk3399,
  rk3288,
  aisage,
  sbeC,
  qcs605,
  qcs603,
  sitaraAm57x,
  ambaCv22,
  ambaCv25,
  x86Win32,
  x86Win64,
  coreml,
  jacintoTda4vm,
}

extension on TargetDevice {
  String toValue() {
    switch (this) {
      case TargetDevice.lambda:
        return 'lambda';
      case TargetDevice.mlM4:
        return 'ml_m4';
      case TargetDevice.mlM5:
        return 'ml_m5';
      case TargetDevice.mlC4:
        return 'ml_c4';
      case TargetDevice.mlC5:
        return 'ml_c5';
      case TargetDevice.mlP2:
        return 'ml_p2';
      case TargetDevice.mlP3:
        return 'ml_p3';
      case TargetDevice.mlG4dn:
        return 'ml_g4dn';
      case TargetDevice.mlInf1:
        return 'ml_inf1';
      case TargetDevice.mlEia2:
        return 'ml_eia2';
      case TargetDevice.jetsonTx1:
        return 'jetson_tx1';
      case TargetDevice.jetsonTx2:
        return 'jetson_tx2';
      case TargetDevice.jetsonNano:
        return 'jetson_nano';
      case TargetDevice.jetsonXavier:
        return 'jetson_xavier';
      case TargetDevice.rasp3b:
        return 'rasp3b';
      case TargetDevice.imx8qm:
        return 'imx8qm';
      case TargetDevice.deeplens:
        return 'deeplens';
      case TargetDevice.rk3399:
        return 'rk3399';
      case TargetDevice.rk3288:
        return 'rk3288';
      case TargetDevice.aisage:
        return 'aisage';
      case TargetDevice.sbeC:
        return 'sbe_c';
      case TargetDevice.qcs605:
        return 'qcs605';
      case TargetDevice.qcs603:
        return 'qcs603';
      case TargetDevice.sitaraAm57x:
        return 'sitara_am57x';
      case TargetDevice.ambaCv22:
        return 'amba_cv22';
      case TargetDevice.ambaCv25:
        return 'amba_cv25';
      case TargetDevice.x86Win32:
        return 'x86_win32';
      case TargetDevice.x86Win64:
        return 'x86_win64';
      case TargetDevice.coreml:
        return 'coreml';
      case TargetDevice.jacintoTda4vm:
        return 'jacinto_tda4vm';
    }
  }
}

extension on String {
  TargetDevice toTargetDevice() {
    switch (this) {
      case 'lambda':
        return TargetDevice.lambda;
      case 'ml_m4':
        return TargetDevice.mlM4;
      case 'ml_m5':
        return TargetDevice.mlM5;
      case 'ml_c4':
        return TargetDevice.mlC4;
      case 'ml_c5':
        return TargetDevice.mlC5;
      case 'ml_p2':
        return TargetDevice.mlP2;
      case 'ml_p3':
        return TargetDevice.mlP3;
      case 'ml_g4dn':
        return TargetDevice.mlG4dn;
      case 'ml_inf1':
        return TargetDevice.mlInf1;
      case 'ml_eia2':
        return TargetDevice.mlEia2;
      case 'jetson_tx1':
        return TargetDevice.jetsonTx1;
      case 'jetson_tx2':
        return TargetDevice.jetsonTx2;
      case 'jetson_nano':
        return TargetDevice.jetsonNano;
      case 'jetson_xavier':
        return TargetDevice.jetsonXavier;
      case 'rasp3b':
        return TargetDevice.rasp3b;
      case 'imx8qm':
        return TargetDevice.imx8qm;
      case 'deeplens':
        return TargetDevice.deeplens;
      case 'rk3399':
        return TargetDevice.rk3399;
      case 'rk3288':
        return TargetDevice.rk3288;
      case 'aisage':
        return TargetDevice.aisage;
      case 'sbe_c':
        return TargetDevice.sbeC;
      case 'qcs605':
        return TargetDevice.qcs605;
      case 'qcs603':
        return TargetDevice.qcs603;
      case 'sitara_am57x':
        return TargetDevice.sitaraAm57x;
      case 'amba_cv22':
        return TargetDevice.ambaCv22;
      case 'amba_cv25':
        return TargetDevice.ambaCv25;
      case 'x86_win32':
        return TargetDevice.x86Win32;
      case 'x86_win64':
        return TargetDevice.x86Win64;
      case 'coreml':
        return TargetDevice.coreml;
      case 'jacinto_tda4vm':
        return TargetDevice.jacintoTda4vm;
    }
    throw Exception('$this is not known in enum TargetDevice');
  }
}

/// Contains information about a target platform that you want your model to run
/// on, such as OS, architecture, and accelerators. It is an alternative of
/// <code>TargetDevice</code>.
class TargetPlatform {
  /// Specifies a target platform architecture.
  ///
  /// <ul>
  /// <li>
  /// <code>X86_64</code>: 64-bit version of the x86 instruction set.
  /// </li>
  /// <li>
  /// <code>X86</code>: 32-bit version of the x86 instruction set.
  /// </li>
  /// <li>
  /// <code>ARM64</code>: ARMv8 64-bit CPU.
  /// </li>
  /// <li>
  /// <code>ARM_EABIHF</code>: ARMv7 32-bit, Hard Float.
  /// </li>
  /// <li>
  /// <code>ARM_EABI</code>: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM
  /// platform.
  /// </li>
  /// </ul>
  final TargetPlatformArch arch;

  /// Specifies a target platform OS.
  ///
  /// <ul>
  /// <li>
  /// <code>LINUX</code>: Linux-based operating systems.
  /// </li>
  /// <li>
  /// <code>ANDROID</code>: Android operating systems. Android API level can be
  /// specified using the <code>ANDROID_PLATFORM</code> compiler option. For
  /// example, <code>"CompilerOptions": {'ANDROID_PLATFORM': 28}</code>
  /// </li>
  /// </ul>
  final TargetPlatformOs os;

  /// Specifies a target platform accelerator (optional).
  ///
  /// <ul>
  /// <li>
  /// <code>NVIDIA</code>: Nvidia graphics processing unit. It also requires
  /// <code>gpu-code</code>, <code>trt-ver</code>, <code>cuda-ver</code> compiler
  /// options
  /// </li>
  /// <li>
  /// <code>MALI</code>: ARM Mali graphics processor
  /// </li>
  /// <li>
  /// <code>INTEL_GRAPHICS</code>: Integrated Intel graphics
  /// </li>
  /// </ul>
  final TargetPlatformAccelerator? accelerator;

  TargetPlatform({
    required this.arch,
    required this.os,
    this.accelerator,
  });

  factory TargetPlatform.fromJson(Map<String, dynamic> json) {
    return TargetPlatform(
      arch: (json['Arch'] as String).toTargetPlatformArch(),
      os: (json['Os'] as String).toTargetPlatformOs(),
      accelerator:
          (json['Accelerator'] as String?)?.toTargetPlatformAccelerator(),
    );
  }

  Map<String, dynamic> toJson() {
    final arch = this.arch;
    final os = this.os;
    final accelerator = this.accelerator;
    return {
      'Arch': arch.toValue(),
      'Os': os.toValue(),
      if (accelerator != null) 'Accelerator': accelerator.toValue(),
    };
  }
}

enum TargetPlatformAccelerator {
  intelGraphics,
  mali,
  nvidia,
}

extension on TargetPlatformAccelerator {
  String toValue() {
    switch (this) {
      case TargetPlatformAccelerator.intelGraphics:
        return 'INTEL_GRAPHICS';
      case TargetPlatformAccelerator.mali:
        return 'MALI';
      case TargetPlatformAccelerator.nvidia:
        return 'NVIDIA';
    }
  }
}

extension on String {
  TargetPlatformAccelerator toTargetPlatformAccelerator() {
    switch (this) {
      case 'INTEL_GRAPHICS':
        return TargetPlatformAccelerator.intelGraphics;
      case 'MALI':
        return TargetPlatformAccelerator.mali;
      case 'NVIDIA':
        return TargetPlatformAccelerator.nvidia;
    }
    throw Exception('$this is not known in enum TargetPlatformAccelerator');
  }
}

enum TargetPlatformArch {
  x86_64,
  x86,
  arm64,
  armEabi,
  armEabihf,
}

extension on TargetPlatformArch {
  String toValue() {
    switch (this) {
      case TargetPlatformArch.x86_64:
        return 'X86_64';
      case TargetPlatformArch.x86:
        return 'X86';
      case TargetPlatformArch.arm64:
        return 'ARM64';
      case TargetPlatformArch.armEabi:
        return 'ARM_EABI';
      case TargetPlatformArch.armEabihf:
        return 'ARM_EABIHF';
    }
  }
}

extension on String {
  TargetPlatformArch toTargetPlatformArch() {
    switch (this) {
      case 'X86_64':
        return TargetPlatformArch.x86_64;
      case 'X86':
        return TargetPlatformArch.x86;
      case 'ARM64':
        return TargetPlatformArch.arm64;
      case 'ARM_EABI':
        return TargetPlatformArch.armEabi;
      case 'ARM_EABIHF':
        return TargetPlatformArch.armEabihf;
    }
    throw Exception('$this is not known in enum TargetPlatformArch');
  }
}

enum TargetPlatformOs {
  android,
  linux,
}

extension on TargetPlatformOs {
  String toValue() {
    switch (this) {
      case TargetPlatformOs.android:
        return 'ANDROID';
      case TargetPlatformOs.linux:
        return 'LINUX';
    }
  }
}

extension on String {
  TargetPlatformOs toTargetPlatformOs() {
    switch (this) {
      case 'ANDROID':
        return TargetPlatformOs.android;
      case 'LINUX':
        return TargetPlatformOs.linux;
    }
    throw Exception('$this is not known in enum TargetPlatformOs');
  }
}

/// The TensorBoard app settings.
class TensorBoardAppSettings {
  /// The default instance type and the Amazon Resource Name (ARN) of the
  /// SageMaker image created on the instance.
  final ResourceSpec? defaultResourceSpec;

  TensorBoardAppSettings({
    this.defaultResourceSpec,
  });

  factory TensorBoardAppSettings.fromJson(Map<String, dynamic> json) {
    return TensorBoardAppSettings(
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

/// Configuration of storage locations for the Debugger TensorBoard output data.
class TensorBoardOutputConfig {
  /// Path to Amazon S3 storage location for TensorBoard output.
  final String s3OutputPath;

  /// Path to local storage location for tensorBoard output. Defaults to
  /// <code>/opt/ml/output/tensorboard</code>.
  final String? localPath;

  TensorBoardOutputConfig({
    required this.s3OutputPath,
    this.localPath,
  });

  factory TensorBoardOutputConfig.fromJson(Map<String, dynamic> json) {
    return TensorBoardOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      localPath: json['LocalPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final localPath = this.localPath;
    return {
      'S3OutputPath': s3OutputPath,
      if (localPath != null) 'LocalPath': localPath,
    };
  }
}

/// Currently, the <code>TrafficRoutingConfig</code> API is not supported.
class TrafficRoutingConfig {
  /// <p/>
  final TrafficRoutingConfigType type;

  /// <p/>
  final int waitIntervalInSeconds;

  /// <p/>
  final CapacitySize? canarySize;

  TrafficRoutingConfig({
    required this.type,
    required this.waitIntervalInSeconds,
    this.canarySize,
  });

  factory TrafficRoutingConfig.fromJson(Map<String, dynamic> json) {
    return TrafficRoutingConfig(
      type: (json['Type'] as String).toTrafficRoutingConfigType(),
      waitIntervalInSeconds: json['WaitIntervalInSeconds'] as int,
      canarySize: json['CanarySize'] != null
          ? CapacitySize.fromJson(json['CanarySize'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final waitIntervalInSeconds = this.waitIntervalInSeconds;
    final canarySize = this.canarySize;
    return {
      'Type': type.toValue(),
      'WaitIntervalInSeconds': waitIntervalInSeconds,
      if (canarySize != null) 'CanarySize': canarySize,
    };
  }
}

enum TrafficRoutingConfigType {
  allAtOnce,
  canary,
}

extension on TrafficRoutingConfigType {
  String toValue() {
    switch (this) {
      case TrafficRoutingConfigType.allAtOnce:
        return 'ALL_AT_ONCE';
      case TrafficRoutingConfigType.canary:
        return 'CANARY';
    }
  }
}

extension on String {
  TrafficRoutingConfigType toTrafficRoutingConfigType() {
    switch (this) {
      case 'ALL_AT_ONCE':
        return TrafficRoutingConfigType.allAtOnce;
      case 'CANARY':
        return TrafficRoutingConfigType.canary;
    }
    throw Exception('$this is not known in enum TrafficRoutingConfigType');
  }
}

enum TrainingInputMode {
  pipe,
  file,
}

extension on TrainingInputMode {
  String toValue() {
    switch (this) {
      case TrainingInputMode.pipe:
        return 'Pipe';
      case TrainingInputMode.file:
        return 'File';
    }
  }
}

extension on String {
  TrainingInputMode toTrainingInputMode() {
    switch (this) {
      case 'Pipe':
        return TrainingInputMode.pipe;
      case 'File':
        return TrainingInputMode.file;
    }
    throw Exception('$this is not known in enum TrainingInputMode');
  }
}

enum TrainingInstanceType {
  mlM4Xlarge,
  mlM4_2xlarge,
  mlM4_4xlarge,
  mlM4_10xlarge,
  mlM4_16xlarge,
  mlG4dnXlarge,
  mlG4dn_2xlarge,
  mlG4dn_4xlarge,
  mlG4dn_8xlarge,
  mlG4dn_12xlarge,
  mlG4dn_16xlarge,
  mlM5Large,
  mlM5Xlarge,
  mlM5_2xlarge,
  mlM5_4xlarge,
  mlM5_12xlarge,
  mlM5_24xlarge,
  mlC4Xlarge,
  mlC4_2xlarge,
  mlC4_4xlarge,
  mlC4_8xlarge,
  mlP2Xlarge,
  mlP2_8xlarge,
  mlP2_16xlarge,
  mlP3_2xlarge,
  mlP3_8xlarge,
  mlP3_16xlarge,
  mlP3dn_24xlarge,
  mlP4d_24xlarge,
  mlC5Xlarge,
  mlC5_2xlarge,
  mlC5_4xlarge,
  mlC5_9xlarge,
  mlC5_18xlarge,
  mlC5nXlarge,
  mlC5n_2xlarge,
  mlC5n_4xlarge,
  mlC5n_9xlarge,
  mlC5n_18xlarge,
}

extension on TrainingInstanceType {
  String toValue() {
    switch (this) {
      case TrainingInstanceType.mlM4Xlarge:
        return 'ml.m4.xlarge';
      case TrainingInstanceType.mlM4_2xlarge:
        return 'ml.m4.2xlarge';
      case TrainingInstanceType.mlM4_4xlarge:
        return 'ml.m4.4xlarge';
      case TrainingInstanceType.mlM4_10xlarge:
        return 'ml.m4.10xlarge';
      case TrainingInstanceType.mlM4_16xlarge:
        return 'ml.m4.16xlarge';
      case TrainingInstanceType.mlG4dnXlarge:
        return 'ml.g4dn.xlarge';
      case TrainingInstanceType.mlG4dn_2xlarge:
        return 'ml.g4dn.2xlarge';
      case TrainingInstanceType.mlG4dn_4xlarge:
        return 'ml.g4dn.4xlarge';
      case TrainingInstanceType.mlG4dn_8xlarge:
        return 'ml.g4dn.8xlarge';
      case TrainingInstanceType.mlG4dn_12xlarge:
        return 'ml.g4dn.12xlarge';
      case TrainingInstanceType.mlG4dn_16xlarge:
        return 'ml.g4dn.16xlarge';
      case TrainingInstanceType.mlM5Large:
        return 'ml.m5.large';
      case TrainingInstanceType.mlM5Xlarge:
        return 'ml.m5.xlarge';
      case TrainingInstanceType.mlM5_2xlarge:
        return 'ml.m5.2xlarge';
      case TrainingInstanceType.mlM5_4xlarge:
        return 'ml.m5.4xlarge';
      case TrainingInstanceType.mlM5_12xlarge:
        return 'ml.m5.12xlarge';
      case TrainingInstanceType.mlM5_24xlarge:
        return 'ml.m5.24xlarge';
      case TrainingInstanceType.mlC4Xlarge:
        return 'ml.c4.xlarge';
      case TrainingInstanceType.mlC4_2xlarge:
        return 'ml.c4.2xlarge';
      case TrainingInstanceType.mlC4_4xlarge:
        return 'ml.c4.4xlarge';
      case TrainingInstanceType.mlC4_8xlarge:
        return 'ml.c4.8xlarge';
      case TrainingInstanceType.mlP2Xlarge:
        return 'ml.p2.xlarge';
      case TrainingInstanceType.mlP2_8xlarge:
        return 'ml.p2.8xlarge';
      case TrainingInstanceType.mlP2_16xlarge:
        return 'ml.p2.16xlarge';
      case TrainingInstanceType.mlP3_2xlarge:
        return 'ml.p3.2xlarge';
      case TrainingInstanceType.mlP3_8xlarge:
        return 'ml.p3.8xlarge';
      case TrainingInstanceType.mlP3_16xlarge:
        return 'ml.p3.16xlarge';
      case TrainingInstanceType.mlP3dn_24xlarge:
        return 'ml.p3dn.24xlarge';
      case TrainingInstanceType.mlP4d_24xlarge:
        return 'ml.p4d.24xlarge';
      case TrainingInstanceType.mlC5Xlarge:
        return 'ml.c5.xlarge';
      case TrainingInstanceType.mlC5_2xlarge:
        return 'ml.c5.2xlarge';
      case TrainingInstanceType.mlC5_4xlarge:
        return 'ml.c5.4xlarge';
      case TrainingInstanceType.mlC5_9xlarge:
        return 'ml.c5.9xlarge';
      case TrainingInstanceType.mlC5_18xlarge:
        return 'ml.c5.18xlarge';
      case TrainingInstanceType.mlC5nXlarge:
        return 'ml.c5n.xlarge';
      case TrainingInstanceType.mlC5n_2xlarge:
        return 'ml.c5n.2xlarge';
      case TrainingInstanceType.mlC5n_4xlarge:
        return 'ml.c5n.4xlarge';
      case TrainingInstanceType.mlC5n_9xlarge:
        return 'ml.c5n.9xlarge';
      case TrainingInstanceType.mlC5n_18xlarge:
        return 'ml.c5n.18xlarge';
    }
  }
}

extension on String {
  TrainingInstanceType toTrainingInstanceType() {
    switch (this) {
      case 'ml.m4.xlarge':
        return TrainingInstanceType.mlM4Xlarge;
      case 'ml.m4.2xlarge':
        return TrainingInstanceType.mlM4_2xlarge;
      case 'ml.m4.4xlarge':
        return TrainingInstanceType.mlM4_4xlarge;
      case 'ml.m4.10xlarge':
        return TrainingInstanceType.mlM4_10xlarge;
      case 'ml.m4.16xlarge':
        return TrainingInstanceType.mlM4_16xlarge;
      case 'ml.g4dn.xlarge':
        return TrainingInstanceType.mlG4dnXlarge;
      case 'ml.g4dn.2xlarge':
        return TrainingInstanceType.mlG4dn_2xlarge;
      case 'ml.g4dn.4xlarge':
        return TrainingInstanceType.mlG4dn_4xlarge;
      case 'ml.g4dn.8xlarge':
        return TrainingInstanceType.mlG4dn_8xlarge;
      case 'ml.g4dn.12xlarge':
        return TrainingInstanceType.mlG4dn_12xlarge;
      case 'ml.g4dn.16xlarge':
        return TrainingInstanceType.mlG4dn_16xlarge;
      case 'ml.m5.large':
        return TrainingInstanceType.mlM5Large;
      case 'ml.m5.xlarge':
        return TrainingInstanceType.mlM5Xlarge;
      case 'ml.m5.2xlarge':
        return TrainingInstanceType.mlM5_2xlarge;
      case 'ml.m5.4xlarge':
        return TrainingInstanceType.mlM5_4xlarge;
      case 'ml.m5.12xlarge':
        return TrainingInstanceType.mlM5_12xlarge;
      case 'ml.m5.24xlarge':
        return TrainingInstanceType.mlM5_24xlarge;
      case 'ml.c4.xlarge':
        return TrainingInstanceType.mlC4Xlarge;
      case 'ml.c4.2xlarge':
        return TrainingInstanceType.mlC4_2xlarge;
      case 'ml.c4.4xlarge':
        return TrainingInstanceType.mlC4_4xlarge;
      case 'ml.c4.8xlarge':
        return TrainingInstanceType.mlC4_8xlarge;
      case 'ml.p2.xlarge':
        return TrainingInstanceType.mlP2Xlarge;
      case 'ml.p2.8xlarge':
        return TrainingInstanceType.mlP2_8xlarge;
      case 'ml.p2.16xlarge':
        return TrainingInstanceType.mlP2_16xlarge;
      case 'ml.p3.2xlarge':
        return TrainingInstanceType.mlP3_2xlarge;
      case 'ml.p3.8xlarge':
        return TrainingInstanceType.mlP3_8xlarge;
      case 'ml.p3.16xlarge':
        return TrainingInstanceType.mlP3_16xlarge;
      case 'ml.p3dn.24xlarge':
        return TrainingInstanceType.mlP3dn_24xlarge;
      case 'ml.p4d.24xlarge':
        return TrainingInstanceType.mlP4d_24xlarge;
      case 'ml.c5.xlarge':
        return TrainingInstanceType.mlC5Xlarge;
      case 'ml.c5.2xlarge':
        return TrainingInstanceType.mlC5_2xlarge;
      case 'ml.c5.4xlarge':
        return TrainingInstanceType.mlC5_4xlarge;
      case 'ml.c5.9xlarge':
        return TrainingInstanceType.mlC5_9xlarge;
      case 'ml.c5.18xlarge':
        return TrainingInstanceType.mlC5_18xlarge;
      case 'ml.c5n.xlarge':
        return TrainingInstanceType.mlC5nXlarge;
      case 'ml.c5n.2xlarge':
        return TrainingInstanceType.mlC5n_2xlarge;
      case 'ml.c5n.4xlarge':
        return TrainingInstanceType.mlC5n_4xlarge;
      case 'ml.c5n.9xlarge':
        return TrainingInstanceType.mlC5n_9xlarge;
      case 'ml.c5n.18xlarge':
        return TrainingInstanceType.mlC5n_18xlarge;
    }
    throw Exception('$this is not known in enum TrainingInstanceType');
  }
}

/// Contains information about a training job.
class TrainingJob {
  /// Information about the algorithm used for training, and algorithm metadata.
  final AlgorithmSpecification? algorithmSpecification;

  /// The Amazon Resource Name (ARN) of the job.
  final String? autoMLJobArn;

  /// The billable time in seconds.
  final int? billableTimeInSeconds;
  final CheckpointConfig? checkpointConfig;

  /// A timestamp that indicates when the training job was created.
  final DateTime? creationTime;
  final DebugHookConfig? debugHookConfig;

  /// Information about the debug rule configuration.
  final List<DebugRuleConfiguration>? debugRuleConfigurations;

  /// Information about the evaluation status of the rules for the training job.
  final List<DebugRuleEvaluationStatus>? debugRuleEvaluationStatuses;

  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security for
  /// distributed training, but training might take longer. How long it takes
  /// depends on the amount of communication between compute instances, especially
  /// if you use a deep learning algorithm in distributed training.
  final bool? enableInterContainerTrafficEncryption;

  /// When true, enables managed spot training using Amazon EC2 Spot instances to
  /// run training jobs instead of on-demand instances. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed
  /// Spot Training</a>.
  final bool? enableManagedSpotTraining;

  /// If the <code>TrainingJob</code> was created with network isolation, the
  /// value is set to <code>true</code>. If network isolation is enabled, nodes
  /// can't communicate beyond the VPC they run in.
  final bool? enableNetworkIsolation;

  /// The environment variables to set in the Docker container.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the training job failed, the reason it failed.
  final String? failureReason;

  /// A list of final metric values that are set when the training job completes.
  /// Used only if the training job was configured to use metrics.
  final List<MetricData>? finalMetricDataList;

  /// Algorithm-specific parameters.
  final Map<String, String>? hyperParameters;

  /// An array of <code>Channel</code> objects that describes each data input
  /// channel.
  final List<Channel>? inputDataConfig;

  /// The Amazon Resource Name (ARN) of the labeling job.
  final String? labelingJobArn;

  /// A timestamp that indicates when the status of the training job was last
  /// modified.
  final DateTime? lastModifiedTime;

  /// Information about the Amazon S3 location that is configured for storing
  /// model artifacts.
  final ModelArtifacts? modelArtifacts;

  /// The S3 path where model artifacts that you configured when creating the job
  /// are stored. Amazon SageMaker creates subfolders for model artifacts.
  final OutputDataConfig? outputDataConfig;

  /// Resources, including ML compute instances and ML storage volumes, that are
  /// configured for model training.
  final ResourceConfig? resourceConfig;

  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  final RetryStrategy? retryStrategy;

  /// The Amazon Web Services Identity and Access Management (IAM) role configured
  /// for the training job.
  final String? roleArn;

  /// Provides detailed information about the state of the training job. For
  /// detailed information about the secondary status of the training job, see
  /// <code>StatusMessage</code> under <a>SecondaryStatusTransition</a>.
  ///
  /// Amazon SageMaker provides primary statuses and secondary statuses that apply
  /// to each of them:
  /// <dl> <dt>InProgress</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Starting</code> - Starting the training job.
  /// </li>
  /// <li>
  /// <code>Downloading</code> - An optional stage for algorithms that support
  /// <code>File</code> training input mode. It indicates that data is being
  /// downloaded to the ML storage volumes.
  /// </li>
  /// <li>
  /// <code>Training</code> - Training is in progress.
  /// </li>
  /// <li>
  /// <code>Uploading</code> - Training is complete and the model artifacts are
  /// being uploaded to the S3 location.
  /// </li>
  /// </ul> </dd> <dt>Completed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// </ul> </dd> <dt>Failed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Failed</code> - The training job has failed. The reason for the
  /// failure is returned in the <code>FailureReason</code> field of
  /// <code>DescribeTrainingJobResponse</code>.
  /// </li>
  /// </ul> </dd> <dt>Stopped</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>MaxRuntimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed runtime.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul> </dd> <dt>Stopping</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Stopping</code> - Stopping the training job.
  /// </li>
  /// </ul> </dd> </dl> <important>
  /// Valid values for <code>SecondaryStatus</code> are subject to change.
  /// </important>
  /// We no longer support the following secondary statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>LaunchingMLInstances</code>
  /// </li>
  /// <li>
  /// <code>PreparingTrainingStack</code>
  /// </li>
  /// <li>
  /// <code>DownloadingTrainingImage</code>
  /// </li>
  /// </ul>
  final SecondaryStatus? secondaryStatus;

  /// A history of all of the secondary statuses that the training job has
  /// transitioned through.
  final List<SecondaryStatusTransition>? secondaryStatusTransitions;

  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the job
  /// reaches the time limit, Amazon SageMaker ends the training job. Use this API
  /// to cap model training costs.
  ///
  /// To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code>
  /// signal, which delays job termination for 120 seconds. Algorithms can use
  /// this 120-second window to save the model artifacts, so the results of
  /// training are not lost.
  final StoppingCondition? stoppingCondition;

  /// An array of key-value pairs. You can use tags to categorize your Amazon Web
  /// Services resources in different ways, for example, by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  final List<Tag>? tags;
  final TensorBoardOutputConfig? tensorBoardOutputConfig;

  /// Indicates the time when the training job ends on training instances. You are
  /// billed for the time interval between the value of
  /// <code>TrainingStartTime</code> and this time. For successful jobs and
  /// stopped jobs, this is the time after model artifacts are uploaded. For
  /// failed jobs, this is the time when Amazon SageMaker detects a job failure.
  final DateTime? trainingEndTime;

  /// The Amazon Resource Name (ARN) of the training job.
  final String? trainingJobArn;

  /// The name of the training job.
  final String? trainingJobName;

  /// The status of the training job.
  ///
  /// Training job statuses are:
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code> - The training is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// <li>
  /// <code>Failed</code> - The training job has failed. To see the reason for the
  /// failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeTrainingJobResponse</code> call.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - The training job is stopping.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul>
  /// For more detailed information, see <code>SecondaryStatus</code>.
  final TrainingJobStatus? trainingJobStatus;

  /// Indicates the time when the training job starts on training instances. You
  /// are billed for the time interval between this time and the value of
  /// <code>TrainingEndTime</code>. The start time in CloudWatch Logs might be
  /// later than this time. The difference is due to the time it takes to download
  /// the training data and to the size of the training container.
  final DateTime? trainingStartTime;

  /// The training time in seconds.
  final int? trainingTimeInSeconds;

  /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job
  /// if the training job was launched by a hyperparameter tuning job.
  final String? tuningJobArn;

  /// A <a>VpcConfig</a> object that specifies the VPC that this training job has
  /// access to. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  final VpcConfig? vpcConfig;

  TrainingJob({
    this.algorithmSpecification,
    this.autoMLJobArn,
    this.billableTimeInSeconds,
    this.checkpointConfig,
    this.creationTime,
    this.debugHookConfig,
    this.debugRuleConfigurations,
    this.debugRuleEvaluationStatuses,
    this.enableInterContainerTrafficEncryption,
    this.enableManagedSpotTraining,
    this.enableNetworkIsolation,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.finalMetricDataList,
    this.hyperParameters,
    this.inputDataConfig,
    this.labelingJobArn,
    this.lastModifiedTime,
    this.modelArtifacts,
    this.outputDataConfig,
    this.resourceConfig,
    this.retryStrategy,
    this.roleArn,
    this.secondaryStatus,
    this.secondaryStatusTransitions,
    this.stoppingCondition,
    this.tags,
    this.tensorBoardOutputConfig,
    this.trainingEndTime,
    this.trainingJobArn,
    this.trainingJobName,
    this.trainingJobStatus,
    this.trainingStartTime,
    this.trainingTimeInSeconds,
    this.tuningJobArn,
    this.vpcConfig,
  });

  factory TrainingJob.fromJson(Map<String, dynamic> json) {
    return TrainingJob(
      algorithmSpecification: json['AlgorithmSpecification'] != null
          ? AlgorithmSpecification.fromJson(
              json['AlgorithmSpecification'] as Map<String, dynamic>)
          : null,
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      billableTimeInSeconds: json['BillableTimeInSeconds'] as int?,
      checkpointConfig: json['CheckpointConfig'] != null
          ? CheckpointConfig.fromJson(
              json['CheckpointConfig'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      debugHookConfig: json['DebugHookConfig'] != null
          ? DebugHookConfig.fromJson(
              json['DebugHookConfig'] as Map<String, dynamic>)
          : null,
      debugRuleConfigurations: (json['DebugRuleConfigurations'] as List?)
          ?.whereNotNull()
          .map(
              (e) => DebugRuleConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      debugRuleEvaluationStatuses:
          (json['DebugRuleEvaluationStatuses'] as List?)
              ?.whereNotNull()
              .map((e) =>
                  DebugRuleEvaluationStatus.fromJson(e as Map<String, dynamic>))
              .toList(),
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableManagedSpotTraining: json['EnableManagedSpotTraining'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      finalMetricDataList: (json['FinalMetricDataList'] as List?)
          ?.whereNotNull()
          .map((e) => MetricData.fromJson(e as Map<String, dynamic>))
          .toList(),
      hyperParameters: (json['HyperParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      inputDataConfig: (json['InputDataConfig'] as List?)
          ?.whereNotNull()
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      labelingJobArn: json['LabelingJobArn'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelArtifacts: json['ModelArtifacts'] != null
          ? ModelArtifacts.fromJson(
              json['ModelArtifacts'] as Map<String, dynamic>)
          : null,
      outputDataConfig: json['OutputDataConfig'] != null
          ? OutputDataConfig.fromJson(
              json['OutputDataConfig'] as Map<String, dynamic>)
          : null,
      resourceConfig: json['ResourceConfig'] != null
          ? ResourceConfig.fromJson(
              json['ResourceConfig'] as Map<String, dynamic>)
          : null,
      retryStrategy: json['RetryStrategy'] != null
          ? RetryStrategy.fromJson(
              json['RetryStrategy'] as Map<String, dynamic>)
          : null,
      roleArn: json['RoleArn'] as String?,
      secondaryStatus:
          (json['SecondaryStatus'] as String?)?.toSecondaryStatus(),
      secondaryStatusTransitions: (json['SecondaryStatusTransitions'] as List?)
          ?.whereNotNull()
          .map((e) =>
              SecondaryStatusTransition.fromJson(e as Map<String, dynamic>))
          .toList(),
      stoppingCondition: json['StoppingCondition'] != null
          ? StoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      tensorBoardOutputConfig: json['TensorBoardOutputConfig'] != null
          ? TensorBoardOutputConfig.fromJson(
              json['TensorBoardOutputConfig'] as Map<String, dynamic>)
          : null,
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      trainingJobArn: json['TrainingJobArn'] as String?,
      trainingJobName: json['TrainingJobName'] as String?,
      trainingJobStatus:
          (json['TrainingJobStatus'] as String?)?.toTrainingJobStatus(),
      trainingStartTime: timeStampFromJson(json['TrainingStartTime']),
      trainingTimeInSeconds: json['TrainingTimeInSeconds'] as int?,
      tuningJobArn: json['TuningJobArn'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSpecification = this.algorithmSpecification;
    final autoMLJobArn = this.autoMLJobArn;
    final billableTimeInSeconds = this.billableTimeInSeconds;
    final checkpointConfig = this.checkpointConfig;
    final creationTime = this.creationTime;
    final debugHookConfig = this.debugHookConfig;
    final debugRuleConfigurations = this.debugRuleConfigurations;
    final debugRuleEvaluationStatuses = this.debugRuleEvaluationStatuses;
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableManagedSpotTraining = this.enableManagedSpotTraining;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final finalMetricDataList = this.finalMetricDataList;
    final hyperParameters = this.hyperParameters;
    final inputDataConfig = this.inputDataConfig;
    final labelingJobArn = this.labelingJobArn;
    final lastModifiedTime = this.lastModifiedTime;
    final modelArtifacts = this.modelArtifacts;
    final outputDataConfig = this.outputDataConfig;
    final resourceConfig = this.resourceConfig;
    final retryStrategy = this.retryStrategy;
    final roleArn = this.roleArn;
    final secondaryStatus = this.secondaryStatus;
    final secondaryStatusTransitions = this.secondaryStatusTransitions;
    final stoppingCondition = this.stoppingCondition;
    final tags = this.tags;
    final tensorBoardOutputConfig = this.tensorBoardOutputConfig;
    final trainingEndTime = this.trainingEndTime;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final trainingStartTime = this.trainingStartTime;
    final trainingTimeInSeconds = this.trainingTimeInSeconds;
    final tuningJobArn = this.tuningJobArn;
    final vpcConfig = this.vpcConfig;
    return {
      if (algorithmSpecification != null)
        'AlgorithmSpecification': algorithmSpecification,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (billableTimeInSeconds != null)
        'BillableTimeInSeconds': billableTimeInSeconds,
      if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (debugHookConfig != null) 'DebugHookConfig': debugHookConfig,
      if (debugRuleConfigurations != null)
        'DebugRuleConfigurations': debugRuleConfigurations,
      if (debugRuleEvaluationStatuses != null)
        'DebugRuleEvaluationStatuses': debugRuleEvaluationStatuses,
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableManagedSpotTraining != null)
        'EnableManagedSpotTraining': enableManagedSpotTraining,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalMetricDataList != null)
        'FinalMetricDataList': finalMetricDataList,
      if (hyperParameters != null) 'HyperParameters': hyperParameters,
      if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelArtifacts != null) 'ModelArtifacts': modelArtifacts,
      if (outputDataConfig != null) 'OutputDataConfig': outputDataConfig,
      if (resourceConfig != null) 'ResourceConfig': resourceConfig,
      if (retryStrategy != null) 'RetryStrategy': retryStrategy,
      if (roleArn != null) 'RoleArn': roleArn,
      if (secondaryStatus != null) 'SecondaryStatus': secondaryStatus.toValue(),
      if (secondaryStatusTransitions != null)
        'SecondaryStatusTransitions': secondaryStatusTransitions,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
      if (tags != null) 'Tags': tags,
      if (tensorBoardOutputConfig != null)
        'TensorBoardOutputConfig': tensorBoardOutputConfig,
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (trainingJobArn != null) 'TrainingJobArn': trainingJobArn,
      if (trainingJobName != null) 'TrainingJobName': trainingJobName,
      if (trainingJobStatus != null)
        'TrainingJobStatus': trainingJobStatus.toValue(),
      if (trainingStartTime != null)
        'TrainingStartTime': unixTimestampToJson(trainingStartTime),
      if (trainingTimeInSeconds != null)
        'TrainingTimeInSeconds': trainingTimeInSeconds,
      if (tuningJobArn != null) 'TuningJobArn': tuningJobArn,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// Defines the input needed to run a training job using the algorithm.
class TrainingJobDefinition {
  /// An array of <code>Channel</code> objects, each of which specifies an input
  /// source.
  final List<Channel> inputDataConfig;

  /// the path to the S3 bucket where you want to store model artifacts. Amazon
  /// SageMaker creates subfolders for the artifacts.
  final OutputDataConfig outputDataConfig;

  /// The resources, including the ML compute instances and ML storage volumes, to
  /// use for model training.
  final ResourceConfig resourceConfig;

  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the job
  /// reaches the time limit, Amazon SageMaker ends the training job. Use this API
  /// to cap model training costs.
  ///
  /// To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal,
  /// which delays job termination for 120 seconds. Algorithms can use this
  /// 120-second window to save the model artifacts.
  final StoppingCondition stoppingCondition;

  /// The input mode used by the algorithm for the training job. For the input
  /// modes that Amazon SageMaker algorithms support, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  ///
  /// If an algorithm supports the <code>File</code> input mode, Amazon SageMaker
  /// downloads the training data from S3 to the provisioned ML storage Volume,
  /// and mounts the directory to docker volume for training container. If an
  /// algorithm supports the <code>Pipe</code> input mode, Amazon SageMaker
  /// streams data directly from S3 to the container.
  final TrainingInputMode trainingInputMode;

  /// The hyperparameters used for the training job.
  final Map<String, String>? hyperParameters;

  TrainingJobDefinition({
    required this.inputDataConfig,
    required this.outputDataConfig,
    required this.resourceConfig,
    required this.stoppingCondition,
    required this.trainingInputMode,
    this.hyperParameters,
  });

  factory TrainingJobDefinition.fromJson(Map<String, dynamic> json) {
    return TrainingJobDefinition(
      inputDataConfig: (json['InputDataConfig'] as List)
          .whereNotNull()
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputDataConfig: OutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      resourceConfig: ResourceConfig.fromJson(
          json['ResourceConfig'] as Map<String, dynamic>),
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      trainingInputMode:
          (json['TrainingInputMode'] as String).toTrainingInputMode(),
      hyperParameters: (json['HyperParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final inputDataConfig = this.inputDataConfig;
    final outputDataConfig = this.outputDataConfig;
    final resourceConfig = this.resourceConfig;
    final stoppingCondition = this.stoppingCondition;
    final trainingInputMode = this.trainingInputMode;
    final hyperParameters = this.hyperParameters;
    return {
      'InputDataConfig': inputDataConfig,
      'OutputDataConfig': outputDataConfig,
      'ResourceConfig': resourceConfig,
      'StoppingCondition': stoppingCondition,
      'TrainingInputMode': trainingInputMode.toValue(),
      if (hyperParameters != null) 'HyperParameters': hyperParameters,
    };
  }
}

enum TrainingJobEarlyStoppingType {
  off,
  auto,
}

extension on TrainingJobEarlyStoppingType {
  String toValue() {
    switch (this) {
      case TrainingJobEarlyStoppingType.off:
        return 'Off';
      case TrainingJobEarlyStoppingType.auto:
        return 'Auto';
    }
  }
}

extension on String {
  TrainingJobEarlyStoppingType toTrainingJobEarlyStoppingType() {
    switch (this) {
      case 'Off':
        return TrainingJobEarlyStoppingType.off;
      case 'Auto':
        return TrainingJobEarlyStoppingType.auto;
    }
    throw Exception('$this is not known in enum TrainingJobEarlyStoppingType');
  }
}

enum TrainingJobSortByOptions {
  name,
  creationTime,
  status,
  finalObjectiveMetricValue,
}

extension on TrainingJobSortByOptions {
  String toValue() {
    switch (this) {
      case TrainingJobSortByOptions.name:
        return 'Name';
      case TrainingJobSortByOptions.creationTime:
        return 'CreationTime';
      case TrainingJobSortByOptions.status:
        return 'Status';
      case TrainingJobSortByOptions.finalObjectiveMetricValue:
        return 'FinalObjectiveMetricValue';
    }
  }
}

extension on String {
  TrainingJobSortByOptions toTrainingJobSortByOptions() {
    switch (this) {
      case 'Name':
        return TrainingJobSortByOptions.name;
      case 'CreationTime':
        return TrainingJobSortByOptions.creationTime;
      case 'Status':
        return TrainingJobSortByOptions.status;
      case 'FinalObjectiveMetricValue':
        return TrainingJobSortByOptions.finalObjectiveMetricValue;
    }
    throw Exception('$this is not known in enum TrainingJobSortByOptions');
  }
}

enum TrainingJobStatus {
  inProgress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on TrainingJobStatus {
  String toValue() {
    switch (this) {
      case TrainingJobStatus.inProgress:
        return 'InProgress';
      case TrainingJobStatus.completed:
        return 'Completed';
      case TrainingJobStatus.failed:
        return 'Failed';
      case TrainingJobStatus.stopping:
        return 'Stopping';
      case TrainingJobStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  TrainingJobStatus toTrainingJobStatus() {
    switch (this) {
      case 'InProgress':
        return TrainingJobStatus.inProgress;
      case 'Completed':
        return TrainingJobStatus.completed;
      case 'Failed':
        return TrainingJobStatus.failed;
      case 'Stopping':
        return TrainingJobStatus.stopping;
      case 'Stopped':
        return TrainingJobStatus.stopped;
    }
    throw Exception('$this is not known in enum TrainingJobStatus');
  }
}

/// The numbers of training jobs launched by a hyperparameter tuning job,
/// categorized by status.
class TrainingJobStatusCounters {
  /// The number of completed training jobs launched by the hyperparameter tuning
  /// job.
  final int? completed;

  /// The number of in-progress training jobs launched by a hyperparameter tuning
  /// job.
  final int? inProgress;

  /// The number of training jobs that failed and can't be retried. A failed
  /// training job can't be retried if it failed because a client error occurred.
  final int? nonRetryableError;

  /// The number of training jobs that failed, but can be retried. A failed
  /// training job can be retried only if it failed because an internal service
  /// error occurred.
  final int? retryableError;

  /// The number of training jobs launched by a hyperparameter tuning job that
  /// were manually stopped.
  final int? stopped;

  TrainingJobStatusCounters({
    this.completed,
    this.inProgress,
    this.nonRetryableError,
    this.retryableError,
    this.stopped,
  });

  factory TrainingJobStatusCounters.fromJson(Map<String, dynamic> json) {
    return TrainingJobStatusCounters(
      completed: json['Completed'] as int?,
      inProgress: json['InProgress'] as int?,
      nonRetryableError: json['NonRetryableError'] as int?,
      retryableError: json['RetryableError'] as int?,
      stopped: json['Stopped'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final completed = this.completed;
    final inProgress = this.inProgress;
    final nonRetryableError = this.nonRetryableError;
    final retryableError = this.retryableError;
    final stopped = this.stopped;
    return {
      if (completed != null) 'Completed': completed,
      if (inProgress != null) 'InProgress': inProgress,
      if (nonRetryableError != null) 'NonRetryableError': nonRetryableError,
      if (retryableError != null) 'RetryableError': retryableError,
      if (stopped != null) 'Stopped': stopped,
    };
  }
}

/// Metadata for a training job step.
class TrainingJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the training job that was run by this step
  /// execution.
  final String? arn;

  TrainingJobStepMetadata({
    this.arn,
  });

  factory TrainingJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return TrainingJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides summary information about a training job.
class TrainingJobSummary {
  /// A timestamp that shows when the training job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  /// The name of the training job that you want a summary for.
  final String trainingJobName;

  /// The status of the training job.
  final TrainingJobStatus trainingJobStatus;

  /// Timestamp when the training job was last modified.
  final DateTime? lastModifiedTime;

  /// A timestamp that shows when the training job ended. This field is set only
  /// if the training job has one of the terminal statuses
  /// (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).
  final DateTime? trainingEndTime;

  TrainingJobSummary({
    required this.creationTime,
    required this.trainingJobArn,
    required this.trainingJobName,
    required this.trainingJobStatus,
    this.lastModifiedTime,
    this.trainingEndTime,
  });

  factory TrainingJobSummary.fromJson(Map<String, dynamic> json) {
    return TrainingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      trainingJobArn: json['TrainingJobArn'] as String,
      trainingJobName: json['TrainingJobName'] as String,
      trainingJobStatus:
          (json['TrainingJobStatus'] as String).toTrainingJobStatus(),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final trainingEndTime = this.trainingEndTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'TrainingJobArn': trainingJobArn,
      'TrainingJobName': trainingJobName,
      'TrainingJobStatus': trainingJobStatus.toValue(),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
    };
  }
}

/// Defines how the algorithm is used for a training job.
class TrainingSpecification {
  /// A list of the instance types that this algorithm can use for training.
  final List<TrainingInstanceType> supportedTrainingInstanceTypes;

  /// A list of <code>ChannelSpecification</code> objects, which specify the input
  /// sources to be used by the algorithm.
  final List<ChannelSpecification> trainingChannels;

  /// The Amazon ECR registry path of the Docker image that contains the training
  /// algorithm.
  final String trainingImage;

  /// A list of <code>MetricDefinition</code> objects, which are used for parsing
  /// metrics generated by the algorithm.
  final List<MetricDefinition>? metricDefinitions;

  /// A list of the <code>HyperParameterSpecification</code> objects, that define
  /// the supported hyperparameters. This is required if the algorithm supports
  /// automatic model tuning.&gt;
  final List<HyperParameterSpecification>? supportedHyperParameters;

  /// A list of the metrics that the algorithm emits that can be used as the
  /// objective metric in a hyperparameter tuning job.
  final List<HyperParameterTuningJobObjective>?
      supportedTuningJobObjectiveMetrics;

  /// Indicates whether the algorithm supports distributed training. If set to
  /// false, buyers can't request more than one instance during training.
  final bool? supportsDistributedTraining;

  /// An MD5 hash of the training algorithm that identifies the Docker image used
  /// for training.
  final String? trainingImageDigest;

  TrainingSpecification({
    required this.supportedTrainingInstanceTypes,
    required this.trainingChannels,
    required this.trainingImage,
    this.metricDefinitions,
    this.supportedHyperParameters,
    this.supportedTuningJobObjectiveMetrics,
    this.supportsDistributedTraining,
    this.trainingImageDigest,
  });

  factory TrainingSpecification.fromJson(Map<String, dynamic> json) {
    return TrainingSpecification(
      supportedTrainingInstanceTypes:
          (json['SupportedTrainingInstanceTypes'] as List)
              .whereNotNull()
              .map((e) => (e as String).toTrainingInstanceType())
              .toList(),
      trainingChannels: (json['TrainingChannels'] as List)
          .whereNotNull()
          .map((e) => ChannelSpecification.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingImage: json['TrainingImage'] as String,
      metricDefinitions: (json['MetricDefinitions'] as List?)
          ?.whereNotNull()
          .map((e) => MetricDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      supportedHyperParameters: (json['SupportedHyperParameters'] as List?)
          ?.whereNotNull()
          .map((e) =>
              HyperParameterSpecification.fromJson(e as Map<String, dynamic>))
          .toList(),
      supportedTuningJobObjectiveMetrics:
          (json['SupportedTuningJobObjectiveMetrics'] as List?)
              ?.whereNotNull()
              .map((e) => HyperParameterTuningJobObjective.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
      supportsDistributedTraining: json['SupportsDistributedTraining'] as bool?,
      trainingImageDigest: json['TrainingImageDigest'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final supportedTrainingInstanceTypes = this.supportedTrainingInstanceTypes;
    final trainingChannels = this.trainingChannels;
    final trainingImage = this.trainingImage;
    final metricDefinitions = this.metricDefinitions;
    final supportedHyperParameters = this.supportedHyperParameters;
    final supportedTuningJobObjectiveMetrics =
        this.supportedTuningJobObjectiveMetrics;
    final supportsDistributedTraining = this.supportsDistributedTraining;
    final trainingImageDigest = this.trainingImageDigest;
    return {
      'SupportedTrainingInstanceTypes':
          supportedTrainingInstanceTypes.map((e) => e.toValue()).toList(),
      'TrainingChannels': trainingChannels,
      'TrainingImage': trainingImage,
      if (metricDefinitions != null) 'MetricDefinitions': metricDefinitions,
      if (supportedHyperParameters != null)
        'SupportedHyperParameters': supportedHyperParameters,
      if (supportedTuningJobObjectiveMetrics != null)
        'SupportedTuningJobObjectiveMetrics':
            supportedTuningJobObjectiveMetrics,
      if (supportsDistributedTraining != null)
        'SupportsDistributedTraining': supportsDistributedTraining,
      if (trainingImageDigest != null)
        'TrainingImageDigest': trainingImageDigest,
    };
  }
}

/// Describes the location of the channel data.
class TransformDataSource {
  /// The S3 location of the data source that is associated with a channel.
  final TransformS3DataSource s3DataSource;

  TransformDataSource({
    required this.s3DataSource,
  });

  factory TransformDataSource.fromJson(Map<String, dynamic> json) {
    return TransformDataSource(
      s3DataSource: TransformS3DataSource.fromJson(
          json['S3DataSource'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    return {
      'S3DataSource': s3DataSource,
    };
  }
}

/// Describes the input source of a transform job and the way the transform job
/// consumes it.
class TransformInput {
  /// Describes the location of the channel data, which is, the S3 location of the
  /// input data that the model can consume.
  final TransformDataSource dataSource;

  /// If your transform data is compressed, specify the compression type. Amazon
  /// SageMaker automatically decompresses the data for the transform job
  /// accordingly. The default value is <code>None</code>.
  final CompressionType? compressionType;

  /// The multipurpose internet mail extension (MIME) type of the data. Amazon
  /// SageMaker uses the MIME type with each http call to transfer data to the
  /// transform job.
  final String? contentType;

  /// The method to use to split the transform job's data files into smaller
  /// batches. Splitting is necessary when the total size of each object is too
  /// large to fit in a single request. You can also use data splitting to improve
  /// performance by processing multiple concurrent mini-batches. The default
  /// value for <code>SplitType</code> is <code>None</code>, which indicates that
  /// input data files are not split, and request payloads contain the entire
  /// contents of an input object. Set the value of this parameter to
  /// <code>Line</code> to split records on a newline character boundary.
  /// <code>SplitType</code> also supports a number of record-oriented binary data
  /// formats. Currently, the supported record formats are:
  ///
  /// <ul>
  /// <li>
  /// RecordIO
  /// </li>
  /// <li>
  /// TFRecord
  /// </li>
  /// </ul>
  /// When splitting is enabled, the size of a mini-batch depends on the values of
  /// the <code>BatchStrategy</code> and <code>MaxPayloadInMB</code> parameters.
  /// When the value of <code>BatchStrategy</code> is <code>MultiRecord</code>,
  /// Amazon SageMaker sends the maximum number of records in each request, up to
  /// the <code>MaxPayloadInMB</code> limit. If the value of
  /// <code>BatchStrategy</code> is <code>SingleRecord</code>, Amazon SageMaker
  /// sends individual records in each request.
  /// <note>
  /// Some data formats represent a record as a binary payload wrapped with extra
  /// padding bytes. When splitting is applied to a binary data format, padding is
  /// removed if the value of <code>BatchStrategy</code> is set to
  /// <code>SingleRecord</code>. Padding is not removed if the value of
  /// <code>BatchStrategy</code> is set to <code>MultiRecord</code>.
  ///
  /// For more information about <code>RecordIO</code>, see <a
  /// href="https://mxnet.apache.org/api/faq/recordio">Create a Dataset Using
  /// RecordIO</a> in the MXNet documentation. For more information about
  /// <code>TFRecord</code>, see <a
  /// href="https://www.tensorflow.org/guide/data#consuming_tfrecord_data">Consuming
  /// TFRecord data</a> in the TensorFlow documentation.
  /// </note>
  final SplitType? splitType;

  TransformInput({
    required this.dataSource,
    this.compressionType,
    this.contentType,
    this.splitType,
  });

  factory TransformInput.fromJson(Map<String, dynamic> json) {
    return TransformInput(
      dataSource: TransformDataSource.fromJson(
          json['DataSource'] as Map<String, dynamic>),
      compressionType:
          (json['CompressionType'] as String?)?.toCompressionType(),
      contentType: json['ContentType'] as String?,
      splitType: (json['SplitType'] as String?)?.toSplitType(),
    );
  }

  Map<String, dynamic> toJson() {
    final dataSource = this.dataSource;
    final compressionType = this.compressionType;
    final contentType = this.contentType;
    final splitType = this.splitType;
    return {
      'DataSource': dataSource,
      if (compressionType != null) 'CompressionType': compressionType.toValue(),
      if (contentType != null) 'ContentType': contentType,
      if (splitType != null) 'SplitType': splitType.toValue(),
    };
  }
}

enum TransformInstanceType {
  mlM4Xlarge,
  mlM4_2xlarge,
  mlM4_4xlarge,
  mlM4_10xlarge,
  mlM4_16xlarge,
  mlC4Xlarge,
  mlC4_2xlarge,
  mlC4_4xlarge,
  mlC4_8xlarge,
  mlP2Xlarge,
  mlP2_8xlarge,
  mlP2_16xlarge,
  mlP3_2xlarge,
  mlP3_8xlarge,
  mlP3_16xlarge,
  mlC5Xlarge,
  mlC5_2xlarge,
  mlC5_4xlarge,
  mlC5_9xlarge,
  mlC5_18xlarge,
  mlM5Large,
  mlM5Xlarge,
  mlM5_2xlarge,
  mlM5_4xlarge,
  mlM5_12xlarge,
  mlM5_24xlarge,
  mlG4dnXlarge,
  mlG4dn_2xlarge,
  mlG4dn_4xlarge,
  mlG4dn_8xlarge,
  mlG4dn_12xlarge,
  mlG4dn_16xlarge,
}

extension on TransformInstanceType {
  String toValue() {
    switch (this) {
      case TransformInstanceType.mlM4Xlarge:
        return 'ml.m4.xlarge';
      case TransformInstanceType.mlM4_2xlarge:
        return 'ml.m4.2xlarge';
      case TransformInstanceType.mlM4_4xlarge:
        return 'ml.m4.4xlarge';
      case TransformInstanceType.mlM4_10xlarge:
        return 'ml.m4.10xlarge';
      case TransformInstanceType.mlM4_16xlarge:
        return 'ml.m4.16xlarge';
      case TransformInstanceType.mlC4Xlarge:
        return 'ml.c4.xlarge';
      case TransformInstanceType.mlC4_2xlarge:
        return 'ml.c4.2xlarge';
      case TransformInstanceType.mlC4_4xlarge:
        return 'ml.c4.4xlarge';
      case TransformInstanceType.mlC4_8xlarge:
        return 'ml.c4.8xlarge';
      case TransformInstanceType.mlP2Xlarge:
        return 'ml.p2.xlarge';
      case TransformInstanceType.mlP2_8xlarge:
        return 'ml.p2.8xlarge';
      case TransformInstanceType.mlP2_16xlarge:
        return 'ml.p2.16xlarge';
      case TransformInstanceType.mlP3_2xlarge:
        return 'ml.p3.2xlarge';
      case TransformInstanceType.mlP3_8xlarge:
        return 'ml.p3.8xlarge';
      case TransformInstanceType.mlP3_16xlarge:
        return 'ml.p3.16xlarge';
      case TransformInstanceType.mlC5Xlarge:
        return 'ml.c5.xlarge';
      case TransformInstanceType.mlC5_2xlarge:
        return 'ml.c5.2xlarge';
      case TransformInstanceType.mlC5_4xlarge:
        return 'ml.c5.4xlarge';
      case TransformInstanceType.mlC5_9xlarge:
        return 'ml.c5.9xlarge';
      case TransformInstanceType.mlC5_18xlarge:
        return 'ml.c5.18xlarge';
      case TransformInstanceType.mlM5Large:
        return 'ml.m5.large';
      case TransformInstanceType.mlM5Xlarge:
        return 'ml.m5.xlarge';
      case TransformInstanceType.mlM5_2xlarge:
        return 'ml.m5.2xlarge';
      case TransformInstanceType.mlM5_4xlarge:
        return 'ml.m5.4xlarge';
      case TransformInstanceType.mlM5_12xlarge:
        return 'ml.m5.12xlarge';
      case TransformInstanceType.mlM5_24xlarge:
        return 'ml.m5.24xlarge';
      case TransformInstanceType.mlG4dnXlarge:
        return 'ml.g4dn.xlarge';
      case TransformInstanceType.mlG4dn_2xlarge:
        return 'ml.g4dn.2xlarge';
      case TransformInstanceType.mlG4dn_4xlarge:
        return 'ml.g4dn.4xlarge';
      case TransformInstanceType.mlG4dn_8xlarge:
        return 'ml.g4dn.8xlarge';
      case TransformInstanceType.mlG4dn_12xlarge:
        return 'ml.g4dn.12xlarge';
      case TransformInstanceType.mlG4dn_16xlarge:
        return 'ml.g4dn.16xlarge';
    }
  }
}

extension on String {
  TransformInstanceType toTransformInstanceType() {
    switch (this) {
      case 'ml.m4.xlarge':
        return TransformInstanceType.mlM4Xlarge;
      case 'ml.m4.2xlarge':
        return TransformInstanceType.mlM4_2xlarge;
      case 'ml.m4.4xlarge':
        return TransformInstanceType.mlM4_4xlarge;
      case 'ml.m4.10xlarge':
        return TransformInstanceType.mlM4_10xlarge;
      case 'ml.m4.16xlarge':
        return TransformInstanceType.mlM4_16xlarge;
      case 'ml.c4.xlarge':
        return TransformInstanceType.mlC4Xlarge;
      case 'ml.c4.2xlarge':
        return TransformInstanceType.mlC4_2xlarge;
      case 'ml.c4.4xlarge':
        return TransformInstanceType.mlC4_4xlarge;
      case 'ml.c4.8xlarge':
        return TransformInstanceType.mlC4_8xlarge;
      case 'ml.p2.xlarge':
        return TransformInstanceType.mlP2Xlarge;
      case 'ml.p2.8xlarge':
        return TransformInstanceType.mlP2_8xlarge;
      case 'ml.p2.16xlarge':
        return TransformInstanceType.mlP2_16xlarge;
      case 'ml.p3.2xlarge':
        return TransformInstanceType.mlP3_2xlarge;
      case 'ml.p3.8xlarge':
        return TransformInstanceType.mlP3_8xlarge;
      case 'ml.p3.16xlarge':
        return TransformInstanceType.mlP3_16xlarge;
      case 'ml.c5.xlarge':
        return TransformInstanceType.mlC5Xlarge;
      case 'ml.c5.2xlarge':
        return TransformInstanceType.mlC5_2xlarge;
      case 'ml.c5.4xlarge':
        return TransformInstanceType.mlC5_4xlarge;
      case 'ml.c5.9xlarge':
        return TransformInstanceType.mlC5_9xlarge;
      case 'ml.c5.18xlarge':
        return TransformInstanceType.mlC5_18xlarge;
      case 'ml.m5.large':
        return TransformInstanceType.mlM5Large;
      case 'ml.m5.xlarge':
        return TransformInstanceType.mlM5Xlarge;
      case 'ml.m5.2xlarge':
        return TransformInstanceType.mlM5_2xlarge;
      case 'ml.m5.4xlarge':
        return TransformInstanceType.mlM5_4xlarge;
      case 'ml.m5.12xlarge':
        return TransformInstanceType.mlM5_12xlarge;
      case 'ml.m5.24xlarge':
        return TransformInstanceType.mlM5_24xlarge;
      case 'ml.g4dn.xlarge':
        return TransformInstanceType.mlG4dnXlarge;
      case 'ml.g4dn.2xlarge':
        return TransformInstanceType.mlG4dn_2xlarge;
      case 'ml.g4dn.4xlarge':
        return TransformInstanceType.mlG4dn_4xlarge;
      case 'ml.g4dn.8xlarge':
        return TransformInstanceType.mlG4dn_8xlarge;
      case 'ml.g4dn.12xlarge':
        return TransformInstanceType.mlG4dn_12xlarge;
      case 'ml.g4dn.16xlarge':
        return TransformInstanceType.mlG4dn_16xlarge;
    }
    throw Exception('$this is not known in enum TransformInstanceType');
  }
}

/// A batch transform job. For information about SageMaker batch transform, see
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use
/// Batch Transform</a>.
class TransformJob {
  /// The Amazon Resource Name (ARN) of the AutoML job that created the transform
  /// job.
  final String? autoMLJobArn;

  /// Specifies the number of records to include in a mini-batch for an HTTP
  /// inference request. A record is a single unit of input data that inference
  /// can be made on. For example, a single line in a CSV file is a record.
  final BatchStrategy? batchStrategy;

  /// A timestamp that shows when the transform Job was created.
  final DateTime? creationTime;
  final DataProcessing? dataProcessing;

  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the transform job failed, the reason it failed.
  final String? failureReason;

  /// The Amazon Resource Name (ARN) of the labeling job that created the
  /// transform job.
  final String? labelingJobArn;

  /// The maximum number of parallel requests that can be sent to each instance in
  /// a transform job. If <code>MaxConcurrentTransforms</code> is set to 0 or left
  /// unset, SageMaker checks the optional execution-parameters to determine the
  /// settings for your chosen algorithm. If the execution-parameters endpoint is
  /// not enabled, the default value is 1. For built-in algorithms, you don't need
  /// to set a value for <code>MaxConcurrentTransforms</code>.
  final int? maxConcurrentTransforms;

  /// The maximum allowed size of the payload, in MB. A payload is the data
  /// portion of a record (without metadata). The value in
  /// <code>MaxPayloadInMB</code> must be greater than, or equal to, the size of a
  /// single record. To estimate the size of a record in MB, divide the size of
  /// your dataset by the number of records. To ensure that the records fit within
  /// the maximum payload size, we recommend using a slightly larger value. The
  /// default value is 6 MB. For cases where the payload might be arbitrarily
  /// large and is transmitted using HTTP chunked encoding, set the value to 0.
  /// This feature works only in supported algorithms. Currently, SageMaker
  /// built-in algorithms do not support HTTP chunked encoding.
  final int? maxPayloadInMB;
  final ModelClientConfig? modelClientConfig;

  /// The name of the model associated with the transform job.
  final String? modelName;

  /// A list of tags associated with the transform job.
  final List<Tag>? tags;

  /// Indicates when the transform job has been completed, or has stopped or
  /// failed. You are billed for the time interval between this time and the value
  /// of <code>TransformStartTime</code>.
  final DateTime? transformEndTime;
  final TransformInput? transformInput;

  /// The Amazon Resource Name (ARN) of the transform job.
  final String? transformJobArn;

  /// The name of the transform job.
  final String? transformJobName;

  /// The status of the transform job.
  ///
  /// Transform job statuses are:
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code> - The job is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code> - The job has completed.
  /// </li>
  /// <li>
  /// <code>Failed</code> - The transform job has failed. To see the reason for
  /// the failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeTransformJob</code> call.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - The transform job is stopping.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The transform job has stopped.
  /// </li>
  /// </ul>
  final TransformJobStatus? transformJobStatus;
  final TransformOutput? transformOutput;
  final TransformResources? transformResources;

  /// Indicates when the transform job starts on ML instances. You are billed for
  /// the time interval between this time and the value of
  /// <code>TransformEndTime</code>.
  final DateTime? transformStartTime;

  TransformJob({
    this.autoMLJobArn,
    this.batchStrategy,
    this.creationTime,
    this.dataProcessing,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.labelingJobArn,
    this.maxConcurrentTransforms,
    this.maxPayloadInMB,
    this.modelClientConfig,
    this.modelName,
    this.tags,
    this.transformEndTime,
    this.transformInput,
    this.transformJobArn,
    this.transformJobName,
    this.transformJobStatus,
    this.transformOutput,
    this.transformResources,
    this.transformStartTime,
  });

  factory TransformJob.fromJson(Map<String, dynamic> json) {
    return TransformJob(
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      batchStrategy: (json['BatchStrategy'] as String?)?.toBatchStrategy(),
      creationTime: timeStampFromJson(json['CreationTime']),
      dataProcessing: json['DataProcessing'] != null
          ? DataProcessing.fromJson(
              json['DataProcessing'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      labelingJobArn: json['LabelingJobArn'] as String?,
      maxConcurrentTransforms: json['MaxConcurrentTransforms'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
      modelClientConfig: json['ModelClientConfig'] != null
          ? ModelClientConfig.fromJson(
              json['ModelClientConfig'] as Map<String, dynamic>)
          : null,
      modelName: json['ModelName'] as String?,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      transformEndTime: timeStampFromJson(json['TransformEndTime']),
      transformInput: json['TransformInput'] != null
          ? TransformInput.fromJson(
              json['TransformInput'] as Map<String, dynamic>)
          : null,
      transformJobArn: json['TransformJobArn'] as String?,
      transformJobName: json['TransformJobName'] as String?,
      transformJobStatus:
          (json['TransformJobStatus'] as String?)?.toTransformJobStatus(),
      transformOutput: json['TransformOutput'] != null
          ? TransformOutput.fromJson(
              json['TransformOutput'] as Map<String, dynamic>)
          : null,
      transformResources: json['TransformResources'] != null
          ? TransformResources.fromJson(
              json['TransformResources'] as Map<String, dynamic>)
          : null,
      transformStartTime: timeStampFromJson(json['TransformStartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final batchStrategy = this.batchStrategy;
    final creationTime = this.creationTime;
    final dataProcessing = this.dataProcessing;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final labelingJobArn = this.labelingJobArn;
    final maxConcurrentTransforms = this.maxConcurrentTransforms;
    final maxPayloadInMB = this.maxPayloadInMB;
    final modelClientConfig = this.modelClientConfig;
    final modelName = this.modelName;
    final tags = this.tags;
    final transformEndTime = this.transformEndTime;
    final transformInput = this.transformInput;
    final transformJobArn = this.transformJobArn;
    final transformJobName = this.transformJobName;
    final transformJobStatus = this.transformJobStatus;
    final transformOutput = this.transformOutput;
    final transformResources = this.transformResources;
    final transformStartTime = this.transformStartTime;
    return {
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (batchStrategy != null) 'BatchStrategy': batchStrategy.toValue(),
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (dataProcessing != null) 'DataProcessing': dataProcessing,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (maxConcurrentTransforms != null)
        'MaxConcurrentTransforms': maxConcurrentTransforms,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
      if (modelClientConfig != null) 'ModelClientConfig': modelClientConfig,
      if (modelName != null) 'ModelName': modelName,
      if (tags != null) 'Tags': tags,
      if (transformEndTime != null)
        'TransformEndTime': unixTimestampToJson(transformEndTime),
      if (transformInput != null) 'TransformInput': transformInput,
      if (transformJobArn != null) 'TransformJobArn': transformJobArn,
      if (transformJobName != null) 'TransformJobName': transformJobName,
      if (transformJobStatus != null)
        'TransformJobStatus': transformJobStatus.toValue(),
      if (transformOutput != null) 'TransformOutput': transformOutput,
      if (transformResources != null) 'TransformResources': transformResources,
      if (transformStartTime != null)
        'TransformStartTime': unixTimestampToJson(transformStartTime),
    };
  }
}

/// Defines the input needed to run a transform job using the inference
/// specification specified in the algorithm.
class TransformJobDefinition {
  /// A description of the input source and the way the transform job consumes it.
  final TransformInput transformInput;

  /// Identifies the Amazon S3 location where you want Amazon SageMaker to save
  /// the results from the transform job.
  final TransformOutput transformOutput;

  /// Identifies the ML compute instances for the transform job.
  final TransformResources transformResources;

  /// A string that determines the number of records included in a single
  /// mini-batch.
  ///
  /// <code>SingleRecord</code> means only one record is used per mini-batch.
  /// <code>MultiRecord</code> means a mini-batch is set to contain as many
  /// records that can fit within the <code>MaxPayloadInMB</code> limit.
  final BatchStrategy? batchStrategy;

  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  final Map<String, String>? environment;

  /// The maximum number of parallel requests that can be sent to each instance in
  /// a transform job. The default value is 1.
  final int? maxConcurrentTransforms;

  /// The maximum payload size allowed, in MB. A payload is the data portion of a
  /// record (without metadata).
  final int? maxPayloadInMB;

  TransformJobDefinition({
    required this.transformInput,
    required this.transformOutput,
    required this.transformResources,
    this.batchStrategy,
    this.environment,
    this.maxConcurrentTransforms,
    this.maxPayloadInMB,
  });

  factory TransformJobDefinition.fromJson(Map<String, dynamic> json) {
    return TransformJobDefinition(
      transformInput: TransformInput.fromJson(
          json['TransformInput'] as Map<String, dynamic>),
      transformOutput: TransformOutput.fromJson(
          json['TransformOutput'] as Map<String, dynamic>),
      transformResources: TransformResources.fromJson(
          json['TransformResources'] as Map<String, dynamic>),
      batchStrategy: (json['BatchStrategy'] as String?)?.toBatchStrategy(),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      maxConcurrentTransforms: json['MaxConcurrentTransforms'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final transformInput = this.transformInput;
    final transformOutput = this.transformOutput;
    final transformResources = this.transformResources;
    final batchStrategy = this.batchStrategy;
    final environment = this.environment;
    final maxConcurrentTransforms = this.maxConcurrentTransforms;
    final maxPayloadInMB = this.maxPayloadInMB;
    return {
      'TransformInput': transformInput,
      'TransformOutput': transformOutput,
      'TransformResources': transformResources,
      if (batchStrategy != null) 'BatchStrategy': batchStrategy.toValue(),
      if (environment != null) 'Environment': environment,
      if (maxConcurrentTransforms != null)
        'MaxConcurrentTransforms': maxConcurrentTransforms,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
    };
  }
}

enum TransformJobStatus {
  inProgress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on TransformJobStatus {
  String toValue() {
    switch (this) {
      case TransformJobStatus.inProgress:
        return 'InProgress';
      case TransformJobStatus.completed:
        return 'Completed';
      case TransformJobStatus.failed:
        return 'Failed';
      case TransformJobStatus.stopping:
        return 'Stopping';
      case TransformJobStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  TransformJobStatus toTransformJobStatus() {
    switch (this) {
      case 'InProgress':
        return TransformJobStatus.inProgress;
      case 'Completed':
        return TransformJobStatus.completed;
      case 'Failed':
        return TransformJobStatus.failed;
      case 'Stopping':
        return TransformJobStatus.stopping;
      case 'Stopped':
        return TransformJobStatus.stopped;
    }
    throw Exception('$this is not known in enum TransformJobStatus');
  }
}

/// Metadata for a transform job step.
class TransformJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the transform job that was run by this
  /// step execution.
  final String? arn;

  TransformJobStepMetadata({
    this.arn,
  });

  factory TransformJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return TransformJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides a summary of a transform job. Multiple
/// <code>TransformJobSummary</code> objects are returned as a list after in
/// response to a <a>ListTransformJobs</a> call.
class TransformJobSummary {
  /// A timestamp that shows when the transform Job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the transform job.
  final String transformJobArn;

  /// The name of the transform job.
  final String transformJobName;

  /// The status of the transform job.
  final TransformJobStatus transformJobStatus;

  /// If the transform job failed, the reason it failed.
  final String? failureReason;

  /// Indicates when the transform job was last modified.
  final DateTime? lastModifiedTime;

  /// Indicates when the transform job ends on compute instances. For successful
  /// jobs and stopped jobs, this is the exact time recorded after the results are
  /// uploaded. For failed jobs, this is when Amazon SageMaker detected that the
  /// job failed.
  final DateTime? transformEndTime;

  TransformJobSummary({
    required this.creationTime,
    required this.transformJobArn,
    required this.transformJobName,
    required this.transformJobStatus,
    this.failureReason,
    this.lastModifiedTime,
    this.transformEndTime,
  });

  factory TransformJobSummary.fromJson(Map<String, dynamic> json) {
    return TransformJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      transformJobArn: json['TransformJobArn'] as String,
      transformJobName: json['TransformJobName'] as String,
      transformJobStatus:
          (json['TransformJobStatus'] as String).toTransformJobStatus(),
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      transformEndTime: timeStampFromJson(json['TransformEndTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final transformJobArn = this.transformJobArn;
    final transformJobName = this.transformJobName;
    final transformJobStatus = this.transformJobStatus;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final transformEndTime = this.transformEndTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'TransformJobArn': transformJobArn,
      'TransformJobName': transformJobName,
      'TransformJobStatus': transformJobStatus.toValue(),
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (transformEndTime != null)
        'TransformEndTime': unixTimestampToJson(transformEndTime),
    };
  }
}

/// Describes the results of a transform job.
class TransformOutput {
  /// The Amazon S3 path where you want Amazon SageMaker to store the results of
  /// the transform job. For example,
  /// <code>s3://bucket-name/key-name-prefix</code>.
  ///
  /// For every S3 object used as input for the transform job, batch transform
  /// stores the transformed data with an .<code>out</code> suffix in a
  /// corresponding subfolder in the location in the output prefix. For example,
  /// for the input data stored at
  /// <code>s3://bucket-name/input-name-prefix/dataset01/data.csv</code>, batch
  /// transform stores the transformed data at
  /// <code>s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out</code>.
  /// Batch transform doesn't upload partially processed objects. For an input S3
  /// object that contains multiple records, it creates an .<code>out</code> file
  /// only if the transform job succeeds on the entire file. When the input
  /// contains multiple S3 objects, the batch transform job processes the listed
  /// S3 objects and uploads only the output for successfully processed objects.
  /// If any object fails in the transform job batch transform marks the job as
  /// failed to prompt investigation.
  final String s3OutputPath;

  /// The MIME type used to specify the output data. Amazon SageMaker uses the
  /// MIME type with each http call to transfer data from the transform job.
  final String? accept;

  /// Defines how to assemble the results of the transform job as a single S3
  /// object. Choose a format that is most convenient to you. To concatenate the
  /// results in binary format, specify <code>None</code>. To add a newline
  /// character at the end of every transformed record, specify <code>Line</code>.
  final AssemblyType? assembleWith;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the model artifacts at rest using
  /// Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of
  /// the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  /// If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key
  /// for Amazon S3 for your role's account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify in
  /// your <a>CreateModel</a> request. For more information, see <a
  /// href="http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  final String? kmsKeyId;

  TransformOutput({
    required this.s3OutputPath,
    this.accept,
    this.assembleWith,
    this.kmsKeyId,
  });

  factory TransformOutput.fromJson(Map<String, dynamic> json) {
    return TransformOutput(
      s3OutputPath: json['S3OutputPath'] as String,
      accept: json['Accept'] as String?,
      assembleWith: (json['AssembleWith'] as String?)?.toAssemblyType(),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final accept = this.accept;
    final assembleWith = this.assembleWith;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (accept != null) 'Accept': accept,
      if (assembleWith != null) 'AssembleWith': assembleWith.toValue(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// Describes the resources, including ML instance types and ML instance count,
/// to use for transform job.
class TransformResources {
  /// The number of ML compute instances to use in the transform job. For
  /// distributed transform jobs, specify a value greater than 1. The default
  /// value is <code>1</code>.
  final int instanceCount;

  /// The ML compute instance type for the transform job. If you are using
  /// built-in algorithms to transform moderately sized datasets, we recommend
  /// using ml.m4.xlarge or <code>ml.m5.large</code>instance types.
  final TransformInstanceType instanceType;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt model data on the storage volume
  /// attached to the ML compute instance(s) that run the batch transform job.
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>VolumeKmsKeyId</code> when using
  /// an instance type with local storage.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  /// The <code>VolumeKmsKeyId</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  final String? volumeKmsKeyId;

  TransformResources({
    required this.instanceCount,
    required this.instanceType,
    this.volumeKmsKeyId,
  });

  factory TransformResources.fromJson(Map<String, dynamic> json) {
    return TransformResources(
      instanceCount: json['InstanceCount'] as int,
      instanceType: (json['InstanceType'] as String).toTransformInstanceType(),
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.toValue(),
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// Describes the S3 data source.
class TransformS3DataSource {
  /// If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
  /// name prefix. Amazon SageMaker uses all objects with the specified key name
  /// prefix for batch transform.
  ///
  /// If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an
  /// object that is a manifest file containing a list of object keys that you
  /// want Amazon SageMaker to use for batch transform.
  ///
  /// The following values are compatible: <code>ManifestFile</code>,
  /// <code>S3Prefix</code>
  ///
  /// The following value is not compatible: <code>AugmentedManifestFile</code>
  final S3DataType s3DataType;

  /// Depending on the value specified for the <code>S3DataType</code>, identifies
  /// either a key name prefix or a manifest. For example:
  ///
  /// <ul>
  /// <li>
  /// A key name prefix might look like this:
  /// <code>s3://bucketname/exampleprefix</code>.
  /// </li>
  /// <li>
  /// A manifest might look like this:
  /// <code>s3://bucketname/example.manifest</code>
  ///
  /// The manifest is an S3 object which is a JSON file with the following format:
  ///
  /// <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
  ///
  /// <code>"relative/path/to/custdata-1",</code>
  ///
  /// <code>"relative/path/custdata-2",</code>
  ///
  /// <code>...</code>
  ///
  /// <code>"relative/path/custdata-N"</code>
  ///
  /// <code>]</code>
  ///
  /// The preceding JSON matches the following <code>S3Uris</code>:
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
  ///
  /// <code>...</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
  ///
  /// The complete set of <code>S3Uris</code> in this manifest constitutes the
  /// input data for the channel for this datasource. The object that each
  /// <code>S3Uris</code> points to must be readable by the IAM role that Amazon
  /// SageMaker uses to perform tasks on your behalf.
  /// </li>
  /// </ul>
  final String s3Uri;

  TransformS3DataSource({
    required this.s3DataType,
    required this.s3Uri,
  });

  factory TransformS3DataSource.fromJson(Map<String, dynamic> json) {
    return TransformS3DataSource(
      s3DataType: (json['S3DataType'] as String).toS3DataType(),
      s3Uri: json['S3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    return {
      'S3DataType': s3DataType.toValue(),
      'S3Uri': s3Uri,
    };
  }
}

/// The properties of a trial as returned by the <a>Search</a> API.
class Trial {
  final UserContext? createdBy;

  /// When the trial was created.
  final DateTime? creationTime;

  /// The name of the trial as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialName</code> is displayed.
  final String? displayName;

  /// The name of the experiment the trial is part of.
  final String? experimentName;
  final UserContext? lastModifiedBy;

  /// Who last modified the trial.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;
  final TrialSource? source;

  /// The list of tags that are associated with the trial. You can use
  /// <a>Search</a> API to search on the tags.
  final List<Tag>? tags;

  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// A list of the components associated with the trial. For each component, a
  /// summary of the component's properties is included.
  final List<TrialComponentSimpleSummary>? trialComponentSummaries;

  /// The name of the trial.
  final String? trialName;

  Trial({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.source,
    this.tags,
    this.trialArn,
    this.trialComponentSummaries,
    this.trialName,
  });

  factory Trial.fromJson(Map<String, dynamic> json) {
    return Trial(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      source: json['Source'] != null
          ? TrialSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trialArn: json['TrialArn'] as String?,
      trialComponentSummaries: (json['TrialComponentSummaries'] as List?)
          ?.whereNotNull()
          .map((e) =>
              TrialComponentSimpleSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final source = this.source;
    final tags = this.tags;
    final trialArn = this.trialArn;
    final trialComponentSummaries = this.trialComponentSummaries;
    final trialName = this.trialName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (source != null) 'Source': source,
      if (tags != null) 'Tags': tags,
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialComponentSummaries != null)
        'TrialComponentSummaries': trialComponentSummaries,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

/// The properties of a trial component as returned by the <a>Search</a> API.
class TrialComponent {
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The name of the component as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialComponentName</code> is displayed.
  final String? displayName;

  /// When the component ended.
  final DateTime? endTime;

  /// The input artifacts of the component.
  final Map<String, TrialComponentArtifact>? inputArtifacts;
  final UserContext? lastModifiedBy;

  /// When the component was last modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The metrics for the component.
  final List<TrialComponentMetricSummary>? metrics;

  /// The output artifacts of the component.
  final Map<String, TrialComponentArtifact>? outputArtifacts;

  /// The hyperparameters of the component.
  final Map<String, TrialComponentParameterValue>? parameters;

  /// An array of the parents of the component. A parent is a trial the component
  /// is associated with and the experiment the trial is part of. A component
  /// might not have any parents.
  final List<Parent>? parents;

  /// The Amazon Resource Name (ARN) and job type of the source of the component.
  final TrialComponentSource? source;

  /// Details of the source of the component.
  final TrialComponentSourceDetail? sourceDetail;

  /// When the component started.
  final DateTime? startTime;
  final TrialComponentStatus? status;

  /// The list of tags that are associated with the component. You can use
  /// <a>Search</a> API to search on the tags.
  final List<Tag>? tags;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;

  TrialComponent({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.endTime,
    this.inputArtifacts,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.metrics,
    this.outputArtifacts,
    this.parameters,
    this.parents,
    this.source,
    this.sourceDetail,
    this.startTime,
    this.status,
    this.tags,
    this.trialComponentArn,
    this.trialComponentName,
  });

  factory TrialComponent.fromJson(Map<String, dynamic> json) {
    return TrialComponent(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      endTime: timeStampFromJson(json['EndTime']),
      inputArtifacts: (json['InputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      metrics: (json['Metrics'] as List?)
          ?.whereNotNull()
          .map((e) =>
              TrialComponentMetricSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputArtifacts: (json['OutputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      parameters: (json['Parameters'] as Map<String, dynamic>?)?.map((k, e) =>
          MapEntry(
              k,
              TrialComponentParameterValue.fromJson(
                  e as Map<String, dynamic>))),
      parents: (json['Parents'] as List?)
          ?.whereNotNull()
          .map((e) => Parent.fromJson(e as Map<String, dynamic>))
          .toList(),
      source: json['Source'] != null
          ? TrialComponentSource.fromJson(
              json['Source'] as Map<String, dynamic>)
          : null,
      sourceDetail: json['SourceDetail'] != null
          ? TrialComponentSourceDetail.fromJson(
              json['SourceDetail'] as Map<String, dynamic>)
          : null,
      startTime: timeStampFromJson(json['StartTime']),
      status: json['Status'] != null
          ? TrialComponentStatus.fromJson(
              json['Status'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.whereNotNull()
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final endTime = this.endTime;
    final inputArtifacts = this.inputArtifacts;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final metrics = this.metrics;
    final outputArtifacts = this.outputArtifacts;
    final parameters = this.parameters;
    final parents = this.parents;
    final source = this.source;
    final sourceDetail = this.sourceDetail;
    final startTime = this.startTime;
    final status = this.status;
    final tags = this.tags;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (metrics != null) 'Metrics': metrics,
      if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
      if (parameters != null) 'Parameters': parameters,
      if (parents != null) 'Parents': parents,
      if (source != null) 'Source': source,
      if (sourceDetail != null) 'SourceDetail': sourceDetail,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (status != null) 'Status': status,
      if (tags != null) 'Tags': tags,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
    };
  }
}

/// Represents an input or output artifact of a trial component. You specify
/// <code>TrialComponentArtifact</code> as part of the
/// <code>InputArtifacts</code> and <code>OutputArtifacts</code> parameters in
/// the <a>CreateTrialComponent</a> request.
///
/// Examples of input artifacts are datasets, algorithms, hyperparameters,
/// source code, and instance types. Examples of output artifacts are metrics,
/// snapshots, logs, and images.
class TrialComponentArtifact {
  /// The location of the artifact.
  final String value;

  /// The media type of the artifact, which indicates the type of data in the
  /// artifact file. The media type consists of a <i>type</i> and a <i>subtype</i>
  /// concatenated with a slash (/) character, for example, text/csv, image/jpeg,
  /// and s3/uri. The type specifies the category of the media. The subtype
  /// specifies the kind of data.
  final String? mediaType;

  TrialComponentArtifact({
    required this.value,
    this.mediaType,
  });

  factory TrialComponentArtifact.fromJson(Map<String, dynamic> json) {
    return TrialComponentArtifact(
      value: json['Value'] as String,
      mediaType: json['MediaType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final value = this.value;
    final mediaType = this.mediaType;
    return {
      'Value': value,
      if (mediaType != null) 'MediaType': mediaType,
    };
  }
}

/// A summary of the metrics of a trial component.
class TrialComponentMetricSummary {
  /// The average value of the metric.
  final double? avg;

  /// The number of samples used to generate the metric.
  final int? count;

  /// The most recent value of the metric.
  final double? last;

  /// The maximum value of the metric.
  final double? max;

  /// The name of the metric.
  final String? metricName;

  /// The minimum value of the metric.
  final double? min;

  /// The Amazon Resource Name (ARN) of the source.
  final String? sourceArn;

  /// The standard deviation of the metric.
  final double? stdDev;

  /// When the metric was last updated.
  final DateTime? timeStamp;

  TrialComponentMetricSummary({
    this.avg,
    this.count,
    this.last,
    this.max,
    this.metricName,
    this.min,
    this.sourceArn,
    this.stdDev,
    this.timeStamp,
  });

  factory TrialComponentMetricSummary.fromJson(Map<String, dynamic> json) {
    return TrialComponentMetricSummary(
      avg: json['Avg'] as double?,
      count: json['Count'] as int?,
      last: json['Last'] as double?,
      max: json['Max'] as double?,
      metricName: json['MetricName'] as String?,
      min: json['Min'] as double?,
      sourceArn: json['SourceArn'] as String?,
      stdDev: json['StdDev'] as double?,
      timeStamp: timeStampFromJson(json['TimeStamp']),
    );
  }

  Map<String, dynamic> toJson() {
    final avg = this.avg;
    final count = this.count;
    final last = this.last;
    final max = this.max;
    final metricName = this.metricName;
    final min = this.min;
    final sourceArn = this.sourceArn;
    final stdDev = this.stdDev;
    final timeStamp = this.timeStamp;
    return {
      if (avg != null) 'Avg': avg,
      if (count != null) 'Count': count,
      if (last != null) 'Last': last,
      if (max != null) 'Max': max,
      if (metricName != null) 'MetricName': metricName,
      if (min != null) 'Min': min,
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (stdDev != null) 'StdDev': stdDev,
      if (timeStamp != null) 'TimeStamp': unixTimestampToJson(timeStamp),
    };
  }
}

/// The value of a hyperparameter. Only one of <code>NumberValue</code> or
/// <code>StringValue</code> can be specified.
///
/// This object is specified in the <a>CreateTrialComponent</a> request.
class TrialComponentParameterValue {
  /// The numeric value of a numeric hyperparameter. If you specify a value for
  /// this parameter, you can't specify the <code>StringValue</code> parameter.
  final double? numberValue;

  /// The string value of a categorical hyperparameter. If you specify a value for
  /// this parameter, you can't specify the <code>NumberValue</code> parameter.
  final String? stringValue;

  TrialComponentParameterValue({
    this.numberValue,
    this.stringValue,
  });

  factory TrialComponentParameterValue.fromJson(Map<String, dynamic> json) {
    return TrialComponentParameterValue(
      numberValue: json['NumberValue'] as double?,
      stringValue: json['StringValue'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final numberValue = this.numberValue;
    final stringValue = this.stringValue;
    return {
      if (numberValue != null) 'NumberValue': numberValue,
      if (stringValue != null) 'StringValue': stringValue,
    };
  }
}

enum TrialComponentPrimaryStatus {
  inProgress,
  completed,
  failed,
  stopping,
  stopped,
}

extension on TrialComponentPrimaryStatus {
  String toValue() {
    switch (this) {
      case TrialComponentPrimaryStatus.inProgress:
        return 'InProgress';
      case TrialComponentPrimaryStatus.completed:
        return 'Completed';
      case TrialComponentPrimaryStatus.failed:
        return 'Failed';
      case TrialComponentPrimaryStatus.stopping:
        return 'Stopping';
      case TrialComponentPrimaryStatus.stopped:
        return 'Stopped';
    }
  }
}

extension on String {
  TrialComponentPrimaryStatus toTrialComponentPrimaryStatus() {
    switch (this) {
      case 'InProgress':
        return TrialComponentPrimaryStatus.inProgress;
      case 'Completed':
        return TrialComponentPrimaryStatus.completed;
      case 'Failed':
        return TrialComponentPrimaryStatus.failed;
      case 'Stopping':
        return TrialComponentPrimaryStatus.stopping;
      case 'Stopped':
        return TrialComponentPrimaryStatus.stopped;
    }
    throw Exception('$this is not known in enum TrialComponentPrimaryStatus');
  }
}

/// A short summary of a trial component.
class TrialComponentSimpleSummary {
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;
  final TrialComponentSource? trialComponentSource;

  TrialComponentSimpleSummary({
    this.createdBy,
    this.creationTime,
    this.trialComponentArn,
    this.trialComponentName,
    this.trialComponentSource,
  });

  factory TrialComponentSimpleSummary.fromJson(Map<String, dynamic> json) {
    return TrialComponentSimpleSummary(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
      trialComponentSource: json['TrialComponentSource'] != null
          ? TrialComponentSource.fromJson(
              json['TrialComponentSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    final trialComponentSource = this.trialComponentSource;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
      if (trialComponentSource != null)
        'TrialComponentSource': trialComponentSource,
    };
  }
}

/// The Amazon Resource Name (ARN) and job type of the source of a trial
/// component.
class TrialComponentSource {
  /// The source ARN.
  final String sourceArn;

  /// The source job type.
  final String? sourceType;

  TrialComponentSource({
    required this.sourceArn,
    this.sourceType,
  });

  factory TrialComponentSource.fromJson(Map<String, dynamic> json) {
    return TrialComponentSource(
      sourceArn: json['SourceArn'] as String,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceArn = this.sourceArn;
    final sourceType = this.sourceType;
    return {
      'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// Detailed information about the source of a trial component. Either
/// <code>ProcessingJob</code> or <code>TrainingJob</code> is returned.
class TrialComponentSourceDetail {
  /// Information about a processing job that's the source of a trial component.
  final ProcessingJob? processingJob;

  /// The Amazon Resource Name (ARN) of the source.
  final String? sourceArn;

  /// Information about a training job that's the source of a trial component.
  final TrainingJob? trainingJob;

  /// Information about a transform job that's the source of a trial component.
  final TransformJob? transformJob;

  TrialComponentSourceDetail({
    this.processingJob,
    this.sourceArn,
    this.trainingJob,
    this.transformJob,
  });

  factory TrialComponentSourceDetail.fromJson(Map<String, dynamic> json) {
    return TrialComponentSourceDetail(
      processingJob: json['ProcessingJob'] != null
          ? ProcessingJob.fromJson(
              json['ProcessingJob'] as Map<String, dynamic>)
          : null,
      sourceArn: json['SourceArn'] as String?,
      trainingJob: json['TrainingJob'] != null
          ? TrainingJob.fromJson(json['TrainingJob'] as Map<String, dynamic>)
          : null,
      transformJob: json['TransformJob'] != null
          ? TransformJob.fromJson(json['TransformJob'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final processingJob = this.processingJob;
    final sourceArn = this.sourceArn;
    final trainingJob = this.trainingJob;
    final transformJob = this.transformJob;
    return {
      if (processingJob != null) 'ProcessingJob': processingJob,
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (trainingJob != null) 'TrainingJob': trainingJob,
      if (transformJob != null) 'TransformJob': transformJob,
    };
  }
}

/// The status of the trial component.
class TrialComponentStatus {
  /// If the component failed, a message describing why.
  final String? message;

  /// The status of the trial component.
  final TrialComponentPrimaryStatus? primaryStatus;

  TrialComponentStatus({
    this.message,
    this.primaryStatus,
  });

  factory TrialComponentStatus.fromJson(Map<String, dynamic> json) {
    return TrialComponentStatus(
      message: json['Message'] as String?,
      primaryStatus:
          (json['PrimaryStatus'] as String?)?.toTrialComponentPrimaryStatus(),
    );
  }

  Map<String, dynamic> toJson() {
    final message = this.message;
    final primaryStatus = this.primaryStatus;
    return {
      if (message != null) 'Message': message,
      if (primaryStatus != null) 'PrimaryStatus': primaryStatus.toValue(),
    };
  }
}

/// A summary of the properties of a trial component. To get all the properties,
/// call the <a>DescribeTrialComponent</a> API and provide the
/// <code>TrialComponentName</code>.
class TrialComponentSummary {
  /// Who created the component.
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The name of the component as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialComponentName</code> is displayed.
  final String? displayName;

  /// When the component ended.
  final DateTime? endTime;

  /// Who last modified the component.
  final UserContext? lastModifiedBy;

  /// When the component was last modified.
  final DateTime? lastModifiedTime;

  /// When the component started.
  final DateTime? startTime;

  /// The status of the component. States include:
  ///
  /// <ul>
  /// <li>
  /// InProgress
  /// </li>
  /// <li>
  /// Completed
  /// </li>
  /// <li>
  /// Failed
  /// </li>
  /// </ul>
  final TrialComponentStatus? status;

  /// The ARN of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;
  final TrialComponentSource? trialComponentSource;

  TrialComponentSummary({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.endTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.startTime,
    this.status,
    this.trialComponentArn,
    this.trialComponentName,
    this.trialComponentSource,
  });

  factory TrialComponentSummary.fromJson(Map<String, dynamic> json) {
    return TrialComponentSummary(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      endTime: timeStampFromJson(json['EndTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      startTime: timeStampFromJson(json['StartTime']),
      status: json['Status'] != null
          ? TrialComponentStatus.fromJson(
              json['Status'] as Map<String, dynamic>)
          : null,
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
      trialComponentSource: json['TrialComponentSource'] != null
          ? TrialComponentSource.fromJson(
              json['TrialComponentSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final endTime = this.endTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final startTime = this.startTime;
    final status = this.status;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    final trialComponentSource = this.trialComponentSource;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (status != null) 'Status': status,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
      if (trialComponentSource != null)
        'TrialComponentSource': trialComponentSource,
    };
  }
}

/// The source of the trial.
class TrialSource {
  /// The Amazon Resource Name (ARN) of the source.
  final String sourceArn;

  /// The source job type.
  final String? sourceType;

  TrialSource({
    required this.sourceArn,
    this.sourceType,
  });

  factory TrialSource.fromJson(Map<String, dynamic> json) {
    return TrialSource(
      sourceArn: json['SourceArn'] as String,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceArn = this.sourceArn;
    final sourceType = this.sourceType;
    return {
      'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// A summary of the properties of a trial. To get the complete set of
/// properties, call the <a>DescribeTrial</a> API and provide the
/// <code>TrialName</code>.
class TrialSummary {
  /// When the trial was created.
  final DateTime? creationTime;

  /// The name of the trial as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialName</code> is displayed.
  final String? displayName;

  /// When the trial was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The name of the trial.
  final String? trialName;
  final TrialSource? trialSource;

  TrialSummary({
    this.creationTime,
    this.displayName,
    this.lastModifiedTime,
    this.trialArn,
    this.trialName,
    this.trialSource,
  });

  factory TrialSummary.fromJson(Map<String, dynamic> json) {
    return TrialSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      trialArn: json['TrialArn'] as String?,
      trialName: json['TrialName'] as String?,
      trialSource: json['TrialSource'] != null
          ? TrialSource.fromJson(json['TrialSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final lastModifiedTime = this.lastModifiedTime;
    final trialArn = this.trialArn;
    final trialName = this.trialName;
    final trialSource = this.trialSource;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialName != null) 'TrialName': trialName,
      if (trialSource != null) 'TrialSource': trialSource,
    };
  }
}

/// The job completion criteria.
class TuningJobCompletionCriteria {
  /// The value of the objective metric.
  final double targetObjectiveMetricValue;

  TuningJobCompletionCriteria({
    required this.targetObjectiveMetricValue,
  });

  factory TuningJobCompletionCriteria.fromJson(Map<String, dynamic> json) {
    return TuningJobCompletionCriteria(
      targetObjectiveMetricValue: json['TargetObjectiveMetricValue'] as double,
    );
  }

  Map<String, dynamic> toJson() {
    final targetObjectiveMetricValue = this.targetObjectiveMetricValue;
    return {
      'TargetObjectiveMetricValue': targetObjectiveMetricValue,
    };
  }
}

/// Metadata for a tuning step.
class TuningJobStepMetaData {
  /// The Amazon Resource Name (ARN) of the tuning job that was run by this step
  /// execution.
  final String? arn;

  TuningJobStepMetaData({
    this.arn,
  });

  factory TuningJobStepMetaData.fromJson(Map<String, dynamic> json) {
    return TuningJobStepMetaData(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Represents an amount of money in United States dollars.
class USD {
  /// The fractional portion, in cents, of the amount.
  final int? cents;

  /// The whole number of dollars in the amount.
  final int? dollars;

  /// Fractions of a cent, in tenths.
  final int? tenthFractionsOfACent;

  USD({
    this.cents,
    this.dollars,
    this.tenthFractionsOfACent,
  });

  factory USD.fromJson(Map<String, dynamic> json) {
    return USD(
      cents: json['Cents'] as int?,
      dollars: json['Dollars'] as int?,
      tenthFractionsOfACent: json['TenthFractionsOfACent'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final cents = this.cents;
    final dollars = this.dollars;
    final tenthFractionsOfACent = this.tenthFractionsOfACent;
    return {
      if (cents != null) 'Cents': cents,
      if (dollars != null) 'Dollars': dollars,
      if (tenthFractionsOfACent != null)
        'TenthFractionsOfACent': tenthFractionsOfACent,
    };
  }
}

/// Provided configuration information for the worker UI for a labeling job.
class UiConfig {
  /// The ARN of the worker task template used to render the worker UI and tools
  /// for labeling job tasks.
  ///
  /// Use this parameter when you are creating a labeling job for 3D point cloud
  /// and video fram labeling jobs. Use your labeling job task type to select one
  /// of the following ARNs and use it with this parameter when you create a
  /// labeling job. Replace <code>aws-region</code> with the Amazon Web Services
  /// region you are creating your labeling job in.
  ///
  /// <b>3D Point Cloud HumanTaskUiArns</b>
  ///
  /// Use this <code>HumanTaskUiArn</code> for 3D point cloud object detection and
  /// 3D point cloud object detection adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// Use this <code>HumanTaskUiArn</code> for 3D point cloud object tracking and
  /// 3D point cloud object tracking adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// Use this <code>HumanTaskUiArn</code> for 3D point cloud semantic
  /// segmentation and 3D point cloud semantic segmentation adjustment labeling
  /// jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame HumanTaskUiArns</b>
  ///
  /// Use this <code>HumanTaskUiArn</code> for video frame object detection and
  /// video frame object detection adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// Use this <code>HumanTaskUiArn</code> for video frame object tracking and
  /// video frame object tracking adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking</code>
  /// </li>
  /// </ul>
  final String? humanTaskUiArn;

  /// The Amazon S3 bucket location of the UI template, or worker task template.
  /// This is the template used to render the worker UI and tools for labeling job
  /// tasks. For more information about the contents of a UI template, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step2.html">
  /// Creating Your Custom Labeling Task Template</a>.
  final String? uiTemplateS3Uri;

  UiConfig({
    this.humanTaskUiArn,
    this.uiTemplateS3Uri,
  });

  factory UiConfig.fromJson(Map<String, dynamic> json) {
    return UiConfig(
      humanTaskUiArn: json['HumanTaskUiArn'] as String?,
      uiTemplateS3Uri: json['UiTemplateS3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiArn = this.humanTaskUiArn;
    final uiTemplateS3Uri = this.uiTemplateS3Uri;
    return {
      if (humanTaskUiArn != null) 'HumanTaskUiArn': humanTaskUiArn,
      if (uiTemplateS3Uri != null) 'UiTemplateS3Uri': uiTemplateS3Uri,
    };
  }
}

/// The Liquid template for the worker user interface.
class UiTemplate {
  /// The content of the Liquid template for the worker user interface.
  final String content;

  UiTemplate({
    required this.content,
  });

  factory UiTemplate.fromJson(Map<String, dynamic> json) {
    return UiTemplate(
      content: json['Content'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final content = this.content;
    return {
      'Content': content,
    };
  }
}

/// Container for user interface template information.
class UiTemplateInfo {
  /// The SHA-256 digest of the contents of the template.
  final String? contentSha256;

  /// The URL for the user interface template.
  final String? url;

  UiTemplateInfo({
    this.contentSha256,
    this.url,
  });

  factory UiTemplateInfo.fromJson(Map<String, dynamic> json) {
    return UiTemplateInfo(
      contentSha256: json['ContentSha256'] as String?,
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contentSha256 = this.contentSha256;
    final url = this.url;
    return {
      if (contentSha256 != null) 'ContentSha256': contentSha256,
      if (url != null) 'Url': url,
    };
  }
}

class UpdateActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  UpdateActionResponse({
    this.actionArn,
  });

  factory UpdateActionResponse.fromJson(Map<String, dynamic> json) {
    return UpdateActionResponse(
      actionArn: json['ActionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
    };
  }
}

class UpdateAppImageConfigResponse {
  /// The Amazon Resource Name (ARN) for the AppImageConfig.
  final String? appImageConfigArn;

  UpdateAppImageConfigResponse({
    this.appImageConfigArn,
  });

  factory UpdateAppImageConfigResponse.fromJson(Map<String, dynamic> json) {
    return UpdateAppImageConfigResponse(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
    };
  }
}

class UpdateArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  UpdateArtifactResponse({
    this.artifactArn,
  });

  factory UpdateArtifactResponse.fromJson(Map<String, dynamic> json) {
    return UpdateArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
    };
  }
}

class UpdateCodeRepositoryOutput {
  /// The ARN of the Git repository.
  final String codeRepositoryArn;

  UpdateCodeRepositoryOutput({
    required this.codeRepositoryArn,
  });

  factory UpdateCodeRepositoryOutput.fromJson(Map<String, dynamic> json) {
    return UpdateCodeRepositoryOutput(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
    };
  }
}

class UpdateContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  UpdateContextResponse({
    this.contextArn,
  });

  factory UpdateContextResponse.fromJson(Map<String, dynamic> json) {
    return UpdateContextResponse(
      contextArn: json['ContextArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
    };
  }
}

class UpdateDomainResponse {
  /// The Amazon Resource Name (ARN) of the domain.
  final String? domainArn;

  UpdateDomainResponse({
    this.domainArn,
  });

  factory UpdateDomainResponse.fromJson(Map<String, dynamic> json) {
    return UpdateDomainResponse(
      domainArn: json['DomainArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainArn = this.domainArn;
    return {
      if (domainArn != null) 'DomainArn': domainArn,
    };
  }
}

class UpdateEndpointOutput {
  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  UpdateEndpointOutput({
    required this.endpointArn,
  });

  factory UpdateEndpointOutput.fromJson(Map<String, dynamic> json) {
    return UpdateEndpointOutput(
      endpointArn: json['EndpointArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointArn = this.endpointArn;
    return {
      'EndpointArn': endpointArn,
    };
  }
}

class UpdateEndpointWeightsAndCapacitiesOutput {
  /// The Amazon Resource Name (ARN) of the updated endpoint.
  final String endpointArn;

  UpdateEndpointWeightsAndCapacitiesOutput({
    required this.endpointArn,
  });

  factory UpdateEndpointWeightsAndCapacitiesOutput.fromJson(
      Map<String, dynamic> json) {
    return UpdateEndpointWeightsAndCapacitiesOutput(
      endpointArn: json['EndpointArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointArn = this.endpointArn;
    return {
      'EndpointArn': endpointArn,
    };
  }
}

class UpdateExperimentResponse {
  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  UpdateExperimentResponse({
    this.experimentArn,
  });

  factory UpdateExperimentResponse.fromJson(Map<String, dynamic> json) {
    return UpdateExperimentResponse(
      experimentArn: json['ExperimentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentArn = this.experimentArn;
    return {
      if (experimentArn != null) 'ExperimentArn': experimentArn,
    };
  }
}

class UpdateImageResponse {
  /// The Amazon Resource Name (ARN) of the image.
  final String? imageArn;

  UpdateImageResponse({
    this.imageArn,
  });

  factory UpdateImageResponse.fromJson(Map<String, dynamic> json) {
    return UpdateImageResponse(
      imageArn: json['ImageArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageArn = this.imageArn;
    return {
      if (imageArn != null) 'ImageArn': imageArn,
    };
  }
}

class UpdateModelPackageOutput {
  /// The Amazon Resource Name (ARN) of the model.
  final String modelPackageArn;

  UpdateModelPackageOutput({
    required this.modelPackageArn,
  });

  factory UpdateModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return UpdateModelPackageOutput(
      modelPackageArn: json['ModelPackageArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageArn = this.modelPackageArn;
    return {
      'ModelPackageArn': modelPackageArn,
    };
  }
}

class UpdateMonitoringScheduleResponse {
  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  UpdateMonitoringScheduleResponse({
    required this.monitoringScheduleArn,
  });

  factory UpdateMonitoringScheduleResponse.fromJson(Map<String, dynamic> json) {
    return UpdateMonitoringScheduleResponse(
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleArn = this.monitoringScheduleArn;
    return {
      'MonitoringScheduleArn': monitoringScheduleArn,
    };
  }
}

class UpdateNotebookInstanceLifecycleConfigOutput {
  UpdateNotebookInstanceLifecycleConfigOutput();

  factory UpdateNotebookInstanceLifecycleConfigOutput.fromJson(
      Map<String, dynamic> _) {
    return UpdateNotebookInstanceLifecycleConfigOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class UpdateNotebookInstanceOutput {
  UpdateNotebookInstanceOutput();

  factory UpdateNotebookInstanceOutput.fromJson(Map<String, dynamic> _) {
    return UpdateNotebookInstanceOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class UpdatePipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the updated pipeline execution.
  final String? pipelineExecutionArn;

  UpdatePipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory UpdatePipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return UpdatePipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

class UpdatePipelineResponse {
  /// The Amazon Resource Name (ARN) of the updated pipeline.
  final String? pipelineArn;

  UpdatePipelineResponse({
    this.pipelineArn,
  });

  factory UpdatePipelineResponse.fromJson(Map<String, dynamic> json) {
    return UpdatePipelineResponse(
      pipelineArn: json['PipelineArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineArn = this.pipelineArn;
    return {
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
    };
  }
}

class UpdateTrainingJobResponse {
  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  UpdateTrainingJobResponse({
    required this.trainingJobArn,
  });

  factory UpdateTrainingJobResponse.fromJson(Map<String, dynamic> json) {
    return UpdateTrainingJobResponse(
      trainingJobArn: json['TrainingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobArn = this.trainingJobArn;
    return {
      'TrainingJobArn': trainingJobArn,
    };
  }
}

class UpdateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  UpdateTrialComponentResponse({
    this.trialComponentArn,
  });

  factory UpdateTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return UpdateTrialComponentResponse(
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

class UpdateTrialResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  UpdateTrialResponse({
    this.trialArn,
  });

  factory UpdateTrialResponse.fromJson(Map<String, dynamic> json) {
    return UpdateTrialResponse(
      trialArn: json['TrialArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
    };
  }
}

class UpdateUserProfileResponse {
  /// The user profile Amazon Resource Name (ARN).
  final String? userProfileArn;

  UpdateUserProfileResponse({
    this.userProfileArn,
  });

  factory UpdateUserProfileResponse.fromJson(Map<String, dynamic> json) {
    return UpdateUserProfileResponse(
      userProfileArn: json['UserProfileArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final userProfileArn = this.userProfileArn;
    return {
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
    };
  }
}

class UpdateWorkforceResponse {
  /// A single private workforce. You can create one private work force in each
  /// Amazon Web Services Region. By default, any workforce-related API operation
  /// used in a specific region will apply to the workforce created in that
  /// region. To learn how to create a private workforce, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create
  /// a Private Workforce</a>.
  final Workforce workforce;

  UpdateWorkforceResponse({
    required this.workforce,
  });

  factory UpdateWorkforceResponse.fromJson(Map<String, dynamic> json) {
    return UpdateWorkforceResponse(
      workforce: Workforce.fromJson(json['Workforce'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workforce = this.workforce;
    return {
      'Workforce': workforce,
    };
  }
}

class UpdateWorkteamResponse {
  /// A <code>Workteam</code> object that describes the updated work team.
  final Workteam workteam;

  UpdateWorkteamResponse({
    required this.workteam,
  });

  factory UpdateWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return UpdateWorkteamResponse(
      workteam: Workteam.fromJson(json['Workteam'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workteam = this.workteam;
    return {
      'Workteam': workteam,
    };
  }
}

/// Information about the user who created or modified an experiment, trial, or
/// trial component.
class UserContext {
  /// The domain associated with the user.
  final String? domainId;

  /// The Amazon Resource Name (ARN) of the user's profile.
  final String? userProfileArn;

  /// The name of the user's profile.
  final String? userProfileName;

  UserContext({
    this.domainId,
    this.userProfileArn,
    this.userProfileName,
  });

  factory UserContext.fromJson(Map<String, dynamic> json) {
    return UserContext(
      domainId: json['DomainId'] as String?,
      userProfileArn: json['UserProfileArn'] as String?,
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainId = this.domainId;
    final userProfileArn = this.userProfileArn;
    final userProfileName = this.userProfileName;
    return {
      if (domainId != null) 'DomainId': domainId,
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

/// The user profile details.
class UserProfileDetails {
  /// The creation time.
  final DateTime? creationTime;

  /// The domain ID.
  final String? domainId;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The status.
  final UserProfileStatus? status;

  /// The user profile name.
  final String? userProfileName;

  UserProfileDetails({
    this.creationTime,
    this.domainId,
    this.lastModifiedTime,
    this.status,
    this.userProfileName,
  });

  factory UserProfileDetails.fromJson(Map<String, dynamic> json) {
    return UserProfileDetails(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      status: (json['Status'] as String?)?.toUserProfileStatus(),
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final lastModifiedTime = this.lastModifiedTime;
    final status = this.status;
    final userProfileName = this.userProfileName;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (status != null) 'Status': status.toValue(),
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

enum UserProfileSortKey {
  creationTime,
  lastModifiedTime,
}

extension on UserProfileSortKey {
  String toValue() {
    switch (this) {
      case UserProfileSortKey.creationTime:
        return 'CreationTime';
      case UserProfileSortKey.lastModifiedTime:
        return 'LastModifiedTime';
    }
  }
}

extension on String {
  UserProfileSortKey toUserProfileSortKey() {
    switch (this) {
      case 'CreationTime':
        return UserProfileSortKey.creationTime;
      case 'LastModifiedTime':
        return UserProfileSortKey.lastModifiedTime;
    }
    throw Exception('$this is not known in enum UserProfileSortKey');
  }
}

enum UserProfileStatus {
  deleting,
  failed,
  inService,
  pending,
  updating,
  updateFailed,
  deleteFailed,
}

extension on UserProfileStatus {
  String toValue() {
    switch (this) {
      case UserProfileStatus.deleting:
        return 'Deleting';
      case UserProfileStatus.failed:
        return 'Failed';
      case UserProfileStatus.inService:
        return 'InService';
      case UserProfileStatus.pending:
        return 'Pending';
      case UserProfileStatus.updating:
        return 'Updating';
      case UserProfileStatus.updateFailed:
        return 'Update_Failed';
      case UserProfileStatus.deleteFailed:
        return 'Delete_Failed';
    }
  }
}

extension on String {
  UserProfileStatus toUserProfileStatus() {
    switch (this) {
      case 'Deleting':
        return UserProfileStatus.deleting;
      case 'Failed':
        return UserProfileStatus.failed;
      case 'InService':
        return UserProfileStatus.inService;
      case 'Pending':
        return UserProfileStatus.pending;
      case 'Updating':
        return UserProfileStatus.updating;
      case 'Update_Failed':
        return UserProfileStatus.updateFailed;
      case 'Delete_Failed':
        return UserProfileStatus.deleteFailed;
    }
    throw Exception('$this is not known in enum UserProfileStatus');
  }
}

/// A collection of settings that apply to users of Amazon SageMaker Studio.
/// These settings are specified when the <code>CreateUserProfile</code> API is
/// called, and as <code>DefaultUserSettings</code> when the
/// <code>CreateDomain</code> API is called.
///
/// <code>SecurityGroups</code> is aggregated when specified in both calls. For
/// all other settings in <code>UserSettings</code>, the values specified in
/// <code>CreateUserProfile</code> take precedence over those specified in
/// <code>CreateDomain</code>.
class UserSettings {
  /// The execution role for the user.
  final String? executionRole;

  /// The Jupyter server's app settings.
  final JupyterServerAppSettings? jupyterServerAppSettings;

  /// The kernel gateway app settings.
  final KernelGatewayAppSettings? kernelGatewayAppSettings;

  /// The security groups for the Amazon Virtual Private Cloud (VPC) that Studio
  /// uses for communication.
  ///
  /// Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter
  /// is set to <code>PublicInternetOnly</code>.
  ///
  /// Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter
  /// is set to <code>VpcOnly</code>.
  ///
  /// Amazon SageMaker adds a security group to allow NFS traffic from SageMaker
  /// Studio. Therefore, the number of security groups that you can specify is one
  /// less than the maximum number shown.
  final List<String>? securityGroups;

  /// Specifies options for sharing SageMaker Studio notebooks.
  final SharingSettings? sharingSettings;

  /// The TensorBoard app settings.
  final TensorBoardAppSettings? tensorBoardAppSettings;

  UserSettings({
    this.executionRole,
    this.jupyterServerAppSettings,
    this.kernelGatewayAppSettings,
    this.securityGroups,
    this.sharingSettings,
    this.tensorBoardAppSettings,
  });

  factory UserSettings.fromJson(Map<String, dynamic> json) {
    return UserSettings(
      executionRole: json['ExecutionRole'] as String?,
      jupyterServerAppSettings: json['JupyterServerAppSettings'] != null
          ? JupyterServerAppSettings.fromJson(
              json['JupyterServerAppSettings'] as Map<String, dynamic>)
          : null,
      kernelGatewayAppSettings: json['KernelGatewayAppSettings'] != null
          ? KernelGatewayAppSettings.fromJson(
              json['KernelGatewayAppSettings'] as Map<String, dynamic>)
          : null,
      securityGroups: (json['SecurityGroups'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      sharingSettings: json['SharingSettings'] != null
          ? SharingSettings.fromJson(
              json['SharingSettings'] as Map<String, dynamic>)
          : null,
      tensorBoardAppSettings: json['TensorBoardAppSettings'] != null
          ? TensorBoardAppSettings.fromJson(
              json['TensorBoardAppSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final executionRole = this.executionRole;
    final jupyterServerAppSettings = this.jupyterServerAppSettings;
    final kernelGatewayAppSettings = this.kernelGatewayAppSettings;
    final securityGroups = this.securityGroups;
    final sharingSettings = this.sharingSettings;
    final tensorBoardAppSettings = this.tensorBoardAppSettings;
    return {
      if (executionRole != null) 'ExecutionRole': executionRole,
      if (jupyterServerAppSettings != null)
        'JupyterServerAppSettings': jupyterServerAppSettings,
      if (kernelGatewayAppSettings != null)
        'KernelGatewayAppSettings': kernelGatewayAppSettings,
      if (securityGroups != null) 'SecurityGroups': securityGroups,
      if (sharingSettings != null) 'SharingSettings': sharingSettings,
      if (tensorBoardAppSettings != null)
        'TensorBoardAppSettings': tensorBoardAppSettings,
    };
  }
}

/// Specifies a production variant property type for an Endpoint.
///
/// If you are updating an endpoint with the
/// <a>UpdateEndpointInput$RetainAllVariantProperties</a> option set to
/// <code>true</code>, the <code>VariantProperty</code> objects listed in
/// <a>UpdateEndpointInput$ExcludeRetainedVariantProperties</a> override the
/// existing variant properties of the endpoint.
class VariantProperty {
  /// The type of variant property. The supported values are:
  ///
  /// <ul>
  /// <li>
  /// <code>DesiredInstanceCount</code>: Overrides the existing variant instance
  /// counts using the <a>ProductionVariant$InitialInstanceCount</a> values in the
  /// <a>CreateEndpointConfigInput$ProductionVariants</a>.
  /// </li>
  /// <li>
  /// <code>DesiredWeight</code>: Overrides the existing variant weights using the
  /// <a>ProductionVariant$InitialVariantWeight</a> values in the
  /// <a>CreateEndpointConfigInput$ProductionVariants</a>.
  /// </li>
  /// <li>
  /// <code>DataCaptureConfig</code>: (Not currently supported.)
  /// </li>
  /// </ul>
  final VariantPropertyType variantPropertyType;

  VariantProperty({
    required this.variantPropertyType,
  });

  factory VariantProperty.fromJson(Map<String, dynamic> json) {
    return VariantProperty(
      variantPropertyType:
          (json['VariantPropertyType'] as String).toVariantPropertyType(),
    );
  }

  Map<String, dynamic> toJson() {
    final variantPropertyType = this.variantPropertyType;
    return {
      'VariantPropertyType': variantPropertyType.toValue(),
    };
  }
}

enum VariantPropertyType {
  desiredInstanceCount,
  desiredWeight,
  dataCaptureConfig,
}

extension on VariantPropertyType {
  String toValue() {
    switch (this) {
      case VariantPropertyType.desiredInstanceCount:
        return 'DesiredInstanceCount';
      case VariantPropertyType.desiredWeight:
        return 'DesiredWeight';
      case VariantPropertyType.dataCaptureConfig:
        return 'DataCaptureConfig';
    }
  }
}

extension on String {
  VariantPropertyType toVariantPropertyType() {
    switch (this) {
      case 'DesiredInstanceCount':
        return VariantPropertyType.desiredInstanceCount;
      case 'DesiredWeight':
        return VariantPropertyType.desiredWeight;
      case 'DataCaptureConfig':
        return VariantPropertyType.dataCaptureConfig;
    }
    throw Exception('$this is not known in enum VariantPropertyType');
  }
}

/// Specifies a VPC that your training jobs and hosted models have access to.
/// Control access to and from your training and model containers by configuring
/// the VPC. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect
/// Endpoints by Using an Amazon Virtual Private Cloud</a> and <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
/// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
class VpcConfig {
  /// The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security
  /// groups for the VPC that is specified in the <code>Subnets</code> field.
  final List<String> securityGroupIds;

  /// The ID of the subnets in the VPC to which you want to connect your training
  /// job or model. For information about the availability of specific instance
  /// types, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html">Supported
  /// Instance Types and Availability Zones</a>.
  final List<String> subnets;

  VpcConfig({
    required this.securityGroupIds,
    required this.subnets,
  });

  factory VpcConfig.fromJson(Map<String, dynamic> json) {
    return VpcConfig(
      securityGroupIds: (json['SecurityGroupIds'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
      subnets: (json['Subnets'] as List)
          .whereNotNull()
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    return {
      'SecurityGroupIds': securityGroupIds,
      'Subnets': subnets,
    };
  }
}

/// A single private workforce, which is automatically created when you create
/// your first private work team. You can create one private work force in each
/// Amazon Web Services Region. By default, any workforce-related API operation
/// used in a specific region will apply to the workforce created in that
/// region. To learn how to create a private workforce, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create
/// a Private Workforce</a>.
class Workforce {
  /// The Amazon Resource Name (ARN) of the private workforce.
  final String workforceArn;

  /// The name of the private workforce.
  final String workforceName;

  /// The configuration of an Amazon Cognito workforce. A single Cognito workforce
  /// is created using and corresponds to a single <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
  /// Amazon Cognito user pool</a>.
  final CognitoConfig? cognitoConfig;

  /// The date that the workforce is created.
  final DateTime? createDate;

  /// The most recent date that was used to successfully add one or more IP
  /// address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>)
  /// to a private workforce's allow list.
  final DateTime? lastUpdatedDate;

  /// The configuration of an OIDC Identity Provider (IdP) private workforce.
  final OidcConfigForResponse? oidcConfig;

  /// A list of one to ten IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>)
  /// to be added to the workforce allow list. By default, a workforce isn't
  /// restricted to specific IP addresses.
  final SourceIpConfig? sourceIpConfig;

  /// The subdomain for your OIDC Identity Provider.
  final String? subDomain;

  Workforce({
    required this.workforceArn,
    required this.workforceName,
    this.cognitoConfig,
    this.createDate,
    this.lastUpdatedDate,
    this.oidcConfig,
    this.sourceIpConfig,
    this.subDomain,
  });

  factory Workforce.fromJson(Map<String, dynamic> json) {
    return Workforce(
      workforceArn: json['WorkforceArn'] as String,
      workforceName: json['WorkforceName'] as String,
      cognitoConfig: json['CognitoConfig'] != null
          ? CognitoConfig.fromJson(
              json['CognitoConfig'] as Map<String, dynamic>)
          : null,
      createDate: timeStampFromJson(json['CreateDate']),
      lastUpdatedDate: timeStampFromJson(json['LastUpdatedDate']),
      oidcConfig: json['OidcConfig'] != null
          ? OidcConfigForResponse.fromJson(
              json['OidcConfig'] as Map<String, dynamic>)
          : null,
      sourceIpConfig: json['SourceIpConfig'] != null
          ? SourceIpConfig.fromJson(
              json['SourceIpConfig'] as Map<String, dynamic>)
          : null,
      subDomain: json['SubDomain'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workforceArn = this.workforceArn;
    final workforceName = this.workforceName;
    final cognitoConfig = this.cognitoConfig;
    final createDate = this.createDate;
    final lastUpdatedDate = this.lastUpdatedDate;
    final oidcConfig = this.oidcConfig;
    final sourceIpConfig = this.sourceIpConfig;
    final subDomain = this.subDomain;
    return {
      'WorkforceArn': workforceArn,
      'WorkforceName': workforceName,
      if (cognitoConfig != null) 'CognitoConfig': cognitoConfig,
      if (createDate != null) 'CreateDate': unixTimestampToJson(createDate),
      if (lastUpdatedDate != null)
        'LastUpdatedDate': unixTimestampToJson(lastUpdatedDate),
      if (oidcConfig != null) 'OidcConfig': oidcConfig,
      if (sourceIpConfig != null) 'SourceIpConfig': sourceIpConfig,
      if (subDomain != null) 'SubDomain': subDomain,
    };
  }
}

/// Provides details about a labeling work team.
class Workteam {
  /// A description of the work team.
  final String description;

  /// A list of <code>MemberDefinition</code> objects that contains objects that
  /// identify the workers that make up the work team.
  ///
  /// Workforces can be created using Amazon Cognito or your own OIDC Identity
  /// Provider (IdP). For private workforces created using Amazon Cognito use
  /// <code>CognitoMemberDefinition</code>. For workforces created using your own
  /// OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>.
  final List<MemberDefinition> memberDefinitions;

  /// The Amazon Resource Name (ARN) that identifies the work team.
  final String workteamArn;

  /// The name of the work team.
  final String workteamName;

  /// The date and time that the work team was created (timestamp).
  final DateTime? createDate;

  /// The date and time that the work team was last updated (timestamp).
  final DateTime? lastUpdatedDate;

  /// Configures SNS notifications of available or expiring work items for work
  /// teams.
  final NotificationConfiguration? notificationConfiguration;

  /// The Amazon Marketplace identifier for a vendor's work team.
  final List<String>? productListingIds;

  /// The URI of the labeling job's user interface. Workers open this URI to start
  /// labeling your data objects.
  final String? subDomain;

  /// The Amazon Resource Name (ARN) of the workforce.
  final String? workforceArn;

  Workteam({
    required this.description,
    required this.memberDefinitions,
    required this.workteamArn,
    required this.workteamName,
    this.createDate,
    this.lastUpdatedDate,
    this.notificationConfiguration,
    this.productListingIds,
    this.subDomain,
    this.workforceArn,
  });

  factory Workteam.fromJson(Map<String, dynamic> json) {
    return Workteam(
      description: json['Description'] as String,
      memberDefinitions: (json['MemberDefinitions'] as List)
          .whereNotNull()
          .map((e) => MemberDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      workteamArn: json['WorkteamArn'] as String,
      workteamName: json['WorkteamName'] as String,
      createDate: timeStampFromJson(json['CreateDate']),
      lastUpdatedDate: timeStampFromJson(json['LastUpdatedDate']),
      notificationConfiguration: json['NotificationConfiguration'] != null
          ? NotificationConfiguration.fromJson(
              json['NotificationConfiguration'] as Map<String, dynamic>)
          : null,
      productListingIds: (json['ProductListingIds'] as List?)
          ?.whereNotNull()
          .map((e) => e as String)
          .toList(),
      subDomain: json['SubDomain'] as String?,
      workforceArn: json['WorkforceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final description = this.description;
    final memberDefinitions = this.memberDefinitions;
    final workteamArn = this.workteamArn;
    final workteamName = this.workteamName;
    final createDate = this.createDate;
    final lastUpdatedDate = this.lastUpdatedDate;
    final notificationConfiguration = this.notificationConfiguration;
    final productListingIds = this.productListingIds;
    final subDomain = this.subDomain;
    final workforceArn = this.workforceArn;
    return {
      'Description': description,
      'MemberDefinitions': memberDefinitions,
      'WorkteamArn': workteamArn,
      'WorkteamName': workteamName,
      if (createDate != null) 'CreateDate': unixTimestampToJson(createDate),
      if (lastUpdatedDate != null)
        'LastUpdatedDate': unixTimestampToJson(lastUpdatedDate),
      if (notificationConfiguration != null)
        'NotificationConfiguration': notificationConfiguration,
      if (productListingIds != null) 'ProductListingIds': productListingIds,
      if (subDomain != null) 'SubDomain': subDomain,
      if (workforceArn != null) 'WorkforceArn': workforceArn,
    };
  }
}

class ConflictException extends _s.GenericAwsException {
  ConflictException({String? type, String? message})
      : super(type: type, code: 'ConflictException', message: message);
}

class ResourceInUse extends _s.GenericAwsException {
  ResourceInUse({String? type, String? message})
      : super(type: type, code: 'ResourceInUse', message: message);
}

class ResourceLimitExceeded extends _s.GenericAwsException {
  ResourceLimitExceeded({String? type, String? message})
      : super(type: type, code: 'ResourceLimitExceeded', message: message);
}

class ResourceNotFound extends _s.GenericAwsException {
  ResourceNotFound({String? type, String? message})
      : super(type: type, code: 'ResourceNotFound', message: message);
}

final _exceptionFns = <String, _s.AwsExceptionFn>{
  'ConflictException': (type, message) =>
      ConflictException(type: type, message: message),
  'ResourceInUse': (type, message) =>
      ResourceInUse(type: type, message: message),
  'ResourceLimitExceeded': (type, message) =>
      ResourceLimitExceeded(type: type, message: message),
  'ResourceNotFound': (type, message) =>
      ResourceNotFound(type: type, message: message),
};
