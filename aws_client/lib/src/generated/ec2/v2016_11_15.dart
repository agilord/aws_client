// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import 'dart:convert';
import 'dart:typed_data';

import '../../shared/shared.dart' as _s;
import '../../shared/shared.dart'
    show
        rfc822ToJson,
        iso8601ToJson,
        unixTimestampToJson,
        nonNullableTimeStampFromJson,
        timeStampFromJson;

export '../../shared/shared.dart' show AwsClientCredentials;

/// You can access the features of Amazon Elastic Compute Cloud (Amazon EC2)
/// programmatically. For more information, see the <a
/// href="https://docs.aws.amazon.com/ec2/latest/devguide">Amazon EC2 Developer
/// Guide</a>.
class Ec2 {
  Ec2({
    required String region,
    _s.AwsClientCredentials? credentials,
    _s.Client? client,
    String? endpointUrl,
  }) {
    print('$client$region$credentials$endpointUrl');
  }

  /// Accepts an Elastic IP address transfer. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#using-instance-addressing-eips-transfer-accept">Accept
  /// a transferred Elastic IP address</a> in the <i>Amazon Virtual Private
  /// Cloud User Guide</i>.
  ///
  /// Parameter [address] :
  /// The Elastic IP address you are accepting for transfer.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  Future<AcceptAddressTransferResult> acceptAddressTransfer({
    required String address,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts the Convertible Reserved Instance exchange quote described in the
  /// <a>GetReservedInstancesExchangeQuote</a> call.
  ///
  /// Parameter [reservedInstanceIds] :
  /// The IDs of the Convertible Reserved Instances to exchange for another
  /// Convertible Reserved Instance of the same or higher value.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [targetConfigurations] :
  /// The configuration of the target Convertible Reserved Instance to exchange
  /// for your current Convertible Reserved Instances.
  Future<AcceptReservedInstancesExchangeQuoteResult>
      acceptReservedInstancesExchangeQuote({
    required List<String> reservedInstanceIds,
    bool? dryRun,
    List<TargetConfigurationRequest>? targetConfigurations,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts a request to associate subnets with a transit gateway multicast
  /// domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets to associate with the transit gateway multicast
  /// domain.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<AcceptTransitGatewayMulticastDomainAssociationsResult>
      acceptTransitGatewayMulticastDomainAssociations({
    bool? dryRun,
    List<String>? subnetIds,
    String? transitGatewayAttachmentId,
    String? transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts a transit gateway peering attachment request. The peering
  /// attachment must be in the <code>pendingAcceptance</code> state.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptTransitGatewayPeeringAttachmentResult>
      acceptTransitGatewayPeeringAttachment({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts a request to attach a VPC to a transit gateway.
  ///
  /// The VPC attachment must be in the <code>pendingAcceptance</code> state.
  /// Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC
  /// attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to
  /// reject a VPC attachment request.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptTransitGatewayVpcAttachmentResult>
      acceptTransitGatewayVpcAttachment({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts connection requests to your VPC endpoint service.
  ///
  /// Parameter [serviceId] :
  /// The ID of the VPC endpoint service.
  ///
  /// Parameter [vpcEndpointIds] :
  /// The IDs of the interface VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptVpcEndpointConnectionsResult> acceptVpcEndpointConnections({
    required String serviceId,
    required List<String> vpcEndpointIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accept a VPC peering connection request. To accept a request, the VPC
  /// peering connection must be in the <code>pending-acceptance</code> state,
  /// and you must be the owner of the peer VPC. Use
  /// <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering
  /// connection requests.
  ///
  /// For an inter-Region VPC peering connection request, you must accept the
  /// VPC peering connection in the Region of the accepter VPC.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection. You must specify this parameter in
  /// the request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptVpcPeeringConnectionResult> acceptVpcPeeringConnection({
    required String vpcPeeringConnectionId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Advertises an IPv4 or IPv6 address range that is provisioned for use with
  /// your Amazon Web Services resources through bring your own IP addresses
  /// (BYOIP).
  ///
  /// You can perform this operation at most once every 10 seconds, even if you
  /// specify different address ranges each time.
  ///
  /// We recommend that you stop advertising the BYOIP CIDR from other locations
  /// when you advertise it from Amazon Web Services. To minimize down time, you
  /// can configure your Amazon Web Services resources to use an address from a
  /// BYOIP CIDR before it is advertised, and then simultaneously stop
  /// advertising it from the current location and start advertising it through
  /// Amazon Web Services.
  ///
  /// It can take a few minutes before traffic to the specified addresses starts
  /// routing to Amazon Web Services because of BGP propagation delays.
  ///
  /// To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.
  ///
  /// Parameter [cidr] :
  /// The address range, in CIDR notation. This must be the exact range that you
  /// provisioned. You can't advertise only a portion of the provisioned range.
  ///
  /// Parameter [asn] :
  /// The public 2-byte or 4-byte ASN that you want to advertise.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [networkBorderGroup] :
  /// If you have <a
  /// href="https://docs.aws.amazon.com/local-zones/latest/ug/how-local-zones-work.html">Local
  /// Zones</a> enabled, you can choose a network border group for Local Zones
  /// when you provision and advertise a BYOIPv4 CIDR. Choose the network border
  /// group carefully as the EIP and the Amazon Web Services resource it is
  /// associated with must reside in the same network border group.
  ///
  /// You can provision BYOIP address ranges to and advertise them in the
  /// following Local Zone network border groups:
  ///
  /// <ul>
  /// <li>
  /// us-east-1-dfw-2
  /// </li>
  /// <li>
  /// us-west-2-lax-1
  /// </li>
  /// <li>
  /// us-west-2-phx-2
  /// </li>
  /// </ul> <note>
  /// You cannot provision or advertise BYOIPv6 address ranges in Local Zones at
  /// this time.
  /// </note>
  Future<AdvertiseByoipCidrResult> advertiseByoipCidr({
    required String cidr,
    String? asn,
    bool? dryRun,
    String? networkBorderGroup,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allocates an Elastic IP address to your Amazon Web Services account. After
  /// you allocate the Elastic IP address you can associate it with an instance
  /// or network interface. After you release an Elastic IP address, it is
  /// released to the IP address pool and can be allocated to a different Amazon
  /// Web Services account.
  ///
  /// You can allocate an Elastic IP address from an address pool owned by
  /// Amazon Web Services or from an address pool created from a public IPv4
  /// address range that you have brought to Amazon Web Services for use with
  /// your Amazon Web Services resources using bring your own IP addresses
  /// (BYOIP). For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring
  /// Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// If you release an Elastic IP address, you might be able to recover it. You
  /// cannot recover an Elastic IP address that you released after it is
  /// allocated to another Amazon Web Services account. To attempt to recover an
  /// Elastic IP address that you released, specify it in this operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// You can allocate a carrier IP address which is a public IP address from a
  /// telecommunication carrier, to a network interface which resides in a
  /// subnet in a Wavelength Zone (for example an EC2 instance).
  ///
  /// Parameter [address] :
  /// The Elastic IP address to recover or an IPv4 address from an address pool.
  ///
  /// Parameter [customerOwnedIpv4Pool] :
  /// The ID of a customer-owned address pool. Use this parameter to let Amazon
  /// EC2 select an address from the address pool. Alternatively, specify a
  /// specific address from the address pool.
  ///
  /// Parameter [domain] :
  /// The network (<code>vpc</code>).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [networkBorderGroup] :
  /// A unique set of Availability Zones, Local Zones, or Wavelength Zones from
  /// which Amazon Web Services advertises IP addresses. Use this parameter to
  /// limit the IP address to this location. IP addresses cannot move between
  /// network border groups.
  ///
  /// Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">DescribeAvailabilityZones</a>
  /// to view the network border groups.
  ///
  /// Parameter [publicIpv4Pool] :
  /// The ID of an address pool that you own. Use this parameter to let Amazon
  /// EC2 select an address from the address pool. To specify a specific address
  /// from the address pool, use the <code>Address</code> parameter instead.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Elastic IP address.
  Future<AllocateAddressResult> allocateAddress({
    String? address,
    String? customerOwnedIpv4Pool,
    DomainType? domain,
    bool? dryRun,
    String? networkBorderGroup,
    String? publicIpv4Pool,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allocates a Dedicated Host to your account. At a minimum, specify the
  /// supported instance type or instance family, the Availability Zone in which
  /// to allocate the host, and the number of hosts to allocate.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to allocate the Dedicated Host.
  ///
  /// Parameter [assetIds] :
  /// The IDs of the Outpost hardware assets on which to allocate the Dedicated
  /// Hosts. Targeting specific hardware assets on an Outpost can help to
  /// minimize latency between your workloads. This parameter is supported only
  /// if you specify <b>OutpostArn</b>. If you are allocating the Dedicated
  /// Hosts in a Region, omit this parameter.
  ///
  /// <ul>
  /// <li>
  /// If you specify this parameter, you can omit <b>Quantity</b>. In this case,
  /// Amazon EC2 allocates a Dedicated Host on each specified hardware asset.
  /// </li>
  /// <li>
  /// If you specify both <b>AssetIds</b> and <b>Quantity</b>, then the value
  /// for <b>Quantity</b> must be equal to the number of asset IDs specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [autoPlacement] :
  /// Indicates whether the host accepts any untargeted instance launches that
  /// match its instance type configuration, or if it only accepts Host tenancy
  /// instance launches that specify its unique host ID. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding">
  /// Understanding auto-placement and affinity</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Default: <code>on</code>
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [hostMaintenance] :
  /// Indicates whether to enable or disable host maintenance for the Dedicated
  /// Host. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-maintenance.html">Host
  /// maintenance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [hostRecovery] :
  /// Indicates whether to enable or disable host recovery for the Dedicated
  /// Host. Host recovery is disabled by default. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html">
  /// Host recovery</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Default: <code>off</code>
  ///
  /// Parameter [instanceFamily] :
  /// Specifies the instance family to be supported by the Dedicated Hosts. If
  /// you specify an instance family, the Dedicated Hosts support multiple
  /// instance types within that instance family.
  ///
  /// If you want the Dedicated Hosts to support a specific instance type only,
  /// omit this parameter and specify <b>InstanceType</b> instead. You cannot
  /// specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.
  ///
  /// Parameter [instanceType] :
  /// Specifies the instance type to be supported by the Dedicated Hosts. If you
  /// specify an instance type, the Dedicated Hosts support instances of the
  /// specified instance type only.
  ///
  /// If you want the Dedicated Hosts to support multiple instance types in a
  /// specific instance family, omit this parameter and specify
  /// <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and
  /// <b>InstanceFamily</b> in the same request.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which
  /// to allocate the Dedicated Host. If you specify <b>OutpostArn</b>, you can
  /// optionally specify <b>AssetIds</b>.
  ///
  /// If you are allocating the Dedicated Host in a Region, omit this parameter.
  ///
  /// Parameter [quantity] :
  /// The number of Dedicated Hosts to allocate to your account with these
  /// parameters. If you are allocating the Dedicated Hosts on an Outpost, and
  /// you specify <b>AssetIds</b>, you can omit this parameter. In this case,
  /// Amazon EC2 allocates a Dedicated Host on each specified hardware asset. If
  /// you specify both <b>AssetIds</b> and <b>Quantity</b>, then the value that
  /// you specify for <b>Quantity</b> must be equal to the number of asset IDs
  /// specified.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Dedicated Host during creation.
  Future<AllocateHostsResult> allocateHosts({
    required String availabilityZone,
    List<String>? assetIds,
    AutoPlacement? autoPlacement,
    String? clientToken,
    HostMaintenance? hostMaintenance,
    HostRecovery? hostRecovery,
    String? instanceFamily,
    String? instanceType,
    String? outpostArn,
    int? quantity,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allocate a CIDR from an IPAM pool. The Region you use should be the IPAM
  /// pool locale. The locale is the Amazon Web Services Region where this IPAM
  /// pool is available for allocations.
  ///
  /// In IPAM, an allocation is a CIDR assignment from an IPAM pool to another
  /// IPAM pool or to a resource. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/allocate-cidrs-ipam.html">Allocate
  /// CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.
  /// <note>
  /// This action creates an allocation with strong consistency. The returned
  /// CIDR will not overlap with any other allocations from the same pool.
  /// </note>
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool from which you would like to allocate a CIDR.
  ///
  /// Parameter [allowedCidrs] :
  /// Include a particular CIDR range that can be returned by the pool. Allowed
  /// CIDRs are only allowed if using netmask length for allocation.
  ///
  /// Parameter [cidr] :
  /// The CIDR you would like to allocate from the IPAM pool. Note the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// If there is no DefaultNetmaskLength allocation rule set on the pool, you
  /// must specify either the NetmaskLength or the CIDR.
  /// </li>
  /// <li>
  /// If the DefaultNetmaskLength allocation rule is set on the pool, you can
  /// specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength
  /// allocation rule will be ignored.
  /// </li>
  /// </ul>
  /// Possible values: Any available IPv4 or IPv6 CIDR.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the allocation.
  ///
  /// Parameter [disallowedCidrs] :
  /// Exclude a particular CIDR range from being returned by the pool.
  /// Disallowed CIDRs are only allowed if using netmask length for allocation.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [netmaskLength] :
  /// The netmask length of the CIDR you would like to allocate from the IPAM
  /// pool. Note the following:
  ///
  /// <ul>
  /// <li>
  /// If there is no DefaultNetmaskLength allocation rule set on the pool, you
  /// must specify either the NetmaskLength or the CIDR.
  /// </li>
  /// <li>
  /// If the DefaultNetmaskLength allocation rule is set on the pool, you can
  /// specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength
  /// allocation rule will be ignored.
  /// </li>
  /// </ul>
  /// Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask
  /// lengths for IPv6 addresses are 0 - 128.
  ///
  /// Parameter [previewNextCidr] :
  /// A preview of the next available CIDR in a pool.
  Future<AllocateIpamPoolCidrResult> allocateIpamPoolCidr({
    required String ipamPoolId,
    List<String>? allowedCidrs,
    String? cidr,
    String? clientToken,
    String? description,
    List<String>? disallowedCidrs,
    bool? dryRun,
    int? netmaskLength,
    bool? previewNextCidr,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Applies a security group to the association between the target network and
  /// the Client VPN endpoint. This action replaces the existing security groups
  /// with the specified security groups.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of the security groups to apply to the associated target network.
  /// Up to 5 security groups can be applied to an associated target network.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC in which the associated target network is located.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ApplySecurityGroupsToClientVpnTargetNetworkResult>
      applySecurityGroupsToClientVpnTargetNetwork({
    required String clientVpnEndpointId,
    required List<String> securityGroupIds,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Assigns one or more IPv6 addresses to the specified network interface. You
  /// can specify one or more specific IPv6 addresses, or you can specify the
  /// number of IPv6 addresses to be automatically assigned from within the
  /// subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a
  /// network interface as you can assign private IPv4 addresses, and the limit
  /// varies per instance type. For information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP
  /// Addresses Per Network Interface Per Instance Type</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// You must specify either the IPv6 addresses or the IPv6 address count in
  /// the request.
  ///
  /// You can optionally use Prefix Delegation on the network interface. You
  /// must specify either the IPV6 Prefix Delegation prefixes, or the IPv6
  /// Prefix Delegation count. For information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
  /// Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [ipv6AddressCount] :
  /// The number of additional IPv6 addresses to assign to the network
  /// interface. The specified number of IPv6 addresses are assigned in addition
  /// to the existing IPv6 addresses that are already assigned to the network
  /// interface. Amazon EC2 automatically selects the IPv6 addresses from the
  /// subnet range. You can't use this option if specifying specific IPv6
  /// addresses.
  ///
  /// Parameter [ipv6Addresses] :
  /// The IPv6 addresses to be assigned to the network interface. You can't use
  /// this option if you're specifying a number of IPv6 addresses.
  ///
  /// Parameter [ipv6PrefixCount] :
  /// The number of IPv6 prefixes that Amazon Web Services automatically assigns
  /// to the network interface. You cannot use this option if you use the
  /// <code>Ipv6Prefixes</code> option.
  ///
  /// Parameter [ipv6Prefixes] :
  /// One or more IPv6 prefixes assigned to the network interface. You cannot
  /// use this option if you use the <code>Ipv6PrefixCount</code> option.
  Future<AssignIpv6AddressesResult> assignIpv6Addresses({
    required String networkInterfaceId,
    int? ipv6AddressCount,
    List<String>? ipv6Addresses,
    int? ipv6PrefixCount,
    List<String>? ipv6Prefixes,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Assigns one or more secondary private IP addresses to the specified
  /// network interface.
  ///
  /// You can specify one or more specific secondary IP addresses, or you can
  /// specify the number of secondary IP addresses to be automatically assigned
  /// within the subnet's CIDR block range. The number of secondary IP addresses
  /// that you can assign to an instance varies by instance type. For
  /// information about instance types, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more
  /// information about Elastic IP addresses, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// When you move a secondary private IP address to another network interface,
  /// any Elastic IP address that is associated with the IP address is also
  /// moved.
  ///
  /// Remapping an IP address is an asynchronous operation. When you move an IP
  /// address from one network interface to another, check
  /// <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance
  /// metadata to confirm that the remapping is complete.
  ///
  /// You must specify either the IP addresses or the IP address count in the
  /// request.
  ///
  /// You can optionally use Prefix Delegation on the network interface. You
  /// must specify either the IPv4 Prefix Delegation prefixes, or the IPv4
  /// Prefix Delegation count. For information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
  /// Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [allowReassignment] :
  /// Indicates whether to allow an IP address that is already assigned to
  /// another network interface or instance to be reassigned to the specified
  /// network interface.
  ///
  /// Parameter [ipv4PrefixCount] :
  /// The number of IPv4 prefixes that Amazon Web Services automatically assigns
  /// to the network interface. You cannot use this option if you use the
  /// <code>Ipv4 Prefixes</code> option.
  ///
  /// Parameter [ipv4Prefixes] :
  /// One or more IPv4 prefixes assigned to the network interface. You cannot
  /// use this option if you use the <code>Ipv4PrefixCount</code> option.
  ///
  /// Parameter [privateIpAddresses] :
  /// The IP addresses to be assigned as a secondary private IP address to the
  /// network interface. You can't specify this parameter when also specifying a
  /// number of secondary IP addresses.
  ///
  /// If you don't specify an IP address, Amazon EC2 automatically selects an IP
  /// address within the subnet range.
  ///
  /// Parameter [secondaryPrivateIpAddressCount] :
  /// The number of secondary IP addresses to assign to the network interface.
  /// You can't specify this parameter when also specifying private IP
  /// addresses.
  Future<AssignPrivateIpAddressesResult> assignPrivateIpAddresses({
    required String networkInterfaceId,
    bool? allowReassignment,
    int? ipv4PrefixCount,
    List<String>? ipv4Prefixes,
    List<String>? privateIpAddresses,
    int? secondaryPrivateIpAddressCount,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Assigns one or more private IPv4 addresses to a private NAT gateway. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-working-with">Work
  /// with NAT gateways</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [natGatewayId] :
  /// The ID of the NAT gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [privateIpAddressCount] :
  /// The number of private IP addresses to assign to the NAT gateway. You can't
  /// specify this parameter when also specifying private IP addresses.
  ///
  /// Parameter [privateIpAddresses] :
  /// The private IPv4 addresses you want to assign to the private NAT gateway.
  Future<AssignPrivateNatGatewayAddressResult> assignPrivateNatGatewayAddress({
    required String natGatewayId,
    bool? dryRun,
    int? privateIpAddressCount,
    List<String>? privateIpAddresses,
  }) async {
    _s.validateNumRange(
      'privateIpAddressCount',
      privateIpAddressCount,
      1,
      31,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates an Elastic IP address, or carrier IP address (for instances
  /// that are in subnets in Wavelength Zones) with an instance or a network
  /// interface. Before you can use an Elastic IP address, you must allocate it
  /// to your account.
  ///
  /// If the Elastic IP address is already associated with a different instance,
  /// it is disassociated from that instance and associated with the specified
  /// instance. If you associate an Elastic IP address with an instance that has
  /// an existing Elastic IP address, the existing address is disassociated from
  /// the instance, but remains allocated to your account.
  ///
  /// [Subnets in Wavelength Zones] You can associate an IP address from the
  /// telecommunication carrier to the instance or network interface.
  ///
  /// You cannot associate an Elastic IP address with an interface in a
  /// different network border group.
  /// <important>
  /// This is an idempotent operation. If you perform the operation more than
  /// once, Amazon EC2 doesn't return an error, and you may be charged for each
  /// time the Elastic IP address is remapped to the same instance. For more
  /// information, see the <i>Elastic IP Addresses</i> section of <a
  /// href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.
  /// </important>
  ///
  /// Parameter [allocationId] :
  /// The allocation ID. This is required.
  ///
  /// Parameter [allowReassociation] :
  /// Reassociation is automatic, but you can specify false to ensure the
  /// operation fails if the Elastic IP address is already associated with
  /// another resource.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance. The instance must have exactly one attached
  /// network interface. You can specify either the instance ID or the network
  /// interface ID, but not both.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface. If the instance has more than one network
  /// interface, you must specify a network interface ID.
  ///
  /// You can specify either the instance ID or the network interface ID, but
  /// not both.
  ///
  /// Parameter [privateIpAddress] :
  /// The primary or secondary private IP address to associate with the Elastic
  /// IP address. If no private IP address is specified, the Elastic IP address
  /// is associated with the primary private IP address.
  ///
  /// Parameter [publicIp] :
  /// Deprecated.
  Future<AssociateAddressResult> associateAddress({
    String? allocationId,
    bool? allowReassociation,
    bool? dryRun,
    String? instanceId,
    String? networkInterfaceId,
    String? privateIpAddress,
    String? publicIp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a target network with a Client VPN endpoint. A target network
  /// is a subnet in a VPC. You can associate multiple subnets from the same VPC
  /// with a Client VPN endpoint. You can associate only one subnet in each
  /// Availability Zone. We recommend that you associate at least two subnets to
  /// provide Availability Zone redundancy.
  ///
  /// If you specified a VPC when you created the Client VPN endpoint or if you
  /// have previous subnet associations, the specified subnet must be in the
  /// same VPC. To specify a subnet that's in a different VPC, you must first
  /// modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change
  /// the VPC that's associated with it.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet to associate with the Client VPN endpoint.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateClientVpnTargetNetworkResult>
      associateClientVpnTargetNetwork({
    required String clientVpnEndpointId,
    required String subnetId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a set of DHCP options (that you've previously created) with the
  /// specified VPC, or associates no DHCP options with the VPC.
  ///
  /// After you associate the options with the VPC, any existing instances and
  /// all new instances that you launch in that VPC use the options. You don't
  /// need to restart or relaunch the instances. They automatically pick up the
  /// changes within a few hours, depending on how frequently the instance
  /// renews its DHCP lease. You can explicitly renew the lease using the
  /// operating system on the instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// options sets</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [dhcpOptionsId] :
  /// The ID of the DHCP options set, or <code>default</code> to associate no
  /// DHCP options with the VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> associateDhcpOptions({
    required String dhcpOptionsId,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates an Identity and Access Management (IAM) role with an
  /// Certificate Manager (ACM) certificate. This enables the certificate to be
  /// used by the ACM for Nitro Enclaves application inside an enclave. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html">Certificate
  /// Manager for Nitro Enclaves</a> in the <i>Amazon Web Services Nitro
  /// Enclaves User Guide</i>.
  ///
  /// When the IAM role is associated with the ACM certificate, the certificate,
  /// certificate chain, and encrypted private key are placed in an Amazon S3
  /// location that only the associated IAM role can access. The private key of
  /// the certificate is encrypted with an Amazon Web Services managed key that
  /// has an attached attestation-based key policy.
  ///
  /// To enable the IAM role to access the Amazon S3 object, you must grant it
  /// permission to call <code>s3:GetObject</code> on the Amazon S3 bucket
  /// returned by the command. To enable the IAM role to access the KMS key, you
  /// must grant it permission to call <code>kms:Decrypt</code> on the KMS key
  /// returned by the command. For more information, see <a
  /// href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html#add-policy">
  /// Grant the role permission to access the certificate and encryption key</a>
  /// in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.
  ///
  /// Parameter [certificateArn] :
  /// The ARN of the ACM certificate with which to associate the IAM role.
  ///
  /// Parameter [roleArn] :
  /// The ARN of the IAM role to associate with the ACM certificate. You can
  /// associate up to 16 IAM roles with an ACM certificate.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateEnclaveCertificateIamRoleResult>
      associateEnclaveCertificateIamRole({
    required String certificateArn,
    required String roleArn,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates an IAM instance profile with a running or stopped instance. You
  /// cannot associate more than one IAM instance profile with an instance.
  ///
  /// Parameter [iamInstanceProfile] :
  /// The IAM instance profile.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  Future<AssociateIamInstanceProfileResult> associateIamInstanceProfile({
    required IamInstanceProfileSpecification iamInstanceProfile,
    required String instanceId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates one or more targets with an event window. Only one type of
  /// target (instance IDs, Dedicated Host IDs, or tags) can be specified with
  /// an event window.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define
  /// event windows for scheduled events</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [associationTarget] :
  /// One or more targets associated with the specified event window.
  ///
  /// Parameter [instanceEventWindowId] :
  /// The ID of the event window.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateInstanceEventWindowResult> associateInstanceEventWindow({
    required InstanceEventWindowAssociationRequest associationTarget,
    required String instanceEventWindowId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates your Autonomous System Number (ASN) with a BYOIP CIDR that you
  /// own in the same Amazon Web Services Region. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial:
  /// Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.
  ///
  /// After the association succeeds, the ASN is eligible for advertisement. You
  /// can view the association with <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeByoipCidrs.html">DescribeByoipCidrs</a>.
  /// You can advertise the CIDR with <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AdvertiseByoipCidr.html">AdvertiseByoipCidr</a>.
  ///
  /// Parameter [asn] :
  /// A public 2-byte or 4-byte ASN.
  ///
  /// Parameter [cidr] :
  /// The BYOIP CIDR you want to associate with an ASN.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateIpamByoasnResult> associateIpamByoasn({
    required String asn,
    required String cidr,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates an IPAM resource discovery with an Amazon VPC IPAM. A resource
  /// discovery is an IPAM component that enables IPAM to manage and monitor
  /// resources that belong to the owning account.
  ///
  /// Parameter [ipamId] :
  /// An IPAM ID.
  ///
  /// Parameter [ipamResourceDiscoveryId] :
  /// A resource discovery ID.
  ///
  /// Parameter [clientToken] :
  /// A client token.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// Tag specifications.
  Future<AssociateIpamResourceDiscoveryResult> associateIpamResourceDiscovery({
    required String ipamId,
    required String ipamResourceDiscoveryId,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates Elastic IP addresses (EIPs) and private IPv4 addresses with a
  /// public NAT gateway. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-working-with">Work
  /// with NAT gateways</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// By default, you can associate up to 2 Elastic IP addresses per public NAT
  /// gateway. You can increase the limit by requesting a quota adjustment. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-eips">Elastic
  /// IP address quotas</a> in the <i>Amazon VPC User Guide</i>.
  /// <important>
  /// When you associate an EIP or secondary EIPs with a public NAT gateway, the
  /// network border group of the EIPs must match the network border group of
  /// the Availability Zone (AZ) that the public NAT gateway is in. If it's not
  /// the same, the EIP will fail to associate. You can see the network border
  /// group for the subnet's AZ by viewing the details of the subnet. Similarly,
  /// you can view the network border group of an EIP by viewing the details of
  /// the EIP address. For more information about network border groups and
  /// EIPs, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#allocate-eip">Allocate
  /// an Elastic IP address</a> in the <i>Amazon VPC User Guide</i>.
  /// </important>
  ///
  /// Parameter [allocationIds] :
  /// The allocation IDs of EIPs that you want to associate with your NAT
  /// gateway.
  ///
  /// Parameter [natGatewayId] :
  /// The ID of the NAT gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [privateIpAddresses] :
  /// The private IPv4 addresses that you want to assign to the NAT gateway.
  Future<AssociateNatGatewayAddressResult> associateNatGatewayAddress({
    required List<String> allocationIds,
    required String natGatewayId,
    bool? dryRun,
    List<String>? privateIpAddresses,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a subnet in your VPC or an internet gateway or virtual private
  /// gateway attached to your VPC with a route table in your VPC. This
  /// association causes traffic from the subnet or gateway to be routed
  /// according to the routes in the route table. The action returns an
  /// association ID, which you need in order to disassociate the route table
  /// later. A route table can be associated with multiple subnets.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [gatewayId] :
  /// The ID of the internet gateway or virtual private gateway.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  Future<AssociateRouteTableResult> associateRouteTable({
    required String routeTableId,
    bool? dryRun,
    String? gatewayId,
    String? subnetId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a CIDR block with your subnet. You can only associate a single
  /// IPv6 CIDR block with your subnet.
  ///
  /// Parameter [subnetId] :
  /// The ID of your subnet.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 CIDR block for your subnet.
  ///
  /// Parameter [ipv6IpamPoolId] :
  /// An IPv6 IPAM pool ID.
  ///
  /// Parameter [ipv6NetmaskLength] :
  /// An IPv6 netmask length.
  Future<AssociateSubnetCidrBlockResult> associateSubnetCidrBlock({
    required String subnetId,
    String? ipv6CidrBlock,
    String? ipv6IpamPoolId,
    int? ipv6NetmaskLength,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified subnets and transit gateway attachments with the
  /// specified transit gateway multicast domain.
  ///
  /// The transit gateway attachment must be in the available state before you
  /// can add a resource. Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a>
  /// to see the state of the attachment.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets to associate with the transit gateway multicast
  /// domain.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment to associate with the transit
  /// gateway multicast domain.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateTransitGatewayMulticastDomainResult>
      associateTransitGatewayMulticastDomain({
    required List<String> subnetIds,
    required String transitGatewayAttachmentId,
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified transit gateway attachment with a transit gateway
  /// policy table.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment to associate with the policy
  /// table.
  ///
  /// Parameter [transitGatewayPolicyTableId] :
  /// The ID of the transit gateway policy table to associate with the transit
  /// gateway attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateTransitGatewayPolicyTableResult>
      associateTransitGatewayPolicyTable({
    required String transitGatewayAttachmentId,
    required String transitGatewayPolicyTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified attachment with the specified transit gateway
  /// route table. You can associate only one route table with an attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateTransitGatewayRouteTableResult>
      associateTransitGatewayRouteTable({
    required String transitGatewayAttachmentId,
    required String transitGatewayRouteTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a branch network interface with a trunk network interface.
  ///
  /// Before you create the association, run the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">create-network-interface</a>
  /// command and set <code>--interface-type</code> to <code>trunk</code>. You
  /// must also create a network interface for each branch network interface
  /// that you want to associate with the trunk network interface.
  ///
  /// Parameter [branchInterfaceId] :
  /// The ID of the branch network interface.
  ///
  /// Parameter [trunkInterfaceId] :
  /// The ID of the trunk network interface.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [greKey] :
  /// The application key. This applies to the GRE protocol.
  ///
  /// Parameter [vlanId] :
  /// The ID of the VLAN. This applies to the VLAN protocol.
  Future<AssociateTrunkInterfaceResult> associateTrunkInterface({
    required String branchInterfaceId,
    required String trunkInterfaceId,
    String? clientToken,
    bool? dryRun,
    int? greKey,
    int? vlanId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a CIDR block with your VPC. You can associate a secondary IPv4
  /// CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from
  /// an IPv6 address pool that you provisioned through bring your own IP
  /// addresses (<a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).
  ///
  /// You must specify one of the following in the request: an IPv4 CIDR block,
  /// an IPv6 pool, or an Amazon-provided IPv6 CIDR block.
  ///
  /// For more information about associating CIDR blocks with your VPC and
  /// applicable restrictions, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">IP
  /// addressing for your VPCs and subnets</a> in the <i>Amazon VPC User
  /// Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [amazonProvidedIpv6CidrBlock] :
  /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
  /// the VPC. You cannot specify the range of IPv6 addresses or the size of the
  /// CIDR block.
  ///
  /// Parameter [cidrBlock] :
  /// An IPv4 CIDR block to associate with the VPC.
  ///
  /// Parameter [ipv4IpamPoolId] :
  /// Associate a CIDR allocated from an IPv4 IPAM pool to a VPC. For more
  /// information about Amazon VPC IP Address Manager (IPAM), see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv4NetmaskLength] :
  /// The netmask length of the IPv4 CIDR you would like to associate from an
  /// Amazon VPC IP Address Manager (IPAM) pool. For more information about
  /// IPAM, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// An IPv6 CIDR block from the IPv6 address pool. You must also specify
  /// <code>Ipv6Pool</code> in the request.
  ///
  /// To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
  ///
  /// Parameter [ipv6CidrBlockNetworkBorderGroup] :
  /// The name of the location from which we advertise the IPV6 CIDR block. Use
  /// this parameter to limit the CIDR block to this location.
  ///
  /// You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code>
  /// to use this parameter.
  ///
  /// You can have one IPv6 CIDR block association per network border group.
  ///
  /// Parameter [ipv6IpamPoolId] :
  /// Associates a CIDR allocated from an IPv6 IPAM pool to a VPC. For more
  /// information about Amazon VPC IP Address Manager (IPAM), see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv6NetmaskLength] :
  /// The netmask length of the IPv6 CIDR you would like to associate from an
  /// Amazon VPC IP Address Manager (IPAM) pool. For more information about
  /// IPAM, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv6Pool] :
  /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
  Future<AssociateVpcCidrBlockResult> associateVpcCidrBlock({
    required String vpcId,
    bool? amazonProvidedIpv6CidrBlock,
    String? cidrBlock,
    String? ipv4IpamPoolId,
    int? ipv4NetmaskLength,
    String? ipv6CidrBlock,
    String? ipv6CidrBlockNetworkBorderGroup,
    String? ipv6IpamPoolId,
    int? ipv6NetmaskLength,
    String? ipv6Pool,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or
  /// more of the VPC security groups. You cannot link an EC2-Classic instance
  /// to more than one VPC at a time. You can only link an instance that's in
  /// the <code>running</code> state. An instance is automatically unlinked from
  /// a VPC when it's stopped - you can link it to the VPC again when you
  /// restart it.
  ///
  /// After you've linked an instance, you cannot change the VPC security groups
  /// that are associated with it. To change the security groups, you must first
  /// unlink the instance, and then link it again.
  ///
  /// Linking your instance to a VPC is sometimes referred to as
  /// <i>attaching</i> your instance.
  ///
  /// Parameter [groups] :
  /// The IDs of the security groups. You cannot specify security groups from a
  /// different VPC.
  ///
  /// Parameter [instanceId] :
  /// The ID of the EC2-Classic instance.
  ///
  /// Parameter [vpcId] :
  /// The ID of the ClassicLink-enabled VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AttachClassicLinkVpcResult> attachClassicLinkVpc({
    required List<String> groups,
    required String instanceId,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches an internet gateway or a virtual private gateway to a VPC,
  /// enabling connectivity between the internet and the VPC. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">Internet
  /// gateways</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [internetGatewayId] :
  /// The ID of the internet gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> attachInternetGateway({
    required String internetGatewayId,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches a network interface to an instance.
  ///
  /// Parameter [deviceIndex] :
  /// The index of the device for the network interface attachment.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [enaSrdSpecification] :
  /// Configures ENA Express for the network interface that this action attaches
  /// to the instance.
  ///
  /// Parameter [networkCardIndex] :
  /// The index of the network card. Some instance types support multiple
  /// network cards. The primary network interface must be assigned to network
  /// card index 0. The default is network card index 0.
  Future<AttachNetworkInterfaceResult> attachNetworkInterface({
    required int deviceIndex,
    required String instanceId,
    required String networkInterfaceId,
    bool? dryRun,
    EnaSrdSpecification? enaSrdSpecification,
    int? networkCardIndex,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches the specified Amazon Web Services Verified Access trust provider
  /// to the specified Amazon Web Services Verified Access instance.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  ///
  /// Parameter [verifiedAccessTrustProviderId] :
  /// The ID of the Verified Access trust provider.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AttachVerifiedAccessTrustProviderResult>
      attachVerifiedAccessTrustProvider({
    required String verifiedAccessInstanceId,
    required String verifiedAccessTrustProviderId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches an EBS volume to a running or stopped instance and exposes it to
  /// the instance with the specified device name.
  ///
  /// Encrypted EBS volumes must be attached to instances that support Amazon
  /// EBS encryption. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// After you attach an EBS volume, you must make it available. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-using-volumes.html">Make
  /// an EBS volume available for use</a>.
  ///
  /// If a volume has an Amazon Web Services Marketplace product code:
  ///
  /// <ul>
  /// <li>
  /// The volume can be attached only to a stopped instance.
  /// </li>
  /// <li>
  /// Amazon Web Services Marketplace product codes are copied from the volume
  /// to the instance.
  /// </li>
  /// <li>
  /// You must be subscribed to the product.
  /// </li>
  /// <li>
  /// The instance type and operating system of the instance must support the
  /// product. For example, you can't detach a volume from a Windows instance
  /// and attach it to a Linux instance.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-attaching-volume.html">Attach
  /// an Amazon EBS volume to an instance</a> in the <i>Amazon EBS User
  /// Guide</i>.
  ///
  /// Parameter [device] :
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [volumeId] :
  /// The ID of the EBS volume. The volume and instance must be within the same
  /// Availability Zone.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<VolumeAttachment> attachVolume({
    required String device,
    required String instanceId,
    required String volumeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches a virtual private gateway to a VPC. You can attach one virtual
  /// private gateway to one VPC at a time.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AttachVpnGatewayResult> attachVpnGateway({
    required String vpcId,
    required String vpnGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds an ingress authorization rule to a Client VPN endpoint. Ingress
  /// authorization rules act as firewall rules that grant access to networks.
  /// You must configure ingress authorization rules to enable clients to access
  /// resources in Amazon Web Services or on-premises networks.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [targetNetworkCidr] :
  /// The IPv4 address range, in CIDR notation, of the network for which access
  /// is being authorized.
  ///
  /// Parameter [accessGroupId] :
  /// The ID of the group to grant access to, for example, the Active Directory
  /// group or identity provider (IdP) group. Required if
  /// <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.
  ///
  /// Parameter [authorizeAllGroups] :
  /// Indicates whether to grant access to all clients. Specify
  /// <code>true</code> to grant all clients who successfully establish a VPN
  /// connection access to the network. Must be set to <code>true</code> if
  /// <code>AccessGroupId</code> is not specified.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// A brief description of the authorization rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AuthorizeClientVpnIngressResult> authorizeClientVpnIngress({
    required String clientVpnEndpointId,
    required String targetNetworkCidr,
    String? accessGroupId,
    bool? authorizeAllGroups,
    String? clientToken,
    String? description,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds the specified outbound (egress) rules to a security group.
  ///
  /// An outbound rule permits instances to send traffic to the specified IPv4
  /// or IPv6 address ranges, the IP address ranges specified by a prefix list,
  /// or the instances that are associated with a source security group. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html">Security
  /// group rules</a>.
  ///
  /// You must specify exactly one of the following destinations: an IPv4 or
  /// IPv6 address range, a prefix list, or a security group. You must specify a
  /// protocol for each rule (for example, TCP). If the protocol is TCP or UDP,
  /// you must also specify a port or port range. If the protocol is ICMP or
  /// ICMPv6, you must also specify the ICMP type and code.
  ///
  /// Rule changes are propagated to instances associated with the security
  /// group as quickly as possible. However, a small delay might occur.
  ///
  /// For examples of rules that you can add to security groups for specific
  /// access scenarios, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html">Security
  /// group rules for different use cases</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// For information about security group quotas, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon
  /// VPC quotas</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [cidrIp] :
  /// Not supported. Use IP permissions instead.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// Not supported. Use IP permissions instead.
  ///
  /// Parameter [ipPermissions] :
  /// The permissions for the security group rules.
  ///
  /// Parameter [ipProtocol] :
  /// Not supported. Use IP permissions instead.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// Not supported. Use IP permissions instead.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// Not supported. Use IP permissions instead.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags applied to the security group rule.
  ///
  /// Parameter [toPort] :
  /// Not supported. Use IP permissions instead.
  Future<AuthorizeSecurityGroupEgressResult> authorizeSecurityGroupEgress({
    required String groupId,
    String? cidrIp,
    bool? dryRun,
    int? fromPort,
    List<IpPermission>? ipPermissions,
    String? ipProtocol,
    String? sourceSecurityGroupName,
    String? sourceSecurityGroupOwnerId,
    List<TagSpecification>? tagSpecifications,
    int? toPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds the specified inbound (ingress) rules to a security group.
  ///
  /// An inbound rule permits instances to receive traffic from the specified
  /// IPv4 or IPv6 address range, the IP address ranges that are specified by a
  /// prefix list, or the instances that are associated with a destination
  /// security group. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html">Security
  /// group rules</a>.
  ///
  /// You must specify exactly one of the following sources: an IPv4 or IPv6
  /// address range, a prefix list, or a security group. You must specify a
  /// protocol for each rule (for example, TCP). If the protocol is TCP or UDP,
  /// you must also specify a port or port range. If the protocol is ICMP or
  /// ICMPv6, you must also specify the ICMP/ICMPv6 type and code.
  ///
  /// Rule changes are propagated to instances associated with the security
  /// group as quickly as possible. However, a small delay might occur.
  ///
  /// For examples of rules that you can add to security groups for specific
  /// access scenarios, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html">Security
  /// group rules for different use cases</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// For more information about security group quotas, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon
  /// VPC quotas</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [cidrIp] :
  /// The IPv4 address range, in CIDR format.
  ///
  /// To specify an IPv6 address range, use IP permissions instead.
  ///
  /// To specify multiple rules and descriptions for the rules, use IP
  /// permissions instead.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// If the protocol is TCP or UDP, this is the start of the port range. If the
  /// protocol is ICMP, this is the ICMP type or -1 (all ICMP types).
  ///
  /// To specify multiple rules and descriptions for the rules, use IP
  /// permissions instead.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [groupName] :
  /// [Default VPC] The name of the security group. For security groups for a
  /// default VPC you can specify either the ID or the name of the security
  /// group. For security groups for a nondefault VPC, you must specify the ID
  /// of the security group.
  ///
  /// Parameter [ipPermissions] :
  /// The permissions for the security group rules.
  ///
  /// Parameter [ipProtocol] :
  /// The IP protocol name (<code>tcp</code>, <code>udp</code>,
  /// <code>icmp</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>). To specify all protocols, use <code>-1</code>.
  ///
  /// To specify <code>icmpv6</code>, use IP permissions instead.
  ///
  /// If you specify a protocol other than one of the supported values, traffic
  /// is allowed on all ports, regardless of any ports that you specify.
  ///
  /// To specify multiple rules and descriptions for the rules, use IP
  /// permissions instead.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// [Default VPC] The name of the source security group.
  ///
  /// The rule grants full ICMP, UDP, and TCP access. To create a rule with a
  /// specific protocol and port range, specify a set of IP permissions instead.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// The Amazon Web Services account ID for the source security group, if the
  /// source security group is in a different account.
  ///
  /// The rule grants full ICMP, UDP, and TCP access. To create a rule with a
  /// specific protocol and port range, use IP permissions instead.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags applied to the security group rule.
  ///
  /// Parameter [toPort] :
  /// If the protocol is TCP or UDP, this is the end of the port range. If the
  /// protocol is ICMP, this is the ICMP code or -1 (all ICMP codes). If the
  /// start port is -1 (all ICMP types), then the end port must be -1 (all ICMP
  /// codes).
  ///
  /// To specify multiple rules and descriptions for the rules, use IP
  /// permissions instead.
  Future<AuthorizeSecurityGroupIngressResult> authorizeSecurityGroupIngress({
    String? cidrIp,
    bool? dryRun,
    int? fromPort,
    String? groupId,
    String? groupName,
    List<IpPermission>? ipPermissions,
    String? ipProtocol,
    String? sourceSecurityGroupName,
    String? sourceSecurityGroupOwnerId,
    List<TagSpecification>? tagSpecifications,
    int? toPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Bundles an Amazon instance store-backed Windows instance.
  ///
  /// During bundling, only the root device volume (C:\) is bundled. Data on
  /// other instance store volumes is not preserved.
  /// <note>
  /// This action is not applicable for Linux/Unix instances or Windows
  /// instances that are backed by Amazon EBS.
  /// </note>
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance to bundle.
  ///
  /// Default: None
  ///
  /// Parameter [storage] :
  /// The bucket in which to store the AMI. You can specify a bucket that you
  /// already own or a new bucket that Amazon EC2 creates on your behalf. If you
  /// specify a bucket that belongs to someone else, Amazon EC2 returns an
  /// error.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<BundleInstanceResult> bundleInstance({
    required String instanceId,
    required Storage storage,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels a bundling operation for an instance store-backed Windows
  /// instance.
  ///
  /// Parameter [bundleId] :
  /// The ID of the bundle task.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelBundleTaskResult> cancelBundleTask({
    required String bundleId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the specified Capacity Reservation, releases the reserved
  /// capacity, and changes the Capacity Reservation's state to
  /// <code>cancelled</code>.
  ///
  /// Instances running in the reserved capacity continue running until you stop
  /// them. Stopped instances that target the Capacity Reservation can no longer
  /// launch. Modify these instances to either target a different Capacity
  /// Reservation, launch On-Demand Instance capacity, or run in any open
  /// Capacity Reservation that has matching attributes and sufficient capacity.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation to be cancelled.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelCapacityReservationResult> cancelCapacityReservation({
    required String capacityReservationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels one or more Capacity Reservation Fleets. When you cancel a
  /// Capacity Reservation Fleet, the following happens:
  ///
  /// <ul>
  /// <li>
  /// The Capacity Reservation Fleet's status changes to <code>cancelled</code>.
  /// </li>
  /// <li>
  /// The individual Capacity Reservations in the Fleet are cancelled. Instances
  /// running in the Capacity Reservations at the time of cancelling the Fleet
  /// continue to run in shared capacity.
  /// </li>
  /// <li>
  /// The Fleet stops creating new Capacity Reservations.
  /// </li>
  /// </ul>
  ///
  /// Parameter [capacityReservationFleetIds] :
  /// The IDs of the Capacity Reservation Fleets to cancel.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelCapacityReservationFleetsResult>
      cancelCapacityReservationFleets({
    required List<String> capacityReservationFleetIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels an active conversion task. The task can be the import of an
  /// instance or volume. The action removes all artifacts of the conversion,
  /// including a partially uploaded volume or instance. If the conversion is
  /// complete or is in the process of transferring the final disk image, the
  /// command fails and returns an exception.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing
  /// a Virtual Machine Using the Amazon EC2 CLI</a>.
  ///
  /// Parameter [conversionTaskId] :
  /// The ID of the conversion task.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [reasonMessage] :
  /// The reason for canceling the conversion task.
  Future<void> cancelConversionTask({
    required String conversionTaskId,
    bool? dryRun,
    String? reasonMessage,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels an active export task. The request removes all artifacts of the
  /// export, including any partially-created Amazon S3 objects. If the export
  /// task is complete or is in the process of transferring the final disk
  /// image, the command fails and returns an error.
  ///
  /// Parameter [exportTaskId] :
  /// The ID of the export task. This is the ID returned by the
  /// <code>CreateInstanceExportTask</code> and <code>ExportImage</code>
  /// operations.
  Future<void> cancelExportTask({
    required String exportTaskId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes your Amazon Web Services account from the launch permissions for
  /// the specified AMI. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cancel-sharing-an-AMI.html">
  /// Cancel having an AMI shared with your Amazon Web Services account</a> in
  /// the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI that was shared with your Amazon Web Services account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelImageLaunchPermissionResult> cancelImageLaunchPermission({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels an in-process import virtual machine or import snapshot task.
  ///
  /// Parameter [cancelReason] :
  /// The reason for canceling the task.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [importTaskId] :
  /// The ID of the import image or import snapshot task to be canceled.
  Future<CancelImportTaskResult> cancelImportTask({
    String? cancelReason,
    bool? dryRun,
    String? importTaskId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the specified Reserved Instance listing in the Reserved Instance
  /// Marketplace.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [reservedInstancesListingId] :
  /// The ID of the Reserved Instance listing.
  Future<CancelReservedInstancesListingResult> cancelReservedInstancesListing({
    required String reservedInstancesListingId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the specified Spot Fleet requests.
  ///
  /// After you cancel a Spot Fleet request, the Spot Fleet launches no new
  /// instances.
  ///
  /// You must also specify whether a canceled Spot Fleet request should
  /// terminate its instances. If you choose to terminate the instances, the
  /// Spot Fleet request enters the <code>cancelled_terminating</code> state.
  /// Otherwise, the Spot Fleet request enters the
  /// <code>cancelled_running</code> state and the instances continue to run
  /// until they are interrupted or you terminate them manually.
  /// <p class="title"> <b>Restrictions</b>
  ///
  /// <ul>
  /// <li>
  /// You can delete up to 100 fleets in a single request. If you exceed the
  /// specified number, no fleets are deleted.
  /// </li>
  /// </ul>
  ///
  /// Parameter [spotFleetRequestIds] :
  /// The IDs of the Spot Fleet requests.
  ///
  /// Constraint: You can specify up to 100 IDs in a single request.
  ///
  /// Parameter [terminateInstances] :
  /// Indicates whether to terminate the associated instances when the Spot
  /// Fleet request is canceled. The default is to terminate the instances.
  ///
  /// To let the instances continue to run after the Spot Fleet request is
  /// canceled, specify <code>no-terminate-instances</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelSpotFleetRequestsResponse> cancelSpotFleetRequests({
    required List<String> spotFleetRequestIds,
    required bool terminateInstances,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels one or more Spot Instance requests.
  /// <important>
  /// Canceling a Spot Instance request does not terminate running Spot
  /// Instances associated with the request.
  /// </important>
  ///
  /// Parameter [spotInstanceRequestIds] :
  /// The IDs of the Spot Instance requests.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelSpotInstanceRequestsResult> cancelSpotInstanceRequests({
    required List<String> spotInstanceRequestIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Determines whether a product code is associated with an instance. This
  /// action can only be used by the owner of the product code. It is useful
  /// when a product code owner must verify whether another user's instance is
  /// eligible for support.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [productCode] :
  /// The product code. This must be a product code that you own.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ConfirmProductInstanceResult> confirmProductInstance({
    required String instanceId,
    required String productCode,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Copies the specified Amazon FPGA Image (AFI) to the current Region.
  ///
  /// Parameter [sourceFpgaImageId] :
  /// The ID of the source AFI.
  ///
  /// Parameter [sourceRegion] :
  /// The Region that contains the source AFI.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description for the new AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [name] :
  /// The name for the new AFI. The default is the name of the source AFI.
  Future<CopyFpgaImageResult> copyFpgaImage({
    required String sourceFpgaImageId,
    required String sourceRegion,
    String? clientToken,
    String? description,
    bool? dryRun,
    String? name,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Initiates the copy of an AMI. You can copy an AMI from one Region to
  /// another, or from a Region to an Outpost. You can't copy an AMI from an
  /// Outpost to a Region, from one Outpost to another, or within the same
  /// Outpost. To copy an AMI to another partition, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.
  ///
  /// To copy an AMI from one Region to another, specify the source Region using
  /// the <b>SourceRegion</b> parameter, and specify the destination Region
  /// using its endpoint. Copies of encrypted backing snapshots for the AMI are
  /// encrypted. Copies of unencrypted backing snapshots remain unencrypted,
  /// unless you set <code>Encrypted</code> during the copy operation. You
  /// cannot create an unencrypted copy of an encrypted backing snapshot.
  ///
  /// To copy an AMI from a Region to an Outpost, specify the source Region
  /// using the <b>SourceRegion</b> parameter, and specify the ARN of the
  /// destination Outpost using <b>DestinationOutpostArn</b>. Backing snapshots
  /// copied to an Outpost are encrypted by default using the default encryption
  /// key for the Region, or a different key that you specify in the request
  /// using <b>KmsKeyId</b>. Outposts do not support unencrypted snapshots. For
  /// more information, <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#ami">
  /// Amazon EBS local snapshots on Outposts</a> in the <i>Amazon EBS User
  /// Guide</i>.
  ///
  /// For more information about the prerequisites and limits when copying an
  /// AMI, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copy
  /// an AMI</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [name] :
  /// The name of the new AMI in the destination Region.
  ///
  /// Parameter [sourceImageId] :
  /// The ID of the AMI to copy.
  ///
  /// Parameter [sourceRegion] :
  /// The name of the Region that contains the AMI to copy.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure idempotency of the
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a> in the <i>Amazon EC2 API Reference</i>.
  ///
  /// Parameter [copyImageTags] :
  /// Indicates whether to include your user-defined AMI tags when copying the
  /// AMI.
  ///
  /// The following tags will not be copied:
  ///
  /// <ul>
  /// <li>
  /// System tags (prefixed with <code>aws:</code>)
  /// </li>
  /// <li>
  /// For public and shared AMIs, user-defined tags that are attached by other
  /// Amazon Web Services accounts
  /// </li>
  /// </ul>
  /// Default: Your user-defined AMI tags are not copied.
  ///
  /// Parameter [description] :
  /// A description for the new AMI in the destination Region.
  ///
  /// Parameter [destinationOutpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI.
  /// Only specify this parameter when copying an AMI from an Amazon Web
  /// Services Region to an Outpost. The AMI must be in the Region of the
  /// destination Outpost. You cannot copy an AMI from an Outpost to a Region,
  /// from one Outpost to another, or within the same Outpost.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#copy-amis">Copy
  /// AMIs from an Amazon Web Services Region to an Outpost</a> in the <i>Amazon
  /// EBS User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the destination snapshots of the copied image should be
  /// encrypted. You can encrypt a copy of an unencrypted snapshot, but you
  /// cannot create an unencrypted copy of an encrypted snapshot. The default
  /// KMS key for Amazon EBS is used unless you specify a non-default Key
  /// Management Service (KMS) KMS key using <code>KmsKeyId</code>. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the symmetric Key Management Service (KMS) KMS key to
  /// use when creating encrypted volumes. If this parameter is not specified,
  /// your Amazon Web Services managed KMS key for Amazon EBS is used. If you
  /// specify a KMS key, you must also set the encrypted state to
  /// <code>true</code>.
  ///
  /// You can specify a KMS key using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
  /// </li>
  /// </ul>
  /// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
  /// if you specify an identifier that is not valid, the action can appear to
  /// complete, but eventually fails.
  ///
  /// The specified KMS key must exist in the destination Region.
  ///
  /// Amazon EBS does not support asymmetric KMS keys.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new AMI and new snapshots. You can tag the AMI,
  /// the snapshots, or both.
  ///
  /// <ul>
  /// <li>
  /// To tag the new AMI, the value for <code>ResourceType</code> must be
  /// <code>image</code>.
  /// </li>
  /// <li>
  /// To tag the new snapshots, the value for <code>ResourceType</code> must be
  /// <code>snapshot</code>. The same tag is applied to all the new snapshots.
  /// </li>
  /// </ul>
  /// If you specify other values for <code>ResourceType</code>, the request
  /// fails.
  ///
  /// To tag an AMI or snapshot after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  Future<CopyImageResult> copyImage({
    required String name,
    required String sourceImageId,
    required String sourceRegion,
    String? clientToken,
    bool? copyImageTags,
    String? description,
    String? destinationOutpostArn,
    bool? dryRun,
    bool? encrypted,
    String? kmsKeyId,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Copies a point-in-time snapshot of an EBS volume and stores it in Amazon
  /// S3. You can copy a snapshot within the same Region, from one Region to
  /// another, or from a Region to an Outpost. You can't copy a snapshot from an
  /// Outpost to a Region, from one Outpost to another, or within the same
  /// Outpost.
  ///
  /// You can use the snapshot to create EBS volumes or Amazon Machine Images
  /// (AMIs).
  ///
  /// When copying snapshots to a Region, copies of encrypted EBS snapshots
  /// remain encrypted. Copies of unencrypted snapshots remain unencrypted,
  /// unless you enable encryption for the snapshot copy operation. By default,
  /// encrypted snapshot copies use the default Key Management Service (KMS) KMS
  /// key; however, you can specify a different KMS key. To copy an encrypted
  /// snapshot that has been shared from another account, you must have
  /// permissions for the KMS key used to encrypt the snapshot.
  ///
  /// Snapshots copied to an Outpost are encrypted by default using the default
  /// encryption key for the Region, or a different key that you specify in the
  /// request using <b>KmsKeyId</b>. Outposts do not support unencrypted
  /// snapshots. For more information, <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#ami">
  /// Amazon EBS local snapshots on Outposts</a> in the <i>Amazon EBS User
  /// Guide</i>.
  ///
  /// Snapshots created by copying another snapshot have an arbitrary volume ID
  /// that should not be used for any purpose.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-copy-snapshot.html">Copy
  /// an Amazon EBS snapshot</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [sourceRegion] :
  /// The ID of the Region that contains the snapshot to be copied.
  ///
  /// Parameter [sourceSnapshotId] :
  /// The ID of the EBS snapshot to copy.
  ///
  /// Parameter [description] :
  /// A description for the EBS snapshot.
  ///
  /// Parameter [destinationOutpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost to which to copy the
  /// snapshot. Only specify this parameter when copying a snapshot from an
  /// Amazon Web Services Region to an Outpost. The snapshot must be in the
  /// Region for the destination Outpost. You cannot copy a snapshot from an
  /// Outpost to a Region, from one Outpost to another, or within the same
  /// Outpost.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#copy-snapshots">
  /// Copy snapshots from an Amazon Web Services Region to an Outpost</a> in the
  /// <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [destinationRegion] :
  /// The destination Region to use in the <code>PresignedUrl</code> parameter
  /// of a snapshot copy operation. This parameter is only valid for specifying
  /// the destination Region in a <code>PresignedUrl</code> parameter, where it
  /// is required.
  ///
  /// The snapshot copy is sent to the regional endpoint that you sent the HTTP
  /// request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With
  /// the CLI, this is specified using the <code>--region</code> parameter or
  /// the default Region in your Amazon Web Services configuration file.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// To encrypt a copy of an unencrypted snapshot if encryption by default is
  /// not enabled, enable encryption using this parameter. Otherwise, omit this
  /// parameter. Encrypted snapshots are encrypted, even if you omit this
  /// parameter and encryption by default is not enabled. You cannot set this
  /// parameter to false. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the Key Management Service (KMS) KMS key to use for
  /// Amazon EBS encryption. If this parameter is not specified, your KMS key
  /// for Amazon EBS is used. If <code>KmsKeyId</code> is specified, the
  /// encrypted state must be <code>true</code>.
  ///
  /// You can specify the KMS key using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
  /// </li>
  /// </ul>
  /// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
  /// if you specify an ID, alias, or ARN that is not valid, the action can
  /// appear to complete, but eventually fails.
  ///
  /// Parameter [presignedUrl] :
  /// When you copy an encrypted source snapshot using the Amazon EC2 Query API,
  /// you must supply a pre-signed URL. This parameter is optional for
  /// unencrypted snapshots. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html">Query
  /// requests</a>.
  ///
  /// The <code>PresignedUrl</code> should use the snapshot source endpoint, the
  /// <code>CopySnapshot</code> action, and include the
  /// <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and
  /// <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code>
  /// must be signed using Amazon Web Services Signature Version 4. Because EBS
  /// snapshots are stored in Amazon S3, the signing algorithm for this
  /// parameter uses the same logic that is described in <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating
  /// Requests: Using Query Parameters (Amazon Web Services Signature Version
  /// 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An
  /// invalid or improperly signed <code>PresignedUrl</code> will cause the copy
  /// operation to fail asynchronously, and the snapshot will move to an
  /// <code>error</code> state.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new snapshot.
  Future<CopySnapshotResult> copySnapshot({
    required String sourceRegion,
    required String sourceSnapshotId,
    String? description,
    String? destinationOutpostArn,
    String? destinationRegion,
    bool? dryRun,
    bool? encrypted,
    String? kmsKeyId,
    String? presignedUrl,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a new Capacity Reservation with the specified attributes.
  ///
  /// Capacity Reservations enable you to reserve capacity for your Amazon EC2
  /// instances in a specific Availability Zone for any duration. This gives you
  /// the flexibility to selectively add capacity reservations and still get the
  /// Regional RI discounts for that usage. By creating Capacity Reservations,
  /// you ensure that you always have access to Amazon EC2 capacity when you
  /// need it, for as long as you need it. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity
  /// Reservations</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Your request to create a Capacity Reservation could fail if Amazon EC2
  /// does not have sufficient capacity to fulfill the request. If your request
  /// fails due to Amazon EC2 capacity constraints, either try again at a later
  /// time, try in a different Availability Zone, or request a smaller capacity
  /// reservation. If your application is flexible across instance types and
  /// sizes, try to create a Capacity Reservation with different instance
  /// attributes.
  ///
  /// Your request could also fail if the requested quantity exceeds your
  /// On-Demand Instance limit for the selected instance type. If your request
  /// fails due to limit constraints, increase your On-Demand Instance limit for
  /// the required instance type and try again. For more information about
  /// increasing your instance limits, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon
  /// EC2 Service Quotas</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances for which to reserve capacity.
  ///
  /// Valid range: 1 - 1000
  ///
  /// Parameter [instancePlatform] :
  /// The type of operating system for which to reserve capacity.
  ///
  /// Parameter [instanceType] :
  /// The instance type for which to reserve capacity. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to create the Capacity Reservation.
  ///
  /// Parameter [availabilityZoneId] :
  /// The ID of the Availability Zone in which to create the Capacity
  /// Reservation.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ebsOptimized] :
  /// Indicates whether the Capacity Reservation supports EBS-optimized
  /// instances. This optimization provides dedicated throughput to Amazon EBS
  /// and an optimized configuration stack to provide optimal I/O performance.
  /// This optimization isn't available with all instance types. Additional
  /// usage charges apply when using an EBS- optimized instance.
  ///
  /// Parameter [endDate] :
  /// The date and time at which the Capacity Reservation expires. When a
  /// Capacity Reservation expires, the reserved capacity is released and you
  /// can no longer launch instances into it. The Capacity Reservation's state
  /// changes to <code>expired</code> when it reaches its end date and time.
  ///
  /// You must provide an <code>EndDate</code> value if <code>EndDateType</code>
  /// is <code>limited</code>. Omit <code>EndDate</code> if
  /// <code>EndDateType</code> is <code>unlimited</code>.
  ///
  /// If the <code>EndDateType</code> is <code>limited</code>, the Capacity
  /// Reservation is cancelled within an hour from the specified time. For
  /// example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is
  /// guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
  ///
  /// Parameter [endDateType] :
  /// Indicates the way in which the Capacity Reservation ends. A Capacity
  /// Reservation can have one of the following end types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it. Do not provide an <code>EndDate</code> if the
  /// <code>EndDateType</code> is <code>unlimited</code>.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time. You must provide an <code>EndDate</code> value if
  /// the <code>EndDateType</code> value is <code>limited</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [ephemeralStorage] :
  /// <i>Deprecated.</i>
  ///
  /// Parameter [instanceMatchCriteria] :
  /// Indicates the type of instance launches that the Capacity Reservation
  /// accepts. The options include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The Capacity Reservation automatically matches all
  /// instances that have matching attributes (instance type, platform, and
  /// Availability Zone). Instances that have matching attributes run in the
  /// Capacity Reservation automatically without specifying any additional
  /// parameters.
  /// </li>
  /// <li>
  /// <code>targeted</code> - The Capacity Reservation only accepts instances
  /// that have matching attributes (instance type, platform, and Availability
  /// Zone), and explicitly target the Capacity Reservation. This ensures that
  /// only permitted instances can use the reserved capacity.
  /// </li>
  /// </ul>
  /// Default: <code>open</code>
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost on which to create the
  /// Capacity Reservation.
  ///
  /// Parameter [placementGroupArn] :
  /// The Amazon Resource Name (ARN) of the cluster placement group in which to
  /// create the Capacity Reservation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html">
  /// Capacity Reservations for cluster placement groups</a> in the <i>Amazon
  /// EC2 User Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Capacity Reservation during launch.
  ///
  /// Parameter [tenancy] :
  /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
  /// can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation is created on hardware
  /// that is shared with other Amazon Web Services accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation is created on
  /// single-tenant hardware that is dedicated to a single Amazon Web Services
  /// account.
  /// </li>
  /// </ul>
  Future<CreateCapacityReservationResult> createCapacityReservation({
    required int instanceCount,
    required CapacityReservationInstancePlatform instancePlatform,
    required String instanceType,
    String? availabilityZone,
    String? availabilityZoneId,
    String? clientToken,
    bool? dryRun,
    bool? ebsOptimized,
    DateTime? endDate,
    EndDateType? endDateType,
    bool? ephemeralStorage,
    InstanceMatchCriteria? instanceMatchCriteria,
    String? outpostArn,
    String? placementGroupArn,
    List<TagSpecification>? tagSpecifications,
    CapacityReservationTenancy? tenancy,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Capacity Reservation Fleet. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-cr-fleets.html#create-crfleet">Create
  /// a Capacity Reservation Fleet</a> in the Amazon EC2 User Guide.
  ///
  /// Parameter [instanceTypeSpecifications] :
  /// Information about the instance types for which to reserve the capacity.
  ///
  /// Parameter [totalTargetCapacity] :
  /// The total number of capacity units to be reserved by the Capacity
  /// Reservation Fleet. This value, together with the instance type weights
  /// that you assign to each instance type used by the Fleet determine the
  /// number of instances for which the Fleet reserves capacity. Both values are
  /// based on units that make sense for your workload. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">
  /// Total target capacity</a> in the Amazon EC2 User Guide.
  ///
  /// Parameter [allocationStrategy] :
  /// The strategy used by the Capacity Reservation Fleet to determine which of
  /// the specified instance types to use. Currently, only the
  /// <code>prioritized</code> allocation strategy is supported. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy">
  /// Allocation strategy</a> in the Amazon EC2 User Guide.
  ///
  /// Valid values: <code>prioritized</code>
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endDate] :
  /// The date and time at which the Capacity Reservation Fleet expires. When
  /// the Capacity Reservation Fleet expires, its state changes to
  /// <code>expired</code> and all of the Capacity Reservations in the Fleet
  /// expire.
  ///
  /// The Capacity Reservation Fleet expires within an hour after the specified
  /// time. For example, if you specify <code>5/31/2019</code>,
  /// <code>13:30:55</code>, the Capacity Reservation Fleet is guaranteed to
  /// expire between <code>13:30:55</code> and <code>14:30:55</code> on
  /// <code>5/31/2019</code>.
  ///
  /// Parameter [instanceMatchCriteria] :
  /// Indicates the type of instance launches that the Capacity Reservation
  /// Fleet accepts. All Capacity Reservations in the Fleet inherit this
  /// instance matching criteria.
  ///
  /// Currently, Capacity Reservation Fleets support <code>open</code> instance
  /// matching criteria only. This means that instances that have matching
  /// attributes (instance type, platform, and Availability Zone) run in the
  /// Capacity Reservations automatically. Instances do not need to explicitly
  /// target a Capacity Reservation Fleet to use its reserved capacity.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Capacity Reservation Fleet. The tags are
  /// automatically assigned to the Capacity Reservations in the Fleet.
  ///
  /// Parameter [tenancy] :
  /// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity
  /// Reservations in the Fleet inherit this tenancy. The Capacity Reservation
  /// Fleet can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation Fleet is created on
  /// hardware that is shared with other Amazon Web Services accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservations are created on
  /// single-tenant hardware that is dedicated to a single Amazon Web Services
  /// account.
  /// </li>
  /// </ul>
  Future<CreateCapacityReservationFleetResult> createCapacityReservationFleet({
    required List<ReservationFleetInstanceSpecification>
        instanceTypeSpecifications,
    required int totalTargetCapacity,
    String? allocationStrategy,
    String? clientToken,
    bool? dryRun,
    DateTime? endDate,
    FleetInstanceMatchCriteria? instanceMatchCriteria,
    List<TagSpecification>? tagSpecifications,
    FleetCapacityReservationTenancy? tenancy,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a carrier gateway. For more information about carrier gateways,
  /// see <a
  /// href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#wavelength-carrier-gateway">Carrier
  /// gateways</a> in the <i>Amazon Web Services Wavelength Developer Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to associate with the carrier gateway.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to associate with the carrier gateway.
  Future<CreateCarrierGatewayResult> createCarrierGateway({
    required String vpcId,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Client VPN endpoint. A Client VPN endpoint is the resource you
  /// create and configure to enable and manage client VPN sessions. It is the
  /// destination endpoint at which all client VPN sessions are terminated.
  ///
  /// Parameter [authenticationOptions] :
  /// Information about the authentication method to be used to authenticate
  /// clients.
  ///
  /// Parameter [clientCidrBlock] :
  /// The IPv4 address range, in CIDR notation, from which to assign client IP
  /// addresses. The address range cannot overlap with the local CIDR of the VPC
  /// in which the associated subnet is located, or the routes that you add
  /// manually. The address range cannot be changed after the Client VPN
  /// endpoint has been created. Client CIDR range must have a size of at least
  /// /22 and must not be greater than /12.
  ///
  /// Parameter [connectionLogOptions] :
  /// Information about the client connection logging options.
  ///
  /// If you enable client connection logging, data about client connections is
  /// sent to a Cloudwatch Logs log stream. The following information is logged:
  ///
  /// <ul>
  /// <li>
  /// Client connection requests
  /// </li>
  /// <li>
  /// Client connection results (successful and unsuccessful)
  /// </li>
  /// <li>
  /// Reasons for unsuccessful client connection requests
  /// </li>
  /// <li>
  /// Client connection termination time
  /// </li>
  /// </ul>
  ///
  /// Parameter [serverCertificateArn] :
  /// The ARN of the server certificate. For more information, see the <a
  /// href="https://docs.aws.amazon.com/acm/latest/userguide/">Certificate
  /// Manager User Guide</a>.
  ///
  /// Parameter [clientConnectOptions] :
  /// The options for managing connection authorization for new client
  /// connections.
  ///
  /// Parameter [clientLoginBannerOptions] :
  /// Options for enabling a customizable text banner that will be displayed on
  /// Amazon Web Services provided clients when a VPN session is established.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// A brief description of the Client VPN endpoint.
  ///
  /// Parameter [dnsServers] :
  /// Information about the DNS servers to be used for DNS resolution. A Client
  /// VPN endpoint can have up to two DNS servers. If no DNS server is
  /// specified, the DNS address configured on the device is used for the DNS
  /// server.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of one or more security groups to apply to the target network. You
  /// must also specify the ID of the VPC that contains the security groups.
  ///
  /// Parameter [selfServicePortal] :
  /// Specify whether to enable the self-service portal for the Client VPN
  /// endpoint.
  ///
  /// Default Value: <code>enabled</code>
  ///
  /// Parameter [sessionTimeoutHours] :
  /// The maximum VPN session duration time in hours.
  ///
  /// Valid values: <code>8 | 10 | 12 | 24</code>
  ///
  /// Default value: <code>24</code>
  ///
  /// Parameter [splitTunnel] :
  /// Indicates whether split-tunnel is enabled on the Client VPN endpoint.
  ///
  /// By default, split-tunnel on a VPN endpoint is disabled.
  ///
  /// For information about split-tunnel VPN endpoints, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel
  /// Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Client VPN endpoint during creation.
  ///
  /// Parameter [transportProtocol] :
  /// The transport protocol to be used by the VPN session.
  ///
  /// Default value: <code>udp</code>
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to associate with the Client VPN endpoint. If no
  /// security group IDs are specified in the request, the default security
  /// group for the VPC is applied.
  ///
  /// Parameter [vpnPort] :
  /// The port number to assign to the Client VPN endpoint for TCP and UDP
  /// traffic.
  ///
  /// Valid Values: <code>443</code> | <code>1194</code>
  ///
  /// Default Value: <code>443</code>
  Future<CreateClientVpnEndpointResult> createClientVpnEndpoint({
    required List<ClientVpnAuthenticationRequest> authenticationOptions,
    required String clientCidrBlock,
    required ConnectionLogOptions connectionLogOptions,
    required String serverCertificateArn,
    ClientConnectOptions? clientConnectOptions,
    ClientLoginBannerOptions? clientLoginBannerOptions,
    String? clientToken,
    String? description,
    List<String>? dnsServers,
    bool? dryRun,
    List<String>? securityGroupIds,
    SelfServicePortal? selfServicePortal,
    int? sessionTimeoutHours,
    bool? splitTunnel,
    List<TagSpecification>? tagSpecifications,
    TransportProtocol? transportProtocol,
    String? vpcId,
    int? vpnPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds a route to a network to a Client VPN endpoint. Each Client VPN
  /// endpoint has a route table that describes the available destination
  /// network routes. Each route in the route table specifies the path for traﬃc
  /// to speciﬁc resources or networks.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to which to add the route.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 address range, in CIDR notation, of the route destination. For
  /// example:
  ///
  /// <ul>
  /// <li>
  /// To add a route for Internet access, enter <code>0.0.0.0/0</code>
  /// </li>
  /// <li>
  /// To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range
  /// </li>
  /// <li>
  /// To add a route for an on-premises network, enter the Amazon Web Services
  /// Site-to-Site VPN connection's IPv4 CIDR range
  /// </li>
  /// <li>
  /// To add a route for the local network, enter the client CIDR range
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetVpcSubnetId] :
  /// The ID of the subnet through which you want to route traffic. The
  /// specified subnet must be an existing target network of the Client VPN
  /// endpoint.
  ///
  /// Alternatively, if you're adding a route for the local network, specify
  /// <code>local</code>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// A brief description of the route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateClientVpnRouteResult> createClientVpnRoute({
    required String clientVpnEndpointId,
    required String destinationCidrBlock,
    required String targetVpcSubnetId,
    String? clientToken,
    String? description,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a range of customer-owned IP addresses.
  ///
  /// Parameter [cidr] :
  /// A customer-owned IP address range to create.
  ///
  /// Parameter [coipPoolId] :
  /// The ID of the address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateCoipCidrResult> createCoipCidr({
    required String cidr,
    required String coipPoolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a pool of customer-owned IP (CoIP) addresses.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the CoIP address pool.
  Future<CreateCoipPoolResult> createCoipPool({
    required String localGatewayRouteTableId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provides information to Amazon Web Services about your customer gateway
  /// device. The customer gateway device is the appliance at your end of the
  /// VPN connection. You must provide the IP address of the customer gateway
  /// device’s external interface. The IP address must be static and can be
  /// behind a device performing network address translation (NAT).
  ///
  /// For devices that use Border Gateway Protocol (BGP), you can also provide
  /// the device's BGP Autonomous System Number (ASN). You can use an existing
  /// ASN assigned to your network. If you don't have an ASN already, you can
  /// use a private ASN. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/cgw-options.html">Customer
  /// gateway options for your Site-to-Site VPN connection</a> in the <i>Amazon
  /// Web Services Site-to-Site VPN User Guide</i>.
  ///
  /// To create more than one customer gateway with the same VPN type, IP
  /// address, and BGP ASN, specify a unique device name for each customer
  /// gateway. An identical request returns information about the existing
  /// customer gateway; it doesn't create a new customer gateway.
  ///
  /// Parameter [type] :
  /// The type of VPN connection that this customer gateway supports
  /// (<code>ipsec.1</code>).
  ///
  /// Parameter [bgpAsn] :
  /// For customer gateway devices that support BGP, specify the device's ASN.
  /// You must specify either <code>BgpAsn</code> or <code>BgpAsnExtended</code>
  /// when creating the customer gateway. If the ASN is larger than
  /// <code>2,147,483,647</code>, you must use <code>BgpAsnExtended</code>.
  ///
  /// Default: 65000
  ///
  /// Valid values: <code>1</code> to <code>2,147,483,647</code>
  ///
  /// Parameter [bgpAsnExtended] :
  /// For customer gateway devices that support BGP, specify the device's ASN.
  /// You must specify either <code>BgpAsn</code> or <code>BgpAsnExtended</code>
  /// when creating the customer gateway. If the ASN is larger than
  /// <code>2,147,483,647</code>, you must use <code>BgpAsnExtended</code>.
  ///
  /// Valid values: <code>2,147,483,648</code> to <code>4,294,967,295</code>
  ///
  /// Parameter [certificateArn] :
  /// The Amazon Resource Name (ARN) for the customer gateway certificate.
  ///
  /// Parameter [deviceName] :
  /// A name for the customer gateway device.
  ///
  /// Length Constraints: Up to 255 characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ipAddress] :
  /// IPv4 address for the customer gateway device's outside interface. The
  /// address must be static. If <code>OutsideIpAddressType</code> in your VPN
  /// connection options is set to <code>PrivateIpv4</code>, you can use an
  /// RFC6598 or RFC1918 private IPv4 address. If
  /// <code>OutsideIpAddressType</code> is set to <code>PublicIpv4</code>, you
  /// can use a public IPv4 address.
  ///
  /// Parameter [publicIp] :
  /// <i>This member has been deprecated.</i> The Internet-routable IP address
  /// for the customer gateway's outside interface. The address must be static.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the customer gateway.
  Future<CreateCustomerGatewayResult> createCustomerGateway({
    required GatewayType type,
    int? bgpAsn,
    int? bgpAsnExtended,
    String? certificateArn,
    String? deviceName,
    bool? dryRun,
    String? ipAddress,
    String? publicIp,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in
  /// the specified Availability Zone in your default VPC. You can have only one
  /// default subnet per Availability Zone. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Create
  /// a default subnet</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to create the default subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ipv6Native] :
  /// Indicates whether to create an IPv6 only subnet. If you already have a
  /// default subnet for this Availability Zone, you must delete it before you
  /// can create an IPv6 only subnet.
  Future<CreateDefaultSubnetResult> createDefaultSubnet({
    required String availabilityZone,
    bool? dryRun,
    bool? ipv6Native,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a
  /// default subnet in each Availability Zone. For more information about the
  /// components of a default VPC, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default
  /// VPCs</a> in the <i>Amazon VPC User Guide</i>. You cannot specify the
  /// components of the default VPC yourself.
  ///
  /// If you deleted your previous default VPC, you can create a default VPC.
  /// You cannot have more than one default VPC per Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateDefaultVpcResult> createDefaultVpc({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a custom set of DHCP options. After you create a DHCP option set,
  /// you associate it with a VPC. After you associate a DHCP option set with a
  /// VPC, all existing and newly launched instances in the VPC use this set of
  /// DHCP options.
  ///
  /// The following are the individual DHCP options you can specify. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// options sets</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// <ul>
  /// <li>
  /// <code>domain-name</code> - If you're using AmazonProvidedDNS in
  /// <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using
  /// AmazonProvidedDNS in any other Region, specify
  /// <code>region.compute.internal</code>. Otherwise, specify a custom domain
  /// name. This value is used to complete unqualified DNS hostnames.
  ///
  /// Some Linux operating systems accept multiple domain names separated by
  /// spaces. However, Windows and other Linux operating systems treat the value
  /// as a single domain, which results in unexpected behavior. If your DHCP
  /// option set is associated with a VPC that has instances running operating
  /// systems that treat the value as a single domain, specify only one domain
  /// name.
  /// </li>
  /// <li>
  /// <code>domain-name-servers</code> - The IP addresses of up to four DNS
  /// servers, or AmazonProvidedDNS. To specify multiple domain name servers in
  /// a single parameter, separate the IP addresses using commas. To have your
  /// instances receive custom DNS hostnames as specified in
  /// <code>domain-name</code>, you must specify a custom DNS server.
  /// </li>
  /// <li>
  /// <code>ntp-servers</code> - The IP addresses of up to eight Network Time
  /// Protocol (NTP) servers (four IPv4 addresses and four IPv6 addresses).
  /// </li>
  /// <li>
  /// <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS
  /// name servers.
  /// </li>
  /// <li>
  /// <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We
  /// recommend that you specify 2. Broadcast and multicast are not supported.
  /// For more information about NetBIOS node types, see <a
  /// href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.
  /// </li>
  /// <li>
  /// <code>ipv6-address-preferred-lease-time</code> - A value (in seconds,
  /// minutes, hours, or years) for how frequently a running instance with an
  /// IPv6 assigned to it goes through DHCPv6 lease renewal. Acceptable values
  /// are between 140 and 2147483647 seconds (approximately 68 years). If no
  /// value is entered, the default lease time is 140 seconds. If you use
  /// long-term addressing for EC2 instances, you can increase the lease time
  /// and avoid frequent lease renewal requests. Lease renewal typically occurs
  /// when half of the lease time has elapsed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dhcpConfigurations] :
  /// A DHCP configuration option.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the DHCP option.
  Future<CreateDhcpOptionsResult> createDhcpOptions({
    required List<NewDhcpConfiguration> dhcpConfigurations,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [IPv6 only] Creates an egress-only internet gateway for your VPC. An
  /// egress-only internet gateway is used to enable outbound communication over
  /// IPv6 from instances in your VPC to the internet, and prevents hosts
  /// outside of your VPC from initiating an IPv6 connection with your instance.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC for which to create the egress-only internet gateway.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the egress-only internet gateway.
  Future<CreateEgressOnlyInternetGatewayResult>
      createEgressOnlyInternetGateway({
    required String vpcId,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an EC2 Fleet that contains the configuration information for
  /// On-Demand Instances and Spot Instances. Instances are launched immediately
  /// if there is available capacity.
  ///
  /// A single EC2 Fleet can include multiple launch specifications that vary by
  /// instance type, AMI, Availability Zone, or subnet.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">EC2
  /// Fleet</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [launchTemplateConfigs] :
  /// The configuration for the EC2 Fleet.
  ///
  /// Parameter [targetCapacitySpecification] :
  /// The number of units to request.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Parameter [context] :
  /// Reserved.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [excessCapacityTerminationPolicy] :
  /// Indicates whether running instances should be terminated if the total
  /// target capacity of the EC2 Fleet is decreased below the current size of
  /// the EC2 Fleet.
  ///
  /// Supported only for fleets of type <code>maintain</code>.
  ///
  /// Parameter [onDemandOptions] :
  /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
  ///
  /// Parameter [replaceUnhealthyInstances] :
  /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances.
  /// Supported only for fleets of type <code>maintain</code>. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks">EC2
  /// Fleet health checks</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [spotOptions] :
  /// Describes the configuration of Spot Instances in an EC2 Fleet.
  ///
  /// Parameter [tagSpecifications] :
  /// The key-value pair for tagging the EC2 Fleet request on creation. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tag
  /// your resources</a>.
  ///
  /// If the fleet type is <code>instant</code>, specify a resource type of
  /// <code>fleet</code> to tag the fleet or <code>instance</code> to tag the
  /// instances at launch.
  ///
  /// If the fleet type is <code>maintain</code> or <code>request</code>,
  /// specify a resource type of <code>fleet</code> to tag the fleet. You cannot
  /// specify a resource type of <code>instance</code>. To tag instances at
  /// launch, specify the tags in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch
  /// template</a>.
  ///
  /// Parameter [terminateInstancesWithExpiration] :
  /// Indicates whether running instances should be terminated when the EC2
  /// Fleet expires.
  ///
  /// Parameter [type] :
  /// The fleet type. The default value is <code>maintain</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>maintain</code> - The EC2 Fleet places an asynchronous request for
  /// your desired capacity, and continues to maintain your desired Spot
  /// capacity by replenishing interrupted Spot Instances.
  /// </li>
  /// <li>
  /// <code>request</code> - The EC2 Fleet places an asynchronous one-time
  /// request for your desired capacity, but does submit Spot requests in
  /// alternative capacity pools if Spot capacity is unavailable, and does not
  /// maintain Spot capacity if Spot Instances are interrupted.
  /// </li>
  /// <li>
  /// <code>instant</code> - The EC2 Fleet places a synchronous one-time request
  /// for your desired capacity, and returns errors for any instances that could
  /// not be launched.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-request-type.html">EC2
  /// Fleet request types</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [validFrom] :
  /// The start date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The
  /// default is to start fulfilling the request immediately.
  ///
  /// Parameter [validUntil] :
  /// The end date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this
  /// point, no new EC2 Fleet requests are placed or able to fulfill the
  /// request. If no value is specified, the request remains until you cancel
  /// it.
  Future<CreateFleetResult> createFleet({
    required List<FleetLaunchTemplateConfigRequest> launchTemplateConfigs,
    required TargetCapacitySpecificationRequest targetCapacitySpecification,
    String? clientToken,
    String? context,
    bool? dryRun,
    FleetExcessCapacityTerminationPolicy? excessCapacityTerminationPolicy,
    OnDemandOptionsRequest? onDemandOptions,
    bool? replaceUnhealthyInstances,
    SpotOptionsRequest? spotOptions,
    List<TagSpecification>? tagSpecifications,
    bool? terminateInstancesWithExpiration,
    FleetType? type,
    DateTime? validFrom,
    DateTime? validUntil,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates one or more flow logs to capture information about IP traffic for
  /// a specific network interface, subnet, or VPC.
  ///
  /// Flow log data for a monitored network interface is recorded as flow log
  /// records, which are log events consisting of fields that describe the
  /// traffic flow. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow
  /// log records</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// When publishing to CloudWatch Logs, flow log records are published to a
  /// log group, and each network interface has a unique log stream in the log
  /// group. When publishing to Amazon S3, flow log records for all of the
  /// monitored network interfaces are published to a single log file object
  /// that is stored in the specified bucket.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC
  /// Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [resourceIds] :
  /// The IDs of the resources to monitor. For example, if the resource type is
  /// <code>VPC</code>, specify the IDs of the VPCs.
  ///
  /// Constraints: Maximum of 25 for transit gateway resource types. Maximum of
  /// 1000 for the other resource types.
  ///
  /// Parameter [resourceType] :
  /// The type of resource to monitor.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [deliverCrossAccountRole] :
  /// The ARN of the IAM role that allows Amazon EC2 to publish flow logs across
  /// accounts.
  ///
  /// Parameter [deliverLogsPermissionArn] :
  /// The ARN of the IAM role that allows Amazon EC2 to publish flow logs to the
  /// log destination.
  ///
  /// This parameter is required if the destination type is
  /// <code>cloud-watch-logs</code>, or if the destination type is
  /// <code>kinesis-data-firehose</code> and the delivery stream and the
  /// resources to monitor are in different accounts.
  ///
  /// Parameter [destinationOptions] :
  /// The destination options.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [logDestination] :
  /// The destination for the flow log data. The meaning of this parameter
  /// depends on the destination type.
  ///
  /// <ul>
  /// <li>
  /// If the destination type is <code>cloud-watch-logs</code>, specify the ARN
  /// of a CloudWatch Logs log group. For example:
  ///
  /// arn:aws:logs:<i>region</i>:<i>account_id</i>:log-group:<i>my_group</i>
  ///
  /// Alternatively, use the <code>LogGroupName</code> parameter.
  /// </li>
  /// <li>
  /// If the destination type is <code>s3</code>, specify the ARN of an S3
  /// bucket. For example:
  ///
  /// arn:aws:s3:::<i>my_bucket</i>/<i>my_subfolder</i>/
  ///
  /// The subfolder is optional. Note that you can't use <code>AWSLogs</code> as
  /// a subfolder name.
  /// </li>
  /// <li>
  /// If the destination type is <code>kinesis-data-firehose</code>, specify the
  /// ARN of a Kinesis Data Firehose delivery stream. For example:
  ///
  /// arn:aws:firehose:<i>region</i>:<i>account_id</i>:deliverystream:<i>my_stream</i>
  /// </li>
  /// </ul>
  ///
  /// Parameter [logDestinationType] :
  /// The type of destination for the flow log data.
  ///
  /// Default: <code>cloud-watch-logs</code>
  ///
  /// Parameter [logFormat] :
  /// The fields to include in the flow log record. List the fields in the order
  /// in which they should appear. If you omit this parameter, the flow log is
  /// created using the default format. If you specify this parameter, you must
  /// include at least one field. For more information about the available
  /// fields, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow
  /// log records</a> in the <i>Amazon VPC User Guide</i> or <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-flow-logs.html#flow-log-records">Transit
  /// Gateway Flow Log records</a> in the <i>Amazon Web Services Transit Gateway
  /// Guide</i>.
  ///
  /// Specify the fields using the <code>${field-id}</code> format, separated by
  /// spaces.
  ///
  /// Parameter [logGroupName] :
  /// The name of a new or existing CloudWatch Logs log group where Amazon EC2
  /// publishes your flow logs.
  ///
  /// This parameter is valid only if the destination type is
  /// <code>cloud-watch-logs</code>.
  ///
  /// Parameter [maxAggregationInterval] :
  /// The maximum interval of time during which a flow of packets is captured
  /// and aggregated into a flow log record. The possible values are 60 seconds
  /// (1 minute) or 600 seconds (10 minutes). This parameter must be 60 seconds
  /// for transit gateway resource types.
  ///
  /// When a network interface is attached to a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instance</a>, the aggregation interval is always 60 seconds or less,
  /// regardless of the value that you specify.
  ///
  /// Default: 600
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the flow logs.
  ///
  /// Parameter [trafficType] :
  /// The type of traffic to monitor (accepted traffic, rejected traffic, or all
  /// traffic). This parameter is not supported for transit gateway resource
  /// types. It is required for the other resource types.
  Future<CreateFlowLogsResult> createFlowLogs({
    required List<String> resourceIds,
    required FlowLogsResourceType resourceType,
    String? clientToken,
    String? deliverCrossAccountRole,
    String? deliverLogsPermissionArn,
    DestinationOptionsRequest? destinationOptions,
    bool? dryRun,
    String? logDestination,
    LogDestinationType? logDestinationType,
    String? logFormat,
    String? logGroupName,
    int? maxAggregationInterval,
    List<TagSpecification>? tagSpecifications,
    TrafficType? trafficType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an Amazon FPGA Image (AFI) from the specified design checkpoint
  /// (DCP).
  ///
  /// The create operation is asynchronous. To verify that the AFI is ready for
  /// use, check the output logs.
  ///
  /// An AFI contains the FPGA bitstream that is ready to download to an FPGA.
  /// You can securely deploy an AFI on multiple FPGA-accelerated instances. For
  /// more information, see the <a
  /// href="https://github.com/aws/aws-fpga/">Amazon Web Services FPGA Hardware
  /// Development Kit</a>.
  ///
  /// Parameter [inputStorageLocation] :
  /// The location of the encrypted design checkpoint in Amazon S3. The input
  /// must be a tarball.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [logsStorageLocation] :
  /// The location in Amazon S3 for the output logs.
  ///
  /// Parameter [name] :
  /// A name for the AFI.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the FPGA image during creation.
  Future<CreateFpgaImageResult> createFpgaImage({
    required StorageLocation inputStorageLocation,
    String? clientToken,
    String? description,
    bool? dryRun,
    StorageLocation? logsStorageLocation,
    String? name,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that
  /// is either running or stopped.
  ///
  /// If you customized your instance with instance store volumes or Amazon EBS
  /// volumes in addition to the root device volume, the new AMI contains block
  /// device mapping information for those volumes. When you launch an instance
  /// from this new AMI, the instance automatically launches with those
  /// additional volumes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Create
  /// an Amazon EBS-backed Linux AMI</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [name] :
  /// A name for the new image.
  ///
  /// Constraints: 3-128 alphanumeric characters, parentheses (()), square
  /// brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single
  /// quotes ('), at-signs (@), or underscores(_)
  ///
  /// Parameter [blockDeviceMappings] :
  /// The block device mappings.
  ///
  /// When using the CreateImage action:
  ///
  /// <ul>
  /// <li>
  /// You can't change the volume size using the VolumeSize parameter. If you
  /// want a different volume size, you must first change the volume size of the
  /// source instance.
  /// </li>
  /// <li>
  /// You can't modify the encryption status of existing volumes or snapshots.
  /// To create an AMI with volumes or snapshots that have a different
  /// encryption status (for example, where the source volume and snapshots are
  /// unencrypted, and you want to create an AMI with encrypted volumes or
  /// snapshots), use the <a>CopyImage</a> action.
  /// </li>
  /// <li>
  /// The only option that can be changed for existing mappings or snapshots is
  /// <code>DeleteOnTermination</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [description] :
  /// A description for the new image.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [noReboot] :
  /// Indicates whether or not the instance should be automatically rebooted
  /// before creating the image. Specify one of the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>true</code> - The instance is not rebooted before creating the
  /// image. This creates crash-consistent snapshots that include only the data
  /// that has been written to the volumes at the time the snapshots are
  /// created. Buffered data and data in memory that has not yet been written to
  /// the volumes is not included in the snapshots.
  /// </li>
  /// <li>
  /// <code>false</code> - The instance is rebooted before creating the image.
  /// This ensures that all buffered data and data in memory is written to the
  /// volumes before the snapshots are created.
  /// </li>
  /// </ul>
  /// Default: <code>false</code>
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the AMI and snapshots on creation. You can tag the
  /// AMI, the snapshots, or both.
  ///
  /// <ul>
  /// <li>
  /// To tag the AMI, the value for <code>ResourceType</code> must be
  /// <code>image</code>.
  /// </li>
  /// <li>
  /// To tag the snapshots that are created of the root volume and of other
  /// Amazon EBS volumes that are attached to the instance, the value for
  /// <code>ResourceType</code> must be <code>snapshot</code>. The same tag is
  /// applied to all of the snapshots that are created.
  /// </li>
  /// </ul>
  /// If you specify other values for <code>ResourceType</code>, the request
  /// fails.
  ///
  /// To tag an AMI or snapshot after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  Future<CreateImageResult> createImage({
    required String instanceId,
    required String name,
    List<BlockDeviceMapping>? blockDeviceMappings,
    String? description,
    bool? dryRun,
    bool? noReboot,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an EC2 Instance Connect Endpoint.
  ///
  /// An EC2 Instance Connect Endpoint allows you to connect to an instance,
  /// without requiring the instance to have a public IPv4 address. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect-Endpoint.html">Connect
  /// to your instances without requiring a public IPv4 address using EC2
  /// Instance Connect Endpoint</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet in which to create the EC2 Instance Connect Endpoint.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [preserveClientIp] :
  /// Indicates whether your client's IP address is preserved as the source. The
  /// value is <code>true</code> or <code>false</code>.
  ///
  /// <ul>
  /// <li>
  /// If <code>true</code>, your client's IP address is used when you connect to
  /// a resource.
  /// </li>
  /// <li>
  /// If <code>false</code>, the elastic network interface IP address is used
  /// when you connect to a resource.
  /// </li>
  /// </ul>
  /// Default: <code>true</code>
  ///
  /// Parameter [securityGroupIds] :
  /// One or more security groups to associate with the endpoint. If you don't
  /// specify a security group, the default security group for your VPC will be
  /// associated with the endpoint.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the EC2 Instance Connect Endpoint during creation.
  Future<CreateInstanceConnectEndpointResult> createInstanceConnectEndpoint({
    required String subnetId,
    String? clientToken,
    bool? dryRun,
    bool? preserveClientIp,
    List<String>? securityGroupIds,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an event window in which scheduled events for the associated
  /// Amazon EC2 instances can run.
  ///
  /// You can define either a set of time ranges or a cron expression when
  /// creating the event window, but not both. All event window times are in
  /// UTC.
  ///
  /// You can create up to 200 event windows per Amazon Web Services Region.
  ///
  /// When you create the event window, targets (instance IDs, Dedicated Host
  /// IDs, or tags) are not yet associated with it. To ensure that the event
  /// window can be used, you must associate one or more targets with it by
  /// using the <a>AssociateInstanceEventWindow</a> API.
  /// <important>
  /// Event windows are applicable only for scheduled events that stop, reboot,
  /// or terminate instances.
  ///
  /// Event windows are <i>not</i> applicable for:
  ///
  /// <ul>
  /// <li>
  /// Expedited scheduled events and network maintenance events.
  /// </li>
  /// <li>
  /// Unscheduled maintenance such as AutoRecovery and unplanned reboots.
  /// </li>
  /// </ul> </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define
  /// event windows for scheduled events</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [cronExpression] :
  /// The cron expression for the event window, for example, <code>* 0-4,20-23 *
  /// * 1,5</code>. If you specify a cron expression, you can't specify a time
  /// range.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Only hour and day of the week values are supported.
  /// </li>
  /// <li>
  /// For day of the week values, you can specify either integers <code>0</code>
  /// through <code>6</code>, or alternative single values <code>SUN</code>
  /// through <code>SAT</code>.
  /// </li>
  /// <li>
  /// The minute, month, and year must be specified by <code>*</code>.
  /// </li>
  /// <li>
  /// The hour value must be one or a multiple range, for example,
  /// <code>0-4</code> or <code>0-4,20-23</code>.
  /// </li>
  /// <li>
  /// Each hour range must be &gt;= 2 hours, for example, <code>0-2</code> or
  /// <code>20-23</code>.
  /// </li>
  /// <li>
  /// The event window must be &gt;= 4 hours. The combined total time ranges in
  /// the event window must be &gt;= 4 hours.
  /// </li>
  /// </ul>
  /// For more information about cron expressions, see <a
  /// href="https://en.wikipedia.org/wiki/Cron">cron</a> on the <i>Wikipedia
  /// website</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [name] :
  /// The name of the event window.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the event window.
  ///
  /// Parameter [timeRanges] :
  /// The time range for the event window. If you specify a time range, you
  /// can't specify a cron expression.
  Future<CreateInstanceEventWindowResult> createInstanceEventWindow({
    String? cronExpression,
    bool? dryRun,
    String? name,
    List<TagSpecification>? tagSpecifications,
    List<InstanceEventWindowTimeRangeRequest>? timeRanges,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Exports a running or stopped instance to an Amazon S3 bucket.
  ///
  /// For information about the prerequisites for your Amazon S3 bucket,
  /// supported operating systems, image formats, and known limitations for the
  /// types of instances you can export, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting
  /// an instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export
  /// User Guide</i>.
  ///
  /// Parameter [exportToS3Task] :
  /// The format and location for an export instance task.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [targetEnvironment] :
  /// The target virtualization environment.
  ///
  /// Parameter [description] :
  /// A description for the conversion task or the resource being exported. The
  /// maximum length is 255 characters.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the export instance task during creation.
  Future<CreateInstanceExportTaskResult> createInstanceExportTask({
    required ExportToS3TaskSpecification exportToS3Task,
    required String instanceId,
    required ExportEnvironment targetEnvironment,
    String? description,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an internet gateway for use with a VPC. After creating the
  /// internet gateway, you attach it to a VPC using
  /// <a>AttachInternetGateway</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">Internet
  /// gateways</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the internet gateway.
  Future<CreateInternetGatewayResult> createInternetGateway({
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Create an IPAM. Amazon VPC IP Address Manager (IPAM) is a VPC feature that
  /// you can use to automate your IP address management workflows including
  /// assigning, tracking, troubleshooting, and auditing IP addresses across
  /// Amazon Web Services Regions and accounts throughout your Amazon Web
  /// Services Organization.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
  /// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the IPAM.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [operatingRegions] :
  /// The operating Regions for the IPAM. Operating Regions are Amazon Web
  /// Services Regions where the IPAM is allowed to manage IP address CIDRs.
  /// IPAM only discovers and monitors resources in the Amazon Web Services
  /// Regions you select as operating Regions.
  ///
  /// For more information about operating Regions, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
  /// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// The key/value combination of a tag assigned to the resource. Use the tag
  /// key in the filter name and the tag value as the filter value. For example,
  /// to find all resources that have a tag with the key <code>Owner</code> and
  /// the value <code>TeamA</code>, specify <code>tag:Owner</code> for the
  /// filter name and <code>TeamA</code> for the filter value.
  ///
  /// Parameter [tier] :
  /// IPAM is offered in a Free Tier and an Advanced Tier. For more information
  /// about the features available in each tier and the costs associated with
  /// the tiers, see <a href="http://aws.amazon.com/vpc/pricing/">Amazon VPC
  /// pricing &gt; IPAM tab</a>.
  Future<CreateIpamResult> createIpam({
    String? clientToken,
    String? description,
    bool? dryRun,
    List<AddIpamOperatingRegion>? operatingRegions,
    List<TagSpecification>? tagSpecifications,
    IpamTier? tier,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In
  /// IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools
  /// enable you to organize your IP addresses according to your routing and
  /// security needs. For example, if you have separate routing and security
  /// needs for development and production applications, you can create a pool
  /// for each.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-top-ipam.html">Create
  /// a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [addressFamily] :
  /// The IP protocol assigned to this IPAM pool. You must choose either IPv4 or
  /// IPv6 protocol for a pool.
  ///
  /// Parameter [ipamScopeId] :
  /// The ID of the scope in which you would like to create the IPAM pool.
  ///
  /// Parameter [allocationDefaultNetmaskLength] :
  /// The default netmask length for allocations added to this pool. If, for
  /// example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16
  /// here, new allocations will default to 10.0.0.0/16.
  ///
  /// Parameter [allocationMaxNetmaskLength] :
  /// The maximum netmask length possible for CIDR allocations in this IPAM pool
  /// to be compliant. The maximum netmask length must be greater than the
  /// minimum netmask length. Possible netmask lengths for IPv4 addresses are 0
  /// - 32. Possible netmask lengths for IPv6 addresses are 0 - 128.
  ///
  /// Parameter [allocationMinNetmaskLength] :
  /// The minimum netmask length required for CIDR allocations in this IPAM pool
  /// to be compliant. The minimum netmask length must be less than the maximum
  /// netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32.
  /// Possible netmask lengths for IPv6 addresses are 0 - 128.
  ///
  /// Parameter [allocationResourceTags] :
  /// Tags that are required for resources that use CIDRs from this IPAM pool.
  /// Resources that do not have these tags will not be allowed to allocate
  /// space from the pool. If the resources have their tags changed after they
  /// have allocated space or if the allocation tagging requirements are changed
  /// on the pool, the resource may be marked as noncompliant.
  ///
  /// Parameter [autoImport] :
  /// If selected, IPAM will continuously look for resources within the CIDR
  /// range of this pool and automatically import them as allocations into your
  /// IPAM. The CIDRs that will be allocated for these resources must not
  /// already be allocated to other resources in order for the import to
  /// succeed. IPAM will import a CIDR regardless of its compliance with the
  /// pool's allocation rules, so a resource might be imported and subsequently
  /// marked as noncompliant. If IPAM discovers multiple CIDRs that overlap,
  /// IPAM will import the largest CIDR only. If IPAM discovers multiple CIDRs
  /// with matching CIDRs, IPAM will randomly import one of them only.
  ///
  /// A locale must be set on the pool for this feature to work.
  ///
  /// Parameter [awsService] :
  /// Limits which service in Amazon Web Services that the pool can be used in.
  /// "ec2", for example, allows users to use space for Elastic IP addresses and
  /// VPCs.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the IPAM pool.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [locale] :
  /// In IPAM, the locale is the Amazon Web Services Region where you want to
  /// make an IPAM pool available for allocations. Only resources in the same
  /// Region as the locale of the pool can get IP address allocations from the
  /// pool. You can only allocate a CIDR for a VPC, for example, from an IPAM
  /// pool that shares a locale with the VPC’s Region. Note that once you choose
  /// a Locale for a pool, you cannot modify it. If you do not choose a locale,
  /// resources in Regions others than the IPAM's home region cannot use CIDRs
  /// from this pool.
  ///
  /// Possible values: Any Amazon Web Services Region, such as us-east-1.
  ///
  /// Parameter [publicIpSource] :
  /// The IP address source for pools in the public scope. Only used for
  /// provisioning IP address CIDRs to pools in the public scope. Default is
  /// <code>byoip</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/intro-create-ipv6-pools.html">Create
  /// IPv6 pools</a> in the <i>Amazon VPC IPAM User Guide</i>. By default, you
  /// can add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool
  /// if PublicIpSource is <code>amazon</code>. For information on increasing
  /// the default limit, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">
  /// Quotas for your IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [publiclyAdvertisable] :
  /// Determines if the pool is publicly advertisable. This option is not
  /// available for pools with AddressFamily set to <code>ipv4</code>.
  ///
  /// Parameter [sourceIpamPoolId] :
  /// The ID of the source IPAM pool. Use this option to create a pool within an
  /// existing pool. Note that the CIDR you provision for the pool within the
  /// source pool must be available in the source pool's CIDR range.
  ///
  /// Parameter [sourceResource] :
  /// The resource used to provision CIDRs to a resource planning pool.
  ///
  /// Parameter [tagSpecifications] :
  /// The key/value combination of a tag assigned to the resource. Use the tag
  /// key in the filter name and the tag value as the filter value. For example,
  /// to find all resources that have a tag with the key <code>Owner</code> and
  /// the value <code>TeamA</code>, specify <code>tag:Owner</code> for the
  /// filter name and <code>TeamA</code> for the filter value.
  Future<CreateIpamPoolResult> createIpamPool({
    required AddressFamily addressFamily,
    required String ipamScopeId,
    int? allocationDefaultNetmaskLength,
    int? allocationMaxNetmaskLength,
    int? allocationMinNetmaskLength,
    List<RequestIpamResourceTag>? allocationResourceTags,
    bool? autoImport,
    IpamPoolAwsService? awsService,
    String? clientToken,
    String? description,
    bool? dryRun,
    String? locale,
    IpamPoolPublicIpSource? publicIpSource,
    bool? publiclyAdvertisable,
    String? sourceIpamPoolId,
    IpamPoolSourceResourceRequest? sourceResource,
    List<TagSpecification>? tagSpecifications,
  }) async {
    _s.validateNumRange(
      'allocationDefaultNetmaskLength',
      allocationDefaultNetmaskLength,
      0,
      128,
    );
    _s.validateNumRange(
      'allocationMaxNetmaskLength',
      allocationMaxNetmaskLength,
      0,
      128,
    );
    _s.validateNumRange(
      'allocationMinNetmaskLength',
      allocationMinNetmaskLength,
      0,
      128,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an IPAM resource discovery. A resource discovery is an IPAM
  /// component that enables IPAM to manage and monitor resources that belong to
  /// the owning account.
  ///
  /// Parameter [clientToken] :
  /// A client token for the IPAM resource discovery.
  ///
  /// Parameter [description] :
  /// A description for the IPAM resource discovery.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [operatingRegions] :
  /// Operating Regions for the IPAM resource discovery. Operating Regions are
  /// Amazon Web Services Regions where the IPAM is allowed to manage IP address
  /// CIDRs. IPAM only discovers and monitors resources in the Amazon Web
  /// Services Regions you select as operating Regions.
  ///
  /// Parameter [tagSpecifications] :
  /// Tag specifications for the IPAM resource discovery.
  Future<CreateIpamResourceDiscoveryResult> createIpamResourceDiscovery({
    String? clientToken,
    String? description,
    bool? dryRun,
    List<AddIpamOperatingRegion>? operatingRegions,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Create an IPAM scope. In IPAM, a scope is the highest-level container
  /// within IPAM. An IPAM contains two default scopes. Each scope represents
  /// the IP space for a single network. The private scope is intended for all
  /// private IP address space. The public scope is intended for all public IP
  /// address space. Scopes enable you to reuse IP addresses across multiple
  /// unconnected networks without causing IP address overlap or conflict.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/add-scope-ipam.html">Add
  /// a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamId] :
  /// The ID of the IPAM for which you're creating this scope.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the scope you're creating.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The key/value combination of a tag assigned to the resource. Use the tag
  /// key in the filter name and the tag value as the filter value. For example,
  /// to find all resources that have a tag with the key <code>Owner</code> and
  /// the value <code>TeamA</code>, specify <code>tag:Owner</code> for the
  /// filter name and <code>TeamA</code> for the filter value.
  Future<CreateIpamScopeResult> createIpamScope({
    required String ipamId,
    String? clientToken,
    String? description,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an ED25519 or 2048-bit RSA key pair with the specified name and in
  /// the specified PEM or PPK format. Amazon EC2 stores the public key and
  /// displays the private key for you to save to a file. The private key is
  /// returned as an unencrypted PEM encoded PKCS#1 private key or an
  /// unencrypted PPK formatted private key for use with PuTTY. If a key with
  /// the specified name already exists, Amazon EC2 returns an error.
  ///
  /// The key pair returned to you is available only in the Amazon Web Services
  /// Region in which you create it. If you prefer, you can create your own key
  /// pair using a third-party tool and upload it to any Region using
  /// <a>ImportKeyPair</a>.
  ///
  /// You can have up to 5,000 key pairs per Amazon Web Services Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon
  /// EC2 key pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [keyName] :
  /// A unique name for the key pair.
  ///
  /// Constraints: Up to 255 ASCII characters
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [keyFormat] :
  /// The format of the key pair.
  ///
  /// Default: <code>pem</code>
  ///
  /// Parameter [keyType] :
  /// The type of key pair. Note that ED25519 keys are not supported for Windows
  /// instances.
  ///
  /// Default: <code>rsa</code>
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new key pair.
  Future<KeyPair> createKeyPair({
    required String keyName,
    bool? dryRun,
    KeyFormat? keyFormat,
    KeyType? keyType,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a launch template.
  ///
  /// A launch template contains the parameters to launch an instance. When you
  /// launch an instance using <a>RunInstances</a>, you can specify a launch
  /// template instead of providing the launch parameters in the request. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launch
  /// an instance from a launch template</a> in the <i>Amazon Elastic Compute
  /// Cloud User Guide</i>.
  ///
  /// To clone an existing launch template as the basis for a new launch
  /// template, use the Amazon EC2 console. The API, SDKs, and CLI do not
  /// support cloning a template. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template-from-existing-launch-template">Create
  /// a launch template from an existing launch template</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [launchTemplateData] :
  /// The information for the launch template.
  ///
  /// Parameter [launchTemplateName] :
  /// A name for the launch template.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Constraint: Maximum 128 ASCII characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the launch template on creation. To tag the launch
  /// template, the resource type must be <code>launch-template</code>.
  ///
  /// To specify the tags for the resources that are created when an instance is
  /// launched, you must use the <code>TagSpecifications</code> parameter in the
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestLaunchTemplateData.html">launch
  /// template data</a> structure.
  ///
  /// Parameter [versionDescription] :
  /// A description for the first version of the launch template.
  Future<CreateLaunchTemplateResult> createLaunchTemplate({
    required RequestLaunchTemplateData launchTemplateData,
    required String launchTemplateName,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
    String? versionDescription,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a new version of a launch template. You must specify an existing
  /// launch template, either by name or ID. You can determine whether the new
  /// version inherits parameters from a source version, and add or overwrite
  /// parameters as needed.
  ///
  /// Launch template versions are numbered in the order in which they are
  /// created. You can't specify, change, or replace the numbering of launch
  /// template versions.
  ///
  /// Launch templates are immutable; after you create a launch template, you
  /// can't modify it. Instead, you can create a new version of the launch
  /// template that includes the changes that you require.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#manage-launch-template-versions">Modify
  /// a launch template (manage launch template versions)</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [launchTemplateData] :
  /// The information for the launch template.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Constraint: Maximum 128 ASCII characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  ///
  /// Parameter [resolveAlias] :
  /// If <code>true</code>, and if a Systems Manager parameter is specified for
  /// <code>ImageId</code>, the AMI ID is displayed in the response for
  /// <code>imageID</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use
  /// a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [sourceVersion] :
  /// The version of the launch template on which to base the new version.
  /// Snapshots applied to the block device mapping are ignored when creating a
  /// new version unless they are explicitly included.
  ///
  /// If you specify this parameter, the new version inherits the launch
  /// parameters from the source version. If you specify additional launch
  /// parameters for the new version, they overwrite any corresponding launch
  /// parameters inherited from the source version.
  ///
  /// If you omit this parameter, the new version contains only the launch
  /// parameters that you specify for the new version.
  ///
  /// Parameter [versionDescription] :
  /// A description for the version of the launch template.
  Future<CreateLaunchTemplateVersionResult> createLaunchTemplateVersion({
    required RequestLaunchTemplateData launchTemplateData,
    String? clientToken,
    bool? dryRun,
    String? launchTemplateId,
    String? launchTemplateName,
    bool? resolveAlias,
    String? sourceVersion,
    String? versionDescription,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a static route for the specified local gateway route table. You
  /// must specify one of the following targets:
  ///
  /// <ul>
  /// <li>
  /// <code>LocalGatewayVirtualInterfaceGroupId</code>
  /// </li>
  /// <li>
  /// <code>NetworkInterfaceId</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range used for destination matches. Routing decisions are based
  /// on the most specific match.
  ///
  /// Parameter [destinationPrefixListId] :
  /// The ID of the prefix list. Use a prefix list in place of
  /// <code>DestinationCidrBlock</code>. You cannot use
  /// <code>DestinationPrefixListId</code> and <code>DestinationCidrBlock</code>
  /// in the same request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [localGatewayVirtualInterfaceGroupId] :
  /// The ID of the virtual interface group.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  Future<CreateLocalGatewayRouteResult> createLocalGatewayRoute({
    required String localGatewayRouteTableId,
    String? destinationCidrBlock,
    String? destinationPrefixListId,
    bool? dryRun,
    String? localGatewayVirtualInterfaceGroupId,
    String? networkInterfaceId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a local gateway route table.
  ///
  /// Parameter [localGatewayId] :
  /// The ID of the local gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [mode] :
  /// The mode of the local gateway route table.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags assigned to the local gateway route table.
  Future<CreateLocalGatewayRouteTableResult> createLocalGatewayRouteTable({
    required String localGatewayId,
    bool? dryRun,
    LocalGatewayRouteTableMode? mode,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a local gateway route table virtual interface group association.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [localGatewayVirtualInterfaceGroupId] :
  /// The ID of the local gateway route table virtual interface group
  /// association.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags assigned to the local gateway route table virtual interface group
  /// association.
  Future<CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult>
      createLocalGatewayRouteTableVirtualInterfaceGroupAssociation({
    required String localGatewayRouteTableId,
    required String localGatewayVirtualInterfaceGroupId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified VPC with the specified local gateway route table.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the local gateway route table VPC association.
  Future<CreateLocalGatewayRouteTableVpcAssociationResult>
      createLocalGatewayRouteTableVpcAssociation({
    required String localGatewayRouteTableId,
    required String vpcId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a managed prefix list. You can specify one or more entries for the
  /// prefix list. Each entry consists of a CIDR block and an optional
  /// description.
  ///
  /// Parameter [addressFamily] :
  /// The IP address type.
  ///
  /// Valid Values: <code>IPv4</code> | <code>IPv6</code>
  ///
  /// Parameter [maxEntries] :
  /// The maximum number of entries for the prefix list.
  ///
  /// Parameter [prefixListName] :
  /// A name for the prefix list.
  ///
  /// Constraints: Up to 255 characters in length. The name cannot start with
  /// <code>com.amazonaws</code>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraints: Up to 255 UTF-8 characters in length.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [entries] :
  /// One or more entries for the prefix list.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the prefix list during creation.
  Future<CreateManagedPrefixListResult> createManagedPrefixList({
    required String addressFamily,
    required int maxEntries,
    required String prefixListName,
    String? clientToken,
    bool? dryRun,
    List<AddPrefixListEntry>? entries,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a NAT gateway in the specified subnet. This action creates a
  /// network interface in the specified subnet with a private IP address from
  /// the IP address range of the subnet. You can create either a public NAT
  /// gateway or a private NAT gateway.
  ///
  /// With a public NAT gateway, internet-bound traffic from a private subnet
  /// can be routed to the NAT gateway, so that instances in a private subnet
  /// can connect to the internet.
  ///
  /// With a private NAT gateway, private communication is routed across VPCs
  /// and on-premises networks through a transit gateway or virtual private
  /// gateway. Common use cases include running large workloads behind a small
  /// pool of allowlisted IPv4 addresses, preserving private IPv4 addresses, and
  /// communicating between overlapping networks.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT
  /// gateways</a> in the <i>Amazon VPC User Guide</i>.
  /// <important>
  /// When you create a public NAT gateway and assign it an EIP or secondary
  /// EIPs, the network border group of the EIPs must match the network border
  /// group of the Availability Zone (AZ) that the public NAT gateway is in. If
  /// it's not the same, the NAT gateway will fail to launch. You can see the
  /// network border group for the subnet's AZ by viewing the details of the
  /// subnet. Similarly, you can view the network border group of an EIP by
  /// viewing the details of the EIP address. For more information about network
  /// border groups and EIPs, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#allocate-eip">Allocate
  /// an Elastic IP address</a> in the <i>Amazon VPC User Guide</i>.
  /// </important>
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet in which to create the NAT gateway.
  ///
  /// Parameter [allocationId] :
  /// [Public NAT gateways only] The allocation ID of an Elastic IP address to
  /// associate with the NAT gateway. You cannot specify an Elastic IP address
  /// with a private NAT gateway. If the Elastic IP address is associated with
  /// another resource, you must first disassociate it.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Constraint: Maximum 64 ASCII characters.
  ///
  /// Parameter [connectivityType] :
  /// Indicates whether the NAT gateway supports public or private connectivity.
  /// The default is public connectivity.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [privateIpAddress] :
  /// The private IPv4 address to assign to the NAT gateway. If you don't
  /// provide an address, a private IPv4 address will be automatically assigned.
  ///
  /// Parameter [secondaryAllocationIds] :
  /// Secondary EIP allocation IDs. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating">Create
  /// a NAT gateway</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [secondaryPrivateIpAddressCount] :
  /// [Private NAT gateway only] The number of secondary private IPv4 addresses
  /// you want to assign to the NAT gateway. For more information about
  /// secondary addresses, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating">Create
  /// a NAT gateway</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [secondaryPrivateIpAddresses] :
  /// Secondary private IPv4 addresses. For more information about secondary
  /// addresses, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating">Create
  /// a NAT gateway</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the NAT gateway.
  Future<CreateNatGatewayResult> createNatGateway({
    required String subnetId,
    String? allocationId,
    String? clientToken,
    ConnectivityType? connectivityType,
    bool? dryRun,
    String? privateIpAddress,
    List<String>? secondaryAllocationIds,
    int? secondaryPrivateIpAddressCount,
    List<String>? secondaryPrivateIpAddresses,
    List<TagSpecification>? tagSpecifications,
  }) async {
    _s.validateNumRange(
      'secondaryPrivateIpAddressCount',
      secondaryPrivateIpAddressCount,
      1,
      31,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a network ACL in a VPC. Network ACLs provide an optional layer of
  /// security (in addition to security groups) for the instances in your VPC.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network
  /// ACLs</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the network ACL.
  Future<CreateNetworkAclResult> createNetworkAcl({
    required String vpcId,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an entry (a rule) in a network ACL with the specified rule number.
  /// Each network ACL has a set of numbered ingress rules and a separate set of
  /// numbered egress rules. When determining whether a packet should be allowed
  /// in or out of a subnet associated with the ACL, we process the entries in
  /// the ACL according to the rule numbers, in ascending order. Each network
  /// ACL has a set of ingress rules and a separate set of egress rules.
  ///
  /// We recommend that you leave room between the rule numbers (for example,
  /// 100, 110, 120, ...), and not number them one right after the other (for
  /// example, 101, 102, 103, ...). This makes it easier to add a rule between
  /// existing ones without having to renumber the rules.
  ///
  /// After you add an entry, you can't modify it; you must either replace it,
  /// or create an entry and delete the old one.
  ///
  /// For more information about network ACLs, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network
  /// ACLs</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [egress] :
  /// Indicates whether this is an egress rule (rule is applied to traffic
  /// leaving the subnet).
  ///
  /// Parameter [networkAclId] :
  /// The ID of the network ACL.
  ///
  /// Parameter [protocol] :
  /// The protocol number. A value of "-1" means all protocols. If you specify
  /// "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP),
  /// traffic on all ports is allowed, regardless of any ports or ICMP types or
  /// codes that you specify. If you specify protocol "58" (ICMPv6) and specify
  /// an IPv4 CIDR block, traffic for all ICMP types and codes allowed,
  /// regardless of any that you specify. If you specify protocol "58" (ICMPv6)
  /// and specify an IPv6 CIDR block, you must specify an ICMP type and code.
  ///
  /// Parameter [ruleAction] :
  /// Indicates whether to allow or deny the traffic that matches the rule.
  ///
  /// Parameter [ruleNumber] :
  /// The rule number for the entry (for example, 100). ACL entries are
  /// processed in ascending order by rule number.
  ///
  /// Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is
  /// reserved for internal use.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range to allow or deny, in CIDR notation (for example
  /// <code>172.16.0.0/24</code>). We modify the specified CIDR block to its
  /// canonical form; for example, if you specify <code>100.68.0.18/18</code>,
  /// we modify it to <code>100.68.0.0/18</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [icmpTypeCode] :
  /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying
  /// protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 network range to allow or deny, in CIDR notation (for example
  /// <code>2001:db8:1234:1a00::/64</code>).
  ///
  /// Parameter [portRange] :
  /// TCP or UDP protocols: The range of ports the rule applies to. Required if
  /// specifying protocol 6 (TCP) or 17 (UDP).
  Future<void> createNetworkAclEntry({
    required bool egress,
    required String networkAclId,
    required String protocol,
    required RuleAction ruleAction,
    required int ruleNumber,
    String? cidrBlock,
    bool? dryRun,
    IcmpTypeCode? icmpTypeCode,
    String? ipv6CidrBlock,
    PortRange? portRange,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Network Access Scope.
  ///
  /// Amazon Web Services Network Access Analyzer enables cloud networking and
  /// cloud operations teams to verify that their networks on Amazon Web
  /// Services conform to their network security and governance objectives. For
  /// more information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/">Amazon
  /// Web Services Network Access Analyzer Guide</a>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [excludePaths] :
  /// The paths to exclude.
  ///
  /// Parameter [matchPaths] :
  /// The paths to match.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply.
  Future<CreateNetworkInsightsAccessScopeResult>
      createNetworkInsightsAccessScope({
    String? clientToken,
    bool? dryRun,
    List<AccessScopePathRequest>? excludePaths,
    List<AccessScopePathRequest>? matchPaths,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a path to analyze for reachability.
  ///
  /// Reachability Analyzer enables you to analyze and debug network
  /// reachability between two resources in your virtual private cloud (VPC).
  /// For more information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/reachability/">Reachability
  /// Analyzer Guide</a>.
  ///
  /// Parameter [protocol] :
  /// The protocol.
  ///
  /// Parameter [source] :
  /// The ID or ARN of the source. If the resource is in another account, you
  /// must specify an ARN.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [destination] :
  /// The ID or ARN of the destination. If the resource is in another account,
  /// you must specify an ARN.
  ///
  /// Parameter [destinationIp] :
  /// The IP address of the destination.
  ///
  /// Parameter [destinationPort] :
  /// The destination port.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filterAtDestination] :
  /// Scopes the analysis to network paths that match specific filters at the
  /// destination. If you specify this parameter, you can't specify the
  /// parameter for the destination IP address.
  ///
  /// Parameter [filterAtSource] :
  /// Scopes the analysis to network paths that match specific filters at the
  /// source. If you specify this parameter, you can't specify the parameters
  /// for the source IP address or the destination port.
  ///
  /// Parameter [sourceIp] :
  /// The IP address of the source.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to add to the path.
  Future<CreateNetworkInsightsPathResult> createNetworkInsightsPath({
    required Protocol protocol,
    required String source,
    String? clientToken,
    String? destination,
    String? destinationIp,
    int? destinationPort,
    bool? dryRun,
    PathRequestFilter? filterAtDestination,
    PathRequestFilter? filterAtSource,
    String? sourceIp,
    List<TagSpecification>? tagSpecifications,
  }) async {
    _s.validateNumRange(
      'destinationPort',
      destinationPort,
      0,
      65535,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a network interface in the specified subnet.
  ///
  /// The number of IP addresses you can assign to a network interface varies by
  /// instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP
  /// Addresses Per ENI Per Instance Type</a> in the <i>Amazon Virtual Private
  /// Cloud User Guide</i>.
  ///
  /// For more information about network interfaces, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic
  /// network interfaces</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet to associate with the network interface.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [connectionTrackingSpecification] :
  /// A connection tracking specification for the network interface.
  ///
  /// Parameter [description] :
  /// A description for the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [enablePrimaryIpv6] :
  /// If you’re creating a network interface in a dual-stack or IPv6-only
  /// subnet, you have the option to assign a primary IPv6 IP address. A primary
  /// IPv6 address is an IPv6 GUA address associated with an ENI that you have
  /// enabled to use a primary IPv6 address. Use this option if the instance
  /// that this ENI will be attached to relies on its IPv6 address not changing.
  /// Amazon Web Services will automatically assign an IPv6 address associated
  /// with the ENI attached to your instance to be the primary IPv6 address.
  /// Once you enable an IPv6 GUA address to be a primary IPv6, you cannot
  /// disable it. When you enable an IPv6 GUA address to be a primary IPv6, the
  /// first IPv6 GUA will be made the primary IPv6 address until the instance is
  /// terminated or the network interface is detached. If you have multiple IPv6
  /// addresses associated with an ENI attached to your instance and you enable
  /// a primary IPv6 address, the first IPv6 GUA address associated with the ENI
  /// becomes the primary IPv6 address.
  ///
  /// Parameter [groups] :
  /// The IDs of one or more security groups.
  ///
  /// Parameter [interfaceType] :
  /// The type of network interface. The default is <code>interface</code>.
  ///
  /// The only supported values are <code>interface</code>, <code>efa</code>,
  /// and <code>trunk</code>.
  ///
  /// Parameter [ipv4PrefixCount] :
  /// The number of IPv4 prefixes that Amazon Web Services automatically assigns
  /// to the network interface.
  ///
  /// You can't specify a count of IPv4 prefixes if you've specified one of the
  /// following: specific IPv4 prefixes, specific private IPv4 addresses, or a
  /// count of private IPv4 addresses.
  ///
  /// Parameter [ipv4Prefixes] :
  /// The IPv4 prefixes assigned to the network interface.
  ///
  /// You can't specify IPv4 prefixes if you've specified one of the following:
  /// a count of IPv4 prefixes, specific private IPv4 addresses, or a count of
  /// private IPv4 addresses.
  ///
  /// Parameter [ipv6AddressCount] :
  /// The number of IPv6 addresses to assign to a network interface. Amazon EC2
  /// automatically selects the IPv6 addresses from the subnet range.
  ///
  /// You can't specify a count of IPv6 addresses using this parameter if you've
  /// specified one of the following: specific IPv6 addresses, specific IPv6
  /// prefixes, or a count of IPv6 prefixes.
  ///
  /// If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute
  /// set, you can override that setting by specifying 0 as the IPv6 address
  /// count.
  ///
  /// Parameter [ipv6Addresses] :
  /// The IPv6 addresses from the IPv6 CIDR block range of your subnet.
  ///
  /// You can't specify IPv6 addresses using this parameter if you've specified
  /// one of the following: a count of IPv6 addresses, specific IPv6 prefixes,
  /// or a count of IPv6 prefixes.
  ///
  /// Parameter [ipv6PrefixCount] :
  /// The number of IPv6 prefixes that Amazon Web Services automatically assigns
  /// to the network interface.
  ///
  /// You can't specify a count of IPv6 prefixes if you've specified one of the
  /// following: specific IPv6 prefixes, specific IPv6 addresses, or a count of
  /// IPv6 addresses.
  ///
  /// Parameter [ipv6Prefixes] :
  /// The IPv6 prefixes assigned to the network interface.
  ///
  /// You can't specify IPv6 prefixes if you've specified one of the following:
  /// a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6
  /// addresses.
  ///
  /// Parameter [privateIpAddress] :
  /// The primary private IPv4 address of the network interface. If you don't
  /// specify an IPv4 address, Amazon EC2 selects one for you from the subnet's
  /// IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP
  /// addresses specified in <code>privateIpAddresses</code> as primary (only
  /// one IP address can be designated as primary).
  ///
  /// Parameter [privateIpAddresses] :
  /// The private IPv4 addresses.
  ///
  /// You can't specify private IPv4 addresses if you've specified one of the
  /// following: a count of private IPv4 addresses, specific IPv4 prefixes, or a
  /// count of IPv4 prefixes.
  ///
  /// Parameter [secondaryPrivateIpAddressCount] :
  /// The number of secondary private IPv4 addresses to assign to a network
  /// interface. When you specify a number of secondary IPv4 addresses, Amazon
  /// EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You
  /// can't specify this option and specify more than one private IP address
  /// using <code>privateIpAddresses</code>.
  ///
  /// You can't specify a count of private IPv4 addresses if you've specified
  /// one of the following: specific private IPv4 addresses, specific IPv4
  /// prefixes, or a count of IPv4 prefixes.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new network interface.
  Future<CreateNetworkInterfaceResult> createNetworkInterface({
    required String subnetId,
    String? clientToken,
    ConnectionTrackingSpecificationRequest? connectionTrackingSpecification,
    String? description,
    bool? dryRun,
    bool? enablePrimaryIpv6,
    List<String>? groups,
    NetworkInterfaceCreationType? interfaceType,
    int? ipv4PrefixCount,
    List<Ipv4PrefixSpecificationRequest>? ipv4Prefixes,
    int? ipv6AddressCount,
    List<InstanceIpv6Address>? ipv6Addresses,
    int? ipv6PrefixCount,
    List<Ipv6PrefixSpecificationRequest>? ipv6Prefixes,
    String? privateIpAddress,
    List<PrivateIpAddressSpecification>? privateIpAddresses,
    int? secondaryPrivateIpAddressCount,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Grants an Amazon Web Services-authorized account permission to attach the
  /// specified network interface to an instance in their account.
  ///
  /// You can grant permission to a single Amazon Web Services account only, and
  /// only one account at a time.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [permission] :
  /// The type of permission to grant.
  ///
  /// Parameter [awsAccountId] :
  /// The Amazon Web Services account ID.
  ///
  /// Parameter [awsService] :
  /// The Amazon Web Service. Currently not supported.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateNetworkInterfacePermissionResult>
      createNetworkInterfacePermission({
    required String networkInterfaceId,
    required InterfacePermissionType permission,
    String? awsAccountId,
    String? awsService,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a placement group in which to launch instances. The strategy of
  /// the placement group determines how the instances are organized within the
  /// group.
  ///
  /// A <code>cluster</code> placement group is a logical grouping of instances
  /// within a single Availability Zone that benefit from low network latency,
  /// high network throughput. A <code>spread</code> placement group places
  /// instances on distinct hardware. A <code>partition</code> placement group
  /// places groups of instances in different partitions, where instances in one
  /// partition do not share the same hardware with instances in another
  /// partition.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
  /// groups</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupName] :
  /// A name for the placement group. Must be unique within the scope of your
  /// account for the Region.
  ///
  /// Constraints: Up to 255 ASCII characters
  ///
  /// Parameter [partitionCount] :
  /// The number of partitions. Valid only when <b>Strategy</b> is set to
  /// <code>partition</code>.
  ///
  /// Parameter [spreadLevel] :
  /// Determines how placement groups spread instances.
  ///
  /// <ul>
  /// <li>
  /// Host – You can use <code>host</code> only with Outpost placement groups.
  /// </li>
  /// <li>
  /// Rack – No usage restrictions.
  /// </li>
  /// </ul>
  ///
  /// Parameter [strategy] :
  /// The placement strategy.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new placement group.
  Future<CreatePlacementGroupResult> createPlacementGroup({
    bool? dryRun,
    String? groupName,
    int? partitionCount,
    SpreadLevel? spreadLevel,
    PlacementStrategy? strategy,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP
  /// address pool required for the public IPv4 CIDRs that you own and bring to
  /// Amazon Web Services to manage with IPAM. IPv6 addresses you bring to
  /// Amazon Web Services, however, use IPAM pools only. To monitor the status
  /// of pool creation, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePublicIpv4Pools.html">DescribePublicIpv4Pools</a>.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The key/value combination of a tag assigned to the resource. Use the tag
  /// key in the filter name and the tag value as the filter value. For example,
  /// to find all resources that have a tag with the key <code>Owner</code> and
  /// the value <code>TeamA</code>, specify <code>tag:Owner</code> for the
  /// filter name and <code>TeamA</code> for the filter value.
  Future<CreatePublicIpv4PoolResult> createPublicIpv4Pool({
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces the EBS-backed root volume for a <code>running</code> instance
  /// with a new volume that is restored to the original root volume's launch
  /// state, that is restored to a specific snapshot taken from the original
  /// root volume, or that is restored from an AMI that has the same key
  /// characteristics as that of the instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html">Replace
  /// a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance for which to replace the root volume.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. If you do not specify a client token, a randomly generated
  /// token is used for the request to ensure idempotency. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Parameter [deleteReplacedRootVolume] :
  /// Indicates whether to automatically delete the original root volume after
  /// the root volume replacement task completes. To delete the original root
  /// volume, specify <code>true</code>. If you choose to keep the original root
  /// volume after the replacement task completes, you must manually delete it
  /// when you no longer need it.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI to use to restore the root volume. The specified AMI
  /// must have the same product code, billing information, architecture type,
  /// and virtualization type as that of the instance.
  ///
  /// If you want to restore the replacement volume from a specific snapshot, or
  /// if you want to restore it to its launch state, omit this parameter.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot from which to restore the replacement root volume.
  /// The specified snapshot must be a snapshot that you previously created from
  /// the original root volume.
  ///
  /// If you want to restore the replacement root volume to the initial launch
  /// state, or if you want to restore the replacement root volume from an AMI,
  /// omit this parameter.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the root volume replacement task.
  Future<CreateReplaceRootVolumeTaskResult> createReplaceRootVolumeTask({
    required String instanceId,
    String? clientToken,
    bool? deleteReplacedRootVolume,
    bool? dryRun,
    String? imageId,
    String? snapshotId,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in
  /// the Reserved Instance Marketplace. You can submit one Standard Reserved
  /// Instance listing at a time. To get a list of your Standard Reserved
  /// Instances, you can use the <a>DescribeReservedInstances</a> operation.
  /// <note>
  /// Only Standard Reserved Instances can be sold in the Reserved Instance
  /// Marketplace. Convertible Reserved Instances cannot be sold.
  /// </note>
  /// The Reserved Instance Marketplace matches sellers who want to resell
  /// Standard Reserved Instance capacity that they no longer need with buyers
  /// who want to purchase additional capacity. Reserved Instances bought and
  /// sold through the Reserved Instance Marketplace work like any other
  /// Reserved Instances.
  ///
  /// To sell your Standard Reserved Instances, you must first register as a
  /// seller in the Reserved Instance Marketplace. After completing the
  /// registration process, you can create a Reserved Instance Marketplace
  /// listing of some or all of your Standard Reserved Instances, and specify
  /// the upfront price to receive for them. Your Standard Reserved Instance
  /// listings then become available for purchase. To view the details of your
  /// Standard Reserved Instance listing, you can use the
  /// <a>DescribeReservedInstancesListings</a> operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure idempotency of
  /// your listings. This helps avoid duplicate listings. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances that are a part of a Reserved Instance account to
  /// be listed in the Reserved Instance Marketplace. This number should be less
  /// than or equal to the instance count associated with the Reserved Instance
  /// ID specified in this call.
  ///
  /// Parameter [priceSchedules] :
  /// A list specifying the price of the Standard Reserved Instance for each
  /// month remaining in the Reserved Instance term.
  ///
  /// Parameter [reservedInstancesId] :
  /// The ID of the active Standard Reserved Instance.
  Future<CreateReservedInstancesListingResult> createReservedInstancesListing({
    required String clientToken,
    required int instanceCount,
    required List<PriceScheduleSpecification> priceSchedules,
    required String reservedInstancesId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Starts a task that restores an AMI from an Amazon S3 object that was
  /// previously created by using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.
  ///
  /// To use this API, you must have the required permissions. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions
  /// for storing and restoring AMIs using Amazon S3</a> in the <i>Amazon EC2
  /// User Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store
  /// and restore an AMI using Amazon S3</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket that contains the stored AMI object.
  ///
  /// Parameter [objectKey] :
  /// The name of the stored AMI object in the bucket.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [name] :
  /// The name for the restored AMI. The name must be unique for AMIs in the
  /// Region for this account. If you do not provide a name, the new AMI gets
  /// the same name as the original AMI.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the AMI and snapshots on restoration. You can tag the
  /// AMI, the snapshots, or both.
  ///
  /// <ul>
  /// <li>
  /// To tag the AMI, the value for <code>ResourceType</code> must be
  /// <code>image</code>.
  /// </li>
  /// <li>
  /// To tag the snapshots, the value for <code>ResourceType</code> must be
  /// <code>snapshot</code>. The same tag is applied to all of the snapshots
  /// that are created.
  /// </li>
  /// </ul>
  Future<CreateRestoreImageTaskResult> createRestoreImageTask({
    required String bucket,
    required String objectKey,
    bool? dryRun,
    String? name,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a route in a route table within a VPC.
  ///
  /// You must specify either a destination CIDR block or a prefix list ID. You
  /// must also specify exactly one of the resources from the parameter list.
  ///
  /// When determining how to route traffic, we use the route with the most
  /// specific match. For example, traffic is destined for the IPv4 address
  /// <code>192.0.2.3</code>, and the route table includes the following two
  /// IPv4 routes:
  ///
  /// <ul>
  /// <li>
  /// <code>192.0.2.0/24</code> (goes to some target A)
  /// </li>
  /// <li>
  /// <code>192.0.2.0/28</code> (goes to some target B)
  /// </li>
  /// </ul>
  /// Both routes apply to the traffic destined for <code>192.0.2.3</code>.
  /// However, the second route in the list covers a smaller number of IP
  /// addresses and is therefore more specific, so we use that route to
  /// determine where to target the traffic.
  ///
  /// For more information about route tables, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table for the route.
  ///
  /// Parameter [carrierGatewayId] :
  /// The ID of the carrier gateway.
  ///
  /// You can only use this option when the VPC contains a subnet which is
  /// associated with a Wavelength Zone.
  ///
  /// Parameter [coreNetworkArn] :
  /// The Amazon Resource Name (ARN) of the core network.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 CIDR address block used for the destination match. Routing
  /// decisions are based on the most specific match. We modify the specified
  /// CIDR block to its canonical form; for example, if you specify
  /// <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.
  ///
  /// Parameter [destinationIpv6CidrBlock] :
  /// The IPv6 CIDR block used for the destination match. Routing decisions are
  /// based on the most specific match.
  ///
  /// Parameter [destinationPrefixListId] :
  /// The ID of a prefix list used for the destination match.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [egressOnlyInternetGatewayId] :
  /// [IPv6 traffic only] The ID of an egress-only internet gateway.
  ///
  /// Parameter [gatewayId] :
  /// The ID of an internet gateway or virtual private gateway attached to your
  /// VPC.
  ///
  /// Parameter [instanceId] :
  /// The ID of a NAT instance in your VPC. The operation fails if you specify
  /// an instance ID unless exactly one network interface is attached.
  ///
  /// Parameter [localGatewayId] :
  /// The ID of the local gateway.
  ///
  /// Parameter [natGatewayId] :
  /// [IPv4 traffic only] The ID of a NAT gateway.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of a network interface.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of a transit gateway.
  ///
  /// Parameter [vpcEndpointId] :
  /// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints
  /// only.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of a VPC peering connection.
  Future<CreateRouteResult> createRoute({
    required String routeTableId,
    String? carrierGatewayId,
    String? coreNetworkArn,
    String? destinationCidrBlock,
    String? destinationIpv6CidrBlock,
    String? destinationPrefixListId,
    bool? dryRun,
    String? egressOnlyInternetGatewayId,
    String? gatewayId,
    String? instanceId,
    String? localGatewayId,
    String? natGatewayId,
    String? networkInterfaceId,
    String? transitGatewayId,
    String? vpcEndpointId,
    String? vpcPeeringConnectionId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a route table for the specified VPC. After you create a route
  /// table, you can add routes and associate the table with a subnet.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the route table.
  Future<CreateRouteTableResult> createRouteTable({
    required String vpcId,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a security group.
  ///
  /// A security group acts as a virtual firewall for your instance to control
  /// inbound and outbound traffic. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon
  /// EC2 security groups</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security
  /// groups for your VPC</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// When you create a security group, you specify a friendly name of your
  /// choice. You can't have two security groups for the same VPC with the same
  /// name.
  ///
  /// You have a default security group for use in your VPC. If you don't
  /// specify a security group when you launch an instance, the instance is
  /// launched into the appropriate default security group. A default security
  /// group includes a default rule that grants instances unrestricted network
  /// access to each other.
  ///
  /// You can add or remove rules from your security groups using
  /// <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>,
  /// <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.
  ///
  /// For more information about VPC security group limits, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon
  /// VPC Limits</a>.
  ///
  /// Parameter [description] :
  /// A description for the security group.
  ///
  /// Constraints: Up to 255 characters in length
  ///
  /// Valid characters: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
  ///
  /// Parameter [groupName] :
  /// The name of the security group.
  ///
  /// Constraints: Up to 255 characters in length. Cannot start with
  /// <code>sg-</code>.
  ///
  /// Valid characters: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the security group.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC. Required for a nondefault VPC.
  Future<CreateSecurityGroupResult> createSecurityGroup({
    required String description,
    required String groupName,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
    String? vpcId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a snapshot of an EBS volume and stores it in Amazon S3. You can
  /// use snapshots for backups, to make copies of EBS volumes, and to save data
  /// before shutting down an instance.
  ///
  /// You can create snapshots of volumes in a Region and volumes on an Outpost.
  /// If you create a snapshot of a volume in a Region, the snapshot must be
  /// stored in the same Region as the volume. If you create a snapshot of a
  /// volume on an Outpost, the snapshot can be stored on the same Outpost as
  /// the volume, or in the Region for that Outpost.
  ///
  /// When a snapshot is created, any Amazon Web Services Marketplace product
  /// codes that are associated with the source volume are propagated to the
  /// snapshot.
  ///
  /// You can take a snapshot of an attached volume that is in use. However,
  /// snapshots only capture data that has been written to your Amazon EBS
  /// volume at the time the snapshot command is issued; this might exclude any
  /// data that has been cached by any applications or the operating system. If
  /// you can pause any file systems on the volume long enough to take a
  /// snapshot, your snapshot should be complete. However, if you cannot pause
  /// all file writes to the volume, you should unmount the volume from within
  /// the instance, issue the snapshot command, and then remount the volume to
  /// ensure a consistent and complete snapshot. You may remount and use your
  /// volume while the snapshot status is <code>pending</code>.
  ///
  /// When you create a snapshot for an EBS volume that serves as a root device,
  /// we recommend that you stop the instance before taking the snapshot.
  ///
  /// Snapshots that are taken from encrypted volumes are automatically
  /// encrypted. Volumes that are created from encrypted snapshots are also
  /// automatically encrypted. Your encrypted volumes and any associated
  /// snapshots always remain protected.
  ///
  /// You can tag your snapshots during creation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag
  /// your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/what-is-ebs.html">Amazon
  /// Elastic Block Store</a> and <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [volumeId] :
  /// The ID of the Amazon EBS volume.
  ///
  /// Parameter [description] :
  /// A description for the snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost on which to create a local
  /// snapshot.
  ///
  /// <ul>
  /// <li>
  /// To create a snapshot of a volume in a Region, omit this parameter. The
  /// snapshot is created in the same Region as the volume.
  /// </li>
  /// <li>
  /// To create a snapshot of a volume on an Outpost and store the snapshot in
  /// the Region, omit this parameter. The snapshot is created in the Region for
  /// the Outpost.
  /// </li>
  /// <li>
  /// To create a snapshot of a volume on an Outpost and store the snapshot on
  /// an Outpost, specify the ARN of the destination Outpost. The snapshot must
  /// be created on the same Outpost as the volume.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#create-snapshot">Create
  /// local snapshots from volumes on an Outpost</a> in the <i>Amazon EBS User
  /// Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the snapshot during creation.
  Future<Snapshot> createSnapshot({
    required String volumeId,
    String? description,
    bool? dryRun,
    String? outpostArn,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates crash-consistent snapshots of multiple EBS volumes and stores the
  /// data in S3. Volumes are chosen by specifying an instance. Any attached
  /// volumes will produce one snapshot each that is crash-consistent across the
  /// instance.
  ///
  /// You can include all of the volumes currently attached to the instance, or
  /// you can exclude the root volume or specific data (non-root) volumes from
  /// the multi-volume snapshot set.
  ///
  /// You can create multi-volume snapshots of instances in a Region and
  /// instances on an Outpost. If you create snapshots from an instance in a
  /// Region, the snapshots must be stored in the same Region as the instance.
  /// If you create snapshots from an instance on an Outpost, the snapshots can
  /// be stored on the same Outpost as the instance, or in the Region for that
  /// Outpost.
  ///
  /// Parameter [instanceSpecification] :
  /// The instance to specify which volumes should be included in the snapshots.
  ///
  /// Parameter [copyTagsFromSource] :
  /// Copies the tags from the specified volume to corresponding snapshot.
  ///
  /// Parameter [description] :
  /// A description propagated to every snapshot specified by the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost on which to create the local
  /// snapshots.
  ///
  /// <ul>
  /// <li>
  /// To create snapshots from an instance in a Region, omit this parameter. The
  /// snapshots are created in the same Region as the instance.
  /// </li>
  /// <li>
  /// To create snapshots from an instance on an Outpost and store the snapshots
  /// in the Region, omit this parameter. The snapshots are created in the
  /// Region for the Outpost.
  /// </li>
  /// <li>
  /// To create snapshots from an instance on an Outpost and store the snapshots
  /// on an Outpost, specify the ARN of the destination Outpost. The snapshots
  /// must be created on the same Outpost as the instance.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#create-multivol-snapshot">
  /// Create multi-volume local snapshots from instances on an Outpost</a> in
  /// the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// Tags to apply to every snapshot specified by the instance.
  Future<CreateSnapshotsResult> createSnapshots({
    required InstanceSpecification instanceSpecification,
    CopyTagsFromSource? copyTagsFromSource,
    String? description,
    bool? dryRun,
    String? outpostArn,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a data feed for Spot Instances, enabling you to view Spot Instance
  /// usage logs. You can create one data feed per Amazon Web Services account.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
  /// Instance data feed</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket in which to store the Spot Instance data
  /// feed. For more information about bucket names, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules">Rules
  /// for bucket naming</a> in the <i>Amazon S3 Developer Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [prefix] :
  /// The prefix for the data feed file names.
  Future<CreateSpotDatafeedSubscriptionResult> createSpotDatafeedSubscription({
    required String bucket,
    bool? dryRun,
    String? prefix,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Stores an AMI as a single object in an Amazon S3 bucket.
  ///
  /// To use this API, you must have the required permissions. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions
  /// for storing and restoring AMIs using Amazon S3</a> in the <i>Amazon EC2
  /// User Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store
  /// and restore an AMI using Amazon S3</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [bucket] :
  /// The name of the Amazon S3 bucket in which the AMI object will be stored.
  /// The bucket must be in the Region in which the request is being made. The
  /// AMI object appears in the bucket only after the upload task has completed.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [s3ObjectTags] :
  /// The tags to apply to the AMI object that will be stored in the Amazon S3
  /// bucket.
  Future<CreateStoreImageTaskResult> createStoreImageTask({
    required String bucket,
    required String imageId,
    bool? dryRun,
    List<S3ObjectTag>? s3ObjectTags,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a subnet in the specified VPC. For an IPv4 only subnet, specify an
  /// IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6
  /// only subnet or a dual stack subnet instead. For an IPv6 only subnet,
  /// specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4
  /// CIDR block and an IPv6 CIDR block.
  ///
  /// A subnet CIDR block must not overlap the CIDR block of an existing subnet
  /// in the VPC. After you create a subnet, you can't change its CIDR block.
  ///
  /// The allowed size for an IPv4 subnet is between a /28 netmask (16 IP
  /// addresses) and a /16 netmask (65,536 IP addresses). Amazon Web Services
  /// reserves both the first four and the last IPv4 address in each subnet's
  /// CIDR block. They're not available for your use.
  ///
  /// If you've associated an IPv6 CIDR block with your VPC, you can associate
  /// an IPv6 CIDR block with a subnet when you create it.
  ///
  /// If you add more than one subnet to a VPC, they're set up in a star
  /// topology with a logical router in the middle.
  ///
  /// When you stop an instance in a subnet, it retains its private IPv4
  /// address. It's therefore possible to have a subnet with no running
  /// instances (they're all stopped), but no remaining IP addresses available.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html">Subnets</a>
  /// in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone or Local Zone for the subnet.
  ///
  /// Default: Amazon Web Services selects one for you. If you create more than
  /// one subnet in your VPC, we do not necessarily select a different zone for
  /// each subnet.
  ///
  /// To create a subnet in a Local Zone, set this value to the Local Zone ID,
  /// for example <code>us-west-2-lax-1a</code>. For information about the
  /// Regions that support Local Zones, see <a
  /// href="http://aws.amazon.com/about-aws/global-infrastructure/localzones/locations/">Local
  /// Zones locations</a>.
  ///
  /// To create a subnet in an Outpost, set this value to the Availability Zone
  /// for the Outpost and specify the Outpost ARN.
  ///
  /// Parameter [availabilityZoneId] :
  /// The AZ ID or the Local Zone ID of the subnet.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range for the subnet, in CIDR notation. For example,
  /// <code>10.0.0.0/24</code>. We modify the specified CIDR block to its
  /// canonical form; for example, if you specify <code>100.68.0.18/18</code>,
  /// we modify it to <code>100.68.0.0/18</code>.
  ///
  /// This parameter is not supported for an IPv6 only subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ipv4IpamPoolId] :
  /// An IPv4 IPAM pool ID for the subnet.
  ///
  /// Parameter [ipv4NetmaskLength] :
  /// An IPv4 netmask length for the subnet.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 network range for the subnet, in CIDR notation. This parameter is
  /// required for an IPv6 only subnet.
  ///
  /// Parameter [ipv6IpamPoolId] :
  /// An IPv6 IPAM pool ID for the subnet.
  ///
  /// Parameter [ipv6Native] :
  /// Indicates whether to create an IPv6 only subnet.
  ///
  /// Parameter [ipv6NetmaskLength] :
  /// An IPv6 netmask length for the subnet.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost
  /// ARN, you must also specify the Availability Zone of the Outpost subnet.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the subnet.
  Future<CreateSubnetResult> createSubnet({
    required String vpcId,
    String? availabilityZone,
    String? availabilityZoneId,
    String? cidrBlock,
    bool? dryRun,
    String? ipv4IpamPoolId,
    int? ipv4NetmaskLength,
    String? ipv6CidrBlock,
    String? ipv6IpamPoolId,
    bool? ipv6Native,
    int? ipv6NetmaskLength,
    String? outpostArn,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a subnet CIDR reservation. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/subnet-cidr-reservation.html">Subnet
  /// CIDR reservations</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">Assign
  /// prefixes to network interfaces</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// Parameter [cidr] :
  /// The IPv4 or IPV6 CIDR range to reserve.
  ///
  /// Parameter [reservationType] :
  /// The type of reservation. The reservation type determines how the reserved
  /// IP addresses are assigned to resources.
  ///
  /// <ul>
  /// <li>
  /// <code>prefix</code> - Amazon Web Services assigns the reserved IP
  /// addresses to network interfaces.
  /// </li>
  /// <li>
  /// <code>explicit</code> - You assign the reserved IP addresses to network
  /// interfaces.
  /// </li>
  /// </ul>
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  ///
  /// Parameter [description] :
  /// The description to assign to the subnet CIDR reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the subnet CIDR reservation.
  Future<CreateSubnetCidrReservationResult> createSubnetCidrReservation({
    required String cidr,
    required SubnetCidrReservationType reservationType,
    required String subnetId,
    String? description,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds or overwrites only the specified tags for the specified Amazon EC2
  /// resource or resources. When you specify an existing tag key, the value is
  /// overwritten with the new value. Each resource can have a maximum of 50
  /// tags. Each tag consists of a key and optional value. Tag keys must be
  /// unique per resource.
  ///
  /// For more information about tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag
  /// your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>. For more information about creating IAM policies that control
  /// users' access to resources based on tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported
  /// resource-level permissions for Amazon EC2 API actions</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [resources] :
  /// The IDs of the resources, separated by spaces.
  ///
  /// Constraints: Up to 1000 resource IDs. We recommend breaking up this
  /// request into smaller batches.
  ///
  /// Parameter [tags] :
  /// The tags. The <code>value</code> parameter is required, but if you don't
  /// want the tag to have a value, specify the parameter with no value, and we
  /// set the value to an empty string.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> createTags({
    required List<String> resources,
    required List<Tag> tags,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Traffic Mirror filter.
  ///
  /// A Traffic Mirror filter is a set of rules that defines the traffic to
  /// mirror.
  ///
  /// By default, no traffic is mirrored. To mirror traffic, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a>
  /// to add Traffic Mirror rules to the filter. The rules you add define what
  /// traffic gets mirrored. You can also use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a>
  /// to mirror supported network services.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror filter.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to a Traffic Mirror filter.
  Future<CreateTrafficMirrorFilterResult> createTrafficMirrorFilter({
    String? clientToken,
    String? description,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Traffic Mirror filter rule.
  ///
  /// A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.
  ///
  /// You need the Traffic Mirror filter ID when you create the rule.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The destination CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [ruleAction] :
  /// The action to take on the filtered traffic.
  ///
  /// Parameter [ruleNumber] :
  /// The number of the Traffic Mirror rule. This number must be unique for each
  /// Traffic Mirror rule in a given direction. The rules are processed in
  /// ascending order by rule number.
  ///
  /// Parameter [sourceCidrBlock] :
  /// The source CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [trafficDirection] :
  /// The type of traffic.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the filter that this rule is associated with.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror rule.
  ///
  /// Parameter [destinationPortRange] :
  /// The destination port range.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [protocol] :
  /// The protocol, for example UDP, to assign to the Traffic Mirror rule.
  ///
  /// For information about the protocol value, see <a
  /// href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.
  ///
  /// Parameter [sourcePortRange] :
  /// The source port range.
  Future<CreateTrafficMirrorFilterRuleResult> createTrafficMirrorFilterRule({
    required String destinationCidrBlock,
    required TrafficMirrorRuleAction ruleAction,
    required int ruleNumber,
    required String sourceCidrBlock,
    required TrafficDirection trafficDirection,
    required String trafficMirrorFilterId,
    String? clientToken,
    String? description,
    TrafficMirrorPortRangeRequest? destinationPortRange,
    bool? dryRun,
    int? protocol,
    TrafficMirrorPortRangeRequest? sourcePortRange,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Traffic Mirror session.
  ///
  /// A Traffic Mirror session actively copies packets from a Traffic Mirror
  /// source to a Traffic Mirror target. Create a filter, and then assign it to
  /// the session to define a subset of the traffic to mirror, for example all
  /// TCP traffic.
  ///
  /// The Traffic Mirror source and the Traffic Mirror target (monitoring
  /// appliances) can be in the same VPC, or in a different VPC connected via
  /// VPC peering or a transit gateway.
  ///
  /// By default, no traffic is mirrored. Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a>
  /// to create filter rules that specify the traffic to mirror.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the source network interface.
  ///
  /// Parameter [sessionNumber] :
  /// The session number determines the order in which sessions are evaluated
  /// when an interface is used by multiple sessions. The first session with a
  /// matching filter is the one that mirrors the packets.
  ///
  /// Valid values are 1-32766.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [trafficMirrorTargetId] :
  /// The ID of the Traffic Mirror target.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror session.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [packetLength] :
  /// The number of bytes in each packet to mirror. These are bytes after the
  /// VXLAN header. Do not specify this parameter when you want to mirror the
  /// entire packet. To mirror a subset of the packet, set this to the length
  /// (in bytes) that you want to mirror. For example, if you set this value to
  /// 100, then the first 100 bytes that meet the filter criteria are copied to
  /// the target.
  ///
  /// If you do not want to mirror the entire packet, use the
  /// <code>PacketLength</code> parameter to specify the number of bytes in each
  /// packet to mirror.
  ///
  /// For sessions with Network Load Balancer (NLB) Traffic Mirror targets the
  /// default <code>PacketLength</code> will be set to 8500. Valid values are
  /// 1-8500. Setting a <code>PacketLength</code> greater than 8500 will result
  /// in an error response.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to a Traffic Mirror session.
  ///
  /// Parameter [virtualNetworkId] :
  /// The VXLAN ID for the Traffic Mirror session. For more information about
  /// the VXLAN protocol, see <a href="https://tools.ietf.org/html/rfc7348">RFC
  /// 7348</a>. If you do not specify a <code>VirtualNetworkId</code>, an
  /// account-wide unique id is chosen at random.
  Future<CreateTrafficMirrorSessionResult> createTrafficMirrorSession({
    required String networkInterfaceId,
    required int sessionNumber,
    required String trafficMirrorFilterId,
    required String trafficMirrorTargetId,
    String? clientToken,
    String? description,
    bool? dryRun,
    int? packetLength,
    List<TagSpecification>? tagSpecifications,
    int? virtualNetworkId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a target for your Traffic Mirror session.
  ///
  /// A Traffic Mirror target is the destination for mirrored traffic. The
  /// Traffic Mirror source and the Traffic Mirror target (monitoring
  /// appliances) can be in the same VPC, or in different VPCs connected via VPC
  /// peering or a transit gateway.
  ///
  /// A Traffic Mirror target can be a network interface, a Network Load
  /// Balancer, or a Gateway Load Balancer endpoint.
  ///
  /// To use the target in a Traffic Mirror session, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror target.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [gatewayLoadBalancerEndpointId] :
  /// The ID of the Gateway Load Balancer endpoint.
  ///
  /// Parameter [networkInterfaceId] :
  /// The network interface ID that is associated with the target.
  ///
  /// Parameter [networkLoadBalancerArn] :
  /// The Amazon Resource Name (ARN) of the Network Load Balancer that is
  /// associated with the target.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Traffic Mirror target.
  Future<CreateTrafficMirrorTargetResult> createTrafficMirrorTarget({
    String? clientToken,
    String? description,
    bool? dryRun,
    String? gatewayLoadBalancerEndpointId,
    String? networkInterfaceId,
    String? networkLoadBalancerArn,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a transit gateway.
  ///
  /// You can use a transit gateway to interconnect your virtual private clouds
  /// (VPC) and on-premises networks. After the transit gateway enters the
  /// <code>available</code> state, you can attach your VPCs and VPN connections
  /// to the transit gateway.
  ///
  /// To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.
  ///
  /// To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a
  /// customer gateway and specify the ID of the customer gateway and the ID of
  /// the transit gateway in a call to <a>CreateVpnConnection</a>.
  ///
  /// When you create a transit gateway, we create a default transit gateway
  /// route table and use it as the default association route table and the
  /// default propagation route table. You can use
  /// <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway
  /// route tables. If you disable automatic route propagation, we do not create
  /// a default transit gateway route table. You can use
  /// <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from
  /// a resource attachment to a transit gateway route table. If you disable
  /// automatic associations, you can use
  /// <a>AssociateTransitGatewayRouteTable</a> to associate a resource
  /// attachment with a transit gateway route table.
  ///
  /// Parameter [description] :
  /// A description of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The transit gateway options.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the transit gateway.
  Future<CreateTransitGatewayResult> createTransitGateway({
    String? description,
    bool? dryRun,
    TransitGatewayRequestOptions? options,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Connect attachment from a specified transit gateway attachment.
  /// A Connect attachment is a GRE-based tunnel attachment that you can use to
  /// establish a connection between a transit gateway and an appliance.
  ///
  /// A Connect attachment uses an existing VPC or Amazon Web Services Direct
  /// Connect attachment as the underlying transport mechanism.
  ///
  /// Parameter [options] :
  /// The Connect attachment options.
  ///
  /// Parameter [transportTransitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment. You can specify a VPC attachment
  /// or Amazon Web Services Direct Connect attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Connect attachment.
  Future<CreateTransitGatewayConnectResult> createTransitGatewayConnect({
    required CreateTransitGatewayConnectRequestOptions options,
    required String transportTransitGatewayAttachmentId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Connect peer for a specified transit gateway Connect attachment
  /// between a transit gateway and an appliance.
  ///
  /// The peer address and transit gateway address must be the same IP address
  /// family (IPv4 or IPv6).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html#tgw-connect-peer">Connect
  /// peers</a> in the <i>Transit Gateways Guide</i>.
  ///
  /// Parameter [insideCidrBlocks] :
  /// The range of inside IP addresses that are used for BGP peering. You must
  /// specify a size /29 IPv4 CIDR block from the <code>169.254.0.0/16</code>
  /// range. The first address from the range must be configured on the
  /// appliance as the BGP IP address. You can also optionally specify a size
  /// /125 IPv6 CIDR block from the <code>fd00::/8</code> range.
  ///
  /// Parameter [peerAddress] :
  /// The peer IP address (GRE outer IP address) on the appliance side of the
  /// Connect peer.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the Connect attachment.
  ///
  /// Parameter [bgpOptions] :
  /// The BGP options for the Connect peer.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Connect peer.
  ///
  /// Parameter [transitGatewayAddress] :
  /// The peer IP address (GRE outer IP address) on the transit gateway side of
  /// the Connect peer, which must be specified from a transit gateway CIDR
  /// block. If not specified, Amazon automatically assigns the first available
  /// IP address from the transit gateway CIDR block.
  Future<CreateTransitGatewayConnectPeerResult>
      createTransitGatewayConnectPeer({
    required List<String> insideCidrBlocks,
    required String peerAddress,
    required String transitGatewayAttachmentId,
    TransitGatewayConnectRequestBgpOptions? bgpOptions,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
    String? transitGatewayAddress,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a multicast domain using the specified transit gateway.
  ///
  /// The transit gateway must be in the available state before you create a
  /// domain. Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a>
  /// to see the state of transit gateway.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The options for the transit gateway multicast domain.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags for the transit gateway multicast domain.
  Future<CreateTransitGatewayMulticastDomainResult>
      createTransitGatewayMulticastDomain({
    required String transitGatewayId,
    bool? dryRun,
    CreateTransitGatewayMulticastDomainRequestOptions? options,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Requests a transit gateway peering attachment between the specified
  /// transit gateway (requester) and a peer transit gateway (accepter). The
  /// peer transit gateway can be in your account or a different Amazon Web
  /// Services account.
  ///
  /// After you create the peering attachment, the owner of the accepter transit
  /// gateway must accept the attachment request.
  ///
  /// Parameter [peerAccountId] :
  /// The ID of the Amazon Web Services account that owns the peer transit
  /// gateway.
  ///
  /// Parameter [peerRegion] :
  /// The Region where the peer transit gateway is located.
  ///
  /// Parameter [peerTransitGatewayId] :
  /// The ID of the peer transit gateway with which to create the peering
  /// attachment.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// Requests a transit gateway peering attachment.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the transit gateway peering attachment.
  Future<CreateTransitGatewayPeeringAttachmentResult>
      createTransitGatewayPeeringAttachment({
    required String peerAccountId,
    required String peerRegion,
    required String peerTransitGatewayId,
    required String transitGatewayId,
    bool? dryRun,
    CreateTransitGatewayPeeringAttachmentRequestOptions? options,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a transit gateway policy table.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway used for the policy table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags specification for the transit gateway policy table created during
  /// the request.
  Future<CreateTransitGatewayPolicyTableResult>
      createTransitGatewayPolicyTable({
    required String transitGatewayId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a reference (route) to a prefix list in a specified transit
  /// gateway route table.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list that is used for destination matches.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [blackhole] :
  /// Indicates whether to drop traffic that matches this route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment to which traffic is routed.
  Future<CreateTransitGatewayPrefixListReferenceResult>
      createTransitGatewayPrefixListReference({
    required String prefixListId,
    required String transitGatewayRouteTableId,
    bool? blackhole,
    bool? dryRun,
    String? transitGatewayAttachmentId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a static route for the specified transit gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range used for destination matches. Routing decisions are based
  /// on the most specific match.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [blackhole] :
  /// Indicates whether to drop traffic that matches this route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  Future<CreateTransitGatewayRouteResult> createTransitGatewayRoute({
    required String destinationCidrBlock,
    required String transitGatewayRouteTableId,
    bool? blackhole,
    bool? dryRun,
    String? transitGatewayAttachmentId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a route table for the specified transit gateway.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the transit gateway route table.
  Future<CreateTransitGatewayRouteTableResult> createTransitGatewayRouteTable({
    required String transitGatewayId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Advertises a new transit gateway route table.
  ///
  /// Parameter [peeringAttachmentId] :
  /// The ID of the peering attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags specifications applied to the transit gateway route table
  /// announcement.
  Future<CreateTransitGatewayRouteTableAnnouncementResult>
      createTransitGatewayRouteTableAnnouncement({
    required String peeringAttachmentId,
    required String transitGatewayRouteTableId,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches the specified VPC to the specified transit gateway.
  ///
  /// If you attach a VPC with a CIDR range that overlaps the CIDR range of a
  /// VPC that is already attached, the new VPC CIDR range is not propagated to
  /// the default propagation route table.
  ///
  /// To send VPC traffic to an attached transit gateway, add a route to the VPC
  /// route table using <a>CreateRoute</a>.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of one or more subnets. You can specify only one subnet per
  /// Availability Zone. You must specify at least one subnet, but we recommend
  /// that you specify two subnets for better availability. The transit gateway
  /// uses one IP address from each specified subnet.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The VPC attachment options.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the VPC attachment.
  Future<CreateTransitGatewayVpcAttachmentResult>
      createTransitGatewayVpcAttachment({
    required List<String> subnetIds,
    required String transitGatewayId,
    required String vpcId,
    bool? dryRun,
    CreateTransitGatewayVpcAttachmentRequestOptions? options,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// An Amazon Web Services Verified Access endpoint is where you define your
  /// application along with an optional endpoint-level access policy.
  ///
  /// Parameter [applicationDomain] :
  /// The DNS name for users to reach your application.
  ///
  /// Parameter [attachmentType] :
  /// The type of attachment.
  ///
  /// Parameter [domainCertificateArn] :
  /// The ARN of the public TLS/SSL certificate in Amazon Web Services
  /// Certificate Manager to associate with the endpoint. The CN in the
  /// certificate must match the DNS name your end users will use to reach your
  /// application.
  ///
  /// Parameter [endpointDomainPrefix] :
  /// A custom identifier that is prepended to the DNS name that is generated
  /// for the endpoint.
  ///
  /// Parameter [endpointType] :
  /// The type of Verified Access endpoint to create.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group to associate the endpoint with.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [loadBalancerOptions] :
  /// The load balancer details. This parameter is required if the endpoint type
  /// is <code>load-balancer</code>.
  ///
  /// Parameter [networkInterfaceOptions] :
  /// The network interface details. This parameter is required if the endpoint
  /// type is <code>network-interface</code>.
  ///
  /// Parameter [policyDocument] :
  /// The Verified Access policy document.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of the security groups to associate with the Verified Access
  /// endpoint. Required if <code>AttachmentType</code> is set to
  /// <code>vpc</code>.
  ///
  /// Parameter [sseSpecification] :
  /// The options for server side encryption.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Verified Access endpoint.
  Future<CreateVerifiedAccessEndpointResult> createVerifiedAccessEndpoint({
    required String applicationDomain,
    required VerifiedAccessEndpointAttachmentType attachmentType,
    required String domainCertificateArn,
    required String endpointDomainPrefix,
    required VerifiedAccessEndpointType endpointType,
    required String verifiedAccessGroupId,
    String? clientToken,
    String? description,
    bool? dryRun,
    CreateVerifiedAccessEndpointLoadBalancerOptions? loadBalancerOptions,
    CreateVerifiedAccessEndpointEniOptions? networkInterfaceOptions,
    String? policyDocument,
    List<String>? securityGroupIds,
    VerifiedAccessSseSpecificationRequest? sseSpecification,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// An Amazon Web Services Verified Access group is a collection of Amazon Web
  /// Services Verified Access endpoints who's associated applications have
  /// similar security requirements. Each instance within a Verified Access
  /// group shares an Verified Access policy. For example, you can group all
  /// Verified Access instances associated with "sales" applications together
  /// and use one common Verified Access policy.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [policyDocument] :
  /// The Verified Access policy document.
  ///
  /// Parameter [sseSpecification] :
  /// The options for server side encryption.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Verified Access group.
  Future<CreateVerifiedAccessGroupResult> createVerifiedAccessGroup({
    required String verifiedAccessInstanceId,
    String? clientToken,
    String? description,
    bool? dryRun,
    String? policyDocument,
    VerifiedAccessSseSpecificationRequest? sseSpecification,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// An Amazon Web Services Verified Access instance is a regional entity that
  /// evaluates application requests and grants access only when your security
  /// requirements are met.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fIPSEnabled] :
  /// Enable or disable support for Federal Information Processing Standards
  /// (FIPS) on the instance.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Verified Access instance.
  Future<CreateVerifiedAccessInstanceResult> createVerifiedAccessInstance({
    String? clientToken,
    String? description,
    bool? dryRun,
    bool? fIPSEnabled,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// A trust provider is a third-party entity that creates, maintains, and
  /// manages identity information for users and devices. When an application
  /// request is made, the identity information sent by the trust provider is
  /// evaluated by Verified Access before allowing or denying the application
  /// request.
  ///
  /// Parameter [policyReferenceName] :
  /// The identifier to be used when working with policy rules.
  ///
  /// Parameter [trustProviderType] :
  /// The type of trust provider.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access trust provider.
  ///
  /// Parameter [deviceOptions] :
  /// The options for a device-based trust provider. This parameter is required
  /// when the provider type is <code>device</code>.
  ///
  /// Parameter [deviceTrustProviderType] :
  /// The type of device-based trust provider. This parameter is required when
  /// the provider type is <code>device</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [oidcOptions] :
  /// The options for a OpenID Connect-compatible user-identity trust provider.
  /// This parameter is required when the provider type is <code>user</code>.
  ///
  /// Parameter [sseSpecification] :
  /// The options for server side encryption.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Verified Access trust provider.
  ///
  /// Parameter [userTrustProviderType] :
  /// The type of user-based trust provider. This parameter is required when the
  /// provider type is <code>user</code>.
  Future<CreateVerifiedAccessTrustProviderResult>
      createVerifiedAccessTrustProvider({
    required String policyReferenceName,
    required TrustProviderType trustProviderType,
    String? clientToken,
    String? description,
    CreateVerifiedAccessTrustProviderDeviceOptions? deviceOptions,
    DeviceTrustProviderType? deviceTrustProviderType,
    bool? dryRun,
    CreateVerifiedAccessTrustProviderOidcOptions? oidcOptions,
    VerifiedAccessSseSpecificationRequest? sseSpecification,
    List<TagSpecification>? tagSpecifications,
    UserTrustProviderType? userTrustProviderType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an EBS volume that can be attached to an instance in the same
  /// Availability Zone.
  ///
  /// You can create a new empty volume or restore a volume from an EBS
  /// snapshot. Any Amazon Web Services Marketplace product codes from the
  /// snapshot are propagated to the volume.
  ///
  /// You can create encrypted volumes. Encrypted volumes must be attached to
  /// instances that support Amazon EBS encryption. Volumes that are created
  /// from encrypted snapshots are also automatically encrypted. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// You can tag your volumes during creation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag
  /// your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-creating-volume.html">Create
  /// an Amazon EBS volume</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The ID of the Availability Zone in which to create the volume. For
  /// example, <code>us-east-1a</code>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Indicates whether the volume should be encrypted. The effect of setting
  /// the encryption state to <code>true</code> depends on the volume origin
  /// (new or from a snapshot), starting encryption state, ownership, and
  /// whether encryption by default is enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/work-with-ebs-encr.html#encryption-by-default">Encryption
  /// by default</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Encrypted Amazon EBS volumes must be attached to instances that support
  /// Amazon EBS encryption. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances">Supported
  /// instance types</a>.
  ///
  /// Parameter [iops] :
  /// The number of I/O operations per second (IOPS). For <code>gp3</code>,
  /// <code>io1</code>, and <code>io2</code> volumes, this represents the number
  /// of IOPS that are provisioned for the volume. For <code>gp2</code> volumes,
  /// this represents the baseline performance of the volume and the rate at
  /// which the volume accumulates I/O credits for bursting.
  ///
  /// The following are the supported values for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp3</code>: 3,000 - 16,000 IOPS
  /// </li>
  /// <li>
  /// <code>io1</code>: 100 - 64,000 IOPS
  /// </li>
  /// <li>
  /// <code>io2</code>: 100 - 256,000 IOPS
  /// </li>
  /// </ul>
  /// For <code>io2</code> volumes, you can achieve up to 256,000 IOPS on <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances
  /// built on the Nitro System</a>. On other instances, you can achieve
  /// performance up to 32,000 IOPS.
  ///
  /// This parameter is required for <code>io1</code> and <code>io2</code>
  /// volumes. The default for <code>gp3</code> volumes is 3,000 IOPS. This
  /// parameter is not supported for <code>gp2</code>, <code>st1</code>,
  /// <code>sc1</code>, or <code>standard</code> volumes.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the Key Management Service (KMS) KMS key to use for
  /// Amazon EBS encryption. If this parameter is not specified, your KMS key
  /// for Amazon EBS is used. If <code>KmsKeyId</code> is specified, the
  /// encrypted state must be <code>true</code>.
  ///
  /// You can specify the KMS key using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
  /// </li>
  /// </ul>
  /// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
  /// if you specify an ID, alias, or ARN that is not valid, the action can
  /// appear to complete, but eventually fails.
  ///
  /// Parameter [multiAttachEnabled] :
  /// Indicates whether to enable Amazon EBS Multi-Attach. If you enable
  /// Multi-Attach, you can attach the volume to up to 16 <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Instances
  /// built on the Nitro System</a> in the same Availability Zone. This
  /// parameter is supported with <code>io1</code> and <code>io2</code> volumes
  /// only. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes-multi.html">
  /// Amazon EBS Multi-Attach</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost.
  ///
  /// Parameter [size] :
  /// The size of the volume, in GiBs. You must specify either a snapshot ID or
  /// a volume size. If you specify a snapshot, the default is the snapshot
  /// size. You can specify a volume size that is equal to or larger than the
  /// snapshot size.
  ///
  /// The following are the supported volumes sizes for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp2</code> and <code>gp3</code>: 1 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io1</code>: 4 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io2</code>: 4 - 65,536 GiB
  /// </li>
  /// <li>
  /// <code>st1</code> and <code>sc1</code>: 125 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>standard</code>: 1 - 1024 GiB
  /// </li>
  /// </ul>
  ///
  /// Parameter [snapshotId] :
  /// The snapshot from which to create the volume. You must specify either a
  /// snapshot ID or a volume size.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the volume during creation.
  ///
  /// Parameter [throughput] :
  /// The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
  ///
  /// This parameter is valid only for <code>gp3</code> volumes.
  ///
  /// Valid Range: Minimum value of 125. Maximum value of 1000.
  ///
  /// Parameter [volumeType] :
  /// The volume type. This parameter can be one of the following values:
  ///
  /// <ul>
  /// <li>
  /// General Purpose SSD: <code>gp2</code> | <code>gp3</code>
  /// </li>
  /// <li>
  /// Provisioned IOPS SSD: <code>io1</code> | <code>io2</code>
  /// </li>
  /// <li>
  /// Throughput Optimized HDD: <code>st1</code>
  /// </li>
  /// <li>
  /// Cold HDD: <code>sc1</code>
  /// </li>
  /// <li>
  /// Magnetic: <code>standard</code>
  /// </li>
  /// </ul> <important>
  /// Throughput Optimized HDD (<code>st1</code>) and Cold HDD
  /// (<code>sc1</code>) volumes can't be used as boot volumes.
  /// </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html">Amazon
  /// EBS volume types</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Default: <code>gp2</code>
  Future<Volume> createVolume({
    required String availabilityZone,
    String? clientToken,
    bool? dryRun,
    bool? encrypted,
    int? iops,
    String? kmsKeyId,
    bool? multiAttachEnabled,
    String? outpostArn,
    int? size,
    String? snapshotId,
    List<TagSpecification>? tagSpecifications,
    int? throughput,
    VolumeType? volumeType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPC with the specified CIDR blocks. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">IP
  /// addressing for your VPCs and subnets</a> in the <i>Amazon VPC User
  /// Guide</i>.
  ///
  /// You can optionally request an IPv6 CIDR block for the VPC. You can request
  /// an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses or
  /// an IPv6 CIDR block from an IPv6 address pool that you provisioned through
  /// bring your own IP addresses (<a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).
  ///
  /// By default, each instance that you launch in the VPC has the default DHCP
  /// options, which include only a default DNS server that we provide
  /// (AmazonProvidedDNS). For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// option sets</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// You can specify the instance tenancy value for the VPC when you create it.
  /// You can't change this value for the VPC after you create it. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated
  /// Instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [amazonProvidedIpv6CidrBlock] :
  /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
  /// the VPC. You cannot specify the range of IP addresses, or the size of the
  /// CIDR block.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range for the VPC, in CIDR notation. For example,
  /// <code>10.0.0.0/16</code>. We modify the specified CIDR block to its
  /// canonical form; for example, if you specify <code>100.68.0.18/18</code>,
  /// we modify it to <code>100.68.0.0/18</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceTenancy] :
  /// The tenancy options for instances launched into the VPC. For
  /// <code>default</code>, instances are launched with shared tenancy by
  /// default. You can launch instances with any tenancy into a shared tenancy
  /// VPC. For <code>dedicated</code>, instances are launched as dedicated
  /// tenancy instances by default. You can only launch instances with a tenancy
  /// of <code>dedicated</code> or <code>host</code> into a dedicated tenancy
  /// VPC.
  ///
  /// <b>Important:</b> The <code>host</code> value cannot be used with this
  /// parameter. Use the <code>default</code> or <code>dedicated</code> values
  /// only.
  ///
  /// Default: <code>default</code>
  ///
  /// Parameter [ipv4IpamPoolId] :
  /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's
  /// CIDR. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv4NetmaskLength] :
  /// The netmask length of the IPv4 CIDR you want to allocate to this VPC from
  /// an Amazon VPC IP Address Manager (IPAM) pool. For more information about
  /// IPAM, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 CIDR block from the IPv6 address pool. You must also specify
  /// <code>Ipv6Pool</code> in the request.
  ///
  /// To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
  ///
  /// Parameter [ipv6CidrBlockNetworkBorderGroup] :
  /// The name of the location from which we advertise the IPV6 CIDR block. Use
  /// this parameter to limit the address to this location.
  ///
  /// You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code>
  /// to use this parameter.
  ///
  /// Parameter [ipv6IpamPoolId] :
  /// The ID of an IPv6 IPAM pool which will be used to allocate this VPC an
  /// IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP
  /// address management workflows including assigning, tracking,
  /// troubleshooting, and auditing IP addresses across Amazon Web Services
  /// Regions and accounts throughout your Amazon Web Services Organization. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv6NetmaskLength] :
  /// The netmask length of the IPv6 CIDR you want to allocate to this VPC from
  /// an Amazon VPC IP Address Manager (IPAM) pool. For more information about
  /// IPAM, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipv6Pool] :
  /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the VPC.
  Future<CreateVpcResult> createVpc({
    bool? amazonProvidedIpv6CidrBlock,
    String? cidrBlock,
    bool? dryRun,
    Tenancy? instanceTenancy,
    String? ipv4IpamPoolId,
    int? ipv4NetmaskLength,
    String? ipv6CidrBlock,
    String? ipv6CidrBlockNetworkBorderGroup,
    String? ipv6IpamPoolId,
    int? ipv6NetmaskLength,
    String? ipv6Pool,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPC endpoint. A VPC endpoint provides a private connection
  /// between the specified VPC and the specified endpoint service. You can use
  /// an endpoint service provided by Amazon Web Services, an Amazon Web
  /// Services Marketplace Partner, or another Amazon Web Services account. For
  /// more information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web
  /// Services PrivateLink User Guide</a>.
  ///
  /// Parameter [serviceName] :
  /// The name of the endpoint service.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dnsOptions] :
  /// The DNS options for the endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ipAddressType] :
  /// The IP address type for the endpoint.
  ///
  /// Parameter [policyDocument] :
  /// (Interface and gateway endpoints) A policy to attach to the endpoint that
  /// controls access to the service. The policy must be in valid JSON format.
  /// If this parameter is not specified, we attach a default policy that allows
  /// full access to the service.
  ///
  /// Parameter [privateDnsEnabled] :
  /// (Interface endpoint) Indicates whether to associate a private hosted zone
  /// with the specified VPC. The private hosted zone contains a record set for
  /// the default public DNS name for the service for the Region (for example,
  /// <code>kinesis.us-east-1.amazonaws.com</code>), which resolves to the
  /// private IP addresses of the endpoint network interfaces in the VPC. This
  /// enables you to make requests to the default public DNS name for the
  /// service instead of the public DNS names that are automatically generated
  /// by the VPC endpoint service.
  ///
  /// To use a private hosted zone, you must set the following VPC attributes to
  /// <code>true</code>: <code>enableDnsHostnames</code> and
  /// <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the
  /// VPC attributes.
  ///
  /// Default: <code>true</code>
  ///
  /// Parameter [routeTableIds] :
  /// (Gateway endpoint) The route table IDs.
  ///
  /// Parameter [securityGroupIds] :
  /// (Interface endpoint) The IDs of the security groups to associate with the
  /// endpoint network interfaces. If this parameter is not specified, we use
  /// the default security group for the VPC.
  ///
  /// Parameter [subnetConfigurations] :
  /// The subnet configurations for the endpoint.
  ///
  /// Parameter [subnetIds] :
  /// (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in
  /// which to create endpoint network interfaces. For a Gateway Load Balancer
  /// endpoint, you can specify only one subnet.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to associate with the endpoint.
  ///
  /// Parameter [vpcEndpointType] :
  /// The type of endpoint.
  ///
  /// Default: Gateway
  Future<CreateVpcEndpointResult> createVpcEndpoint({
    required String serviceName,
    required String vpcId,
    String? clientToken,
    DnsOptionsSpecification? dnsOptions,
    bool? dryRun,
    IpAddressType? ipAddressType,
    String? policyDocument,
    bool? privateDnsEnabled,
    List<String>? routeTableIds,
    List<String>? securityGroupIds,
    List<SubnetConfiguration>? subnetConfigurations,
    List<String>? subnetIds,
    List<TagSpecification>? tagSpecifications,
    VpcEndpointType? vpcEndpointType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a connection notification for a specified VPC endpoint or VPC
  /// endpoint service. A connection notification notifies you of specific
  /// endpoint events. You must create an SNS topic to receive notifications.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a
  /// Topic</a> in the <i>Amazon Simple Notification Service Developer
  /// Guide</i>.
  ///
  /// You can create a connection notification for interface endpoints only.
  ///
  /// Parameter [connectionEvents] :
  /// The endpoint events for which to receive notifications. Valid values are
  /// <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and
  /// <code>Reject</code>.
  ///
  /// Parameter [connectionNotificationArn] :
  /// The ARN of the SNS topic for the notifications.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [serviceId] :
  /// The ID of the endpoint service.
  ///
  /// Parameter [vpcEndpointId] :
  /// The ID of the endpoint.
  Future<CreateVpcEndpointConnectionNotificationResult>
      createVpcEndpointConnectionNotification({
    required List<String> connectionEvents,
    required String connectionNotificationArn,
    String? clientToken,
    bool? dryRun,
    String? serviceId,
    String? vpcEndpointId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPC endpoint service to which service consumers (Amazon Web
  /// Services accounts, users, and IAM roles) can connect.
  ///
  /// Before you create an endpoint service, you must create one of the
  /// following for your service:
  ///
  /// <ul>
  /// <li>
  /// A <a
  /// href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/">Network
  /// Load Balancer</a>. Service consumers connect to your service using an
  /// interface endpoint.
  /// </li>
  /// <li>
  /// A <a
  /// href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/">Gateway
  /// Load Balancer</a>. Service consumers connect to your service using a
  /// Gateway Load Balancer endpoint.
  /// </li>
  /// </ul>
  /// If you set the private DNS name, you must prove that you own the private
  /// DNS domain name.
  ///
  /// For more information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web
  /// Services PrivateLink Guide</a>.
  ///
  /// Parameter [acceptanceRequired] :
  /// Indicates whether requests from service consumers to create an endpoint to
  /// your service must be accepted manually.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [gatewayLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers.
  ///
  /// Parameter [networkLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of the Network Load Balancers.
  ///
  /// Parameter [privateDnsName] :
  /// (Interface endpoint configuration) The private DNS name to assign to the
  /// VPC endpoint service.
  ///
  /// Parameter [supportedIpAddressTypes] :
  /// The supported IP address types. The possible values are <code>ipv4</code>
  /// and <code>ipv6</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to associate with the service.
  Future<CreateVpcEndpointServiceConfigurationResult>
      createVpcEndpointServiceConfiguration({
    bool? acceptanceRequired,
    String? clientToken,
    bool? dryRun,
    List<String>? gatewayLoadBalancerArns,
    List<String>? networkLoadBalancerArns,
    String? privateDnsName,
    List<String>? supportedIpAddressTypes,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Requests a VPC peering connection between two VPCs: a requester VPC that
  /// you own and an accepter VPC with which to create the connection. The
  /// accepter VPC can belong to another Amazon Web Services account and can be
  /// in a different Region to the requester VPC. The requester VPC and accepter
  /// VPC cannot have overlapping CIDR blocks.
  /// <note>
  /// Limitations and rules apply to a VPC peering connection. For more
  /// information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a>
  /// section in the <i>VPC Peering Guide</i>.
  /// </note>
  /// The owner of the accepter VPC must accept the peering request to activate
  /// the peering connection. The VPC peering connection request expires after 7
  /// days, after which it cannot be accepted or rejected.
  ///
  /// If you create a VPC peering connection request between VPCs with
  /// overlapping CIDR blocks, the VPC peering connection has a status of
  /// <code>failed</code>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the requester VPC. You must specify this parameter in the
  /// request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [peerOwnerId] :
  /// The Amazon Web Services account ID of the owner of the accepter VPC.
  ///
  /// Default: Your Amazon Web Services account ID
  ///
  /// Parameter [peerRegion] :
  /// The Region code for the accepter VPC, if the accepter VPC is located in a
  /// Region other than the Region in which you make the request.
  ///
  /// Default: The Region in which you make the request.
  ///
  /// Parameter [peerVpcId] :
  /// The ID of the VPC with which you are creating the VPC peering connection.
  /// You must specify this parameter in the request.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the peering connection.
  Future<CreateVpcPeeringConnectionResult> createVpcPeeringConnection({
    required String vpcId,
    bool? dryRun,
    String? peerOwnerId,
    String? peerRegion,
    String? peerVpcId,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPN connection between an existing virtual private gateway or
  /// transit gateway and a customer gateway. The supported connection type is
  /// <code>ipsec.1</code>.
  ///
  /// The response includes information that you need to give to your network
  /// administrator to configure your customer gateway.
  /// <important>
  /// We strongly recommend that you use HTTPS when calling this operation
  /// because the response contains sensitive cryptographic information for
  /// configuring your customer gateway device.
  /// </important>
  /// If you decide to shut down your VPN connection for any reason and later
  /// create a new VPN connection, you must reconfigure your customer gateway
  /// with the new information returned from this call.
  ///
  /// This is an idempotent operation. If you perform the operation more than
  /// once, Amazon EC2 doesn't return an error.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [customerGatewayId] :
  /// The ID of the customer gateway.
  ///
  /// Parameter [type] :
  /// The type of VPN connection (<code>ipsec.1</code>).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The options for the VPN connection.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the VPN connection.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway. If you specify a transit gateway, you
  /// cannot specify a virtual private gateway.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway. If you specify a virtual private
  /// gateway, you cannot specify a transit gateway.
  Future<CreateVpnConnectionResult> createVpnConnection({
    required String customerGatewayId,
    required String type,
    bool? dryRun,
    VpnConnectionOptionsSpecification? options,
    List<TagSpecification>? tagSpecifications,
    String? transitGatewayId,
    String? vpnGatewayId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a static route associated with a VPN connection between an
  /// existing virtual private gateway and a VPN customer gateway. The static
  /// route allows traffic to be routed from the virtual private gateway to the
  /// VPN customer gateway.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR block associated with the local subnet of the customer network.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  Future<void> createVpnConnectionRoute({
    required String destinationCidrBlock,
    required String vpnConnectionId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a virtual private gateway. A virtual private gateway is the
  /// endpoint on the VPC side of your VPN connection. You can create a virtual
  /// private gateway before creating the VPC itself.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [type] :
  /// The type of VPN connection this virtual private gateway supports.
  ///
  /// Parameter [amazonSideAsn] :
  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. If you're using a 16-bit ASN, it must be in the 64512 to 65534
  /// range. If you're using a 32-bit ASN, it must be in the 4200000000 to
  /// 4294967294 range.
  ///
  /// Default: 64512
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone for the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the virtual private gateway.
  Future<CreateVpnGatewayResult> createVpnGateway({
    required GatewayType type,
    int? amazonSideAsn,
    String? availabilityZone,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a carrier gateway.
  /// <important>
  /// If you do not delete the route that contains the carrier gateway as the
  /// Target, the route is a blackhole route. For information about how to
  /// delete a route, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteRoute.html">DeleteRoute</a>.
  /// </important>
  ///
  /// Parameter [carrierGatewayId] :
  /// The ID of the carrier gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteCarrierGatewayResult> deleteCarrierGateway({
    required String carrierGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Client VPN endpoint. You must disassociate all
  /// target networks before you can delete a Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN to be deleted.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteClientVpnEndpointResult> deleteClientVpnEndpoint({
    required String clientVpnEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a route from a Client VPN endpoint. You can only delete routes
  /// that you manually added using the <b>CreateClientVpnRoute</b> action. You
  /// cannot delete routes that were automatically added when associating a
  /// subnet. To remove routes that have been automatically added, disassociate
  /// the target subnet from the Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint from which the route is to be deleted.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 address range, in CIDR notation, of the route to be deleted.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [targetVpcSubnetId] :
  /// The ID of the target subnet used by the route.
  Future<DeleteClientVpnRouteResult> deleteClientVpnRoute({
    required String clientVpnEndpointId,
    required String destinationCidrBlock,
    bool? dryRun,
    String? targetVpcSubnetId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a range of customer-owned IP addresses.
  ///
  /// Parameter [cidr] :
  /// A customer-owned IP address range that you want to delete.
  ///
  /// Parameter [coipPoolId] :
  /// The ID of the customer-owned address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteCoipCidrResult> deleteCoipCidr({
    required String cidr,
    required String coipPoolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a pool of customer-owned IP (CoIP) addresses.
  ///
  /// Parameter [coipPoolId] :
  /// The ID of the CoIP pool that you want to delete.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteCoipPoolResult> deleteCoipPool({
    required String coipPoolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified customer gateway. You must delete the VPN connection
  /// before you can delete the customer gateway.
  ///
  /// Parameter [customerGatewayId] :
  /// The ID of the customer gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteCustomerGateway({
    required String customerGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified set of DHCP options. You must disassociate the set
  /// of DHCP options before you can delete it. You can disassociate the set of
  /// DHCP options by associating either a new set of options or the default set
  /// of options with the VPC.
  ///
  /// Parameter [dhcpOptionsId] :
  /// The ID of the DHCP options set.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteDhcpOptions({
    required String dhcpOptionsId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes an egress-only internet gateway.
  ///
  /// Parameter [egressOnlyInternetGatewayId] :
  /// The ID of the egress-only internet gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteEgressOnlyInternetGatewayResult>
      deleteEgressOnlyInternetGateway({
    required String egressOnlyInternetGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified EC2 Fleets.
  ///
  /// After you delete an EC2 Fleet, it launches no new instances.
  ///
  /// You must also specify whether a deleted EC2 Fleet should terminate its
  /// instances. If you choose to terminate the instances, the EC2 Fleet enters
  /// the <code>deleted_terminating</code> state. Otherwise, the EC2 Fleet
  /// enters the <code>deleted_running</code> state, and the instances continue
  /// to run until they are interrupted or you terminate them manually.
  ///
  /// For <code>instant</code> fleets, EC2 Fleet must terminate the instances
  /// when the fleet is deleted. Up to 1000 instances can be terminated in a
  /// single request to delete <code>instant</code> fleets. A deleted
  /// <code>instant</code> fleet with running instances is not supported.
  /// <p class="title"> <b>Restrictions</b>
  ///
  /// <ul>
  /// <li>
  /// You can delete up to 25 fleets of type <code>instant</code> in a single
  /// request.
  /// </li>
  /// <li>
  /// You can delete up to 100 fleets of type <code>maintain</code> or
  /// <code>request</code> in a single request.
  /// </li>
  /// <li>
  /// You can delete up to 125 fleets in a single request, provided you do not
  /// exceed the quota for each fleet type, as specified above.
  /// </li>
  /// <li>
  /// If you exceed the specified number of fleets to delete, no fleets are
  /// deleted.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#delete-fleet">Delete
  /// an EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [fleetIds] :
  /// The IDs of the EC2 Fleets.
  ///
  /// Constraints: In a single request, you can specify up to 25
  /// <code>instant</code> fleet IDs and up to 100 <code>maintain</code> or
  /// <code>request</code> fleet IDs.
  ///
  /// Parameter [terminateInstances] :
  /// Indicates whether to terminate the associated instances when the EC2 Fleet
  /// is deleted. The default is to terminate the instances.
  ///
  /// To let the instances continue to run after the EC2 Fleet is deleted,
  /// specify <code>no-terminate-instances</code>. Supported only for fleets of
  /// type <code>maintain</code> and <code>request</code>.
  ///
  /// For <code>instant</code> fleets, you cannot specify
  /// <code>NoTerminateInstances</code>. A deleted <code>instant</code> fleet
  /// with running instances is not supported.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteFleetsResult> deleteFleets({
    required List<String> fleetIds,
    required bool terminateInstances,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more flow logs.
  ///
  /// Parameter [flowLogIds] :
  /// One or more flow log IDs.
  ///
  /// Constraint: Maximum of 1000 flow log IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteFlowLogsResult> deleteFlowLogs({
    required List<String> flowLogIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Amazon FPGA Image (AFI).
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteFpgaImageResult> deleteFpgaImage({
    required String fpgaImageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified EC2 Instance Connect Endpoint.
  ///
  /// Parameter [instanceConnectEndpointId] :
  /// The ID of the EC2 Instance Connect Endpoint to delete.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteInstanceConnectEndpointResult> deleteInstanceConnectEndpoint({
    required String instanceConnectEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified event window.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define
  /// event windows for scheduled events</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [instanceEventWindowId] :
  /// The ID of the event window.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [forceDelete] :
  /// Specify <code>true</code> to force delete the event window. Use the force
  /// delete parameter if the event window is currently associated with targets.
  Future<DeleteInstanceEventWindowResult> deleteInstanceEventWindow({
    required String instanceEventWindowId,
    bool? dryRun,
    bool? forceDelete,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified internet gateway. You must detach the internet
  /// gateway from the VPC before you can delete it.
  ///
  /// Parameter [internetGatewayId] :
  /// The ID of the internet gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteInternetGateway({
    required String internetGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete an IPAM. Deleting an IPAM removes all monitored data associated
  /// with the IPAM including the historical data for CIDRs.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-ipam.html">Delete
  /// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamId] :
  /// The ID of the IPAM to delete.
  ///
  /// Parameter [cascade] :
  /// Enables you to quickly delete an IPAM, private scopes, pools in private
  /// scopes, and any allocations in the pools in private scopes. You cannot
  /// delete the IPAM with this option if there is a pool in your public scope.
  /// If you use this option, IPAM does the following:
  ///
  /// <ul>
  /// <li>
  /// Deallocates any CIDRs allocated to VPC resources (such as VPCs) in pools
  /// in private scopes.
  /// <note>
  /// No VPC resources are deleted as a result of enabling this option. The CIDR
  /// associated with the resource will no longer be allocated from an IPAM
  /// pool, but the CIDR itself will remain unchanged.
  /// </note> </li>
  /// <li>
  /// Deprovisions all IPv4 CIDRs provisioned to IPAM pools in private scopes.
  /// </li>
  /// <li>
  /// Deletes all IPAM pools in private scopes.
  /// </li>
  /// <li>
  /// Deletes all non-default private scopes in the IPAM.
  /// </li>
  /// <li>
  /// Deletes the default public and private scopes and the IPAM.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteIpamResult> deleteIpam({
    required String ipamId,
    bool? cascade,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete an IPAM pool.
  /// <note>
  /// You cannot delete an IPAM pool if there are allocations in it or CIDRs
  /// provisioned to it. To release allocations, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>.
  /// To deprovision pool CIDRs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeprovisionIpamPoolCidr.html">DeprovisionIpamPoolCidr</a>.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-pool-ipam.html">Delete
  /// a pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the pool to delete.
  ///
  /// Parameter [cascade] :
  /// Enables you to quickly delete an IPAM pool and all resources within that
  /// pool, including provisioned CIDRs, allocations, and other pools.
  /// <important>
  /// You can only use this option to delete pools in the private scope or pools
  /// in the public scope with a source resource. A source resource is a
  /// resource used to provision CIDRs to a resource planning pool.
  /// </important>
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteIpamPoolResult> deleteIpamPool({
    required String ipamPoolId,
    bool? cascade,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes an IPAM resource discovery. A resource discovery is an IPAM
  /// component that enables IPAM to manage and monitor resources that belong to
  /// the owning account.
  ///
  /// Parameter [ipamResourceDiscoveryId] :
  /// The IPAM resource discovery ID.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteIpamResourceDiscoveryResult> deleteIpamResourceDiscovery({
    required String ipamResourceDiscoveryId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete the scope for an IPAM. You cannot delete the default scopes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-scope-ipam.html">Delete
  /// a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamScopeId] :
  /// The ID of the scope to delete.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteIpamScopeResult> deleteIpamScope({
    required String ipamScopeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified key pair, by removing the public key from Amazon
  /// EC2.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [keyName] :
  /// The name of the key pair.
  ///
  /// Parameter [keyPairId] :
  /// The ID of the key pair.
  Future<DeleteKeyPairResult> deleteKeyPair({
    bool? dryRun,
    String? keyName,
    String? keyPairId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a launch template. Deleting a launch template deletes all of its
  /// versions.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  Future<DeleteLaunchTemplateResult> deleteLaunchTemplate({
    bool? dryRun,
    String? launchTemplateId,
    String? launchTemplateName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more versions of a launch template.
  ///
  /// You can't delete the default version of a launch template; you must first
  /// assign a different version as the default. If the default version is the
  /// only version for the launch template, you must delete the entire launch
  /// template using <a>DeleteLaunchTemplate</a>.
  ///
  /// You can delete up to 200 launch template versions in a single request. To
  /// delete more than 200 versions in a single request, use
  /// <a>DeleteLaunchTemplate</a>, which deletes the launch template and all of
  /// its versions.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-launch-template-versions.html#delete-launch-template-version">Delete
  /// a launch template version</a> in the <i>EC2 User Guide</i>.
  ///
  /// Parameter [versions] :
  /// The version numbers of one or more launch template versions to delete. You
  /// can specify up to 200 launch template version numbers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  Future<DeleteLaunchTemplateVersionsResult> deleteLaunchTemplateVersions({
    required List<String> versions,
    bool? dryRun,
    String? launchTemplateId,
    String? launchTemplateName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route from the specified local gateway route table.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range for the route. This must match the CIDR for the route
  /// exactly.
  ///
  /// Parameter [destinationPrefixListId] :
  /// Use a prefix list in place of <code>DestinationCidrBlock</code>. You
  /// cannot use <code>DestinationPrefixListId</code> and
  /// <code>DestinationCidrBlock</code> in the same request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteLocalGatewayRouteResult> deleteLocalGatewayRoute({
    required String localGatewayRouteTableId,
    String? destinationCidrBlock,
    String? destinationPrefixListId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a local gateway route table.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteLocalGatewayRouteTableResult> deleteLocalGatewayRouteTable({
    required String localGatewayRouteTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a local gateway route table virtual interface group association.
  ///
  /// Parameter [localGatewayRouteTableVirtualInterfaceGroupAssociationId] :
  /// The ID of the local gateway route table virtual interface group
  /// association.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult>
      deleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation({
    required String localGatewayRouteTableVirtualInterfaceGroupAssociationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified association between a VPC and local gateway route
  /// table.
  ///
  /// Parameter [localGatewayRouteTableVpcAssociationId] :
  /// The ID of the association.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteLocalGatewayRouteTableVpcAssociationResult>
      deleteLocalGatewayRouteTableVpcAssociation({
    required String localGatewayRouteTableVpcAssociationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified managed prefix list. You must first remove all
  /// references to the prefix list in your resources.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteManagedPrefixListResult> deleteManagedPrefixList({
    required String prefixListId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified NAT gateway. Deleting a public NAT gateway
  /// disassociates its Elastic IP address, but does not release the address
  /// from your account. Deleting a NAT gateway does not delete any NAT gateway
  /// routes in your route tables.
  ///
  /// Parameter [natGatewayId] :
  /// The ID of the NAT gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteNatGatewayResult> deleteNatGateway({
    required String natGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified network ACL. You can't delete the ACL if it's
  /// associated with any subnets. You can't delete the default network ACL.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the network ACL.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteNetworkAcl({
    required String networkAclId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified ingress or egress entry (rule) from the specified
  /// network ACL.
  ///
  /// Parameter [egress] :
  /// Indicates whether the rule is an egress rule.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the network ACL.
  ///
  /// Parameter [ruleNumber] :
  /// The rule number of the entry to delete.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteNetworkAclEntry({
    required bool egress,
    required String networkAclId,
    required int ruleNumber,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Network Access Scope.
  ///
  /// Parameter [networkInsightsAccessScopeId] :
  /// The ID of the Network Access Scope.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteNetworkInsightsAccessScopeResult>
      deleteNetworkInsightsAccessScope({
    required String networkInsightsAccessScopeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Network Access Scope analysis.
  ///
  /// Parameter [networkInsightsAccessScopeAnalysisId] :
  /// The ID of the Network Access Scope analysis.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteNetworkInsightsAccessScopeAnalysisResult>
      deleteNetworkInsightsAccessScopeAnalysis({
    required String networkInsightsAccessScopeAnalysisId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified network insights analysis.
  ///
  /// Parameter [networkInsightsAnalysisId] :
  /// The ID of the network insights analysis.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteNetworkInsightsAnalysisResult> deleteNetworkInsightsAnalysis({
    required String networkInsightsAnalysisId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified path.
  ///
  /// Parameter [networkInsightsPathId] :
  /// The ID of the path.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteNetworkInsightsPathResult> deleteNetworkInsightsPath({
    required String networkInsightsPathId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified network interface. You must detach the network
  /// interface before you can delete it.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteNetworkInterface({
    required String networkInterfaceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a permission for a network interface. By default, you cannot
  /// delete the permission if the account for which you're removing the
  /// permission has attached the network interface to an instance. However, you
  /// can force delete the permission, regardless of any attachment.
  ///
  /// Parameter [networkInterfacePermissionId] :
  /// The ID of the network interface permission.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Specify <code>true</code> to remove the permission even if the network
  /// interface is attached to an instance.
  Future<DeleteNetworkInterfacePermissionResult>
      deleteNetworkInterfacePermission({
    required String networkInterfacePermissionId,
    bool? dryRun,
    bool? force,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified placement group. You must terminate all instances in
  /// the placement group before you can delete the placement group. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
  /// groups</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [groupName] :
  /// The name of the placement group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deletePlacementGroup({
    required String groupName,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool
  /// required for the public IPv4 CIDRs that you own and bring to Amazon Web
  /// Services to manage with IPAM. IPv6 addresses you bring to Amazon Web
  /// Services, however, use IPAM pools only.
  ///
  /// Parameter [poolId] :
  /// The ID of the public IPv4 pool you want to delete.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeletePublicIpv4PoolResult> deletePublicIpv4Pool({
    required String poolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the queued purchases for the specified Reserved Instances.
  ///
  /// Parameter [reservedInstancesIds] :
  /// The IDs of the Reserved Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteQueuedReservedInstancesResult> deleteQueuedReservedInstances({
    required List<String> reservedInstancesIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route from the specified route table.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 CIDR range for the route. The value you specify must match the
  /// CIDR for the route exactly.
  ///
  /// Parameter [destinationIpv6CidrBlock] :
  /// The IPv6 CIDR range for the route. The value you specify must match the
  /// CIDR for the route exactly.
  ///
  /// Parameter [destinationPrefixListId] :
  /// The ID of the prefix list for the route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteRoute({
    required String routeTableId,
    String? destinationCidrBlock,
    String? destinationIpv6CidrBlock,
    String? destinationPrefixListId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route table. You must disassociate the route table
  /// from any subnets before you can delete it. You can't delete the main route
  /// table.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteRouteTable({
    required String routeTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a security group.
  ///
  /// If you attempt to delete a security group that is associated with an
  /// instance or network interface or is referenced by another security group,
  /// the operation fails with <code>DependencyViolation</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [groupName] :
  /// [Default VPC] The name of the security group. You can specify either the
  /// security group name or the security group ID. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  Future<void> deleteSecurityGroup({
    bool? dryRun,
    String? groupId,
    String? groupName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified snapshot.
  ///
  /// When you make periodic snapshots of a volume, the snapshots are
  /// incremental, and only the blocks on the device that have changed since
  /// your last snapshot are saved in the new snapshot. When you delete a
  /// snapshot, only the data not needed for any other snapshot is removed. So
  /// regardless of which prior snapshots have been deleted, all active
  /// snapshots will have access to all the information needed to restore the
  /// volume.
  ///
  /// You cannot delete a snapshot of the root device of an EBS volume used by a
  /// registered AMI. You must first de-register the AMI before you can delete
  /// the snapshot.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-deleting-snapshot.html">Delete
  /// an Amazon EBS snapshot</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the EBS snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteSnapshot({
    required String snapshotId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the data feed for Spot Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteSpotDatafeedSubscription({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified subnet. You must terminate all running instances in
  /// the subnet before you can delete the subnet.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteSubnet({
    required String subnetId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a subnet CIDR reservation.
  ///
  /// Parameter [subnetCidrReservationId] :
  /// The ID of the subnet CIDR reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteSubnetCidrReservationResult> deleteSubnetCidrReservation({
    required String subnetCidrReservationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified set of tags from the specified set of resources.
  ///
  /// To list the current tags, use <a>DescribeTags</a>. For more information
  /// about tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag
  /// your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [resources] :
  /// The IDs of the resources, separated by spaces.
  ///
  /// Constraints: Up to 1000 resource IDs. We recommend breaking up this
  /// request into smaller batches.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tags] :
  /// The tags to delete. Specify a tag key and an optional tag value to delete
  /// specific tags. If you specify a tag key without a tag value, we delete any
  /// tag with this key regardless of its value. If you specify a tag key with
  /// an empty string as the tag value, we delete the tag only if its value is
  /// an empty string.
  ///
  /// If you omit this parameter, we delete all user-defined tags for the
  /// specified resources. We do not delete Amazon Web Services-generated tags
  /// (tags that have the <code>aws:</code> prefix).
  ///
  /// Constraints: Up to 1000 tags.
  Future<void> deleteTags({
    required List<String> resources,
    bool? dryRun,
    List<Tag>? tags,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror filter.
  ///
  /// You cannot delete a Traffic Mirror filter that is in use by a Traffic
  /// Mirror session.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorFilterResult> deleteTrafficMirrorFilter({
    required String trafficMirrorFilterId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror rule.
  ///
  /// Parameter [trafficMirrorFilterRuleId] :
  /// The ID of the Traffic Mirror rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorFilterRuleResult> deleteTrafficMirrorFilterRule({
    required String trafficMirrorFilterRuleId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror session.
  ///
  /// Parameter [trafficMirrorSessionId] :
  /// The ID of the Traffic Mirror session.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorSessionResult> deleteTrafficMirrorSession({
    required String trafficMirrorSessionId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror target.
  ///
  /// You cannot delete a Traffic Mirror target that is in use by a Traffic
  /// Mirror session.
  ///
  /// Parameter [trafficMirrorTargetId] :
  /// The ID of the Traffic Mirror target.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorTargetResult> deleteTrafficMirrorTarget({
    required String trafficMirrorTargetId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayResult> deleteTransitGateway({
    required String transitGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Connect attachment. You must first delete any
  /// Connect peers for the attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the Connect attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayConnectResult> deleteTransitGatewayConnect({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Connect peer.
  ///
  /// Parameter [transitGatewayConnectPeerId] :
  /// The ID of the Connect peer.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayConnectPeerResult>
      deleteTransitGatewayConnectPeer({
    required String transitGatewayConnectPeerId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway multicast domain.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayMulticastDomainResult>
      deleteTransitGatewayMulticastDomain({
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a transit gateway peering attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway peering attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayPeeringAttachmentResult>
      deleteTransitGatewayPeeringAttachment({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway policy table.
  ///
  /// Parameter [transitGatewayPolicyTableId] :
  /// The transit gateway policy table to delete.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayPolicyTableResult>
      deleteTransitGatewayPolicyTable({
    required String transitGatewayPolicyTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a reference (route) to a prefix list in a specified transit
  /// gateway route table.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayPrefixListReferenceResult>
      deleteTransitGatewayPrefixListReference({
    required String prefixListId,
    required String transitGatewayRouteTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route from the specified transit gateway route
  /// table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range for the route. This must match the CIDR for the route
  /// exactly.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayRouteResult> deleteTransitGatewayRoute({
    required String destinationCidrBlock,
    required String transitGatewayRouteTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway route table. If there are any route
  /// tables associated with the transit gateway route table, you must first run
  /// <a>DisassociateRouteTable</a> before you can delete the transit gateway
  /// route table. This removes any route tables associated with the transit
  /// gateway route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayRouteTableResult> deleteTransitGatewayRouteTable({
    required String transitGatewayRouteTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Advertises to the transit gateway that a transit gateway route table is
  /// deleted.
  ///
  /// Parameter [transitGatewayRouteTableAnnouncementId] :
  /// The transit gateway route table ID that's being deleted.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayRouteTableAnnouncementResult>
      deleteTransitGatewayRouteTableAnnouncement({
    required String transitGatewayRouteTableAnnouncementId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayVpcAttachmentResult>
      deleteTransitGatewayVpcAttachment({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete an Amazon Web Services Verified Access endpoint.
  ///
  /// Parameter [verifiedAccessEndpointId] :
  /// The ID of the Verified Access endpoint.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVerifiedAccessEndpointResult> deleteVerifiedAccessEndpoint({
    required String verifiedAccessEndpointId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete an Amazon Web Services Verified Access group.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVerifiedAccessGroupResult> deleteVerifiedAccessGroup({
    required String verifiedAccessGroupId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete an Amazon Web Services Verified Access instance.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVerifiedAccessInstanceResult> deleteVerifiedAccessInstance({
    required String verifiedAccessInstanceId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Delete an Amazon Web Services Verified Access trust provider.
  ///
  /// Parameter [verifiedAccessTrustProviderId] :
  /// The ID of the Verified Access trust provider.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVerifiedAccessTrustProviderResult>
      deleteVerifiedAccessTrustProvider({
    required String verifiedAccessTrustProviderId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified EBS volume. The volume must be in the
  /// <code>available</code> state (not attached to an instance).
  ///
  /// The volume can remain in the <code>deleting</code> state for several
  /// minutes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-deleting-volume.html">Delete
  /// an Amazon EBS volume</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVolume({
    required String volumeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC. You must detach or delete all gateways and
  /// resources that are associated with the VPC before you can delete it. For
  /// example, you must terminate all instances running in the VPC, delete all
  /// security groups associated with the VPC (except the default one), delete
  /// all route tables associated with the VPC (except the default one), and so
  /// on. When you delete the VPC, it deletes the VPC's default security group,
  /// network ACL, and route table.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVpc({
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC endpoint connection notifications.
  ///
  /// Parameter [connectionNotificationIds] :
  /// The IDs of the notifications.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcEndpointConnectionNotificationsResult>
      deleteVpcEndpointConnectionNotifications({
    required List<String> connectionNotificationIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC endpoint service configurations. Before you can
  /// delete an endpoint service configuration, you must reject any
  /// <code>Available</code> or <code>PendingAcceptance</code> interface
  /// endpoint connections that are attached to the service.
  ///
  /// Parameter [serviceIds] :
  /// The IDs of the services.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcEndpointServiceConfigurationsResult>
      deleteVpcEndpointServiceConfigurations({
    required List<String> serviceIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC endpoints.
  ///
  /// When you delete a gateway endpoint, we delete the endpoint routes in the
  /// route tables for the endpoint.
  ///
  /// When you delete a Gateway Load Balancer endpoint, we delete its endpoint
  /// network interfaces. You can only delete Gateway Load Balancer endpoints
  /// when the routes that are associated with the endpoint are deleted.
  ///
  /// When you delete an interface endpoint, we delete its endpoint network
  /// interfaces.
  ///
  /// Parameter [vpcEndpointIds] :
  /// The IDs of the VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcEndpointsResult> deleteVpcEndpoints({
    required List<String> vpcEndpointIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a VPC peering connection. Either the owner of the requester VPC or
  /// the owner of the accepter VPC can delete the VPC peering connection if
  /// it's in the <code>active</code> state. The owner of the requester VPC can
  /// delete a VPC peering connection in the <code>pending-acceptance</code>
  /// state. You cannot delete a VPC peering connection that's in the
  /// <code>failed</code> or <code>rejected</code> state.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcPeeringConnectionResult> deleteVpcPeeringConnection({
    required String vpcPeeringConnectionId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPN connection.
  ///
  /// If you're deleting the VPC and its associated components, we recommend
  /// that you detach the virtual private gateway from the VPC and delete the
  /// VPC before deleting the VPN connection. If you believe that the tunnel
  /// credentials for your VPN connection have been compromised, you can delete
  /// the VPN connection and create a new one that has new keys, without needing
  /// to delete the VPC or virtual private gateway. If you create a new VPN
  /// connection, you must reconfigure the customer gateway device using the new
  /// configuration information returned with the new VPN connection ID.
  ///
  /// For certificate-based authentication, delete all Certificate Manager (ACM)
  /// private certificates used for the Amazon Web Services-side tunnel
  /// endpoints for the VPN connection before deleting the VPN connection.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVpnConnection({
    required String vpnConnectionId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified static route associated with a VPN connection
  /// between an existing virtual private gateway and a VPN customer gateway.
  /// The static route allows traffic to be routed from the virtual private
  /// gateway to the VPN customer gateway.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR block associated with the local subnet of the customer network.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  Future<void> deleteVpnConnectionRoute({
    required String destinationCidrBlock,
    required String vpnConnectionId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified virtual private gateway. You must first detach the
  /// virtual private gateway from the VPC. Note that you don't need to delete
  /// the virtual private gateway if you plan to delete and recreate the VPN
  /// connection between your VPC and your network.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVpnGateway({
    required String vpnGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Releases the specified address range that you provisioned for use with
  /// your Amazon Web Services resources through bring your own IP addresses
  /// (BYOIP) and deletes the corresponding address pool.
  ///
  /// Before you can release an address range, you must stop advertising it
  /// using <a>WithdrawByoipCidr</a> and you must not have any IP addresses
  /// allocated from its address range.
  ///
  /// Parameter [cidr] :
  /// The address range, in CIDR notation. The prefix must be the same prefix
  /// that you specified when you provisioned the address range.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeprovisionByoipCidrResult> deprovisionByoipCidr({
    required String cidr,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deprovisions your Autonomous System Number (ASN) from your Amazon Web
  /// Services account. This action can only be called after any BYOIP CIDR
  /// associations are removed from your Amazon Web Services account with <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIpamByoasn.html">DisassociateIpamByoasn</a>.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial:
  /// Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.
  ///
  /// Parameter [asn] :
  /// An ASN.
  ///
  /// Parameter [ipamId] :
  /// The IPAM ID.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeprovisionIpamByoasnResult> deprovisionIpamByoasn({
    required String asn,
    required String ipamId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a
  /// CIDR from a pool that has a source pool, the CIDR is recycled back into
  /// the source pool. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/depro-pool-cidr-ipam.html">Deprovision
  /// pool CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the pool that has the CIDR you want to deprovision.
  ///
  /// Parameter [cidr] :
  /// The CIDR which you want to deprovision from the pool.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeprovisionIpamPoolCidrResult> deprovisionIpamPoolCidr({
    required String ipamPoolId,
    String? cidr,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deprovision a CIDR from a public IPv4 pool.
  ///
  /// Parameter [cidr] :
  /// The CIDR you want to deprovision from the pool. Enter the CIDR you want to
  /// deprovision with a netmask of <code>/32</code>. You must rerun this
  /// command for each IP address in the CIDR range. If your CIDR is a
  /// <code>/24</code>, you will have to run this command to deprovision each of
  /// the 256 IP addresses in the <code>/24</code> CIDR.
  ///
  /// Parameter [poolId] :
  /// The ID of the pool that you want to deprovision the CIDR from.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeprovisionPublicIpv4PoolCidrResult> deprovisionPublicIpv4PoolCidr({
    required String cidr,
    required String poolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters the specified AMI. After you deregister an AMI, it can't be
  /// used to launch new instances.
  ///
  /// If you deregister an AMI that matches a Recycle Bin retention rule, the
  /// AMI is retained in the Recycle Bin for the specified retention period. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle
  /// Bin</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// When you deregister an AMI, it doesn't affect any instances that you've
  /// already launched from the AMI. You'll continue to incur usage costs for
  /// those instances until you terminate them.
  ///
  /// When you deregister an Amazon EBS-backed AMI, it doesn't affect the
  /// snapshot that was created for the root volume of the instance during the
  /// AMI creation process. When you deregister an instance store-backed AMI, it
  /// doesn't affect the files that you uploaded to Amazon S3 when you created
  /// the AMI.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deregisterImage({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters tag keys to prevent tags that have the specified tag keys from
  /// being included in scheduled event notifications for resources in the
  /// Region.
  ///
  /// Parameter [instanceTagAttribute] :
  /// Information about the tag keys to deregister.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeregisterInstanceEventNotificationAttributesResult>
      deregisterInstanceEventNotificationAttributes({
    required DeregisterInstanceTagAttributeRequest instanceTagAttribute,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters the specified members (network interfaces) from the transit
  /// gateway multicast group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The IDs of the group members' network interfaces.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<DeregisterTransitGatewayMulticastGroupMembersResult>
      deregisterTransitGatewayMulticastGroupMembers({
    bool? dryRun,
    String? groupIpAddress,
    List<String>? networkInterfaceIds,
    String? transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters the specified sources (network interfaces) from the transit
  /// gateway multicast group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The IDs of the group sources' network interfaces.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<DeregisterTransitGatewayMulticastGroupSourcesResult>
      deregisterTransitGatewayMulticastGroupSources({
    bool? dryRun,
    String? groupIpAddress,
    List<String>? networkInterfaceIds,
    String? transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes attributes of your Amazon Web Services account. The following
  /// are the supported account attributes:
  ///
  /// <ul>
  /// <li>
  /// <code>default-vpc</code>: The ID of the default VPC for your account, or
  /// <code>none</code>.
  /// </li>
  /// <li>
  /// <code>max-instances</code>: This attribute is no longer supported. The
  /// returned value does not reflect your actual vCPU limit for running
  /// On-Demand Instances. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand
  /// Instance Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </li>
  /// <li>
  /// <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses
  /// that you can allocate.
  /// </li>
  /// <li>
  /// <code>supported-platforms</code>: This attribute is deprecated.
  /// </li>
  /// <li>
  /// <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP
  /// addresses that you can allocate.
  /// </li>
  /// <li>
  /// <code>vpc-max-security-groups-per-interface</code>: The maximum number of
  /// security groups that you can assign to a network interface.
  /// </li>
  /// </ul> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [attributeNames] :
  /// The account attribute names.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeAccountAttributesResult> describeAccountAttributes({
    List<AccountAttributeName>? attributeNames,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes an Elastic IP address transfer. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer
  /// Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// When you transfer an Elastic IP address, there is a two-step handshake
  /// between the source and transfer Amazon Web Services accounts. When the
  /// source account starts the transfer, the transfer account has seven days to
  /// accept the Elastic IP address transfer. During those seven days, the
  /// source account can view the pending transfer by using this action. After
  /// seven days, the transfer expires and ownership of the Elastic IP address
  /// returns to the source account. Accepted transfers are visible to the
  /// source account for three days after the transfers have been accepted.
  ///
  /// Parameter [allocationIds] :
  /// The allocation IDs of Elastic IP addresses.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of address transfers to return in one page of results.
  ///
  /// Parameter [nextToken] :
  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  Future<DescribeAddressTransfersResult> describeAddressTransfers({
    List<String>? allocationIds,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Elastic IP addresses or all of your Elastic IP
  /// addresses.
  ///
  /// Parameter [allocationIds] :
  /// Information about the allocation IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>allocation-id</code> - The allocation ID for the address.
  /// </li>
  /// <li>
  /// <code>association-id</code> - The association ID for the address.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance the address is
  /// associated with, if any.
  /// </li>
  /// <li>
  /// <code>network-border-group</code> - A unique set of Availability Zones,
  /// Local Zones, or Wavelength Zones from where Amazon Web Services advertises
  /// IP addresses.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code> - The ID of the network interface that
  /// the address is associated with, if any.
  /// </li>
  /// <li>
  /// <code>network-interface-owner-id</code> - The Amazon Web Services account
  /// ID of the owner.
  /// </li>
  /// <li>
  /// <code>private-ip-address</code> - The private IP address associated with
  /// the Elastic IP address.
  /// </li>
  /// <li>
  /// <code>public-ip</code> - The Elastic IP address, or the carrier IP
  /// address.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [publicIps] :
  /// One or more Elastic IP addresses.
  ///
  /// Default: Describes all your Elastic IP addresses.
  Future<DescribeAddressesResult> describeAddresses({
    List<String>? allocationIds,
    bool? dryRun,
    List<Filter>? filters,
    List<String>? publicIps,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the attributes of the specified Elastic IP addresses. For
  /// requirements, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using
  /// reverse DNS for email applications</a>.
  ///
  /// Parameter [allocationIds] :
  /// [EC2-VPC] The allocation IDs.
  ///
  /// Parameter [attribute] :
  /// The attribute of the IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeAddressesAttributeResult> describeAddressesAttribute({
    List<String>? allocationIds,
    AddressAttributeName? attribute,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the longer ID format settings for all resource types in a
  /// specific Region. This request is useful for performing a quick audit to
  /// determine whether a specific Region is fully opted in for longer IDs
  /// (17-character IDs).
  ///
  /// This request only returns information about resource types that support
  /// longer IDs.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeAggregateIdFormatResult> describeAggregateIdFormat({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Availability Zones, Local Zones, and Wavelength Zones that
  /// are available to you. If there is an event impacting a zone, you can use
  /// this request to view the state and any provided messages for that zone.
  ///
  /// For more information about Availability Zones, Local Zones, and Wavelength
  /// Zones, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions
  /// and zones</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [allAvailabilityZones] :
  /// Include all Availability Zones, Local Zones, and Wavelength Zones
  /// regardless of your opt-in status.
  ///
  /// If you do not use this parameter, the results include only the zones for
  /// the Regions where you have chosen the option to opt in.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-name</code> - For Availability Zones, use the Region name. For
  /// Local Zones, use the name of the group associated with the Local Zone (for
  /// example, <code>us-west-2-lax-1</code>) For Wavelength Zones, use the name
  /// of the group associated with the Wavelength Zone (for example,
  /// <code>us-east-1-wl1</code>).
  /// </li>
  /// <li>
  /// <code>message</code> - The Zone message.
  /// </li>
  /// <li>
  /// <code>opt-in-status</code> - The opt-in status (<code>opted-in</code> |
  /// <code>not-opted-in</code> | <code>opt-in-not-required</code>).
  /// </li>
  /// <li>
  /// <code>parent-zone-id</code> - The ID of the zone that handles some of the
  /// Local Zone and Wavelength Zone control plane operations, such as API
  /// calls.
  /// </li>
  /// <li>
  /// <code>parent-zone-name</code> - The ID of the zone that handles some of
  /// the Local Zone and Wavelength Zone control plane operations, such as API
  /// calls.
  /// </li>
  /// <li>
  /// <code>region-name</code> - The name of the Region for the Zone (for
  /// example, <code>us-east-1</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the Availability Zone, the Local Zone,
  /// or the Wavelength Zone (<code>available</code>).
  /// </li>
  /// <li>
  /// <code>zone-id</code> - The ID of the Availability Zone (for example,
  /// <code>use1-az1</code>), the Local Zone (for example,
  /// <code>usw2-lax1-az1</code>), or the Wavelength Zone (for example,
  /// <code>us-east-1-wl1-bos-wlz-1</code>).
  /// </li>
  /// <li>
  /// <code>zone-name</code> - The name of the Availability Zone (for example,
  /// <code>us-east-1a</code>), the Local Zone (for example,
  /// <code>us-west-2-lax-1a</code>), or the Wavelength Zone (for example,
  /// <code>us-east-1-wl1-bos-wlz-1</code>).
  /// </li>
  /// <li>
  /// <code>zone-type</code> - The type of zone (<code>availability-zone</code>
  /// | <code>local-zone</code> | <code>wavelength-zone</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [zoneIds] :
  /// The IDs of the Availability Zones, Local Zones, and Wavelength Zones.
  ///
  /// Parameter [zoneNames] :
  /// The names of the Availability Zones, Local Zones, and Wavelength Zones.
  Future<DescribeAvailabilityZonesResult> describeAvailabilityZones({
    bool? allAvailabilityZones,
    bool? dryRun,
    List<Filter>? filters,
    List<String>? zoneIds,
    List<String>? zoneNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the current Infrastructure Performance metric subscriptions.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeAwsNetworkPerformanceMetricSubscriptionsResult>
      describeAwsNetworkPerformanceMetricSubscriptions({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified bundle tasks or all of your bundle tasks.
  /// <note>
  /// Completed bundle tasks are listed for only a limited time. If your bundle
  /// task is no longer in the list, you can still register an AMI from it. Just
  /// use <code>RegisterImage</code> with the Amazon S3 bucket name and image
  /// manifest name you provided to the bundle task.
  /// </note> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [bundleIds] :
  /// The bundle task IDs.
  ///
  /// Default: Describes all your bundle tasks.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>bundle-id</code> - The ID of the bundle task.
  /// </li>
  /// <li>
  /// <code>error-code</code> - If the task failed, the error code returned.
  /// </li>
  /// <li>
  /// <code>error-message</code> - If the task failed, the error message
  /// returned.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>progress</code> - The level of task completion, as a percentage (for
  /// example, 20%).
  /// </li>
  /// <li>
  /// <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.
  /// </li>
  /// <li>
  /// <code>s3-prefix</code> - The beginning of the AMI name.
  /// </li>
  /// <li>
  /// <code>start-time</code> - The time the task started (for example,
  /// 2013-09-15T17:15:20.000Z).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the task (<code>pending</code> |
  /// <code>waiting-for-shutdown</code> | <code>bundling</code> |
  /// <code>storing</code> | <code>cancelling</code> | <code>complete</code> |
  /// <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>update-time</code> - The time of the most recent update for the
  /// task.
  /// </li>
  /// </ul>
  Future<DescribeBundleTasksResult> describeBundleTasks({
    List<String>? bundleIds,
    bool? dryRun,
    List<Filter>? filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the IP address ranges that were specified in calls to
  /// <a>ProvisionByoipCidr</a>.
  ///
  /// To describe the address pools that were created when you provisioned the
  /// address ranges, use <a>DescribePublicIpv4Pools</a> or
  /// <a>DescribeIpv6Pools</a>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeByoipCidrsResult> describeByoipCidrs({
    required int maxResults,
    bool? dryRun,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
      isRequired: true,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes Capacity Block offerings available for purchase in the Amazon
  /// Web Services Region that you're currently using. With Capacity Blocks, you
  /// purchase a specific instance type for a period of time.
  ///
  /// Parameter [capacityDurationHours] :
  /// The number of hours for which to reserve Capacity Block.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances for which to reserve capacity.
  ///
  /// Parameter [instanceType] :
  /// The type of instance for which the Capacity Block offering reserves
  /// capacity.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endDateRange] :
  /// The latest end date for the Capacity Block offering.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  ///
  /// Parameter [startDateRange] :
  /// The earliest start date for the Capacity Block offering.
  Future<DescribeCapacityBlockOfferingsResult> describeCapacityBlockOfferings({
    required int capacityDurationHours,
    required int instanceCount,
    required String instanceType,
    bool? dryRun,
    DateTime? endDateRange,
    int? maxResults,
    String? nextToken,
    DateTime? startDateRange,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Capacity Reservation Fleets.
  ///
  /// Parameter [capacityReservationFleetIds] :
  /// The IDs of the Capacity Reservation Fleets to describe.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>state</code> - The state of the Fleet (<code>submitted</code> |
  /// <code>modifying</code> | <code>active</code> |
  /// <code>partially_fulfilled</code> | <code>expiring</code> |
  /// <code>expired</code> | <code>cancelling</code> | <code>cancelled</code> |
  /// <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>instance-match-criteria</code> - The instance matching criteria for
  /// the Fleet. Only <code>open</code> is supported.
  /// </li>
  /// <li>
  /// <code>tenancy</code> - The tenancy of the Fleet (<code>default</code> |
  /// <code>dedicated</code>).
  /// </li>
  /// <li>
  /// <code>allocation-strategy</code> - The allocation strategy used by the
  /// Fleet. Only <code>prioritized</code> is supported.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeCapacityReservationFleetsResult>
      describeCapacityReservationFleets({
    List<String>? capacityReservationFleetIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your Capacity Reservations. The results describe
  /// only the Capacity Reservations in the Amazon Web Services Region that
  /// you're currently using.
  ///
  /// Parameter [capacityReservationIds] :
  /// The ID of the Capacity Reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-type</code> - The type of instance for which the Capacity
  /// Reservation reserves capacity.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the Capacity Reservation.
  /// </li>
  /// <li>
  /// <code>instance-platform</code> - The type of operating system for which
  /// the Capacity Reservation reserves capacity.
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the Capacity
  /// Reservation.
  /// </li>
  /// <li>
  /// <code>tenancy</code> - Indicates the tenancy of the Capacity Reservation.
  /// A Capacity Reservation can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation is created on hardware
  /// that is shared with other Amazon Web Services accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation is created on
  /// single-tenant hardware that is dedicated to a single Amazon Web Services
  /// account.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost
  /// on which the Capacity Reservation was created.
  /// </li>
  /// <li>
  /// <code>state</code> - The current state of the Capacity Reservation. A
  /// Capacity Reservation can be in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code>- The Capacity Reservation is active and the capacity
  /// is available for your use.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation expired automatically at
  /// the date and time specified in your request. The reserved capacity is no
  /// longer available for your use.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation was cancelled. The
  /// reserved capacity is no longer available for your use.
  /// </li>
  /// <li>
  /// <code>pending</code> - The Capacity Reservation request was successful but
  /// the capacity provisioning is still pending.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation request has failed. A
  /// request might fail due to invalid request parameters, capacity
  /// constraints, or instance limit constraints. Failed requests are retained
  /// for 60 minutes.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>start-date</code> - The date and time at which the Capacity
  /// Reservation was started.
  /// </li>
  /// <li>
  /// <code>end-date</code> - The date and time at which the Capacity
  /// Reservation expires. When a Capacity Reservation expires, the reserved
  /// capacity is released and you can no longer launch instances into it. The
  /// Capacity Reservation's state changes to expired when it reaches its end
  /// date and time.
  /// </li>
  /// <li>
  /// <code>end-date-type</code> - Indicates the way in which the Capacity
  /// Reservation ends. A Capacity Reservation can have one of the following end
  /// types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>instance-match-criteria</code> - Indicates the type of instance
  /// launches that the Capacity Reservation accepts. The options include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The Capacity Reservation accepts all instances that
  /// have matching attributes (instance type, platform, and Availability Zone).
  /// Instances that have matching attributes launch into the Capacity
  /// Reservation automatically without specifying any additional parameters.
  /// </li>
  /// <li>
  /// <code>targeted</code> - The Capacity Reservation only accepts instances
  /// that have matching attributes (instance type, platform, and Availability
  /// Zone), and explicitly target the Capacity Reservation. This ensures that
  /// only permitted instances can use the reserved capacity.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>placement-group-arn</code> - The ARN of the cluster placement group
  /// in which the Capacity Reservation was created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeCapacityReservationsResult> describeCapacityReservations({
    List<String>? capacityReservationIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your carrier gateways.
  ///
  /// Parameter [carrierGatewayIds] :
  /// One or more carrier gateway IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>carrier-gateway-id</code> - The ID of the carrier gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the carrier gateway
  /// (<code>pending</code> | <code>failed</code> | <code>available</code> |
  /// <code>deleting</code> | <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the owner of
  /// the carrier gateway.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC associated with the carrier
  /// gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeCarrierGatewaysResult> describeCarrierGateways({
    List<String>? carrierGatewayIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Describes one or more of your linked EC2-Classic instances. This request
  /// only returns information about EC2-Classic instances linked to a VPC
  /// through ClassicLink. You cannot use this request to return information
  /// about other instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-id</code> - The ID of a VPC security group that's associated
  /// with the instance.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC to which the instance is linked.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs. Must be instances linked to a VPC through ClassicLink.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Constraint: If the value is greater than 1000, we return only 1000 items.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeClassicLinkInstancesResult> describeClassicLinkInstances({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? instanceIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the authorization rules for a specified Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>description</code> - The description of the authorization rule.
  /// </li>
  /// <li>
  /// <code>destination-cidr</code> - The CIDR of the network to which the
  /// authorization rule applies.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of the Active Directory group to which the
  /// authorization rule grants access.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnAuthorizationRulesResult>
      describeClientVpnAuthorizationRules({
    required String clientVpnEndpointId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes active client connections and connections that have been
  /// terminated within the last 60 minutes for the specified Client VPN
  /// endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>connection-id</code> - The ID of the connection.
  /// </li>
  /// <li>
  /// <code>username</code> - For Active Directory client authentication, the
  /// user name of the client who established the client connection.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnConnectionsResult> describeClientVpnConnections({
    required String clientVpnEndpointId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Client VPN endpoints in the account.
  ///
  /// Parameter [clientVpnEndpointIds] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>endpoint-id</code> - The ID of the Client VPN endpoint.
  /// </li>
  /// <li>
  /// <code>transport-protocol</code> - The transport protocol (<code>tcp</code>
  /// | <code>udp</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnEndpointsResult> describeClientVpnEndpoints({
    List<String>? clientVpnEndpointIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the routes for the specified Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>destination-cidr</code> - The CIDR of the route destination.
  /// </li>
  /// <li>
  /// <code>origin</code> - How the route was associated with the Client VPN
  /// endpoint (<code>associate</code> | <code>add-route</code>).
  /// </li>
  /// <li>
  /// <code>target-subnet</code> - The ID of the subnet through which traffic is
  /// routed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnRoutesResult> describeClientVpnRoutes({
    required String clientVpnEndpointId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the target networks associated with the specified Client VPN
  /// endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [associationIds] :
  /// The IDs of the target network associations.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>association-id</code> - The ID of the association.
  /// </li>
  /// <li>
  /// <code>target-network-id</code> - The ID of the subnet specified as the
  /// target network.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the target network is
  /// located.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnTargetNetworksResult>
      describeClientVpnTargetNetworks({
    required String clientVpnEndpointId,
    List<String>? associationIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified customer-owned address pools or all of your
  /// customer-owned address pools.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>coip-pool.local-gateway-route-table-id</code> - The ID of the local
  /// gateway route table.
  /// </li>
  /// <li>
  /// <code>coip-pool.pool-id</code> - The ID of the address pool.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [poolIds] :
  /// The IDs of the address pools.
  Future<DescribeCoipPoolsResult> describeCoipPools({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? poolIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified conversion tasks or all your conversion tasks. For
  /// more information, see the <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM
  /// Import/Export User Guide</a>.
  ///
  /// For information about the import manifest referenced by this API action,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  ///
  /// Parameter [conversionTaskIds] :
  /// The conversion task IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeConversionTasksResult> describeConversionTasks({
    List<String>? conversionTaskIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPN customer gateways.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [customerGatewayIds] :
  /// One or more customer gateway IDs.
  ///
  /// Default: Describes all your customer gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol
  /// (BGP) Autonomous System Number (ASN).
  /// </li>
  /// <li>
  /// <code>customer-gateway-id</code> - The ID of the customer gateway.
  /// </li>
  /// <li>
  /// <code>ip-address</code> - The IP address of the customer gateway device's
  /// external interface.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the customer gateway
  /// (<code>pending</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>type</code> - The type of customer gateway. Currently, the only
  /// supported type is <code>ipsec.1</code>.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  Future<DescribeCustomerGatewaysResult> describeCustomerGateways({
    List<String>? customerGatewayIds,
    bool? dryRun,
    List<Filter>? filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your DHCP options sets.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// options sets</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [dhcpOptionsIds] :
  /// The IDs of one or more DHCP options sets.
  ///
  /// Default: Describes all your DHCP options sets.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>dhcp-options-id</code> - The ID of a DHCP options set.
  /// </li>
  /// <li>
  /// <code>key</code> - The key for one of the options (for example,
  /// <code>domain-name</code>).
  /// </li>
  /// <li>
  /// <code>value</code> - The value for one of the options.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the DHCP options set.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeDhcpOptionsResult> describeDhcpOptions({
    List<String>? dhcpOptionsIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your egress-only internet gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [egressOnlyInternetGatewayIds] :
  /// The IDs of the egress-only internet gateways.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeEgressOnlyInternetGatewaysResult>
      describeEgressOnlyInternetGateways({
    bool? dryRun,
    List<String>? egressOnlyInternetGatewayIds,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// Amazon Elastic Graphics reached end of life on January 8, 2024. For
  /// workloads that require graphics acceleration, we recommend that you use
  /// Amazon EC2 G4ad, G4dn, or G5 instances.
  /// </note>
  /// Describes the Elastic Graphics accelerator associated with your instances.
  /// For more information about Elastic Graphics, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon
  /// Elastic Graphics</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [elasticGpuIds] :
  /// The Elastic Graphics accelerator IDs.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone in which the
  /// Elastic Graphics accelerator resides.
  /// </li>
  /// <li>
  /// <code>elastic-gpu-health</code> - The status of the Elastic Graphics
  /// accelerator (<code>OK</code> | <code>IMPAIRED</code>).
  /// </li>
  /// <li>
  /// <code>elastic-gpu-state</code> - The state of the Elastic Graphics
  /// accelerator (<code>ATTACHED</code>).
  /// </li>
  /// <li>
  /// <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator;
  /// for example, <code>eg1.medium</code>.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance to which the Elastic
  /// Graphics accelerator is associated.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeElasticGpusResult> describeElasticGpus({
    bool? dryRun,
    List<String>? elasticGpuIds,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      10,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified export image tasks or all of your export image
  /// tasks.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [exportImageTaskIds] :
  /// The IDs of the export image tasks.
  ///
  /// Parameter [filters] :
  /// Filter tasks using the <code>task-state</code> filter and one of the
  /// following values: <code>active</code>, <code>completed</code>,
  /// <code>deleting</code>, or <code>deleted</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call.
  ///
  /// Parameter [nextToken] :
  /// A token that indicates the next page of results.
  Future<DescribeExportImageTasksResult> describeExportImageTasks({
    bool? dryRun,
    List<String>? exportImageTaskIds,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified export instance tasks or all of your export
  /// instance tasks.
  ///
  /// Parameter [exportTaskIds] :
  /// The export task IDs.
  ///
  /// Parameter [filters] :
  /// the filters for the export tasks.
  Future<DescribeExportTasksResult> describeExportTasks({
    List<String>? exportTaskIds,
    List<Filter>? filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describe details for Windows AMIs that are configured for Windows fast
  /// launch.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Use the following filters to streamline results.
  ///
  /// <ul>
  /// <li>
  /// <code>resource-type</code> - The resource type for pre-provisioning.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The owner ID for the pre-provisioning resource.
  /// </li>
  /// <li>
  /// <code>state</code> - The current state of fast launching for the Windows
  /// AMI.
  /// </li>
  /// </ul>
  ///
  /// Parameter [imageIds] :
  /// Specify one or more Windows AMI image IDs for the request.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeFastLaunchImagesResult> describeFastLaunchImages({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? imageIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the state of fast snapshot restores for your snapshots.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code>: The Availability Zone of the snapshot.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The ID of the Amazon Web Services account that
  /// enabled fast snapshot restore on the snapshot.
  /// </li>
  /// <li>
  /// <code>snapshot-id</code>: The ID of the snapshot.
  /// </li>
  /// <li>
  /// <code>state</code>: The state of fast snapshot restores for the snapshot
  /// (<code>enabling</code> | <code>optimizing</code> | <code>enabled</code> |
  /// <code>disabling</code> | <code>disabled</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeFastSnapshotRestoresResult> describeFastSnapshotRestores({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the events for the specified EC2 Fleet during the specified
  /// time.
  ///
  /// EC2 Fleet events are delayed by up to 30 seconds before they can be
  /// described. This ensures that you can query by the last evaluated time and
  /// not miss a recorded event. EC2 Fleet events are available for 48 hours.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor
  /// fleet events using Amazon EventBridge</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [fleetId] :
  /// The ID of the EC2 Fleet.
  ///
  /// Parameter [startTime] :
  /// The start date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [eventType] :
  /// The type of events to describe. By default, all events are described.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeFleetHistoryResult> describeFleetHistory({
    required String fleetId,
    required DateTime startTime,
    bool? dryRun,
    FleetEventType? eventType,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the running instances for the specified EC2 Fleet.
  /// <note>
  /// Currently, <code>DescribeFleetInstances</code> does not support fleets of
  /// type <code>instant</code>. Instead, use <code>DescribeFleets</code>,
  /// specifying the <code>instant</code> fleet ID in the request.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#monitor-ec2-fleet">Describe
  /// your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [fleetId] :
  /// The ID of the EC2 Fleet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-type</code> - The instance type.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeFleetInstancesResult> describeFleetInstances({
    required String fleetId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EC2 Fleet or all of your EC2 Fleets.
  /// <important>
  /// If a fleet is of type <code>instant</code>, you must specify the fleet ID
  /// in the request, otherwise the fleet does not appear in the response.
  /// </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#monitor-ec2-fleet">Describe
  /// your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>activity-status</code> - The progress of the EC2 Fleet (
  /// <code>error</code> | <code>pending-fulfillment</code> |
  /// <code>pending-termination</code> | <code>fulfilled</code>).
  /// </li>
  /// <li>
  /// <code>excess-capacity-termination-policy</code> - Indicates whether to
  /// terminate running instances if the target capacity is decreased below the
  /// current EC2 Fleet size (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>fleet-state</code> - The state of the EC2 Fleet
  /// (<code>submitted</code> | <code>active</code> | <code>deleted</code> |
  /// <code>failed</code> | <code>deleted-running</code> |
  /// <code>deleted-terminating</code> | <code>modifying</code>).
  /// </li>
  /// <li>
  /// <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet
  /// should replace unhealthy instances (<code>true</code> |
  /// <code>false</code>).
  /// </li>
  /// <li>
  /// <code>type</code> - The type of request (<code>instant</code> |
  /// <code>request</code> | <code>maintain</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [fleetIds] :
  /// The IDs of the EC2 Fleets.
  /// <note>
  /// If a fleet is of type <code>instant</code>, you must specify the fleet ID,
  /// otherwise it does not appear in the response.
  /// </note>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeFleetsResult> describeFleets({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? fleetIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more flow logs.
  ///
  /// To view the published flow log records, you must view the log destination.
  /// For example, the CloudWatch Logs log group, the Amazon S3 bucket, or the
  /// Kinesis Data Firehose delivery stream.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filter] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>deliver-log-status</code> - The status of the logs delivery
  /// (<code>SUCCESS</code> | <code>FAILED</code>).
  /// </li>
  /// <li>
  /// <code>log-destination-type</code> - The type of destination for the flow
  /// log data (<code>cloud-watch-logs</code> | <code>s3</code> |
  /// <code>kinesis-data-firehose</code>).
  /// </li>
  /// <li>
  /// <code>flow-log-id</code> - The ID of the flow log.
  /// </li>
  /// <li>
  /// <code>log-group-name</code> - The name of the log group.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the VPC, subnet, or network
  /// interface.
  /// </li>
  /// <li>
  /// <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> |
  /// <code>REJECT</code> | <code>ALL</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [flowLogIds] :
  /// One or more flow log IDs.
  ///
  /// Constraint: Maximum of 1000 flow log IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of items. Pagination continues from the
  /// end of the items returned by the previous request.
  Future<DescribeFlowLogsResult> describeFlowLogs({
    bool? dryRun,
    List<Filter>? filter,
    List<String>? flowLogIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified Amazon FPGA Image
  /// (AFI).
  ///
  /// Parameter [attribute] :
  /// The AFI attribute.
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeFpgaImageAttributeResult> describeFpgaImageAttribute({
    required FpgaImageAttributeName attribute,
    required String fpgaImageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Amazon FPGA Images (AFIs) available to you. These include
  /// public AFIs, private AFIs that you own, and AFIs owned by other Amazon Web
  /// Services accounts for which you have load permissions.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>create-time</code> - The creation time of the AFI.
  /// </li>
  /// <li>
  /// <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).
  /// </li>
  /// <li>
  /// <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI
  /// ID).
  /// </li>
  /// <li>
  /// <code>name</code> - The name of the AFI.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the AFI
  /// owner.
  /// </li>
  /// <li>
  /// <code>product-code</code> - The product code.
  /// </li>
  /// <li>
  /// <code>shell-version</code> - The version of the Amazon Web Services Shell
  /// that was used to create the bitstream.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the AFI (<code>pending</code> |
  /// <code>failed</code> | <code>available</code> | <code>unavailable</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>update-time</code> - The time of the most recent update.
  /// </li>
  /// </ul>
  ///
  /// Parameter [fpgaImageIds] :
  /// The AFI IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [owners] :
  /// Filters the AFI by owner. Specify an Amazon Web Services account ID,
  /// <code>self</code> (owner is the sender of the request), or an Amazon Web
  /// Services owner alias (valid values are <code>amazon</code> |
  /// <code>aws-marketplace</code>).
  Future<DescribeFpgaImagesResult> describeFpgaImages({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? fpgaImageIds,
    int? maxResults,
    String? nextToken,
    List<String>? owners,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Dedicated Host reservations that are available to purchase.
  ///
  /// The results describe all of the Dedicated Host reservation offerings,
  /// including offerings that might not match the instance family and Region of
  /// your Dedicated Hosts. When purchasing an offering, ensure that the
  /// instance family and Region of the offering matches that of the Dedicated
  /// Hosts with which it is to be associated. For more information about
  /// supported instance types, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
  /// Hosts</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-family</code> - The instance family of the offering (for
  /// example, <code>m4</code>).
  /// </li>
  /// <li>
  /// <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
  /// <code>PartialUpfront</code> | <code>AllUpfront</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxDuration] :
  /// This is the maximum duration of the reservation to purchase, specified in
  /// seconds. Reservations are available in one-year and three-year terms. The
  /// number of seconds specified must be the number of seconds in a year
  /// (365x24x60x60) times one of the supported durations (1 or 3). For example,
  /// specify 94608000 for three years.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// Parameter [minDuration] :
  /// This is the minimum duration of the reservation you'd like to purchase,
  /// specified in seconds. Reservations are available in one-year and
  /// three-year terms. The number of seconds specified must be the number of
  /// seconds in a year (365x24x60x60) times one of the supported durations (1
  /// or 3). For example, specify 31536000 for one year.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  ///
  /// Parameter [offeringId] :
  /// The ID of the reservation offering.
  Future<DescribeHostReservationOfferingsResult>
      describeHostReservationOfferings({
    List<Filter>? filter,
    int? maxDuration,
    int? maxResults,
    int? minDuration,
    String? nextToken,
    String? offeringId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes reservations that are associated with Dedicated Hosts in your
  /// account.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-family</code> - The instance family (for example,
  /// <code>m4</code>).
  /// </li>
  /// <li>
  /// <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
  /// <code>PartialUpfront</code> | <code>AllUpfront</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the reservation
  /// (<code>payment-pending</code> | <code>payment-failed</code> |
  /// <code>active</code> | <code>retired</code>).
  /// </li>
  /// <li>
  /// <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [hostReservationIdSet] :
  /// The host reservation IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeHostReservationsResult> describeHostReservations({
    List<Filter>? filter,
    List<String>? hostReservationIdSet,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Dedicated Hosts or all your Dedicated Hosts.
  ///
  /// The results describe only the Dedicated Hosts in the Region you're
  /// currently using. All listed instances consume capacity on your Dedicated
  /// Host. Dedicated Hosts that have recently been released are listed with the
  /// state <code>released</code>.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>auto-placement</code> - Whether auto-placement is enabled or
  /// disabled (<code>on</code> | <code>off</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the host.
  /// </li>
  /// <li>
  /// <code>client-token</code> - The idempotency token that you provided when
  /// you allocated the host.
  /// </li>
  /// <li>
  /// <code>host-reservation-id</code> - The ID of the reservation assigned to
  /// this host.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type size that the Dedicated
  /// Host is configured to support.
  /// </li>
  /// <li>
  /// <code>state</code> - The allocation state of the Dedicated Host
  /// (<code>available</code> | <code>under-assessment</code> |
  /// <code>permanent-failure</code> | <code>released</code> |
  /// <code>released-permanent-failure</code>).
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [hostIds] :
  /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance
  /// launches.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// You cannot specify this parameter and the host IDs parameter in the same
  /// request.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeHostsResult> describeHosts({
    List<Filter>? filter,
    List<String>? hostIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your IAM instance profile associations.
  ///
  /// Parameter [associationIds] :
  /// The IAM instance profile associations.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the association
  /// (<code>associating</code> | <code>associated</code> |
  /// <code>disassociating</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeIamInstanceProfileAssociationsResult>
      describeIamInstanceProfileAssociations({
    List<String>? associationIds,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ID format settings for your resources on a per-Region basis,
  /// for example, to view which resource types are enabled for longer IDs. This
  /// request only returns information about resource types whose ID formats can
  /// be modified; it does not return information about other resource types.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// These settings apply to the IAM user who makes the request; they do not
  /// apply to the entire Amazon Web Services account. By default, an IAM user
  /// defaults to the same settings as the root user, unless they explicitly
  /// override the settings by running the <a>ModifyIdFormat</a> command.
  /// Resources created with longer IDs are visible to all IAM users, regardless
  /// of these settings and provided that they have permission to use the
  /// relevant <code>Describe</code> command for the resource type.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>instance</code> |
  /// <code>internet-gateway</code> | <code>network-acl</code> |
  /// <code>network-acl-association</code> | <code>network-interface</code> |
  /// <code>network-interface-attachment</code> | <code>prefix-list</code> |
  /// <code>reservation</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>snapshot</code> | <code>subnet</code> |
  /// <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>
  Future<DescribeIdFormatResult> describeIdFormat({
    String? resource,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ID format settings for resources for the specified IAM user,
  /// IAM role, or root user. For example, you can view the resource types that
  /// are enabled for longer IDs. This request only returns information about
  /// resource types whose ID formats can be modified; it does not return
  /// information about other resource types. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource
  /// IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// These settings apply to the principal specified in the request. They do
  /// not apply to the principal that makes the request.
  ///
  /// Parameter [principalArn] :
  /// The ARN of the principal, which can be an IAM role, IAM user, or the root
  /// user.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>instance</code> |
  /// <code>internet-gateway</code> | <code>network-acl</code> |
  /// <code>network-acl-association</code> | <code>network-interface</code> |
  /// <code>network-interface-attachment</code> | <code>prefix-list</code> |
  /// <code>reservation</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>snapshot</code> | <code>subnet</code> |
  /// <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>
  Future<DescribeIdentityIdFormatResult> describeIdentityIdFormat({
    required String principalArn,
    String? resource,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified AMI. You can specify
  /// only one attribute at a time.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [attribute] :
  /// The AMI attribute.
  ///
  /// <b>Note</b>: The <code>blockDeviceMapping</code> attribute is deprecated.
  /// Using this attribute returns the <code>Client.AuthFailure</code> error. To
  /// get information about the block device mappings for an AMI, use the
  /// <a>DescribeImages</a> action.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ImageAttribute> describeImageAttribute({
    required ImageAttributeName attribute,
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified images (AMIs, AKIs, and ARIs) available to you or
  /// all of the images available to you.
  ///
  /// The images available to you include public images, private images that you
  /// own, and private images owned by other Amazon Web Services accounts for
  /// which you have explicit launch permissions.
  ///
  /// Recently deregistered images appear in the returned results for a short
  /// interval and then return empty results. After all instances that reference
  /// a deregistered AMI are terminated, specifying the ID of the image will
  /// eventually return an error indicating that the AMI ID cannot be found.
  /// <important>
  /// We strongly recommend using only paginated requests. Unpaginated requests
  /// are susceptible to throttling and timeouts.
  /// </important> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [executableUsers] :
  /// Scopes the images by users with explicit launch permissions. Specify an
  /// Amazon Web Services account ID, <code>self</code> (the sender of the
  /// request), or <code>all</code> (public AMIs).
  ///
  /// <ul>
  /// <li>
  /// If you specify an Amazon Web Services account ID that is not your own,
  /// only AMIs shared with that specific Amazon Web Services account ID are
  /// returned. However, AMIs that are shared with the account’s organization or
  /// organizational unit (OU) are not returned.
  /// </li>
  /// <li>
  /// If you specify <code>self</code> or your own Amazon Web Services account
  /// ID, AMIs shared with your account are returned. In addition, AMIs that are
  /// shared with the organization or OU of which you are member are also
  /// returned.
  /// </li>
  /// <li>
  /// If you specify <code>all</code>, all public AMIs are returned.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>architecture</code> - The image architecture (<code>i386</code> |
  /// <code>x86_64</code> | <code>arm64</code> | <code>x86_64_mac</code> |
  /// <code>arm64_mac</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.delete-on-termination</code> - A Boolean value
  /// that indicates whether the Amazon EBS volume is deleted on instance
  /// termination.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.device-name</code> - The device name specified
  /// in the block device mapping (for example, <code>/dev/sdh</code> or
  /// <code>xvdh</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot
  /// used for the Amazon EBS volume.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.volume-size</code> - The volume size of the
  /// Amazon EBS volume, in GiB.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.volume-type</code> - The volume type of the
  /// Amazon EBS volume (<code>io1</code> | <code>io2</code> | <code>gp2</code>
  /// | <code>gp3</code> | <code>sc1 </code>| <code>st1</code> |
  /// <code>standard</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.encrypted</code> - A Boolean that indicates
  /// whether the Amazon EBS volume is encrypted.
  /// </li>
  /// <li>
  /// <code>creation-date</code> - The time when the image was created, in the
  /// ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for
  /// example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard
  /// (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an
  /// entire day.
  /// </li>
  /// <li>
  /// <code>description</code> - The description of the image (provided during
  /// image creation).
  /// </li>
  /// <li>
  /// <code>ena-support</code> - A Boolean that indicates whether enhanced
  /// networking with ENA is enabled.
  /// </li>
  /// <li>
  /// <code>hypervisor</code> - The hypervisor type (<code>ovm</code> |
  /// <code>xen</code>).
  /// </li>
  /// <li>
  /// <code>image-id</code> - The ID of the image.
  /// </li>
  /// <li>
  /// <code>image-type</code> - The image type (<code>machine</code> |
  /// <code>kernel</code> | <code>ramdisk</code>).
  /// </li>
  /// <li>
  /// <code>is-public</code> - A Boolean that indicates whether the image is
  /// public.
  /// </li>
  /// <li>
  /// <code>kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>manifest-location</code> - The location of the image manifest.
  /// </li>
  /// <li>
  /// <code>name</code> - The name of the AMI (provided during image creation).
  /// </li>
  /// <li>
  /// <code>owner-alias</code> - The owner alias (<code>amazon</code> |
  /// <code>aws-marketplace</code>). The valid aliases are defined in an
  /// Amazon-maintained list. This is not the Amazon Web Services account alias
  /// that can be set using the IAM console. We recommend that you use the
  /// <b>Owner</b> request parameter instead of this filter.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the owner.
  /// We recommend that you use the <b>Owner</b> request parameter instead of
  /// this filter.
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform. The only supported value is
  /// <code>windows</code>.
  /// </li>
  /// <li>
  /// <code>product-code</code> - The product code.
  /// </li>
  /// <li>
  /// <code>product-code.type</code> - The type of the product code
  /// (<code>marketplace</code>).
  /// </li>
  /// <li>
  /// <code>ramdisk-id</code> - The RAM disk ID.
  /// </li>
  /// <li>
  /// <code>root-device-name</code> - The device name of the root device volume
  /// (for example, <code>/dev/sda1</code>).
  /// </li>
  /// <li>
  /// <code>root-device-type</code> - The type of the root device volume
  /// (<code>ebs</code> | <code>instance-store</code>).
  /// </li>
  /// <li>
  /// <code>source-instance-id</code> - The ID of the instance that the AMI was
  /// created from if the AMI was created using CreateImage. This filter is
  /// applicable only if the AMI was created using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html">CreateImage</a>.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the image (<code>available</code> |
  /// <code>pending</code> | <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>state-reason-code</code> - The reason code for the state change.
  /// </li>
  /// <li>
  /// <code>state-reason-message</code> - The message for the state change.
  /// </li>
  /// <li>
  /// <code>sriov-net-support</code> - A value of <code>simple</code> indicates
  /// that enhanced networking with the Intel 82599 VF interface is enabled.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>virtualization-type</code> - The virtualization type
  /// (<code>paravirtual</code> | <code>hvm</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [imageIds] :
  /// The image IDs.
  ///
  /// Default: Describes all images available to you.
  ///
  /// Parameter [includeDeprecated] :
  /// Specifies whether to include deprecated AMIs.
  ///
  /// Default: No deprecated AMIs are included in the response.
  /// <note>
  /// If you are the AMI owner, all deprecated AMIs appear in the response
  /// regardless of what you specify for this parameter.
  /// </note>
  ///
  /// Parameter [includeDisabled] :
  /// Specifies whether to include disabled AMIs.
  ///
  /// Default: No disabled AMIs are included in the response.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [owners] :
  /// Scopes the results to images with the specified owners. You can specify a
  /// combination of Amazon Web Services account IDs, <code>self</code>,
  /// <code>amazon</code>, and <code>aws-marketplace</code>. If you omit this
  /// parameter, the results include all images for which you have launch
  /// permissions, regardless of ownership.
  Future<DescribeImagesResult> describeImages({
    bool? dryRun,
    List<String>? executableUsers,
    List<Filter>? filters,
    List<String>? imageIds,
    bool? includeDeprecated,
    bool? includeDisabled,
    int? maxResults,
    String? nextToken,
    List<String>? owners,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Displays details about an import virtual machine or import snapshot tasks
  /// that are already created.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Filter tasks using the <code>task-state</code> filter and one of the
  /// following values: <code>active</code>, <code>completed</code>,
  /// <code>deleting</code>, or <code>deleted</code>.
  ///
  /// Parameter [importTaskIds] :
  /// The IDs of the import image tasks.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call.
  ///
  /// Parameter [nextToken] :
  /// A token that indicates the next page of results.
  Future<DescribeImportImageTasksResult> describeImportImageTasks({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? importTaskIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your import snapshot tasks.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// Parameter [importTaskIds] :
  /// A list of import snapshot task IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// A token that indicates the next page of results.
  Future<DescribeImportSnapshotTasksResult> describeImportSnapshotTasks({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? importTaskIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified instance. You can
  /// specify only one attribute at a time. Valid attribute values are:
  /// <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> |
  /// <code>userData</code> | <code>disableApiTermination</code> |
  /// <code>instanceInitiatedShutdownBehavior</code> |
  /// <code>rootDeviceName</code> | <code>blockDeviceMapping</code> |
  /// <code>productCodes</code> | <code>sourceDestCheck</code> |
  /// <code>groupSet</code> | <code>ebsOptimized</code> |
  /// <code>sriovNetSupport</code>
  ///
  /// Parameter [attribute] :
  /// The instance attribute.
  ///
  /// Note: The <code>enaSupport</code> attribute is not supported at this time.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<InstanceAttribute> describeInstanceAttribute({
    required InstanceAttributeName attribute,
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EC2 Instance Connect Endpoints or all EC2 Instance
  /// Connect Endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-connect-endpoint-id</code> - The ID of the EC2 Instance
  /// Connect Endpoint.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the EC2 Instance Connect Endpoint
  /// (<code>create-in-progress</code> | <code>create-complete</code> |
  /// <code>create-failed</code> | <code>delete-in-progress</code> |
  /// <code>delete-complete</code> | <code>delete-failed</code>).
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet in which the EC2 Instance
  /// Connect Endpoint was created.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>tag-value</code> - The value of a tag assigned to the resource. Use
  /// this filter to find all resources that have a tag with a specific value,
  /// regardless of tag key.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the EC2 Instance Connect
  /// Endpoint was created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceConnectEndpointIds] :
  /// One or more EC2 Instance Connect Endpoint IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstanceConnectEndpointsResult>
      describeInstanceConnectEndpoints({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? instanceConnectEndpointIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      50,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the credit option for CPU usage of the specified burstable
  /// performance instances. The credit options are <code>standard</code> and
  /// <code>unlimited</code>.
  ///
  /// If you do not specify an instance ID, Amazon EC2 returns burstable
  /// performance instances with the <code>unlimited</code> credit option, as
  /// well as instances that were previously configured as T2, T3, and T3a with
  /// the <code>unlimited</code> credit option. For example, if you resize a T2
  /// instance, while it is configured as <code>unlimited</code>, to an M4
  /// instance, Amazon EC2 returns the M4 instance.
  ///
  /// If you specify one or more instance IDs, Amazon EC2 returns the credit
  /// option (<code>standard</code> or <code>unlimited</code>) of those
  /// instances. If you specify an instance ID that is not valid, such as an
  /// instance that is not a burstable performance instance, an error is
  /// returned.
  ///
  /// Recently terminated instances might appear in the returned results. This
  /// interval is usually less than one hour.
  ///
  /// If an Availability Zone is experiencing a service disruption and you
  /// specify instance IDs in the affected zone, or do not specify any instance
  /// IDs at all, the call fails. If you specify only instance IDs in an
  /// unaffected zone, the call works normally.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Constraints: Maximum 1000 explicitly specified instance IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// You cannot specify this parameter and the instance IDs parameter in the
  /// same call.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstanceCreditSpecificationsResult>
      describeInstanceCreditSpecifications({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? instanceIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the tag keys that are registered to appear in scheduled event
  /// notifications for resources in the current Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeInstanceEventNotificationAttributesResult>
      describeInstanceEventNotificationAttributes({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified event windows or all event windows.
  ///
  /// If you specify event window IDs, the output includes information for only
  /// the specified event windows. If you specify filters, the output includes
  /// information for only those event windows that meet the filter criteria. If
  /// you do not specify event windows IDs or filters, the output includes
  /// information for all event windows, which can affect performance. We
  /// recommend that you use pagination to ensure that the operation returns
  /// quickly and successfully.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define
  /// event windows for scheduled events</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>dedicated-host-id</code> - The event windows associated with the
  /// specified Dedicated Host ID.
  /// </li>
  /// <li>
  /// <code>event-window-name</code> - The event windows associated with the
  /// specified names.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The event windows associated with the specified
  /// instance ID.
  /// </li>
  /// <li>
  /// <code>instance-tag</code> - The event windows associated with the
  /// specified tag and value.
  /// </li>
  /// <li>
  /// <code>instance-tag-key</code> - The event windows associated with the
  /// specified tag key, regardless of the value.
  /// </li>
  /// <li>
  /// <code>instance-tag-value</code> - The event windows associated with the
  /// specified tag value, regardless of the key.
  /// </li>
  /// <li>
  /// <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned
  /// to the event window. Use the tag key in the filter name and the tag value
  /// as the filter value. For example, to find all resources that have a tag
  /// with the key <code>Owner</code> and the value <code>CMX</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>CMX</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the event window. Use
  /// this filter to find all event windows that have a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>tag-value</code> - The value of a tag assigned to the event window.
  /// Use this filter to find all event windows that have a tag with a specific
  /// value, regardless of the tag key.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceEventWindowIds] :
  /// The IDs of the event windows.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 20 and 500. You
  /// cannot specify this parameter and the event window IDs parameter in the
  /// same call.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeInstanceEventWindowsResult> describeInstanceEventWindows({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? instanceEventWindowIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      20,
      500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the status of the specified instances or all of your instances.
  /// By default, only running instances are described, unless you specifically
  /// indicate to return the status of all instances.
  ///
  /// Instance status includes the following components:
  ///
  /// <ul>
  /// <li>
  /// <b>Status checks</b> - Amazon EC2 performs status checks on running EC2
  /// instances to identify hardware and software issues. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status
  /// checks for your instances</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshoot
  /// instances with failed status checks</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  /// </li>
  /// <li>
  /// <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot,
  /// stop, or terminate) for your instances related to hardware issues,
  /// software updates, or system maintenance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled
  /// events for your instances</a> in the <i>Amazon EC2 User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Instance state</b> - You can manage your instances from the moment you
  /// launch them through their termination. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
  /// lifecycle</a> in the <i>Amazon EC2 User Guide</i>.
  /// </li>
  /// </ul> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the instance.
  /// </li>
  /// <li>
  /// <code>event.code</code> - The code for the scheduled event
  /// (<code>instance-reboot</code> | <code>system-reboot</code> |
  /// <code>system-maintenance</code> | <code>instance-retirement</code> |
  /// <code>instance-stop</code>).
  /// </li>
  /// <li>
  /// <code>event.description</code> - A description of the event.
  /// </li>
  /// <li>
  /// <code>event.instance-event-id</code> - The ID of the event whose date and
  /// time you are modifying.
  /// </li>
  /// <li>
  /// <code>event.not-after</code> - The latest end time for the scheduled event
  /// (for example, <code>2014-09-15T17:15:20.000Z</code>).
  /// </li>
  /// <li>
  /// <code>event.not-before</code> - The earliest start time for the scheduled
  /// event (for example, <code>2014-09-15T17:15:20.000Z</code>).
  /// </li>
  /// <li>
  /// <code>event.not-before-deadline</code> - The deadline for starting the
  /// event (for example, <code>2014-09-15T17:15:20.000Z</code>).
  /// </li>
  /// <li>
  /// <code>instance-state-code</code> - The code for the instance state, as a
  /// 16-bit unsigned integer. The high byte is used for internal purposes and
  /// should be ignored. The low byte is set based on the state represented. The
  /// valid values are 0 (pending), 16 (running), 32 (shutting-down), 48
  /// (terminated), 64 (stopping), and 80 (stopped).
  /// </li>
  /// <li>
  /// <code>instance-state-name</code> - The state of the instance
  /// (<code>pending</code> | <code>running</code> | <code>shutting-down</code>
  /// | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).
  /// </li>
  /// <li>
  /// <code>instance-status.reachability</code> - Filters on instance status
  /// where the name is <code>reachability</code> (<code>passed</code> |
  /// <code>failed</code> | <code>initializing</code> |
  /// <code>insufficient-data</code>).
  /// </li>
  /// <li>
  /// <code>instance-status.status</code> - The status of the instance
  /// (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
  /// <code>insufficient-data</code> | <code>not-applicable</code>).
  /// </li>
  /// <li>
  /// <code>system-status.reachability</code> - Filters on system status where
  /// the name is <code>reachability</code> (<code>passed</code> |
  /// <code>failed</code> | <code>initializing</code> |
  /// <code>insufficient-data</code>).
  /// </li>
  /// <li>
  /// <code>system-status.status</code> - The system status of the instance
  /// (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
  /// <code>insufficient-data</code> | <code>not-applicable</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [includeAllInstances] :
  /// When <code>true</code>, includes the health status for all instances. When
  /// <code>false</code>, includes the health status for running instances only.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Constraints: Maximum 100 explicitly specified instance IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// You cannot specify this parameter and the instance IDs parameter in the
  /// same request.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstanceStatusResult> describeInstanceStatus({
    bool? dryRun,
    List<Filter>? filters,
    bool? includeAllInstances,
    List<String>? instanceIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes a tree-based hierarchy that represents the physical host
  /// placement of your EC2 instances within an Availability Zone or Local Zone.
  /// You can use this information to determine the relative proximity of your
  /// EC2 instances within the Amazon Web Services network to support your
  /// tightly coupled workloads.
  /// <p class="title"> <b>Limitations</b>
  ///
  /// <ul>
  /// <li>
  /// Supported zones
  ///
  /// <ul>
  /// <li>
  /// Availability Zone
  /// </li>
  /// <li>
  /// Local Zone
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Supported instance types
  ///
  /// <ul>
  /// <li>
  /// <code>hpc6a.48xlarge</code> | <code>hpc6id.32xlarge</code> |
  /// <code>hpc7a.12xlarge</code> | <code>hpc7a.24xlarge</code> |
  /// <code>hpc7a.48xlarge</code> | <code>hpc7a.96xlarge</code> |
  /// <code>hpc7g.4xlarge</code> | <code>hpc7g.8xlarge</code> |
  /// <code>hpc7g.16xlarge</code>
  /// </li>
  /// <li>
  /// <code>p3dn.24xlarge</code> | <code>p4d.24xlarge</code> |
  /// <code>p4de.24xlarge</code> | <code>p5.48xlarge</code>
  /// </li>
  /// <li>
  /// <code>trn1.2xlarge</code> | <code>trn1.32xlarge</code> |
  /// <code>trn1n.32xlarge</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-topology.html">Amazon
  /// EC2 instance topology</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The name of the Availability Zone (for
  /// example, <code>us-west-2a</code>) or Local Zone (for example,
  /// <code>us-west-2-lax-1b</code>) that the instance is in.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type (for example,
  /// <code>p4d.24xlarge</code>) or instance family (for example,
  /// <code>p4d*</code>). You can use the <code>*</code> wildcard to match zero
  /// or more characters, or the <code>?</code> wildcard to match zero or one
  /// character.
  /// </li>
  /// <li>
  /// <code>zone-id</code> - The ID of the Availability Zone (for example,
  /// <code>usw2-az2</code>) or Local Zone (for example,
  /// <code>usw2-lax1-az1</code>) that the instance is in.
  /// </li>
  /// </ul>
  ///
  /// Parameter [groupNames] :
  /// The name of the placement group that each instance is in.
  ///
  /// Constraints: Maximum 100 explicitly specified placement group names.
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Constraints: Maximum 100 explicitly specified instance IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// You can't specify this parameter and the instance IDs parameter in the
  /// same request.
  ///
  /// Default: <code>20</code>
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstanceTopologyResult> describeInstanceTopology({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? groupNames,
    List<String>? instanceIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Lists the instance types that are offered for the specified location. If
  /// no location is specified, the default is to list the instance types that
  /// are offered in the current Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-type</code> - The instance type. For a list of possible
  /// values, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Instance.html">Instance</a>.
  /// </li>
  /// <li>
  /// <code>location</code> - The location. For a list of possible identifiers,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions
  /// and Zones</a>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [locationType] :
  /// The location type.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone. When you specify a
  /// location filter, it must be an Availability Zone for the current Region.
  /// </li>
  /// <li>
  /// <code>availability-zone-id</code> - The AZ ID. When you specify a location
  /// filter, it must be an AZ ID for the current Region.
  /// </li>
  /// <li>
  /// <code>outpost</code> - The Outpost ARN. When you specify a location
  /// filter, it must be an Outpost ARN for the current Region.
  /// </li>
  /// <li>
  /// <code>region</code> - The current Region. If you specify a location
  /// filter, it must match the current Region.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstanceTypeOfferingsResult> describeInstanceTypeOfferings({
    bool? dryRun,
    List<Filter>? filters,
    LocationType? locationType,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified instance types. By default, all instance types for
  /// the current Region are described. Alternatively, you can filter the
  /// results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>auto-recovery-supported</code> - Indicates whether Amazon CloudWatch
  /// action based recovery is supported (<code>true</code> |
  /// <code>false</code>).
  /// </li>
  /// <li>
  /// <code>bare-metal</code> - Indicates whether it is a bare metal instance
  /// type (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>burstable-performance-supported</code> - Indicates whether the
  /// instance type is a burstable performance T instance type
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>current-generation</code> - Indicates whether this instance type is
  /// the latest generation instance type of an instance family
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps</code> - The
  /// baseline bandwidth performance for an EBS-optimized instance type, in
  /// Mbps.
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-info.baseline-iops</code> - The baseline
  /// input/output storage operations per second for an EBS-optimized instance
  /// type.
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-info.baseline-throughput-in-mbps</code> - The
  /// baseline throughput performance for an EBS-optimized instance type, in
  /// MB/s.
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps</code> - The
  /// maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-info.maximum-iops</code> - The maximum
  /// input/output storage operations per second for an EBS-optimized instance
  /// type.
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-info.maximum-throughput-in-mbps</code> - The
  /// maximum throughput performance for an EBS-optimized instance type, in
  /// MB/s.
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-support</code> - Indicates whether the
  /// instance type is EBS-optimized (<code>supported</code> |
  /// <code>unsupported</code> | <code>default</code>).
  /// </li>
  /// <li>
  /// <code>ebs-info.encryption-support</code> - Indicates whether EBS
  /// encryption is supported (<code>supported</code> |
  /// <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>ebs-info.nvme-support</code> - Indicates whether non-volatile memory
  /// express (NVMe) is supported for EBS volumes (<code>required</code> |
  /// <code>supported</code> | <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>free-tier-eligible</code> - Indicates whether the instance type is
  /// eligible to use in the free tier (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>hibernation-supported</code> - Indicates whether On-Demand
  /// hibernation is supported (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>hypervisor</code> - The hypervisor (<code>nitro</code> |
  /// <code>xen</code>).
  /// </li>
  /// <li>
  /// <code>instance-storage-info.disk.count</code> - The number of local disks.
  /// </li>
  /// <li>
  /// <code>instance-storage-info.disk.size-in-gb</code> - The storage size of
  /// each instance storage disk, in GB.
  /// </li>
  /// <li>
  /// <code>instance-storage-info.disk.type</code> - The storage technology for
  /// the local instance storage disks (<code>hdd</code> | <code>ssd</code>).
  /// </li>
  /// <li>
  /// <code>instance-storage-info.encryption-support</code> - Indicates whether
  /// data is encrypted at rest (<code>required</code> | <code>supported</code>
  /// | <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>instance-storage-info.nvme-support</code> - Indicates whether
  /// non-volatile memory express (NVMe) is supported for instance store
  /// (<code>required</code> | <code>supported</code> |
  /// <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>instance-storage-info.total-size-in-gb</code> - The total amount of
  /// storage available from all local instance storage, in GB.
  /// </li>
  /// <li>
  /// <code>instance-storage-supported</code> - Indicates whether the instance
  /// type has local instance storage (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type (for example
  /// <code>c5.2xlarge</code> or c5*).
  /// </li>
  /// <li>
  /// <code>memory-info.size-in-mib</code> - The memory size.
  /// </li>
  /// <li>
  /// <code>network-info.efa-info.maximum-efa-interfaces</code> - The maximum
  /// number of Elastic Fabric Adapters (EFAs) per instance.
  /// </li>
  /// <li>
  /// <code>network-info.efa-supported</code> - Indicates whether the instance
  /// type supports Elastic Fabric Adapter (EFA) (<code>true</code> |
  /// <code>false</code>).
  /// </li>
  /// <li>
  /// <code>network-info.ena-support</code> - Indicates whether Elastic Network
  /// Adapter (ENA) is supported or required (<code>required</code> |
  /// <code>supported</code> | <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>network-info.encryption-in-transit-supported</code> - Indicates
  /// whether the instance type automatically encrypts in-transit traffic
  /// between instances (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>network-info.ipv4-addresses-per-interface</code> - The maximum
  /// number of private IPv4 addresses per network interface.
  /// </li>
  /// <li>
  /// <code>network-info.ipv6-addresses-per-interface</code> - The maximum
  /// number of private IPv6 addresses per network interface.
  /// </li>
  /// <li>
  /// <code>network-info.ipv6-supported</code> - Indicates whether the instance
  /// type supports IPv6 (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>network-info.maximum-network-cards</code> - The maximum number of
  /// network cards per instance.
  /// </li>
  /// <li>
  /// <code>network-info.maximum-network-interfaces</code> - The maximum number
  /// of network interfaces per instance.
  /// </li>
  /// <li>
  /// <code>network-info.network-performance</code> - The network performance
  /// (for example, "25 Gigabit").
  /// </li>
  /// <li>
  /// <code>nitro-enclaves-support</code> - Indicates whether Nitro Enclaves is
  /// supported (<code>supported</code> | <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>nitro-tpm-support</code> - Indicates whether NitroTPM is supported
  /// (<code>supported</code> | <code>unsupported</code>).
  /// </li>
  /// <li>
  /// <code>nitro-tpm-info.supported-versions</code> - The supported NitroTPM
  /// version (<code>2.0</code>).
  /// </li>
  /// <li>
  /// <code>processor-info.supported-architecture</code> - The CPU architecture
  /// (<code>arm64</code> | <code>i386</code> | <code>x86_64</code>).
  /// </li>
  /// <li>
  /// <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock
  /// speed, in GHz.
  /// </li>
  /// <li>
  /// <code>processor-info.supported-features</code> - The supported CPU
  /// features (<code>amd-sev-snp</code>).
  /// </li>
  /// <li>
  /// <code>supported-boot-mode</code> - The boot mode (<code>legacy-bios</code>
  /// | <code>uefi</code>).
  /// </li>
  /// <li>
  /// <code>supported-root-device-type</code> - The root device type
  /// (<code>ebs</code> | <code>instance-store</code>).
  /// </li>
  /// <li>
  /// <code>supported-usage-class</code> - The usage class
  /// (<code>on-demand</code> | <code>spot</code>).
  /// </li>
  /// <li>
  /// <code>supported-virtualization-type</code> - The virtualization type
  /// (<code>hvm</code> | <code>paravirtual</code>).
  /// </li>
  /// <li>
  /// <code>vcpu-info.default-cores</code> - The default number of cores for the
  /// instance type.
  /// </li>
  /// <li>
  /// <code>vcpu-info.default-threads-per-core</code> - The default number of
  /// threads per core for the instance type.
  /// </li>
  /// <li>
  /// <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the
  /// instance type.
  /// </li>
  /// <li>
  /// <code>vcpu-info.valid-cores</code> - The number of cores that can be
  /// configured for the instance type.
  /// </li>
  /// <li>
  /// <code>vcpu-info.valid-threads-per-core</code> - The number of threads per
  /// core that can be configured for the instance type. For example, "1" or
  /// "1,2".
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceTypes] :
  /// The instance types.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstanceTypesResult> describeInstanceTypes({
    bool? dryRun,
    List<Filter>? filters,
    List<InstanceType>? instanceTypes,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified instances or all instances.
  ///
  /// If you specify instance IDs, the output includes information for only the
  /// specified instances. If you specify filters, the output includes
  /// information for only those instances that meet the filter criteria. If you
  /// do not specify instance IDs or filters, the output includes information
  /// for all instances, which can affect performance. We recommend that you use
  /// pagination to ensure that the operation returns quickly and successfully.
  ///
  /// If you specify an instance ID that is not valid, an error is returned. If
  /// you specify an instance that you do not own, it is not included in the
  /// output.
  ///
  /// Recently terminated instances might appear in the returned results. This
  /// interval is usually less than one hour.
  ///
  /// If you describe instances in the rare case where an Availability Zone is
  /// experiencing a service disruption and you specify instance IDs that are in
  /// the affected zone, or do not specify any instance IDs at all, the call
  /// fails. If you describe instances and specify only instance IDs that are in
  /// an unaffected zone, the call works normally.
  /// <important>
  /// We strongly recommend using only paginated requests. Unpaginated requests
  /// are susceptible to throttling and timeouts.
  /// </important> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>affinity</code> - The affinity setting for an instance running on a
  /// Dedicated Host (<code>default</code> | <code>host</code>).
  /// </li>
  /// <li>
  /// <code>architecture</code> - The instance architecture (<code>i386</code> |
  /// <code>x86_64</code> | <code>arm64</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the instance.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.attach-time</code> - The attach time for an EBS
  /// volume mapped to the instance, for example,
  /// <code>2022-09-15T17:15:20.000Z</code>.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.delete-on-termination</code> - A Boolean that
  /// indicates whether the EBS volume is deleted on instance termination.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.device-name</code> - The device name specified
  /// in the block device mapping (for example, <code>/dev/sdh</code> or
  /// <code>xvdh</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.status</code> - The status for the EBS volume
  /// (<code>attaching</code> | <code>attached</code> | <code>detaching</code> |
  /// <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.volume-id</code> - The volume ID of the EBS
  /// volume.
  /// </li>
  /// <li>
  /// <code>boot-mode</code> - The boot mode that was specified by the AMI
  /// (<code>legacy-bios</code> | <code>uefi</code> |
  /// <code>uefi-preferred</code>).
  /// </li>
  /// <li>
  /// <code>capacity-reservation-id</code> - The ID of the Capacity Reservation
  /// into which the instance was launched.
  /// </li>
  /// <li>
  /// <code>capacity-reservation-specification.capacity-reservation-preference</code>
  /// - The instance's Capacity Reservation preference (<code>open</code> |
  /// <code>none</code>).
  /// </li>
  /// <li>
  /// <code>capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id</code>
  /// - The ID of the targeted Capacity Reservation.
  /// </li>
  /// <li>
  /// <code>capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn</code>
  /// - The ARN of the targeted Capacity Reservation group.
  /// </li>
  /// <li>
  /// <code>client-token</code> - The idempotency token you provided when you
  /// launched the instance.
  /// </li>
  /// <li>
  /// <code>current-instance-boot-mode</code> - The boot mode that is used to
  /// launch the instance at launch or start (<code>legacy-bios</code> |
  /// <code>uefi</code>).
  /// </li>
  /// <li>
  /// <code>dns-name</code> - The public DNS name of the instance.
  /// </li>
  /// <li>
  /// <code>ebs-optimized</code> - A Boolean that indicates whether the instance
  /// is optimized for Amazon EBS I/O.
  /// </li>
  /// <li>
  /// <code>ena-support</code> - A Boolean that indicates whether the instance
  /// is enabled for enhanced networking with ENA.
  /// </li>
  /// <li>
  /// <code>enclave-options.enabled</code> - A Boolean that indicates whether
  /// the instance is enabled for Amazon Web Services Nitro Enclaves.
  /// </li>
  /// <li>
  /// <code>hibernation-options.configured</code> - A Boolean that indicates
  /// whether the instance is enabled for hibernation. A value of
  /// <code>true</code> means that the instance is enabled for hibernation.
  /// </li>
  /// <li>
  /// <code>host-id</code> - The ID of the Dedicated Host on which the instance
  /// is running, if applicable.
  /// </li>
  /// <li>
  /// <code>hypervisor</code> - The hypervisor type of the instance
  /// (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used
  /// for both Xen and Nitro hypervisors.
  /// </li>
  /// <li>
  /// <code>iam-instance-profile.arn</code> - The instance profile associated
  /// with the instance. Specified as an ARN.
  /// </li>
  /// <li>
  /// <code>iam-instance-profile.id</code> - The instance profile associated
  /// with the instance. Specified as an ID.
  /// </li>
  /// <li>
  /// <code>iam-instance-profile.name</code> - The instance profile associated
  /// with the instance. Specified as an name.
  /// </li>
  /// <li>
  /// <code>image-id</code> - The ID of the image used to launch the instance.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>instance-lifecycle</code> - Indicates whether this is a Spot
  /// Instance, a Scheduled Instance, or a Capacity Block (<code>spot</code> |
  /// <code>scheduled</code> | <code>capacity-block</code>).
  /// </li>
  /// <li>
  /// <code>instance-state-code</code> - The state of the instance, as a 16-bit
  /// unsigned integer. The high byte is used for internal purposes and should
  /// be ignored. The low byte is set based on the state represented. The valid
  /// values are: 0 (pending), 16 (running), 32 (shutting-down), 48
  /// (terminated), 64 (stopping), and 80 (stopped).
  /// </li>
  /// <li>
  /// <code>instance-state-name</code> - The state of the instance
  /// (<code>pending</code> | <code>running</code> | <code>shutting-down</code>
  /// | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The type of instance (for example,
  /// <code>t2.micro</code>).
  /// </li>
  /// <li>
  /// <code>instance.group-id</code> - The ID of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>instance.group-name</code> - The name of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>ip-address</code> - The public IPv4 address of the instance.
  /// </li>
  /// <li>
  /// <code>ipv6-address</code> - The IPv6 address of the instance.
  /// </li>
  /// <li>
  /// <code>kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>key-name</code> - The name of the key pair used when the instance
  /// was launched.
  /// </li>
  /// <li>
  /// <code>launch-index</code> - When launching multiple instances, this is the
  /// index for the instance in the launch group (for example, 0, 1, 2, and so
  /// on).
  /// </li>
  /// <li>
  /// <code>launch-time</code> - The time when the instance was launched, in the
  /// ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for
  /// example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard
  /// (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an
  /// entire day.
  /// </li>
  /// <li>
  /// <code>maintenance-options.auto-recovery</code> - The current automatic
  /// recovery behavior of the instance (<code>disabled</code> |
  /// <code>default</code>).
  /// </li>
  /// <li>
  /// <code>metadata-options.http-endpoint</code> - The status of access to the
  /// HTTP metadata endpoint on your instance (<code>enabled</code> |
  /// <code>disabled</code>)
  /// </li>
  /// <li>
  /// <code>metadata-options.http-protocol-ipv4</code> - Indicates whether the
  /// IPv4 endpoint is enabled (<code>disabled</code> | <code>enabled</code>).
  /// </li>
  /// <li>
  /// <code>metadata-options.http-protocol-ipv6</code> - Indicates whether the
  /// IPv6 endpoint is enabled (<code>disabled</code> | <code>enabled</code>).
  /// </li>
  /// <li>
  /// <code>metadata-options.http-put-response-hop-limit</code> - The HTTP
  /// metadata request put response hop limit (integer, possible values
  /// <code>1</code> to <code>64</code>)
  /// </li>
  /// <li>
  /// <code>metadata-options.http-tokens</code> - The metadata request
  /// authorization state (<code>optional</code> | <code>required</code>)
  /// </li>
  /// <li>
  /// <code>metadata-options.instance-metadata-tags</code> - The status of
  /// access to instance tags from the instance metadata (<code>enabled</code> |
  /// <code>disabled</code>)
  /// </li>
  /// <li>
  /// <code>metadata-options.state</code> - The state of the metadata option
  /// changes (<code>pending</code> | <code>applied</code>).
  /// </li>
  /// <li>
  /// <code>monitoring-state</code> - Indicates whether detailed monitoring is
  /// enabled (<code>disabled</code> | <code>enabled</code>).
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.allocation-id</code> - The
  /// allocation ID.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.association-id</code> - The
  /// association ID.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.carrier-ip</code> - The
  /// carrier IP address.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.customer-owned-ip</code> -
  /// The customer-owned IP address.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.ip-owner-id</code> - The
  /// owner ID of the private IPv4 address associated with the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.public-dns-name</code> - The
  /// public DNS name.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.public-ip</code> - The ID of
  /// the association of an Elastic IP address (IPv4) with a network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.primary</code> - Specifies whether the
  /// IPv4 address of the network interface is the primary private IPv4 address.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.private-dns-name</code> - The private
  /// DNS name.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.private-ip-address</code> - The private
  /// IPv4 address associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.allocation-id</code> - The allocation
  /// ID returned when you allocated the Elastic IP address (IPv4) for your
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.association-id</code> - The
  /// association ID returned when the network interface was associated with an
  /// IPv4 address.
  /// </li>
  /// <li>
  /// <code>network-interface.association.carrier-ip</code> - The customer-owned
  /// IP address.
  /// </li>
  /// <li>
  /// <code>network-interface.association.customer-owned-ip</code> - The
  /// customer-owned IP address.
  /// </li>
  /// <li>
  /// <code>network-interface.association.ip-owner-id</code> - The owner of the
  /// Elastic IP address (IPv4) associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.public-dns-name</code> - The public
  /// DNS name.
  /// </li>
  /// <li>
  /// <code>network-interface.association.public-ip</code> - The address of the
  /// Elastic IP address (IPv4) bound to the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.attach-time</code> - The time that the
  /// network interface was attached to an instance.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.attachment-id</code> - The ID of the
  /// interface attachment.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.delete-on-termination</code> -
  /// Specifies whether the attachment is deleted when an instance is
  /// terminated.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.device-index</code> - The device index
  /// to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.instance-id</code> - The ID of the
  /// instance to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.instance-owner-id</code> - The owner ID
  /// of the instance to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.network-card-index</code> - The index
  /// of the network card.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.status</code> - The status of the
  /// attachment (<code>attaching</code> | <code>attached</code> |
  /// <code>detaching</code> | <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>network-interface.availability-zone</code> - The Availability Zone
  /// for the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.deny-all-igw-traffic</code> - A Boolean that
  /// indicates whether a network interface with an IPv6 address is unreachable
  /// from the public internet.
  /// </li>
  /// <li>
  /// <code>network-interface.description</code> - The description of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.group-id</code> - The ID of a security group
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.group-name</code> - The name of a security group
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv4-prefixes.ipv4-prefix</code> - The IPv4
  /// prefixes that are assigned to the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv6-address</code> - The IPv6 address associated
  /// with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6
  /// address associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv6-addresses.is-primary-ipv6</code> - A Boolean
  /// that indicates whether this is the primary IPv6 address.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv6-native</code> - A Boolean that indicates
  /// whether this is an IPv6 only network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv6-prefixes.ipv6-prefix</code> - The IPv6 prefix
  /// assigned to the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.mac-address</code> - The MAC address of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.network-interface-id</code> - The ID of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.outpost-arn</code> - The ARN of the Outpost.
  /// </li>
  /// <li>
  /// <code>network-interface.owner-id</code> - The ID of the owner of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.private-dns-name</code> - The private DNS name of
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.private-ip-address</code> - The private IPv4
  /// address.
  /// </li>
  /// <li>
  /// <code>network-interface.public-dns-name</code> - The public DNS name.
  /// </li>
  /// <li>
  /// <code>network-interface.requester-id</code> - The requester ID for the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.requester-managed</code> - Indicates whether the
  /// network interface is being managed by Amazon Web Services.
  /// </li>
  /// <li>
  /// <code>network-interface.status</code> - The status of the network
  /// interface (<code>available</code>) | <code>in-use</code>).
  /// </li>
  /// <li>
  /// <code>network-interface.source-dest-check</code> - Whether the network
  /// interface performs source/destination checking. A value of
  /// <code>true</code> means that checking is enabled, and <code>false</code>
  /// means that checking is disabled. The value must be <code>false</code> for
  /// the network interface to perform network address translation (NAT) in your
  /// VPC.
  /// </li>
  /// <li>
  /// <code>network-interface.subnet-id</code> - The ID of the subnet for the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.tag-key</code> - The key of a tag assigned to the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.tag-value</code> - The value of a tag assigned to
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.vpc-id</code> - The ID of the VPC for the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the instance
  /// owner.
  /// </li>
  /// <li>
  /// <code>placement-group-name</code> - The name of the placement group for
  /// the instance.
  /// </li>
  /// <li>
  /// <code>placement-partition-number</code> - The partition in which the
  /// instance is located.
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform. To list only Windows instances, use
  /// <code>windows</code>.
  /// </li>
  /// <li>
  /// <code>platform-details</code> - The platform (<code>Linux/UNIX</code> |
  /// <code>Red Hat BYOL Linux</code> | <code> Red Hat Enterprise Linux</code> |
  /// <code>Red Hat Enterprise Linux with HA</code> | <code>Red Hat Enterprise
  /// Linux with SQL Server Standard and HA</code> | <code>Red Hat Enterprise
  /// Linux with SQL Server Enterprise and HA</code> | <code>Red Hat Enterprise
  /// Linux with SQL Server Standard</code> | <code>Red Hat Enterprise Linux
  /// with SQL Server Web</code> | <code>Red Hat Enterprise Linux with SQL
  /// Server Enterprise</code> | <code>SQL Server Enterprise</code> | <code>SQL
  /// Server Standard</code> | <code>SQL Server Web</code> | <code>SUSE
  /// Linux</code> | <code>Ubuntu Pro</code> | <code>Windows</code> |
  /// <code>Windows BYOL</code> | <code>Windows with SQL Server
  /// Enterprise</code> | <code>Windows with SQL Server Standard</code> |
  /// <code>Windows with SQL Server Web</code>).
  /// </li>
  /// <li>
  /// <code>private-dns-name</code> - The private IPv4 DNS name of the instance.
  /// </li>
  /// <li>
  /// <code>private-dns-name-options.enable-resource-name-dns-a-record</code> -
  /// A Boolean that indicates whether to respond to DNS queries for instance
  /// hostnames with DNS A records.
  /// </li>
  /// <li>
  /// <code>private-dns-name-options.enable-resource-name-dns-aaaa-record</code>
  /// - A Boolean that indicates whether to respond to DNS queries for instance
  /// hostnames with DNS AAAA records.
  /// </li>
  /// <li>
  /// <code>private-dns-name-options.hostname-type</code> - The type of hostname
  /// (<code>ip-name</code> | <code>resource-name</code>).
  /// </li>
  /// <li>
  /// <code>private-ip-address</code> - The private IPv4 address of the
  /// instance.
  /// </li>
  /// <li>
  /// <code>product-code</code> - The product code associated with the AMI used
  /// to launch the instance.
  /// </li>
  /// <li>
  /// <code>product-code.type</code> - The type of product code
  /// (<code>devpay</code> | <code>marketplace</code>).
  /// </li>
  /// <li>
  /// <code>ramdisk-id</code> - The RAM disk ID.
  /// </li>
  /// <li>
  /// <code>reason</code> - The reason for the current state of the instance
  /// (for example, shows "User Initiated [date]" when you stop or terminate the
  /// instance). Similar to the state-reason-code filter.
  /// </li>
  /// <li>
  /// <code>requester-id</code> - The ID of the entity that launched the
  /// instance on your behalf (for example, Amazon Web Services Management
  /// Console, Auto Scaling, and so on).
  /// </li>
  /// <li>
  /// <code>reservation-id</code> - The ID of the instance's reservation. A
  /// reservation ID is created any time you launch an instance. A reservation
  /// ID has a one-to-one relationship with an instance launch request, but can
  /// be associated with more than one instance if you launch multiple instances
  /// using the same launch request. For example, if you launch one instance,
  /// you get one reservation ID. If you launch ten instances using the same
  /// launch request, you also get one reservation ID.
  /// </li>
  /// <li>
  /// <code>root-device-name</code> - The device name of the root device volume
  /// (for example, <code>/dev/sda1</code>).
  /// </li>
  /// <li>
  /// <code>root-device-type</code> - The type of the root device volume
  /// (<code>ebs</code> | <code>instance-store</code>).
  /// </li>
  /// <li>
  /// <code>source-dest-check</code> - Indicates whether the instance performs
  /// source/destination checking. A value of <code>true</code> means that
  /// checking is enabled, and <code>false</code> means that checking is
  /// disabled. The value must be <code>false</code> for the instance to perform
  /// network address translation (NAT) in your VPC.
  /// </li>
  /// <li>
  /// <code>spot-instance-request-id</code> - The ID of the Spot Instance
  /// request.
  /// </li>
  /// <li>
  /// <code>state-reason-code</code> - The reason code for the state change.
  /// </li>
  /// <li>
  /// <code>state-reason-message</code> - A message that describes the state
  /// change.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet for the instance.
  /// </li>
  /// <li>
  /// <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources that have a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code>
  /// | <code>default</code> | <code>host</code>).
  /// </li>
  /// <li>
  /// <code>tpm-support</code> - Indicates if the instance is configured for
  /// NitroTPM support (<code>v2.0</code>).
  /// </li>
  /// <li>
  /// <code>usage-operation</code> - The usage operation value for the instance
  /// (<code>RunInstances</code> | <code>RunInstances:00g0</code> |
  /// <code>RunInstances:0010</code> | <code>RunInstances:1010</code> |
  /// <code>RunInstances:1014</code> | <code>RunInstances:1110</code> |
  /// <code>RunInstances:0014</code> | <code>RunInstances:0210</code> |
  /// <code>RunInstances:0110</code> | <code>RunInstances:0100</code> |
  /// <code>RunInstances:0004</code> | <code>RunInstances:0200</code> |
  /// <code>RunInstances:000g</code> | <code>RunInstances:0g00</code> |
  /// <code>RunInstances:0002</code> | <code>RunInstances:0800</code> |
  /// <code>RunInstances:0102</code> | <code>RunInstances:0006</code> |
  /// <code>RunInstances:0202</code>).
  /// </li>
  /// <li>
  /// <code>usage-operation-update-time</code> - The time that the usage
  /// operation was last updated, for example,
  /// <code>2022-09-15T17:15:20.000Z</code>.
  /// </li>
  /// <li>
  /// <code>virtualization-type</code> - The virtualization type of the instance
  /// (<code>paravirtual</code> | <code>hvm</code>).
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC that the instance is running in.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// You cannot specify this parameter and the instance IDs parameter in the
  /// same request.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInstancesResult> describeInstances({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? instanceIds,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your internet gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.state</code> - The current state of the attachment
  /// between the gateway and the VPC (<code>available</code>). Present only if
  /// a VPC is attached.
  /// </li>
  /// <li>
  /// <code>attachment.vpc-id</code> - The ID of an attached VPC.
  /// </li>
  /// <li>
  /// <code>internet-gateway-id</code> - The ID of the Internet gateway.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the internet gateway.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [internetGatewayIds] :
  /// The IDs of the internet gateways.
  ///
  /// Default: Describes all your internet gateways.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeInternetGatewaysResult> describeInternetGateways({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? internetGatewayIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your Autonomous System Numbers (ASNs), their provisioning
  /// statuses, and the BYOIP CIDRs with which they are associated. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial:
  /// Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeIpamByoasnResult> describeIpamByoasn({
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get information about your IPAM pools.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters for the request. For more information about filtering,
  /// see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering
  /// CLI output</a>.
  ///
  /// Parameter [ipamPoolIds] :
  /// The IDs of the IPAM pools you would like information on.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the request.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeIpamPoolsResult> describeIpamPools({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? ipamPoolIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes IPAM resource discoveries. A resource discovery is an IPAM
  /// component that enables IPAM to manage and monitor resources that belong to
  /// the owning account.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The resource discovery filters.
  ///
  /// Parameter [ipamResourceDiscoveryIds] :
  /// The IPAM resource discovery IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of resource discoveries to return in one page of
  /// results.
  ///
  /// Parameter [nextToken] :
  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  Future<DescribeIpamResourceDiscoveriesResult>
      describeIpamResourceDiscoveries({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? ipamResourceDiscoveryIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes resource discovery association with an Amazon VPC IPAM. An
  /// associated resource discovery is a resource discovery that has been
  /// associated with an IPAM..
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The resource discovery association filters.
  ///
  /// Parameter [ipamResourceDiscoveryAssociationIds] :
  /// The resource discovery association IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of resource discovery associations to return in one
  /// page of results.
  ///
  /// Parameter [nextToken] :
  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  Future<DescribeIpamResourceDiscoveryAssociationsResult>
      describeIpamResourceDiscoveryAssociations({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? ipamResourceDiscoveryAssociationIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get information about your IPAM scopes.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters for the request. For more information about filtering,
  /// see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering
  /// CLI output</a>.
  ///
  /// Parameter [ipamScopeIds] :
  /// The IDs of the scopes you want information on.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the request.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeIpamScopesResult> describeIpamScopes({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? ipamScopeIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get information about your IPAM pools.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters for the request. For more information about filtering,
  /// see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering
  /// CLI output</a>.
  ///
  /// Parameter [ipamIds] :
  /// The IDs of the IPAMs you want information on.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the request.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeIpamsResult> describeIpams({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? ipamIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your IPv6 address pools.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [poolIds] :
  /// The IDs of the IPv6 address pools.
  Future<DescribeIpv6PoolsResult> describeIpv6Pools({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? poolIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified key pairs or all of your key pairs.
  ///
  /// For more information about key pairs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon
  /// EC2 key pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>key-pair-id</code> - The ID of the key pair.
  /// </li>
  /// <li>
  /// <code>fingerprint</code> - The fingerprint of the key pair.
  /// </li>
  /// <li>
  /// <code>key-name</code> - The name of the key pair.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [includePublicKey] :
  /// If <code>true</code>, the public key material is included in the response.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [keyNames] :
  /// The key pair names.
  ///
  /// Default: Describes all of your key pairs.
  ///
  /// Parameter [keyPairIds] :
  /// The IDs of the key pairs.
  Future<DescribeKeyPairsResult> describeKeyPairs({
    bool? dryRun,
    List<Filter>? filters,
    bool? includePublicKey,
    List<String>? keyNames,
    List<String>? keyPairIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more versions of a specified launch template. You can
  /// describe all versions, individual versions, or a range of versions. You
  /// can also describe all the latest versions or all the default versions of
  /// all the launch templates in your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>create-time</code> - The time the launch template version was
  /// created.
  /// </li>
  /// <li>
  /// <code>ebs-optimized</code> - A boolean that indicates whether the instance
  /// is optimized for Amazon EBS I/O.
  /// </li>
  /// <li>
  /// <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint
  /// on your instances is enabled (<code>enabled</code> |
  /// <code>disabled</code>).
  /// </li>
  /// <li>
  /// <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for
  /// the instance metadata service is enabled (<code>enabled</code> |
  /// <code>disabled</code>).
  /// </li>
  /// <li>
  /// <code>host-resource-group-arn</code> - The ARN of the host resource group
  /// in which to launch the instances.
  /// </li>
  /// <li>
  /// <code>http-tokens</code> - The state of token usage for your instance
  /// metadata requests (<code>optional</code> | <code>required</code>).
  /// </li>
  /// <li>
  /// <code>iam-instance-profile</code> - The ARN of the IAM instance profile.
  /// </li>
  /// <li>
  /// <code>image-id</code> - The ID of the AMI.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type.
  /// </li>
  /// <li>
  /// <code>is-default-version</code> - A boolean that indicates whether the
  /// launch template version is the default version.
  /// </li>
  /// <li>
  /// <code>kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>license-configuration-arn</code> - The ARN of the license
  /// configuration.
  /// </li>
  /// <li>
  /// <code>network-card-index</code> - The index of the network card.
  /// </li>
  /// <li>
  /// <code>ram-disk-id</code> - The RAM disk ID.
  /// </li>
  /// </ul>
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template.
  ///
  /// To describe one or more versions of a specified launch template, you must
  /// specify either the launch template ID or the launch template name, but not
  /// both.
  ///
  /// To describe all the latest or default launch template versions in your
  /// account, you must omit this parameter.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template.
  ///
  /// To describe one or more versions of a specified launch template, you must
  /// specify either the launch template name or the launch template ID, but not
  /// both.
  ///
  /// To describe all the latest or default launch template versions in your
  /// account, you must omit this parameter.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 1 and 200.
  ///
  /// Parameter [maxVersion] :
  /// The version number up to which to describe launch template versions.
  ///
  /// Parameter [minVersion] :
  /// The version number after which to describe launch template versions.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  ///
  /// Parameter [resolveAlias] :
  /// If <code>true</code>, and if a Systems Manager parameter is specified for
  /// <code>ImageId</code>, the AMI ID is displayed in the response for
  /// <code>imageId</code>.
  ///
  /// If <code>false</code>, and if a Systems Manager parameter is specified for
  /// <code>ImageId</code>, the parameter is displayed in the response for
  /// <code>imageId</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use
  /// a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [versions] :
  /// One or more versions of the launch template. Valid values depend on
  /// whether you are describing a specified launch template (by ID or name) or
  /// all launch templates in your account.
  ///
  /// To describe one or more versions of a specified launch template, valid
  /// values are <code>$Latest</code>, <code>$Default</code>, and numbers.
  ///
  /// To describe all launch templates in your account that are defined as the
  /// latest version, the valid value is <code>$Latest</code>. To describe all
  /// launch templates in your account that are defined as the default version,
  /// the valid value is <code>$Default</code>. You can specify
  /// <code>$Latest</code> and <code>$Default</code> in the same request. You
  /// cannot specify numbers.
  Future<DescribeLaunchTemplateVersionsResult> describeLaunchTemplateVersions({
    bool? dryRun,
    List<Filter>? filters,
    String? launchTemplateId,
    String? launchTemplateName,
    int? maxResults,
    String? maxVersion,
    String? minVersion,
    String? nextToken,
    bool? resolveAlias,
    List<String>? versions,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more launch templates.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>create-time</code> - The time the launch template was created.
  /// </li>
  /// <li>
  /// <code>launch-template-name</code> - The name of the launch template.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [launchTemplateIds] :
  /// One or more launch template IDs.
  ///
  /// Parameter [launchTemplateNames] :
  /// One or more launch template names.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 1 and 200.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeLaunchTemplatesResult> describeLaunchTemplates({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? launchTemplateIds,
    List<String>? launchTemplateNames,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the associations between virtual interface groups and local
  /// gateway route tables.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>local-gateway-id</code> - The ID of a local gateway.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-arn</code> - The Amazon Resource Name
  /// (ARN) of the local gateway route table for the virtual interface group.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-id</code> - The ID of the local gateway
  /// route table.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-virtual-interface-group-association-id</code>
  /// - The ID of the association.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-virtual-interface-group-id</code> - The ID
  /// of the virtual interface group.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the local gateway virtual interface group association.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the association.
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayRouteTableVirtualInterfaceGroupAssociationIds] :
  /// The IDs of the associations.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult>
      describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified associations between VPCs and local gateway route
  /// tables.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>local-gateway-id</code> - The ID of a local gateway.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-arn</code> - The Amazon Resource Name
  /// (ARN) of the local gateway route table for the association.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-id</code> - The ID of the local gateway
  /// route table.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-vpc-association-id</code> - The ID of the
  /// association.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the local gateway route table for the association.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the association.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC.
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayRouteTableVpcAssociationIds] :
  /// The IDs of the associations.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayRouteTableVpcAssociationsResult>
      describeLocalGatewayRouteTableVpcAssociations({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? localGatewayRouteTableVpcAssociationIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more local gateway route tables. By default, all local
  /// gateway route tables are described. Alternatively, you can filter the
  /// results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>local-gateway-id</code> - The ID of a local gateway.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-arn</code> - The Amazon Resource Name
  /// (ARN) of the local gateway route table.
  /// </li>
  /// <li>
  /// <code>local-gateway-route-table-id</code> - The ID of a local gateway
  /// route table.
  /// </li>
  /// <li>
  /// <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the local gateway route table.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the local gateway route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayRouteTableIds] :
  /// The IDs of the local gateway route tables.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayRouteTablesResult>
      describeLocalGatewayRouteTables({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? localGatewayRouteTableIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified local gateway virtual interface groups.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>local-gateway-id</code> - The ID of a local gateway.
  /// </li>
  /// <li>
  /// <code>local-gateway-virtual-interface-group-id</code> - The ID of the
  /// virtual interface group.
  /// </li>
  /// <li>
  /// <code>local-gateway-virtual-interface-id</code> - The ID of the virtual
  /// interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the local gateway virtual interface group.
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayVirtualInterfaceGroupIds] :
  /// The IDs of the virtual interface groups.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayVirtualInterfaceGroupsResult>
      describeLocalGatewayVirtualInterfaceGroups({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? localGatewayVirtualInterfaceGroupIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified local gateway virtual interfaces.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>local-address</code> - The local address.
  /// </li>
  /// <li>
  /// <code>local-bgp-asn</code> - The Border Gateway Protocol (BGP) Autonomous
  /// System Number (ASN) of the local gateway.
  /// </li>
  /// <li>
  /// <code>local-gateway-id</code> - The ID of the local gateway.
  /// </li>
  /// <li>
  /// <code>local-gateway-virtual-interface-id</code> - The ID of the virtual
  /// interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the local gateway virtual interface.
  /// </li>
  /// <li>
  /// <code>peer-address</code> - The peer address.
  /// </li>
  /// <li>
  /// <code>peer-bgp-asn</code> - The peer BGP ASN.
  /// </li>
  /// <li>
  /// <code>vlan</code> - The ID of the VLAN.
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayVirtualInterfaceIds] :
  /// The IDs of the virtual interfaces.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayVirtualInterfacesResult>
      describeLocalGatewayVirtualInterfaces({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? localGatewayVirtualInterfaceIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more local gateways. By default, all local gateways are
  /// described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>local-gateway-id</code> - The ID of a local gateway.
  /// </li>
  /// <li>
  /// <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the local gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the association.
  /// </li>
  /// </ul>
  ///
  /// Parameter [localGatewayIds] :
  /// The IDs of the local gateways.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewaysResult> describeLocalGateways({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? localGatewayIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the lock status for a snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>lock-state</code> - The state of the snapshot lock
  /// (<code>compliance-cooloff</code> | <code>governance</code> |
  /// <code>compliance</code> | <code>expired</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [snapshotIds] :
  /// The IDs of the snapshots for which to view the lock status.
  Future<DescribeLockedSnapshotsResult> describeLockedSnapshots({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? snapshotIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EC2 Mac Dedicated Host or all of your EC2 Mac
  /// Dedicated Hosts.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the EC2 Mac
  /// Dedicated Host.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type size that the EC2 Mac
  /// Dedicated Host is configured to support.
  /// </li>
  /// </ul>
  ///
  /// Parameter [hostIds] :
  /// The IDs of the EC2 Mac Dedicated Hosts.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeMacHostsResult> describeMacHosts({
    List<Filter>? filters,
    List<String>? hostIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your managed prefix lists and any Amazon Web Services-managed
  /// prefix lists.
  ///
  /// To view the entries for your prefix list, use
  /// <a>GetManagedPrefixListEntries</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>owner-id</code> - The ID of the prefix list owner.
  /// </li>
  /// <li>
  /// <code>prefix-list-id</code> - The ID of the prefix list.
  /// </li>
  /// <li>
  /// <code>prefix-list-name</code> - The name of the prefix list.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [prefixListIds] :
  /// One or more prefix list IDs.
  Future<DescribeManagedPrefixListsResult> describeManagedPrefixLists({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? prefixListIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Describes your Elastic IP addresses that are being moved from or being
  /// restored to the EC2-Classic platform. This request does not return
  /// information about any other Elastic IP addresses in your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>moving-status</code> - The status of the Elastic IP address
  /// (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1000; if <code>MaxResults</code> is given a value
  /// outside of this range, an error is returned.
  ///
  /// Default: If no value is provided, the default is 1000.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [publicIps] :
  /// One or more Elastic IP addresses.
  Future<DescribeMovingAddressesResult> describeMovingAddresses({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? publicIps,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your NAT gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>nat-gateway-id</code> - The ID of the NAT gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the NAT gateway (<code>pending</code> |
  /// <code>failed</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet in which the NAT gateway
  /// resides.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [natGatewayIds] :
  /// The IDs of the NAT gateways.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeNatGatewaysResult> describeNatGateways({
    bool? dryRun,
    List<Filter>? filter,
    int? maxResults,
    List<String>? natGatewayIds,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your network ACLs.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network
  /// ACLs</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>association.association-id</code> - The ID of an association ID for
  /// the ACL.
  /// </li>
  /// <li>
  /// <code>association.network-acl-id</code> - The ID of the network ACL
  /// involved in the association.
  /// </li>
  /// <li>
  /// <code>association.subnet-id</code> - The ID of the subnet involved in the
  /// association.
  /// </li>
  /// <li>
  /// <code>default</code> - Indicates whether the ACL is the default network
  /// ACL for the VPC.
  /// </li>
  /// <li>
  /// <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.
  /// </li>
  /// <li>
  /// <code>entry.icmp.code</code> - The ICMP code specified in the entry, if
  /// any.
  /// </li>
  /// <li>
  /// <code>entry.icmp.type</code> - The ICMP type specified in the entry, if
  /// any.
  /// </li>
  /// <li>
  /// <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.
  /// </li>
  /// <li>
  /// <code>entry.port-range.from</code> - The start of the port range specified
  /// in the entry.
  /// </li>
  /// <li>
  /// <code>entry.port-range.to</code> - The end of the port range specified in
  /// the entry.
  /// </li>
  /// <li>
  /// <code>entry.protocol</code> - The protocol specified in the entry
  /// (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol
  /// number).
  /// </li>
  /// <li>
  /// <code>entry.rule-action</code> - Allows or denies the matching traffic
  /// (<code>allow</code> | <code>deny</code>).
  /// </li>
  /// <li>
  /// <code>entry.egress</code> - A Boolean that indicates the type of rule.
  /// Specify <code>true</code> for egress rules, or <code>false</code> for
  /// ingress rules.
  /// </li>
  /// <li>
  /// <code>entry.rule-number</code> - The number of an entry (in other words,
  /// rule) in the set of ACL entries.
  /// </li>
  /// <li>
  /// <code>network-acl-id</code> - The ID of the network ACL.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the network ACL.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the network ACL.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [networkAclIds] :
  /// The IDs of the network ACLs.
  ///
  /// Default: Describes all your network ACLs.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeNetworkAclsResult> describeNetworkAcls({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkAclIds,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Network Access Scope analyses.
  ///
  /// Parameter [analysisStartTimeBegin] :
  /// Filters the results based on the start time. The analysis must have
  /// started on or after this time.
  ///
  /// Parameter [analysisStartTimeEnd] :
  /// Filters the results based on the start time. The analysis must have
  /// started on or before this time.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// There are no supported filters.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [networkInsightsAccessScopeAnalysisIds] :
  /// The IDs of the Network Access Scope analyses.
  ///
  /// Parameter [networkInsightsAccessScopeId] :
  /// The ID of the Network Access Scope.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeNetworkInsightsAccessScopeAnalysesResult>
      describeNetworkInsightsAccessScopeAnalyses({
    DateTime? analysisStartTimeBegin,
    DateTime? analysisStartTimeEnd,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkInsightsAccessScopeAnalysisIds,
    String? networkInsightsAccessScopeId,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Network Access Scopes.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// There are no supported filters.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [networkInsightsAccessScopeIds] :
  /// The IDs of the Network Access Scopes.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeNetworkInsightsAccessScopesResult>
      describeNetworkInsightsAccessScopes({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkInsightsAccessScopeIds,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your network insights analyses.
  ///
  /// Parameter [analysisEndTime] :
  /// The time when the network insights analyses ended.
  ///
  /// Parameter [analysisStartTime] :
  /// The time when the network insights analyses started.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// path-found - A Boolean value that indicates whether a feasible path is
  /// found.
  /// </li>
  /// <li>
  /// status - The status of the analysis (running | succeeded | failed).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [networkInsightsAnalysisIds] :
  /// The ID of the network insights analyses. You must specify either analysis
  /// IDs or a path ID.
  ///
  /// Parameter [networkInsightsPathId] :
  /// The ID of the path. You must specify either a path ID or analysis IDs.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeNetworkInsightsAnalysesResult>
      describeNetworkInsightsAnalyses({
    DateTime? analysisEndTime,
    DateTime? analysisStartTime,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkInsightsAnalysisIds,
    String? networkInsightsPathId,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your paths.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// destination - The ID of the resource.
  /// </li>
  /// <li>
  /// filter-at-source.source-address - The source IPv4 address at the source.
  /// </li>
  /// <li>
  /// filter-at-source.source-port-range - The source port range at the source.
  /// </li>
  /// <li>
  /// filter-at-source.destination-address - The destination IPv4 address at the
  /// source.
  /// </li>
  /// <li>
  /// filter-at-source.destination-port-range - The destination port range at
  /// the source.
  /// </li>
  /// <li>
  /// filter-at-destination.source-address - The source IPv4 address at the
  /// destination.
  /// </li>
  /// <li>
  /// filter-at-destination.source-port-range - The source port range at the
  /// destination.
  /// </li>
  /// <li>
  /// filter-at-destination.destination-address - The destination IPv4 address
  /// at the destination.
  /// </li>
  /// <li>
  /// filter-at-destination.destination-port-range - The destination port range
  /// at the destination.
  /// </li>
  /// <li>
  /// protocol - The protocol.
  /// </li>
  /// <li>
  /// source - The ID of the resource.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [networkInsightsPathIds] :
  /// The IDs of the paths.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeNetworkInsightsPathsResult> describeNetworkInsightsPaths({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkInsightsPathIds,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes a network interface attribute. You can specify only one
  /// attribute at a time.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [attribute] :
  /// The attribute of the network interface. This parameter is required.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeNetworkInterfaceAttributeResult>
      describeNetworkInterfaceAttribute({
    required String networkInterfaceId,
    NetworkInterfaceAttribute? attribute,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the permissions for your network interfaces.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>network-interface-permission.network-interface-permission-id</code>
  /// - The ID of the permission.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.network-interface-id</code> - The ID of
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.aws-account-id</code> - The Amazon Web
  /// Services account ID.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.aws-service</code> - The Amazon Web
  /// Service.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.permission</code> - The type of
  /// permission (<code>INSTANCE-ATTACH</code> | <code>EIP-ASSOCIATE</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// If this parameter is not specified, up to 50 results are returned by
  /// default. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [networkInterfacePermissionIds] :
  /// The network interface permission IDs.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeNetworkInterfacePermissionsResult>
      describeNetworkInterfacePermissions({
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkInterfacePermissionIds,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your network interfaces.
  ///
  /// If you have a large number of network interfaces, the operation fails
  /// unless you use pagination or one of the following filters:
  /// <code>group-id</code>, <code>mac-address</code>,
  /// <code>private-dns-name</code>, <code>private-ip-address</code>,
  /// <code>private-dns-name</code>, <code>subnet-id</code>, or
  /// <code>vpc-id</code>.
  /// <important>
  /// We strongly recommend using only paginated requests. Unpaginated requests
  /// are susceptible to throttling and timeouts.
  /// </important>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>association.allocation-id</code> - The allocation ID returned when
  /// you allocated the Elastic IP address (IPv4) for your network interface.
  /// </li>
  /// <li>
  /// <code>association.association-id</code> - The association ID returned when
  /// the network interface was associated with an IPv4 address.
  /// </li>
  /// <li>
  /// <code>addresses.association.owner-id</code> - The owner ID of the
  /// addresses associated with the network interface.
  /// </li>
  /// <li>
  /// <code>addresses.association.public-ip</code> - The association ID returned
  /// when the network interface was associated with the Elastic IP address
  /// (IPv4).
  /// </li>
  /// <li>
  /// <code>addresses.primary</code> - Whether the private IPv4 address is the
  /// primary IP address associated with the network interface.
  /// </li>
  /// <li>
  /// <code>addresses.private-ip-address</code> - The private IPv4 addresses
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>association.ip-owner-id</code> - The owner of the Elastic IP address
  /// (IPv4) associated with the network interface.
  /// </li>
  /// <li>
  /// <code>association.public-ip</code> - The address of the Elastic IP address
  /// (IPv4) bound to the network interface.
  /// </li>
  /// <li>
  /// <code>association.public-dns-name</code> - The public DNS name for the
  /// network interface (IPv4).
  /// </li>
  /// <li>
  /// <code>attachment.attach-time</code> - The time that the network interface
  /// was attached to an instance.
  /// </li>
  /// <li>
  /// <code>attachment.attachment-id</code> - The ID of the interface
  /// attachment.
  /// </li>
  /// <li>
  /// <code>attachment.delete-on-termination</code> - Indicates whether the
  /// attachment is deleted when an instance is terminated.
  /// </li>
  /// <li>
  /// <code>attachment.device-index</code> - The device index to which the
  /// network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.instance-id</code> - The ID of the instance to which the
  /// network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.instance-owner-id</code> - The owner ID of the instance
  /// to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.status</code> - The status of the attachment
  /// (<code>attaching</code> | <code>attached</code> | <code>detaching</code> |
  /// <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>description</code> - The description of the network interface.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of a security group associated with the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>interface-type</code> - The type of network interface
  /// (<code>api_gateway_managed</code> |
  /// <code>aws_codestar_connections_managed</code> | <code>branch</code> |
  /// <code>ec2_instance_connect_endpoint</code> | <code>efa</code> |
  /// <code>efs</code> | <code>gateway_load_balancer</code> |
  /// <code>gateway_load_balancer_endpoint</code> |
  /// <code>global_accelerator_managed</code> | <code>interface</code> |
  /// <code>iot_rules_managed</code> | <code>lambda</code> |
  /// <code>load_balancer</code> | <code>nat_gateway</code> |
  /// <code>network_load_balancer</code> | <code>quicksight</code> |
  /// <code>transit_gateway</code> | <code>trunk</code> |
  /// <code>vpc_endpoint</code>).
  /// </li>
  /// <li>
  /// <code>mac-address</code> - The MAC address of the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code> - The ID of the network interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the network
  /// interface owner.
  /// </li>
  /// <li>
  /// <code>private-dns-name</code> - The private DNS name of the network
  /// interface (IPv4).
  /// </li>
  /// <li>
  /// <code>private-ip-address</code> - The private IPv4 address or addresses of
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>requester-id</code> - The alias or Amazon Web Services account ID of
  /// the principal or service that created the network interface.
  /// </li>
  /// <li>
  /// <code>requester-managed</code> - Indicates whether the network interface
  /// is being managed by an Amazon Web Service (for example, Amazon Web
  /// Services Management Console, Auto Scaling, and so on).
  /// </li>
  /// <li>
  /// <code>source-dest-check</code> - Indicates whether the network interface
  /// performs source/destination checking. A value of <code>true</code> means
  /// checking is enabled, and <code>false</code> means checking is disabled.
  /// The value must be <code>false</code> for the network interface to perform
  /// network address translation (NAT) in your VPC.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the network interface. If the network
  /// interface is not attached to an instance, the status is
  /// <code>available</code>; if a network interface is attached to an instance
  /// the status is <code>in-use</code>.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet for the network interface.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the network interface.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// You cannot specify this parameter and the network interface IDs parameter
  /// in the same request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The network interface IDs.
  ///
  /// Default: Describes all your network interfaces.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeNetworkInterfacesResult> describeNetworkInterfaces({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    List<String>? networkInterfaceIds,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified placement groups or all of your placement groups.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
  /// groups</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-name</code> - The name of the placement group.
  /// </li>
  /// <li>
  /// <code>group-arn</code> - The Amazon Resource Name (ARN) of the placement
  /// group.
  /// </li>
  /// <li>
  /// <code>spread-level</code> - The spread level for the placement group
  /// (<code>host</code> | <code>rack</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the placement group
  /// (<code>pending</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>strategy</code> - The strategy of the placement group
  /// (<code>cluster</code> | <code>spread</code> | <code>partition</code>).
  /// </li>
  /// <li>
  /// <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources that have a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [groupIds] :
  /// The IDs of the placement groups.
  ///
  /// Parameter [groupNames] :
  /// The names of the placement groups.
  ///
  /// Default: Describes all your placement groups, or only those otherwise
  /// specified.
  Future<DescribePlacementGroupsResult> describePlacementGroups({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? groupIds,
    List<String>? groupNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes available Amazon Web Services services in a prefix list format,
  /// which includes the prefix list name and prefix list ID of the service and
  /// the IP address range for the service.
  ///
  /// We recommend that you use <a>DescribeManagedPrefixLists</a> instead.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>prefix-list-id</code>: The ID of a prefix list.
  /// </li>
  /// <li>
  /// <code>prefix-list-name</code>: The name of a prefix list.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [prefixListIds] :
  /// One or more prefix list IDs.
  Future<DescribePrefixListsResult> describePrefixLists({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? prefixListIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ID format settings for the root user and all IAM roles and
  /// IAM users that have explicitly specified a longer ID (17-character ID)
  /// preference.
  ///
  /// By default, all IAM roles and IAM users default to the same ID settings as
  /// the root user, unless they explicitly override the settings. This request
  /// is useful for identifying those IAM users and IAM roles that have
  /// overridden the default ID settings.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned NextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  ///
  /// Parameter [resources] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>instance</code> |
  /// <code>internet-gateway</code> | <code>network-acl</code> |
  /// <code>network-acl-association</code> | <code>network-interface</code> |
  /// <code>network-interface-attachment</code> | <code>prefix-list</code> |
  /// <code>reservation</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>snapshot</code> | <code>subnet</code> |
  /// <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>
  Future<DescribePrincipalIdFormatResult> describePrincipalIdFormat({
    bool? dryRun,
    int? maxResults,
    String? nextToken,
    List<String>? resources,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified IPv4 address pools.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [poolIds] :
  /// The IDs of the address pools.
  Future<DescribePublicIpv4PoolsResult> describePublicIpv4Pools({
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? poolIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      10,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Regions that are enabled for your account, or all Regions.
  ///
  /// For a list of the Regions supported by Amazon EC2, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/ec2-service.html">
  /// Amazon Elastic Compute Cloud endpoints and quotas</a>.
  ///
  /// For information about enabling and disabling Regions for your account, see
  /// <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing
  /// Amazon Web Services Regions</a> in the <i>Amazon Web Services General
  /// Reference</i>.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [allRegions] :
  /// Indicates whether to display all Regions, including Regions that are
  /// disabled for your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>endpoint</code> - The endpoint of the Region (for example,
  /// <code>ec2.us-east-1.amazonaws.com</code>).
  /// </li>
  /// <li>
  /// <code>opt-in-status</code> - The opt-in status of the Region
  /// (<code>opt-in-not-required</code> | <code>opted-in</code> |
  /// <code>not-opted-in</code>).
  /// </li>
  /// <li>
  /// <code>region-name</code> - The name of the Region (for example,
  /// <code>us-east-1</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [regionNames] :
  /// The names of the Regions. You can specify any Regions, whether they are
  /// enabled and disabled for your account.
  Future<DescribeRegionsResult> describeRegions({
    bool? allRegions,
    bool? dryRun,
    List<Filter>? filters,
    List<String>? regionNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes a root volume replacement task. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html">Replace
  /// a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Filter to use:
  ///
  /// <ul>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance for which the root
  /// volume replacement task was created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [replaceRootVolumeTaskIds] :
  /// The ID of the root volume replacement task to view.
  Future<DescribeReplaceRootVolumeTasksResult> describeReplaceRootVolumeTasks({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? replaceRootVolumeTaskIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      50,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of the Reserved Instances that you purchased.
  ///
  /// For more information about Reserved Instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
  /// Instances</a> in the <i>Amazon EC2 User Guide</i>.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone where the Reserved
  /// Instance can be used.
  /// </li>
  /// <li>
  /// <code>duration</code> - The duration of the Reserved Instance (one year or
  /// three years), in seconds (<code>31536000</code> | <code>94608000</code>).
  /// </li>
  /// <li>
  /// <code>end</code> - The time when the Reserved Instance expires (for
  /// example, 2015-08-07T11:54:42.000Z).
  /// </li>
  /// <li>
  /// <code>fixed-price</code> - The purchase price of the Reserved Instance
  /// (for example, 9800.0).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type that is covered by the
  /// reservation.
  /// </li>
  /// <li>
  /// <code>scope</code> - The scope of the Reserved Instance
  /// (<code>Region</code> or <code>Availability Zone</code>).
  /// </li>
  /// <li>
  /// <code>product-description</code> - The Reserved Instance product platform
  /// description (<code>Linux/UNIX</code> | <code>Linux with SQL Server
  /// Standard</code> | <code>Linux with SQL Server Web</code> | <code>Linux
  /// with SQL Server Enterprise</code> | <code>SUSE Linux</code> | <code>Red
  /// Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux with
  /// HA</code> | <code>Windows</code> | <code>Windows with SQL Server
  /// Standard</code> | <code>Windows with SQL Server Web</code> | <code>Windows
  /// with SQL Server Enterprise</code>).
  /// </li>
  /// <li>
  /// <code>reserved-instances-id</code> - The ID of the Reserved Instance.
  /// </li>
  /// <li>
  /// <code>start</code> - The time at which the Reserved Instance purchase
  /// request was placed (for example, 2014-08-07T11:54:42.000Z).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the Reserved Instance
  /// (<code>payment-pending</code> | <code>active</code> |
  /// <code>payment-failed</code> | <code>retired</code>).
  /// </li>
  /// <li>
  /// <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>usage-price</code> - The usage price of the Reserved Instance, per
  /// hour (for example, 0.84).
  /// </li>
  /// </ul>
  ///
  /// Parameter [offeringClass] :
  /// Describes whether the Reserved Instance is Standard or Convertible.
  ///
  /// Parameter [offeringType] :
  /// The Reserved Instance offering type. If you are using tools that predate
  /// the 2011-11-01 API version, you only have access to the <code>Medium
  /// Utilization</code> Reserved Instance offering type.
  ///
  /// Parameter [reservedInstancesIds] :
  /// One or more Reserved Instance IDs.
  ///
  /// Default: Describes all your Reserved Instances, or only those otherwise
  /// specified.
  Future<DescribeReservedInstancesResult> describeReservedInstances({
    bool? dryRun,
    List<Filter>? filters,
    OfferingClassType? offeringClass,
    OfferingTypeValues? offeringType,
    List<String>? reservedInstancesIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your account's Reserved Instance listings in the Reserved
  /// Instance Marketplace.
  ///
  /// The Reserved Instance Marketplace matches sellers who want to resell
  /// Reserved Instance capacity that they no longer need with buyers who want
  /// to purchase additional capacity. Reserved Instances bought and sold
  /// through the Reserved Instance Marketplace work like any other Reserved
  /// Instances.
  ///
  /// As a seller, you choose to list some or all of your Reserved Instances,
  /// and you specify the upfront price to receive for them. Your Reserved
  /// Instances are then listed in the Reserved Instance Marketplace and are
  /// available for purchase.
  ///
  /// As a buyer, you specify the configuration of the Reserved Instance to
  /// purchase, and the Marketplace matches what you're searching for with
  /// what's available. The Marketplace first sells the lowest priced Reserved
  /// Instances to you, and continues to sell available Reserved Instance
  /// listings to you until your demand is met. You are charged based on the
  /// total price of all of the listings that you purchase.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>reserved-instances-id</code> - The ID of the Reserved Instances.
  /// </li>
  /// <li>
  /// <code>reserved-instances-listing-id</code> - The ID of the Reserved
  /// Instances listing.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the Reserved Instance listing
  /// (<code>pending</code> | <code>active</code> | <code>cancelled</code> |
  /// <code>closed</code>).
  /// </li>
  /// <li>
  /// <code>status-message</code> - The reason for the status.
  /// </li>
  /// </ul>
  ///
  /// Parameter [reservedInstancesId] :
  /// One or more Reserved Instance IDs.
  ///
  /// Parameter [reservedInstancesListingId] :
  /// One or more Reserved Instance listing IDs.
  Future<DescribeReservedInstancesListingsResult>
      describeReservedInstancesListings({
    List<Filter>? filters,
    String? reservedInstancesId,
    String? reservedInstancesListingId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the modifications made to your Reserved Instances. If no
  /// parameter is specified, information about all your Reserved Instances
  /// modification requests is returned. If a modification ID is specified, only
  /// information about the specific modification is returned.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying
  /// Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>client-token</code> - The idempotency token for the modification
  /// request.
  /// </li>
  /// <li>
  /// <code>create-date</code> - The time when the modification request was
  /// created.
  /// </li>
  /// <li>
  /// <code>effective-date</code> - The time when the modification becomes
  /// effective.
  /// </li>
  /// <li>
  /// <code>modification-result.reserved-instances-id</code> - The ID for the
  /// Reserved Instances created as part of the modification request. This ID is
  /// only available when the status of the modification is
  /// <code>fulfilled</code>.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.availability-zone</code> -
  /// The Availability Zone for the new Reserved Instances.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.instance-count </code> -
  /// The number of new Reserved Instances.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.instance-type</code> - The
  /// instance type of the new Reserved Instances.
  /// </li>
  /// <li>
  /// <code>reserved-instances-id</code> - The ID of the Reserved Instances
  /// modified.
  /// </li>
  /// <li>
  /// <code>reserved-instances-modification-id</code> - The ID of the
  /// modification request.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the Reserved Instances modification
  /// request (<code>processing</code> | <code>fulfilled</code> |
  /// <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>status-message</code> - The reason for the status.
  /// </li>
  /// <li>
  /// <code>update-date</code> - The time when the modification request was last
  /// updated.
  /// </li>
  /// </ul>
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [reservedInstancesModificationIds] :
  /// IDs for the submitted modification request.
  Future<DescribeReservedInstancesModificationsResult>
      describeReservedInstancesModifications({
    List<Filter>? filters,
    String? nextToken,
    List<String>? reservedInstancesModificationIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes Reserved Instance offerings that are available for purchase.
  /// With Reserved Instances, you purchase the right to launch instances for a
  /// period of time. During that time period, you do not receive insufficient
  /// capacity errors, and you pay a lower usage rate than the rate charged for
  /// On-Demand instances for the actual time used.
  ///
  /// If you have listed your own Reserved Instances for sale in the Reserved
  /// Instance Marketplace, they will be excluded from these results. This is to
  /// ensure that you do not purchase your own Reserved Instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which the Reserved Instance can be used.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone where the Reserved
  /// Instance can be used.
  /// </li>
  /// <li>
  /// <code>duration</code> - The duration of the Reserved Instance (for
  /// example, one year or three years), in seconds (<code>31536000</code> |
  /// <code>94608000</code>).
  /// </li>
  /// <li>
  /// <code>fixed-price</code> - The purchase price of the Reserved Instance
  /// (for example, 9800.0).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type that is covered by the
  /// reservation.
  /// </li>
  /// <li>
  /// <code>marketplace</code> - Set to <code>true</code> to show only Reserved
  /// Instance Marketplace offerings. When this filter is not used, which is the
  /// default behavior, all offerings from both Amazon Web Services and the
  /// Reserved Instance Marketplace are listed.
  /// </li>
  /// <li>
  /// <code>product-description</code> - The Reserved Instance product platform
  /// description (<code>Linux/UNIX</code> | <code>Linux with SQL Server
  /// Standard</code> | <code>Linux with SQL Server Web</code> | <code>Linux
  /// with SQL Server Enterprise</code> | <code>SUSE Linux</code> | <code>Red
  /// Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux with
  /// HA</code> | <code>Windows</code> | <code>Windows with SQL Server
  /// Standard</code> | <code>Windows with SQL Server Web</code> | <code>Windows
  /// with SQL Server Enterprise</code>).
  /// </li>
  /// <li>
  /// <code>reserved-instances-offering-id</code> - The Reserved Instances
  /// offering ID.
  /// </li>
  /// <li>
  /// <code>scope</code> - The scope of the Reserved Instance
  /// (<code>Availability Zone</code> or <code>Region</code>).
  /// </li>
  /// <li>
  /// <code>usage-price</code> - The usage price of the Reserved Instance, per
  /// hour (for example, 0.84).
  /// </li>
  /// </ul>
  ///
  /// Parameter [includeMarketplace] :
  /// Include Reserved Instance Marketplace offerings in the response.
  ///
  /// Parameter [instanceTenancy] :
  /// The tenancy of the instances covered by the reservation. A Reserved
  /// Instance with a tenancy of <code>dedicated</code> is applied to instances
  /// that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).
  ///
  /// <b>Important:</b> The <code>host</code> value cannot be used with this
  /// parameter. Use the <code>default</code> or <code>dedicated</code> values
  /// only.
  ///
  /// Default: <code>default</code>
  ///
  /// Parameter [instanceType] :
  /// The instance type that the reservation will cover (for example,
  /// <code>m1.small</code>). For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [maxDuration] :
  /// The maximum duration (in seconds) to filter when searching for offerings.
  ///
  /// Default: 94608000 (3 years)
  ///
  /// Parameter [maxInstanceCount] :
  /// The maximum number of instances to filter when searching for offerings.
  ///
  /// Default: 20
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. The
  /// maximum is 100.
  ///
  /// Default: 100
  ///
  /// Parameter [minDuration] :
  /// The minimum duration (in seconds) to filter when searching for offerings.
  ///
  /// Default: 2592000 (1 month)
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [offeringClass] :
  /// The offering class of the Reserved Instance. Can be <code>standard</code>
  /// or <code>convertible</code>.
  ///
  /// Parameter [offeringType] :
  /// The Reserved Instance offering type. If you are using tools that predate
  /// the 2011-11-01 API version, you only have access to the <code>Medium
  /// Utilization</code> Reserved Instance offering type.
  ///
  /// Parameter [productDescription] :
  /// The Reserved Instance product platform description. Instances that include
  /// <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.
  ///
  /// Parameter [reservedInstancesOfferingIds] :
  /// One or more Reserved Instances offering IDs.
  Future<DescribeReservedInstancesOfferingsResult>
      describeReservedInstancesOfferings({
    String? availabilityZone,
    bool? dryRun,
    List<Filter>? filters,
    bool? includeMarketplace,
    Tenancy? instanceTenancy,
    InstanceType? instanceType,
    int? maxDuration,
    int? maxInstanceCount,
    int? maxResults,
    int? minDuration,
    String? nextToken,
    OfferingClassType? offeringClass,
    OfferingTypeValues? offeringType,
    RIProductDescription? productDescription,
    List<String>? reservedInstancesOfferingIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your route tables.
  ///
  /// Each subnet in your VPC must be associated with a route table. If a subnet
  /// is not explicitly associated with any route table, it is implicitly
  /// associated with the main route table. This command does not return the
  /// subnet ID for implicit associations.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>association.gateway-id</code> - The ID of the gateway involved in
  /// the association.
  /// </li>
  /// <li>
  /// <code>association.route-table-association-id</code> - The ID of an
  /// association ID for the route table.
  /// </li>
  /// <li>
  /// <code>association.route-table-id</code> - The ID of the route table
  /// involved in the association.
  /// </li>
  /// <li>
  /// <code>association.subnet-id</code> - The ID of the subnet involved in the
  /// association.
  /// </li>
  /// <li>
  /// <code>association.main</code> - Indicates whether the route table is the
  /// main route table for the VPC (<code>true</code> | <code>false</code>).
  /// Route tables that do not have an association ID are not returned in the
  /// response.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the route table.
  /// </li>
  /// <li>
  /// <code>route-table-id</code> - The ID of the route table.
  /// </li>
  /// <li>
  /// <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified
  /// in a route in the table.
  /// </li>
  /// <li>
  /// <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range
  /// specified in a route in the route table.
  /// </li>
  /// <li>
  /// <code>route.destination-prefix-list-id</code> - The ID (prefix) of the
  /// Amazon Web Service specified in a route in the table.
  /// </li>
  /// <li>
  /// <code>route.egress-only-internet-gateway-id</code> - The ID of an
  /// egress-only Internet gateway specified in a route in the route table.
  /// </li>
  /// <li>
  /// <code>route.gateway-id</code> - The ID of a gateway specified in a route
  /// in the table.
  /// </li>
  /// <li>
  /// <code>route.instance-id</code> - The ID of an instance specified in a
  /// route in the table.
  /// </li>
  /// <li>
  /// <code>route.nat-gateway-id</code> - The ID of a NAT gateway.
  /// </li>
  /// <li>
  /// <code>route.transit-gateway-id</code> - The ID of a transit gateway.
  /// </li>
  /// <li>
  /// <code>route.origin</code> - Describes how the route was created.
  /// <code>CreateRouteTable</code> indicates that the route was automatically
  /// created when the route table was created; <code>CreateRoute</code>
  /// indicates that the route was manually added to the route table;
  /// <code>EnableVgwRoutePropagation</code> indicates that the route was
  /// propagated by route propagation.
  /// </li>
  /// <li>
  /// <code>route.state</code> - The state of a route in the route table
  /// (<code>active</code> | <code>blackhole</code>). The blackhole state
  /// indicates that the route's target isn't available (for example, the
  /// specified gateway isn't attached to the VPC, the specified NAT instance
  /// has been terminated, and so on).
  /// </li>
  /// <li>
  /// <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering
  /// connection specified in a route in the table.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [routeTableIds] :
  /// The IDs of the route tables.
  ///
  /// Default: Describes all your route tables.
  Future<DescribeRouteTablesResult> describeRouteTables({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? routeTableIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Finds available schedules that meet the specified criteria.
  ///
  /// You can search for an available schedule no more than 3 months in advance.
  /// You must meet the minimum required duration of 1,200 hours per year. For
  /// example, the minimum daily schedule is 4 hours, the minimum weekly
  /// schedule is 24 hours, and the minimum monthly schedule is 100 hours.
  ///
  /// After you find a schedule that meets your needs, call
  /// <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with
  /// that schedule.
  ///
  /// Parameter [firstSlotStartTimeRange] :
  /// The time period for the first schedule to start.
  ///
  /// Parameter [recurrence] :
  /// The schedule recurrence.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone (for example,
  /// <code>us-west-2a</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type (for example,
  /// <code>c4.large</code>).
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform (<code>Linux/UNIX</code> or
  /// <code>Windows</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. This value can
  /// be between 5 and 300. The default value is 300. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [maxSlotDurationInHours] :
  /// The maximum available duration, in hours. This value must be greater than
  /// <code>MinSlotDurationInHours</code> and less than 1,720.
  ///
  /// Parameter [minSlotDurationInHours] :
  /// The minimum available duration, in hours. The minimum required duration is
  /// 1,200 hours per year. For example, the minimum daily schedule is 4 hours,
  /// the minimum weekly schedule is 24 hours, and the minimum monthly schedule
  /// is 100 hours.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeScheduledInstanceAvailabilityResult>
      describeScheduledInstanceAvailability({
    required SlotDateTimeRangeRequest firstSlotStartTimeRange,
    required ScheduledInstanceRecurrenceRequest recurrence,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    int? maxSlotDurationInHours,
    int? minSlotDurationInHours,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      300,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Scheduled Instances or all your Scheduled
  /// Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone (for example,
  /// <code>us-west-2a</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type (for example,
  /// <code>c4.large</code>).
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform (<code>Linux/UNIX</code> or
  /// <code>Windows</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. This value can
  /// be between 5 and 300. The default value is 100. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  ///
  /// Parameter [scheduledInstanceIds] :
  /// The Scheduled Instance IDs.
  ///
  /// Parameter [slotStartTimeRange] :
  /// The time period for the first schedule to start.
  Future<DescribeScheduledInstancesResult> describeScheduledInstances({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? scheduledInstanceIds,
    SlotStartTimeRangeRequest? slotStartTimeRange,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the VPCs on the other side of a VPC peering connection that are
  /// referencing the security groups you've specified in this request.
  ///
  /// Parameter [groupId] :
  /// The IDs of the security groups in your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeSecurityGroupReferencesResult>
      describeSecurityGroupReferences({
    required List<String> groupId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your security group rules.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-id</code> - The ID of the security group.
  /// </li>
  /// <li>
  /// <code>security-group-rule-id</code> - The ID of the security group rule.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// This value can be between 5 and 1000. If this parameter is not specified,
  /// then all items are returned. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [securityGroupRuleIds] :
  /// The IDs of the security group rules.
  Future<DescribeSecurityGroupRulesResult> describeSecurityGroupRules({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? securityGroupRuleIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified security groups or all of your security groups.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. If using multiple filters for rules, the results include
  /// security groups for which any combination of rules - not necessarily a
  /// single rule - match all filters.
  ///
  /// <ul>
  /// <li>
  /// <code>description</code> - The description of the security group.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an
  /// outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.from-port</code> - For an outbound rule, the
  /// start of port range for the TCP and UDP protocols, or an ICMP type number.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.group-id</code> - The ID of a security group
  /// that has been referenced in an outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.group-name</code> - The name of a security
  /// group that is referenced in an outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an
  /// outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.prefix-list-id</code> - The ID of a prefix list
  /// to which a security group rule allows outbound access.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.protocol</code> - The IP protocol for an
  /// outbound security group rule (<code>tcp</code> | <code>udp</code> |
  /// <code>icmp</code>, a protocol number, or -1 for all protocols).
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.to-port</code> - For an outbound rule, the end
  /// of port range for the TCP and UDP protocols, or an ICMP code.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.user-id</code> - The ID of an Amazon Web
  /// Services account that has been referenced in an outbound security group
  /// rule.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of the security group.
  /// </li>
  /// <li>
  /// <code>group-name</code> - The name of the security group.
  /// </li>
  /// <li>
  /// <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound
  /// security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.from-port</code> - For an inbound rule, the start of
  /// port range for the TCP and UDP protocols, or an ICMP type number.
  /// </li>
  /// <li>
  /// <code>ip-permission.group-id</code> - The ID of a security group that has
  /// been referenced in an inbound security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.group-name</code> - The name of a security group that
  /// is referenced in an inbound security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound
  /// security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.prefix-list-id</code> - The ID of a prefix list from
  /// which a security group rule allows inbound access.
  /// </li>
  /// <li>
  /// <code>ip-permission.protocol</code> - The IP protocol for an inbound
  /// security group rule (<code>tcp</code> | <code>udp</code> |
  /// <code>icmp</code>, a protocol number, or -1 for all protocols).
  /// </li>
  /// <li>
  /// <code>ip-permission.to-port</code> - For an inbound rule, the end of port
  /// range for the TCP and UDP protocols, or an ICMP code.
  /// </li>
  /// <li>
  /// <code>ip-permission.user-id</code> - The ID of an Amazon Web Services
  /// account that has been referenced in an inbound security group rule.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the owner of
  /// the security group.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC specified when the security group
  /// was created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [groupIds] :
  /// The IDs of the security groups. Required for security groups in a
  /// nondefault VPC.
  ///
  /// Default: Describes all of your security groups.
  ///
  /// Parameter [groupNames] :
  /// [Default VPC] The names of the security groups. You can specify either the
  /// security group name or the security group ID.
  ///
  /// Default: Describes all of your security groups.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// This value can be between 5 and 1000. If this parameter is not specified,
  /// then all items are returned. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeSecurityGroupsResult> describeSecurityGroups({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? groupIds,
    List<String>? groupNames,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified snapshot. You can
  /// specify only one attribute at a time.
  ///
  /// For more information about EBS snapshots, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-snapshots.html">Amazon
  /// EBS snapshots</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The snapshot attribute you would like to view.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the EBS snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeSnapshotAttributeResult> describeSnapshotAttribute({
    required SnapshotAttributeName attribute,
    required String snapshotId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the storage tier status of one or more Amazon EBS snapshots.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>snapshot-id</code> - The snapshot ID.
  /// </li>
  /// <li>
  /// <code>volume-id</code> - The ID of the volume the snapshot is for.
  /// </li>
  /// <li>
  /// <code>last-tiering-operation</code> - The state of the last archive or
  /// restore action. (<code>archival-in-progress</code> |
  /// <code>archival-completed</code> | <code>archival-failed</code> |
  /// <code>permanent-restore-in-progress</code> |
  /// <code>permanent-restore-completed</code> |
  /// <code>permanent-restore-failed</code> |
  /// <code>temporary-restore-in-progress</code> |
  /// <code>temporary-restore-completed</code> |
  /// <code>temporary-restore-failed</code>)
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeSnapshotTierStatusResult> describeSnapshotTierStatus({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EBS snapshots available to you or all of the EBS
  /// snapshots available to you.
  ///
  /// The snapshots available to you include public snapshots, private snapshots
  /// that you own, and private snapshots owned by other Amazon Web Services
  /// accounts for which you have explicit create volume permissions.
  ///
  /// The create volume permissions fall into the following categories:
  ///
  /// <ul>
  /// <li>
  /// <i>public</i>: The owner of the snapshot granted create volume permissions
  /// for the snapshot to the <code>all</code> group. All Amazon Web Services
  /// accounts have create volume permissions for these snapshots.
  /// </li>
  /// <li>
  /// <i>explicit</i>: The owner of the snapshot granted create volume
  /// permissions to a specific Amazon Web Services account.
  /// </li>
  /// <li>
  /// <i>implicit</i>: An Amazon Web Services account has implicit create volume
  /// permissions for all snapshots it owns.
  /// </li>
  /// </ul>
  /// The list of snapshots returned can be filtered by specifying snapshot IDs,
  /// snapshot owners, or Amazon Web Services accounts with create volume
  /// permissions. If no options are specified, Amazon EC2 returns all snapshots
  /// for which you have create volume permissions.
  ///
  /// If you specify one or more snapshot IDs, only snapshots that have the
  /// specified IDs are returned. If you specify an invalid snapshot ID, an
  /// error is returned. If you specify a snapshot ID for which you do not have
  /// access, it is not included in the returned results.
  ///
  /// If you specify one or more snapshot owners using the <code>OwnerIds</code>
  /// option, only snapshots from the specified owners and for which you have
  /// access are returned. The results can include the Amazon Web Services
  /// account IDs of the specified owners, <code>amazon</code> for snapshots
  /// owned by Amazon, or <code>self</code> for snapshots that you own.
  ///
  /// If you specify a list of restorable users, only snapshots with create
  /// snapshot permissions for those users are returned. You can specify Amazon
  /// Web Services account IDs (if you own the snapshots), <code>self</code> for
  /// snapshots for which you own or have explicit permissions, or
  /// <code>all</code> for public snapshots.
  ///
  /// If you are describing a long list of snapshots, we recommend that you
  /// paginate the output to make the list more manageable. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// To get the state of fast snapshot restores for a snapshot, use
  /// <a>DescribeFastSnapshotRestores</a>.
  ///
  /// For more information about EBS snapshots, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-snapshots.html">Amazon
  /// EBS snapshots</a> in the <i>Amazon EBS User Guide</i>.
  /// <important>
  /// We strongly recommend using only paginated requests. Unpaginated requests
  /// are susceptible to throttling and timeouts.
  /// </important>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>description</code> - A description of the snapshot.
  /// </li>
  /// <li>
  /// <code>encrypted</code> - Indicates whether the snapshot is encrypted
  /// (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>owner-alias</code> - The owner alias, from an Amazon-maintained list
  /// (<code>amazon</code>). This is not the user-configured Amazon Web Services
  /// account alias set using the IAM console. We recommend that you use the
  /// related parameter instead of this filter.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The Amazon Web Services account ID of the owner.
  /// We recommend that you use the related parameter instead of this filter.
  /// </li>
  /// <li>
  /// <code>progress</code> - The progress of the snapshot, as a percentage (for
  /// example, 80%).
  /// </li>
  /// <li>
  /// <code>snapshot-id</code> - The snapshot ID.
  /// </li>
  /// <li>
  /// <code>start-time</code> - The time stamp when the snapshot was initiated.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the snapshot (<code>pending</code> |
  /// <code>completed</code> | <code>error</code>).
  /// </li>
  /// <li>
  /// <code>storage-tier</code> - The storage tier of the snapshot
  /// (<code>archive</code> | <code>standard</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>volume-id</code> - The ID of the volume the snapshot is for.
  /// </li>
  /// <li>
  /// <code>volume-size</code> - The size of the volume, in GiB.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of snapshots to return for this request. This value can
  /// be between 5 and 1,000; if this value is larger than 1,000, only 1,000
  /// results are returned. If this parameter is not used, then the request
  /// returns all snapshots. You cannot specify this parameter and the snapshot
  /// IDs parameter in the same request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [ownerIds] :
  /// Scopes the results to snapshots with the specified owners. You can specify
  /// a combination of Amazon Web Services account IDs, <code>self</code>, and
  /// <code>amazon</code>.
  ///
  /// Parameter [restorableByUserIds] :
  /// The IDs of the Amazon Web Services accounts that can create volumes from
  /// the snapshot.
  ///
  /// Parameter [snapshotIds] :
  /// The snapshot IDs.
  ///
  /// Default: Describes the snapshots for which you have create volume
  /// permissions.
  Future<DescribeSnapshotsResult> describeSnapshots({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? ownerIds,
    List<String>? restorableByUserIds,
    List<String>? snapshotIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the data feed for Spot Instances. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
  /// Instance data feed</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeSpotDatafeedSubscriptionResult>
      describeSpotDatafeedSubscription({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the running instances for the specified Spot Fleet.
  ///
  /// Parameter [spotFleetRequestId] :
  /// The ID of the Spot Fleet request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to include in another request to get the next page of items.
  /// This value is <code>null</code> when there are no more items to return.
  Future<DescribeSpotFleetInstancesResponse> describeSpotFleetInstances({
    required String spotFleetRequestId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the events for the specified Spot Fleet request during the
  /// specified time.
  ///
  /// Spot Fleet events are delayed by up to 30 seconds before they can be
  /// described. This ensures that you can query by the last evaluated time and
  /// not miss a recorded event. Spot Fleet events are available for 48 hours.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor
  /// fleet events using Amazon EventBridge</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [spotFleetRequestId] :
  /// The ID of the Spot Fleet request.
  ///
  /// Parameter [startTime] :
  /// The starting date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [eventType] :
  /// The type of events to describe. By default, all events are described.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to include in another request to get the next page of items.
  /// This value is <code>null</code> when there are no more items to return.
  Future<DescribeSpotFleetRequestHistoryResponse>
      describeSpotFleetRequestHistory({
    required String spotFleetRequestId,
    required DateTime startTime,
    bool? dryRun,
    EventType? eventType,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your Spot Fleet requests.
  ///
  /// Spot Fleet requests are deleted 48 hours after they are canceled and their
  /// instances are terminated.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to include in another request to get the next page of items.
  /// This value is <code>null</code> when there are no more items to return.
  ///
  /// Parameter [spotFleetRequestIds] :
  /// The IDs of the Spot Fleet requests.
  Future<DescribeSpotFleetRequestsResponse> describeSpotFleetRequests({
    bool? dryRun,
    int? maxResults,
    String? nextToken,
    List<String>? spotFleetRequestIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Spot Instance requests.
  ///
  /// You can use <code>DescribeSpotInstanceRequests</code> to find a running
  /// Spot Instance by examining the response. If the status of the Spot
  /// Instance is <code>fulfilled</code>, the instance ID appears in the
  /// response and contains the identifier of the instance. Alternatively, you
  /// can use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a>
  /// with a filter to look for instances where the instance lifecycle is
  /// <code>spot</code>.
  ///
  /// We recommend that you set <code>MaxResults</code> to a value between 5 and
  /// 1000 to limit the number of items returned. This paginates the output,
  /// which makes the list more manageable and returns the items faster. If the
  /// list of items exceeds your <code>MaxResults</code> value, then that number
  /// of items is returned along with a <code>NextToken</code> value that can be
  /// passed to a subsequent <code>DescribeSpotInstanceRequests</code> request
  /// to retrieve the remaining items.
  ///
  /// Spot Instance requests are deleted four hours after they are canceled and
  /// their instances are terminated.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone-group</code> - The Availability Zone group.
  /// </li>
  /// <li>
  /// <code>create-time</code> - The time stamp when the Spot Instance request
  /// was created.
  /// </li>
  /// <li>
  /// <code>fault-code</code> - The fault code related to the request.
  /// </li>
  /// <li>
  /// <code>fault-message</code> - The fault message related to the request.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance that fulfilled the
  /// request.
  /// </li>
  /// <li>
  /// <code>launch-group</code> - The Spot Instance launch group.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.delete-on-termination</code> - Indicates
  /// whether the EBS volume is deleted on instance termination.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.device-name</code> - The device name for
  /// the volume in the block device mapping (for example, <code>/dev/sdh</code>
  /// or <code>xvdh</code>).
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.snapshot-id</code> - The ID of the
  /// snapshot for the EBS volume.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.volume-size</code> - The size of the EBS
  /// volume, in GiB.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.volume-type</code> - The type of EBS
  /// volume: <code>gp2</code> or <code>gp3</code> for General Purpose SSD,
  /// <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD,
  /// <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold
  /// HDD, or <code>standard</code> for Magnetic.
  /// </li>
  /// <li>
  /// <code>launch.group-id</code> - The ID of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>launch.group-name</code> - The name of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>launch.image-id</code> - The ID of the AMI.
  /// </li>
  /// <li>
  /// <code>launch.instance-type</code> - The type of instance (for example,
  /// <code>m3.medium</code>).
  /// </li>
  /// <li>
  /// <code>launch.kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>launch.key-name</code> - The name of the key pair the instance
  /// launched with.
  /// </li>
  /// <li>
  /// <code>launch.monitoring-enabled</code> - Whether detailed monitoring is
  /// enabled for the Spot Instance.
  /// </li>
  /// <li>
  /// <code>launch.ramdisk-id</code> - The RAM disk ID.
  /// </li>
  /// <li>
  /// <code>launched-availability-zone</code> - The Availability Zone in which
  /// the request is launched.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.primary</code> - Indicates whether the
  /// IP address is the primary private IP address.
  /// </li>
  /// <li>
  /// <code>network-interface.delete-on-termination</code> - Indicates whether
  /// the network interface is deleted when the instance is terminated.
  /// </li>
  /// <li>
  /// <code>network-interface.description</code> - A description of the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>network-interface.device-index</code> - The index of the device for
  /// the network interface attachment on the instance.
  /// </li>
  /// <li>
  /// <code>network-interface.group-id</code> - The ID of the security group
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.network-interface-id</code> - The ID of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.private-ip-address</code> - The primary private IP
  /// address of the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.subnet-id</code> - The ID of the subnet for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>product-description</code> - The product description associated with
  /// the instance (<code>Linux/UNIX</code> | <code>Windows</code>).
  /// </li>
  /// <li>
  /// <code>spot-instance-request-id</code> - The Spot Instance request ID.
  /// </li>
  /// <li>
  /// <code>spot-price</code> - The maximum hourly price for any Spot Instance
  /// launched to fulfill the request.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the Spot Instance request
  /// (<code>open</code> | <code>active</code> | <code>closed</code> |
  /// <code>cancelled</code> | <code>failed</code>). Spot request status
  /// information can help you track your Amazon EC2 Spot Instance requests. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot
  /// request status</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  /// </li>
  /// <li>
  /// <code>status-code</code> - The short code describing the most recent
  /// evaluation of your Spot Instance request.
  /// </li>
  /// <li>
  /// <code>status-message</code> - The message explaining the status of the
  /// Spot Instance request.
  /// </li>
  /// <li>
  /// <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of Spot Instance request
  /// (<code>one-time</code> | <code>persistent</code>).
  /// </li>
  /// <li>
  /// <code>valid-from</code> - The start date of the request.
  /// </li>
  /// <li>
  /// <code>valid-until</code> - The end date of the request.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [spotInstanceRequestIds] :
  /// The IDs of the Spot Instance requests.
  Future<DescribeSpotInstanceRequestsResult> describeSpotInstanceRequests({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? spotInstanceRequestIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Spot price history. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot
  /// Instance pricing history</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// When you specify a start and end time, the operation returns the prices of
  /// the instance types within that time range. It also returns the last price
  /// change before the start time, which is the effective price as of the start
  /// time.
  ///
  /// Parameter [availabilityZone] :
  /// Filters the results by the specified Availability Zone.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endTime] :
  /// The date and time, up to the current date, from which to stop retrieving
  /// the price history data, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone for which prices
  /// should be returned.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The type of instance (for example,
  /// <code>m3.medium</code>).
  /// </li>
  /// <li>
  /// <code>product-description</code> - The product description for the Spot
  /// price (<code>Linux/UNIX</code> | <code>Red Hat Enterprise Linux</code> |
  /// <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon
  /// VPC)</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> |
  /// <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).
  /// </li>
  /// <li>
  /// <code>spot-price</code> - The Spot price. The value must match exactly (or
  /// use wildcards; greater than or less than comparison is not supported).
  /// </li>
  /// <li>
  /// <code>timestamp</code> - The time stamp of the Spot price history, in UTC
  /// format (for example, <i>ddd MMM dd HH</i>:<i>mm</i>:<i>ss</i> UTC
  /// <i>YYYY</i>). You can use wildcards (<code>*</code> and <code>?</code>).
  /// Greater than or less than comparison is not supported.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceTypes] :
  /// Filters the results by the specified instance types.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [productDescriptions] :
  /// Filters the results by the specified basic product descriptions.
  ///
  /// Parameter [startTime] :
  /// The date and time, up to the past 90 days, from which to start retrieving
  /// the price history data, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  Future<DescribeSpotPriceHistoryResult> describeSpotPriceHistory({
    String? availabilityZone,
    bool? dryRun,
    DateTime? endTime,
    List<Filter>? filters,
    List<InstanceType>? instanceTypes,
    int? maxResults,
    String? nextToken,
    List<String>? productDescriptions,
    DateTime? startTime,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the stale security group rules for security groups in a
  /// specified VPC. Rules are stale when they reference a deleted security
  /// group in the same VPC or peered VPC. Rules can also be stale if they
  /// reference a security group in a peer VPC for which the VPC peering
  /// connection has been deleted.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeStaleSecurityGroupsResult> describeStaleSecurityGroups({
    required String vpcId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the progress of the AMI store tasks. You can describe the store
  /// tasks for specified AMIs. If you don't specify the AMIs, you get a
  /// paginated list of store tasks from the last 31 days.
  ///
  /// For each AMI task, the response indicates if the task is
  /// <code>InProgress</code>, <code>Completed</code>, or <code>Failed</code>.
  /// For tasks <code>InProgress</code>, the response shows the estimated
  /// progress as a percentage.
  ///
  /// Tasks are listed in reverse chronological order. Currently, only tasks
  /// from the past 31 days can be viewed.
  ///
  /// To use this API, you must have the required permissions. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions
  /// for storing and restoring AMIs using Amazon S3</a> in the <i>Amazon EC2
  /// User Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store
  /// and restore an AMI using Amazon S3</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>task-state</code> - Returns tasks in a certain state
  /// (<code>InProgress</code> | <code>Completed</code> | <code>Failed</code>)
  /// </li>
  /// <li>
  /// <code>bucket</code> - Returns task information for tasks that targeted a
  /// specific bucket. For the filter value, specify the bucket name.
  /// </li>
  /// </ul> <note>
  /// When you specify the <code>ImageIds</code> parameter, any filters that you
  /// specify are ignored. To use the filters, you must remove the
  /// <code>ImageIds</code> parameter.
  /// </note>
  ///
  /// Parameter [imageIds] :
  /// The AMI IDs for which to show progress. Up to 20 AMI IDs can be included
  /// in a request.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// You cannot specify this parameter and the <code>ImageIds</code> parameter
  /// in the same call.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeStoreImageTasksResult> describeStoreImageTasks({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? imageIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your subnets.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html">Subnets</a>
  /// in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone for the subnet. You
  /// can also use <code>availabilityZone</code> as the filter name.
  /// </li>
  /// <li>
  /// <code>availability-zone-id</code> - The ID of the Availability Zone for
  /// the subnet. You can also use <code>availabilityZoneId</code> as the filter
  /// name.
  /// </li>
  /// <li>
  /// <code>available-ip-address-count</code> - The number of IPv4 addresses in
  /// the subnet that are available.
  /// </li>
  /// <li>
  /// <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR
  /// block you specify must exactly match the subnet's CIDR block for
  /// information to be returned for the subnet. You can also use
  /// <code>cidr</code> or <code>cidrBlock</code> as the filter names.
  /// </li>
  /// <li>
  /// <code>customer-owned-ipv4-pool</code> - The customer-owned IPv4 address
  /// pool associated with the subnet.
  /// </li>
  /// <li>
  /// <code>default-for-az</code> - Indicates whether this is the default subnet
  /// for the Availability Zone (<code>true</code> | <code>false</code>). You
  /// can also use <code>defaultForAz</code> as the filter name.
  /// </li>
  /// <li>
  /// <code>enable-dns64</code> - Indicates whether DNS queries made to the
  /// Amazon-provided DNS Resolver in this subnet should return synthetic IPv6
  /// addresses for IPv4-only destinations.
  /// </li>
  /// <li>
  /// <code>enable-lni-at-device-index</code> - Indicates the device position
  /// for local network interfaces in this subnet. For example, <code>1</code>
  /// indicates local network interfaces in this subnet are the secondary
  /// network interface (eth1).
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
  /// block associated with the subnet.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.association-id</code> - An association
  /// ID for an IPv6 CIDR block associated with the subnet.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
  /// block associated with the subnet.
  /// </li>
  /// <li>
  /// <code>ipv6-native</code> - Indicates whether this is an IPv6 only subnet
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>map-customer-owned-ip-on-launch</code> - Indicates whether a network
  /// interface created in this subnet (including a network interface created by
  /// <a>RunInstances</a>) receives a customer-owned IPv4 address.
  /// </li>
  /// <li>
  /// <code>map-public-ip-on-launch</code> - Indicates whether instances
  /// launched in this subnet receive a public IPv4 address.
  /// </li>
  /// <li>
  /// <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the subnet.
  /// </li>
  /// <li>
  /// <code>private-dns-name-options-on-launch.hostname-type</code> - The type
  /// of hostname to assign to instances in the subnet at launch. For IPv4-only
  /// and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based
  /// on the instance IPv4 address (ip-name) or the instance ID (resource-name).
  /// For IPv6 only subnets, an instance DNS name must be based on the instance
  /// ID (resource-name).
  /// </li>
  /// <li>
  /// <code>private-dns-name-options-on-launch.enable-resource-name-dns-a-record</code>
  /// - Indicates whether to respond to DNS queries for instance hostnames with
  /// DNS A records.
  /// </li>
  /// <li>
  /// <code>private-dns-name-options-on-launch.enable-resource-name-dns-aaaa-record</code>
  /// - Indicates whether to respond to DNS queries for instance hostnames with
  /// DNS AAAA records.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the subnet (<code>pending</code> |
  /// <code>available</code>).
  /// </li>
  /// <li>
  /// <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the subnet.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets.
  ///
  /// Default: Describes all your subnets.
  Future<DescribeSubnetsResult> describeSubnets({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? subnetIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified tags for your EC2 resources.
  ///
  /// For more information about tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag
  /// your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  /// <important>
  /// We strongly recommend using only paginated requests. Unpaginated requests
  /// are susceptible to throttling and timeouts.
  /// </important> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>key</code> - The tag key.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type. For a list of possible
  /// values, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TagSpecification.html">TagSpecification</a>.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of the tag. For
  /// example, specify "tag:Owner" for the filter name and "TeamA" for the
  /// filter value to find resources with the tag "Owner=TeamA".
  /// </li>
  /// <li>
  /// <code>value</code> - The tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. This value can be
  /// between 5 and 1000. To get the next page of items, make another request
  /// with the token returned in the output. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<DescribeTagsResult> describeTags({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Traffic Mirror filters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>description</code>: The Traffic Mirror filter description.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror
  /// filter.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [trafficMirrorFilterIds] :
  /// The ID of the Traffic Mirror filter.
  Future<DescribeTrafficMirrorFiltersResult> describeTrafficMirrorFilters({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? trafficMirrorFilterIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Traffic Mirror sessions. By default, all Traffic
  /// Mirror sessions are described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>description</code>: The Traffic Mirror session description.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code>: The ID of the Traffic Mirror session
  /// network interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The ID of the account that owns the Traffic Mirror
  /// session.
  /// </li>
  /// <li>
  /// <code>packet-length</code>: The assigned number of packets to mirror.
  /// </li>
  /// <li>
  /// <code>session-number</code>: The assigned session number.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror
  /// filter.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror
  /// session.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror
  /// target.
  /// </li>
  /// <li>
  /// <code>virtual-network-id</code>: The virtual network ID of the Traffic
  /// Mirror session.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [trafficMirrorSessionIds] :
  /// The ID of the Traffic Mirror session.
  Future<DescribeTrafficMirrorSessionsResult> describeTrafficMirrorSessions({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? trafficMirrorSessionIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Information about one or more Traffic Mirror targets.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>description</code>: The Traffic Mirror target description.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code>: The ID of the Traffic Mirror session
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of
  /// the Network Load Balancer that is associated with the session.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The ID of the account that owns the Traffic Mirror
  /// session.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror
  /// target.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [trafficMirrorTargetIds] :
  /// The ID of the Traffic Mirror targets.
  Future<DescribeTrafficMirrorTargetsResult> describeTrafficMirrorTargets({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? trafficMirrorTargetIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more attachments between resources and transit gateways.
  /// By default, all attachments are described. Alternatively, you can filter
  /// the results by attachment ID, attachment state, resource ID, or resource
  /// owner.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>association.state</code> - The state of the association
  /// (<code>associating</code> | <code>associated</code> |
  /// <code>disassociating</code>).
  /// </li>
  /// <li>
  /// <code>association.transit-gateway-route-table-id</code> - The ID of the
  /// route table for the transit gateway.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-owner-id</code> - The ID of the Amazon Web Services account
  /// that owns the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type. Valid values are
  /// <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code>
  /// | <code>peering</code> | <code>connect</code>.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the attachment. Valid values are
  /// <code>available</code> | <code>deleted</code> | <code>deleting</code> |
  /// <code>failed</code> | <code>failing</code> |
  /// <code>initiatingRequest</code> | <code>modifying</code> |
  /// <code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transit-gateway-owner-id</code> - The ID of the Amazon Web Services
  /// account that owns the transit gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// The IDs of the attachments.
  Future<DescribeTransitGatewayAttachmentsResult>
      describeTransitGatewayAttachments({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Connect peers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>state</code> - The state of the Connect peer (<code>pending</code> |
  /// <code>available</code> | <code>deleting</code> | <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// <li>
  /// <code>transit-gateway-connect-peer-id</code> - The ID of the Connect peer.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayConnectPeerIds] :
  /// The IDs of the Connect peers.
  Future<DescribeTransitGatewayConnectPeersResult>
      describeTransitGatewayConnectPeers({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayConnectPeerIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Connect attachments.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>options.protocol</code> - The tunnel protocol (<code>gre</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the attachment (<code>initiating</code>
  /// | <code>initiatingRequest</code> | <code>pendingAcceptance</code> |
  /// <code>rollingBack</code> | <code>pending</code> | <code>available</code> |
  /// <code>modifying</code> | <code>deleting</code> | <code>deleted</code> |
  /// <code>failed</code> | <code>rejected</code> | <code>rejecting</code> |
  /// <code>failing</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the Connect
  /// attachment.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transport-transit-gateway-attachment-id</code> - The ID of the
  /// transit gateway attachment from which the Connect attachment was created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// The IDs of the attachments.
  Future<DescribeTransitGatewayConnectsResult> describeTransitGatewayConnects({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateway multicast domains.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>state</code> - The state of the transit gateway multicast domain.
  /// Valid values are <code>pending</code> | <code>available</code> |
  /// <code>deleting</code> | <code>deleted</code>.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transit-gateway-multicast-domain-id</code> - The ID of the transit
  /// gateway multicast domain.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayMulticastDomainIds] :
  /// The ID of the transit gateway multicast domain.
  Future<DescribeTransitGatewayMulticastDomainsResult>
      describeTransitGatewayMulticastDomains({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayMulticastDomainIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your transit gateway peering attachments.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the transit gateway
  /// attachment.
  /// </li>
  /// <li>
  /// <code>local-owner-id</code> - The ID of your Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>remote-owner-id</code> - The ID of the Amazon Web Services account
  /// in the remote Region that owns the transit gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the peering attachment. Valid values are
  /// <code>available</code> | <code>deleted</code> | <code>deleting</code> |
  /// <code>failed</code> | <code>failing</code> |
  /// <code>initiatingRequest</code> | <code>modifying</code> |
  /// <code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources that have a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// One or more IDs of the transit gateway peering attachments.
  Future<DescribeTransitGatewayPeeringAttachmentsResult>
      describeTransitGatewayPeeringAttachments({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateway route policy tables.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters associated with the transit gateway policy table.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayPolicyTableIds] :
  /// The IDs of the transit gateway policy tables.
  Future<DescribeTransitGatewayPolicyTablesResult>
      describeTransitGatewayPolicyTables({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayPolicyTableIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateway route table advertisements.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters associated with the transit gateway policy table.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayRouteTableAnnouncementIds] :
  /// The IDs of the transit gateway route tables that are being advertised.
  Future<DescribeTransitGatewayRouteTableAnnouncementsResult>
      describeTransitGatewayRouteTableAnnouncements({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayRouteTableAnnouncementIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateway route tables. By default, all
  /// transit gateway route tables are described. Alternatively, you can filter
  /// the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>default-association-route-table</code> - Indicates whether this is
  /// the default association route table for the transit gateway
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>default-propagation-route-table</code> - Indicates whether this is
  /// the default propagation route table for the transit gateway
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the route table (<code>available</code>
  /// | <code>deleting</code> | <code>deleted</code> | <code>pending</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transit-gateway-route-table-id</code> - The ID of the transit
  /// gateway route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayRouteTableIds] :
  /// The IDs of the transit gateway route tables.
  Future<DescribeTransitGatewayRouteTablesResult>
      describeTransitGatewayRouteTables({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayRouteTableIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more VPC attachments. By default, all VPC attachments are
  /// described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>state</code> - The state of the attachment. Valid values are
  /// <code>available</code> | <code>deleted</code> | <code>deleting</code> |
  /// <code>failed</code> | <code>failing</code> |
  /// <code>initiatingRequest</code> | <code>modifying</code> |
  /// <code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// The IDs of the attachments.
  Future<DescribeTransitGatewayVpcAttachmentsResult>
      describeTransitGatewayVpcAttachments({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateways. By default, all transit gateways
  /// are described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>options.propagation-default-route-table-id</code> - The ID of the
  /// default propagation route table.
  /// </li>
  /// <li>
  /// <code>options.amazon-side-asn</code> - The private ASN for the Amazon side
  /// of a BGP session.
  /// </li>
  /// <li>
  /// <code>options.association-default-route-table-id</code> - The ID of the
  /// default association route table.
  /// </li>
  /// <li>
  /// <code>options.auto-accept-shared-attachments</code> - Indicates whether
  /// there is automatic acceptance of attachment requests (<code>enable</code>
  /// | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.default-route-table-association</code> - Indicates whether
  /// resource attachments are automatically associated with the default
  /// association route table (<code>enable</code> | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.default-route-table-propagation</code> - Indicates whether
  /// resource attachments automatically propagate routes to the default
  /// propagation route table (<code>enable</code> | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.dns-support</code> - Indicates whether DNS support is
  /// enabled (<code>enable</code> | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost
  /// Multipath Protocol support is enabled (<code>enable</code> |
  /// <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the transit gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the transit gateway
  /// (<code>available</code> | <code>deleted</code> | <code>deleting</code> |
  /// <code>modifying</code> | <code>pending</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>tag-key </code>- The key/value combination of a tag assigned to the
  /// resource. Use the tag key in the filter name and the tag value as the
  /// filter value. For example, to find all resources that have a tag with the
  /// key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayIds] :
  /// The IDs of the transit gateways.
  Future<DescribeTransitGatewaysResult> describeTransitGateways({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? transitGatewayIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more network interface trunk associations.
  ///
  /// Parameter [associationIds] :
  /// The IDs of the associations.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>gre-key</code> - The ID of a trunk interface association.
  /// </li>
  /// <li>
  /// <code>interface-protocol</code> - The interface protocol. Valid values are
  /// <code>VLAN</code> and <code>GRE</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeTrunkInterfaceAssociationsResult>
      describeTrunkInterfaceAssociations({
    List<String>? associationIds,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Amazon Web Services Verified Access endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [verifiedAccessEndpointIds] :
  /// The ID of the Verified Access endpoint.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  Future<DescribeVerifiedAccessEndpointsResult>
      describeVerifiedAccessEndpoints({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? verifiedAccessEndpointIds,
    String? verifiedAccessGroupId,
    String? verifiedAccessInstanceId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Verified Access groups.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [verifiedAccessGroupIds] :
  /// The ID of the Verified Access groups.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  Future<DescribeVerifiedAccessGroupsResult> describeVerifiedAccessGroups({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? verifiedAccessGroupIds,
    String? verifiedAccessInstanceId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Amazon Web Services Verified Access instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [verifiedAccessInstanceIds] :
  /// The IDs of the Verified Access instances.
  Future<DescribeVerifiedAccessInstanceLoggingConfigurationsResult>
      describeVerifiedAccessInstanceLoggingConfigurations({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? verifiedAccessInstanceIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      10,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Amazon Web Services Verified Access instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [verifiedAccessInstanceIds] :
  /// The IDs of the Verified Access instances.
  Future<DescribeVerifiedAccessInstancesResult>
      describeVerifiedAccessInstances({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? verifiedAccessInstanceIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Amazon Web Services Verified Access trust
  /// providers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [verifiedAccessTrustProviderIds] :
  /// The IDs of the Verified Access trust providers.
  Future<DescribeVerifiedAccessTrustProvidersResult>
      describeVerifiedAccessTrustProviders({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? verifiedAccessTrustProviderIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified volume. You can specify
  /// only one attribute at a time.
  ///
  /// For more information about EBS volumes, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes.html">Amazon
  /// EBS volumes</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The attribute of the volume. This parameter is required.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeVolumeAttributeResult> describeVolumeAttribute({
    required VolumeAttributeName attribute,
    required String volumeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the status of the specified volumes. Volume status provides the
  /// result of the checks performed on your volumes to determine events that
  /// can impair the performance of your volumes. The performance of a volume
  /// can be affected if an issue occurs on the volume's underlying host. If the
  /// volume's underlying host experiences a power outage or system issue, after
  /// the system is restored, there could be data inconsistencies on the volume.
  /// Volume events notify you if this occurs. Volume actions notify you if any
  /// action needs to be taken in response to the event.
  ///
  /// The <code>DescribeVolumeStatus</code> operation provides the following
  /// information about the specified volumes:
  ///
  /// <i>Status</i>: Reflects the current status of the volume. The possible
  /// values are <code>ok</code>, <code>impaired</code> , <code>warning</code>,
  /// or <code>insufficient-data</code>. If all checks pass, the overall status
  /// of the volume is <code>ok</code>. If the check fails, the overall status
  /// is <code>impaired</code>. If the status is <code>insufficient-data</code>,
  /// then the checks might still be taking place on your volume at the time. We
  /// recommend that you retry the request. For more information about volume
  /// status, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-status.html">Monitor
  /// the status of your volumes</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// <i>Events</i>: Reflect the cause of a volume status and might require you
  /// to take action. For example, if your volume returns an
  /// <code>impaired</code> status, then the volume event might be
  /// <code>potential-data-inconsistency</code>. This means that your volume has
  /// been affected by an issue with the underlying host, has all I/O operations
  /// disabled, and might have inconsistent data.
  ///
  /// <i>Actions</i>: Reflect the actions you might have to take in response to
  /// an event. For example, if the status of the volume is
  /// <code>impaired</code> and the volume event shows
  /// <code>potential-data-inconsistency</code>, then the action shows
  /// <code>enable-volume-io</code>. This means that you may want to enable the
  /// I/O operations for the volume by calling the <a>EnableVolumeIO</a> action
  /// and then check the volume for data consistency.
  ///
  /// Volume status is based on the volume status checks, and does not reflect
  /// the volume state. Therefore, volume status does not indicate volumes in
  /// the <code>error</code> state (for example, when a volume is incapable of
  /// accepting I/O.)
  /// <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>action.code</code> - The action code for the event (for example,
  /// <code>enable-volume-io</code>).
  /// </li>
  /// <li>
  /// <code>action.description</code> - A description of the action.
  /// </li>
  /// <li>
  /// <code>action.event-id</code> - The event ID associated with the action.
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the instance.
  /// </li>
  /// <li>
  /// <code>event.description</code> - A description of the event.
  /// </li>
  /// <li>
  /// <code>event.event-id</code> - The event ID.
  /// </li>
  /// <li>
  /// <code>event.event-type</code> - The event type (for
  /// <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for
  /// <code>io-performance</code>: <code>io-performance:degraded</code> |
  /// <code>io-performance:severely-degraded</code> |
  /// <code>io-performance:stalled</code>).
  /// </li>
  /// <li>
  /// <code>event.not-after</code> - The latest end time for the event.
  /// </li>
  /// <li>
  /// <code>event.not-before</code> - The earliest start time for the event.
  /// </li>
  /// <li>
  /// <code>volume-status.details-name</code> - The cause for
  /// <code>volume-status.status</code> (<code>io-enabled</code> |
  /// <code>io-performance</code>).
  /// </li>
  /// <li>
  /// <code>volume-status.details-status</code> - The status of
  /// <code>volume-status.details-name</code> (for <code>io-enabled</code>:
  /// <code>passed</code> | <code>failed</code>; for
  /// <code>io-performance</code>: <code>normal</code> | <code>degraded</code> |
  /// <code>severely-degraded</code> | <code>stalled</code>).
  /// </li>
  /// <li>
  /// <code>volume-status.status</code> - The status of the volume
  /// (<code>ok</code> | <code>impaired</code> | <code>warning</code> |
  /// <code>insufficient-data</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// This value can be between 5 and 1,000; if the value is larger than 1,000,
  /// only 1,000 results are returned. If this parameter is not used, then all
  /// items are returned. You cannot specify this parameter and the volume IDs
  /// parameter in the same request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [volumeIds] :
  /// The IDs of the volumes.
  ///
  /// Default: Describes all your volumes.
  Future<DescribeVolumeStatusResult> describeVolumeStatus({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? volumeIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EBS volumes or all of your EBS volumes.
  ///
  /// If you are describing a long list of volumes, we recommend that you
  /// paginate the output to make the list more manageable. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// For more information about EBS volumes, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes.html">Amazon
  /// EBS volumes</a> in the <i>Amazon EBS User Guide</i>.
  /// <important>
  /// We strongly recommend using only paginated requests. Unpaginated requests
  /// are susceptible to throttling and timeouts.
  /// </important> <note>
  /// The order of the elements in the response, including those within nested
  /// structures, might vary. Applications should not assume the elements appear
  /// in a particular order.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.attach-time</code> - The time stamp when the attachment
  /// initiated.
  /// </li>
  /// <li>
  /// <code>attachment.delete-on-termination</code> - Whether the volume is
  /// deleted on instance termination.
  /// </li>
  /// <li>
  /// <code>attachment.device</code> - The device name specified in the block
  /// device mapping (for example, <code>/dev/sda1</code>).
  /// </li>
  /// <li>
  /// <code>attachment.instance-id</code> - The ID of the instance the volume is
  /// attached to.
  /// </li>
  /// <li>
  /// <code>attachment.status</code> - The attachment state
  /// (<code>attaching</code> | <code>attached</code> | <code>detaching</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone in which the volume
  /// was created.
  /// </li>
  /// <li>
  /// <code>create-time</code> - The time stamp when the volume was created.
  /// </li>
  /// <li>
  /// <code>encrypted</code> - Indicates whether the volume is encrypted
  /// (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>multi-attach-enabled</code> - Indicates whether the volume is
  /// enabled for Multi-Attach (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>fast-restored</code> - Indicates whether the volume was created from
  /// a snapshot that is enabled for fast snapshot restore (<code>true</code> |
  /// <code>false</code>).
  /// </li>
  /// <li>
  /// <code>size</code> - The size of the volume, in GiB.
  /// </li>
  /// <li>
  /// <code>snapshot-id</code> - The snapshot from which the volume was created.
  /// </li>
  /// <li>
  /// <code>status</code> - The state of the volume (<code>creating</code> |
  /// <code>available</code> | <code>in-use</code> | <code>deleting</code> |
  /// <code>deleted</code> | <code>error</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>volume-id</code> - The volume ID.
  /// </li>
  /// <li>
  /// <code>volume-type</code> - The Amazon EBS volume type (<code>gp2</code> |
  /// <code>gp3</code> | <code>io1</code> | <code>io2</code> | <code>st1</code>
  /// | <code>sc1</code>| <code>standard</code>)
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of volumes to return for this request. This value can
  /// be between 5 and 500; if you specify a value larger than 500, only 500
  /// items are returned. If this parameter is not used, then all items are
  /// returned. You cannot specify this parameter and the volume IDs parameter
  /// in the same request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned from the previous request.
  ///
  /// Parameter [volumeIds] :
  /// The volume IDs.
  Future<DescribeVolumesResult> describeVolumes({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? volumeIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the most recent volume modification request for the specified
  /// EBS volumes.
  ///
  /// If a volume has never been modified, some information in the output will
  /// be null. If a volume has been modified more than once, the output includes
  /// only the most recent modification request.
  ///
  /// You can also use CloudWatch Events to check the status of a modification
  /// to an EBS volume. For information about CloudWatch Events, see the <a
  /// href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon
  /// CloudWatch Events User Guide</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-modifications.html">Monitor
  /// the progress of volume modifications</a> in the <i>Amazon EBS User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>modification-state</code> - The current modification state
  /// (modifying | optimizing | completed | failed).
  /// </li>
  /// <li>
  /// <code>original-iops</code> - The original IOPS rate of the volume.
  /// </li>
  /// <li>
  /// <code>original-size</code> - The original size of the volume, in GiB.
  /// </li>
  /// <li>
  /// <code>original-volume-type</code> - The original volume type of the volume
  /// (standard | io1 | io2 | gp2 | sc1 | st1).
  /// </li>
  /// <li>
  /// <code>originalMultiAttachEnabled</code> - Indicates whether Multi-Attach
  /// support was enabled (true | false).
  /// </li>
  /// <li>
  /// <code>start-time</code> - The modification start time.
  /// </li>
  /// <li>
  /// <code>target-iops</code> - The target IOPS rate of the volume.
  /// </li>
  /// <li>
  /// <code>target-size</code> - The target size of the volume, in GiB.
  /// </li>
  /// <li>
  /// <code>target-volume-type</code> - The target volume type of the volume
  /// (standard | io1 | io2 | gp2 | sc1 | st1).
  /// </li>
  /// <li>
  /// <code>targetMultiAttachEnabled</code> - Indicates whether Multi-Attach
  /// support is to be enabled (true | false).
  /// </li>
  /// <li>
  /// <code>volume-id</code> - The ID of the volume.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results (up to a limit of 500) to be returned in a
  /// paginated request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned by a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [volumeIds] :
  /// The IDs of the volumes.
  Future<DescribeVolumesModificationsResult> describeVolumesModifications({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? volumeIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified VPC. You can specify
  /// only one attribute at a time.
  ///
  /// Parameter [attribute] :
  /// The VPC attribute.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeVpcAttributeResult> describeVpcAttribute({
    required VpcAttributeName attribute,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Describes the ClassicLink status of the specified VPCs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>is-classic-link-enabled</code> - Whether the VPC is enabled for
  /// ClassicLink (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpcIds] :
  /// The VPCs for which you want to describe the ClassicLink status.
  Future<DescribeVpcClassicLinkResult> describeVpcClassicLink({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? vpcIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Describes the ClassicLink DNS support status of one or more VPCs. If
  /// enabled, the DNS hostname of a linked EC2-Classic instance resolves to its
  /// private IP address when addressed from an instance in the VPC to which
  /// it's linked. Similarly, the DNS hostname of an instance in a VPC resolves
  /// to its private IP address when addressed from a linked EC2-Classic
  /// instance.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [vpcIds] :
  /// The IDs of the VPCs.
  Future<DescribeVpcClassicLinkDnsSupportResult>
      describeVpcClassicLinkDnsSupport({
    int? maxResults,
    String? nextToken,
    List<String>? vpcIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the connection notifications for VPC endpoints and VPC endpoint
  /// services.
  ///
  /// Parameter [connectionNotificationId] :
  /// The ID of the notification.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>connection-notification-arn</code> - The ARN of the SNS topic for
  /// the notification.
  /// </li>
  /// <li>
  /// <code>connection-notification-id</code> - The ID of the notification.
  /// </li>
  /// <li>
  /// <code>connection-notification-state</code> - The state of the notification
  /// (<code>Enabled</code> | <code>Disabled</code>).
  /// </li>
  /// <li>
  /// <code>connection-notification-type</code> - The type of notification
  /// (<code>Topic</code>).
  /// </li>
  /// <li>
  /// <code>service-id</code> - The ID of the endpoint service.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another request with the returned
  /// <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeVpcEndpointConnectionNotificationsResult>
      describeVpcEndpointConnectionNotifications({
    String? connectionNotificationId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the VPC endpoint connections to your VPC endpoint services,
  /// including any endpoints that are pending your acceptance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>ip-address-type</code> - The IP address type (<code>ipv4</code> |
  /// <code>ipv6</code>).
  /// </li>
  /// <li>
  /// <code>service-id</code> - The ID of the service.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-owner</code> - The ID of the Amazon Web Services
  /// account ID that owns the endpoint.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-state</code> - The state of the endpoint
  /// (<code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>available</code> | <code>deleting</code> | <code>deleted</code> |
  /// <code>rejected</code> | <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-id</code> - The ID of the endpoint.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1,000; if <code>MaxResults</code> is given a value
  /// larger than 1,000, only 1,000 results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeVpcEndpointConnectionsResult> describeVpcEndpointConnections({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the VPC endpoint service configurations in your account (your
  /// services).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>service-name</code> - The name of the service.
  /// </li>
  /// <li>
  /// <code>service-id</code> - The ID of the service.
  /// </li>
  /// <li>
  /// <code>service-state</code> - The state of the service
  /// (<code>Pending</code> | <code>Available</code> | <code>Deleting</code> |
  /// <code>Deleted</code> | <code>Failed</code>).
  /// </li>
  /// <li>
  /// <code>supported-ip-address-types</code> - The IP address type
  /// (<code>ipv4</code> | <code>ipv6</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1,000; if <code>MaxResults</code> is given a value
  /// larger than 1,000, only 1,000 results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [serviceIds] :
  /// The IDs of the endpoint services.
  Future<DescribeVpcEndpointServiceConfigurationsResult>
      describeVpcEndpointServiceConfigurations({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? serviceIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the principals (service consumers) that are permitted to
  /// discover your VPC endpoint service.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>principal</code> - The ARN of the principal.
  /// </li>
  /// <li>
  /// <code>principal-type</code> - The principal type (<code>All</code> |
  /// <code>Service</code> | <code>OrganizationUnit</code> |
  /// <code>Account</code> | <code>User</code> | <code>Role</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1,000; if <code>MaxResults</code> is given a value
  /// larger than 1,000, only 1,000 results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeVpcEndpointServicePermissionsResult>
      describeVpcEndpointServicePermissions({
    required String serviceId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes available services to which you can create a VPC endpoint.
  ///
  /// When the service provider and the consumer have different accounts in
  /// multiple Availability Zones, and the consumer views the VPC endpoint
  /// service information, the response only includes the common Availability
  /// Zones. For example, when the service provider account uses
  /// <code>us-east-1a</code> and <code>us-east-1c</code> and the consumer uses
  /// <code>us-east-1a</code> and <code>us-east-1b</code>, the response includes
  /// the VPC endpoint services in the common Availability Zone,
  /// <code>us-east-1a</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>owner</code> - The ID or alias of the Amazon Web Services account
  /// that owns the service.
  /// </li>
  /// <li>
  /// <code>service-name</code> - The name of the service.
  /// </li>
  /// <li>
  /// <code>service-type</code> - The type of service (<code>Interface</code> |
  /// <code>Gateway</code> | <code>GatewayLoadBalancer</code>).
  /// </li>
  /// <li>
  /// <code>supported-ip-address-types</code> - The IP address type
  /// (<code>ipv4</code> | <code>ipv6</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. The request
  /// returns a token that you can specify in a subsequent call to get the next
  /// set of results.
  ///
  /// Constraint: If the value is greater than 1,000, we return only 1,000
  /// items.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of items to return. (You received this token
  /// from a prior call.)
  ///
  /// Parameter [serviceNames] :
  /// The service names.
  Future<DescribeVpcEndpointServicesResult> describeVpcEndpointServices({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? serviceNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>ip-address-type</code> - The IP address type (<code>ipv4</code> |
  /// <code>ipv6</code>).
  /// </li>
  /// <li>
  /// <code>service-name</code> - The name of the service.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the endpoint resides.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-id</code> - The ID of the endpoint.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-state</code> - The state of the endpoint
  /// (<code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>available</code> | <code>deleting</code> | <code>deleted</code> |
  /// <code>rejected</code> | <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-type</code> - The type of VPC endpoint
  /// (<code>Interface</code> | <code>Gateway</code> |
  /// <code>GatewayLoadBalancer</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. The request
  /// returns a token that you can specify in a subsequent call to get the next
  /// set of results.
  ///
  /// Constraint: If the value is greater than 1,000, we return only 1,000
  /// items.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of items to return. (You received this token
  /// from a prior call.)
  ///
  /// Parameter [vpcEndpointIds] :
  /// The IDs of the VPC endpoints.
  Future<DescribeVpcEndpointsResult> describeVpcEndpoints({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? vpcEndpointIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPC peering connections.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
  /// accepter VPC.
  /// </li>
  /// <li>
  /// <code>accepter-vpc-info.owner-id</code> - The ID of the Amazon Web
  /// Services account that owns the accepter VPC.
  /// </li>
  /// <li>
  /// <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.
  /// </li>
  /// <li>
  /// <code>expiration-time</code> - The expiration date and time for the VPC
  /// peering connection.
  /// </li>
  /// <li>
  /// <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
  /// requester's VPC.
  /// </li>
  /// <li>
  /// <code>requester-vpc-info.owner-id</code> - The ID of the Amazon Web
  /// Services account that owns the requester VPC.
  /// </li>
  /// <li>
  /// <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.
  /// </li>
  /// <li>
  /// <code>status-code</code> - The status of the VPC peering connection
  /// (<code>pending-acceptance</code> | <code>failed</code> |
  /// <code>expired</code> | <code>provisioning</code> | <code>active</code> |
  /// <code>deleting</code> | <code>deleted</code> | <code>rejected</code>).
  /// </li>
  /// <li>
  /// <code>status-message</code> - A message that provides more information
  /// about the status of the VPC peering connection, if applicable.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-peering-connection-id</code> - The ID of the VPC peering
  /// connection.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [vpcPeeringConnectionIds] :
  /// The IDs of the VPC peering connections.
  ///
  /// Default: Describes all your VPC peering connections.
  Future<DescribeVpcPeeringConnectionsResult> describeVpcPeeringConnections({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? vpcPeeringConnectionIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPCs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block
  /// you specify must exactly match the VPC's CIDR block for information to be
  /// returned for the VPC. Must contain the slash followed by one or two digits
  /// (for example, <code>/28</code>).
  /// </li>
  /// <li>
  /// <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block
  /// associated with the VPC.
  /// </li>
  /// <li>
  /// <code>cidr-block-association.association-id</code> - The association ID
  /// for an IPv4 CIDR block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>cidr-block-association.state</code> - The state of an IPv4 CIDR
  /// block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>dhcp-options-id</code> - The ID of a set of DHCP options.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
  /// block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.ipv6-pool</code> - The ID of the IPv6
  /// address pool from which the IPv6 CIDR block is allocated.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.association-id</code> - The association
  /// ID for an IPv6 CIDR block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
  /// block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>is-default</code> - Indicates whether the VPC is the default VPC.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the Amazon Web Services account that
  /// owns the VPC.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the VPC (<code>pending</code> |
  /// <code>available</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [vpcIds] :
  /// The IDs of the VPCs.
  ///
  /// Default: Describes all your VPCs.
  Future<DescribeVpcsResult> describeVpcs({
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
    List<String>? vpcIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPN connections.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>customer-gateway-configuration</code> - The configuration
  /// information for the customer gateway.
  /// </li>
  /// <li>
  /// <code>customer-gateway-id</code> - The ID of a customer gateway associated
  /// with the VPN connection.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the VPN connection (<code>pending</code>
  /// | <code>available</code> | <code>deleting</code> | <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>option.static-routes-only</code> - Indicates whether the connection
  /// has static routes only. Used for devices that do not support Border
  /// Gateway Protocol (BGP).
  /// </li>
  /// <li>
  /// <code>route.destination-cidr-block</code> - The destination CIDR block.
  /// This corresponds to the subnet used in a customer data center.
  /// </li>
  /// <li>
  /// <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated
  /// with a BGP device.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of VPN connection. Currently the only
  /// supported type is <code>ipsec.1</code>.
  /// </li>
  /// <li>
  /// <code>vpn-connection-id</code> - The ID of the VPN connection.
  /// </li>
  /// <li>
  /// <code>vpn-gateway-id</code> - The ID of a virtual private gateway
  /// associated with the VPN connection.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of a transit gateway associated
  /// with the VPN connection.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpnConnectionIds] :
  /// One or more VPN connection IDs.
  ///
  /// Default: Describes your VPN connections.
  Future<DescribeVpnConnectionsResult> describeVpnConnections({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? vpnConnectionIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your virtual private gateways.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon
  /// Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the
  /// Amazon side of the gateway.
  /// </li>
  /// <li>
  /// <code>attachment.state</code> - The current state of the attachment
  /// between the gateway and the VPC (<code>attaching</code> |
  /// <code>attached</code> | <code>detaching</code> | <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>attachment.vpc-id</code> - The ID of an attached VPC.
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone for the virtual
  /// private gateway (if applicable).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the virtual private gateway
  /// (<code>pending</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of virtual private gateway. Currently the
  /// only supported type is <code>ipsec.1</code>.
  /// </li>
  /// <li>
  /// <code>vpn-gateway-id</code> - The ID of the virtual private gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpnGatewayIds] :
  /// One or more virtual private gateway IDs.
  ///
  /// Default: Describes all your virtual private gateways.
  Future<DescribeVpnGatewaysResult> describeVpnGateways({
    bool? dryRun,
    List<Filter>? filters,
    List<String>? vpnGatewayIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the
  /// instance has been unlinked, the VPC security groups are no longer
  /// associated with it. An instance is automatically unlinked from a VPC when
  /// it's stopped.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance to unlink from the VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to which the instance is linked.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DetachClassicLinkVpcResult> detachClassicLinkVpc({
    required String instanceId,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches an internet gateway from a VPC, disabling connectivity between
  /// the internet and the VPC. The VPC must not contain any running instances
  /// with Elastic IP addresses or public IPv4 addresses.
  ///
  /// Parameter [internetGatewayId] :
  /// The ID of the internet gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> detachInternetGateway({
    required String internetGatewayId,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches a network interface from an instance.
  ///
  /// Parameter [attachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Specifies whether to force a detachment.
  /// <note>
  /// <ul>
  /// <li>
  /// Use the <code>Force</code> parameter only as a last resort to detach a
  /// network interface from a failed instance.
  /// </li>
  /// <li>
  /// If you use the <code>Force</code> parameter to detach a network interface,
  /// you might not be able to attach a different network interface to the same
  /// index on the instance without first stopping and starting the instance.
  /// </li>
  /// <li>
  /// If you force the detachment of a network interface, the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">instance
  /// metadata</a> might not get updated. This means that the attributes
  /// associated with the detached network interface might still be visible. The
  /// instance metadata will get updated when you stop and start the instance.
  /// </li>
  /// </ul> </note>
  Future<void> detachNetworkInterface({
    required String attachmentId,
    bool? dryRun,
    bool? force,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches the specified Amazon Web Services Verified Access trust provider
  /// from the specified Amazon Web Services Verified Access instance.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  ///
  /// Parameter [verifiedAccessTrustProviderId] :
  /// The ID of the Verified Access trust provider.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DetachVerifiedAccessTrustProviderResult>
      detachVerifiedAccessTrustProvider({
    required String verifiedAccessInstanceId,
    required String verifiedAccessTrustProviderId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches an EBS volume from an instance. Make sure to unmount any file
  /// systems on the device within your operating system before detaching the
  /// volume. Failure to do so can result in the volume becoming stuck in the
  /// <code>busy</code> state while detaching. If this happens, detachment can
  /// be delayed indefinitely until you unmount the volume, force detachment,
  /// reboot the instance, or all three. If an EBS volume is the root device of
  /// an instance, it can't be detached while the instance is running. To detach
  /// the root volume, stop the instance first.
  ///
  /// When a volume with an Amazon Web Services Marketplace product code is
  /// detached from an instance, the product code is no longer associated with
  /// the instance.
  ///
  /// You can't detach or force detach volumes that are attached to Amazon ECS
  /// or Fargate tasks. Attempting to do this results in the
  /// <code>UnsupportedOperationException</code> exception with the <code>Unable
  /// to detach volume attached to ECS tasks</code> error message.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-detaching-volume.html">Detach
  /// an Amazon EBS volume</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [device] :
  /// The device name.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Forces detachment if the previous detachment attempt did not occur cleanly
  /// (for example, logging into an instance, unmounting the volume, and
  /// detaching normally). This option can lead to data loss or a corrupted file
  /// system. Use this option only as a last resort to detach a volume from a
  /// failed instance. The instance won't have an opportunity to flush file
  /// system caches or file system metadata. If you use this option, you must
  /// perform file system check and repair procedures.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance. If you are detaching a Multi-Attach enabled
  /// volume, you must specify an instance ID.
  Future<VolumeAttachment> detachVolume({
    required String volumeId,
    String? device,
    bool? dryRun,
    bool? force,
    String? instanceId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches a virtual private gateway from a VPC. You do this if you're
  /// planning to turn off the VPC and not use it anymore. You can confirm a
  /// virtual private gateway has been completely detached from a VPC by
  /// describing the virtual private gateway (any attachments to the virtual
  /// private gateway are also described).
  ///
  /// You must wait for the attachment's state to switch to
  /// <code>detached</code> before you can delete the VPC or attach a different
  /// VPC to the virtual private gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> detachVpnGateway({
    required String vpcId,
    required String vpnGatewayId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables Elastic IP address transfer. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer
  /// Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// Parameter [allocationId] :
  /// The allocation ID of an Elastic IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableAddressTransferResult> disableAddressTransfer({
    required String allocationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables Infrastructure Performance metric subscriptions.
  ///
  /// Parameter [destination] :
  /// The target Region or Availability Zone that the metric subscription is
  /// disabled for. For example, <code>eu-north-1</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [metric] :
  /// The metric used for the disabled subscription.
  ///
  /// Parameter [source] :
  /// The source Region or Availability Zone that the metric subscription is
  /// disabled for. For example, <code>us-east-1</code>.
  ///
  /// Parameter [statistic] :
  /// The statistic used for the disabled subscription.
  Future<DisableAwsNetworkPerformanceMetricSubscriptionResult>
      disableAwsNetworkPerformanceMetricSubscription({
    String? destination,
    bool? dryRun,
    MetricType? metric,
    String? source,
    StatisticType? statistic,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables EBS encryption by default for your account in the current Region.
  ///
  /// After you disable encryption by default, you can still create encrypted
  /// volumes by enabling encryption when you create each volume.
  ///
  /// Disabling encryption by default does not change the encryption status of
  /// your existing volumes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableEbsEncryptionByDefaultResult> disableEbsEncryptionByDefault({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Discontinue Windows fast launch for a Windows AMI, and clean up existing
  /// pre-provisioned snapshots. After you disable Windows fast launch, the AMI
  /// uses the standard launch process for each new instance. Amazon EC2 must
  /// remove all pre-provisioned snapshots before you can enable Windows fast
  /// launch again.
  /// <note>
  /// You can only change these settings for Windows AMIs that you own or that
  /// have been shared with you.
  /// </note>
  ///
  /// Parameter [imageId] :
  /// Specify the ID of the image for which to disable Windows fast launch.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Forces the image settings to turn off Windows fast launch for your Windows
  /// AMI. This parameter overrides any errors that are encountered while
  /// cleaning up resources in your account.
  Future<DisableFastLaunchResult> disableFastLaunch({
    required String imageId,
    bool? dryRun,
    bool? force,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables fast snapshot restores for the specified snapshots in the
  /// specified Availability Zones.
  ///
  /// Parameter [availabilityZones] :
  /// One or more Availability Zones. For example, <code>us-east-2a</code>.
  ///
  /// Parameter [sourceSnapshotIds] :
  /// The IDs of one or more snapshots. For example,
  /// <code>snap-1234567890abcdef0</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableFastSnapshotRestoresResult> disableFastSnapshotRestores({
    required List<String> availabilityZones,
    required List<String> sourceSnapshotIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Sets the AMI state to <code>disabled</code> and removes all launch
  /// permissions from the AMI. A disabled AMI can't be used for instance
  /// launches.
  ///
  /// A disabled AMI can't be shared. If an AMI was public or previously shared,
  /// it is made private. If an AMI was shared with an Amazon Web Services
  /// account, organization, or Organizational Unit, they lose access to the
  /// disabled AMI.
  ///
  /// A disabled AMI does not appear in <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html">DescribeImages</a>
  /// API calls by default.
  ///
  /// Only the AMI owner can disable an AMI.
  ///
  /// You can re-enable a disabled AMI using <a
  /// href="http://amazonaws.com/AWSEC2/latest/APIReference/API_EnableImage.html">EnableImage</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/disable-an-ami.html">Disable
  /// an AMI</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableImageResult> disableImage({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables <i>block public access for AMIs</i> at the account level in the
  /// specified Amazon Web Services Region. This removes the <i>block public
  /// access</i> restriction from your account. With the restriction removed,
  /// you can publicly share your AMIs in the specified Amazon Web Services
  /// Region.
  ///
  /// The API can take up to 10 minutes to configure this setting. During this
  /// time, if you run <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetImageBlockPublicAccessState.html">GetImageBlockPublicAccessState</a>,
  /// the response will be <code>block-new-sharing</code>. When the API has
  /// completed the configuration, the response will be <code>unblocked</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html#block-public-access-to-amis">Block
  /// public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableImageBlockPublicAccessResult> disableImageBlockPublicAccess({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the deprecation of the specified AMI.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate
  /// an AMI</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableImageDeprecationResult> disableImageDeprecation({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables deregistration protection for an AMI. When deregistration
  /// protection is disabled, the AMI can be deregistered.
  ///
  /// If you chose to include a 24-hour cooldown period when you enabled
  /// deregistration protection for the AMI, then, when you disable
  /// deregistration protection, you won’t immediately be able to deregister the
  /// AMI.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html#ami-deregistration-protection">Protect
  /// an AMI from deregistration</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableImageDeregistrationProtectionResult>
      disableImageDeregistrationProtection({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disable the IPAM account. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html">Enable
  /// integration with Organizations</a> in the <i>Amazon VPC IPAM User
  /// Guide</i>.
  ///
  /// Parameter [delegatedAdminAccountId] :
  /// The Organizations member account ID that you want to disable as IPAM
  /// account.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableIpamOrganizationAdminAccountResult>
      disableIpamOrganizationAdminAccount({
    required String delegatedAdminAccountId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables access to the EC2 serial console of all instances for your
  /// account. By default, access to the EC2 serial console is disabled for your
  /// account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage
  /// account access to the EC2 serial console</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableSerialConsoleAccessResult> disableSerialConsoleAccess({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables the <i>block public access for snapshots</i> setting at the
  /// account level for the specified Amazon Web Services Region. After you
  /// disable block public access for snapshots in a Region, users can publicly
  /// share snapshots in that Region.
  ///
  /// If block public access is enabled in <code>block-all-sharing</code> mode,
  /// and you disable block public access, all snapshots that were previously
  /// publicly shared are no longer treated as private and they become publicly
  /// accessible again.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/block-public-access-snapshots.html">
  /// Block public access for snapshots</a> in the <i>Amazon EBS User Guide</i>
  /// .
  /// <p/>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableSnapshotBlockPublicAccessResult>
      disableSnapshotBlockPublicAccess({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables the specified resource attachment from propagating routes to the
  /// specified propagation route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the propagation route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableAnnouncementId] :
  /// The ID of the route table announcement.
  Future<DisableTransitGatewayRouteTablePropagationResult>
      disableTransitGatewayRouteTablePropagation({
    required String transitGatewayRouteTableId,
    bool? dryRun,
    String? transitGatewayAttachmentId,
    String? transitGatewayRouteTableAnnouncementId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables a virtual private gateway (VGW) from propagating routes to a
  /// specified route table of a VPC.
  ///
  /// Parameter [gatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> disableVgwRoutePropagation({
    required String gatewayId,
    required String routeTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC
  /// that has EC2-Classic instances linked to it.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableVpcClassicLinkResult> disableVpcClassicLink({
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames
  /// resolve to public IP addresses when addressed between a linked EC2-Classic
  /// instance and instances in the VPC to which it's linked.
  ///
  /// You must specify a VPC ID in the request.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  Future<DisableVpcClassicLinkDnsSupportResult>
      disableVpcClassicLinkDnsSupport({
    String? vpcId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates an Elastic IP address from the instance or network interface
  /// it's associated with.
  ///
  /// This is an idempotent operation. If you perform the operation more than
  /// once, Amazon EC2 doesn't return an error.
  ///
  /// Parameter [associationId] :
  /// The association ID. This parameter is required.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [publicIp] :
  /// Deprecated.
  Future<void> disassociateAddress({
    String? associationId,
    bool? dryRun,
    String? publicIp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a target network from the specified Client VPN endpoint.
  /// When you disassociate the last target network from a Client VPN, the
  /// following happens:
  ///
  /// <ul>
  /// <li>
  /// The route that was automatically added for the VPC is deleted
  /// </li>
  /// <li>
  /// All active client connections are terminated
  /// </li>
  /// <li>
  /// New client connections are disallowed
  /// </li>
  /// <li>
  /// The Client VPN endpoint's status changes to <code>pending-associate</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [associationId] :
  /// The ID of the target network association.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint from which to disassociate the target
  /// network.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateClientVpnTargetNetworkResult>
      disassociateClientVpnTargetNetwork({
    required String associationId,
    required String clientVpnEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates an IAM role from an Certificate Manager (ACM) certificate.
  /// Disassociating an IAM role from an ACM certificate removes the Amazon S3
  /// object that contains the certificate, certificate chain, and encrypted
  /// private key from the Amazon S3 bucket. It also revokes the IAM role's
  /// permission to use the KMS key used to encrypt the private key. This
  /// effectively revokes the role's permission to use the certificate.
  ///
  /// Parameter [certificateArn] :
  /// The ARN of the ACM certificate from which to disassociate the IAM role.
  ///
  /// Parameter [roleArn] :
  /// The ARN of the IAM role to disassociate.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateEnclaveCertificateIamRoleResult>
      disassociateEnclaveCertificateIamRole({
    required String certificateArn,
    required String roleArn,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates an IAM instance profile from a running or stopped instance.
  ///
  /// Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
  /// ID.
  ///
  /// Parameter [associationId] :
  /// The ID of the IAM instance profile association.
  Future<DisassociateIamInstanceProfileResult> disassociateIamInstanceProfile({
    required String associationId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates one or more targets from an event window.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define
  /// event windows for scheduled events</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [associationTarget] :
  /// One or more targets to disassociate from the specified event window.
  ///
  /// Parameter [instanceEventWindowId] :
  /// The ID of the event window.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateInstanceEventWindowResult>
      disassociateInstanceEventWindow({
    required InstanceEventWindowDisassociationRequest associationTarget,
    required String instanceEventWindowId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Remove the association between your Autonomous System Number (ASN) and
  /// your BYOIP CIDR. You may want to use this action to disassociate an ASN
  /// from a CIDR or if you want to swap ASNs. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial:
  /// Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.
  ///
  /// Parameter [asn] :
  /// A public 2-byte or 4-byte ASN.
  ///
  /// Parameter [cidr] :
  /// A BYOIP CIDR.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateIpamByoasnResult> disassociateIpamByoasn({
    required String asn,
    required String cidr,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a resource discovery from an Amazon VPC IPAM. A resource
  /// discovery is an IPAM component that enables IPAM to manage and monitor
  /// resources that belong to the owning account.
  ///
  /// Parameter [ipamResourceDiscoveryAssociationId] :
  /// A resource discovery association ID.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateIpamResourceDiscoveryResult>
      disassociateIpamResourceDiscovery({
    required String ipamResourceDiscoveryAssociationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates secondary Elastic IP addresses (EIPs) from a public NAT
  /// gateway. You cannot disassociate your primary EIP. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-edit-secondary">Edit
  /// secondary IP address associations</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// While disassociating is in progress, you cannot associate/disassociate
  /// additional EIPs while the connections are being drained. You are, however,
  /// allowed to delete the NAT gateway.
  ///
  /// An EIP is released only at the end of MaxDrainDurationSeconds. It stays
  /// associated and supports the existing connections but does not support any
  /// new connections (new connections are distributed across the remaining
  /// associated EIPs). As the existing connections drain out, the EIPs (and the
  /// corresponding private IP addresses mapped to them) are released.
  ///
  /// Parameter [associationIds] :
  /// The association IDs of EIPs that have been associated with the NAT
  /// gateway.
  ///
  /// Parameter [natGatewayId] :
  /// The ID of the NAT gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxDrainDurationSeconds] :
  /// The maximum amount of time to wait (in seconds) before forcibly releasing
  /// the IP addresses if connections are still in progress. Default value is
  /// 350 seconds.
  Future<DisassociateNatGatewayAddressResult> disassociateNatGatewayAddress({
    required List<String> associationIds,
    required String natGatewayId,
    bool? dryRun,
    int? maxDrainDurationSeconds,
  }) async {
    _s.validateNumRange(
      'maxDrainDurationSeconds',
      maxDrainDurationSeconds,
      1,
      4000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a subnet or gateway from a route table.
  ///
  /// After you perform this action, the subnet no longer uses the routes in the
  /// route table. Instead, it uses the routes in the VPC's main route table.
  /// For more information about route tables, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [associationId] :
  /// The association ID representing the current association between the route
  /// table and subnet or gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> disassociateRouteTable({
    required String associationId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a CIDR block from a subnet. Currently, you can disassociate
  /// an IPv6 CIDR block only. You must detach or delete all gateways and
  /// resources that are associated with the CIDR block before you can
  /// disassociate it.
  ///
  /// Parameter [associationId] :
  /// The association ID for the CIDR block.
  Future<DisassociateSubnetCidrBlockResult> disassociateSubnetCidrBlock({
    required String associationId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates the specified subnets from the transit gateway multicast
  /// domain.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets;
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateTransitGatewayMulticastDomainResult>
      disassociateTransitGatewayMulticastDomain({
    required List<String> subnetIds,
    required String transitGatewayAttachmentId,
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes the association between an an attachment and a policy table.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment to disassociate from the policy
  /// table.
  ///
  /// Parameter [transitGatewayPolicyTableId] :
  /// The ID of the disassociated policy table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateTransitGatewayPolicyTableResult>
      disassociateTransitGatewayPolicyTable({
    required String transitGatewayAttachmentId,
    required String transitGatewayPolicyTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a resource attachment from a transit gateway route table.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateTransitGatewayRouteTableResult>
      disassociateTransitGatewayRouteTable({
    required String transitGatewayAttachmentId,
    required String transitGatewayRouteTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes an association between a branch network interface with a trunk
  /// network interface.
  ///
  /// Parameter [associationId] :
  /// The ID of the association
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateTrunkInterfaceResult> disassociateTrunkInterface({
    required String associationId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you
  /// must specify its association ID. You can get the association ID by using
  /// <a>DescribeVpcs</a>. You must detach or delete all gateways and resources
  /// that are associated with the CIDR block before you can disassociate it.
  ///
  /// You cannot disassociate the CIDR block with which you originally created
  /// the VPC (the primary CIDR block).
  ///
  /// Parameter [associationId] :
  /// The association ID for the CIDR block.
  Future<DisassociateVpcCidrBlockResult> disassociateVpcCidrBlock({
    required String associationId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables Elastic IP address transfer. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer
  /// Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// Parameter [allocationId] :
  /// The allocation ID of an Elastic IP address.
  ///
  /// Parameter [transferAccountId] :
  /// The ID of the account that you want to transfer the Elastic IP address to.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableAddressTransferResult> enableAddressTransfer({
    required String allocationId,
    required String transferAccountId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables Infrastructure Performance subscriptions.
  ///
  /// Parameter [destination] :
  /// The target Region (like <code>us-east-2</code>) or Availability Zone ID
  /// (like <code>use2-az2</code>) that the metric subscription is enabled for.
  /// If you use Availability Zone IDs, the Source and Destination Availability
  /// Zones must be in the same Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [metric] :
  /// The metric used for the enabled subscription.
  ///
  /// Parameter [source] :
  /// The source Region (like <code>us-east-1</code>) or Availability Zone ID
  /// (like <code>use1-az1</code>) that the metric subscription is enabled for.
  /// If you use Availability Zone IDs, the Source and Destination Availability
  /// Zones must be in the same Region.
  ///
  /// Parameter [statistic] :
  /// The statistic used for the enabled subscription.
  Future<EnableAwsNetworkPerformanceMetricSubscriptionResult>
      enableAwsNetworkPerformanceMetricSubscription({
    String? destination,
    bool? dryRun,
    MetricType? metric,
    String? source,
    StatisticType? statistic,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables EBS encryption by default for your account in the current Region.
  ///
  /// After you enable encryption by default, the EBS volumes that you create
  /// are always encrypted, either using the default KMS key or the KMS key that
  /// you specified when you created each volume. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// You can specify the default KMS key for encryption by default using
  /// <a>ModifyEbsDefaultKmsKeyId</a> or <a>ResetEbsDefaultKmsKeyId</a>.
  ///
  /// Enabling encryption by default has no effect on the encryption status of
  /// your existing volumes.
  ///
  /// After you enable encryption by default, you can no longer launch instances
  /// using instance types that do not support encryption. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances">Supported
  /// instance types</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableEbsEncryptionByDefaultResult> enableEbsEncryptionByDefault({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// When you enable Windows fast launch for a Windows AMI, images are
  /// pre-provisioned, using snapshots to launch instances up to 65% faster. To
  /// create the optimized Windows image, Amazon EC2 launches an instance and
  /// runs through Sysprep steps, rebooting as required. Then it creates a set
  /// of reserved snapshots that are used for subsequent launches. The reserved
  /// snapshots are automatically replenished as they are used, depending on
  /// your settings for launch frequency.
  /// <note>
  /// You can only change these settings for Windows AMIs that you own or that
  /// have been shared with you.
  /// </note>
  ///
  /// Parameter [imageId] :
  /// Specify the ID of the image for which to enable Windows fast launch.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplate] :
  /// The launch template to use when launching Windows instances from
  /// pre-provisioned snapshots. Launch template parameters can include either
  /// the name or ID of the launch template, but not both.
  ///
  /// Parameter [maxParallelLaunches] :
  /// The maximum number of instances that Amazon EC2 can launch at the same
  /// time to create pre-provisioned snapshots for Windows fast launch. Value
  /// must be <code>6</code> or greater.
  ///
  /// Parameter [resourceType] :
  /// The type of resource to use for pre-provisioning the AMI for Windows fast
  /// launch. Supported values include: <code>snapshot</code>, which is the
  /// default value.
  ///
  /// Parameter [snapshotConfiguration] :
  /// Configuration settings for creating and managing the snapshots that are
  /// used for pre-provisioning the AMI for Windows fast launch. The associated
  /// <code>ResourceType</code> must be <code>snapshot</code>.
  Future<EnableFastLaunchResult> enableFastLaunch({
    required String imageId,
    bool? dryRun,
    FastLaunchLaunchTemplateSpecificationRequest? launchTemplate,
    int? maxParallelLaunches,
    String? resourceType,
    FastLaunchSnapshotConfigurationRequest? snapshotConfiguration,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables fast snapshot restores for the specified snapshots in the
  /// specified Availability Zones.
  ///
  /// You get the full benefit of fast snapshot restores after they enter the
  /// <code>enabled</code> state. To get the current state of fast snapshot
  /// restores, use <a>DescribeFastSnapshotRestores</a>. To disable fast
  /// snapshot restores, use <a>DisableFastSnapshotRestores</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-fast-snapshot-restore.html">Amazon
  /// EBS fast snapshot restore</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [availabilityZones] :
  /// One or more Availability Zones. For example, <code>us-east-2a</code>.
  ///
  /// Parameter [sourceSnapshotIds] :
  /// The IDs of one or more snapshots. For example,
  /// <code>snap-1234567890abcdef0</code>. You can specify a snapshot that was
  /// shared with you from another Amazon Web Services account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableFastSnapshotRestoresResult> enableFastSnapshotRestores({
    required List<String> availabilityZones,
    required List<String> sourceSnapshotIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Re-enables a disabled AMI. The re-enabled AMI is marked as
  /// <code>available</code> and can be used for instance launches, appears in
  /// describe operations, and can be shared. Amazon Web Services accounts,
  /// organizations, and Organizational Units that lost access to the AMI when
  /// it was disabled do not regain access automatically. Once the AMI is
  /// available, it can be shared with them again.
  ///
  /// Only the AMI owner can re-enable a disabled AMI.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/disable-an-ami.html">Disable
  /// an AMI</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableImageResult> enableImage({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables <i>block public access for AMIs</i> at the account level in the
  /// specified Amazon Web Services Region. This prevents the public sharing of
  /// your AMIs. However, if you already have public AMIs, they will remain
  /// publicly available.
  ///
  /// The API can take up to 10 minutes to configure this setting. During this
  /// time, if you run <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetImageBlockPublicAccessState.html">GetImageBlockPublicAccessState</a>,
  /// the response will be <code>unblocked</code>. When the API has completed
  /// the configuration, the response will be <code>block-new-sharing</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html#block-public-access-to-amis">Block
  /// public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageBlockPublicAccessState] :
  /// Specify <code>block-new-sharing</code> to enable block public access for
  /// AMIs at the account level in the specified Region. This will block any
  /// attempt to publicly share your AMIs in the specified Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableImageBlockPublicAccessResult> enableImageBlockPublicAccess({
    required ImageBlockPublicAccessEnabledState imageBlockPublicAccessState,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables deprecation of the specified AMI at the specified date and time.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate
  /// an AMI</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [deprecateAt] :
  /// The date and time to deprecate the AMI, in UTC, in the following format:
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z. If you
  /// specify a value for seconds, Amazon EC2 rounds the seconds to the nearest
  /// minute.
  ///
  /// You can’t specify a date in the past. The upper limit for
  /// <code>DeprecateAt</code> is 10 years from now, except for public AMIs,
  /// where the upper limit is 2 years from the creation date.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableImageDeprecationResult> enableImageDeprecation({
    required DateTime deprecateAt,
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables deregistration protection for an AMI. When deregistration
  /// protection is enabled, the AMI can't be deregistered.
  ///
  /// To allow the AMI to be deregistered, you must first disable deregistration
  /// protection using <a>DisableImageDeregistrationProtection</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html#ami-deregistration-protection">Protect
  /// an AMI from deregistration</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [withCooldown] :
  /// If <code>true</code>, enforces deregistration protection for 24 hours
  /// after deregistration protection is disabled.
  Future<EnableImageDeregistrationProtectionResult>
      enableImageDeregistrationProtection({
    required String imageId,
    bool? dryRun,
    bool? withCooldown,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enable an Organizations member account as the IPAM admin account. You
  /// cannot select the Organizations management account as the IPAM admin
  /// account. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html">Enable
  /// integration with Organizations</a> in the <i>Amazon VPC IPAM User
  /// Guide</i>.
  ///
  /// Parameter [delegatedAdminAccountId] :
  /// The Organizations member account ID that you want to enable as the IPAM
  /// account.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableIpamOrganizationAdminAccountResult>
      enableIpamOrganizationAdminAccount({
    required String delegatedAdminAccountId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Establishes a trust relationship between Reachability Analyzer and
  /// Organizations. This operation must be performed by the management account
  /// for the organization.
  ///
  /// After you establish a trust relationship, a user in the management account
  /// or a delegated administrator account can run a cross-account analysis
  /// using resources from the member accounts.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableReachabilityAnalyzerOrganizationSharingResult>
      enableReachabilityAnalyzerOrganizationSharing({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables access to the EC2 serial console of all instances for your
  /// account. By default, access to the EC2 serial console is disabled for your
  /// account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage
  /// account access to the EC2 serial console</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableSerialConsoleAccessResult> enableSerialConsoleAccess({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables or modifies the <i>block public access for snapshots</i> setting
  /// at the account level for the specified Amazon Web Services Region. After
  /// you enable block public access for snapshots in a Region, users can no
  /// longer request public sharing for snapshots in that Region. Snapshots that
  /// are already publicly shared are either treated as private or they remain
  /// publicly shared, depending on the <b>State</b> that you specify.
  ///
  /// If block public access is enabled in <code>block-all-sharing</code> mode,
  /// and you change the mode to <code>block-new-sharing</code>, all snapshots
  /// that were previously publicly shared are no longer treated as private and
  /// they become publicly accessible again.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/block-public-access-snapshots.html">
  /// Block public access for snapshots</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [state] :
  /// The mode in which to enable block public access for snapshots for the
  /// Region. Specify one of the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>block-all-sharing</code> - Prevents all public sharing of snapshots
  /// in the Region. Users in the account will no longer be able to request new
  /// public sharing. Additionally, snapshots that are already publicly shared
  /// are treated as private and they are no longer publicly available.
  /// <note>
  /// If you enable block public access for snapshots in
  /// <code>block-all-sharing</code> mode, it does not change the permissions
  /// for snapshots that are already publicly shared. Instead, it prevents these
  /// snapshots from be publicly visible and publicly accessible. Therefore, the
  /// attributes for these snapshots still indicate that they are publicly
  /// shared, even though they are not publicly available.
  /// </note> </li>
  /// <li>
  /// <code>block-new-sharing</code> - Prevents only new public sharing of
  /// snapshots in the Region. Users in the account will no longer be able to
  /// request new public sharing. However, snapshots that are already publicly
  /// shared, remain publicly available.
  /// </li>
  /// </ul>
  /// <code>unblocked</code> is not a valid value for
  /// <b>EnableSnapshotBlockPublicAccess</b>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableSnapshotBlockPublicAccessResult>
      enableSnapshotBlockPublicAccess({
    required SnapshotBlockPublicAccessState state,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables the specified attachment to propagate routes to the specified
  /// propagation route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the propagation route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableAnnouncementId] :
  /// The ID of the transit gateway route table announcement.
  Future<EnableTransitGatewayRouteTablePropagationResult>
      enableTransitGatewayRouteTablePropagation({
    required String transitGatewayRouteTableId,
    bool? dryRun,
    String? transitGatewayAttachmentId,
    String? transitGatewayRouteTableAnnouncementId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables a virtual private gateway (VGW) to propagate routes to the
  /// specified route table of a VPC.
  ///
  /// Parameter [gatewayId] :
  /// The ID of the virtual private gateway that is attached to a VPC. The
  /// virtual private gateway must be attached to the same VPC that the routing
  /// tables are associated with.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table. The routing table must be associated with the
  /// same VPC that the virtual private gateway is attached to.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> enableVgwRoutePropagation({
    required String gatewayId,
    required String routeTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables I/O operations for a volume that had I/O operations disabled
  /// because the data on the volume was potentially inconsistent.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> enableVolumeIO({
    required String volumeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Enables a VPC for ClassicLink. You can then link EC2-Classic instances to
  /// your ClassicLink-enabled VPC to allow communication over private IP
  /// addresses. You cannot enable your VPC for ClassicLink if any of your VPC
  /// route tables have existing routes for address ranges within the
  /// <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs
  /// in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address
  /// ranges.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableVpcClassicLinkResult> enableVpcClassicLink({
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Enables a VPC to support DNS hostname resolution for ClassicLink. If
  /// enabled, the DNS hostname of a linked EC2-Classic instance resolves to its
  /// private IP address when addressed from an instance in the VPC to which
  /// it's linked. Similarly, the DNS hostname of an instance in a VPC resolves
  /// to its private IP address when addressed from a linked EC2-Classic
  /// instance.
  ///
  /// You must specify a VPC ID in the request.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  Future<EnableVpcClassicLinkDnsSupportResult> enableVpcClassicLinkDnsSupport({
    String? vpcId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Downloads the client certificate revocation list for the specified Client
  /// VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ExportClientVpnClientCertificateRevocationListResult>
      exportClientVpnClientCertificateRevocationList({
    required String clientVpnEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Downloads the contents of the Client VPN endpoint configuration file for
  /// the specified Client VPN endpoint. The Client VPN endpoint configuration
  /// file includes the Client VPN endpoint and certificate information clients
  /// need to establish a connection with the Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ExportClientVpnClientConfigurationResult>
      exportClientVpnClientConfiguration({
    required String clientVpnEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Exports an Amazon Machine Image (AMI) to a VM file. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting
  /// a VM directly from an Amazon Machine Image (AMI)</a> in the <i>VM
  /// Import/Export User Guide</i>.
  ///
  /// Parameter [diskImageFormat] :
  /// The disk image format.
  ///
  /// Parameter [imageId] :
  /// The ID of the image.
  ///
  /// Parameter [s3ExportLocation] :
  /// The Amazon S3 bucket for the destination image. The destination bucket
  /// must exist.
  ///
  /// Parameter [clientToken] :
  /// Token to enable idempotency for export image requests.
  ///
  /// Parameter [description] :
  /// A description of the image being exported. The maximum length is 255
  /// characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [roleName] :
  /// The name of the role that grants VM Import/Export permission to export
  /// images to your Amazon S3 bucket. If this parameter is not specified, the
  /// default role is named 'vmimport'.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the export image task during creation.
  Future<ExportImageResult> exportImage({
    required DiskImageFormat diskImageFormat,
    required String imageId,
    required ExportTaskS3LocationRequest s3ExportLocation,
    String? clientToken,
    String? description,
    bool? dryRun,
    String? roleName,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Exports routes from the specified transit gateway route table to the
  /// specified S3 bucket. By default, all routes are exported. Alternatively,
  /// you can filter by CIDR range.
  ///
  /// The routes are saved to the specified bucket in a JSON file. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export
  /// Route Tables to Amazon S3</a> in <i>Transit Gateways</i>.
  ///
  /// Parameter [s3Bucket] :
  /// The name of the S3 bucket.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.transit-gateway-attachment-id</code> - The id of the
  /// transit gateway attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-id</code> - The resource id of the transit
  /// gateway attachment.
  /// </li>
  /// <li>
  /// <code>route-search.exact-match</code> - The exact match of the specified
  /// filter.
  /// </li>
  /// <li>
  /// <code>route-search.longest-prefix-match</code> - The longest prefix that
  /// matches the route.
  /// </li>
  /// <li>
  /// <code>route-search.subnet-of-match</code> - The routes with a subnet that
  /// match the specified CIDR filter.
  /// </li>
  /// <li>
  /// <code>route-search.supernet-of-match</code> - The routes with a CIDR that
  /// encompass the CIDR filter. For example, if you have 10.0.1.0/29 and
  /// 10.0.1.0/31 routes in your route table and you specify supernet-of-match
  /// as 10.0.1.0/30, then the result returns 10.0.1.0/29.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the route (<code>active</code> |
  /// <code>blackhole</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-route-destination-cidr-block</code> - The CIDR
  /// range.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of route (<code>propagated</code> |
  /// <code>static</code>).
  /// </li>
  /// </ul>
  Future<ExportTransitGatewayRoutesResult> exportTransitGatewayRoutes({
    required String s3Bucket,
    required String transitGatewayRouteTableId,
    bool? dryRun,
    List<Filter>? filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns the IAM roles that are associated with the specified ACM (ACM)
  /// certificate. It also returns the name of the Amazon S3 bucket and the
  /// Amazon S3 object key where the certificate, certificate chain, and
  /// encrypted private key bundle are stored, and the ARN of the KMS key that's
  /// used to encrypt the private key.
  ///
  /// Parameter [certificateArn] :
  /// The ARN of the ACM certificate for which to view the associated IAM roles,
  /// encryption keys, and Amazon S3 object information.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetAssociatedEnclaveCertificateIamRolesResult>
      getAssociatedEnclaveCertificateIamRoles({
    required String certificateArn,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the IPv6 CIDR block associations for a specified
  /// IPv6 address pool.
  ///
  /// Parameter [poolId] :
  /// The ID of the IPv6 address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetAssociatedIpv6PoolCidrsResult> getAssociatedIpv6PoolCidrs({
    required String poolId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets network performance data.
  ///
  /// Parameter [dataQueries] :
  /// A list of network performance data queries.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endTime] :
  /// The ending time for the performance data request. The end time must be
  /// formatted as <code>yyyy-mm-ddThh:mm:ss</code>. For example,
  /// <code>2022-06-12T12:00:00.000Z</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [startTime] :
  /// The starting time for the performance data request. The starting time must
  /// be formatted as <code>yyyy-mm-ddThh:mm:ss</code>. For example,
  /// <code>2022-06-10T12:00:00.000Z</code>.
  Future<GetAwsNetworkPerformanceDataResult> getAwsNetworkPerformanceData({
    List<DataQuery>? dataQueries,
    bool? dryRun,
    DateTime? endTime,
    int? maxResults,
    String? nextToken,
    DateTime? startTime,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets usage information about a Capacity Reservation. If the Capacity
  /// Reservation is shared, it shows usage information for the Capacity
  /// Reservation owner and each Amazon Web Services account that is currently
  /// using the shared capacity. If the Capacity Reservation is not shared, it
  /// shows only the Capacity Reservation owner's usage.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<GetCapacityReservationUsageResult> getCapacityReservationUsage({
    required String capacityReservationId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the allocations from the specified customer-owned address pool.
  ///
  /// Parameter [poolId] :
  /// The ID of the address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>coip-address-usage.allocation-id</code> - The allocation ID of the
  /// address.
  /// </li>
  /// <li>
  /// <code>coip-address-usage.aws-account-id</code> - The ID of the Amazon Web
  /// Services account that is using the customer-owned IP address.
  /// </li>
  /// <li>
  /// <code>coip-address-usage.aws-service</code> - The Amazon Web Services
  /// service that is using the customer-owned IP address.
  /// </li>
  /// <li>
  /// <code>coip-address-usage.co-ip</code> - The customer-owned IP address.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetCoipPoolUsageResult> getCoipPoolUsage({
    required String poolId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the console output for the specified instance. For Linux instances,
  /// the instance console output displays the exact console output that would
  /// normally be displayed on a physical monitor attached to a computer. For
  /// Windows instances, the instance console output includes the last three
  /// system event log errors.
  ///
  /// By default, the console output returns buffered information that was
  /// posted shortly after an instance transition state (start, stop, reboot, or
  /// terminate). This information is available for at least one hour after the
  /// most recent post. Only the most recent 64 KB of console output is
  /// available.
  ///
  /// You can optionally retrieve the latest serial console output at any time
  /// during the instance lifecycle. This option is supported on instance types
  /// that use the Nitro hypervisor.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance
  /// console output</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [latest] :
  /// When enabled, retrieves the latest console output for the instance.
  ///
  /// Default: disabled (<code>false</code>)
  Future<GetConsoleOutputResult> getConsoleOutput({
    required String instanceId,
    bool? dryRun,
    bool? latest,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieve a JPG-format screenshot of a running instance to help with
  /// troubleshooting.
  ///
  /// The returned content is Base64-encoded.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/troubleshoot-unreachable-instance.html#instance-console-console-output">Instance
  /// console output</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [wakeUp] :
  /// When set to <code>true</code>, acts as keystroke input and wakes up an
  /// instance that's in standby or "sleep" mode.
  Future<GetConsoleScreenshotResult> getConsoleScreenshot({
    required String instanceId,
    bool? dryRun,
    bool? wakeUp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the default credit option for CPU usage of a burstable
  /// performance instance family.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceFamily] :
  /// The instance family.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetDefaultCreditSpecificationResult> getDefaultCreditSpecification({
    required UnlimitedSupportedInstanceFamily instanceFamily,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the default KMS key for EBS encryption by default for your
  /// account in this Region. You can change the default KMS key for encryption
  /// by default using <a>ModifyEbsDefaultKmsKeyId</a> or
  /// <a>ResetEbsDefaultKmsKeyId</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetEbsDefaultKmsKeyIdResult> getEbsDefaultKmsKeyId({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes whether EBS encryption by default is enabled for your account in
  /// the current Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetEbsEncryptionByDefaultResult> getEbsEncryptionByDefault({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Generates a CloudFormation template that streamlines and automates the
  /// integration of VPC flow logs with Amazon Athena. This make it easier for
  /// you to query and gain insights from VPC flow logs data. Based on the
  /// information that you provide, we configure resources in the template to do
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// Create a table in Athena that maps fields to a custom log format
  /// </li>
  /// <li>
  /// Create a Lambda function that updates the table with new partitions on a
  /// daily, weekly, or monthly basis
  /// </li>
  /// <li>
  /// Create a table partitioned between two timestamps in the past
  /// </li>
  /// <li>
  /// Create a set of named queries in Athena that you can use to get started
  /// quickly
  /// </li>
  /// </ul> <note>
  /// <code>GetFlowLogsIntegrationTemplate</code> does not support integration
  /// between Amazon Web Services Transit Gateway Flow Logs and Amazon Athena.
  /// </note>
  ///
  /// Parameter [configDeliveryS3DestinationArn] :
  /// To store the CloudFormation template in Amazon S3, specify the location in
  /// Amazon S3.
  ///
  /// Parameter [flowLogId] :
  /// The ID of the flow log.
  ///
  /// Parameter [integrateServices] :
  /// Information about the service integration.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetFlowLogsIntegrationTemplateResult> getFlowLogsIntegrationTemplate({
    required String configDeliveryS3DestinationArn,
    required String flowLogId,
    required IntegrateServices integrateServices,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Lists the resource groups to which a Capacity Reservation has been added.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation. If you specify a Capacity Reservation
  /// that is shared with you, the operation returns only Capacity Reservation
  /// groups that you own.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<GetGroupsForCapacityReservationResult>
      getGroupsForCapacityReservation({
    required String capacityReservationId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Preview a reservation purchase with configurations that match those of
  /// your Dedicated Host. You must have active Dedicated Hosts in your account
  /// before you purchase a reservation.
  ///
  /// This is a preview of the <a>PurchaseHostReservation</a> action and does
  /// not result in the offering being purchased.
  ///
  /// Parameter [hostIdSet] :
  /// The IDs of the Dedicated Hosts with which the reservation is associated.
  ///
  /// Parameter [offeringId] :
  /// The offering ID of the reservation.
  Future<GetHostReservationPurchasePreviewResult>
      getHostReservationPurchasePreview({
    required List<String> hostIdSet,
    required String offeringId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the current state of <i>block public access for AMIs</i> at the
  /// account level in the specified Amazon Web Services Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html#block-public-access-to-amis">Block
  /// public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetImageBlockPublicAccessStateResult> getImageBlockPublicAccessState({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the default instance metadata service (IMDS) settings that are set at
  /// the account level in the specified Amazon Web Services&#x2028; Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order
  /// of precedence for instance metadata options</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetInstanceMetadataDefaultsResult> getInstanceMetadataDefaults({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the public endorsement key associated with the Nitro Trusted Platform
  /// Module (NitroTPM) for the specified instance.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance for which to get the public endorsement key.
  ///
  /// Parameter [keyFormat] :
  /// The required public endorsement key format. Specify <code>der</code> for a
  /// DER-encoded public key that is compatible with OpenSSL. Specify
  /// <code>tpmt</code> for a TPM 2.0 format that is compatible with tpm2-tools.
  /// The returned key is base64 encoded.
  ///
  /// Parameter [keyType] :
  /// The required public endorsement key type.
  ///
  /// Parameter [dryRun] :
  /// Specify this parameter to verify whether the request will succeed, without
  /// actually making the request. If the request will succeed, the response is
  /// <code>DryRunOperation</code>. Otherwise, the response is
  /// <code>UnauthorizedOperation</code>.
  Future<GetInstanceTpmEkPubResult> getInstanceTpmEkPub({
    required String instanceId,
    required EkPubKeyFormat keyFormat,
    required EkPubKeyType keyType,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns a list of instance types with the specified instance attributes.
  /// You can use the response to preview the instance types without launching
  /// instances. Note that the response does not consider capacity.
  ///
  /// When you specify multiple parameters, you get instance types that satisfy
  /// all of the specified parameters. If you specify multiple values for a
  /// parameter, you get instance types that satisfy any of the specified
  /// values.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html#spotfleet-get-instance-types-from-instance-requirements">Preview
  /// instance types with specified attributes</a>, <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Attribute-based
  /// instance type selection for EC2 Fleet</a>, <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html">Attribute-based
  /// instance type selection for Spot Fleet</a>, and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
  /// placement score</a> in the <i>Amazon EC2 User Guide</i>, and <a
  /// href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating
  /// an Auto Scaling group using attribute-based instance type selection</a> in
  /// the <i>Amazon EC2 Auto Scaling User Guide</i>.
  ///
  /// Parameter [architectureTypes] :
  /// The processor architecture type.
  ///
  /// Parameter [instanceRequirements] :
  /// The attributes required for the instance types.
  ///
  /// Parameter [virtualizationTypes] :
  /// The virtualization type.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<GetInstanceTypesFromInstanceRequirementsResult>
      getInstanceTypesFromInstanceRequirements({
    required List<ArchitectureType> architectureTypes,
    required InstanceRequirementsRequest instanceRequirements,
    required List<VirtualizationType> virtualizationTypes,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// A binary representation of the UEFI variable store. Only non-volatile
  /// variables are stored. This is a base64 encoded and zlib compressed binary
  /// value that must be properly encoded.
  ///
  /// When you use <a
  /// href="https://docs.aws.amazon.com/cli/latest/reference/ec2/register-image.html">register-image</a>
  /// to create an AMI, you can create an exact copy of your variable store by
  /// passing the UEFI data in the <code>UefiData</code> parameter. You can
  /// modify the UEFI data by using the <a
  /// href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a>
  /// on GitHub. You can use the tool to convert the UEFI data into a
  /// human-readable format (JSON), which you can inspect and modify, and then
  /// convert back into the binary format to use with register-image.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI
  /// Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance from which to retrieve the UEFI data.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetInstanceUefiDataResult> getInstanceUefiData({
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieve historical information about a CIDR within an IPAM scope. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/view-history-cidr-ipam.html">View
  /// the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [cidr] :
  /// The CIDR you want the history of. The CIDR can be an IPv4 or IPv6 IP
  /// address range. If you enter a /16 IPv4 CIDR, you will get records that
  /// match it exactly. You will not get records for any subnets within the /16
  /// CIDR.
  ///
  /// Parameter [ipamScopeId] :
  /// The ID of the IPAM scope that the CIDR is in.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endTime] :
  /// The end of the time period for which you are looking for history. If you
  /// omit this option, it will default to the current time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of historical results you would like returned per page.
  /// Defaults to 100.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [startTime] :
  /// The start of the time period for which you are looking for history. If you
  /// omit this option, it will default to the value of EndTime.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC you want your history records filtered by.
  Future<GetIpamAddressHistoryResult> getIpamAddressHistory({
    required String cidr,
    required String ipamScopeId,
    bool? dryRun,
    DateTime? endTime,
    int? maxResults,
    String? nextToken,
    DateTime? startTime,
    String? vpcId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets IPAM discovered accounts. A discovered account is an Amazon Web
  /// Services account that is monitored under a resource discovery. If you have
  /// integrated IPAM with Amazon Web Services Organizations, all accounts in
  /// the organization are discovered accounts. Only the IPAM account can get
  /// all discovered accounts in the organization.
  ///
  /// Parameter [discoveryRegion] :
  /// The Amazon Web Services Region that the account information is returned
  /// from.
  ///
  /// Parameter [ipamResourceDiscoveryId] :
  /// A resource discovery ID.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Discovered account filters.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of discovered accounts to return in one page of
  /// results.
  ///
  /// Parameter [nextToken] :
  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  Future<GetIpamDiscoveredAccountsResult> getIpamDiscoveredAccounts({
    required String discoveryRegion,
    required String ipamResourceDiscoveryId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the public IP addresses that have been discovered by IPAM.
  ///
  /// Parameter [addressRegion] :
  /// The Amazon Web Services Region for the IP address.
  ///
  /// Parameter [ipamResourceDiscoveryId] :
  /// An IPAM resource discovery ID.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Filters.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of IPAM discovered public addresses to return in one
  /// page of results.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetIpamDiscoveredPublicAddressesResult>
      getIpamDiscoveredPublicAddresses({
    required String addressRegion,
    required String ipamResourceDiscoveryId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns the resource CIDRs that are monitored as part of a resource
  /// discovery. A discovered resource is a resource CIDR monitored under a
  /// resource discovery. The following resources can be discovered: VPCs,
  /// Public IPv4 pools, VPC subnets, and Elastic IP addresses.
  ///
  /// Parameter [ipamResourceDiscoveryId] :
  /// A resource discovery ID.
  ///
  /// Parameter [resourceRegion] :
  /// A resource Region.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Filters.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of discovered resource CIDRs to return in one page of
  /// results.
  ///
  /// Parameter [nextToken] :
  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  Future<GetIpamDiscoveredResourceCidrsResult> getIpamDiscoveredResourceCidrs({
    required String ipamResourceDiscoveryId,
    required String resourceRegion,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get a list of all the CIDR allocations in an IPAM pool. The Region you use
  /// should be the IPAM pool locale. The locale is the Amazon Web Services
  /// Region where this IPAM pool is available for allocations.
  /// <note>
  /// If you use this action after <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AllocateIpamPoolCidr.html">AllocateIpamPoolCidr</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>,
  /// note that all EC2 API actions follow an <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/query-api-troubleshooting.html#eventual-consistency">eventual
  /// consistency</a> model.
  /// </note>
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool you want to see the allocations for.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters for the request. For more information about filtering,
  /// see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering
  /// CLI output</a>.
  ///
  /// Parameter [ipamPoolAllocationId] :
  /// The ID of the allocation.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results you would like returned per page.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetIpamPoolAllocationsResult> getIpamPoolAllocations({
    required String ipamPoolId,
    bool? dryRun,
    List<Filter>? filters,
    String? ipamPoolAllocationId,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1000,
      100000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get the CIDRs provisioned to an IPAM pool.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool you want the CIDR for.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters for the request. For more information about filtering,
  /// see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering
  /// CLI output</a>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the request.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetIpamPoolCidrsResult> getIpamPoolCidrs({
    required String ipamPoolId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns resource CIDRs managed by IPAM in a given scope. If an IPAM is
  /// associated with more than one resource discovery, the resource CIDRs
  /// across all of the resource discoveries is returned. A resource discovery
  /// is an IPAM component that enables IPAM to manage and monitor resources
  /// that belong to the owning account.
  ///
  /// Parameter [ipamScopeId] :
  /// The ID of the scope that the resource is in.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters for the request. For more information about filtering,
  /// see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering
  /// CLI output</a>.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool that the resource is in.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the request.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [resourceId] :
  /// The ID of the resource.
  ///
  /// Parameter [resourceOwner] :
  /// The ID of the Amazon Web Services account that owns the resource.
  ///
  /// Parameter [resourceTag] :
  /// The resource tag.
  ///
  /// Parameter [resourceType] :
  /// The resource type.
  Future<GetIpamResourceCidrsResult> getIpamResourceCidrs({
    required String ipamScopeId,
    bool? dryRun,
    List<Filter>? filters,
    String? ipamPoolId,
    int? maxResults,
    String? nextToken,
    String? resourceId,
    String? resourceOwner,
    RequestIpamResourceTag? resourceTag,
    IpamResourceType? resourceType,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieves the configuration data of the specified instance. You can use
  /// this data to create a launch template.
  ///
  /// This action calls on other describe actions to get instance information.
  /// Depending on your instance configuration, you may need to allow the
  /// following actions in your IAM policy:
  /// <code>DescribeSpotInstanceRequests</code>,
  /// <code>DescribeInstanceCreditSpecifications</code>,
  /// <code>DescribeVolumes</code>, and <code>DescribeInstanceAttribute</code>.
  /// Or, you can allow <code>describe*</code> depending on your instance
  /// requirements.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetLaunchTemplateDataResult> getLaunchTemplateData({
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the resources that are associated with the
  /// specified managed prefix list.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetManagedPrefixListAssociationsResult>
      getManagedPrefixListAssociations({
    required String prefixListId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the entries for a specified managed prefix list.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [targetVersion] :
  /// The version of the prefix list for which to return the entries. The
  /// default is the current version.
  Future<GetManagedPrefixListEntriesResult> getManagedPrefixListEntries({
    required String prefixListId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
    int? targetVersion,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the findings for the specified Network Access Scope analysis.
  ///
  /// Parameter [networkInsightsAccessScopeAnalysisId] :
  /// The ID of the Network Access Scope analysis.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetNetworkInsightsAccessScopeAnalysisFindingsResult>
      getNetworkInsightsAccessScopeAnalysisFindings({
    required String networkInsightsAccessScopeAnalysisId,
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the content for the specified Network Access Scope.
  ///
  /// Parameter [networkInsightsAccessScopeId] :
  /// The ID of the Network Access Scope.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetNetworkInsightsAccessScopeContentResult>
      getNetworkInsightsAccessScopeContent({
    required String networkInsightsAccessScopeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieves the encrypted administrator password for a running Windows
  /// instance.
  ///
  /// The Windows password is generated at boot by the <code>EC2Config</code>
  /// service or <code>EC2Launch</code> scripts (Windows Server 2016 and later).
  /// This usually only happens the first time an instance is launched. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a>
  /// in the <i>Amazon EC2 User Guide</i>.
  ///
  /// For the <code>EC2Config</code> service, the password is not generated for
  /// rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before
  /// bundling.
  ///
  /// The password is encrypted using the key pair that you specified when you
  /// launched the instance. You must provide the corresponding key pair file.
  ///
  /// When you launch an instance, password generation and encryption may take a
  /// few minutes. If you try to retrieve the password before it's available,
  /// the output returns an empty string. We recommend that you wait up to 15
  /// minutes after launching an instance before trying to retrieve the
  /// generated password.
  ///
  /// Parameter [instanceId] :
  /// The ID of the Windows instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetPasswordDataResult> getPasswordData({
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns a quote and exchange information for exchanging one or more
  /// specified Convertible Reserved Instances for a new Convertible Reserved
  /// Instance. If the exchange cannot be performed, the reason is returned in
  /// the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform
  /// the exchange.
  ///
  /// Parameter [reservedInstanceIds] :
  /// The IDs of the Convertible Reserved Instances to exchange.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [targetConfigurations] :
  /// The configuration of the target Convertible Reserved Instance to exchange
  /// for your current Convertible Reserved Instances.
  Future<GetReservedInstancesExchangeQuoteResult>
      getReservedInstancesExchangeQuote({
    required List<String> reservedInstanceIds,
    bool? dryRun,
    List<TargetConfigurationRequest>? targetConfigurations,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets security groups that can be associated by the Amazon Web Services
  /// account making the request with network interfaces in the specified VPC.
  ///
  /// Parameter [vpcId] :
  /// The VPC ID where the security group can be used.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. If using multiple filters, the results include security
  /// groups which match all filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-id</code>: The security group ID.
  /// </li>
  /// <li>
  /// <code>description</code>: The security group's description.
  /// </li>
  /// <li>
  /// <code>group-name</code>: The security group name.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The security group owner ID.
  /// </li>
  /// <li>
  /// <code>primary-vpc-id</code>: The VPC ID in which the security group was
  /// created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<GetSecurityGroupsForVpcResult> getSecurityGroupsForVpc({
    required String vpcId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieves the access status of your account to the EC2 serial console of
  /// all instances. By default, access to the EC2 serial console is disabled
  /// for your account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage
  /// account access to the EC2 serial console</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetSerialConsoleAccessStatusResult> getSerialConsoleAccessStatus({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the current state of <i>block public access for snapshots</i> setting
  /// for the account and Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/block-public-access-snapshots.html">
  /// Block public access for snapshots</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetSnapshotBlockPublicAccessStateResult>
      getSnapshotBlockPublicAccessState({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Calculates the Spot placement score for a Region or Availability Zone
  /// based on the specified target capacity and compute requirements.
  ///
  /// You can specify your compute requirements either by using
  /// <code>InstanceRequirementsWithMetadata</code> and letting Amazon EC2
  /// choose the optimal instance types to fulfill your Spot request, or you can
  /// specify the instance types by using <code>InstanceTypes</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
  /// placement score</a> in the Amazon EC2 User Guide.
  ///
  /// Parameter [targetCapacity] :
  /// The target capacity.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceRequirementsWithMetadata] :
  /// The attributes for the instance types. When you specify instance
  /// attributes, Amazon EC2 will identify instance types with those attributes.
  ///
  /// If you specify <code>InstanceRequirementsWithMetadata</code>, you can't
  /// specify <code>InstanceTypes</code>.
  ///
  /// Parameter [instanceTypes] :
  /// The instance types. We recommend that you specify at least three instance
  /// types. If you specify one or two instance types, or specify variations of
  /// a single instance type (for example, an <code>m3.xlarge</code> with and
  /// without instance storage), the returned placement score will always be
  /// low.
  ///
  /// If you specify <code>InstanceTypes</code>, you can't specify
  /// <code>InstanceRequirementsWithMetadata</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [regionNames] :
  /// The Regions used to narrow down the list of Regions to be scored. Enter
  /// the Region code, for example, <code>us-east-1</code>.
  ///
  /// Parameter [singleAvailabilityZone] :
  /// Specify <code>true</code> so that the response returns a list of scored
  /// Availability Zones. Otherwise, the response returns a list of scored
  /// Regions.
  ///
  /// A list of scored Availability Zones is useful if you want to launch all of
  /// your Spot capacity into a single Availability Zone.
  ///
  /// Parameter [targetCapacityUnitType] :
  /// The unit for the target capacity.
  Future<GetSpotPlacementScoresResult> getSpotPlacementScores({
    required int targetCapacity,
    bool? dryRun,
    InstanceRequirementsWithMetadataRequest? instanceRequirementsWithMetadata,
    List<String>? instanceTypes,
    int? maxResults,
    String? nextToken,
    List<String>? regionNames,
    bool? singleAvailabilityZone,
    TargetCapacityUnitType? targetCapacityUnitType,
  }) async {
    _s.validateNumRange(
      'targetCapacity',
      targetCapacity,
      1,
      2000000000,
      isRequired: true,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      10,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the subnet CIDR reservations.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>reservationType</code> - The type of reservation
  /// (<code>prefix</code> | <code>explicit</code>).
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetSubnetCidrReservationsResult> getSubnetCidrReservations({
    required String subnetId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Lists the route tables to which the specified resource attachment
  /// propagates routes.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>transit-gateway-route-table-id</code> - The ID of the transit
  /// gateway route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayAttachmentPropagationsResult>
      getTransitGatewayAttachmentPropagations({
    required String transitGatewayAttachmentId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the associations for the transit gateway multicast
  /// domain.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The type of resource. The valid value is:
  /// <code>vpc</code>.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the subnet association. Valid values are
  /// <code>associated</code> | <code>associating</code> |
  /// <code>disassociated</code> | <code>disassociating</code>.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The id of the transit gateway
  /// attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayMulticastDomainAssociationsResult>
      getTransitGatewayMulticastDomainAssociations({
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets a list of the transit gateway policy table associations.
  ///
  /// Parameter [transitGatewayPolicyTableId] :
  /// The ID of the transit gateway policy table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters associated with the transit gateway policy table.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayPolicyTableAssociationsResult>
      getTransitGatewayPolicyTableAssociations({
    required String transitGatewayPolicyTableId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns a list of transit gateway policy table entries.
  ///
  /// Parameter [transitGatewayPolicyTableId] :
  /// The ID of the transit gateway policy table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters associated with the transit gateway policy table.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayPolicyTableEntriesResult>
      getTransitGatewayPolicyTableEntries({
    required String transitGatewayPolicyTableId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the prefix list references in a specified transit
  /// gateway route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.resource-id</code> - The ID of the resource for the
  /// attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-type</code> - The type of resource for the
  /// attachment. Valid values are <code>vpc</code> | <code>vpn</code> |
  /// <code>direct-connect-gateway</code> | <code>peering</code>.
  /// </li>
  /// <li>
  /// <code>attachment.transit-gateway-attachment-id</code> - The ID of the
  /// attachment.
  /// </li>
  /// <li>
  /// <code>is-blackhole</code> - Whether traffic matching the route is blocked
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>prefix-list-id</code> - The ID of the prefix list.
  /// </li>
  /// <li>
  /// <code>prefix-list-owner-id</code> - The ID of the owner of the prefix
  /// list.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the prefix list reference
  /// (<code>pending</code> | <code>available</code> | <code>modifying</code> |
  /// <code>deleting</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayPrefixListReferencesResult>
      getTransitGatewayPrefixListReferences({
    required String transitGatewayRouteTableId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the associations for the specified transit gateway
  /// route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type. Valid values are
  /// <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code>
  /// | <code>peering</code> | <code>connect</code>.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayRouteTableAssociationsResult>
      getTransitGatewayRouteTableAssociations({
    required String transitGatewayRouteTableId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the route table propagations for the specified
  /// transit gateway route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type. Valid values are
  /// <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code>
  /// | <code>peering</code> | <code>connect</code>.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayRouteTablePropagationsResult>
      getTransitGatewayRouteTablePropagations({
    required String transitGatewayRouteTableId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get the Verified Access policy associated with the endpoint.
  ///
  /// Parameter [verifiedAccessEndpointId] :
  /// The ID of the Verified Access endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetVerifiedAccessEndpointPolicyResult>
      getVerifiedAccessEndpointPolicy({
    required String verifiedAccessEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Shows the contents of the Verified Access policy associated with the
  /// group.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetVerifiedAccessGroupPolicyResult> getVerifiedAccessGroupPolicy({
    required String verifiedAccessGroupId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Download an Amazon Web Services-provided sample configuration file to be
  /// used with the customer gateway device specified for your Site-to-Site VPN
  /// connection.
  ///
  /// Parameter [vpnConnectionDeviceTypeId] :
  /// Device identifier provided by the <code>GetVpnConnectionDeviceTypes</code>
  /// API.
  ///
  /// Parameter [vpnConnectionId] :
  /// The <code>VpnConnectionId</code> specifies the Site-to-Site VPN connection
  /// used for the sample configuration.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [internetKeyExchangeVersion] :
  /// The IKE version to be used in the sample configuration file for your
  /// customer gateway device. You can specify one of the following versions:
  /// <code>ikev1</code> or <code>ikev2</code>.
  Future<GetVpnConnectionDeviceSampleConfigurationResult>
      getVpnConnectionDeviceSampleConfiguration({
    required String vpnConnectionDeviceTypeId,
    required String vpnConnectionId,
    bool? dryRun,
    String? internetKeyExchangeVersion,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Obtain a list of customer gateway devices for which sample configuration
  /// files can be provided. The request has no additional parameters. You can
  /// also see the list of device types with sample configuration files
  /// available under <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html">Your
  /// customer gateway device</a> in the <i>Amazon Web Services Site-to-Site VPN
  /// User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results returned by
  /// <code>GetVpnConnectionDeviceTypes</code> in paginated output. When this
  /// parameter is used, <code>GetVpnConnectionDeviceTypes</code> only returns
  /// <code>MaxResults</code> results in a single page along with a
  /// <code>NextToken</code> response element. The remaining results of the
  /// initial request can be seen by sending another
  /// <code>GetVpnConnectionDeviceTypes</code> request with the returned
  /// <code>NextToken</code> value. This value can be between 200 and 1000. If
  /// this parameter is not used, then <code>GetVpnConnectionDeviceTypes</code>
  /// returns all results.
  ///
  /// Parameter [nextToken] :
  /// The <code>NextToken</code> value returned from a previous paginated
  /// <code>GetVpnConnectionDeviceTypes</code> request where
  /// <code>MaxResults</code> was used and the results exceeded the value of
  /// that parameter. Pagination continues from the end of the previous results
  /// that returned the <code>NextToken</code> value. This value is null when
  /// there are no more results to return.
  Future<GetVpnConnectionDeviceTypesResult> getVpnConnectionDeviceTypes({
    bool? dryRun,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      200,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Get details of available tunnel endpoint maintenance.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the Site-to-Site VPN connection.
  ///
  /// Parameter [vpnTunnelOutsideIpAddress] :
  /// The external IP address of the VPN tunnel.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetVpnTunnelReplacementStatusResult> getVpnTunnelReplacementStatus({
    required String vpnConnectionId,
    required String vpnTunnelOutsideIpAddress,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Uploads a client certificate revocation list to the specified Client VPN
  /// endpoint. Uploading a client certificate revocation list overwrites the
  /// existing client certificate revocation list.
  ///
  /// Uploading a client certificate revocation list resets existing client
  /// connections.
  ///
  /// Parameter [certificateRevocationList] :
  /// The client certificate revocation list file. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate">Generate
  /// a Client Certificate Revocation List</a> in the <i>Client VPN
  /// Administrator Guide</i>.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to which the client certificate
  /// revocation list applies.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ImportClientVpnClientCertificateRevocationListResult>
      importClientVpnClientCertificateRevocationList({
    required String certificateRevocationList,
    required String clientVpnEndpointId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// To import your virtual machines (VMs) with a console-based experience, you
  /// can use the <i>Import virtual machine images to Amazon Web Services</i>
  /// template in the <a
  /// href="https://console.aws.amazon.com/migrationhub/orchestrator">Migration
  /// Hub Orchestrator console</a>. For more information, see the <a
  /// href="https://docs.aws.amazon.com/migrationhub-orchestrator/latest/userguide/import-vm-images.html">
  /// <i>Migration Hub Orchestrator User Guide</i> </a>.
  /// </note>
  /// Import single or multi-volume disk images or EBS snapshots into an Amazon
  /// Machine Image (AMI).
  /// <important>
  /// Amazon Web Services VM Import/Export strongly recommends specifying a
  /// value for either the <code>--license-type</code> or
  /// <code>--usage-operation</code> parameter when you create a new VM Import
  /// task. This ensures your operating system is licensed appropriately and
  /// your billing is optimized.
  /// </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing
  /// a VM as an image using VM Import/Export</a> in the <i>VM Import/Export
  /// User Guide</i>.
  ///
  /// Parameter [architecture] :
  /// The architecture of the virtual machine.
  ///
  /// Valid values: <code>i386</code> | <code>x86_64</code>
  ///
  /// Parameter [bootMode] :
  /// The boot mode of the virtual machine.
  /// <note>
  /// The <code>uefi-preferred</code> boot mode isn't supported for importing
  /// images. For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/prerequisites.html#vmimport-boot-modes">Boot
  /// modes</a> in the <i>VM Import/Export User Guide</i>.
  /// </note>
  ///
  /// Parameter [clientData] :
  /// The client-specific data.
  ///
  /// Parameter [clientToken] :
  /// The token to enable idempotency for VM import requests.
  ///
  /// Parameter [description] :
  /// A description string for the import image task.
  ///
  /// Parameter [diskContainers] :
  /// Information about the disk containers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the destination AMI of the imported image should be
  /// encrypted. The default KMS key for EBS is used unless you specify a
  /// non-default KMS key using <code>KmsKeyId</code>. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [hypervisor] :
  /// The target hypervisor platform.
  ///
  /// Valid values: <code>xen</code>
  ///
  /// Parameter [kmsKeyId] :
  /// An identifier for the symmetric KMS key to use when creating the encrypted
  /// AMI. This parameter is only required if you want to use a non-default KMS
  /// key; if this parameter is not specified, the default KMS key for EBS is
  /// used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code>
  /// flag must also be set.
  ///
  /// The KMS key identifier may be provided in any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID
  /// </li>
  /// <li>
  /// Key alias
  /// </li>
  /// <li>
  /// ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the key, the Amazon Web Services
  /// account ID of the key owner, the <code>key</code> namespace, and then the
  /// key ID. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the key, the Amazon Web Services
  /// account ID of the key owner, the <code>alias</code> namespace, and then
  /// the key alias. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning
  /// that the action you call may appear to complete even though you provided
  /// an invalid identifier. This action will eventually report failure.
  ///
  /// The specified KMS key must exist in the Region that the AMI is being
  /// copied to.
  ///
  /// Amazon EBS does not support asymmetric KMS keys.
  ///
  /// Parameter [licenseSpecifications] :
  /// The ARNs of the license configurations.
  ///
  /// Parameter [licenseType] :
  /// The license type to be used for the Amazon Machine Image (AMI) after
  /// importing.
  ///
  /// Specify <code>AWS</code> to replace the source-system license with an
  /// Amazon Web Services license or <code>BYOL</code> to retain the
  /// source-system license. Leaving this parameter undefined is the same as
  /// choosing <code>AWS</code> when importing a Windows Server operating
  /// system, and the same as choosing <code>BYOL</code> when importing a
  /// Windows client operating system (such as Windows 10) or a Linux operating
  /// system.
  ///
  /// To use <code>BYOL</code>, you must have existing licenses with rights to
  /// use these licenses in a third party cloud, such as Amazon Web Services.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a>
  /// in the VM Import/Export User Guide.
  ///
  /// Parameter [platform] :
  /// The operating system of the virtual machine. If you import a VM that is
  /// compatible with Unified Extensible Firmware Interface (UEFI) using an EBS
  /// snapshot, you must specify a value for the platform.
  ///
  /// Valid values: <code>Windows</code> | <code>Linux</code>
  ///
  /// Parameter [roleName] :
  /// The name of the role to use when not using the default role, 'vmimport'.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the import image task during creation.
  ///
  /// Parameter [usageOperation] :
  /// The usage operation value. For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites">Licensing
  /// options</a> in the <i>VM Import/Export User Guide</i>.
  Future<ImportImageResult> importImage({
    String? architecture,
    BootModeValues? bootMode,
    ClientData? clientData,
    String? clientToken,
    String? description,
    List<ImageDiskContainer>? diskContainers,
    bool? dryRun,
    bool? encrypted,
    String? hypervisor,
    String? kmsKeyId,
    List<ImportImageLicenseConfigurationRequest>? licenseSpecifications,
    String? licenseType,
    String? platform,
    String? roleName,
    List<TagSpecification>? tagSpecifications,
    String? usageOperation,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// We recommend that you use the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html">
  /// <code>ImportImage</code> </a> API. For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing
  /// a VM as an image using VM Import/Export</a> in the <i>VM Import/Export
  /// User Guide</i>.
  /// </note>
  /// Creates an import instance task using metadata from the specified disk
  /// image.
  ///
  /// This API action is not supported by the Command Line Interface (CLI). For
  /// information about using the Amazon EC2 CLI, which is deprecated, see <a
  /// href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2">Importing
  /// a VM to Amazon EC2</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.
  ///
  /// This API action supports only single-volume VMs. To import multi-volume
  /// VMs, use <a>ImportImage</a> instead.
  ///
  /// For information about the import manifest referenced by this API action,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  ///
  /// Parameter [platform] :
  /// The instance operating system.
  ///
  /// Parameter [description] :
  /// A description for the instance being imported.
  ///
  /// Parameter [diskImages] :
  /// The disk image.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchSpecification] :
  /// The launch specification.
  Future<ImportInstanceResult> importInstance({
    required PlatformValues platform,
    String? description,
    List<DiskImage>? diskImages,
    bool? dryRun,
    ImportInstanceLaunchSpecification? launchSpecification,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Imports the public key from an RSA or ED25519 key pair that you created
  /// with a third-party tool. Compare this with <a>CreateKeyPair</a>, in which
  /// Amazon Web Services creates the key pair and gives the keys to you (Amazon
  /// Web Services keeps a copy of the public key). With ImportKeyPair, you
  /// create the key pair and give Amazon Web Services just the public key. The
  /// private key is never transferred between you and Amazon Web Services.
  ///
  /// For more information about key pairs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon
  /// EC2 key pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [keyName] :
  /// A unique name for the key pair.
  ///
  /// Parameter [publicKeyMaterial] :
  /// The public key. For API calls, the text must be base64-encoded. For
  /// command line tools, base64 encoding is performed for you.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the imported key pair.
  Future<ImportKeyPairResult> importKeyPair({
    required String keyName,
    required Uint8List publicKeyMaterial,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Imports a disk into an EBS snapshot.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-import-snapshot.html">Importing
  /// a disk as a snapshot using VM Import/Export</a> in the <i>VM Import/Export
  /// User Guide</i>.
  ///
  /// Parameter [clientData] :
  /// The client-specific data.
  ///
  /// Parameter [clientToken] :
  /// Token to enable idempotency for VM import requests.
  ///
  /// Parameter [description] :
  /// The description string for the import snapshot task.
  ///
  /// Parameter [diskContainer] :
  /// Information about the disk container.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the destination snapshot of the imported image should be
  /// encrypted. The default KMS key for EBS is used unless you specify a
  /// non-default KMS key using <code>KmsKeyId</code>. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// An identifier for the symmetric KMS key to use when creating the encrypted
  /// snapshot. This parameter is only required if you want to use a non-default
  /// KMS key; if this parameter is not specified, the default KMS key for EBS
  /// is used. If a <code>KmsKeyId</code> is specified, the
  /// <code>Encrypted</code> flag must also be set.
  ///
  /// The KMS key identifier may be provided in any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID
  /// </li>
  /// <li>
  /// Key alias
  /// </li>
  /// <li>
  /// ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the key, the Amazon Web Services
  /// account ID of the key owner, the <code>key</code> namespace, and then the
  /// key ID. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the key, the Amazon Web Services
  /// account ID of the key owner, the <code>alias</code> namespace, and then
  /// the key alias. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning
  /// that the action you call may appear to complete even though you provided
  /// an invalid identifier. This action will eventually report failure.
  ///
  /// The specified KMS key must exist in the Region that the snapshot is being
  /// copied to.
  ///
  /// Amazon EBS does not support asymmetric KMS keys.
  ///
  /// Parameter [roleName] :
  /// The name of the role to use when not using the default role, 'vmimport'.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the import snapshot task during creation.
  Future<ImportSnapshotResult> importSnapshot({
    ClientData? clientData,
    String? clientToken,
    String? description,
    SnapshotDiskContainer? diskContainer,
    bool? dryRun,
    bool? encrypted,
    String? kmsKeyId,
    String? roleName,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an import volume task using metadata from the specified disk
  /// image.
  ///
  /// This API action supports only single-volume VMs. To import multi-volume
  /// VMs, use <a>ImportImage</a> instead. To import a disk to a snapshot, use
  /// <a>ImportSnapshot</a> instead.
  ///
  /// This API action is not supported by the Command Line Interface (CLI). For
  /// information about using the Amazon EC2 CLI, which is deprecated, see <a
  /// href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#importing-your-volumes-into-amazon-ebs">Importing
  /// Disks to Amazon EBS</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.
  ///
  /// For information about the import manifest referenced by this API action,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone for the resulting EBS volume.
  ///
  /// Parameter [image] :
  /// The disk image.
  ///
  /// Parameter [volume] :
  /// The volume size.
  ///
  /// Parameter [description] :
  /// A description of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ImportVolumeResult> importVolume({
    required String availabilityZone,
    required DiskImageDetail image,
    required VolumeDetail volume,
    String? description,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Lists one or more AMIs that are currently in the Recycle Bin. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle
  /// Bin</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [imageIds] :
  /// The IDs of the AMIs to list. Omit this parameter to list all of the AMIs
  /// that are in the Recycle Bin. You can specify up to 20 IDs in a single
  /// request.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  Future<ListImagesInRecycleBinResult> listImagesInRecycleBin({
    bool? dryRun,
    List<String>? imageIds,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Lists one or more snapshots that are currently in the Recycle Bin.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. To get the next
  /// page of items, make another request with the token returned in the output.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.
  ///
  /// Parameter [nextToken] :
  /// The token returned from a previous paginated request. Pagination continues
  /// from the end of the items returned by the previous request.
  ///
  /// Parameter [snapshotIds] :
  /// The IDs of the snapshots to list. Omit this parameter to list all of the
  /// snapshots that are in the Recycle Bin.
  Future<ListSnapshotsInRecycleBinResult> listSnapshotsInRecycleBin({
    bool? dryRun,
    int? maxResults,
    String? nextToken,
    List<String>? snapshotIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Locks an Amazon EBS snapshot in either <i>governance</i> or
  /// <i>compliance</i> mode to protect it against accidental or malicious
  /// deletions for a specific duration. A locked snapshot can't be deleted.
  ///
  /// You can also use this action to modify the lock settings for a snapshot
  /// that is already locked. The allowed modifications depend on the lock mode
  /// and lock state:
  ///
  /// <ul>
  /// <li>
  /// If the snapshot is locked in governance mode, you can modify the lock mode
  /// and the lock duration or lock expiration date.
  /// </li>
  /// <li>
  /// If the snapshot is locked in compliance mode and it is in the cooling-off
  /// period, you can modify the lock mode and the lock duration or lock
  /// expiration date.
  /// </li>
  /// <li>
  /// If the snapshot is locked in compliance mode and the cooling-off period
  /// has lapsed, you can only increase the lock duration or extend the lock
  /// expiration date.
  /// </li>
  /// </ul>
  ///
  /// Parameter [lockMode] :
  /// The mode in which to lock the snapshot. Specify one of the following:
  ///
  /// <ul>
  /// <li>
  /// <code>governance</code> - Locks the snapshot in governance mode. Snapshots
  /// locked in governance mode can't be deleted until one of the following
  /// conditions are met:
  ///
  /// <ul>
  /// <li>
  /// The lock duration expires.
  /// </li>
  /// <li>
  /// The snapshot is unlocked by a user with the appropriate permissions.
  /// </li>
  /// </ul>
  /// Users with the appropriate IAM permissions can unlock the snapshot,
  /// increase or decrease the lock duration, and change the lock mode to
  /// <code>compliance</code> at any time.
  ///
  /// If you lock a snapshot in <code>governance</code> mode, omit <b>
  /// CoolOffPeriod</b>.
  /// </li>
  /// <li>
  /// <code>compliance</code> - Locks the snapshot in compliance mode. Snapshots
  /// locked in compliance mode can't be unlocked by any user. They can be
  /// deleted only after the lock duration expires. Users can't decrease the
  /// lock duration or change the lock mode to <code>governance</code>. However,
  /// users with appropriate IAM permissions can increase the lock duration at
  /// any time.
  ///
  /// If you lock a snapshot in <code>compliance</code> mode, you can optionally
  /// specify <b>CoolOffPeriod</b>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot to lock.
  ///
  /// Parameter [coolOffPeriod] :
  /// The cooling-off period during which you can unlock the snapshot or modify
  /// the lock settings after locking the snapshot in compliance mode, in hours.
  /// After the cooling-off period expires, you can't unlock or delete the
  /// snapshot, decrease the lock duration, or change the lock mode. You can
  /// increase the lock duration after the cooling-off period expires.
  ///
  /// The cooling-off period is optional when locking a snapshot in compliance
  /// mode. If you are locking the snapshot in governance mode, omit this
  /// parameter.
  ///
  /// To lock the snapshot in compliance mode immediately without a cooling-off
  /// period, omit this parameter.
  ///
  /// If you are extending the lock duration for a snapshot that is locked in
  /// compliance mode after the cooling-off period has expired, omit this
  /// parameter. If you specify a cooling-period in a such a request, the
  /// request fails.
  ///
  /// Allowed values: Min 1, max 72.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [expirationDate] :
  /// The date and time at which the snapshot lock is to automatically expire,
  /// in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  ///
  /// You must specify either this parameter or <b>LockDuration</b>, but not
  /// both.
  ///
  /// Parameter [lockDuration] :
  /// The period of time for which to lock the snapshot, in days. The snapshot
  /// lock will automatically expire after this period lapses.
  ///
  /// You must specify either this parameter or <b>ExpirationDate</b>, but not
  /// both.
  ///
  /// Allowed values: Min: 1, max 36500
  Future<LockSnapshotResult> lockSnapshot({
    required LockMode lockMode,
    required String snapshotId,
    int? coolOffPeriod,
    bool? dryRun,
    DateTime? expirationDate,
    int? lockDuration,
  }) async {
    _s.validateNumRange(
      'coolOffPeriod',
      coolOffPeriod,
      1,
      72,
    );
    _s.validateNumRange(
      'lockDuration',
      lockDuration,
      1,
      36500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies an attribute of the specified Elastic IP address. For
  /// requirements, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using
  /// reverse DNS for email applications</a>.
  ///
  /// Parameter [allocationId] :
  /// [EC2-VPC] The allocation ID.
  ///
  /// Parameter [domainName] :
  /// The domain name to modify for the IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyAddressAttributeResult> modifyAddressAttribute({
    required String allocationId,
    String? domainName,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes the opt-in status of the Local Zone and Wavelength Zone group for
  /// your account.
  ///
  /// Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">
  /// DescribeAvailabilityZones</a> to view the value for
  /// <code>GroupName</code>.
  ///
  /// Parameter [groupName] :
  /// The name of the Availability Zone group, Local Zone group, or Wavelength
  /// Zone group.
  ///
  /// Parameter [optInStatus] :
  /// Indicates whether you are opted in to the Local Zone group or Wavelength
  /// Zone group. The only valid value is <code>opted-in</code>. You must
  /// contact <a
  /// href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon
  /// Web Services Support</a> to opt out of a Local Zone or Wavelength Zone
  /// group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyAvailabilityZoneGroupResult> modifyAvailabilityZoneGroup({
    required String groupName,
    required ModifyAvailabilityZoneOptInStatus optInStatus,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a Capacity Reservation's capacity and the conditions under which
  /// it is to be released. You cannot change a Capacity Reservation's instance
  /// type, EBS optimization, instance store settings, platform, Availability
  /// Zone, or instance eligibility. If you need to modify any of these
  /// attributes, we recommend that you cancel the Capacity Reservation, and
  /// then create a new one with the required attributes.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation.
  ///
  /// Parameter [accept] :
  /// Reserved. Capacity Reservations you have created are accepted by default.
  ///
  /// Parameter [additionalInfo] :
  /// Reserved for future use.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endDate] :
  /// The date and time at which the Capacity Reservation expires. When a
  /// Capacity Reservation expires, the reserved capacity is released and you
  /// can no longer launch instances into it. The Capacity Reservation's state
  /// changes to <code>expired</code> when it reaches its end date and time.
  ///
  /// The Capacity Reservation is cancelled within an hour from the specified
  /// time. For example, if you specify 5/31/2019, 13:30:55, the Capacity
  /// Reservation is guaranteed to end between 13:30:55 and 14:30:55 on
  /// 5/31/2019.
  ///
  /// You must provide an <code>EndDate</code> value if <code>EndDateType</code>
  /// is <code>limited</code>. Omit <code>EndDate</code> if
  /// <code>EndDateType</code> is <code>unlimited</code>.
  ///
  /// Parameter [endDateType] :
  /// Indicates the way in which the Capacity Reservation ends. A Capacity
  /// Reservation can have one of the following end types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it. Do not provide an <code>EndDate</code> value if
  /// <code>EndDateType</code> is <code>unlimited</code>.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time. You must provide an <code>EndDate</code> value if
  /// <code>EndDateType</code> is <code>limited</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceCount] :
  /// The number of instances for which to reserve capacity. The number of
  /// instances can't be increased or decreased by more than <code>1000</code>
  /// in a single request.
  Future<ModifyCapacityReservationResult> modifyCapacityReservation({
    required String capacityReservationId,
    bool? accept,
    String? additionalInfo,
    bool? dryRun,
    DateTime? endDate,
    EndDateType? endDateType,
    int? instanceCount,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a Capacity Reservation Fleet.
  ///
  /// When you modify the total target capacity of a Capacity Reservation Fleet,
  /// the Fleet automatically creates new Capacity Reservations, or modifies or
  /// cancels existing Capacity Reservations in the Fleet to meet the new total
  /// target capacity. When you modify the end date for the Fleet, the end dates
  /// for all of the individual Capacity Reservations in the Fleet are updated
  /// accordingly.
  ///
  /// Parameter [capacityReservationFleetId] :
  /// The ID of the Capacity Reservation Fleet to modify.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endDate] :
  /// The date and time at which the Capacity Reservation Fleet expires. When
  /// the Capacity Reservation Fleet expires, its state changes to
  /// <code>expired</code> and all of the Capacity Reservations in the Fleet
  /// expire.
  ///
  /// The Capacity Reservation Fleet expires within an hour after the specified
  /// time. For example, if you specify <code>5/31/2019</code>,
  /// <code>13:30:55</code>, the Capacity Reservation Fleet is guaranteed to
  /// expire between <code>13:30:55</code> and <code>14:30:55</code> on
  /// <code>5/31/2019</code>.
  ///
  /// You can't specify <b>EndDate</b> and <b> RemoveEndDate</b> in the same
  /// request.
  ///
  /// Parameter [removeEndDate] :
  /// Indicates whether to remove the end date from the Capacity Reservation
  /// Fleet. If you remove the end date, the Capacity Reservation Fleet does not
  /// expire and it remains active until you explicitly cancel it using the
  /// <b>CancelCapacityReservationFleet</b> action.
  ///
  /// You can't specify <b>RemoveEndDate</b> and <b> EndDate</b> in the same
  /// request.
  ///
  /// Parameter [totalTargetCapacity] :
  /// The total number of capacity units to be reserved by the Capacity
  /// Reservation Fleet. This value, together with the instance type weights
  /// that you assign to each instance type used by the Fleet determine the
  /// number of instances for which the Fleet reserves capacity. Both values are
  /// based on units that make sense for your workload. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">Total
  /// target capacity</a> in the Amazon EC2 User Guide.
  Future<ModifyCapacityReservationFleetResult> modifyCapacityReservationFleet({
    required String capacityReservationFleetId,
    bool? dryRun,
    DateTime? endDate,
    bool? removeEndDate,
    int? totalTargetCapacity,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Client VPN endpoint. Modifying the DNS server
  /// resets existing client connections.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to modify.
  ///
  /// Parameter [clientConnectOptions] :
  /// The options for managing connection authorization for new client
  /// connections.
  ///
  /// Parameter [clientLoginBannerOptions] :
  /// Options for enabling a customizable text banner that will be displayed on
  /// Amazon Web Services provided clients when a VPN session is established.
  ///
  /// Parameter [connectionLogOptions] :
  /// Information about the client connection logging options.
  ///
  /// If you enable client connection logging, data about client connections is
  /// sent to a Cloudwatch Logs log stream. The following information is logged:
  ///
  /// <ul>
  /// <li>
  /// Client connection requests
  /// </li>
  /// <li>
  /// Client connection results (successful and unsuccessful)
  /// </li>
  /// <li>
  /// Reasons for unsuccessful client connection requests
  /// </li>
  /// <li>
  /// Client connection termination time
  /// </li>
  /// </ul>
  ///
  /// Parameter [description] :
  /// A brief description of the Client VPN endpoint.
  ///
  /// Parameter [dnsServers] :
  /// Information about the DNS servers to be used by Client VPN connections. A
  /// Client VPN endpoint can have up to two DNS servers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of one or more security groups to apply to the target network.
  ///
  /// Parameter [selfServicePortal] :
  /// Specify whether to enable the self-service portal for the Client VPN
  /// endpoint.
  ///
  /// Parameter [serverCertificateArn] :
  /// The ARN of the server certificate to be used. The server certificate must
  /// be provisioned in Certificate Manager (ACM).
  ///
  /// Parameter [sessionTimeoutHours] :
  /// The maximum VPN session duration time in hours.
  ///
  /// Valid values: <code>8 | 10 | 12 | 24</code>
  ///
  /// Default value: <code>24</code>
  ///
  /// Parameter [splitTunnel] :
  /// Indicates whether the VPN is split-tunnel.
  ///
  /// For information about split-tunnel VPN endpoints, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel
  /// Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to associate with the Client VPN endpoint.
  ///
  /// Parameter [vpnPort] :
  /// The port number to assign to the Client VPN endpoint for TCP and UDP
  /// traffic.
  ///
  /// Valid Values: <code>443</code> | <code>1194</code>
  ///
  /// Default Value: <code>443</code>
  Future<ModifyClientVpnEndpointResult> modifyClientVpnEndpoint({
    required String clientVpnEndpointId,
    ClientConnectOptions? clientConnectOptions,
    ClientLoginBannerOptions? clientLoginBannerOptions,
    ConnectionLogOptions? connectionLogOptions,
    String? description,
    DnsServersOptionsModifyStructure? dnsServers,
    bool? dryRun,
    List<String>? securityGroupIds,
    SelfServicePortal? selfServicePortal,
    String? serverCertificateArn,
    int? sessionTimeoutHours,
    bool? splitTunnel,
    String? vpcId,
    int? vpnPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the default credit option for CPU usage of burstable performance
  /// instances. The default credit option is set at the account level per
  /// Amazon Web Services Region, and is specified per instance family. All new
  /// burstable performance instances in the account launch using the default
  /// credit option.
  ///
  /// <code>ModifyDefaultCreditSpecification</code> is an asynchronous
  /// operation, which works at an Amazon Web Services Region level and modifies
  /// the credit option for each Availability Zone. All zones in a Region are
  /// updated within five minutes. But if instances are launched during this
  /// operation, they might not get the new credit option until the zone is
  /// updated. To verify whether the update has occurred, you can call
  /// <code>GetDefaultCreditSpecification</code> and check
  /// <code>DefaultCreditSpecification</code> for updates.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [cpuCredits] :
  /// The credit option for CPU usage of the instance family.
  ///
  /// Valid Values: <code>standard</code> | <code>unlimited</code>
  ///
  /// Parameter [instanceFamily] :
  /// The instance family.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyDefaultCreditSpecificationResult>
      modifyDefaultCreditSpecification({
    required String cpuCredits,
    required UnlimitedSupportedInstanceFamily instanceFamily,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes the default KMS key for EBS encryption by default for your account
  /// in this Region.
  ///
  /// Amazon Web Services creates a unique Amazon Web Services managed KMS key
  /// in each Region for use with encryption by default. If you change the
  /// default KMS key to a symmetric customer managed KMS key, it is used
  /// instead of the Amazon Web Services managed KMS key. To reset the default
  /// KMS key to the Amazon Web Services managed KMS key for EBS, use
  /// <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric KMS
  /// keys.
  ///
  /// If you delete or disable the customer managed KMS key that you specified
  /// for use with encryption by default, your instances will fail to launch.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the Key Management Service (KMS) KMS key to use for
  /// Amazon EBS encryption. If this parameter is not specified, your KMS key
  /// for Amazon EBS is used. If <code>KmsKeyId</code> is specified, the
  /// encrypted state must be <code>true</code>.
  ///
  /// You can specify the KMS key using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
  /// </li>
  /// </ul>
  /// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
  /// if you specify an ID, alias, or ARN that is not valid, the action can
  /// appear to complete, but eventually fails.
  ///
  /// Amazon EBS does not support asymmetric KMS keys.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyEbsDefaultKmsKeyIdResult> modifyEbsDefaultKmsKeyId({
    required String kmsKeyId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified EC2 Fleet.
  ///
  /// You can only modify an EC2 Fleet request of type <code>maintain</code>.
  ///
  /// While the EC2 Fleet is being modified, it is in the <code>modifying</code>
  /// state.
  ///
  /// To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet
  /// launches the additional Spot Instances according to the allocation
  /// strategy for the EC2 Fleet request. If the allocation strategy is
  /// <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot
  /// Instance pool with the lowest price. If the allocation strategy is
  /// <code>diversified</code>, the EC2 Fleet distributes the instances across
  /// the Spot Instance pools. If the allocation strategy is
  /// <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot
  /// Instance pools with optimal capacity for the number of instances that are
  /// launching.
  ///
  /// To scale down your EC2 Fleet, decrease its target capacity. First, the EC2
  /// Fleet cancels any open requests that exceed the new target capacity. You
  /// can request that the EC2 Fleet terminate Spot Instances until the size of
  /// the fleet no longer exceeds the new target capacity. If the allocation
  /// strategy is <code>lowest-price</code>, the EC2 Fleet terminates the
  /// instances with the highest price per unit. If the allocation strategy is
  /// <code>capacity-optimized</code>, the EC2 Fleet terminates the instances in
  /// the Spot Instance pools that have the least available Spot Instance
  /// capacity. If the allocation strategy is <code>diversified</code>, the EC2
  /// Fleet terminates instances across the Spot Instance pools. Alternatively,
  /// you can request that the EC2 Fleet keep the fleet at its current size, but
  /// not replace any Spot Instances that are interrupted or that you terminate
  /// manually.
  ///
  /// If you are finished with your EC2 Fleet for now, but will use it again
  /// later, you can set the target capacity to 0.
  ///
  /// Parameter [fleetId] :
  /// The ID of the EC2 Fleet.
  ///
  /// Parameter [context] :
  /// Reserved.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [excessCapacityTerminationPolicy] :
  /// Indicates whether running instances should be terminated if the total
  /// target capacity of the EC2 Fleet is decreased below the current size of
  /// the EC2 Fleet.
  ///
  /// Supported only for fleets of type <code>maintain</code>.
  ///
  /// Parameter [launchTemplateConfigs] :
  /// The launch template and overrides.
  ///
  /// Parameter [targetCapacitySpecification] :
  /// The size of the EC2 Fleet.
  Future<ModifyFleetResult> modifyFleet({
    required String fleetId,
    String? context,
    bool? dryRun,
    FleetExcessCapacityTerminationPolicy? excessCapacityTerminationPolicy,
    List<FleetLaunchTemplateConfigRequest>? launchTemplateConfigs,
    TargetCapacitySpecificationRequest? targetCapacitySpecification,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [attribute] :
  /// The name of the attribute.
  ///
  /// Parameter [description] :
  /// A description for the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [loadPermission] :
  /// The load permission for the AFI.
  ///
  /// Parameter [name] :
  /// A name for the AFI.
  ///
  /// Parameter [operationType] :
  /// The operation type.
  ///
  /// Parameter [productCodes] :
  /// The product codes. After you add a product code to an AFI, it can't be
  /// removed. This parameter is valid only when modifying the
  /// <code>productCodes</code> attribute.
  ///
  /// Parameter [userGroups] :
  /// The user groups. This parameter is valid only when modifying the
  /// <code>loadPermission</code> attribute.
  ///
  /// Parameter [userIds] :
  /// The Amazon Web Services account IDs. This parameter is valid only when
  /// modifying the <code>loadPermission</code> attribute.
  Future<ModifyFpgaImageAttributeResult> modifyFpgaImageAttribute({
    required String fpgaImageId,
    FpgaImageAttributeName? attribute,
    String? description,
    bool? dryRun,
    LoadPermissionModifications? loadPermission,
    String? name,
    OperationType? operationType,
    List<String>? productCodes,
    List<String>? userGroups,
    List<String>? userIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify the auto-placement setting of a Dedicated Host. When auto-placement
  /// is enabled, any instances that you launch with a tenancy of
  /// <code>host</code> but without a specific host ID are placed onto any
  /// available Dedicated Host in your account that has auto-placement enabled.
  /// When auto-placement is disabled, you need to provide a host ID to have the
  /// instance launch onto a specific host. If no host ID is provided, the
  /// instance is launched onto a suitable host with auto-placement enabled.
  ///
  /// You can also use this API action to modify a Dedicated Host to support
  /// either multiple instance types in an instance family, or to support a
  /// specific instance type only.
  ///
  /// Parameter [hostIds] :
  /// The IDs of the Dedicated Hosts to modify.
  ///
  /// Parameter [autoPlacement] :
  /// Specify whether to enable or disable auto-placement.
  ///
  /// Parameter [hostMaintenance] :
  /// Indicates whether to enable or disable host maintenance for the Dedicated
  /// Host. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-maintenance.html">
  /// Host maintenance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [hostRecovery] :
  /// Indicates whether to enable or disable host recovery for the Dedicated
  /// Host. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html">
  /// Host recovery</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceFamily] :
  /// Specifies the instance family to be supported by the Dedicated Host.
  /// Specify this parameter to modify a Dedicated Host to support multiple
  /// instance types within its current instance family.
  ///
  /// If you want to modify a Dedicated Host to support a specific instance type
  /// only, omit this parameter and specify <b>InstanceType</b> instead. You
  /// cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same
  /// request.
  ///
  /// Parameter [instanceType] :
  /// Specifies the instance type to be supported by the Dedicated Host. Specify
  /// this parameter to modify a Dedicated Host to support only a specific
  /// instance type.
  ///
  /// If you want to modify a Dedicated Host to support multiple instance types
  /// in its current instance family, omit this parameter and specify
  /// <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and
  /// <b>InstanceFamily</b> in the same request.
  Future<ModifyHostsResult> modifyHosts({
    required List<String> hostIds,
    AutoPlacement? autoPlacement,
    HostMaintenance? hostMaintenance,
    HostRecovery? hostRecovery,
    String? instanceFamily,
    String? instanceType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the ID format for the specified resource on a per-Region basis.
  /// You can specify that resources should receive longer IDs (17-character
  /// IDs) when they are created.
  ///
  /// This request can only be used to modify longer ID settings for resource
  /// types that are within the opt-in period. Resources currently in their
  /// opt-in period include: <code>bundle</code> | <code>conversion-task</code>
  /// | <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// This setting applies to the IAM user who makes the request; it does not
  /// apply to the entire Amazon Web Services account. By default, an IAM user
  /// defaults to the same settings as the root user. If you're using this
  /// action as the root user, then these settings apply to the entire account,
  /// unless an IAM user explicitly overrides these settings for themselves. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource
  /// IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Resources created with longer IDs are visible to all IAM roles and users,
  /// regardless of these settings and provided that they have permission to use
  /// the relevant <code>Describe</code> command for the resource type.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Alternatively, use the <code>all-current</code> option to include all
  /// resource types that are currently within their opt-in period for longer
  /// IDs.
  ///
  /// Parameter [useLongIds] :
  /// Indicate whether the resource should use longer IDs (17-character IDs).
  Future<void> modifyIdFormat({
    required String resource,
    required bool useLongIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the ID format of a resource for a specified IAM user, IAM role,
  /// or the root user for an account; or all IAM users, IAM roles, and the root
  /// user for an account. You can specify that resources should receive longer
  /// IDs (17-character IDs) when they are created.
  ///
  /// This request can only be used to modify longer ID settings for resource
  /// types that are within the opt-in period. Resources currently in their
  /// opt-in period include: <code>bundle</code> | <code>conversion-task</code>
  /// | <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource
  /// IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// This setting applies to the principal specified in the request; it does
  /// not apply to the principal that makes the request.
  ///
  /// Resources created with longer IDs are visible to all IAM roles and users,
  /// regardless of these settings and provided that they have permission to use
  /// the relevant <code>Describe</code> command for the resource type.
  ///
  /// Parameter [principalArn] :
  /// The ARN of the principal, which can be an IAM user, IAM role, or the root
  /// user. Specify <code>all</code> to modify the ID format for all IAM users,
  /// IAM roles, and the root user of the account.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Alternatively, use the <code>all-current</code> option to include all
  /// resource types that are currently within their opt-in period for longer
  /// IDs.
  ///
  /// Parameter [useLongIds] :
  /// Indicates whether the resource should use longer IDs (17-character IDs)
  Future<void> modifyIdentityIdFormat({
    required String principalArn,
    required String resource,
    required bool useLongIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified AMI. You can specify
  /// only one attribute at a time.
  ///
  /// To specify the attribute, you can use the <code>Attribute</code>
  /// parameter, or one of the following parameters: <code>Description</code>,
  /// <code>ImdsSupport</code>, or <code>LaunchPermission</code>.
  ///
  /// Images with an Amazon Web Services Marketplace product code cannot be made
  /// public.
  ///
  /// To enable the SriovNetSupport enhanced networking attribute of an image,
  /// enable SriovNetSupport on an instance and create an AMI from the instance.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [attribute] :
  /// The name of the attribute to modify.
  ///
  /// Valid values: <code>description</code> | <code>imdsSupport</code> |
  /// <code>launchPermission</code>
  ///
  /// Parameter [description] :
  /// A new description for the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [imdsSupport] :
  /// Set to <code>v2.0</code> to indicate that IMDSv2 is specified in the AMI.
  /// Instances launched from this AMI will have <code>HttpTokens</code>
  /// automatically set to <code>required</code> so that, by default, the
  /// instance requires that IMDSv2 is used when requesting instance metadata.
  /// In addition, <code>HttpPutResponseHopLimit</code> is set to
  /// <code>2</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure
  /// the AMI</a> in the <i>Amazon EC2 User Guide</i>.
  /// <important>
  /// Do not use this parameter unless your AMI software supports IMDSv2. After
  /// you set the value to <code>v2.0</code>, you can't undo it. The only way to
  /// “reset” your AMI is to create a new AMI from the underlying snapshot.
  /// </important>
  ///
  /// Parameter [launchPermission] :
  /// A new launch permission for the AMI.
  ///
  /// Parameter [operationType] :
  /// The operation type. This parameter can be used only when the
  /// <code>Attribute</code> parameter is <code>launchPermission</code>.
  ///
  /// Parameter [organizationArns] :
  /// The Amazon Resource Name (ARN) of an organization. This parameter can be
  /// used only when the <code>Attribute</code> parameter is
  /// <code>launchPermission</code>.
  ///
  /// Parameter [organizationalUnitArns] :
  /// The Amazon Resource Name (ARN) of an organizational unit (OU). This
  /// parameter can be used only when the <code>Attribute</code> parameter is
  /// <code>launchPermission</code>.
  ///
  /// Parameter [productCodes] :
  /// Not supported.
  ///
  /// Parameter [userGroups] :
  /// The user groups. This parameter can be used only when the
  /// <code>Attribute</code> parameter is <code>launchPermission</code>.
  ///
  /// Parameter [userIds] :
  /// The Amazon Web Services account IDs. This parameter can be used only when
  /// the <code>Attribute</code> parameter is <code>launchPermission</code>.
  ///
  /// Parameter [value] :
  /// The value of the attribute being modified. This parameter can be used only
  /// when the <code>Attribute</code> parameter is <code>description</code> or
  /// <code>imdsSupport</code>.
  Future<void> modifyImageAttribute({
    required String imageId,
    String? attribute,
    AttributeValue? description,
    bool? dryRun,
    AttributeValue? imdsSupport,
    LaunchPermissionModifications? launchPermission,
    OperationType? operationType,
    List<String>? organizationArns,
    List<String>? organizationalUnitArns,
    List<String>? productCodes,
    List<String>? userGroups,
    List<String>? userIds,
    String? value,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified instance. You can
  /// specify only one attribute at a time.
  ///
  /// <b>Note: </b>Using this action to change the security groups associated
  /// with an elastic network interface (ENI) attached to an instance can result
  /// in an error if the instance has more than one ENI. To change the security
  /// groups associated with an ENI attached to an instance that has multiple
  /// ENIs, we recommend that you use the <a>ModifyNetworkInterfaceAttribute</a>
  /// action.
  ///
  /// To modify some attributes, the instance must be stopped. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modify
  /// a stopped instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [attribute] :
  /// The name of the attribute to modify.
  /// <important>
  /// You can modify the following attributes only:
  /// <code>disableApiTermination</code> | <code>instanceType</code> |
  /// <code>kernel</code> | <code>ramdisk</code> |
  /// <code>instanceInitiatedShutdownBehavior</code> |
  /// <code>blockDeviceMapping</code> | <code>userData</code> |
  /// <code>sourceDestCheck</code> | <code>groupSet</code> |
  /// <code>ebsOptimized</code> | <code>sriovNetSupport</code> |
  /// <code>enaSupport</code> | <code>nvmeSupport</code> |
  /// <code>disableApiStop</code> | <code>enclaveOptions</code>
  /// </important>
  ///
  /// Parameter [blockDeviceMappings] :
  /// Modifies the <code>DeleteOnTermination</code> attribute for volumes that
  /// are currently attached. The volume must be owned by the caller. If no
  /// value is specified for <code>DeleteOnTermination</code>, the default is
  /// <code>true</code> and the volume is deleted when the instance is
  /// terminated. You can't modify the <code>DeleteOnTermination</code>
  /// attribute for volumes that are attached to Fargate tasks.
  ///
  /// To add instance store volumes to an Amazon EBS-backed instance, you must
  /// add them when you launch the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Update
  /// the block device mapping when launching an instance</a> in the <i>Amazon
  /// EC2 User Guide</i>.
  ///
  /// Parameter [disableApiStop] :
  /// Indicates whether an instance is enabled for stop protection. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop
  /// Protection</a>.
  /// <p/>
  ///
  /// Parameter [disableApiTermination] :
  /// If the value is <code>true</code>, you can't terminate the instance using
  /// the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use
  /// this parameter for Spot Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ebsOptimized] :
  /// Specifies whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal EBS I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS Optimized instance.
  ///
  /// Parameter [enaSupport] :
  /// Set to <code>true</code> to enable enhanced networking with ENA for the
  /// instance.
  ///
  /// This option is supported only for HVM instances. Specifying this option
  /// with a PV instance can make it unreachable.
  ///
  /// Parameter [groups] :
  /// Replaces the security groups of the instance with the specified security
  /// groups. You must specify the ID of at least one security group, even if
  /// it's just the default security group for the VPC.
  ///
  /// Parameter [instanceInitiatedShutdownBehavior] :
  /// Specifies whether an instance stops or terminates when you initiate
  /// shutdown from the instance (using the operating system command for system
  /// shutdown).
  ///
  /// Parameter [instanceType] :
  /// Changes the instance type to the specified value. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>. If the instance type is not
  /// valid, the error returned is <code>InvalidInstanceAttributeValue</code>.
  ///
  /// Parameter [kernel] :
  /// Changes the instance's kernel to the specified value. We recommend that
  /// you use PV-GRUB instead of kernels and RAM disks. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.
  ///
  /// Parameter [ramdisk] :
  /// Changes the instance's RAM disk to the specified value. We recommend that
  /// you use PV-GRUB instead of kernels and RAM disks. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.
  ///
  /// Parameter [sourceDestCheck] :
  /// Enable or disable source/destination checks, which ensure that the
  /// instance is either the source or the destination of any traffic that it
  /// receives. If the value is <code>true</code>, source/destination checks are
  /// enabled; otherwise, they are disabled. The default value is
  /// <code>true</code>. You must disable source/destination checks if the
  /// instance runs services such as network address translation, routing, or
  /// firewalls.
  ///
  /// Parameter [sriovNetSupport] :
  /// Set to <code>simple</code> to enable enhanced networking with the Intel
  /// 82599 Virtual Function interface for the instance.
  ///
  /// There is no way to disable enhanced networking with the Intel 82599
  /// Virtual Function interface at this time.
  ///
  /// This option is supported only for HVM instances. Specifying this option
  /// with a PV instance can make it unreachable.
  ///
  /// Parameter [userData] :
  /// Changes the instance's user data to the specified value. If you are using
  /// an Amazon Web Services SDK or command line tool, base64-encoding is
  /// performed for you, and you can load the text from a file. Otherwise, you
  /// must provide base64-encoded text.
  ///
  /// Parameter [value] :
  /// A new value for the attribute. Use only with the <code>kernel</code>,
  /// <code>ramdisk</code>, <code>userData</code>,
  /// <code>disableApiTermination</code>, or
  /// <code>instanceInitiatedShutdownBehavior</code> attribute.
  Future<void> modifyInstanceAttribute({
    required String instanceId,
    InstanceAttributeName? attribute,
    List<InstanceBlockDeviceMappingSpecification>? blockDeviceMappings,
    AttributeBooleanValue? disableApiStop,
    AttributeBooleanValue? disableApiTermination,
    bool? dryRun,
    AttributeBooleanValue? ebsOptimized,
    AttributeBooleanValue? enaSupport,
    List<String>? groups,
    AttributeValue? instanceInitiatedShutdownBehavior,
    AttributeValue? instanceType,
    AttributeValue? kernel,
    AttributeValue? ramdisk,
    AttributeBooleanValue? sourceDestCheck,
    AttributeValue? sriovNetSupport,
    BlobAttributeValue? userData,
    String? value,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the Capacity Reservation settings for a stopped instance. Use
  /// this action to configure an instance to target a specific Capacity
  /// Reservation, run in any <code>open</code> Capacity Reservation with
  /// matching attributes, or run On-Demand Instance capacity.
  ///
  /// Parameter [capacityReservationSpecification] :
  /// Information about the Capacity Reservation targeting option.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance to be modified.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceCapacityReservationAttributesResult>
      modifyInstanceCapacityReservationAttributes({
    required CapacityReservationSpecification capacityReservationSpecification,
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the credit option for CPU usage on a running or stopped burstable
  /// performance instance. The credit options are <code>standard</code> and
  /// <code>unlimited</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceCreditSpecifications] :
  /// Information about the credit option for CPU usage.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceCreditSpecificationResult>
      modifyInstanceCreditSpecification({
    required List<InstanceCreditSpecificationRequest>
        instanceCreditSpecifications,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the start time for a scheduled Amazon EC2 instance event.
  ///
  /// Parameter [instanceEventId] :
  /// The ID of the event whose date and time you are modifying.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance with the scheduled event.
  ///
  /// Parameter [notBefore] :
  /// The new date and time when the event will take place.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceEventStartTimeResult> modifyInstanceEventStartTime({
    required String instanceEventId,
    required String instanceId,
    required DateTime notBefore,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified event window.
  ///
  /// You can define either a set of time ranges or a cron expression when
  /// modifying the event window, but not both.
  ///
  /// To modify the targets associated with the event window, use the
  /// <a>AssociateInstanceEventWindow</a> and
  /// <a>DisassociateInstanceEventWindow</a> API.
  ///
  /// If Amazon Web Services has already scheduled an event, modifying an event
  /// window won't change the time of the scheduled event.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define
  /// event windows for scheduled events</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [instanceEventWindowId] :
  /// The ID of the event window.
  ///
  /// Parameter [cronExpression] :
  /// The cron expression of the event window, for example, <code>* 0-4,20-23 *
  /// * 1,5</code>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Only hour and day of the week values are supported.
  /// </li>
  /// <li>
  /// For day of the week values, you can specify either integers <code>0</code>
  /// through <code>6</code>, or alternative single values <code>SUN</code>
  /// through <code>SAT</code>.
  /// </li>
  /// <li>
  /// The minute, month, and year must be specified by <code>*</code>.
  /// </li>
  /// <li>
  /// The hour value must be one or a multiple range, for example,
  /// <code>0-4</code> or <code>0-4,20-23</code>.
  /// </li>
  /// <li>
  /// Each hour range must be &gt;= 2 hours, for example, <code>0-2</code> or
  /// <code>20-23</code>.
  /// </li>
  /// <li>
  /// The event window must be &gt;= 4 hours. The combined total time ranges in
  /// the event window must be &gt;= 4 hours.
  /// </li>
  /// </ul>
  /// For more information about cron expressions, see <a
  /// href="https://en.wikipedia.org/wiki/Cron">cron</a> on the <i>Wikipedia
  /// website</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [name] :
  /// The name of the event window.
  ///
  /// Parameter [timeRanges] :
  /// The time ranges of the event window.
  Future<ModifyInstanceEventWindowResult> modifyInstanceEventWindow({
    required String instanceEventWindowId,
    String? cronExpression,
    bool? dryRun,
    String? name,
    List<InstanceEventWindowTimeRangeRequest>? timeRanges,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the recovery behavior of your instance to disable simplified
  /// automatic recovery or set the recovery behavior to default. The default
  /// configuration will not enable simplified automatic recovery for an
  /// unsupported instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery">Simplified
  /// automatic recovery</a>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [autoRecovery] :
  /// Disables the automatic recovery behavior of your instance or sets it to
  /// default.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceMaintenanceOptionsResult>
      modifyInstanceMaintenanceOptions({
    required String instanceId,
    InstanceAutoRecoveryState? autoRecovery,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the default instance metadata service (IMDS) settings at the
  /// account level in the specified Amazon Web Services&#x2028; Region.
  /// <note>
  /// To remove a parameter's account-level default setting, specify
  /// <code>no-preference</code>. If an account-level setting is cleared with
  /// <code>no-preference</code>, then the instance launch considers the other
  /// instance metadata settings. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order
  /// of precedence for instance metadata options</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  /// </note>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [httpEndpoint] :
  /// Enables or disables the IMDS endpoint on an instance. When disabled, the
  /// instance metadata can't be accessed.
  ///
  /// Parameter [httpPutResponseHopLimit] :
  /// The maximum number of hops that the metadata token can travel. To indicate
  /// no preference, specify <code>-1</code>.
  ///
  /// Possible values: Integers from <code>1</code> to <code>64</code>, and
  /// <code>-1</code> to indicate no preference
  ///
  /// Parameter [httpTokens] :
  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> – IMDSv2 is optional, which means that you can use
  /// either IMDSv2 or IMDSv1.
  /// </li>
  /// <li>
  /// <code>required</code> – IMDSv2 is required, which means that IMDSv1 is
  /// disabled, and you must use IMDSv2.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceMetadataTags] :
  /// Enables or disables access to an instance's tags from the instance
  /// metadata. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a> in the <i>Amazon EC2
  /// User Guide</i>.
  Future<ModifyInstanceMetadataDefaultsResult> modifyInstanceMetadataDefaults({
    bool? dryRun,
    DefaultInstanceMetadataEndpointState? httpEndpoint,
    int? httpPutResponseHopLimit,
    MetadataDefaultHttpTokensState? httpTokens,
    DefaultInstanceMetadataTagsState? instanceMetadataTags,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify the instance metadata parameters on a running or stopped instance.
  /// When you modify the parameters on a stopped instance, they are applied
  /// when the instance is started. When you modify the parameters on a running
  /// instance, the API responds with a state of “pending”. After the parameter
  /// modifications are successfully applied to the instance, the state of the
  /// modifications changes from “pending” to “applied” in subsequent
  /// describe-instances API calls. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// metadata and user data</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [httpEndpoint] :
  /// Enables or disables the HTTP metadata endpoint on your instances. If this
  /// parameter is not specified, the existing state is maintained.
  ///
  /// If you specify a value of <code>disabled</code>, you cannot access your
  /// instance metadata.
  ///
  /// Parameter [httpProtocolIpv6] :
  /// Enables or disables the IPv6 endpoint for the instance metadata service.
  /// Applies only if you enabled the HTTP metadata endpoint.
  ///
  /// Parameter [httpPutResponseHopLimit] :
  /// The desired HTTP PUT response hop limit for instance metadata requests.
  /// The larger the number, the further instance metadata requests can travel.
  /// If no parameter is specified, the existing state is maintained.
  ///
  /// Possible values: Integers from 1 to 64
  ///
  /// Parameter [httpTokens] :
  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> - IMDSv2 is optional. You can choose whether to send
  /// a session token in your instance metadata retrieval requests. If you
  /// retrieve IAM role credentials without a session token, you receive the
  /// IMDSv1 role credentials. If you retrieve IAM role credentials using a
  /// valid session token, you receive the IMDSv2 role credentials.
  /// </li>
  /// <li>
  /// <code>required</code> - IMDSv2 is required. You must send a session token
  /// in your instance metadata retrieval requests. With this option, retrieving
  /// the IAM role credentials always returns IMDSv2 credentials; IMDSv1
  /// credentials are not available.
  /// </li>
  /// </ul>
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// If the value of <code>ImdsSupport</code> for the Amazon Machine Image
  /// (AMI) for your instance is <code>v2.0</code> and the account level default
  /// is set to <code>no-preference</code>, the default is
  /// <code>required</code>.
  /// </li>
  /// <li>
  /// If the value of <code>ImdsSupport</code> for the Amazon Machine Image
  /// (AMI) for your instance is <code>v2.0</code>, but the account level
  /// default is set to <code>V1 or V2</code>, the default is
  /// <code>optional</code>.
  /// </li>
  /// </ul>
  /// The default value can also be affected by other combinations of
  /// parameters. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order
  /// of precedence for instance metadata options</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  ///
  /// Parameter [instanceMetadataTags] :
  /// Set to <code>enabled</code> to allow access to instance tags from the
  /// instance metadata. Set to <code>disabled</code> to turn off access to
  /// instance tags from the instance metadata. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a>.
  Future<ModifyInstanceMetadataOptionsResult> modifyInstanceMetadataOptions({
    required String instanceId,
    bool? dryRun,
    InstanceMetadataEndpointState? httpEndpoint,
    InstanceMetadataProtocolState? httpProtocolIpv6,
    int? httpPutResponseHopLimit,
    HttpTokensState? httpTokens,
    InstanceMetadataTagsState? instanceMetadataTags,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the placement attributes for a specified instance. You can do the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// Modify the affinity between an instance and a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
  /// Host</a>. When affinity is set to <code>host</code> and the instance is
  /// not associated with a specific Dedicated Host, the next time the instance
  /// is started, it is automatically associated with the host on which it
  /// lands. If the instance is restarted or rebooted, this relationship
  /// persists.
  /// </li>
  /// <li>
  /// Change the Dedicated Host with which an instance is associated.
  /// </li>
  /// <li>
  /// Change the instance tenancy of an instance.
  /// </li>
  /// <li>
  /// Move an instance to or from a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement
  /// group</a>.
  /// </li>
  /// </ul>
  /// At least one attribute for affinity, host ID, tenancy, or placement group
  /// name must be specified in the request. Affinity and tenancy can be
  /// modified in the same request.
  ///
  /// To modify the host ID, tenancy, placement group, or partition for an
  /// instance, the instance must be in the <code>stopped</code> state.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance that you are modifying.
  ///
  /// Parameter [affinity] :
  /// The affinity setting for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-affinity">Host
  /// affinity</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [groupId] :
  /// The Group Id of a placement group. You must specify the Placement Group
  /// <b>Group Id</b> to launch an instance in a shared placement group.
  ///
  /// Parameter [groupName] :
  /// The name of the placement group in which to place the instance. For spread
  /// placement groups, the instance must have a tenancy of
  /// <code>default</code>. For cluster and partition placement groups, the
  /// instance must have a tenancy of <code>default</code> or
  /// <code>dedicated</code>.
  ///
  /// To remove an instance from a placement group, specify an empty string
  /// ("").
  ///
  /// Parameter [hostId] :
  /// The ID of the Dedicated Host with which to associate the instance.
  ///
  /// Parameter [hostResourceGroupArn] :
  /// The ARN of the host resource group in which to place the instance. The
  /// instance must have a tenancy of <code>host</code> to specify this
  /// parameter.
  ///
  /// Parameter [partitionNumber] :
  /// The number of the partition in which to place the instance. Valid only if
  /// the placement group strategy is set to <code>partition</code>.
  ///
  /// Parameter [tenancy] :
  /// The tenancy for the instance.
  /// <note>
  /// For T3 instances, you must launch the instance on a Dedicated Host to use
  /// a tenancy of <code>host</code>. You can't change the tenancy from
  /// <code>host</code> to <code>dedicated</code> or <code>default</code>.
  /// Attempting to make one of these unsupported tenancy changes results in an
  /// <code>InvalidRequest</code> error code.
  /// </note>
  Future<ModifyInstancePlacementResult> modifyInstancePlacement({
    required String instanceId,
    Affinity? affinity,
    String? groupId,
    String? groupName,
    String? hostId,
    String? hostResourceGroupArn,
    int? partitionNumber,
    HostTenancy? tenancy,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify the configurations of an IPAM.
  ///
  /// Parameter [ipamId] :
  /// The ID of the IPAM you want to modify.
  ///
  /// Parameter [addOperatingRegions] :
  /// Choose the operating Regions for the IPAM. Operating Regions are Amazon
  /// Web Services Regions where the IPAM is allowed to manage IP address CIDRs.
  /// IPAM only discovers and monitors resources in the Amazon Web Services
  /// Regions you select as operating Regions.
  ///
  /// For more information about operating Regions, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
  /// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [description] :
  /// The description of the IPAM you want to modify.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeOperatingRegions] :
  /// The operating Regions to remove.
  ///
  /// Parameter [tier] :
  /// IPAM is offered in a Free Tier and an Advanced Tier. For more information
  /// about the features available in each tier and the costs associated with
  /// the tiers, see <a href="http://aws.amazon.com/vpc/pricing/">Amazon VPC
  /// pricing &gt; IPAM tab</a>.
  Future<ModifyIpamResult> modifyIpam({
    required String ipamId,
    List<AddIpamOperatingRegion>? addOperatingRegions,
    String? description,
    bool? dryRun,
    List<RemoveIpamOperatingRegion>? removeOperatingRegions,
    IpamTier? tier,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify the configurations of an IPAM pool.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/mod-pool-ipam.html">Modify
  /// a pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool you want to modify.
  ///
  /// Parameter [addAllocationResourceTags] :
  /// Add tag allocation rules to a pool. For more information about allocation
  /// rules, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-top-ipam.html">Create
  /// a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [allocationDefaultNetmaskLength] :
  /// The default netmask length for allocations added to this pool. If, for
  /// example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16
  /// here, new allocations will default to 10.0.0.0/16.
  ///
  /// Parameter [allocationMaxNetmaskLength] :
  /// The maximum netmask length possible for CIDR allocations in this IPAM pool
  /// to be compliant. Possible netmask lengths for IPv4 addresses are 0 - 32.
  /// Possible netmask lengths for IPv6 addresses are 0 - 128.The maximum
  /// netmask length must be greater than the minimum netmask length.
  ///
  /// Parameter [allocationMinNetmaskLength] :
  /// The minimum netmask length required for CIDR allocations in this IPAM pool
  /// to be compliant. Possible netmask lengths for IPv4 addresses are 0 - 32.
  /// Possible netmask lengths for IPv6 addresses are 0 - 128. The minimum
  /// netmask length must be less than the maximum netmask length.
  ///
  /// Parameter [autoImport] :
  /// If true, IPAM will continuously look for resources within the CIDR range
  /// of this pool and automatically import them as allocations into your IPAM.
  /// The CIDRs that will be allocated for these resources must not already be
  /// allocated to other resources in order for the import to succeed. IPAM will
  /// import a CIDR regardless of its compliance with the pool's allocation
  /// rules, so a resource might be imported and subsequently marked as
  /// noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will
  /// import the largest CIDR only. If IPAM discovers multiple CIDRs with
  /// matching CIDRs, IPAM will randomly import one of them only.
  ///
  /// A locale must be set on the pool for this feature to work.
  ///
  /// Parameter [clearAllocationDefaultNetmaskLength] :
  /// Clear the default netmask length allocation rule for this pool.
  ///
  /// Parameter [description] :
  /// The description of the IPAM pool you want to modify.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeAllocationResourceTags] :
  /// Remove tag allocation rules from a pool.
  Future<ModifyIpamPoolResult> modifyIpamPool({
    required String ipamPoolId,
    List<RequestIpamResourceTag>? addAllocationResourceTags,
    int? allocationDefaultNetmaskLength,
    int? allocationMaxNetmaskLength,
    int? allocationMinNetmaskLength,
    bool? autoImport,
    bool? clearAllocationDefaultNetmaskLength,
    String? description,
    bool? dryRun,
    List<RequestIpamResourceTag>? removeAllocationResourceTags,
  }) async {
    _s.validateNumRange(
      'allocationDefaultNetmaskLength',
      allocationDefaultNetmaskLength,
      0,
      128,
    );
    _s.validateNumRange(
      'allocationMaxNetmaskLength',
      allocationMaxNetmaskLength,
      0,
      128,
    );
    _s.validateNumRange(
      'allocationMinNetmaskLength',
      allocationMinNetmaskLength,
      0,
      128,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify a resource CIDR. You can use this action to transfer resource CIDRs
  /// between scopes and ignore resource CIDRs that you do not want to manage.
  /// If set to false, the resource will not be tracked for overlap, it cannot
  /// be auto-imported into a pool, and it will be removed from any pool it has
  /// an allocation in.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/move-resource-ipam.html">Move
  /// resource CIDRs between scopes</a> and <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/change-monitoring-state-ipam.html">Change
  /// the monitoring state of resource CIDRs</a> in the <i>Amazon VPC IPAM User
  /// Guide</i>.
  ///
  /// Parameter [currentIpamScopeId] :
  /// The ID of the current scope that the resource CIDR is in.
  ///
  /// Parameter [monitored] :
  /// Determines if the resource is monitored by IPAM. If a resource is
  /// monitored, the resource is discovered by IPAM and you can view details
  /// about the resource’s CIDR.
  ///
  /// Parameter [resourceCidr] :
  /// The CIDR of the resource you want to modify.
  ///
  /// Parameter [resourceId] :
  /// The ID of the resource you want to modify.
  ///
  /// Parameter [resourceRegion] :
  /// The Amazon Web Services Region of the resource you want to modify.
  ///
  /// Parameter [destinationIpamScopeId] :
  /// The ID of the scope you want to transfer the resource CIDR to.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyIpamResourceCidrResult> modifyIpamResourceCidr({
    required String currentIpamScopeId,
    required bool monitored,
    required String resourceCidr,
    required String resourceId,
    required String resourceRegion,
    String? destinationIpamScopeId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a resource discovery. A resource discovery is an IPAM component
  /// that enables IPAM to manage and monitor resources that belong to the
  /// owning account.
  ///
  /// Parameter [ipamResourceDiscoveryId] :
  /// A resource discovery ID.
  ///
  /// Parameter [addOperatingRegions] :
  /// Add operating Regions to the resource discovery. Operating Regions are
  /// Amazon Web Services Regions where the IPAM is allowed to manage IP address
  /// CIDRs. IPAM only discovers and monitors resources in the Amazon Web
  /// Services Regions you select as operating Regions.
  ///
  /// Parameter [description] :
  /// A resource discovery description.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeOperatingRegions] :
  /// Remove operating Regions.
  Future<ModifyIpamResourceDiscoveryResult> modifyIpamResourceDiscovery({
    required String ipamResourceDiscoveryId,
    List<AddIpamOperatingRegion>? addOperatingRegions,
    String? description,
    bool? dryRun,
    List<RemoveIpamOperatingRegion>? removeOperatingRegions,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify an IPAM scope.
  ///
  /// Parameter [ipamScopeId] :
  /// The ID of the scope you want to modify.
  ///
  /// Parameter [description] :
  /// The description of the scope you want to modify.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyIpamScopeResult> modifyIpamScope({
    required String ipamScopeId,
    String? description,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a launch template. You can specify which version of the launch
  /// template to set as the default version. When launching an instance, the
  /// default version applies when a launch template version is not specified.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Constraint: Maximum 128 ASCII characters.
  ///
  /// Parameter [defaultVersion] :
  /// The version number of the launch template to set as the default version.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template
  /// name, but not both.
  Future<ModifyLaunchTemplateResult> modifyLaunchTemplate({
    String? clientToken,
    String? defaultVersion,
    bool? dryRun,
    String? launchTemplateId,
    String? launchTemplateName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified local gateway route.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR block used for destination matches. The value that you provide
  /// must match the CIDR of an existing route in the table.
  ///
  /// Parameter [destinationPrefixListId] :
  /// The ID of the prefix list. Use a prefix list in place of
  /// <code>DestinationCidrBlock</code>. You cannot use
  /// <code>DestinationPrefixListId</code> and <code>DestinationCidrBlock</code>
  /// in the same request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [localGatewayVirtualInterfaceGroupId] :
  /// The ID of the virtual interface group.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  Future<ModifyLocalGatewayRouteResult> modifyLocalGatewayRoute({
    required String localGatewayRouteTableId,
    String? destinationCidrBlock,
    String? destinationPrefixListId,
    bool? dryRun,
    String? localGatewayVirtualInterfaceGroupId,
    String? networkInterfaceId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified managed prefix list.
  ///
  /// Adding or removing entries in a prefix list creates a new version of the
  /// prefix list. Changing the name of the prefix list does not affect the
  /// version.
  ///
  /// If you specify a current version number that does not match the true
  /// current version number, the request fails.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [addEntries] :
  /// One or more entries to add to the prefix list.
  ///
  /// Parameter [currentVersion] :
  /// The current version of the prefix list.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxEntries] :
  /// The maximum number of entries for the prefix list. You cannot modify the
  /// entries of a prefix list and modify the size of a prefix list at the same
  /// time.
  ///
  /// If any of the resources that reference the prefix list cannot support the
  /// new maximum size, the modify operation fails. Check the state message for
  /// the IDs of the first ten resources that do not support the new maximum
  /// size.
  ///
  /// Parameter [prefixListName] :
  /// A name for the prefix list.
  ///
  /// Parameter [removeEntries] :
  /// One or more entries to remove from the prefix list.
  Future<ModifyManagedPrefixListResult> modifyManagedPrefixList({
    required String prefixListId,
    List<AddPrefixListEntry>? addEntries,
    int? currentVersion,
    bool? dryRun,
    int? maxEntries,
    String? prefixListName,
    List<RemovePrefixListEntry>? removeEntries,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified network interface attribute. You can specify only
  /// one attribute at a time. You can use this action to attach and detach
  /// security groups from an existing EC2 instance.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [associatePublicIpAddress] :
  /// Indicates whether to assign a public IPv4 address to a network interface.
  /// This option can be enabled for any network interface but will only apply
  /// to the primary network interface (eth0).
  ///
  /// Parameter [attachment] :
  /// Information about the interface attachment. If modifying the <code>delete
  /// on termination</code> attribute, you must specify the ID of the interface
  /// attachment.
  ///
  /// Parameter [connectionTrackingSpecification] :
  /// A connection tracking specification.
  ///
  /// Parameter [description] :
  /// A description for the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [enaSrdSpecification] :
  /// Updates the ENA Express configuration for the network interface that’s
  /// attached to the instance.
  ///
  /// Parameter [enablePrimaryIpv6] :
  /// If you’re modifying a network interface in a dual-stack or IPv6-only
  /// subnet, you have the option to assign a primary IPv6 IP address. A primary
  /// IPv6 address is an IPv6 GUA address associated with an ENI that you have
  /// enabled to use a primary IPv6 address. Use this option if the instance
  /// that this ENI will be attached to relies on its IPv6 address not changing.
  /// Amazon Web Services will automatically assign an IPv6 address associated
  /// with the ENI attached to your instance to be the primary IPv6 address.
  /// Once you enable an IPv6 GUA address to be a primary IPv6, you cannot
  /// disable it. When you enable an IPv6 GUA address to be a primary IPv6, the
  /// first IPv6 GUA will be made the primary IPv6 address until the instance is
  /// terminated or the network interface is detached. If you have multiple IPv6
  /// addresses associated with an ENI attached to your instance and you enable
  /// a primary IPv6 address, the first IPv6 GUA address associated with the ENI
  /// becomes the primary IPv6 address.
  ///
  /// Parameter [groups] :
  /// Changes the security groups for the network interface. The new set of
  /// groups you specify replaces the current set. You must specify at least one
  /// group, even if it's just the default security group in the VPC. You must
  /// specify the ID of the security group, not the name.
  ///
  /// Parameter [sourceDestCheck] :
  /// Enable or disable source/destination checks, which ensure that the
  /// instance is either the source or the destination of any traffic that it
  /// receives. If the value is <code>true</code>, source/destination checks are
  /// enabled; otherwise, they are disabled. The default value is
  /// <code>true</code>. You must disable source/destination checks if the
  /// instance runs services such as network address translation, routing, or
  /// firewalls.
  Future<void> modifyNetworkInterfaceAttribute({
    required String networkInterfaceId,
    bool? associatePublicIpAddress,
    NetworkInterfaceAttachmentChanges? attachment,
    ConnectionTrackingSpecificationRequest? connectionTrackingSpecification,
    AttributeValue? description,
    bool? dryRun,
    EnaSrdSpecification? enaSrdSpecification,
    bool? enablePrimaryIpv6,
    List<String>? groups,
    AttributeBooleanValue? sourceDestCheck,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the options for instance hostnames for the specified instance.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [enableResourceNameDnsAAAARecord] :
  /// Indicates whether to respond to DNS queries for instance hostnames with
  /// DNS AAAA records.
  ///
  /// Parameter [enableResourceNameDnsARecord] :
  /// Indicates whether to respond to DNS queries for instance hostnames with
  /// DNS A records.
  ///
  /// Parameter [privateDnsHostnameType] :
  /// The type of hostname for EC2 instances. For IPv4 only subnets, an instance
  /// DNS name must be based on the instance IPv4 address. For IPv6 only
  /// subnets, an instance DNS name must be based on the instance ID. For
  /// dual-stack subnets, you can specify whether DNS names use the instance
  /// IPv4 address or the instance ID.
  Future<ModifyPrivateDnsNameOptionsResult> modifyPrivateDnsNameOptions({
    required String instanceId,
    bool? dryRun,
    bool? enableResourceNameDnsAAAARecord,
    bool? enableResourceNameDnsARecord,
    HostnameType? privateDnsHostnameType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the configuration of your Reserved Instances, such as the
  /// Availability Zone, instance count, or instance type. The Reserved
  /// Instances to be modified must be identical, except for Availability Zone,
  /// network platform, and instance type.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying
  /// Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [reservedInstancesIds] :
  /// The IDs of the Reserved Instances to modify.
  ///
  /// Parameter [targetConfigurations] :
  /// The configuration settings for the Reserved Instances to modify.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token you provide to ensure idempotency of your
  /// modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  Future<ModifyReservedInstancesResult> modifyReservedInstances({
    required List<String> reservedInstancesIds,
    required List<ReservedInstancesConfiguration> targetConfigurations,
    String? clientToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the rules of a security group.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [securityGroupRules] :
  /// Information about the security group properties to update.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifySecurityGroupRulesResult> modifySecurityGroupRules({
    required String groupId,
    required List<SecurityGroupRuleUpdate> securityGroupRules,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds or removes permission settings for the specified snapshot. You may
  /// add or remove specified Amazon Web Services account IDs from a snapshot's
  /// list of create volume permissions, but you cannot do both in a single
  /// operation. If you need to both add and remove account IDs for a snapshot,
  /// you must use multiple operations. You can make up to 500 modifications to
  /// a snapshot in a single operation.
  ///
  /// Encrypted snapshots and snapshots with Amazon Web Services Marketplace
  /// product codes cannot be made public. Snapshots encrypted with your default
  /// KMS key cannot be shared with other accounts.
  ///
  /// For more information about modifying snapshot permissions, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modifying-snapshot-permissions.html">Share
  /// a snapshot</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot.
  ///
  /// Parameter [attribute] :
  /// The snapshot attribute to modify. Only volume creation permissions can be
  /// modified.
  ///
  /// Parameter [createVolumePermission] :
  /// A JSON representation of the snapshot attribute modification.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupNames] :
  /// The group to modify for the snapshot.
  ///
  /// Parameter [operationType] :
  /// The type of operation to perform to the attribute.
  ///
  /// Parameter [userIds] :
  /// The account ID to modify for the snapshot.
  Future<void> modifySnapshotAttribute({
    required String snapshotId,
    SnapshotAttributeName? attribute,
    CreateVolumePermissionModifications? createVolumePermission,
    bool? dryRun,
    List<String>? groupNames,
    OperationType? operationType,
    List<String>? userIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Archives an Amazon EBS snapshot. When you archive a snapshot, it is
  /// converted to a full snapshot that includes all of the blocks of data that
  /// were written to the volume at the time the snapshot was created, and moved
  /// from the standard tier to the archive tier. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshot-archive.html">Archive
  /// Amazon EBS snapshots</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [storageTier] :
  /// The name of the storage tier. You must specify <code>archive</code>.
  Future<ModifySnapshotTierResult> modifySnapshotTier({
    required String snapshotId,
    bool? dryRun,
    TargetStorageTier? storageTier,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Spot Fleet request.
  ///
  /// You can only modify a Spot Fleet request of type <code>maintain</code>.
  ///
  /// While the Spot Fleet request is being modified, it is in the
  /// <code>modifying</code> state.
  ///
  /// To scale up your Spot Fleet, increase its target capacity. The Spot Fleet
  /// launches the additional Spot Instances according to the allocation
  /// strategy for the Spot Fleet request. If the allocation strategy is
  /// <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot
  /// Instance pool with the lowest price. If the allocation strategy is
  /// <code>diversified</code>, the Spot Fleet distributes the instances across
  /// the Spot Instance pools. If the allocation strategy is
  /// <code>capacityOptimized</code>, Spot Fleet launches instances from Spot
  /// Instance pools with optimal capacity for the number of instances that are
  /// launching.
  ///
  /// To scale down your Spot Fleet, decrease its target capacity. First, the
  /// Spot Fleet cancels any open requests that exceed the new target capacity.
  /// You can request that the Spot Fleet terminate Spot Instances until the
  /// size of the fleet no longer exceeds the new target capacity. If the
  /// allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates
  /// the instances with the highest price per unit. If the allocation strategy
  /// is <code>capacityOptimized</code>, the Spot Fleet terminates the instances
  /// in the Spot Instance pools that have the least available Spot Instance
  /// capacity. If the allocation strategy is <code>diversified</code>, the Spot
  /// Fleet terminates instances across the Spot Instance pools. Alternatively,
  /// you can request that the Spot Fleet keep the fleet at its current size,
  /// but not replace any Spot Instances that are interrupted or that you
  /// terminate manually.
  ///
  /// If you are finished with your Spot Fleet for now, but will use it again
  /// later, you can set the target capacity to 0.
  ///
  /// Parameter [spotFleetRequestId] :
  /// The ID of the Spot Fleet request.
  ///
  /// Parameter [context] :
  /// Reserved.
  ///
  /// Parameter [excessCapacityTerminationPolicy] :
  /// Indicates whether running instances should be terminated if the target
  /// capacity of the Spot Fleet request is decreased below the current size of
  /// the Spot Fleet.
  ///
  /// Supported only for fleets of type <code>maintain</code>.
  ///
  /// Parameter [launchTemplateConfigs] :
  /// The launch template and overrides. You can only use this parameter if you
  /// specified a launch template (<code>LaunchTemplateConfigs</code>) in your
  /// Spot Fleet request. If you specified <code>LaunchSpecifications</code> in
  /// your Spot Fleet request, then omit this parameter.
  ///
  /// Parameter [onDemandTargetCapacity] :
  /// The number of On-Demand Instances in the fleet.
  ///
  /// Parameter [targetCapacity] :
  /// The size of the fleet.
  Future<ModifySpotFleetRequestResponse> modifySpotFleetRequest({
    required String spotFleetRequestId,
    String? context,
    ExcessCapacityTerminationPolicy? excessCapacityTerminationPolicy,
    List<LaunchTemplateConfig>? launchTemplateConfigs,
    int? onDemandTargetCapacity,
    int? targetCapacity,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a subnet attribute. You can only modify one attribute at a time.
  ///
  /// Use this action to modify subnets on Amazon Web Services Outposts.
  ///
  /// <ul>
  /// <li>
  /// To modify a subnet on an Outpost rack, set both
  /// <code>MapCustomerOwnedIpOnLaunch</code> and
  /// <code>CustomerOwnedIpv4Pool</code>. These two parameters act as a single
  /// attribute.
  /// </li>
  /// <li>
  /// To modify a subnet on an Outpost server, set either
  /// <code>EnableLniAtDeviceIndex</code> or
  /// <code>DisableLniAtDeviceIndex</code>.
  /// </li>
  /// </ul>
  /// For more information about Amazon Web Services Outposts, see the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/how-servers-work.html">Outpost
  /// servers</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/how-racks-work.html">Outpost
  /// racks</a>
  /// </li>
  /// </ul>
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  ///
  /// Parameter [assignIpv6AddressOnCreation] :
  /// Specify <code>true</code> to indicate that network interfaces created in
  /// the specified subnet should be assigned an IPv6 address. This includes a
  /// network interface that's created when launching an instance into the
  /// subnet (the instance therefore receives an IPv6 address).
  ///
  /// If you enable the IPv6 addressing feature for your subnet, your network
  /// interface or instance only receives an IPv6 address if it's created using
  /// version <code>2016-11-15</code> or later of the Amazon EC2 API.
  ///
  /// Parameter [customerOwnedIpv4Pool] :
  /// The customer-owned IPv4 address pool associated with the subnet.
  ///
  /// You must set this value when you specify <code>true</code> for
  /// <code>MapCustomerOwnedIpOnLaunch</code>.
  ///
  /// Parameter [disableLniAtDeviceIndex] :
  /// Specify <code>true</code> to indicate that local network interfaces at the
  /// current position should be disabled.
  ///
  /// Parameter [enableDns64] :
  /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in
  /// this subnet should return synthetic IPv6 addresses for IPv4-only
  /// destinations.
  ///
  /// Parameter [enableLniAtDeviceIndex] :
  /// Indicates the device position for local network interfaces in this subnet.
  /// For example, <code>1</code> indicates local network interfaces in this
  /// subnet are the secondary network interface (eth1). A local network
  /// interface cannot be the primary network interface (eth0).
  ///
  /// Parameter [enableResourceNameDnsAAAARecordOnLaunch] :
  /// Indicates whether to respond to DNS queries for instance hostnames with
  /// DNS AAAA records.
  ///
  /// Parameter [enableResourceNameDnsARecordOnLaunch] :
  /// Indicates whether to respond to DNS queries for instance hostnames with
  /// DNS A records.
  ///
  /// Parameter [mapCustomerOwnedIpOnLaunch] :
  /// Specify <code>true</code> to indicate that network interfaces attached to
  /// instances created in the specified subnet should be assigned a
  /// customer-owned IPv4 address.
  ///
  /// When this value is <code>true</code>, you must specify the customer-owned
  /// IP pool using <code>CustomerOwnedIpv4Pool</code>.
  ///
  /// Parameter [mapPublicIpOnLaunch] :
  /// Specify <code>true</code> to indicate that network interfaces attached to
  /// instances created in the specified subnet should be assigned a public IPv4
  /// address.
  ///
  /// Amazon Web Services charges for all public IPv4 addresses, including
  /// public IPv4 addresses associated with running instances and Elastic IP
  /// addresses. For more information, see the <i>Public IPv4 Address</i> tab on
  /// the <a href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing
  /// page</a>.
  ///
  /// Parameter [privateDnsHostnameTypeOnLaunch] :
  /// The type of hostname to assign to instances in the subnet at launch. For
  /// IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can
  /// be based on the instance IPv4 address (ip-name) or the instance ID
  /// (resource-name). For IPv6 only subnets, an instance DNS name must be based
  /// on the instance ID (resource-name).
  Future<void> modifySubnetAttribute({
    required String subnetId,
    AttributeBooleanValue? assignIpv6AddressOnCreation,
    String? customerOwnedIpv4Pool,
    AttributeBooleanValue? disableLniAtDeviceIndex,
    AttributeBooleanValue? enableDns64,
    int? enableLniAtDeviceIndex,
    AttributeBooleanValue? enableResourceNameDnsAAAARecordOnLaunch,
    AttributeBooleanValue? enableResourceNameDnsARecordOnLaunch,
    AttributeBooleanValue? mapCustomerOwnedIpOnLaunch,
    AttributeBooleanValue? mapPublicIpOnLaunch,
    HostnameType? privateDnsHostnameTypeOnLaunch,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allows or restricts mirroring network services.
  ///
  /// By default, Amazon DNS network services are not eligible for Traffic
  /// Mirror. Use <code>AddNetworkServices</code> to add network services to a
  /// Traffic Mirror filter. When a network service is added to the Traffic
  /// Mirror filter, all traffic related to that network service will be
  /// mirrored. When you no longer want to mirror network services, use
  /// <code>RemoveNetworkServices</code> to remove the network services from the
  /// Traffic Mirror filter.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [addNetworkServices] :
  /// The network service, for example Amazon DNS, that you want to mirror.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeNetworkServices] :
  /// The network service, for example Amazon DNS, that you no longer want to
  /// mirror.
  Future<ModifyTrafficMirrorFilterNetworkServicesResult>
      modifyTrafficMirrorFilterNetworkServices({
    required String trafficMirrorFilterId,
    List<TrafficMirrorNetworkService>? addNetworkServices,
    bool? dryRun,
    List<TrafficMirrorNetworkService>? removeNetworkServices,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Traffic Mirror rule.
  ///
  /// <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must
  /// both be an IPv4 range or an IPv6 range.
  ///
  /// Parameter [trafficMirrorFilterRuleId] :
  /// The ID of the Traffic Mirror rule.
  ///
  /// Parameter [description] :
  /// The description to assign to the Traffic Mirror rule.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The destination CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [destinationPortRange] :
  /// The destination ports that are associated with the Traffic Mirror rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [protocol] :
  /// The protocol, for example TCP, to assign to the Traffic Mirror rule.
  ///
  /// Parameter [removeFields] :
  /// The properties that you want to remove from the Traffic Mirror filter
  /// rule.
  ///
  /// When you remove a property from a Traffic Mirror filter rule, the property
  /// is set to the default.
  ///
  /// Parameter [ruleAction] :
  /// The action to assign to the rule.
  ///
  /// Parameter [ruleNumber] :
  /// The number of the Traffic Mirror rule. This number must be unique for each
  /// Traffic Mirror rule in a given direction. The rules are processed in
  /// ascending order by rule number.
  ///
  /// Parameter [sourceCidrBlock] :
  /// The source CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [sourcePortRange] :
  /// The port range to assign to the Traffic Mirror rule.
  ///
  /// Parameter [trafficDirection] :
  /// The type of traffic to assign to the rule.
  Future<ModifyTrafficMirrorFilterRuleResult> modifyTrafficMirrorFilterRule({
    required String trafficMirrorFilterRuleId,
    String? description,
    String? destinationCidrBlock,
    TrafficMirrorPortRangeRequest? destinationPortRange,
    bool? dryRun,
    int? protocol,
    List<TrafficMirrorFilterRuleField>? removeFields,
    TrafficMirrorRuleAction? ruleAction,
    int? ruleNumber,
    String? sourceCidrBlock,
    TrafficMirrorPortRangeRequest? sourcePortRange,
    TrafficDirection? trafficDirection,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a Traffic Mirror session.
  ///
  /// Parameter [trafficMirrorSessionId] :
  /// The ID of the Traffic Mirror session.
  ///
  /// Parameter [description] :
  /// The description to assign to the Traffic Mirror session.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [packetLength] :
  /// The number of bytes in each packet to mirror. These are bytes after the
  /// VXLAN header. To mirror a subset, set this to the length (in bytes) to
  /// mirror. For example, if you set this value to 100, then the first 100
  /// bytes that meet the filter criteria are copied to the target. Do not
  /// specify this parameter when you want to mirror the entire packet.
  ///
  /// For sessions with Network Load Balancer (NLB) traffic mirror targets, the
  /// default <code>PacketLength</code> will be set to 8500. Valid values are
  /// 1-8500. Setting a <code>PacketLength</code> greater than 8500 will result
  /// in an error response.
  ///
  /// Parameter [removeFields] :
  /// The properties that you want to remove from the Traffic Mirror session.
  ///
  /// When you remove a property from a Traffic Mirror session, the property is
  /// set to the default.
  ///
  /// Parameter [sessionNumber] :
  /// The session number determines the order in which sessions are evaluated
  /// when an interface is used by multiple sessions. The first session with a
  /// matching filter is the one that mirrors the packets.
  ///
  /// Valid values are 1-32766.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [trafficMirrorTargetId] :
  /// The Traffic Mirror target. The target must be in the same VPC as the
  /// source, or have a VPC peering connection with the source.
  ///
  /// Parameter [virtualNetworkId] :
  /// The virtual network ID of the Traffic Mirror session.
  Future<ModifyTrafficMirrorSessionResult> modifyTrafficMirrorSession({
    required String trafficMirrorSessionId,
    String? description,
    bool? dryRun,
    int? packetLength,
    List<TrafficMirrorSessionField>? removeFields,
    int? sessionNumber,
    String? trafficMirrorFilterId,
    String? trafficMirrorTargetId,
    int? virtualNetworkId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified transit gateway. When you modify a transit gateway,
  /// the modified options are applied to new transit gateway attachments only.
  /// Your existing transit gateway attachments are not modified.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [description] :
  /// The description for the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The options to modify.
  Future<ModifyTransitGatewayResult> modifyTransitGateway({
    required String transitGatewayId,
    String? description,
    bool? dryRun,
    ModifyTransitGatewayOptions? options,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a reference (route) to a prefix list in a specified transit
  /// gateway route table.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [blackhole] :
  /// Indicates whether to drop traffic that matches this route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment to which traffic is routed.
  Future<ModifyTransitGatewayPrefixListReferenceResult>
      modifyTransitGatewayPrefixListReference({
    required String prefixListId,
    required String transitGatewayRouteTableId,
    bool? blackhole,
    bool? dryRun,
    String? transitGatewayAttachmentId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified VPC attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [addSubnetIds] :
  /// The IDs of one or more subnets to add. You can specify at most one subnet
  /// per Availability Zone.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The new VPC attachment options.
  ///
  /// Parameter [removeSubnetIds] :
  /// The IDs of one or more subnets to remove.
  Future<ModifyTransitGatewayVpcAttachmentResult>
      modifyTransitGatewayVpcAttachment({
    required String transitGatewayAttachmentId,
    List<String>? addSubnetIds,
    bool? dryRun,
    ModifyTransitGatewayVpcAttachmentRequestOptions? options,
    List<String>? removeSubnetIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the configuration of the specified Amazon Web Services Verified
  /// Access endpoint.
  ///
  /// Parameter [verifiedAccessEndpointId] :
  /// The ID of the Verified Access endpoint.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [loadBalancerOptions] :
  /// The load balancer details if creating the Verified Access endpoint as
  /// <code>load-balancer</code>type.
  ///
  /// Parameter [networkInterfaceOptions] :
  /// The network interface options.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group.
  Future<ModifyVerifiedAccessEndpointResult> modifyVerifiedAccessEndpoint({
    required String verifiedAccessEndpointId,
    String? clientToken,
    String? description,
    bool? dryRun,
    ModifyVerifiedAccessEndpointLoadBalancerOptions? loadBalancerOptions,
    ModifyVerifiedAccessEndpointEniOptions? networkInterfaceOptions,
    String? verifiedAccessGroupId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Amazon Web Services Verified Access endpoint
  /// policy.
  ///
  /// Parameter [verifiedAccessEndpointId] :
  /// The ID of the Verified Access endpoint.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [policyDocument] :
  /// The Verified Access policy document.
  ///
  /// Parameter [policyEnabled] :
  /// The status of the Verified Access policy.
  ///
  /// Parameter [sseSpecification] :
  /// The options for server side encryption.
  Future<ModifyVerifiedAccessEndpointPolicyResult>
      modifyVerifiedAccessEndpointPolicy({
    required String verifiedAccessEndpointId,
    String? clientToken,
    bool? dryRun,
    String? policyDocument,
    bool? policyEnabled,
    VerifiedAccessSseSpecificationRequest? sseSpecification,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Amazon Web Services Verified Access group
  /// configuration.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  Future<ModifyVerifiedAccessGroupResult> modifyVerifiedAccessGroup({
    required String verifiedAccessGroupId,
    String? clientToken,
    String? description,
    bool? dryRun,
    String? verifiedAccessInstanceId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Amazon Web Services Verified Access group policy.
  ///
  /// Parameter [verifiedAccessGroupId] :
  /// The ID of the Verified Access group.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [policyDocument] :
  /// The Verified Access policy document.
  ///
  /// Parameter [policyEnabled] :
  /// The status of the Verified Access policy.
  ///
  /// Parameter [sseSpecification] :
  /// The options for server side encryption.
  Future<ModifyVerifiedAccessGroupPolicyResult>
      modifyVerifiedAccessGroupPolicy({
    required String verifiedAccessGroupId,
    String? clientToken,
    bool? dryRun,
    String? policyDocument,
    bool? policyEnabled,
    VerifiedAccessSseSpecificationRequest? sseSpecification,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the configuration of the specified Amazon Web Services Verified
  /// Access instance.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVerifiedAccessInstanceResult> modifyVerifiedAccessInstance({
    required String verifiedAccessInstanceId,
    String? clientToken,
    String? description,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the logging configuration for the specified Amazon Web Services
  /// Verified Access instance.
  ///
  /// Parameter [accessLogs] :
  /// The configuration options for Verified Access instances.
  ///
  /// Parameter [verifiedAccessInstanceId] :
  /// The ID of the Verified Access instance.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVerifiedAccessInstanceLoggingConfigurationResult>
      modifyVerifiedAccessInstanceLoggingConfiguration({
    required VerifiedAccessLogOptions accessLogs,
    required String verifiedAccessInstanceId,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the configuration of the specified Amazon Web Services Verified
  /// Access trust provider.
  ///
  /// Parameter [verifiedAccessTrustProviderId] :
  /// The ID of the Verified Access trust provider.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the Verified Access trust provider.
  ///
  /// Parameter [deviceOptions] :
  /// The options for a device-based trust provider. This parameter is required
  /// when the provider type is <code>device</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [oidcOptions] :
  /// The options for an OpenID Connect-compatible user-identity trust provider.
  ///
  /// Parameter [sseSpecification] :
  /// The options for server side encryption.
  Future<ModifyVerifiedAccessTrustProviderResult>
      modifyVerifiedAccessTrustProvider({
    required String verifiedAccessTrustProviderId,
    String? clientToken,
    String? description,
    ModifyVerifiedAccessTrustProviderDeviceOptions? deviceOptions,
    bool? dryRun,
    ModifyVerifiedAccessTrustProviderOidcOptions? oidcOptions,
    VerifiedAccessSseSpecificationRequest? sseSpecification,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// You can modify several parameters of an existing EBS volume, including
  /// volume size, volume type, and IOPS capacity. If your EBS volume is
  /// attached to a current-generation EC2 instance type, you might be able to
  /// apply these changes without stopping the instance or detaching the volume
  /// from it. For more information about modifying EBS volumes, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modify-volume.html">Amazon
  /// EBS Elastic Volumes</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// When you complete a resize operation on your volume, you need to extend
  /// the volume's file-system size to take advantage of the new storage
  /// capacity. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/recognize-expanded-volume-linux.html">Extend
  /// the file system</a>.
  ///
  /// You can use CloudWatch Events to check the status of a modification to an
  /// EBS volume. For information about CloudWatch Events, see the <a
  /// href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon
  /// CloudWatch Events User Guide</a>. You can also track the status of a
  /// modification using <a>DescribeVolumesModifications</a>. For information
  /// about tracking status changes using either method, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-modifications.html">Monitor
  /// the progress of volume modifications</a>.
  ///
  /// With previous-generation instance types, resizing an EBS volume might
  /// require detaching and reattaching the volume or stopping and restarting
  /// the instance.
  ///
  /// After modifying a volume, you must wait at least six hours and ensure that
  /// the volume is in the <code>in-use</code> or <code>available</code> state
  /// before you can modify the same volume. This is sometimes referred to as a
  /// cooldown period.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [iops] :
  /// The target IOPS rate of the volume. This parameter is valid only for
  /// <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes.
  ///
  /// The following are the supported values for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp3</code>: 3,000 - 16,000 IOPS
  /// </li>
  /// <li>
  /// <code>io1</code>: 100 - 64,000 IOPS
  /// </li>
  /// <li>
  /// <code>io2</code>: 100 - 256,000 IOPS
  /// </li>
  /// </ul>
  /// For <code>io2</code> volumes, you can achieve up to 256,000 IOPS on <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances
  /// built on the Nitro System</a>. On other instances, you can achieve
  /// performance up to 32,000 IOPS.
  ///
  /// Default: The existing value is retained if you keep the same volume type.
  /// If you change the volume type to <code>io1</code>, <code>io2</code>, or
  /// <code>gp3</code>, the default is 3,000.
  ///
  /// Parameter [multiAttachEnabled] :
  /// Specifies whether to enable Amazon EBS Multi-Attach. If you enable
  /// Multi-Attach, you can attach the volume to up to 16 <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">
  /// Nitro-based instances</a> in the same Availability Zone. This parameter is
  /// supported with <code>io1</code> and <code>io2</code> volumes only. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes-multi.html">
  /// Amazon EBS Multi-Attach</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [size] :
  /// The target size of the volume, in GiB. The target volume size must be
  /// greater than or equal to the existing size of the volume.
  ///
  /// The following are the supported volumes sizes for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp2</code> and <code>gp3</code>: 1 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io1</code>: 4 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io2</code>: 4 - 65,536 GiB
  /// </li>
  /// <li>
  /// <code>st1</code> and <code>sc1</code>: 125 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>standard</code>: 1 - 1024 GiB
  /// </li>
  /// </ul>
  /// Default: The existing size is retained.
  ///
  /// Parameter [throughput] :
  /// The target throughput of the volume, in MiB/s. This parameter is valid
  /// only for <code>gp3</code> volumes. The maximum value is 1,000.
  ///
  /// Default: The existing value is retained if the source and target volume
  /// type is <code>gp3</code>. Otherwise, the default value is 125.
  ///
  /// Valid Range: Minimum value of 125. Maximum value of 1000.
  ///
  /// Parameter [volumeType] :
  /// The target EBS volume type of the volume. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html">Amazon
  /// EBS volume types</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Default: The existing type is retained.
  Future<ModifyVolumeResult> modifyVolume({
    required String volumeId,
    bool? dryRun,
    int? iops,
    bool? multiAttachEnabled,
    int? size,
    int? throughput,
    VolumeType? volumeType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a volume attribute.
  ///
  /// By default, all I/O operations for the volume are suspended when the data
  /// on the volume is determined to be potentially inconsistent, to prevent
  /// undetectable, latent data corruption. The I/O access to the volume can be
  /// resumed by first enabling I/O access and then checking the data
  /// consistency on your volume.
  ///
  /// You can change the default behavior to resume I/O operations. We recommend
  /// that you change this only for boot volumes or for volumes that are
  /// stateless or disposable.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [autoEnableIO] :
  /// Indicates whether the volume should be auto-enabled for I/O operations.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> modifyVolumeAttribute({
    required String volumeId,
    AttributeBooleanValue? autoEnableIO,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [enableDnsHostnames] :
  /// Indicates whether the instances launched in the VPC get DNS hostnames. If
  /// enabled, instances in the VPC get DNS hostnames; otherwise, they do not.
  ///
  /// You cannot modify the DNS resolution and DNS hostnames attributes in the
  /// same request. Use separate requests for each attribute. You can only
  /// enable DNS hostnames if you've enabled DNS support.
  ///
  /// Parameter [enableDnsSupport] :
  /// Indicates whether the DNS resolution is supported for the VPC. If enabled,
  /// queries to the Amazon provided DNS server at the 169.254.169.253 IP
  /// address, or the reserved IP address at the base of the VPC network range
  /// "plus two" succeed. If disabled, the Amazon provided DNS service in the
  /// VPC that resolves public DNS hostnames to IP addresses is not enabled.
  ///
  /// You cannot modify the DNS resolution and DNS hostnames attributes in the
  /// same request. Use separate requests for each attribute.
  ///
  /// Parameter [enableNetworkAddressUsageMetrics] :
  /// Indicates whether Network Address Usage metrics are enabled for your VPC.
  Future<void> modifyVpcAttribute({
    required String vpcId,
    AttributeBooleanValue? enableDnsHostnames,
    AttributeBooleanValue? enableDnsSupport,
    AttributeBooleanValue? enableNetworkAddressUsageMetrics,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies attributes of a specified VPC endpoint. The attributes that you
  /// can modify depend on the type of VPC endpoint (interface, gateway, or
  /// Gateway Load Balancer). For more information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web
  /// Services PrivateLink Guide</a>.
  ///
  /// Parameter [vpcEndpointId] :
  /// The ID of the endpoint.
  ///
  /// Parameter [addRouteTableIds] :
  /// (Gateway endpoint) The IDs of the route tables to associate with the
  /// endpoint.
  ///
  /// Parameter [addSecurityGroupIds] :
  /// (Interface endpoint) The IDs of the security groups to associate with the
  /// endpoint network interfaces.
  ///
  /// Parameter [addSubnetIds] :
  /// (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in
  /// which to serve the endpoint. For a Gateway Load Balancer endpoint, you can
  /// specify only one subnet.
  ///
  /// Parameter [dnsOptions] :
  /// The DNS options for the endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ipAddressType] :
  /// The IP address type for the endpoint.
  ///
  /// Parameter [policyDocument] :
  /// (Interface and gateway endpoints) A policy to attach to the endpoint that
  /// controls access to the service. The policy must be in valid JSON format.
  ///
  /// Parameter [privateDnsEnabled] :
  /// (Interface endpoint) Indicates whether a private hosted zone is associated
  /// with the VPC.
  ///
  /// Parameter [removeRouteTableIds] :
  /// (Gateway endpoint) The IDs of the route tables to disassociate from the
  /// endpoint.
  ///
  /// Parameter [removeSecurityGroupIds] :
  /// (Interface endpoint) The IDs of the security groups to disassociate from
  /// the endpoint network interfaces.
  ///
  /// Parameter [removeSubnetIds] :
  /// (Interface endpoint) The IDs of the subnets from which to remove the
  /// endpoint.
  ///
  /// Parameter [resetPolicy] :
  /// (Gateway endpoint) Specify <code>true</code> to reset the policy document
  /// to the default policy. The default policy allows full access to the
  /// service.
  ///
  /// Parameter [subnetConfigurations] :
  /// The subnet configurations for the endpoint.
  Future<ModifyVpcEndpointResult> modifyVpcEndpoint({
    required String vpcEndpointId,
    List<String>? addRouteTableIds,
    List<String>? addSecurityGroupIds,
    List<String>? addSubnetIds,
    DnsOptionsSpecification? dnsOptions,
    bool? dryRun,
    IpAddressType? ipAddressType,
    String? policyDocument,
    bool? privateDnsEnabled,
    List<String>? removeRouteTableIds,
    List<String>? removeSecurityGroupIds,
    List<String>? removeSubnetIds,
    bool? resetPolicy,
    List<SubnetConfiguration>? subnetConfigurations,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a connection notification for VPC endpoint or VPC endpoint
  /// service. You can change the SNS topic for the notification, or the events
  /// for which to be notified.
  ///
  /// Parameter [connectionNotificationId] :
  /// The ID of the notification.
  ///
  /// Parameter [connectionEvents] :
  /// The events for the endpoint. Valid values are <code>Accept</code>,
  /// <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
  ///
  /// Parameter [connectionNotificationArn] :
  /// The ARN for the SNS topic for the notification.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpcEndpointConnectionNotificationResult>
      modifyVpcEndpointConnectionNotification({
    required String connectionNotificationId,
    List<String>? connectionEvents,
    String? connectionNotificationArn,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the attributes of your VPC endpoint service configuration. You
  /// can change the Network Load Balancers or Gateway Load Balancers for your
  /// service, and you can specify whether acceptance is required for requests
  /// to connect to your endpoint service through an interface VPC endpoint.
  ///
  /// If you set or modify the private DNS name, you must prove that you own the
  /// private DNS domain name.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [acceptanceRequired] :
  /// Indicates whether requests to create an endpoint to your service must be
  /// accepted.
  ///
  /// Parameter [addGatewayLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your
  /// service configuration.
  ///
  /// Parameter [addNetworkLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your
  /// service configuration.
  ///
  /// Parameter [addSupportedIpAddressTypes] :
  /// The IP address types to add to your service configuration.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [privateDnsName] :
  /// (Interface endpoint configuration) The private DNS name to assign to the
  /// endpoint service.
  ///
  /// Parameter [removeGatewayLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from
  /// your service configuration.
  ///
  /// Parameter [removeNetworkLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from
  /// your service configuration.
  ///
  /// Parameter [removePrivateDnsName] :
  /// (Interface endpoint configuration) Removes the private DNS name of the
  /// endpoint service.
  ///
  /// Parameter [removeSupportedIpAddressTypes] :
  /// The IP address types to remove from your service configuration.
  Future<ModifyVpcEndpointServiceConfigurationResult>
      modifyVpcEndpointServiceConfiguration({
    required String serviceId,
    bool? acceptanceRequired,
    List<String>? addGatewayLoadBalancerArns,
    List<String>? addNetworkLoadBalancerArns,
    List<String>? addSupportedIpAddressTypes,
    bool? dryRun,
    String? privateDnsName,
    List<String>? removeGatewayLoadBalancerArns,
    List<String>? removeNetworkLoadBalancerArns,
    bool? removePrivateDnsName,
    List<String>? removeSupportedIpAddressTypes,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the payer responsibility for your VPC endpoint service.
  ///
  /// Parameter [payerResponsibility] :
  /// The entity that is responsible for the endpoint costs. The default is the
  /// endpoint owner. If you set the payer responsibility to the service owner,
  /// you cannot set it back to the endpoint owner.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpcEndpointServicePayerResponsibilityResult>
      modifyVpcEndpointServicePayerResponsibility({
    required PayerResponsibility payerResponsibility,
    required String serviceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the permissions for your VPC endpoint service. You can add or
  /// remove permissions for service consumers (Amazon Web Services accounts,
  /// users, and IAM roles) to connect to your endpoint service.
  ///
  /// If you grant permissions to all principals, the service is public. Any
  /// users who know the name of a public service can send a request to attach
  /// an endpoint. If the service does not require manual approval, attachments
  /// are automatically approved.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [addAllowedPrincipals] :
  /// The Amazon Resource Names (ARN) of the principals. Permissions are granted
  /// to the principals in this list. To grant permissions to all principals,
  /// specify an asterisk (*).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeAllowedPrincipals] :
  /// The Amazon Resource Names (ARN) of the principals. Permissions are revoked
  /// for principals in this list.
  Future<ModifyVpcEndpointServicePermissionsResult>
      modifyVpcEndpointServicePermissions({
    required String serviceId,
    List<String>? addAllowedPrincipals,
    bool? dryRun,
    List<String>? removeAllowedPrincipals,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the VPC peering connection options on one side of a VPC peering
  /// connection.
  ///
  /// If the peered VPCs are in the same Amazon Web Services account, you can
  /// enable DNS resolution for queries from the local VPC. This ensures that
  /// queries from the local VPC resolve to private IP addresses in the peer
  /// VPC. This option is not available if the peered VPCs are in different
  /// Amazon Web Services accounts or different Regions. For peered VPCs in
  /// different Amazon Web Services accounts, each Amazon Web Services account
  /// owner must initiate a separate request to modify the peering connection
  /// options. For inter-region peering connections, you must use the Region for
  /// the requester VPC to modify the requester VPC peering options and the
  /// Region for the accepter VPC to modify the accepter VPC peering options. To
  /// verify which VPCs are the accepter and the requester for a VPC peering
  /// connection, use the <a>DescribeVpcPeeringConnections</a> command.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection.
  ///
  /// Parameter [accepterPeeringConnectionOptions] :
  /// The VPC peering connection options for the accepter VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [requesterPeeringConnectionOptions] :
  /// The VPC peering connection options for the requester VPC.
  Future<ModifyVpcPeeringConnectionOptionsResult>
      modifyVpcPeeringConnectionOptions({
    required String vpcPeeringConnectionId,
    PeeringConnectionOptionsRequest? accepterPeeringConnectionOptions,
    bool? dryRun,
    PeeringConnectionOptionsRequest? requesterPeeringConnectionOptions,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the instance tenancy attribute of the specified VPC. You can
  /// change the instance tenancy attribute of a VPC to <code>default</code>
  /// only. You cannot change the instance tenancy attribute to
  /// <code>dedicated</code>.
  ///
  /// After you modify the tenancy of the VPC, any new instances that you launch
  /// into the VPC have a tenancy of <code>default</code>, unless you specify
  /// otherwise during launch. The tenancy of any existing instances in the VPC
  /// is not affected.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated
  /// Instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceTenancy] :
  /// The instance tenancy attribute for the VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpcTenancyResult> modifyVpcTenancy({
    required VpcTenancy instanceTenancy,
    required String vpcId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the customer gateway or the target gateway of an Amazon Web
  /// Services Site-to-Site VPN connection. To modify the target gateway, the
  /// following migration options are available:
  ///
  /// <ul>
  /// <li>
  /// An existing virtual private gateway to a new virtual private gateway
  /// </li>
  /// <li>
  /// An existing virtual private gateway to a transit gateway
  /// </li>
  /// <li>
  /// An existing transit gateway to a new transit gateway
  /// </li>
  /// <li>
  /// An existing transit gateway to a virtual private gateway
  /// </li>
  /// </ul>
  /// Before you perform the migration to the new gateway, you must configure
  /// the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private
  /// gateway, or <a>CreateTransitGateway</a> to create a transit gateway.
  ///
  /// This step is required when you migrate from a virtual private gateway with
  /// static routes to a transit gateway.
  ///
  /// You must delete the static routes before you migrate to the new gateway.
  ///
  /// Keep a copy of the static route before you delete it. You will need to add
  /// back these routes to the transit gateway after the VPN connection
  /// migration is complete.
  ///
  /// After you migrate to the new gateway, you might need to modify your VPC
  /// route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the
  /// changes described in <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">Update
  /// VPC route tables</a> in the <i>Amazon Web Services Site-to-Site VPN User
  /// Guide</i>.
  ///
  /// When the new gateway is a transit gateway, modify the transit gateway
  /// route table to allow traffic between the VPC and the Amazon Web Services
  /// Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add
  /// the routes.
  ///
  /// If you deleted VPN static routes, you must add the static routes to the
  /// transit gateway route table.
  ///
  /// After you perform this operation, the VPN endpoint's IP addresses on the
  /// Amazon Web Services side and the tunnel options remain intact. Your Amazon
  /// Web Services Site-to-Site VPN connection will be temporarily unavailable
  /// for a brief period while we provision the new endpoints.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  ///
  /// Parameter [customerGatewayId] :
  /// The ID of the customer gateway at your end of the VPN connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway at the Amazon Web Services side of
  /// the VPN connection.
  Future<ModifyVpnConnectionResult> modifyVpnConnection({
    required String vpnConnectionId,
    String? customerGatewayId,
    bool? dryRun,
    String? transitGatewayId,
    String? vpnGatewayId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the connection options for your Site-to-Site VPN connection.
  ///
  /// When you modify the VPN connection options, the VPN endpoint IP addresses
  /// on the Amazon Web Services side do not change, and the tunnel options do
  /// not change. Your VPN connection will be temporarily unavailable for a
  /// brief period while the VPN connection is updated.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the Site-to-Site VPN connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [localIpv4NetworkCidr] :
  /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN
  /// connection.
  ///
  /// Default: <code>0.0.0.0/0</code>
  ///
  /// Parameter [localIpv6NetworkCidr] :
  /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN
  /// connection.
  ///
  /// Default: <code>::/0</code>
  ///
  /// Parameter [remoteIpv4NetworkCidr] :
  /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
  ///
  /// Default: <code>0.0.0.0/0</code>
  ///
  /// Parameter [remoteIpv6NetworkCidr] :
  /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
  ///
  /// Default: <code>::/0</code>
  Future<ModifyVpnConnectionOptionsResult> modifyVpnConnectionOptions({
    required String vpnConnectionId,
    bool? dryRun,
    String? localIpv4NetworkCidr,
    String? localIpv6NetworkCidr,
    String? remoteIpv4NetworkCidr,
    String? remoteIpv6NetworkCidr,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the VPN tunnel endpoint certificate.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the Amazon Web Services Site-to-Site VPN connection.
  ///
  /// Parameter [vpnTunnelOutsideIpAddress] :
  /// The external IP address of the VPN tunnel.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpnTunnelCertificateResult> modifyVpnTunnelCertificate({
    required String vpnConnectionId,
    required String vpnTunnelOutsideIpAddress,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the options for a VPN tunnel in an Amazon Web Services
  /// Site-to-Site VPN connection. You can modify multiple options for a tunnel
  /// in a single request, but you can only modify one tunnel at a time. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site
  /// VPN tunnel options for your Site-to-Site VPN connection</a> in the
  /// <i>Amazon Web Services Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [tunnelOptions] :
  /// The tunnel options to modify.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the Amazon Web Services Site-to-Site VPN connection.
  ///
  /// Parameter [vpnTunnelOutsideIpAddress] :
  /// The external IP address of the VPN tunnel.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [skipTunnelReplacement] :
  /// Choose whether or not to trigger immediate tunnel replacement. This is
  /// only applicable when turning on or off
  /// <code>EnableTunnelLifecycleControl</code>.
  ///
  /// Valid values: <code>True</code> | <code>False</code>
  Future<ModifyVpnTunnelOptionsResult> modifyVpnTunnelOptions({
    required ModifyVpnTunnelOptionsSpecification tunnelOptions,
    required String vpnConnectionId,
    required String vpnTunnelOutsideIpAddress,
    bool? dryRun,
    bool? skipTunnelReplacement,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables detailed monitoring for a running instance. Otherwise, basic
  /// monitoring is enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitor
  /// your instances using CloudWatch</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// To disable detailed monitoring, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_UnmonitorInstances.html">UnmonitorInstances</a>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<MonitorInstancesResult> monitorInstances({
    required List<String> instanceIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC
  /// platform. The Elastic IP address must be allocated to your account for
  /// more than 24 hours, and it must not be associated with an instance. After
  /// the Elastic IP address is moved, it is no longer available for use in the
  /// EC2-Classic platform, unless you move it back using the
  /// <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP
  /// address that was originally allocated for use in the EC2-VPC platform to
  /// the EC2-Classic platform.
  ///
  /// Parameter [publicIp] :
  /// The Elastic IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<MoveAddressToVpcResult> moveAddressToVpc({
    required String publicIp,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool.
  ///
  /// If you already have a BYOIPv4 CIDR with Amazon Web Services, you can move
  /// the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to
  /// IPAM. If you are bringing a new IP address to Amazon Web Services for the
  /// first time, complete the steps in <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoip-ipam.html">Tutorial:
  /// BYOIP address CIDRs to IPAM</a>.
  ///
  /// Parameter [cidr] :
  /// The BYOIP CIDR.
  ///
  /// Parameter [ipamPoolId] :
  /// The IPAM pool ID.
  ///
  /// Parameter [ipamPoolOwner] :
  /// The Amazon Web Services account ID of the owner of the IPAM pool.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<MoveByoipCidrToIpamResult> moveByoipCidrToIpam({
    required String cidr,
    required String ipamPoolId,
    required String ipamPoolOwner,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provisions an IPv4 or IPv6 address range for use with your Amazon Web
  /// Services resources through bring your own IP addresses (BYOIP) and creates
  /// a corresponding address pool. After the address range is provisioned, it
  /// is ready to be advertised using <a>AdvertiseByoipCidr</a>.
  ///
  /// Amazon Web Services verifies that you own the address range and are
  /// authorized to advertise it. You must ensure that the address range is
  /// registered to you and that you created an RPKI ROA to authorize Amazon
  /// ASNs 16509 and 14618 to advertise the address range. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring
  /// your own IP addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// Provisioning an address range is an asynchronous operation, so the call
  /// returns immediately, but the address range is not ready to use until its
  /// status changes from <code>pending-provision</code> to
  /// <code>provisioned</code>. To monitor the status of an address range, use
  /// <a>DescribeByoipCidrs</a>. To allocate an Elastic IP address from your
  /// IPv4 address pool, use <a>AllocateAddress</a> with either the specific
  /// address from the address pool or the ID of the address pool.
  ///
  /// Parameter [cidr] :
  /// The public IPv4 or IPv6 address range, in CIDR notation. The most specific
  /// IPv4 prefix that you can specify is /24. The most specific IPv6 address
  /// range that you can bring is /48 for CIDRs that are publicly advertisable
  /// and /56 for CIDRs that are not publicly advertisable. The address range
  /// cannot overlap with another address range that you've brought to this or
  /// another Region.
  ///
  /// Parameter [cidrAuthorizationContext] :
  /// A signed document that proves that you are authorized to bring the
  /// specified IP address range to Amazon using BYOIP.
  ///
  /// Parameter [description] :
  /// A description for the address range and the address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [multiRegion] :
  /// Reserved.
  ///
  /// Parameter [networkBorderGroup] :
  /// If you have <a
  /// href="https://docs.aws.amazon.com/local-zones/latest/ug/how-local-zones-work.html">Local
  /// Zones</a> enabled, you can choose a network border group for Local Zones
  /// when you provision and advertise a BYOIPv4 CIDR. Choose the network border
  /// group carefully as the EIP and the Amazon Web Services resource it is
  /// associated with must reside in the same network border group.
  ///
  /// You can provision BYOIP address ranges to and advertise them in the
  /// following Local Zone network border groups:
  ///
  /// <ul>
  /// <li>
  /// us-east-1-dfw-2
  /// </li>
  /// <li>
  /// us-west-2-lax-1
  /// </li>
  /// <li>
  /// us-west-2-phx-2
  /// </li>
  /// </ul> <note>
  /// You cannot provision or advertise BYOIPv6 address ranges in Local Zones at
  /// this time.
  /// </note>
  ///
  /// Parameter [poolTagSpecifications] :
  /// The tags to apply to the address pool.
  ///
  /// Parameter [publiclyAdvertisable] :
  /// (IPv6 only) Indicate whether the address range will be publicly advertised
  /// to the internet.
  ///
  /// Default: true
  Future<ProvisionByoipCidrResult> provisionByoipCidr({
    required String cidr,
    CidrAuthorizationContext? cidrAuthorizationContext,
    String? description,
    bool? dryRun,
    bool? multiRegion,
    String? networkBorderGroup,
    List<TagSpecification>? poolTagSpecifications,
    bool? publiclyAdvertisable,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provisions your Autonomous System Number (ASN) for use in your Amazon Web
  /// Services account. This action requires authorization context for Amazon to
  /// bring the ASN to an Amazon Web Services account. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial:
  /// Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.
  ///
  /// Parameter [asn] :
  /// A public 2-byte or 4-byte ASN.
  ///
  /// Parameter [asnAuthorizationContext] :
  /// An ASN authorization context.
  ///
  /// Parameter [ipamId] :
  /// An IPAM ID.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ProvisionIpamByoasnResult> provisionIpamByoasn({
    required String asn,
    required AsnAuthorizationContext asnAuthorizationContext,
    required String ipamId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provision a CIDR to an IPAM pool. You can use this action to provision new
  /// CIDRs to a top-level pool or to transfer a CIDR from a top-level pool to a
  /// pool within it.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/prov-cidr-ipam.html">Provision
  /// CIDRs to pools</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool to which you want to assign a CIDR.
  ///
  /// Parameter [cidr] :
  /// The CIDR you want to assign to the IPAM pool. Either "NetmaskLength" or
  /// "Cidr" is required. This value will be null if you specify "NetmaskLength"
  /// and will be filled in during the provisioning process.
  ///
  /// Parameter [cidrAuthorizationContext] :
  /// A signed document that proves that you are authorized to bring a specified
  /// IP address range to Amazon using BYOIP. This option applies to public
  /// pools only.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [netmaskLength] :
  /// The netmask length of the CIDR you'd like to provision to a pool. Can be
  /// used for provisioning Amazon-provided IPv6 CIDRs to top-level pools and
  /// for provisioning CIDRs to pools with source pools. Cannot be used to
  /// provision BYOIP CIDRs to top-level pools. Either "NetmaskLength" or "Cidr"
  /// is required.
  Future<ProvisionIpamPoolCidrResult> provisionIpamPoolCidr({
    required String ipamPoolId,
    String? cidr,
    IpamCidrAuthorizationContext? cidrAuthorizationContext,
    String? clientToken,
    bool? dryRun,
    int? netmaskLength,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provision a CIDR to a public IPv4 pool.
  ///
  /// For more information about IPAM, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
  /// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool you would like to use to allocate this CIDR.
  ///
  /// Parameter [netmaskLength] :
  /// The netmask length of the CIDR you would like to allocate to the public
  /// IPv4 pool.
  ///
  /// Parameter [poolId] :
  /// The ID of the public IPv4 pool you would like to use for this CIDR.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ProvisionPublicIpv4PoolCidrResult> provisionPublicIpv4PoolCidr({
    required String ipamPoolId,
    required int netmaskLength,
    required String poolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Purchase the Capacity Block for use with your account. With Capacity
  /// Blocks you ensure GPU capacity is available for machine learning (ML)
  /// workloads. You must specify the ID of the Capacity Block offering you are
  /// purchasing.
  ///
  /// Parameter [capacityBlockOfferingId] :
  /// The ID of the Capacity Block offering.
  ///
  /// Parameter [instancePlatform] :
  /// The type of operating system for which to reserve capacity.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Capacity Block during launch.
  Future<PurchaseCapacityBlockResult> purchaseCapacityBlock({
    required String capacityBlockOfferingId,
    required CapacityReservationInstancePlatform instancePlatform,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Purchase a reservation with configurations that match those of your
  /// Dedicated Host. You must have active Dedicated Hosts in your account
  /// before you purchase a reservation. This action results in the specified
  /// reservation being purchased and charged to your account.
  ///
  /// Parameter [hostIdSet] :
  /// The IDs of the Dedicated Hosts with which the reservation will be
  /// associated.
  ///
  /// Parameter [offeringId] :
  /// The ID of the offering.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [currencyCode] :
  /// The currency in which the <code>totalUpfrontPrice</code>,
  /// <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are
  /// specified. At this time, the only supported currency is <code>USD</code>.
  ///
  /// Parameter [limitPrice] :
  /// The specified limit is checked against the total upfront cost of the
  /// reservation (calculated as the offering's upfront cost multiplied by the
  /// host count). If the total upfront cost is greater than the specified price
  /// limit, the request fails. This is used to ensure that the purchase does
  /// not exceed the expected upfront cost of the purchase. At this time, the
  /// only supported currency is <code>USD</code>. For example, to indicate a
  /// limit price of USD 100, specify 100.00.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Dedicated Host Reservation during purchase.
  Future<PurchaseHostReservationResult> purchaseHostReservation({
    required List<String> hostIdSet,
    required String offeringId,
    String? clientToken,
    CurrencyCodeValues? currencyCode,
    String? limitPrice,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Purchases a Reserved Instance for use with your account. With Reserved
  /// Instances, you pay a lower hourly rate compared to On-Demand instance
  /// pricing.
  ///
  /// Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved
  /// Instance offerings that match your specifications. After you've purchased
  /// a Reserved Instance, you can check for your new Reserved Instance with
  /// <a>DescribeReservedInstances</a>.
  ///
  /// To queue a purchase for a future date and time, specify a purchase time.
  /// If you do not specify a purchase time, the default is the current time.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
  /// Instances</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceCount] :
  /// The number of Reserved Instances to purchase.
  ///
  /// Parameter [reservedInstancesOfferingId] :
  /// The ID of the Reserved Instance offering to purchase.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [limitPrice] :
  /// Specified for Reserved Instance Marketplace offerings to limit the total
  /// order and ensure that the Reserved Instances are not purchased at
  /// unexpected prices.
  ///
  /// Parameter [purchaseTime] :
  /// The time at which to purchase the Reserved Instance, in UTC format (for
  /// example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  Future<PurchaseReservedInstancesOfferingResult>
      purchaseReservedInstancesOffering({
    required int instanceCount,
    required String reservedInstancesOfferingId,
    bool? dryRun,
    ReservedInstanceLimitPrice? limitPrice,
    DateTime? purchaseTime,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// You can no longer purchase Scheduled Instances.
  /// </note>
  /// Purchases the Scheduled Instances with the specified schedule.
  ///
  /// Scheduled Instances enable you to purchase Amazon EC2 compute capacity by
  /// the hour for a one-year term. Before you can purchase a Scheduled
  /// Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to
  /// check for available schedules and obtain a purchase token. After you
  /// purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a>
  /// during each scheduled time period.
  ///
  /// After you purchase a Scheduled Instance, you can't cancel, modify, or
  /// resell your purchase.
  ///
  /// Parameter [purchaseRequests] :
  /// The purchase requests.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that ensures the idempotency of the
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<PurchaseScheduledInstancesResult> purchaseScheduledInstances({
    required List<PurchaseRequest> purchaseRequests,
    String? clientToken,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Requests a reboot of the specified instances. This operation is
  /// asynchronous; it only queues a request to reboot the specified instances.
  /// The operation succeeds if the instances are valid and belong to you.
  /// Requests to reboot terminated instances are ignored.
  ///
  /// If an instance does not cleanly shut down within a few minutes, Amazon EC2
  /// performs a hard reboot.
  ///
  /// For more information about troubleshooting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Troubleshoot
  /// an unreachable instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> rebootInstances({
    required List<String> instanceIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers an AMI. When you're creating an instance-store backed AMI,
  /// registering the AMI is the final step in the creation process. For more
  /// information about creating AMIs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Create
  /// your own AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// <note>
  /// For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers
  /// the AMI in a single request, so you don't have to register the AMI
  /// yourself. We recommend that you always use <a>CreateImage</a> unless you
  /// have a specific reason to use RegisterImage.
  /// </note>
  /// If needed, you can deregister an AMI at any time. Any modifications you
  /// make to an AMI backed by an instance store volume invalidates its
  /// registration. If you make changes to an image, deregister the previous
  /// image and register the new image.
  ///
  /// <b>Register a snapshot of a root device volume</b>
  ///
  /// You can use <code>RegisterImage</code> to create an Amazon EBS-backed
  /// Linux AMI from a snapshot of a root device volume. You specify the
  /// snapshot using a block device mapping. You can't set the encryption state
  /// of the volume using the block device mapping. If the snapshot is
  /// encrypted, or encryption by default is enabled, the root volume of an
  /// instance launched from the AMI is encrypted.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot">Create
  /// a Linux AMI from a snapshot</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Use
  /// encryption with Amazon EBS-backed AMIs</a> in the <i>Amazon Elastic
  /// Compute Cloud User Guide</i>.
  ///
  /// <b>Amazon Web Services Marketplace product codes</b>
  ///
  /// If any snapshots have Amazon Web Services Marketplace product codes, they
  /// are copied to the new AMI.
  ///
  /// Windows and some Linux distributions, such as Red Hat Enterprise Linux
  /// (RHEL) and SUSE Linux Enterprise Server (SLES), use the Amazon EC2 billing
  /// product code associated with an AMI to verify the subscription status for
  /// package updates. To create a new AMI for operating systems that require a
  /// billing product code, instead of registering the AMI, do the following to
  /// preserve the billing product code association:
  /// <ol>
  /// <li>
  /// Launch an instance from an existing AMI with that billing product code.
  /// </li>
  /// <li>
  /// Customize the instance.
  /// </li>
  /// <li>
  /// Create an AMI from the instance using <a>CreateImage</a>.
  /// </li> </ol>
  /// If you purchase a Reserved Instance to apply to an On-Demand Instance that
  /// was launched from an AMI with a billing product code, make sure that the
  /// Reserved Instance has the matching billing product code. If you purchase a
  /// Reserved Instance without the matching billing product code, the Reserved
  /// Instance will not be applied to the On-Demand Instance. For information
  /// about how to obtain the platform details and billing information of an
  /// AMI, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understand
  /// AMI billing information</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [name] :
  /// A name for your AMI.
  ///
  /// Constraints: 3-128 alphanumeric characters, parentheses (()), square
  /// brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single
  /// quotes ('), at-signs (@), or underscores(_)
  ///
  /// Parameter [architecture] :
  /// The architecture of the AMI.
  ///
  /// Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance
  /// store-backed AMIs, the architecture specified in the manifest file.
  ///
  /// Parameter [billingProducts] :
  /// The billing product codes. Your account must be authorized to specify
  /// billing product codes.
  ///
  /// If your account is not authorized to specify billing product codes, you
  /// can publish AMIs that include billable software and list them on the
  /// Amazon Web Services Marketplace. You must first register as a seller on
  /// the Amazon Web Services Marketplace. For more information, see <a
  /// href="https://docs.aws.amazon.com/marketplace/latest/userguide/user-guide-for-sellers.html">Getting
  /// started as a seller</a> and <a
  /// href="https://docs.aws.amazon.com/marketplace/latest/userguide/ami-products.html">AMI-based
  /// products</a> in the <i>Amazon Web Services Marketplace Seller Guide</i>.
  ///
  /// Parameter [blockDeviceMappings] :
  /// The block device mapping entries.
  ///
  /// If you specify an Amazon EBS volume using the ID of an Amazon EBS
  /// snapshot, you can't specify the encryption state of the volume.
  ///
  /// If you create an AMI on an Outpost, then all backing snapshots must be on
  /// the same Outpost or in the Region of that Outpost. AMIs on an Outpost that
  /// include local snapshots can be used to launch instances on the same
  /// Outpost only. For more information, <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#ami">Amazon
  /// EBS local snapshots on Outposts</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [bootMode] :
  /// The boot mode of the AMI. A value of <code>uefi-preferred</code> indicates
  /// that the AMI supports both UEFI and Legacy BIOS.
  /// <note>
  /// The operating system contained in the AMI must be configured to support
  /// the specified boot mode.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot
  /// modes</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [description] :
  /// A description for your AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [enaSupport] :
  /// Set to <code>true</code> to enable enhanced networking with ENA for the
  /// AMI and any instances that you launch from the AMI.
  ///
  /// This option is supported only for HVM AMIs. Specifying this option with a
  /// PV AMI can make instances launched from the AMI unreachable.
  ///
  /// Parameter [imageLocation] :
  /// The full path to your AMI manifest in Amazon S3 storage. The specified
  /// bucket must have the <code>aws-exec-read</code> canned access control list
  /// (ACL) to ensure that it can be accessed by Amazon EC2. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned
  /// ACLs</a> in the <i>Amazon S3 Service Developer Guide</i>.
  ///
  /// Parameter [imdsSupport] :
  /// Set to <code>v2.0</code> to indicate that IMDSv2 is specified in the AMI.
  /// Instances launched from this AMI will have <code>HttpTokens</code>
  /// automatically set to <code>required</code> so that, by default, the
  /// instance requires that IMDSv2 is used when requesting instance metadata.
  /// In addition, <code>HttpPutResponseHopLimit</code> is set to
  /// <code>2</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure
  /// the AMI</a> in the <i>Amazon EC2 User Guide</i>.
  /// <note>
  /// If you set the value to <code>v2.0</code>, make sure that your AMI
  /// software can support IMDSv2.
  /// </note>
  ///
  /// Parameter [kernelId] :
  /// The ID of the kernel.
  ///
  /// Parameter [ramdiskId] :
  /// The ID of the RAM disk.
  ///
  /// Parameter [rootDeviceName] :
  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  ///
  /// Parameter [sriovNetSupport] :
  /// Set to <code>simple</code> to enable enhanced networking with the Intel
  /// 82599 Virtual Function interface for the AMI and any instances that you
  /// launch from the AMI.
  ///
  /// There is no way to disable <code>sriovNetSupport</code> at this time.
  ///
  /// This option is supported only for HVM AMIs. Specifying this option with a
  /// PV AMI can make instances launched from the AMI unreachable.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the AMI.
  ///
  /// To tag the AMI, the value for <code>ResourceType</code> must be
  /// <code>image</code>. If you specify another value for
  /// <code>ResourceType</code>, the request fails.
  ///
  /// To tag an AMI after it has been registered, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  ///
  /// Parameter [tpmSupport] :
  /// Set to <code>v2.0</code> to enable Trusted Platform Module (TPM) support.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html">NitroTPM</a>
  /// in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [uefiData] :
  /// Base64 representation of the non-volatile UEFI variable store. To retrieve
  /// the UEFI data, use the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a>
  /// command. You can inspect and modify the UEFI data by using the <a
  /// href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a>
  /// on GitHub. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI
  /// Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [virtualizationType] :
  /// The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).
  ///
  /// Default: <code>paravirtual</code>
  Future<RegisterImageResult> registerImage({
    required String name,
    ArchitectureValues? architecture,
    List<String>? billingProducts,
    List<BlockDeviceMapping>? blockDeviceMappings,
    BootModeValues? bootMode,
    String? description,
    bool? dryRun,
    bool? enaSupport,
    String? imageLocation,
    ImdsSupportValues? imdsSupport,
    String? kernelId,
    String? ramdiskId,
    String? rootDeviceName,
    String? sriovNetSupport,
    List<TagSpecification>? tagSpecifications,
    TpmSupportValues? tpmSupport,
    String? uefiData,
    String? virtualizationType,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers a set of tag keys to include in scheduled event notifications
  /// for your resources.
  ///
  /// To remove tags, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeregisterInstanceEventNotificationAttributes.html">DeregisterInstanceEventNotificationAttributes</a>.
  ///
  /// Parameter [instanceTagAttribute] :
  /// Information about the tag keys to register.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RegisterInstanceEventNotificationAttributesResult>
      registerInstanceEventNotificationAttributes({
    required RegisterInstanceTagAttributeRequest instanceTagAttribute,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers members (network interfaces) with the transit gateway multicast
  /// group. A member is a network interface associated with a supported EC2
  /// instance that receives multicast traffic. For information about supported
  /// instances, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
  /// Consideration</a> in <i>Amazon VPC Transit Gateways</i>.
  ///
  /// After you add the members, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a>
  /// to verify that the members were added to the transit gateway multicast
  /// group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The group members' network interface IDs to register with the transit
  /// gateway multicast group.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  Future<RegisterTransitGatewayMulticastGroupMembersResult>
      registerTransitGatewayMulticastGroupMembers({
    required List<String> networkInterfaceIds,
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
    String? groupIpAddress,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers sources (network interfaces) with the specified transit gateway
  /// multicast group.
  ///
  /// A multicast source is a network interface attached to a supported instance
  /// that sends multicast traffic. For information about supported instances,
  /// see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
  /// Considerations</a> in <i>Amazon VPC Transit Gateways</i>.
  ///
  /// After you add the source, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a>
  /// to verify that the source was added to the multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The group sources' network interface IDs to register with the transit
  /// gateway multicast group.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  Future<RegisterTransitGatewayMulticastGroupSourcesResult>
      registerTransitGatewayMulticastGroupSources({
    required List<String> networkInterfaceIds,
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
    String? groupIpAddress,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a request to associate cross-account subnets with a transit
  /// gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets to associate with the transit gateway multicast
  /// domain.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<RejectTransitGatewayMulticastDomainAssociationsResult>
      rejectTransitGatewayMulticastDomainAssociations({
    bool? dryRun,
    List<String>? subnetIds,
    String? transitGatewayAttachmentId,
    String? transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a transit gateway peering attachment request.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway peering attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectTransitGatewayPeeringAttachmentResult>
      rejectTransitGatewayPeeringAttachment({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a request to attach a VPC to a transit gateway.
  ///
  /// The VPC attachment must be in the <code>pendingAcceptance</code> state.
  /// Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC
  /// attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to
  /// accept a VPC attachment request.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectTransitGatewayVpcAttachmentResult>
      rejectTransitGatewayVpcAttachment({
    required String transitGatewayAttachmentId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects VPC endpoint connection requests to your VPC endpoint service.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [vpcEndpointIds] :
  /// The IDs of the VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectVpcEndpointConnectionsResult> rejectVpcEndpointConnections({
    required String serviceId,
    required List<String> vpcEndpointIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a VPC peering connection request. The VPC peering connection must
  /// be in the <code>pending-acceptance</code> state. Use the
  /// <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC
  /// peering connection requests. To delete an active VPC peering connection,
  /// or to delete a VPC peering connection request that you initiated, use
  /// <a>DeleteVpcPeeringConnection</a>.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectVpcPeeringConnectionResult> rejectVpcPeeringConnection({
    required String vpcPeeringConnectionId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Releases the specified Elastic IP address.
  ///
  /// [Default VPC] Releasing an Elastic IP address automatically disassociates
  /// it from any instance that it's associated with. To disassociate an Elastic
  /// IP address without releasing it, use <a>DisassociateAddress</a>.
  ///
  /// [Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate
  /// the Elastic IP address before you can release it. Otherwise, Amazon EC2
  /// returns an error (<code>InvalidIPAddress.InUse</code>).
  ///
  /// After releasing an Elastic IP address, it is released to the IP address
  /// pool. Be sure to update your DNS records and any servers or devices that
  /// communicate with the address. If you attempt to release an Elastic IP
  /// address that you already released, you'll get an <code>AuthFailure</code>
  /// error if the address is already allocated to another Amazon Web Services
  /// account.
  ///
  /// After you release an Elastic IP address, you might be able to recover it.
  /// For more information, see <a>AllocateAddress</a>.
  ///
  /// Parameter [allocationId] :
  /// The allocation ID. This parameter is required.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [networkBorderGroup] :
  /// The set of Availability Zones, Local Zones, or Wavelength Zones from which
  /// Amazon Web Services advertises IP addresses.
  ///
  /// If you provide an incorrect network border group, you receive an
  /// <code>InvalidAddress.NotFound</code> error.
  ///
  /// Parameter [publicIp] :
  /// Deprecated.
  Future<void> releaseAddress({
    String? allocationId,
    bool? dryRun,
    String? networkBorderGroup,
    String? publicIp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// When you no longer want to use an On-Demand Dedicated Host it can be
  /// released. On-Demand billing is stopped and the host goes into
  /// <code>released</code> state. The host ID of Dedicated Hosts that have been
  /// released can no longer be specified in another request, for example, to
  /// modify the host. You must stop or terminate all instances on a host before
  /// it can be released.
  ///
  /// When Dedicated Hosts are released, it may take some time for them to stop
  /// counting toward your limit and you may receive capacity errors when trying
  /// to allocate new Dedicated Hosts. Wait a few minutes and then try again.
  ///
  /// Released hosts still appear in a <a>DescribeHosts</a> response.
  ///
  /// Parameter [hostIds] :
  /// The IDs of the Dedicated Hosts to release.
  Future<ReleaseHostsResult> releaseHosts({
    required List<String> hostIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Release an allocation within an IPAM pool. The Region you use should be
  /// the IPAM pool locale. The locale is the Amazon Web Services Region where
  /// this IPAM pool is available for allocations. You can only use this action
  /// to release manual allocations. To remove an allocation for a resource
  /// without deleting the resource, set its monitored state to false using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyIpamResourceCidr.html">ModifyIpamResourceCidr</a>.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/release-alloc-ipam.html">Release
  /// an allocation</a> in the <i>Amazon VPC IPAM User Guide</i>.
  /// <note>
  /// All EC2 API actions follow an <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/query-api-troubleshooting.html#eventual-consistency">eventual
  /// consistency</a> model.
  /// </note>
  ///
  /// Parameter [cidr] :
  /// The CIDR of the allocation you want to release.
  ///
  /// Parameter [ipamPoolAllocationId] :
  /// The ID of the allocation.
  ///
  /// Parameter [ipamPoolId] :
  /// The ID of the IPAM pool which contains the allocation you want to release.
  ///
  /// Parameter [dryRun] :
  /// A check for whether you have the required permissions for the action
  /// without actually making the request and provides an error response. If you
  /// have the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ReleaseIpamPoolAllocationResult> releaseIpamPoolAllocation({
    required String cidr,
    required String ipamPoolAllocationId,
    required String ipamPoolId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces an IAM instance profile for the specified running instance. You
  /// can use this action to change the IAM instance profile that's associated
  /// with an instance without having to disassociate the existing IAM instance
  /// profile first.
  ///
  /// Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
  /// ID.
  ///
  /// Parameter [associationId] :
  /// The ID of the existing IAM instance profile association.
  ///
  /// Parameter [iamInstanceProfile] :
  /// The IAM instance profile.
  Future<ReplaceIamInstanceProfileAssociationResult>
      replaceIamInstanceProfileAssociation({
    required String associationId,
    required IamInstanceProfileSpecification iamInstanceProfile,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes which network ACL a subnet is associated with. By default when you
  /// create a subnet, it's automatically associated with the default network
  /// ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network
  /// ACLs</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// This is an idempotent operation.
  ///
  /// Parameter [associationId] :
  /// The ID of the current association between the original network ACL and the
  /// subnet.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the new network ACL to associate with the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ReplaceNetworkAclAssociationResult> replaceNetworkAclAssociation({
    required String associationId,
    required String networkAclId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces an entry (rule) in a network ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network
  /// ACLs</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [egress] :
  /// Indicates whether to replace the egress rule.
  ///
  /// Default: If no value is specified, we replace the ingress rule.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the ACL.
  ///
  /// Parameter [protocol] :
  /// The protocol number. A value of "-1" means all protocols. If you specify
  /// "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP),
  /// traffic on all ports is allowed, regardless of any ports or ICMP types or
  /// codes that you specify. If you specify protocol "58" (ICMPv6) and specify
  /// an IPv4 CIDR block, traffic for all ICMP types and codes allowed,
  /// regardless of any that you specify. If you specify protocol "58" (ICMPv6)
  /// and specify an IPv6 CIDR block, you must specify an ICMP type and code.
  ///
  /// Parameter [ruleAction] :
  /// Indicates whether to allow or deny the traffic that matches the rule.
  ///
  /// Parameter [ruleNumber] :
  /// The rule number of the entry to replace.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range to allow or deny, in CIDR notation (for example
  /// <code>172.16.0.0/24</code>).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [icmpTypeCode] :
  /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying
  /// protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 network range to allow or deny, in CIDR notation (for example
  /// <code>2001:bd8:1234:1a00::/64</code>).
  ///
  /// Parameter [portRange] :
  /// TCP or UDP protocols: The range of ports the rule applies to. Required if
  /// specifying protocol 6 (TCP) or 17 (UDP).
  Future<void> replaceNetworkAclEntry({
    required bool egress,
    required String networkAclId,
    required String protocol,
    required RuleAction ruleAction,
    required int ruleNumber,
    String? cidrBlock,
    bool? dryRun,
    IcmpTypeCode? icmpTypeCode,
    String? ipv6CidrBlock,
    PortRange? portRange,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces an existing route within a route table in a VPC.
  ///
  /// You must specify either a destination CIDR block or a prefix list ID. You
  /// must also specify exactly one of the resources from the parameter list, or
  /// reset the local route to its default target.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [carrierGatewayId] :
  /// [IPv4 traffic only] The ID of a carrier gateway.
  ///
  /// Parameter [coreNetworkArn] :
  /// The Amazon Resource Name (ARN) of the core network.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 CIDR address block used for the destination match. The value that
  /// you provide must match the CIDR of an existing route in the table.
  ///
  /// Parameter [destinationIpv6CidrBlock] :
  /// The IPv6 CIDR address block used for the destination match. The value that
  /// you provide must match the CIDR of an existing route in the table.
  ///
  /// Parameter [destinationPrefixListId] :
  /// The ID of the prefix list for the route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [egressOnlyInternetGatewayId] :
  /// [IPv6 traffic only] The ID of an egress-only internet gateway.
  ///
  /// Parameter [gatewayId] :
  /// The ID of an internet gateway or virtual private gateway.
  ///
  /// Parameter [instanceId] :
  /// The ID of a NAT instance in your VPC.
  ///
  /// Parameter [localGatewayId] :
  /// The ID of the local gateway.
  ///
  /// Parameter [localTarget] :
  /// Specifies whether to reset the local route to its default target
  /// (<code>local</code>).
  ///
  /// Parameter [natGatewayId] :
  /// [IPv4 traffic only] The ID of a NAT gateway.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of a network interface.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of a transit gateway.
  ///
  /// Parameter [vpcEndpointId] :
  /// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints
  /// only.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of a VPC peering connection.
  Future<void> replaceRoute({
    required String routeTableId,
    String? carrierGatewayId,
    String? coreNetworkArn,
    String? destinationCidrBlock,
    String? destinationIpv6CidrBlock,
    String? destinationPrefixListId,
    bool? dryRun,
    String? egressOnlyInternetGatewayId,
    String? gatewayId,
    String? instanceId,
    String? localGatewayId,
    bool? localTarget,
    String? natGatewayId,
    String? networkInterfaceId,
    String? transitGatewayId,
    String? vpcEndpointId,
    String? vpcPeeringConnectionId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes the route table associated with a given subnet, internet gateway,
  /// or virtual private gateway in a VPC. After the operation completes, the
  /// subnet or gateway uses the routes in the new route table. For more
  /// information about route tables, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// tables</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// You can also use this operation to change which table is the main route
  /// table in the VPC. Specify the main route table's association ID and the
  /// route table ID of the new main route table.
  ///
  /// Parameter [associationId] :
  /// The association ID.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the new route table to associate with the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ReplaceRouteTableAssociationResult> replaceRouteTableAssociation({
    required String associationId,
    required String routeTableId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces the specified route in the specified transit gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range used for the destination match. Routing decisions are based
  /// on the most specific match.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [blackhole] :
  /// Indicates whether traffic matching this route is to be dropped.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  Future<ReplaceTransitGatewayRouteResult> replaceTransitGatewayRoute({
    required String destinationCidrBlock,
    required String transitGatewayRouteTableId,
    bool? blackhole,
    bool? dryRun,
    String? transitGatewayAttachmentId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Trigger replacement of specified VPN tunnel.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the Site-to-Site VPN connection.
  ///
  /// Parameter [vpnTunnelOutsideIpAddress] :
  /// The external IP address of the VPN tunnel.
  ///
  /// Parameter [applyPendingMaintenance] :
  /// Trigger pending tunnel endpoint maintenance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ReplaceVpnTunnelResult> replaceVpnTunnel({
    required String vpnConnectionId,
    required String vpnTunnelOutsideIpAddress,
    bool? applyPendingMaintenance,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Submits feedback about the status of an instance. The instance must be in
  /// the <code>running</code> state. If your experience with the instance
  /// differs from the instance status returned by
  /// <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report
  /// your experience with the instance. Amazon EC2 collects this information to
  /// improve the accuracy of status checks.
  ///
  /// Use of this action does not change the value returned by
  /// <a>DescribeInstanceStatus</a>.
  ///
  /// Parameter [instances] :
  /// The instances.
  ///
  /// Parameter [reasonCodes] :
  /// The reason codes that describe the health state of your instance.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-stuck-in-state</code>: My instance is stuck in a state.
  /// </li>
  /// <li>
  /// <code>unresponsive</code>: My instance is unresponsive.
  /// </li>
  /// <li>
  /// <code>not-accepting-credentials</code>: My instance is not accepting my
  /// credentials.
  /// </li>
  /// <li>
  /// <code>password-not-available</code>: A password is not available for my
  /// instance.
  /// </li>
  /// <li>
  /// <code>performance-network</code>: My instance is experiencing performance
  /// problems that I believe are network related.
  /// </li>
  /// <li>
  /// <code>performance-instance-store</code>: My instance is experiencing
  /// performance problems that I believe are related to the instance stores.
  /// </li>
  /// <li>
  /// <code>performance-ebs-volume</code>: My instance is experiencing
  /// performance problems that I believe are related to an EBS volume.
  /// </li>
  /// <li>
  /// <code>performance-other</code>: My instance is experiencing performance
  /// problems.
  /// </li>
  /// <li>
  /// <code>other</code>: [explain using the description parameter]
  /// </li>
  /// </ul>
  ///
  /// Parameter [status] :
  /// The status of all instances listed.
  ///
  /// Parameter [description] :
  /// Descriptive text about the health state of your instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endTime] :
  /// The time at which the reported instance health state ended.
  ///
  /// Parameter [startTime] :
  /// The time at which the reported instance health state began.
  Future<void> reportInstanceStatus({
    required List<String> instances,
    required List<ReportInstanceReasonCodes> reasonCodes,
    required ReportStatusType status,
    String? description,
    bool? dryRun,
    DateTime? endTime,
    DateTime? startTime,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Spot Fleet request.
  ///
  /// The Spot Fleet request specifies the total target capacity and the
  /// On-Demand target capacity. Amazon EC2 calculates the difference between
  /// the total capacity and On-Demand capacity, and launches the difference as
  /// Spot capacity.
  ///
  /// You can submit a single request that includes multiple launch
  /// specifications that vary by instance type, AMI, Availability Zone, or
  /// subnet.
  ///
  /// By default, the Spot Fleet requests Spot Instances in the Spot Instance
  /// pool where the price per unit is the lowest. Each launch specification can
  /// include its own instance weighting that reflects the value of the instance
  /// type to your application workload.
  ///
  /// Alternatively, you can specify that the Spot Fleet distribute the target
  /// capacity across the Spot pools included in its launch specifications. By
  /// ensuring that the Spot Instances in your Spot Fleet are in different Spot
  /// pools, you can improve the availability of your fleet.
  ///
  /// You can specify tags for the Spot Fleet request and instances launched by
  /// the fleet. You cannot tag other resource types in a Spot Fleet request
  /// because only the <code>spot-fleet-request</code> and <code>instance</code>
  /// resource types are supported.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot
  /// Fleet requests</a> in the <i>Amazon EC2 User Guide</i>.
  /// <important>
  /// We strongly discourage using the RequestSpotFleet API because it is a
  /// legacy API with no planned investment. For options for requesting Spot
  /// Instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use">Which
  /// is the best Spot request method to use?</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  /// </important>
  ///
  /// Parameter [spotFleetRequestConfig] :
  /// The configuration for the Spot Fleet request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RequestSpotFleetResponse> requestSpotFleet({
    required SpotFleetRequestConfigData spotFleetRequestConfig,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Spot Instance request.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot
  /// Instance requests</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  /// <important>
  /// We strongly discourage using the RequestSpotInstances API because it is a
  /// legacy API with no planned investment. For options for requesting Spot
  /// Instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use">Which
  /// is the best Spot request method to use?</a> in the <i>Amazon EC2 User
  /// Guide for Linux Instances</i>.
  /// </important>
  ///
  /// Parameter [availabilityZoneGroup] :
  /// The user-specified name for a logical grouping of requests.
  ///
  /// When you specify an Availability Zone group in a Spot Instance request,
  /// all Spot Instances in the request are launched in the same Availability
  /// Zone. Instance proximity is maintained with this parameter, but the choice
  /// of Availability Zone is not. The group applies only to requests for Spot
  /// Instances of the same instance type. Any additional Spot Instance requests
  /// that are specified with the same Availability Zone group name are launched
  /// in that same Availability Zone, as long as at least one instance from the
  /// group is still active.
  ///
  /// If there is no active instance running in the Availability Zone group that
  /// you specify for a new Spot Instance request (all instances are terminated,
  /// the request is expired, or the maximum price you specified falls below
  /// current Spot price), then Amazon EC2 launches the instance in any
  /// Availability Zone where the constraint can be met. Consequently, the
  /// subsequent set of Spot Instances could be placed in a different zone from
  /// the original request, even if you specified the same Availability Zone
  /// group.
  ///
  /// Default: Instances are launched in any available Availability Zone.
  ///
  /// Parameter [blockDurationMinutes] :
  /// Deprecated.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceCount] :
  /// The maximum number of Spot Instances to launch.
  ///
  /// Default: 1
  ///
  /// Parameter [instanceInterruptionBehavior] :
  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  ///
  /// Parameter [launchGroup] :
  /// The instance launch group. Launch groups are Spot Instances that launch
  /// together and terminate together.
  ///
  /// Default: Instances are launched and terminated individually
  ///
  /// Parameter [launchSpecification] :
  /// The launch specification.
  ///
  /// Parameter [spotPrice] :
  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will
  /// pay the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  ///
  /// Parameter [tagSpecifications] :
  /// The key-value pair for tagging the Spot Instance request on creation. The
  /// value for <code>ResourceType</code> must be
  /// <code>spot-instances-request</code>, otherwise the Spot Instance request
  /// fails. To tag the Spot Instance request after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  ///
  /// Parameter [type] :
  /// The Spot Instance request type.
  ///
  /// Default: <code>one-time</code>
  ///
  /// Parameter [validFrom] :
  /// The start date of the request. If this is a one-time request, the request
  /// becomes active at this date and time and remains active until all
  /// instances launch, the request expires, or the request is canceled. If the
  /// request is persistent, the request becomes active at this date and time
  /// and remains active until it expires or is canceled.
  ///
  /// The specified start date and time cannot be equal to the current date and
  /// time. You must specify a start date and time that occurs after the current
  /// date and time.
  ///
  /// Parameter [validUntil] :
  /// The end date of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// <ul>
  /// <li>
  /// For a persistent request, the request remains active until the
  /// <code>ValidUntil</code> date and time is reached. Otherwise, the request
  /// remains active until you cancel it.
  /// </li>
  /// <li>
  /// For a one-time request, the request remains active until all instances
  /// launch, the request is canceled, or the <code>ValidUntil</code> date and
  /// time is reached. By default, the request is valid for 7 days from the date
  /// the request was created.
  /// </li>
  /// </ul>
  Future<RequestSpotInstancesResult> requestSpotInstances({
    String? availabilityZoneGroup,
    int? blockDurationMinutes,
    String? clientToken,
    bool? dryRun,
    int? instanceCount,
    InstanceInterruptionBehavior? instanceInterruptionBehavior,
    String? launchGroup,
    RequestSpotLaunchSpecification? launchSpecification,
    String? spotPrice,
    List<TagSpecification>? tagSpecifications,
    SpotInstanceType? type,
    DateTime? validFrom,
    DateTime? validUntil,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets the attribute of the specified IP address. For requirements, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using
  /// reverse DNS for email applications</a>.
  ///
  /// Parameter [allocationId] :
  /// [EC2-VPC] The allocation ID.
  ///
  /// Parameter [attribute] :
  /// The attribute of the IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ResetAddressAttributeResult> resetAddressAttribute({
    required String allocationId,
    required AddressAttributeName attribute,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets the default KMS key for EBS encryption for your account in this
  /// Region to the Amazon Web Services managed KMS key for EBS.
  ///
  /// After resetting the default KMS key to the Amazon Web Services managed KMS
  /// key, you can continue to encrypt by a customer managed KMS key by
  /// specifying it when you create the volume. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ResetEbsDefaultKmsKeyIdResult> resetEbsDefaultKmsKeyId({
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets the specified attribute of the specified Amazon FPGA Image (AFI) to
  /// its default value. You can only reset the load permission attribute.
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [attribute] :
  /// The attribute.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ResetFpgaImageAttributeResult> resetFpgaImageAttribute({
    required String fpgaImageId,
    ResetFpgaImageAttributeName? attribute,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets an attribute of an AMI to its default value.
  ///
  /// Parameter [attribute] :
  /// The attribute to reset (currently you can only reset the launch permission
  /// attribute).
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> resetImageAttribute({
    required ResetImageAttributeName attribute,
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets an attribute of an instance to its default value. To reset the
  /// <code>kernel</code> or <code>ramdisk</code>, the instance must be in a
  /// stopped state. To reset the <code>sourceDestCheck</code>, the instance can
  /// be either running or stopped.
  ///
  /// The <code>sourceDestCheck</code> attribute controls whether
  /// source/destination checking is enabled. The default value is
  /// <code>true</code>, which means checking is enabled. This value must be
  /// <code>false</code> for a NAT instance to perform NAT. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT
  /// Instances</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The attribute to reset.
  /// <important>
  /// You can only reset the following attributes: <code>kernel</code> |
  /// <code>ramdisk</code> | <code>sourceDestCheck</code>.
  /// </important>
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> resetInstanceAttribute({
    required InstanceAttributeName attribute,
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets a network interface attribute. You can specify only one attribute
  /// at a time.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [sourceDestCheck] :
  /// The source/destination checking attribute. Resets the value to
  /// <code>true</code>.
  Future<void> resetNetworkInterfaceAttribute({
    required String networkInterfaceId,
    bool? dryRun,
    String? sourceDestCheck,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets permission settings for the specified snapshot.
  ///
  /// For more information about modifying snapshot permissions, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modifying-snapshot-permissions.html">Share
  /// a snapshot</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The attribute to reset. Currently, only the attribute for permission to
  /// create volumes can be reset.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> resetSnapshotAttribute({
    required SnapshotAttributeName attribute,
    required String snapshotId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// <note>
  /// This action is deprecated.
  /// </note>
  /// Restores an Elastic IP address that was previously moved to the EC2-VPC
  /// platform back to the EC2-Classic platform. You cannot move an Elastic IP
  /// address that was originally allocated for use in EC2-VPC. The Elastic IP
  /// address must not be associated with an instance or network interface.
  ///
  /// Parameter [publicIp] :
  /// The Elastic IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RestoreAddressToClassicResult> restoreAddressToClassic({
    required String publicIp,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Restores an AMI from the Recycle Bin. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle
  /// Bin</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI to restore.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RestoreImageFromRecycleBinResult> restoreImageFromRecycleBin({
    required String imageId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Restores the entries from a previous version of a managed prefix list to a
  /// new version of the prefix list.
  ///
  /// Parameter [currentVersion] :
  /// The current version number for the prefix list.
  ///
  /// Parameter [prefixListId] :
  /// The ID of the prefix list.
  ///
  /// Parameter [previousVersion] :
  /// The version to restore.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RestoreManagedPrefixListVersionResult>
      restoreManagedPrefixListVersion({
    required int currentVersion,
    required String prefixListId,
    required int previousVersion,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Restores a snapshot from the Recycle Bin. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/recycle-bin-working-with-snaps.html#recycle-bin-restore-snaps">Restore
  /// snapshots from the Recycle Bin</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot to restore.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RestoreSnapshotFromRecycleBinResult> restoreSnapshotFromRecycleBin({
    required String snapshotId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Restores an archived Amazon EBS snapshot for use temporarily or
  /// permanently, or modifies the restore period or restore type for a snapshot
  /// that was previously temporarily restored.
  ///
  /// For more information see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/working-with-snapshot-archiving.html#restore-archived-snapshot">
  /// Restore an archived snapshot</a> and <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/working-with-snapshot-archiving.html#modify-temp-restore-period">
  /// modify the restore period or restore type for a temporarily restored
  /// snapshot</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot to restore.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [permanentRestore] :
  /// Indicates whether to permanently restore an archived snapshot. To
  /// permanently restore an archived snapshot, specify <code>true</code> and
  /// omit the <b>RestoreSnapshotTierRequest$TemporaryRestoreDays</b> parameter.
  ///
  /// Parameter [temporaryRestoreDays] :
  /// Specifies the number of days for which to temporarily restore an archived
  /// snapshot. Required for temporary restores only. The snapshot will be
  /// automatically re-archived after this period.
  ///
  /// To temporarily restore an archived snapshot, specify the number of days
  /// and omit the <b>PermanentRestore</b> parameter or set it to
  /// <code>false</code>.
  Future<RestoreSnapshotTierResult> restoreSnapshotTier({
    required String snapshotId,
    bool? dryRun,
    bool? permanentRestore,
    int? temporaryRestoreDays,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes an ingress authorization rule from a Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint with which the authorization rule is
  /// associated.
  ///
  /// Parameter [targetNetworkCidr] :
  /// The IPv4 address range, in CIDR notation, of the network for which access
  /// is being removed.
  ///
  /// Parameter [accessGroupId] :
  /// The ID of the Active Directory group for which to revoke access.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [revokeAllGroups] :
  /// Indicates whether access should be revoked for all clients.
  Future<RevokeClientVpnIngressResult> revokeClientVpnIngress({
    required String clientVpnEndpointId,
    required String targetNetworkCidr,
    String? accessGroupId,
    bool? dryRun,
    bool? revokeAllGroups,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes the specified outbound (egress) rules from the specified security
  /// group.
  ///
  /// You can specify rules using either rule IDs or security group rule
  /// properties. If you use rule properties, the values that you specify (for
  /// example, ports) must match the existing rule's values exactly. Each rule
  /// has a protocol, from and to ports, and destination (CIDR range, security
  /// group, or prefix list). For the TCP and UDP protocols, you must also
  /// specify the destination port or range of ports. For the ICMP protocol, you
  /// must also specify the ICMP type and code. If the security group rule has a
  /// description, you do not need to specify the description to revoke the
  /// rule.
  ///
  /// For a default VPC, if the values you specify do not match the existing
  /// rule's values, no error is returned, and the output describes the security
  /// group rules that were not revoked.
  ///
  /// Amazon Web Services recommends that you describe the security group to
  /// verify that the rules were removed.
  ///
  /// Rule changes are propagated to instances within the security group as
  /// quickly as possible. However, a small delay might occur.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [cidrIp] :
  /// Not supported. Use a set of IP permissions to specify the CIDR.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// Not supported. Use a set of IP permissions to specify the port.
  ///
  /// Parameter [ipPermissions] :
  /// The sets of IP permissions. You can't specify a destination security group
  /// and a CIDR IP address range in the same set of permissions.
  ///
  /// Parameter [ipProtocol] :
  /// Not supported. Use a set of IP permissions to specify the protocol name or
  /// number.
  ///
  /// Parameter [securityGroupRuleIds] :
  /// The IDs of the security group rules.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// Not supported. Use a set of IP permissions to specify a destination
  /// security group.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// Not supported. Use a set of IP permissions to specify a destination
  /// security group.
  ///
  /// Parameter [toPort] :
  /// Not supported. Use a set of IP permissions to specify the port.
  Future<RevokeSecurityGroupEgressResult> revokeSecurityGroupEgress({
    required String groupId,
    String? cidrIp,
    bool? dryRun,
    int? fromPort,
    List<IpPermission>? ipPermissions,
    String? ipProtocol,
    List<String>? securityGroupRuleIds,
    String? sourceSecurityGroupName,
    String? sourceSecurityGroupOwnerId,
    int? toPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes the specified inbound (ingress) rules from a security group.
  ///
  /// You can specify rules using either rule IDs or security group rule
  /// properties. If you use rule properties, the values that you specify (for
  /// example, ports) must match the existing rule's values exactly. Each rule
  /// has a protocol, from and to ports, and source (CIDR range, security group,
  /// or prefix list). For the TCP and UDP protocols, you must also specify the
  /// destination port or range of ports. For the ICMP protocol, you must also
  /// specify the ICMP type and code. If the security group rule has a
  /// description, you do not need to specify the description to revoke the
  /// rule.
  ///
  /// For a default VPC, if the values you specify do not match the existing
  /// rule's values, no error is returned, and the output describes the security
  /// group rules that were not revoked.
  ///
  /// For a non-default VPC, if the values you specify do not match the existing
  /// rule's values, an <code>InvalidPermission.NotFound</code> client error is
  /// returned, and no rules are revoked.
  ///
  /// Amazon Web Services recommends that you describe the security group to
  /// verify that the rules were removed.
  ///
  /// Rule changes are propagated to instances within the security group as
  /// quickly as possible. However, a small delay might occur.
  ///
  /// Parameter [cidrIp] :
  /// The CIDR IP address range. You can't specify this parameter when
  /// specifying a source security group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// If the protocol is TCP or UDP, this is the start of the port range. If the
  /// protocol is ICMP, this is the ICMP type or -1 (all ICMP types).
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [groupName] :
  /// [Default VPC] The name of the security group. You must specify either the
  /// security group ID or the security group name in the request. For security
  /// groups in a nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [ipPermissions] :
  /// The sets of IP permissions. You can't specify a source security group and
  /// a CIDR IP address range in the same set of permissions.
  ///
  /// Parameter [ipProtocol] :
  /// The IP protocol name (<code>tcp</code>, <code>udp</code>,
  /// <code>icmp</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>). Use <code>-1</code> to specify all.
  ///
  /// Parameter [securityGroupRuleIds] :
  /// The IDs of the security group rules.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// [Default VPC] The name of the source security group. You can't specify
  /// this parameter in combination with the following parameters: the CIDR IP
  /// address range, the start of the port range, the IP protocol, and the end
  /// of the port range. The source security group must be in the same VPC. To
  /// revoke a specific rule for an IP protocol and port range, use a set of IP
  /// permissions instead.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// Not supported.
  ///
  /// Parameter [toPort] :
  /// If the protocol is TCP or UDP, this is the end of the port range. If the
  /// protocol is ICMP, this is the ICMP code or -1 (all ICMP codes).
  Future<RevokeSecurityGroupIngressResult> revokeSecurityGroupIngress({
    String? cidrIp,
    bool? dryRun,
    int? fromPort,
    String? groupId,
    String? groupName,
    List<IpPermission>? ipPermissions,
    String? ipProtocol,
    List<String>? securityGroupRuleIds,
    String? sourceSecurityGroupName,
    String? sourceSecurityGroupOwnerId,
    int? toPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Launches the specified number of instances using an AMI for which you have
  /// permissions.
  ///
  /// You can specify a number of options, or leave the default options. The
  /// following rules apply:
  ///
  /// <ul>
  /// <li>
  /// If you don't specify a subnet ID, we choose a default subnet from your
  /// default VPC for you. If you don't have a default VPC, you must specify a
  /// subnet ID in the request.
  /// </li>
  /// <li>
  /// All instances have a network interface with a primary private IPv4
  /// address. If you don't specify this address, we choose one from the IPv4
  /// range of your subnet.
  /// </li>
  /// <li>
  /// Not all instance types support IPv6 addresses. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a>.
  /// </li>
  /// <li>
  /// If you don't specify a security group ID, we use the default security
  /// group. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security
  /// groups</a>.
  /// </li>
  /// <li>
  /// If any of the AMIs have a product code attached for which the user has not
  /// subscribed, the request fails.
  /// </li>
  /// </ul>
  /// You can create a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch
  /// template</a>, which is a resource that contains the parameters to launch
  /// an instance. When you launch an instance using <a>RunInstances</a>, you
  /// can specify the launch template instead of specifying the launch
  /// parameters.
  ///
  /// To ensure faster instance launches, break up large requests into smaller
  /// batches. For example, create five separate launch requests for 100
  /// instances each instead of one launch request for 500 instances.
  ///
  /// An instance is ready for you to use when it's in the <code>running</code>
  /// state. You can check the state of your instance using
  /// <a>DescribeInstances</a>. You can tag instances and EBS volumes during
  /// launch, after launch, or both. For more information, see <a>CreateTags</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// your Amazon EC2 resources</a>.
  ///
  /// Linux instances have access to the public key of the key pair at boot. You
  /// can use this key to provide secure access to the instance. Amazon EC2
  /// public images use this feature to provide secure access without passwords.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
  /// pairs</a>.
  ///
  /// For troubleshooting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What
  /// to do if an instance immediately terminates</a>, and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting
  /// connecting to your instance</a>.
  ///
  /// Parameter [maxCount] :
  /// The maximum number of instances to launch. If you specify more instances
  /// than Amazon EC2 can launch in the target Availability Zone, Amazon EC2
  /// launches the largest possible number of instances above
  /// <code>MinCount</code>.
  ///
  /// Constraints: Between 1 and the maximum number you're allowed for the
  /// specified instance type. For more information about the default limits,
  /// and how to request an increase, see <a
  /// href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How
  /// many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.
  ///
  /// Parameter [minCount] :
  /// The minimum number of instances to launch. If you specify a minimum that
  /// is more instances than Amazon EC2 can launch in the target Availability
  /// Zone, Amazon EC2 launches no instances.
  ///
  /// Constraints: Between 1 and the maximum number you're allowed for the
  /// specified instance type. For more information about the default limits,
  /// and how to request an increase, see <a
  /// href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How
  /// many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.
  ///
  /// Parameter [additionalInfo] :
  /// Reserved.
  ///
  /// Parameter [blockDeviceMappings] :
  /// The block device mapping, which defines the EBS volumes and instance store
  /// volumes to attach to the instance at launch. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block
  /// device mappings</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [capacityReservationSpecification] :
  /// Information about the Capacity Reservation targeting option. If you do not
  /// specify this parameter, the instance's Capacity Reservation preference
  /// defaults to <code>open</code>, which enables it to run in any open
  /// Capacity Reservation that has matching attributes (instance type,
  /// platform, Availability Zone).
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. If you do not specify a client token, a randomly generated
  /// token is used for the request to ensure idempotency.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraints: Maximum 64 ASCII characters
  ///
  /// Parameter [cpuOptions] :
  /// The CPU options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize
  /// CPU options</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [creditSpecification] :
  /// The credit option for CPU usage of the burstable performance instance.
  /// Valid values are <code>standard</code> and <code>unlimited</code>. To
  /// change this attribute after launch, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html">
  /// ModifyInstanceCreditSpecification</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Default: <code>standard</code> (T2 instances) or <code>unlimited</code>
  /// (T3/T3a/T4g instances)
  ///
  /// For T3 instances with <code>host</code> tenancy, only
  /// <code>standard</code> is supported.
  ///
  /// Parameter [disableApiStop] :
  /// Indicates whether an instance is enabled for stop protection. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop
  /// protection</a>.
  ///
  /// Parameter [disableApiTermination] :
  /// If you set this parameter to <code>true</code>, you can't terminate the
  /// instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To
  /// change this attribute after launch, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>.
  /// Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code>
  /// to <code>terminate</code>, you can terminate the instance by running the
  /// shutdown command from the instance.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ebsOptimized] :
  /// Indicates whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal Amazon EBS I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS-optimized instance.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [elasticGpuSpecification] :
  /// An elastic GPU to associate with the instance.
  /// <note>
  /// Amazon Elastic Graphics reached end of life on January 8, 2024.
  /// </note>
  ///
  /// Parameter [elasticInferenceAccelerators] :
  /// An elastic inference accelerator to associate with the instance.
  /// <note>
  /// Amazon Elastic Inference (EI) is no longer available to new customers. For
  /// more information, see <a
  /// href="http://aws.amazon.com/machine-learning/elastic-inference/faqs/">Amazon
  /// Elastic Inference FAQs</a>.
  /// </note>
  ///
  /// Parameter [enablePrimaryIpv6] :
  /// If you’re launching an instance into a dual-stack or IPv6-only subnet, you
  /// can enable assigning a primary IPv6 address. A primary IPv6 address is an
  /// IPv6 GUA address associated with an ENI that you have enabled to use a
  /// primary IPv6 address. Use this option if an instance relies on its IPv6
  /// address not changing. When you launch the instance, Amazon Web Services
  /// will automatically assign an IPv6 address associated with the ENI attached
  /// to your instance to be the primary IPv6 address. Once you enable an IPv6
  /// GUA address to be a primary IPv6, you cannot disable it. When you enable
  /// an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made
  /// the primary IPv6 address until the instance is terminated or the network
  /// interface is detached. If you have multiple IPv6 addresses associated with
  /// an ENI attached to your instance and you enable a primary IPv6 address,
  /// the first IPv6 GUA address associated with the ENI becomes the primary
  /// IPv6 address.
  ///
  /// Parameter [enclaveOptions] :
  /// Indicates whether the instance is enabled for Amazon Web Services Nitro
  /// Enclaves. For more information, see <a
  /// href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html">What
  /// is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services
  /// Nitro Enclaves User Guide</i>.
  ///
  /// You can't enable Amazon Web Services Nitro Enclaves and hibernation on the
  /// same instance.
  ///
  /// Parameter [hibernationOptions] :
  /// Indicates whether an instance is enabled for hibernation. This parameter
  /// is valid only if the instance meets the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
  /// prerequisites</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// You can't enable hibernation and Amazon Web Services Nitro Enclaves on the
  /// same instance.
  ///
  /// Parameter [iamInstanceProfile] :
  /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI. An AMI ID is required to launch an instance and must be
  /// specified here or in a launch template.
  ///
  /// Parameter [instanceInitiatedShutdownBehavior] :
  /// Indicates whether an instance stops or terminates when you initiate
  /// shutdown from the instance (using the operating system command for system
  /// shutdown).
  ///
  /// Default: <code>stop</code>
  ///
  /// Parameter [instanceMarketOptions] :
  /// The market (purchasing) option for the instances.
  ///
  /// For <a>RunInstances</a>, persistent Spot Instance requests are only
  /// supported when <b>InstanceInterruptionBehavior</b> is set to either
  /// <code>hibernate</code> or <code>stop</code>.
  ///
  /// Parameter [instanceType] :
  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [ipv6AddressCount] :
  /// The number of IPv6 addresses to associate with the primary network
  /// interface. Amazon EC2 chooses the IPv6 addresses from the range of your
  /// subnet. You cannot specify this option and the option to assign specific
  /// IPv6 addresses in the same request. You can specify this option if you've
  /// specified a minimum number of instances to launch.
  ///
  /// You cannot specify this option and the network interfaces option in the
  /// same request.
  ///
  /// Parameter [ipv6Addresses] :
  /// The IPv6 addresses from the range of the subnet to associate with the
  /// primary network interface. You cannot specify this option and the option
  /// to assign a number of IPv6 addresses in the same request. You cannot
  /// specify this option if you've specified a minimum number of instances to
  /// launch.
  ///
  /// You cannot specify this option and the network interfaces option in the
  /// same request.
  ///
  /// Parameter [kernelId] :
  /// The ID of the kernel.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a>
  /// in the <i>Amazon EC2 User Guide</i>.
  /// </important>
  ///
  /// Parameter [keyName] :
  /// The name of the key pair. You can create a key pair using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.
  /// <important>
  /// If you do not specify a key pair, you can't connect to the instance unless
  /// you choose an AMI that is configured to allow users another way to log in.
  /// </important>
  ///
  /// Parameter [launchTemplate] :
  /// The launch template. Any additional parameters that you specify for the
  /// new instance overwrite the corresponding parameters included in the launch
  /// template.
  ///
  /// Parameter [licenseSpecifications] :
  /// The license configurations.
  ///
  /// Parameter [maintenanceOptions] :
  /// The maintenance and recovery options for the instance.
  ///
  /// Parameter [metadataOptions] :
  /// The metadata options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// metadata and user data</a>.
  ///
  /// Parameter [monitoring] :
  /// Specifies whether detailed monitoring is enabled for the instance.
  ///
  /// Parameter [networkInterfaces] :
  /// The network interfaces to associate with the instance.
  ///
  /// Parameter [placement] :
  /// The placement for the instance.
  ///
  /// Parameter [privateDnsNameOptions] :
  /// The options for the instance hostname. The default values are inherited
  /// from the subnet. Applies only if creating a network interface, not
  /// attaching an existing one.
  ///
  /// Parameter [privateIpAddress] :
  /// The primary IPv4 address. You must specify a value from the IPv4 address
  /// range of the subnet.
  ///
  /// Only one private IP address can be designated as primary. You can't
  /// specify this option if you've specified the option to designate a private
  /// IP address as the primary IP address in a network interface specification.
  /// You cannot specify this option if you're launching more than one instance
  /// in the request.
  ///
  /// You cannot specify this option and the network interfaces option in the
  /// same request.
  ///
  /// Parameter [ramdiskId] :
  /// The ID of the RAM disk to select. Some kernels require additional drivers
  /// at launch. Check the kernel requirements for information about whether you
  /// need to specify a RAM disk. To find kernel requirements, go to the Amazon
  /// Web Services Resource Center and search for the kernel ID.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a>
  /// in the <i>Amazon EC2 User Guide</i>.
  /// </important>
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of the security groups. You can create a security group using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.
  ///
  /// If you specify a network interface, you must specify any security groups
  /// as part of the network interface instead of using this parameter.
  ///
  /// Parameter [securityGroups] :
  /// [Default VPC] The names of the security groups.
  ///
  /// If you specify a network interface, you must specify any security groups
  /// as part of the network interface instead of using this parameter.
  ///
  /// Default: Amazon EC2 uses the default security group.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet to launch the instance into.
  ///
  /// If you specify a network interface, you must specify any subnets as part
  /// of the network interface instead of using this parameter.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the resources that are created during instance
  /// launch.
  ///
  /// You can specify tags for the following resources only:
  ///
  /// <ul>
  /// <li>
  /// Instances
  /// </li>
  /// <li>
  /// Volumes
  /// </li>
  /// <li>
  /// Spot Instance requests
  /// </li>
  /// <li>
  /// Network interfaces
  /// </li>
  /// </ul>
  /// To tag a resource after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  ///
  /// Parameter [userData] :
  /// The user data script to make available to the instance. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run
  /// commands on your Linux instance at launch</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run
  /// commands on your Windows instance at launch</a>. If you are using a
  /// command line tool, base64-encoding is performed for you, and you can load
  /// the text from a file. Otherwise, you must provide base64-encoded text.
  /// User data is limited to 16 KB.
  Future<Reservation> runInstances({
    required int maxCount,
    required int minCount,
    String? additionalInfo,
    List<BlockDeviceMapping>? blockDeviceMappings,
    CapacityReservationSpecification? capacityReservationSpecification,
    String? clientToken,
    CpuOptionsRequest? cpuOptions,
    CreditSpecificationRequest? creditSpecification,
    bool? disableApiStop,
    bool? disableApiTermination,
    bool? dryRun,
    bool? ebsOptimized,
    List<ElasticGpuSpecification>? elasticGpuSpecification,
    List<ElasticInferenceAccelerator>? elasticInferenceAccelerators,
    bool? enablePrimaryIpv6,
    EnclaveOptionsRequest? enclaveOptions,
    HibernationOptionsRequest? hibernationOptions,
    IamInstanceProfileSpecification? iamInstanceProfile,
    String? imageId,
    ShutdownBehavior? instanceInitiatedShutdownBehavior,
    InstanceMarketOptionsRequest? instanceMarketOptions,
    InstanceType? instanceType,
    int? ipv6AddressCount,
    List<InstanceIpv6Address>? ipv6Addresses,
    String? kernelId,
    String? keyName,
    LaunchTemplateSpecification? launchTemplate,
    List<LicenseConfigurationRequest>? licenseSpecifications,
    InstanceMaintenanceOptionsRequest? maintenanceOptions,
    InstanceMetadataOptionsRequest? metadataOptions,
    RunInstancesMonitoringEnabled? monitoring,
    List<InstanceNetworkInterfaceSpecification>? networkInterfaces,
    Placement? placement,
    PrivateDnsNameOptionsRequest? privateDnsNameOptions,
    String? privateIpAddress,
    String? ramdiskId,
    List<String>? securityGroupIds,
    List<String>? securityGroups,
    String? subnetId,
    List<TagSpecification>? tagSpecifications,
    String? userData,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Launches the specified Scheduled Instances.
  ///
  /// Before you can launch a Scheduled Instance, you must purchase it and
  /// obtain an identifier using <a>PurchaseScheduledInstances</a>.
  ///
  /// You must launch a Scheduled Instance during its scheduled time period. You
  /// can't stop or reboot a Scheduled Instance, but you can terminate it as
  /// needed. If you terminate a Scheduled Instance before the current scheduled
  /// time period ends, you can launch it again after a few minutes. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled
  /// Instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [launchSpecification] :
  /// The launch specification. You must match the instance type, Availability
  /// Zone, network, and platform of the schedule that you purchased.
  ///
  /// Parameter [scheduledInstanceId] :
  /// The Scheduled Instance ID.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that ensures the idempotency of the
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances.
  ///
  /// Default: 1
  Future<RunScheduledInstancesResult> runScheduledInstances({
    required ScheduledInstancesLaunchSpecification launchSpecification,
    required String scheduledInstanceId,
    String? clientToken,
    bool? dryRun,
    int? instanceCount,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Searches for routes in the specified local gateway route table.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>prefix-list-id</code> - The ID of the prefix list.
  /// </li>
  /// <li>
  /// <code>route-search.exact-match</code> - The exact match of the specified
  /// filter.
  /// </li>
  /// <li>
  /// <code>route-search.longest-prefix-match</code> - The longest prefix that
  /// matches the route.
  /// </li>
  /// <li>
  /// <code>route-search.subnet-of-match</code> - The routes with a subnet that
  /// match the specified CIDR filter.
  /// </li>
  /// <li>
  /// <code>route-search.supernet-of-match</code> - The routes with a CIDR that
  /// encompass the CIDR filter. For example, if you have 10.0.1.0/29 and
  /// 10.0.1.0/31 routes in your route table and you specify
  /// <code>supernet-of-match</code> as 10.0.1.0/30, then the result returns
  /// 10.0.1.0/29.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the route.
  /// </li>
  /// <li>
  /// <code>type</code> - The route type.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<SearchLocalGatewayRoutesResult> searchLocalGatewayRoutes({
    required String localGatewayRouteTableId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Searches one or more transit gateway multicast groups and returns the
  /// group membership information.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>group-ip-address</code> - The IP address of the transit gateway
  /// multicast group.
  /// </li>
  /// <li>
  /// <code>is-group-member</code> - The resource is a group member. Valid
  /// values are <code>true</code> | <code>false</code>.
  /// </li>
  /// <li>
  /// <code>is-group-source</code> - The resource is a group source. Valid
  /// values are <code>true</code> | <code>false</code>.
  /// </li>
  /// <li>
  /// <code>member-type</code> - The member type. Valid values are
  /// <code>igmp</code> | <code>static</code>.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The type of resource. Valid values are
  /// <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code>
  /// | <code>tgw-peering</code>.
  /// </li>
  /// <li>
  /// <code>source-type</code> - The source type. Valid values are
  /// <code>igmp</code> | <code>static</code>.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The id of the transit gateway
  /// attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<SearchTransitGatewayMulticastGroupsResult>
      searchTransitGatewayMulticastGroups({
    required String transitGatewayMulticastDomainId,
    bool? dryRun,
    List<Filter>? filters,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Searches for routes in the specified transit gateway route table.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.transit-gateway-attachment-id</code>- The id of the
  /// transit gateway attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-id</code> - The resource id of the transit
  /// gateway attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-type</code> - The attachment resource type.
  /// Valid values are <code>vpc</code> | <code>vpn</code> |
  /// <code>direct-connect-gateway</code> | <code>peering</code> |
  /// <code>connect</code>.
  /// </li>
  /// <li>
  /// <code>prefix-list-id</code> - The ID of the prefix list.
  /// </li>
  /// <li>
  /// <code>route-search.exact-match</code> - The exact match of the specified
  /// filter.
  /// </li>
  /// <li>
  /// <code>route-search.longest-prefix-match</code> - The longest prefix that
  /// matches the route.
  /// </li>
  /// <li>
  /// <code>route-search.subnet-of-match</code> - The routes with a subnet that
  /// match the specified CIDR filter.
  /// </li>
  /// <li>
  /// <code>route-search.supernet-of-match</code> - The routes with a CIDR that
  /// encompass the CIDR filter. For example, if you have 10.0.1.0/29 and
  /// 10.0.1.0/31 routes in your route table and you specify supernet-of-match
  /// as 10.0.1.0/30, then the result returns 10.0.1.0/29.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the route (<code>active</code> |
  /// <code>blackhole</code>).
  /// </li>
  /// <li>
  /// <code>type</code> - The type of route (<code>propagated</code> |
  /// <code>static</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of routes to return. If a value is not provided, the
  /// default is 1000.
  Future<SearchTransitGatewayRoutesResult> searchTransitGatewayRoutes({
    required List<Filter> filters,
    required String transitGatewayRouteTableId,
    bool? dryRun,
    int? maxResults,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Sends a diagnostic interrupt to the specified Amazon EC2 instance to
  /// trigger a <i>kernel panic</i> (on Linux instances), or a <i>blue
  /// screen</i>/<i>stop error</i> (on Windows instances). For instances based
  /// on Intel and AMD processors, the interrupt is received as a
  /// <i>non-maskable interrupt</i> (NMI).
  ///
  /// In general, the operating system crashes and reboots when a kernel panic
  /// or stop error is triggered. The operating system can also be configured to
  /// perform diagnostic tasks, such as generating a memory dump file, loading a
  /// secondary kernel, or obtaining a call trace.
  ///
  /// Before sending a diagnostic interrupt to your instance, ensure that its
  /// operating system is configured to perform the required diagnostic tasks.
  ///
  /// For more information about configuring your operating system to generate a
  /// crash dump when a kernel panic or stop error occurs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send
  /// a diagnostic interrupt (for advanced users)</a> (Linux instances) or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send
  /// a diagnostic interrupt (for advanced users)</a> (Windows instances).
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> sendDiagnosticInterrupt({
    required String instanceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Starts an Amazon EBS-backed instance that you've previously stopped.
  ///
  /// Instances that use Amazon EBS volumes as their root devices can be quickly
  /// stopped and started. When an instance is stopped, the compute resources
  /// are released and you are not billed for instance usage. However, your root
  /// partition Amazon EBS volume remains and continues to persist your data,
  /// and you are charged for Amazon EBS volume usage. You can restart your
  /// instance at any time. Every time you start your instance, Amazon EC2
  /// charges a one-minute minimum for instance usage, and thereafter charges
  /// per second for instance usage.
  ///
  /// Before stopping an instance, make sure it is in a state from which it can
  /// be restarted. Stopping an instance does not preserve data stored in RAM.
  ///
  /// Performing this operation on an instance that uses an instance store as
  /// its root device returns an error.
  ///
  /// If you attempt to start a T3 instance with <code>host</code> tenancy and
  /// the <code>unlimited</code> CPU credit option, the request fails. The
  /// <code>unlimited</code> CPU credit option is not supported on Dedicated
  /// Hosts. Before you start the instance, either change its CPU credit option
  /// to <code>standard</code>, or change its tenancy to <code>default</code> or
  /// <code>dedicated</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop
  /// and start your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [additionalInfo] :
  /// Reserved.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<StartInstancesResult> startInstances({
    required List<String> instanceIds,
    String? additionalInfo,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Starts analyzing the specified Network Access Scope.
  ///
  /// Parameter [networkInsightsAccessScopeId] :
  /// The ID of the Network Access Scope.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply.
  Future<StartNetworkInsightsAccessScopeAnalysisResult>
      startNetworkInsightsAccessScopeAnalysis({
    required String networkInsightsAccessScopeId,
    String? clientToken,
    bool? dryRun,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Starts analyzing the specified path. If the path is reachable, the
  /// operation returns the shortest feasible path.
  ///
  /// Parameter [networkInsightsPathId] :
  /// The ID of the path.
  ///
  /// Parameter [additionalAccounts] :
  /// The member accounts that contain resources that the path can traverse.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filterInArns] :
  /// The Amazon Resource Names (ARN) of the resources that the path must
  /// traverse.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply.
  Future<StartNetworkInsightsAnalysisResult> startNetworkInsightsAnalysis({
    required String networkInsightsPathId,
    List<String>? additionalAccounts,
    String? clientToken,
    bool? dryRun,
    List<String>? filterInArns,
    List<TagSpecification>? tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Initiates the verification process to prove that the service provider owns
  /// the private DNS name domain for the endpoint service.
  ///
  /// The service provider must successfully perform the verification before the
  /// consumer can use the name to access the service.
  ///
  /// Before the service provider runs this command, they must add a record to
  /// the DNS server.
  ///
  /// Parameter [serviceId] :
  /// The ID of the endpoint service.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<StartVpcEndpointServicePrivateDnsVerificationResult>
      startVpcEndpointServicePrivateDnsVerification({
    required String serviceId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Stops an Amazon EBS-backed instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop
  /// and start your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// You can use the Stop action to hibernate an instance if the instance is <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enabling-hibernation.html">enabled
  /// for hibernation</a> and it meets the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
  /// prerequisites</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// We don't charge usage for a stopped instance, or data transfer fees;
  /// however, your root partition Amazon EBS volume remains and continues to
  /// persist your data, and you are charged for Amazon EBS volume usage. Every
  /// time you start your instance, Amazon EC2 charges a one-minute minimum for
  /// instance usage, and thereafter charges per second for instance usage.
  ///
  /// You can't stop or hibernate instance store-backed instances. You can't use
  /// the Stop action to hibernate Spot Instances, but you can specify that
  /// Amazon EC2 should hibernate Spot Instances when they are interrupted. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating
  /// interrupted Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// When you stop or hibernate an instance, we shut it down. You can restart
  /// your instance at any time. Before stopping or hibernating an instance,
  /// make sure it is in a state from which it can be restarted. Stopping an
  /// instance does not preserve data stored in RAM, but hibernating an instance
  /// does preserve data stored in RAM. If an instance cannot hibernate
  /// successfully, a normal shutdown occurs.
  ///
  /// Stopping and hibernating an instance is different to rebooting or
  /// terminating it. For example, when you stop or hibernate an instance, the
  /// root device and any other devices attached to the instance persist. When
  /// you terminate an instance, the root device and any other devices attached
  /// during the instance launch are automatically deleted. For more information
  /// about the differences between rebooting, stopping, hibernating, and
  /// terminating instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
  /// lifecycle</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// When you stop an instance, we attempt to shut it down forcibly after a
  /// short while. If your instance appears stuck in the stopping state after a
  /// period of time, there may be an issue with the underlying host computer.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshoot
  /// stopping your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Forces the instances to stop. The instances do not have an opportunity to
  /// flush file system caches or file system metadata. If you use this option,
  /// you must perform file system check and repair procedures. This option is
  /// not recommended for Windows instances.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [hibernate] :
  /// Hibernates the instance if the instance was enabled for hibernation at
  /// launch. If the instance cannot hibernate successfully, a normal shutdown
  /// occurs. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Default: <code>false</code>
  Future<StopInstancesResult> stopInstances({
    required List<String> instanceIds,
    bool? dryRun,
    bool? force,
    bool? hibernate,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Terminates active Client VPN endpoint connections. This action can be used
  /// to terminate a specific client connection, or up to five connections
  /// established by a specific user.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to which the client is connected.
  ///
  /// Parameter [connectionId] :
  /// The ID of the client connection to be terminated.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [username] :
  /// The name of the user who initiated the connection. Use this option to
  /// terminate all active connections for the specified user. This option can
  /// only be used if the user has established up to five connections.
  Future<TerminateClientVpnConnectionsResult> terminateClientVpnConnections({
    required String clientVpnEndpointId,
    String? connectionId,
    bool? dryRun,
    String? username,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Shuts down the specified instances. This operation is idempotent; if you
  /// terminate an instance more than once, each call succeeds.
  ///
  /// If you specify multiple instances and the request fails (for example,
  /// because of a single incorrect instance ID), none of the instances are
  /// terminated.
  ///
  /// If you terminate multiple instances across multiple Availability Zones,
  /// and one or more of the specified instances are enabled for termination
  /// protection, the request fails with the following results:
  ///
  /// <ul>
  /// <li>
  /// The specified instances that are in the same Availability Zone as the
  /// protected instance are not terminated.
  /// </li>
  /// <li>
  /// The specified instances that are in different Availability Zones, where no
  /// other specified instances are protected, are successfully terminated.
  /// </li>
  /// </ul>
  /// For example, say you have the following instances:
  ///
  /// <ul>
  /// <li>
  /// Instance A: <code>us-east-1a</code>; Not protected
  /// </li>
  /// <li>
  /// Instance B: <code>us-east-1a</code>; Not protected
  /// </li>
  /// <li>
  /// Instance C: <code>us-east-1b</code>; Protected
  /// </li>
  /// <li>
  /// Instance D: <code>us-east-1b</code>; not protected
  /// </li>
  /// </ul>
  /// If you attempt to terminate all of these instances in the same request,
  /// the request reports failure with the following results:
  ///
  /// <ul>
  /// <li>
  /// Instance A and Instance B are successfully terminated because none of the
  /// specified instances in <code>us-east-1a</code> are enabled for termination
  /// protection.
  /// </li>
  /// <li>
  /// Instance C and Instance D fail to terminate because at least one of the
  /// specified instances in <code>us-east-1b</code> (Instance C) is enabled for
  /// termination protection.
  /// </li>
  /// </ul>
  /// Terminated instances remain visible after termination (for approximately
  /// one hour).
  ///
  /// By default, Amazon EC2 deletes all EBS volumes that were attached when the
  /// instance launched. Volumes attached after instance launch continue
  /// running.
  ///
  /// You can stop, start, and terminate EBS-backed instances. You can only
  /// terminate instance store-backed instances. What happens to an instance
  /// differs if you stop it or terminate it. For example, when you stop an
  /// instance, the root device and any other devices attached to the instance
  /// persist. When you terminate an instance, any attached EBS volumes with the
  /// <code>DeleteOnTermination</code> block device mapping parameter set to
  /// <code>true</code> are automatically deleted. For more information about
  /// the differences between stopping and terminating instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
  /// lifecycle</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// For more information about troubleshooting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting
  /// terminating your instance</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Constraints: Up to 1000 instance IDs. We recommend breaking up this
  /// request into smaller batches.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<TerminateInstancesResult> terminateInstances({
    required List<String> instanceIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from
  /// a network interface.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [ipv6Addresses] :
  /// The IPv6 addresses to unassign from the network interface.
  ///
  /// Parameter [ipv6Prefixes] :
  /// The IPv6 prefixes to unassign from the network interface.
  Future<UnassignIpv6AddressesResult> unassignIpv6Addresses({
    required String networkInterfaceId,
    List<String>? ipv6Addresses,
    List<String>? ipv6Prefixes,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unassigns one or more secondary private IP addresses, or IPv4 Prefix
  /// Delegation prefixes from a network interface.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [ipv4Prefixes] :
  /// The IPv4 prefixes to unassign from the network interface.
  ///
  /// Parameter [privateIpAddresses] :
  /// The secondary private IP addresses to unassign from the network interface.
  /// You can specify this option multiple times to unassign more than one IP
  /// address.
  Future<void> unassignPrivateIpAddresses({
    required String networkInterfaceId,
    List<String>? ipv4Prefixes,
    List<String>? privateIpAddresses,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unassigns secondary private IPv4 addresses from a private NAT gateway. You
  /// cannot unassign your primary private IP. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-edit-secondary">Edit
  /// secondary IP address associations</a> in the <i>Amazon VPC User Guide</i>.
  ///
  /// While unassigning is in progress, you cannot assign/unassign additional IP
  /// addresses while the connections are being drained. You are, however,
  /// allowed to delete the NAT gateway.
  ///
  /// A private IP address will only be released at the end of
  /// MaxDrainDurationSeconds. The private IP addresses stay associated and
  /// support the existing connections, but do not support any new connections
  /// (new connections are distributed across the remaining assigned private IP
  /// address). After the existing connections drain out, the private IP
  /// addresses are released.
  /// <p/> <p/>
  ///
  /// Parameter [natGatewayId] :
  /// The ID of the NAT gateway.
  ///
  /// Parameter [privateIpAddresses] :
  /// The private IPv4 addresses you want to unassign.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxDrainDurationSeconds] :
  /// The maximum amount of time to wait (in seconds) before forcibly releasing
  /// the IP addresses if connections are still in progress. Default value is
  /// 350 seconds.
  Future<UnassignPrivateNatGatewayAddressResult>
      unassignPrivateNatGatewayAddress({
    required String natGatewayId,
    required List<String> privateIpAddresses,
    bool? dryRun,
    int? maxDrainDurationSeconds,
  }) async {
    _s.validateNumRange(
      'maxDrainDurationSeconds',
      maxDrainDurationSeconds,
      1,
      4000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unlocks a snapshot that is locked in governance mode or that is locked in
  /// compliance mode but still in the cooling-off period. You can't unlock a
  /// snapshot that is locked in compliance mode after the cooling-off period
  /// has expired.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot to unlock.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<UnlockSnapshotResult> unlockSnapshot({
    required String snapshotId,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables detailed monitoring for a running instance. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring
  /// your instances and volumes</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<UnmonitorInstancesResult> unmonitorInstances({
    required List<String> instanceIds,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Updates the description of an egress (outbound) security group rule. You
  /// can replace an existing description, or add a description to a rule that
  /// did not have one previously. You can remove a description for a security
  /// group rule by omitting the description parameter in the request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. You must specify either the security group
  /// ID or the security group name in the request. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [groupName] :
  /// [Default VPC] The name of the security group. You must specify either the
  /// security group ID or the security group name.
  ///
  /// Parameter [ipPermissions] :
  /// The IP permissions for the security group rule. You must specify either
  /// the IP permissions or the description.
  ///
  /// Parameter [securityGroupRuleDescriptions] :
  /// The description for the egress security group rules. You must specify
  /// either the description or the IP permissions.
  Future<UpdateSecurityGroupRuleDescriptionsEgressResult>
      updateSecurityGroupRuleDescriptionsEgress({
    bool? dryRun,
    String? groupId,
    String? groupName,
    List<IpPermission>? ipPermissions,
    List<SecurityGroupRuleDescription>? securityGroupRuleDescriptions,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Updates the description of an ingress (inbound) security group rule. You
  /// can replace an existing description, or add a description to a rule that
  /// did not have one previously. You can remove a description for a security
  /// group rule by omitting the description parameter in the request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. You must specify either the security group
  /// ID or the security group name in the request. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [groupName] :
  /// [Default VPC] The name of the security group. You must specify either the
  /// security group ID or the security group name. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [ipPermissions] :
  /// The IP permissions for the security group rule. You must specify either IP
  /// permissions or a description.
  ///
  /// Parameter [securityGroupRuleDescriptions] :
  /// The description for the ingress security group rules. You must specify
  /// either a description or IP permissions.
  Future<UpdateSecurityGroupRuleDescriptionsIngressResult>
      updateSecurityGroupRuleDescriptionsIngress({
    bool? dryRun,
    String? groupId,
    String? groupName,
    List<IpPermission>? ipPermissions,
    List<SecurityGroupRuleDescription>? securityGroupRuleDescriptions,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Stops advertising an address range that is provisioned as an address pool.
  ///
  /// You can perform this operation at most once every 10 seconds, even if you
  /// specify different address ranges each time.
  ///
  /// It can take a few minutes before traffic to the specified addresses stops
  /// routing to Amazon Web Services because of BGP propagation delays.
  ///
  /// Parameter [cidr] :
  /// The address range, in CIDR notation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<WithdrawByoipCidrResult> withdrawByoipCidr({
    required String cidr,
    bool? dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }
}

/// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web
/// Services Inferentia chips) on an instance.
class AcceleratorCount {
  /// The maximum number of accelerators. If this parameter is not specified,
  /// there is no maximum limit.
  final int? max;

  /// The minimum number of accelerators. If this parameter is not specified,
  /// there is no minimum limit.
  final int? min;

  AcceleratorCount({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web
/// Services Inferentia chips) on an instance. To exclude accelerator-enabled
/// instance types, set <code>Max</code> to <code>0</code>.
class AcceleratorCountRequest {
  /// The maximum number of accelerators. To specify no maximum limit, omit this
  /// parameter. To exclude accelerator-enabled instance types, set
  /// <code>Max</code> to <code>0</code>.
  final int? max;

  /// The minimum number of accelerators. To specify no minimum limit, omit this
  /// parameter.
  final int? min;

  AcceleratorCountRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

enum AcceleratorManufacturer {
  amazonWebServices('amazon-web-services'),
  amd('amd'),
  nvidia('nvidia'),
  xilinx('xilinx'),
  habana('habana'),
  ;

  final String value;

  const AcceleratorManufacturer(this.value);

  static AcceleratorManufacturer fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AcceleratorManufacturer'));
}

enum AcceleratorName {
  a100('a100'),
  inferentia('inferentia'),
  k520('k520'),
  k80('k80'),
  m60('m60'),
  radeonProV520('radeon-pro-v520'),
  t4('t4'),
  vu9p('vu9p'),
  v100('v100'),
  a10g('a10g'),
  h100('h100'),
  t4g('t4g'),
  ;

  final String value;

  const AcceleratorName(this.value);

  static AcceleratorName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AcceleratorName'));
}

/// The minimum and maximum amount of total accelerator memory, in MiB.
class AcceleratorTotalMemoryMiB {
  /// The maximum amount of accelerator memory, in MiB. If this parameter is not
  /// specified, there is no maximum limit.
  final int? max;

  /// The minimum amount of accelerator memory, in MiB. If this parameter is not
  /// specified, there is no minimum limit.
  final int? min;

  AcceleratorTotalMemoryMiB({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum amount of total accelerator memory, in MiB.
class AcceleratorTotalMemoryMiBRequest {
  /// The maximum amount of accelerator memory, in MiB. To specify no maximum
  /// limit, omit this parameter.
  final int? max;

  /// The minimum amount of accelerator memory, in MiB. To specify no minimum
  /// limit, omit this parameter.
  final int? min;

  AcceleratorTotalMemoryMiBRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

enum AcceleratorType {
  gpu('gpu'),
  fpga('fpga'),
  inference('inference'),
  ;

  final String value;

  const AcceleratorType(this.value);

  static AcceleratorType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AcceleratorType'));
}

class AcceptAddressTransferResult {
  /// An Elastic IP address transfer.
  final AddressTransfer? addressTransfer;

  AcceptAddressTransferResult({
    this.addressTransfer,
  });

  Map<String, dynamic> toJson() {
    final addressTransfer = this.addressTransfer;
    return {
      if (addressTransfer != null) 'addressTransfer': addressTransfer,
    };
  }
}

/// The result of the exchange and whether it was <code>successful</code>.
class AcceptReservedInstancesExchangeQuoteResult {
  /// The ID of the successful exchange.
  final String? exchangeId;

  AcceptReservedInstancesExchangeQuoteResult({
    this.exchangeId,
  });

  Map<String, dynamic> toJson() {
    final exchangeId = this.exchangeId;
    return {
      if (exchangeId != null) 'exchangeId': exchangeId,
    };
  }
}

class AcceptTransitGatewayMulticastDomainAssociationsResult {
  /// Information about the multicast domain associations.
  final TransitGatewayMulticastDomainAssociations? associations;

  AcceptTransitGatewayMulticastDomainAssociationsResult({
    this.associations,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    return {
      if (associations != null) 'associations': associations,
    };
  }
}

class AcceptTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment? transitGatewayPeeringAttachment;

  AcceptTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPeeringAttachment =
        this.transitGatewayPeeringAttachment;
    return {
      if (transitGatewayPeeringAttachment != null)
        'transitGatewayPeeringAttachment': transitGatewayPeeringAttachment,
    };
  }
}

class AcceptTransitGatewayVpcAttachmentResult {
  /// The VPC attachment.
  final TransitGatewayVpcAttachment? transitGatewayVpcAttachment;

  AcceptTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayVpcAttachment = this.transitGatewayVpcAttachment;
    return {
      if (transitGatewayVpcAttachment != null)
        'transitGatewayVpcAttachment': transitGatewayVpcAttachment,
    };
  }
}

class AcceptVpcEndpointConnectionsResult {
  /// Information about the interface endpoints that were not accepted, if
  /// applicable.
  final List<UnsuccessfulItem>? unsuccessful;

  AcceptVpcEndpointConnectionsResult({
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final unsuccessful = this.unsuccessful;
    return {
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class AcceptVpcPeeringConnectionResult {
  /// Information about the VPC peering connection.
  final VpcPeeringConnection? vpcPeeringConnection;

  AcceptVpcPeeringConnectionResult({
    this.vpcPeeringConnection,
  });

  Map<String, dynamic> toJson() {
    final vpcPeeringConnection = this.vpcPeeringConnection;
    return {
      if (vpcPeeringConnection != null)
        'vpcPeeringConnection': vpcPeeringConnection,
    };
  }
}

/// Describes a finding for a Network Access Scope.
class AccessScopeAnalysisFinding {
  /// The finding components.
  final List<PathComponent>? findingComponents;

  /// The ID of the finding.
  final String? findingId;

  /// The ID of the Network Access Scope analysis.
  final String? networkInsightsAccessScopeAnalysisId;

  /// The ID of the Network Access Scope.
  final String? networkInsightsAccessScopeId;

  AccessScopeAnalysisFinding({
    this.findingComponents,
    this.findingId,
    this.networkInsightsAccessScopeAnalysisId,
    this.networkInsightsAccessScopeId,
  });

  Map<String, dynamic> toJson() {
    final findingComponents = this.findingComponents;
    final findingId = this.findingId;
    final networkInsightsAccessScopeAnalysisId =
        this.networkInsightsAccessScopeAnalysisId;
    final networkInsightsAccessScopeId = this.networkInsightsAccessScopeId;
    return {
      if (findingComponents != null) 'findingComponentSet': findingComponents,
      if (findingId != null) 'findingId': findingId,
      if (networkInsightsAccessScopeAnalysisId != null)
        'networkInsightsAccessScopeAnalysisId':
            networkInsightsAccessScopeAnalysisId,
      if (networkInsightsAccessScopeId != null)
        'networkInsightsAccessScopeId': networkInsightsAccessScopeId,
    };
  }
}

/// Describes a path.
class AccessScopePath {
  /// The destination.
  final PathStatement? destination;

  /// The source.
  final PathStatement? source;

  /// The through resources.
  final List<ThroughResourcesStatement>? throughResources;

  AccessScopePath({
    this.destination,
    this.source,
    this.throughResources,
  });

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final source = this.source;
    final throughResources = this.throughResources;
    return {
      if (destination != null) 'destination': destination,
      if (source != null) 'source': source,
      if (throughResources != null) 'throughResourceSet': throughResources,
    };
  }
}

/// Describes a path.
class AccessScopePathRequest {
  /// The destination.
  final PathStatementRequest? destination;

  /// The source.
  final PathStatementRequest? source;

  /// The through resources.
  final List<ThroughResourcesStatementRequest>? throughResources;

  AccessScopePathRequest({
    this.destination,
    this.source,
    this.throughResources,
  });

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final source = this.source;
    final throughResources = this.throughResources;
    return {
      if (destination != null) 'Destination': destination,
      if (source != null) 'Source': source,
      if (throughResources != null) 'ThroughResource': throughResources,
    };
  }
}

/// Describes an account attribute.
class AccountAttribute {
  /// The name of the account attribute.
  final String? attributeName;

  /// The values for the account attribute.
  final List<AccountAttributeValue>? attributeValues;

  AccountAttribute({
    this.attributeName,
    this.attributeValues,
  });

  Map<String, dynamic> toJson() {
    final attributeName = this.attributeName;
    final attributeValues = this.attributeValues;
    return {
      if (attributeName != null) 'attributeName': attributeName,
      if (attributeValues != null) 'attributeValueSet': attributeValues,
    };
  }
}

enum AccountAttributeName {
  supportedPlatforms('supported-platforms'),
  defaultVpc('default-vpc'),
  ;

  final String value;

  const AccountAttributeName(this.value);

  static AccountAttributeName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AccountAttributeName'));
}

/// Describes a value of an account attribute.
class AccountAttributeValue {
  /// The value of the attribute.
  final String? attributeValue;

  AccountAttributeValue({
    this.attributeValue,
  });

  Map<String, dynamic> toJson() {
    final attributeValue = this.attributeValue;
    return {
      if (attributeValue != null) 'attributeValue': attributeValue,
    };
  }
}

/// Describes a running instance in a Spot Fleet.
class ActiveInstance {
  /// The health status of the instance. If the status of either the instance
  /// status check or the system status check is <code>impaired</code>, the health
  /// status of the instance is <code>unhealthy</code>. Otherwise, the health
  /// status is <code>healthy</code>.
  final InstanceHealthStatus? instanceHealth;

  /// The ID of the instance.
  final String? instanceId;

  /// The instance type.
  final String? instanceType;

  /// The ID of the Spot Instance request.
  final String? spotInstanceRequestId;

  ActiveInstance({
    this.instanceHealth,
    this.instanceId,
    this.instanceType,
    this.spotInstanceRequestId,
  });

  Map<String, dynamic> toJson() {
    final instanceHealth = this.instanceHealth;
    final instanceId = this.instanceId;
    final instanceType = this.instanceType;
    final spotInstanceRequestId = this.spotInstanceRequestId;
    return {
      if (instanceHealth != null) 'instanceHealth': instanceHealth.value,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceType != null) 'instanceType': instanceType,
      if (spotInstanceRequestId != null)
        'spotInstanceRequestId': spotInstanceRequestId,
    };
  }
}

enum ActivityStatus {
  error('error'),
  pendingFulfillment('pending_fulfillment'),
  pendingTermination('pending_termination'),
  fulfilled('fulfilled'),
  ;

  final String value;

  const ActivityStatus(this.value);

  static ActivityStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ActivityStatus'));
}

/// Add an operating Region to an IPAM. Operating Regions are Amazon Web
/// Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM
/// only discovers and monitors resources in the Amazon Web Services Regions you
/// select as operating Regions.
///
/// For more information about operating Regions, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
/// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
class AddIpamOperatingRegion {
  /// The name of the operating Region.
  final String? regionName;

  AddIpamOperatingRegion({
    this.regionName,
  });

  Map<String, dynamic> toJson() {
    final regionName = this.regionName;
    return {
      if (regionName != null) 'RegionName': regionName,
    };
  }
}

/// An entry for a prefix list.
class AddPrefixListEntry {
  /// The CIDR block.
  final String cidr;

  /// A description for the entry.
  ///
  /// Constraints: Up to 255 characters in length.
  final String? description;

  AddPrefixListEntry({
    required this.cidr,
    this.description,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final description = this.description;
    return {
      'Cidr': cidr,
      if (description != null) 'Description': description,
    };
  }
}

/// Describes a principal.
class AddedPrincipal {
  /// The Amazon Resource Name (ARN) of the principal.
  final String? principal;

  /// The type of principal.
  final PrincipalType? principalType;

  /// The ID of the service.
  final String? serviceId;

  /// The ID of the service permission.
  final String? servicePermissionId;

  AddedPrincipal({
    this.principal,
    this.principalType,
    this.serviceId,
    this.servicePermissionId,
  });

  Map<String, dynamic> toJson() {
    final principal = this.principal;
    final principalType = this.principalType;
    final serviceId = this.serviceId;
    final servicePermissionId = this.servicePermissionId;
    return {
      if (principal != null) 'principal': principal,
      if (principalType != null) 'principalType': principalType.value,
      if (serviceId != null) 'serviceId': serviceId,
      if (servicePermissionId != null)
        'servicePermissionId': servicePermissionId,
    };
  }
}

/// Describes an additional detail for a path analysis. For more information,
/// see <a
/// href="https://docs.aws.amazon.com/vpc/latest/reachability/additional-detail-codes.html">Reachability
/// Analyzer additional detail codes</a>.
class AdditionalDetail {
  /// The additional detail code.
  final String? additionalDetailType;

  /// The path component.
  final AnalysisComponent? component;

  /// The load balancers.
  final List<AnalysisComponent>? loadBalancers;

  /// The rule options.
  final List<RuleGroupRuleOptionsPair>? ruleGroupRuleOptionsPairs;

  /// The rule group type.
  final List<RuleGroupTypePair>? ruleGroupTypePairs;

  /// The rule options.
  final List<RuleOption>? ruleOptions;

  /// The name of the VPC endpoint service.
  final String? serviceName;

  /// The VPC endpoint service.
  final AnalysisComponent? vpcEndpointService;

  AdditionalDetail({
    this.additionalDetailType,
    this.component,
    this.loadBalancers,
    this.ruleGroupRuleOptionsPairs,
    this.ruleGroupTypePairs,
    this.ruleOptions,
    this.serviceName,
    this.vpcEndpointService,
  });

  Map<String, dynamic> toJson() {
    final additionalDetailType = this.additionalDetailType;
    final component = this.component;
    final loadBalancers = this.loadBalancers;
    final ruleGroupRuleOptionsPairs = this.ruleGroupRuleOptionsPairs;
    final ruleGroupTypePairs = this.ruleGroupTypePairs;
    final ruleOptions = this.ruleOptions;
    final serviceName = this.serviceName;
    final vpcEndpointService = this.vpcEndpointService;
    return {
      if (additionalDetailType != null)
        'additionalDetailType': additionalDetailType,
      if (component != null) 'component': component,
      if (loadBalancers != null) 'loadBalancerSet': loadBalancers,
      if (ruleGroupRuleOptionsPairs != null)
        'ruleGroupRuleOptionsPairSet': ruleGroupRuleOptionsPairs,
      if (ruleGroupTypePairs != null)
        'ruleGroupTypePairSet': ruleGroupTypePairs,
      if (ruleOptions != null) 'ruleOptionSet': ruleOptions,
      if (serviceName != null) 'serviceName': serviceName,
      if (vpcEndpointService != null) 'vpcEndpointService': vpcEndpointService,
    };
  }
}

/// Describes an Elastic IP address, or a carrier IP address.
class Address {
  /// The ID representing the allocation of the address.
  final String? allocationId;

  /// The ID representing the association of the address with an instance.
  final String? associationId;

  /// The carrier IP address associated. This option is only available for network
  /// interfaces which reside in a subnet in a Wavelength Zone (for example an EC2
  /// instance).
  final String? carrierIp;

  /// The customer-owned IP address.
  final String? customerOwnedIp;

  /// The ID of the customer-owned address pool.
  final String? customerOwnedIpv4Pool;

  /// The network (<code>vpc</code>).
  final DomainType? domain;

  /// The ID of the instance that the address is associated with (if any).
  final String? instanceId;

  /// The name of the unique set of Availability Zones, Local Zones, or Wavelength
  /// Zones from which Amazon Web Services advertises IP addresses.
  final String? networkBorderGroup;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The ID of the Amazon Web Services account that owns the network interface.
  final String? networkInterfaceOwnerId;

  /// The private IP address associated with the Elastic IP address.
  final String? privateIpAddress;

  /// The Elastic IP address.
  final String? publicIp;

  /// The ID of an address pool.
  final String? publicIpv4Pool;

  /// Any tags assigned to the Elastic IP address.
  final List<Tag>? tags;

  Address({
    this.allocationId,
    this.associationId,
    this.carrierIp,
    this.customerOwnedIp,
    this.customerOwnedIpv4Pool,
    this.domain,
    this.instanceId,
    this.networkBorderGroup,
    this.networkInterfaceId,
    this.networkInterfaceOwnerId,
    this.privateIpAddress,
    this.publicIp,
    this.publicIpv4Pool,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final associationId = this.associationId;
    final carrierIp = this.carrierIp;
    final customerOwnedIp = this.customerOwnedIp;
    final customerOwnedIpv4Pool = this.customerOwnedIpv4Pool;
    final domain = this.domain;
    final instanceId = this.instanceId;
    final networkBorderGroup = this.networkBorderGroup;
    final networkInterfaceId = this.networkInterfaceId;
    final networkInterfaceOwnerId = this.networkInterfaceOwnerId;
    final privateIpAddress = this.privateIpAddress;
    final publicIp = this.publicIp;
    final publicIpv4Pool = this.publicIpv4Pool;
    final tags = this.tags;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (associationId != null) 'associationId': associationId,
      if (carrierIp != null) 'carrierIp': carrierIp,
      if (customerOwnedIp != null) 'customerOwnedIp': customerOwnedIp,
      if (customerOwnedIpv4Pool != null)
        'customerOwnedIpv4Pool': customerOwnedIpv4Pool,
      if (domain != null) 'domain': domain.value,
      if (instanceId != null) 'instanceId': instanceId,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (networkInterfaceOwnerId != null)
        'networkInterfaceOwnerId': networkInterfaceOwnerId,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (publicIp != null) 'publicIp': publicIp,
      if (publicIpv4Pool != null) 'publicIpv4Pool': publicIpv4Pool,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// The attributes associated with an Elastic IP address.
class AddressAttribute {
  /// [EC2-VPC] The allocation ID.
  final String? allocationId;

  /// The pointer (PTR) record for the IP address.
  final String? ptrRecord;

  /// The updated PTR record for the IP address.
  final PtrUpdateStatus? ptrRecordUpdate;

  /// The public IP address.
  final String? publicIp;

  AddressAttribute({
    this.allocationId,
    this.ptrRecord,
    this.ptrRecordUpdate,
    this.publicIp,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final ptrRecord = this.ptrRecord;
    final ptrRecordUpdate = this.ptrRecordUpdate;
    final publicIp = this.publicIp;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (ptrRecord != null) 'ptrRecord': ptrRecord,
      if (ptrRecordUpdate != null) 'ptrRecordUpdate': ptrRecordUpdate,
      if (publicIp != null) 'publicIp': publicIp,
    };
  }
}

enum AddressAttributeName {
  domainName('domain-name'),
  ;

  final String value;

  const AddressAttributeName(this.value);

  static AddressAttributeName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AddressAttributeName'));
}

enum AddressFamily {
  ipv4('ipv4'),
  ipv6('ipv6'),
  ;

  final String value;

  const AddressFamily(this.value);

  static AddressFamily fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AddressFamily'));
}

/// Details on the Elastic IP address transfer. For more information, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer
/// Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User
/// Guide</i>.
class AddressTransfer {
  /// The Elastic IP address transfer status.
  final AddressTransferStatus? addressTransferStatus;

  /// The allocation ID of an Elastic IP address.
  final String? allocationId;

  /// The Elastic IP address being transferred.
  final String? publicIp;

  /// The ID of the account that you want to transfer the Elastic IP address to.
  final String? transferAccountId;

  /// The timestamp when the Elastic IP address transfer was accepted.
  final DateTime? transferOfferAcceptedTimestamp;

  /// The timestamp when the Elastic IP address transfer expired. When the source
  /// account starts the transfer, the transfer account has seven hours to
  /// allocate the Elastic IP address to complete the transfer, or the Elastic IP
  /// address will return to its original owner.
  final DateTime? transferOfferExpirationTimestamp;

  AddressTransfer({
    this.addressTransferStatus,
    this.allocationId,
    this.publicIp,
    this.transferAccountId,
    this.transferOfferAcceptedTimestamp,
    this.transferOfferExpirationTimestamp,
  });

  Map<String, dynamic> toJson() {
    final addressTransferStatus = this.addressTransferStatus;
    final allocationId = this.allocationId;
    final publicIp = this.publicIp;
    final transferAccountId = this.transferAccountId;
    final transferOfferAcceptedTimestamp = this.transferOfferAcceptedTimestamp;
    final transferOfferExpirationTimestamp =
        this.transferOfferExpirationTimestamp;
    return {
      if (addressTransferStatus != null)
        'addressTransferStatus': addressTransferStatus.value,
      if (allocationId != null) 'allocationId': allocationId,
      if (publicIp != null) 'publicIp': publicIp,
      if (transferAccountId != null) 'transferAccountId': transferAccountId,
      if (transferOfferAcceptedTimestamp != null)
        'transferOfferAcceptedTimestamp':
            iso8601ToJson(transferOfferAcceptedTimestamp),
      if (transferOfferExpirationTimestamp != null)
        'transferOfferExpirationTimestamp':
            iso8601ToJson(transferOfferExpirationTimestamp),
    };
  }
}

enum AddressTransferStatus {
  pending('pending'),
  disabled('disabled'),
  accepted('accepted'),
  ;

  final String value;

  const AddressTransferStatus(this.value);

  static AddressTransferStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AddressTransferStatus'));
}

class AdvertiseByoipCidrResult {
  /// Information about the address range.
  final ByoipCidr? byoipCidr;

  AdvertiseByoipCidrResult({
    this.byoipCidr,
  });

  Map<String, dynamic> toJson() {
    final byoipCidr = this.byoipCidr;
    return {
      if (byoipCidr != null) 'byoipCidr': byoipCidr,
    };
  }
}

enum Affinity {
  $default('default'),
  host('host'),
  ;

  final String value;

  const Affinity(this.value);

  static Affinity fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Affinity'));
}

class AllocateAddressResult {
  /// The ID that represents the allocation of the Elastic IP address.
  final String? allocationId;

  /// The carrier IP address. This option is only available for network interfaces
  /// that reside in a subnet in a Wavelength Zone.
  final String? carrierIp;

  /// The customer-owned IP address.
  final String? customerOwnedIp;

  /// The ID of the customer-owned address pool.
  final String? customerOwnedIpv4Pool;

  /// The network (<code>vpc</code>).
  final DomainType? domain;

  /// The set of Availability Zones, Local Zones, or Wavelength Zones from which
  /// Amazon Web Services advertises IP addresses.
  final String? networkBorderGroup;

  /// The Elastic IP address.
  final String? publicIp;

  /// The ID of an address pool.
  final String? publicIpv4Pool;

  AllocateAddressResult({
    this.allocationId,
    this.carrierIp,
    this.customerOwnedIp,
    this.customerOwnedIpv4Pool,
    this.domain,
    this.networkBorderGroup,
    this.publicIp,
    this.publicIpv4Pool,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final carrierIp = this.carrierIp;
    final customerOwnedIp = this.customerOwnedIp;
    final customerOwnedIpv4Pool = this.customerOwnedIpv4Pool;
    final domain = this.domain;
    final networkBorderGroup = this.networkBorderGroup;
    final publicIp = this.publicIp;
    final publicIpv4Pool = this.publicIpv4Pool;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (carrierIp != null) 'carrierIp': carrierIp,
      if (customerOwnedIp != null) 'customerOwnedIp': customerOwnedIp,
      if (customerOwnedIpv4Pool != null)
        'customerOwnedIpv4Pool': customerOwnedIpv4Pool,
      if (domain != null) 'domain': domain.value,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
      if (publicIp != null) 'publicIp': publicIp,
      if (publicIpv4Pool != null) 'publicIpv4Pool': publicIpv4Pool,
    };
  }
}

/// Contains the output of AllocateHosts.
class AllocateHostsResult {
  /// The ID of the allocated Dedicated Host. This is used to launch an instance
  /// onto a specific host.
  final List<String>? hostIds;

  AllocateHostsResult({
    this.hostIds,
  });

  Map<String, dynamic> toJson() {
    final hostIds = this.hostIds;
    return {
      if (hostIds != null) 'hostIdSet': hostIds,
    };
  }
}

class AllocateIpamPoolCidrResult {
  /// Information about the allocation created.
  final IpamPoolAllocation? ipamPoolAllocation;

  AllocateIpamPoolCidrResult({
    this.ipamPoolAllocation,
  });

  Map<String, dynamic> toJson() {
    final ipamPoolAllocation = this.ipamPoolAllocation;
    return {
      if (ipamPoolAllocation != null) 'ipamPoolAllocation': ipamPoolAllocation,
    };
  }
}

enum AllocationState {
  available('available'),
  underAssessment('under-assessment'),
  permanentFailure('permanent-failure'),
  released('released'),
  releasedPermanentFailure('released-permanent-failure'),
  pending('pending'),
  ;

  final String value;

  const AllocationState(this.value);

  static AllocationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AllocationState'));
}

enum AllocationStrategy {
  lowestPrice('lowestPrice'),
  diversified('diversified'),
  capacityOptimized('capacityOptimized'),
  capacityOptimizedPrioritized('capacityOptimizedPrioritized'),
  priceCapacityOptimized('priceCapacityOptimized'),
  ;

  final String value;

  const AllocationStrategy(this.value);

  static AllocationStrategy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AllocationStrategy'));
}

enum AllocationType {
  used('used'),
  ;

  final String value;

  const AllocationType(this.value);

  static AllocationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AllocationType'));
}

/// Describes a principal.
class AllowedPrincipal {
  /// The Amazon Resource Name (ARN) of the principal.
  final String? principal;

  /// The type of principal.
  final PrincipalType? principalType;

  /// The ID of the service.
  final String? serviceId;

  /// The ID of the service permission.
  final String? servicePermissionId;

  /// The tags.
  final List<Tag>? tags;

  AllowedPrincipal({
    this.principal,
    this.principalType,
    this.serviceId,
    this.servicePermissionId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final principal = this.principal;
    final principalType = this.principalType;
    final serviceId = this.serviceId;
    final servicePermissionId = this.servicePermissionId;
    final tags = this.tags;
    return {
      if (principal != null) 'principal': principal,
      if (principalType != null) 'principalType': principalType.value,
      if (serviceId != null) 'serviceId': serviceId,
      if (servicePermissionId != null)
        'servicePermissionId': servicePermissionId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum AllowsMultipleInstanceTypes {
  on('on'),
  off('off'),
  ;

  final String value;

  const AllowsMultipleInstanceTypes(this.value);

  static AllowsMultipleInstanceTypes fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AllowsMultipleInstanceTypes'));
}

/// Describes an potential intermediate component of a feasible path.
class AlternatePathHint {
  /// The Amazon Resource Name (ARN) of the component.
  final String? componentArn;

  /// The ID of the component.
  final String? componentId;

  AlternatePathHint({
    this.componentArn,
    this.componentId,
  });

  Map<String, dynamic> toJson() {
    final componentArn = this.componentArn;
    final componentId = this.componentId;
    return {
      if (componentArn != null) 'componentArn': componentArn,
      if (componentId != null) 'componentId': componentId,
    };
  }
}

enum AmdSevSnpSpecification {
  enabled('enabled'),
  disabled('disabled'),
  ;

  final String value;

  const AmdSevSnpSpecification(this.value);

  static AmdSevSnpSpecification fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AmdSevSnpSpecification'));
}

/// Describes a network access control (ACL) rule.
class AnalysisAclRule {
  /// The IPv4 address range, in CIDR notation.
  final String? cidr;

  /// Indicates whether the rule is an outbound rule.
  final bool? egress;

  /// The range of ports.
  final PortRange? portRange;

  /// The protocol.
  final String? protocol;

  /// Indicates whether to allow or deny traffic that matches the rule.
  final String? ruleAction;

  /// The rule number.
  final int? ruleNumber;

  AnalysisAclRule({
    this.cidr,
    this.egress,
    this.portRange,
    this.protocol,
    this.ruleAction,
    this.ruleNumber,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final egress = this.egress;
    final portRange = this.portRange;
    final protocol = this.protocol;
    final ruleAction = this.ruleAction;
    final ruleNumber = this.ruleNumber;
    return {
      if (cidr != null) 'cidr': cidr,
      if (egress != null) 'egress': egress,
      if (portRange != null) 'portRange': portRange,
      if (protocol != null) 'protocol': protocol,
      if (ruleAction != null) 'ruleAction': ruleAction,
      if (ruleNumber != null) 'ruleNumber': ruleNumber,
    };
  }
}

/// Describes a path component.
class AnalysisComponent {
  /// The Amazon Resource Name (ARN) of the component.
  final String? arn;

  /// The ID of the component.
  final String? id;

  /// The name of the analysis component.
  final String? name;

  AnalysisComponent({
    this.arn,
    this.id,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final id = this.id;
    final name = this.name;
    return {
      if (arn != null) 'arn': arn,
      if (id != null) 'id': id,
      if (name != null) 'name': name,
    };
  }
}

/// Describes a load balancer listener.
class AnalysisLoadBalancerListener {
  /// [Classic Load Balancers] The back-end port for the listener.
  final int? instancePort;

  /// The port on which the load balancer is listening.
  final int? loadBalancerPort;

  AnalysisLoadBalancerListener({
    this.instancePort,
    this.loadBalancerPort,
  });

  Map<String, dynamic> toJson() {
    final instancePort = this.instancePort;
    final loadBalancerPort = this.loadBalancerPort;
    return {
      if (instancePort != null) 'instancePort': instancePort,
      if (loadBalancerPort != null) 'loadBalancerPort': loadBalancerPort,
    };
  }
}

/// Describes a load balancer target.
class AnalysisLoadBalancerTarget {
  /// The IP address.
  final String? address;

  /// The Availability Zone.
  final String? availabilityZone;

  /// Information about the instance.
  final AnalysisComponent? instance;

  /// The port on which the target is listening.
  final int? port;

  AnalysisLoadBalancerTarget({
    this.address,
    this.availabilityZone,
    this.instance,
    this.port,
  });

  Map<String, dynamic> toJson() {
    final address = this.address;
    final availabilityZone = this.availabilityZone;
    final instance = this.instance;
    final port = this.port;
    return {
      if (address != null) 'address': address,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (instance != null) 'instance': instance,
      if (port != null) 'port': port,
    };
  }
}

/// Describes a header. Reflects any changes made by a component as traffic
/// passes through. The fields of an inbound header are null except for the
/// first component of a path.
class AnalysisPacketHeader {
  /// The destination addresses.
  final List<String>? destinationAddresses;

  /// The destination port ranges.
  final List<PortRange>? destinationPortRanges;

  /// The protocol.
  final String? protocol;

  /// The source addresses.
  final List<String>? sourceAddresses;

  /// The source port ranges.
  final List<PortRange>? sourcePortRanges;

  AnalysisPacketHeader({
    this.destinationAddresses,
    this.destinationPortRanges,
    this.protocol,
    this.sourceAddresses,
    this.sourcePortRanges,
  });

  Map<String, dynamic> toJson() {
    final destinationAddresses = this.destinationAddresses;
    final destinationPortRanges = this.destinationPortRanges;
    final protocol = this.protocol;
    final sourceAddresses = this.sourceAddresses;
    final sourcePortRanges = this.sourcePortRanges;
    return {
      if (destinationAddresses != null)
        'destinationAddressSet': destinationAddresses,
      if (destinationPortRanges != null)
        'destinationPortRangeSet': destinationPortRanges,
      if (protocol != null) 'protocol': protocol,
      if (sourceAddresses != null) 'sourceAddressSet': sourceAddresses,
      if (sourcePortRanges != null) 'sourcePortRangeSet': sourcePortRanges,
    };
  }
}

/// Describes a route table route.
class AnalysisRouteTableRoute {
  /// The ID of a carrier gateway.
  final String? carrierGatewayId;

  /// The Amazon Resource Name (ARN) of a core network.
  final String? coreNetworkArn;

  /// The destination IPv4 address, in CIDR notation.
  final String? destinationCidr;

  /// The prefix of the Amazon Web Service.
  final String? destinationPrefixListId;

  /// The ID of an egress-only internet gateway.
  final String? egressOnlyInternetGatewayId;

  /// The ID of the gateway, such as an internet gateway or virtual private
  /// gateway.
  final String? gatewayId;

  /// The ID of the instance, such as a NAT instance.
  final String? instanceId;

  /// The ID of a local gateway.
  final String? localGatewayId;

  /// The ID of a NAT gateway.
  final String? natGatewayId;

  /// The ID of a network interface.
  final String? networkInterfaceId;

  /// Describes how the route was created. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// CreateRouteTable - The route was automatically created when the route table
  /// was created.
  /// </li>
  /// <li>
  /// CreateRoute - The route was manually added to the route table.
  /// </li>
  /// <li>
  /// EnableVgwRoutePropagation - The route was propagated by route propagation.
  /// </li>
  /// </ul>
  final String? origin;

  /// The state. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// active
  /// </li>
  /// <li>
  /// blackhole
  /// </li>
  /// </ul>
  final String? state;

  /// The ID of a transit gateway.
  final String? transitGatewayId;

  /// The ID of a VPC peering connection.
  final String? vpcPeeringConnectionId;

  AnalysisRouteTableRoute({
    this.carrierGatewayId,
    this.coreNetworkArn,
    this.destinationCidr,
    this.destinationPrefixListId,
    this.egressOnlyInternetGatewayId,
    this.gatewayId,
    this.instanceId,
    this.localGatewayId,
    this.natGatewayId,
    this.networkInterfaceId,
    this.origin,
    this.state,
    this.transitGatewayId,
    this.vpcPeeringConnectionId,
  });

  Map<String, dynamic> toJson() {
    final carrierGatewayId = this.carrierGatewayId;
    final coreNetworkArn = this.coreNetworkArn;
    final destinationCidr = this.destinationCidr;
    final destinationPrefixListId = this.destinationPrefixListId;
    final egressOnlyInternetGatewayId = this.egressOnlyInternetGatewayId;
    final gatewayId = this.gatewayId;
    final instanceId = this.instanceId;
    final localGatewayId = this.localGatewayId;
    final natGatewayId = this.natGatewayId;
    final networkInterfaceId = this.networkInterfaceId;
    final origin = this.origin;
    final state = this.state;
    final transitGatewayId = this.transitGatewayId;
    final vpcPeeringConnectionId = this.vpcPeeringConnectionId;
    return {
      if (carrierGatewayId != null) 'carrierGatewayId': carrierGatewayId,
      if (coreNetworkArn != null) 'coreNetworkArn': coreNetworkArn,
      if (destinationCidr != null) 'destinationCidr': destinationCidr,
      if (destinationPrefixListId != null)
        'destinationPrefixListId': destinationPrefixListId,
      if (egressOnlyInternetGatewayId != null)
        'egressOnlyInternetGatewayId': egressOnlyInternetGatewayId,
      if (gatewayId != null) 'gatewayId': gatewayId,
      if (instanceId != null) 'instanceId': instanceId,
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (origin != null) 'origin': origin,
      if (state != null) 'state': state,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (vpcPeeringConnectionId != null)
        'vpcPeeringConnectionId': vpcPeeringConnectionId,
    };
  }
}

/// Describes a security group rule.
class AnalysisSecurityGroupRule {
  /// The IPv4 address range, in CIDR notation.
  final String? cidr;

  /// The direction. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// egress
  /// </li>
  /// <li>
  /// ingress
  /// </li>
  /// </ul>
  final String? direction;

  /// The port range.
  final PortRange? portRange;

  /// The prefix list ID.
  final String? prefixListId;

  /// The protocol name.
  final String? protocol;

  /// The security group ID.
  final String? securityGroupId;

  AnalysisSecurityGroupRule({
    this.cidr,
    this.direction,
    this.portRange,
    this.prefixListId,
    this.protocol,
    this.securityGroupId,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final direction = this.direction;
    final portRange = this.portRange;
    final prefixListId = this.prefixListId;
    final protocol = this.protocol;
    final securityGroupId = this.securityGroupId;
    return {
      if (cidr != null) 'cidr': cidr,
      if (direction != null) 'direction': direction,
      if (portRange != null) 'portRange': portRange,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (protocol != null) 'protocol': protocol,
      if (securityGroupId != null) 'securityGroupId': securityGroupId,
    };
  }
}

enum AnalysisStatus {
  running('running'),
  succeeded('succeeded'),
  failed('failed'),
  ;

  final String value;

  const AnalysisStatus(this.value);

  static AnalysisStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AnalysisStatus'));
}

enum ApplianceModeSupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const ApplianceModeSupportValue(this.value);

  static ApplianceModeSupportValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ApplianceModeSupportValue'));
}

class ApplySecurityGroupsToClientVpnTargetNetworkResult {
  /// The IDs of the applied security groups.
  final List<String>? securityGroupIds;

  ApplySecurityGroupsToClientVpnTargetNetworkResult({
    this.securityGroupIds,
  });

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    return {
      if (securityGroupIds != null) 'securityGroupIds': securityGroupIds,
    };
  }
}

enum ArchitectureType {
  i386('i386'),
  x86_64('x86_64'),
  arm64('arm64'),
  x86_64Mac('x86_64_mac'),
  arm64Mac('arm64_mac'),
  ;

  final String value;

  const ArchitectureType(this.value);

  static ArchitectureType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ArchitectureType'));
}

enum ArchitectureValues {
  i386('i386'),
  x86_64('x86_64'),
  arm64('arm64'),
  x86_64Mac('x86_64_mac'),
  arm64Mac('arm64_mac'),
  ;

  final String value;

  const ArchitectureValues(this.value);

  static ArchitectureValues fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ArchitectureValues'));
}

/// An Autonomous System Number (ASN) and BYOIP CIDR association.
class AsnAssociation {
  /// The association's ASN.
  final String? asn;

  /// The association's CIDR.
  final String? cidr;

  /// The association's state.
  final AsnAssociationState? state;

  /// The association's status message.
  final String? statusMessage;

  AsnAssociation({
    this.asn,
    this.cidr,
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final asn = this.asn;
    final cidr = this.cidr;
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (asn != null) 'asn': asn,
      if (cidr != null) 'cidr': cidr,
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum AsnAssociationState {
  disassociated('disassociated'),
  failedDisassociation('failed-disassociation'),
  failedAssociation('failed-association'),
  pendingDisassociation('pending-disassociation'),
  pendingAssociation('pending-association'),
  associated('associated'),
  ;

  final String value;

  const AsnAssociationState(this.value);

  static AsnAssociationState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AsnAssociationState'));
}

/// Provides authorization for Amazon to bring an Autonomous System Number (ASN)
/// to a specific Amazon Web Services account using bring your own ASN (BYOASN).
/// For details on the format of the message and signature, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial:
/// Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.
class AsnAuthorizationContext {
  /// The authorization context's message.
  final String message;

  /// The authorization context's signature.
  final String signature;

  AsnAuthorizationContext({
    required this.message,
    required this.signature,
  });

  Map<String, dynamic> toJson() {
    final message = this.message;
    final signature = this.signature;
    return {
      'Message': message,
      'Signature': signature,
    };
  }
}

enum AsnState {
  deprovisioned('deprovisioned'),
  failedDeprovision('failed-deprovision'),
  failedProvision('failed-provision'),
  pendingDeprovision('pending-deprovision'),
  pendingProvision('pending-provision'),
  provisioned('provisioned'),
  ;

  final String value;

  const AsnState(this.value);

  static AsnState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum AsnState'));
}

class AssignIpv6AddressesResult {
  /// The new IPv6 addresses assigned to the network interface. Existing IPv6
  /// addresses that were assigned to the network interface before the request are
  /// not included.
  final List<String>? assignedIpv6Addresses;

  /// The IPv6 prefixes that are assigned to the network interface.
  final List<String>? assignedIpv6Prefixes;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  AssignIpv6AddressesResult({
    this.assignedIpv6Addresses,
    this.assignedIpv6Prefixes,
    this.networkInterfaceId,
  });

  Map<String, dynamic> toJson() {
    final assignedIpv6Addresses = this.assignedIpv6Addresses;
    final assignedIpv6Prefixes = this.assignedIpv6Prefixes;
    final networkInterfaceId = this.networkInterfaceId;
    return {
      if (assignedIpv6Addresses != null)
        'assignedIpv6Addresses': assignedIpv6Addresses,
      if (assignedIpv6Prefixes != null)
        'assignedIpv6PrefixSet': assignedIpv6Prefixes,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
    };
  }
}

class AssignPrivateIpAddressesResult {
  /// The IPv4 prefixes that are assigned to the network interface.
  final List<Ipv4PrefixSpecification>? assignedIpv4Prefixes;

  /// The private IP addresses assigned to the network interface.
  final List<AssignedPrivateIpAddress>? assignedPrivateIpAddresses;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  AssignPrivateIpAddressesResult({
    this.assignedIpv4Prefixes,
    this.assignedPrivateIpAddresses,
    this.networkInterfaceId,
  });

  Map<String, dynamic> toJson() {
    final assignedIpv4Prefixes = this.assignedIpv4Prefixes;
    final assignedPrivateIpAddresses = this.assignedPrivateIpAddresses;
    final networkInterfaceId = this.networkInterfaceId;
    return {
      if (assignedIpv4Prefixes != null)
        'assignedIpv4PrefixSet': assignedIpv4Prefixes,
      if (assignedPrivateIpAddresses != null)
        'assignedPrivateIpAddressesSet': assignedPrivateIpAddresses,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
    };
  }
}

class AssignPrivateNatGatewayAddressResult {
  /// NAT gateway IP addresses.
  final List<NatGatewayAddress>? natGatewayAddresses;

  /// The ID of the NAT gateway.
  final String? natGatewayId;

  AssignPrivateNatGatewayAddressResult({
    this.natGatewayAddresses,
    this.natGatewayId,
  });

  Map<String, dynamic> toJson() {
    final natGatewayAddresses = this.natGatewayAddresses;
    final natGatewayId = this.natGatewayId;
    return {
      if (natGatewayAddresses != null)
        'natGatewayAddressSet': natGatewayAddresses,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
    };
  }
}

/// Describes the private IP addresses assigned to a network interface.
class AssignedPrivateIpAddress {
  /// The private IP address assigned to the network interface.
  final String? privateIpAddress;

  AssignedPrivateIpAddress({
    this.privateIpAddress,
  });

  Map<String, dynamic> toJson() {
    final privateIpAddress = this.privateIpAddress;
    return {
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
    };
  }
}

class AssociateAddressResult {
  /// The ID that represents the association of the Elastic IP address with an
  /// instance.
  final String? associationId;

  AssociateAddressResult({
    this.associationId,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    return {
      if (associationId != null) 'associationId': associationId,
    };
  }
}

class AssociateClientVpnTargetNetworkResult {
  /// The unique ID of the target network association.
  final String? associationId;

  /// The current state of the target network association.
  final AssociationStatus? status;

  AssociateClientVpnTargetNetworkResult({
    this.associationId,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final status = this.status;
    return {
      if (associationId != null) 'associationId': associationId,
      if (status != null) 'status': status,
    };
  }
}

class AssociateEnclaveCertificateIamRoleResult {
  /// The name of the Amazon S3 bucket to which the certificate was uploaded.
  final String? certificateS3BucketName;

  /// The Amazon S3 object key where the certificate, certificate chain, and
  /// encrypted private key bundle are stored. The object key is formatted as
  /// follows: <code>role_arn</code>/<code>certificate_arn</code>.
  final String? certificateS3ObjectKey;

  /// The ID of the KMS key used to encrypt the private key of the certificate.
  final String? encryptionKmsKeyId;

  AssociateEnclaveCertificateIamRoleResult({
    this.certificateS3BucketName,
    this.certificateS3ObjectKey,
    this.encryptionKmsKeyId,
  });

  Map<String, dynamic> toJson() {
    final certificateS3BucketName = this.certificateS3BucketName;
    final certificateS3ObjectKey = this.certificateS3ObjectKey;
    final encryptionKmsKeyId = this.encryptionKmsKeyId;
    return {
      if (certificateS3BucketName != null)
        'certificateS3BucketName': certificateS3BucketName,
      if (certificateS3ObjectKey != null)
        'certificateS3ObjectKey': certificateS3ObjectKey,
      if (encryptionKmsKeyId != null) 'encryptionKmsKeyId': encryptionKmsKeyId,
    };
  }
}

class AssociateIamInstanceProfileResult {
  /// Information about the IAM instance profile association.
  final IamInstanceProfileAssociation? iamInstanceProfileAssociation;

  AssociateIamInstanceProfileResult({
    this.iamInstanceProfileAssociation,
  });

  Map<String, dynamic> toJson() {
    final iamInstanceProfileAssociation = this.iamInstanceProfileAssociation;
    return {
      if (iamInstanceProfileAssociation != null)
        'iamInstanceProfileAssociation': iamInstanceProfileAssociation,
    };
  }
}

class AssociateInstanceEventWindowResult {
  /// Information about the event window.
  final InstanceEventWindow? instanceEventWindow;

  AssociateInstanceEventWindowResult({
    this.instanceEventWindow,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindow = this.instanceEventWindow;
    return {
      if (instanceEventWindow != null)
        'instanceEventWindow': instanceEventWindow,
    };
  }
}

class AssociateIpamByoasnResult {
  /// The ASN and BYOIP CIDR association.
  final AsnAssociation? asnAssociation;

  AssociateIpamByoasnResult({
    this.asnAssociation,
  });

  Map<String, dynamic> toJson() {
    final asnAssociation = this.asnAssociation;
    return {
      if (asnAssociation != null) 'asnAssociation': asnAssociation,
    };
  }
}

class AssociateIpamResourceDiscoveryResult {
  /// A resource discovery association. An associated resource discovery is a
  /// resource discovery that has been associated with an IPAM.
  final IpamResourceDiscoveryAssociation? ipamResourceDiscoveryAssociation;

  AssociateIpamResourceDiscoveryResult({
    this.ipamResourceDiscoveryAssociation,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscoveryAssociation =
        this.ipamResourceDiscoveryAssociation;
    return {
      if (ipamResourceDiscoveryAssociation != null)
        'ipamResourceDiscoveryAssociation': ipamResourceDiscoveryAssociation,
    };
  }
}

class AssociateNatGatewayAddressResult {
  /// The IP addresses.
  final List<NatGatewayAddress>? natGatewayAddresses;

  /// The ID of the NAT gateway.
  final String? natGatewayId;

  AssociateNatGatewayAddressResult({
    this.natGatewayAddresses,
    this.natGatewayId,
  });

  Map<String, dynamic> toJson() {
    final natGatewayAddresses = this.natGatewayAddresses;
    final natGatewayId = this.natGatewayId;
    return {
      if (natGatewayAddresses != null)
        'natGatewayAddressSet': natGatewayAddresses,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
    };
  }
}

class AssociateRouteTableResult {
  /// The route table association ID. This ID is required for disassociating the
  /// route table.
  final String? associationId;

  /// The state of the association.
  final RouteTableAssociationState? associationState;

  AssociateRouteTableResult({
    this.associationId,
    this.associationState,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final associationState = this.associationState;
    return {
      if (associationId != null) 'associationId': associationId,
      if (associationState != null) 'associationState': associationState,
    };
  }
}

class AssociateSubnetCidrBlockResult {
  /// Information about the IPv6 association.
  final SubnetIpv6CidrBlockAssociation? ipv6CidrBlockAssociation;

  /// The ID of the subnet.
  final String? subnetId;

  AssociateSubnetCidrBlockResult({
    this.ipv6CidrBlockAssociation,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final ipv6CidrBlockAssociation = this.ipv6CidrBlockAssociation;
    final subnetId = this.subnetId;
    return {
      if (ipv6CidrBlockAssociation != null)
        'ipv6CidrBlockAssociation': ipv6CidrBlockAssociation,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

class AssociateTransitGatewayMulticastDomainResult {
  /// Information about the transit gateway multicast domain associations.
  final TransitGatewayMulticastDomainAssociations? associations;

  AssociateTransitGatewayMulticastDomainResult({
    this.associations,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    return {
      if (associations != null) 'associations': associations,
    };
  }
}

class AssociateTransitGatewayPolicyTableResult {
  /// Describes the association of a transit gateway and a transit gateway policy
  /// table.
  final TransitGatewayPolicyTableAssociation? association;

  AssociateTransitGatewayPolicyTableResult({
    this.association,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    return {
      if (association != null) 'association': association,
    };
  }
}

class AssociateTransitGatewayRouteTableResult {
  /// The ID of the association.
  final TransitGatewayAssociation? association;

  AssociateTransitGatewayRouteTableResult({
    this.association,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    return {
      if (association != null) 'association': association,
    };
  }
}

class AssociateTrunkInterfaceResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String? clientToken;

  /// Information about the association between the trunk network interface and
  /// branch network interface.
  final TrunkInterfaceAssociation? interfaceAssociation;

  AssociateTrunkInterfaceResult({
    this.clientToken,
    this.interfaceAssociation,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final interfaceAssociation = this.interfaceAssociation;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (interfaceAssociation != null)
        'interfaceAssociation': interfaceAssociation,
    };
  }
}

class AssociateVpcCidrBlockResult {
  /// Information about the IPv4 CIDR block association.
  final VpcCidrBlockAssociation? cidrBlockAssociation;

  /// Information about the IPv6 CIDR block association.
  final VpcIpv6CidrBlockAssociation? ipv6CidrBlockAssociation;

  /// The ID of the VPC.
  final String? vpcId;

  AssociateVpcCidrBlockResult({
    this.cidrBlockAssociation,
    this.ipv6CidrBlockAssociation,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final cidrBlockAssociation = this.cidrBlockAssociation;
    final ipv6CidrBlockAssociation = this.ipv6CidrBlockAssociation;
    final vpcId = this.vpcId;
    return {
      if (cidrBlockAssociation != null)
        'cidrBlockAssociation': cidrBlockAssociation,
      if (ipv6CidrBlockAssociation != null)
        'ipv6CidrBlockAssociation': ipv6CidrBlockAssociation,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum AssociatedNetworkType {
  vpc('vpc'),
  ;

  final String value;

  const AssociatedNetworkType(this.value);

  static AssociatedNetworkType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AssociatedNetworkType'));
}

/// Information about the associated IAM roles.
class AssociatedRole {
  /// The ARN of the associated IAM role.
  final String? associatedRoleArn;

  /// The name of the Amazon S3 bucket in which the Amazon S3 object is stored.
  final String? certificateS3BucketName;

  /// The key of the Amazon S3 object where the certificate, certificate chain,
  /// and encrypted private key bundle are stored. The object key is formatted as
  /// follows: <code>role_arn</code>/<code>certificate_arn</code>.
  final String? certificateS3ObjectKey;

  /// The ID of the KMS key used to encrypt the private key.
  final String? encryptionKmsKeyId;

  AssociatedRole({
    this.associatedRoleArn,
    this.certificateS3BucketName,
    this.certificateS3ObjectKey,
    this.encryptionKmsKeyId,
  });

  Map<String, dynamic> toJson() {
    final associatedRoleArn = this.associatedRoleArn;
    final certificateS3BucketName = this.certificateS3BucketName;
    final certificateS3ObjectKey = this.certificateS3ObjectKey;
    final encryptionKmsKeyId = this.encryptionKmsKeyId;
    return {
      if (associatedRoleArn != null) 'associatedRoleArn': associatedRoleArn,
      if (certificateS3BucketName != null)
        'certificateS3BucketName': certificateS3BucketName,
      if (certificateS3ObjectKey != null)
        'certificateS3ObjectKey': certificateS3ObjectKey,
      if (encryptionKmsKeyId != null) 'encryptionKmsKeyId': encryptionKmsKeyId,
    };
  }
}

/// Describes a target network that is associated with a Client VPN endpoint. A
/// target network is a subnet in a VPC.
class AssociatedTargetNetwork {
  /// The ID of the subnet.
  final String? networkId;

  /// The target network type.
  final AssociatedNetworkType? networkType;

  AssociatedTargetNetwork({
    this.networkId,
    this.networkType,
  });

  Map<String, dynamic> toJson() {
    final networkId = this.networkId;
    final networkType = this.networkType;
    return {
      if (networkId != null) 'networkId': networkId,
      if (networkType != null) 'networkType': networkType.value,
    };
  }
}

/// Describes the state of a target network association.
class AssociationStatus {
  /// The state of the target network association.
  final AssociationStatusCode? code;

  /// A message about the status of the target network association, if applicable.
  final String? message;

  AssociationStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum AssociationStatusCode {
  associating('associating'),
  associated('associated'),
  associationFailed('association-failed'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  ;

  final String value;

  const AssociationStatusCode(this.value);

  static AssociationStatusCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AssociationStatusCode'));
}

/// Describes integration options for Amazon Athena.
class AthenaIntegration {
  /// The location in Amazon S3 to store the generated CloudFormation template.
  final String integrationResultS3DestinationArn;

  /// The schedule for adding new partitions to the table.
  final PartitionLoadFrequency partitionLoadFrequency;

  /// The end date for the partition.
  final DateTime? partitionEndDate;

  /// The start date for the partition.
  final DateTime? partitionStartDate;

  AthenaIntegration({
    required this.integrationResultS3DestinationArn,
    required this.partitionLoadFrequency,
    this.partitionEndDate,
    this.partitionStartDate,
  });

  Map<String, dynamic> toJson() {
    final integrationResultS3DestinationArn =
        this.integrationResultS3DestinationArn;
    final partitionLoadFrequency = this.partitionLoadFrequency;
    final partitionEndDate = this.partitionEndDate;
    final partitionStartDate = this.partitionStartDate;
    return {
      'IntegrationResultS3DestinationArn': integrationResultS3DestinationArn,
      'PartitionLoadFrequency': partitionLoadFrequency.value,
      if (partitionEndDate != null)
        'PartitionEndDate': iso8601ToJson(partitionEndDate),
      if (partitionStartDate != null)
        'PartitionStartDate': iso8601ToJson(partitionStartDate),
    };
  }
}

class AttachClassicLinkVpcResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  AttachClassicLinkVpcResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

/// Contains the output of AttachNetworkInterface.
class AttachNetworkInterfaceResult {
  /// The ID of the network interface attachment.
  final String? attachmentId;

  /// The index of the network card.
  final int? networkCardIndex;

  AttachNetworkInterfaceResult({
    this.attachmentId,
    this.networkCardIndex,
  });

  Map<String, dynamic> toJson() {
    final attachmentId = this.attachmentId;
    final networkCardIndex = this.networkCardIndex;
    return {
      if (attachmentId != null) 'attachmentId': attachmentId,
      if (networkCardIndex != null) 'networkCardIndex': networkCardIndex,
    };
  }
}

class AttachVerifiedAccessTrustProviderResult {
  /// Details about the Verified Access instance.
  final VerifiedAccessInstance? verifiedAccessInstance;

  /// Details about the Verified Access trust provider.
  final VerifiedAccessTrustProvider? verifiedAccessTrustProvider;

  AttachVerifiedAccessTrustProviderResult({
    this.verifiedAccessInstance,
    this.verifiedAccessTrustProvider,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessInstance = this.verifiedAccessInstance;
    final verifiedAccessTrustProvider = this.verifiedAccessTrustProvider;
    return {
      if (verifiedAccessInstance != null)
        'verifiedAccessInstance': verifiedAccessInstance,
      if (verifiedAccessTrustProvider != null)
        'verifiedAccessTrustProvider': verifiedAccessTrustProvider,
    };
  }
}

/// Contains the output of AttachVpnGateway.
class AttachVpnGatewayResult {
  /// Information about the attachment.
  final VpcAttachment? vpcAttachment;

  AttachVpnGatewayResult({
    this.vpcAttachment,
  });

  Map<String, dynamic> toJson() {
    final vpcAttachment = this.vpcAttachment;
    return {
      if (vpcAttachment != null) 'attachment': vpcAttachment,
    };
  }
}

/// ENA Express uses Amazon Web Services Scalable Reliable Datagram (SRD)
/// technology to increase the maximum bandwidth used per stream and minimize
/// tail latency of network traffic between EC2 instances. With ENA Express, you
/// can communicate between two EC2 instances in the same subnet within the same
/// account, or in different accounts. Both sending and receiving instances must
/// have ENA Express enabled.
///
/// To improve the reliability of network packet delivery, ENA Express reorders
/// network packets on the receiving end by default. However, some UDP-based
/// applications are designed to handle network packets that are out of order to
/// reduce the overhead for packet delivery at the network layer. When ENA
/// Express is enabled, you can specify whether UDP network traffic uses it.
class AttachmentEnaSrdSpecification {
  /// Indicates whether ENA Express is enabled for the network interface.
  final bool? enaSrdEnabled;

  /// Configures ENA Express for UDP network traffic.
  final AttachmentEnaSrdUdpSpecification? enaSrdUdpSpecification;

  AttachmentEnaSrdSpecification({
    this.enaSrdEnabled,
    this.enaSrdUdpSpecification,
  });

  Map<String, dynamic> toJson() {
    final enaSrdEnabled = this.enaSrdEnabled;
    final enaSrdUdpSpecification = this.enaSrdUdpSpecification;
    return {
      if (enaSrdEnabled != null) 'enaSrdEnabled': enaSrdEnabled,
      if (enaSrdUdpSpecification != null)
        'enaSrdUdpSpecification': enaSrdUdpSpecification,
    };
  }
}

/// ENA Express is compatible with both TCP and UDP transport protocols. When
/// it's enabled, TCP traffic automatically uses it. However, some UDP-based
/// applications are designed to handle network packets that are out of order,
/// without a need for retransmission, such as live video broadcasting or other
/// near-real-time applications. For UDP traffic, you can specify whether to use
/// ENA Express, based on your application environment needs.
class AttachmentEnaSrdUdpSpecification {
  /// Indicates whether UDP traffic to and from the instance uses ENA Express. To
  /// specify this setting, you must first enable ENA Express.
  final bool? enaSrdUdpEnabled;

  AttachmentEnaSrdUdpSpecification({
    this.enaSrdUdpEnabled,
  });

  Map<String, dynamic> toJson() {
    final enaSrdUdpEnabled = this.enaSrdUdpEnabled;
    return {
      if (enaSrdUdpEnabled != null) 'enaSrdUdpEnabled': enaSrdUdpEnabled,
    };
  }
}

enum AttachmentStatus {
  attaching('attaching'),
  attached('attached'),
  detaching('detaching'),
  detached('detached'),
  ;

  final String value;

  const AttachmentStatus(this.value);

  static AttachmentStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AttachmentStatus'));
}

/// Describes a value for a resource attribute that is a Boolean value.
class AttributeBooleanValue {
  /// The attribute value. The valid values are <code>true</code> or
  /// <code>false</code>.
  final bool? value;

  AttributeBooleanValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Describes a value for a resource attribute that is a String.
class AttributeValue {
  /// The attribute value. The value is case-sensitive.
  final String? value;

  AttributeValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Information about an authorization rule.
class AuthorizationRule {
  /// Indicates whether the authorization rule grants access to all clients.
  final bool? accessAll;

  /// The ID of the Client VPN endpoint with which the authorization rule is
  /// associated.
  final String? clientVpnEndpointId;

  /// A brief description of the authorization rule.
  final String? description;

  /// The IPv4 address range, in CIDR notation, of the network to which the
  /// authorization rule applies.
  final String? destinationCidr;

  /// The ID of the Active Directory group to which the authorization rule grants
  /// access.
  final String? groupId;

  /// The current state of the authorization rule.
  final ClientVpnAuthorizationRuleStatus? status;

  AuthorizationRule({
    this.accessAll,
    this.clientVpnEndpointId,
    this.description,
    this.destinationCidr,
    this.groupId,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final accessAll = this.accessAll;
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final description = this.description;
    final destinationCidr = this.destinationCidr;
    final groupId = this.groupId;
    final status = this.status;
    return {
      if (accessAll != null) 'accessAll': accessAll,
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (description != null) 'description': description,
      if (destinationCidr != null) 'destinationCidr': destinationCidr,
      if (groupId != null) 'groupId': groupId,
      if (status != null) 'status': status,
    };
  }
}

class AuthorizeClientVpnIngressResult {
  /// The current state of the authorization rule.
  final ClientVpnAuthorizationRuleStatus? status;

  AuthorizeClientVpnIngressResult({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'status': status,
    };
  }
}

class AuthorizeSecurityGroupEgressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  /// Information about the outbound (egress) security group rules that were
  /// added.
  final List<SecurityGroupRule>? securityGroupRules;

  AuthorizeSecurityGroupEgressResult({
    this.returnValue,
    this.securityGroupRules,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    final securityGroupRules = this.securityGroupRules;
    return {
      if (returnValue != null) 'return': returnValue,
      if (securityGroupRules != null)
        'securityGroupRuleSet': securityGroupRules,
    };
  }
}

class AuthorizeSecurityGroupIngressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  /// Information about the inbound (ingress) security group rules that were
  /// added.
  final List<SecurityGroupRule>? securityGroupRules;

  AuthorizeSecurityGroupIngressResult({
    this.returnValue,
    this.securityGroupRules,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    final securityGroupRules = this.securityGroupRules;
    return {
      if (returnValue != null) 'return': returnValue,
      if (securityGroupRules != null)
        'securityGroupRuleSet': securityGroupRules,
    };
  }
}

enum AutoAcceptSharedAssociationsValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const AutoAcceptSharedAssociationsValue(this.value);

  static AutoAcceptSharedAssociationsValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AutoAcceptSharedAssociationsValue'));
}

enum AutoAcceptSharedAttachmentsValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const AutoAcceptSharedAttachmentsValue(this.value);

  static AutoAcceptSharedAttachmentsValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AutoAcceptSharedAttachmentsValue'));
}

enum AutoPlacement {
  on('on'),
  off('off'),
  ;

  final String value;

  const AutoPlacement(this.value);

  static AutoPlacement fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoPlacement'));
}

/// Describes Availability Zones, Local Zones, and Wavelength Zones.
class AvailabilityZone {
  /// For Availability Zones, this parameter has the same value as the Region
  /// name.
  ///
  /// For Local Zones, the name of the associated group, for example
  /// <code>us-west-2-lax-1</code>.
  ///
  /// For Wavelength Zones, the name of the associated group, for example
  /// <code>us-east-1-wl1-bos-wlz-1</code>.
  final String? groupName;

  /// Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
  final List<AvailabilityZoneMessage>? messages;

  /// The name of the network border group.
  final String? networkBorderGroup;

  /// For Availability Zones, this parameter always has the value of
  /// <code>opt-in-not-required</code>.
  ///
  /// For Local Zones and Wavelength Zones, this parameter is the opt-in status.
  /// The possible values are <code>opted-in</code>, and
  /// <code>not-opted-in</code>.
  final AvailabilityZoneOptInStatus? optInStatus;

  /// The ID of the zone that handles some of the Local Zone or Wavelength Zone
  /// control plane operations, such as API calls.
  final String? parentZoneId;

  /// The name of the zone that handles some of the Local Zone or Wavelength Zone
  /// control plane operations, such as API calls.
  final String? parentZoneName;

  /// The name of the Region.
  final String? regionName;

  /// The state of the Availability Zone, Local Zone, or Wavelength Zone. This
  /// value is always <code>available</code>.
  final AvailabilityZoneState? state;

  /// The ID of the Availability Zone, Local Zone, or Wavelength Zone.
  final String? zoneId;

  /// The name of the Availability Zone, Local Zone, or Wavelength Zone.
  final String? zoneName;

  /// The type of zone. The valid values are <code>availability-zone</code>,
  /// <code>local-zone</code>, and <code>wavelength-zone</code>.
  final String? zoneType;

  AvailabilityZone({
    this.groupName,
    this.messages,
    this.networkBorderGroup,
    this.optInStatus,
    this.parentZoneId,
    this.parentZoneName,
    this.regionName,
    this.state,
    this.zoneId,
    this.zoneName,
    this.zoneType,
  });

  Map<String, dynamic> toJson() {
    final groupName = this.groupName;
    final messages = this.messages;
    final networkBorderGroup = this.networkBorderGroup;
    final optInStatus = this.optInStatus;
    final parentZoneId = this.parentZoneId;
    final parentZoneName = this.parentZoneName;
    final regionName = this.regionName;
    final state = this.state;
    final zoneId = this.zoneId;
    final zoneName = this.zoneName;
    final zoneType = this.zoneType;
    return {
      if (groupName != null) 'groupName': groupName,
      if (messages != null) 'messageSet': messages,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
      if (optInStatus != null) 'optInStatus': optInStatus.value,
      if (parentZoneId != null) 'parentZoneId': parentZoneId,
      if (parentZoneName != null) 'parentZoneName': parentZoneName,
      if (regionName != null) 'regionName': regionName,
      if (state != null) 'zoneState': state.value,
      if (zoneId != null) 'zoneId': zoneId,
      if (zoneName != null) 'zoneName': zoneName,
      if (zoneType != null) 'zoneType': zoneType,
    };
  }
}

/// Describes a message about an Availability Zone, Local Zone, or Wavelength
/// Zone.
class AvailabilityZoneMessage {
  /// The message about the Availability Zone, Local Zone, or Wavelength Zone.
  final String? message;

  AvailabilityZoneMessage({
    this.message,
  });

  Map<String, dynamic> toJson() {
    final message = this.message;
    return {
      if (message != null) 'message': message,
    };
  }
}

enum AvailabilityZoneOptInStatus {
  optInNotRequired('opt-in-not-required'),
  optedIn('opted-in'),
  notOptedIn('not-opted-in'),
  ;

  final String value;

  const AvailabilityZoneOptInStatus(this.value);

  static AvailabilityZoneOptInStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AvailabilityZoneOptInStatus'));
}

enum AvailabilityZoneState {
  available('available'),
  information('information'),
  impaired('impaired'),
  unavailable('unavailable'),
  constrained('constrained'),
  ;

  final String value;

  const AvailabilityZoneState(this.value);

  static AvailabilityZoneState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AvailabilityZoneState'));
}

/// The capacity information for instances that can be launched onto the
/// Dedicated Host.
class AvailableCapacity {
  /// The number of instances that can be launched onto the Dedicated Host
  /// depending on the host's available capacity. For Dedicated Hosts that support
  /// multiple instance types, this parameter represents the number of instances
  /// for each instance size that is supported on the host.
  final List<InstanceCapacity>? availableInstanceCapacity;

  /// The number of vCPUs available for launching instances onto the Dedicated
  /// Host.
  final int? availableVCpus;

  AvailableCapacity({
    this.availableInstanceCapacity,
    this.availableVCpus,
  });

  Map<String, dynamic> toJson() {
    final availableInstanceCapacity = this.availableInstanceCapacity;
    final availableVCpus = this.availableVCpus;
    return {
      if (availableInstanceCapacity != null)
        'availableInstanceCapacity': availableInstanceCapacity,
      if (availableVCpus != null) 'availableVCpus': availableVCpus,
    };
  }
}

enum BareMetal {
  included('included'),
  required('required'),
  excluded('excluded'),
  ;

  final String value;

  const BareMetal(this.value);

  static BareMetal fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum BareMetal'));
}

/// The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html">Amazon
/// EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.
class BaselineEbsBandwidthMbps {
  /// The maximum baseline bandwidth, in Mbps. If this parameter is not specified,
  /// there is no maximum limit.
  final int? max;

  /// The minimum baseline bandwidth, in Mbps. If this parameter is not specified,
  /// there is no minimum limit.
  final int? min;

  BaselineEbsBandwidthMbps({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html">Amazon
/// EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.
class BaselineEbsBandwidthMbpsRequest {
  /// The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit
  /// this parameter.
  final int? max;

  /// The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit
  /// this parameter.
  final int? min;

  BaselineEbsBandwidthMbpsRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

enum BatchState {
  submitted('submitted'),
  active('active'),
  cancelled('cancelled'),
  failed('failed'),
  cancelledRunning('cancelled_running'),
  cancelledTerminating('cancelled_terminating'),
  modifying('modifying'),
  ;

  final String value;

  const BatchState(this.value);

  static BatchState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum BatchState'));
}

enum BgpStatus {
  up('up'),
  down('down'),
  ;

  final String value;

  const BgpStatus(this.value);

  static BgpStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum BgpStatus'));
}

class BlobAttributeValue {
  final Uint8List? value;

  BlobAttributeValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': base64Encode(value),
    };
  }
}

/// Describes a block device mapping, which defines the EBS volumes and instance
/// store volumes to attach to an instance at launch.
class BlockDeviceMapping {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String? deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final EbsBlockDevice? ebs;

  /// To omit the device from the block device mapping, specify an empty string.
  /// When this property is specified, the device is removed from the block device
  /// mapping regardless of the assigned value.
  final String? noDevice;

  /// The virtual device name (<code>ephemeral</code>N). Instance store volumes
  /// are numbered starting from 0. An instance type with 2 available instance
  /// store volumes can specify mappings for <code>ephemeral0</code> and
  /// <code>ephemeral1</code>. The number of available instance store volumes
  /// depends on the instance type. After you connect to the instance, you must
  /// mount the volume.
  ///
  /// NVMe instance store volumes are automatically enumerated and assigned a
  /// device name. Including them in your block device mapping has no effect.
  ///
  /// Constraints: For M3 instances, you must specify instance store volumes in
  /// the block device mapping for the instance. When you launch an M3 instance,
  /// we ignore any instance store volumes specified in the block device mapping
  /// for the AMI.
  final String? virtualName;

  BlockDeviceMapping({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final ebs = this.ebs;
    final noDevice = this.noDevice;
    final virtualName = this.virtualName;
    return {
      if (deviceName != null) 'deviceName': deviceName,
      if (ebs != null) 'ebs': ebs,
      if (noDevice != null) 'noDevice': noDevice,
      if (virtualName != null) 'virtualName': virtualName,
    };
  }
}

enum BootModeType {
  legacyBios('legacy-bios'),
  uefi('uefi'),
  ;

  final String value;

  const BootModeType(this.value);

  static BootModeType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum BootModeType'));
}

enum BootModeValues {
  legacyBios('legacy-bios'),
  uefi('uefi'),
  uefiPreferred('uefi-preferred'),
  ;

  final String value;

  const BootModeValues(this.value);

  static BootModeValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum BootModeValues'));
}

/// Contains the output of BundleInstance.
class BundleInstanceResult {
  /// Information about the bundle task.
  final BundleTask? bundleTask;

  BundleInstanceResult({
    this.bundleTask,
  });

  Map<String, dynamic> toJson() {
    final bundleTask = this.bundleTask;
    return {
      if (bundleTask != null) 'bundleInstanceTask': bundleTask,
    };
  }
}

/// Describes a bundle task.
class BundleTask {
  /// The ID of the bundle task.
  final String? bundleId;

  /// If the task fails, a description of the error.
  final BundleTaskError? bundleTaskError;

  /// The ID of the instance associated with this bundle task.
  final String? instanceId;

  /// The level of task completion, as a percent (for example, 20%).
  final String? progress;

  /// The time this task started.
  final DateTime? startTime;

  /// The state of the task.
  final BundleTaskState? state;

  /// The Amazon S3 storage locations.
  final Storage? storage;

  /// The time of the most recent update for the task.
  final DateTime? updateTime;

  BundleTask({
    this.bundleId,
    this.bundleTaskError,
    this.instanceId,
    this.progress,
    this.startTime,
    this.state,
    this.storage,
    this.updateTime,
  });

  Map<String, dynamic> toJson() {
    final bundleId = this.bundleId;
    final bundleTaskError = this.bundleTaskError;
    final instanceId = this.instanceId;
    final progress = this.progress;
    final startTime = this.startTime;
    final state = this.state;
    final storage = this.storage;
    final updateTime = this.updateTime;
    return {
      if (bundleId != null) 'bundleId': bundleId,
      if (bundleTaskError != null) 'error': bundleTaskError,
      if (instanceId != null) 'instanceId': instanceId,
      if (progress != null) 'progress': progress,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
      if (state != null) 'state': state.value,
      if (storage != null) 'storage': storage,
      if (updateTime != null) 'updateTime': iso8601ToJson(updateTime),
    };
  }
}

/// Describes an error for <a>BundleInstance</a>.
class BundleTaskError {
  /// The error code.
  final String? code;

  /// The error message.
  final String? message;

  BundleTaskError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

enum BundleTaskState {
  pending('pending'),
  waitingForShutdown('waiting-for-shutdown'),
  bundling('bundling'),
  storing('storing'),
  cancelling('cancelling'),
  complete('complete'),
  failed('failed'),
  ;

  final String value;

  const BundleTaskState(this.value);

  static BundleTaskState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum BundleTaskState'));
}

enum BurstablePerformance {
  included('included'),
  required('required'),
  excluded('excluded'),
  ;

  final String value;

  const BurstablePerformance(this.value);

  static BurstablePerformance fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum BurstablePerformance'));
}

/// The Autonomous System Number (ASN) and BYOIP CIDR association.
class Byoasn {
  /// A public 2-byte or 4-byte ASN.
  final String? asn;

  /// An IPAM ID.
  final String? ipamId;

  /// The provisioning state of the BYOASN.
  final AsnState? state;

  /// The status message.
  final String? statusMessage;

  Byoasn({
    this.asn,
    this.ipamId,
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final asn = this.asn;
    final ipamId = this.ipamId;
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (asn != null) 'asn': asn,
      if (ipamId != null) 'ipamId': ipamId,
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

/// Information about an address range that is provisioned for use with your
/// Amazon Web Services resources through bring your own IP addresses (BYOIP).
class ByoipCidr {
  /// The BYOIP CIDR associations with ASNs.
  final List<AsnAssociation>? asnAssociations;

  /// The address range, in CIDR notation.
  final String? cidr;

  /// The description of the address range.
  final String? description;

  /// If you have <a
  /// href="https://docs.aws.amazon.com/local-zones/latest/ug/how-local-zones-work.html">Local
  /// Zones</a> enabled, you can choose a network border group for Local Zones
  /// when you provision and advertise a BYOIPv4 CIDR. Choose the network border
  /// group carefully as the EIP and the Amazon Web Services resource it is
  /// associated with must reside in the same network border group.
  ///
  /// You can provision BYOIP address ranges to and advertise them in the
  /// following Local Zone network border groups:
  ///
  /// <ul>
  /// <li>
  /// us-east-1-dfw-2
  /// </li>
  /// <li>
  /// us-west-2-lax-1
  /// </li>
  /// <li>
  /// us-west-2-phx-2
  /// </li>
  /// </ul> <note>
  /// You cannot provision or advertise BYOIPv6 address ranges in Local Zones at
  /// this time.
  /// </note>
  final String? networkBorderGroup;

  /// The state of the address pool.
  final ByoipCidrState? state;

  /// Upon success, contains the ID of the address pool. Otherwise, contains an
  /// error message.
  final String? statusMessage;

  ByoipCidr({
    this.asnAssociations,
    this.cidr,
    this.description,
    this.networkBorderGroup,
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final asnAssociations = this.asnAssociations;
    final cidr = this.cidr;
    final description = this.description;
    final networkBorderGroup = this.networkBorderGroup;
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (asnAssociations != null) 'asnAssociationSet': asnAssociations,
      if (cidr != null) 'cidr': cidr,
      if (description != null) 'description': description,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum ByoipCidrState {
  advertised('advertised'),
  deprovisioned('deprovisioned'),
  failedDeprovision('failed-deprovision'),
  failedProvision('failed-provision'),
  pendingDeprovision('pending-deprovision'),
  pendingProvision('pending-provision'),
  provisioned('provisioned'),
  provisionedNotPubliclyAdvertisable('provisioned-not-publicly-advertisable'),
  ;

  final String value;

  const ByoipCidrState(this.value);

  static ByoipCidrState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ByoipCidrState'));
}

enum CancelBatchErrorCode {
  fleetRequestIdDoesNotExist('fleetRequestIdDoesNotExist'),
  fleetRequestIdMalformed('fleetRequestIdMalformed'),
  fleetRequestNotInCancellableState('fleetRequestNotInCancellableState'),
  unexpectedError('unexpectedError'),
  ;

  final String value;

  const CancelBatchErrorCode(this.value);

  static CancelBatchErrorCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CancelBatchErrorCode'));
}

/// Contains the output of CancelBundleTask.
class CancelBundleTaskResult {
  /// Information about the bundle task.
  final BundleTask? bundleTask;

  CancelBundleTaskResult({
    this.bundleTask,
  });

  Map<String, dynamic> toJson() {
    final bundleTask = this.bundleTask;
    return {
      if (bundleTask != null) 'bundleInstanceTask': bundleTask,
    };
  }
}

/// Describes a Capacity Reservation Fleet cancellation error.
class CancelCapacityReservationFleetError {
  /// The error code.
  final String? code;

  /// The error message.
  final String? message;

  CancelCapacityReservationFleetError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

class CancelCapacityReservationFleetsResult {
  /// Information about the Capacity Reservation Fleets that could not be
  /// cancelled.
  final List<FailedCapacityReservationFleetCancellationResult>?
      failedFleetCancellations;

  /// Information about the Capacity Reservation Fleets that were successfully
  /// cancelled.
  final List<CapacityReservationFleetCancellationState>?
      successfulFleetCancellations;

  CancelCapacityReservationFleetsResult({
    this.failedFleetCancellations,
    this.successfulFleetCancellations,
  });

  Map<String, dynamic> toJson() {
    final failedFleetCancellations = this.failedFleetCancellations;
    final successfulFleetCancellations = this.successfulFleetCancellations;
    return {
      if (failedFleetCancellations != null)
        'failedFleetCancellationSet': failedFleetCancellations,
      if (successfulFleetCancellations != null)
        'successfulFleetCancellationSet': successfulFleetCancellations,
    };
  }
}

class CancelCapacityReservationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  CancelCapacityReservationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class CancelImageLaunchPermissionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  CancelImageLaunchPermissionResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class CancelImportTaskResult {
  /// The ID of the task being canceled.
  final String? importTaskId;

  /// The current state of the task being canceled.
  final String? previousState;

  /// The current state of the task being canceled.
  final String? state;

  CancelImportTaskResult({
    this.importTaskId,
    this.previousState,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final importTaskId = this.importTaskId;
    final previousState = this.previousState;
    final state = this.state;
    return {
      if (importTaskId != null) 'importTaskId': importTaskId,
      if (previousState != null) 'previousState': previousState,
      if (state != null) 'state': state,
    };
  }
}

/// Contains the output of CancelReservedInstancesListing.
class CancelReservedInstancesListingResult {
  /// The Reserved Instance listing.
  final List<ReservedInstancesListing>? reservedInstancesListings;

  CancelReservedInstancesListingResult({
    this.reservedInstancesListings,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesListings = this.reservedInstancesListings;
    return {
      if (reservedInstancesListings != null)
        'reservedInstancesListingsSet': reservedInstancesListings,
    };
  }
}

/// Describes a Spot Fleet error.
class CancelSpotFleetRequestsError {
  /// The error code.
  final CancelBatchErrorCode? code;

  /// The description for the error code.
  final String? message;

  CancelSpotFleetRequestsError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

/// Describes a Spot Fleet request that was not successfully canceled.
class CancelSpotFleetRequestsErrorItem {
  /// The error.
  final CancelSpotFleetRequestsError? error;

  /// The ID of the Spot Fleet request.
  final String? spotFleetRequestId;

  CancelSpotFleetRequestsErrorItem({
    this.error,
    this.spotFleetRequestId,
  });

  Map<String, dynamic> toJson() {
    final error = this.error;
    final spotFleetRequestId = this.spotFleetRequestId;
    return {
      if (error != null) 'error': error,
      if (spotFleetRequestId != null) 'spotFleetRequestId': spotFleetRequestId,
    };
  }
}

/// Contains the output of CancelSpotFleetRequests.
class CancelSpotFleetRequestsResponse {
  /// Information about the Spot Fleet requests that are successfully canceled.
  final List<CancelSpotFleetRequestsSuccessItem>? successfulFleetRequests;

  /// Information about the Spot Fleet requests that are not successfully
  /// canceled.
  final List<CancelSpotFleetRequestsErrorItem>? unsuccessfulFleetRequests;

  CancelSpotFleetRequestsResponse({
    this.successfulFleetRequests,
    this.unsuccessfulFleetRequests,
  });

  Map<String, dynamic> toJson() {
    final successfulFleetRequests = this.successfulFleetRequests;
    final unsuccessfulFleetRequests = this.unsuccessfulFleetRequests;
    return {
      if (successfulFleetRequests != null)
        'successfulFleetRequestSet': successfulFleetRequests,
      if (unsuccessfulFleetRequests != null)
        'unsuccessfulFleetRequestSet': unsuccessfulFleetRequests,
    };
  }
}

/// Describes a Spot Fleet request that was successfully canceled.
class CancelSpotFleetRequestsSuccessItem {
  /// The current state of the Spot Fleet request.
  final BatchState? currentSpotFleetRequestState;

  /// The previous state of the Spot Fleet request.
  final BatchState? previousSpotFleetRequestState;

  /// The ID of the Spot Fleet request.
  final String? spotFleetRequestId;

  CancelSpotFleetRequestsSuccessItem({
    this.currentSpotFleetRequestState,
    this.previousSpotFleetRequestState,
    this.spotFleetRequestId,
  });

  Map<String, dynamic> toJson() {
    final currentSpotFleetRequestState = this.currentSpotFleetRequestState;
    final previousSpotFleetRequestState = this.previousSpotFleetRequestState;
    final spotFleetRequestId = this.spotFleetRequestId;
    return {
      if (currentSpotFleetRequestState != null)
        'currentSpotFleetRequestState': currentSpotFleetRequestState.value,
      if (previousSpotFleetRequestState != null)
        'previousSpotFleetRequestState': previousSpotFleetRequestState.value,
      if (spotFleetRequestId != null) 'spotFleetRequestId': spotFleetRequestId,
    };
  }
}

enum CancelSpotInstanceRequestState {
  active('active'),
  open('open'),
  closed('closed'),
  cancelled('cancelled'),
  completed('completed'),
  ;

  final String value;

  const CancelSpotInstanceRequestState(this.value);

  static CancelSpotInstanceRequestState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CancelSpotInstanceRequestState'));
}

/// Contains the output of CancelSpotInstanceRequests.
class CancelSpotInstanceRequestsResult {
  /// The Spot Instance requests.
  final List<CancelledSpotInstanceRequest>? cancelledSpotInstanceRequests;

  CancelSpotInstanceRequestsResult({
    this.cancelledSpotInstanceRequests,
  });

  Map<String, dynamic> toJson() {
    final cancelledSpotInstanceRequests = this.cancelledSpotInstanceRequests;
    return {
      if (cancelledSpotInstanceRequests != null)
        'spotInstanceRequestSet': cancelledSpotInstanceRequests,
    };
  }
}

/// Describes a request to cancel a Spot Instance.
class CancelledSpotInstanceRequest {
  /// The ID of the Spot Instance request.
  final String? spotInstanceRequestId;

  /// The state of the Spot Instance request.
  final CancelSpotInstanceRequestState? state;

  CancelledSpotInstanceRequest({
    this.spotInstanceRequestId,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final spotInstanceRequestId = this.spotInstanceRequestId;
    final state = this.state;
    return {
      if (spotInstanceRequestId != null)
        'spotInstanceRequestId': spotInstanceRequestId,
      if (state != null) 'state': state.value,
    };
  }
}

/// Information about instance capacity usage for a Capacity Reservation.
class CapacityAllocation {
  /// The usage type. <code>used</code> indicates that the instance capacity is in
  /// use by instances that are running in the Capacity Reservation.
  final AllocationType? allocationType;

  /// The amount of instance capacity associated with the usage. For example a
  /// value of <code>4</code> indicates that instance capacity for 4 instances is
  /// currently in use.
  final int? count;

  CapacityAllocation({
    this.allocationType,
    this.count,
  });

  Map<String, dynamic> toJson() {
    final allocationType = this.allocationType;
    final count = this.count;
    return {
      if (allocationType != null) 'allocationType': allocationType.value,
      if (count != null) 'count': count,
    };
  }
}

/// The recommended Capacity Block that fits your search requirements.
class CapacityBlockOffering {
  /// The Availability Zone of the Capacity Block offering.
  final String? availabilityZone;

  /// The amount of time of the Capacity Block reservation in hours.
  final int? capacityBlockDurationHours;

  /// The ID of the Capacity Block offering.
  final String? capacityBlockOfferingId;

  /// The currency of the payment for the Capacity Block.
  final String? currencyCode;

  /// The end date of the Capacity Block offering.
  final DateTime? endDate;

  /// The number of instances in the Capacity Block offering.
  final int? instanceCount;

  /// The instance type of the Capacity Block offering.
  final String? instanceType;

  /// The start date of the Capacity Block offering.
  final DateTime? startDate;

  /// The tenancy of the Capacity Block.
  final CapacityReservationTenancy? tenancy;

  /// The total price to be paid up front.
  final String? upfrontFee;

  CapacityBlockOffering({
    this.availabilityZone,
    this.capacityBlockDurationHours,
    this.capacityBlockOfferingId,
    this.currencyCode,
    this.endDate,
    this.instanceCount,
    this.instanceType,
    this.startDate,
    this.tenancy,
    this.upfrontFee,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final capacityBlockDurationHours = this.capacityBlockDurationHours;
    final capacityBlockOfferingId = this.capacityBlockOfferingId;
    final currencyCode = this.currencyCode;
    final endDate = this.endDate;
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final startDate = this.startDate;
    final tenancy = this.tenancy;
    final upfrontFee = this.upfrontFee;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (capacityBlockDurationHours != null)
        'capacityBlockDurationHours': capacityBlockDurationHours,
      if (capacityBlockOfferingId != null)
        'capacityBlockOfferingId': capacityBlockOfferingId,
      if (currencyCode != null) 'currencyCode': currencyCode,
      if (endDate != null) 'endDate': iso8601ToJson(endDate),
      if (instanceCount != null) 'instanceCount': instanceCount,
      if (instanceType != null) 'instanceType': instanceType,
      if (startDate != null) 'startDate': iso8601ToJson(startDate),
      if (tenancy != null) 'tenancy': tenancy.value,
      if (upfrontFee != null) 'upfrontFee': upfrontFee,
    };
  }
}

/// Describes a Capacity Reservation.
class CapacityReservation {
  /// The Availability Zone in which the capacity is reserved.
  final String? availabilityZone;

  /// The Availability Zone ID of the Capacity Reservation.
  final String? availabilityZoneId;

  /// The remaining capacity. Indicates the number of instances that can be
  /// launched in the Capacity Reservation.
  final int? availableInstanceCount;

  /// Information about instance capacity usage.
  final List<CapacityAllocation>? capacityAllocations;

  /// The Amazon Resource Name (ARN) of the Capacity Reservation.
  final String? capacityReservationArn;

  /// The ID of the Capacity Reservation Fleet to which the Capacity Reservation
  /// belongs. Only valid for Capacity Reservations that were created by a
  /// Capacity Reservation Fleet.
  final String? capacityReservationFleetId;

  /// The ID of the Capacity Reservation.
  final String? capacityReservationId;

  /// The date and time at which the Capacity Reservation was created.
  final DateTime? createDate;

  /// Indicates whether the Capacity Reservation supports EBS-optimized instances.
  /// This optimization provides dedicated throughput to Amazon EBS and an
  /// optimized configuration stack to provide optimal I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS- optimized instance.
  final bool? ebsOptimized;

  /// The date and time at which the Capacity Reservation expires. When a Capacity
  /// Reservation expires, the reserved capacity is released and you can no longer
  /// launch instances into it. The Capacity Reservation's state changes to
  /// <code>expired</code> when it reaches its end date and time.
  final DateTime? endDate;

  /// Indicates the way in which the Capacity Reservation ends. A Capacity
  /// Reservation can have one of the following end types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time.
  /// </li>
  /// </ul>
  final EndDateType? endDateType;

  /// <i>Deprecated.</i>
  final bool? ephemeralStorage;

  /// Indicates the type of instance launches that the Capacity Reservation
  /// accepts. The options include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The Capacity Reservation accepts all instances that have
  /// matching attributes (instance type, platform, and Availability Zone).
  /// Instances that have matching attributes launch into the Capacity Reservation
  /// automatically without specifying any additional parameters.
  /// </li>
  /// <li>
  /// <code>targeted</code> - The Capacity Reservation only accepts instances that
  /// have matching attributes (instance type, platform, and Availability Zone),
  /// and explicitly target the Capacity Reservation. This ensures that only
  /// permitted instances can use the reserved capacity.
  /// </li>
  /// </ul>
  final InstanceMatchCriteria? instanceMatchCriteria;

  /// The type of operating system for which the Capacity Reservation reserves
  /// capacity.
  final CapacityReservationInstancePlatform? instancePlatform;

  /// The type of instance for which the Capacity Reservation reserves capacity.
  final String? instanceType;

  /// The Amazon Resource Name (ARN) of the Outpost on which the Capacity
  /// Reservation was created.
  final String? outpostArn;

  /// The ID of the Amazon Web Services account that owns the Capacity
  /// Reservation.
  final String? ownerId;

  /// The Amazon Resource Name (ARN) of the cluster placement group in which the
  /// Capacity Reservation was created. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html">
  /// Capacity Reservations for cluster placement groups</a> in the <i>Amazon EC2
  /// User Guide</i>.
  final String? placementGroupArn;

  /// The type of Capacity Reservation.
  final CapacityReservationType? reservationType;

  /// The date and time at which the Capacity Reservation was started.
  final DateTime? startDate;

  /// The current state of the Capacity Reservation. A Capacity Reservation can be
  /// in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The Capacity Reservation is active and the capacity is
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation expired automatically at the
  /// date and time specified in your request. The reserved capacity is no longer
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation was cancelled. The
  /// reserved capacity is no longer available for your use.
  /// </li>
  /// <li>
  /// <code>pending</code> - The Capacity Reservation request was successful but
  /// the capacity provisioning is still pending.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation request has failed. A request
  /// might fail due to invalid request parameters, capacity constraints, or
  /// instance limit constraints. Failed requests are retained for 60 minutes.
  /// </li>
  /// </ul>
  final CapacityReservationState? state;

  /// Any tags assigned to the Capacity Reservation.
  final List<Tag>? tags;

  /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
  /// can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation is created on hardware that
  /// is shared with other Amazon Web Services accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation is created on
  /// single-tenant hardware that is dedicated to a single Amazon Web Services
  /// account.
  /// </li>
  /// </ul>
  final CapacityReservationTenancy? tenancy;

  /// The total number of instances for which the Capacity Reservation reserves
  /// capacity.
  final int? totalInstanceCount;

  CapacityReservation({
    this.availabilityZone,
    this.availabilityZoneId,
    this.availableInstanceCount,
    this.capacityAllocations,
    this.capacityReservationArn,
    this.capacityReservationFleetId,
    this.capacityReservationId,
    this.createDate,
    this.ebsOptimized,
    this.endDate,
    this.endDateType,
    this.ephemeralStorage,
    this.instanceMatchCriteria,
    this.instancePlatform,
    this.instanceType,
    this.outpostArn,
    this.ownerId,
    this.placementGroupArn,
    this.reservationType,
    this.startDate,
    this.state,
    this.tags,
    this.tenancy,
    this.totalInstanceCount,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final availabilityZoneId = this.availabilityZoneId;
    final availableInstanceCount = this.availableInstanceCount;
    final capacityAllocations = this.capacityAllocations;
    final capacityReservationArn = this.capacityReservationArn;
    final capacityReservationFleetId = this.capacityReservationFleetId;
    final capacityReservationId = this.capacityReservationId;
    final createDate = this.createDate;
    final ebsOptimized = this.ebsOptimized;
    final endDate = this.endDate;
    final endDateType = this.endDateType;
    final ephemeralStorage = this.ephemeralStorage;
    final instanceMatchCriteria = this.instanceMatchCriteria;
    final instancePlatform = this.instancePlatform;
    final instanceType = this.instanceType;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final placementGroupArn = this.placementGroupArn;
    final reservationType = this.reservationType;
    final startDate = this.startDate;
    final state = this.state;
    final tags = this.tags;
    final tenancy = this.tenancy;
    final totalInstanceCount = this.totalInstanceCount;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (availabilityZoneId != null) 'availabilityZoneId': availabilityZoneId,
      if (availableInstanceCount != null)
        'availableInstanceCount': availableInstanceCount,
      if (capacityAllocations != null)
        'capacityAllocationSet': capacityAllocations,
      if (capacityReservationArn != null)
        'capacityReservationArn': capacityReservationArn,
      if (capacityReservationFleetId != null)
        'capacityReservationFleetId': capacityReservationFleetId,
      if (capacityReservationId != null)
        'capacityReservationId': capacityReservationId,
      if (createDate != null) 'createDate': iso8601ToJson(createDate),
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (endDate != null) 'endDate': iso8601ToJson(endDate),
      if (endDateType != null) 'endDateType': endDateType.value,
      if (ephemeralStorage != null) 'ephemeralStorage': ephemeralStorage,
      if (instanceMatchCriteria != null)
        'instanceMatchCriteria': instanceMatchCriteria.value,
      if (instancePlatform != null) 'instancePlatform': instancePlatform.value,
      if (instanceType != null) 'instanceType': instanceType,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (placementGroupArn != null) 'placementGroupArn': placementGroupArn,
      if (reservationType != null) 'reservationType': reservationType.value,
      if (startDate != null) 'startDate': iso8601ToJson(startDate),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (tenancy != null) 'tenancy': tenancy.value,
      if (totalInstanceCount != null) 'totalInstanceCount': totalInstanceCount,
    };
  }
}

/// Information about a Capacity Reservation Fleet.
class CapacityReservationFleet {
  /// The strategy used by the Capacity Reservation Fleet to determine which of
  /// the specified instance types to use. For more information, see For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy">
  /// Allocation strategy</a> in the Amazon EC2 User Guide.
  final String? allocationStrategy;

  /// The ARN of the Capacity Reservation Fleet.
  final String? capacityReservationFleetArn;

  /// The ID of the Capacity Reservation Fleet.
  final String? capacityReservationFleetId;

  /// The date and time at which the Capacity Reservation Fleet was created.
  final DateTime? createTime;

  /// The date and time at which the Capacity Reservation Fleet expires.
  final DateTime? endDate;

  /// Indicates the type of instance launches that the Capacity Reservation Fleet
  /// accepts. All Capacity Reservations in the Fleet inherit this instance
  /// matching criteria.
  ///
  /// Currently, Capacity Reservation Fleets support <code>open</code> instance
  /// matching criteria only. This means that instances that have matching
  /// attributes (instance type, platform, and Availability Zone) run in the
  /// Capacity Reservations automatically. Instances do not need to explicitly
  /// target a Capacity Reservation Fleet to use its reserved capacity.
  final FleetInstanceMatchCriteria? instanceMatchCriteria;

  /// Information about the instance types for which to reserve the capacity.
  final List<FleetCapacityReservation>? instanceTypeSpecifications;

  /// The state of the Capacity Reservation Fleet. Possible states include:
  ///
  /// <ul>
  /// <li>
  /// <code>submitted</code> - The Capacity Reservation Fleet request has been
  /// submitted and Amazon Elastic Compute Cloud is preparing to create the
  /// Capacity Reservations.
  /// </li>
  /// <li>
  /// <code>modifying</code> - The Capacity Reservation Fleet is being modified.
  /// The Fleet remains in this state until the modification is complete.
  /// </li>
  /// <li>
  /// <code>active</code> - The Capacity Reservation Fleet has fulfilled its total
  /// target capacity and it is attempting to maintain this capacity. The Fleet
  /// remains in this state until it is modified or deleted.
  /// </li>
  /// <li>
  /// <code>partially_fulfilled</code> - The Capacity Reservation Fleet has
  /// partially fulfilled its total target capacity. There is insufficient Amazon
  /// EC2 to fulfill the total target capacity. The Fleet is attempting to
  /// asynchronously fulfill its total target capacity.
  /// </li>
  /// <li>
  /// <code>expiring</code> - The Capacity Reservation Fleet has reach its end
  /// date and it is in the process of expiring. One or more of its Capacity
  /// reservations might still be active.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation Fleet has reach its end
  /// date. The Fleet and its Capacity Reservations are expired. The Fleet can't
  /// create new Capacity Reservations.
  /// </li>
  /// <li>
  /// <code>cancelling</code> - The Capacity Reservation Fleet is in the process
  /// of being cancelled. One or more of its Capacity reservations might still be
  /// active.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation Fleet has been manually
  /// cancelled. The Fleet and its Capacity Reservations are cancelled and the
  /// Fleet can't create new Capacity Reservations.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation Fleet failed to reserve
  /// capacity for the specified instance types.
  /// </li>
  /// </ul>
  final CapacityReservationFleetState? state;

  /// The tags assigned to the Capacity Reservation Fleet.
  final List<Tag>? tags;

  /// The tenancy of the Capacity Reservation Fleet. Tenancies include:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation Fleet is created on hardware
  /// that is shared with other Amazon Web Services accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation Fleet is created on
  /// single-tenant hardware that is dedicated to a single Amazon Web Services
  /// account.
  /// </li>
  /// </ul>
  final FleetCapacityReservationTenancy? tenancy;

  /// The capacity units that have been fulfilled.
  final double? totalFulfilledCapacity;

  /// The total number of capacity units for which the Capacity Reservation Fleet
  /// reserves capacity. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">Total
  /// target capacity</a> in the Amazon EC2 User Guide.
  final int? totalTargetCapacity;

  CapacityReservationFleet({
    this.allocationStrategy,
    this.capacityReservationFleetArn,
    this.capacityReservationFleetId,
    this.createTime,
    this.endDate,
    this.instanceMatchCriteria,
    this.instanceTypeSpecifications,
    this.state,
    this.tags,
    this.tenancy,
    this.totalFulfilledCapacity,
    this.totalTargetCapacity,
  });

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final capacityReservationFleetArn = this.capacityReservationFleetArn;
    final capacityReservationFleetId = this.capacityReservationFleetId;
    final createTime = this.createTime;
    final endDate = this.endDate;
    final instanceMatchCriteria = this.instanceMatchCriteria;
    final instanceTypeSpecifications = this.instanceTypeSpecifications;
    final state = this.state;
    final tags = this.tags;
    final tenancy = this.tenancy;
    final totalFulfilledCapacity = this.totalFulfilledCapacity;
    final totalTargetCapacity = this.totalTargetCapacity;
    return {
      if (allocationStrategy != null) 'allocationStrategy': allocationStrategy,
      if (capacityReservationFleetArn != null)
        'capacityReservationFleetArn': capacityReservationFleetArn,
      if (capacityReservationFleetId != null)
        'capacityReservationFleetId': capacityReservationFleetId,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (endDate != null) 'endDate': iso8601ToJson(endDate),
      if (instanceMatchCriteria != null)
        'instanceMatchCriteria': instanceMatchCriteria.value,
      if (instanceTypeSpecifications != null)
        'instanceTypeSpecificationSet': instanceTypeSpecifications,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (tenancy != null) 'tenancy': tenancy.value,
      if (totalFulfilledCapacity != null)
        'totalFulfilledCapacity': totalFulfilledCapacity,
      if (totalTargetCapacity != null)
        'totalTargetCapacity': totalTargetCapacity,
    };
  }
}

/// Describes a Capacity Reservation Fleet that was successfully cancelled.
class CapacityReservationFleetCancellationState {
  /// The ID of the Capacity Reservation Fleet that was successfully cancelled.
  final String? capacityReservationFleetId;

  /// The current state of the Capacity Reservation Fleet.
  final CapacityReservationFleetState? currentFleetState;

  /// The previous state of the Capacity Reservation Fleet.
  final CapacityReservationFleetState? previousFleetState;

  CapacityReservationFleetCancellationState({
    this.capacityReservationFleetId,
    this.currentFleetState,
    this.previousFleetState,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationFleetId = this.capacityReservationFleetId;
    final currentFleetState = this.currentFleetState;
    final previousFleetState = this.previousFleetState;
    return {
      if (capacityReservationFleetId != null)
        'capacityReservationFleetId': capacityReservationFleetId,
      if (currentFleetState != null)
        'currentFleetState': currentFleetState.value,
      if (previousFleetState != null)
        'previousFleetState': previousFleetState.value,
    };
  }
}

enum CapacityReservationFleetState {
  submitted('submitted'),
  modifying('modifying'),
  active('active'),
  partiallyFulfilled('partially_fulfilled'),
  expiring('expiring'),
  expired('expired'),
  cancelling('cancelling'),
  cancelled('cancelled'),
  failed('failed'),
  ;

  final String value;

  const CapacityReservationFleetState(this.value);

  static CapacityReservationFleetState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CapacityReservationFleetState'));
}

/// Describes a resource group to which a Capacity Reservation has been added.
class CapacityReservationGroup {
  /// The ARN of the resource group.
  final String? groupArn;

  /// The ID of the Amazon Web Services account that owns the resource group.
  final String? ownerId;

  CapacityReservationGroup({
    this.groupArn,
    this.ownerId,
  });

  Map<String, dynamic> toJson() {
    final groupArn = this.groupArn;
    final ownerId = this.ownerId;
    return {
      if (groupArn != null) 'groupArn': groupArn,
      if (ownerId != null) 'ownerId': ownerId,
    };
  }
}

enum CapacityReservationInstancePlatform {
  linuxUnix('Linux/UNIX'),
  redHatEnterpriseLinux('Red Hat Enterprise Linux'),
  suseLinux('SUSE Linux'),
  windows('Windows'),
  windowsWithSqlServer('Windows with SQL Server'),
  windowsWithSqlServerEnterprise('Windows with SQL Server Enterprise'),
  windowsWithSqlServerStandard('Windows with SQL Server Standard'),
  windowsWithSqlServerWeb('Windows with SQL Server Web'),
  linuxWithSqlServerStandard('Linux with SQL Server Standard'),
  linuxWithSqlServerWeb('Linux with SQL Server Web'),
  linuxWithSqlServerEnterprise('Linux with SQL Server Enterprise'),
  rhelWithSqlServerStandard('RHEL with SQL Server Standard'),
  rhelWithSqlServerEnterprise('RHEL with SQL Server Enterprise'),
  rhelWithSqlServerWeb('RHEL with SQL Server Web'),
  rhelWithHa('RHEL with HA'),
  rhelWithHaAndSqlServerStandard('RHEL with HA and SQL Server Standard'),
  rhelWithHaAndSqlServerEnterprise('RHEL with HA and SQL Server Enterprise'),
  ubuntuPro('Ubuntu Pro'),
  ;

  final String value;

  const CapacityReservationInstancePlatform(this.value);

  static CapacityReservationInstancePlatform fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CapacityReservationInstancePlatform'));
}

/// Describes the strategy for using unused Capacity Reservations for fulfilling
/// On-Demand capacity.
/// <note>
/// This strategy can only be used if the EC2 Fleet is of type
/// <code>instant</code>.
/// </note>
/// For more information about Capacity Reservations, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand
/// Capacity Reservations</a> in the <i>Amazon EC2 User Guide</i>. For examples
/// of using Capacity Reservations in an EC2 Fleet, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2
/// Fleet example configurations</a> in the <i>Amazon EC2 User Guide</i>.
class CapacityReservationOptions {
  /// Indicates whether to use unused Capacity Reservations for fulfilling
  /// On-Demand capacity.
  ///
  /// If you specify <code>use-capacity-reservations-first</code>, the fleet uses
  /// unused Capacity Reservations to fulfill On-Demand capacity up to the target
  /// On-Demand capacity. If multiple instance pools have unused Capacity
  /// Reservations, the On-Demand allocation strategy (<code>lowest-price</code>
  /// or <code>prioritized</code>) is applied. If the number of unused Capacity
  /// Reservations is less than the On-Demand target capacity, the remaining
  /// On-Demand target capacity is launched according to the On-Demand allocation
  /// strategy (<code>lowest-price</code> or <code>prioritized</code>).
  ///
  /// If you do not specify a value, the fleet fulfils the On-Demand capacity
  /// according to the chosen On-Demand allocation strategy.
  final FleetCapacityReservationUsageStrategy? usageStrategy;

  CapacityReservationOptions({
    this.usageStrategy,
  });

  Map<String, dynamic> toJson() {
    final usageStrategy = this.usageStrategy;
    return {
      if (usageStrategy != null) 'usageStrategy': usageStrategy.value,
    };
  }
}

/// Describes the strategy for using unused Capacity Reservations for fulfilling
/// On-Demand capacity.
/// <note>
/// This strategy can only be used if the EC2 Fleet is of type
/// <code>instant</code>.
/// </note>
/// For more information about Capacity Reservations, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand
/// Capacity Reservations</a> in the <i>Amazon EC2 User Guide</i>. For examples
/// of using Capacity Reservations in an EC2 Fleet, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2
/// Fleet example configurations</a> in the <i>Amazon EC2 User Guide</i>.
class CapacityReservationOptionsRequest {
  /// Indicates whether to use unused Capacity Reservations for fulfilling
  /// On-Demand capacity.
  ///
  /// If you specify <code>use-capacity-reservations-first</code>, the fleet uses
  /// unused Capacity Reservations to fulfill On-Demand capacity up to the target
  /// On-Demand capacity. If multiple instance pools have unused Capacity
  /// Reservations, the On-Demand allocation strategy (<code>lowest-price</code>
  /// or <code>prioritized</code>) is applied. If the number of unused Capacity
  /// Reservations is less than the On-Demand target capacity, the remaining
  /// On-Demand target capacity is launched according to the On-Demand allocation
  /// strategy (<code>lowest-price</code> or <code>prioritized</code>).
  ///
  /// If you do not specify a value, the fleet fulfils the On-Demand capacity
  /// according to the chosen On-Demand allocation strategy.
  final FleetCapacityReservationUsageStrategy? usageStrategy;

  CapacityReservationOptionsRequest({
    this.usageStrategy,
  });

  Map<String, dynamic> toJson() {
    final usageStrategy = this.usageStrategy;
    return {
      if (usageStrategy != null) 'UsageStrategy': usageStrategy.value,
    };
  }
}

enum CapacityReservationPreference {
  open('open'),
  none('none'),
  ;

  final String value;

  const CapacityReservationPreference(this.value);

  static CapacityReservationPreference fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CapacityReservationPreference'));
}

/// Describes an instance's Capacity Reservation targeting option. You can
/// specify only one parameter at a time. If you specify
/// <code>CapacityReservationPreference</code> and
/// <code>CapacityReservationTarget</code>, the request fails.
///
/// Use the <code>CapacityReservationPreference</code> parameter to configure
/// the instance to run as an On-Demand Instance or to run in any
/// <code>open</code> Capacity Reservation that has matching attributes
/// (instance type, platform, Availability Zone). Use the
/// <code>CapacityReservationTarget</code> parameter to explicitly target a
/// specific Capacity Reservation or a Capacity Reservation group.
class CapacityReservationSpecification {
  /// Indicates the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs as an On-Demand Instance.
  /// </li>
  /// </ul>
  final CapacityReservationPreference? capacityReservationPreference;

  /// Information about the target Capacity Reservation or Capacity Reservation
  /// group.
  final CapacityReservationTarget? capacityReservationTarget;

  CapacityReservationSpecification({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationPreference = this.capacityReservationPreference;
    final capacityReservationTarget = this.capacityReservationTarget;
    return {
      if (capacityReservationPreference != null)
        'CapacityReservationPreference': capacityReservationPreference.value,
      if (capacityReservationTarget != null)
        'CapacityReservationTarget': capacityReservationTarget,
    };
  }
}

/// Describes the instance's Capacity Reservation targeting preferences. The
/// action returns the <code>capacityReservationPreference</code> response
/// element if the instance is configured to run in On-Demand capacity, or if it
/// is configured in run in any <code>open</code> Capacity Reservation that has
/// matching attributes (instance type, platform, Availability Zone). The action
/// returns the <code>capacityReservationTarget</code> response element if the
/// instance explicily targets a specific Capacity Reservation or Capacity
/// Reservation group.
class CapacityReservationSpecificationResponse {
  /// Describes the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs in On-Demand capacity.
  /// </li>
  /// </ul>
  final CapacityReservationPreference? capacityReservationPreference;

  /// Information about the targeted Capacity Reservation or Capacity Reservation
  /// group.
  final CapacityReservationTargetResponse? capacityReservationTarget;

  CapacityReservationSpecificationResponse({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationPreference = this.capacityReservationPreference;
    final capacityReservationTarget = this.capacityReservationTarget;
    return {
      if (capacityReservationPreference != null)
        'capacityReservationPreference': capacityReservationPreference.value,
      if (capacityReservationTarget != null)
        'capacityReservationTarget': capacityReservationTarget,
    };
  }
}

enum CapacityReservationState {
  active('active'),
  expired('expired'),
  cancelled('cancelled'),
  pending('pending'),
  failed('failed'),
  scheduled('scheduled'),
  paymentPending('payment-pending'),
  paymentFailed('payment-failed'),
  ;

  final String value;

  const CapacityReservationState(this.value);

  static CapacityReservationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CapacityReservationState'));
}

/// Describes a target Capacity Reservation or Capacity Reservation group.
class CapacityReservationTarget {
  /// The ID of the Capacity Reservation in which to run the instance.
  final String? capacityReservationId;

  /// The ARN of the Capacity Reservation resource group in which to run the
  /// instance.
  final String? capacityReservationResourceGroupArn;

  CapacityReservationTarget({
    this.capacityReservationId,
    this.capacityReservationResourceGroupArn,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationId = this.capacityReservationId;
    final capacityReservationResourceGroupArn =
        this.capacityReservationResourceGroupArn;
    return {
      if (capacityReservationId != null)
        'CapacityReservationId': capacityReservationId,
      if (capacityReservationResourceGroupArn != null)
        'CapacityReservationResourceGroupArn':
            capacityReservationResourceGroupArn,
    };
  }
}

/// Describes a target Capacity Reservation or Capacity Reservation group.
class CapacityReservationTargetResponse {
  /// The ID of the targeted Capacity Reservation.
  final String? capacityReservationId;

  /// The ARN of the targeted Capacity Reservation group.
  final String? capacityReservationResourceGroupArn;

  CapacityReservationTargetResponse({
    this.capacityReservationId,
    this.capacityReservationResourceGroupArn,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationId = this.capacityReservationId;
    final capacityReservationResourceGroupArn =
        this.capacityReservationResourceGroupArn;
    return {
      if (capacityReservationId != null)
        'capacityReservationId': capacityReservationId,
      if (capacityReservationResourceGroupArn != null)
        'capacityReservationResourceGroupArn':
            capacityReservationResourceGroupArn,
    };
  }
}

enum CapacityReservationTenancy {
  $default('default'),
  dedicated('dedicated'),
  ;

  final String value;

  const CapacityReservationTenancy(this.value);

  static CapacityReservationTenancy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CapacityReservationTenancy'));
}

enum CapacityReservationType {
  $default('default'),
  capacityBlock('capacity-block'),
  ;

  final String value;

  const CapacityReservationType(this.value);

  static CapacityReservationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CapacityReservationType'));
}

/// Describes a carrier gateway.
class CarrierGateway {
  /// The ID of the carrier gateway.
  final String? carrierGatewayId;

  /// The Amazon Web Services account ID of the owner of the carrier gateway.
  final String? ownerId;

  /// The state of the carrier gateway.
  final CarrierGatewayState? state;

  /// The tags assigned to the carrier gateway.
  final List<Tag>? tags;

  /// The ID of the VPC associated with the carrier gateway.
  final String? vpcId;

  CarrierGateway({
    this.carrierGatewayId,
    this.ownerId,
    this.state,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final carrierGatewayId = this.carrierGatewayId;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (carrierGatewayId != null) 'carrierGatewayId': carrierGatewayId,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum CarrierGatewayState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const CarrierGatewayState(this.value);

  static CarrierGatewayState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CarrierGatewayState'));
}

/// Information about the client certificate used for authentication.
class CertificateAuthentication {
  /// The ARN of the client certificate.
  final String? clientRootCertificateChain;

  CertificateAuthentication({
    this.clientRootCertificateChain,
  });

  Map<String, dynamic> toJson() {
    final clientRootCertificateChain = this.clientRootCertificateChain;
    return {
      if (clientRootCertificateChain != null)
        'clientRootCertificateChain': clientRootCertificateChain,
    };
  }
}

/// Information about the client certificate to be used for authentication.
class CertificateAuthenticationRequest {
  /// The ARN of the client certificate. The certificate must be signed by a
  /// certificate authority (CA) and it must be provisioned in Certificate Manager
  /// (ACM).
  final String? clientRootCertificateChainArn;

  CertificateAuthenticationRequest({
    this.clientRootCertificateChainArn,
  });

  Map<String, dynamic> toJson() {
    final clientRootCertificateChainArn = this.clientRootCertificateChainArn;
    return {
      if (clientRootCertificateChainArn != null)
        'ClientRootCertificateChainArn': clientRootCertificateChainArn,
    };
  }
}

/// Provides authorization for Amazon to bring a specific IP address range to a
/// specific Amazon Web Services account using bring your own IP addresses
/// (BYOIP). For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip">Configuring
/// your BYOIP address range</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class CidrAuthorizationContext {
  /// The plain-text authorization message for the prefix and account.
  final String message;

  /// The signed authorization message for the prefix and account.
  final String signature;

  CidrAuthorizationContext({
    required this.message,
    required this.signature,
  });

  Map<String, dynamic> toJson() {
    final message = this.message;
    final signature = this.signature;
    return {
      'Message': message,
      'Signature': signature,
    };
  }
}

/// Describes an IPv4 CIDR block.
class CidrBlock {
  /// The IPv4 CIDR block.
  final String? cidrBlock;

  CidrBlock({
    this.cidrBlock,
  });

  Map<String, dynamic> toJson() {
    final cidrBlock = this.cidrBlock;
    return {
      if (cidrBlock != null) 'cidrBlock': cidrBlock,
    };
  }
}

/// <note>
/// Deprecated.
/// </note>
/// Describes the ClassicLink DNS support status of a VPC.
class ClassicLinkDnsSupport {
  /// Indicates whether ClassicLink DNS support is enabled for the VPC.
  final bool? classicLinkDnsSupported;

  /// The ID of the VPC.
  final String? vpcId;

  ClassicLinkDnsSupport({
    this.classicLinkDnsSupported,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final classicLinkDnsSupported = this.classicLinkDnsSupported;
    final vpcId = this.vpcId;
    return {
      if (classicLinkDnsSupported != null)
        'classicLinkDnsSupported': classicLinkDnsSupported,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// <note>
/// Deprecated.
/// </note>
/// Describes a linked EC2-Classic instance.
class ClassicLinkInstance {
  /// The security groups.
  final List<GroupIdentifier>? groups;

  /// The ID of the instance.
  final String? instanceId;

  /// Any tags assigned to the instance.
  final List<Tag>? tags;

  /// The ID of the VPC.
  final String? vpcId;

  ClassicLinkInstance({
    this.groups,
    this.instanceId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final groups = this.groups;
    final instanceId = this.instanceId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (groups != null) 'groupSet': groups,
      if (instanceId != null) 'instanceId': instanceId,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes a Classic Load Balancer.
class ClassicLoadBalancer {
  /// The name of the load balancer.
  final String? name;

  ClassicLoadBalancer({
    this.name,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    return {
      if (name != null) 'name': name,
    };
  }
}

/// Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet
/// registers the running Spot Instances with these Classic Load Balancers.
class ClassicLoadBalancersConfig {
  /// One or more Classic Load Balancers.
  final List<ClassicLoadBalancer>? classicLoadBalancers;

  ClassicLoadBalancersConfig({
    this.classicLoadBalancers,
  });

  Map<String, dynamic> toJson() {
    final classicLoadBalancers = this.classicLoadBalancers;
    return {
      if (classicLoadBalancers != null)
        'classicLoadBalancers': classicLoadBalancers,
    };
  }
}

/// Describes the state of a client certificate revocation list.
class ClientCertificateRevocationListStatus {
  /// The state of the client certificate revocation list.
  final ClientCertificateRevocationListStatusCode? code;

  /// A message about the status of the client certificate revocation list, if
  /// applicable.
  final String? message;

  ClientCertificateRevocationListStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum ClientCertificateRevocationListStatusCode {
  pending('pending'),
  active('active'),
  ;

  final String value;

  const ClientCertificateRevocationListStatusCode(this.value);

  static ClientCertificateRevocationListStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientCertificateRevocationListStatusCode'));
}

/// The options for managing connection authorization for new client
/// connections.
class ClientConnectOptions {
  /// Indicates whether client connect options are enabled. The default is
  /// <code>false</code> (not enabled).
  final bool? enabled;

  /// The Amazon Resource Name (ARN) of the Lambda function used for connection
  /// authorization.
  final String? lambdaFunctionArn;

  ClientConnectOptions({
    this.enabled,
    this.lambdaFunctionArn,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    final lambdaFunctionArn = this.lambdaFunctionArn;
    return {
      if (enabled != null) 'Enabled': enabled,
      if (lambdaFunctionArn != null) 'LambdaFunctionArn': lambdaFunctionArn,
    };
  }
}

/// The options for managing connection authorization for new client
/// connections.
class ClientConnectResponseOptions {
  /// Indicates whether client connect options are enabled.
  final bool? enabled;

  /// The Amazon Resource Name (ARN) of the Lambda function used for connection
  /// authorization.
  final String? lambdaFunctionArn;

  /// The status of any updates to the client connect options.
  final ClientVpnEndpointAttributeStatus? status;

  ClientConnectResponseOptions({
    this.enabled,
    this.lambdaFunctionArn,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    final lambdaFunctionArn = this.lambdaFunctionArn;
    final status = this.status;
    return {
      if (enabled != null) 'enabled': enabled,
      if (lambdaFunctionArn != null) 'lambdaFunctionArn': lambdaFunctionArn,
      if (status != null) 'status': status,
    };
  }
}

/// Describes the client-specific data.
class ClientData {
  /// A user-defined comment about the disk upload.
  final String? comment;

  /// The time that the disk upload ends.
  final DateTime? uploadEnd;

  /// The size of the uploaded disk image, in GiB.
  final double? uploadSize;

  /// The time that the disk upload starts.
  final DateTime? uploadStart;

  ClientData({
    this.comment,
    this.uploadEnd,
    this.uploadSize,
    this.uploadStart,
  });

  Map<String, dynamic> toJson() {
    final comment = this.comment;
    final uploadEnd = this.uploadEnd;
    final uploadSize = this.uploadSize;
    final uploadStart = this.uploadStart;
    return {
      if (comment != null) 'Comment': comment,
      if (uploadEnd != null) 'UploadEnd': iso8601ToJson(uploadEnd),
      if (uploadSize != null) 'UploadSize': uploadSize,
      if (uploadStart != null) 'UploadStart': iso8601ToJson(uploadStart),
    };
  }
}

/// Options for enabling a customizable text banner that will be displayed on
/// Amazon Web Services provided clients when a VPN session is established.
class ClientLoginBannerOptions {
  /// Customizable text that will be displayed in a banner on Amazon Web Services
  /// provided clients when a VPN session is established. UTF-8 encoded characters
  /// only. Maximum of 1400 characters.
  final String? bannerText;

  /// Enable or disable a customizable text banner that will be displayed on
  /// Amazon Web Services provided clients when a VPN session is established.
  ///
  /// Valid values: <code>true | false</code>
  ///
  /// Default value: <code>false</code>
  final bool? enabled;

  ClientLoginBannerOptions({
    this.bannerText,
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final bannerText = this.bannerText;
    final enabled = this.enabled;
    return {
      if (bannerText != null) 'BannerText': bannerText,
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

/// Current state of options for customizable text banner that will be displayed
/// on Amazon Web Services provided clients when a VPN session is established.
class ClientLoginBannerResponseOptions {
  /// Customizable text that will be displayed in a banner on Amazon Web Services
  /// provided clients when a VPN session is established. UTF-8 encoded characters
  /// only. Maximum of 1400 characters.
  final String? bannerText;

  /// Current state of text banner feature.
  ///
  /// Valid values: <code>true | false</code>
  final bool? enabled;

  ClientLoginBannerResponseOptions({
    this.bannerText,
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final bannerText = this.bannerText;
    final enabled = this.enabled;
    return {
      if (bannerText != null) 'bannerText': bannerText,
      if (enabled != null) 'enabled': enabled,
    };
  }
}

/// Describes the authentication methods used by a Client VPN endpoint. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html">Authentication</a>
/// in the <i>Client VPN Administrator Guide</i>.
class ClientVpnAuthentication {
  /// Information about the Active Directory, if applicable.
  final DirectoryServiceAuthentication? activeDirectory;

  /// Information about the IAM SAML identity provider, if applicable.
  final FederatedAuthentication? federatedAuthentication;

  /// Information about the authentication certificates, if applicable.
  final CertificateAuthentication? mutualAuthentication;

  /// The authentication type used.
  final ClientVpnAuthenticationType? type;

  ClientVpnAuthentication({
    this.activeDirectory,
    this.federatedAuthentication,
    this.mutualAuthentication,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final activeDirectory = this.activeDirectory;
    final federatedAuthentication = this.federatedAuthentication;
    final mutualAuthentication = this.mutualAuthentication;
    final type = this.type;
    return {
      if (activeDirectory != null) 'activeDirectory': activeDirectory,
      if (federatedAuthentication != null)
        'federatedAuthentication': federatedAuthentication,
      if (mutualAuthentication != null)
        'mutualAuthentication': mutualAuthentication,
      if (type != null) 'type': type.value,
    };
  }
}

/// Describes the authentication method to be used by a Client VPN endpoint. For
/// more information, see <a
/// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a>
/// in the <i>Client VPN Administrator Guide</i>.
class ClientVpnAuthenticationRequest {
  /// Information about the Active Directory to be used, if applicable. You must
  /// provide this information if <b>Type</b> is
  /// <code>directory-service-authentication</code>.
  final DirectoryServiceAuthenticationRequest? activeDirectory;

  /// Information about the IAM SAML identity provider to be used, if applicable.
  /// You must provide this information if <b>Type</b> is
  /// <code>federated-authentication</code>.
  final FederatedAuthenticationRequest? federatedAuthentication;

  /// Information about the authentication certificates to be used, if applicable.
  /// You must provide this information if <b>Type</b> is
  /// <code>certificate-authentication</code>.
  final CertificateAuthenticationRequest? mutualAuthentication;

  /// The type of client authentication to be used.
  final ClientVpnAuthenticationType? type;

  ClientVpnAuthenticationRequest({
    this.activeDirectory,
    this.federatedAuthentication,
    this.mutualAuthentication,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final activeDirectory = this.activeDirectory;
    final federatedAuthentication = this.federatedAuthentication;
    final mutualAuthentication = this.mutualAuthentication;
    final type = this.type;
    return {
      if (activeDirectory != null) 'ActiveDirectory': activeDirectory,
      if (federatedAuthentication != null)
        'FederatedAuthentication': federatedAuthentication,
      if (mutualAuthentication != null)
        'MutualAuthentication': mutualAuthentication,
      if (type != null) 'Type': type.value,
    };
  }
}

enum ClientVpnAuthenticationType {
  certificateAuthentication('certificate-authentication'),
  directoryServiceAuthentication('directory-service-authentication'),
  federatedAuthentication('federated-authentication'),
  ;

  final String value;

  const ClientVpnAuthenticationType(this.value);

  static ClientVpnAuthenticationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientVpnAuthenticationType'));
}

/// Describes the state of an authorization rule.
class ClientVpnAuthorizationRuleStatus {
  /// The state of the authorization rule.
  final ClientVpnAuthorizationRuleStatusCode? code;

  /// A message about the status of the authorization rule, if applicable.
  final String? message;

  ClientVpnAuthorizationRuleStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum ClientVpnAuthorizationRuleStatusCode {
  authorizing('authorizing'),
  active('active'),
  failed('failed'),
  revoking('revoking'),
  ;

  final String value;

  const ClientVpnAuthorizationRuleStatusCode(this.value);

  static ClientVpnAuthorizationRuleStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientVpnAuthorizationRuleStatusCode'));
}

/// Describes a client connection.
class ClientVpnConnection {
  /// The IP address of the client.
  final String? clientIp;

  /// The ID of the Client VPN endpoint to which the client is connected.
  final String? clientVpnEndpointId;

  /// The common name associated with the client. This is either the name of the
  /// client certificate, or the Active Directory user name.
  final String? commonName;

  /// The date and time the client connection was terminated.
  final String? connectionEndTime;

  /// The date and time the client connection was established.
  final String? connectionEstablishedTime;

  /// The ID of the client connection.
  final String? connectionId;

  /// The number of bytes received by the client.
  final String? egressBytes;

  /// The number of packets received by the client.
  final String? egressPackets;

  /// The number of bytes sent by the client.
  final String? ingressBytes;

  /// The number of packets sent by the client.
  final String? ingressPackets;

  /// The statuses returned by the client connect handler for posture compliance,
  /// if applicable.
  final List<String>? postureComplianceStatuses;

  /// The current state of the client connection.
  final ClientVpnConnectionStatus? status;

  /// The current date and time.
  final String? timestamp;

  /// The username of the client who established the client connection. This
  /// information is only provided if Active Directory client authentication is
  /// used.
  final String? username;

  ClientVpnConnection({
    this.clientIp,
    this.clientVpnEndpointId,
    this.commonName,
    this.connectionEndTime,
    this.connectionEstablishedTime,
    this.connectionId,
    this.egressBytes,
    this.egressPackets,
    this.ingressBytes,
    this.ingressPackets,
    this.postureComplianceStatuses,
    this.status,
    this.timestamp,
    this.username,
  });

  Map<String, dynamic> toJson() {
    final clientIp = this.clientIp;
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final commonName = this.commonName;
    final connectionEndTime = this.connectionEndTime;
    final connectionEstablishedTime = this.connectionEstablishedTime;
    final connectionId = this.connectionId;
    final egressBytes = this.egressBytes;
    final egressPackets = this.egressPackets;
    final ingressBytes = this.ingressBytes;
    final ingressPackets = this.ingressPackets;
    final postureComplianceStatuses = this.postureComplianceStatuses;
    final status = this.status;
    final timestamp = this.timestamp;
    final username = this.username;
    return {
      if (clientIp != null) 'clientIp': clientIp,
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (commonName != null) 'commonName': commonName,
      if (connectionEndTime != null) 'connectionEndTime': connectionEndTime,
      if (connectionEstablishedTime != null)
        'connectionEstablishedTime': connectionEstablishedTime,
      if (connectionId != null) 'connectionId': connectionId,
      if (egressBytes != null) 'egressBytes': egressBytes,
      if (egressPackets != null) 'egressPackets': egressPackets,
      if (ingressBytes != null) 'ingressBytes': ingressBytes,
      if (ingressPackets != null) 'ingressPackets': ingressPackets,
      if (postureComplianceStatuses != null)
        'postureComplianceStatusSet': postureComplianceStatuses,
      if (status != null) 'status': status,
      if (timestamp != null) 'timestamp': timestamp,
      if (username != null) 'username': username,
    };
  }
}

/// Describes the status of a client connection.
class ClientVpnConnectionStatus {
  /// The state of the client connection.
  final ClientVpnConnectionStatusCode? code;

  /// A message about the status of the client connection, if applicable.
  final String? message;

  ClientVpnConnectionStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum ClientVpnConnectionStatusCode {
  active('active'),
  failedToTerminate('failed-to-terminate'),
  terminating('terminating'),
  terminated('terminated'),
  ;

  final String value;

  const ClientVpnConnectionStatusCode(this.value);

  static ClientVpnConnectionStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientVpnConnectionStatusCode'));
}

/// Describes a Client VPN endpoint.
class ClientVpnEndpoint {
  /// Information about the associated target networks. A target network is a
  /// subnet in a VPC.
  final List<AssociatedTargetNetwork>? associatedTargetNetworks;

  /// Information about the authentication method used by the Client VPN endpoint.
  final List<ClientVpnAuthentication>? authenticationOptions;

  /// The IPv4 address range, in CIDR notation, from which client IP addresses are
  /// assigned.
  final String? clientCidrBlock;

  /// The options for managing connection authorization for new client
  /// connections.
  final ClientConnectResponseOptions? clientConnectOptions;

  /// Options for enabling a customizable text banner that will be displayed on
  /// Amazon Web Services provided clients when a VPN session is established.
  final ClientLoginBannerResponseOptions? clientLoginBannerOptions;

  /// The ID of the Client VPN endpoint.
  final String? clientVpnEndpointId;

  /// Information about the client connection logging options for the Client VPN
  /// endpoint.
  final ConnectionLogResponseOptions? connectionLogOptions;

  /// The date and time the Client VPN endpoint was created.
  final String? creationTime;

  /// The date and time the Client VPN endpoint was deleted, if applicable.
  final String? deletionTime;

  /// A brief description of the endpoint.
  final String? description;

  /// The DNS name to be used by clients when connecting to the Client VPN
  /// endpoint.
  final String? dnsName;

  /// Information about the DNS servers to be used for DNS resolution.
  final List<String>? dnsServers;

  /// The IDs of the security groups for the target network.
  final List<String>? securityGroupIds;

  /// The URL of the self-service portal.
  final String? selfServicePortalUrl;

  /// The ARN of the server certificate.
  final String? serverCertificateArn;

  /// The maximum VPN session duration time in hours.
  ///
  /// Valid values: <code>8 | 10 | 12 | 24</code>
  ///
  /// Default value: <code>24</code>
  final int? sessionTimeoutHours;

  /// Indicates whether split-tunnel is enabled in the Client VPN endpoint.
  ///
  /// For information about split-tunnel VPN endpoints, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel
  /// Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.
  final bool? splitTunnel;

  /// The current state of the Client VPN endpoint.
  final ClientVpnEndpointStatus? status;

  /// Any tags assigned to the Client VPN endpoint.
  final List<Tag>? tags;

  /// The transport protocol used by the Client VPN endpoint.
  final TransportProtocol? transportProtocol;

  /// The ID of the VPC.
  final String? vpcId;

  /// The port number for the Client VPN endpoint.
  final int? vpnPort;

  /// The protocol used by the VPN session.
  final VpnProtocol? vpnProtocol;

  ClientVpnEndpoint({
    this.associatedTargetNetworks,
    this.authenticationOptions,
    this.clientCidrBlock,
    this.clientConnectOptions,
    this.clientLoginBannerOptions,
    this.clientVpnEndpointId,
    this.connectionLogOptions,
    this.creationTime,
    this.deletionTime,
    this.description,
    this.dnsName,
    this.dnsServers,
    this.securityGroupIds,
    this.selfServicePortalUrl,
    this.serverCertificateArn,
    this.sessionTimeoutHours,
    this.splitTunnel,
    this.status,
    this.tags,
    this.transportProtocol,
    this.vpcId,
    this.vpnPort,
    this.vpnProtocol,
  });

  Map<String, dynamic> toJson() {
    final associatedTargetNetworks = this.associatedTargetNetworks;
    final authenticationOptions = this.authenticationOptions;
    final clientCidrBlock = this.clientCidrBlock;
    final clientConnectOptions = this.clientConnectOptions;
    final clientLoginBannerOptions = this.clientLoginBannerOptions;
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final connectionLogOptions = this.connectionLogOptions;
    final creationTime = this.creationTime;
    final deletionTime = this.deletionTime;
    final description = this.description;
    final dnsName = this.dnsName;
    final dnsServers = this.dnsServers;
    final securityGroupIds = this.securityGroupIds;
    final selfServicePortalUrl = this.selfServicePortalUrl;
    final serverCertificateArn = this.serverCertificateArn;
    final sessionTimeoutHours = this.sessionTimeoutHours;
    final splitTunnel = this.splitTunnel;
    final status = this.status;
    final tags = this.tags;
    final transportProtocol = this.transportProtocol;
    final vpcId = this.vpcId;
    final vpnPort = this.vpnPort;
    final vpnProtocol = this.vpnProtocol;
    return {
      if (associatedTargetNetworks != null)
        'associatedTargetNetwork': associatedTargetNetworks,
      if (authenticationOptions != null)
        'authenticationOptions': authenticationOptions,
      if (clientCidrBlock != null) 'clientCidrBlock': clientCidrBlock,
      if (clientConnectOptions != null)
        'clientConnectOptions': clientConnectOptions,
      if (clientLoginBannerOptions != null)
        'clientLoginBannerOptions': clientLoginBannerOptions,
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (connectionLogOptions != null)
        'connectionLogOptions': connectionLogOptions,
      if (creationTime != null) 'creationTime': creationTime,
      if (deletionTime != null) 'deletionTime': deletionTime,
      if (description != null) 'description': description,
      if (dnsName != null) 'dnsName': dnsName,
      if (dnsServers != null) 'dnsServer': dnsServers,
      if (securityGroupIds != null) 'securityGroupIdSet': securityGroupIds,
      if (selfServicePortalUrl != null)
        'selfServicePortalUrl': selfServicePortalUrl,
      if (serverCertificateArn != null)
        'serverCertificateArn': serverCertificateArn,
      if (sessionTimeoutHours != null)
        'sessionTimeoutHours': sessionTimeoutHours,
      if (splitTunnel != null) 'splitTunnel': splitTunnel,
      if (status != null) 'status': status,
      if (tags != null) 'tagSet': tags,
      if (transportProtocol != null)
        'transportProtocol': transportProtocol.value,
      if (vpcId != null) 'vpcId': vpcId,
      if (vpnPort != null) 'vpnPort': vpnPort,
      if (vpnProtocol != null) 'vpnProtocol': vpnProtocol.value,
    };
  }
}

/// Describes the status of the Client VPN endpoint attribute.
class ClientVpnEndpointAttributeStatus {
  /// The status code.
  final ClientVpnEndpointAttributeStatusCode? code;

  /// The status message.
  final String? message;

  ClientVpnEndpointAttributeStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum ClientVpnEndpointAttributeStatusCode {
  applying('applying'),
  applied('applied'),
  ;

  final String value;

  const ClientVpnEndpointAttributeStatusCode(this.value);

  static ClientVpnEndpointAttributeStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientVpnEndpointAttributeStatusCode'));
}

/// Describes the state of a Client VPN endpoint.
class ClientVpnEndpointStatus {
  /// The state of the Client VPN endpoint. Possible states include:
  ///
  /// <ul>
  /// <li>
  /// <code>pending-associate</code> - The Client VPN endpoint has been created
  /// but no target networks have been associated. The Client VPN endpoint cannot
  /// accept connections.
  /// </li>
  /// <li>
  /// <code>available</code> - The Client VPN endpoint has been created and a
  /// target network has been associated. The Client VPN endpoint can accept
  /// connections.
  /// </li>
  /// <li>
  /// <code>deleting</code> - The Client VPN endpoint is being deleted. The Client
  /// VPN endpoint cannot accept connections.
  /// </li>
  /// <li>
  /// <code>deleted</code> - The Client VPN endpoint has been deleted. The Client
  /// VPN endpoint cannot accept connections.
  /// </li>
  /// </ul>
  final ClientVpnEndpointStatusCode? code;

  /// A message about the status of the Client VPN endpoint.
  final String? message;

  ClientVpnEndpointStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum ClientVpnEndpointStatusCode {
  pendingAssociate('pending-associate'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const ClientVpnEndpointStatusCode(this.value);

  static ClientVpnEndpointStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientVpnEndpointStatusCode'));
}

/// Information about a Client VPN endpoint route.
class ClientVpnRoute {
  /// The ID of the Client VPN endpoint with which the route is associated.
  final String? clientVpnEndpointId;

  /// A brief description of the route.
  final String? description;

  /// The IPv4 address range, in CIDR notation, of the route destination.
  final String? destinationCidr;

  /// Indicates how the route was associated with the Client VPN endpoint.
  /// <code>associate</code> indicates that the route was automatically added when
  /// the target network was associated with the Client VPN endpoint.
  /// <code>add-route</code> indicates that the route was manually added using the
  /// <b>CreateClientVpnRoute</b> action.
  final String? origin;

  /// The current state of the route.
  final ClientVpnRouteStatus? status;

  /// The ID of the subnet through which traffic is routed.
  final String? targetSubnet;

  /// The route type.
  final String? type;

  ClientVpnRoute({
    this.clientVpnEndpointId,
    this.description,
    this.destinationCidr,
    this.origin,
    this.status,
    this.targetSubnet,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final description = this.description;
    final destinationCidr = this.destinationCidr;
    final origin = this.origin;
    final status = this.status;
    final targetSubnet = this.targetSubnet;
    final type = this.type;
    return {
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (description != null) 'description': description,
      if (destinationCidr != null) 'destinationCidr': destinationCidr,
      if (origin != null) 'origin': origin,
      if (status != null) 'status': status,
      if (targetSubnet != null) 'targetSubnet': targetSubnet,
      if (type != null) 'type': type,
    };
  }
}

/// Describes the state of a Client VPN endpoint route.
class ClientVpnRouteStatus {
  /// The state of the Client VPN endpoint route.
  final ClientVpnRouteStatusCode? code;

  /// A message about the status of the Client VPN endpoint route, if applicable.
  final String? message;

  ClientVpnRouteStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum ClientVpnRouteStatusCode {
  creating('creating'),
  active('active'),
  failed('failed'),
  deleting('deleting'),
  ;

  final String value;

  const ClientVpnRouteStatusCode(this.value);

  static ClientVpnRouteStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientVpnRouteStatusCode'));
}

/// Options for sending VPN tunnel logs to CloudWatch.
class CloudWatchLogOptions {
  /// Status of VPN tunnel logging feature. Default value is <code>False</code>.
  ///
  /// Valid values: <code>True</code> | <code>False</code>
  final bool? logEnabled;

  /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
  final String? logGroupArn;

  /// Configured log format. Default format is <code>json</code>.
  ///
  /// Valid values: <code>json</code> | <code>text</code>
  final String? logOutputFormat;

  CloudWatchLogOptions({
    this.logEnabled,
    this.logGroupArn,
    this.logOutputFormat,
  });

  Map<String, dynamic> toJson() {
    final logEnabled = this.logEnabled;
    final logGroupArn = this.logGroupArn;
    final logOutputFormat = this.logOutputFormat;
    return {
      if (logEnabled != null) 'logEnabled': logEnabled,
      if (logGroupArn != null) 'logGroupArn': logGroupArn,
      if (logOutputFormat != null) 'logOutputFormat': logOutputFormat,
    };
  }
}

/// Options for sending VPN tunnel logs to CloudWatch.
class CloudWatchLogOptionsSpecification {
  /// Enable or disable VPN tunnel logging feature. Default value is
  /// <code>False</code>.
  ///
  /// Valid values: <code>True</code> | <code>False</code>
  final bool? logEnabled;

  /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
  final String? logGroupArn;

  /// Set log format. Default format is <code>json</code>.
  ///
  /// Valid values: <code>json</code> | <code>text</code>
  final String? logOutputFormat;

  CloudWatchLogOptionsSpecification({
    this.logEnabled,
    this.logGroupArn,
    this.logOutputFormat,
  });

  Map<String, dynamic> toJson() {
    final logEnabled = this.logEnabled;
    final logGroupArn = this.logGroupArn;
    final logOutputFormat = this.logOutputFormat;
    return {
      if (logEnabled != null) 'LogEnabled': logEnabled,
      if (logGroupArn != null) 'LogGroupArn': logGroupArn,
      if (logOutputFormat != null) 'LogOutputFormat': logOutputFormat,
    };
  }
}

/// Describes address usage for a customer-owned address pool.
class CoipAddressUsage {
  /// The allocation ID of the address.
  final String? allocationId;

  /// The Amazon Web Services account ID.
  final String? awsAccountId;

  /// The Amazon Web Services service.
  final String? awsService;

  /// The customer-owned IP address.
  final String? coIp;

  CoipAddressUsage({
    this.allocationId,
    this.awsAccountId,
    this.awsService,
    this.coIp,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final awsAccountId = this.awsAccountId;
    final awsService = this.awsService;
    final coIp = this.coIp;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (awsAccountId != null) 'awsAccountId': awsAccountId,
      if (awsService != null) 'awsService': awsService,
      if (coIp != null) 'coIp': coIp,
    };
  }
}

/// Information about a customer-owned IP address range.
class CoipCidr {
  /// An address range in a customer-owned IP address space.
  final String? cidr;

  /// The ID of the address pool.
  final String? coipPoolId;

  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  CoipCidr({
    this.cidr,
    this.coipPoolId,
    this.localGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final coipPoolId = this.coipPoolId;
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    return {
      if (cidr != null) 'cidr': cidr,
      if (coipPoolId != null) 'coipPoolId': coipPoolId,
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
    };
  }
}

/// Describes a customer-owned address pool.
class CoipPool {
  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  /// The ARN of the address pool.
  final String? poolArn;

  /// The address ranges of the address pool.
  final List<String>? poolCidrs;

  /// The ID of the address pool.
  final String? poolId;

  /// The tags.
  final List<Tag>? tags;

  CoipPool({
    this.localGatewayRouteTableId,
    this.poolArn,
    this.poolCidrs,
    this.poolId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    final poolArn = this.poolArn;
    final poolCidrs = this.poolCidrs;
    final poolId = this.poolId;
    final tags = this.tags;
    return {
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
      if (poolArn != null) 'poolArn': poolArn,
      if (poolCidrs != null) 'poolCidrSet': poolCidrs,
      if (poolId != null) 'poolId': poolId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

class ConfirmProductInstanceResult {
  /// The Amazon Web Services account ID of the instance owner. This is only
  /// present if the product code is attached to the instance.
  final String? ownerId;

  /// The return value of the request. Returns <code>true</code> if the specified
  /// product code is owned by the requester and associated with the specified
  /// instance.
  final bool? returnValue;

  ConfirmProductInstanceResult({
    this.ownerId,
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final ownerId = this.ownerId;
    final returnValue = this.returnValue;
    return {
      if (ownerId != null) 'ownerId': ownerId,
      if (returnValue != null) 'return': returnValue,
    };
  }
}

/// Describes the client connection logging options for the Client VPN endpoint.
class ConnectionLogOptions {
  /// The name of the CloudWatch Logs log group. Required if connection logging is
  /// enabled.
  final String? cloudwatchLogGroup;

  /// The name of the CloudWatch Logs log stream to which the connection data is
  /// published.
  final String? cloudwatchLogStream;

  /// Indicates whether connection logging is enabled.
  final bool? enabled;

  ConnectionLogOptions({
    this.cloudwatchLogGroup,
    this.cloudwatchLogStream,
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final cloudwatchLogGroup = this.cloudwatchLogGroup;
    final cloudwatchLogStream = this.cloudwatchLogStream;
    final enabled = this.enabled;
    return {
      if (cloudwatchLogGroup != null) 'CloudwatchLogGroup': cloudwatchLogGroup,
      if (cloudwatchLogStream != null)
        'CloudwatchLogStream': cloudwatchLogStream,
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

/// Information about the client connection logging options for a Client VPN
/// endpoint.
class ConnectionLogResponseOptions {
  /// The name of the Amazon CloudWatch Logs log group to which connection logging
  /// data is published.
  final String? cloudwatchLogGroup;

  /// The name of the Amazon CloudWatch Logs log stream to which connection
  /// logging data is published.
  final String? cloudwatchLogStream;

  /// Indicates whether client connection logging is enabled for the Client VPN
  /// endpoint.
  final bool? enabled;

  ConnectionLogResponseOptions({
    this.cloudwatchLogGroup,
    this.cloudwatchLogStream,
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final cloudwatchLogGroup = this.cloudwatchLogGroup;
    final cloudwatchLogStream = this.cloudwatchLogStream;
    final enabled = this.enabled;
    return {
      if (cloudwatchLogGroup != null) 'CloudwatchLogGroup': cloudwatchLogGroup,
      if (cloudwatchLogStream != null)
        'CloudwatchLogStream': cloudwatchLogStream,
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

/// Describes a connection notification for a VPC endpoint or VPC endpoint
/// service.
class ConnectionNotification {
  /// The events for the notification. Valid values are <code>Accept</code>,
  /// <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
  final List<String>? connectionEvents;

  /// The ARN of the SNS topic for the notification.
  final String? connectionNotificationArn;

  /// The ID of the notification.
  final String? connectionNotificationId;

  /// The state of the notification.
  final ConnectionNotificationState? connectionNotificationState;

  /// The type of notification.
  final ConnectionNotificationType? connectionNotificationType;

  /// The ID of the endpoint service.
  final String? serviceId;

  /// The ID of the VPC endpoint.
  final String? vpcEndpointId;

  ConnectionNotification({
    this.connectionEvents,
    this.connectionNotificationArn,
    this.connectionNotificationId,
    this.connectionNotificationState,
    this.connectionNotificationType,
    this.serviceId,
    this.vpcEndpointId,
  });

  Map<String, dynamic> toJson() {
    final connectionEvents = this.connectionEvents;
    final connectionNotificationArn = this.connectionNotificationArn;
    final connectionNotificationId = this.connectionNotificationId;
    final connectionNotificationState = this.connectionNotificationState;
    final connectionNotificationType = this.connectionNotificationType;
    final serviceId = this.serviceId;
    final vpcEndpointId = this.vpcEndpointId;
    return {
      if (connectionEvents != null) 'connectionEvents': connectionEvents,
      if (connectionNotificationArn != null)
        'connectionNotificationArn': connectionNotificationArn,
      if (connectionNotificationId != null)
        'connectionNotificationId': connectionNotificationId,
      if (connectionNotificationState != null)
        'connectionNotificationState': connectionNotificationState.value,
      if (connectionNotificationType != null)
        'connectionNotificationType': connectionNotificationType.value,
      if (serviceId != null) 'serviceId': serviceId,
      if (vpcEndpointId != null) 'vpcEndpointId': vpcEndpointId,
    };
  }
}

enum ConnectionNotificationState {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ConnectionNotificationState(this.value);

  static ConnectionNotificationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ConnectionNotificationState'));
}

enum ConnectionNotificationType {
  topic('Topic'),
  ;

  final String value;

  const ConnectionNotificationType(this.value);

  static ConnectionNotificationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ConnectionNotificationType'));
}

/// A security group connection tracking configuration that enables you to set
/// the idle timeout for connection tracking on an Elastic network interface.
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
/// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
class ConnectionTrackingConfiguration {
  /// Timeout (in seconds) for idle TCP connections in an established state. Min:
  /// 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds.
  /// Recommended: Less than 432000 seconds.
  final int? tcpEstablishedTimeout;

  /// Timeout (in seconds) for idle UDP flows classified as streams which have
  /// seen more than one request-response transaction. Min: 60 seconds. Max: 180
  /// seconds (3 minutes). Default: 180 seconds.
  final int? udpStreamTimeout;

  /// Timeout (in seconds) for idle UDP flows that have seen traffic only in a
  /// single direction or a single request-response transaction. Min: 30 seconds.
  /// Max: 60 seconds. Default: 30 seconds.
  final int? udpTimeout;

  ConnectionTrackingConfiguration({
    this.tcpEstablishedTimeout,
    this.udpStreamTimeout,
    this.udpTimeout,
  });

  Map<String, dynamic> toJson() {
    final tcpEstablishedTimeout = this.tcpEstablishedTimeout;
    final udpStreamTimeout = this.udpStreamTimeout;
    final udpTimeout = this.udpTimeout;
    return {
      if (tcpEstablishedTimeout != null)
        'tcpEstablishedTimeout': tcpEstablishedTimeout,
      if (udpStreamTimeout != null) 'udpStreamTimeout': udpStreamTimeout,
      if (udpTimeout != null) 'udpTimeout': udpTimeout,
    };
  }
}

/// A security group connection tracking specification that enables you to set
/// the idle timeout for connection tracking on an Elastic network interface.
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
/// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
class ConnectionTrackingSpecification {
  /// Timeout (in seconds) for idle TCP connections in an established state. Min:
  /// 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds.
  /// Recommended: Less than 432000 seconds.
  final int? tcpEstablishedTimeout;

  /// Timeout (in seconds) for idle UDP flows classified as streams which have
  /// seen more than one request-response transaction. Min: 60 seconds. Max: 180
  /// seconds (3 minutes). Default: 180 seconds.
  final int? udpStreamTimeout;

  /// Timeout (in seconds) for idle UDP flows that have seen traffic only in a
  /// single direction or a single request-response transaction. Min: 30 seconds.
  /// Max: 60 seconds. Default: 30 seconds.
  final int? udpTimeout;

  ConnectionTrackingSpecification({
    this.tcpEstablishedTimeout,
    this.udpStreamTimeout,
    this.udpTimeout,
  });

  Map<String, dynamic> toJson() {
    final tcpEstablishedTimeout = this.tcpEstablishedTimeout;
    final udpStreamTimeout = this.udpStreamTimeout;
    final udpTimeout = this.udpTimeout;
    return {
      if (tcpEstablishedTimeout != null)
        'tcpEstablishedTimeout': tcpEstablishedTimeout,
      if (udpStreamTimeout != null) 'udpStreamTimeout': udpStreamTimeout,
      if (udpTimeout != null) 'udpTimeout': udpTimeout,
    };
  }
}

/// A security group connection tracking specification request that enables you
/// to set the idle timeout for connection tracking on an Elastic network
/// interface. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
/// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
class ConnectionTrackingSpecificationRequest {
  /// Timeout (in seconds) for idle TCP connections in an established state. Min:
  /// 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds.
  /// Recommended: Less than 432000 seconds.
  final int? tcpEstablishedTimeout;

  /// Timeout (in seconds) for idle UDP flows classified as streams which have
  /// seen more than one request-response transaction. Min: 60 seconds. Max: 180
  /// seconds (3 minutes). Default: 180 seconds.
  final int? udpStreamTimeout;

  /// Timeout (in seconds) for idle UDP flows that have seen traffic only in a
  /// single direction or a single request-response transaction. Min: 30 seconds.
  /// Max: 60 seconds. Default: 30 seconds.
  final int? udpTimeout;

  ConnectionTrackingSpecificationRequest({
    this.tcpEstablishedTimeout,
    this.udpStreamTimeout,
    this.udpTimeout,
  });

  Map<String, dynamic> toJson() {
    final tcpEstablishedTimeout = this.tcpEstablishedTimeout;
    final udpStreamTimeout = this.udpStreamTimeout;
    final udpTimeout = this.udpTimeout;
    return {
      if (tcpEstablishedTimeout != null)
        'TcpEstablishedTimeout': tcpEstablishedTimeout,
      if (udpStreamTimeout != null) 'UdpStreamTimeout': udpStreamTimeout,
      if (udpTimeout != null) 'UdpTimeout': udpTimeout,
    };
  }
}

/// A security group connection tracking specification response that enables you
/// to set the idle timeout for connection tracking on an Elastic network
/// interface. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
/// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
class ConnectionTrackingSpecificationResponse {
  /// Timeout (in seconds) for idle TCP connections in an established state. Min:
  /// 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds.
  /// Recommended: Less than 432000 seconds.
  final int? tcpEstablishedTimeout;

  /// Timeout (in seconds) for idle UDP flows classified as streams which have
  /// seen more than one request-response transaction. Min: 60 seconds. Max: 180
  /// seconds (3 minutes). Default: 180 seconds.
  final int? udpStreamTimeout;

  /// Timeout (in seconds) for idle UDP flows that have seen traffic only in a
  /// single direction or a single request-response transaction. Min: 30 seconds.
  /// Max: 60 seconds. Default: 30 seconds.
  final int? udpTimeout;

  ConnectionTrackingSpecificationResponse({
    this.tcpEstablishedTimeout,
    this.udpStreamTimeout,
    this.udpTimeout,
  });

  Map<String, dynamic> toJson() {
    final tcpEstablishedTimeout = this.tcpEstablishedTimeout;
    final udpStreamTimeout = this.udpStreamTimeout;
    final udpTimeout = this.udpTimeout;
    return {
      if (tcpEstablishedTimeout != null)
        'tcpEstablishedTimeout': tcpEstablishedTimeout,
      if (udpStreamTimeout != null) 'udpStreamTimeout': udpStreamTimeout,
      if (udpTimeout != null) 'udpTimeout': udpTimeout,
    };
  }
}

enum ConnectivityType {
  private('private'),
  public('public'),
  ;

  final String value;

  const ConnectivityType(this.value);

  static ConnectivityType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ConnectivityType'));
}

enum ContainerFormat {
  ova('ova'),
  ;

  final String value;

  const ContainerFormat(this.value);

  static ContainerFormat fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ContainerFormat'));
}

/// Describes a conversion task.
class ConversionTask {
  /// The ID of the conversion task.
  final String? conversionTaskId;

  /// The time when the task expires. If the upload isn't complete before the
  /// expiration time, we automatically cancel the task.
  final String? expirationTime;

  /// If the task is for importing an instance, this contains information about
  /// the import instance task.
  final ImportInstanceTaskDetails? importInstance;

  /// If the task is for importing a volume, this contains information about the
  /// import volume task.
  final ImportVolumeTaskDetails? importVolume;

  /// The state of the conversion task.
  final ConversionTaskState? state;

  /// The status message related to the conversion task.
  final String? statusMessage;

  /// Any tags assigned to the task.
  final List<Tag>? tags;

  ConversionTask({
    this.conversionTaskId,
    this.expirationTime,
    this.importInstance,
    this.importVolume,
    this.state,
    this.statusMessage,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final conversionTaskId = this.conversionTaskId;
    final expirationTime = this.expirationTime;
    final importInstance = this.importInstance;
    final importVolume = this.importVolume;
    final state = this.state;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    return {
      if (conversionTaskId != null) 'conversionTaskId': conversionTaskId,
      if (expirationTime != null) 'expirationTime': expirationTime,
      if (importInstance != null) 'importInstance': importInstance,
      if (importVolume != null) 'importVolume': importVolume,
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum ConversionTaskState {
  active('active'),
  cancelling('cancelling'),
  cancelled('cancelled'),
  completed('completed'),
  ;

  final String value;

  const ConversionTaskState(this.value);

  static ConversionTaskState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ConversionTaskState'));
}

class CopyFpgaImageResult {
  /// The ID of the new AFI.
  final String? fpgaImageId;

  CopyFpgaImageResult({
    this.fpgaImageId,
  });

  Map<String, dynamic> toJson() {
    final fpgaImageId = this.fpgaImageId;
    return {
      if (fpgaImageId != null) 'fpgaImageId': fpgaImageId,
    };
  }
}

/// Contains the output of CopyImage.
class CopyImageResult {
  /// The ID of the new AMI.
  final String? imageId;

  CopyImageResult({
    this.imageId,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    return {
      if (imageId != null) 'imageId': imageId,
    };
  }
}

class CopySnapshotResult {
  /// The ID of the new snapshot.
  final String? snapshotId;

  /// Any tags applied to the new snapshot.
  final List<Tag>? tags;

  CopySnapshotResult({
    this.snapshotId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final snapshotId = this.snapshotId;
    final tags = this.tags;
    return {
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum CopyTagsFromSource {
  volume('volume'),
  ;

  final String value;

  const CopyTagsFromSource(this.value);

  static CopyTagsFromSource fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CopyTagsFromSource'));
}

enum CpuManufacturer {
  intel('intel'),
  amd('amd'),
  amazonWebServices('amazon-web-services'),
  ;

  final String value;

  const CpuManufacturer(this.value);

  static CpuManufacturer fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CpuManufacturer'));
}

/// The CPU options for the instance.
class CpuOptions {
  /// Indicates whether the instance is enabled for AMD SEV-SNP. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html">AMD
  /// SEV-SNP</a>.
  final AmdSevSnpSpecification? amdSevSnp;

  /// The number of CPU cores for the instance.
  final int? coreCount;

  /// The number of threads per CPU core.
  final int? threadsPerCore;

  CpuOptions({
    this.amdSevSnp,
    this.coreCount,
    this.threadsPerCore,
  });

  Map<String, dynamic> toJson() {
    final amdSevSnp = this.amdSevSnp;
    final coreCount = this.coreCount;
    final threadsPerCore = this.threadsPerCore;
    return {
      if (amdSevSnp != null) 'amdSevSnp': amdSevSnp.value,
      if (coreCount != null) 'coreCount': coreCount,
      if (threadsPerCore != null) 'threadsPerCore': threadsPerCore,
    };
  }
}

/// The CPU options for the instance. Both the core count and threads per core
/// must be specified in the request.
class CpuOptionsRequest {
  /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is
  /// supported with M6a, R6a, and C6a instance types only. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html">AMD
  /// SEV-SNP</a>.
  final AmdSevSnpSpecification? amdSevSnp;

  /// The number of CPU cores for the instance.
  final int? coreCount;

  /// The number of threads per CPU core. To disable multithreading for the
  /// instance, specify a value of <code>1</code>. Otherwise, specify the default
  /// value of <code>2</code>.
  final int? threadsPerCore;

  CpuOptionsRequest({
    this.amdSevSnp,
    this.coreCount,
    this.threadsPerCore,
  });

  Map<String, dynamic> toJson() {
    final amdSevSnp = this.amdSevSnp;
    final coreCount = this.coreCount;
    final threadsPerCore = this.threadsPerCore;
    return {
      if (amdSevSnp != null) 'AmdSevSnp': amdSevSnp.value,
      if (coreCount != null) 'CoreCount': coreCount,
      if (threadsPerCore != null) 'ThreadsPerCore': threadsPerCore,
    };
  }
}

class CreateCapacityReservationFleetResult {
  /// The allocation strategy used by the Capacity Reservation Fleet.
  final String? allocationStrategy;

  /// The ID of the Capacity Reservation Fleet.
  final String? capacityReservationFleetId;

  /// The date and time at which the Capacity Reservation Fleet was created.
  final DateTime? createTime;

  /// The date and time at which the Capacity Reservation Fleet expires.
  final DateTime? endDate;

  /// Information about the individual Capacity Reservations in the Capacity
  /// Reservation Fleet.
  final List<FleetCapacityReservation>? fleetCapacityReservations;

  /// The instance matching criteria for the Capacity Reservation Fleet.
  final FleetInstanceMatchCriteria? instanceMatchCriteria;

  /// The status of the Capacity Reservation Fleet.
  final CapacityReservationFleetState? state;

  /// The tags assigned to the Capacity Reservation Fleet.
  final List<Tag>? tags;

  /// Indicates the tenancy of Capacity Reservation Fleet.
  final FleetCapacityReservationTenancy? tenancy;

  /// The requested capacity units that have been successfully reserved.
  final double? totalFulfilledCapacity;

  /// The total number of capacity units for which the Capacity Reservation Fleet
  /// reserves capacity.
  final int? totalTargetCapacity;

  CreateCapacityReservationFleetResult({
    this.allocationStrategy,
    this.capacityReservationFleetId,
    this.createTime,
    this.endDate,
    this.fleetCapacityReservations,
    this.instanceMatchCriteria,
    this.state,
    this.tags,
    this.tenancy,
    this.totalFulfilledCapacity,
    this.totalTargetCapacity,
  });

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final capacityReservationFleetId = this.capacityReservationFleetId;
    final createTime = this.createTime;
    final endDate = this.endDate;
    final fleetCapacityReservations = this.fleetCapacityReservations;
    final instanceMatchCriteria = this.instanceMatchCriteria;
    final state = this.state;
    final tags = this.tags;
    final tenancy = this.tenancy;
    final totalFulfilledCapacity = this.totalFulfilledCapacity;
    final totalTargetCapacity = this.totalTargetCapacity;
    return {
      if (allocationStrategy != null) 'allocationStrategy': allocationStrategy,
      if (capacityReservationFleetId != null)
        'capacityReservationFleetId': capacityReservationFleetId,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (endDate != null) 'endDate': iso8601ToJson(endDate),
      if (fleetCapacityReservations != null)
        'fleetCapacityReservationSet': fleetCapacityReservations,
      if (instanceMatchCriteria != null)
        'instanceMatchCriteria': instanceMatchCriteria.value,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (tenancy != null) 'tenancy': tenancy.value,
      if (totalFulfilledCapacity != null)
        'totalFulfilledCapacity': totalFulfilledCapacity,
      if (totalTargetCapacity != null)
        'totalTargetCapacity': totalTargetCapacity,
    };
  }
}

class CreateCapacityReservationResult {
  /// Information about the Capacity Reservation.
  final CapacityReservation? capacityReservation;

  CreateCapacityReservationResult({
    this.capacityReservation,
  });

  Map<String, dynamic> toJson() {
    final capacityReservation = this.capacityReservation;
    return {
      if (capacityReservation != null)
        'capacityReservation': capacityReservation,
    };
  }
}

class CreateCarrierGatewayResult {
  /// Information about the carrier gateway.
  final CarrierGateway? carrierGateway;

  CreateCarrierGatewayResult({
    this.carrierGateway,
  });

  Map<String, dynamic> toJson() {
    final carrierGateway = this.carrierGateway;
    return {
      if (carrierGateway != null) 'carrierGateway': carrierGateway,
    };
  }
}

class CreateClientVpnEndpointResult {
  /// The ID of the Client VPN endpoint.
  final String? clientVpnEndpointId;

  /// The DNS name to be used by clients when establishing their VPN session.
  final String? dnsName;

  /// The current state of the Client VPN endpoint.
  final ClientVpnEndpointStatus? status;

  CreateClientVpnEndpointResult({
    this.clientVpnEndpointId,
    this.dnsName,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final dnsName = this.dnsName;
    final status = this.status;
    return {
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (dnsName != null) 'dnsName': dnsName,
      if (status != null) 'status': status,
    };
  }
}

class CreateClientVpnRouteResult {
  /// The current state of the route.
  final ClientVpnRouteStatus? status;

  CreateClientVpnRouteResult({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'status': status,
    };
  }
}

class CreateCoipCidrResult {
  /// Information about a range of customer-owned IP addresses.
  final CoipCidr? coipCidr;

  CreateCoipCidrResult({
    this.coipCidr,
  });

  Map<String, dynamic> toJson() {
    final coipCidr = this.coipCidr;
    return {
      if (coipCidr != null) 'coipCidr': coipCidr,
    };
  }
}

class CreateCoipPoolResult {
  /// Information about the CoIP address pool.
  final CoipPool? coipPool;

  CreateCoipPoolResult({
    this.coipPool,
  });

  Map<String, dynamic> toJson() {
    final coipPool = this.coipPool;
    return {
      if (coipPool != null) 'coipPool': coipPool,
    };
  }
}

/// Contains the output of CreateCustomerGateway.
class CreateCustomerGatewayResult {
  /// Information about the customer gateway.
  final CustomerGateway? customerGateway;

  CreateCustomerGatewayResult({
    this.customerGateway,
  });

  Map<String, dynamic> toJson() {
    final customerGateway = this.customerGateway;
    return {
      if (customerGateway != null) 'customerGateway': customerGateway,
    };
  }
}

class CreateDefaultSubnetResult {
  /// Information about the subnet.
  final Subnet? subnet;

  CreateDefaultSubnetResult({
    this.subnet,
  });

  Map<String, dynamic> toJson() {
    final subnet = this.subnet;
    return {
      if (subnet != null) 'subnet': subnet,
    };
  }
}

class CreateDefaultVpcResult {
  /// Information about the VPC.
  final Vpc? vpc;

  CreateDefaultVpcResult({
    this.vpc,
  });

  Map<String, dynamic> toJson() {
    final vpc = this.vpc;
    return {
      if (vpc != null) 'vpc': vpc,
    };
  }
}

class CreateDhcpOptionsResult {
  /// A set of DHCP options.
  final DhcpOptions? dhcpOptions;

  CreateDhcpOptionsResult({
    this.dhcpOptions,
  });

  Map<String, dynamic> toJson() {
    final dhcpOptions = this.dhcpOptions;
    return {
      if (dhcpOptions != null) 'dhcpOptions': dhcpOptions,
    };
  }
}

class CreateEgressOnlyInternetGatewayResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String? clientToken;

  /// Information about the egress-only internet gateway.
  final EgressOnlyInternetGateway? egressOnlyInternetGateway;

  CreateEgressOnlyInternetGatewayResult({
    this.clientToken,
    this.egressOnlyInternetGateway,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final egressOnlyInternetGateway = this.egressOnlyInternetGateway;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (egressOnlyInternetGateway != null)
        'egressOnlyInternetGateway': egressOnlyInternetGateway,
    };
  }
}

/// Describes the instances that could not be launched by the fleet.
class CreateFleetError {
  /// The error code that indicates why the instance could not be launched. For
  /// more information about error codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// codes</a>.
  final String? errorCode;

  /// The error message that describes why the instance could not be launched. For
  /// more information about error messages, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// codes</a>.
  final String? errorMessage;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse? launchTemplateAndOverrides;

  /// Indicates if the instance that could not be launched was a Spot Instance or
  /// On-Demand Instance.
  final InstanceLifecycle? lifecycle;

  CreateFleetError({
    this.errorCode,
    this.errorMessage,
    this.launchTemplateAndOverrides,
    this.lifecycle,
  });

  Map<String, dynamic> toJson() {
    final errorCode = this.errorCode;
    final errorMessage = this.errorMessage;
    final launchTemplateAndOverrides = this.launchTemplateAndOverrides;
    final lifecycle = this.lifecycle;
    return {
      if (errorCode != null) 'errorCode': errorCode,
      if (errorMessage != null) 'errorMessage': errorMessage,
      if (launchTemplateAndOverrides != null)
        'launchTemplateAndOverrides': launchTemplateAndOverrides,
      if (lifecycle != null) 'lifecycle': lifecycle.value,
    };
  }
}

/// Describes the instances that were launched by the fleet.
class CreateFleetInstance {
  /// The IDs of the instances.
  final List<String>? instanceIds;

  /// The instance type.
  final InstanceType? instanceType;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse? launchTemplateAndOverrides;

  /// Indicates if the instance that was launched is a Spot Instance or On-Demand
  /// Instance.
  final InstanceLifecycle? lifecycle;

  /// The value is <code>Windows</code> for Windows instances. Otherwise, the
  /// value is blank.
  final PlatformValues? platform;

  CreateFleetInstance({
    this.instanceIds,
    this.instanceType,
    this.launchTemplateAndOverrides,
    this.lifecycle,
    this.platform,
  });

  Map<String, dynamic> toJson() {
    final instanceIds = this.instanceIds;
    final instanceType = this.instanceType;
    final launchTemplateAndOverrides = this.launchTemplateAndOverrides;
    final lifecycle = this.lifecycle;
    final platform = this.platform;
    return {
      if (instanceIds != null) 'instanceIds': instanceIds,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (launchTemplateAndOverrides != null)
        'launchTemplateAndOverrides': launchTemplateAndOverrides,
      if (lifecycle != null) 'lifecycle': lifecycle.value,
      if (platform != null) 'platform': platform.value,
    };
  }
}

class CreateFleetResult {
  /// Information about the instances that could not be launched by the fleet.
  /// Supported only for fleets of type <code>instant</code>.
  final List<CreateFleetError>? errors;

  /// The ID of the EC2 Fleet.
  final String? fleetId;

  /// Information about the instances that were launched by the fleet. Supported
  /// only for fleets of type <code>instant</code>.
  final List<CreateFleetInstance>? instances;

  CreateFleetResult({
    this.errors,
    this.fleetId,
    this.instances,
  });

  Map<String, dynamic> toJson() {
    final errors = this.errors;
    final fleetId = this.fleetId;
    final instances = this.instances;
    return {
      if (errors != null) 'errorSet': errors,
      if (fleetId != null) 'fleetId': fleetId,
      if (instances != null) 'fleetInstanceSet': instances,
    };
  }
}

class CreateFlowLogsResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String? clientToken;

  /// The IDs of the flow logs.
  final List<String>? flowLogIds;

  /// Information about the flow logs that could not be created successfully.
  final List<UnsuccessfulItem>? unsuccessful;

  CreateFlowLogsResult({
    this.clientToken,
    this.flowLogIds,
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final flowLogIds = this.flowLogIds;
    final unsuccessful = this.unsuccessful;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (flowLogIds != null) 'flowLogIdSet': flowLogIds,
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class CreateFpgaImageResult {
  /// The global FPGA image identifier (AGFI ID).
  final String? fpgaImageGlobalId;

  /// The FPGA image identifier (AFI ID).
  final String? fpgaImageId;

  CreateFpgaImageResult({
    this.fpgaImageGlobalId,
    this.fpgaImageId,
  });

  Map<String, dynamic> toJson() {
    final fpgaImageGlobalId = this.fpgaImageGlobalId;
    final fpgaImageId = this.fpgaImageId;
    return {
      if (fpgaImageGlobalId != null) 'fpgaImageGlobalId': fpgaImageGlobalId,
      if (fpgaImageId != null) 'fpgaImageId': fpgaImageId,
    };
  }
}

class CreateImageResult {
  /// The ID of the new AMI.
  final String? imageId;

  CreateImageResult({
    this.imageId,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    return {
      if (imageId != null) 'imageId': imageId,
    };
  }
}

class CreateInstanceConnectEndpointResult {
  /// Unique, case-sensitive idempotency token provided by the client in the the
  /// request.
  final String? clientToken;

  /// Information about the EC2 Instance Connect Endpoint.
  final Ec2InstanceConnectEndpoint? instanceConnectEndpoint;

  CreateInstanceConnectEndpointResult({
    this.clientToken,
    this.instanceConnectEndpoint,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final instanceConnectEndpoint = this.instanceConnectEndpoint;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (instanceConnectEndpoint != null)
        'instanceConnectEndpoint': instanceConnectEndpoint,
    };
  }
}

class CreateInstanceEventWindowResult {
  /// Information about the event window.
  final InstanceEventWindow? instanceEventWindow;

  CreateInstanceEventWindowResult({
    this.instanceEventWindow,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindow = this.instanceEventWindow;
    return {
      if (instanceEventWindow != null)
        'instanceEventWindow': instanceEventWindow,
    };
  }
}

class CreateInstanceExportTaskResult {
  /// Information about the export instance task.
  final ExportTask? exportTask;

  CreateInstanceExportTaskResult({
    this.exportTask,
  });

  Map<String, dynamic> toJson() {
    final exportTask = this.exportTask;
    return {
      if (exportTask != null) 'exportTask': exportTask,
    };
  }
}

class CreateInternetGatewayResult {
  /// Information about the internet gateway.
  final InternetGateway? internetGateway;

  CreateInternetGatewayResult({
    this.internetGateway,
  });

  Map<String, dynamic> toJson() {
    final internetGateway = this.internetGateway;
    return {
      if (internetGateway != null) 'internetGateway': internetGateway,
    };
  }
}

class CreateIpamPoolResult {
  /// Information about the IPAM pool created.
  final IpamPool? ipamPool;

  CreateIpamPoolResult({
    this.ipamPool,
  });

  Map<String, dynamic> toJson() {
    final ipamPool = this.ipamPool;
    return {
      if (ipamPool != null) 'ipamPool': ipamPool,
    };
  }
}

class CreateIpamResourceDiscoveryResult {
  /// An IPAM resource discovery.
  final IpamResourceDiscovery? ipamResourceDiscovery;

  CreateIpamResourceDiscoveryResult({
    this.ipamResourceDiscovery,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscovery = this.ipamResourceDiscovery;
    return {
      if (ipamResourceDiscovery != null)
        'ipamResourceDiscovery': ipamResourceDiscovery,
    };
  }
}

class CreateIpamResult {
  /// Information about the IPAM created.
  final Ipam? ipam;

  CreateIpamResult({
    this.ipam,
  });

  Map<String, dynamic> toJson() {
    final ipam = this.ipam;
    return {
      if (ipam != null) 'ipam': ipam,
    };
  }
}

class CreateIpamScopeResult {
  /// Information about the created scope.
  final IpamScope? ipamScope;

  CreateIpamScopeResult({
    this.ipamScope,
  });

  Map<String, dynamic> toJson() {
    final ipamScope = this.ipamScope;
    return {
      if (ipamScope != null) 'ipamScope': ipamScope,
    };
  }
}

class CreateLaunchTemplateResult {
  /// Information about the launch template.
  final LaunchTemplate? launchTemplate;

  /// If the launch template contains parameters or parameter combinations that
  /// are not valid, an error code and an error message are returned for each
  /// issue that's found.
  final ValidationWarning? warning;

  CreateLaunchTemplateResult({
    this.launchTemplate,
    this.warning,
  });

  Map<String, dynamic> toJson() {
    final launchTemplate = this.launchTemplate;
    final warning = this.warning;
    return {
      if (launchTemplate != null) 'launchTemplate': launchTemplate,
      if (warning != null) 'warning': warning,
    };
  }
}

class CreateLaunchTemplateVersionResult {
  /// Information about the launch template version.
  final LaunchTemplateVersion? launchTemplateVersion;

  /// If the new version of the launch template contains parameters or parameter
  /// combinations that are not valid, an error code and an error message are
  /// returned for each issue that's found.
  final ValidationWarning? warning;

  CreateLaunchTemplateVersionResult({
    this.launchTemplateVersion,
    this.warning,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateVersion = this.launchTemplateVersion;
    final warning = this.warning;
    return {
      if (launchTemplateVersion != null)
        'launchTemplateVersion': launchTemplateVersion,
      if (warning != null) 'warning': warning,
    };
  }
}

class CreateLocalGatewayRouteResult {
  /// Information about the route.
  final LocalGatewayRoute? route;

  CreateLocalGatewayRouteResult({
    this.route,
  });

  Map<String, dynamic> toJson() {
    final route = this.route;
    return {
      if (route != null) 'route': route,
    };
  }
}

class CreateLocalGatewayRouteTableResult {
  /// Information about the local gateway route table.
  final LocalGatewayRouteTable? localGatewayRouteTable;

  CreateLocalGatewayRouteTableResult({
    this.localGatewayRouteTable,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTable = this.localGatewayRouteTable;
    return {
      if (localGatewayRouteTable != null)
        'localGatewayRouteTable': localGatewayRouteTable,
    };
  }
}

class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult {
  /// Information about the local gateway route table virtual interface group
  /// association.
  final LocalGatewayRouteTableVirtualInterfaceGroupAssociation?
      localGatewayRouteTableVirtualInterfaceGroupAssociation;

  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult({
    this.localGatewayRouteTableVirtualInterfaceGroupAssociation,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableVirtualInterfaceGroupAssociation =
        this.localGatewayRouteTableVirtualInterfaceGroupAssociation;
    return {
      if (localGatewayRouteTableVirtualInterfaceGroupAssociation != null)
        'localGatewayRouteTableVirtualInterfaceGroupAssociation':
            localGatewayRouteTableVirtualInterfaceGroupAssociation,
    };
  }
}

class CreateLocalGatewayRouteTableVpcAssociationResult {
  /// Information about the association.
  final LocalGatewayRouteTableVpcAssociation?
      localGatewayRouteTableVpcAssociation;

  CreateLocalGatewayRouteTableVpcAssociationResult({
    this.localGatewayRouteTableVpcAssociation,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableVpcAssociation =
        this.localGatewayRouteTableVpcAssociation;
    return {
      if (localGatewayRouteTableVpcAssociation != null)
        'localGatewayRouteTableVpcAssociation':
            localGatewayRouteTableVpcAssociation,
    };
  }
}

class CreateManagedPrefixListResult {
  /// Information about the prefix list.
  final ManagedPrefixList? prefixList;

  CreateManagedPrefixListResult({
    this.prefixList,
  });

  Map<String, dynamic> toJson() {
    final prefixList = this.prefixList;
    return {
      if (prefixList != null) 'prefixList': prefixList,
    };
  }
}

class CreateNatGatewayResult {
  /// Unique, case-sensitive identifier to ensure the idempotency of the request.
  /// Only returned if a client token was provided in the request.
  final String? clientToken;

  /// Information about the NAT gateway.
  final NatGateway? natGateway;

  CreateNatGatewayResult({
    this.clientToken,
    this.natGateway,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final natGateway = this.natGateway;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (natGateway != null) 'natGateway': natGateway,
    };
  }
}

class CreateNetworkAclResult {
  /// Unique, case-sensitive identifier to ensure the idempotency of the request.
  /// Only returned if a client token was provided in the request.
  final String? clientToken;

  /// Information about the network ACL.
  final NetworkAcl? networkAcl;

  CreateNetworkAclResult({
    this.clientToken,
    this.networkAcl,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final networkAcl = this.networkAcl;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (networkAcl != null) 'networkAcl': networkAcl,
    };
  }
}

class CreateNetworkInsightsAccessScopeResult {
  /// The Network Access Scope.
  final NetworkInsightsAccessScope? networkInsightsAccessScope;

  /// The Network Access Scope content.
  final NetworkInsightsAccessScopeContent? networkInsightsAccessScopeContent;

  CreateNetworkInsightsAccessScopeResult({
    this.networkInsightsAccessScope,
    this.networkInsightsAccessScopeContent,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScope = this.networkInsightsAccessScope;
    final networkInsightsAccessScopeContent =
        this.networkInsightsAccessScopeContent;
    return {
      if (networkInsightsAccessScope != null)
        'networkInsightsAccessScope': networkInsightsAccessScope,
      if (networkInsightsAccessScopeContent != null)
        'networkInsightsAccessScopeContent': networkInsightsAccessScopeContent,
    };
  }
}

class CreateNetworkInsightsPathResult {
  /// Information about the path.
  final NetworkInsightsPath? networkInsightsPath;

  CreateNetworkInsightsPathResult({
    this.networkInsightsPath,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsPath = this.networkInsightsPath;
    return {
      if (networkInsightsPath != null)
        'networkInsightsPath': networkInsightsPath,
    };
  }
}

/// Contains the output of CreateNetworkInterfacePermission.
class CreateNetworkInterfacePermissionResult {
  /// Information about the permission for the network interface.
  final NetworkInterfacePermission? interfacePermission;

  CreateNetworkInterfacePermissionResult({
    this.interfacePermission,
  });

  Map<String, dynamic> toJson() {
    final interfacePermission = this.interfacePermission;
    return {
      if (interfacePermission != null)
        'interfacePermission': interfacePermission,
    };
  }
}

class CreateNetworkInterfaceResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? clientToken;

  /// Information about the network interface.
  final NetworkInterface? networkInterface;

  CreateNetworkInterfaceResult({
    this.clientToken,
    this.networkInterface,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final networkInterface = this.networkInterface;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (networkInterface != null) 'networkInterface': networkInterface,
    };
  }
}

class CreatePlacementGroupResult {
  /// Information about the placement group.
  final PlacementGroup? placementGroup;

  CreatePlacementGroupResult({
    this.placementGroup,
  });

  Map<String, dynamic> toJson() {
    final placementGroup = this.placementGroup;
    return {
      if (placementGroup != null) 'placementGroup': placementGroup,
    };
  }
}

class CreatePublicIpv4PoolResult {
  /// The ID of the public IPv4 pool.
  final String? poolId;

  CreatePublicIpv4PoolResult({
    this.poolId,
  });

  Map<String, dynamic> toJson() {
    final poolId = this.poolId;
    return {
      if (poolId != null) 'poolId': poolId,
    };
  }
}

class CreateReplaceRootVolumeTaskResult {
  /// Information about the root volume replacement task.
  final ReplaceRootVolumeTask? replaceRootVolumeTask;

  CreateReplaceRootVolumeTaskResult({
    this.replaceRootVolumeTask,
  });

  Map<String, dynamic> toJson() {
    final replaceRootVolumeTask = this.replaceRootVolumeTask;
    return {
      if (replaceRootVolumeTask != null)
        'replaceRootVolumeTask': replaceRootVolumeTask,
    };
  }
}

/// Contains the output of CreateReservedInstancesListing.
class CreateReservedInstancesListingResult {
  /// Information about the Standard Reserved Instance listing.
  final List<ReservedInstancesListing>? reservedInstancesListings;

  CreateReservedInstancesListingResult({
    this.reservedInstancesListings,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesListings = this.reservedInstancesListings;
    return {
      if (reservedInstancesListings != null)
        'reservedInstancesListingsSet': reservedInstancesListings,
    };
  }
}

class CreateRestoreImageTaskResult {
  /// The AMI ID.
  final String? imageId;

  CreateRestoreImageTaskResult({
    this.imageId,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    return {
      if (imageId != null) 'imageId': imageId,
    };
  }
}

class CreateRouteResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  CreateRouteResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class CreateRouteTableResult {
  /// Unique, case-sensitive identifier to ensure the idempotency of the request.
  /// Only returned if a client token was provided in the request.
  final String? clientToken;

  /// Information about the route table.
  final RouteTable? routeTable;

  CreateRouteTableResult({
    this.clientToken,
    this.routeTable,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final routeTable = this.routeTable;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (routeTable != null) 'routeTable': routeTable,
    };
  }
}

class CreateSecurityGroupResult {
  /// The ID of the security group.
  final String? groupId;

  /// The tags assigned to the security group.
  final List<Tag>? tags;

  CreateSecurityGroupResult({
    this.groupId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final groupId = this.groupId;
    final tags = this.tags;
    return {
      if (groupId != null) 'groupId': groupId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

class CreateSnapshotsResult {
  /// List of snapshots.
  final List<SnapshotInfo>? snapshots;

  CreateSnapshotsResult({
    this.snapshots,
  });

  Map<String, dynamic> toJson() {
    final snapshots = this.snapshots;
    return {
      if (snapshots != null) 'snapshotSet': snapshots,
    };
  }
}

/// Contains the output of CreateSpotDatafeedSubscription.
class CreateSpotDatafeedSubscriptionResult {
  /// The Spot Instance data feed subscription.
  final SpotDatafeedSubscription? spotDatafeedSubscription;

  CreateSpotDatafeedSubscriptionResult({
    this.spotDatafeedSubscription,
  });

  Map<String, dynamic> toJson() {
    final spotDatafeedSubscription = this.spotDatafeedSubscription;
    return {
      if (spotDatafeedSubscription != null)
        'spotDatafeedSubscription': spotDatafeedSubscription,
    };
  }
}

class CreateStoreImageTaskResult {
  /// The name of the stored AMI object in the S3 bucket.
  final String? objectKey;

  CreateStoreImageTaskResult({
    this.objectKey,
  });

  Map<String, dynamic> toJson() {
    final objectKey = this.objectKey;
    return {
      if (objectKey != null) 'objectKey': objectKey,
    };
  }
}

class CreateSubnetCidrReservationResult {
  /// Information about the created subnet CIDR reservation.
  final SubnetCidrReservation? subnetCidrReservation;

  CreateSubnetCidrReservationResult({
    this.subnetCidrReservation,
  });

  Map<String, dynamic> toJson() {
    final subnetCidrReservation = this.subnetCidrReservation;
    return {
      if (subnetCidrReservation != null)
        'subnetCidrReservation': subnetCidrReservation,
    };
  }
}

class CreateSubnetResult {
  /// Information about the subnet.
  final Subnet? subnet;

  CreateSubnetResult({
    this.subnet,
  });

  Map<String, dynamic> toJson() {
    final subnet = this.subnet;
    return {
      if (subnet != null) 'subnet': subnet,
    };
  }
}

class CreateTrafficMirrorFilterResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  final String? clientToken;

  /// Information about the Traffic Mirror filter.
  final TrafficMirrorFilter? trafficMirrorFilter;

  CreateTrafficMirrorFilterResult({
    this.clientToken,
    this.trafficMirrorFilter,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final trafficMirrorFilter = this.trafficMirrorFilter;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (trafficMirrorFilter != null)
        'trafficMirrorFilter': trafficMirrorFilter,
    };
  }
}

class CreateTrafficMirrorFilterRuleResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  final String? clientToken;

  /// The Traffic Mirror rule.
  final TrafficMirrorFilterRule? trafficMirrorFilterRule;

  CreateTrafficMirrorFilterRuleResult({
    this.clientToken,
    this.trafficMirrorFilterRule,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final trafficMirrorFilterRule = this.trafficMirrorFilterRule;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (trafficMirrorFilterRule != null)
        'trafficMirrorFilterRule': trafficMirrorFilterRule,
    };
  }
}

class CreateTrafficMirrorSessionResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  final String? clientToken;

  /// Information about the Traffic Mirror session.
  final TrafficMirrorSession? trafficMirrorSession;

  CreateTrafficMirrorSessionResult({
    this.clientToken,
    this.trafficMirrorSession,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final trafficMirrorSession = this.trafficMirrorSession;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (trafficMirrorSession != null)
        'trafficMirrorSession': trafficMirrorSession,
    };
  }
}

class CreateTrafficMirrorTargetResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to ensure idempotency</a>.
  final String? clientToken;

  /// Information about the Traffic Mirror target.
  final TrafficMirrorTarget? trafficMirrorTarget;

  CreateTrafficMirrorTargetResult({
    this.clientToken,
    this.trafficMirrorTarget,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final trafficMirrorTarget = this.trafficMirrorTarget;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (trafficMirrorTarget != null)
        'trafficMirrorTarget': trafficMirrorTarget,
    };
  }
}

class CreateTransitGatewayConnectPeerResult {
  /// Information about the Connect peer.
  final TransitGatewayConnectPeer? transitGatewayConnectPeer;

  CreateTransitGatewayConnectPeerResult({
    this.transitGatewayConnectPeer,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayConnectPeer = this.transitGatewayConnectPeer;
    return {
      if (transitGatewayConnectPeer != null)
        'transitGatewayConnectPeer': transitGatewayConnectPeer,
    };
  }
}

/// The options for a Connect attachment.
class CreateTransitGatewayConnectRequestOptions {
  /// The tunnel protocol.
  final ProtocolValue protocol;

  CreateTransitGatewayConnectRequestOptions({
    required this.protocol,
  });

  Map<String, dynamic> toJson() {
    final protocol = this.protocol;
    return {
      'Protocol': protocol.value,
    };
  }
}

class CreateTransitGatewayConnectResult {
  /// Information about the Connect attachment.
  final TransitGatewayConnect? transitGatewayConnect;

  CreateTransitGatewayConnectResult({
    this.transitGatewayConnect,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayConnect = this.transitGatewayConnect;
    return {
      if (transitGatewayConnect != null)
        'transitGatewayConnect': transitGatewayConnect,
    };
  }
}

/// The options for the transit gateway multicast domain.
class CreateTransitGatewayMulticastDomainRequestOptions {
  /// Indicates whether to automatically accept cross-account subnet associations
  /// that are associated with the transit gateway multicast domain.
  final AutoAcceptSharedAssociationsValue? autoAcceptSharedAssociations;

  /// Specify whether to enable Internet Group Management Protocol (IGMP) version
  /// 2 for the transit gateway multicast domain.
  final Igmpv2SupportValue? igmpv2Support;

  /// Specify whether to enable support for statically configuring multicast group
  /// sources for a domain.
  final StaticSourcesSupportValue? staticSourcesSupport;

  CreateTransitGatewayMulticastDomainRequestOptions({
    this.autoAcceptSharedAssociations,
    this.igmpv2Support,
    this.staticSourcesSupport,
  });

  Map<String, dynamic> toJson() {
    final autoAcceptSharedAssociations = this.autoAcceptSharedAssociations;
    final igmpv2Support = this.igmpv2Support;
    final staticSourcesSupport = this.staticSourcesSupport;
    return {
      if (autoAcceptSharedAssociations != null)
        'AutoAcceptSharedAssociations': autoAcceptSharedAssociations.value,
      if (igmpv2Support != null) 'Igmpv2Support': igmpv2Support.value,
      if (staticSourcesSupport != null)
        'StaticSourcesSupport': staticSourcesSupport.value,
    };
  }
}

class CreateTransitGatewayMulticastDomainResult {
  /// Information about the transit gateway multicast domain.
  final TransitGatewayMulticastDomain? transitGatewayMulticastDomain;

  CreateTransitGatewayMulticastDomainResult({
    this.transitGatewayMulticastDomain,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayMulticastDomain = this.transitGatewayMulticastDomain;
    return {
      if (transitGatewayMulticastDomain != null)
        'transitGatewayMulticastDomain': transitGatewayMulticastDomain,
    };
  }
}

/// Describes whether dynamic routing is enabled or disabled for the transit
/// gateway peering request.
class CreateTransitGatewayPeeringAttachmentRequestOptions {
  /// Indicates whether dynamic routing is enabled or disabled.
  final DynamicRoutingValue? dynamicRouting;

  CreateTransitGatewayPeeringAttachmentRequestOptions({
    this.dynamicRouting,
  });

  Map<String, dynamic> toJson() {
    final dynamicRouting = this.dynamicRouting;
    return {
      if (dynamicRouting != null) 'DynamicRouting': dynamicRouting.value,
    };
  }
}

class CreateTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment? transitGatewayPeeringAttachment;

  CreateTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPeeringAttachment =
        this.transitGatewayPeeringAttachment;
    return {
      if (transitGatewayPeeringAttachment != null)
        'transitGatewayPeeringAttachment': transitGatewayPeeringAttachment,
    };
  }
}

class CreateTransitGatewayPolicyTableResult {
  /// Describes the created transit gateway policy table.
  final TransitGatewayPolicyTable? transitGatewayPolicyTable;

  CreateTransitGatewayPolicyTableResult({
    this.transitGatewayPolicyTable,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPolicyTable = this.transitGatewayPolicyTable;
    return {
      if (transitGatewayPolicyTable != null)
        'transitGatewayPolicyTable': transitGatewayPolicyTable,
    };
  }
}

class CreateTransitGatewayPrefixListReferenceResult {
  /// Information about the prefix list reference.
  final TransitGatewayPrefixListReference? transitGatewayPrefixListReference;

  CreateTransitGatewayPrefixListReferenceResult({
    this.transitGatewayPrefixListReference,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPrefixListReference =
        this.transitGatewayPrefixListReference;
    return {
      if (transitGatewayPrefixListReference != null)
        'transitGatewayPrefixListReference': transitGatewayPrefixListReference,
    };
  }
}

class CreateTransitGatewayResult {
  /// Information about the transit gateway.
  final TransitGateway? transitGateway;

  CreateTransitGatewayResult({
    this.transitGateway,
  });

  Map<String, dynamic> toJson() {
    final transitGateway = this.transitGateway;
    return {
      if (transitGateway != null) 'transitGateway': transitGateway,
    };
  }
}

class CreateTransitGatewayRouteResult {
  /// Information about the route.
  final TransitGatewayRoute? route;

  CreateTransitGatewayRouteResult({
    this.route,
  });

  Map<String, dynamic> toJson() {
    final route = this.route;
    return {
      if (route != null) 'route': route,
    };
  }
}

class CreateTransitGatewayRouteTableAnnouncementResult {
  /// Provides details about the transit gateway route table announcement.
  final TransitGatewayRouteTableAnnouncement?
      transitGatewayRouteTableAnnouncement;

  CreateTransitGatewayRouteTableAnnouncementResult({
    this.transitGatewayRouteTableAnnouncement,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayRouteTableAnnouncement =
        this.transitGatewayRouteTableAnnouncement;
    return {
      if (transitGatewayRouteTableAnnouncement != null)
        'transitGatewayRouteTableAnnouncement':
            transitGatewayRouteTableAnnouncement,
    };
  }
}

class CreateTransitGatewayRouteTableResult {
  /// Information about the transit gateway route table.
  final TransitGatewayRouteTable? transitGatewayRouteTable;

  CreateTransitGatewayRouteTableResult({
    this.transitGatewayRouteTable,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayRouteTable = this.transitGatewayRouteTable;
    return {
      if (transitGatewayRouteTable != null)
        'transitGatewayRouteTable': transitGatewayRouteTable,
    };
  }
}

/// Describes the options for a VPC attachment.
class CreateTransitGatewayVpcAttachmentRequestOptions {
  /// Enable or disable support for appliance mode. If enabled, a traffic flow
  /// between a source and destination uses the same Availability Zone for the VPC
  /// attachment for the lifetime of that flow. The default is
  /// <code>disable</code>.
  final ApplianceModeSupportValue? applianceModeSupport;

  /// Enable or disable DNS support. The default is <code>enable</code>.
  final DnsSupportValue? dnsSupport;

  /// Enable or disable IPv6 support. The default is <code>disable</code>.
  final Ipv6SupportValue? ipv6Support;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// Enables you to reference a security group across VPCs attached to a transit
  /// gateway. Use this option to simplify security group management and control
  /// of instance-to-instance traffic across VPCs that are connected by transit
  /// gateway. You can also use this option to migrate from VPC peering (which was
  /// the only option that supported security group referencing) to transit
  /// gateways (which now also support security group referencing). This option is
  /// disabled by default and there are no additional costs to use this feature.
  ///
  /// If you don't enable or disable SecurityGroupReferencingSupport in the
  /// request, the attachment will inherit the security group referencing support
  /// setting on the transit gateway.
  final SecurityGroupReferencingSupportValue? securityGroupReferencingSupport;

  CreateTransitGatewayVpcAttachmentRequestOptions({
    this.applianceModeSupport,
    this.dnsSupport,
    this.ipv6Support,
    this.securityGroupReferencingSupport,
  });

  Map<String, dynamic> toJson() {
    final applianceModeSupport = this.applianceModeSupport;
    final dnsSupport = this.dnsSupport;
    final ipv6Support = this.ipv6Support;
    final securityGroupReferencingSupport =
        this.securityGroupReferencingSupport;
    return {
      if (applianceModeSupport != null)
        'ApplianceModeSupport': applianceModeSupport.value,
      if (dnsSupport != null) 'DnsSupport': dnsSupport.value,
      if (ipv6Support != null) 'Ipv6Support': ipv6Support.value,
      if (securityGroupReferencingSupport != null)
        'SecurityGroupReferencingSupport':
            securityGroupReferencingSupport.value,
    };
  }
}

class CreateTransitGatewayVpcAttachmentResult {
  /// Information about the VPC attachment.
  final TransitGatewayVpcAttachment? transitGatewayVpcAttachment;

  CreateTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayVpcAttachment = this.transitGatewayVpcAttachment;
    return {
      if (transitGatewayVpcAttachment != null)
        'transitGatewayVpcAttachment': transitGatewayVpcAttachment,
    };
  }
}

/// Describes the network interface options when creating an Amazon Web Services
/// Verified Access endpoint using the <code>network-interface</code> type.
class CreateVerifiedAccessEndpointEniOptions {
  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The IP port number.
  final int? port;

  /// The IP protocol.
  final VerifiedAccessEndpointProtocol? protocol;

  CreateVerifiedAccessEndpointEniOptions({
    this.networkInterfaceId,
    this.port,
    this.protocol,
  });

  Map<String, dynamic> toJson() {
    final networkInterfaceId = this.networkInterfaceId;
    final port = this.port;
    final protocol = this.protocol;
    return {
      if (networkInterfaceId != null) 'NetworkInterfaceId': networkInterfaceId,
      if (port != null) 'Port': port,
      if (protocol != null) 'Protocol': protocol.value,
    };
  }
}

/// Describes the load balancer options when creating an Amazon Web Services
/// Verified Access endpoint using the <code>load-balancer</code> type.
class CreateVerifiedAccessEndpointLoadBalancerOptions {
  /// The ARN of the load balancer.
  final String? loadBalancerArn;

  /// The IP port number.
  final int? port;

  /// The IP protocol.
  final VerifiedAccessEndpointProtocol? protocol;

  /// The IDs of the subnets.
  final List<String>? subnetIds;

  CreateVerifiedAccessEndpointLoadBalancerOptions({
    this.loadBalancerArn,
    this.port,
    this.protocol,
    this.subnetIds,
  });

  Map<String, dynamic> toJson() {
    final loadBalancerArn = this.loadBalancerArn;
    final port = this.port;
    final protocol = this.protocol;
    final subnetIds = this.subnetIds;
    return {
      if (loadBalancerArn != null) 'LoadBalancerArn': loadBalancerArn,
      if (port != null) 'Port': port,
      if (protocol != null) 'Protocol': protocol.value,
      if (subnetIds != null) 'SubnetId': subnetIds,
    };
  }
}

class CreateVerifiedAccessEndpointResult {
  /// Details about the Verified Access endpoint.
  final VerifiedAccessEndpoint? verifiedAccessEndpoint;

  CreateVerifiedAccessEndpointResult({
    this.verifiedAccessEndpoint,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessEndpoint = this.verifiedAccessEndpoint;
    return {
      if (verifiedAccessEndpoint != null)
        'verifiedAccessEndpoint': verifiedAccessEndpoint,
    };
  }
}

class CreateVerifiedAccessGroupResult {
  /// Details about the Verified Access group.
  final VerifiedAccessGroup? verifiedAccessGroup;

  CreateVerifiedAccessGroupResult({
    this.verifiedAccessGroup,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessGroup = this.verifiedAccessGroup;
    return {
      if (verifiedAccessGroup != null)
        'verifiedAccessGroup': verifiedAccessGroup,
    };
  }
}

class CreateVerifiedAccessInstanceResult {
  /// Details about the Verified Access instance.
  final VerifiedAccessInstance? verifiedAccessInstance;

  CreateVerifiedAccessInstanceResult({
    this.verifiedAccessInstance,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessInstance = this.verifiedAccessInstance;
    return {
      if (verifiedAccessInstance != null)
        'verifiedAccessInstance': verifiedAccessInstance,
    };
  }
}

/// Describes the options when creating an Amazon Web Services Verified Access
/// trust provider using the <code>device</code> type.
class CreateVerifiedAccessTrustProviderDeviceOptions {
  /// The URL Amazon Web Services Verified Access will use to verify the
  /// authenticity of the device tokens.
  final String? publicSigningKeyUrl;

  /// The ID of the tenant application with the device-identity provider.
  final String? tenantId;

  CreateVerifiedAccessTrustProviderDeviceOptions({
    this.publicSigningKeyUrl,
    this.tenantId,
  });

  Map<String, dynamic> toJson() {
    final publicSigningKeyUrl = this.publicSigningKeyUrl;
    final tenantId = this.tenantId;
    return {
      if (publicSigningKeyUrl != null)
        'PublicSigningKeyUrl': publicSigningKeyUrl,
      if (tenantId != null) 'TenantId': tenantId,
    };
  }
}

/// Describes the options when creating an Amazon Web Services Verified Access
/// trust provider using the <code>user</code> type.
class CreateVerifiedAccessTrustProviderOidcOptions {
  /// The OIDC authorization endpoint.
  final String? authorizationEndpoint;

  /// The client identifier.
  final String? clientId;

  /// The client secret.
  final String? clientSecret;

  /// The OIDC issuer.
  final String? issuer;

  /// OpenID Connect (OIDC) scopes are used by an application during
  /// authentication to authorize access to a user's details. Each scope returns a
  /// specific set of user attributes.
  final String? scope;

  /// The OIDC token endpoint.
  final String? tokenEndpoint;

  /// The OIDC user info endpoint.
  final String? userInfoEndpoint;

  CreateVerifiedAccessTrustProviderOidcOptions({
    this.authorizationEndpoint,
    this.clientId,
    this.clientSecret,
    this.issuer,
    this.scope,
    this.tokenEndpoint,
    this.userInfoEndpoint,
  });

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final clientSecret = this.clientSecret;
    final issuer = this.issuer;
    final scope = this.scope;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      if (authorizationEndpoint != null)
        'AuthorizationEndpoint': authorizationEndpoint,
      if (clientId != null) 'ClientId': clientId,
      if (clientSecret != null) 'ClientSecret': clientSecret,
      if (issuer != null) 'Issuer': issuer,
      if (scope != null) 'Scope': scope,
      if (tokenEndpoint != null) 'TokenEndpoint': tokenEndpoint,
      if (userInfoEndpoint != null) 'UserInfoEndpoint': userInfoEndpoint,
    };
  }
}

class CreateVerifiedAccessTrustProviderResult {
  /// Details about the Verified Access trust provider.
  final VerifiedAccessTrustProvider? verifiedAccessTrustProvider;

  CreateVerifiedAccessTrustProviderResult({
    this.verifiedAccessTrustProvider,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessTrustProvider = this.verifiedAccessTrustProvider;
    return {
      if (verifiedAccessTrustProvider != null)
        'verifiedAccessTrustProvider': verifiedAccessTrustProvider,
    };
  }
}

/// Describes the user or group to be added or removed from the list of create
/// volume permissions for a volume.
class CreateVolumePermission {
  /// The group to be added or removed. The possible value is <code>all</code>.
  final PermissionGroup? group;

  /// The ID of the Amazon Web Services account to be added or removed.
  final String? userId;

  CreateVolumePermission({
    this.group,
    this.userId,
  });

  Map<String, dynamic> toJson() {
    final group = this.group;
    final userId = this.userId;
    return {
      if (group != null) 'group': group.value,
      if (userId != null) 'userId': userId,
    };
  }
}

/// Describes modifications to the list of create volume permissions for a
/// volume.
class CreateVolumePermissionModifications {
  /// Adds the specified Amazon Web Services account ID or group to the list.
  final List<CreateVolumePermission>? add;

  /// Removes the specified Amazon Web Services account ID or group from the list.
  final List<CreateVolumePermission>? remove;

  CreateVolumePermissionModifications({
    this.add,
    this.remove,
  });

  Map<String, dynamic> toJson() {
    final add = this.add;
    final remove = this.remove;
    return {
      if (add != null) 'Add': add,
      if (remove != null) 'Remove': remove,
    };
  }
}

class CreateVpcEndpointConnectionNotificationResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String? clientToken;

  /// Information about the notification.
  final ConnectionNotification? connectionNotification;

  CreateVpcEndpointConnectionNotificationResult({
    this.clientToken,
    this.connectionNotification,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final connectionNotification = this.connectionNotification;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (connectionNotification != null)
        'connectionNotification': connectionNotification,
    };
  }
}

class CreateVpcEndpointResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String? clientToken;

  /// Information about the endpoint.
  final VpcEndpoint? vpcEndpoint;

  CreateVpcEndpointResult({
    this.clientToken,
    this.vpcEndpoint,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final vpcEndpoint = this.vpcEndpoint;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (vpcEndpoint != null) 'vpcEndpoint': vpcEndpoint,
    };
  }
}

class CreateVpcEndpointServiceConfigurationResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String? clientToken;

  /// Information about the service configuration.
  final ServiceConfiguration? serviceConfiguration;

  CreateVpcEndpointServiceConfigurationResult({
    this.clientToken,
    this.serviceConfiguration,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final serviceConfiguration = this.serviceConfiguration;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (serviceConfiguration != null)
        'serviceConfiguration': serviceConfiguration,
    };
  }
}

class CreateVpcPeeringConnectionResult {
  /// Information about the VPC peering connection.
  final VpcPeeringConnection? vpcPeeringConnection;

  CreateVpcPeeringConnectionResult({
    this.vpcPeeringConnection,
  });

  Map<String, dynamic> toJson() {
    final vpcPeeringConnection = this.vpcPeeringConnection;
    return {
      if (vpcPeeringConnection != null)
        'vpcPeeringConnection': vpcPeeringConnection,
    };
  }
}

class CreateVpcResult {
  /// Information about the VPC.
  final Vpc? vpc;

  CreateVpcResult({
    this.vpc,
  });

  Map<String, dynamic> toJson() {
    final vpc = this.vpc;
    return {
      if (vpc != null) 'vpc': vpc,
    };
  }
}

/// Contains the output of CreateVpnConnection.
class CreateVpnConnectionResult {
  /// Information about the VPN connection.
  final VpnConnection? vpnConnection;

  CreateVpnConnectionResult({
    this.vpnConnection,
  });

  Map<String, dynamic> toJson() {
    final vpnConnection = this.vpnConnection;
    return {
      if (vpnConnection != null) 'vpnConnection': vpnConnection,
    };
  }
}

/// Contains the output of CreateVpnGateway.
class CreateVpnGatewayResult {
  /// Information about the virtual private gateway.
  final VpnGateway? vpnGateway;

  CreateVpnGatewayResult({
    this.vpnGateway,
  });

  Map<String, dynamic> toJson() {
    final vpnGateway = this.vpnGateway;
    return {
      if (vpnGateway != null) 'vpnGateway': vpnGateway,
    };
  }
}

/// Describes the credit option for CPU usage of a T instance.
class CreditSpecification {
  /// The credit option for CPU usage of a T instance.
  ///
  /// Valid values: <code>standard</code> | <code>unlimited</code>
  final String? cpuCredits;

  CreditSpecification({
    this.cpuCredits,
  });

  Map<String, dynamic> toJson() {
    final cpuCredits = this.cpuCredits;
    return {
      if (cpuCredits != null) 'cpuCredits': cpuCredits,
    };
  }
}

/// The credit option for CPU usage of a T instance.
class CreditSpecificationRequest {
  /// The credit option for CPU usage of a T instance.
  ///
  /// Valid values: <code>standard</code> | <code>unlimited</code>
  final String cpuCredits;

  CreditSpecificationRequest({
    required this.cpuCredits,
  });

  Map<String, dynamic> toJson() {
    final cpuCredits = this.cpuCredits;
    return {
      'CpuCredits': cpuCredits,
    };
  }
}

enum CurrencyCodeValues {
  usd('USD'),
  ;

  final String value;

  const CurrencyCodeValues(this.value);

  static CurrencyCodeValues fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CurrencyCodeValues'));
}

/// Describes a customer gateway.
class CustomerGateway {
  /// The customer gateway device's Border Gateway Protocol (BGP) Autonomous
  /// System Number (ASN).
  ///
  /// Valid values: <code>1</code> to <code>2,147,483,647</code>
  final String? bgpAsn;

  /// The customer gateway device's Border Gateway Protocol (BGP) Autonomous
  /// System Number (ASN).
  ///
  /// Valid values: <code>2,147,483,648</code> to <code>4,294,967,295</code>
  final String? bgpAsnExtended;

  /// The Amazon Resource Name (ARN) for the customer gateway certificate.
  final String? certificateArn;

  /// The ID of the customer gateway.
  final String? customerGatewayId;

  /// The name of customer gateway device.
  final String? deviceName;

  /// IPv4 address for the customer gateway device's outside interface. The
  /// address must be static. If <code>OutsideIpAddressType</code> in your VPN
  /// connection options is set to <code>PrivateIpv4</code>, you can use an
  /// RFC6598 or RFC1918 private IPv4 address. If
  /// <code>OutsideIpAddressType</code> is set to <code>PublicIpv4</code>, you can
  /// use a public IPv4 address.
  final String? ipAddress;

  /// The current state of the customer gateway (<code>pending | available |
  /// deleting | deleted</code>).
  final String? state;

  /// Any tags assigned to the customer gateway.
  final List<Tag>? tags;

  /// The type of VPN connection the customer gateway supports
  /// (<code>ipsec.1</code>).
  final String? type;

  CustomerGateway({
    this.bgpAsn,
    this.bgpAsnExtended,
    this.certificateArn,
    this.customerGatewayId,
    this.deviceName,
    this.ipAddress,
    this.state,
    this.tags,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final bgpAsn = this.bgpAsn;
    final bgpAsnExtended = this.bgpAsnExtended;
    final certificateArn = this.certificateArn;
    final customerGatewayId = this.customerGatewayId;
    final deviceName = this.deviceName;
    final ipAddress = this.ipAddress;
    final state = this.state;
    final tags = this.tags;
    final type = this.type;
    return {
      if (bgpAsn != null) 'bgpAsn': bgpAsn,
      if (bgpAsnExtended != null) 'bgpAsnExtended': bgpAsnExtended,
      if (certificateArn != null) 'certificateArn': certificateArn,
      if (customerGatewayId != null) 'customerGatewayId': customerGatewayId,
      if (deviceName != null) 'deviceName': deviceName,
      if (ipAddress != null) 'ipAddress': ipAddress,
      if (state != null) 'state': state,
      if (tags != null) 'tagSet': tags,
      if (type != null) 'type': type,
    };
  }
}

/// A query used for retrieving network health data.
class DataQuery {
  /// The Region or Availability Zone that's the target for the data query. For
  /// example, <code>eu-north-1</code>.
  final String? destination;

  /// A user-defined ID associated with a data query that's returned in the
  /// <code>dataResponse</code> identifying the query. For example, if you set the
  /// Id to <code>MyQuery01</code>in the query, the <code>dataResponse</code>
  /// identifies the query as <code>MyQuery01</code>.
  final String? id;

  /// The metric, <code>aggregation-latency</code>, indicating that network
  /// latency is aggregated for the query. This is the only supported metric.
  final MetricType? metric;

  /// The aggregation period used for the data query.
  final PeriodType? period;

  /// The Region or Availability Zone that's the source for the data query. For
  /// example, <code>us-east-1</code>.
  final String? source;

  /// The metric data aggregation period, <code>p50</code>, between the specified
  /// <code>startDate</code> and <code>endDate</code>. For example, a metric of
  /// <code>five_minutes</code> is the median of all the data points gathered
  /// within those five minutes. <code>p50</code> is the only supported metric.
  final StatisticType? statistic;

  DataQuery({
    this.destination,
    this.id,
    this.metric,
    this.period,
    this.source,
    this.statistic,
  });

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final id = this.id;
    final metric = this.metric;
    final period = this.period;
    final source = this.source;
    final statistic = this.statistic;
    return {
      if (destination != null) 'Destination': destination,
      if (id != null) 'Id': id,
      if (metric != null) 'Metric': metric.value,
      if (period != null) 'Period': period.value,
      if (source != null) 'Source': source,
      if (statistic != null) 'Statistic': statistic.value,
    };
  }
}

/// The response to a <code>DataQuery</code>.
class DataResponse {
  /// The Region or Availability Zone that's the destination for the data query.
  /// For example, <code>eu-west-1</code>.
  final String? destination;

  /// The ID passed in the <code>DataQuery</code>.
  final String? id;

  /// The metric used for the network performance request. Only
  /// <code>aggregate-latency</code> is supported, which shows network latency
  /// during a specified period.
  final MetricType? metric;

  /// A list of <code>MetricPoint</code> objects.
  final List<MetricPoint>? metricPoints;

  /// The period used for the network performance request.
  final PeriodType? period;

  /// The Region or Availability Zone that's the source for the data query. For
  /// example, <code>us-east-1</code>.
  final String? source;

  /// The statistic used for the network performance request.
  final StatisticType? statistic;

  DataResponse({
    this.destination,
    this.id,
    this.metric,
    this.metricPoints,
    this.period,
    this.source,
    this.statistic,
  });

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final id = this.id;
    final metric = this.metric;
    final metricPoints = this.metricPoints;
    final period = this.period;
    final source = this.source;
    final statistic = this.statistic;
    return {
      if (destination != null) 'destination': destination,
      if (id != null) 'id': id,
      if (metric != null) 'metric': metric.value,
      if (metricPoints != null) 'metricPointSet': metricPoints,
      if (period != null) 'period': period.value,
      if (source != null) 'source': source,
      if (statistic != null) 'statistic': statistic.value,
    };
  }
}

enum DatafeedSubscriptionState {
  active('Active'),
  inactive('Inactive'),
  ;

  final String value;

  const DatafeedSubscriptionState(this.value);

  static DatafeedSubscriptionState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DatafeedSubscriptionState'));
}

enum DefaultInstanceMetadataEndpointState {
  disabled('disabled'),
  enabled('enabled'),
  noPreference('no-preference'),
  ;

  final String value;

  const DefaultInstanceMetadataEndpointState(this.value);

  static DefaultInstanceMetadataEndpointState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DefaultInstanceMetadataEndpointState'));
}

enum DefaultInstanceMetadataTagsState {
  disabled('disabled'),
  enabled('enabled'),
  noPreference('no-preference'),
  ;

  final String value;

  const DefaultInstanceMetadataTagsState(this.value);

  static DefaultInstanceMetadataTagsState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DefaultInstanceMetadataTagsState'));
}

enum DefaultRouteTableAssociationValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const DefaultRouteTableAssociationValue(this.value);

  static DefaultRouteTableAssociationValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DefaultRouteTableAssociationValue'));
}

enum DefaultRouteTablePropagationValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const DefaultRouteTablePropagationValue(this.value);

  static DefaultRouteTablePropagationValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DefaultRouteTablePropagationValue'));
}

enum DefaultTargetCapacityType {
  spot('spot'),
  onDemand('on-demand'),
  capacityBlock('capacity-block'),
  ;

  final String value;

  const DefaultTargetCapacityType(this.value);

  static DefaultTargetCapacityType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DefaultTargetCapacityType'));
}

class DeleteCarrierGatewayResult {
  /// Information about the carrier gateway.
  final CarrierGateway? carrierGateway;

  DeleteCarrierGatewayResult({
    this.carrierGateway,
  });

  Map<String, dynamic> toJson() {
    final carrierGateway = this.carrierGateway;
    return {
      if (carrierGateway != null) 'carrierGateway': carrierGateway,
    };
  }
}

class DeleteClientVpnEndpointResult {
  /// The current state of the Client VPN endpoint.
  final ClientVpnEndpointStatus? status;

  DeleteClientVpnEndpointResult({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'status': status,
    };
  }
}

class DeleteClientVpnRouteResult {
  /// The current state of the route.
  final ClientVpnRouteStatus? status;

  DeleteClientVpnRouteResult({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'status': status,
    };
  }
}

class DeleteCoipCidrResult {
  /// Information about a range of customer-owned IP addresses.
  final CoipCidr? coipCidr;

  DeleteCoipCidrResult({
    this.coipCidr,
  });

  Map<String, dynamic> toJson() {
    final coipCidr = this.coipCidr;
    return {
      if (coipCidr != null) 'coipCidr': coipCidr,
    };
  }
}

class DeleteCoipPoolResult {
  /// Information about the CoIP address pool.
  final CoipPool? coipPool;

  DeleteCoipPoolResult({
    this.coipPool,
  });

  Map<String, dynamic> toJson() {
    final coipPool = this.coipPool;
    return {
      if (coipPool != null) 'coipPool': coipPool,
    };
  }
}

class DeleteEgressOnlyInternetGatewayResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnCode;

  DeleteEgressOnlyInternetGatewayResult({
    this.returnCode,
  });

  Map<String, dynamic> toJson() {
    final returnCode = this.returnCode;
    return {
      if (returnCode != null) 'returnCode': returnCode,
    };
  }
}

/// Describes an EC2 Fleet error.
class DeleteFleetError {
  /// The error code.
  final DeleteFleetErrorCode? code;

  /// The description for the error code.
  final String? message;

  DeleteFleetError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum DeleteFleetErrorCode {
  fleetIdDoesNotExist('fleetIdDoesNotExist'),
  fleetIdMalformed('fleetIdMalformed'),
  fleetNotInDeletableState('fleetNotInDeletableState'),
  unexpectedError('unexpectedError'),
  ;

  final String value;

  const DeleteFleetErrorCode(this.value);

  static DeleteFleetErrorCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum DeleteFleetErrorCode'));
}

/// Describes an EC2 Fleet that was not successfully deleted.
class DeleteFleetErrorItem {
  /// The error.
  final DeleteFleetError? error;

  /// The ID of the EC2 Fleet.
  final String? fleetId;

  DeleteFleetErrorItem({
    this.error,
    this.fleetId,
  });

  Map<String, dynamic> toJson() {
    final error = this.error;
    final fleetId = this.fleetId;
    return {
      if (error != null) 'error': error,
      if (fleetId != null) 'fleetId': fleetId,
    };
  }
}

/// Describes an EC2 Fleet that was successfully deleted.
class DeleteFleetSuccessItem {
  /// The current state of the EC2 Fleet.
  final FleetStateCode? currentFleetState;

  /// The ID of the EC2 Fleet.
  final String? fleetId;

  /// The previous state of the EC2 Fleet.
  final FleetStateCode? previousFleetState;

  DeleteFleetSuccessItem({
    this.currentFleetState,
    this.fleetId,
    this.previousFleetState,
  });

  Map<String, dynamic> toJson() {
    final currentFleetState = this.currentFleetState;
    final fleetId = this.fleetId;
    final previousFleetState = this.previousFleetState;
    return {
      if (currentFleetState != null)
        'currentFleetState': currentFleetState.value,
      if (fleetId != null) 'fleetId': fleetId,
      if (previousFleetState != null)
        'previousFleetState': previousFleetState.value,
    };
  }
}

class DeleteFleetsResult {
  /// Information about the EC2 Fleets that are successfully deleted.
  final List<DeleteFleetSuccessItem>? successfulFleetDeletions;

  /// Information about the EC2 Fleets that are not successfully deleted.
  final List<DeleteFleetErrorItem>? unsuccessfulFleetDeletions;

  DeleteFleetsResult({
    this.successfulFleetDeletions,
    this.unsuccessfulFleetDeletions,
  });

  Map<String, dynamic> toJson() {
    final successfulFleetDeletions = this.successfulFleetDeletions;
    final unsuccessfulFleetDeletions = this.unsuccessfulFleetDeletions;
    return {
      if (successfulFleetDeletions != null)
        'successfulFleetDeletionSet': successfulFleetDeletions,
      if (unsuccessfulFleetDeletions != null)
        'unsuccessfulFleetDeletionSet': unsuccessfulFleetDeletions,
    };
  }
}

class DeleteFlowLogsResult {
  /// Information about the flow logs that could not be deleted successfully.
  final List<UnsuccessfulItem>? unsuccessful;

  DeleteFlowLogsResult({
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final unsuccessful = this.unsuccessful;
    return {
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class DeleteFpgaImageResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool? returnValue;

  DeleteFpgaImageResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DeleteInstanceConnectEndpointResult {
  /// Information about the EC2 Instance Connect Endpoint.
  final Ec2InstanceConnectEndpoint? instanceConnectEndpoint;

  DeleteInstanceConnectEndpointResult({
    this.instanceConnectEndpoint,
  });

  Map<String, dynamic> toJson() {
    final instanceConnectEndpoint = this.instanceConnectEndpoint;
    return {
      if (instanceConnectEndpoint != null)
        'instanceConnectEndpoint': instanceConnectEndpoint,
    };
  }
}

class DeleteInstanceEventWindowResult {
  /// The state of the event window.
  final InstanceEventWindowStateChange? instanceEventWindowState;

  DeleteInstanceEventWindowResult({
    this.instanceEventWindowState,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindowState = this.instanceEventWindowState;
    return {
      if (instanceEventWindowState != null)
        'instanceEventWindowState': instanceEventWindowState,
    };
  }
}

class DeleteIpamPoolResult {
  /// Information about the results of the deletion.
  final IpamPool? ipamPool;

  DeleteIpamPoolResult({
    this.ipamPool,
  });

  Map<String, dynamic> toJson() {
    final ipamPool = this.ipamPool;
    return {
      if (ipamPool != null) 'ipamPool': ipamPool,
    };
  }
}

class DeleteIpamResourceDiscoveryResult {
  /// The IPAM resource discovery.
  final IpamResourceDiscovery? ipamResourceDiscovery;

  DeleteIpamResourceDiscoveryResult({
    this.ipamResourceDiscovery,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscovery = this.ipamResourceDiscovery;
    return {
      if (ipamResourceDiscovery != null)
        'ipamResourceDiscovery': ipamResourceDiscovery,
    };
  }
}

class DeleteIpamResult {
  /// Information about the results of the deletion.
  final Ipam? ipam;

  DeleteIpamResult({
    this.ipam,
  });

  Map<String, dynamic> toJson() {
    final ipam = this.ipam;
    return {
      if (ipam != null) 'ipam': ipam,
    };
  }
}

class DeleteIpamScopeResult {
  /// Information about the results of the deletion.
  final IpamScope? ipamScope;

  DeleteIpamScopeResult({
    this.ipamScope,
  });

  Map<String, dynamic> toJson() {
    final ipamScope = this.ipamScope;
    return {
      if (ipamScope != null) 'ipamScope': ipamScope,
    };
  }
}

class DeleteKeyPairResult {
  /// The ID of the key pair.
  final String? keyPairId;

  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool? returnValue;

  DeleteKeyPairResult({
    this.keyPairId,
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final keyPairId = this.keyPairId;
    final returnValue = this.returnValue;
    return {
      if (keyPairId != null) 'keyPairId': keyPairId,
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DeleteLaunchTemplateResult {
  /// Information about the launch template.
  final LaunchTemplate? launchTemplate;

  DeleteLaunchTemplateResult({
    this.launchTemplate,
  });

  Map<String, dynamic> toJson() {
    final launchTemplate = this.launchTemplate;
    return {
      if (launchTemplate != null) 'launchTemplate': launchTemplate,
    };
  }
}

/// Describes a launch template version that could not be deleted.
class DeleteLaunchTemplateVersionsResponseErrorItem {
  /// The ID of the launch template.
  final String? launchTemplateId;

  /// The name of the launch template.
  final String? launchTemplateName;

  /// Information about the error.
  final ResponseError? responseError;

  /// The version number of the launch template.
  final int? versionNumber;

  DeleteLaunchTemplateVersionsResponseErrorItem({
    this.launchTemplateId,
    this.launchTemplateName,
    this.responseError,
    this.versionNumber,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final responseError = this.responseError;
    final versionNumber = this.versionNumber;
    return {
      if (launchTemplateId != null) 'launchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'launchTemplateName': launchTemplateName,
      if (responseError != null) 'responseError': responseError,
      if (versionNumber != null) 'versionNumber': versionNumber,
    };
  }
}

/// Describes a launch template version that was successfully deleted.
class DeleteLaunchTemplateVersionsResponseSuccessItem {
  /// The ID of the launch template.
  final String? launchTemplateId;

  /// The name of the launch template.
  final String? launchTemplateName;

  /// The version number of the launch template.
  final int? versionNumber;

  DeleteLaunchTemplateVersionsResponseSuccessItem({
    this.launchTemplateId,
    this.launchTemplateName,
    this.versionNumber,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final versionNumber = this.versionNumber;
    return {
      if (launchTemplateId != null) 'launchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'launchTemplateName': launchTemplateName,
      if (versionNumber != null) 'versionNumber': versionNumber,
    };
  }
}

class DeleteLaunchTemplateVersionsResult {
  /// Information about the launch template versions that were successfully
  /// deleted.
  final List<DeleteLaunchTemplateVersionsResponseSuccessItem>?
      successfullyDeletedLaunchTemplateVersions;

  /// Information about the launch template versions that could not be deleted.
  final List<DeleteLaunchTemplateVersionsResponseErrorItem>?
      unsuccessfullyDeletedLaunchTemplateVersions;

  DeleteLaunchTemplateVersionsResult({
    this.successfullyDeletedLaunchTemplateVersions,
    this.unsuccessfullyDeletedLaunchTemplateVersions,
  });

  Map<String, dynamic> toJson() {
    final successfullyDeletedLaunchTemplateVersions =
        this.successfullyDeletedLaunchTemplateVersions;
    final unsuccessfullyDeletedLaunchTemplateVersions =
        this.unsuccessfullyDeletedLaunchTemplateVersions;
    return {
      if (successfullyDeletedLaunchTemplateVersions != null)
        'successfullyDeletedLaunchTemplateVersionSet':
            successfullyDeletedLaunchTemplateVersions,
      if (unsuccessfullyDeletedLaunchTemplateVersions != null)
        'unsuccessfullyDeletedLaunchTemplateVersionSet':
            unsuccessfullyDeletedLaunchTemplateVersions,
    };
  }
}

class DeleteLocalGatewayRouteResult {
  /// Information about the route.
  final LocalGatewayRoute? route;

  DeleteLocalGatewayRouteResult({
    this.route,
  });

  Map<String, dynamic> toJson() {
    final route = this.route;
    return {
      if (route != null) 'route': route,
    };
  }
}

class DeleteLocalGatewayRouteTableResult {
  /// Information about the local gateway route table.
  final LocalGatewayRouteTable? localGatewayRouteTable;

  DeleteLocalGatewayRouteTableResult({
    this.localGatewayRouteTable,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTable = this.localGatewayRouteTable;
    return {
      if (localGatewayRouteTable != null)
        'localGatewayRouteTable': localGatewayRouteTable,
    };
  }
}

class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult {
  /// Information about the association.
  final LocalGatewayRouteTableVirtualInterfaceGroupAssociation?
      localGatewayRouteTableVirtualInterfaceGroupAssociation;

  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult({
    this.localGatewayRouteTableVirtualInterfaceGroupAssociation,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableVirtualInterfaceGroupAssociation =
        this.localGatewayRouteTableVirtualInterfaceGroupAssociation;
    return {
      if (localGatewayRouteTableVirtualInterfaceGroupAssociation != null)
        'localGatewayRouteTableVirtualInterfaceGroupAssociation':
            localGatewayRouteTableVirtualInterfaceGroupAssociation,
    };
  }
}

class DeleteLocalGatewayRouteTableVpcAssociationResult {
  /// Information about the association.
  final LocalGatewayRouteTableVpcAssociation?
      localGatewayRouteTableVpcAssociation;

  DeleteLocalGatewayRouteTableVpcAssociationResult({
    this.localGatewayRouteTableVpcAssociation,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableVpcAssociation =
        this.localGatewayRouteTableVpcAssociation;
    return {
      if (localGatewayRouteTableVpcAssociation != null)
        'localGatewayRouteTableVpcAssociation':
            localGatewayRouteTableVpcAssociation,
    };
  }
}

class DeleteManagedPrefixListResult {
  /// Information about the prefix list.
  final ManagedPrefixList? prefixList;

  DeleteManagedPrefixListResult({
    this.prefixList,
  });

  Map<String, dynamic> toJson() {
    final prefixList = this.prefixList;
    return {
      if (prefixList != null) 'prefixList': prefixList,
    };
  }
}

class DeleteNatGatewayResult {
  /// The ID of the NAT gateway.
  final String? natGatewayId;

  DeleteNatGatewayResult({
    this.natGatewayId,
  });

  Map<String, dynamic> toJson() {
    final natGatewayId = this.natGatewayId;
    return {
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
    };
  }
}

class DeleteNetworkInsightsAccessScopeAnalysisResult {
  /// The ID of the Network Access Scope analysis.
  final String? networkInsightsAccessScopeAnalysisId;

  DeleteNetworkInsightsAccessScopeAnalysisResult({
    this.networkInsightsAccessScopeAnalysisId,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScopeAnalysisId =
        this.networkInsightsAccessScopeAnalysisId;
    return {
      if (networkInsightsAccessScopeAnalysisId != null)
        'networkInsightsAccessScopeAnalysisId':
            networkInsightsAccessScopeAnalysisId,
    };
  }
}

class DeleteNetworkInsightsAccessScopeResult {
  /// The ID of the Network Access Scope.
  final String? networkInsightsAccessScopeId;

  DeleteNetworkInsightsAccessScopeResult({
    this.networkInsightsAccessScopeId,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScopeId = this.networkInsightsAccessScopeId;
    return {
      if (networkInsightsAccessScopeId != null)
        'networkInsightsAccessScopeId': networkInsightsAccessScopeId,
    };
  }
}

class DeleteNetworkInsightsAnalysisResult {
  /// The ID of the network insights analysis.
  final String? networkInsightsAnalysisId;

  DeleteNetworkInsightsAnalysisResult({
    this.networkInsightsAnalysisId,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAnalysisId = this.networkInsightsAnalysisId;
    return {
      if (networkInsightsAnalysisId != null)
        'networkInsightsAnalysisId': networkInsightsAnalysisId,
    };
  }
}

class DeleteNetworkInsightsPathResult {
  /// The ID of the path.
  final String? networkInsightsPathId;

  DeleteNetworkInsightsPathResult({
    this.networkInsightsPathId,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsPathId = this.networkInsightsPathId;
    return {
      if (networkInsightsPathId != null)
        'networkInsightsPathId': networkInsightsPathId,
    };
  }
}

/// Contains the output for DeleteNetworkInterfacePermission.
class DeleteNetworkInterfacePermissionResult {
  /// Returns <code>true</code> if the request succeeds, otherwise returns an
  /// error.
  final bool? returnValue;

  DeleteNetworkInterfacePermissionResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DeletePublicIpv4PoolResult {
  /// Information about the result of deleting the public IPv4 pool.
  final bool? returnValue;

  DeletePublicIpv4PoolResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'returnValue': returnValue,
    };
  }
}

/// Describes the error for a Reserved Instance whose queued purchase could not
/// be deleted.
class DeleteQueuedReservedInstancesError {
  /// The error code.
  final DeleteQueuedReservedInstancesErrorCode? code;

  /// The error message.
  final String? message;

  DeleteQueuedReservedInstancesError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum DeleteQueuedReservedInstancesErrorCode {
  reservedInstancesIdInvalid('reserved-instances-id-invalid'),
  reservedInstancesNotInQueuedState('reserved-instances-not-in-queued-state'),
  unexpectedError('unexpected-error'),
  ;

  final String value;

  const DeleteQueuedReservedInstancesErrorCode(this.value);

  static DeleteQueuedReservedInstancesErrorCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DeleteQueuedReservedInstancesErrorCode'));
}

class DeleteQueuedReservedInstancesResult {
  /// Information about the queued purchases that could not be deleted.
  final List<FailedQueuedPurchaseDeletion>? failedQueuedPurchaseDeletions;

  /// Information about the queued purchases that were successfully deleted.
  final List<SuccessfulQueuedPurchaseDeletion>?
      successfulQueuedPurchaseDeletions;

  DeleteQueuedReservedInstancesResult({
    this.failedQueuedPurchaseDeletions,
    this.successfulQueuedPurchaseDeletions,
  });

  Map<String, dynamic> toJson() {
    final failedQueuedPurchaseDeletions = this.failedQueuedPurchaseDeletions;
    final successfulQueuedPurchaseDeletions =
        this.successfulQueuedPurchaseDeletions;
    return {
      if (failedQueuedPurchaseDeletions != null)
        'failedQueuedPurchaseDeletionSet': failedQueuedPurchaseDeletions,
      if (successfulQueuedPurchaseDeletions != null)
        'successfulQueuedPurchaseDeletionSet':
            successfulQueuedPurchaseDeletions,
    };
  }
}

class DeleteSubnetCidrReservationResult {
  /// Information about the deleted subnet CIDR reservation.
  final SubnetCidrReservation? deletedSubnetCidrReservation;

  DeleteSubnetCidrReservationResult({
    this.deletedSubnetCidrReservation,
  });

  Map<String, dynamic> toJson() {
    final deletedSubnetCidrReservation = this.deletedSubnetCidrReservation;
    return {
      if (deletedSubnetCidrReservation != null)
        'deletedSubnetCidrReservation': deletedSubnetCidrReservation,
    };
  }
}

class DeleteTrafficMirrorFilterResult {
  /// The ID of the Traffic Mirror filter.
  final String? trafficMirrorFilterId;

  DeleteTrafficMirrorFilterResult({
    this.trafficMirrorFilterId,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorFilterId = this.trafficMirrorFilterId;
    return {
      if (trafficMirrorFilterId != null)
        'trafficMirrorFilterId': trafficMirrorFilterId,
    };
  }
}

class DeleteTrafficMirrorFilterRuleResult {
  /// The ID of the deleted Traffic Mirror rule.
  final String? trafficMirrorFilterRuleId;

  DeleteTrafficMirrorFilterRuleResult({
    this.trafficMirrorFilterRuleId,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorFilterRuleId = this.trafficMirrorFilterRuleId;
    return {
      if (trafficMirrorFilterRuleId != null)
        'trafficMirrorFilterRuleId': trafficMirrorFilterRuleId,
    };
  }
}

class DeleteTrafficMirrorSessionResult {
  /// The ID of the deleted Traffic Mirror session.
  final String? trafficMirrorSessionId;

  DeleteTrafficMirrorSessionResult({
    this.trafficMirrorSessionId,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorSessionId = this.trafficMirrorSessionId;
    return {
      if (trafficMirrorSessionId != null)
        'trafficMirrorSessionId': trafficMirrorSessionId,
    };
  }
}

class DeleteTrafficMirrorTargetResult {
  /// The ID of the deleted Traffic Mirror target.
  final String? trafficMirrorTargetId;

  DeleteTrafficMirrorTargetResult({
    this.trafficMirrorTargetId,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorTargetId = this.trafficMirrorTargetId;
    return {
      if (trafficMirrorTargetId != null)
        'trafficMirrorTargetId': trafficMirrorTargetId,
    };
  }
}

class DeleteTransitGatewayConnectPeerResult {
  /// Information about the deleted Connect peer.
  final TransitGatewayConnectPeer? transitGatewayConnectPeer;

  DeleteTransitGatewayConnectPeerResult({
    this.transitGatewayConnectPeer,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayConnectPeer = this.transitGatewayConnectPeer;
    return {
      if (transitGatewayConnectPeer != null)
        'transitGatewayConnectPeer': transitGatewayConnectPeer,
    };
  }
}

class DeleteTransitGatewayConnectResult {
  /// Information about the deleted Connect attachment.
  final TransitGatewayConnect? transitGatewayConnect;

  DeleteTransitGatewayConnectResult({
    this.transitGatewayConnect,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayConnect = this.transitGatewayConnect;
    return {
      if (transitGatewayConnect != null)
        'transitGatewayConnect': transitGatewayConnect,
    };
  }
}

class DeleteTransitGatewayMulticastDomainResult {
  /// Information about the deleted transit gateway multicast domain.
  final TransitGatewayMulticastDomain? transitGatewayMulticastDomain;

  DeleteTransitGatewayMulticastDomainResult({
    this.transitGatewayMulticastDomain,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayMulticastDomain = this.transitGatewayMulticastDomain;
    return {
      if (transitGatewayMulticastDomain != null)
        'transitGatewayMulticastDomain': transitGatewayMulticastDomain,
    };
  }
}

class DeleteTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment? transitGatewayPeeringAttachment;

  DeleteTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPeeringAttachment =
        this.transitGatewayPeeringAttachment;
    return {
      if (transitGatewayPeeringAttachment != null)
        'transitGatewayPeeringAttachment': transitGatewayPeeringAttachment,
    };
  }
}

class DeleteTransitGatewayPolicyTableResult {
  /// Provides details about the deleted transit gateway policy table.
  final TransitGatewayPolicyTable? transitGatewayPolicyTable;

  DeleteTransitGatewayPolicyTableResult({
    this.transitGatewayPolicyTable,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPolicyTable = this.transitGatewayPolicyTable;
    return {
      if (transitGatewayPolicyTable != null)
        'transitGatewayPolicyTable': transitGatewayPolicyTable,
    };
  }
}

class DeleteTransitGatewayPrefixListReferenceResult {
  /// Information about the deleted prefix list reference.
  final TransitGatewayPrefixListReference? transitGatewayPrefixListReference;

  DeleteTransitGatewayPrefixListReferenceResult({
    this.transitGatewayPrefixListReference,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPrefixListReference =
        this.transitGatewayPrefixListReference;
    return {
      if (transitGatewayPrefixListReference != null)
        'transitGatewayPrefixListReference': transitGatewayPrefixListReference,
    };
  }
}

class DeleteTransitGatewayResult {
  /// Information about the deleted transit gateway.
  final TransitGateway? transitGateway;

  DeleteTransitGatewayResult({
    this.transitGateway,
  });

  Map<String, dynamic> toJson() {
    final transitGateway = this.transitGateway;
    return {
      if (transitGateway != null) 'transitGateway': transitGateway,
    };
  }
}

class DeleteTransitGatewayRouteResult {
  /// Information about the route.
  final TransitGatewayRoute? route;

  DeleteTransitGatewayRouteResult({
    this.route,
  });

  Map<String, dynamic> toJson() {
    final route = this.route;
    return {
      if (route != null) 'route': route,
    };
  }
}

class DeleteTransitGatewayRouteTableAnnouncementResult {
  /// Provides details about a deleted transit gateway route table.
  final TransitGatewayRouteTableAnnouncement?
      transitGatewayRouteTableAnnouncement;

  DeleteTransitGatewayRouteTableAnnouncementResult({
    this.transitGatewayRouteTableAnnouncement,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayRouteTableAnnouncement =
        this.transitGatewayRouteTableAnnouncement;
    return {
      if (transitGatewayRouteTableAnnouncement != null)
        'transitGatewayRouteTableAnnouncement':
            transitGatewayRouteTableAnnouncement,
    };
  }
}

class DeleteTransitGatewayRouteTableResult {
  /// Information about the deleted transit gateway route table.
  final TransitGatewayRouteTable? transitGatewayRouteTable;

  DeleteTransitGatewayRouteTableResult({
    this.transitGatewayRouteTable,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayRouteTable = this.transitGatewayRouteTable;
    return {
      if (transitGatewayRouteTable != null)
        'transitGatewayRouteTable': transitGatewayRouteTable,
    };
  }
}

class DeleteTransitGatewayVpcAttachmentResult {
  /// Information about the deleted VPC attachment.
  final TransitGatewayVpcAttachment? transitGatewayVpcAttachment;

  DeleteTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayVpcAttachment = this.transitGatewayVpcAttachment;
    return {
      if (transitGatewayVpcAttachment != null)
        'transitGatewayVpcAttachment': transitGatewayVpcAttachment,
    };
  }
}

class DeleteVerifiedAccessEndpointResult {
  /// Details about the Verified Access endpoint.
  final VerifiedAccessEndpoint? verifiedAccessEndpoint;

  DeleteVerifiedAccessEndpointResult({
    this.verifiedAccessEndpoint,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessEndpoint = this.verifiedAccessEndpoint;
    return {
      if (verifiedAccessEndpoint != null)
        'verifiedAccessEndpoint': verifiedAccessEndpoint,
    };
  }
}

class DeleteVerifiedAccessGroupResult {
  /// Details about the Verified Access group.
  final VerifiedAccessGroup? verifiedAccessGroup;

  DeleteVerifiedAccessGroupResult({
    this.verifiedAccessGroup,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessGroup = this.verifiedAccessGroup;
    return {
      if (verifiedAccessGroup != null)
        'verifiedAccessGroup': verifiedAccessGroup,
    };
  }
}

class DeleteVerifiedAccessInstanceResult {
  /// Details about the Verified Access instance.
  final VerifiedAccessInstance? verifiedAccessInstance;

  DeleteVerifiedAccessInstanceResult({
    this.verifiedAccessInstance,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessInstance = this.verifiedAccessInstance;
    return {
      if (verifiedAccessInstance != null)
        'verifiedAccessInstance': verifiedAccessInstance,
    };
  }
}

class DeleteVerifiedAccessTrustProviderResult {
  /// Details about the Verified Access trust provider.
  final VerifiedAccessTrustProvider? verifiedAccessTrustProvider;

  DeleteVerifiedAccessTrustProviderResult({
    this.verifiedAccessTrustProvider,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessTrustProvider = this.verifiedAccessTrustProvider;
    return {
      if (verifiedAccessTrustProvider != null)
        'verifiedAccessTrustProvider': verifiedAccessTrustProvider,
    };
  }
}

class DeleteVpcEndpointConnectionNotificationsResult {
  /// Information about the notifications that could not be deleted successfully.
  final List<UnsuccessfulItem>? unsuccessful;

  DeleteVpcEndpointConnectionNotificationsResult({
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final unsuccessful = this.unsuccessful;
    return {
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class DeleteVpcEndpointServiceConfigurationsResult {
  /// Information about the service configurations that were not deleted, if
  /// applicable.
  final List<UnsuccessfulItem>? unsuccessful;

  DeleteVpcEndpointServiceConfigurationsResult({
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final unsuccessful = this.unsuccessful;
    return {
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class DeleteVpcEndpointsResult {
  /// Information about the VPC endpoints that were not successfully deleted.
  final List<UnsuccessfulItem>? unsuccessful;

  DeleteVpcEndpointsResult({
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final unsuccessful = this.unsuccessful;
    return {
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class DeleteVpcPeeringConnectionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DeleteVpcPeeringConnectionResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DeprovisionByoipCidrResult {
  /// Information about the address range.
  final ByoipCidr? byoipCidr;

  DeprovisionByoipCidrResult({
    this.byoipCidr,
  });

  Map<String, dynamic> toJson() {
    final byoipCidr = this.byoipCidr;
    return {
      if (byoipCidr != null) 'byoipCidr': byoipCidr,
    };
  }
}

class DeprovisionIpamByoasnResult {
  /// An ASN and BYOIP CIDR association.
  final Byoasn? byoasn;

  DeprovisionIpamByoasnResult({
    this.byoasn,
  });

  Map<String, dynamic> toJson() {
    final byoasn = this.byoasn;
    return {
      if (byoasn != null) 'byoasn': byoasn,
    };
  }
}

class DeprovisionIpamPoolCidrResult {
  /// The deprovisioned pool CIDR.
  final IpamPoolCidr? ipamPoolCidr;

  DeprovisionIpamPoolCidrResult({
    this.ipamPoolCidr,
  });

  Map<String, dynamic> toJson() {
    final ipamPoolCidr = this.ipamPoolCidr;
    return {
      if (ipamPoolCidr != null) 'ipamPoolCidr': ipamPoolCidr,
    };
  }
}

class DeprovisionPublicIpv4PoolCidrResult {
  /// The deprovisioned CIDRs.
  final List<String>? deprovisionedAddresses;

  /// The ID of the pool that you deprovisioned the CIDR from.
  final String? poolId;

  DeprovisionPublicIpv4PoolCidrResult({
    this.deprovisionedAddresses,
    this.poolId,
  });

  Map<String, dynamic> toJson() {
    final deprovisionedAddresses = this.deprovisionedAddresses;
    final poolId = this.poolId;
    return {
      if (deprovisionedAddresses != null)
        'deprovisionedAddressSet': deprovisionedAddresses,
      if (poolId != null) 'poolId': poolId,
    };
  }
}

class DeregisterInstanceEventNotificationAttributesResult {
  /// The resulting set of tag keys.
  final InstanceTagNotificationAttribute? instanceTagAttribute;

  DeregisterInstanceEventNotificationAttributesResult({
    this.instanceTagAttribute,
  });

  Map<String, dynamic> toJson() {
    final instanceTagAttribute = this.instanceTagAttribute;
    return {
      if (instanceTagAttribute != null)
        'instanceTagAttribute': instanceTagAttribute,
    };
  }
}

/// Information about the tag keys to deregister for the current Region. You can
/// either specify individual tag keys or deregister all tag keys in the current
/// Region. You must specify either <code>IncludeAllTagsOfInstance</code> or
/// <code>InstanceTagKeys</code> in the request
class DeregisterInstanceTagAttributeRequest {
  /// Indicates whether to deregister all tag keys in the current Region. Specify
  /// <code>false</code> to deregister all tag keys.
  final bool? includeAllTagsOfInstance;

  /// Information about the tag keys to deregister.
  final List<String>? instanceTagKeys;

  DeregisterInstanceTagAttributeRequest({
    this.includeAllTagsOfInstance,
    this.instanceTagKeys,
  });

  Map<String, dynamic> toJson() {
    final includeAllTagsOfInstance = this.includeAllTagsOfInstance;
    final instanceTagKeys = this.instanceTagKeys;
    return {
      if (includeAllTagsOfInstance != null)
        'IncludeAllTagsOfInstance': includeAllTagsOfInstance,
      if (instanceTagKeys != null) 'InstanceTagKey': instanceTagKeys,
    };
  }
}

class DeregisterTransitGatewayMulticastGroupMembersResult {
  /// Information about the deregistered members.
  final TransitGatewayMulticastDeregisteredGroupMembers?
      deregisteredMulticastGroupMembers;

  DeregisterTransitGatewayMulticastGroupMembersResult({
    this.deregisteredMulticastGroupMembers,
  });

  Map<String, dynamic> toJson() {
    final deregisteredMulticastGroupMembers =
        this.deregisteredMulticastGroupMembers;
    return {
      if (deregisteredMulticastGroupMembers != null)
        'deregisteredMulticastGroupMembers': deregisteredMulticastGroupMembers,
    };
  }
}

class DeregisterTransitGatewayMulticastGroupSourcesResult {
  /// Information about the deregistered group sources.
  final TransitGatewayMulticastDeregisteredGroupSources?
      deregisteredMulticastGroupSources;

  DeregisterTransitGatewayMulticastGroupSourcesResult({
    this.deregisteredMulticastGroupSources,
  });

  Map<String, dynamic> toJson() {
    final deregisteredMulticastGroupSources =
        this.deregisteredMulticastGroupSources;
    return {
      if (deregisteredMulticastGroupSources != null)
        'deregisteredMulticastGroupSources': deregisteredMulticastGroupSources,
    };
  }
}

class DescribeAccountAttributesResult {
  /// Information about the account attributes.
  final List<AccountAttribute>? accountAttributes;

  DescribeAccountAttributesResult({
    this.accountAttributes,
  });

  Map<String, dynamic> toJson() {
    final accountAttributes = this.accountAttributes;
    return {
      if (accountAttributes != null) 'accountAttributeSet': accountAttributes,
    };
  }
}

class DescribeAddressTransfersResult {
  /// The Elastic IP address transfer.
  final List<AddressTransfer>? addressTransfers;

  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  final String? nextToken;

  DescribeAddressTransfersResult({
    this.addressTransfers,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final addressTransfers = this.addressTransfers;
    final nextToken = this.nextToken;
    return {
      if (addressTransfers != null) 'addressTransferSet': addressTransfers,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeAddressesAttributeResult {
  /// Information about the IP addresses.
  final List<AddressAttribute>? addresses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeAddressesAttributeResult({
    this.addresses,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final addresses = this.addresses;
    final nextToken = this.nextToken;
    return {
      if (addresses != null) 'addressSet': addresses,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeAddressesResult {
  /// Information about the Elastic IP addresses.
  final List<Address>? addresses;

  DescribeAddressesResult({
    this.addresses,
  });

  Map<String, dynamic> toJson() {
    final addresses = this.addresses;
    return {
      if (addresses != null) 'addressesSet': addresses,
    };
  }
}

class DescribeAggregateIdFormatResult {
  /// Information about each resource's ID format.
  final List<IdFormat>? statuses;

  /// Indicates whether all resource types in the Region are configured to use
  /// longer IDs. This value is only <code>true</code> if all users are configured
  /// to use longer IDs for all resources types in the Region.
  final bool? useLongIdsAggregated;

  DescribeAggregateIdFormatResult({
    this.statuses,
    this.useLongIdsAggregated,
  });

  Map<String, dynamic> toJson() {
    final statuses = this.statuses;
    final useLongIdsAggregated = this.useLongIdsAggregated;
    return {
      if (statuses != null) 'statusSet': statuses,
      if (useLongIdsAggregated != null)
        'useLongIdsAggregated': useLongIdsAggregated,
    };
  }
}

class DescribeAvailabilityZonesResult {
  /// Information about the Availability Zones, Local Zones, and Wavelength Zones.
  final List<AvailabilityZone>? availabilityZones;

  DescribeAvailabilityZonesResult({
    this.availabilityZones,
  });

  Map<String, dynamic> toJson() {
    final availabilityZones = this.availabilityZones;
    return {
      if (availabilityZones != null) 'availabilityZoneInfo': availabilityZones,
    };
  }
}

class DescribeAwsNetworkPerformanceMetricSubscriptionsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Describes the current Infrastructure Performance subscriptions.
  final List<Subscription>? subscriptions;

  DescribeAwsNetworkPerformanceMetricSubscriptionsResult({
    this.nextToken,
    this.subscriptions,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final subscriptions = this.subscriptions;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (subscriptions != null) 'subscriptionSet': subscriptions,
    };
  }
}

class DescribeBundleTasksResult {
  /// Information about the bundle tasks.
  final List<BundleTask>? bundleTasks;

  DescribeBundleTasksResult({
    this.bundleTasks,
  });

  Map<String, dynamic> toJson() {
    final bundleTasks = this.bundleTasks;
    return {
      if (bundleTasks != null) 'bundleInstanceTasksSet': bundleTasks,
    };
  }
}

class DescribeByoipCidrsResult {
  /// Information about your address ranges.
  final List<ByoipCidr>? byoipCidrs;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeByoipCidrsResult({
    this.byoipCidrs,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final byoipCidrs = this.byoipCidrs;
    final nextToken = this.nextToken;
    return {
      if (byoipCidrs != null) 'byoipCidrSet': byoipCidrs,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeCapacityBlockOfferingsResult {
  /// The recommended Capacity Block offering for the dates specified.
  final List<CapacityBlockOffering>? capacityBlockOfferings;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeCapacityBlockOfferingsResult({
    this.capacityBlockOfferings,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final capacityBlockOfferings = this.capacityBlockOfferings;
    final nextToken = this.nextToken;
    return {
      if (capacityBlockOfferings != null)
        'capacityBlockOfferingSet': capacityBlockOfferings,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeCapacityReservationFleetsResult {
  /// Information about the Capacity Reservation Fleets.
  final List<CapacityReservationFleet>? capacityReservationFleets;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeCapacityReservationFleetsResult({
    this.capacityReservationFleets,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationFleets = this.capacityReservationFleets;
    final nextToken = this.nextToken;
    return {
      if (capacityReservationFleets != null)
        'capacityReservationFleetSet': capacityReservationFleets,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeCapacityReservationsResult {
  /// Information about the Capacity Reservations.
  final List<CapacityReservation>? capacityReservations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeCapacityReservationsResult({
    this.capacityReservations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final capacityReservations = this.capacityReservations;
    final nextToken = this.nextToken;
    return {
      if (capacityReservations != null)
        'capacityReservationSet': capacityReservations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeCarrierGatewaysResult {
  /// Information about the carrier gateway.
  final List<CarrierGateway>? carrierGateways;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeCarrierGatewaysResult({
    this.carrierGateways,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final carrierGateways = this.carrierGateways;
    final nextToken = this.nextToken;
    return {
      if (carrierGateways != null) 'carrierGatewaySet': carrierGateways,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeClassicLinkInstancesResult {
  /// Information about one or more linked EC2-Classic instances.
  final List<ClassicLinkInstance>? instances;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeClassicLinkInstancesResult({
    this.instances,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instances = this.instances;
    final nextToken = this.nextToken;
    return {
      if (instances != null) 'instancesSet': instances,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeClientVpnAuthorizationRulesResult {
  /// Information about the authorization rules.
  final List<AuthorizationRule>? authorizationRules;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeClientVpnAuthorizationRulesResult({
    this.authorizationRules,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final authorizationRules = this.authorizationRules;
    final nextToken = this.nextToken;
    return {
      if (authorizationRules != null) 'authorizationRule': authorizationRules,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeClientVpnConnectionsResult {
  /// Information about the active and terminated client connections.
  final List<ClientVpnConnection>? connections;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeClientVpnConnectionsResult({
    this.connections,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final connections = this.connections;
    final nextToken = this.nextToken;
    return {
      if (connections != null) 'connections': connections,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeClientVpnEndpointsResult {
  /// Information about the Client VPN endpoints.
  final List<ClientVpnEndpoint>? clientVpnEndpoints;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeClientVpnEndpointsResult({
    this.clientVpnEndpoints,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final clientVpnEndpoints = this.clientVpnEndpoints;
    final nextToken = this.nextToken;
    return {
      if (clientVpnEndpoints != null) 'clientVpnEndpoint': clientVpnEndpoints,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeClientVpnRoutesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the Client VPN endpoint routes.
  final List<ClientVpnRoute>? routes;

  DescribeClientVpnRoutesResult({
    this.nextToken,
    this.routes,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final routes = this.routes;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (routes != null) 'routes': routes,
    };
  }
}

class DescribeClientVpnTargetNetworksResult {
  /// Information about the associated target networks.
  final List<TargetNetwork>? clientVpnTargetNetworks;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeClientVpnTargetNetworksResult({
    this.clientVpnTargetNetworks,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final clientVpnTargetNetworks = this.clientVpnTargetNetworks;
    final nextToken = this.nextToken;
    return {
      if (clientVpnTargetNetworks != null)
        'clientVpnTargetNetworks': clientVpnTargetNetworks,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeCoipPoolsResult {
  /// Information about the address pools.
  final List<CoipPool>? coipPools;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeCoipPoolsResult({
    this.coipPools,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final coipPools = this.coipPools;
    final nextToken = this.nextToken;
    return {
      if (coipPools != null) 'coipPoolSet': coipPools,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeConversionTasksResult {
  /// Information about the conversion tasks.
  final List<ConversionTask>? conversionTasks;

  DescribeConversionTasksResult({
    this.conversionTasks,
  });

  Map<String, dynamic> toJson() {
    final conversionTasks = this.conversionTasks;
    return {
      if (conversionTasks != null) 'conversionTasks': conversionTasks,
    };
  }
}

/// Contains the output of DescribeCustomerGateways.
class DescribeCustomerGatewaysResult {
  /// Information about one or more customer gateways.
  final List<CustomerGateway>? customerGateways;

  DescribeCustomerGatewaysResult({
    this.customerGateways,
  });

  Map<String, dynamic> toJson() {
    final customerGateways = this.customerGateways;
    return {
      if (customerGateways != null) 'customerGatewaySet': customerGateways,
    };
  }
}

class DescribeDhcpOptionsResult {
  /// Information about one or more DHCP options sets.
  final List<DhcpOptions>? dhcpOptions;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeDhcpOptionsResult({
    this.dhcpOptions,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final dhcpOptions = this.dhcpOptions;
    final nextToken = this.nextToken;
    return {
      if (dhcpOptions != null) 'dhcpOptionsSet': dhcpOptions,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeEgressOnlyInternetGatewaysResult {
  /// Information about the egress-only internet gateways.
  final List<EgressOnlyInternetGateway>? egressOnlyInternetGateways;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeEgressOnlyInternetGatewaysResult({
    this.egressOnlyInternetGateways,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final egressOnlyInternetGateways = this.egressOnlyInternetGateways;
    final nextToken = this.nextToken;
    return {
      if (egressOnlyInternetGateways != null)
        'egressOnlyInternetGatewaySet': egressOnlyInternetGateways,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeElasticGpusResult {
  /// Information about the Elastic Graphics accelerators.
  final List<ElasticGpus>? elasticGpuSet;

  /// The total number of items to return. If the total number of items available
  /// is more than the value specified in max-items then a Next-Token will be
  /// provided in the output that you can use to resume pagination.
  final int? maxResults;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeElasticGpusResult({
    this.elasticGpuSet,
    this.maxResults,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final elasticGpuSet = this.elasticGpuSet;
    final maxResults = this.maxResults;
    final nextToken = this.nextToken;
    return {
      if (elasticGpuSet != null) 'elasticGpuSet': elasticGpuSet,
      if (maxResults != null) 'maxResults': maxResults,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeExportImageTasksResult {
  /// Information about the export image tasks.
  final List<ExportImageTask>? exportImageTasks;

  /// The token to use to get the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeExportImageTasksResult({
    this.exportImageTasks,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final exportImageTasks = this.exportImageTasks;
    final nextToken = this.nextToken;
    return {
      if (exportImageTasks != null) 'exportImageTaskSet': exportImageTasks,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeExportTasksResult {
  /// Information about the export tasks.
  final List<ExportTask>? exportTasks;

  DescribeExportTasksResult({
    this.exportTasks,
  });

  Map<String, dynamic> toJson() {
    final exportTasks = this.exportTasks;
    return {
      if (exportTasks != null) 'exportTaskSet': exportTasks,
    };
  }
}

class DescribeFastLaunchImagesResult {
  /// A collection of details about the fast-launch enabled Windows images that
  /// meet the requested criteria.
  final List<DescribeFastLaunchImagesSuccessItem>? fastLaunchImages;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeFastLaunchImagesResult({
    this.fastLaunchImages,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final fastLaunchImages = this.fastLaunchImages;
    final nextToken = this.nextToken;
    return {
      if (fastLaunchImages != null) 'fastLaunchImageSet': fastLaunchImages,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

/// Describe details about a Windows image with Windows fast launch enabled that
/// meets the requested criteria. Criteria are defined by the
/// <code>DescribeFastLaunchImages</code> action filters.
class DescribeFastLaunchImagesSuccessItem {
  /// The image ID that identifies the Windows fast launch enabled image.
  final String? imageId;

  /// The launch template that the Windows fast launch enabled AMI uses when it
  /// launches Windows instances from pre-provisioned snapshots.
  final FastLaunchLaunchTemplateSpecificationResponse? launchTemplate;

  /// The maximum number of instances that Amazon EC2 can launch at the same time
  /// to create pre-provisioned snapshots for Windows fast launch.
  final int? maxParallelLaunches;

  /// The owner ID for the Windows fast launch enabled AMI.
  final String? ownerId;

  /// The resource type that Amazon EC2 uses for pre-provisioning the Windows AMI.
  /// Supported values include: <code>snapshot</code>.
  final FastLaunchResourceType? resourceType;

  /// A group of parameters that are used for pre-provisioning the associated
  /// Windows AMI using snapshots.
  final FastLaunchSnapshotConfigurationResponse? snapshotConfiguration;

  /// The current state of Windows fast launch for the specified Windows AMI.
  final FastLaunchStateCode? state;

  /// The reason that Windows fast launch for the AMI changed to the current
  /// state.
  final String? stateTransitionReason;

  /// The time that Windows fast launch for the AMI changed to the current state.
  final DateTime? stateTransitionTime;

  DescribeFastLaunchImagesSuccessItem({
    this.imageId,
    this.launchTemplate,
    this.maxParallelLaunches,
    this.ownerId,
    this.resourceType,
    this.snapshotConfiguration,
    this.state,
    this.stateTransitionReason,
    this.stateTransitionTime,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    final launchTemplate = this.launchTemplate;
    final maxParallelLaunches = this.maxParallelLaunches;
    final ownerId = this.ownerId;
    final resourceType = this.resourceType;
    final snapshotConfiguration = this.snapshotConfiguration;
    final state = this.state;
    final stateTransitionReason = this.stateTransitionReason;
    final stateTransitionTime = this.stateTransitionTime;
    return {
      if (imageId != null) 'imageId': imageId,
      if (launchTemplate != null) 'launchTemplate': launchTemplate,
      if (maxParallelLaunches != null)
        'maxParallelLaunches': maxParallelLaunches,
      if (ownerId != null) 'ownerId': ownerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (snapshotConfiguration != null)
        'snapshotConfiguration': snapshotConfiguration,
      if (state != null) 'state': state.value,
      if (stateTransitionReason != null)
        'stateTransitionReason': stateTransitionReason,
      if (stateTransitionTime != null)
        'stateTransitionTime': iso8601ToJson(stateTransitionTime),
    };
  }
}

/// Describes fast snapshot restores for a snapshot.
class DescribeFastSnapshotRestoreSuccessItem {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The time at which fast snapshot restores entered the <code>disabled</code>
  /// state.
  final DateTime? disabledTime;

  /// The time at which fast snapshot restores entered the <code>disabling</code>
  /// state.
  final DateTime? disablingTime;

  /// The time at which fast snapshot restores entered the <code>enabled</code>
  /// state.
  final DateTime? enabledTime;

  /// The time at which fast snapshot restores entered the <code>enabling</code>
  /// state.
  final DateTime? enablingTime;

  /// The time at which fast snapshot restores entered the <code>optimizing</code>
  /// state.
  final DateTime? optimizingTime;

  /// The Amazon Web Services owner alias that enabled fast snapshot restores on
  /// the snapshot. This is intended for future use.
  final String? ownerAlias;

  /// The ID of the Amazon Web Services account that enabled fast snapshot
  /// restores on the snapshot.
  final String? ownerId;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The state of fast snapshot restores.
  final FastSnapshotRestoreStateCode? state;

  /// The reason for the state transition. The possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>Client.UserInitiated</code> - The state successfully transitioned to
  /// <code>enabling</code> or <code>disabling</code>.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiated - Lifecycle state transition</code> - The state
  /// successfully transitioned to <code>optimizing</code>, <code>enabled</code>,
  /// or <code>disabled</code>.
  /// </li>
  /// </ul>
  final String? stateTransitionReason;

  DescribeFastSnapshotRestoreSuccessItem({
    this.availabilityZone,
    this.disabledTime,
    this.disablingTime,
    this.enabledTime,
    this.enablingTime,
    this.optimizingTime,
    this.ownerAlias,
    this.ownerId,
    this.snapshotId,
    this.state,
    this.stateTransitionReason,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final disabledTime = this.disabledTime;
    final disablingTime = this.disablingTime;
    final enabledTime = this.enabledTime;
    final enablingTime = this.enablingTime;
    final optimizingTime = this.optimizingTime;
    final ownerAlias = this.ownerAlias;
    final ownerId = this.ownerId;
    final snapshotId = this.snapshotId;
    final state = this.state;
    final stateTransitionReason = this.stateTransitionReason;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (disabledTime != null) 'disabledTime': iso8601ToJson(disabledTime),
      if (disablingTime != null) 'disablingTime': iso8601ToJson(disablingTime),
      if (enabledTime != null) 'enabledTime': iso8601ToJson(enabledTime),
      if (enablingTime != null) 'enablingTime': iso8601ToJson(enablingTime),
      if (optimizingTime != null)
        'optimizingTime': iso8601ToJson(optimizingTime),
      if (ownerAlias != null) 'ownerAlias': ownerAlias,
      if (ownerId != null) 'ownerId': ownerId,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (state != null) 'state': state.value,
      if (stateTransitionReason != null)
        'stateTransitionReason': stateTransitionReason,
    };
  }
}

class DescribeFastSnapshotRestoresResult {
  /// Information about the state of fast snapshot restores.
  final List<DescribeFastSnapshotRestoreSuccessItem>? fastSnapshotRestores;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeFastSnapshotRestoresResult({
    this.fastSnapshotRestores,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final fastSnapshotRestores = this.fastSnapshotRestores;
    final nextToken = this.nextToken;
    return {
      if (fastSnapshotRestores != null)
        'fastSnapshotRestoreSet': fastSnapshotRestores,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

/// Describes the instances that could not be launched by the fleet.
class DescribeFleetError {
  /// The error code that indicates why the instance could not be launched. For
  /// more information about error codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error
  /// codes</a>.
  final String? errorCode;

  /// The error message that describes why the instance could not be launched. For
  /// more information about error messages, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error
  /// codes</a>.
  final String? errorMessage;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse? launchTemplateAndOverrides;

  /// Indicates if the instance that could not be launched was a Spot Instance or
  /// On-Demand Instance.
  final InstanceLifecycle? lifecycle;

  DescribeFleetError({
    this.errorCode,
    this.errorMessage,
    this.launchTemplateAndOverrides,
    this.lifecycle,
  });

  Map<String, dynamic> toJson() {
    final errorCode = this.errorCode;
    final errorMessage = this.errorMessage;
    final launchTemplateAndOverrides = this.launchTemplateAndOverrides;
    final lifecycle = this.lifecycle;
    return {
      if (errorCode != null) 'errorCode': errorCode,
      if (errorMessage != null) 'errorMessage': errorMessage,
      if (launchTemplateAndOverrides != null)
        'launchTemplateAndOverrides': launchTemplateAndOverrides,
      if (lifecycle != null) 'lifecycle': lifecycle.value,
    };
  }
}

class DescribeFleetHistoryResult {
  /// The ID of the EC Fleet.
  final String? fleetId;

  /// Information about the events in the history of the EC2 Fleet.
  final List<HistoryRecordEntry>? historyRecords;

  /// The last date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records
  /// up to this time were retrieved.
  ///
  /// If <code>nextToken</code> indicates that there are more items, this value is
  /// not present.
  final DateTime? lastEvaluatedTime;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The start date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? startTime;

  DescribeFleetHistoryResult({
    this.fleetId,
    this.historyRecords,
    this.lastEvaluatedTime,
    this.nextToken,
    this.startTime,
  });

  Map<String, dynamic> toJson() {
    final fleetId = this.fleetId;
    final historyRecords = this.historyRecords;
    final lastEvaluatedTime = this.lastEvaluatedTime;
    final nextToken = this.nextToken;
    final startTime = this.startTime;
    return {
      if (fleetId != null) 'fleetId': fleetId,
      if (historyRecords != null) 'historyRecordSet': historyRecords,
      if (lastEvaluatedTime != null)
        'lastEvaluatedTime': iso8601ToJson(lastEvaluatedTime),
      if (nextToken != null) 'nextToken': nextToken,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
    };
  }
}

class DescribeFleetInstancesResult {
  /// The running instances. This list is refreshed periodically and might be out
  /// of date.
  final List<ActiveInstance>? activeInstances;

  /// The ID of the EC2 Fleet.
  final String? fleetId;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeFleetInstancesResult({
    this.activeInstances,
    this.fleetId,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final activeInstances = this.activeInstances;
    final fleetId = this.fleetId;
    final nextToken = this.nextToken;
    return {
      if (activeInstances != null) 'activeInstanceSet': activeInstances,
      if (fleetId != null) 'fleetId': fleetId,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

/// Describes the instances that were launched by the fleet.
class DescribeFleetsInstances {
  /// The IDs of the instances.
  final List<String>? instanceIds;

  /// The instance type.
  final InstanceType? instanceType;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse? launchTemplateAndOverrides;

  /// Indicates if the instance that was launched is a Spot Instance or On-Demand
  /// Instance.
  final InstanceLifecycle? lifecycle;

  /// The value is <code>Windows</code> for Windows instances. Otherwise, the
  /// value is blank.
  final PlatformValues? platform;

  DescribeFleetsInstances({
    this.instanceIds,
    this.instanceType,
    this.launchTemplateAndOverrides,
    this.lifecycle,
    this.platform,
  });

  Map<String, dynamic> toJson() {
    final instanceIds = this.instanceIds;
    final instanceType = this.instanceType;
    final launchTemplateAndOverrides = this.launchTemplateAndOverrides;
    final lifecycle = this.lifecycle;
    final platform = this.platform;
    return {
      if (instanceIds != null) 'instanceIds': instanceIds,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (launchTemplateAndOverrides != null)
        'launchTemplateAndOverrides': launchTemplateAndOverrides,
      if (lifecycle != null) 'lifecycle': lifecycle.value,
      if (platform != null) 'platform': platform.value,
    };
  }
}

class DescribeFleetsResult {
  /// Information about the EC2 Fleets.
  final List<FleetData>? fleets;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeFleetsResult({
    this.fleets,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final fleets = this.fleets;
    final nextToken = this.nextToken;
    return {
      if (fleets != null) 'fleetSet': fleets,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeFlowLogsResult {
  /// Information about the flow logs.
  final List<FlowLog>? flowLogs;

  /// The token to request the next page of items. This value is <code>null</code>
  /// when there are no more items to return.
  final String? nextToken;

  DescribeFlowLogsResult({
    this.flowLogs,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final flowLogs = this.flowLogs;
    final nextToken = this.nextToken;
    return {
      if (flowLogs != null) 'flowLogSet': flowLogs,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeFpgaImageAttributeResult {
  /// Information about the attribute.
  final FpgaImageAttribute? fpgaImageAttribute;

  DescribeFpgaImageAttributeResult({
    this.fpgaImageAttribute,
  });

  Map<String, dynamic> toJson() {
    final fpgaImageAttribute = this.fpgaImageAttribute;
    return {
      if (fpgaImageAttribute != null) 'fpgaImageAttribute': fpgaImageAttribute,
    };
  }
}

class DescribeFpgaImagesResult {
  /// Information about the FPGA images.
  final List<FpgaImage>? fpgaImages;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeFpgaImagesResult({
    this.fpgaImages,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final fpgaImages = this.fpgaImages;
    final nextToken = this.nextToken;
    return {
      if (fpgaImages != null) 'fpgaImageSet': fpgaImages,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeHostReservationOfferingsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the offerings.
  final List<HostOffering>? offeringSet;

  DescribeHostReservationOfferingsResult({
    this.nextToken,
    this.offeringSet,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final offeringSet = this.offeringSet;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (offeringSet != null) 'offeringSet': offeringSet,
    };
  }
}

class DescribeHostReservationsResult {
  /// Details about the reservation's configuration.
  final List<HostReservation>? hostReservationSet;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeHostReservationsResult({
    this.hostReservationSet,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final hostReservationSet = this.hostReservationSet;
    final nextToken = this.nextToken;
    return {
      if (hostReservationSet != null) 'hostReservationSet': hostReservationSet,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeHostsResult {
  /// Information about the Dedicated Hosts.
  final List<Host>? hosts;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeHostsResult({
    this.hosts,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final hosts = this.hosts;
    final nextToken = this.nextToken;
    return {
      if (hosts != null) 'hostSet': hosts,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIamInstanceProfileAssociationsResult {
  /// Information about the IAM instance profile associations.
  final List<IamInstanceProfileAssociation>? iamInstanceProfileAssociations;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeIamInstanceProfileAssociationsResult({
    this.iamInstanceProfileAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final iamInstanceProfileAssociations = this.iamInstanceProfileAssociations;
    final nextToken = this.nextToken;
    return {
      if (iamInstanceProfileAssociations != null)
        'iamInstanceProfileAssociationSet': iamInstanceProfileAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIdFormatResult {
  /// Information about the ID format for the resource.
  final List<IdFormat>? statuses;

  DescribeIdFormatResult({
    this.statuses,
  });

  Map<String, dynamic> toJson() {
    final statuses = this.statuses;
    return {
      if (statuses != null) 'statusSet': statuses,
    };
  }
}

class DescribeIdentityIdFormatResult {
  /// Information about the ID format for the resources.
  final List<IdFormat>? statuses;

  DescribeIdentityIdFormatResult({
    this.statuses,
  });

  Map<String, dynamic> toJson() {
    final statuses = this.statuses;
    return {
      if (statuses != null) 'statusSet': statuses,
    };
  }
}

class DescribeImagesResult {
  /// Information about the images.
  final List<Image>? images;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeImagesResult({
    this.images,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final images = this.images;
    final nextToken = this.nextToken;
    return {
      if (images != null) 'imagesSet': images,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeImportImageTasksResult {
  /// A list of zero or more import image tasks that are currently active or were
  /// completed or canceled in the previous 7 days.
  final List<ImportImageTask>? importImageTasks;

  /// The token to use to get the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeImportImageTasksResult({
    this.importImageTasks,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final importImageTasks = this.importImageTasks;
    final nextToken = this.nextToken;
    return {
      if (importImageTasks != null) 'importImageTaskSet': importImageTasks,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeImportSnapshotTasksResult {
  /// A list of zero or more import snapshot tasks that are currently active or
  /// were completed or canceled in the previous 7 days.
  final List<ImportSnapshotTask>? importSnapshotTasks;

  /// The token to use to get the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeImportSnapshotTasksResult({
    this.importSnapshotTasks,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final importSnapshotTasks = this.importSnapshotTasks;
    final nextToken = this.nextToken;
    return {
      if (importSnapshotTasks != null)
        'importSnapshotTaskSet': importSnapshotTasks,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceConnectEndpointsResult {
  /// Information about the EC2 Instance Connect Endpoints.
  final List<Ec2InstanceConnectEndpoint>? instanceConnectEndpoints;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInstanceConnectEndpointsResult({
    this.instanceConnectEndpoints,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceConnectEndpoints = this.instanceConnectEndpoints;
    final nextToken = this.nextToken;
    return {
      if (instanceConnectEndpoints != null)
        'instanceConnectEndpointSet': instanceConnectEndpoints,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceCreditSpecificationsResult {
  /// Information about the credit option for CPU usage of an instance.
  final List<InstanceCreditSpecification>? instanceCreditSpecifications;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInstanceCreditSpecificationsResult({
    this.instanceCreditSpecifications,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceCreditSpecifications = this.instanceCreditSpecifications;
    final nextToken = this.nextToken;
    return {
      if (instanceCreditSpecifications != null)
        'instanceCreditSpecificationSet': instanceCreditSpecifications,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceEventNotificationAttributesResult {
  /// Information about the registered tag keys.
  final InstanceTagNotificationAttribute? instanceTagAttribute;

  DescribeInstanceEventNotificationAttributesResult({
    this.instanceTagAttribute,
  });

  Map<String, dynamic> toJson() {
    final instanceTagAttribute = this.instanceTagAttribute;
    return {
      if (instanceTagAttribute != null)
        'instanceTagAttribute': instanceTagAttribute,
    };
  }
}

class DescribeInstanceEventWindowsResult {
  /// Information about the event windows.
  final List<InstanceEventWindow>? instanceEventWindows;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeInstanceEventWindowsResult({
    this.instanceEventWindows,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindows = this.instanceEventWindows;
    final nextToken = this.nextToken;
    return {
      if (instanceEventWindows != null)
        'instanceEventWindowSet': instanceEventWindows,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceStatusResult {
  /// Information about the status of the instances.
  final List<InstanceStatus>? instanceStatuses;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInstanceStatusResult({
    this.instanceStatuses,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceStatuses = this.instanceStatuses;
    final nextToken = this.nextToken;
    return {
      if (instanceStatuses != null) 'instanceStatusSet': instanceStatuses,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceTopologyResult {
  /// Information about the topology of each instance.
  final List<InstanceTopology>? instances;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInstanceTopologyResult({
    this.instances,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instances = this.instances;
    final nextToken = this.nextToken;
    return {
      if (instances != null) 'instanceSet': instances,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceTypeOfferingsResult {
  /// The instance types offered in the location.
  final List<InstanceTypeOffering>? instanceTypeOfferings;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInstanceTypeOfferingsResult({
    this.instanceTypeOfferings,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceTypeOfferings = this.instanceTypeOfferings;
    final nextToken = this.nextToken;
    return {
      if (instanceTypeOfferings != null)
        'instanceTypeOfferingSet': instanceTypeOfferings,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstanceTypesResult {
  /// The instance type.
  final List<InstanceTypeInfo>? instanceTypes;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInstanceTypesResult({
    this.instanceTypes,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceTypes = this.instanceTypes;
    final nextToken = this.nextToken;
    return {
      if (instanceTypes != null) 'instanceTypeSet': instanceTypes,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeInstancesResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the reservations.
  final List<Reservation>? reservations;

  DescribeInstancesResult({
    this.nextToken,
    this.reservations,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final reservations = this.reservations;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (reservations != null) 'reservationSet': reservations,
    };
  }
}

class DescribeInternetGatewaysResult {
  /// Information about one or more internet gateways.
  final List<InternetGateway>? internetGateways;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeInternetGatewaysResult({
    this.internetGateways,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final internetGateways = this.internetGateways;
    final nextToken = this.nextToken;
    return {
      if (internetGateways != null) 'internetGatewaySet': internetGateways,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpamByoasnResult {
  /// ASN and BYOIP CIDR associations.
  final List<Byoasn>? byoasns;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeIpamByoasnResult({
    this.byoasns,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final byoasns = this.byoasns;
    final nextToken = this.nextToken;
    return {
      if (byoasns != null) 'byoasnSet': byoasns,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpamPoolsResult {
  /// Information about the IPAM pools.
  final List<IpamPool>? ipamPools;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeIpamPoolsResult({
    this.ipamPools,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamPools = this.ipamPools;
    final nextToken = this.nextToken;
    return {
      if (ipamPools != null) 'ipamPoolSet': ipamPools,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpamResourceDiscoveriesResult {
  /// The resource discoveries.
  final List<IpamResourceDiscovery>? ipamResourceDiscoveries;

  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  final String? nextToken;

  DescribeIpamResourceDiscoveriesResult({
    this.ipamResourceDiscoveries,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscoveries = this.ipamResourceDiscoveries;
    final nextToken = this.nextToken;
    return {
      if (ipamResourceDiscoveries != null)
        'ipamResourceDiscoverySet': ipamResourceDiscoveries,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpamResourceDiscoveryAssociationsResult {
  /// The resource discovery associations.
  final List<IpamResourceDiscoveryAssociation>?
      ipamResourceDiscoveryAssociations;

  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  final String? nextToken;

  DescribeIpamResourceDiscoveryAssociationsResult({
    this.ipamResourceDiscoveryAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscoveryAssociations =
        this.ipamResourceDiscoveryAssociations;
    final nextToken = this.nextToken;
    return {
      if (ipamResourceDiscoveryAssociations != null)
        'ipamResourceDiscoveryAssociationSet':
            ipamResourceDiscoveryAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpamScopesResult {
  /// The scopes you want information on.
  final List<IpamScope>? ipamScopes;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeIpamScopesResult({
    this.ipamScopes,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamScopes = this.ipamScopes;
    final nextToken = this.nextToken;
    return {
      if (ipamScopes != null) 'ipamScopeSet': ipamScopes,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpamsResult {
  /// Information about the IPAMs.
  final List<Ipam>? ipams;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeIpamsResult({
    this.ipams,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipams = this.ipams;
    final nextToken = this.nextToken;
    return {
      if (ipams != null) 'ipamSet': ipams,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeIpv6PoolsResult {
  /// Information about the IPv6 address pools.
  final List<Ipv6Pool>? ipv6Pools;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeIpv6PoolsResult({
    this.ipv6Pools,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipv6Pools = this.ipv6Pools;
    final nextToken = this.nextToken;
    return {
      if (ipv6Pools != null) 'ipv6PoolSet': ipv6Pools,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeKeyPairsResult {
  /// Information about the key pairs.
  final List<KeyPairInfo>? keyPairs;

  DescribeKeyPairsResult({
    this.keyPairs,
  });

  Map<String, dynamic> toJson() {
    final keyPairs = this.keyPairs;
    return {
      if (keyPairs != null) 'keySet': keyPairs,
    };
  }
}

class DescribeLaunchTemplateVersionsResult {
  /// Information about the launch template versions.
  final List<LaunchTemplateVersion>? launchTemplateVersions;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLaunchTemplateVersionsResult({
    this.launchTemplateVersions,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateVersions = this.launchTemplateVersions;
    final nextToken = this.nextToken;
    return {
      if (launchTemplateVersions != null)
        'launchTemplateVersionSet': launchTemplateVersions,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLaunchTemplatesResult {
  /// Information about the launch templates.
  final List<LaunchTemplate>? launchTemplates;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLaunchTemplatesResult({
    this.launchTemplates,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final launchTemplates = this.launchTemplates;
    final nextToken = this.nextToken;
    return {
      if (launchTemplates != null) 'launchTemplates': launchTemplates,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult {
  /// Information about the associations.
  final List<LocalGatewayRouteTableVirtualInterfaceGroupAssociation>?
      localGatewayRouteTableVirtualInterfaceGroupAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult({
    this.localGatewayRouteTableVirtualInterfaceGroupAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableVirtualInterfaceGroupAssociations =
        this.localGatewayRouteTableVirtualInterfaceGroupAssociations;
    final nextToken = this.nextToken;
    return {
      if (localGatewayRouteTableVirtualInterfaceGroupAssociations != null)
        'localGatewayRouteTableVirtualInterfaceGroupAssociationSet':
            localGatewayRouteTableVirtualInterfaceGroupAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLocalGatewayRouteTableVpcAssociationsResult {
  /// Information about the associations.
  final List<LocalGatewayRouteTableVpcAssociation>?
      localGatewayRouteTableVpcAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLocalGatewayRouteTableVpcAssociationsResult({
    this.localGatewayRouteTableVpcAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTableVpcAssociations =
        this.localGatewayRouteTableVpcAssociations;
    final nextToken = this.nextToken;
    return {
      if (localGatewayRouteTableVpcAssociations != null)
        'localGatewayRouteTableVpcAssociationSet':
            localGatewayRouteTableVpcAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLocalGatewayRouteTablesResult {
  /// Information about the local gateway route tables.
  final List<LocalGatewayRouteTable>? localGatewayRouteTables;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLocalGatewayRouteTablesResult({
    this.localGatewayRouteTables,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final localGatewayRouteTables = this.localGatewayRouteTables;
    final nextToken = this.nextToken;
    return {
      if (localGatewayRouteTables != null)
        'localGatewayRouteTableSet': localGatewayRouteTables,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLocalGatewayVirtualInterfaceGroupsResult {
  /// The virtual interface groups.
  final List<LocalGatewayVirtualInterfaceGroup>?
      localGatewayVirtualInterfaceGroups;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLocalGatewayVirtualInterfaceGroupsResult({
    this.localGatewayVirtualInterfaceGroups,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final localGatewayVirtualInterfaceGroups =
        this.localGatewayVirtualInterfaceGroups;
    final nextToken = this.nextToken;
    return {
      if (localGatewayVirtualInterfaceGroups != null)
        'localGatewayVirtualInterfaceGroupSet':
            localGatewayVirtualInterfaceGroups,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLocalGatewayVirtualInterfacesResult {
  /// Information about the virtual interfaces.
  final List<LocalGatewayVirtualInterface>? localGatewayVirtualInterfaces;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLocalGatewayVirtualInterfacesResult({
    this.localGatewayVirtualInterfaces,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final localGatewayVirtualInterfaces = this.localGatewayVirtualInterfaces;
    final nextToken = this.nextToken;
    return {
      if (localGatewayVirtualInterfaces != null)
        'localGatewayVirtualInterfaceSet': localGatewayVirtualInterfaces,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLocalGatewaysResult {
  /// Information about the local gateways.
  final List<LocalGateway>? localGateways;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeLocalGatewaysResult({
    this.localGateways,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final localGateways = this.localGateways;
    final nextToken = this.nextToken;
    return {
      if (localGateways != null) 'localGatewaySet': localGateways,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeLockedSnapshotsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the snapshots.
  final List<LockedSnapshotsInfo>? snapshots;

  DescribeLockedSnapshotsResult({
    this.nextToken,
    this.snapshots,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final snapshots = this.snapshots;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (snapshots != null) 'snapshotSet': snapshots,
    };
  }
}

class DescribeMacHostsResult {
  /// Information about the EC2 Mac Dedicated Hosts.
  final List<MacHost>? macHosts;

  /// The token to use to retrieve the next page of results.
  final String? nextToken;

  DescribeMacHostsResult({
    this.macHosts,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final macHosts = this.macHosts;
    final nextToken = this.nextToken;
    return {
      if (macHosts != null) 'macHostSet': macHosts,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeManagedPrefixListsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the prefix lists.
  final List<ManagedPrefixList>? prefixLists;

  DescribeManagedPrefixListsResult({
    this.nextToken,
    this.prefixLists,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final prefixLists = this.prefixLists;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (prefixLists != null) 'prefixListSet': prefixLists,
    };
  }
}

class DescribeMovingAddressesResult {
  /// The status for each Elastic IP address.
  final List<MovingAddressStatus>? movingAddressStatuses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeMovingAddressesResult({
    this.movingAddressStatuses,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final movingAddressStatuses = this.movingAddressStatuses;
    final nextToken = this.nextToken;
    return {
      if (movingAddressStatuses != null)
        'movingAddressStatusSet': movingAddressStatuses,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNatGatewaysResult {
  /// Information about the NAT gateways.
  final List<NatGateway>? natGateways;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeNatGatewaysResult({
    this.natGateways,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final natGateways = this.natGateways;
    final nextToken = this.nextToken;
    return {
      if (natGateways != null) 'natGatewaySet': natGateways,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNetworkAclsResult {
  /// Information about one or more network ACLs.
  final List<NetworkAcl>? networkAcls;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeNetworkAclsResult({
    this.networkAcls,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkAcls = this.networkAcls;
    final nextToken = this.nextToken;
    return {
      if (networkAcls != null) 'networkAclSet': networkAcls,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNetworkInsightsAccessScopeAnalysesResult {
  /// The Network Access Scope analyses.
  final List<NetworkInsightsAccessScopeAnalysis>?
      networkInsightsAccessScopeAnalyses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeNetworkInsightsAccessScopeAnalysesResult({
    this.networkInsightsAccessScopeAnalyses,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScopeAnalyses =
        this.networkInsightsAccessScopeAnalyses;
    final nextToken = this.nextToken;
    return {
      if (networkInsightsAccessScopeAnalyses != null)
        'networkInsightsAccessScopeAnalysisSet':
            networkInsightsAccessScopeAnalyses,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNetworkInsightsAccessScopesResult {
  /// The Network Access Scopes.
  final List<NetworkInsightsAccessScope>? networkInsightsAccessScopes;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeNetworkInsightsAccessScopesResult({
    this.networkInsightsAccessScopes,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScopes = this.networkInsightsAccessScopes;
    final nextToken = this.nextToken;
    return {
      if (networkInsightsAccessScopes != null)
        'networkInsightsAccessScopeSet': networkInsightsAccessScopes,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNetworkInsightsAnalysesResult {
  /// Information about the network insights analyses.
  final List<NetworkInsightsAnalysis>? networkInsightsAnalyses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeNetworkInsightsAnalysesResult({
    this.networkInsightsAnalyses,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAnalyses = this.networkInsightsAnalyses;
    final nextToken = this.nextToken;
    return {
      if (networkInsightsAnalyses != null)
        'networkInsightsAnalysisSet': networkInsightsAnalyses,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNetworkInsightsPathsResult {
  /// Information about the paths.
  final List<NetworkInsightsPath>? networkInsightsPaths;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeNetworkInsightsPathsResult({
    this.networkInsightsPaths,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsPaths = this.networkInsightsPaths;
    final nextToken = this.nextToken;
    return {
      if (networkInsightsPaths != null)
        'networkInsightsPathSet': networkInsightsPaths,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

/// Contains the output of DescribeNetworkInterfaceAttribute.
class DescribeNetworkInterfaceAttributeResult {
  /// Indicates whether to assign a public IPv4 address to a network interface.
  /// This option can be enabled for any network interface but will only apply to
  /// the primary network interface (eth0).
  final bool? associatePublicIpAddress;

  /// The attachment (if any) of the network interface.
  final NetworkInterfaceAttachment? attachment;

  /// The description of the network interface.
  final AttributeValue? description;

  /// The security groups associated with the network interface.
  final List<GroupIdentifier>? groups;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// Indicates whether source/destination checking is enabled.
  final AttributeBooleanValue? sourceDestCheck;

  DescribeNetworkInterfaceAttributeResult({
    this.associatePublicIpAddress,
    this.attachment,
    this.description,
    this.groups,
    this.networkInterfaceId,
    this.sourceDestCheck,
  });

  Map<String, dynamic> toJson() {
    final associatePublicIpAddress = this.associatePublicIpAddress;
    final attachment = this.attachment;
    final description = this.description;
    final groups = this.groups;
    final networkInterfaceId = this.networkInterfaceId;
    final sourceDestCheck = this.sourceDestCheck;
    return {
      if (associatePublicIpAddress != null)
        'associatePublicIpAddress': associatePublicIpAddress,
      if (attachment != null) 'attachment': attachment,
      if (description != null) 'description': description,
      if (groups != null) 'groupSet': groups,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (sourceDestCheck != null) 'sourceDestCheck': sourceDestCheck,
    };
  }
}

/// Contains the output for DescribeNetworkInterfacePermissions.
class DescribeNetworkInterfacePermissionsResult {
  /// The network interface permissions.
  final List<NetworkInterfacePermission>? networkInterfacePermissions;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeNetworkInterfacePermissionsResult({
    this.networkInterfacePermissions,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkInterfacePermissions = this.networkInterfacePermissions;
    final nextToken = this.nextToken;
    return {
      if (networkInterfacePermissions != null)
        'networkInterfacePermissions': networkInterfacePermissions,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeNetworkInterfacesResult {
  /// Information about the network interfaces.
  final List<NetworkInterface>? networkInterfaces;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  DescribeNetworkInterfacesResult({
    this.networkInterfaces,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final networkInterfaces = this.networkInterfaces;
    final nextToken = this.nextToken;
    return {
      if (networkInterfaces != null) 'networkInterfaceSet': networkInterfaces,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribePlacementGroupsResult {
  /// Information about the placement groups.
  final List<PlacementGroup>? placementGroups;

  DescribePlacementGroupsResult({
    this.placementGroups,
  });

  Map<String, dynamic> toJson() {
    final placementGroups = this.placementGroups;
    return {
      if (placementGroups != null) 'placementGroupSet': placementGroups,
    };
  }
}

class DescribePrefixListsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// All available prefix lists.
  final List<PrefixList>? prefixLists;

  DescribePrefixListsResult({
    this.nextToken,
    this.prefixLists,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final prefixLists = this.prefixLists;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (prefixLists != null) 'prefixListSet': prefixLists,
    };
  }
}

class DescribePrincipalIdFormatResult {
  /// The token to use to retrieve the next page of results. This value is null
  /// when there are no more results to return.
  final String? nextToken;

  /// Information about the ID format settings for the ARN.
  final List<PrincipalIdFormat>? principals;

  DescribePrincipalIdFormatResult({
    this.nextToken,
    this.principals,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final principals = this.principals;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (principals != null) 'principalSet': principals,
    };
  }
}

class DescribePublicIpv4PoolsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the address pools.
  final List<PublicIpv4Pool>? publicIpv4Pools;

  DescribePublicIpv4PoolsResult({
    this.nextToken,
    this.publicIpv4Pools,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final publicIpv4Pools = this.publicIpv4Pools;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (publicIpv4Pools != null) 'publicIpv4PoolSet': publicIpv4Pools,
    };
  }
}

class DescribeRegionsResult {
  /// Information about the Regions.
  final List<Region>? regions;

  DescribeRegionsResult({
    this.regions,
  });

  Map<String, dynamic> toJson() {
    final regions = this.regions;
    return {
      if (regions != null) 'regionInfo': regions,
    };
  }
}

class DescribeReplaceRootVolumeTasksResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the root volume replacement task.
  final List<ReplaceRootVolumeTask>? replaceRootVolumeTasks;

  DescribeReplaceRootVolumeTasksResult({
    this.nextToken,
    this.replaceRootVolumeTasks,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final replaceRootVolumeTasks = this.replaceRootVolumeTasks;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (replaceRootVolumeTasks != null)
        'replaceRootVolumeTaskSet': replaceRootVolumeTasks,
    };
  }
}

/// Contains the output of DescribeReservedInstancesListings.
class DescribeReservedInstancesListingsResult {
  /// Information about the Reserved Instance listing.
  final List<ReservedInstancesListing>? reservedInstancesListings;

  DescribeReservedInstancesListingsResult({
    this.reservedInstancesListings,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesListings = this.reservedInstancesListings;
    return {
      if (reservedInstancesListings != null)
        'reservedInstancesListingsSet': reservedInstancesListings,
    };
  }
}

/// Contains the output of DescribeReservedInstancesModifications.
class DescribeReservedInstancesModificationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// The Reserved Instance modification information.
  final List<ReservedInstancesModification>? reservedInstancesModifications;

  DescribeReservedInstancesModificationsResult({
    this.nextToken,
    this.reservedInstancesModifications,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final reservedInstancesModifications = this.reservedInstancesModifications;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (reservedInstancesModifications != null)
        'reservedInstancesModificationsSet': reservedInstancesModifications,
    };
  }
}

/// Contains the output of DescribeReservedInstancesOfferings.
class DescribeReservedInstancesOfferingsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// A list of Reserved Instances offerings.
  final List<ReservedInstancesOffering>? reservedInstancesOfferings;

  DescribeReservedInstancesOfferingsResult({
    this.nextToken,
    this.reservedInstancesOfferings,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final reservedInstancesOfferings = this.reservedInstancesOfferings;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (reservedInstancesOfferings != null)
        'reservedInstancesOfferingsSet': reservedInstancesOfferings,
    };
  }
}

/// Contains the output for DescribeReservedInstances.
class DescribeReservedInstancesResult {
  /// A list of Reserved Instances.
  final List<ReservedInstances>? reservedInstances;

  DescribeReservedInstancesResult({
    this.reservedInstances,
  });

  Map<String, dynamic> toJson() {
    final reservedInstances = this.reservedInstances;
    return {
      if (reservedInstances != null) 'reservedInstancesSet': reservedInstances,
    };
  }
}

/// Contains the output of DescribeRouteTables.
class DescribeRouteTablesResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about one or more route tables.
  final List<RouteTable>? routeTables;

  DescribeRouteTablesResult({
    this.nextToken,
    this.routeTables,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final routeTables = this.routeTables;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (routeTables != null) 'routeTableSet': routeTables,
    };
  }
}

/// Contains the output of DescribeScheduledInstanceAvailability.
class DescribeScheduledInstanceAvailabilityResult {
  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the available Scheduled Instances.
  final List<ScheduledInstanceAvailability>? scheduledInstanceAvailabilitySet;

  DescribeScheduledInstanceAvailabilityResult({
    this.nextToken,
    this.scheduledInstanceAvailabilitySet,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final scheduledInstanceAvailabilitySet =
        this.scheduledInstanceAvailabilitySet;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (scheduledInstanceAvailabilitySet != null)
        'scheduledInstanceAvailabilitySet': scheduledInstanceAvailabilitySet,
    };
  }
}

/// Contains the output of DescribeScheduledInstances.
class DescribeScheduledInstancesResult {
  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the Scheduled Instances.
  final List<ScheduledInstance>? scheduledInstanceSet;

  DescribeScheduledInstancesResult({
    this.nextToken,
    this.scheduledInstanceSet,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final scheduledInstanceSet = this.scheduledInstanceSet;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (scheduledInstanceSet != null)
        'scheduledInstanceSet': scheduledInstanceSet,
    };
  }
}

class DescribeSecurityGroupReferencesResult {
  /// Information about the VPCs with the referencing security groups.
  final List<SecurityGroupReference>? securityGroupReferenceSet;

  DescribeSecurityGroupReferencesResult({
    this.securityGroupReferenceSet,
  });

  Map<String, dynamic> toJson() {
    final securityGroupReferenceSet = this.securityGroupReferenceSet;
    return {
      if (securityGroupReferenceSet != null)
        'securityGroupReferenceSet': securityGroupReferenceSet,
    };
  }
}

class DescribeSecurityGroupRulesResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about security group rules.
  final List<SecurityGroupRule>? securityGroupRules;

  DescribeSecurityGroupRulesResult({
    this.nextToken,
    this.securityGroupRules,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final securityGroupRules = this.securityGroupRules;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (securityGroupRules != null)
        'securityGroupRuleSet': securityGroupRules,
    };
  }
}

class DescribeSecurityGroupsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the security groups.
  final List<SecurityGroup>? securityGroups;

  DescribeSecurityGroupsResult({
    this.nextToken,
    this.securityGroups,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final securityGroups = this.securityGroups;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (securityGroups != null) 'securityGroupInfo': securityGroups,
    };
  }
}

class DescribeSnapshotAttributeResult {
  /// The users and groups that have the permissions for creating volumes from the
  /// snapshot.
  final List<CreateVolumePermission>? createVolumePermissions;

  /// The product codes.
  final List<ProductCode>? productCodes;

  /// The ID of the EBS snapshot.
  final String? snapshotId;

  DescribeSnapshotAttributeResult({
    this.createVolumePermissions,
    this.productCodes,
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final createVolumePermissions = this.createVolumePermissions;
    final productCodes = this.productCodes;
    final snapshotId = this.snapshotId;
    return {
      if (createVolumePermissions != null)
        'createVolumePermission': createVolumePermissions,
      if (productCodes != null) 'productCodes': productCodes,
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

class DescribeSnapshotTierStatusResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the snapshot's storage tier.
  final List<SnapshotTierStatus>? snapshotTierStatuses;

  DescribeSnapshotTierStatusResult({
    this.nextToken,
    this.snapshotTierStatuses,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final snapshotTierStatuses = this.snapshotTierStatuses;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (snapshotTierStatuses != null)
        'snapshotTierStatusSet': snapshotTierStatuses,
    };
  }
}

class DescribeSnapshotsResult {
  /// The token to include in another request to return the next page of
  /// snapshots. This value is <code>null</code> when there are no more snapshots
  /// to return.
  final String? nextToken;

  /// Information about the snapshots.
  final List<Snapshot>? snapshots;

  DescribeSnapshotsResult({
    this.nextToken,
    this.snapshots,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final snapshots = this.snapshots;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (snapshots != null) 'snapshotSet': snapshots,
    };
  }
}

/// Contains the output of DescribeSpotDatafeedSubscription.
class DescribeSpotDatafeedSubscriptionResult {
  /// The Spot Instance data feed subscription.
  final SpotDatafeedSubscription? spotDatafeedSubscription;

  DescribeSpotDatafeedSubscriptionResult({
    this.spotDatafeedSubscription,
  });

  Map<String, dynamic> toJson() {
    final spotDatafeedSubscription = this.spotDatafeedSubscription;
    return {
      if (spotDatafeedSubscription != null)
        'spotDatafeedSubscription': spotDatafeedSubscription,
    };
  }
}

/// Contains the output of DescribeSpotFleetInstances.
class DescribeSpotFleetInstancesResponse {
  /// The running instances. This list is refreshed periodically and might be out
  /// of date.
  final List<ActiveInstance>? activeInstances;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The ID of the Spot Fleet request.
  final String? spotFleetRequestId;

  DescribeSpotFleetInstancesResponse({
    this.activeInstances,
    this.nextToken,
    this.spotFleetRequestId,
  });

  Map<String, dynamic> toJson() {
    final activeInstances = this.activeInstances;
    final nextToken = this.nextToken;
    final spotFleetRequestId = this.spotFleetRequestId;
    return {
      if (activeInstances != null) 'activeInstanceSet': activeInstances,
      if (nextToken != null) 'nextToken': nextToken,
      if (spotFleetRequestId != null) 'spotFleetRequestId': spotFleetRequestId,
    };
  }
}

/// Contains the output of DescribeSpotFleetRequestHistory.
class DescribeSpotFleetRequestHistoryResponse {
  /// Information about the events in the history of the Spot Fleet request.
  final List<HistoryRecord>? historyRecords;

  /// The last date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records
  /// up to this time were retrieved.
  ///
  /// If <code>nextToken</code> indicates that there are more items, this value is
  /// not present.
  final DateTime? lastEvaluatedTime;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The ID of the Spot Fleet request.
  final String? spotFleetRequestId;

  /// The starting date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? startTime;

  DescribeSpotFleetRequestHistoryResponse({
    this.historyRecords,
    this.lastEvaluatedTime,
    this.nextToken,
    this.spotFleetRequestId,
    this.startTime,
  });

  Map<String, dynamic> toJson() {
    final historyRecords = this.historyRecords;
    final lastEvaluatedTime = this.lastEvaluatedTime;
    final nextToken = this.nextToken;
    final spotFleetRequestId = this.spotFleetRequestId;
    final startTime = this.startTime;
    return {
      if (historyRecords != null) 'historyRecordSet': historyRecords,
      if (lastEvaluatedTime != null)
        'lastEvaluatedTime': iso8601ToJson(lastEvaluatedTime),
      if (nextToken != null) 'nextToken': nextToken,
      if (spotFleetRequestId != null) 'spotFleetRequestId': spotFleetRequestId,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
    };
  }
}

/// Contains the output of DescribeSpotFleetRequests.
class DescribeSpotFleetRequestsResponse {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the configuration of your Spot Fleet.
  final List<SpotFleetRequestConfig>? spotFleetRequestConfigs;

  DescribeSpotFleetRequestsResponse({
    this.nextToken,
    this.spotFleetRequestConfigs,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final spotFleetRequestConfigs = this.spotFleetRequestConfigs;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (spotFleetRequestConfigs != null)
        'spotFleetRequestConfigSet': spotFleetRequestConfigs,
    };
  }
}

/// Contains the output of DescribeSpotInstanceRequests.
class DescribeSpotInstanceRequestsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The Spot Instance requests.
  final List<SpotInstanceRequest>? spotInstanceRequests;

  DescribeSpotInstanceRequestsResult({
    this.nextToken,
    this.spotInstanceRequests,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final spotInstanceRequests = this.spotInstanceRequests;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (spotInstanceRequests != null)
        'spotInstanceRequestSet': spotInstanceRequests,
    };
  }
}

/// Contains the output of DescribeSpotPriceHistory.
class DescribeSpotPriceHistoryResult {
  /// The token to include in another request to get the next page of items. This
  /// value is an empty string (<code>""</code>) or <code>null</code> when there
  /// are no more items to return.
  final String? nextToken;

  /// The historical Spot prices.
  final List<SpotPrice>? spotPriceHistory;

  DescribeSpotPriceHistoryResult({
    this.nextToken,
    this.spotPriceHistory,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final spotPriceHistory = this.spotPriceHistory;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (spotPriceHistory != null) 'spotPriceHistorySet': spotPriceHistory,
    };
  }
}

class DescribeStaleSecurityGroupsResult {
  /// The token to include in another request to get the next page of items. If
  /// there are no additional items to return, the string is empty.
  final String? nextToken;

  /// Information about the stale security groups.
  final List<StaleSecurityGroup>? staleSecurityGroupSet;

  DescribeStaleSecurityGroupsResult({
    this.nextToken,
    this.staleSecurityGroupSet,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final staleSecurityGroupSet = this.staleSecurityGroupSet;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (staleSecurityGroupSet != null)
        'staleSecurityGroupSet': staleSecurityGroupSet,
    };
  }
}

class DescribeStoreImageTasksResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The information about the AMI store tasks.
  final List<StoreImageTaskResult>? storeImageTaskResults;

  DescribeStoreImageTasksResult({
    this.nextToken,
    this.storeImageTaskResults,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final storeImageTaskResults = this.storeImageTaskResults;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (storeImageTaskResults != null)
        'storeImageTaskResultSet': storeImageTaskResults,
    };
  }
}

class DescribeSubnetsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about one or more subnets.
  final List<Subnet>? subnets;

  DescribeSubnetsResult({
    this.nextToken,
    this.subnets,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final subnets = this.subnets;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (subnets != null) 'subnetSet': subnets,
    };
  }
}

class DescribeTagsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The tags.
  final List<TagDescription>? tags;

  DescribeTagsResult({
    this.nextToken,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final tags = this.tags;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (tags != null) 'tagSet': tags,
    };
  }
}

class DescribeTrafficMirrorFiltersResult {
  /// The token to use to retrieve the next page of results. The value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about one or more Traffic Mirror filters.
  final List<TrafficMirrorFilter>? trafficMirrorFilters;

  DescribeTrafficMirrorFiltersResult({
    this.nextToken,
    this.trafficMirrorFilters,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trafficMirrorFilters = this.trafficMirrorFilters;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (trafficMirrorFilters != null)
        'trafficMirrorFilterSet': trafficMirrorFilters,
    };
  }
}

class DescribeTrafficMirrorSessionsResult {
  /// The token to use to retrieve the next page of results. The value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Describes one or more Traffic Mirror sessions. By default, all Traffic
  /// Mirror sessions are described. Alternatively, you can filter the results.
  final List<TrafficMirrorSession>? trafficMirrorSessions;

  DescribeTrafficMirrorSessionsResult({
    this.nextToken,
    this.trafficMirrorSessions,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trafficMirrorSessions = this.trafficMirrorSessions;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (trafficMirrorSessions != null)
        'trafficMirrorSessionSet': trafficMirrorSessions,
    };
  }
}

class DescribeTrafficMirrorTargetsResult {
  /// The token to use to retrieve the next page of results. The value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about one or more Traffic Mirror targets.
  final List<TrafficMirrorTarget>? trafficMirrorTargets;

  DescribeTrafficMirrorTargetsResult({
    this.nextToken,
    this.trafficMirrorTargets,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trafficMirrorTargets = this.trafficMirrorTargets;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (trafficMirrorTargets != null)
        'trafficMirrorTargetSet': trafficMirrorTargets,
    };
  }
}

class DescribeTransitGatewayAttachmentsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the attachments.
  final List<TransitGatewayAttachment>? transitGatewayAttachments;

  DescribeTransitGatewayAttachmentsResult({
    this.nextToken,
    this.transitGatewayAttachments,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayAttachments = this.transitGatewayAttachments;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayAttachments != null)
        'transitGatewayAttachments': transitGatewayAttachments,
    };
  }
}

class DescribeTransitGatewayConnectPeersResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the Connect peers.
  final List<TransitGatewayConnectPeer>? transitGatewayConnectPeers;

  DescribeTransitGatewayConnectPeersResult({
    this.nextToken,
    this.transitGatewayConnectPeers,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayConnectPeers = this.transitGatewayConnectPeers;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayConnectPeers != null)
        'transitGatewayConnectPeerSet': transitGatewayConnectPeers,
    };
  }
}

class DescribeTransitGatewayConnectsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the Connect attachments.
  final List<TransitGatewayConnect>? transitGatewayConnects;

  DescribeTransitGatewayConnectsResult({
    this.nextToken,
    this.transitGatewayConnects,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayConnects = this.transitGatewayConnects;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayConnects != null)
        'transitGatewayConnectSet': transitGatewayConnects,
    };
  }
}

class DescribeTransitGatewayMulticastDomainsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the transit gateway multicast domains.
  final List<TransitGatewayMulticastDomain>? transitGatewayMulticastDomains;

  DescribeTransitGatewayMulticastDomainsResult({
    this.nextToken,
    this.transitGatewayMulticastDomains,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayMulticastDomains = this.transitGatewayMulticastDomains;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayMulticastDomains != null)
        'transitGatewayMulticastDomains': transitGatewayMulticastDomains,
    };
  }
}

class DescribeTransitGatewayPeeringAttachmentsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// The transit gateway peering attachments.
  final List<TransitGatewayPeeringAttachment>? transitGatewayPeeringAttachments;

  DescribeTransitGatewayPeeringAttachmentsResult({
    this.nextToken,
    this.transitGatewayPeeringAttachments,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayPeeringAttachments =
        this.transitGatewayPeeringAttachments;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayPeeringAttachments != null)
        'transitGatewayPeeringAttachments': transitGatewayPeeringAttachments,
    };
  }
}

class DescribeTransitGatewayPolicyTablesResult {
  /// The token for the next page of results.
  final String? nextToken;

  /// Describes the transit gateway policy tables.
  final List<TransitGatewayPolicyTable>? transitGatewayPolicyTables;

  DescribeTransitGatewayPolicyTablesResult({
    this.nextToken,
    this.transitGatewayPolicyTables,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayPolicyTables = this.transitGatewayPolicyTables;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayPolicyTables != null)
        'transitGatewayPolicyTables': transitGatewayPolicyTables,
    };
  }
}

class DescribeTransitGatewayRouteTableAnnouncementsResult {
  /// The token for the next page of results.
  final String? nextToken;

  /// Describes the transit gateway route table announcement.
  final List<TransitGatewayRouteTableAnnouncement>?
      transitGatewayRouteTableAnnouncements;

  DescribeTransitGatewayRouteTableAnnouncementsResult({
    this.nextToken,
    this.transitGatewayRouteTableAnnouncements,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayRouteTableAnnouncements =
        this.transitGatewayRouteTableAnnouncements;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayRouteTableAnnouncements != null)
        'transitGatewayRouteTableAnnouncements':
            transitGatewayRouteTableAnnouncements,
    };
  }
}

class DescribeTransitGatewayRouteTablesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the transit gateway route tables.
  final List<TransitGatewayRouteTable>? transitGatewayRouteTables;

  DescribeTransitGatewayRouteTablesResult({
    this.nextToken,
    this.transitGatewayRouteTables,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayRouteTables = this.transitGatewayRouteTables;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayRouteTables != null)
        'transitGatewayRouteTables': transitGatewayRouteTables,
    };
  }
}

class DescribeTransitGatewayVpcAttachmentsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the VPC attachments.
  final List<TransitGatewayVpcAttachment>? transitGatewayVpcAttachments;

  DescribeTransitGatewayVpcAttachmentsResult({
    this.nextToken,
    this.transitGatewayVpcAttachments,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayVpcAttachments = this.transitGatewayVpcAttachments;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayVpcAttachments != null)
        'transitGatewayVpcAttachments': transitGatewayVpcAttachments,
    };
  }
}

class DescribeTransitGatewaysResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the transit gateways.
  final List<TransitGateway>? transitGateways;

  DescribeTransitGatewaysResult({
    this.nextToken,
    this.transitGateways,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGateways = this.transitGateways;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGateways != null) 'transitGatewaySet': transitGateways,
    };
  }
}

class DescribeTrunkInterfaceAssociationsResult {
  /// Information about the trunk associations.
  final List<TrunkInterfaceAssociation>? interfaceAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeTrunkInterfaceAssociationsResult({
    this.interfaceAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final interfaceAssociations = this.interfaceAssociations;
    final nextToken = this.nextToken;
    return {
      if (interfaceAssociations != null)
        'interfaceAssociationSet': interfaceAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeVerifiedAccessEndpointsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Details about the Verified Access endpoints.
  final List<VerifiedAccessEndpoint>? verifiedAccessEndpoints;

  DescribeVerifiedAccessEndpointsResult({
    this.nextToken,
    this.verifiedAccessEndpoints,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final verifiedAccessEndpoints = this.verifiedAccessEndpoints;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (verifiedAccessEndpoints != null)
        'verifiedAccessEndpointSet': verifiedAccessEndpoints,
    };
  }
}

class DescribeVerifiedAccessGroupsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Details about the Verified Access groups.
  final List<VerifiedAccessGroup>? verifiedAccessGroups;

  DescribeVerifiedAccessGroupsResult({
    this.nextToken,
    this.verifiedAccessGroups,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final verifiedAccessGroups = this.verifiedAccessGroups;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (verifiedAccessGroups != null)
        'verifiedAccessGroupSet': verifiedAccessGroups,
    };
  }
}

class DescribeVerifiedAccessInstanceLoggingConfigurationsResult {
  /// The logging configuration for the Verified Access instances.
  final List<VerifiedAccessInstanceLoggingConfiguration>? loggingConfigurations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeVerifiedAccessInstanceLoggingConfigurationsResult({
    this.loggingConfigurations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final loggingConfigurations = this.loggingConfigurations;
    final nextToken = this.nextToken;
    return {
      if (loggingConfigurations != null)
        'loggingConfigurationSet': loggingConfigurations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeVerifiedAccessInstancesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Details about the Verified Access instances.
  final List<VerifiedAccessInstance>? verifiedAccessInstances;

  DescribeVerifiedAccessInstancesResult({
    this.nextToken,
    this.verifiedAccessInstances,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final verifiedAccessInstances = this.verifiedAccessInstances;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (verifiedAccessInstances != null)
        'verifiedAccessInstanceSet': verifiedAccessInstances,
    };
  }
}

class DescribeVerifiedAccessTrustProvidersResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Details about the Verified Access trust providers.
  final List<VerifiedAccessTrustProvider>? verifiedAccessTrustProviders;

  DescribeVerifiedAccessTrustProvidersResult({
    this.nextToken,
    this.verifiedAccessTrustProviders,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final verifiedAccessTrustProviders = this.verifiedAccessTrustProviders;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (verifiedAccessTrustProviders != null)
        'verifiedAccessTrustProviderSet': verifiedAccessTrustProviders,
    };
  }
}

class DescribeVolumeAttributeResult {
  /// The state of <code>autoEnableIO</code> attribute.
  final AttributeBooleanValue? autoEnableIO;

  /// A list of product codes.
  final List<ProductCode>? productCodes;

  /// The ID of the volume.
  final String? volumeId;

  DescribeVolumeAttributeResult({
    this.autoEnableIO,
    this.productCodes,
    this.volumeId,
  });

  Map<String, dynamic> toJson() {
    final autoEnableIO = this.autoEnableIO;
    final productCodes = this.productCodes;
    final volumeId = this.volumeId;
    return {
      if (autoEnableIO != null) 'autoEnableIO': autoEnableIO,
      if (productCodes != null) 'productCodes': productCodes,
      if (volumeId != null) 'volumeId': volumeId,
    };
  }
}

class DescribeVolumeStatusResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the status of the volumes.
  final List<VolumeStatusItem>? volumeStatuses;

  DescribeVolumeStatusResult({
    this.nextToken,
    this.volumeStatuses,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final volumeStatuses = this.volumeStatuses;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (volumeStatuses != null) 'volumeStatusSet': volumeStatuses,
    };
  }
}

class DescribeVolumesModificationsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> if there are no more items to return.
  final String? nextToken;

  /// Information about the volume modifications.
  final List<VolumeModification>? volumesModifications;

  DescribeVolumesModificationsResult({
    this.nextToken,
    this.volumesModifications,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final volumesModifications = this.volumesModifications;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (volumesModifications != null)
        'volumeModificationSet': volumesModifications,
    };
  }
}

class DescribeVolumesResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the volumes.
  final List<Volume>? volumes;

  DescribeVolumesResult({
    this.nextToken,
    this.volumes,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final volumes = this.volumes;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (volumes != null) 'volumeSet': volumes,
    };
  }
}

class DescribeVpcAttributeResult {
  /// Indicates whether the instances launched in the VPC get DNS hostnames. If
  /// this attribute is <code>true</code>, instances in the VPC get DNS hostnames;
  /// otherwise, they do not.
  final AttributeBooleanValue? enableDnsHostnames;

  /// Indicates whether DNS resolution is enabled for the VPC. If this attribute
  /// is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your
  /// instances to their corresponding IP addresses; otherwise, it does not.
  final AttributeBooleanValue? enableDnsSupport;

  /// Indicates whether Network Address Usage metrics are enabled for your VPC.
  final AttributeBooleanValue? enableNetworkAddressUsageMetrics;

  /// The ID of the VPC.
  final String? vpcId;

  DescribeVpcAttributeResult({
    this.enableDnsHostnames,
    this.enableDnsSupport,
    this.enableNetworkAddressUsageMetrics,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final enableDnsHostnames = this.enableDnsHostnames;
    final enableDnsSupport = this.enableDnsSupport;
    final enableNetworkAddressUsageMetrics =
        this.enableNetworkAddressUsageMetrics;
    final vpcId = this.vpcId;
    return {
      if (enableDnsHostnames != null) 'enableDnsHostnames': enableDnsHostnames,
      if (enableDnsSupport != null) 'enableDnsSupport': enableDnsSupport,
      if (enableNetworkAddressUsageMetrics != null)
        'enableNetworkAddressUsageMetrics': enableNetworkAddressUsageMetrics,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

class DescribeVpcClassicLinkDnsSupportResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the ClassicLink DNS support status of the VPCs.
  final List<ClassicLinkDnsSupport>? vpcs;

  DescribeVpcClassicLinkDnsSupportResult({
    this.nextToken,
    this.vpcs,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final vpcs = this.vpcs;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (vpcs != null) 'vpcs': vpcs,
    };
  }
}

class DescribeVpcClassicLinkResult {
  /// The ClassicLink status of the VPCs.
  final List<VpcClassicLink>? vpcs;

  DescribeVpcClassicLinkResult({
    this.vpcs,
  });

  Map<String, dynamic> toJson() {
    final vpcs = this.vpcs;
    return {
      if (vpcs != null) 'vpcSet': vpcs,
    };
  }
}

class DescribeVpcEndpointConnectionNotificationsResult {
  /// The notifications.
  final List<ConnectionNotification>? connectionNotificationSet;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeVpcEndpointConnectionNotificationsResult({
    this.connectionNotificationSet,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final connectionNotificationSet = this.connectionNotificationSet;
    final nextToken = this.nextToken;
    return {
      if (connectionNotificationSet != null)
        'connectionNotificationSet': connectionNotificationSet,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeVpcEndpointConnectionsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the VPC endpoint connections.
  final List<VpcEndpointConnection>? vpcEndpointConnections;

  DescribeVpcEndpointConnectionsResult({
    this.nextToken,
    this.vpcEndpointConnections,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final vpcEndpointConnections = this.vpcEndpointConnections;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (vpcEndpointConnections != null)
        'vpcEndpointConnectionSet': vpcEndpointConnections,
    };
  }
}

class DescribeVpcEndpointServiceConfigurationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the services.
  final List<ServiceConfiguration>? serviceConfigurations;

  DescribeVpcEndpointServiceConfigurationsResult({
    this.nextToken,
    this.serviceConfigurations,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final serviceConfigurations = this.serviceConfigurations;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (serviceConfigurations != null)
        'serviceConfigurationSet': serviceConfigurations,
    };
  }
}

class DescribeVpcEndpointServicePermissionsResult {
  /// Information about the allowed principals.
  final List<AllowedPrincipal>? allowedPrincipals;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  DescribeVpcEndpointServicePermissionsResult({
    this.allowedPrincipals,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final allowedPrincipals = this.allowedPrincipals;
    final nextToken = this.nextToken;
    return {
      if (allowedPrincipals != null) 'allowedPrincipals': allowedPrincipals,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class DescribeVpcEndpointServicesResult {
  /// The token to use when requesting the next set of items. If there are no
  /// additional items to return, the string is empty.
  final String? nextToken;

  /// Information about the service.
  final List<ServiceDetail>? serviceDetails;

  /// The supported services.
  final List<String>? serviceNames;

  DescribeVpcEndpointServicesResult({
    this.nextToken,
    this.serviceDetails,
    this.serviceNames,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final serviceDetails = this.serviceDetails;
    final serviceNames = this.serviceNames;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (serviceDetails != null) 'serviceDetailSet': serviceDetails,
      if (serviceNames != null) 'serviceNameSet': serviceNames,
    };
  }
}

class DescribeVpcEndpointsResult {
  /// The token to use when requesting the next set of items. If there are no
  /// additional items to return, the string is empty.
  final String? nextToken;

  /// Information about the endpoints.
  final List<VpcEndpoint>? vpcEndpoints;

  DescribeVpcEndpointsResult({
    this.nextToken,
    this.vpcEndpoints,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final vpcEndpoints = this.vpcEndpoints;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (vpcEndpoints != null) 'vpcEndpointSet': vpcEndpoints,
    };
  }
}

class DescribeVpcPeeringConnectionsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the VPC peering connections.
  final List<VpcPeeringConnection>? vpcPeeringConnections;

  DescribeVpcPeeringConnectionsResult({
    this.nextToken,
    this.vpcPeeringConnections,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final vpcPeeringConnections = this.vpcPeeringConnections;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (vpcPeeringConnections != null)
        'vpcPeeringConnectionSet': vpcPeeringConnections,
    };
  }
}

class DescribeVpcsResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about one or more VPCs.
  final List<Vpc>? vpcs;

  DescribeVpcsResult({
    this.nextToken,
    this.vpcs,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final vpcs = this.vpcs;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (vpcs != null) 'vpcSet': vpcs,
    };
  }
}

/// Contains the output of DescribeVpnConnections.
class DescribeVpnConnectionsResult {
  /// Information about one or more VPN connections.
  final List<VpnConnection>? vpnConnections;

  DescribeVpnConnectionsResult({
    this.vpnConnections,
  });

  Map<String, dynamic> toJson() {
    final vpnConnections = this.vpnConnections;
    return {
      if (vpnConnections != null) 'vpnConnectionSet': vpnConnections,
    };
  }
}

/// Contains the output of DescribeVpnGateways.
class DescribeVpnGatewaysResult {
  /// Information about one or more virtual private gateways.
  final List<VpnGateway>? vpnGateways;

  DescribeVpnGatewaysResult({
    this.vpnGateways,
  });

  Map<String, dynamic> toJson() {
    final vpnGateways = this.vpnGateways;
    return {
      if (vpnGateways != null) 'vpnGatewaySet': vpnGateways,
    };
  }
}

enum DestinationFileFormat {
  plainText('plain-text'),
  parquet('parquet'),
  ;

  final String value;

  const DestinationFileFormat(this.value);

  static DestinationFileFormat fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum DestinationFileFormat'));
}

/// Describes the destination options for a flow log.
class DestinationOptionsRequest {
  /// The format for the flow log. The default is <code>plain-text</code>.
  final DestinationFileFormat? fileFormat;

  /// Indicates whether to use Hive-compatible prefixes for flow logs stored in
  /// Amazon S3. The default is <code>false</code>.
  final bool? hiveCompatiblePartitions;

  /// Indicates whether to partition the flow log per hour. This reduces the cost
  /// and response time for queries. The default is <code>false</code>.
  final bool? perHourPartition;

  DestinationOptionsRequest({
    this.fileFormat,
    this.hiveCompatiblePartitions,
    this.perHourPartition,
  });

  Map<String, dynamic> toJson() {
    final fileFormat = this.fileFormat;
    final hiveCompatiblePartitions = this.hiveCompatiblePartitions;
    final perHourPartition = this.perHourPartition;
    return {
      if (fileFormat != null) 'FileFormat': fileFormat.value,
      if (hiveCompatiblePartitions != null)
        'HiveCompatiblePartitions': hiveCompatiblePartitions,
      if (perHourPartition != null) 'PerHourPartition': perHourPartition,
    };
  }
}

/// Describes the destination options for a flow log.
class DestinationOptionsResponse {
  /// The format for the flow log.
  final DestinationFileFormat? fileFormat;

  /// Indicates whether to use Hive-compatible prefixes for flow logs stored in
  /// Amazon S3.
  final bool? hiveCompatiblePartitions;

  /// Indicates whether to partition the flow log per hour.
  final bool? perHourPartition;

  DestinationOptionsResponse({
    this.fileFormat,
    this.hiveCompatiblePartitions,
    this.perHourPartition,
  });

  Map<String, dynamic> toJson() {
    final fileFormat = this.fileFormat;
    final hiveCompatiblePartitions = this.hiveCompatiblePartitions;
    final perHourPartition = this.perHourPartition;
    return {
      if (fileFormat != null) 'fileFormat': fileFormat.value,
      if (hiveCompatiblePartitions != null)
        'hiveCompatiblePartitions': hiveCompatiblePartitions,
      if (perHourPartition != null) 'perHourPartition': perHourPartition,
    };
  }
}

class DetachClassicLinkVpcResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DetachClassicLinkVpcResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DetachVerifiedAccessTrustProviderResult {
  /// Details about the Verified Access instance.
  final VerifiedAccessInstance? verifiedAccessInstance;

  /// Details about the Verified Access trust provider.
  final VerifiedAccessTrustProvider? verifiedAccessTrustProvider;

  DetachVerifiedAccessTrustProviderResult({
    this.verifiedAccessInstance,
    this.verifiedAccessTrustProvider,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessInstance = this.verifiedAccessInstance;
    final verifiedAccessTrustProvider = this.verifiedAccessTrustProvider;
    return {
      if (verifiedAccessInstance != null)
        'verifiedAccessInstance': verifiedAccessInstance,
      if (verifiedAccessTrustProvider != null)
        'verifiedAccessTrustProvider': verifiedAccessTrustProvider,
    };
  }
}

/// Describes the options for an Amazon Web Services Verified Access
/// device-identity based trust provider.
class DeviceOptions {
  /// The URL Amazon Web Services Verified Access will use to verify the
  /// authenticity of the device tokens.
  final String? publicSigningKeyUrl;

  /// The ID of the tenant application with the device-identity provider.
  final String? tenantId;

  DeviceOptions({
    this.publicSigningKeyUrl,
    this.tenantId,
  });

  Map<String, dynamic> toJson() {
    final publicSigningKeyUrl = this.publicSigningKeyUrl;
    final tenantId = this.tenantId;
    return {
      if (publicSigningKeyUrl != null)
        'publicSigningKeyUrl': publicSigningKeyUrl,
      if (tenantId != null) 'tenantId': tenantId,
    };
  }
}

enum DeviceTrustProviderType {
  jamf('jamf'),
  crowdstrike('crowdstrike'),
  jumpcloud('jumpcloud'),
  ;

  final String value;

  const DeviceTrustProviderType(this.value);

  static DeviceTrustProviderType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DeviceTrustProviderType'));
}

enum DeviceType {
  ebs('ebs'),
  instanceStore('instance-store'),
  ;

  final String value;

  const DeviceType(this.value);

  static DeviceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum DeviceType'));
}

/// Describes a DHCP configuration option.
class DhcpConfiguration {
  /// The name of a DHCP option.
  final String? key;

  /// The values for the DHCP option.
  final List<AttributeValue>? values;

  DhcpConfiguration({
    this.key,
    this.values,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final values = this.values;
    return {
      if (key != null) 'key': key,
      if (values != null) 'valueSet': values,
    };
  }
}

/// The set of DHCP options.
class DhcpOptions {
  /// The DHCP options in the set.
  final List<DhcpConfiguration>? dhcpConfigurations;

  /// The ID of the set of DHCP options.
  final String? dhcpOptionsId;

  /// The ID of the Amazon Web Services account that owns the DHCP options set.
  final String? ownerId;

  /// Any tags assigned to the DHCP options set.
  final List<Tag>? tags;

  DhcpOptions({
    this.dhcpConfigurations,
    this.dhcpOptionsId,
    this.ownerId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final dhcpConfigurations = this.dhcpConfigurations;
    final dhcpOptionsId = this.dhcpOptionsId;
    final ownerId = this.ownerId;
    final tags = this.tags;
    return {
      if (dhcpConfigurations != null)
        'dhcpConfigurationSet': dhcpConfigurations,
      if (dhcpOptionsId != null) 'dhcpOptionsId': dhcpOptionsId,
      if (ownerId != null) 'ownerId': ownerId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an Active Directory.
class DirectoryServiceAuthentication {
  /// The ID of the Active Directory used for authentication.
  final String? directoryId;

  DirectoryServiceAuthentication({
    this.directoryId,
  });

  Map<String, dynamic> toJson() {
    final directoryId = this.directoryId;
    return {
      if (directoryId != null) 'directoryId': directoryId,
    };
  }
}

/// Describes the Active Directory to be used for client authentication.
class DirectoryServiceAuthenticationRequest {
  /// The ID of the Active Directory to be used for authentication.
  final String? directoryId;

  DirectoryServiceAuthenticationRequest({
    this.directoryId,
  });

  Map<String, dynamic> toJson() {
    final directoryId = this.directoryId;
    return {
      if (directoryId != null) 'DirectoryId': directoryId,
    };
  }
}

class DisableAddressTransferResult {
  /// An Elastic IP address transfer.
  final AddressTransfer? addressTransfer;

  DisableAddressTransferResult({
    this.addressTransfer,
  });

  Map<String, dynamic> toJson() {
    final addressTransfer = this.addressTransfer;
    return {
      if (addressTransfer != null) 'addressTransfer': addressTransfer,
    };
  }
}

class DisableAwsNetworkPerformanceMetricSubscriptionResult {
  /// Indicates whether the unsubscribe action was successful.
  final bool? output;

  DisableAwsNetworkPerformanceMetricSubscriptionResult({
    this.output,
  });

  Map<String, dynamic> toJson() {
    final output = this.output;
    return {
      if (output != null) 'output': output,
    };
  }
}

class DisableEbsEncryptionByDefaultResult {
  /// The updated status of encryption by default.
  final bool? ebsEncryptionByDefault;

  DisableEbsEncryptionByDefaultResult({
    this.ebsEncryptionByDefault,
  });

  Map<String, dynamic> toJson() {
    final ebsEncryptionByDefault = this.ebsEncryptionByDefault;
    return {
      if (ebsEncryptionByDefault != null)
        'ebsEncryptionByDefault': ebsEncryptionByDefault,
    };
  }
}

class DisableFastLaunchResult {
  /// The ID of the image for which Windows fast launch was disabled.
  final String? imageId;

  /// The launch template that was used to launch Windows instances from
  /// pre-provisioned snapshots.
  final FastLaunchLaunchTemplateSpecificationResponse? launchTemplate;

  /// The maximum number of instances that Amazon EC2 can launch at the same time
  /// to create pre-provisioned snapshots for Windows fast launch.
  final int? maxParallelLaunches;

  /// The owner of the Windows AMI for which Windows fast launch was disabled.
  final String? ownerId;

  /// The pre-provisioning resource type that must be cleaned after turning off
  /// Windows fast launch for the Windows AMI. Supported values include:
  /// <code>snapshot</code>.
  final FastLaunchResourceType? resourceType;

  /// Parameters that were used for Windows fast launch for the Windows AMI before
  /// Windows fast launch was disabled. This informs the clean-up process.
  final FastLaunchSnapshotConfigurationResponse? snapshotConfiguration;

  /// The current state of Windows fast launch for the specified Windows AMI.
  final FastLaunchStateCode? state;

  /// The reason that the state changed for Windows fast launch for the Windows
  /// AMI.
  final String? stateTransitionReason;

  /// The time that the state changed for Windows fast launch for the Windows AMI.
  final DateTime? stateTransitionTime;

  DisableFastLaunchResult({
    this.imageId,
    this.launchTemplate,
    this.maxParallelLaunches,
    this.ownerId,
    this.resourceType,
    this.snapshotConfiguration,
    this.state,
    this.stateTransitionReason,
    this.stateTransitionTime,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    final launchTemplate = this.launchTemplate;
    final maxParallelLaunches = this.maxParallelLaunches;
    final ownerId = this.ownerId;
    final resourceType = this.resourceType;
    final snapshotConfiguration = this.snapshotConfiguration;
    final state = this.state;
    final stateTransitionReason = this.stateTransitionReason;
    final stateTransitionTime = this.stateTransitionTime;
    return {
      if (imageId != null) 'imageId': imageId,
      if (launchTemplate != null) 'launchTemplate': launchTemplate,
      if (maxParallelLaunches != null)
        'maxParallelLaunches': maxParallelLaunches,
      if (ownerId != null) 'ownerId': ownerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (snapshotConfiguration != null)
        'snapshotConfiguration': snapshotConfiguration,
      if (state != null) 'state': state.value,
      if (stateTransitionReason != null)
        'stateTransitionReason': stateTransitionReason,
      if (stateTransitionTime != null)
        'stateTransitionTime': iso8601ToJson(stateTransitionTime),
    };
  }
}

/// Contains information about the errors that occurred when disabling fast
/// snapshot restores.
class DisableFastSnapshotRestoreErrorItem {
  /// The errors.
  final List<DisableFastSnapshotRestoreStateErrorItem>?
      fastSnapshotRestoreStateErrors;

  /// The ID of the snapshot.
  final String? snapshotId;

  DisableFastSnapshotRestoreErrorItem({
    this.fastSnapshotRestoreStateErrors,
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final fastSnapshotRestoreStateErrors = this.fastSnapshotRestoreStateErrors;
    final snapshotId = this.snapshotId;
    return {
      if (fastSnapshotRestoreStateErrors != null)
        'fastSnapshotRestoreStateErrorSet': fastSnapshotRestoreStateErrors,
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

/// Describes an error that occurred when disabling fast snapshot restores.
class DisableFastSnapshotRestoreStateError {
  /// The error code.
  final String? code;

  /// The error message.
  final String? message;

  DisableFastSnapshotRestoreStateError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

/// Contains information about an error that occurred when disabling fast
/// snapshot restores.
class DisableFastSnapshotRestoreStateErrorItem {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The error.
  final DisableFastSnapshotRestoreStateError? error;

  DisableFastSnapshotRestoreStateErrorItem({
    this.availabilityZone,
    this.error,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final error = this.error;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (error != null) 'error': error,
    };
  }
}

/// Describes fast snapshot restores that were successfully disabled.
class DisableFastSnapshotRestoreSuccessItem {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The time at which fast snapshot restores entered the <code>disabled</code>
  /// state.
  final DateTime? disabledTime;

  /// The time at which fast snapshot restores entered the <code>disabling</code>
  /// state.
  final DateTime? disablingTime;

  /// The time at which fast snapshot restores entered the <code>enabled</code>
  /// state.
  final DateTime? enabledTime;

  /// The time at which fast snapshot restores entered the <code>enabling</code>
  /// state.
  final DateTime? enablingTime;

  /// The time at which fast snapshot restores entered the <code>optimizing</code>
  /// state.
  final DateTime? optimizingTime;

  /// The Amazon Web Services owner alias that enabled fast snapshot restores on
  /// the snapshot. This is intended for future use.
  final String? ownerAlias;

  /// The ID of the Amazon Web Services account that enabled fast snapshot
  /// restores on the snapshot.
  final String? ownerId;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The state of fast snapshot restores for the snapshot.
  final FastSnapshotRestoreStateCode? state;

  /// The reason for the state transition. The possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>Client.UserInitiated</code> - The state successfully transitioned to
  /// <code>enabling</code> or <code>disabling</code>.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiated - Lifecycle state transition</code> - The state
  /// successfully transitioned to <code>optimizing</code>, <code>enabled</code>,
  /// or <code>disabled</code>.
  /// </li>
  /// </ul>
  final String? stateTransitionReason;

  DisableFastSnapshotRestoreSuccessItem({
    this.availabilityZone,
    this.disabledTime,
    this.disablingTime,
    this.enabledTime,
    this.enablingTime,
    this.optimizingTime,
    this.ownerAlias,
    this.ownerId,
    this.snapshotId,
    this.state,
    this.stateTransitionReason,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final disabledTime = this.disabledTime;
    final disablingTime = this.disablingTime;
    final enabledTime = this.enabledTime;
    final enablingTime = this.enablingTime;
    final optimizingTime = this.optimizingTime;
    final ownerAlias = this.ownerAlias;
    final ownerId = this.ownerId;
    final snapshotId = this.snapshotId;
    final state = this.state;
    final stateTransitionReason = this.stateTransitionReason;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (disabledTime != null) 'disabledTime': iso8601ToJson(disabledTime),
      if (disablingTime != null) 'disablingTime': iso8601ToJson(disablingTime),
      if (enabledTime != null) 'enabledTime': iso8601ToJson(enabledTime),
      if (enablingTime != null) 'enablingTime': iso8601ToJson(enablingTime),
      if (optimizingTime != null)
        'optimizingTime': iso8601ToJson(optimizingTime),
      if (ownerAlias != null) 'ownerAlias': ownerAlias,
      if (ownerId != null) 'ownerId': ownerId,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (state != null) 'state': state.value,
      if (stateTransitionReason != null)
        'stateTransitionReason': stateTransitionReason,
    };
  }
}

class DisableFastSnapshotRestoresResult {
  /// Information about the snapshots for which fast snapshot restores were
  /// successfully disabled.
  final List<DisableFastSnapshotRestoreSuccessItem>? successful;

  /// Information about the snapshots for which fast snapshot restores could not
  /// be disabled.
  final List<DisableFastSnapshotRestoreErrorItem>? unsuccessful;

  DisableFastSnapshotRestoresResult({
    this.successful,
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final successful = this.successful;
    final unsuccessful = this.unsuccessful;
    return {
      if (successful != null) 'successful': successful,
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class DisableImageBlockPublicAccessResult {
  /// Returns <code>unblocked</code> if the request succeeds; otherwise, it
  /// returns an error.
  final ImageBlockPublicAccessDisabledState? imageBlockPublicAccessState;

  DisableImageBlockPublicAccessResult({
    this.imageBlockPublicAccessState,
  });

  Map<String, dynamic> toJson() {
    final imageBlockPublicAccessState = this.imageBlockPublicAccessState;
    return {
      if (imageBlockPublicAccessState != null)
        'imageBlockPublicAccessState': imageBlockPublicAccessState.value,
    };
  }
}

class DisableImageDeprecationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DisableImageDeprecationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisableImageDeregistrationProtectionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final String? returnValue;

  DisableImageDeregistrationProtectionResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisableImageResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DisableImageResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisableIpamOrganizationAdminAccountResult {
  /// The result of disabling the IPAM account.
  final bool? success;

  DisableIpamOrganizationAdminAccountResult({
    this.success,
  });

  Map<String, dynamic> toJson() {
    final success = this.success;
    return {
      if (success != null) 'success': success,
    };
  }
}

class DisableSerialConsoleAccessResult {
  /// If <code>true</code>, access to the EC2 serial console of all instances is
  /// enabled for your account. If <code>false</code>, access to the EC2 serial
  /// console of all instances is disabled for your account.
  final bool? serialConsoleAccessEnabled;

  DisableSerialConsoleAccessResult({
    this.serialConsoleAccessEnabled,
  });

  Map<String, dynamic> toJson() {
    final serialConsoleAccessEnabled = this.serialConsoleAccessEnabled;
    return {
      if (serialConsoleAccessEnabled != null)
        'serialConsoleAccessEnabled': serialConsoleAccessEnabled,
    };
  }
}

class DisableSnapshotBlockPublicAccessResult {
  /// Returns <code>unblocked</code> if the request succeeds.
  final SnapshotBlockPublicAccessState? state;

  DisableSnapshotBlockPublicAccessResult({
    this.state,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    return {
      if (state != null) 'state': state.value,
    };
  }
}

class DisableTransitGatewayRouteTablePropagationResult {
  /// Information about route propagation.
  final TransitGatewayPropagation? propagation;

  DisableTransitGatewayRouteTablePropagationResult({
    this.propagation,
  });

  Map<String, dynamic> toJson() {
    final propagation = this.propagation;
    return {
      if (propagation != null) 'propagation': propagation,
    };
  }
}

class DisableVpcClassicLinkDnsSupportResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DisableVpcClassicLinkDnsSupportResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisableVpcClassicLinkResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DisableVpcClassicLinkResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisassociateClientVpnTargetNetworkResult {
  /// The ID of the target network association.
  final String? associationId;

  /// The current state of the target network association.
  final AssociationStatus? status;

  DisassociateClientVpnTargetNetworkResult({
    this.associationId,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final status = this.status;
    return {
      if (associationId != null) 'associationId': associationId,
      if (status != null) 'status': status,
    };
  }
}

class DisassociateEnclaveCertificateIamRoleResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DisassociateEnclaveCertificateIamRoleResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisassociateIamInstanceProfileResult {
  /// Information about the IAM instance profile association.
  final IamInstanceProfileAssociation? iamInstanceProfileAssociation;

  DisassociateIamInstanceProfileResult({
    this.iamInstanceProfileAssociation,
  });

  Map<String, dynamic> toJson() {
    final iamInstanceProfileAssociation = this.iamInstanceProfileAssociation;
    return {
      if (iamInstanceProfileAssociation != null)
        'iamInstanceProfileAssociation': iamInstanceProfileAssociation,
    };
  }
}

class DisassociateInstanceEventWindowResult {
  /// Information about the event window.
  final InstanceEventWindow? instanceEventWindow;

  DisassociateInstanceEventWindowResult({
    this.instanceEventWindow,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindow = this.instanceEventWindow;
    return {
      if (instanceEventWindow != null)
        'instanceEventWindow': instanceEventWindow,
    };
  }
}

class DisassociateIpamByoasnResult {
  /// An ASN and BYOIP CIDR association.
  final AsnAssociation? asnAssociation;

  DisassociateIpamByoasnResult({
    this.asnAssociation,
  });

  Map<String, dynamic> toJson() {
    final asnAssociation = this.asnAssociation;
    return {
      if (asnAssociation != null) 'asnAssociation': asnAssociation,
    };
  }
}

class DisassociateIpamResourceDiscoveryResult {
  /// A resource discovery association.
  final IpamResourceDiscoveryAssociation? ipamResourceDiscoveryAssociation;

  DisassociateIpamResourceDiscoveryResult({
    this.ipamResourceDiscoveryAssociation,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscoveryAssociation =
        this.ipamResourceDiscoveryAssociation;
    return {
      if (ipamResourceDiscoveryAssociation != null)
        'ipamResourceDiscoveryAssociation': ipamResourceDiscoveryAssociation,
    };
  }
}

class DisassociateNatGatewayAddressResult {
  /// Information about the NAT gateway IP addresses.
  final List<NatGatewayAddress>? natGatewayAddresses;

  /// The ID of the NAT gateway.
  final String? natGatewayId;

  DisassociateNatGatewayAddressResult({
    this.natGatewayAddresses,
    this.natGatewayId,
  });

  Map<String, dynamic> toJson() {
    final natGatewayAddresses = this.natGatewayAddresses;
    final natGatewayId = this.natGatewayId;
    return {
      if (natGatewayAddresses != null)
        'natGatewayAddressSet': natGatewayAddresses,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
    };
  }
}

class DisassociateSubnetCidrBlockResult {
  /// Information about the IPv6 CIDR block association.
  final SubnetIpv6CidrBlockAssociation? ipv6CidrBlockAssociation;

  /// The ID of the subnet.
  final String? subnetId;

  DisassociateSubnetCidrBlockResult({
    this.ipv6CidrBlockAssociation,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final ipv6CidrBlockAssociation = this.ipv6CidrBlockAssociation;
    final subnetId = this.subnetId;
    return {
      if (ipv6CidrBlockAssociation != null)
        'ipv6CidrBlockAssociation': ipv6CidrBlockAssociation,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

class DisassociateTransitGatewayMulticastDomainResult {
  /// Information about the association.
  final TransitGatewayMulticastDomainAssociations? associations;

  DisassociateTransitGatewayMulticastDomainResult({
    this.associations,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    return {
      if (associations != null) 'associations': associations,
    };
  }
}

class DisassociateTransitGatewayPolicyTableResult {
  /// Returns details about the transit gateway policy table disassociation.
  final TransitGatewayPolicyTableAssociation? association;

  DisassociateTransitGatewayPolicyTableResult({
    this.association,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    return {
      if (association != null) 'association': association,
    };
  }
}

class DisassociateTransitGatewayRouteTableResult {
  /// Information about the association.
  final TransitGatewayAssociation? association;

  DisassociateTransitGatewayRouteTableResult({
    this.association,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    return {
      if (association != null) 'association': association,
    };
  }
}

class DisassociateTrunkInterfaceResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String? clientToken;

  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  DisassociateTrunkInterfaceResult({
    this.clientToken,
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final returnValue = this.returnValue;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class DisassociateVpcCidrBlockResult {
  /// Information about the IPv4 CIDR block association.
  final VpcCidrBlockAssociation? cidrBlockAssociation;

  /// Information about the IPv6 CIDR block association.
  final VpcIpv6CidrBlockAssociation? ipv6CidrBlockAssociation;

  /// The ID of the VPC.
  final String? vpcId;

  DisassociateVpcCidrBlockResult({
    this.cidrBlockAssociation,
    this.ipv6CidrBlockAssociation,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final cidrBlockAssociation = this.cidrBlockAssociation;
    final ipv6CidrBlockAssociation = this.ipv6CidrBlockAssociation;
    final vpcId = this.vpcId;
    return {
      if (cidrBlockAssociation != null)
        'cidrBlockAssociation': cidrBlockAssociation,
      if (ipv6CidrBlockAssociation != null)
        'ipv6CidrBlockAssociation': ipv6CidrBlockAssociation,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes a disk image.
class DiskImage {
  /// A description of the disk image.
  final String? description;

  /// Information about the disk image.
  final DiskImageDetail? image;

  /// Information about the volume.
  final VolumeDetail? volume;

  DiskImage({
    this.description,
    this.image,
    this.volume,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final image = this.image;
    final volume = this.volume;
    return {
      if (description != null) 'Description': description,
      if (image != null) 'Image': image,
      if (volume != null) 'Volume': volume,
    };
  }
}

/// Describes a disk image.
class DiskImageDescription {
  /// The checksum computed for the disk image.
  final String? checksum;

  /// The disk image format.
  final DiskImageFormat? format;

  /// A presigned URL for the import manifest stored in Amazon S3. For information
  /// about creating a presigned URL for an Amazon S3 object, read the "Query
  /// String Request Authentication Alternative" section of the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating
  /// REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer
  /// Guide</i>.
  ///
  /// For information about the import manifest referenced by this API action, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  final String? importManifestUrl;

  /// The size of the disk image, in GiB.
  final int? size;

  DiskImageDescription({
    this.checksum,
    this.format,
    this.importManifestUrl,
    this.size,
  });

  Map<String, dynamic> toJson() {
    final checksum = this.checksum;
    final format = this.format;
    final importManifestUrl = this.importManifestUrl;
    final size = this.size;
    return {
      if (checksum != null) 'checksum': checksum,
      if (format != null) 'format': format.value,
      if (importManifestUrl != null) 'importManifestUrl': importManifestUrl,
      if (size != null) 'size': size,
    };
  }
}

/// Describes a disk image.
class DiskImageDetail {
  /// The size of the disk image, in GiB.
  final int bytes;

  /// The disk image format.
  final DiskImageFormat format;

  /// A presigned URL for the import manifest stored in Amazon S3 and presented
  /// here as an Amazon S3 presigned URL. For information about creating a
  /// presigned URL for an Amazon S3 object, read the "Query String Request
  /// Authentication Alternative" section of the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating
  /// REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer
  /// Guide</i>.
  ///
  /// For information about the import manifest referenced by this API action, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  final String importManifestUrl;

  DiskImageDetail({
    required this.bytes,
    required this.format,
    required this.importManifestUrl,
  });

  Map<String, dynamic> toJson() {
    final bytes = this.bytes;
    final format = this.format;
    final importManifestUrl = this.importManifestUrl;
    return {
      'bytes': bytes,
      'format': format.value,
      'importManifestUrl': importManifestUrl,
    };
  }
}

enum DiskImageFormat {
  vmdk('VMDK'),
  raw('RAW'),
  vhd('VHD'),
  ;

  final String value;

  const DiskImageFormat(this.value);

  static DiskImageFormat fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DiskImageFormat'));
}

/// Describes a disk image volume.
class DiskImageVolumeDescription {
  /// The volume identifier.
  final String? id;

  /// The size of the volume, in GiB.
  final int? size;

  DiskImageVolumeDescription({
    this.id,
    this.size,
  });

  Map<String, dynamic> toJson() {
    final id = this.id;
    final size = this.size;
    return {
      if (id != null) 'id': id,
      if (size != null) 'size': size,
    };
  }
}

/// Describes a disk.
class DiskInfo {
  /// The number of disks with this configuration.
  final int? count;

  /// The size of the disk in GB.
  final int? sizeInGB;

  /// The type of disk.
  final DiskType? type;

  DiskInfo({
    this.count,
    this.sizeInGB,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final sizeInGB = this.sizeInGB;
    final type = this.type;
    return {
      if (count != null) 'count': count,
      if (sizeInGB != null) 'sizeInGB': sizeInGB,
      if (type != null) 'type': type.value,
    };
  }
}

enum DiskType {
  hdd('hdd'),
  ssd('ssd'),
  ;

  final String value;

  const DiskType(this.value);

  static DiskType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum DiskType'));
}

/// Describes a DNS entry.
class DnsEntry {
  /// The DNS name.
  final String? dnsName;

  /// The ID of the private hosted zone.
  final String? hostedZoneId;

  DnsEntry({
    this.dnsName,
    this.hostedZoneId,
  });

  Map<String, dynamic> toJson() {
    final dnsName = this.dnsName;
    final hostedZoneId = this.hostedZoneId;
    return {
      if (dnsName != null) 'dnsName': dnsName,
      if (hostedZoneId != null) 'hostedZoneId': hostedZoneId,
    };
  }
}

enum DnsNameState {
  pendingVerification('pendingVerification'),
  verified('verified'),
  failed('failed'),
  ;

  final String value;

  const DnsNameState(this.value);

  static DnsNameState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DnsNameState'));
}

/// Describes the DNS options for an endpoint.
class DnsOptions {
  /// The DNS records created for the endpoint.
  final DnsRecordIpType? dnsRecordIpType;

  /// Indicates whether to enable private DNS only for inbound endpoints.
  final bool? privateDnsOnlyForInboundResolverEndpoint;

  DnsOptions({
    this.dnsRecordIpType,
    this.privateDnsOnlyForInboundResolverEndpoint,
  });

  Map<String, dynamic> toJson() {
    final dnsRecordIpType = this.dnsRecordIpType;
    final privateDnsOnlyForInboundResolverEndpoint =
        this.privateDnsOnlyForInboundResolverEndpoint;
    return {
      if (dnsRecordIpType != null) 'dnsRecordIpType': dnsRecordIpType.value,
      if (privateDnsOnlyForInboundResolverEndpoint != null)
        'privateDnsOnlyForInboundResolverEndpoint':
            privateDnsOnlyForInboundResolverEndpoint,
    };
  }
}

/// Describes the DNS options for an endpoint.
class DnsOptionsSpecification {
  /// The DNS records created for the endpoint.
  final DnsRecordIpType? dnsRecordIpType;

  /// Indicates whether to enable private DNS only for inbound endpoints. This
  /// option is available only for services that support both gateway and
  /// interface endpoints. It routes traffic that originates from the VPC to the
  /// gateway endpoint and traffic that originates from on-premises to the
  /// interface endpoint.
  final bool? privateDnsOnlyForInboundResolverEndpoint;

  DnsOptionsSpecification({
    this.dnsRecordIpType,
    this.privateDnsOnlyForInboundResolverEndpoint,
  });

  Map<String, dynamic> toJson() {
    final dnsRecordIpType = this.dnsRecordIpType;
    final privateDnsOnlyForInboundResolverEndpoint =
        this.privateDnsOnlyForInboundResolverEndpoint;
    return {
      if (dnsRecordIpType != null) 'DnsRecordIpType': dnsRecordIpType.value,
      if (privateDnsOnlyForInboundResolverEndpoint != null)
        'PrivateDnsOnlyForInboundResolverEndpoint':
            privateDnsOnlyForInboundResolverEndpoint,
    };
  }
}

enum DnsRecordIpType {
  ipv4('ipv4'),
  dualstack('dualstack'),
  ipv6('ipv6'),
  serviceDefined('service-defined'),
  ;

  final String value;

  const DnsRecordIpType(this.value);

  static DnsRecordIpType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DnsRecordIpType'));
}

/// Information about the DNS server to be used.
class DnsServersOptionsModifyStructure {
  /// The IPv4 address range, in CIDR notation, of the DNS servers to be used. You
  /// can specify up to two DNS servers. Ensure that the DNS servers can be
  /// reached by the clients. The specified values overwrite the existing values.
  final List<String>? customDnsServers;

  /// Indicates whether DNS servers should be used. Specify <code>False</code> to
  /// delete the existing DNS servers.
  final bool? enabled;

  DnsServersOptionsModifyStructure({
    this.customDnsServers,
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final customDnsServers = this.customDnsServers;
    final enabled = this.enabled;
    return {
      if (customDnsServers != null) 'CustomDnsServers': customDnsServers,
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

enum DnsSupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const DnsSupportValue(this.value);

  static DnsSupportValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DnsSupportValue'));
}

enum DomainType {
  vpc('vpc'),
  standard('standard'),
  ;

  final String value;

  const DomainType(this.value);

  static DomainType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum DomainType'));
}

enum DynamicRoutingValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const DynamicRoutingValue(this.value);

  static DynamicRoutingValue fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum DynamicRoutingValue'));
}

/// Describes a block device for an EBS volume.
class EbsBlockDevice {
  /// Indicates whether the EBS volume is deleted on instance termination. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination">Preserving
  /// Amazon EBS volumes on instance termination</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  final bool? deleteOnTermination;

  /// Indicates whether the encryption state of an EBS volume is changed while
  /// being restored from a backing snapshot. The effect of setting the encryption
  /// state to <code>true</code> depends on the volume origin (new or from a
  /// snapshot), starting encryption state, ownership, and whether encryption by
  /// default is enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html#encryption-parameters">Amazon
  /// EBS encryption</a> in the <i>Amazon EBS User Guide</i>.
  ///
  /// In no case can you remove encryption from an encrypted volume.
  ///
  /// Encrypted volumes can only be attached to instances that support Amazon EBS
  /// encryption. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances">Supported
  /// instance types</a>.
  ///
  /// This parameter is not returned by <a>DescribeImageAttribute</a>.
  ///
  /// For <a>CreateImage</a> and <a>RegisterImage</a>, whether you can include
  /// this parameter, and the allowed values differ depending on the type of block
  /// device mapping you are creating.
  ///
  /// <ul>
  /// <li>
  /// If you are creating a block device mapping for a <b>new (empty) volume</b>,
  /// you can include this parameter, and specify either <code>true</code> for an
  /// encrypted volume, or <code>false</code> for an unencrypted volume. If you
  /// omit this parameter, it defaults to <code>false</code> (unencrypted).
  /// </li>
  /// <li>
  /// If you are creating a block device mapping from an <b>existing encrypted or
  /// unencrypted snapshot</b>, you must omit this parameter. If you include this
  /// parameter, the request will fail, regardless of the value that you specify.
  /// </li>
  /// <li>
  /// If you are creating a block device mapping from an <b>existing unencrypted
  /// volume</b>, you can include this parameter, but you must specify
  /// <code>false</code>. If you specify <code>true</code>, the request will fail.
  /// In this case, we recommend that you omit the parameter.
  /// </li>
  /// <li>
  /// If you are creating a block device mapping from an <b>existing encrypted
  /// volume</b>, you can include this parameter, and specify either
  /// <code>true</code> or <code>false</code>. However, if you specify
  /// <code>false</code>, the parameter is ignored and the block device mapping is
  /// always encrypted. In this case, we recommend that you omit the parameter.
  /// </li>
  /// </ul>
  final bool? encrypted;

  /// The number of I/O operations per second (IOPS). For <code>gp3</code>,
  /// <code>io1</code>, and <code>io2</code> volumes, this represents the number
  /// of IOPS that are provisioned for the volume. For <code>gp2</code> volumes,
  /// this represents the baseline performance of the volume and the rate at which
  /// the volume accumulates I/O credits for bursting.
  ///
  /// The following are the supported values for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp3</code>: 3,000 - 16,000 IOPS
  /// </li>
  /// <li>
  /// <code>io1</code>: 100 - 64,000 IOPS
  /// </li>
  /// <li>
  /// <code>io2</code>: 100 - 256,000 IOPS
  /// </li>
  /// </ul>
  /// For <code>io2</code> volumes, you can achieve up to 256,000 IOPS on <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances
  /// built on the Nitro System</a>. On other instances, you can achieve
  /// performance up to 32,000 IOPS.
  ///
  /// This parameter is required for <code>io1</code> and <code>io2</code>
  /// volumes. The default for <code>gp3</code> volumes is 3,000 IOPS.
  final int? iops;

  /// Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed
  /// CMK under which the EBS volume is encrypted.
  ///
  /// This parameter is only supported on <code>BlockDeviceMapping</code> objects
  /// called by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>,
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html">RequestSpotFleet</a>,
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html">RequestSpotInstances</a>.
  final String? kmsKeyId;

  /// The ARN of the Outpost on which the snapshot is stored.
  ///
  /// This parameter is not supported when using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html">CreateImage</a>.
  final String? outpostArn;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The throughput that the volume supports, in MiB/s.
  ///
  /// This parameter is valid only for <code>gp3</code> volumes.
  ///
  /// Valid Range: Minimum value of 125. Maximum value of 1000.
  final int? throughput;

  /// The size of the volume, in GiBs. You must specify either a snapshot ID or a
  /// volume size. If you specify a snapshot, the default is the snapshot size.
  /// You can specify a volume size that is equal to or larger than the snapshot
  /// size.
  ///
  /// The following are the supported sizes for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp2</code> and <code>gp3</code>: 1 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io1</code>: 4 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io2</code>: 4 - 65,536 GiB
  /// </li>
  /// <li>
  /// <code>st1</code> and <code>sc1</code>: 125 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>standard</code>: 1 - 1024 GiB
  /// </li>
  /// </ul>
  final int? volumeSize;

  /// The volume type. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html">Amazon
  /// EBS volume types</a> in the <i>Amazon EBS User Guide</i>.
  final VolumeType? volumeType;

  EbsBlockDevice({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.kmsKeyId,
    this.outpostArn,
    this.snapshotId,
    this.throughput,
    this.volumeSize,
    this.volumeType,
  });

  Map<String, dynamic> toJson() {
    final deleteOnTermination = this.deleteOnTermination;
    final encrypted = this.encrypted;
    final iops = this.iops;
    final kmsKeyId = this.kmsKeyId;
    final outpostArn = this.outpostArn;
    final snapshotId = this.snapshotId;
    final throughput = this.throughput;
    final volumeSize = this.volumeSize;
    final volumeType = this.volumeType;
    return {
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (encrypted != null) 'encrypted': encrypted,
      if (iops != null) 'iops': iops,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (throughput != null) 'throughput': throughput,
      if (volumeSize != null) 'volumeSize': volumeSize,
      if (volumeType != null) 'volumeType': volumeType.value,
    };
  }
}

enum EbsEncryptionSupport {
  unsupported('unsupported'),
  supported('supported'),
  ;

  final String value;

  const EbsEncryptionSupport(this.value);

  static EbsEncryptionSupport fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum EbsEncryptionSupport'));
}

/// Describes the Amazon EBS features supported by the instance type.
class EbsInfo {
  /// Describes the optimized EBS performance for the instance type.
  final EbsOptimizedInfo? ebsOptimizedInfo;

  /// Indicates whether the instance type is Amazon EBS-optimized. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon
  /// EBS-optimized instances</a> in <i>Amazon EC2 User Guide</i>.
  final EbsOptimizedSupport? ebsOptimizedSupport;

  /// Indicates whether Amazon EBS encryption is supported.
  final EbsEncryptionSupport? encryptionSupport;

  /// Indicates whether non-volatile memory express (NVMe) is supported.
  final EbsNvmeSupport? nvmeSupport;

  EbsInfo({
    this.ebsOptimizedInfo,
    this.ebsOptimizedSupport,
    this.encryptionSupport,
    this.nvmeSupport,
  });

  Map<String, dynamic> toJson() {
    final ebsOptimizedInfo = this.ebsOptimizedInfo;
    final ebsOptimizedSupport = this.ebsOptimizedSupport;
    final encryptionSupport = this.encryptionSupport;
    final nvmeSupport = this.nvmeSupport;
    return {
      if (ebsOptimizedInfo != null) 'ebsOptimizedInfo': ebsOptimizedInfo,
      if (ebsOptimizedSupport != null)
        'ebsOptimizedSupport': ebsOptimizedSupport.value,
      if (encryptionSupport != null)
        'encryptionSupport': encryptionSupport.value,
      if (nvmeSupport != null) 'nvmeSupport': nvmeSupport.value,
    };
  }
}

/// Describes a parameter used to set up an EBS volume in a block device
/// mapping.
class EbsInstanceBlockDevice {
  /// The ARN of the Amazon ECS or Fargate task to which the volume is attached.
  final String? associatedResource;

  /// The time stamp when the attachment initiated.
  final DateTime? attachTime;

  /// Indicates whether the volume is deleted on instance termination.
  final bool? deleteOnTermination;

  /// The attachment state.
  final AttachmentStatus? status;

  /// The ID of the EBS volume.
  final String? volumeId;

  /// The ID of the Amazon Web Services account that owns the volume.
  ///
  /// This parameter is returned only for volumes that are attached to Fargate
  /// tasks.
  final String? volumeOwnerId;

  EbsInstanceBlockDevice({
    this.associatedResource,
    this.attachTime,
    this.deleteOnTermination,
    this.status,
    this.volumeId,
    this.volumeOwnerId,
  });

  Map<String, dynamic> toJson() {
    final associatedResource = this.associatedResource;
    final attachTime = this.attachTime;
    final deleteOnTermination = this.deleteOnTermination;
    final status = this.status;
    final volumeId = this.volumeId;
    final volumeOwnerId = this.volumeOwnerId;
    return {
      if (associatedResource != null) 'associatedResource': associatedResource,
      if (attachTime != null) 'attachTime': iso8601ToJson(attachTime),
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (status != null) 'status': status.value,
      if (volumeId != null) 'volumeId': volumeId,
      if (volumeOwnerId != null) 'volumeOwnerId': volumeOwnerId,
    };
  }
}

/// Describes information used to set up an EBS volume specified in a block
/// device mapping.
class EbsInstanceBlockDeviceSpecification {
  /// Indicates whether the volume is deleted on instance termination.
  final bool? deleteOnTermination;

  /// The ID of the EBS volume.
  final String? volumeId;

  EbsInstanceBlockDeviceSpecification({
    this.deleteOnTermination,
    this.volumeId,
  });

  Map<String, dynamic> toJson() {
    final deleteOnTermination = this.deleteOnTermination;
    final volumeId = this.volumeId;
    return {
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (volumeId != null) 'volumeId': volumeId,
    };
  }
}

enum EbsNvmeSupport {
  unsupported('unsupported'),
  supported('supported'),
  required('required'),
  ;

  final String value;

  const EbsNvmeSupport(this.value);

  static EbsNvmeSupport fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EbsNvmeSupport'));
}

/// Describes the optimized EBS performance for supported instance types.
class EbsOptimizedInfo {
  /// The baseline bandwidth performance for an EBS-optimized instance type, in
  /// Mbps.
  final int? baselineBandwidthInMbps;

  /// The baseline input/output storage operations per seconds for an
  /// EBS-optimized instance type.
  final int? baselineIops;

  /// The baseline throughput performance for an EBS-optimized instance type, in
  /// MB/s.
  final double? baselineThroughputInMBps;

  /// The maximum bandwidth performance for an EBS-optimized instance type, in
  /// Mbps.
  final int? maximumBandwidthInMbps;

  /// The maximum input/output storage operations per second for an EBS-optimized
  /// instance type.
  final int? maximumIops;

  /// The maximum throughput performance for an EBS-optimized instance type, in
  /// MB/s.
  final double? maximumThroughputInMBps;

  EbsOptimizedInfo({
    this.baselineBandwidthInMbps,
    this.baselineIops,
    this.baselineThroughputInMBps,
    this.maximumBandwidthInMbps,
    this.maximumIops,
    this.maximumThroughputInMBps,
  });

  Map<String, dynamic> toJson() {
    final baselineBandwidthInMbps = this.baselineBandwidthInMbps;
    final baselineIops = this.baselineIops;
    final baselineThroughputInMBps = this.baselineThroughputInMBps;
    final maximumBandwidthInMbps = this.maximumBandwidthInMbps;
    final maximumIops = this.maximumIops;
    final maximumThroughputInMBps = this.maximumThroughputInMBps;
    return {
      if (baselineBandwidthInMbps != null)
        'baselineBandwidthInMbps': baselineBandwidthInMbps,
      if (baselineIops != null) 'baselineIops': baselineIops,
      if (baselineThroughputInMBps != null)
        'baselineThroughputInMBps': baselineThroughputInMBps,
      if (maximumBandwidthInMbps != null)
        'maximumBandwidthInMbps': maximumBandwidthInMbps,
      if (maximumIops != null) 'maximumIops': maximumIops,
      if (maximumThroughputInMBps != null)
        'maximumThroughputInMBps': maximumThroughputInMBps,
    };
  }
}

enum EbsOptimizedSupport {
  unsupported('unsupported'),
  supported('supported'),
  $default('default'),
  ;

  final String value;

  const EbsOptimizedSupport(this.value);

  static EbsOptimizedSupport fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum EbsOptimizedSupport'));
}

/// The EC2 Instance Connect Endpoint.
class Ec2InstanceConnectEndpoint {
  /// The Availability Zone of the EC2 Instance Connect Endpoint.
  final String? availabilityZone;

  /// The date and time that the EC2 Instance Connect Endpoint was created.
  final DateTime? createdAt;

  /// The DNS name of the EC2 Instance Connect Endpoint.
  final String? dnsName;

  /// <p/>
  final String? fipsDnsName;

  /// The Amazon Resource Name (ARN) of the EC2 Instance Connect Endpoint.
  final String? instanceConnectEndpointArn;

  /// The ID of the EC2 Instance Connect Endpoint.
  final String? instanceConnectEndpointId;

  /// The ID of the elastic network interface that Amazon EC2 automatically
  /// created when creating the EC2 Instance Connect Endpoint.
  final List<String>? networkInterfaceIds;

  /// The ID of the Amazon Web Services account that created the EC2 Instance
  /// Connect Endpoint.
  final String? ownerId;

  /// Indicates whether your client's IP address is preserved as the source. The
  /// value is <code>true</code> or <code>false</code>.
  ///
  /// <ul>
  /// <li>
  /// If <code>true</code>, your client's IP address is used when you connect to a
  /// resource.
  /// </li>
  /// <li>
  /// If <code>false</code>, the elastic network interface IP address is used when
  /// you connect to a resource.
  /// </li>
  /// </ul>
  /// Default: <code>true</code>
  final bool? preserveClientIp;

  /// The security groups associated with the endpoint. If you didn't specify a
  /// security group, the default security group for your VPC is associated with
  /// the endpoint.
  final List<String>? securityGroupIds;

  /// The current state of the EC2 Instance Connect Endpoint.
  final Ec2InstanceConnectEndpointState? state;

  /// The message for the current state of the EC2 Instance Connect Endpoint. Can
  /// include a failure message.
  final String? stateMessage;

  /// The ID of the subnet in which the EC2 Instance Connect Endpoint was created.
  final String? subnetId;

  /// The tags assigned to the EC2 Instance Connect Endpoint.
  final List<Tag>? tags;

  /// The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
  final String? vpcId;

  Ec2InstanceConnectEndpoint({
    this.availabilityZone,
    this.createdAt,
    this.dnsName,
    this.fipsDnsName,
    this.instanceConnectEndpointArn,
    this.instanceConnectEndpointId,
    this.networkInterfaceIds,
    this.ownerId,
    this.preserveClientIp,
    this.securityGroupIds,
    this.state,
    this.stateMessage,
    this.subnetId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final createdAt = this.createdAt;
    final dnsName = this.dnsName;
    final fipsDnsName = this.fipsDnsName;
    final instanceConnectEndpointArn = this.instanceConnectEndpointArn;
    final instanceConnectEndpointId = this.instanceConnectEndpointId;
    final networkInterfaceIds = this.networkInterfaceIds;
    final ownerId = this.ownerId;
    final preserveClientIp = this.preserveClientIp;
    final securityGroupIds = this.securityGroupIds;
    final state = this.state;
    final stateMessage = this.stateMessage;
    final subnetId = this.subnetId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (createdAt != null) 'createdAt': iso8601ToJson(createdAt),
      if (dnsName != null) 'dnsName': dnsName,
      if (fipsDnsName != null) 'fipsDnsName': fipsDnsName,
      if (instanceConnectEndpointArn != null)
        'instanceConnectEndpointArn': instanceConnectEndpointArn,
      if (instanceConnectEndpointId != null)
        'instanceConnectEndpointId': instanceConnectEndpointId,
      if (networkInterfaceIds != null)
        'networkInterfaceIdSet': networkInterfaceIds,
      if (ownerId != null) 'ownerId': ownerId,
      if (preserveClientIp != null) 'preserveClientIp': preserveClientIp,
      if (securityGroupIds != null) 'securityGroupIdSet': securityGroupIds,
      if (state != null) 'state': state.value,
      if (stateMessage != null) 'stateMessage': stateMessage,
      if (subnetId != null) 'subnetId': subnetId,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum Ec2InstanceConnectEndpointState {
  createInProgress('create-in-progress'),
  createComplete('create-complete'),
  createFailed('create-failed'),
  deleteInProgress('delete-in-progress'),
  deleteComplete('delete-complete'),
  deleteFailed('delete-failed'),
  ;

  final String value;

  const Ec2InstanceConnectEndpointState(this.value);

  static Ec2InstanceConnectEndpointState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum Ec2InstanceConnectEndpointState'));
}

/// Describes the Elastic Fabric Adapters for the instance type.
class EfaInfo {
  /// The maximum number of Elastic Fabric Adapters for the instance type.
  final int? maximumEfaInterfaces;

  EfaInfo({
    this.maximumEfaInterfaces,
  });

  Map<String, dynamic> toJson() {
    final maximumEfaInterfaces = this.maximumEfaInterfaces;
    return {
      if (maximumEfaInterfaces != null)
        'maximumEfaInterfaces': maximumEfaInterfaces,
    };
  }
}

/// Describes an egress-only internet gateway.
class EgressOnlyInternetGateway {
  /// Information about the attachment of the egress-only internet gateway.
  final List<InternetGatewayAttachment>? attachments;

  /// The ID of the egress-only internet gateway.
  final String? egressOnlyInternetGatewayId;

  /// The tags assigned to the egress-only internet gateway.
  final List<Tag>? tags;

  EgressOnlyInternetGateway({
    this.attachments,
    this.egressOnlyInternetGatewayId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final attachments = this.attachments;
    final egressOnlyInternetGatewayId = this.egressOnlyInternetGatewayId;
    final tags = this.tags;
    return {
      if (attachments != null) 'attachmentSet': attachments,
      if (egressOnlyInternetGatewayId != null)
        'egressOnlyInternetGatewayId': egressOnlyInternetGatewayId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum EkPubKeyFormat {
  der('der'),
  tpmt('tpmt'),
  ;

  final String value;

  const EkPubKeyFormat(this.value);

  static EkPubKeyFormat fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EkPubKeyFormat'));
}

enum EkPubKeyType {
  rsa_2048('rsa-2048'),
  eccSecP384('ecc-sec-p384'),
  ;

  final String value;

  const EkPubKeyType(this.value);

  static EkPubKeyType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EkPubKeyType'));
}

/// <note>
/// Amazon Elastic Graphics reached end of life on January 8, 2024. For
/// workloads that require graphics acceleration, we recommend that you use
/// Amazon EC2 G4ad, G4dn, or G5 instances.
/// </note>
/// Describes the association between an instance and an Elastic Graphics
/// accelerator.
class ElasticGpuAssociation {
  /// The ID of the association.
  final String? elasticGpuAssociationId;

  /// The state of the association between the instance and the Elastic Graphics
  /// accelerator.
  final String? elasticGpuAssociationState;

  /// The time the Elastic Graphics accelerator was associated with the instance.
  final String? elasticGpuAssociationTime;

  /// The ID of the Elastic Graphics accelerator.
  final String? elasticGpuId;

  ElasticGpuAssociation({
    this.elasticGpuAssociationId,
    this.elasticGpuAssociationState,
    this.elasticGpuAssociationTime,
    this.elasticGpuId,
  });

  Map<String, dynamic> toJson() {
    final elasticGpuAssociationId = this.elasticGpuAssociationId;
    final elasticGpuAssociationState = this.elasticGpuAssociationState;
    final elasticGpuAssociationTime = this.elasticGpuAssociationTime;
    final elasticGpuId = this.elasticGpuId;
    return {
      if (elasticGpuAssociationId != null)
        'elasticGpuAssociationId': elasticGpuAssociationId,
      if (elasticGpuAssociationState != null)
        'elasticGpuAssociationState': elasticGpuAssociationState,
      if (elasticGpuAssociationTime != null)
        'elasticGpuAssociationTime': elasticGpuAssociationTime,
      if (elasticGpuId != null) 'elasticGpuId': elasticGpuId,
    };
  }
}

/// <note>
/// Amazon Elastic Graphics reached end of life on January 8, 2024. For
/// workloads that require graphics acceleration, we recommend that you use
/// Amazon EC2 G4ad, G4dn, or G5 instances.
/// </note>
/// Describes the status of an Elastic Graphics accelerator.
class ElasticGpuHealth {
  /// The health status.
  final ElasticGpuStatus? status;

  ElasticGpuHealth({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'status': status.value,
    };
  }
}

/// <note>
/// Amazon Elastic Graphics reached end of life on January 8, 2024. For
/// workloads that require graphics acceleration, we recommend that you use
/// Amazon EC2 G4ad, G4dn, or G5 instances.
/// </note>
/// A specification for an Elastic Graphics accelerator.
class ElasticGpuSpecification {
  /// The type of Elastic Graphics accelerator. For more information about the
  /// values to specify for <code>Type</code>, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics">Elastic
  /// Graphics Basics</a>, specifically the Elastic Graphics accelerator column,
  /// in the <i>Amazon Elastic Compute Cloud User Guide for Windows Instances</i>.
  final String type;

  ElasticGpuSpecification({
    required this.type,
  });

  Map<String, dynamic> toJson() {
    final type = this.type;
    return {
      'Type': type,
    };
  }
}

/// Deprecated.
/// <note>
/// Amazon Elastic Graphics reached end of life on January 8, 2024. For
/// workloads that require graphics acceleration, we recommend that you use
/// Amazon EC2 G4ad, G4dn, or G5 instances.
/// </note>
class ElasticGpuSpecificationResponse {
  /// Deprecated.
  /// <note>
  /// Amazon Elastic Graphics reached end of life on January 8, 2024. For
  /// workloads that require graphics acceleration, we recommend that you use
  /// Amazon EC2 G4ad, G4dn, or G5 instances.
  /// </note>
  final String? type;

  ElasticGpuSpecificationResponse({
    this.type,
  });

  Map<String, dynamic> toJson() {
    final type = this.type;
    return {
      if (type != null) 'type': type,
    };
  }
}

enum ElasticGpuState {
  attached('ATTACHED'),
  ;

  final String value;

  const ElasticGpuState(this.value);

  static ElasticGpuState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ElasticGpuState'));
}

enum ElasticGpuStatus {
  ok('OK'),
  impaired('IMPAIRED'),
  ;

  final String value;

  const ElasticGpuStatus(this.value);

  static ElasticGpuStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ElasticGpuStatus'));
}

/// <note>
/// Amazon Elastic Graphics reached end of life on January 8, 2024. For
/// workloads that require graphics acceleration, we recommend that you use
/// Amazon EC2 G4ad, G4dn, or G5 instances.
/// </note>
/// Describes an Elastic Graphics accelerator.
class ElasticGpus {
  /// The Availability Zone in the which the Elastic Graphics accelerator resides.
  final String? availabilityZone;

  /// The status of the Elastic Graphics accelerator.
  final ElasticGpuHealth? elasticGpuHealth;

  /// The ID of the Elastic Graphics accelerator.
  final String? elasticGpuId;

  /// The state of the Elastic Graphics accelerator.
  final ElasticGpuState? elasticGpuState;

  /// The type of Elastic Graphics accelerator.
  final String? elasticGpuType;

  /// The ID of the instance to which the Elastic Graphics accelerator is
  /// attached.
  final String? instanceId;

  /// The tags assigned to the Elastic Graphics accelerator.
  final List<Tag>? tags;

  ElasticGpus({
    this.availabilityZone,
    this.elasticGpuHealth,
    this.elasticGpuId,
    this.elasticGpuState,
    this.elasticGpuType,
    this.instanceId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final elasticGpuHealth = this.elasticGpuHealth;
    final elasticGpuId = this.elasticGpuId;
    final elasticGpuState = this.elasticGpuState;
    final elasticGpuType = this.elasticGpuType;
    final instanceId = this.instanceId;
    final tags = this.tags;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (elasticGpuHealth != null) 'elasticGpuHealth': elasticGpuHealth,
      if (elasticGpuId != null) 'elasticGpuId': elasticGpuId,
      if (elasticGpuState != null) 'elasticGpuState': elasticGpuState.value,
      if (elasticGpuType != null) 'elasticGpuType': elasticGpuType,
      if (instanceId != null) 'instanceId': instanceId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an elastic inference accelerator.
class ElasticInferenceAccelerator {
  /// The type of elastic inference accelerator. The possible values are
  /// <code>eia1.medium</code>, <code>eia1.large</code>, <code>eia1.xlarge</code>,
  /// <code>eia2.medium</code>, <code>eia2.large</code>, and
  /// <code>eia2.xlarge</code>.
  final String type;

  /// The number of elastic inference accelerators to attach to the instance.
  ///
  /// Default: 1
  final int? count;

  ElasticInferenceAccelerator({
    required this.type,
    this.count,
  });

  Map<String, dynamic> toJson() {
    final type = this.type;
    final count = this.count;
    return {
      'Type': type,
      if (count != null) 'Count': count,
    };
  }
}

/// Describes the association between an instance and an elastic inference
/// accelerator.
class ElasticInferenceAcceleratorAssociation {
  /// The Amazon Resource Name (ARN) of the elastic inference accelerator.
  final String? elasticInferenceAcceleratorArn;

  /// The ID of the association.
  final String? elasticInferenceAcceleratorAssociationId;

  /// The state of the elastic inference accelerator.
  final String? elasticInferenceAcceleratorAssociationState;

  /// The time at which the elastic inference accelerator is associated with an
  /// instance.
  final DateTime? elasticInferenceAcceleratorAssociationTime;

  ElasticInferenceAcceleratorAssociation({
    this.elasticInferenceAcceleratorArn,
    this.elasticInferenceAcceleratorAssociationId,
    this.elasticInferenceAcceleratorAssociationState,
    this.elasticInferenceAcceleratorAssociationTime,
  });

  Map<String, dynamic> toJson() {
    final elasticInferenceAcceleratorArn = this.elasticInferenceAcceleratorArn;
    final elasticInferenceAcceleratorAssociationId =
        this.elasticInferenceAcceleratorAssociationId;
    final elasticInferenceAcceleratorAssociationState =
        this.elasticInferenceAcceleratorAssociationState;
    final elasticInferenceAcceleratorAssociationTime =
        this.elasticInferenceAcceleratorAssociationTime;
    return {
      if (elasticInferenceAcceleratorArn != null)
        'elasticInferenceAcceleratorArn': elasticInferenceAcceleratorArn,
      if (elasticInferenceAcceleratorAssociationId != null)
        'elasticInferenceAcceleratorAssociationId':
            elasticInferenceAcceleratorAssociationId,
      if (elasticInferenceAcceleratorAssociationState != null)
        'elasticInferenceAcceleratorAssociationState':
            elasticInferenceAcceleratorAssociationState,
      if (elasticInferenceAcceleratorAssociationTime != null)
        'elasticInferenceAcceleratorAssociationTime':
            iso8601ToJson(elasticInferenceAcceleratorAssociationTime),
    };
  }
}

/// ENA Express uses Amazon Web Services Scalable Reliable Datagram (SRD)
/// technology to increase the maximum bandwidth used per stream and minimize
/// tail latency of network traffic between EC2 instances. With ENA Express, you
/// can communicate between two EC2 instances in the same subnet within the same
/// account, or in different accounts. Both sending and receiving instances must
/// have ENA Express enabled.
///
/// To improve the reliability of network packet delivery, ENA Express reorders
/// network packets on the receiving end by default. However, some UDP-based
/// applications are designed to handle network packets that are out of order to
/// reduce the overhead for packet delivery at the network layer. When ENA
/// Express is enabled, you can specify whether UDP network traffic uses it.
class EnaSrdSpecification {
  /// Indicates whether ENA Express is enabled for the network interface.
  final bool? enaSrdEnabled;

  /// Configures ENA Express for UDP network traffic.
  final EnaSrdUdpSpecification? enaSrdUdpSpecification;

  EnaSrdSpecification({
    this.enaSrdEnabled,
    this.enaSrdUdpSpecification,
  });

  Map<String, dynamic> toJson() {
    final enaSrdEnabled = this.enaSrdEnabled;
    final enaSrdUdpSpecification = this.enaSrdUdpSpecification;
    return {
      if (enaSrdEnabled != null) 'EnaSrdEnabled': enaSrdEnabled,
      if (enaSrdUdpSpecification != null)
        'EnaSrdUdpSpecification': enaSrdUdpSpecification,
    };
  }
}

/// Launch instances with ENA Express settings configured from your launch
/// template.
class EnaSrdSpecificationRequest {
  /// Specifies whether ENA Express is enabled for the network interface when you
  /// launch an instance from your launch template.
  final bool? enaSrdEnabled;

  /// Contains ENA Express settings for UDP network traffic in your launch
  /// template.
  final EnaSrdUdpSpecificationRequest? enaSrdUdpSpecification;

  EnaSrdSpecificationRequest({
    this.enaSrdEnabled,
    this.enaSrdUdpSpecification,
  });

  Map<String, dynamic> toJson() {
    final enaSrdEnabled = this.enaSrdEnabled;
    final enaSrdUdpSpecification = this.enaSrdUdpSpecification;
    return {
      if (enaSrdEnabled != null) 'EnaSrdEnabled': enaSrdEnabled,
      if (enaSrdUdpSpecification != null)
        'EnaSrdUdpSpecification': enaSrdUdpSpecification,
    };
  }
}

/// ENA Express is compatible with both TCP and UDP transport protocols. When
/// it's enabled, TCP traffic automatically uses it. However, some UDP-based
/// applications are designed to handle network packets that are out of order,
/// without a need for retransmission, such as live video broadcasting or other
/// near-real-time applications. For UDP traffic, you can specify whether to use
/// ENA Express, based on your application environment needs.
class EnaSrdUdpSpecification {
  /// Indicates whether UDP traffic to and from the instance uses ENA Express. To
  /// specify this setting, you must first enable ENA Express.
  final bool? enaSrdUdpEnabled;

  EnaSrdUdpSpecification({
    this.enaSrdUdpEnabled,
  });

  Map<String, dynamic> toJson() {
    final enaSrdUdpEnabled = this.enaSrdUdpEnabled;
    return {
      if (enaSrdUdpEnabled != null) 'EnaSrdUdpEnabled': enaSrdUdpEnabled,
    };
  }
}

/// Configures ENA Express for UDP network traffic from your launch template.
class EnaSrdUdpSpecificationRequest {
  /// Indicates whether UDP traffic uses ENA Express for your instance. To ensure
  /// that UDP traffic can use ENA Express when you launch an instance, you must
  /// also set <b>EnaSrdEnabled</b> in the <b>EnaSrdSpecificationRequest</b> to
  /// <code>true</code> in your launch template.
  final bool? enaSrdUdpEnabled;

  EnaSrdUdpSpecificationRequest({
    this.enaSrdUdpEnabled,
  });

  Map<String, dynamic> toJson() {
    final enaSrdUdpEnabled = this.enaSrdUdpEnabled;
    return {
      if (enaSrdUdpEnabled != null) 'EnaSrdUdpEnabled': enaSrdUdpEnabled,
    };
  }
}

enum EnaSupport {
  unsupported('unsupported'),
  supported('supported'),
  required('required'),
  ;

  final String value;

  const EnaSupport(this.value);

  static EnaSupport fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum EnaSupport'));
}

class EnableAddressTransferResult {
  /// An Elastic IP address transfer.
  final AddressTransfer? addressTransfer;

  EnableAddressTransferResult({
    this.addressTransfer,
  });

  Map<String, dynamic> toJson() {
    final addressTransfer = this.addressTransfer;
    return {
      if (addressTransfer != null) 'addressTransfer': addressTransfer,
    };
  }
}

class EnableAwsNetworkPerformanceMetricSubscriptionResult {
  /// Indicates whether the subscribe action was successful.
  final bool? output;

  EnableAwsNetworkPerformanceMetricSubscriptionResult({
    this.output,
  });

  Map<String, dynamic> toJson() {
    final output = this.output;
    return {
      if (output != null) 'output': output,
    };
  }
}

class EnableEbsEncryptionByDefaultResult {
  /// The updated status of encryption by default.
  final bool? ebsEncryptionByDefault;

  EnableEbsEncryptionByDefaultResult({
    this.ebsEncryptionByDefault,
  });

  Map<String, dynamic> toJson() {
    final ebsEncryptionByDefault = this.ebsEncryptionByDefault;
    return {
      if (ebsEncryptionByDefault != null)
        'ebsEncryptionByDefault': ebsEncryptionByDefault,
    };
  }
}

class EnableFastLaunchResult {
  /// The image ID that identifies the AMI for which Windows fast launch was
  /// enabled.
  final String? imageId;

  /// The launch template that is used when launching Windows instances from
  /// pre-provisioned snapshots.
  final FastLaunchLaunchTemplateSpecificationResponse? launchTemplate;

  /// The maximum number of instances that Amazon EC2 can launch at the same time
  /// to create pre-provisioned snapshots for Windows fast launch.
  final int? maxParallelLaunches;

  /// The owner ID for the AMI for which Windows fast launch was enabled.
  final String? ownerId;

  /// The type of resource that was defined for pre-provisioning the AMI for
  /// Windows fast launch.
  final FastLaunchResourceType? resourceType;

  /// Settings to create and manage the pre-provisioned snapshots that Amazon EC2
  /// uses for faster launches from the Windows AMI. This property is returned
  /// when the associated <code>resourceType</code> is <code>snapshot</code>.
  final FastLaunchSnapshotConfigurationResponse? snapshotConfiguration;

  /// The current state of Windows fast launch for the specified AMI.
  final FastLaunchStateCode? state;

  /// The reason that the state changed for Windows fast launch for the AMI.
  final String? stateTransitionReason;

  /// The time that the state changed for Windows fast launch for the AMI.
  final DateTime? stateTransitionTime;

  EnableFastLaunchResult({
    this.imageId,
    this.launchTemplate,
    this.maxParallelLaunches,
    this.ownerId,
    this.resourceType,
    this.snapshotConfiguration,
    this.state,
    this.stateTransitionReason,
    this.stateTransitionTime,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    final launchTemplate = this.launchTemplate;
    final maxParallelLaunches = this.maxParallelLaunches;
    final ownerId = this.ownerId;
    final resourceType = this.resourceType;
    final snapshotConfiguration = this.snapshotConfiguration;
    final state = this.state;
    final stateTransitionReason = this.stateTransitionReason;
    final stateTransitionTime = this.stateTransitionTime;
    return {
      if (imageId != null) 'imageId': imageId,
      if (launchTemplate != null) 'launchTemplate': launchTemplate,
      if (maxParallelLaunches != null)
        'maxParallelLaunches': maxParallelLaunches,
      if (ownerId != null) 'ownerId': ownerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (snapshotConfiguration != null)
        'snapshotConfiguration': snapshotConfiguration,
      if (state != null) 'state': state.value,
      if (stateTransitionReason != null)
        'stateTransitionReason': stateTransitionReason,
      if (stateTransitionTime != null)
        'stateTransitionTime': iso8601ToJson(stateTransitionTime),
    };
  }
}

/// Contains information about the errors that occurred when enabling fast
/// snapshot restores.
class EnableFastSnapshotRestoreErrorItem {
  /// The errors.
  final List<EnableFastSnapshotRestoreStateErrorItem>?
      fastSnapshotRestoreStateErrors;

  /// The ID of the snapshot.
  final String? snapshotId;

  EnableFastSnapshotRestoreErrorItem({
    this.fastSnapshotRestoreStateErrors,
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final fastSnapshotRestoreStateErrors = this.fastSnapshotRestoreStateErrors;
    final snapshotId = this.snapshotId;
    return {
      if (fastSnapshotRestoreStateErrors != null)
        'fastSnapshotRestoreStateErrorSet': fastSnapshotRestoreStateErrors,
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

/// Describes an error that occurred when enabling fast snapshot restores.
class EnableFastSnapshotRestoreStateError {
  /// The error code.
  final String? code;

  /// The error message.
  final String? message;

  EnableFastSnapshotRestoreStateError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

/// Contains information about an error that occurred when enabling fast
/// snapshot restores.
class EnableFastSnapshotRestoreStateErrorItem {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The error.
  final EnableFastSnapshotRestoreStateError? error;

  EnableFastSnapshotRestoreStateErrorItem({
    this.availabilityZone,
    this.error,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final error = this.error;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (error != null) 'error': error,
    };
  }
}

/// Describes fast snapshot restores that were successfully enabled.
class EnableFastSnapshotRestoreSuccessItem {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The time at which fast snapshot restores entered the <code>disabled</code>
  /// state.
  final DateTime? disabledTime;

  /// The time at which fast snapshot restores entered the <code>disabling</code>
  /// state.
  final DateTime? disablingTime;

  /// The time at which fast snapshot restores entered the <code>enabled</code>
  /// state.
  final DateTime? enabledTime;

  /// The time at which fast snapshot restores entered the <code>enabling</code>
  /// state.
  final DateTime? enablingTime;

  /// The time at which fast snapshot restores entered the <code>optimizing</code>
  /// state.
  final DateTime? optimizingTime;

  /// The Amazon Web Services owner alias that enabled fast snapshot restores on
  /// the snapshot. This is intended for future use.
  final String? ownerAlias;

  /// The ID of the Amazon Web Services account that enabled fast snapshot
  /// restores on the snapshot.
  final String? ownerId;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The state of fast snapshot restores.
  final FastSnapshotRestoreStateCode? state;

  /// The reason for the state transition. The possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>Client.UserInitiated</code> - The state successfully transitioned to
  /// <code>enabling</code> or <code>disabling</code>.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiated - Lifecycle state transition</code> - The state
  /// successfully transitioned to <code>optimizing</code>, <code>enabled</code>,
  /// or <code>disabled</code>.
  /// </li>
  /// </ul>
  final String? stateTransitionReason;

  EnableFastSnapshotRestoreSuccessItem({
    this.availabilityZone,
    this.disabledTime,
    this.disablingTime,
    this.enabledTime,
    this.enablingTime,
    this.optimizingTime,
    this.ownerAlias,
    this.ownerId,
    this.snapshotId,
    this.state,
    this.stateTransitionReason,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final disabledTime = this.disabledTime;
    final disablingTime = this.disablingTime;
    final enabledTime = this.enabledTime;
    final enablingTime = this.enablingTime;
    final optimizingTime = this.optimizingTime;
    final ownerAlias = this.ownerAlias;
    final ownerId = this.ownerId;
    final snapshotId = this.snapshotId;
    final state = this.state;
    final stateTransitionReason = this.stateTransitionReason;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (disabledTime != null) 'disabledTime': iso8601ToJson(disabledTime),
      if (disablingTime != null) 'disablingTime': iso8601ToJson(disablingTime),
      if (enabledTime != null) 'enabledTime': iso8601ToJson(enabledTime),
      if (enablingTime != null) 'enablingTime': iso8601ToJson(enablingTime),
      if (optimizingTime != null)
        'optimizingTime': iso8601ToJson(optimizingTime),
      if (ownerAlias != null) 'ownerAlias': ownerAlias,
      if (ownerId != null) 'ownerId': ownerId,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (state != null) 'state': state.value,
      if (stateTransitionReason != null)
        'stateTransitionReason': stateTransitionReason,
    };
  }
}

class EnableFastSnapshotRestoresResult {
  /// Information about the snapshots for which fast snapshot restores were
  /// successfully enabled.
  final List<EnableFastSnapshotRestoreSuccessItem>? successful;

  /// Information about the snapshots for which fast snapshot restores could not
  /// be enabled.
  final List<EnableFastSnapshotRestoreErrorItem>? unsuccessful;

  EnableFastSnapshotRestoresResult({
    this.successful,
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final successful = this.successful;
    final unsuccessful = this.unsuccessful;
    return {
      if (successful != null) 'successful': successful,
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class EnableImageBlockPublicAccessResult {
  /// Returns <code>block-new-sharing</code> if the request succeeds; otherwise,
  /// it returns an error.
  final ImageBlockPublicAccessEnabledState? imageBlockPublicAccessState;

  EnableImageBlockPublicAccessResult({
    this.imageBlockPublicAccessState,
  });

  Map<String, dynamic> toJson() {
    final imageBlockPublicAccessState = this.imageBlockPublicAccessState;
    return {
      if (imageBlockPublicAccessState != null)
        'imageBlockPublicAccessState': imageBlockPublicAccessState.value,
    };
  }
}

class EnableImageDeprecationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  EnableImageDeprecationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class EnableImageDeregistrationProtectionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final String? returnValue;

  EnableImageDeregistrationProtectionResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class EnableImageResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  EnableImageResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class EnableIpamOrganizationAdminAccountResult {
  /// The result of enabling the IPAM account.
  final bool? success;

  EnableIpamOrganizationAdminAccountResult({
    this.success,
  });

  Map<String, dynamic> toJson() {
    final success = this.success;
    return {
      if (success != null) 'success': success,
    };
  }
}

class EnableReachabilityAnalyzerOrganizationSharingResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  EnableReachabilityAnalyzerOrganizationSharingResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'returnValue': returnValue,
    };
  }
}

class EnableSerialConsoleAccessResult {
  /// If <code>true</code>, access to the EC2 serial console of all instances is
  /// enabled for your account. If <code>false</code>, access to the EC2 serial
  /// console of all instances is disabled for your account.
  final bool? serialConsoleAccessEnabled;

  EnableSerialConsoleAccessResult({
    this.serialConsoleAccessEnabled,
  });

  Map<String, dynamic> toJson() {
    final serialConsoleAccessEnabled = this.serialConsoleAccessEnabled;
    return {
      if (serialConsoleAccessEnabled != null)
        'serialConsoleAccessEnabled': serialConsoleAccessEnabled,
    };
  }
}

class EnableSnapshotBlockPublicAccessResult {
  /// The state of block public access for snapshots for the account and Region.
  /// Returns either <code>block-all-sharing</code> or
  /// <code>block-new-sharing</code> if the request succeeds.
  final SnapshotBlockPublicAccessState? state;

  EnableSnapshotBlockPublicAccessResult({
    this.state,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    return {
      if (state != null) 'state': state.value,
    };
  }
}

class EnableTransitGatewayRouteTablePropagationResult {
  /// Information about route propagation.
  final TransitGatewayPropagation? propagation;

  EnableTransitGatewayRouteTablePropagationResult({
    this.propagation,
  });

  Map<String, dynamic> toJson() {
    final propagation = this.propagation;
    return {
      if (propagation != null) 'propagation': propagation,
    };
  }
}

class EnableVpcClassicLinkDnsSupportResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  EnableVpcClassicLinkDnsSupportResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class EnableVpcClassicLinkResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  EnableVpcClassicLinkResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

/// Indicates whether the instance is enabled for Amazon Web Services Nitro
/// Enclaves.
class EnclaveOptions {
  /// If this parameter is set to <code>true</code>, the instance is enabled for
  /// Amazon Web Services Nitro Enclaves; otherwise, it is not enabled for Amazon
  /// Web Services Nitro Enclaves.
  final bool? enabled;

  EnclaveOptions({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'enabled': enabled,
    };
  }
}

/// Indicates whether the instance is enabled for Amazon Web Services Nitro
/// Enclaves. For more information, see <a
/// href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html">
/// What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web
/// Services Nitro Enclaves User Guide</i>.
class EnclaveOptionsRequest {
  /// To enable the instance for Amazon Web Services Nitro Enclaves, set this
  /// parameter to <code>true</code>.
  final bool? enabled;

  EnclaveOptionsRequest({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

enum EndDateType {
  unlimited('unlimited'),
  limited('limited'),
  ;

  final String value;

  const EndDateType(this.value);

  static EndDateType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum EndDateType'));
}

enum EphemeralNvmeSupport {
  unsupported('unsupported'),
  supported('supported'),
  required('required'),
  ;

  final String value;

  const EphemeralNvmeSupport(this.value);

  static EphemeralNvmeSupport fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum EphemeralNvmeSupport'));
}

enum EventCode {
  instanceReboot('instance-reboot'),
  systemReboot('system-reboot'),
  systemMaintenance('system-maintenance'),
  instanceRetirement('instance-retirement'),
  instanceStop('instance-stop'),
  ;

  final String value;

  const EventCode(this.value);

  static EventCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum EventCode'));
}

/// Describes an EC2 Fleet or Spot Fleet event.
class EventInformation {
  /// The description of the event.
  final String? eventDescription;

  /// The event.
  ///
  /// <code>error</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>iamFleetRoleInvalid</code> - The EC2 Fleet or Spot Fleet does not have
  /// the required permissions either to launch or terminate an instance.
  /// </li>
  /// <li>
  /// <code>allLaunchSpecsTemporarilyBlacklisted</code> - None of the
  /// configurations are valid, and several attempts to launch instances have
  /// failed. For more information, see the description of the event.
  /// </li>
  /// <li>
  /// <code>spotInstanceCountLimitExceeded</code> - You've reached the limit on
  /// the number of Spot Instances that you can launch.
  /// </li>
  /// <li>
  /// <code>spotFleetRequestConfigurationInvalid</code> - The configuration is not
  /// valid. For more information, see the description of the event.
  /// </li>
  /// </ul>
  /// <code>fleetRequestChange</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The EC2 Fleet or Spot Fleet request has been validated
  /// and Amazon EC2 is attempting to maintain the target number of running
  /// instances.
  /// </li>
  /// <li>
  /// <code>deleted</code> (EC2 Fleet) / <code>cancelled</code> (Spot Fleet) - The
  /// EC2 Fleet is deleted or the Spot Fleet request is canceled and has no
  /// running instances. The EC2 Fleet or Spot Fleet will be deleted two days
  /// after its instances are terminated.
  /// </li>
  /// <li>
  /// <code>deleted_running</code> (EC2 Fleet) / <code>cancelled_running</code>
  /// (Spot Fleet) - The EC2 Fleet is deleted or the Spot Fleet request is
  /// canceled and does not launch additional instances. Its existing instances
  /// continue to run until they are interrupted or terminated. The request
  /// remains in this state until all instances are interrupted or terminated.
  /// </li>
  /// <li>
  /// <code>deleted_terminating</code> (EC2 Fleet) /
  /// <code>cancelled_terminating</code> (Spot Fleet) - The EC2 Fleet is deleted
  /// or the Spot Fleet request is canceled and its instances are terminating. The
  /// request remains in this state until all instances are terminated.
  /// </li>
  /// <li>
  /// <code>expired</code> - The EC2 Fleet or Spot Fleet request has expired. If
  /// the request was created with <code>TerminateInstancesWithExpiration</code>
  /// set, a subsequent <code>terminated</code> event indicates that the instances
  /// are terminated.
  /// </li>
  /// <li>
  /// <code>modify_in_progress</code> - The EC2 Fleet or Spot Fleet request is
  /// being modified. The request remains in this state until the modification is
  /// fully processed.
  /// </li>
  /// <li>
  /// <code>modify_succeeded</code> - The EC2 Fleet or Spot Fleet request was
  /// modified.
  /// </li>
  /// <li>
  /// <code>submitted</code> - The EC2 Fleet or Spot Fleet request is being
  /// evaluated and Amazon EC2 is preparing to launch the target number of
  /// instances.
  /// </li>
  /// <li>
  /// <code>progress</code> - The EC2 Fleet or Spot Fleet request is in the
  /// process of being fulfilled.
  /// </li>
  /// </ul>
  /// <code>instanceChange</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>launched</code> - A new instance was launched.
  /// </li>
  /// <li>
  /// <code>terminated</code> - An instance was terminated by the user.
  /// </li>
  /// <li>
  /// <code>termination_notified</code> - An instance termination notification was
  /// sent when a Spot Instance was terminated by Amazon EC2 during scale-down,
  /// when the target capacity of the fleet was modified down, for example, from a
  /// target capacity of 4 to a target capacity of 3.
  /// </li>
  /// </ul>
  /// <code>Information</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>fleetProgressHalted</code> - The price in every launch specification
  /// is not valid because it is below the Spot price (all the launch
  /// specifications have produced <code>launchSpecUnusable</code> events). A
  /// launch specification might become valid if the Spot price changes.
  /// </li>
  /// <li>
  /// <code>launchSpecTemporarilyBlacklisted</code> - The configuration is not
  /// valid and several attempts to launch instances have failed. For more
  /// information, see the description of the event.
  /// </li>
  /// <li>
  /// <code>launchSpecUnusable</code> - The price in a launch specification is not
  /// valid because it is below the Spot price.
  /// </li>
  /// <li>
  /// <code>registerWithLoadBalancersFailed</code> - An attempt to register
  /// instances with load balancers failed. For more information, see the
  /// description of the event.
  /// </li>
  /// </ul>
  final String? eventSubType;

  /// The ID of the instance. This information is available only for
  /// <code>instanceChange</code> events.
  final String? instanceId;

  EventInformation({
    this.eventDescription,
    this.eventSubType,
    this.instanceId,
  });

  Map<String, dynamic> toJson() {
    final eventDescription = this.eventDescription;
    final eventSubType = this.eventSubType;
    final instanceId = this.instanceId;
    return {
      if (eventDescription != null) 'eventDescription': eventDescription,
      if (eventSubType != null) 'eventSubType': eventSubType,
      if (instanceId != null) 'instanceId': instanceId,
    };
  }
}

enum EventType {
  instanceChange('instanceChange'),
  fleetRequestChange('fleetRequestChange'),
  error('error'),
  information('information'),
  ;

  final String value;

  const EventType(this.value);

  static EventType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum EventType'));
}

enum ExcessCapacityTerminationPolicy {
  noTermination('noTermination'),
  $default('default'),
  ;

  final String value;

  const ExcessCapacityTerminationPolicy(this.value);

  static ExcessCapacityTerminationPolicy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ExcessCapacityTerminationPolicy'));
}

/// Describes an explanation code for an unreachable path. For more information,
/// see <a
/// href="https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html">Reachability
/// Analyzer explanation codes</a>.
class Explanation {
  /// The network ACL.
  final AnalysisComponent? acl;

  /// The network ACL rule.
  final AnalysisAclRule? aclRule;

  /// The IPv4 address, in CIDR notation.
  final String? address;

  /// The IPv4 addresses, in CIDR notation.
  final List<String>? addresses;

  /// The resource to which the component is attached.
  final AnalysisComponent? attachedTo;

  /// The Availability Zones.
  final List<String>? availabilityZones;

  /// The CIDR ranges.
  final List<String>? cidrs;

  /// The listener for a Classic Load Balancer.
  final AnalysisLoadBalancerListener? classicLoadBalancerListener;

  /// The component.
  final AnalysisComponent? component;

  /// The Amazon Web Services account for the component.
  final String? componentAccount;

  /// The Region for the component.
  final String? componentRegion;

  /// The customer gateway.
  final AnalysisComponent? customerGateway;

  /// The destination.
  final AnalysisComponent? destination;

  /// The destination VPC.
  final AnalysisComponent? destinationVpc;

  /// The direction. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// egress
  /// </li>
  /// <li>
  /// ingress
  /// </li>
  /// </ul>
  final String? direction;

  /// The load balancer listener.
  final AnalysisComponent? elasticLoadBalancerListener;

  /// The explanation code.
  final String? explanationCode;

  /// The Network Firewall stateful rule.
  final FirewallStatefulRule? firewallStatefulRule;

  /// The Network Firewall stateless rule.
  final FirewallStatelessRule? firewallStatelessRule;

  /// The route table.
  final AnalysisComponent? ingressRouteTable;

  /// The internet gateway.
  final AnalysisComponent? internetGateway;

  /// The Amazon Resource Name (ARN) of the load balancer.
  final String? loadBalancerArn;

  /// The listener port of the load balancer.
  final int? loadBalancerListenerPort;

  /// The target.
  final AnalysisLoadBalancerTarget? loadBalancerTarget;

  /// The target group.
  final AnalysisComponent? loadBalancerTargetGroup;

  /// The target groups.
  final List<AnalysisComponent>? loadBalancerTargetGroups;

  /// The target port.
  final int? loadBalancerTargetPort;

  /// The missing component.
  final String? missingComponent;

  /// The NAT gateway.
  final AnalysisComponent? natGateway;

  /// The network interface.
  final AnalysisComponent? networkInterface;

  /// The packet field.
  final String? packetField;

  /// The port.
  final int? port;

  /// The port ranges.
  final List<PortRange>? portRanges;

  /// The prefix list.
  final AnalysisComponent? prefixList;

  /// The protocols.
  final List<String>? protocols;

  /// The route table.
  final AnalysisComponent? routeTable;

  /// The route table route.
  final AnalysisRouteTableRoute? routeTableRoute;

  /// The security group.
  final AnalysisComponent? securityGroup;

  /// The security group rule.
  final AnalysisSecurityGroupRule? securityGroupRule;

  /// The security groups.
  final List<AnalysisComponent>? securityGroups;

  /// The source VPC.
  final AnalysisComponent? sourceVpc;

  /// The state.
  final String? state;

  /// The subnet.
  final AnalysisComponent? subnet;

  /// The route table for the subnet.
  final AnalysisComponent? subnetRouteTable;

  /// The transit gateway.
  final AnalysisComponent? transitGateway;

  /// The transit gateway attachment.
  final AnalysisComponent? transitGatewayAttachment;

  /// The transit gateway route table.
  final AnalysisComponent? transitGatewayRouteTable;

  /// The transit gateway route table route.
  final TransitGatewayRouteTableRoute? transitGatewayRouteTableRoute;

  /// The component VPC.
  final AnalysisComponent? vpc;

  /// The VPC endpoint.
  final AnalysisComponent? vpcEndpoint;

  /// The VPC peering connection.
  final AnalysisComponent? vpcPeeringConnection;

  /// The VPN connection.
  final AnalysisComponent? vpnConnection;

  /// The VPN gateway.
  final AnalysisComponent? vpnGateway;

  Explanation({
    this.acl,
    this.aclRule,
    this.address,
    this.addresses,
    this.attachedTo,
    this.availabilityZones,
    this.cidrs,
    this.classicLoadBalancerListener,
    this.component,
    this.componentAccount,
    this.componentRegion,
    this.customerGateway,
    this.destination,
    this.destinationVpc,
    this.direction,
    this.elasticLoadBalancerListener,
    this.explanationCode,
    this.firewallStatefulRule,
    this.firewallStatelessRule,
    this.ingressRouteTable,
    this.internetGateway,
    this.loadBalancerArn,
    this.loadBalancerListenerPort,
    this.loadBalancerTarget,
    this.loadBalancerTargetGroup,
    this.loadBalancerTargetGroups,
    this.loadBalancerTargetPort,
    this.missingComponent,
    this.natGateway,
    this.networkInterface,
    this.packetField,
    this.port,
    this.portRanges,
    this.prefixList,
    this.protocols,
    this.routeTable,
    this.routeTableRoute,
    this.securityGroup,
    this.securityGroupRule,
    this.securityGroups,
    this.sourceVpc,
    this.state,
    this.subnet,
    this.subnetRouteTable,
    this.transitGateway,
    this.transitGatewayAttachment,
    this.transitGatewayRouteTable,
    this.transitGatewayRouteTableRoute,
    this.vpc,
    this.vpcEndpoint,
    this.vpcPeeringConnection,
    this.vpnConnection,
    this.vpnGateway,
  });

  Map<String, dynamic> toJson() {
    final acl = this.acl;
    final aclRule = this.aclRule;
    final address = this.address;
    final addresses = this.addresses;
    final attachedTo = this.attachedTo;
    final availabilityZones = this.availabilityZones;
    final cidrs = this.cidrs;
    final classicLoadBalancerListener = this.classicLoadBalancerListener;
    final component = this.component;
    final componentAccount = this.componentAccount;
    final componentRegion = this.componentRegion;
    final customerGateway = this.customerGateway;
    final destination = this.destination;
    final destinationVpc = this.destinationVpc;
    final direction = this.direction;
    final elasticLoadBalancerListener = this.elasticLoadBalancerListener;
    final explanationCode = this.explanationCode;
    final firewallStatefulRule = this.firewallStatefulRule;
    final firewallStatelessRule = this.firewallStatelessRule;
    final ingressRouteTable = this.ingressRouteTable;
    final internetGateway = this.internetGateway;
    final loadBalancerArn = this.loadBalancerArn;
    final loadBalancerListenerPort = this.loadBalancerListenerPort;
    final loadBalancerTarget = this.loadBalancerTarget;
    final loadBalancerTargetGroup = this.loadBalancerTargetGroup;
    final loadBalancerTargetGroups = this.loadBalancerTargetGroups;
    final loadBalancerTargetPort = this.loadBalancerTargetPort;
    final missingComponent = this.missingComponent;
    final natGateway = this.natGateway;
    final networkInterface = this.networkInterface;
    final packetField = this.packetField;
    final port = this.port;
    final portRanges = this.portRanges;
    final prefixList = this.prefixList;
    final protocols = this.protocols;
    final routeTable = this.routeTable;
    final routeTableRoute = this.routeTableRoute;
    final securityGroup = this.securityGroup;
    final securityGroupRule = this.securityGroupRule;
    final securityGroups = this.securityGroups;
    final sourceVpc = this.sourceVpc;
    final state = this.state;
    final subnet = this.subnet;
    final subnetRouteTable = this.subnetRouteTable;
    final transitGateway = this.transitGateway;
    final transitGatewayAttachment = this.transitGatewayAttachment;
    final transitGatewayRouteTable = this.transitGatewayRouteTable;
    final transitGatewayRouteTableRoute = this.transitGatewayRouteTableRoute;
    final vpc = this.vpc;
    final vpcEndpoint = this.vpcEndpoint;
    final vpcPeeringConnection = this.vpcPeeringConnection;
    final vpnConnection = this.vpnConnection;
    final vpnGateway = this.vpnGateway;
    return {
      if (acl != null) 'acl': acl,
      if (aclRule != null) 'aclRule': aclRule,
      if (address != null) 'address': address,
      if (addresses != null) 'addressSet': addresses,
      if (attachedTo != null) 'attachedTo': attachedTo,
      if (availabilityZones != null) 'availabilityZoneSet': availabilityZones,
      if (cidrs != null) 'cidrSet': cidrs,
      if (classicLoadBalancerListener != null)
        'classicLoadBalancerListener': classicLoadBalancerListener,
      if (component != null) 'component': component,
      if (componentAccount != null) 'componentAccount': componentAccount,
      if (componentRegion != null) 'componentRegion': componentRegion,
      if (customerGateway != null) 'customerGateway': customerGateway,
      if (destination != null) 'destination': destination,
      if (destinationVpc != null) 'destinationVpc': destinationVpc,
      if (direction != null) 'direction': direction,
      if (elasticLoadBalancerListener != null)
        'elasticLoadBalancerListener': elasticLoadBalancerListener,
      if (explanationCode != null) 'explanationCode': explanationCode,
      if (firewallStatefulRule != null)
        'firewallStatefulRule': firewallStatefulRule,
      if (firewallStatelessRule != null)
        'firewallStatelessRule': firewallStatelessRule,
      if (ingressRouteTable != null) 'ingressRouteTable': ingressRouteTable,
      if (internetGateway != null) 'internetGateway': internetGateway,
      if (loadBalancerArn != null) 'loadBalancerArn': loadBalancerArn,
      if (loadBalancerListenerPort != null)
        'loadBalancerListenerPort': loadBalancerListenerPort,
      if (loadBalancerTarget != null) 'loadBalancerTarget': loadBalancerTarget,
      if (loadBalancerTargetGroup != null)
        'loadBalancerTargetGroup': loadBalancerTargetGroup,
      if (loadBalancerTargetGroups != null)
        'loadBalancerTargetGroupSet': loadBalancerTargetGroups,
      if (loadBalancerTargetPort != null)
        'loadBalancerTargetPort': loadBalancerTargetPort,
      if (missingComponent != null) 'missingComponent': missingComponent,
      if (natGateway != null) 'natGateway': natGateway,
      if (networkInterface != null) 'networkInterface': networkInterface,
      if (packetField != null) 'packetField': packetField,
      if (port != null) 'port': port,
      if (portRanges != null) 'portRangeSet': portRanges,
      if (prefixList != null) 'prefixList': prefixList,
      if (protocols != null) 'protocolSet': protocols,
      if (routeTable != null) 'routeTable': routeTable,
      if (routeTableRoute != null) 'routeTableRoute': routeTableRoute,
      if (securityGroup != null) 'securityGroup': securityGroup,
      if (securityGroupRule != null) 'securityGroupRule': securityGroupRule,
      if (securityGroups != null) 'securityGroupSet': securityGroups,
      if (sourceVpc != null) 'sourceVpc': sourceVpc,
      if (state != null) 'state': state,
      if (subnet != null) 'subnet': subnet,
      if (subnetRouteTable != null) 'subnetRouteTable': subnetRouteTable,
      if (transitGateway != null) 'transitGateway': transitGateway,
      if (transitGatewayAttachment != null)
        'transitGatewayAttachment': transitGatewayAttachment,
      if (transitGatewayRouteTable != null)
        'transitGatewayRouteTable': transitGatewayRouteTable,
      if (transitGatewayRouteTableRoute != null)
        'transitGatewayRouteTableRoute': transitGatewayRouteTableRoute,
      if (vpc != null) 'vpc': vpc,
      if (vpcEndpoint != null) 'vpcEndpoint': vpcEndpoint,
      if (vpcPeeringConnection != null)
        'vpcPeeringConnection': vpcPeeringConnection,
      if (vpnConnection != null) 'vpnConnection': vpnConnection,
      if (vpnGateway != null) 'vpnGateway': vpnGateway,
    };
  }
}

class ExportClientVpnClientCertificateRevocationListResult {
  /// Information about the client certificate revocation list.
  final String? certificateRevocationList;

  /// The current state of the client certificate revocation list.
  final ClientCertificateRevocationListStatus? status;

  ExportClientVpnClientCertificateRevocationListResult({
    this.certificateRevocationList,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final certificateRevocationList = this.certificateRevocationList;
    final status = this.status;
    return {
      if (certificateRevocationList != null)
        'certificateRevocationList': certificateRevocationList,
      if (status != null) 'status': status,
    };
  }
}

class ExportClientVpnClientConfigurationResult {
  /// The contents of the Client VPN endpoint configuration file.
  final String? clientConfiguration;

  ExportClientVpnClientConfigurationResult({
    this.clientConfiguration,
  });

  Map<String, dynamic> toJson() {
    final clientConfiguration = this.clientConfiguration;
    return {
      if (clientConfiguration != null)
        'clientConfiguration': clientConfiguration,
    };
  }
}

enum ExportEnvironment {
  citrix('citrix'),
  vmware('vmware'),
  microsoft('microsoft'),
  ;

  final String value;

  const ExportEnvironment(this.value);

  static ExportEnvironment fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ExportEnvironment'));
}

class ExportImageResult {
  /// A description of the image being exported.
  final String? description;

  /// The disk image format for the exported image.
  final DiskImageFormat? diskImageFormat;

  /// The ID of the export image task.
  final String? exportImageTaskId;

  /// The ID of the image.
  final String? imageId;

  /// The percent complete of the export image task.
  final String? progress;

  /// The name of the role that grants VM Import/Export permission to export
  /// images to your Amazon S3 bucket.
  final String? roleName;

  /// Information about the destination Amazon S3 bucket.
  final ExportTaskS3Location? s3ExportLocation;

  /// The status of the export image task. The possible values are
  /// <code>active</code>, <code>completed</code>, <code>deleting</code>, and
  /// <code>deleted</code>.
  final String? status;

  /// The status message for the export image task.
  final String? statusMessage;

  /// Any tags assigned to the export image task.
  final List<Tag>? tags;

  ExportImageResult({
    this.description,
    this.diskImageFormat,
    this.exportImageTaskId,
    this.imageId,
    this.progress,
    this.roleName,
    this.s3ExportLocation,
    this.status,
    this.statusMessage,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final diskImageFormat = this.diskImageFormat;
    final exportImageTaskId = this.exportImageTaskId;
    final imageId = this.imageId;
    final progress = this.progress;
    final roleName = this.roleName;
    final s3ExportLocation = this.s3ExportLocation;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (diskImageFormat != null) 'diskImageFormat': diskImageFormat.value,
      if (exportImageTaskId != null) 'exportImageTaskId': exportImageTaskId,
      if (imageId != null) 'imageId': imageId,
      if (progress != null) 'progress': progress,
      if (roleName != null) 'roleName': roleName,
      if (s3ExportLocation != null) 's3ExportLocation': s3ExportLocation,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an export image task.
class ExportImageTask {
  /// A description of the image being exported.
  final String? description;

  /// The ID of the export image task.
  final String? exportImageTaskId;

  /// The ID of the image.
  final String? imageId;

  /// The percent complete of the export image task.
  final String? progress;

  /// Information about the destination Amazon S3 bucket.
  final ExportTaskS3Location? s3ExportLocation;

  /// The status of the export image task. The possible values are
  /// <code>active</code>, <code>completed</code>, <code>deleting</code>, and
  /// <code>deleted</code>.
  final String? status;

  /// The status message for the export image task.
  final String? statusMessage;

  /// Any tags assigned to the export image task.
  final List<Tag>? tags;

  ExportImageTask({
    this.description,
    this.exportImageTaskId,
    this.imageId,
    this.progress,
    this.s3ExportLocation,
    this.status,
    this.statusMessage,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final exportImageTaskId = this.exportImageTaskId;
    final imageId = this.imageId;
    final progress = this.progress;
    final s3ExportLocation = this.s3ExportLocation;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (exportImageTaskId != null) 'exportImageTaskId': exportImageTaskId,
      if (imageId != null) 'imageId': imageId,
      if (progress != null) 'progress': progress,
      if (s3ExportLocation != null) 's3ExportLocation': s3ExportLocation,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an export instance task.
class ExportTask {
  /// A description of the resource being exported.
  final String? description;

  /// The ID of the export task.
  final String? exportTaskId;

  /// Information about the export task.
  final ExportToS3Task? exportToS3Task;

  /// Information about the instance to export.
  final InstanceExportDetails? instanceExportDetails;

  /// The state of the export task.
  final ExportTaskState? state;

  /// The status message related to the export task.
  final String? statusMessage;

  /// The tags for the export task.
  final List<Tag>? tags;

  ExportTask({
    this.description,
    this.exportTaskId,
    this.exportToS3Task,
    this.instanceExportDetails,
    this.state,
    this.statusMessage,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final exportTaskId = this.exportTaskId;
    final exportToS3Task = this.exportToS3Task;
    final instanceExportDetails = this.instanceExportDetails;
    final state = this.state;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (exportTaskId != null) 'exportTaskId': exportTaskId,
      if (exportToS3Task != null) 'exportToS3': exportToS3Task,
      if (instanceExportDetails != null)
        'instanceExport': instanceExportDetails,
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes the destination for an export image task.
class ExportTaskS3Location {
  /// The destination Amazon S3 bucket.
  final String? s3Bucket;

  /// The prefix (logical hierarchy) in the bucket.
  final String? s3Prefix;

  ExportTaskS3Location({
    this.s3Bucket,
    this.s3Prefix,
  });

  Map<String, dynamic> toJson() {
    final s3Bucket = this.s3Bucket;
    final s3Prefix = this.s3Prefix;
    return {
      if (s3Bucket != null) 's3Bucket': s3Bucket,
      if (s3Prefix != null) 's3Prefix': s3Prefix,
    };
  }
}

/// Describes the destination for an export image task.
class ExportTaskS3LocationRequest {
  /// The destination Amazon S3 bucket.
  final String s3Bucket;

  /// The prefix (logical hierarchy) in the bucket.
  final String? s3Prefix;

  ExportTaskS3LocationRequest({
    required this.s3Bucket,
    this.s3Prefix,
  });

  Map<String, dynamic> toJson() {
    final s3Bucket = this.s3Bucket;
    final s3Prefix = this.s3Prefix;
    return {
      'S3Bucket': s3Bucket,
      if (s3Prefix != null) 'S3Prefix': s3Prefix,
    };
  }
}

enum ExportTaskState {
  active('active'),
  cancelling('cancelling'),
  cancelled('cancelled'),
  completed('completed'),
  ;

  final String value;

  const ExportTaskState(this.value);

  static ExportTaskState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ExportTaskState'));
}

/// Describes the format and location for the export task.
class ExportToS3Task {
  /// The container format used to combine disk images with metadata (such as
  /// OVF). If absent, only the disk image is exported.
  final ContainerFormat? containerFormat;

  /// The format for the exported image.
  final DiskImageFormat? diskImageFormat;

  /// The Amazon S3 bucket for the destination image. The destination bucket must
  /// exist and have an access control list (ACL) attached that specifies the
  /// Region-specific canonical account ID for the <code>Grantee</code>. For more
  /// information about the ACL to your S3 bucket, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html#vmexport-prerequisites">Prerequisites</a>
  /// in the VM Import/Export User Guide.
  final String? s3Bucket;

  /// The encryption key for your S3 bucket.
  final String? s3Key;

  ExportToS3Task({
    this.containerFormat,
    this.diskImageFormat,
    this.s3Bucket,
    this.s3Key,
  });

  Map<String, dynamic> toJson() {
    final containerFormat = this.containerFormat;
    final diskImageFormat = this.diskImageFormat;
    final s3Bucket = this.s3Bucket;
    final s3Key = this.s3Key;
    return {
      if (containerFormat != null) 'containerFormat': containerFormat.value,
      if (diskImageFormat != null) 'diskImageFormat': diskImageFormat.value,
      if (s3Bucket != null) 's3Bucket': s3Bucket,
      if (s3Key != null) 's3Key': s3Key,
    };
  }
}

/// Describes an export instance task.
class ExportToS3TaskSpecification {
  /// The container format used to combine disk images with metadata (such as
  /// OVF). If absent, only the disk image is exported.
  final ContainerFormat? containerFormat;

  /// The format for the exported image.
  final DiskImageFormat? diskImageFormat;

  /// The Amazon S3 bucket for the destination image. The destination bucket must
  /// exist and have an access control list (ACL) attached that specifies the
  /// Region-specific canonical account ID for the <code>Grantee</code>. For more
  /// information about the ACL to your S3 bucket, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html#vmexport-prerequisites">Prerequisites</a>
  /// in the VM Import/Export User Guide.
  final String? s3Bucket;

  /// The image is written to a single object in the Amazon S3 bucket at the S3
  /// key s3prefix + exportTaskId + '.' + diskImageFormat.
  final String? s3Prefix;

  ExportToS3TaskSpecification({
    this.containerFormat,
    this.diskImageFormat,
    this.s3Bucket,
    this.s3Prefix,
  });

  Map<String, dynamic> toJson() {
    final containerFormat = this.containerFormat;
    final diskImageFormat = this.diskImageFormat;
    final s3Bucket = this.s3Bucket;
    final s3Prefix = this.s3Prefix;
    return {
      if (containerFormat != null) 'containerFormat': containerFormat.value,
      if (diskImageFormat != null) 'diskImageFormat': diskImageFormat.value,
      if (s3Bucket != null) 's3Bucket': s3Bucket,
      if (s3Prefix != null) 's3Prefix': s3Prefix,
    };
  }
}

class ExportTransitGatewayRoutesResult {
  /// The URL of the exported file in Amazon S3. For example,
  /// s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.
  final String? s3Location;

  ExportTransitGatewayRoutesResult({
    this.s3Location,
  });

  Map<String, dynamic> toJson() {
    final s3Location = this.s3Location;
    return {
      if (s3Location != null) 's3Location': s3Location,
    };
  }
}

/// Describes a Capacity Reservation Fleet that could not be cancelled.
class FailedCapacityReservationFleetCancellationResult {
  /// Information about the Capacity Reservation Fleet cancellation error.
  final CancelCapacityReservationFleetError?
      cancelCapacityReservationFleetError;

  /// The ID of the Capacity Reservation Fleet that could not be cancelled.
  final String? capacityReservationFleetId;

  FailedCapacityReservationFleetCancellationResult({
    this.cancelCapacityReservationFleetError,
    this.capacityReservationFleetId,
  });

  Map<String, dynamic> toJson() {
    final cancelCapacityReservationFleetError =
        this.cancelCapacityReservationFleetError;
    final capacityReservationFleetId = this.capacityReservationFleetId;
    return {
      if (cancelCapacityReservationFleetError != null)
        'cancelCapacityReservationFleetError':
            cancelCapacityReservationFleetError,
      if (capacityReservationFleetId != null)
        'capacityReservationFleetId': capacityReservationFleetId,
    };
  }
}

/// Describes a Reserved Instance whose queued purchase was not deleted.
class FailedQueuedPurchaseDeletion {
  /// The error.
  final DeleteQueuedReservedInstancesError? error;

  /// The ID of the Reserved Instance.
  final String? reservedInstancesId;

  FailedQueuedPurchaseDeletion({
    this.error,
    this.reservedInstancesId,
  });

  Map<String, dynamic> toJson() {
    final error = this.error;
    final reservedInstancesId = this.reservedInstancesId;
    return {
      if (error != null) 'error': error,
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
    };
  }
}

/// Request to create a launch template for a Windows fast launch enabled AMI.
/// <note>
/// Note - You can specify either the <code>LaunchTemplateName</code> or the
/// <code>LaunchTemplateId</code>, but not both.
/// </note>
class FastLaunchLaunchTemplateSpecificationRequest {
  /// Specify the version of the launch template that the AMI should use for
  /// Windows fast launch.
  final String version;

  /// Specify the ID of the launch template that the AMI should use for Windows
  /// fast launch.
  final String? launchTemplateId;

  /// Specify the name of the launch template that the AMI should use for Windows
  /// fast launch.
  final String? launchTemplateName;

  FastLaunchLaunchTemplateSpecificationRequest({
    required this.version,
    this.launchTemplateId,
    this.launchTemplateName,
  });

  Map<String, dynamic> toJson() {
    final version = this.version;
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    return {
      'Version': version,
      if (launchTemplateId != null) 'LaunchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'LaunchTemplateName': launchTemplateName,
    };
  }
}

/// Identifies the launch template that the AMI uses for Windows fast launch.
class FastLaunchLaunchTemplateSpecificationResponse {
  /// The ID of the launch template that the AMI uses for Windows fast launch.
  final String? launchTemplateId;

  /// The name of the launch template that the AMI uses for Windows fast launch.
  final String? launchTemplateName;

  /// The version of the launch template that the AMI uses for Windows fast
  /// launch.
  final String? version;

  FastLaunchLaunchTemplateSpecificationResponse({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final version = this.version;
    return {
      if (launchTemplateId != null) 'launchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'launchTemplateName': launchTemplateName,
      if (version != null) 'version': version,
    };
  }
}

enum FastLaunchResourceType {
  snapshot('snapshot'),
  ;

  final String value;

  const FastLaunchResourceType(this.value);

  static FastLaunchResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FastLaunchResourceType'));
}

/// Configuration settings for creating and managing pre-provisioned snapshots
/// for a Windows fast launch enabled AMI.
class FastLaunchSnapshotConfigurationRequest {
  /// The number of pre-provisioned snapshots to keep on hand for a Windows fast
  /// launch enabled AMI.
  final int? targetResourceCount;

  FastLaunchSnapshotConfigurationRequest({
    this.targetResourceCount,
  });

  Map<String, dynamic> toJson() {
    final targetResourceCount = this.targetResourceCount;
    return {
      if (targetResourceCount != null)
        'TargetResourceCount': targetResourceCount,
    };
  }
}

/// Configuration settings for creating and managing pre-provisioned snapshots
/// for a Windows fast launch enabled Windows AMI.
class FastLaunchSnapshotConfigurationResponse {
  /// The number of pre-provisioned snapshots requested to keep on hand for a
  /// Windows fast launch enabled AMI.
  final int? targetResourceCount;

  FastLaunchSnapshotConfigurationResponse({
    this.targetResourceCount,
  });

  Map<String, dynamic> toJson() {
    final targetResourceCount = this.targetResourceCount;
    return {
      if (targetResourceCount != null)
        'targetResourceCount': targetResourceCount,
    };
  }
}

enum FastLaunchStateCode {
  enabling('enabling'),
  enablingFailed('enabling-failed'),
  enabled('enabled'),
  enabledFailed('enabled-failed'),
  disabling('disabling'),
  disablingFailed('disabling-failed'),
  ;

  final String value;

  const FastLaunchStateCode(this.value);

  static FastLaunchStateCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FastLaunchStateCode'));
}

enum FastSnapshotRestoreStateCode {
  enabling('enabling'),
  optimizing('optimizing'),
  enabled('enabled'),
  disabling('disabling'),
  disabled('disabled'),
  ;

  final String value;

  const FastSnapshotRestoreStateCode(this.value);

  static FastSnapshotRestoreStateCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FastSnapshotRestoreStateCode'));
}

/// Describes the IAM SAML identity providers used for federated authentication.
class FederatedAuthentication {
  /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
  final String? samlProviderArn;

  /// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the
  /// self-service portal.
  final String? selfServiceSamlProviderArn;

  FederatedAuthentication({
    this.samlProviderArn,
    this.selfServiceSamlProviderArn,
  });

  Map<String, dynamic> toJson() {
    final samlProviderArn = this.samlProviderArn;
    final selfServiceSamlProviderArn = this.selfServiceSamlProviderArn;
    return {
      if (samlProviderArn != null) 'samlProviderArn': samlProviderArn,
      if (selfServiceSamlProviderArn != null)
        'selfServiceSamlProviderArn': selfServiceSamlProviderArn,
    };
  }
}

/// The IAM SAML identity provider used for federated authentication.
class FederatedAuthenticationRequest {
  /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
  final String? sAMLProviderArn;

  /// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the
  /// self-service portal.
  final String? selfServiceSAMLProviderArn;

  FederatedAuthenticationRequest({
    this.sAMLProviderArn,
    this.selfServiceSAMLProviderArn,
  });

  Map<String, dynamic> toJson() {
    final sAMLProviderArn = this.sAMLProviderArn;
    final selfServiceSAMLProviderArn = this.selfServiceSAMLProviderArn;
    return {
      if (sAMLProviderArn != null) 'SAMLProviderArn': sAMLProviderArn,
      if (selfServiceSAMLProviderArn != null)
        'SelfServiceSAMLProviderArn': selfServiceSAMLProviderArn,
    };
  }
}

/// A filter name and value pair that is used to return a more specific list of
/// results from a describe operation. Filters can be used to match a set of
/// resources by specific criteria, such as tags, attributes, or IDs.
///
/// If you specify multiple filters, the filters are joined with an
/// <code>AND</code>, and the request returns only results that match all of the
/// specified filters.
class Filter {
  /// The name of the filter. Filter names are case-sensitive.
  final String? name;

  /// The filter values. Filter values are case-sensitive. If you specify multiple
  /// values for a filter, the values are joined with an <code>OR</code>, and the
  /// request returns all results that match any of the specified values.
  final List<String>? values;

  Filter({
    this.name,
    this.values,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final values = this.values;
    return {
      if (name != null) 'Name': name,
      if (values != null) 'Value': values,
    };
  }
}

/// Describes a port range.
class FilterPortRange {
  /// The first port in the range.
  final int? fromPort;

  /// The last port in the range.
  final int? toPort;

  FilterPortRange({
    this.fromPort,
    this.toPort,
  });

  Map<String, dynamic> toJson() {
    final fromPort = this.fromPort;
    final toPort = this.toPort;
    return {
      if (fromPort != null) 'fromPort': fromPort,
      if (toPort != null) 'toPort': toPort,
    };
  }
}

enum FindingsFound {
  $true('true'),
  $false('false'),
  unknown('unknown'),
  ;

  final String value;

  const FindingsFound(this.value);

  static FindingsFound fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FindingsFound'));
}

/// Describes a stateful rule.
class FirewallStatefulRule {
  /// The destination ports.
  final List<PortRange>? destinationPorts;

  /// The destination IP addresses, in CIDR notation.
  final List<String>? destinations;

  /// The direction. The possible values are <code>FORWARD</code> and
  /// <code>ANY</code>.
  final String? direction;

  /// The protocol.
  final String? protocol;

  /// The rule action. The possible values are <code>pass</code>,
  /// <code>drop</code>, and <code>alert</code>.
  final String? ruleAction;

  /// The ARN of the stateful rule group.
  final String? ruleGroupArn;

  /// The source ports.
  final List<PortRange>? sourcePorts;

  /// The source IP addresses, in CIDR notation.
  final List<String>? sources;

  FirewallStatefulRule({
    this.destinationPorts,
    this.destinations,
    this.direction,
    this.protocol,
    this.ruleAction,
    this.ruleGroupArn,
    this.sourcePorts,
    this.sources,
  });

  Map<String, dynamic> toJson() {
    final destinationPorts = this.destinationPorts;
    final destinations = this.destinations;
    final direction = this.direction;
    final protocol = this.protocol;
    final ruleAction = this.ruleAction;
    final ruleGroupArn = this.ruleGroupArn;
    final sourcePorts = this.sourcePorts;
    final sources = this.sources;
    return {
      if (destinationPorts != null) 'destinationPortSet': destinationPorts,
      if (destinations != null) 'destinationSet': destinations,
      if (direction != null) 'direction': direction,
      if (protocol != null) 'protocol': protocol,
      if (ruleAction != null) 'ruleAction': ruleAction,
      if (ruleGroupArn != null) 'ruleGroupArn': ruleGroupArn,
      if (sourcePorts != null) 'sourcePortSet': sourcePorts,
      if (sources != null) 'sourceSet': sources,
    };
  }
}

/// Describes a stateless rule.
class FirewallStatelessRule {
  /// The destination ports.
  final List<PortRange>? destinationPorts;

  /// The destination IP addresses, in CIDR notation.
  final List<String>? destinations;

  /// The rule priority.
  final int? priority;

  /// The protocols.
  final List<int>? protocols;

  /// The rule action. The possible values are <code>pass</code>,
  /// <code>drop</code>, and <code>forward_to_site</code>.
  final String? ruleAction;

  /// The ARN of the stateless rule group.
  final String? ruleGroupArn;

  /// The source ports.
  final List<PortRange>? sourcePorts;

  /// The source IP addresses, in CIDR notation.
  final List<String>? sources;

  FirewallStatelessRule({
    this.destinationPorts,
    this.destinations,
    this.priority,
    this.protocols,
    this.ruleAction,
    this.ruleGroupArn,
    this.sourcePorts,
    this.sources,
  });

  Map<String, dynamic> toJson() {
    final destinationPorts = this.destinationPorts;
    final destinations = this.destinations;
    final priority = this.priority;
    final protocols = this.protocols;
    final ruleAction = this.ruleAction;
    final ruleGroupArn = this.ruleGroupArn;
    final sourcePorts = this.sourcePorts;
    final sources = this.sources;
    return {
      if (destinationPorts != null) 'destinationPortSet': destinationPorts,
      if (destinations != null) 'destinationSet': destinations,
      if (priority != null) 'priority': priority,
      if (protocols != null) 'protocolSet': protocols,
      if (ruleAction != null) 'ruleAction': ruleAction,
      if (ruleGroupArn != null) 'ruleGroupArn': ruleGroupArn,
      if (sourcePorts != null) 'sourcePortSet': sourcePorts,
      if (sources != null) 'sourceSet': sources,
    };
  }
}

enum FleetActivityStatus {
  error('error'),
  pendingFulfillment('pending_fulfillment'),
  pendingTermination('pending_termination'),
  fulfilled('fulfilled'),
  ;

  final String value;

  const FleetActivityStatus(this.value);

  static FleetActivityStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FleetActivityStatus'));
}

/// Information about a Capacity Reservation in a Capacity Reservation Fleet.
class FleetCapacityReservation {
  /// The Availability Zone in which the Capacity Reservation reserves capacity.
  final String? availabilityZone;

  /// The ID of the Availability Zone in which the Capacity Reservation reserves
  /// capacity.
  final String? availabilityZoneId;

  /// The ID of the Capacity Reservation.
  final String? capacityReservationId;

  /// The date and time at which the Capacity Reservation was created.
  final DateTime? createDate;

  /// Indicates whether the Capacity Reservation reserves capacity for
  /// EBS-optimized instance types.
  final bool? ebsOptimized;

  /// The number of capacity units fulfilled by the Capacity Reservation. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">
  /// Total target capacity</a> in the Amazon EC2 User Guide.
  final double? fulfilledCapacity;

  /// The type of operating system for which the Capacity Reservation reserves
  /// capacity.
  final CapacityReservationInstancePlatform? instancePlatform;

  /// The instance type for which the Capacity Reservation reserves capacity.
  final InstanceType? instanceType;

  /// The priority of the instance type in the Capacity Reservation Fleet. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-priority">
  /// Instance type priority</a> in the Amazon EC2 User Guide.
  final int? priority;

  /// The total number of instances for which the Capacity Reservation reserves
  /// capacity.
  final int? totalInstanceCount;

  /// The weight of the instance type in the Capacity Reservation Fleet. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-weight">
  /// Instance type weight</a> in the Amazon EC2 User Guide.
  final double? weight;

  FleetCapacityReservation({
    this.availabilityZone,
    this.availabilityZoneId,
    this.capacityReservationId,
    this.createDate,
    this.ebsOptimized,
    this.fulfilledCapacity,
    this.instancePlatform,
    this.instanceType,
    this.priority,
    this.totalInstanceCount,
    this.weight,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final availabilityZoneId = this.availabilityZoneId;
    final capacityReservationId = this.capacityReservationId;
    final createDate = this.createDate;
    final ebsOptimized = this.ebsOptimized;
    final fulfilledCapacity = this.fulfilledCapacity;
    final instancePlatform = this.instancePlatform;
    final instanceType = this.instanceType;
    final priority = this.priority;
    final totalInstanceCount = this.totalInstanceCount;
    final weight = this.weight;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (availabilityZoneId != null) 'availabilityZoneId': availabilityZoneId,
      if (capacityReservationId != null)
        'capacityReservationId': capacityReservationId,
      if (createDate != null) 'createDate': iso8601ToJson(createDate),
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (fulfilledCapacity != null) 'fulfilledCapacity': fulfilledCapacity,
      if (instancePlatform != null) 'instancePlatform': instancePlatform.value,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (priority != null) 'priority': priority,
      if (totalInstanceCount != null) 'totalInstanceCount': totalInstanceCount,
      if (weight != null) 'weight': weight,
    };
  }
}

enum FleetCapacityReservationTenancy {
  $default('default'),
  ;

  final String value;

  const FleetCapacityReservationTenancy(this.value);

  static FleetCapacityReservationTenancy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FleetCapacityReservationTenancy'));
}

enum FleetCapacityReservationUsageStrategy {
  useCapacityReservationsFirst('use-capacity-reservations-first'),
  ;

  final String value;

  const FleetCapacityReservationUsageStrategy(this.value);

  static FleetCapacityReservationUsageStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FleetCapacityReservationUsageStrategy'));
}

/// Describes an EC2 Fleet.
class FleetData {
  /// The progress of the EC2 Fleet. If there is an error, the status is
  /// <code>error</code>. After all requests are placed, the status is
  /// <code>pending_fulfillment</code>. If the size of the EC2 Fleet is equal to
  /// or greater than its target capacity, the status is <code>fulfilled</code>.
  /// If the size of the EC2 Fleet is decreased, the status is
  /// <code>pending_termination</code> while instances are terminating.
  final FleetActivityStatus? activityStatus;

  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// idempotency</a>.
  ///
  /// Constraints: Maximum 64 ASCII characters
  final String? clientToken;

  /// Reserved.
  final String? context;

  /// The creation date and time of the EC2 Fleet.
  final DateTime? createTime;

  /// Information about the instances that could not be launched by the fleet.
  /// Valid only when <b>Type</b> is set to <code>instant</code>.
  final List<DescribeFleetError>? errors;

  /// Indicates whether running instances should be terminated if the target
  /// capacity of the EC2 Fleet is decreased below the current size of the EC2
  /// Fleet.
  ///
  /// Supported only for fleets of type <code>maintain</code>.
  final FleetExcessCapacityTerminationPolicy? excessCapacityTerminationPolicy;

  /// The ID of the EC2 Fleet.
  final String? fleetId;

  /// The state of the EC2 Fleet.
  final FleetStateCode? fleetState;

  /// The number of units fulfilled by this request compared to the set target
  /// capacity.
  final double? fulfilledCapacity;

  /// The number of units fulfilled by this request compared to the set target
  /// On-Demand capacity.
  final double? fulfilledOnDemandCapacity;

  /// Information about the instances that were launched by the fleet. Valid only
  /// when <b>Type</b> is set to <code>instant</code>.
  final List<DescribeFleetsInstances>? instances;

  /// The launch template and overrides.
  final List<FleetLaunchTemplateConfig>? launchTemplateConfigs;

  /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
  final OnDemandOptions? onDemandOptions;

  /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances.
  /// Supported only for fleets of type <code>maintain</code>. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks">EC2
  /// Fleet health checks</a> in the <i>Amazon EC2 User Guide</i>.
  final bool? replaceUnhealthyInstances;

  /// The configuration of Spot Instances in an EC2 Fleet.
  final SpotOptions? spotOptions;

  /// The tags for an EC2 Fleet resource.
  final List<Tag>? tags;

  /// The number of units to request. You can choose to set the target capacity in
  /// terms of instances or a performance characteristic that is important to your
  /// application workload, such as vCPUs, memory, or I/O. If the request type is
  /// <code>maintain</code>, you can specify a target capacity of 0 and add
  /// capacity later.
  final TargetCapacitySpecification? targetCapacitySpecification;

  /// Indicates whether running instances should be terminated when the EC2 Fleet
  /// expires.
  final bool? terminateInstancesWithExpiration;

  /// The type of request. Indicates whether the EC2 Fleet only
  /// <code>requests</code> the target capacity, or also attempts to
  /// <code>maintain</code> it. If you request a certain target capacity, EC2
  /// Fleet only places the required requests; it does not attempt to replenish
  /// instances if capacity is diminished, and it does not submit requests in
  /// alternative capacity pools if capacity is unavailable. To maintain a certain
  /// target capacity, EC2 Fleet places the required requests to meet this target
  /// capacity. It also automatically replenishes any interrupted Spot Instances.
  /// Default: <code>maintain</code>.
  final FleetType? type;

  /// The start date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default
  /// is to start fulfilling the request immediately.
  final DateTime? validFrom;

  /// The end date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this
  /// point, no new instance requests are placed or able to fulfill the request.
  /// The default end date is 7 days from the current date.
  final DateTime? validUntil;

  FleetData({
    this.activityStatus,
    this.clientToken,
    this.context,
    this.createTime,
    this.errors,
    this.excessCapacityTerminationPolicy,
    this.fleetId,
    this.fleetState,
    this.fulfilledCapacity,
    this.fulfilledOnDemandCapacity,
    this.instances,
    this.launchTemplateConfigs,
    this.onDemandOptions,
    this.replaceUnhealthyInstances,
    this.spotOptions,
    this.tags,
    this.targetCapacitySpecification,
    this.terminateInstancesWithExpiration,
    this.type,
    this.validFrom,
    this.validUntil,
  });

  Map<String, dynamic> toJson() {
    final activityStatus = this.activityStatus;
    final clientToken = this.clientToken;
    final context = this.context;
    final createTime = this.createTime;
    final errors = this.errors;
    final excessCapacityTerminationPolicy =
        this.excessCapacityTerminationPolicy;
    final fleetId = this.fleetId;
    final fleetState = this.fleetState;
    final fulfilledCapacity = this.fulfilledCapacity;
    final fulfilledOnDemandCapacity = this.fulfilledOnDemandCapacity;
    final instances = this.instances;
    final launchTemplateConfigs = this.launchTemplateConfigs;
    final onDemandOptions = this.onDemandOptions;
    final replaceUnhealthyInstances = this.replaceUnhealthyInstances;
    final spotOptions = this.spotOptions;
    final tags = this.tags;
    final targetCapacitySpecification = this.targetCapacitySpecification;
    final terminateInstancesWithExpiration =
        this.terminateInstancesWithExpiration;
    final type = this.type;
    final validFrom = this.validFrom;
    final validUntil = this.validUntil;
    return {
      if (activityStatus != null) 'activityStatus': activityStatus.value,
      if (clientToken != null) 'clientToken': clientToken,
      if (context != null) 'context': context,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (errors != null) 'errorSet': errors,
      if (excessCapacityTerminationPolicy != null)
        'excessCapacityTerminationPolicy':
            excessCapacityTerminationPolicy.value,
      if (fleetId != null) 'fleetId': fleetId,
      if (fleetState != null) 'fleetState': fleetState.value,
      if (fulfilledCapacity != null) 'fulfilledCapacity': fulfilledCapacity,
      if (fulfilledOnDemandCapacity != null)
        'fulfilledOnDemandCapacity': fulfilledOnDemandCapacity,
      if (instances != null) 'fleetInstanceSet': instances,
      if (launchTemplateConfigs != null)
        'launchTemplateConfigs': launchTemplateConfigs,
      if (onDemandOptions != null) 'onDemandOptions': onDemandOptions,
      if (replaceUnhealthyInstances != null)
        'replaceUnhealthyInstances': replaceUnhealthyInstances,
      if (spotOptions != null) 'spotOptions': spotOptions,
      if (tags != null) 'tagSet': tags,
      if (targetCapacitySpecification != null)
        'targetCapacitySpecification': targetCapacitySpecification,
      if (terminateInstancesWithExpiration != null)
        'terminateInstancesWithExpiration': terminateInstancesWithExpiration,
      if (type != null) 'type': type.value,
      if (validFrom != null) 'validFrom': iso8601ToJson(validFrom),
      if (validUntil != null) 'validUntil': iso8601ToJson(validUntil),
    };
  }
}

enum FleetEventType {
  instanceChange('instance-change'),
  fleetChange('fleet-change'),
  serviceError('service-error'),
  ;

  final String value;

  const FleetEventType(this.value);

  static FleetEventType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FleetEventType'));
}

enum FleetExcessCapacityTerminationPolicy {
  noTermination('no-termination'),
  termination('termination'),
  ;

  final String value;

  const FleetExcessCapacityTerminationPolicy(this.value);

  static FleetExcessCapacityTerminationPolicy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FleetExcessCapacityTerminationPolicy'));
}

enum FleetInstanceMatchCriteria {
  open('open'),
  ;

  final String value;

  const FleetInstanceMatchCriteria(this.value);

  static FleetInstanceMatchCriteria fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FleetInstanceMatchCriteria'));
}

/// Describes a launch template and overrides.
class FleetLaunchTemplateConfig {
  /// The launch template.
  final FleetLaunchTemplateSpecification? launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final List<FleetLaunchTemplateOverrides>? overrides;

  FleetLaunchTemplateConfig({
    this.launchTemplateSpecification,
    this.overrides,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateSpecification = this.launchTemplateSpecification;
    final overrides = this.overrides;
    return {
      if (launchTemplateSpecification != null)
        'launchTemplateSpecification': launchTemplateSpecification,
      if (overrides != null) 'overrides': overrides,
    };
  }
}

/// Describes a launch template and overrides.
class FleetLaunchTemplateConfigRequest {
  /// The launch template to use. You must specify either the launch template ID
  /// or launch template name in the request.
  final FleetLaunchTemplateSpecificationRequest? launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  ///
  /// For fleets of type <code>request</code> and <code>maintain</code>, a maximum
  /// of 300 items is allowed across all launch templates.
  final List<FleetLaunchTemplateOverridesRequest>? overrides;

  FleetLaunchTemplateConfigRequest({
    this.launchTemplateSpecification,
    this.overrides,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateSpecification = this.launchTemplateSpecification;
    final overrides = this.overrides;
    return {
      if (launchTemplateSpecification != null)
        'LaunchTemplateSpecification': launchTemplateSpecification,
      if (overrides != null) 'Overrides': overrides,
    };
  }
}

/// Describes overrides for a launch template.
class FleetLaunchTemplateOverrides {
  /// The Availability Zone in which to launch the instances.
  final String? availabilityZone;

  /// The ID of the AMI. An AMI is required to launch an instance. This parameter
  /// is only available for fleets of type <code>instant</code>. For fleets of
  /// type <code>maintain</code> and <code>request</code>, you must specify the
  /// AMI ID in the launch template.
  final String? imageId;

  /// The attributes for the instance types. When you specify instance attributes,
  /// Amazon EC2 will identify instance types with those attributes.
  /// <note>
  /// If you specify <code>InstanceRequirements</code>, you can't specify
  /// <code>InstanceType</code>.
  /// </note>
  final InstanceRequirements? instanceRequirements;

  /// The instance type.
  ///
  /// <code>mac1.metal</code> is not supported as a launch template override.
  /// <note>
  /// If you specify <code>InstanceType</code>, you can't specify
  /// <code>InstanceRequirements</code>.
  /// </note>
  final InstanceType? instanceType;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? maxPrice;

  /// The location where the instance launched, if applicable.
  final PlacementResponse? placement;

  /// The priority for the launch template override. The highest priority is
  /// launched first.
  ///
  /// If the On-Demand <code>AllocationStrategy</code> is set to
  /// <code>prioritized</code>, EC2 Fleet uses priority to determine which launch
  /// template override to use first in fulfilling On-Demand capacity.
  ///
  /// If the Spot <code>AllocationStrategy</code> is set to
  /// <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a
  /// best-effort basis to determine which launch template override to use in
  /// fulfilling Spot capacity, but optimizes for capacity first.
  ///
  /// Valid values are whole numbers starting at <code>0</code>. The lower the
  /// number, the higher the priority. If no number is set, the override has the
  /// lowest priority. You can set the same priority for different launch template
  /// overrides.
  final double? priority;

  /// The ID of the subnet in which to launch the instances.
  final String? subnetId;

  /// The number of units provided by the specified instance type.
  /// <note>
  /// When specifying weights, the price used in the <code>lowest-price</code> and
  /// <code>price-capacity-optimized</code> allocation strategies is per
  /// <i>unit</i> hour (where the instance price is divided by the specified
  /// weight). However, if all the specified weights are above the requested
  /// <code>TargetCapacity</code>, resulting in only 1 instance being launched,
  /// the price used is per <i>instance</i> hour.
  /// </note>
  final double? weightedCapacity;

  FleetLaunchTemplateOverrides({
    this.availabilityZone,
    this.imageId,
    this.instanceRequirements,
    this.instanceType,
    this.maxPrice,
    this.placement,
    this.priority,
    this.subnetId,
    this.weightedCapacity,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final imageId = this.imageId;
    final instanceRequirements = this.instanceRequirements;
    final instanceType = this.instanceType;
    final maxPrice = this.maxPrice;
    final placement = this.placement;
    final priority = this.priority;
    final subnetId = this.subnetId;
    final weightedCapacity = this.weightedCapacity;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (imageId != null) 'imageId': imageId,
      if (instanceRequirements != null)
        'instanceRequirements': instanceRequirements,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (maxPrice != null) 'maxPrice': maxPrice,
      if (placement != null) 'placement': placement,
      if (priority != null) 'priority': priority,
      if (subnetId != null) 'subnetId': subnetId,
      if (weightedCapacity != null) 'weightedCapacity': weightedCapacity,
    };
  }
}

/// Describes overrides for a launch template.
class FleetLaunchTemplateOverridesRequest {
  /// The Availability Zone in which to launch the instances.
  final String? availabilityZone;

  /// The ID of the AMI. An AMI is required to launch an instance. This parameter
  /// is only available for fleets of type <code>instant</code>. For fleets of
  /// type <code>maintain</code> and <code>request</code>, you must specify the
  /// AMI ID in the launch template.
  final String? imageId;

  /// The attributes for the instance types. When you specify instance attributes,
  /// Amazon EC2 will identify instance types with those attributes.
  /// <note>
  /// If you specify <code>InstanceRequirements</code>, you can't specify
  /// <code>InstanceType</code>.
  /// </note>
  final InstanceRequirementsRequest? instanceRequirements;

  /// The instance type.
  ///
  /// <code>mac1.metal</code> is not supported as a launch template override.
  /// <note>
  /// If you specify <code>InstanceType</code>, you can't specify
  /// <code>InstanceRequirements</code>.
  /// </note>
  final InstanceType? instanceType;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? maxPrice;

  /// The location where the instance launched, if applicable.
  final Placement? placement;

  /// The priority for the launch template override. The highest priority is
  /// launched first.
  ///
  /// If the On-Demand <code>AllocationStrategy</code> is set to
  /// <code>prioritized</code>, EC2 Fleet uses priority to determine which launch
  /// template override to use first in fulfilling On-Demand capacity.
  ///
  /// If the Spot <code>AllocationStrategy</code> is set to
  /// <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a
  /// best-effort basis to determine which launch template override to use in
  /// fulfilling Spot capacity, but optimizes for capacity first.
  ///
  /// Valid values are whole numbers starting at <code>0</code>. The lower the
  /// number, the higher the priority. If no number is set, the launch template
  /// override has the lowest priority. You can set the same priority for
  /// different launch template overrides.
  final double? priority;

  /// The IDs of the subnets in which to launch the instances. Separate multiple
  /// subnet IDs using commas (for example, <code>subnet-1234abcdeexample1,
  /// subnet-0987cdef6example2</code>). A request of type <code>instant</code> can
  /// have only one subnet ID.
  final String? subnetId;

  /// The number of units provided by the specified instance type.
  /// <note>
  /// When specifying weights, the price used in the <code>lowest-price</code> and
  /// <code>price-capacity-optimized</code> allocation strategies is per
  /// <i>unit</i> hour (where the instance price is divided by the specified
  /// weight). However, if all the specified weights are above the requested
  /// <code>TargetCapacity</code>, resulting in only 1 instance being launched,
  /// the price used is per <i>instance</i> hour.
  /// </note>
  final double? weightedCapacity;

  FleetLaunchTemplateOverridesRequest({
    this.availabilityZone,
    this.imageId,
    this.instanceRequirements,
    this.instanceType,
    this.maxPrice,
    this.placement,
    this.priority,
    this.subnetId,
    this.weightedCapacity,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final imageId = this.imageId;
    final instanceRequirements = this.instanceRequirements;
    final instanceType = this.instanceType;
    final maxPrice = this.maxPrice;
    final placement = this.placement;
    final priority = this.priority;
    final subnetId = this.subnetId;
    final weightedCapacity = this.weightedCapacity;
    return {
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (imageId != null) 'ImageId': imageId,
      if (instanceRequirements != null)
        'InstanceRequirements': instanceRequirements,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (maxPrice != null) 'MaxPrice': maxPrice,
      if (placement != null) 'Placement': placement,
      if (priority != null) 'Priority': priority,
      if (subnetId != null) 'SubnetId': subnetId,
      if (weightedCapacity != null) 'WeightedCapacity': weightedCapacity,
    };
  }
}

/// The Amazon EC2 launch template that can be used by a Spot Fleet to configure
/// Amazon EC2 instances. You must specify either the ID or name of the launch
/// template in the request, but not both.
///
/// For information about launch templates, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launch
/// an instance from a launch template</a> in the <i>Amazon EC2 User Guide</i>.
class FleetLaunchTemplateSpecification {
  /// The ID of the launch template.
  ///
  /// You must specify the <code>LaunchTemplateId</code> or the
  /// <code>LaunchTemplateName</code>, but not both.
  final String? launchTemplateId;

  /// The name of the launch template.
  ///
  /// You must specify the <code>LaunchTemplateName</code> or the
  /// <code>LaunchTemplateId</code>, but not both.
  final String? launchTemplateName;

  /// The launch template version number, <code>$Latest</code>, or
  /// <code>$Default</code>. You must specify a value, otherwise the request
  /// fails.
  ///
  /// If the value is <code>$Latest</code>, Amazon EC2 uses the latest version of
  /// the launch template.
  ///
  /// If the value is <code>$Default</code>, Amazon EC2 uses the default version
  /// of the launch template.
  final String? version;

  FleetLaunchTemplateSpecification({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final version = this.version;
    return {
      if (launchTemplateId != null) 'launchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'launchTemplateName': launchTemplateName,
      if (version != null) 'version': version,
    };
  }
}

/// The Amazon EC2 launch template that can be used by an EC2 Fleet to configure
/// Amazon EC2 instances. You must specify either the ID or name of the launch
/// template in the request, but not both.
///
/// For information about launch templates, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launch
/// an instance from a launch template</a> in the <i>Amazon EC2 User Guide</i>.
class FleetLaunchTemplateSpecificationRequest {
  /// The ID of the launch template.
  ///
  /// You must specify the <code>LaunchTemplateId</code> or the
  /// <code>LaunchTemplateName</code>, but not both.
  final String? launchTemplateId;

  /// The name of the launch template.
  ///
  /// You must specify the <code>LaunchTemplateName</code> or the
  /// <code>LaunchTemplateId</code>, but not both.
  final String? launchTemplateName;

  /// The launch template version number, <code>$Latest</code>, or
  /// <code>$Default</code>. You must specify a value, otherwise the request
  /// fails.
  ///
  /// If the value is <code>$Latest</code>, Amazon EC2 uses the latest version of
  /// the launch template.
  ///
  /// If the value is <code>$Default</code>, Amazon EC2 uses the default version
  /// of the launch template.
  final String? version;

  FleetLaunchTemplateSpecificationRequest({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final version = this.version;
    return {
      if (launchTemplateId != null) 'LaunchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'LaunchTemplateName': launchTemplateName,
      if (version != null) 'Version': version,
    };
  }
}

enum FleetOnDemandAllocationStrategy {
  lowestPrice('lowest-price'),
  prioritized('prioritized'),
  ;

  final String value;

  const FleetOnDemandAllocationStrategy(this.value);

  static FleetOnDemandAllocationStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FleetOnDemandAllocationStrategy'));
}

enum FleetReplacementStrategy {
  launch('launch'),
  launchBeforeTerminate('launch-before-terminate'),
  ;

  final String value;

  const FleetReplacementStrategy(this.value);

  static FleetReplacementStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FleetReplacementStrategy'));
}

/// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
/// is at an elevated risk of being interrupted.
class FleetSpotCapacityRebalance {
  /// The replacement strategy to use. Only available for fleets of type
  /// <code>maintain</code>.
  ///
  /// <code>launch</code> - EC2 Fleet launches a new replacement Spot Instance
  /// when a rebalance notification is emitted for an existing Spot Instance in
  /// the fleet. EC2 Fleet does not terminate the instances that receive a
  /// rebalance notification. You can terminate the old instances, or you can
  /// leave them running. You are charged for all instances while they are
  /// running.
  ///
  /// <code>launch-before-terminate</code> - EC2 Fleet launches a new replacement
  /// Spot Instance when a rebalance notification is emitted for an existing Spot
  /// Instance in the fleet, and then, after a delay that you specify (in
  /// <code>TerminationDelay</code>), terminates the instances that received a
  /// rebalance notification.
  final FleetReplacementStrategy? replacementStrategy;

  /// The amount of time (in seconds) that Amazon EC2 waits before terminating the
  /// old Spot Instance after launching a new replacement Spot Instance.
  ///
  /// Required when <code>ReplacementStrategy</code> is set to
  /// <code>launch-before-terminate</code>.
  ///
  /// Not valid when <code>ReplacementStrategy</code> is set to
  /// <code>launch</code>.
  ///
  /// Valid values: Minimum value of <code>120</code> seconds. Maximum value of
  /// <code>7200</code> seconds.
  final int? terminationDelay;

  FleetSpotCapacityRebalance({
    this.replacementStrategy,
    this.terminationDelay,
  });

  Map<String, dynamic> toJson() {
    final replacementStrategy = this.replacementStrategy;
    final terminationDelay = this.terminationDelay;
    return {
      if (replacementStrategy != null)
        'replacementStrategy': replacementStrategy.value,
      if (terminationDelay != null) 'terminationDelay': terminationDelay,
    };
  }
}

/// The Spot Instance replacement strategy to use when Amazon EC2 emits a
/// rebalance notification signal that your Spot Instance is at an elevated risk
/// of being interrupted. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-capacity-rebalance.html">Capacity
/// rebalancing</a> in the <i>Amazon EC2 User Guide</i>.
class FleetSpotCapacityRebalanceRequest {
  /// The replacement strategy to use. Only available for fleets of type
  /// <code>maintain</code>.
  ///
  /// <code>launch</code> - EC2 Fleet launches a replacement Spot Instance when a
  /// rebalance notification is emitted for an existing Spot Instance in the
  /// fleet. EC2 Fleet does not terminate the instances that receive a rebalance
  /// notification. You can terminate the old instances, or you can leave them
  /// running. You are charged for all instances while they are running.
  ///
  /// <code>launch-before-terminate</code> - EC2 Fleet launches a replacement Spot
  /// Instance when a rebalance notification is emitted for an existing Spot
  /// Instance in the fleet, and then, after a delay that you specify (in
  /// <code>TerminationDelay</code>), terminates the instances that received a
  /// rebalance notification.
  final FleetReplacementStrategy? replacementStrategy;

  /// The amount of time (in seconds) that Amazon EC2 waits before terminating the
  /// old Spot Instance after launching a new replacement Spot Instance.
  ///
  /// Required when <code>ReplacementStrategy</code> is set to
  /// <code>launch-before-terminate</code>.
  ///
  /// Not valid when <code>ReplacementStrategy</code> is set to
  /// <code>launch</code>.
  ///
  /// Valid values: Minimum value of <code>120</code> seconds. Maximum value of
  /// <code>7200</code> seconds.
  final int? terminationDelay;

  FleetSpotCapacityRebalanceRequest({
    this.replacementStrategy,
    this.terminationDelay,
  });

  Map<String, dynamic> toJson() {
    final replacementStrategy = this.replacementStrategy;
    final terminationDelay = this.terminationDelay;
    return {
      if (replacementStrategy != null)
        'ReplacementStrategy': replacementStrategy.value,
      if (terminationDelay != null) 'TerminationDelay': terminationDelay,
    };
  }
}

/// The strategies for managing your Spot Instances that are at an elevated risk
/// of being interrupted.
class FleetSpotMaintenanceStrategies {
  /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
  /// is at an elevated risk of being interrupted.
  final FleetSpotCapacityRebalance? capacityRebalance;

  FleetSpotMaintenanceStrategies({
    this.capacityRebalance,
  });

  Map<String, dynamic> toJson() {
    final capacityRebalance = this.capacityRebalance;
    return {
      if (capacityRebalance != null) 'capacityRebalance': capacityRebalance,
    };
  }
}

/// The strategies for managing your Spot Instances that are at an elevated risk
/// of being interrupted.
class FleetSpotMaintenanceStrategiesRequest {
  /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
  /// is at an elevated risk of being interrupted.
  final FleetSpotCapacityRebalanceRequest? capacityRebalance;

  FleetSpotMaintenanceStrategiesRequest({
    this.capacityRebalance,
  });

  Map<String, dynamic> toJson() {
    final capacityRebalance = this.capacityRebalance;
    return {
      if (capacityRebalance != null) 'CapacityRebalance': capacityRebalance,
    };
  }
}

enum FleetStateCode {
  submitted('submitted'),
  active('active'),
  deleted('deleted'),
  failed('failed'),
  deletedRunning('deleted_running'),
  deletedTerminating('deleted_terminating'),
  modifying('modifying'),
  ;

  final String value;

  const FleetStateCode(this.value);

  static FleetStateCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FleetStateCode'));
}

enum FleetType {
  request('request'),
  maintain('maintain'),
  instant('instant'),
  ;

  final String value;

  const FleetType(this.value);

  static FleetType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum FleetType'));
}

/// Describes a flow log.
class FlowLog {
  /// The date and time the flow log was created.
  final DateTime? creationTime;

  /// The ARN of the IAM role that allows the service to publish flow logs across
  /// accounts.
  final String? deliverCrossAccountRole;

  /// Information about the error that occurred. <code>Rate limited</code>
  /// indicates that CloudWatch Logs throttling has been applied for one or more
  /// network interfaces, or that you've reached the limit on the number of log
  /// groups that you can create. <code>Access error</code> indicates that the IAM
  /// role associated with the flow log does not have sufficient permissions to
  /// publish to CloudWatch Logs. <code>Unknown error</code> indicates an internal
  /// error.
  final String? deliverLogsErrorMessage;

  /// The ARN of the IAM role allows the service to publish logs to CloudWatch
  /// Logs.
  final String? deliverLogsPermissionArn;

  /// The status of the logs delivery (<code>SUCCESS</code> |
  /// <code>FAILED</code>).
  final String? deliverLogsStatus;

  /// The destination options.
  final DestinationOptionsResponse? destinationOptions;

  /// The ID of the flow log.
  final String? flowLogId;

  /// The status of the flow log (<code>ACTIVE</code>).
  final String? flowLogStatus;

  /// The Amazon Resource Name (ARN) of the destination for the flow log data.
  final String? logDestination;

  /// The type of destination for the flow log data.
  final LogDestinationType? logDestinationType;

  /// The format of the flow log record.
  final String? logFormat;

  /// The name of the flow log group.
  final String? logGroupName;

  /// The maximum interval of time, in seconds, during which a flow of packets is
  /// captured and aggregated into a flow log record.
  ///
  /// When a network interface is attached to a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instance</a>, the aggregation interval is always 60 seconds (1 minute) or
  /// less, regardless of the specified value.
  ///
  /// Valid Values: <code>60</code> | <code>600</code>
  final int? maxAggregationInterval;

  /// The ID of the resource being monitored.
  final String? resourceId;

  /// The tags for the flow log.
  final List<Tag>? tags;

  /// The type of traffic captured for the flow log.
  final TrafficType? trafficType;

  FlowLog({
    this.creationTime,
    this.deliverCrossAccountRole,
    this.deliverLogsErrorMessage,
    this.deliverLogsPermissionArn,
    this.deliverLogsStatus,
    this.destinationOptions,
    this.flowLogId,
    this.flowLogStatus,
    this.logDestination,
    this.logDestinationType,
    this.logFormat,
    this.logGroupName,
    this.maxAggregationInterval,
    this.resourceId,
    this.tags,
    this.trafficType,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final deliverCrossAccountRole = this.deliverCrossAccountRole;
    final deliverLogsErrorMessage = this.deliverLogsErrorMessage;
    final deliverLogsPermissionArn = this.deliverLogsPermissionArn;
    final deliverLogsStatus = this.deliverLogsStatus;
    final destinationOptions = this.destinationOptions;
    final flowLogId = this.flowLogId;
    final flowLogStatus = this.flowLogStatus;
    final logDestination = this.logDestination;
    final logDestinationType = this.logDestinationType;
    final logFormat = this.logFormat;
    final logGroupName = this.logGroupName;
    final maxAggregationInterval = this.maxAggregationInterval;
    final resourceId = this.resourceId;
    final tags = this.tags;
    final trafficType = this.trafficType;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (deliverCrossAccountRole != null)
        'deliverCrossAccountRole': deliverCrossAccountRole,
      if (deliverLogsErrorMessage != null)
        'deliverLogsErrorMessage': deliverLogsErrorMessage,
      if (deliverLogsPermissionArn != null)
        'deliverLogsPermissionArn': deliverLogsPermissionArn,
      if (deliverLogsStatus != null) 'deliverLogsStatus': deliverLogsStatus,
      if (destinationOptions != null) 'destinationOptions': destinationOptions,
      if (flowLogId != null) 'flowLogId': flowLogId,
      if (flowLogStatus != null) 'flowLogStatus': flowLogStatus,
      if (logDestination != null) 'logDestination': logDestination,
      if (logDestinationType != null)
        'logDestinationType': logDestinationType.value,
      if (logFormat != null) 'logFormat': logFormat,
      if (logGroupName != null) 'logGroupName': logGroupName,
      if (maxAggregationInterval != null)
        'maxAggregationInterval': maxAggregationInterval,
      if (resourceId != null) 'resourceId': resourceId,
      if (tags != null) 'tagSet': tags,
      if (trafficType != null) 'trafficType': trafficType.value,
    };
  }
}

enum FlowLogsResourceType {
  vpc('VPC'),
  subnet('Subnet'),
  networkInterface('NetworkInterface'),
  transitGateway('TransitGateway'),
  transitGatewayAttachment('TransitGatewayAttachment'),
  ;

  final String value;

  const FlowLogsResourceType(this.value);

  static FlowLogsResourceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FlowLogsResourceType'));
}

/// Describes the FPGA accelerator for the instance type.
class FpgaDeviceInfo {
  /// The count of FPGA accelerators for the instance type.
  final int? count;

  /// The manufacturer of the FPGA accelerator.
  final String? manufacturer;

  /// Describes the memory for the FPGA accelerator for the instance type.
  final FpgaDeviceMemoryInfo? memoryInfo;

  /// The name of the FPGA accelerator.
  final String? name;

  FpgaDeviceInfo({
    this.count,
    this.manufacturer,
    this.memoryInfo,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final manufacturer = this.manufacturer;
    final memoryInfo = this.memoryInfo;
    final name = this.name;
    return {
      if (count != null) 'count': count,
      if (manufacturer != null) 'manufacturer': manufacturer,
      if (memoryInfo != null) 'memoryInfo': memoryInfo,
      if (name != null) 'name': name,
    };
  }
}

/// Describes the memory for the FPGA accelerator for the instance type.
class FpgaDeviceMemoryInfo {
  /// The size of the memory available to the FPGA accelerator, in MiB.
  final int? sizeInMiB;

  FpgaDeviceMemoryInfo({
    this.sizeInMiB,
  });

  Map<String, dynamic> toJson() {
    final sizeInMiB = this.sizeInMiB;
    return {
      if (sizeInMiB != null) 'sizeInMiB': sizeInMiB,
    };
  }
}

/// Describes an Amazon FPGA image (AFI).
class FpgaImage {
  /// The date and time the AFI was created.
  final DateTime? createTime;

  /// Indicates whether data retention support is enabled for the AFI.
  final bool? dataRetentionSupport;

  /// The description of the AFI.
  final String? description;

  /// The global FPGA image identifier (AGFI ID).
  final String? fpgaImageGlobalId;

  /// The FPGA image identifier (AFI ID).
  final String? fpgaImageId;

  /// The instance types supported by the AFI.
  final List<String>? instanceTypes;

  /// The name of the AFI.
  final String? name;

  /// The alias of the AFI owner. Possible values include <code>self</code>,
  /// <code>amazon</code>, and <code>aws-marketplace</code>.
  final String? ownerAlias;

  /// The ID of the Amazon Web Services account that owns the AFI.
  final String? ownerId;

  /// Information about the PCI bus.
  final PciId? pciId;

  /// The product codes for the AFI.
  final List<ProductCode>? productCodes;

  /// Indicates whether the AFI is public.
  final bool? public;

  /// The version of the Amazon Web Services Shell that was used to create the
  /// bitstream.
  final String? shellVersion;

  /// Information about the state of the AFI.
  final FpgaImageState? state;

  /// Any tags assigned to the AFI.
  final List<Tag>? tags;

  /// The time of the most recent update to the AFI.
  final DateTime? updateTime;

  FpgaImage({
    this.createTime,
    this.dataRetentionSupport,
    this.description,
    this.fpgaImageGlobalId,
    this.fpgaImageId,
    this.instanceTypes,
    this.name,
    this.ownerAlias,
    this.ownerId,
    this.pciId,
    this.productCodes,
    this.public,
    this.shellVersion,
    this.state,
    this.tags,
    this.updateTime,
  });

  Map<String, dynamic> toJson() {
    final createTime = this.createTime;
    final dataRetentionSupport = this.dataRetentionSupport;
    final description = this.description;
    final fpgaImageGlobalId = this.fpgaImageGlobalId;
    final fpgaImageId = this.fpgaImageId;
    final instanceTypes = this.instanceTypes;
    final name = this.name;
    final ownerAlias = this.ownerAlias;
    final ownerId = this.ownerId;
    final pciId = this.pciId;
    final productCodes = this.productCodes;
    final public = this.public;
    final shellVersion = this.shellVersion;
    final state = this.state;
    final tags = this.tags;
    final updateTime = this.updateTime;
    return {
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (dataRetentionSupport != null)
        'dataRetentionSupport': dataRetentionSupport,
      if (description != null) 'description': description,
      if (fpgaImageGlobalId != null) 'fpgaImageGlobalId': fpgaImageGlobalId,
      if (fpgaImageId != null) 'fpgaImageId': fpgaImageId,
      if (instanceTypes != null) 'instanceTypes': instanceTypes,
      if (name != null) 'name': name,
      if (ownerAlias != null) 'ownerAlias': ownerAlias,
      if (ownerId != null) 'ownerId': ownerId,
      if (pciId != null) 'pciId': pciId,
      if (productCodes != null) 'productCodes': productCodes,
      if (public != null) 'public': public,
      if (shellVersion != null) 'shellVersion': shellVersion,
      if (state != null) 'state': state,
      if (tags != null) 'tags': tags,
      if (updateTime != null) 'updateTime': iso8601ToJson(updateTime),
    };
  }
}

/// Describes an Amazon FPGA image (AFI) attribute.
class FpgaImageAttribute {
  /// The description of the AFI.
  final String? description;

  /// The ID of the AFI.
  final String? fpgaImageId;

  /// The load permissions.
  final List<LoadPermission>? loadPermissions;

  /// The name of the AFI.
  final String? name;

  /// The product codes.
  final List<ProductCode>? productCodes;

  FpgaImageAttribute({
    this.description,
    this.fpgaImageId,
    this.loadPermissions,
    this.name,
    this.productCodes,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final fpgaImageId = this.fpgaImageId;
    final loadPermissions = this.loadPermissions;
    final name = this.name;
    final productCodes = this.productCodes;
    return {
      if (description != null) 'description': description,
      if (fpgaImageId != null) 'fpgaImageId': fpgaImageId,
      if (loadPermissions != null) 'loadPermissions': loadPermissions,
      if (name != null) 'name': name,
      if (productCodes != null) 'productCodes': productCodes,
    };
  }
}

enum FpgaImageAttributeName {
  description('description'),
  name('name'),
  loadPermission('loadPermission'),
  productCodes('productCodes'),
  ;

  final String value;

  const FpgaImageAttributeName(this.value);

  static FpgaImageAttributeName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum FpgaImageAttributeName'));
}

/// Describes the state of the bitstream generation process for an Amazon FPGA
/// image (AFI).
class FpgaImageState {
  /// The state. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// <code>pending</code> - AFI bitstream generation is in progress.
  /// </li>
  /// <li>
  /// <code>available</code> - The AFI is available for use.
  /// </li>
  /// <li>
  /// <code>failed</code> - AFI bitstream generation failed.
  /// </li>
  /// <li>
  /// <code>unavailable</code> - The AFI is no longer available for use.
  /// </li>
  /// </ul>
  final FpgaImageStateCode? code;

  /// If the state is <code>failed</code>, this is the error message.
  final String? message;

  FpgaImageState({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum FpgaImageStateCode {
  pending('pending'),
  failed('failed'),
  available('available'),
  unavailable('unavailable'),
  ;

  final String value;

  const FpgaImageStateCode(this.value);

  static FpgaImageStateCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FpgaImageStateCode'));
}

/// Describes the FPGAs for the instance type.
class FpgaInfo {
  /// Describes the FPGAs for the instance type.
  final List<FpgaDeviceInfo>? fpgas;

  /// The total memory of all FPGA accelerators for the instance type.
  final int? totalFpgaMemoryInMiB;

  FpgaInfo({
    this.fpgas,
    this.totalFpgaMemoryInMiB,
  });

  Map<String, dynamic> toJson() {
    final fpgas = this.fpgas;
    final totalFpgaMemoryInMiB = this.totalFpgaMemoryInMiB;
    return {
      if (fpgas != null) 'fpgas': fpgas,
      if (totalFpgaMemoryInMiB != null)
        'totalFpgaMemoryInMiB': totalFpgaMemoryInMiB,
    };
  }
}

enum GatewayAssociationState {
  associated('associated'),
  notAssociated('not-associated'),
  associating('associating'),
  disassociating('disassociating'),
  ;

  final String value;

  const GatewayAssociationState(this.value);

  static GatewayAssociationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum GatewayAssociationState'));
}

enum GatewayType {
  ipsec_1('ipsec.1'),
  ;

  final String value;

  const GatewayType(this.value);

  static GatewayType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum GatewayType'));
}

class GetAssociatedEnclaveCertificateIamRolesResult {
  /// Information about the associated IAM roles.
  final List<AssociatedRole>? associatedRoles;

  GetAssociatedEnclaveCertificateIamRolesResult({
    this.associatedRoles,
  });

  Map<String, dynamic> toJson() {
    final associatedRoles = this.associatedRoles;
    return {
      if (associatedRoles != null) 'associatedRoleSet': associatedRoles,
    };
  }
}

class GetAssociatedIpv6PoolCidrsResult {
  /// Information about the IPv6 CIDR block associations.
  final List<Ipv6CidrAssociation>? ipv6CidrAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetAssociatedIpv6PoolCidrsResult({
    this.ipv6CidrAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipv6CidrAssociations = this.ipv6CidrAssociations;
    final nextToken = this.nextToken;
    return {
      if (ipv6CidrAssociations != null)
        'ipv6CidrAssociationSet': ipv6CidrAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetAwsNetworkPerformanceDataResult {
  /// The list of data responses.
  final List<DataResponse>? dataResponses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetAwsNetworkPerformanceDataResult({
    this.dataResponses,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final dataResponses = this.dataResponses;
    final nextToken = this.nextToken;
    return {
      if (dataResponses != null) 'dataResponseSet': dataResponses,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetCapacityReservationUsageResult {
  /// The remaining capacity. Indicates the number of instances that can be
  /// launched in the Capacity Reservation.
  final int? availableInstanceCount;

  /// The ID of the Capacity Reservation.
  final String? capacityReservationId;

  /// The type of instance for which the Capacity Reservation reserves capacity.
  final String? instanceType;

  /// Information about the Capacity Reservation usage.
  final List<InstanceUsage>? instanceUsages;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// The current state of the Capacity Reservation. A Capacity Reservation can be
  /// in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The Capacity Reservation is active and the capacity is
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation expired automatically at the
  /// date and time specified in your request. The reserved capacity is no longer
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation was cancelled. The
  /// reserved capacity is no longer available for your use.
  /// </li>
  /// <li>
  /// <code>pending</code> - The Capacity Reservation request was successful but
  /// the capacity provisioning is still pending.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation request has failed. A request
  /// might fail due to invalid request parameters, capacity constraints, or
  /// instance limit constraints. Failed requests are retained for 60 minutes.
  /// </li>
  /// </ul>
  final CapacityReservationState? state;

  /// The number of instances for which the Capacity Reservation reserves
  /// capacity.
  final int? totalInstanceCount;

  GetCapacityReservationUsageResult({
    this.availableInstanceCount,
    this.capacityReservationId,
    this.instanceType,
    this.instanceUsages,
    this.nextToken,
    this.state,
    this.totalInstanceCount,
  });

  Map<String, dynamic> toJson() {
    final availableInstanceCount = this.availableInstanceCount;
    final capacityReservationId = this.capacityReservationId;
    final instanceType = this.instanceType;
    final instanceUsages = this.instanceUsages;
    final nextToken = this.nextToken;
    final state = this.state;
    final totalInstanceCount = this.totalInstanceCount;
    return {
      if (availableInstanceCount != null)
        'availableInstanceCount': availableInstanceCount,
      if (capacityReservationId != null)
        'capacityReservationId': capacityReservationId,
      if (instanceType != null) 'instanceType': instanceType,
      if (instanceUsages != null) 'instanceUsageSet': instanceUsages,
      if (nextToken != null) 'nextToken': nextToken,
      if (state != null) 'state': state.value,
      if (totalInstanceCount != null) 'totalInstanceCount': totalInstanceCount,
    };
  }
}

class GetCoipPoolUsageResult {
  /// Information about the address usage.
  final List<CoipAddressUsage>? coipAddressUsages;

  /// The ID of the customer-owned address pool.
  final String? coipPoolId;

  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetCoipPoolUsageResult({
    this.coipAddressUsages,
    this.coipPoolId,
    this.localGatewayRouteTableId,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final coipAddressUsages = this.coipAddressUsages;
    final coipPoolId = this.coipPoolId;
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    final nextToken = this.nextToken;
    return {
      if (coipAddressUsages != null) 'coipAddressUsageSet': coipAddressUsages,
      if (coipPoolId != null) 'coipPoolId': coipPoolId,
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetConsoleOutputResult {
  /// The ID of the instance.
  final String? instanceId;

  /// The console output, base64-encoded. If you are using a command line tool,
  /// the tool decodes the output for you.
  final String? output;

  /// The time at which the output was last updated.
  final DateTime? timestamp;

  GetConsoleOutputResult({
    this.instanceId,
    this.output,
    this.timestamp,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final output = this.output;
    final timestamp = this.timestamp;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (output != null) 'output': output,
      if (timestamp != null) 'timestamp': iso8601ToJson(timestamp),
    };
  }
}

class GetConsoleScreenshotResult {
  /// The data that comprises the image.
  final String? imageData;

  /// The ID of the instance.
  final String? instanceId;

  GetConsoleScreenshotResult({
    this.imageData,
    this.instanceId,
  });

  Map<String, dynamic> toJson() {
    final imageData = this.imageData;
    final instanceId = this.instanceId;
    return {
      if (imageData != null) 'imageData': imageData,
      if (instanceId != null) 'instanceId': instanceId,
    };
  }
}

class GetDefaultCreditSpecificationResult {
  /// The default credit option for CPU usage of the instance family.
  final InstanceFamilyCreditSpecification? instanceFamilyCreditSpecification;

  GetDefaultCreditSpecificationResult({
    this.instanceFamilyCreditSpecification,
  });

  Map<String, dynamic> toJson() {
    final instanceFamilyCreditSpecification =
        this.instanceFamilyCreditSpecification;
    return {
      if (instanceFamilyCreditSpecification != null)
        'instanceFamilyCreditSpecification': instanceFamilyCreditSpecification,
    };
  }
}

class GetEbsDefaultKmsKeyIdResult {
  /// The Amazon Resource Name (ARN) of the default KMS key for encryption by
  /// default.
  final String? kmsKeyId;

  GetEbsDefaultKmsKeyIdResult({
    this.kmsKeyId,
  });

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
    };
  }
}

class GetEbsEncryptionByDefaultResult {
  /// Indicates whether encryption by default is enabled.
  final bool? ebsEncryptionByDefault;

  /// Reserved for future use.
  final SSEType? sseType;

  GetEbsEncryptionByDefaultResult({
    this.ebsEncryptionByDefault,
    this.sseType,
  });

  Map<String, dynamic> toJson() {
    final ebsEncryptionByDefault = this.ebsEncryptionByDefault;
    final sseType = this.sseType;
    return {
      if (ebsEncryptionByDefault != null)
        'ebsEncryptionByDefault': ebsEncryptionByDefault,
      if (sseType != null) 'sseType': sseType.value,
    };
  }
}

class GetFlowLogsIntegrationTemplateResult {
  /// The generated CloudFormation template.
  final String? result;

  GetFlowLogsIntegrationTemplateResult({
    this.result,
  });

  Map<String, dynamic> toJson() {
    final result = this.result;
    return {
      if (result != null) 'result': result,
    };
  }
}

class GetGroupsForCapacityReservationResult {
  /// Information about the resource groups to which the Capacity Reservation has
  /// been added.
  final List<CapacityReservationGroup>? capacityReservationGroups;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetGroupsForCapacityReservationResult({
    this.capacityReservationGroups,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationGroups = this.capacityReservationGroups;
    final nextToken = this.nextToken;
    return {
      if (capacityReservationGroups != null)
        'capacityReservationGroupSet': capacityReservationGroups,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetHostReservationPurchasePreviewResult {
  /// The currency in which the <code>totalUpfrontPrice</code> and
  /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The purchase information of the Dedicated Host reservation and the Dedicated
  /// Hosts associated with it.
  final List<Purchase>? purchase;

  /// The potential total hourly price of the reservation per hour.
  final String? totalHourlyPrice;

  /// The potential total upfront price. This is billed immediately.
  final String? totalUpfrontPrice;

  GetHostReservationPurchasePreviewResult({
    this.currencyCode,
    this.purchase,
    this.totalHourlyPrice,
    this.totalUpfrontPrice,
  });

  Map<String, dynamic> toJson() {
    final currencyCode = this.currencyCode;
    final purchase = this.purchase;
    final totalHourlyPrice = this.totalHourlyPrice;
    final totalUpfrontPrice = this.totalUpfrontPrice;
    return {
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (purchase != null) 'purchase': purchase,
      if (totalHourlyPrice != null) 'totalHourlyPrice': totalHourlyPrice,
      if (totalUpfrontPrice != null) 'totalUpfrontPrice': totalUpfrontPrice,
    };
  }
}

class GetImageBlockPublicAccessStateResult {
  /// The current state of block public access for AMIs at the account level in
  /// the specified Amazon Web Services Region.
  ///
  /// Possible values:
  ///
  /// <ul>
  /// <li>
  /// <code>block-new-sharing</code> - Any attempt to publicly share your AMIs in
  /// the specified Region is blocked.
  /// </li>
  /// <li>
  /// <code>unblocked</code> - Your AMIs in the specified Region can be publicly
  /// shared.
  /// </li>
  /// </ul>
  final String? imageBlockPublicAccessState;

  GetImageBlockPublicAccessStateResult({
    this.imageBlockPublicAccessState,
  });

  Map<String, dynamic> toJson() {
    final imageBlockPublicAccessState = this.imageBlockPublicAccessState;
    return {
      if (imageBlockPublicAccessState != null)
        'imageBlockPublicAccessState': imageBlockPublicAccessState,
    };
  }
}

class GetInstanceMetadataDefaultsResult {
  /// The account-level default IMDS settings.
  final InstanceMetadataDefaultsResponse? accountLevel;

  GetInstanceMetadataDefaultsResult({
    this.accountLevel,
  });

  Map<String, dynamic> toJson() {
    final accountLevel = this.accountLevel;
    return {
      if (accountLevel != null) 'accountLevel': accountLevel,
    };
  }
}

class GetInstanceTpmEkPubResult {
  /// The ID of the instance.
  final String? instanceId;

  /// The public endorsement key format.
  final EkPubKeyFormat? keyFormat;

  /// The public endorsement key type.
  final EkPubKeyType? keyType;

  /// The public endorsement key material.
  final String? keyValue;

  GetInstanceTpmEkPubResult({
    this.instanceId,
    this.keyFormat,
    this.keyType,
    this.keyValue,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final keyFormat = this.keyFormat;
    final keyType = this.keyType;
    final keyValue = this.keyValue;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (keyFormat != null) 'keyFormat': keyFormat.value,
      if (keyType != null) 'keyType': keyType.value,
      if (keyValue != null) 'keyValue': keyValue,
    };
  }
}

class GetInstanceTypesFromInstanceRequirementsResult {
  /// The instance types with the specified instance attributes.
  final List<InstanceTypeInfoFromInstanceRequirements>? instanceTypes;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  GetInstanceTypesFromInstanceRequirementsResult({
    this.instanceTypes,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final instanceTypes = this.instanceTypes;
    final nextToken = this.nextToken;
    return {
      if (instanceTypes != null) 'instanceTypeSet': instanceTypes,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetInstanceUefiDataResult {
  /// The ID of the instance from which to retrieve the UEFI data.
  final String? instanceId;

  /// Base64 representation of the non-volatile UEFI variable store.
  final String? uefiData;

  GetInstanceUefiDataResult({
    this.instanceId,
    this.uefiData,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final uefiData = this.uefiData;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (uefiData != null) 'uefiData': uefiData,
    };
  }
}

class GetIpamAddressHistoryResult {
  /// A historical record for a CIDR within an IPAM scope. If the CIDR is
  /// associated with an EC2 instance, you will see an object in the response for
  /// the instance and one for the network interface.
  final List<IpamAddressHistoryRecord>? historyRecords;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetIpamAddressHistoryResult({
    this.historyRecords,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final historyRecords = this.historyRecords;
    final nextToken = this.nextToken;
    return {
      if (historyRecords != null) 'historyRecordSet': historyRecords,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetIpamDiscoveredAccountsResult {
  /// Discovered accounts.
  final List<IpamDiscoveredAccount>? ipamDiscoveredAccounts;

  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  final String? nextToken;

  GetIpamDiscoveredAccountsResult({
    this.ipamDiscoveredAccounts,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamDiscoveredAccounts = this.ipamDiscoveredAccounts;
    final nextToken = this.nextToken;
    return {
      if (ipamDiscoveredAccounts != null)
        'ipamDiscoveredAccountSet': ipamDiscoveredAccounts,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetIpamDiscoveredPublicAddressesResult {
  /// IPAM discovered public addresses.
  final List<IpamDiscoveredPublicAddress>? ipamDiscoveredPublicAddresses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// The oldest successful resource discovery time.
  final DateTime? oldestSampleTime;

  GetIpamDiscoveredPublicAddressesResult({
    this.ipamDiscoveredPublicAddresses,
    this.nextToken,
    this.oldestSampleTime,
  });

  Map<String, dynamic> toJson() {
    final ipamDiscoveredPublicAddresses = this.ipamDiscoveredPublicAddresses;
    final nextToken = this.nextToken;
    final oldestSampleTime = this.oldestSampleTime;
    return {
      if (ipamDiscoveredPublicAddresses != null)
        'ipamDiscoveredPublicAddressSet': ipamDiscoveredPublicAddresses,
      if (nextToken != null) 'nextToken': nextToken,
      if (oldestSampleTime != null)
        'oldestSampleTime': iso8601ToJson(oldestSampleTime),
    };
  }
}

class GetIpamDiscoveredResourceCidrsResult {
  /// Discovered resource CIDRs.
  final List<IpamDiscoveredResourceCidr>? ipamDiscoveredResourceCidrs;

  /// Specify the pagination token from a previous request to retrieve the next
  /// page of results.
  final String? nextToken;

  GetIpamDiscoveredResourceCidrsResult({
    this.ipamDiscoveredResourceCidrs,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamDiscoveredResourceCidrs = this.ipamDiscoveredResourceCidrs;
    final nextToken = this.nextToken;
    return {
      if (ipamDiscoveredResourceCidrs != null)
        'ipamDiscoveredResourceCidrSet': ipamDiscoveredResourceCidrs,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetIpamPoolAllocationsResult {
  /// The IPAM pool allocations you want information on.
  final List<IpamPoolAllocation>? ipamPoolAllocations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetIpamPoolAllocationsResult({
    this.ipamPoolAllocations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamPoolAllocations = this.ipamPoolAllocations;
    final nextToken = this.nextToken;
    return {
      if (ipamPoolAllocations != null)
        'ipamPoolAllocationSet': ipamPoolAllocations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetIpamPoolCidrsResult {
  /// Information about the CIDRs provisioned to an IPAM pool.
  final List<IpamPoolCidr>? ipamPoolCidrs;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetIpamPoolCidrsResult({
    this.ipamPoolCidrs,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamPoolCidrs = this.ipamPoolCidrs;
    final nextToken = this.nextToken;
    return {
      if (ipamPoolCidrs != null) 'ipamPoolCidrSet': ipamPoolCidrs,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetIpamResourceCidrsResult {
  /// The resource CIDRs.
  final List<IpamResourceCidr>? ipamResourceCidrs;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetIpamResourceCidrsResult({
    this.ipamResourceCidrs,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceCidrs = this.ipamResourceCidrs;
    final nextToken = this.nextToken;
    return {
      if (ipamResourceCidrs != null) 'ipamResourceCidrSet': ipamResourceCidrs,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetLaunchTemplateDataResult {
  /// The instance data.
  final ResponseLaunchTemplateData? launchTemplateData;

  GetLaunchTemplateDataResult({
    this.launchTemplateData,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateData = this.launchTemplateData;
    return {
      if (launchTemplateData != null) 'launchTemplateData': launchTemplateData,
    };
  }
}

class GetManagedPrefixListAssociationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the associations.
  final List<PrefixListAssociation>? prefixListAssociations;

  GetManagedPrefixListAssociationsResult({
    this.nextToken,
    this.prefixListAssociations,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final prefixListAssociations = this.prefixListAssociations;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (prefixListAssociations != null)
        'prefixListAssociationSet': prefixListAssociations,
    };
  }
}

class GetManagedPrefixListEntriesResult {
  /// Information about the prefix list entries.
  final List<PrefixListEntry>? entries;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetManagedPrefixListEntriesResult({
    this.entries,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final entries = this.entries;
    final nextToken = this.nextToken;
    return {
      if (entries != null) 'entrySet': entries,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetNetworkInsightsAccessScopeAnalysisFindingsResult {
  /// The findings associated with Network Access Scope Analysis.
  final List<AccessScopeAnalysisFinding>? analysisFindings;

  /// The status of Network Access Scope Analysis.
  final AnalysisStatus? analysisStatus;

  /// The ID of the Network Access Scope analysis.
  final String? networkInsightsAccessScopeAnalysisId;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetNetworkInsightsAccessScopeAnalysisFindingsResult({
    this.analysisFindings,
    this.analysisStatus,
    this.networkInsightsAccessScopeAnalysisId,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final analysisFindings = this.analysisFindings;
    final analysisStatus = this.analysisStatus;
    final networkInsightsAccessScopeAnalysisId =
        this.networkInsightsAccessScopeAnalysisId;
    final nextToken = this.nextToken;
    return {
      if (analysisFindings != null) 'analysisFindingSet': analysisFindings,
      if (analysisStatus != null) 'analysisStatus': analysisStatus.value,
      if (networkInsightsAccessScopeAnalysisId != null)
        'networkInsightsAccessScopeAnalysisId':
            networkInsightsAccessScopeAnalysisId,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetNetworkInsightsAccessScopeContentResult {
  /// The Network Access Scope content.
  final NetworkInsightsAccessScopeContent? networkInsightsAccessScopeContent;

  GetNetworkInsightsAccessScopeContentResult({
    this.networkInsightsAccessScopeContent,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScopeContent =
        this.networkInsightsAccessScopeContent;
    return {
      if (networkInsightsAccessScopeContent != null)
        'networkInsightsAccessScopeContent': networkInsightsAccessScopeContent,
    };
  }
}

class GetPasswordDataResult {
  /// The ID of the Windows instance.
  final String? instanceId;

  /// The password of the instance. Returns an empty string if the password is not
  /// available.
  final String? passwordData;

  /// The time the data was last updated.
  final DateTime? timestamp;

  GetPasswordDataResult({
    this.instanceId,
    this.passwordData,
    this.timestamp,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final passwordData = this.passwordData;
    final timestamp = this.timestamp;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (passwordData != null) 'passwordData': passwordData,
      if (timestamp != null) 'timestamp': iso8601ToJson(timestamp),
    };
  }
}

/// Contains the output of GetReservedInstancesExchangeQuote.
class GetReservedInstancesExchangeQuoteResult {
  /// The currency of the transaction.
  final String? currencyCode;

  /// If <code>true</code>, the exchange is valid. If <code>false</code>, the
  /// exchange cannot be completed.
  final bool? isValidExchange;

  /// The new end date of the reservation term.
  final DateTime? outputReservedInstancesWillExpireAt;

  /// The total true upfront charge for the exchange.
  final String? paymentDue;

  /// The cost associated with the Reserved Instance.
  final ReservationValue? reservedInstanceValueRollup;

  /// The configuration of your Convertible Reserved Instances.
  final List<ReservedInstanceReservationValue>? reservedInstanceValueSet;

  /// The cost associated with the Reserved Instance.
  final ReservationValue? targetConfigurationValueRollup;

  /// The values of the target Convertible Reserved Instances.
  final List<TargetReservationValue>? targetConfigurationValueSet;

  /// Describes the reason why the exchange cannot be completed.
  final String? validationFailureReason;

  GetReservedInstancesExchangeQuoteResult({
    this.currencyCode,
    this.isValidExchange,
    this.outputReservedInstancesWillExpireAt,
    this.paymentDue,
    this.reservedInstanceValueRollup,
    this.reservedInstanceValueSet,
    this.targetConfigurationValueRollup,
    this.targetConfigurationValueSet,
    this.validationFailureReason,
  });

  Map<String, dynamic> toJson() {
    final currencyCode = this.currencyCode;
    final isValidExchange = this.isValidExchange;
    final outputReservedInstancesWillExpireAt =
        this.outputReservedInstancesWillExpireAt;
    final paymentDue = this.paymentDue;
    final reservedInstanceValueRollup = this.reservedInstanceValueRollup;
    final reservedInstanceValueSet = this.reservedInstanceValueSet;
    final targetConfigurationValueRollup = this.targetConfigurationValueRollup;
    final targetConfigurationValueSet = this.targetConfigurationValueSet;
    final validationFailureReason = this.validationFailureReason;
    return {
      if (currencyCode != null) 'currencyCode': currencyCode,
      if (isValidExchange != null) 'isValidExchange': isValidExchange,
      if (outputReservedInstancesWillExpireAt != null)
        'outputReservedInstancesWillExpireAt':
            iso8601ToJson(outputReservedInstancesWillExpireAt),
      if (paymentDue != null) 'paymentDue': paymentDue,
      if (reservedInstanceValueRollup != null)
        'reservedInstanceValueRollup': reservedInstanceValueRollup,
      if (reservedInstanceValueSet != null)
        'reservedInstanceValueSet': reservedInstanceValueSet,
      if (targetConfigurationValueRollup != null)
        'targetConfigurationValueRollup': targetConfigurationValueRollup,
      if (targetConfigurationValueSet != null)
        'targetConfigurationValueSet': targetConfigurationValueSet,
      if (validationFailureReason != null)
        'validationFailureReason': validationFailureReason,
    };
  }
}

class GetSecurityGroupsForVpcResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The security group that can be used by interfaces in the VPC.
  final List<SecurityGroupForVpc>? securityGroupForVpcs;

  GetSecurityGroupsForVpcResult({
    this.nextToken,
    this.securityGroupForVpcs,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final securityGroupForVpcs = this.securityGroupForVpcs;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (securityGroupForVpcs != null)
        'securityGroupForVpcSet': securityGroupForVpcs,
    };
  }
}

class GetSerialConsoleAccessStatusResult {
  /// If <code>true</code>, access to the EC2 serial console of all instances is
  /// enabled for your account. If <code>false</code>, access to the EC2 serial
  /// console of all instances is disabled for your account.
  final bool? serialConsoleAccessEnabled;

  GetSerialConsoleAccessStatusResult({
    this.serialConsoleAccessEnabled,
  });

  Map<String, dynamic> toJson() {
    final serialConsoleAccessEnabled = this.serialConsoleAccessEnabled;
    return {
      if (serialConsoleAccessEnabled != null)
        'serialConsoleAccessEnabled': serialConsoleAccessEnabled,
    };
  }
}

class GetSnapshotBlockPublicAccessStateResult {
  /// The current state of block public access for snapshots. Possible values
  /// include:
  ///
  /// <ul>
  /// <li>
  /// <code>block-all-sharing</code> - All public sharing of snapshots is blocked.
  /// Users in the account can't request new public sharing. Additionally,
  /// snapshots that were already publicly shared are treated as private and are
  /// not publicly available.
  /// </li>
  /// <li>
  /// <code>block-new-sharing</code> - Only new public sharing of snapshots is
  /// blocked. Users in the account can't request new public sharing. However,
  /// snapshots that were already publicly shared, remain publicly available.
  /// </li>
  /// <li>
  /// <code>unblocked</code> - Public sharing is not blocked. Users can publicly
  /// share snapshots.
  /// </li>
  /// </ul>
  final SnapshotBlockPublicAccessState? state;

  GetSnapshotBlockPublicAccessStateResult({
    this.state,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    return {
      if (state != null) 'state': state.value,
    };
  }
}

class GetSpotPlacementScoresResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// The Spot placement score for the top 10 Regions or Availability Zones,
  /// scored on a scale from 1 to 10. Each score&#x2028; reflects how likely it is
  /// that each Region or Availability Zone will succeed at fulfilling the
  /// specified target capacity&#x2028; <i>at the time of the Spot placement score
  /// request</i>. A score of <code>10</code> means that your Spot capacity
  /// request is highly likely to succeed in that Region or Availability Zone.
  ///
  /// If you request a Spot placement score for Regions, a high score assumes that
  /// your fleet request will be configured to use all Availability Zones and the
  /// <code>capacity-optimized</code> allocation strategy. If you request a Spot
  /// placement score for Availability Zones, a high score assumes that your fleet
  /// request will be configured to use a single Availability Zone and the
  /// <code>capacity-optimized</code> allocation strategy.
  ///
  /// Different&#x2028; Regions or Availability Zones might return the same score.
  /// <note>
  /// The Spot placement score serves as a recommendation only. No score
  /// guarantees that your Spot request will be fully or partially fulfilled.
  /// </note>
  final List<SpotPlacementScore>? spotPlacementScores;

  GetSpotPlacementScoresResult({
    this.nextToken,
    this.spotPlacementScores,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final spotPlacementScores = this.spotPlacementScores;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (spotPlacementScores != null)
        'spotPlacementScoreSet': spotPlacementScores,
    };
  }
}

class GetSubnetCidrReservationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the IPv4 subnet CIDR reservations.
  final List<SubnetCidrReservation>? subnetIpv4CidrReservations;

  /// Information about the IPv6 subnet CIDR reservations.
  final List<SubnetCidrReservation>? subnetIpv6CidrReservations;

  GetSubnetCidrReservationsResult({
    this.nextToken,
    this.subnetIpv4CidrReservations,
    this.subnetIpv6CidrReservations,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final subnetIpv4CidrReservations = this.subnetIpv4CidrReservations;
    final subnetIpv6CidrReservations = this.subnetIpv6CidrReservations;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (subnetIpv4CidrReservations != null)
        'subnetIpv4CidrReservationSet': subnetIpv4CidrReservations,
      if (subnetIpv6CidrReservations != null)
        'subnetIpv6CidrReservationSet': subnetIpv6CidrReservations,
    };
  }
}

class GetTransitGatewayAttachmentPropagationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the propagation route tables.
  final List<TransitGatewayAttachmentPropagation>?
      transitGatewayAttachmentPropagations;

  GetTransitGatewayAttachmentPropagationsResult({
    this.nextToken,
    this.transitGatewayAttachmentPropagations,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayAttachmentPropagations =
        this.transitGatewayAttachmentPropagations;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayAttachmentPropagations != null)
        'transitGatewayAttachmentPropagations':
            transitGatewayAttachmentPropagations,
    };
  }
}

class GetTransitGatewayMulticastDomainAssociationsResult {
  /// Information about the multicast domain associations.
  final List<TransitGatewayMulticastDomainAssociation>?
      multicastDomainAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetTransitGatewayMulticastDomainAssociationsResult({
    this.multicastDomainAssociations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final multicastDomainAssociations = this.multicastDomainAssociations;
    final nextToken = this.nextToken;
    return {
      if (multicastDomainAssociations != null)
        'multicastDomainAssociations': multicastDomainAssociations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetTransitGatewayPolicyTableAssociationsResult {
  /// Returns details about the transit gateway policy table association.
  final List<TransitGatewayPolicyTableAssociation>? associations;

  /// The token for the next page of results.
  final String? nextToken;

  GetTransitGatewayPolicyTableAssociationsResult({
    this.associations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    final nextToken = this.nextToken;
    return {
      if (associations != null) 'associations': associations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetTransitGatewayPolicyTableEntriesResult {
  /// The entries for the transit gateway policy table.
  final List<TransitGatewayPolicyTableEntry>? transitGatewayPolicyTableEntries;

  GetTransitGatewayPolicyTableEntriesResult({
    this.transitGatewayPolicyTableEntries,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPolicyTableEntries =
        this.transitGatewayPolicyTableEntries;
    return {
      if (transitGatewayPolicyTableEntries != null)
        'transitGatewayPolicyTableEntries': transitGatewayPolicyTableEntries,
    };
  }
}

class GetTransitGatewayPrefixListReferencesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the prefix list references.
  final List<TransitGatewayPrefixListReference>?
      transitGatewayPrefixListReferences;

  GetTransitGatewayPrefixListReferencesResult({
    this.nextToken,
    this.transitGatewayPrefixListReferences,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayPrefixListReferences =
        this.transitGatewayPrefixListReferences;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayPrefixListReferences != null)
        'transitGatewayPrefixListReferenceSet':
            transitGatewayPrefixListReferences,
    };
  }
}

class GetTransitGatewayRouteTableAssociationsResult {
  /// Information about the associations.
  final List<TransitGatewayRouteTableAssociation>? associations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  GetTransitGatewayRouteTableAssociationsResult({
    this.associations,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    final nextToken = this.nextToken;
    return {
      if (associations != null) 'associations': associations,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class GetTransitGatewayRouteTablePropagationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the route table propagations.
  final List<TransitGatewayRouteTablePropagation>?
      transitGatewayRouteTablePropagations;

  GetTransitGatewayRouteTablePropagationsResult({
    this.nextToken,
    this.transitGatewayRouteTablePropagations,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final transitGatewayRouteTablePropagations =
        this.transitGatewayRouteTablePropagations;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (transitGatewayRouteTablePropagations != null)
        'transitGatewayRouteTablePropagations':
            transitGatewayRouteTablePropagations,
    };
  }
}

class GetVerifiedAccessEndpointPolicyResult {
  /// The Verified Access policy document.
  final String? policyDocument;

  /// The status of the Verified Access policy.
  final bool? policyEnabled;

  GetVerifiedAccessEndpointPolicyResult({
    this.policyDocument,
    this.policyEnabled,
  });

  Map<String, dynamic> toJson() {
    final policyDocument = this.policyDocument;
    final policyEnabled = this.policyEnabled;
    return {
      if (policyDocument != null) 'policyDocument': policyDocument,
      if (policyEnabled != null) 'policyEnabled': policyEnabled,
    };
  }
}

class GetVerifiedAccessGroupPolicyResult {
  /// The Verified Access policy document.
  final String? policyDocument;

  /// The status of the Verified Access policy.
  final bool? policyEnabled;

  GetVerifiedAccessGroupPolicyResult({
    this.policyDocument,
    this.policyEnabled,
  });

  Map<String, dynamic> toJson() {
    final policyDocument = this.policyDocument;
    final policyEnabled = this.policyEnabled;
    return {
      if (policyDocument != null) 'policyDocument': policyDocument,
      if (policyEnabled != null) 'policyEnabled': policyEnabled,
    };
  }
}

class GetVpnConnectionDeviceSampleConfigurationResult {
  /// Sample configuration file for the specified customer gateway device.
  final String? vpnConnectionDeviceSampleConfiguration;

  GetVpnConnectionDeviceSampleConfigurationResult({
    this.vpnConnectionDeviceSampleConfiguration,
  });

  Map<String, dynamic> toJson() {
    final vpnConnectionDeviceSampleConfiguration =
        this.vpnConnectionDeviceSampleConfiguration;
    return {
      if (vpnConnectionDeviceSampleConfiguration != null)
        'vpnConnectionDeviceSampleConfiguration':
            vpnConnectionDeviceSampleConfiguration,
    };
  }
}

class GetVpnConnectionDeviceTypesResult {
  /// The <code>NextToken</code> value to include in a future
  /// <code>GetVpnConnectionDeviceTypes</code> request. When the results of a
  /// <code>GetVpnConnectionDeviceTypes</code> request exceed
  /// <code>MaxResults</code>, this value can be used to retrieve the next page of
  /// results. This value is null when there are no more results to return.
  final String? nextToken;

  /// List of customer gateway devices that have a sample configuration file
  /// available for use.
  final List<VpnConnectionDeviceType>? vpnConnectionDeviceTypes;

  GetVpnConnectionDeviceTypesResult({
    this.nextToken,
    this.vpnConnectionDeviceTypes,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final vpnConnectionDeviceTypes = this.vpnConnectionDeviceTypes;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (vpnConnectionDeviceTypes != null)
        'vpnConnectionDeviceTypeSet': vpnConnectionDeviceTypes,
    };
  }
}

class GetVpnTunnelReplacementStatusResult {
  /// The ID of the customer gateway.
  final String? customerGatewayId;

  /// Get details of pending tunnel endpoint maintenance.
  final MaintenanceDetails? maintenanceDetails;

  /// The ID of the transit gateway associated with the VPN connection.
  final String? transitGatewayId;

  /// The ID of the Site-to-Site VPN connection.
  final String? vpnConnectionId;

  /// The ID of the virtual private gateway.
  final String? vpnGatewayId;

  /// The external IP address of the VPN tunnel.
  final String? vpnTunnelOutsideIpAddress;

  GetVpnTunnelReplacementStatusResult({
    this.customerGatewayId,
    this.maintenanceDetails,
    this.transitGatewayId,
    this.vpnConnectionId,
    this.vpnGatewayId,
    this.vpnTunnelOutsideIpAddress,
  });

  Map<String, dynamic> toJson() {
    final customerGatewayId = this.customerGatewayId;
    final maintenanceDetails = this.maintenanceDetails;
    final transitGatewayId = this.transitGatewayId;
    final vpnConnectionId = this.vpnConnectionId;
    final vpnGatewayId = this.vpnGatewayId;
    final vpnTunnelOutsideIpAddress = this.vpnTunnelOutsideIpAddress;
    return {
      if (customerGatewayId != null) 'customerGatewayId': customerGatewayId,
      if (maintenanceDetails != null) 'maintenanceDetails': maintenanceDetails,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (vpnConnectionId != null) 'vpnConnectionId': vpnConnectionId,
      if (vpnGatewayId != null) 'vpnGatewayId': vpnGatewayId,
      if (vpnTunnelOutsideIpAddress != null)
        'vpnTunnelOutsideIpAddress': vpnTunnelOutsideIpAddress,
    };
  }
}

/// Describes the GPU accelerators for the instance type.
class GpuDeviceInfo {
  /// The number of GPUs for the instance type.
  final int? count;

  /// The manufacturer of the GPU accelerator.
  final String? manufacturer;

  /// Describes the memory available to the GPU accelerator.
  final GpuDeviceMemoryInfo? memoryInfo;

  /// The name of the GPU accelerator.
  final String? name;

  GpuDeviceInfo({
    this.count,
    this.manufacturer,
    this.memoryInfo,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final manufacturer = this.manufacturer;
    final memoryInfo = this.memoryInfo;
    final name = this.name;
    return {
      if (count != null) 'count': count,
      if (manufacturer != null) 'manufacturer': manufacturer,
      if (memoryInfo != null) 'memoryInfo': memoryInfo,
      if (name != null) 'name': name,
    };
  }
}

/// Describes the memory available to the GPU accelerator.
class GpuDeviceMemoryInfo {
  /// The size of the memory available to the GPU accelerator, in MiB.
  final int? sizeInMiB;

  GpuDeviceMemoryInfo({
    this.sizeInMiB,
  });

  Map<String, dynamic> toJson() {
    final sizeInMiB = this.sizeInMiB;
    return {
      if (sizeInMiB != null) 'sizeInMiB': sizeInMiB,
    };
  }
}

/// Describes the GPU accelerators for the instance type.
class GpuInfo {
  /// Describes the GPU accelerators for the instance type.
  final List<GpuDeviceInfo>? gpus;

  /// The total size of the memory for the GPU accelerators for the instance type,
  /// in MiB.
  final int? totalGpuMemoryInMiB;

  GpuInfo({
    this.gpus,
    this.totalGpuMemoryInMiB,
  });

  Map<String, dynamic> toJson() {
    final gpus = this.gpus;
    final totalGpuMemoryInMiB = this.totalGpuMemoryInMiB;
    return {
      if (gpus != null) 'gpus': gpus,
      if (totalGpuMemoryInMiB != null)
        'totalGpuMemoryInMiB': totalGpuMemoryInMiB,
    };
  }
}

/// Describes a security group.
class GroupIdentifier {
  /// The ID of the security group.
  final String? groupId;

  /// The name of the security group.
  final String? groupName;

  GroupIdentifier({
    this.groupId,
    this.groupName,
  });

  Map<String, dynamic> toJson() {
    final groupId = this.groupId;
    final groupName = this.groupName;
    return {
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
    };
  }
}

/// Indicates whether your instance is configured for hibernation. This
/// parameter is valid only if the instance meets the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
/// prerequisites</a>. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
/// your instance</a> in the <i>Amazon EC2 User Guide</i>.
class HibernationOptions {
  /// If <code>true</code>, your instance is enabled for hibernation; otherwise,
  /// it is not enabled for hibernation.
  final bool? configured;

  HibernationOptions({
    this.configured,
  });

  Map<String, dynamic> toJson() {
    final configured = this.configured;
    return {
      if (configured != null) 'configured': configured,
    };
  }
}

/// Indicates whether your instance is configured for hibernation. This
/// parameter is valid only if the instance meets the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
/// prerequisites</a>. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
/// your instance</a> in the <i>Amazon EC2 User Guide</i>.
class HibernationOptionsRequest {
  /// Set to <code>true</code> to enable your instance for hibernation.
  ///
  /// For Spot Instances, if you set <code>Configured</code> to <code>true</code>,
  /// either omit the <code>InstanceInterruptionBehavior</code> parameter (for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotMarketOptions.html">
  /// <code>SpotMarketOptions</code> </a>), or set it to <code>hibernate</code>.
  /// When <code>Configured</code> is true:
  ///
  /// <ul>
  /// <li>
  /// If you omit <code>InstanceInterruptionBehavior</code>, it defaults to
  /// <code>hibernate</code>.
  /// </li>
  /// <li>
  /// If you set <code>InstanceInterruptionBehavior</code> to a value other than
  /// <code>hibernate</code>, you'll get an error.
  /// </li>
  /// </ul>
  /// Default: <code>false</code>
  final bool? configured;

  HibernationOptionsRequest({
    this.configured,
  });

  Map<String, dynamic> toJson() {
    final configured = this.configured;
    return {
      if (configured != null) 'Configured': configured,
    };
  }
}

/// Describes an event in the history of the Spot Fleet request.
class HistoryRecord {
  /// Information about the event.
  final EventInformation? eventInformation;

  /// The event type.
  ///
  /// <ul>
  /// <li>
  /// <code>error</code> - An error with the Spot Fleet request.
  /// </li>
  /// <li>
  /// <code>fleetRequestChange</code> - A change in the status or configuration of
  /// the Spot Fleet request.
  /// </li>
  /// <li>
  /// <code>instanceChange</code> - An instance was launched or terminated.
  /// </li>
  /// <li>
  /// <code>Information</code> - An informational event.
  /// </li>
  /// </ul>
  final EventType? eventType;

  /// The date and time of the event, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? timestamp;

  HistoryRecord({
    this.eventInformation,
    this.eventType,
    this.timestamp,
  });

  Map<String, dynamic> toJson() {
    final eventInformation = this.eventInformation;
    final eventType = this.eventType;
    final timestamp = this.timestamp;
    return {
      if (eventInformation != null) 'eventInformation': eventInformation,
      if (eventType != null) 'eventType': eventType.value,
      if (timestamp != null) 'timestamp': iso8601ToJson(timestamp),
    };
  }
}

/// Describes an event in the history of an EC2 Fleet.
class HistoryRecordEntry {
  /// Information about the event.
  final EventInformation? eventInformation;

  /// The event type.
  final FleetEventType? eventType;

  /// The date and time of the event, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? timestamp;

  HistoryRecordEntry({
    this.eventInformation,
    this.eventType,
    this.timestamp,
  });

  Map<String, dynamic> toJson() {
    final eventInformation = this.eventInformation;
    final eventType = this.eventType;
    final timestamp = this.timestamp;
    return {
      if (eventInformation != null) 'eventInformation': eventInformation,
      if (eventType != null) 'eventType': eventType.value,
      if (timestamp != null) 'timestamp': iso8601ToJson(timestamp),
    };
  }
}

/// Describes the properties of the Dedicated Host.
class Host {
  /// The time that the Dedicated Host was allocated.
  final DateTime? allocationTime;

  /// Indicates whether the Dedicated Host supports multiple instance types of the
  /// same instance family. If the value is <code>on</code>, the Dedicated Host
  /// supports multiple instance types in the instance family. If the value is
  /// <code>off</code>, the Dedicated Host supports a single instance type only.
  final AllowsMultipleInstanceTypes? allowsMultipleInstanceTypes;

  /// The ID of the Outpost hardware asset on which the Dedicated Host is
  /// allocated.
  final String? assetId;

  /// Whether auto-placement is on or off.
  final AutoPlacement? autoPlacement;

  /// The Availability Zone of the Dedicated Host.
  final String? availabilityZone;

  /// The ID of the Availability Zone in which the Dedicated Host is allocated.
  final String? availabilityZoneId;

  /// Information about the instances running on the Dedicated Host.
  final AvailableCapacity? availableCapacity;

  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String? clientToken;

  /// The ID of the Dedicated Host.
  final String? hostId;

  /// Indicates whether host maintenance is enabled or disabled for the Dedicated
  /// Host.
  final HostMaintenance? hostMaintenance;

  /// The hardware specifications of the Dedicated Host.
  final HostProperties? hostProperties;

  /// Indicates whether host recovery is enabled or disabled for the Dedicated
  /// Host.
  final HostRecovery? hostRecovery;

  /// The reservation ID of the Dedicated Host. This returns a <code>null</code>
  /// response if the Dedicated Host doesn't have an associated reservation.
  final String? hostReservationId;

  /// The IDs and instance type that are currently running on the Dedicated Host.
  final List<HostInstance>? instances;

  /// Indicates whether the Dedicated Host is in a host resource group. If
  /// <b>memberOfServiceLinkedResourceGroup</b> is <code>true</code>, the host is
  /// in a host resource group; otherwise, it is not.
  final bool? memberOfServiceLinkedResourceGroup;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which
  /// the Dedicated Host is allocated.
  final String? outpostArn;

  /// The ID of the Amazon Web Services account that owns the Dedicated Host.
  final String? ownerId;

  /// The time that the Dedicated Host was released.
  final DateTime? releaseTime;

  /// The Dedicated Host's state.
  final AllocationState? state;

  /// Any tags assigned to the Dedicated Host.
  final List<Tag>? tags;

  Host({
    this.allocationTime,
    this.allowsMultipleInstanceTypes,
    this.assetId,
    this.autoPlacement,
    this.availabilityZone,
    this.availabilityZoneId,
    this.availableCapacity,
    this.clientToken,
    this.hostId,
    this.hostMaintenance,
    this.hostProperties,
    this.hostRecovery,
    this.hostReservationId,
    this.instances,
    this.memberOfServiceLinkedResourceGroup,
    this.outpostArn,
    this.ownerId,
    this.releaseTime,
    this.state,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final allocationTime = this.allocationTime;
    final allowsMultipleInstanceTypes = this.allowsMultipleInstanceTypes;
    final assetId = this.assetId;
    final autoPlacement = this.autoPlacement;
    final availabilityZone = this.availabilityZone;
    final availabilityZoneId = this.availabilityZoneId;
    final availableCapacity = this.availableCapacity;
    final clientToken = this.clientToken;
    final hostId = this.hostId;
    final hostMaintenance = this.hostMaintenance;
    final hostProperties = this.hostProperties;
    final hostRecovery = this.hostRecovery;
    final hostReservationId = this.hostReservationId;
    final instances = this.instances;
    final memberOfServiceLinkedResourceGroup =
        this.memberOfServiceLinkedResourceGroup;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final releaseTime = this.releaseTime;
    final state = this.state;
    final tags = this.tags;
    return {
      if (allocationTime != null)
        'allocationTime': iso8601ToJson(allocationTime),
      if (allowsMultipleInstanceTypes != null)
        'allowsMultipleInstanceTypes': allowsMultipleInstanceTypes.value,
      if (assetId != null) 'assetId': assetId,
      if (autoPlacement != null) 'autoPlacement': autoPlacement.value,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (availabilityZoneId != null) 'availabilityZoneId': availabilityZoneId,
      if (availableCapacity != null) 'availableCapacity': availableCapacity,
      if (clientToken != null) 'clientToken': clientToken,
      if (hostId != null) 'hostId': hostId,
      if (hostMaintenance != null) 'hostMaintenance': hostMaintenance.value,
      if (hostProperties != null) 'hostProperties': hostProperties,
      if (hostRecovery != null) 'hostRecovery': hostRecovery.value,
      if (hostReservationId != null) 'hostReservationId': hostReservationId,
      if (instances != null) 'instances': instances,
      if (memberOfServiceLinkedResourceGroup != null)
        'memberOfServiceLinkedResourceGroup':
            memberOfServiceLinkedResourceGroup,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (releaseTime != null) 'releaseTime': iso8601ToJson(releaseTime),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an instance running on a Dedicated Host.
class HostInstance {
  /// The ID of instance that is running on the Dedicated Host.
  final String? instanceId;

  /// The instance type (for example, <code>m3.medium</code>) of the running
  /// instance.
  final String? instanceType;

  /// The ID of the Amazon Web Services account that owns the instance.
  final String? ownerId;

  HostInstance({
    this.instanceId,
    this.instanceType,
    this.ownerId,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final instanceType = this.instanceType;
    final ownerId = this.ownerId;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceType != null) 'instanceType': instanceType,
      if (ownerId != null) 'ownerId': ownerId,
    };
  }
}

enum HostMaintenance {
  on('on'),
  off('off'),
  ;

  final String value;

  const HostMaintenance(this.value);

  static HostMaintenance fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HostMaintenance'));
}

/// Details about the Dedicated Host Reservation offering.
class HostOffering {
  /// The currency of the offering.
  final CurrencyCodeValues? currencyCode;

  /// The duration of the offering (in seconds).
  final int? duration;

  /// The hourly price of the offering.
  final String? hourlyPrice;

  /// The instance family of the offering.
  final String? instanceFamily;

  /// The ID of the offering.
  final String? offeringId;

  /// The available payment option.
  final PaymentOption? paymentOption;

  /// The upfront price of the offering. Does not apply to No Upfront offerings.
  final String? upfrontPrice;

  HostOffering({
    this.currencyCode,
    this.duration,
    this.hourlyPrice,
    this.instanceFamily,
    this.offeringId,
    this.paymentOption,
    this.upfrontPrice,
  });

  Map<String, dynamic> toJson() {
    final currencyCode = this.currencyCode;
    final duration = this.duration;
    final hourlyPrice = this.hourlyPrice;
    final instanceFamily = this.instanceFamily;
    final offeringId = this.offeringId;
    final paymentOption = this.paymentOption;
    final upfrontPrice = this.upfrontPrice;
    return {
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (duration != null) 'duration': duration,
      if (hourlyPrice != null) 'hourlyPrice': hourlyPrice,
      if (instanceFamily != null) 'instanceFamily': instanceFamily,
      if (offeringId != null) 'offeringId': offeringId,
      if (paymentOption != null) 'paymentOption': paymentOption.value,
      if (upfrontPrice != null) 'upfrontPrice': upfrontPrice,
    };
  }
}

/// Describes the properties of a Dedicated Host.
class HostProperties {
  /// The number of cores on the Dedicated Host.
  final int? cores;

  /// The instance family supported by the Dedicated Host. For example,
  /// <code>m5</code>.
  final String? instanceFamily;

  /// The instance type supported by the Dedicated Host. For example,
  /// <code>m5.large</code>. If the host supports multiple instance types, no
  /// <b>instanceType</b> is returned.
  final String? instanceType;

  /// The number of sockets on the Dedicated Host.
  final int? sockets;

  /// The total number of vCPUs on the Dedicated Host.
  final int? totalVCpus;

  HostProperties({
    this.cores,
    this.instanceFamily,
    this.instanceType,
    this.sockets,
    this.totalVCpus,
  });

  Map<String, dynamic> toJson() {
    final cores = this.cores;
    final instanceFamily = this.instanceFamily;
    final instanceType = this.instanceType;
    final sockets = this.sockets;
    final totalVCpus = this.totalVCpus;
    return {
      if (cores != null) 'cores': cores,
      if (instanceFamily != null) 'instanceFamily': instanceFamily,
      if (instanceType != null) 'instanceType': instanceType,
      if (sockets != null) 'sockets': sockets,
      if (totalVCpus != null) 'totalVCpus': totalVCpus,
    };
  }
}

enum HostRecovery {
  on('on'),
  off('off'),
  ;

  final String value;

  const HostRecovery(this.value);

  static HostRecovery fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HostRecovery'));
}

/// Details about the Dedicated Host Reservation and associated Dedicated Hosts.
class HostReservation {
  /// The number of Dedicated Hosts the reservation is associated with.
  final int? count;

  /// The currency in which the <code>upfrontPrice</code> and
  /// <code>hourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The length of the reservation's term, specified in seconds. Can be
  /// <code>31536000 (1 year)</code> | <code>94608000 (3 years)</code>.
  final int? duration;

  /// The date and time that the reservation ends.
  final DateTime? end;

  /// The IDs of the Dedicated Hosts associated with the reservation.
  final List<String>? hostIdSet;

  /// The ID of the reservation that specifies the associated Dedicated Hosts.
  final String? hostReservationId;

  /// The hourly price of the reservation.
  final String? hourlyPrice;

  /// The instance family of the Dedicated Host Reservation. The instance family
  /// on the Dedicated Host must be the same in order for it to benefit from the
  /// reservation.
  final String? instanceFamily;

  /// The ID of the reservation. This remains the same regardless of which
  /// Dedicated Hosts are associated with it.
  final String? offeringId;

  /// The payment option selected for this reservation.
  final PaymentOption? paymentOption;

  /// The date and time that the reservation started.
  final DateTime? start;

  /// The state of the reservation.
  final ReservationState? state;

  /// Any tags assigned to the Dedicated Host Reservation.
  final List<Tag>? tags;

  /// The upfront price of the reservation.
  final String? upfrontPrice;

  HostReservation({
    this.count,
    this.currencyCode,
    this.duration,
    this.end,
    this.hostIdSet,
    this.hostReservationId,
    this.hourlyPrice,
    this.instanceFamily,
    this.offeringId,
    this.paymentOption,
    this.start,
    this.state,
    this.tags,
    this.upfrontPrice,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final currencyCode = this.currencyCode;
    final duration = this.duration;
    final end = this.end;
    final hostIdSet = this.hostIdSet;
    final hostReservationId = this.hostReservationId;
    final hourlyPrice = this.hourlyPrice;
    final instanceFamily = this.instanceFamily;
    final offeringId = this.offeringId;
    final paymentOption = this.paymentOption;
    final start = this.start;
    final state = this.state;
    final tags = this.tags;
    final upfrontPrice = this.upfrontPrice;
    return {
      if (count != null) 'count': count,
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (duration != null) 'duration': duration,
      if (end != null) 'end': iso8601ToJson(end),
      if (hostIdSet != null) 'hostIdSet': hostIdSet,
      if (hostReservationId != null) 'hostReservationId': hostReservationId,
      if (hourlyPrice != null) 'hourlyPrice': hourlyPrice,
      if (instanceFamily != null) 'instanceFamily': instanceFamily,
      if (offeringId != null) 'offeringId': offeringId,
      if (paymentOption != null) 'paymentOption': paymentOption.value,
      if (start != null) 'start': iso8601ToJson(start),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (upfrontPrice != null) 'upfrontPrice': upfrontPrice,
    };
  }
}

enum HostTenancy {
  dedicated('dedicated'),
  host('host'),
  ;

  final String value;

  const HostTenancy(this.value);

  static HostTenancy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum HostTenancy'));
}

enum HostnameType {
  ipName('ip-name'),
  resourceName('resource-name'),
  ;

  final String value;

  const HostnameType(this.value);

  static HostnameType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HostnameType'));
}

enum HttpTokensState {
  optional('optional'),
  required('required'),
  ;

  final String value;

  const HttpTokensState(this.value);

  static HttpTokensState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HttpTokensState'));
}

enum HypervisorType {
  ovm('ovm'),
  xen('xen'),
  ;

  final String value;

  const HypervisorType(this.value);

  static HypervisorType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HypervisorType'));
}

/// The internet key exchange (IKE) version permitted for the VPN tunnel.
class IKEVersionsListValue {
  /// The IKE version.
  final String? value;

  IKEVersionsListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// The IKE version that is permitted for the VPN tunnel.
class IKEVersionsRequestListValue {
  /// The IKE version.
  final String? value;

  IKEVersionsRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

/// Describes an IAM instance profile.
class IamInstanceProfile {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String? arn;

  /// The ID of the instance profile.
  final String? id;

  IamInstanceProfile({
    this.arn,
    this.id,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final id = this.id;
    return {
      if (arn != null) 'arn': arn,
      if (id != null) 'id': id,
    };
  }
}

/// Describes an association between an IAM instance profile and an instance.
class IamInstanceProfileAssociation {
  /// The ID of the association.
  final String? associationId;

  /// The IAM instance profile.
  final IamInstanceProfile? iamInstanceProfile;

  /// The ID of the instance.
  final String? instanceId;

  /// The state of the association.
  final IamInstanceProfileAssociationState? state;

  /// The time the IAM instance profile was associated with the instance.
  final DateTime? timestamp;

  IamInstanceProfileAssociation({
    this.associationId,
    this.iamInstanceProfile,
    this.instanceId,
    this.state,
    this.timestamp,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final iamInstanceProfile = this.iamInstanceProfile;
    final instanceId = this.instanceId;
    final state = this.state;
    final timestamp = this.timestamp;
    return {
      if (associationId != null) 'associationId': associationId,
      if (iamInstanceProfile != null) 'iamInstanceProfile': iamInstanceProfile,
      if (instanceId != null) 'instanceId': instanceId,
      if (state != null) 'state': state.value,
      if (timestamp != null) 'timestamp': iso8601ToJson(timestamp),
    };
  }
}

enum IamInstanceProfileAssociationState {
  associating('associating'),
  associated('associated'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  ;

  final String value;

  const IamInstanceProfileAssociationState(this.value);

  static IamInstanceProfileAssociationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IamInstanceProfileAssociationState'));
}

/// Describes an IAM instance profile.
class IamInstanceProfileSpecification {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String? arn;

  /// The name of the instance profile.
  final String? name;

  IamInstanceProfileSpecification({
    this.arn,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final name = this.name;
    return {
      if (arn != null) 'arn': arn,
      if (name != null) 'name': name,
    };
  }
}

/// Describes the ICMP type and code.
class IcmpTypeCode {
  /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
  final int? code;

  /// The ICMP type. A value of -1 means all types.
  final int? type;

  IcmpTypeCode({
    this.code,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final type = this.type;
    return {
      if (code != null) 'code': code,
      if (type != null) 'type': type,
    };
  }
}

/// Describes the ID format for a resource.
class IdFormat {
  /// The date in UTC at which you are permanently switched over to using longer
  /// IDs. If a deadline is not yet available for this resource type, this field
  /// is not returned.
  final DateTime? deadline;

  /// The type of resource.
  final String? resource;

  /// Indicates whether longer IDs (17-character IDs) are enabled for the
  /// resource.
  final bool? useLongIds;

  IdFormat({
    this.deadline,
    this.resource,
    this.useLongIds,
  });

  Map<String, dynamic> toJson() {
    final deadline = this.deadline;
    final resource = this.resource;
    final useLongIds = this.useLongIds;
    return {
      if (deadline != null) 'deadline': iso8601ToJson(deadline),
      if (resource != null) 'resource': resource,
      if (useLongIds != null) 'useLongIds': useLongIds,
    };
  }
}

enum Igmpv2SupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const Igmpv2SupportValue(this.value);

  static Igmpv2SupportValue fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum Igmpv2SupportValue'));
}

/// Describes an image.
class Image {
  /// The architecture of the image.
  final ArchitectureValues? architecture;

  /// Any block device mapping entries.
  final List<BlockDeviceMapping>? blockDeviceMappings;

  /// The boot mode of the image. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot
  /// modes</a> in the <i>Amazon EC2 User Guide</i>.
  final BootModeValues? bootMode;

  /// The date and time the image was created.
  final String? creationDate;

  /// The date and time to deprecate the AMI, in UTC, in the following format:
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z. If you
  /// specified a value for seconds, Amazon EC2 rounds the seconds to the nearest
  /// minute.
  final String? deprecationTime;

  /// Indicates whether deregistration protection is enabled for the AMI.
  final String? deregistrationProtection;

  /// The description of the AMI that was provided during image creation.
  final String? description;

  /// Specifies whether enhanced networking with ENA is enabled.
  final bool? enaSupport;

  /// The hypervisor type of the image. Only <code>xen</code> is supported.
  /// <code>ovm</code> is not supported.
  final HypervisorType? hypervisor;

  /// The ID of the AMI.
  final String? imageId;

  /// The location of the AMI.
  final String? imageLocation;

  /// The owner alias (<code>amazon</code> | <code>aws-marketplace</code>).
  final String? imageOwnerAlias;

  /// The type of image.
  final ImageTypeValues? imageType;

  /// If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI.
  /// Instances launched from this AMI will have <code>HttpTokens</code>
  /// automatically set to <code>required</code> so that, by default, the instance
  /// requires that IMDSv2 is used when requesting instance metadata. In addition,
  /// <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure
  /// the AMI</a> in the <i>Amazon EC2 User Guide</i>.
  final ImdsSupportValues? imdsSupport;

  /// The kernel associated with the image, if any. Only applicable for machine
  /// images.
  final String? kernelId;

  /// The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601
  /// date-time format</a>, when the AMI was last used to launch an EC2 instance.
  /// When the AMI is used to launch an instance, there is a 24-hour delay before
  /// that usage is reported.
  /// <note>
  /// <code>lastLaunchedTime</code> data is available starting April 2017.
  /// </note>
  final String? lastLaunchedTime;

  /// The name of the AMI that was provided during image creation.
  final String? name;

  /// The ID of the Amazon Web Services account that owns the image.
  final String? ownerId;

  /// This value is set to <code>windows</code> for Windows AMIs; otherwise, it is
  /// blank.
  final PlatformValues? platform;

  /// The platform details associated with the billing code of the AMI. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understand
  /// AMI billing information</a> in the <i>Amazon EC2 User Guide</i>.
  final String? platformDetails;

  /// Any product codes associated with the AMI.
  final List<ProductCode>? productCodes;

  /// Indicates whether the image has public launch permissions. The value is
  /// <code>true</code> if this image has public launch permissions or
  /// <code>false</code> if it has only implicit and explicit launch permissions.
  final bool? public;

  /// The RAM disk associated with the image, if any. Only applicable for machine
  /// images.
  final String? ramdiskId;

  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  final String? rootDeviceName;

  /// The type of root device used by the AMI. The AMI can use an Amazon EBS
  /// volume or an instance store volume.
  final DeviceType? rootDeviceType;

  /// The ID of the instance that the AMI was created from if the AMI was created
  /// using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html">CreateImage</a>.
  /// This field only appears if the AMI was created using CreateImage.
  final String? sourceInstanceId;

  /// Specifies whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final String? sriovNetSupport;

  /// The current state of the AMI. If the state is <code>available</code>, the
  /// image is successfully registered and can be used to launch an instance.
  final ImageState? state;

  /// The reason for the state change.
  final StateReason? stateReason;

  /// Any tags assigned to the image.
  final List<Tag>? tags;

  /// If the image is configured for NitroTPM support, the value is
  /// <code>v2.0</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html">NitroTPM</a>
  /// in the <i>Amazon EC2 User Guide</i>.
  final TpmSupportValues? tpmSupport;

  /// The operation of the Amazon EC2 instance and the billing code that is
  /// associated with the AMI. <code>usageOperation</code> corresponds to the <a
  /// href="https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation">lineitem/Operation</a>
  /// column on your Amazon Web Services Cost and Usage Report and in the <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html">Amazon
  /// Web Services Price List API</a>. You can view these fields on the
  /// <b>Instances</b> or <b>AMIs</b> pages in the Amazon EC2 console, or in the
  /// responses that are returned by the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html">DescribeImages</a>
  /// command in the Amazon EC2 API, or the <a
  /// href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html">describe-images</a>
  /// command in the CLI.
  final String? usageOperation;

  /// The type of virtualization of the AMI.
  final VirtualizationType? virtualizationType;

  Image({
    this.architecture,
    this.blockDeviceMappings,
    this.bootMode,
    this.creationDate,
    this.deprecationTime,
    this.deregistrationProtection,
    this.description,
    this.enaSupport,
    this.hypervisor,
    this.imageId,
    this.imageLocation,
    this.imageOwnerAlias,
    this.imageType,
    this.imdsSupport,
    this.kernelId,
    this.lastLaunchedTime,
    this.name,
    this.ownerId,
    this.platform,
    this.platformDetails,
    this.productCodes,
    this.public,
    this.ramdiskId,
    this.rootDeviceName,
    this.rootDeviceType,
    this.sourceInstanceId,
    this.sriovNetSupport,
    this.state,
    this.stateReason,
    this.tags,
    this.tpmSupport,
    this.usageOperation,
    this.virtualizationType,
  });

  Map<String, dynamic> toJson() {
    final architecture = this.architecture;
    final blockDeviceMappings = this.blockDeviceMappings;
    final bootMode = this.bootMode;
    final creationDate = this.creationDate;
    final deprecationTime = this.deprecationTime;
    final deregistrationProtection = this.deregistrationProtection;
    final description = this.description;
    final enaSupport = this.enaSupport;
    final hypervisor = this.hypervisor;
    final imageId = this.imageId;
    final imageLocation = this.imageLocation;
    final imageOwnerAlias = this.imageOwnerAlias;
    final imageType = this.imageType;
    final imdsSupport = this.imdsSupport;
    final kernelId = this.kernelId;
    final lastLaunchedTime = this.lastLaunchedTime;
    final name = this.name;
    final ownerId = this.ownerId;
    final platform = this.platform;
    final platformDetails = this.platformDetails;
    final productCodes = this.productCodes;
    final public = this.public;
    final ramdiskId = this.ramdiskId;
    final rootDeviceName = this.rootDeviceName;
    final rootDeviceType = this.rootDeviceType;
    final sourceInstanceId = this.sourceInstanceId;
    final sriovNetSupport = this.sriovNetSupport;
    final state = this.state;
    final stateReason = this.stateReason;
    final tags = this.tags;
    final tpmSupport = this.tpmSupport;
    final usageOperation = this.usageOperation;
    final virtualizationType = this.virtualizationType;
    return {
      if (architecture != null) 'architecture': architecture.value,
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (bootMode != null) 'bootMode': bootMode.value,
      if (creationDate != null) 'creationDate': creationDate,
      if (deprecationTime != null) 'deprecationTime': deprecationTime,
      if (deregistrationProtection != null)
        'deregistrationProtection': deregistrationProtection,
      if (description != null) 'description': description,
      if (enaSupport != null) 'enaSupport': enaSupport,
      if (hypervisor != null) 'hypervisor': hypervisor.value,
      if (imageId != null) 'imageId': imageId,
      if (imageLocation != null) 'imageLocation': imageLocation,
      if (imageOwnerAlias != null) 'imageOwnerAlias': imageOwnerAlias,
      if (imageType != null) 'imageType': imageType.value,
      if (imdsSupport != null) 'imdsSupport': imdsSupport.value,
      if (kernelId != null) 'kernelId': kernelId,
      if (lastLaunchedTime != null) 'lastLaunchedTime': lastLaunchedTime,
      if (name != null) 'name': name,
      if (ownerId != null) 'imageOwnerId': ownerId,
      if (platform != null) 'platform': platform.value,
      if (platformDetails != null) 'platformDetails': platformDetails,
      if (productCodes != null) 'productCodes': productCodes,
      if (public != null) 'isPublic': public,
      if (ramdiskId != null) 'ramdiskId': ramdiskId,
      if (rootDeviceName != null) 'rootDeviceName': rootDeviceName,
      if (rootDeviceType != null) 'rootDeviceType': rootDeviceType.value,
      if (sourceInstanceId != null) 'sourceInstanceId': sourceInstanceId,
      if (sriovNetSupport != null) 'sriovNetSupport': sriovNetSupport,
      if (state != null) 'imageState': state.value,
      if (stateReason != null) 'stateReason': stateReason,
      if (tags != null) 'tagSet': tags,
      if (tpmSupport != null) 'tpmSupport': tpmSupport.value,
      if (usageOperation != null) 'usageOperation': usageOperation,
      if (virtualizationType != null)
        'virtualizationType': virtualizationType.value,
    };
  }
}

/// Describes an image attribute.
class ImageAttribute {
  /// The block device mapping entries.
  final List<BlockDeviceMapping>? blockDeviceMappings;

  /// The boot mode.
  final AttributeValue? bootMode;

  /// Indicates whether deregistration protection is enabled for the AMI.
  final AttributeValue? deregistrationProtection;

  /// A description for the AMI.
  final AttributeValue? description;

  /// The ID of the AMI.
  final String? imageId;

  /// If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI.
  /// Instances launched from this AMI will have <code>HttpTokens</code>
  /// automatically set to <code>required</code> so that, by default, the instance
  /// requires that IMDSv2 is used when requesting instance metadata. In addition,
  /// <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure
  /// the AMI</a> in the <i>Amazon EC2 User Guide</i>.
  final AttributeValue? imdsSupport;

  /// The kernel ID.
  final AttributeValue? kernelId;

  /// The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601
  /// date-time format</a>, when the AMI was last used to launch an EC2 instance.
  /// When the AMI is used to launch an instance, there is a 24-hour delay before
  /// that usage is reported.
  /// <note>
  /// <code>lastLaunchedTime</code> data is available starting April 2017.
  /// </note>
  final AttributeValue? lastLaunchedTime;

  /// The launch permissions.
  final List<LaunchPermission>? launchPermissions;

  /// The product codes.
  final List<ProductCode>? productCodes;

  /// The RAM disk ID.
  final AttributeValue? ramdiskId;

  /// Indicates whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final AttributeValue? sriovNetSupport;

  /// If the image is configured for NitroTPM support, the value is
  /// <code>v2.0</code>.
  final AttributeValue? tpmSupport;

  /// Base64 representation of the non-volatile UEFI variable store. To retrieve
  /// the UEFI data, use the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a>
  /// command. You can inspect and modify the UEFI data by using the <a
  /// href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a>
  /// on GitHub. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI
  /// Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.
  final AttributeValue? uefiData;

  ImageAttribute({
    this.blockDeviceMappings,
    this.bootMode,
    this.deregistrationProtection,
    this.description,
    this.imageId,
    this.imdsSupport,
    this.kernelId,
    this.lastLaunchedTime,
    this.launchPermissions,
    this.productCodes,
    this.ramdiskId,
    this.sriovNetSupport,
    this.tpmSupport,
    this.uefiData,
  });

  Map<String, dynamic> toJson() {
    final blockDeviceMappings = this.blockDeviceMappings;
    final bootMode = this.bootMode;
    final deregistrationProtection = this.deregistrationProtection;
    final description = this.description;
    final imageId = this.imageId;
    final imdsSupport = this.imdsSupport;
    final kernelId = this.kernelId;
    final lastLaunchedTime = this.lastLaunchedTime;
    final launchPermissions = this.launchPermissions;
    final productCodes = this.productCodes;
    final ramdiskId = this.ramdiskId;
    final sriovNetSupport = this.sriovNetSupport;
    final tpmSupport = this.tpmSupport;
    final uefiData = this.uefiData;
    return {
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (bootMode != null) 'bootMode': bootMode,
      if (deregistrationProtection != null)
        'deregistrationProtection': deregistrationProtection,
      if (description != null) 'description': description,
      if (imageId != null) 'imageId': imageId,
      if (imdsSupport != null) 'imdsSupport': imdsSupport,
      if (kernelId != null) 'kernel': kernelId,
      if (lastLaunchedTime != null) 'lastLaunchedTime': lastLaunchedTime,
      if (launchPermissions != null) 'launchPermission': launchPermissions,
      if (productCodes != null) 'productCodes': productCodes,
      if (ramdiskId != null) 'ramdisk': ramdiskId,
      if (sriovNetSupport != null) 'sriovNetSupport': sriovNetSupport,
      if (tpmSupport != null) 'tpmSupport': tpmSupport,
      if (uefiData != null) 'uefiData': uefiData,
    };
  }
}

enum ImageAttributeName {
  description('description'),
  kernel('kernel'),
  ramdisk('ramdisk'),
  launchPermission('launchPermission'),
  productCodes('productCodes'),
  blockDeviceMapping('blockDeviceMapping'),
  sriovNetSupport('sriovNetSupport'),
  bootMode('bootMode'),
  tpmSupport('tpmSupport'),
  uefiData('uefiData'),
  lastLaunchedTime('lastLaunchedTime'),
  imdsSupport('imdsSupport'),
  deregistrationProtection('deregistrationProtection'),
  ;

  final String value;

  const ImageAttributeName(this.value);

  static ImageAttributeName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ImageAttributeName'));
}

enum ImageBlockPublicAccessDisabledState {
  unblocked('unblocked'),
  ;

  final String value;

  const ImageBlockPublicAccessDisabledState(this.value);

  static ImageBlockPublicAccessDisabledState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ImageBlockPublicAccessDisabledState'));
}

enum ImageBlockPublicAccessEnabledState {
  blockNewSharing('block-new-sharing'),
  ;

  final String value;

  const ImageBlockPublicAccessEnabledState(this.value);

  static ImageBlockPublicAccessEnabledState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ImageBlockPublicAccessEnabledState'));
}

/// Describes the disk container object for an import image task.
class ImageDiskContainer {
  /// The description of the disk image.
  final String? description;

  /// The block device mapping for the disk.
  final String? deviceName;

  /// The format of the disk image being imported.
  ///
  /// Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> |
  /// <code>VMDK</code> | <code>RAW</code>
  final String? format;

  /// The ID of the EBS snapshot to be used for importing the snapshot.
  final String? snapshotId;

  /// The URL to the Amazon S3-based disk image being imported. The URL can either
  /// be a https URL (https://..) or an Amazon S3 URL (s3://..)
  final String? url;

  /// The S3 bucket for the disk image.
  final UserBucket? userBucket;

  ImageDiskContainer({
    this.description,
    this.deviceName,
    this.format,
    this.snapshotId,
    this.url,
    this.userBucket,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final deviceName = this.deviceName;
    final format = this.format;
    final snapshotId = this.snapshotId;
    final url = this.url;
    final userBucket = this.userBucket;
    return {
      if (description != null) 'Description': description,
      if (deviceName != null) 'DeviceName': deviceName,
      if (format != null) 'Format': format,
      if (snapshotId != null) 'SnapshotId': snapshotId,
      if (url != null) 'Url': url,
      if (userBucket != null) 'UserBucket': userBucket,
    };
  }
}

/// Information about an AMI that is currently in the Recycle Bin.
class ImageRecycleBinInfo {
  /// The description of the AMI.
  final String? description;

  /// The ID of the AMI.
  final String? imageId;

  /// The name of the AMI.
  final String? name;

  /// The date and time when the AMI entered the Recycle Bin.
  final DateTime? recycleBinEnterTime;

  /// The date and time when the AMI is to be permanently deleted from the Recycle
  /// Bin.
  final DateTime? recycleBinExitTime;

  ImageRecycleBinInfo({
    this.description,
    this.imageId,
    this.name,
    this.recycleBinEnterTime,
    this.recycleBinExitTime,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final imageId = this.imageId;
    final name = this.name;
    final recycleBinEnterTime = this.recycleBinEnterTime;
    final recycleBinExitTime = this.recycleBinExitTime;
    return {
      if (description != null) 'description': description,
      if (imageId != null) 'imageId': imageId,
      if (name != null) 'name': name,
      if (recycleBinEnterTime != null)
        'recycleBinEnterTime': iso8601ToJson(recycleBinEnterTime),
      if (recycleBinExitTime != null)
        'recycleBinExitTime': iso8601ToJson(recycleBinExitTime),
    };
  }
}

enum ImageState {
  pending('pending'),
  available('available'),
  invalid('invalid'),
  deregistered('deregistered'),
  transient('transient'),
  failed('failed'),
  error('error'),
  disabled('disabled'),
  ;

  final String value;

  const ImageState(this.value);

  static ImageState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ImageState'));
}

enum ImageTypeValues {
  machine('machine'),
  kernel('kernel'),
  ramdisk('ramdisk'),
  ;

  final String value;

  const ImageTypeValues(this.value);

  static ImageTypeValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ImageTypeValues'));
}

enum ImdsSupportValues {
  v2_0('v2.0'),
  ;

  final String value;

  const ImdsSupportValues(this.value);

  static ImdsSupportValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ImdsSupportValues'));
}

class ImportClientVpnClientCertificateRevocationListResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ImportClientVpnClientCertificateRevocationListResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

/// The request information of license configurations.
class ImportImageLicenseConfigurationRequest {
  /// The ARN of a license configuration.
  final String? licenseConfigurationArn;

  ImportImageLicenseConfigurationRequest({
    this.licenseConfigurationArn,
  });

  Map<String, dynamic> toJson() {
    final licenseConfigurationArn = this.licenseConfigurationArn;
    return {
      if (licenseConfigurationArn != null)
        'LicenseConfigurationArn': licenseConfigurationArn,
    };
  }
}

/// The response information for license configurations.
class ImportImageLicenseConfigurationResponse {
  /// The ARN of a license configuration.
  final String? licenseConfigurationArn;

  ImportImageLicenseConfigurationResponse({
    this.licenseConfigurationArn,
  });

  Map<String, dynamic> toJson() {
    final licenseConfigurationArn = this.licenseConfigurationArn;
    return {
      if (licenseConfigurationArn != null)
        'licenseConfigurationArn': licenseConfigurationArn,
    };
  }
}

class ImportImageResult {
  /// The architecture of the virtual machine.
  final String? architecture;

  /// A description of the import task.
  final String? description;

  /// Indicates whether the AMI is encrypted.
  final bool? encrypted;

  /// The target hypervisor of the import task.
  final String? hypervisor;

  /// The ID of the Amazon Machine Image (AMI) created by the import task.
  final String? imageId;

  /// The task ID of the import image task.
  final String? importTaskId;

  /// The identifier for the symmetric KMS key that was used to create the
  /// encrypted AMI.
  final String? kmsKeyId;

  /// The ARNs of the license configurations.
  final List<ImportImageLicenseConfigurationResponse>? licenseSpecifications;

  /// The license type of the virtual machine.
  final String? licenseType;

  /// The operating system of the virtual machine.
  final String? platform;

  /// The progress of the task.
  final String? progress;

  /// Information about the snapshots.
  final List<SnapshotDetail>? snapshotDetails;

  /// A brief status of the task.
  final String? status;

  /// A detailed status message of the import task.
  final String? statusMessage;

  /// Any tags assigned to the import image task.
  final List<Tag>? tags;

  /// The usage operation value.
  final String? usageOperation;

  ImportImageResult({
    this.architecture,
    this.description,
    this.encrypted,
    this.hypervisor,
    this.imageId,
    this.importTaskId,
    this.kmsKeyId,
    this.licenseSpecifications,
    this.licenseType,
    this.platform,
    this.progress,
    this.snapshotDetails,
    this.status,
    this.statusMessage,
    this.tags,
    this.usageOperation,
  });

  Map<String, dynamic> toJson() {
    final architecture = this.architecture;
    final description = this.description;
    final encrypted = this.encrypted;
    final hypervisor = this.hypervisor;
    final imageId = this.imageId;
    final importTaskId = this.importTaskId;
    final kmsKeyId = this.kmsKeyId;
    final licenseSpecifications = this.licenseSpecifications;
    final licenseType = this.licenseType;
    final platform = this.platform;
    final progress = this.progress;
    final snapshotDetails = this.snapshotDetails;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    final usageOperation = this.usageOperation;
    return {
      if (architecture != null) 'architecture': architecture,
      if (description != null) 'description': description,
      if (encrypted != null) 'encrypted': encrypted,
      if (hypervisor != null) 'hypervisor': hypervisor,
      if (imageId != null) 'imageId': imageId,
      if (importTaskId != null) 'importTaskId': importTaskId,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (licenseSpecifications != null)
        'licenseSpecifications': licenseSpecifications,
      if (licenseType != null) 'licenseType': licenseType,
      if (platform != null) 'platform': platform,
      if (progress != null) 'progress': progress,
      if (snapshotDetails != null) 'snapshotDetailSet': snapshotDetails,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
      if (usageOperation != null) 'usageOperation': usageOperation,
    };
  }
}

/// Describes an import image task.
class ImportImageTask {
  /// The architecture of the virtual machine.
  ///
  /// Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code>
  final String? architecture;

  /// The boot mode of the virtual machine.
  final BootModeValues? bootMode;

  /// A description of the import task.
  final String? description;

  /// Indicates whether the image is encrypted.
  final bool? encrypted;

  /// The target hypervisor for the import task.
  ///
  /// Valid values: <code>xen</code>
  final String? hypervisor;

  /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
  final String? imageId;

  /// The ID of the import image task.
  final String? importTaskId;

  /// The identifier for the KMS key that was used to create the encrypted image.
  final String? kmsKeyId;

  /// The ARNs of the license configurations that are associated with the import
  /// image task.
  final List<ImportImageLicenseConfigurationResponse>? licenseSpecifications;

  /// The license type of the virtual machine.
  final String? licenseType;

  /// The description string for the import image task.
  final String? platform;

  /// The percentage of progress of the import image task.
  final String? progress;

  /// Information about the snapshots.
  final List<SnapshotDetail>? snapshotDetails;

  /// A brief status for the import image task.
  final String? status;

  /// A descriptive status message for the import image task.
  final String? statusMessage;

  /// The tags for the import image task.
  final List<Tag>? tags;

  /// The usage operation value.
  final String? usageOperation;

  ImportImageTask({
    this.architecture,
    this.bootMode,
    this.description,
    this.encrypted,
    this.hypervisor,
    this.imageId,
    this.importTaskId,
    this.kmsKeyId,
    this.licenseSpecifications,
    this.licenseType,
    this.platform,
    this.progress,
    this.snapshotDetails,
    this.status,
    this.statusMessage,
    this.tags,
    this.usageOperation,
  });

  Map<String, dynamic> toJson() {
    final architecture = this.architecture;
    final bootMode = this.bootMode;
    final description = this.description;
    final encrypted = this.encrypted;
    final hypervisor = this.hypervisor;
    final imageId = this.imageId;
    final importTaskId = this.importTaskId;
    final kmsKeyId = this.kmsKeyId;
    final licenseSpecifications = this.licenseSpecifications;
    final licenseType = this.licenseType;
    final platform = this.platform;
    final progress = this.progress;
    final snapshotDetails = this.snapshotDetails;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    final usageOperation = this.usageOperation;
    return {
      if (architecture != null) 'architecture': architecture,
      if (bootMode != null) 'bootMode': bootMode.value,
      if (description != null) 'description': description,
      if (encrypted != null) 'encrypted': encrypted,
      if (hypervisor != null) 'hypervisor': hypervisor,
      if (imageId != null) 'imageId': imageId,
      if (importTaskId != null) 'importTaskId': importTaskId,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (licenseSpecifications != null)
        'licenseSpecifications': licenseSpecifications,
      if (licenseType != null) 'licenseType': licenseType,
      if (platform != null) 'platform': platform,
      if (progress != null) 'progress': progress,
      if (snapshotDetails != null) 'snapshotDetailSet': snapshotDetails,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
      if (usageOperation != null) 'usageOperation': usageOperation,
    };
  }
}

/// Describes the launch specification for VM import.
class ImportInstanceLaunchSpecification {
  /// Reserved.
  final String? additionalInfo;

  /// The architecture of the instance.
  final ArchitectureValues? architecture;

  /// The security group IDs.
  final List<String>? groupIds;

  /// The security group names.
  final List<String>? groupNames;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  final ShutdownBehavior? instanceInitiatedShutdownBehavior;

  /// The instance type. For more information about the instance types that you
  /// can import, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types">Instance
  /// Types</a> in the VM Import/Export User Guide.
  final InstanceType? instanceType;

  /// Indicates whether monitoring is enabled.
  final bool? monitoring;

  /// The placement information for the instance.
  final Placement? placement;

  /// [EC2-VPC] An available IP address from the IP address range of the subnet.
  final String? privateIpAddress;

  /// [EC2-VPC] The ID of the subnet in which to launch the instance.
  final String? subnetId;

  /// The Base64-encoded user data to make available to the instance.
  final UserData? userData;

  ImportInstanceLaunchSpecification({
    this.additionalInfo,
    this.architecture,
    this.groupIds,
    this.groupNames,
    this.instanceInitiatedShutdownBehavior,
    this.instanceType,
    this.monitoring,
    this.placement,
    this.privateIpAddress,
    this.subnetId,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final additionalInfo = this.additionalInfo;
    final architecture = this.architecture;
    final groupIds = this.groupIds;
    final groupNames = this.groupNames;
    final instanceInitiatedShutdownBehavior =
        this.instanceInitiatedShutdownBehavior;
    final instanceType = this.instanceType;
    final monitoring = this.monitoring;
    final placement = this.placement;
    final privateIpAddress = this.privateIpAddress;
    final subnetId = this.subnetId;
    final userData = this.userData;
    return {
      if (additionalInfo != null) 'additionalInfo': additionalInfo,
      if (architecture != null) 'architecture': architecture.value,
      if (groupIds != null) 'GroupId': groupIds,
      if (groupNames != null) 'GroupName': groupNames,
      if (instanceInitiatedShutdownBehavior != null)
        'instanceInitiatedShutdownBehavior':
            instanceInitiatedShutdownBehavior.value,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (monitoring != null) 'monitoring': monitoring,
      if (placement != null) 'placement': placement,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (subnetId != null) 'subnetId': subnetId,
      if (userData != null) 'userData': userData,
    };
  }
}

class ImportInstanceResult {
  /// Information about the conversion task.
  final ConversionTask? conversionTask;

  ImportInstanceResult({
    this.conversionTask,
  });

  Map<String, dynamic> toJson() {
    final conversionTask = this.conversionTask;
    return {
      if (conversionTask != null) 'conversionTask': conversionTask,
    };
  }
}

/// Describes an import instance task.
class ImportInstanceTaskDetails {
  /// A description of the task.
  final String? description;

  /// The ID of the instance.
  final String? instanceId;

  /// The instance operating system.
  final PlatformValues? platform;

  /// The volumes.
  final List<ImportInstanceVolumeDetailItem>? volumes;

  ImportInstanceTaskDetails({
    this.description,
    this.instanceId,
    this.platform,
    this.volumes,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final instanceId = this.instanceId;
    final platform = this.platform;
    final volumes = this.volumes;
    return {
      if (description != null) 'description': description,
      if (instanceId != null) 'instanceId': instanceId,
      if (platform != null) 'platform': platform.value,
      if (volumes != null) 'volumes': volumes,
    };
  }
}

/// Describes an import volume task.
class ImportInstanceVolumeDetailItem {
  /// The Availability Zone where the resulting instance will reside.
  final String? availabilityZone;

  /// The number of bytes converted so far.
  final int? bytesConverted;

  /// A description of the task.
  final String? description;

  /// The image.
  final DiskImageDescription? image;

  /// The status of the import of this particular disk image.
  final String? status;

  /// The status information or errors related to the disk image.
  final String? statusMessage;

  /// The volume.
  final DiskImageVolumeDescription? volume;

  ImportInstanceVolumeDetailItem({
    this.availabilityZone,
    this.bytesConverted,
    this.description,
    this.image,
    this.status,
    this.statusMessage,
    this.volume,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final bytesConverted = this.bytesConverted;
    final description = this.description;
    final image = this.image;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final volume = this.volume;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (bytesConverted != null) 'bytesConverted': bytesConverted,
      if (description != null) 'description': description,
      if (image != null) 'image': image,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (volume != null) 'volume': volume,
    };
  }
}

class ImportKeyPairResult {
  /// <ul>
  /// <li>
  /// For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as
  /// specified in section 4 of RFC 4716.
  /// </li>
  /// <li>
  /// For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
  /// digest, which is the default for OpenSSH, starting with <a
  /// href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.
  /// </li>
  /// </ul>
  final String? keyFingerprint;

  /// The key pair name that you provided.
  final String? keyName;

  /// The ID of the resulting key pair.
  final String? keyPairId;

  /// The tags applied to the imported key pair.
  final List<Tag>? tags;

  ImportKeyPairResult({
    this.keyFingerprint,
    this.keyName,
    this.keyPairId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final keyFingerprint = this.keyFingerprint;
    final keyName = this.keyName;
    final keyPairId = this.keyPairId;
    final tags = this.tags;
    return {
      if (keyFingerprint != null) 'keyFingerprint': keyFingerprint,
      if (keyName != null) 'keyName': keyName,
      if (keyPairId != null) 'keyPairId': keyPairId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

class ImportSnapshotResult {
  /// A description of the import snapshot task.
  final String? description;

  /// The ID of the import snapshot task.
  final String? importTaskId;

  /// Information about the import snapshot task.
  final SnapshotTaskDetail? snapshotTaskDetail;

  /// Any tags assigned to the import snapshot task.
  final List<Tag>? tags;

  ImportSnapshotResult({
    this.description,
    this.importTaskId,
    this.snapshotTaskDetail,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final importTaskId = this.importTaskId;
    final snapshotTaskDetail = this.snapshotTaskDetail;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (importTaskId != null) 'importTaskId': importTaskId,
      if (snapshotTaskDetail != null) 'snapshotTaskDetail': snapshotTaskDetail,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an import snapshot task.
class ImportSnapshotTask {
  /// A description of the import snapshot task.
  final String? description;

  /// The ID of the import snapshot task.
  final String? importTaskId;

  /// Describes an import snapshot task.
  final SnapshotTaskDetail? snapshotTaskDetail;

  /// The tags for the import snapshot task.
  final List<Tag>? tags;

  ImportSnapshotTask({
    this.description,
    this.importTaskId,
    this.snapshotTaskDetail,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final importTaskId = this.importTaskId;
    final snapshotTaskDetail = this.snapshotTaskDetail;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (importTaskId != null) 'importTaskId': importTaskId,
      if (snapshotTaskDetail != null) 'snapshotTaskDetail': snapshotTaskDetail,
      if (tags != null) 'tagSet': tags,
    };
  }
}

class ImportVolumeResult {
  /// Information about the conversion task.
  final ConversionTask? conversionTask;

  ImportVolumeResult({
    this.conversionTask,
  });

  Map<String, dynamic> toJson() {
    final conversionTask = this.conversionTask;
    return {
      if (conversionTask != null) 'conversionTask': conversionTask,
    };
  }
}

/// Describes an import volume task.
class ImportVolumeTaskDetails {
  /// The Availability Zone where the resulting volume will reside.
  final String? availabilityZone;

  /// The number of bytes converted so far.
  final int? bytesConverted;

  /// The description you provided when starting the import volume task.
  final String? description;

  /// The image.
  final DiskImageDescription? image;

  /// The volume.
  final DiskImageVolumeDescription? volume;

  ImportVolumeTaskDetails({
    this.availabilityZone,
    this.bytesConverted,
    this.description,
    this.image,
    this.volume,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final bytesConverted = this.bytesConverted;
    final description = this.description;
    final image = this.image;
    final volume = this.volume;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (bytesConverted != null) 'bytesConverted': bytesConverted,
      if (description != null) 'description': description,
      if (image != null) 'image': image,
      if (volume != null) 'volume': volume,
    };
  }
}

/// Describes the Inference accelerators for the instance type.
class InferenceAcceleratorInfo {
  /// Describes the Inference accelerators for the instance type.
  final List<InferenceDeviceInfo>? accelerators;

  /// The total size of the memory for the inference accelerators for the instance
  /// type, in MiB.
  final int? totalInferenceMemoryInMiB;

  InferenceAcceleratorInfo({
    this.accelerators,
    this.totalInferenceMemoryInMiB,
  });

  Map<String, dynamic> toJson() {
    final accelerators = this.accelerators;
    final totalInferenceMemoryInMiB = this.totalInferenceMemoryInMiB;
    return {
      if (accelerators != null) 'accelerators': accelerators,
      if (totalInferenceMemoryInMiB != null)
        'totalInferenceMemoryInMiB': totalInferenceMemoryInMiB,
    };
  }
}

/// Describes the Inference accelerators for the instance type.
class InferenceDeviceInfo {
  /// The number of Inference accelerators for the instance type.
  final int? count;

  /// The manufacturer of the Inference accelerator.
  final String? manufacturer;

  /// Describes the memory available to the inference accelerator.
  final InferenceDeviceMemoryInfo? memoryInfo;

  /// The name of the Inference accelerator.
  final String? name;

  InferenceDeviceInfo({
    this.count,
    this.manufacturer,
    this.memoryInfo,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final manufacturer = this.manufacturer;
    final memoryInfo = this.memoryInfo;
    final name = this.name;
    return {
      if (count != null) 'count': count,
      if (manufacturer != null) 'manufacturer': manufacturer,
      if (memoryInfo != null) 'memoryInfo': memoryInfo,
      if (name != null) 'name': name,
    };
  }
}

/// Describes the memory available to the inference accelerator.
class InferenceDeviceMemoryInfo {
  /// The size of the memory available to the inference accelerator, in MiB.
  final int? sizeInMiB;

  InferenceDeviceMemoryInfo({
    this.sizeInMiB,
  });

  Map<String, dynamic> toJson() {
    final sizeInMiB = this.sizeInMiB;
    return {
      if (sizeInMiB != null) 'sizeInMiB': sizeInMiB,
    };
  }
}

/// Describes an instance.
class Instance {
  /// The AMI launch index, which can be used to find this instance in the launch
  /// group.
  final int? amiLaunchIndex;

  /// The architecture of the image.
  final ArchitectureValues? architecture;

  /// Any block device mapping entries for the instance.
  final List<InstanceBlockDeviceMapping>? blockDeviceMappings;

  /// The boot mode that was specified by the AMI. If the value is
  /// <code>uefi-preferred</code>, the AMI supports both UEFI and Legacy BIOS. The
  /// <code>currentInstanceBootMode</code> parameter is the boot mode that is used
  /// to boot the instance at launch or start.
  /// <note>
  /// The operating system contained in the AMI must be configured to support the
  /// specified boot mode.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot
  /// modes</a> in the <i>Amazon EC2 User Guide</i>.
  final BootModeValues? bootMode;

  /// The ID of the Capacity Reservation.
  final String? capacityReservationId;

  /// Information about the Capacity Reservation targeting option.
  final CapacityReservationSpecificationResponse?
      capacityReservationSpecification;

  /// The idempotency token you provided when you launched the instance, if
  /// applicable.
  final String? clientToken;

  /// The CPU options for the instance.
  final CpuOptions? cpuOptions;

  /// The boot mode that is used to boot the instance at launch or start. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot
  /// modes</a> in the <i>Amazon EC2 User Guide</i>.
  final InstanceBootModeValues? currentInstanceBootMode;

  /// Indicates whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal I/O performance. This optimization
  /// isn't available with all instance types. Additional usage charges apply when
  /// using an EBS Optimized instance.
  final bool? ebsOptimized;

  /// Deprecated.
  /// <note>
  /// Amazon Elastic Graphics reached end of life on January 8, 2024. For
  /// workloads that require graphics acceleration, we recommend that you use
  /// Amazon EC2 G4ad, G4dn, or G5 instances.
  /// </note>
  final List<ElasticGpuAssociation>? elasticGpuAssociations;

  /// The elastic inference accelerator associated with the instance.
  final List<ElasticInferenceAcceleratorAssociation>?
      elasticInferenceAcceleratorAssociations;

  /// Specifies whether enhanced networking with ENA is enabled.
  final bool? enaSupport;

  /// Indicates whether the instance is enabled for Amazon Web Services Nitro
  /// Enclaves.
  final EnclaveOptions? enclaveOptions;

  /// Indicates whether the instance is enabled for hibernation.
  final HibernationOptions? hibernationOptions;

  /// The hypervisor type of the instance. The value <code>xen</code> is used for
  /// both Xen and Nitro hypervisors.
  final HypervisorType? hypervisor;

  /// The IAM instance profile associated with the instance, if applicable.
  final IamInstanceProfile? iamInstanceProfile;

  /// The ID of the AMI used to launch the instance.
  final String? imageId;

  /// The ID of the instance.
  final String? instanceId;

  /// Indicates whether this is a Spot Instance or a Scheduled Instance.
  final InstanceLifecycleType? instanceLifecycle;

  /// The instance type.
  final InstanceType? instanceType;

  /// The IPv6 address assigned to the instance.
  final String? ipv6Address;

  /// The kernel associated with this instance, if applicable.
  final String? kernelId;

  /// The name of the key pair, if this instance was launched with an associated
  /// key pair.
  final String? keyName;

  /// The time the instance was launched.
  final DateTime? launchTime;

  /// The license configurations for the instance.
  final List<LicenseConfiguration>? licenses;

  /// Provides information on the recovery and maintenance options of your
  /// instance.
  final InstanceMaintenanceOptions? maintenanceOptions;

  /// The metadata options for the instance.
  final InstanceMetadataOptionsResponse? metadataOptions;

  /// The monitoring for the instance.
  final Monitoring? monitoring;

  /// The network interfaces for the instance.
  final List<InstanceNetworkInterface>? networkInterfaces;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The location where the instance launched, if applicable.
  final Placement? placement;

  /// The platform. This value is <code>windows</code> for Windows instances;
  /// otherwise, it is empty.
  final PlatformValues? platform;

  /// The platform details value for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html">AMI
  /// billing information fields</a> in the <i>Amazon EC2 User Guide</i>.
  final String? platformDetails;

  /// [IPv4 only] The private DNS hostname name assigned to the instance. This DNS
  /// hostname can only be used inside the Amazon EC2 network. This name is not
  /// available until the instance enters the <code>running</code> state.
  ///
  /// The Amazon-provided DNS server resolves Amazon-provided private DNS
  /// hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If
  /// you are not using the Amazon-provided DNS server in your VPC, your custom
  /// domain name servers must resolve the hostname as appropriate.
  final String? privateDnsName;

  /// The options for the instance hostname.
  final PrivateDnsNameOptionsResponse? privateDnsNameOptions;

  /// The private IPv4 address assigned to the instance.
  final String? privateIpAddress;

  /// The product codes attached to this instance, if applicable.
  final List<ProductCode>? productCodes;

  /// [IPv4 only] The public DNS name assigned to the instance. This name is not
  /// available until the instance enters the <code>running</code> state. This
  /// name is only available if you've enabled DNS hostnames for your VPC.
  final String? publicDnsName;

  /// The public IPv4 address, or the Carrier IP address assigned to the instance,
  /// if applicable.
  ///
  /// A Carrier IP address only applies to an instance launched in a subnet
  /// associated with a Wavelength Zone.
  final String? publicIpAddress;

  /// The RAM disk associated with this instance, if applicable.
  final String? ramdiskId;

  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  final String? rootDeviceName;

  /// The root device type used by the AMI. The AMI can use an EBS volume or an
  /// instance store volume.
  final DeviceType? rootDeviceType;

  /// The security groups for the instance.
  final List<GroupIdentifier>? securityGroups;

  /// Indicates whether source/destination checking is enabled.
  final bool? sourceDestCheck;

  /// If the request is a Spot Instance request, the ID of the request.
  final String? spotInstanceRequestId;

  /// Specifies whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final String? sriovNetSupport;

  /// The current state of the instance.
  final InstanceState? state;

  /// The reason for the most recent state transition.
  final StateReason? stateReason;

  /// The reason for the most recent state transition. This might be an empty
  /// string.
  final String? stateTransitionReason;

  /// The ID of the subnet in which the instance is running.
  final String? subnetId;

  /// Any tags assigned to the instance.
  final List<Tag>? tags;

  /// If the instance is configured for NitroTPM support, the value is
  /// <code>v2.0</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html">NitroTPM</a>
  /// in the <i>Amazon EC2 User Guide</i>.
  final String? tpmSupport;

  /// The usage operation value for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html">AMI
  /// billing information fields</a> in the <i>Amazon EC2 User Guide</i>.
  final String? usageOperation;

  /// The time that the usage operation was last updated.
  final DateTime? usageOperationUpdateTime;

  /// The virtualization type of the instance.
  final VirtualizationType? virtualizationType;

  /// The ID of the VPC in which the instance is running.
  final String? vpcId;

  Instance({
    this.amiLaunchIndex,
    this.architecture,
    this.blockDeviceMappings,
    this.bootMode,
    this.capacityReservationId,
    this.capacityReservationSpecification,
    this.clientToken,
    this.cpuOptions,
    this.currentInstanceBootMode,
    this.ebsOptimized,
    this.elasticGpuAssociations,
    this.elasticInferenceAcceleratorAssociations,
    this.enaSupport,
    this.enclaveOptions,
    this.hibernationOptions,
    this.hypervisor,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceId,
    this.instanceLifecycle,
    this.instanceType,
    this.ipv6Address,
    this.kernelId,
    this.keyName,
    this.launchTime,
    this.licenses,
    this.maintenanceOptions,
    this.metadataOptions,
    this.monitoring,
    this.networkInterfaces,
    this.outpostArn,
    this.placement,
    this.platform,
    this.platformDetails,
    this.privateDnsName,
    this.privateDnsNameOptions,
    this.privateIpAddress,
    this.productCodes,
    this.publicDnsName,
    this.publicIpAddress,
    this.ramdiskId,
    this.rootDeviceName,
    this.rootDeviceType,
    this.securityGroups,
    this.sourceDestCheck,
    this.spotInstanceRequestId,
    this.sriovNetSupport,
    this.state,
    this.stateReason,
    this.stateTransitionReason,
    this.subnetId,
    this.tags,
    this.tpmSupport,
    this.usageOperation,
    this.usageOperationUpdateTime,
    this.virtualizationType,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final amiLaunchIndex = this.amiLaunchIndex;
    final architecture = this.architecture;
    final blockDeviceMappings = this.blockDeviceMappings;
    final bootMode = this.bootMode;
    final capacityReservationId = this.capacityReservationId;
    final capacityReservationSpecification =
        this.capacityReservationSpecification;
    final clientToken = this.clientToken;
    final cpuOptions = this.cpuOptions;
    final currentInstanceBootMode = this.currentInstanceBootMode;
    final ebsOptimized = this.ebsOptimized;
    final elasticGpuAssociations = this.elasticGpuAssociations;
    final elasticInferenceAcceleratorAssociations =
        this.elasticInferenceAcceleratorAssociations;
    final enaSupport = this.enaSupport;
    final enclaveOptions = this.enclaveOptions;
    final hibernationOptions = this.hibernationOptions;
    final hypervisor = this.hypervisor;
    final iamInstanceProfile = this.iamInstanceProfile;
    final imageId = this.imageId;
    final instanceId = this.instanceId;
    final instanceLifecycle = this.instanceLifecycle;
    final instanceType = this.instanceType;
    final ipv6Address = this.ipv6Address;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final launchTime = this.launchTime;
    final licenses = this.licenses;
    final maintenanceOptions = this.maintenanceOptions;
    final metadataOptions = this.metadataOptions;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final outpostArn = this.outpostArn;
    final placement = this.placement;
    final platform = this.platform;
    final platformDetails = this.platformDetails;
    final privateDnsName = this.privateDnsName;
    final privateDnsNameOptions = this.privateDnsNameOptions;
    final privateIpAddress = this.privateIpAddress;
    final productCodes = this.productCodes;
    final publicDnsName = this.publicDnsName;
    final publicIpAddress = this.publicIpAddress;
    final ramdiskId = this.ramdiskId;
    final rootDeviceName = this.rootDeviceName;
    final rootDeviceType = this.rootDeviceType;
    final securityGroups = this.securityGroups;
    final sourceDestCheck = this.sourceDestCheck;
    final spotInstanceRequestId = this.spotInstanceRequestId;
    final sriovNetSupport = this.sriovNetSupport;
    final state = this.state;
    final stateReason = this.stateReason;
    final stateTransitionReason = this.stateTransitionReason;
    final subnetId = this.subnetId;
    final tags = this.tags;
    final tpmSupport = this.tpmSupport;
    final usageOperation = this.usageOperation;
    final usageOperationUpdateTime = this.usageOperationUpdateTime;
    final virtualizationType = this.virtualizationType;
    final vpcId = this.vpcId;
    return {
      if (amiLaunchIndex != null) 'amiLaunchIndex': amiLaunchIndex,
      if (architecture != null) 'architecture': architecture.value,
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (bootMode != null) 'bootMode': bootMode.value,
      if (capacityReservationId != null)
        'capacityReservationId': capacityReservationId,
      if (capacityReservationSpecification != null)
        'capacityReservationSpecification': capacityReservationSpecification,
      if (clientToken != null) 'clientToken': clientToken,
      if (cpuOptions != null) 'cpuOptions': cpuOptions,
      if (currentInstanceBootMode != null)
        'currentInstanceBootMode': currentInstanceBootMode.value,
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (elasticGpuAssociations != null)
        'elasticGpuAssociationSet': elasticGpuAssociations,
      if (elasticInferenceAcceleratorAssociations != null)
        'elasticInferenceAcceleratorAssociationSet':
            elasticInferenceAcceleratorAssociations,
      if (enaSupport != null) 'enaSupport': enaSupport,
      if (enclaveOptions != null) 'enclaveOptions': enclaveOptions,
      if (hibernationOptions != null) 'hibernationOptions': hibernationOptions,
      if (hypervisor != null) 'hypervisor': hypervisor.value,
      if (iamInstanceProfile != null) 'iamInstanceProfile': iamInstanceProfile,
      if (imageId != null) 'imageId': imageId,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceLifecycle != null)
        'instanceLifecycle': instanceLifecycle.value,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (ipv6Address != null) 'ipv6Address': ipv6Address,
      if (kernelId != null) 'kernelId': kernelId,
      if (keyName != null) 'keyName': keyName,
      if (launchTime != null) 'launchTime': iso8601ToJson(launchTime),
      if (licenses != null) 'licenseSet': licenses,
      if (maintenanceOptions != null) 'maintenanceOptions': maintenanceOptions,
      if (metadataOptions != null) 'metadataOptions': metadataOptions,
      if (monitoring != null) 'monitoring': monitoring,
      if (networkInterfaces != null) 'networkInterfaceSet': networkInterfaces,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (placement != null) 'placement': placement,
      if (platform != null) 'platform': platform.value,
      if (platformDetails != null) 'platformDetails': platformDetails,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateDnsNameOptions != null)
        'privateDnsNameOptions': privateDnsNameOptions,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (productCodes != null) 'productCodes': productCodes,
      if (publicDnsName != null) 'dnsName': publicDnsName,
      if (publicIpAddress != null) 'ipAddress': publicIpAddress,
      if (ramdiskId != null) 'ramdiskId': ramdiskId,
      if (rootDeviceName != null) 'rootDeviceName': rootDeviceName,
      if (rootDeviceType != null) 'rootDeviceType': rootDeviceType.value,
      if (securityGroups != null) 'groupSet': securityGroups,
      if (sourceDestCheck != null) 'sourceDestCheck': sourceDestCheck,
      if (spotInstanceRequestId != null)
        'spotInstanceRequestId': spotInstanceRequestId,
      if (sriovNetSupport != null) 'sriovNetSupport': sriovNetSupport,
      if (state != null) 'instanceState': state,
      if (stateReason != null) 'stateReason': stateReason,
      if (stateTransitionReason != null) 'reason': stateTransitionReason,
      if (subnetId != null) 'subnetId': subnetId,
      if (tags != null) 'tagSet': tags,
      if (tpmSupport != null) 'tpmSupport': tpmSupport,
      if (usageOperation != null) 'usageOperation': usageOperation,
      if (usageOperationUpdateTime != null)
        'usageOperationUpdateTime': iso8601ToJson(usageOperationUpdateTime),
      if (virtualizationType != null)
        'virtualizationType': virtualizationType.value,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// ENA Express uses Amazon Web Services Scalable Reliable Datagram (SRD)
/// technology to increase the maximum bandwidth used per stream and minimize
/// tail latency of network traffic between EC2 instances. With ENA Express, you
/// can communicate between two EC2 instances in the same subnet within the same
/// account, or in different accounts. Both sending and receiving instances must
/// have ENA Express enabled.
///
/// To improve the reliability of network packet delivery, ENA Express reorders
/// network packets on the receiving end by default. However, some UDP-based
/// applications are designed to handle network packets that are out of order to
/// reduce the overhead for packet delivery at the network layer. When ENA
/// Express is enabled, you can specify whether UDP network traffic uses it.
class InstanceAttachmentEnaSrdSpecification {
  /// Indicates whether ENA Express is enabled for the network interface.
  final bool? enaSrdEnabled;

  /// Configures ENA Express for UDP network traffic.
  final InstanceAttachmentEnaSrdUdpSpecification? enaSrdUdpSpecification;

  InstanceAttachmentEnaSrdSpecification({
    this.enaSrdEnabled,
    this.enaSrdUdpSpecification,
  });

  Map<String, dynamic> toJson() {
    final enaSrdEnabled = this.enaSrdEnabled;
    final enaSrdUdpSpecification = this.enaSrdUdpSpecification;
    return {
      if (enaSrdEnabled != null) 'enaSrdEnabled': enaSrdEnabled,
      if (enaSrdUdpSpecification != null)
        'enaSrdUdpSpecification': enaSrdUdpSpecification,
    };
  }
}

/// ENA Express is compatible with both TCP and UDP transport protocols. When
/// it's enabled, TCP traffic automatically uses it. However, some UDP-based
/// applications are designed to handle network packets that are out of order,
/// without a need for retransmission, such as live video broadcasting or other
/// near-real-time applications. For UDP traffic, you can specify whether to use
/// ENA Express, based on your application environment needs.
class InstanceAttachmentEnaSrdUdpSpecification {
  /// Indicates whether UDP traffic to and from the instance uses ENA Express. To
  /// specify this setting, you must first enable ENA Express.
  final bool? enaSrdUdpEnabled;

  InstanceAttachmentEnaSrdUdpSpecification({
    this.enaSrdUdpEnabled,
  });

  Map<String, dynamic> toJson() {
    final enaSrdUdpEnabled = this.enaSrdUdpEnabled;
    return {
      if (enaSrdUdpEnabled != null) 'enaSrdUdpEnabled': enaSrdUdpEnabled,
    };
  }
}

/// Describes an instance attribute.
class InstanceAttribute {
  /// The block device mapping of the instance.
  final List<InstanceBlockDeviceMapping>? blockDeviceMappings;

  /// To enable the instance for Amazon Web Services Stop Protection, set this
  /// parameter to <code>true</code>; otherwise, set it to <code>false</code>.
  final AttributeBooleanValue? disableApiStop;

  /// If the value is <code>true</code>, you can't terminate the instance through
  /// the Amazon EC2 console, CLI, or API; otherwise, you can.
  final AttributeBooleanValue? disableApiTermination;

  /// Indicates whether the instance is optimized for Amazon EBS I/O.
  final AttributeBooleanValue? ebsOptimized;

  /// Indicates whether enhanced networking with ENA is enabled.
  final AttributeBooleanValue? enaSupport;

  /// To enable the instance for Amazon Web Services Nitro Enclaves, set this
  /// parameter to <code>true</code>; otherwise, set it to <code>false</code>.
  final EnclaveOptions? enclaveOptions;

  /// The security groups associated with the instance.
  final List<GroupIdentifier>? groups;

  /// The ID of the instance.
  final String? instanceId;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  final AttributeValue? instanceInitiatedShutdownBehavior;

  /// The instance type.
  final AttributeValue? instanceType;

  /// The kernel ID.
  final AttributeValue? kernelId;

  /// A list of product codes.
  final List<ProductCode>? productCodes;

  /// The RAM disk ID.
  final AttributeValue? ramdiskId;

  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  final AttributeValue? rootDeviceName;

  /// Enable or disable source/destination checks, which ensure that the instance
  /// is either the source or the destination of any traffic that it receives. If
  /// the value is <code>true</code>, source/destination checks are enabled;
  /// otherwise, they are disabled. The default value is <code>true</code>. You
  /// must disable source/destination checks if the instance runs services such as
  /// network address translation, routing, or firewalls.
  final AttributeBooleanValue? sourceDestCheck;

  /// Indicates whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final AttributeValue? sriovNetSupport;

  /// The user data.
  final AttributeValue? userData;

  InstanceAttribute({
    this.blockDeviceMappings,
    this.disableApiStop,
    this.disableApiTermination,
    this.ebsOptimized,
    this.enaSupport,
    this.enclaveOptions,
    this.groups,
    this.instanceId,
    this.instanceInitiatedShutdownBehavior,
    this.instanceType,
    this.kernelId,
    this.productCodes,
    this.ramdiskId,
    this.rootDeviceName,
    this.sourceDestCheck,
    this.sriovNetSupport,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final blockDeviceMappings = this.blockDeviceMappings;
    final disableApiStop = this.disableApiStop;
    final disableApiTermination = this.disableApiTermination;
    final ebsOptimized = this.ebsOptimized;
    final enaSupport = this.enaSupport;
    final enclaveOptions = this.enclaveOptions;
    final groups = this.groups;
    final instanceId = this.instanceId;
    final instanceInitiatedShutdownBehavior =
        this.instanceInitiatedShutdownBehavior;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final productCodes = this.productCodes;
    final ramdiskId = this.ramdiskId;
    final rootDeviceName = this.rootDeviceName;
    final sourceDestCheck = this.sourceDestCheck;
    final sriovNetSupport = this.sriovNetSupport;
    final userData = this.userData;
    return {
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (disableApiStop != null) 'disableApiStop': disableApiStop,
      if (disableApiTermination != null)
        'disableApiTermination': disableApiTermination,
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (enaSupport != null) 'enaSupport': enaSupport,
      if (enclaveOptions != null) 'enclaveOptions': enclaveOptions,
      if (groups != null) 'groupSet': groups,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceInitiatedShutdownBehavior != null)
        'instanceInitiatedShutdownBehavior': instanceInitiatedShutdownBehavior,
      if (instanceType != null) 'instanceType': instanceType,
      if (kernelId != null) 'kernel': kernelId,
      if (productCodes != null) 'productCodes': productCodes,
      if (ramdiskId != null) 'ramdisk': ramdiskId,
      if (rootDeviceName != null) 'rootDeviceName': rootDeviceName,
      if (sourceDestCheck != null) 'sourceDestCheck': sourceDestCheck,
      if (sriovNetSupport != null) 'sriovNetSupport': sriovNetSupport,
      if (userData != null) 'userData': userData,
    };
  }
}

enum InstanceAttributeName {
  instanceType('instanceType'),
  kernel('kernel'),
  ramdisk('ramdisk'),
  userData('userData'),
  disableApiTermination('disableApiTermination'),
  instanceInitiatedShutdownBehavior('instanceInitiatedShutdownBehavior'),
  rootDeviceName('rootDeviceName'),
  blockDeviceMapping('blockDeviceMapping'),
  productCodes('productCodes'),
  sourceDestCheck('sourceDestCheck'),
  groupSet('groupSet'),
  ebsOptimized('ebsOptimized'),
  sriovNetSupport('sriovNetSupport'),
  enaSupport('enaSupport'),
  enclaveOptions('enclaveOptions'),
  disableApiStop('disableApiStop'),
  ;

  final String value;

  const InstanceAttributeName(this.value);

  static InstanceAttributeName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InstanceAttributeName'));
}

enum InstanceAutoRecoveryState {
  disabled('disabled'),
  $default('default'),
  ;

  final String value;

  const InstanceAutoRecoveryState(this.value);

  static InstanceAutoRecoveryState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceAutoRecoveryState'));
}

/// Describes a block device mapping.
class InstanceBlockDeviceMapping {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String? deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final EbsInstanceBlockDevice? ebs;

  InstanceBlockDeviceMapping({
    this.deviceName,
    this.ebs,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final ebs = this.ebs;
    return {
      if (deviceName != null) 'deviceName': deviceName,
      if (ebs != null) 'ebs': ebs,
    };
  }
}

/// Describes a block device mapping entry.
class InstanceBlockDeviceMappingSpecification {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String? deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final EbsInstanceBlockDeviceSpecification? ebs;

  /// suppress the specified device included in the block device mapping.
  final String? noDevice;

  /// The virtual device name.
  final String? virtualName;

  InstanceBlockDeviceMappingSpecification({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final ebs = this.ebs;
    final noDevice = this.noDevice;
    final virtualName = this.virtualName;
    return {
      if (deviceName != null) 'deviceName': deviceName,
      if (ebs != null) 'ebs': ebs,
      if (noDevice != null) 'noDevice': noDevice,
      if (virtualName != null) 'virtualName': virtualName,
    };
  }
}

enum InstanceBootModeValues {
  legacyBios('legacy-bios'),
  uefi('uefi'),
  ;

  final String value;

  const InstanceBootModeValues(this.value);

  static InstanceBootModeValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceBootModeValues'));
}

/// Information about the number of instances that can be launched onto the
/// Dedicated Host.
class InstanceCapacity {
  /// The number of instances that can be launched onto the Dedicated Host based
  /// on the host's available capacity.
  final int? availableCapacity;

  /// The instance type supported by the Dedicated Host.
  final String? instanceType;

  /// The total number of instances that can be launched onto the Dedicated Host
  /// if there are no instances running on it.
  final int? totalCapacity;

  InstanceCapacity({
    this.availableCapacity,
    this.instanceType,
    this.totalCapacity,
  });

  Map<String, dynamic> toJson() {
    final availableCapacity = this.availableCapacity;
    final instanceType = this.instanceType;
    final totalCapacity = this.totalCapacity;
    return {
      if (availableCapacity != null) 'availableCapacity': availableCapacity,
      if (instanceType != null) 'instanceType': instanceType,
      if (totalCapacity != null) 'totalCapacity': totalCapacity,
    };
  }
}

/// Describes a Reserved Instance listing state.
class InstanceCount {
  /// The number of listed Reserved Instances in the state specified by the
  /// <code>state</code>.
  final int? instanceCount;

  /// The states of the listed Reserved Instances.
  final ListingState? state;

  InstanceCount({
    this.instanceCount,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final state = this.state;
    return {
      if (instanceCount != null) 'instanceCount': instanceCount,
      if (state != null) 'state': state.value,
    };
  }
}

/// Describes the credit option for CPU usage of a burstable performance
/// instance.
class InstanceCreditSpecification {
  /// The credit option for CPU usage of the instance.
  ///
  /// Valid values: <code>standard</code> | <code>unlimited</code>
  final String? cpuCredits;

  /// The ID of the instance.
  final String? instanceId;

  InstanceCreditSpecification({
    this.cpuCredits,
    this.instanceId,
  });

  Map<String, dynamic> toJson() {
    final cpuCredits = this.cpuCredits;
    final instanceId = this.instanceId;
    return {
      if (cpuCredits != null) 'cpuCredits': cpuCredits,
      if (instanceId != null) 'instanceId': instanceId,
    };
  }
}

/// Describes the credit option for CPU usage of a burstable performance
/// instance.
class InstanceCreditSpecificationRequest {
  /// The ID of the instance.
  final String instanceId;

  /// The credit option for CPU usage of the instance.
  ///
  /// Valid values: <code>standard</code> | <code>unlimited</code>
  ///
  /// T3 instances with <code>host</code> tenancy do not support the
  /// <code>unlimited</code> CPU credit option.
  final String? cpuCredits;

  InstanceCreditSpecificationRequest({
    required this.instanceId,
    this.cpuCredits,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final cpuCredits = this.cpuCredits;
    return {
      'InstanceId': instanceId,
      if (cpuCredits != null) 'CpuCredits': cpuCredits,
    };
  }
}

/// The event window.
class InstanceEventWindow {
  /// One or more targets associated with the event window.
  final InstanceEventWindowAssociationTarget? associationTarget;

  /// The cron expression defined for the event window.
  final String? cronExpression;

  /// The ID of the event window.
  final String? instanceEventWindowId;

  /// The name of the event window.
  final String? name;

  /// The current state of the event window.
  final InstanceEventWindowState? state;

  /// The instance tags associated with the event window.
  final List<Tag>? tags;

  /// One or more time ranges defined for the event window.
  final List<InstanceEventWindowTimeRange>? timeRanges;

  InstanceEventWindow({
    this.associationTarget,
    this.cronExpression,
    this.instanceEventWindowId,
    this.name,
    this.state,
    this.tags,
    this.timeRanges,
  });

  Map<String, dynamic> toJson() {
    final associationTarget = this.associationTarget;
    final cronExpression = this.cronExpression;
    final instanceEventWindowId = this.instanceEventWindowId;
    final name = this.name;
    final state = this.state;
    final tags = this.tags;
    final timeRanges = this.timeRanges;
    return {
      if (associationTarget != null) 'associationTarget': associationTarget,
      if (cronExpression != null) 'cronExpression': cronExpression,
      if (instanceEventWindowId != null)
        'instanceEventWindowId': instanceEventWindowId,
      if (name != null) 'name': name,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (timeRanges != null) 'timeRangeSet': timeRanges,
    };
  }
}

/// One or more targets associated with the specified event window. Only one
/// <i>type</i> of target (instance ID, instance tag, or Dedicated Host ID) can
/// be associated with an event window.
class InstanceEventWindowAssociationRequest {
  /// The IDs of the Dedicated Hosts to associate with the event window.
  final List<String>? dedicatedHostIds;

  /// The IDs of the instances to associate with the event window. If the instance
  /// is on a Dedicated Host, you can't specify the Instance ID parameter; you
  /// must use the Dedicated Host ID parameter.
  final List<String>? instanceIds;

  /// The instance tags to associate with the event window. Any instances
  /// associated with the tags will be associated with the event window.
  final List<Tag>? instanceTags;

  InstanceEventWindowAssociationRequest({
    this.dedicatedHostIds,
    this.instanceIds,
    this.instanceTags,
  });

  Map<String, dynamic> toJson() {
    final dedicatedHostIds = this.dedicatedHostIds;
    final instanceIds = this.instanceIds;
    final instanceTags = this.instanceTags;
    return {
      if (dedicatedHostIds != null) 'DedicatedHostId': dedicatedHostIds,
      if (instanceIds != null) 'InstanceId': instanceIds,
      if (instanceTags != null) 'InstanceTag': instanceTags,
    };
  }
}

/// One or more targets associated with the event window.
class InstanceEventWindowAssociationTarget {
  /// The IDs of the Dedicated Hosts associated with the event window.
  final List<String>? dedicatedHostIds;

  /// The IDs of the instances associated with the event window.
  final List<String>? instanceIds;

  /// The instance tags associated with the event window. Any instances associated
  /// with the tags will be associated with the event window.
  final List<Tag>? tags;

  InstanceEventWindowAssociationTarget({
    this.dedicatedHostIds,
    this.instanceIds,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final dedicatedHostIds = this.dedicatedHostIds;
    final instanceIds = this.instanceIds;
    final tags = this.tags;
    return {
      if (dedicatedHostIds != null) 'dedicatedHostIdSet': dedicatedHostIds,
      if (instanceIds != null) 'instanceIdSet': instanceIds,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// The targets to disassociate from the specified event window.
class InstanceEventWindowDisassociationRequest {
  /// The IDs of the Dedicated Hosts to disassociate from the event window.
  final List<String>? dedicatedHostIds;

  /// The IDs of the instances to disassociate from the event window.
  final List<String>? instanceIds;

  /// The instance tags to disassociate from the event window. Any instances
  /// associated with the tags will be disassociated from the event window.
  final List<Tag>? instanceTags;

  InstanceEventWindowDisassociationRequest({
    this.dedicatedHostIds,
    this.instanceIds,
    this.instanceTags,
  });

  Map<String, dynamic> toJson() {
    final dedicatedHostIds = this.dedicatedHostIds;
    final instanceIds = this.instanceIds;
    final instanceTags = this.instanceTags;
    return {
      if (dedicatedHostIds != null) 'DedicatedHostId': dedicatedHostIds,
      if (instanceIds != null) 'InstanceId': instanceIds,
      if (instanceTags != null) 'InstanceTag': instanceTags,
    };
  }
}

enum InstanceEventWindowState {
  creating('creating'),
  deleting('deleting'),
  active('active'),
  deleted('deleted'),
  ;

  final String value;

  const InstanceEventWindowState(this.value);

  static InstanceEventWindowState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceEventWindowState'));
}

/// The state of the event window.
class InstanceEventWindowStateChange {
  /// The ID of the event window.
  final String? instanceEventWindowId;

  /// The current state of the event window.
  final InstanceEventWindowState? state;

  InstanceEventWindowStateChange({
    this.instanceEventWindowId,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindowId = this.instanceEventWindowId;
    final state = this.state;
    return {
      if (instanceEventWindowId != null)
        'instanceEventWindowId': instanceEventWindowId,
      if (state != null) 'state': state.value,
    };
  }
}

/// The start day and time and the end day and time of the time range, in UTC.
class InstanceEventWindowTimeRange {
  /// The hour when the time range ends.
  final int? endHour;

  /// The day on which the time range ends.
  final WeekDay? endWeekDay;

  /// The hour when the time range begins.
  final int? startHour;

  /// The day on which the time range begins.
  final WeekDay? startWeekDay;

  InstanceEventWindowTimeRange({
    this.endHour,
    this.endWeekDay,
    this.startHour,
    this.startWeekDay,
  });

  Map<String, dynamic> toJson() {
    final endHour = this.endHour;
    final endWeekDay = this.endWeekDay;
    final startHour = this.startHour;
    final startWeekDay = this.startWeekDay;
    return {
      if (endHour != null) 'endHour': endHour,
      if (endWeekDay != null) 'endWeekDay': endWeekDay.value,
      if (startHour != null) 'startHour': startHour,
      if (startWeekDay != null) 'startWeekDay': startWeekDay.value,
    };
  }
}

/// The start day and time and the end day and time of the time range, in UTC.
class InstanceEventWindowTimeRangeRequest {
  /// The hour when the time range ends.
  final int? endHour;

  /// The day on which the time range ends.
  final WeekDay? endWeekDay;

  /// The hour when the time range begins.
  final int? startHour;

  /// The day on which the time range begins.
  final WeekDay? startWeekDay;

  InstanceEventWindowTimeRangeRequest({
    this.endHour,
    this.endWeekDay,
    this.startHour,
    this.startWeekDay,
  });

  Map<String, dynamic> toJson() {
    final endHour = this.endHour;
    final endWeekDay = this.endWeekDay;
    final startHour = this.startHour;
    final startWeekDay = this.startWeekDay;
    return {
      if (endHour != null) 'EndHour': endHour,
      if (endWeekDay != null) 'EndWeekDay': endWeekDay.value,
      if (startHour != null) 'StartHour': startHour,
      if (startWeekDay != null) 'StartWeekDay': startWeekDay.value,
    };
  }
}

/// Describes an instance to export.
class InstanceExportDetails {
  /// The ID of the resource being exported.
  final String? instanceId;

  /// The target virtualization environment.
  final ExportEnvironment? targetEnvironment;

  InstanceExportDetails({
    this.instanceId,
    this.targetEnvironment,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final targetEnvironment = this.targetEnvironment;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (targetEnvironment != null)
        'targetEnvironment': targetEnvironment.value,
    };
  }
}

/// Describes the default credit option for CPU usage of a burstable performance
/// instance family.
class InstanceFamilyCreditSpecification {
  /// The default credit option for CPU usage of the instance family. Valid values
  /// are <code>standard</code> and <code>unlimited</code>.
  final String? cpuCredits;

  /// The instance family.
  final UnlimitedSupportedInstanceFamily? instanceFamily;

  InstanceFamilyCreditSpecification({
    this.cpuCredits,
    this.instanceFamily,
  });

  Map<String, dynamic> toJson() {
    final cpuCredits = this.cpuCredits;
    final instanceFamily = this.instanceFamily;
    return {
      if (cpuCredits != null) 'cpuCredits': cpuCredits,
      if (instanceFamily != null) 'instanceFamily': instanceFamily.value,
    };
  }
}

enum InstanceGeneration {
  current('current'),
  previous('previous'),
  ;

  final String value;

  const InstanceGeneration(this.value);

  static InstanceGeneration fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InstanceGeneration'));
}

enum InstanceHealthStatus {
  healthy('healthy'),
  unhealthy('unhealthy'),
  ;

  final String value;

  const InstanceHealthStatus(this.value);

  static InstanceHealthStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InstanceHealthStatus'));
}

enum InstanceInterruptionBehavior {
  hibernate('hibernate'),
  stop('stop'),
  terminate('terminate'),
  ;

  final String value;

  const InstanceInterruptionBehavior(this.value);

  static InstanceInterruptionBehavior fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceInterruptionBehavior'));
}

/// Information about an IPv4 prefix.
class InstanceIpv4Prefix {
  /// One or more IPv4 prefixes assigned to the network interface.
  final String? ipv4Prefix;

  InstanceIpv4Prefix({
    this.ipv4Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv4Prefix = this.ipv4Prefix;
    return {
      if (ipv4Prefix != null) 'ipv4Prefix': ipv4Prefix,
    };
  }
}

/// Describes an IPv6 address.
class InstanceIpv6Address {
  /// The IPv6 address.
  final String? ipv6Address;

  /// Determines if an IPv6 address associated with a network interface is the
  /// primary IPv6 address. When you enable an IPv6 GUA address to be a primary
  /// IPv6, the first IPv6 GUA will be made the primary IPv6 address until the
  /// instance is terminated or the network interface is detached. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>.
  final bool? isPrimaryIpv6;

  InstanceIpv6Address({
    this.ipv6Address,
    this.isPrimaryIpv6,
  });

  Map<String, dynamic> toJson() {
    final ipv6Address = this.ipv6Address;
    final isPrimaryIpv6 = this.isPrimaryIpv6;
    return {
      if (ipv6Address != null) 'ipv6Address': ipv6Address,
      if (isPrimaryIpv6 != null) 'isPrimaryIpv6': isPrimaryIpv6,
    };
  }
}

/// Describes an IPv6 address.
class InstanceIpv6AddressRequest {
  /// The IPv6 address.
  final String? ipv6Address;

  InstanceIpv6AddressRequest({
    this.ipv6Address,
  });

  Map<String, dynamic> toJson() {
    final ipv6Address = this.ipv6Address;
    return {
      if (ipv6Address != null) 'Ipv6Address': ipv6Address,
    };
  }
}

/// Information about an IPv6 prefix.
class InstanceIpv6Prefix {
  /// One or more IPv6 prefixes assigned to the network interface.
  final String? ipv6Prefix;

  InstanceIpv6Prefix({
    this.ipv6Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv6Prefix = this.ipv6Prefix;
    return {
      if (ipv6Prefix != null) 'ipv6Prefix': ipv6Prefix,
    };
  }
}

enum InstanceLifecycle {
  spot('spot'),
  onDemand('on-demand'),
  ;

  final String value;

  const InstanceLifecycle(this.value);

  static InstanceLifecycle fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum InstanceLifecycle'));
}

enum InstanceLifecycleType {
  spot('spot'),
  scheduled('scheduled'),
  capacityBlock('capacity-block'),
  ;

  final String value;

  const InstanceLifecycleType(this.value);

  static InstanceLifecycleType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InstanceLifecycleType'));
}

/// The maintenance options for the instance.
class InstanceMaintenanceOptions {
  /// Provides information on the current automatic recovery behavior of your
  /// instance.
  final InstanceAutoRecoveryState? autoRecovery;

  InstanceMaintenanceOptions({
    this.autoRecovery,
  });

  Map<String, dynamic> toJson() {
    final autoRecovery = this.autoRecovery;
    return {
      if (autoRecovery != null) 'autoRecovery': autoRecovery.value,
    };
  }
}

/// The maintenance options for the instance.
class InstanceMaintenanceOptionsRequest {
  /// Disables the automatic recovery behavior of your instance or sets it to
  /// default. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery">Simplified
  /// automatic recovery</a>.
  final InstanceAutoRecoveryState? autoRecovery;

  InstanceMaintenanceOptionsRequest({
    this.autoRecovery,
  });

  Map<String, dynamic> toJson() {
    final autoRecovery = this.autoRecovery;
    return {
      if (autoRecovery != null) 'AutoRecovery': autoRecovery.value,
    };
  }
}

/// Describes the market (purchasing) option for the instances.
class InstanceMarketOptionsRequest {
  /// The market type.
  final MarketType? marketType;

  /// The options for Spot Instances.
  final SpotMarketOptions? spotOptions;

  InstanceMarketOptionsRequest({
    this.marketType,
    this.spotOptions,
  });

  Map<String, dynamic> toJson() {
    final marketType = this.marketType;
    final spotOptions = this.spotOptions;
    return {
      if (marketType != null) 'MarketType': marketType.value,
      if (spotOptions != null) 'SpotOptions': spotOptions,
    };
  }
}

enum InstanceMatchCriteria {
  open('open'),
  targeted('targeted'),
  ;

  final String value;

  const InstanceMatchCriteria(this.value);

  static InstanceMatchCriteria fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InstanceMatchCriteria'));
}

/// The default instance metadata service (IMDS) settings that were set at the
/// account level in the specified Amazon Web Services&#x2028; Region.
class InstanceMetadataDefaultsResponse {
  /// Indicates whether the IMDS endpoint for an instance is enabled or disabled.
  /// When disabled, the instance metadata can't be accessed.
  final InstanceMetadataEndpointState? httpEndpoint;

  /// The maximum number of hops that the metadata token can travel.
  final int? httpPutResponseHopLimit;

  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> – IMDSv2 is optional, which means that you can use
  /// either IMDSv2 or IMDSv1.
  /// </li>
  /// <li>
  /// <code>required</code> – IMDSv2 is required, which means that IMDSv1 is
  /// disabled, and you must use IMDSv2.
  /// </li>
  /// </ul>
  final HttpTokensState? httpTokens;

  /// Indicates whether access to instance tags from the instance metadata is
  /// enabled or disabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  final InstanceMetadataTagsState? instanceMetadataTags;

  InstanceMetadataDefaultsResponse({
    this.httpEndpoint,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.instanceMetadataTags,
  });

  Map<String, dynamic> toJson() {
    final httpEndpoint = this.httpEndpoint;
    final httpPutResponseHopLimit = this.httpPutResponseHopLimit;
    final httpTokens = this.httpTokens;
    final instanceMetadataTags = this.instanceMetadataTags;
    return {
      if (httpEndpoint != null) 'httpEndpoint': httpEndpoint.value,
      if (httpPutResponseHopLimit != null)
        'httpPutResponseHopLimit': httpPutResponseHopLimit,
      if (httpTokens != null) 'httpTokens': httpTokens.value,
      if (instanceMetadataTags != null)
        'instanceMetadataTags': instanceMetadataTags.value,
    };
  }
}

enum InstanceMetadataEndpointState {
  disabled('disabled'),
  enabled('enabled'),
  ;

  final String value;

  const InstanceMetadataEndpointState(this.value);

  static InstanceMetadataEndpointState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceMetadataEndpointState'));
}

/// The metadata options for the instance.
class InstanceMetadataOptionsRequest {
  /// Enables or disables the HTTP metadata endpoint on your instances.
  ///
  /// If you specify a value of <code>disabled</code>, you cannot access your
  /// instance metadata.
  ///
  /// Default: <code>enabled</code>
  final InstanceMetadataEndpointState? httpEndpoint;

  /// Enables or disables the IPv6 endpoint for the instance metadata service.
  ///
  /// Default: <code>disabled</code>
  final InstanceMetadataProtocolState? httpProtocolIpv6;

  /// The maximum number of hops that the metadata token can travel.
  ///
  /// Possible values: Integers from 1 to 64
  final int? httpPutResponseHopLimit;

  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> - IMDSv2 is optional, which means that you can use
  /// either IMDSv2 or IMDSv1.
  /// </li>
  /// <li>
  /// <code>required</code> - IMDSv2 is required, which means that IMDSv1 is
  /// disabled, and you must use IMDSv2.
  /// </li>
  /// </ul>
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// If the value of <code>ImdsSupport</code> for the Amazon Machine Image (AMI)
  /// for your instance is <code>v2.0</code> and the account level default is set
  /// to <code>no-preference</code>, the default is <code>required</code>.
  /// </li>
  /// <li>
  /// If the value of <code>ImdsSupport</code> for the Amazon Machine Image (AMI)
  /// for your instance is <code>v2.0</code>, but the account level default is set
  /// to <code>V1 or V2</code>, the default is <code>optional</code>.
  /// </li>
  /// </ul>
  /// The default value can also be affected by other combinations of parameters.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order
  /// of precedence for instance metadata options</a> in the <i>Amazon EC2 User
  /// Guide</i>.
  final HttpTokensState? httpTokens;

  /// Set to <code>enabled</code> to allow access to instance tags from the
  /// instance metadata. Set to <code>disabled</code> to turn off access to
  /// instance tags from the instance metadata. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a>.
  ///
  /// Default: <code>disabled</code>
  final InstanceMetadataTagsState? instanceMetadataTags;

  InstanceMetadataOptionsRequest({
    this.httpEndpoint,
    this.httpProtocolIpv6,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.instanceMetadataTags,
  });

  Map<String, dynamic> toJson() {
    final httpEndpoint = this.httpEndpoint;
    final httpProtocolIpv6 = this.httpProtocolIpv6;
    final httpPutResponseHopLimit = this.httpPutResponseHopLimit;
    final httpTokens = this.httpTokens;
    final instanceMetadataTags = this.instanceMetadataTags;
    return {
      if (httpEndpoint != null) 'HttpEndpoint': httpEndpoint.value,
      if (httpProtocolIpv6 != null) 'HttpProtocolIpv6': httpProtocolIpv6.value,
      if (httpPutResponseHopLimit != null)
        'HttpPutResponseHopLimit': httpPutResponseHopLimit,
      if (httpTokens != null) 'HttpTokens': httpTokens.value,
      if (instanceMetadataTags != null)
        'InstanceMetadataTags': instanceMetadataTags.value,
    };
  }
}

/// The metadata options for the instance.
class InstanceMetadataOptionsResponse {
  /// Indicates whether the HTTP metadata endpoint on your instances is enabled or
  /// disabled.
  ///
  /// If the value is <code>disabled</code>, you cannot access your instance
  /// metadata.
  final InstanceMetadataEndpointState? httpEndpoint;

  /// Indicates whether the IPv6 endpoint for the instance metadata service is
  /// enabled or disabled.
  ///
  /// Default: <code>disabled</code>
  final InstanceMetadataProtocolState? httpProtocolIpv6;

  /// The maximum number of hops that the metadata token can travel.
  ///
  /// Possible values: Integers from <code>1</code> to <code>64</code>
  final int? httpPutResponseHopLimit;

  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> - IMDSv2 is optional, which means that you can use
  /// either IMDSv2 or IMDSv1.
  /// </li>
  /// <li>
  /// <code>required</code> - IMDSv2 is required, which means that IMDSv1 is
  /// disabled, and you must use IMDSv2.
  /// </li>
  /// </ul>
  final HttpTokensState? httpTokens;

  /// Indicates whether access to instance tags from the instance metadata is
  /// enabled or disabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a>.
  final InstanceMetadataTagsState? instanceMetadataTags;

  /// The state of the metadata option changes.
  ///
  /// <code>pending</code> - The metadata options are being updated and the
  /// instance is not ready to process metadata traffic with the new selection.
  ///
  /// <code>applied</code> - The metadata options have been successfully applied
  /// on the instance.
  final InstanceMetadataOptionsState? state;

  InstanceMetadataOptionsResponse({
    this.httpEndpoint,
    this.httpProtocolIpv6,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.instanceMetadataTags,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final httpEndpoint = this.httpEndpoint;
    final httpProtocolIpv6 = this.httpProtocolIpv6;
    final httpPutResponseHopLimit = this.httpPutResponseHopLimit;
    final httpTokens = this.httpTokens;
    final instanceMetadataTags = this.instanceMetadataTags;
    final state = this.state;
    return {
      if (httpEndpoint != null) 'httpEndpoint': httpEndpoint.value,
      if (httpProtocolIpv6 != null) 'httpProtocolIpv6': httpProtocolIpv6.value,
      if (httpPutResponseHopLimit != null)
        'httpPutResponseHopLimit': httpPutResponseHopLimit,
      if (httpTokens != null) 'httpTokens': httpTokens.value,
      if (instanceMetadataTags != null)
        'instanceMetadataTags': instanceMetadataTags.value,
      if (state != null) 'state': state.value,
    };
  }
}

enum InstanceMetadataOptionsState {
  pending('pending'),
  applied('applied'),
  ;

  final String value;

  const InstanceMetadataOptionsState(this.value);

  static InstanceMetadataOptionsState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceMetadataOptionsState'));
}

enum InstanceMetadataProtocolState {
  disabled('disabled'),
  enabled('enabled'),
  ;

  final String value;

  const InstanceMetadataProtocolState(this.value);

  static InstanceMetadataProtocolState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceMetadataProtocolState'));
}

enum InstanceMetadataTagsState {
  disabled('disabled'),
  enabled('enabled'),
  ;

  final String value;

  const InstanceMetadataTagsState(this.value);

  static InstanceMetadataTagsState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceMetadataTagsState'));
}

/// Describes the monitoring of an instance.
class InstanceMonitoring {
  /// The ID of the instance.
  final String? instanceId;

  /// The monitoring for the instance.
  final Monitoring? monitoring;

  InstanceMonitoring({
    this.instanceId,
    this.monitoring,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final monitoring = this.monitoring;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (monitoring != null) 'monitoring': monitoring,
    };
  }
}

/// Describes a network interface.
class InstanceNetworkInterface {
  /// The association information for an Elastic IPv4 associated with the network
  /// interface.
  final InstanceNetworkInterfaceAssociation? association;

  /// The network interface attachment.
  final InstanceNetworkInterfaceAttachment? attachment;

  /// A security group connection tracking configuration that enables you to set
  /// the timeout for connection tracking on an Elastic network interface. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
  /// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final ConnectionTrackingSpecificationResponse?
      connectionTrackingConfiguration;

  /// The description.
  final String? description;

  /// The security groups.
  final List<GroupIdentifier>? groups;

  /// The type of network interface.
  ///
  /// Valid values: <code>interface</code> | <code>efa</code> | <code>trunk</code>
  final String? interfaceType;

  /// The IPv4 delegated prefixes that are assigned to the network interface.
  final List<InstanceIpv4Prefix>? ipv4Prefixes;

  /// The IPv6 addresses associated with the network interface.
  final List<InstanceIpv6Address>? ipv6Addresses;

  /// The IPv6 delegated prefixes that are assigned to the network interface.
  final List<InstanceIpv6Prefix>? ipv6Prefixes;

  /// The MAC address.
  final String? macAddress;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The ID of the Amazon Web Services account that created the network
  /// interface.
  final String? ownerId;

  /// The private DNS name.
  final String? privateDnsName;

  /// The IPv4 address of the network interface within the subnet.
  final String? privateIpAddress;

  /// The private IPv4 addresses associated with the network interface.
  final List<InstancePrivateIpAddress>? privateIpAddresses;

  /// Indicates whether source/destination checking is enabled.
  final bool? sourceDestCheck;

  /// The status of the network interface.
  final NetworkInterfaceStatus? status;

  /// The ID of the subnet.
  final String? subnetId;

  /// The ID of the VPC.
  final String? vpcId;

  InstanceNetworkInterface({
    this.association,
    this.attachment,
    this.connectionTrackingConfiguration,
    this.description,
    this.groups,
    this.interfaceType,
    this.ipv4Prefixes,
    this.ipv6Addresses,
    this.ipv6Prefixes,
    this.macAddress,
    this.networkInterfaceId,
    this.ownerId,
    this.privateDnsName,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.sourceDestCheck,
    this.status,
    this.subnetId,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    final attachment = this.attachment;
    final connectionTrackingConfiguration =
        this.connectionTrackingConfiguration;
    final description = this.description;
    final groups = this.groups;
    final interfaceType = this.interfaceType;
    final ipv4Prefixes = this.ipv4Prefixes;
    final ipv6Addresses = this.ipv6Addresses;
    final ipv6Prefixes = this.ipv6Prefixes;
    final macAddress = this.macAddress;
    final networkInterfaceId = this.networkInterfaceId;
    final ownerId = this.ownerId;
    final privateDnsName = this.privateDnsName;
    final privateIpAddress = this.privateIpAddress;
    final privateIpAddresses = this.privateIpAddresses;
    final sourceDestCheck = this.sourceDestCheck;
    final status = this.status;
    final subnetId = this.subnetId;
    final vpcId = this.vpcId;
    return {
      if (association != null) 'association': association,
      if (attachment != null) 'attachment': attachment,
      if (connectionTrackingConfiguration != null)
        'connectionTrackingConfiguration': connectionTrackingConfiguration,
      if (description != null) 'description': description,
      if (groups != null) 'groupSet': groups,
      if (interfaceType != null) 'interfaceType': interfaceType,
      if (ipv4Prefixes != null) 'ipv4PrefixSet': ipv4Prefixes,
      if (ipv6Addresses != null) 'ipv6AddressesSet': ipv6Addresses,
      if (ipv6Prefixes != null) 'ipv6PrefixSet': ipv6Prefixes,
      if (macAddress != null) 'macAddress': macAddress,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (ownerId != null) 'ownerId': ownerId,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (privateIpAddresses != null)
        'privateIpAddressesSet': privateIpAddresses,
      if (sourceDestCheck != null) 'sourceDestCheck': sourceDestCheck,
      if (status != null) 'status': status.value,
      if (subnetId != null) 'subnetId': subnetId,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes association information for an Elastic IP address (IPv4).
class InstanceNetworkInterfaceAssociation {
  /// The carrier IP address associated with the network interface.
  final String? carrierIp;

  /// The customer-owned IP address associated with the network interface.
  final String? customerOwnedIp;

  /// The ID of the owner of the Elastic IP address.
  final String? ipOwnerId;

  /// The public DNS name.
  final String? publicDnsName;

  /// The public IP address or Elastic IP address bound to the network interface.
  final String? publicIp;

  InstanceNetworkInterfaceAssociation({
    this.carrierIp,
    this.customerOwnedIp,
    this.ipOwnerId,
    this.publicDnsName,
    this.publicIp,
  });

  Map<String, dynamic> toJson() {
    final carrierIp = this.carrierIp;
    final customerOwnedIp = this.customerOwnedIp;
    final ipOwnerId = this.ipOwnerId;
    final publicDnsName = this.publicDnsName;
    final publicIp = this.publicIp;
    return {
      if (carrierIp != null) 'carrierIp': carrierIp,
      if (customerOwnedIp != null) 'customerOwnedIp': customerOwnedIp,
      if (ipOwnerId != null) 'ipOwnerId': ipOwnerId,
      if (publicDnsName != null) 'publicDnsName': publicDnsName,
      if (publicIp != null) 'publicIp': publicIp,
    };
  }
}

/// Describes a network interface attachment.
class InstanceNetworkInterfaceAttachment {
  /// The time stamp when the attachment initiated.
  final DateTime? attachTime;

  /// The ID of the network interface attachment.
  final String? attachmentId;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool? deleteOnTermination;

  /// The index of the device on the instance for the network interface
  /// attachment.
  final int? deviceIndex;

  /// Contains the ENA Express settings for the network interface that's attached
  /// to the instance.
  final InstanceAttachmentEnaSrdSpecification? enaSrdSpecification;

  /// The index of the network card.
  final int? networkCardIndex;

  /// The attachment state.
  final AttachmentStatus? status;

  InstanceNetworkInterfaceAttachment({
    this.attachTime,
    this.attachmentId,
    this.deleteOnTermination,
    this.deviceIndex,
    this.enaSrdSpecification,
    this.networkCardIndex,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final attachTime = this.attachTime;
    final attachmentId = this.attachmentId;
    final deleteOnTermination = this.deleteOnTermination;
    final deviceIndex = this.deviceIndex;
    final enaSrdSpecification = this.enaSrdSpecification;
    final networkCardIndex = this.networkCardIndex;
    final status = this.status;
    return {
      if (attachTime != null) 'attachTime': iso8601ToJson(attachTime),
      if (attachmentId != null) 'attachmentId': attachmentId,
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (deviceIndex != null) 'deviceIndex': deviceIndex,
      if (enaSrdSpecification != null)
        'enaSrdSpecification': enaSrdSpecification,
      if (networkCardIndex != null) 'networkCardIndex': networkCardIndex,
      if (status != null) 'status': status.value,
    };
  }
}

/// Describes a network interface.
class InstanceNetworkInterfaceSpecification {
  /// Indicates whether to assign a carrier IP address to the network interface.
  ///
  /// You can only assign a carrier IP address to a network interface that is in a
  /// subnet in a Wavelength Zone. For more information about carrier IP
  /// addresses, see <a
  /// href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip">Carrier
  /// IP address</a> in the <i>Amazon Web Services Wavelength Developer Guide</i>.
  final bool? associateCarrierIpAddress;

  /// Indicates whether to assign a public IPv4 address to an instance you launch
  /// in a VPC. The public IP address can only be assigned to a network interface
  /// for eth0, and can only be assigned to a new network interface, not an
  /// existing one. You cannot specify more than one network interface in the
  /// request. If launching into a default subnet, the default value is
  /// <code>true</code>.
  ///
  /// Amazon Web Services charges for all public IPv4 addresses, including public
  /// IPv4 addresses associated with running instances and Elastic IP addresses.
  /// For more information, see the <i>Public IPv4 Address</i> tab on the <a
  /// href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing page</a>.
  final bool? associatePublicIpAddress;

  /// A security group connection tracking specification that enables you to set
  /// the timeout for connection tracking on an Elastic network interface. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
  /// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final ConnectionTrackingSpecificationRequest? connectionTrackingSpecification;

  /// If set to <code>true</code>, the interface is deleted when the instance is
  /// terminated. You can specify <code>true</code> only if creating a new network
  /// interface when launching an instance.
  final bool? deleteOnTermination;

  /// The description of the network interface. Applies only if creating a network
  /// interface when launching an instance.
  final String? description;

  /// The position of the network interface in the attachment order. A primary
  /// network interface has a device index of 0.
  ///
  /// If you specify a network interface when launching an instance, you must
  /// specify the device index.
  final int? deviceIndex;

  /// Specifies the ENA Express settings for the network interface that's attached
  /// to the instance.
  final EnaSrdSpecificationRequest? enaSrdSpecification;

  /// The IDs of the security groups for the network interface. Applies only if
  /// creating a network interface when launching an instance.
  final List<String>? groups;

  /// The type of network interface.
  ///
  /// Valid values: <code>interface</code> | <code>efa</code>
  final String? interfaceType;

  /// The number of IPv4 delegated prefixes to be automatically assigned to the
  /// network interface. You cannot use this option if you use the
  /// <code>Ipv4Prefix</code> option.
  final int? ipv4PrefixCount;

  /// The IPv4 delegated prefixes to be assigned to the network interface. You
  /// cannot use this option if you use the <code>Ipv4PrefixCount</code> option.
  final List<Ipv4PrefixSpecificationRequest>? ipv4Prefixes;

  /// A number of IPv6 addresses to assign to the network interface. Amazon EC2
  /// chooses the IPv6 addresses from the range of the subnet. You cannot specify
  /// this option and the option to assign specific IPv6 addresses in the same
  /// request. You can specify this option if you've specified a minimum number of
  /// instances to launch.
  final int? ipv6AddressCount;

  /// The IPv6 addresses to assign to the network interface. You cannot specify
  /// this option and the option to assign a number of IPv6 addresses in the same
  /// request. You cannot specify this option if you've specified a minimum number
  /// of instances to launch.
  final List<InstanceIpv6Address>? ipv6Addresses;

  /// The number of IPv6 delegated prefixes to be automatically assigned to the
  /// network interface. You cannot use this option if you use the
  /// <code>Ipv6Prefix</code> option.
  final int? ipv6PrefixCount;

  /// The IPv6 delegated prefixes to be assigned to the network interface. You
  /// cannot use this option if you use the <code>Ipv6PrefixCount</code> option.
  final List<Ipv6PrefixSpecificationRequest>? ipv6Prefixes;

  /// The index of the network card. Some instance types support multiple network
  /// cards. The primary network interface must be assigned to network card index
  /// 0. The default is network card index 0.
  ///
  /// If you are using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html">RequestSpotInstances</a>
  /// to create Spot Instances, omit this parameter because you can’t specify the
  /// network card index when using this API. To specify the network card index,
  /// use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>.
  final int? networkCardIndex;

  /// The ID of the network interface.
  ///
  /// If you are creating a Spot Fleet, omit this parameter because you can’t
  /// specify a network interface ID in a launch specification.
  final String? networkInterfaceId;

  /// The primary IPv6 address of the network interface. When you enable an IPv6
  /// GUA address to be a primary IPv6, the first IPv6 GUA will be made the
  /// primary IPv6 address until the instance is terminated or the network
  /// interface is detached. For more information about primary IPv6 addresses,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>.
  final bool? primaryIpv6;

  /// The private IPv4 address of the network interface. Applies only if creating
  /// a network interface when launching an instance. You cannot specify this
  /// option if you're launching more than one instance in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// request.
  final String? privateIpAddress;

  /// The private IPv4 addresses to assign to the network interface. Only one
  /// private IPv4 address can be designated as primary. You cannot specify this
  /// option if you're launching more than one instance in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// request.
  final List<PrivateIpAddressSpecification>? privateIpAddresses;

  /// The number of secondary private IPv4 addresses. You can't specify this
  /// option and specify more than one private IP address using the private IP
  /// addresses option. You cannot specify this option if you're launching more
  /// than one instance in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// request.
  final int? secondaryPrivateIpAddressCount;

  /// The ID of the subnet associated with the network interface. Applies only if
  /// creating a network interface when launching an instance.
  final String? subnetId;

  InstanceNetworkInterfaceSpecification({
    this.associateCarrierIpAddress,
    this.associatePublicIpAddress,
    this.connectionTrackingSpecification,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.enaSrdSpecification,
    this.groups,
    this.interfaceType,
    this.ipv4PrefixCount,
    this.ipv4Prefixes,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.ipv6PrefixCount,
    this.ipv6Prefixes,
    this.networkCardIndex,
    this.networkInterfaceId,
    this.primaryIpv6,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final associateCarrierIpAddress = this.associateCarrierIpAddress;
    final associatePublicIpAddress = this.associatePublicIpAddress;
    final connectionTrackingSpecification =
        this.connectionTrackingSpecification;
    final deleteOnTermination = this.deleteOnTermination;
    final description = this.description;
    final deviceIndex = this.deviceIndex;
    final enaSrdSpecification = this.enaSrdSpecification;
    final groups = this.groups;
    final interfaceType = this.interfaceType;
    final ipv4PrefixCount = this.ipv4PrefixCount;
    final ipv4Prefixes = this.ipv4Prefixes;
    final ipv6AddressCount = this.ipv6AddressCount;
    final ipv6Addresses = this.ipv6Addresses;
    final ipv6PrefixCount = this.ipv6PrefixCount;
    final ipv6Prefixes = this.ipv6Prefixes;
    final networkCardIndex = this.networkCardIndex;
    final networkInterfaceId = this.networkInterfaceId;
    final primaryIpv6 = this.primaryIpv6;
    final privateIpAddress = this.privateIpAddress;
    final privateIpAddresses = this.privateIpAddresses;
    final secondaryPrivateIpAddressCount = this.secondaryPrivateIpAddressCount;
    final subnetId = this.subnetId;
    return {
      if (associateCarrierIpAddress != null)
        'AssociateCarrierIpAddress': associateCarrierIpAddress,
      if (associatePublicIpAddress != null)
        'associatePublicIpAddress': associatePublicIpAddress,
      if (connectionTrackingSpecification != null)
        'ConnectionTrackingSpecification': connectionTrackingSpecification,
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (description != null) 'description': description,
      if (deviceIndex != null) 'deviceIndex': deviceIndex,
      if (enaSrdSpecification != null)
        'EnaSrdSpecification': enaSrdSpecification,
      if (groups != null) 'SecurityGroupId': groups,
      if (interfaceType != null) 'InterfaceType': interfaceType,
      if (ipv4PrefixCount != null) 'Ipv4PrefixCount': ipv4PrefixCount,
      if (ipv4Prefixes != null) 'Ipv4Prefix': ipv4Prefixes,
      if (ipv6AddressCount != null) 'ipv6AddressCount': ipv6AddressCount,
      if (ipv6Addresses != null) 'ipv6AddressesSet': ipv6Addresses,
      if (ipv6PrefixCount != null) 'Ipv6PrefixCount': ipv6PrefixCount,
      if (ipv6Prefixes != null) 'Ipv6Prefix': ipv6Prefixes,
      if (networkCardIndex != null) 'NetworkCardIndex': networkCardIndex,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (primaryIpv6 != null) 'PrimaryIpv6': primaryIpv6,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (privateIpAddresses != null)
        'privateIpAddressesSet': privateIpAddresses,
      if (secondaryPrivateIpAddressCount != null)
        'secondaryPrivateIpAddressCount': secondaryPrivateIpAddressCount,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

/// Describes a private IPv4 address.
class InstancePrivateIpAddress {
  /// The association information for an Elastic IP address for the network
  /// interface.
  final InstanceNetworkInterfaceAssociation? association;

  /// Indicates whether this IPv4 address is the primary private IP address of the
  /// network interface.
  final bool? primary;

  /// The private IPv4 DNS name.
  final String? privateDnsName;

  /// The private IPv4 address of the network interface.
  final String? privateIpAddress;

  InstancePrivateIpAddress({
    this.association,
    this.primary,
    this.privateDnsName,
    this.privateIpAddress,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    final primary = this.primary;
    final privateDnsName = this.privateDnsName;
    final privateIpAddress = this.privateIpAddress;
    return {
      if (association != null) 'association': association,
      if (primary != null) 'primary': primary,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
    };
  }
}

/// The attributes for the instance types. When you specify instance attributes,
/// Amazon EC2 will identify instance types with these attributes.
///
/// You must specify <code>VCpuCount</code> and <code>MemoryMiB</code>. All
/// other attributes are optional. Any unspecified optional attribute is set to
/// its default.
///
/// When you specify multiple attributes, you get instance types that satisfy
/// all of the specified attributes. If you specify multiple values for an
/// attribute, you get instance types that satisfy any of the specified values.
///
/// To limit the list of instance types from which Amazon EC2 can identify
/// matching instance types, you can use one of the following parameters, but
/// not both in the same request:
///
/// <ul>
/// <li>
/// <code>AllowedInstanceTypes</code> - The instance types to include in the
/// list. All other instance types are ignored, even if they match your
/// specified attributes.
/// </li>
/// <li>
/// <code>ExcludedInstanceTypes</code> - The instance types to exclude from the
/// list, even if they match your specified attributes.
/// </li>
/// </ul> <note>
/// If you specify <code>InstanceRequirements</code>, you can't specify
/// <code>InstanceType</code>.
///
/// Attribute-based instance type selection is only supported when using Auto
/// Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan
/// to use the launch template in the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html">launch
/// instance wizard</a> or with the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances
/// API</a>, you can't specify <code>InstanceRequirements</code>.
/// </note>
/// For more information, see <a
/// href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html">Create
/// a mixed instances group using attribute-based instance type selection</a> in
/// the <i>Amazon EC2 Auto Scaling User Guide</i>, and also <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Attribute-based
/// instance type selection for EC2 Fleet</a>, <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html">Attribute-based
/// instance type selection for Spot Fleet</a>, and <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
/// placement score</a> in the <i>Amazon EC2 User Guide</i>.
class InstanceRequirements {
  /// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web
  /// Services Inferentia chips) on an instance.
  ///
  /// To exclude accelerator-enabled instance types, set <code>Max</code> to
  /// <code>0</code>.
  ///
  /// Default: No minimum or maximum limits
  final AcceleratorCount? acceleratorCount;

  /// Indicates whether instance types must have accelerators by specific
  /// manufacturers.
  ///
  /// <ul>
  /// <li>
  /// For instance types with Amazon Web Services devices, specify
  /// <code>amazon-web-services</code>.
  /// </li>
  /// <li>
  /// For instance types with AMD devices, specify <code>amd</code>.
  /// </li>
  /// <li>
  /// For instance types with Habana devices, specify <code>habana</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA devices, specify <code>nvidia</code>.
  /// </li>
  /// <li>
  /// For instance types with Xilinx devices, specify <code>xilinx</code>.
  /// </li>
  /// </ul>
  /// Default: Any manufacturer
  final List<AcceleratorManufacturer>? acceleratorManufacturers;

  /// The accelerators that must be on the instance type.
  ///
  /// <ul>
  /// <li>
  /// For instance types with NVIDIA A10G GPUs, specify <code>a10g</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA A100 GPUs, specify <code>a100</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA H100 GPUs, specify <code>h100</code>.
  /// </li>
  /// <li>
  /// For instance types with Amazon Web Services Inferentia chips, specify
  /// <code>inferentia</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA GRID K520 GPUs, specify <code>k520</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA K80 GPUs, specify <code>k80</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA M60 GPUs, specify <code>m60</code>.
  /// </li>
  /// <li>
  /// For instance types with AMD Radeon Pro V520 GPUs, specify
  /// <code>radeon-pro-v520</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA T4 GPUs, specify <code>t4</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA T4G GPUs, specify <code>t4g</code>.
  /// </li>
  /// <li>
  /// For instance types with Xilinx VU9P FPGAs, specify <code>vu9p</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA V100 GPUs, specify <code>v100</code>.
  /// </li>
  /// </ul>
  /// Default: Any accelerator
  final List<AcceleratorName>? acceleratorNames;

  /// The minimum and maximum amount of total accelerator memory, in MiB.
  ///
  /// Default: No minimum or maximum limits
  final AcceleratorTotalMemoryMiB? acceleratorTotalMemoryMiB;

  /// The accelerator types that must be on the instance type.
  ///
  /// <ul>
  /// <li>
  /// For instance types with GPU accelerators, specify <code>gpu</code>.
  /// </li>
  /// <li>
  /// For instance types with FPGA accelerators, specify <code>fpga</code>.
  /// </li>
  /// <li>
  /// For instance types with inference accelerators, specify
  /// <code>inference</code>.
  /// </li>
  /// </ul>
  /// Default: Any accelerator type
  final List<AcceleratorType>? acceleratorTypes;

  /// The instance types to apply your specified attributes against. All other
  /// instance types are ignored, even if they match your specified attributes.
  ///
  /// You can use strings with one or more wild cards, represented by an asterisk
  /// (<code>*</code>), to allow an instance type, size, or generation. The
  /// following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>,
  /// <code>m5a.*</code>, <code>r*</code>, <code>*3*</code>.
  ///
  /// For example, if you specify <code>c5*</code>,Amazon EC2 will allow the
  /// entire C5 instance family, which includes all C5a and C5n instance types. If
  /// you specify <code>m5a.*</code>, Amazon EC2 will allow all the M5a instance
  /// types, but not the M5n instance types.
  /// <note>
  /// If you specify <code>AllowedInstanceTypes</code>, you can't specify
  /// <code>ExcludedInstanceTypes</code>.
  /// </note>
  /// Default: All instance types
  final List<String>? allowedInstanceTypes;

  /// Indicates whether bare metal instance types must be included, excluded, or
  /// required.
  ///
  /// <ul>
  /// <li>
  /// To include bare metal instance types, specify <code>included</code>.
  /// </li>
  /// <li>
  /// To require only bare metal instance types, specify <code>required</code>.
  /// </li>
  /// <li>
  /// To exclude bare metal instance types, specify <code>excluded</code>.
  /// </li>
  /// </ul>
  /// Default: <code>excluded</code>
  final BareMetal? bareMetal;

  /// The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html">Amazon
  /// EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Default: No minimum or maximum limits
  final BaselineEbsBandwidthMbps? baselineEbsBandwidthMbps;

  /// Indicates whether burstable performance T instance types are included,
  /// excluded, or required. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a>.
  ///
  /// <ul>
  /// <li>
  /// To include burstable performance instance types, specify
  /// <code>included</code>.
  /// </li>
  /// <li>
  /// To require only burstable performance instance types, specify
  /// <code>required</code>.
  /// </li>
  /// <li>
  /// To exclude burstable performance instance types, specify
  /// <code>excluded</code>.
  /// </li>
  /// </ul>
  /// Default: <code>excluded</code>
  final BurstablePerformance? burstablePerformance;

  /// The CPU manufacturers to include.
  ///
  /// <ul>
  /// <li>
  /// For instance types with Intel CPUs, specify <code>intel</code>.
  /// </li>
  /// <li>
  /// For instance types with AMD CPUs, specify <code>amd</code>.
  /// </li>
  /// <li>
  /// For instance types with Amazon Web Services CPUs, specify
  /// <code>amazon-web-services</code>.
  /// </li>
  /// </ul> <note>
  /// Don't confuse the CPU manufacturer with the CPU architecture. Instances will
  /// be launched with a compatible CPU architecture based on the Amazon Machine
  /// Image (AMI) that you specify in your launch template.
  /// </note>
  /// Default: Any manufacturer
  final List<CpuManufacturer>? cpuManufacturers;

  /// The instance types to exclude.
  ///
  /// You can use strings with one or more wild cards, represented by an asterisk
  /// (<code>*</code>), to exclude an instance type, size, or generation. The
  /// following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>,
  /// <code>m5a.*</code>, <code>r*</code>, <code>*3*</code>.
  ///
  /// For example, if you specify <code>c5*</code>,Amazon EC2 will exclude the
  /// entire C5 instance family, which includes all C5a and C5n instance types. If
  /// you specify <code>m5a.*</code>, Amazon EC2 will exclude all the M5a instance
  /// types, but not the M5n instance types.
  /// <note>
  /// If you specify <code>ExcludedInstanceTypes</code>, you can't specify
  /// <code>AllowedInstanceTypes</code>.
  /// </note>
  /// Default: No excluded instance types
  final List<String>? excludedInstanceTypes;

  /// Indicates whether current or previous generation instance types are
  /// included. The current generation instance types are recommended for use.
  /// Current generation instance types are typically the latest two to three
  /// generations in each instance family. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// For current generation instance types, specify <code>current</code>.
  ///
  /// For previous generation instance types, specify <code>previous</code>.
  ///
  /// Default: Current and previous generation instance types
  final List<InstanceGeneration>? instanceGenerations;

  /// Indicates whether instance types with instance store volumes are included,
  /// excluded, or required. For more information, <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html">Amazon
  /// EC2 instance store</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// <ul>
  /// <li>
  /// To include instance types with instance store volumes, specify
  /// <code>included</code>.
  /// </li>
  /// <li>
  /// To require only instance types with instance store volumes, specify
  /// <code>required</code>.
  /// </li>
  /// <li>
  /// To exclude instance types with instance store volumes, specify
  /// <code>excluded</code>.
  /// </li>
  /// </ul>
  /// Default: <code>included</code>
  final LocalStorage? localStorage;

  /// The type of local storage that is required.
  ///
  /// <ul>
  /// <li>
  /// For instance types with hard disk drive (HDD) storage, specify
  /// <code>hdd</code>.
  /// </li>
  /// <li>
  /// For instance types with solid state drive (SSD) storage, specify
  /// <code>ssd</code>.
  /// </li>
  /// </ul>
  /// Default: <code>hdd</code> and <code>ssd</code>
  final List<LocalStorageType>? localStorageTypes;

  /// [Price protection] The price protection threshold for Spot Instances, as a
  /// percentage of an identified On-Demand price. The identified On-Demand price
  /// is the price of the lowest priced current generation C, M, or R instance
  /// type with your specified attributes. If no current generation C, M, or R
  /// instance type matches your attributes, then the identified price is from the
  /// lowest priced current generation instance types, and failing that, from the
  /// lowest priced previous generation instance types that match your attributes.
  /// When Amazon EC2 selects instance types with your attributes, it will exclude
  /// instance types whose price exceeds your specified threshold.
  ///
  /// The parameter accepts an integer, which Amazon EC2 interprets as a
  /// percentage.
  ///
  /// If you set <code>DesiredCapacityType</code> to <code>vcpu</code> or
  /// <code>memory-mib</code>, the price protection threshold is based on the per
  /// vCPU or per memory price instead of the per instance price.
  /// <note>
  /// Only one of <code>SpotMaxPricePercentageOverLowestPrice</code> or
  /// <code>MaxSpotPriceAsPercentageOfOptimalOnDemandPrice</code> can be
  /// specified. If you don't specify either, Amazon EC2 will automatically apply
  /// optimal price protection to consistently select from a wide range of
  /// instance types. To indicate no price protection threshold for Spot
  /// Instances, meaning you want to consider all instance types that match your
  /// attributes, include one of these parameters and specify a high value, such
  /// as <code>999999</code>.
  /// </note>
  final int? maxSpotPriceAsPercentageOfOptimalOnDemandPrice;

  /// The minimum and maximum amount of memory per vCPU, in GiB.
  ///
  /// Default: No minimum or maximum limits
  final MemoryGiBPerVCpu? memoryGiBPerVCpu;

  /// The minimum and maximum amount of memory, in MiB.
  final MemoryMiB? memoryMiB;

  /// The minimum and maximum amount of network bandwidth, in gigabits per second
  /// (Gbps).
  ///
  /// Default: No minimum or maximum limits
  final NetworkBandwidthGbps? networkBandwidthGbps;

  /// The minimum and maximum number of network interfaces.
  ///
  /// Default: No minimum or maximum limits
  final NetworkInterfaceCount? networkInterfaceCount;

  /// [Price protection] The price protection threshold for On-Demand Instances,
  /// as a percentage higher than an identified On-Demand price. The identified
  /// On-Demand price is the price of the lowest priced current generation C, M,
  /// or R instance type with your specified attributes. When Amazon EC2 selects
  /// instance types with your attributes, it will exclude instance types whose
  /// price exceeds your specified threshold.
  ///
  /// The parameter accepts an integer, which Amazon EC2 interprets as a
  /// percentage.
  ///
  /// To turn off price protection, specify a high value, such as
  /// <code>999999</code>.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html">GetSpotPlacementScores</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html">GetInstanceTypesFromInstanceRequirements</a>.
  /// <note>
  /// If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
  /// <code>memory-mib</code>, the price protection threshold is applied based on
  /// the per-vCPU or per-memory price instead of the per-instance price.
  /// </note>
  /// Default: <code>20</code>
  final int? onDemandMaxPricePercentageOverLowestPrice;

  /// Indicates whether instance types must support hibernation for On-Demand
  /// Instances.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html">GetSpotPlacementScores</a>.
  ///
  /// Default: <code>false</code>
  final bool? requireHibernateSupport;

  /// [Price protection] The price protection threshold for Spot Instances, as a
  /// percentage higher than an identified Spot price. The identified Spot price
  /// is the Spot price of the lowest priced current generation C, M, or R
  /// instance type with your specified attributes. If no current generation C, M,
  /// or R instance type matches your attributes, then the identified Spot price
  /// is from the lowest priced current generation instance types, and failing
  /// that, from the lowest priced previous generation instance types that match
  /// your attributes. When Amazon EC2 selects instance types with your
  /// attributes, it will exclude instance types whose Spot price exceeds your
  /// specified threshold.
  ///
  /// The parameter accepts an integer, which Amazon EC2 interprets as a
  /// percentage.
  ///
  /// If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
  /// <code>memory-mib</code>, the price protection threshold is applied based on
  /// the per-vCPU or per-memory price instead of the per-instance price.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html">GetSpotPlacementScores</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html">GetInstanceTypesFromInstanceRequirements</a>.
  /// <note>
  /// Only one of <code>SpotMaxPricePercentageOverLowestPrice</code> or
  /// <code>MaxSpotPriceAsPercentageOfOptimalOnDemandPrice</code> can be
  /// specified. If you don't specify either, Amazon EC2 will automatically apply
  /// optimal price protection to consistently select from a wide range of
  /// instance types. To indicate no price protection threshold for Spot
  /// Instances, meaning you want to consider all instance types that match your
  /// attributes, include one of these parameters and specify a high value, such
  /// as <code>999999</code>.
  /// </note>
  /// Default: <code>100</code>
  final int? spotMaxPricePercentageOverLowestPrice;

  /// The minimum and maximum amount of total local storage, in GB.
  ///
  /// Default: No minimum or maximum limits
  final TotalLocalStorageGB? totalLocalStorageGB;

  /// The minimum and maximum number of vCPUs.
  final VCpuCountRange? vCpuCount;

  InstanceRequirements({
    this.acceleratorCount,
    this.acceleratorManufacturers,
    this.acceleratorNames,
    this.acceleratorTotalMemoryMiB,
    this.acceleratorTypes,
    this.allowedInstanceTypes,
    this.bareMetal,
    this.baselineEbsBandwidthMbps,
    this.burstablePerformance,
    this.cpuManufacturers,
    this.excludedInstanceTypes,
    this.instanceGenerations,
    this.localStorage,
    this.localStorageTypes,
    this.maxSpotPriceAsPercentageOfOptimalOnDemandPrice,
    this.memoryGiBPerVCpu,
    this.memoryMiB,
    this.networkBandwidthGbps,
    this.networkInterfaceCount,
    this.onDemandMaxPricePercentageOverLowestPrice,
    this.requireHibernateSupport,
    this.spotMaxPricePercentageOverLowestPrice,
    this.totalLocalStorageGB,
    this.vCpuCount,
  });

  Map<String, dynamic> toJson() {
    final acceleratorCount = this.acceleratorCount;
    final acceleratorManufacturers = this.acceleratorManufacturers;
    final acceleratorNames = this.acceleratorNames;
    final acceleratorTotalMemoryMiB = this.acceleratorTotalMemoryMiB;
    final acceleratorTypes = this.acceleratorTypes;
    final allowedInstanceTypes = this.allowedInstanceTypes;
    final bareMetal = this.bareMetal;
    final baselineEbsBandwidthMbps = this.baselineEbsBandwidthMbps;
    final burstablePerformance = this.burstablePerformance;
    final cpuManufacturers = this.cpuManufacturers;
    final excludedInstanceTypes = this.excludedInstanceTypes;
    final instanceGenerations = this.instanceGenerations;
    final localStorage = this.localStorage;
    final localStorageTypes = this.localStorageTypes;
    final maxSpotPriceAsPercentageOfOptimalOnDemandPrice =
        this.maxSpotPriceAsPercentageOfOptimalOnDemandPrice;
    final memoryGiBPerVCpu = this.memoryGiBPerVCpu;
    final memoryMiB = this.memoryMiB;
    final networkBandwidthGbps = this.networkBandwidthGbps;
    final networkInterfaceCount = this.networkInterfaceCount;
    final onDemandMaxPricePercentageOverLowestPrice =
        this.onDemandMaxPricePercentageOverLowestPrice;
    final requireHibernateSupport = this.requireHibernateSupport;
    final spotMaxPricePercentageOverLowestPrice =
        this.spotMaxPricePercentageOverLowestPrice;
    final totalLocalStorageGB = this.totalLocalStorageGB;
    final vCpuCount = this.vCpuCount;
    return {
      if (acceleratorCount != null) 'acceleratorCount': acceleratorCount,
      if (acceleratorManufacturers != null)
        'acceleratorManufacturerSet':
            acceleratorManufacturers.map((e) => e.value).toList(),
      if (acceleratorNames != null)
        'acceleratorNameSet': acceleratorNames.map((e) => e.value).toList(),
      if (acceleratorTotalMemoryMiB != null)
        'acceleratorTotalMemoryMiB': acceleratorTotalMemoryMiB,
      if (acceleratorTypes != null)
        'acceleratorTypeSet': acceleratorTypes.map((e) => e.value).toList(),
      if (allowedInstanceTypes != null)
        'allowedInstanceTypeSet': allowedInstanceTypes,
      if (bareMetal != null) 'bareMetal': bareMetal.value,
      if (baselineEbsBandwidthMbps != null)
        'baselineEbsBandwidthMbps': baselineEbsBandwidthMbps,
      if (burstablePerformance != null)
        'burstablePerformance': burstablePerformance.value,
      if (cpuManufacturers != null)
        'cpuManufacturerSet': cpuManufacturers.map((e) => e.value).toList(),
      if (excludedInstanceTypes != null)
        'excludedInstanceTypeSet': excludedInstanceTypes,
      if (instanceGenerations != null)
        'instanceGenerationSet':
            instanceGenerations.map((e) => e.value).toList(),
      if (localStorage != null) 'localStorage': localStorage.value,
      if (localStorageTypes != null)
        'localStorageTypeSet': localStorageTypes.map((e) => e.value).toList(),
      if (maxSpotPriceAsPercentageOfOptimalOnDemandPrice != null)
        'maxSpotPriceAsPercentageOfOptimalOnDemandPrice':
            maxSpotPriceAsPercentageOfOptimalOnDemandPrice,
      if (memoryGiBPerVCpu != null) 'memoryGiBPerVCpu': memoryGiBPerVCpu,
      if (memoryMiB != null) 'memoryMiB': memoryMiB,
      if (networkBandwidthGbps != null)
        'networkBandwidthGbps': networkBandwidthGbps,
      if (networkInterfaceCount != null)
        'networkInterfaceCount': networkInterfaceCount,
      if (onDemandMaxPricePercentageOverLowestPrice != null)
        'onDemandMaxPricePercentageOverLowestPrice':
            onDemandMaxPricePercentageOverLowestPrice,
      if (requireHibernateSupport != null)
        'requireHibernateSupport': requireHibernateSupport,
      if (spotMaxPricePercentageOverLowestPrice != null)
        'spotMaxPricePercentageOverLowestPrice':
            spotMaxPricePercentageOverLowestPrice,
      if (totalLocalStorageGB != null)
        'totalLocalStorageGB': totalLocalStorageGB,
      if (vCpuCount != null) 'vCpuCount': vCpuCount,
    };
  }
}

/// The attributes for the instance types. When you specify instance attributes,
/// Amazon EC2 will identify instance types with these attributes.
///
/// You must specify <code>VCpuCount</code> and <code>MemoryMiB</code>. All
/// other attributes are optional. Any unspecified optional attribute is set to
/// its default.
///
/// When you specify multiple attributes, you get instance types that satisfy
/// all of the specified attributes. If you specify multiple values for an
/// attribute, you get instance types that satisfy any of the specified values.
///
/// To limit the list of instance types from which Amazon EC2 can identify
/// matching instance types, you can use one of the following parameters, but
/// not both in the same request:
///
/// <ul>
/// <li>
/// <code>AllowedInstanceTypes</code> - The instance types to include in the
/// list. All other instance types are ignored, even if they match your
/// specified attributes.
/// </li>
/// <li>
/// <code>ExcludedInstanceTypes</code> - The instance types to exclude from the
/// list, even if they match your specified attributes.
/// </li>
/// </ul> <note>
/// If you specify <code>InstanceRequirements</code>, you can't specify
/// <code>InstanceType</code>.
///
/// Attribute-based instance type selection is only supported when using Auto
/// Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan
/// to use the launch template in the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html">launch
/// instance wizard</a>, or with the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
/// API or <a
/// href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html">AWS::EC2::Instance</a>
/// Amazon Web Services CloudFormation resource, you can't specify
/// <code>InstanceRequirements</code>.
/// </note>
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Attribute-based
/// instance type selection for EC2 Fleet</a>, <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html">Attribute-based
/// instance type selection for Spot Fleet</a>, and <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
/// placement score</a> in the <i>Amazon EC2 User Guide</i>.
class InstanceRequirementsRequest {
  /// The minimum and maximum amount of memory, in MiB.
  final MemoryMiBRequest memoryMiB;

  /// The minimum and maximum number of vCPUs.
  final VCpuCountRangeRequest vCpuCount;

  /// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web
  /// Services Inferentia chips) on an instance.
  ///
  /// To exclude accelerator-enabled instance types, set <code>Max</code> to
  /// <code>0</code>.
  ///
  /// Default: No minimum or maximum limits
  final AcceleratorCountRequest? acceleratorCount;

  /// Indicates whether instance types must have accelerators by specific
  /// manufacturers.
  ///
  /// <ul>
  /// <li>
  /// For instance types with Amazon Web Services devices, specify
  /// <code>amazon-web-services</code>.
  /// </li>
  /// <li>
  /// For instance types with AMD devices, specify <code>amd</code>.
  /// </li>
  /// <li>
  /// For instance types with Habana devices, specify <code>habana</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA devices, specify <code>nvidia</code>.
  /// </li>
  /// <li>
  /// For instance types with Xilinx devices, specify <code>xilinx</code>.
  /// </li>
  /// </ul>
  /// Default: Any manufacturer
  final List<AcceleratorManufacturer>? acceleratorManufacturers;

  /// The accelerators that must be on the instance type.
  ///
  /// <ul>
  /// <li>
  /// For instance types with NVIDIA A10G GPUs, specify <code>a10g</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA A100 GPUs, specify <code>a100</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA H100 GPUs, specify <code>h100</code>.
  /// </li>
  /// <li>
  /// For instance types with Amazon Web Services Inferentia chips, specify
  /// <code>inferentia</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA GRID K520 GPUs, specify <code>k520</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA K80 GPUs, specify <code>k80</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA M60 GPUs, specify <code>m60</code>.
  /// </li>
  /// <li>
  /// For instance types with AMD Radeon Pro V520 GPUs, specify
  /// <code>radeon-pro-v520</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA T4 GPUs, specify <code>t4</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA T4G GPUs, specify <code>t4g</code>.
  /// </li>
  /// <li>
  /// For instance types with Xilinx VU9P FPGAs, specify <code>vu9p</code>.
  /// </li>
  /// <li>
  /// For instance types with NVIDIA V100 GPUs, specify <code>v100</code>.
  /// </li>
  /// </ul>
  /// Default: Any accelerator
  final List<AcceleratorName>? acceleratorNames;

  /// The minimum and maximum amount of total accelerator memory, in MiB.
  ///
  /// Default: No minimum or maximum limits
  final AcceleratorTotalMemoryMiBRequest? acceleratorTotalMemoryMiB;

  /// The accelerator types that must be on the instance type.
  ///
  /// <ul>
  /// <li>
  /// To include instance types with GPU hardware, specify <code>gpu</code>.
  /// </li>
  /// <li>
  /// To include instance types with FPGA hardware, specify <code>fpga</code>.
  /// </li>
  /// <li>
  /// To include instance types with inference hardware, specify
  /// <code>inference</code>.
  /// </li>
  /// </ul>
  /// Default: Any accelerator type
  final List<AcceleratorType>? acceleratorTypes;

  /// The instance types to apply your specified attributes against. All other
  /// instance types are ignored, even if they match your specified attributes.
  ///
  /// You can use strings with one or more wild cards, represented by an asterisk
  /// (<code>*</code>), to allow an instance type, size, or generation. The
  /// following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>,
  /// <code>m5a.*</code>, <code>r*</code>, <code>*3*</code>.
  ///
  /// For example, if you specify <code>c5*</code>,Amazon EC2 will allow the
  /// entire C5 instance family, which includes all C5a and C5n instance types. If
  /// you specify <code>m5a.*</code>, Amazon EC2 will allow all the M5a instance
  /// types, but not the M5n instance types.
  /// <note>
  /// If you specify <code>AllowedInstanceTypes</code>, you can't specify
  /// <code>ExcludedInstanceTypes</code>.
  /// </note>
  /// Default: All instance types
  final List<String>? allowedInstanceTypes;

  /// Indicates whether bare metal instance types must be included, excluded, or
  /// required.
  ///
  /// <ul>
  /// <li>
  /// To include bare metal instance types, specify <code>included</code>.
  /// </li>
  /// <li>
  /// To require only bare metal instance types, specify <code>required</code>.
  /// </li>
  /// <li>
  /// To exclude bare metal instance types, specify <code>excluded</code>.
  /// </li>
  /// </ul>
  /// Default: <code>excluded</code>
  final BareMetal? bareMetal;

  /// The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html">Amazon
  /// EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Default: No minimum or maximum limits
  final BaselineEbsBandwidthMbpsRequest? baselineEbsBandwidthMbps;

  /// Indicates whether burstable performance T instance types are included,
  /// excluded, or required. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a>.
  ///
  /// <ul>
  /// <li>
  /// To include burstable performance instance types, specify
  /// <code>included</code>.
  /// </li>
  /// <li>
  /// To require only burstable performance instance types, specify
  /// <code>required</code>.
  /// </li>
  /// <li>
  /// To exclude burstable performance instance types, specify
  /// <code>excluded</code>.
  /// </li>
  /// </ul>
  /// Default: <code>excluded</code>
  final BurstablePerformance? burstablePerformance;

  /// The CPU manufacturers to include.
  ///
  /// <ul>
  /// <li>
  /// For instance types with Intel CPUs, specify <code>intel</code>.
  /// </li>
  /// <li>
  /// For instance types with AMD CPUs, specify <code>amd</code>.
  /// </li>
  /// <li>
  /// For instance types with Amazon Web Services CPUs, specify
  /// <code>amazon-web-services</code>.
  /// </li>
  /// </ul> <note>
  /// Don't confuse the CPU manufacturer with the CPU architecture. Instances will
  /// be launched with a compatible CPU architecture based on the Amazon Machine
  /// Image (AMI) that you specify in your launch template.
  /// </note>
  /// Default: Any manufacturer
  final List<CpuManufacturer>? cpuManufacturers;

  /// The instance types to exclude.
  ///
  /// You can use strings with one or more wild cards, represented by an asterisk
  /// (<code>*</code>), to exclude an instance family, type, size, or generation.
  /// The following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>,
  /// <code>m5a.*</code>, <code>r*</code>, <code>*3*</code>.
  ///
  /// For example, if you specify <code>c5*</code>,Amazon EC2 will exclude the
  /// entire C5 instance family, which includes all C5a and C5n instance types. If
  /// you specify <code>m5a.*</code>, Amazon EC2 will exclude all the M5a instance
  /// types, but not the M5n instance types.
  /// <note>
  /// If you specify <code>ExcludedInstanceTypes</code>, you can't specify
  /// <code>AllowedInstanceTypes</code>.
  /// </note>
  /// Default: No excluded instance types
  final List<String>? excludedInstanceTypes;

  /// Indicates whether current or previous generation instance types are
  /// included. The current generation instance types are recommended for use.
  /// Current generation instance types are typically the latest two to three
  /// generations in each instance family. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// For current generation instance types, specify <code>current</code>.
  ///
  /// For previous generation instance types, specify <code>previous</code>.
  ///
  /// Default: Current and previous generation instance types
  final List<InstanceGeneration>? instanceGenerations;

  /// Indicates whether instance types with instance store volumes are included,
  /// excluded, or required. For more information, <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html">Amazon
  /// EC2 instance store</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// <ul>
  /// <li>
  /// To include instance types with instance store volumes, specify
  /// <code>included</code>.
  /// </li>
  /// <li>
  /// To require only instance types with instance store volumes, specify
  /// <code>required</code>.
  /// </li>
  /// <li>
  /// To exclude instance types with instance store volumes, specify
  /// <code>excluded</code>.
  /// </li>
  /// </ul>
  /// Default: <code>included</code>
  final LocalStorage? localStorage;

  /// The type of local storage that is required.
  ///
  /// <ul>
  /// <li>
  /// For instance types with hard disk drive (HDD) storage, specify
  /// <code>hdd</code>.
  /// </li>
  /// <li>
  /// For instance types with solid state drive (SSD) storage, specify
  /// <code>ssd</code>.
  /// </li>
  /// </ul>
  /// Default: <code>hdd</code> and <code>ssd</code>
  final List<LocalStorageType>? localStorageTypes;

  /// [Price protection] The price protection threshold for Spot Instances, as a
  /// percentage of an identified On-Demand price. The identified On-Demand price
  /// is the price of the lowest priced current generation C, M, or R instance
  /// type with your specified attributes. If no current generation C, M, or R
  /// instance type matches your attributes, then the identified price is from the
  /// lowest priced current generation instance types, and failing that, from the
  /// lowest priced previous generation instance types that match your attributes.
  /// When Amazon EC2 selects instance types with your attributes, it will exclude
  /// instance types whose price exceeds your specified threshold.
  ///
  /// The parameter accepts an integer, which Amazon EC2 interprets as a
  /// percentage.
  ///
  /// If you set <code>DesiredCapacityType</code> to <code>vcpu</code> or
  /// <code>memory-mib</code>, the price protection threshold is based on the per
  /// vCPU or per memory price instead of the per instance price.
  /// <note>
  /// Only one of <code>SpotMaxPricePercentageOverLowestPrice</code> or
  /// <code>MaxSpotPriceAsPercentageOfOptimalOnDemandPrice</code> can be
  /// specified. If you don't specify either, Amazon EC2 will automatically apply
  /// optimal price protection to consistently select from a wide range of
  /// instance types. To indicate no price protection threshold for Spot
  /// Instances, meaning you want to consider all instance types that match your
  /// attributes, include one of these parameters and specify a high value, such
  /// as <code>999999</code>.
  /// </note>
  final int? maxSpotPriceAsPercentageOfOptimalOnDemandPrice;

  /// The minimum and maximum amount of memory per vCPU, in GiB.
  ///
  /// Default: No minimum or maximum limits
  final MemoryGiBPerVCpuRequest? memoryGiBPerVCpu;

  /// The minimum and maximum amount of baseline network bandwidth, in gigabits
  /// per second (Gbps). For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html">Amazon
  /// EC2 instance network bandwidth</a> in the <i>Amazon EC2 User Guide</i>.
  ///
  /// Default: No minimum or maximum limits
  final NetworkBandwidthGbpsRequest? networkBandwidthGbps;

  /// The minimum and maximum number of network interfaces.
  ///
  /// Default: No minimum or maximum limits
  final NetworkInterfaceCountRequest? networkInterfaceCount;

  /// [Price protection] The price protection threshold for On-Demand Instances,
  /// as a percentage higher than an identified On-Demand price. The identified
  /// On-Demand price is the price of the lowest priced current generation C, M,
  /// or R instance type with your specified attributes. When Amazon EC2 selects
  /// instance types with your attributes, it will exclude instance types whose
  /// price exceeds your specified threshold.
  ///
  /// The parameter accepts an integer, which Amazon EC2 interprets as a
  /// percentage.
  ///
  /// To indicate no price protection threshold, specify a high value, such as
  /// <code>999999</code>.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html">GetSpotPlacementScores</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html">GetInstanceTypesFromInstanceRequirements</a>.
  /// <note>
  /// If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
  /// <code>memory-mib</code>, the price protection threshold is applied based on
  /// the per-vCPU or per-memory price instead of the per-instance price.
  /// </note>
  /// Default: <code>20</code>
  final int? onDemandMaxPricePercentageOverLowestPrice;

  /// Indicates whether instance types must support hibernation for On-Demand
  /// Instances.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html">GetSpotPlacementScores</a>.
  ///
  /// Default: <code>false</code>
  final bool? requireHibernateSupport;

  /// [Price protection] The price protection threshold for Spot Instances, as a
  /// percentage higher than an identified Spot price. The identified Spot price
  /// is the Spot price of the lowest priced current generation C, M, or R
  /// instance type with your specified attributes. If no current generation C, M,
  /// or R instance type matches your attributes, then the identified Spot price
  /// is from the lowest priced current generation instance types, and failing
  /// that, from the lowest priced previous generation instance types that match
  /// your attributes. When Amazon EC2 selects instance types with your
  /// attributes, it will exclude instance types whose Spot price exceeds your
  /// specified threshold.
  ///
  /// The parameter accepts an integer, which Amazon EC2 interprets as a
  /// percentage.
  ///
  /// If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
  /// <code>memory-mib</code>, the price protection threshold is applied based on
  /// the per-vCPU or per-memory price instead of the per-instance price.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html">GetSpotPlacementScores</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html">GetInstanceTypesFromInstanceRequirements</a>.
  /// <note>
  /// Only one of <code>SpotMaxPricePercentageOverLowestPrice</code> or
  /// <code>MaxSpotPriceAsPercentageOfOptimalOnDemandPrice</code> can be
  /// specified. If you don't specify either, Amazon EC2 will automatically apply
  /// optimal price protection to consistently select from a wide range of
  /// instance types. To indicate no price protection threshold for Spot
  /// Instances, meaning you want to consider all instance types that match your
  /// attributes, include one of these parameters and specify a high value, such
  /// as <code>999999</code>.
  /// </note>
  /// Default: <code>100</code>
  final int? spotMaxPricePercentageOverLowestPrice;

  /// The minimum and maximum amount of total local storage, in GB.
  ///
  /// Default: No minimum or maximum limits
  final TotalLocalStorageGBRequest? totalLocalStorageGB;

  InstanceRequirementsRequest({
    required this.memoryMiB,
    required this.vCpuCount,
    this.acceleratorCount,
    this.acceleratorManufacturers,
    this.acceleratorNames,
    this.acceleratorTotalMemoryMiB,
    this.acceleratorTypes,
    this.allowedInstanceTypes,
    this.bareMetal,
    this.baselineEbsBandwidthMbps,
    this.burstablePerformance,
    this.cpuManufacturers,
    this.excludedInstanceTypes,
    this.instanceGenerations,
    this.localStorage,
    this.localStorageTypes,
    this.maxSpotPriceAsPercentageOfOptimalOnDemandPrice,
    this.memoryGiBPerVCpu,
    this.networkBandwidthGbps,
    this.networkInterfaceCount,
    this.onDemandMaxPricePercentageOverLowestPrice,
    this.requireHibernateSupport,
    this.spotMaxPricePercentageOverLowestPrice,
    this.totalLocalStorageGB,
  });

  Map<String, dynamic> toJson() {
    final memoryMiB = this.memoryMiB;
    final vCpuCount = this.vCpuCount;
    final acceleratorCount = this.acceleratorCount;
    final acceleratorManufacturers = this.acceleratorManufacturers;
    final acceleratorNames = this.acceleratorNames;
    final acceleratorTotalMemoryMiB = this.acceleratorTotalMemoryMiB;
    final acceleratorTypes = this.acceleratorTypes;
    final allowedInstanceTypes = this.allowedInstanceTypes;
    final bareMetal = this.bareMetal;
    final baselineEbsBandwidthMbps = this.baselineEbsBandwidthMbps;
    final burstablePerformance = this.burstablePerformance;
    final cpuManufacturers = this.cpuManufacturers;
    final excludedInstanceTypes = this.excludedInstanceTypes;
    final instanceGenerations = this.instanceGenerations;
    final localStorage = this.localStorage;
    final localStorageTypes = this.localStorageTypes;
    final maxSpotPriceAsPercentageOfOptimalOnDemandPrice =
        this.maxSpotPriceAsPercentageOfOptimalOnDemandPrice;
    final memoryGiBPerVCpu = this.memoryGiBPerVCpu;
    final networkBandwidthGbps = this.networkBandwidthGbps;
    final networkInterfaceCount = this.networkInterfaceCount;
    final onDemandMaxPricePercentageOverLowestPrice =
        this.onDemandMaxPricePercentageOverLowestPrice;
    final requireHibernateSupport = this.requireHibernateSupport;
    final spotMaxPricePercentageOverLowestPrice =
        this.spotMaxPricePercentageOverLowestPrice;
    final totalLocalStorageGB = this.totalLocalStorageGB;
    return {
      'MemoryMiB': memoryMiB,
      'VCpuCount': vCpuCount,
      if (acceleratorCount != null) 'AcceleratorCount': acceleratorCount,
      if (acceleratorManufacturers != null)
        'AcceleratorManufacturer':
            acceleratorManufacturers.map((e) => e.value).toList(),
      if (acceleratorNames != null)
        'AcceleratorName': acceleratorNames.map((e) => e.value).toList(),
      if (acceleratorTotalMemoryMiB != null)
        'AcceleratorTotalMemoryMiB': acceleratorTotalMemoryMiB,
      if (acceleratorTypes != null)
        'AcceleratorType': acceleratorTypes.map((e) => e.value).toList(),
      if (allowedInstanceTypes != null)
        'AllowedInstanceType': allowedInstanceTypes,
      if (bareMetal != null) 'BareMetal': bareMetal.value,
      if (baselineEbsBandwidthMbps != null)
        'BaselineEbsBandwidthMbps': baselineEbsBandwidthMbps,
      if (burstablePerformance != null)
        'BurstablePerformance': burstablePerformance.value,
      if (cpuManufacturers != null)
        'CpuManufacturer': cpuManufacturers.map((e) => e.value).toList(),
      if (excludedInstanceTypes != null)
        'ExcludedInstanceType': excludedInstanceTypes,
      if (instanceGenerations != null)
        'InstanceGeneration': instanceGenerations.map((e) => e.value).toList(),
      if (localStorage != null) 'LocalStorage': localStorage.value,
      if (localStorageTypes != null)
        'LocalStorageType': localStorageTypes.map((e) => e.value).toList(),
      if (maxSpotPriceAsPercentageOfOptimalOnDemandPrice != null)
        'MaxSpotPriceAsPercentageOfOptimalOnDemandPrice':
            maxSpotPriceAsPercentageOfOptimalOnDemandPrice,
      if (memoryGiBPerVCpu != null) 'MemoryGiBPerVCpu': memoryGiBPerVCpu,
      if (networkBandwidthGbps != null)
        'NetworkBandwidthGbps': networkBandwidthGbps,
      if (networkInterfaceCount != null)
        'NetworkInterfaceCount': networkInterfaceCount,
      if (onDemandMaxPricePercentageOverLowestPrice != null)
        'OnDemandMaxPricePercentageOverLowestPrice':
            onDemandMaxPricePercentageOverLowestPrice,
      if (requireHibernateSupport != null)
        'RequireHibernateSupport': requireHibernateSupport,
      if (spotMaxPricePercentageOverLowestPrice != null)
        'SpotMaxPricePercentageOverLowestPrice':
            spotMaxPricePercentageOverLowestPrice,
      if (totalLocalStorageGB != null)
        'TotalLocalStorageGB': totalLocalStorageGB,
    };
  }
}

/// The architecture type, virtualization type, and other attributes for the
/// instance types. When you specify instance attributes, Amazon EC2 will
/// identify instance types with those attributes.
///
/// If you specify <code>InstanceRequirementsWithMetadataRequest</code>, you
/// can't specify <code>InstanceTypes</code>.
class InstanceRequirementsWithMetadataRequest {
  /// The architecture type.
  final List<ArchitectureType>? architectureTypes;

  /// The attributes for the instance types. When you specify instance attributes,
  /// Amazon EC2 will identify instance types with those attributes.
  final InstanceRequirementsRequest? instanceRequirements;

  /// The virtualization type.
  final List<VirtualizationType>? virtualizationTypes;

  InstanceRequirementsWithMetadataRequest({
    this.architectureTypes,
    this.instanceRequirements,
    this.virtualizationTypes,
  });

  Map<String, dynamic> toJson() {
    final architectureTypes = this.architectureTypes;
    final instanceRequirements = this.instanceRequirements;
    final virtualizationTypes = this.virtualizationTypes;
    return {
      if (architectureTypes != null)
        'ArchitectureType': architectureTypes.map((e) => e.value).toList(),
      if (instanceRequirements != null)
        'InstanceRequirements': instanceRequirements,
      if (virtualizationTypes != null)
        'VirtualizationType': virtualizationTypes.map((e) => e.value).toList(),
    };
  }
}

/// The instance details to specify which volumes should be snapshotted.
class InstanceSpecification {
  /// The instance to specify which volumes should be snapshotted.
  final String instanceId;

  /// Excludes the root volume from being snapshotted.
  final bool? excludeBootVolume;

  /// The IDs of the data (non-root) volumes to exclude from the multi-volume
  /// snapshot set. If you specify the ID of the root volume, the request fails.
  /// To exclude the root volume, use <b>ExcludeBootVolume</b>.
  ///
  /// You can specify up to 40 volume IDs per request.
  final List<String>? excludeDataVolumeIds;

  InstanceSpecification({
    required this.instanceId,
    this.excludeBootVolume,
    this.excludeDataVolumeIds,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final excludeBootVolume = this.excludeBootVolume;
    final excludeDataVolumeIds = this.excludeDataVolumeIds;
    return {
      'InstanceId': instanceId,
      if (excludeBootVolume != null) 'ExcludeBootVolume': excludeBootVolume,
      if (excludeDataVolumeIds != null)
        'ExcludeDataVolumeId': excludeDataVolumeIds,
    };
  }
}

/// Describes the current state of an instance.
class InstanceState {
  /// The state of the instance as a 16-bit unsigned integer.
  ///
  /// The high byte is all of the bits between 2^8 and (2^16)-1, which equals
  /// decimal values between 256 and 65,535. These numerical values are used for
  /// internal purposes and should be ignored.
  ///
  /// The low byte is all of the bits between 2^0 and (2^8)-1, which equals
  /// decimal values between 0 and 255.
  ///
  /// The valid values for instance-state-code will all be in the range of the low
  /// byte and they are:
  ///
  /// <ul>
  /// <li>
  /// <code>0</code> : <code>pending</code>
  /// </li>
  /// <li>
  /// <code>16</code> : <code>running</code>
  /// </li>
  /// <li>
  /// <code>32</code> : <code>shutting-down</code>
  /// </li>
  /// <li>
  /// <code>48</code> : <code>terminated</code>
  /// </li>
  /// <li>
  /// <code>64</code> : <code>stopping</code>
  /// </li>
  /// <li>
  /// <code>80</code> : <code>stopped</code>
  /// </li>
  /// </ul>
  /// You can ignore the high byte value by zeroing out all of the bits above 2^8
  /// or 256 in decimal.
  final int? code;

  /// The current state of the instance.
  final InstanceStateName? name;

  InstanceState({
    this.code,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final name = this.name;
    return {
      if (code != null) 'code': code,
      if (name != null) 'name': name.value,
    };
  }
}

/// Describes an instance state change.
class InstanceStateChange {
  /// The current state of the instance.
  final InstanceState? currentState;

  /// The ID of the instance.
  final String? instanceId;

  /// The previous state of the instance.
  final InstanceState? previousState;

  InstanceStateChange({
    this.currentState,
    this.instanceId,
    this.previousState,
  });

  Map<String, dynamic> toJson() {
    final currentState = this.currentState;
    final instanceId = this.instanceId;
    final previousState = this.previousState;
    return {
      if (currentState != null) 'currentState': currentState,
      if (instanceId != null) 'instanceId': instanceId,
      if (previousState != null) 'previousState': previousState,
    };
  }
}

enum InstanceStateName {
  pending('pending'),
  running('running'),
  shuttingDown('shutting-down'),
  terminated('terminated'),
  stopping('stopping'),
  stopped('stopped'),
  ;

  final String value;

  const InstanceStateName(this.value);

  static InstanceStateName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum InstanceStateName'));
}

/// Describes the status of an instance.
class InstanceStatus {
  /// The Availability Zone of the instance.
  final String? availabilityZone;

  /// Any scheduled events associated with the instance.
  final List<InstanceStatusEvent>? events;

  /// The ID of the instance.
  final String? instanceId;

  /// The intended state of the instance. <a>DescribeInstanceStatus</a> requires
  /// that an instance be in the <code>running</code> state.
  final InstanceState? instanceState;

  /// Reports impaired functionality that stems from issues internal to the
  /// instance, such as impaired reachability.
  final InstanceStatusSummary? instanceStatus;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// Reports impaired functionality that stems from issues related to the systems
  /// that support an instance, such as hardware failures and network connectivity
  /// problems.
  final InstanceStatusSummary? systemStatus;

  InstanceStatus({
    this.availabilityZone,
    this.events,
    this.instanceId,
    this.instanceState,
    this.instanceStatus,
    this.outpostArn,
    this.systemStatus,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final events = this.events;
    final instanceId = this.instanceId;
    final instanceState = this.instanceState;
    final instanceStatus = this.instanceStatus;
    final outpostArn = this.outpostArn;
    final systemStatus = this.systemStatus;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (events != null) 'eventsSet': events,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceState != null) 'instanceState': instanceState,
      if (instanceStatus != null) 'instanceStatus': instanceStatus,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (systemStatus != null) 'systemStatus': systemStatus,
    };
  }
}

/// Describes the instance status.
class InstanceStatusDetails {
  /// The time when a status check failed. For an instance that was launched and
  /// impaired, this is the time when the instance was launched.
  final DateTime? impairedSince;

  /// The type of instance status.
  final StatusName? name;

  /// The status.
  final StatusType? status;

  InstanceStatusDetails({
    this.impairedSince,
    this.name,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final impairedSince = this.impairedSince;
    final name = this.name;
    final status = this.status;
    return {
      if (impairedSince != null) 'impairedSince': iso8601ToJson(impairedSince),
      if (name != null) 'name': name.value,
      if (status != null) 'status': status.value,
    };
  }
}

/// Describes a scheduled event for an instance.
class InstanceStatusEvent {
  /// The event code.
  final EventCode? code;

  /// A description of the event.
  ///
  /// After a scheduled event is completed, it can still be described for up to a
  /// week. If the event has been completed, this description starts with the
  /// following text: [Completed].
  final String? description;

  /// The ID of the event.
  final String? instanceEventId;

  /// The latest scheduled end time for the event.
  final DateTime? notAfter;

  /// The earliest scheduled start time for the event.
  final DateTime? notBefore;

  /// The deadline for starting the event.
  final DateTime? notBeforeDeadline;

  InstanceStatusEvent({
    this.code,
    this.description,
    this.instanceEventId,
    this.notAfter,
    this.notBefore,
    this.notBeforeDeadline,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final description = this.description;
    final instanceEventId = this.instanceEventId;
    final notAfter = this.notAfter;
    final notBefore = this.notBefore;
    final notBeforeDeadline = this.notBeforeDeadline;
    return {
      if (code != null) 'code': code.value,
      if (description != null) 'description': description,
      if (instanceEventId != null) 'instanceEventId': instanceEventId,
      if (notAfter != null) 'notAfter': iso8601ToJson(notAfter),
      if (notBefore != null) 'notBefore': iso8601ToJson(notBefore),
      if (notBeforeDeadline != null)
        'notBeforeDeadline': iso8601ToJson(notBeforeDeadline),
    };
  }
}

/// Describes the status of an instance.
class InstanceStatusSummary {
  /// The system instance health or application instance health.
  final List<InstanceStatusDetails>? details;

  /// The status.
  final SummaryStatus? status;

  InstanceStatusSummary({
    this.details,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final details = this.details;
    final status = this.status;
    return {
      if (details != null) 'details': details,
      if (status != null) 'status': status.value,
    };
  }
}

enum InstanceStorageEncryptionSupport {
  unsupported('unsupported'),
  required('required'),
  ;

  final String value;

  const InstanceStorageEncryptionSupport(this.value);

  static InstanceStorageEncryptionSupport fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceStorageEncryptionSupport'));
}

/// Describes the instance store features that are supported by the instance
/// type.
class InstanceStorageInfo {
  /// Describes the disks that are available for the instance type.
  final List<DiskInfo>? disks;

  /// Indicates whether data is encrypted at rest.
  final InstanceStorageEncryptionSupport? encryptionSupport;

  /// Indicates whether non-volatile memory express (NVMe) is supported.
  final EphemeralNvmeSupport? nvmeSupport;

  /// The total size of the disks, in GB.
  final int? totalSizeInGB;

  InstanceStorageInfo({
    this.disks,
    this.encryptionSupport,
    this.nvmeSupport,
    this.totalSizeInGB,
  });

  Map<String, dynamic> toJson() {
    final disks = this.disks;
    final encryptionSupport = this.encryptionSupport;
    final nvmeSupport = this.nvmeSupport;
    final totalSizeInGB = this.totalSizeInGB;
    return {
      if (disks != null) 'disks': disks,
      if (encryptionSupport != null)
        'encryptionSupport': encryptionSupport.value,
      if (nvmeSupport != null) 'nvmeSupport': nvmeSupport.value,
      if (totalSizeInGB != null) 'totalSizeInGB': totalSizeInGB,
    };
  }
}

/// Describes the registered tag keys for the current Region.
class InstanceTagNotificationAttribute {
  /// Indicates wheter all tag keys in the current Region are registered to appear
  /// in scheduled event notifications. <code>true</code> indicates that all tag
  /// keys in the current Region are registered.
  final bool? includeAllTagsOfInstance;

  /// The registered tag keys.
  final List<String>? instanceTagKeys;

  InstanceTagNotificationAttribute({
    this.includeAllTagsOfInstance,
    this.instanceTagKeys,
  });

  Map<String, dynamic> toJson() {
    final includeAllTagsOfInstance = this.includeAllTagsOfInstance;
    final instanceTagKeys = this.instanceTagKeys;
    return {
      if (includeAllTagsOfInstance != null)
        'includeAllTagsOfInstance': includeAllTagsOfInstance,
      if (instanceTagKeys != null) 'instanceTagKeySet': instanceTagKeys,
    };
  }
}

/// Information about the instance topology.
class InstanceTopology {
  /// The name of the Availability Zone or Local Zone that the instance is in.
  final String? availabilityZone;

  /// The name of the placement group that the instance is in.
  final String? groupName;

  /// The instance ID.
  final String? instanceId;

  /// The instance type.
  final String? instanceType;

  /// The network nodes. The nodes are hashed based on your account. Instances
  /// from different accounts running under the same server will return a
  /// different hashed list of strings.
  final List<String>? networkNodes;

  /// The ID of the Availability Zone or Local Zone that the instance is in.
  final String? zoneId;

  InstanceTopology({
    this.availabilityZone,
    this.groupName,
    this.instanceId,
    this.instanceType,
    this.networkNodes,
    this.zoneId,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final groupName = this.groupName;
    final instanceId = this.instanceId;
    final instanceType = this.instanceType;
    final networkNodes = this.networkNodes;
    final zoneId = this.zoneId;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (groupName != null) 'groupName': groupName,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceType != null) 'instanceType': instanceType,
      if (networkNodes != null) 'networkNodeSet': networkNodes,
      if (zoneId != null) 'zoneId': zoneId,
    };
  }
}

enum InstanceType {
  a1Medium('a1.medium'),
  a1Large('a1.large'),
  a1Xlarge('a1.xlarge'),
  a1_2xlarge('a1.2xlarge'),
  a1_4xlarge('a1.4xlarge'),
  a1Metal('a1.metal'),
  c1Medium('c1.medium'),
  c1Xlarge('c1.xlarge'),
  c3Large('c3.large'),
  c3Xlarge('c3.xlarge'),
  c3_2xlarge('c3.2xlarge'),
  c3_4xlarge('c3.4xlarge'),
  c3_8xlarge('c3.8xlarge'),
  c4Large('c4.large'),
  c4Xlarge('c4.xlarge'),
  c4_2xlarge('c4.2xlarge'),
  c4_4xlarge('c4.4xlarge'),
  c4_8xlarge('c4.8xlarge'),
  c5Large('c5.large'),
  c5Xlarge('c5.xlarge'),
  c5_2xlarge('c5.2xlarge'),
  c5_4xlarge('c5.4xlarge'),
  c5_9xlarge('c5.9xlarge'),
  c5_12xlarge('c5.12xlarge'),
  c5_18xlarge('c5.18xlarge'),
  c5_24xlarge('c5.24xlarge'),
  c5Metal('c5.metal'),
  c5aLarge('c5a.large'),
  c5aXlarge('c5a.xlarge'),
  c5a_2xlarge('c5a.2xlarge'),
  c5a_4xlarge('c5a.4xlarge'),
  c5a_8xlarge('c5a.8xlarge'),
  c5a_12xlarge('c5a.12xlarge'),
  c5a_16xlarge('c5a.16xlarge'),
  c5a_24xlarge('c5a.24xlarge'),
  c5adLarge('c5ad.large'),
  c5adXlarge('c5ad.xlarge'),
  c5ad_2xlarge('c5ad.2xlarge'),
  c5ad_4xlarge('c5ad.4xlarge'),
  c5ad_8xlarge('c5ad.8xlarge'),
  c5ad_12xlarge('c5ad.12xlarge'),
  c5ad_16xlarge('c5ad.16xlarge'),
  c5ad_24xlarge('c5ad.24xlarge'),
  c5dLarge('c5d.large'),
  c5dXlarge('c5d.xlarge'),
  c5d_2xlarge('c5d.2xlarge'),
  c5d_4xlarge('c5d.4xlarge'),
  c5d_9xlarge('c5d.9xlarge'),
  c5d_12xlarge('c5d.12xlarge'),
  c5d_18xlarge('c5d.18xlarge'),
  c5d_24xlarge('c5d.24xlarge'),
  c5dMetal('c5d.metal'),
  c5nLarge('c5n.large'),
  c5nXlarge('c5n.xlarge'),
  c5n_2xlarge('c5n.2xlarge'),
  c5n_4xlarge('c5n.4xlarge'),
  c5n_9xlarge('c5n.9xlarge'),
  c5n_18xlarge('c5n.18xlarge'),
  c5nMetal('c5n.metal'),
  c6gMedium('c6g.medium'),
  c6gLarge('c6g.large'),
  c6gXlarge('c6g.xlarge'),
  c6g_2xlarge('c6g.2xlarge'),
  c6g_4xlarge('c6g.4xlarge'),
  c6g_8xlarge('c6g.8xlarge'),
  c6g_12xlarge('c6g.12xlarge'),
  c6g_16xlarge('c6g.16xlarge'),
  c6gMetal('c6g.metal'),
  c6gdMedium('c6gd.medium'),
  c6gdLarge('c6gd.large'),
  c6gdXlarge('c6gd.xlarge'),
  c6gd_2xlarge('c6gd.2xlarge'),
  c6gd_4xlarge('c6gd.4xlarge'),
  c6gd_8xlarge('c6gd.8xlarge'),
  c6gd_12xlarge('c6gd.12xlarge'),
  c6gd_16xlarge('c6gd.16xlarge'),
  c6gdMetal('c6gd.metal'),
  c6gnMedium('c6gn.medium'),
  c6gnLarge('c6gn.large'),
  c6gnXlarge('c6gn.xlarge'),
  c6gn_2xlarge('c6gn.2xlarge'),
  c6gn_4xlarge('c6gn.4xlarge'),
  c6gn_8xlarge('c6gn.8xlarge'),
  c6gn_12xlarge('c6gn.12xlarge'),
  c6gn_16xlarge('c6gn.16xlarge'),
  c6iLarge('c6i.large'),
  c6iXlarge('c6i.xlarge'),
  c6i_2xlarge('c6i.2xlarge'),
  c6i_4xlarge('c6i.4xlarge'),
  c6i_8xlarge('c6i.8xlarge'),
  c6i_12xlarge('c6i.12xlarge'),
  c6i_16xlarge('c6i.16xlarge'),
  c6i_24xlarge('c6i.24xlarge'),
  c6i_32xlarge('c6i.32xlarge'),
  c6iMetal('c6i.metal'),
  cc1_4xlarge('cc1.4xlarge'),
  cc2_8xlarge('cc2.8xlarge'),
  cg1_4xlarge('cg1.4xlarge'),
  cr1_8xlarge('cr1.8xlarge'),
  d2Xlarge('d2.xlarge'),
  d2_2xlarge('d2.2xlarge'),
  d2_4xlarge('d2.4xlarge'),
  d2_8xlarge('d2.8xlarge'),
  d3Xlarge('d3.xlarge'),
  d3_2xlarge('d3.2xlarge'),
  d3_4xlarge('d3.4xlarge'),
  d3_8xlarge('d3.8xlarge'),
  d3enXlarge('d3en.xlarge'),
  d3en_2xlarge('d3en.2xlarge'),
  d3en_4xlarge('d3en.4xlarge'),
  d3en_6xlarge('d3en.6xlarge'),
  d3en_8xlarge('d3en.8xlarge'),
  d3en_12xlarge('d3en.12xlarge'),
  dl1_24xlarge('dl1.24xlarge'),
  f1_2xlarge('f1.2xlarge'),
  f1_4xlarge('f1.4xlarge'),
  f1_16xlarge('f1.16xlarge'),
  g2_2xlarge('g2.2xlarge'),
  g2_8xlarge('g2.8xlarge'),
  g3_4xlarge('g3.4xlarge'),
  g3_8xlarge('g3.8xlarge'),
  g3_16xlarge('g3.16xlarge'),
  g3sXlarge('g3s.xlarge'),
  g4adXlarge('g4ad.xlarge'),
  g4ad_2xlarge('g4ad.2xlarge'),
  g4ad_4xlarge('g4ad.4xlarge'),
  g4ad_8xlarge('g4ad.8xlarge'),
  g4ad_16xlarge('g4ad.16xlarge'),
  g4dnXlarge('g4dn.xlarge'),
  g4dn_2xlarge('g4dn.2xlarge'),
  g4dn_4xlarge('g4dn.4xlarge'),
  g4dn_8xlarge('g4dn.8xlarge'),
  g4dn_12xlarge('g4dn.12xlarge'),
  g4dn_16xlarge('g4dn.16xlarge'),
  g4dnMetal('g4dn.metal'),
  g5Xlarge('g5.xlarge'),
  g5_2xlarge('g5.2xlarge'),
  g5_4xlarge('g5.4xlarge'),
  g5_8xlarge('g5.8xlarge'),
  g5_12xlarge('g5.12xlarge'),
  g5_16xlarge('g5.16xlarge'),
  g5_24xlarge('g5.24xlarge'),
  g5_48xlarge('g5.48xlarge'),
  g5gXlarge('g5g.xlarge'),
  g5g_2xlarge('g5g.2xlarge'),
  g5g_4xlarge('g5g.4xlarge'),
  g5g_8xlarge('g5g.8xlarge'),
  g5g_16xlarge('g5g.16xlarge'),
  g5gMetal('g5g.metal'),
  hi1_4xlarge('hi1.4xlarge'),
  hpc6a_48xlarge('hpc6a.48xlarge'),
  hs1_8xlarge('hs1.8xlarge'),
  h1_2xlarge('h1.2xlarge'),
  h1_4xlarge('h1.4xlarge'),
  h1_8xlarge('h1.8xlarge'),
  h1_16xlarge('h1.16xlarge'),
  i2Xlarge('i2.xlarge'),
  i2_2xlarge('i2.2xlarge'),
  i2_4xlarge('i2.4xlarge'),
  i2_8xlarge('i2.8xlarge'),
  i3Large('i3.large'),
  i3Xlarge('i3.xlarge'),
  i3_2xlarge('i3.2xlarge'),
  i3_4xlarge('i3.4xlarge'),
  i3_8xlarge('i3.8xlarge'),
  i3_16xlarge('i3.16xlarge'),
  i3Metal('i3.metal'),
  i3enLarge('i3en.large'),
  i3enXlarge('i3en.xlarge'),
  i3en_2xlarge('i3en.2xlarge'),
  i3en_3xlarge('i3en.3xlarge'),
  i3en_6xlarge('i3en.6xlarge'),
  i3en_12xlarge('i3en.12xlarge'),
  i3en_24xlarge('i3en.24xlarge'),
  i3enMetal('i3en.metal'),
  im4gnLarge('im4gn.large'),
  im4gnXlarge('im4gn.xlarge'),
  im4gn_2xlarge('im4gn.2xlarge'),
  im4gn_4xlarge('im4gn.4xlarge'),
  im4gn_8xlarge('im4gn.8xlarge'),
  im4gn_16xlarge('im4gn.16xlarge'),
  inf1Xlarge('inf1.xlarge'),
  inf1_2xlarge('inf1.2xlarge'),
  inf1_6xlarge('inf1.6xlarge'),
  inf1_24xlarge('inf1.24xlarge'),
  is4genMedium('is4gen.medium'),
  is4genLarge('is4gen.large'),
  is4genXlarge('is4gen.xlarge'),
  is4gen_2xlarge('is4gen.2xlarge'),
  is4gen_4xlarge('is4gen.4xlarge'),
  is4gen_8xlarge('is4gen.8xlarge'),
  m1Small('m1.small'),
  m1Medium('m1.medium'),
  m1Large('m1.large'),
  m1Xlarge('m1.xlarge'),
  m2Xlarge('m2.xlarge'),
  m2_2xlarge('m2.2xlarge'),
  m2_4xlarge('m2.4xlarge'),
  m3Medium('m3.medium'),
  m3Large('m3.large'),
  m3Xlarge('m3.xlarge'),
  m3_2xlarge('m3.2xlarge'),
  m4Large('m4.large'),
  m4Xlarge('m4.xlarge'),
  m4_2xlarge('m4.2xlarge'),
  m4_4xlarge('m4.4xlarge'),
  m4_10xlarge('m4.10xlarge'),
  m4_16xlarge('m4.16xlarge'),
  m5Large('m5.large'),
  m5Xlarge('m5.xlarge'),
  m5_2xlarge('m5.2xlarge'),
  m5_4xlarge('m5.4xlarge'),
  m5_8xlarge('m5.8xlarge'),
  m5_12xlarge('m5.12xlarge'),
  m5_16xlarge('m5.16xlarge'),
  m5_24xlarge('m5.24xlarge'),
  m5Metal('m5.metal'),
  m5aLarge('m5a.large'),
  m5aXlarge('m5a.xlarge'),
  m5a_2xlarge('m5a.2xlarge'),
  m5a_4xlarge('m5a.4xlarge'),
  m5a_8xlarge('m5a.8xlarge'),
  m5a_12xlarge('m5a.12xlarge'),
  m5a_16xlarge('m5a.16xlarge'),
  m5a_24xlarge('m5a.24xlarge'),
  m5adLarge('m5ad.large'),
  m5adXlarge('m5ad.xlarge'),
  m5ad_2xlarge('m5ad.2xlarge'),
  m5ad_4xlarge('m5ad.4xlarge'),
  m5ad_8xlarge('m5ad.8xlarge'),
  m5ad_12xlarge('m5ad.12xlarge'),
  m5ad_16xlarge('m5ad.16xlarge'),
  m5ad_24xlarge('m5ad.24xlarge'),
  m5dLarge('m5d.large'),
  m5dXlarge('m5d.xlarge'),
  m5d_2xlarge('m5d.2xlarge'),
  m5d_4xlarge('m5d.4xlarge'),
  m5d_8xlarge('m5d.8xlarge'),
  m5d_12xlarge('m5d.12xlarge'),
  m5d_16xlarge('m5d.16xlarge'),
  m5d_24xlarge('m5d.24xlarge'),
  m5dMetal('m5d.metal'),
  m5dnLarge('m5dn.large'),
  m5dnXlarge('m5dn.xlarge'),
  m5dn_2xlarge('m5dn.2xlarge'),
  m5dn_4xlarge('m5dn.4xlarge'),
  m5dn_8xlarge('m5dn.8xlarge'),
  m5dn_12xlarge('m5dn.12xlarge'),
  m5dn_16xlarge('m5dn.16xlarge'),
  m5dn_24xlarge('m5dn.24xlarge'),
  m5dnMetal('m5dn.metal'),
  m5nLarge('m5n.large'),
  m5nXlarge('m5n.xlarge'),
  m5n_2xlarge('m5n.2xlarge'),
  m5n_4xlarge('m5n.4xlarge'),
  m5n_8xlarge('m5n.8xlarge'),
  m5n_12xlarge('m5n.12xlarge'),
  m5n_16xlarge('m5n.16xlarge'),
  m5n_24xlarge('m5n.24xlarge'),
  m5nMetal('m5n.metal'),
  m5znLarge('m5zn.large'),
  m5znXlarge('m5zn.xlarge'),
  m5zn_2xlarge('m5zn.2xlarge'),
  m5zn_3xlarge('m5zn.3xlarge'),
  m5zn_6xlarge('m5zn.6xlarge'),
  m5zn_12xlarge('m5zn.12xlarge'),
  m5znMetal('m5zn.metal'),
  m6aLarge('m6a.large'),
  m6aXlarge('m6a.xlarge'),
  m6a_2xlarge('m6a.2xlarge'),
  m6a_4xlarge('m6a.4xlarge'),
  m6a_8xlarge('m6a.8xlarge'),
  m6a_12xlarge('m6a.12xlarge'),
  m6a_16xlarge('m6a.16xlarge'),
  m6a_24xlarge('m6a.24xlarge'),
  m6a_32xlarge('m6a.32xlarge'),
  m6a_48xlarge('m6a.48xlarge'),
  m6gMetal('m6g.metal'),
  m6gMedium('m6g.medium'),
  m6gLarge('m6g.large'),
  m6gXlarge('m6g.xlarge'),
  m6g_2xlarge('m6g.2xlarge'),
  m6g_4xlarge('m6g.4xlarge'),
  m6g_8xlarge('m6g.8xlarge'),
  m6g_12xlarge('m6g.12xlarge'),
  m6g_16xlarge('m6g.16xlarge'),
  m6gdMetal('m6gd.metal'),
  m6gdMedium('m6gd.medium'),
  m6gdLarge('m6gd.large'),
  m6gdXlarge('m6gd.xlarge'),
  m6gd_2xlarge('m6gd.2xlarge'),
  m6gd_4xlarge('m6gd.4xlarge'),
  m6gd_8xlarge('m6gd.8xlarge'),
  m6gd_12xlarge('m6gd.12xlarge'),
  m6gd_16xlarge('m6gd.16xlarge'),
  m6iLarge('m6i.large'),
  m6iXlarge('m6i.xlarge'),
  m6i_2xlarge('m6i.2xlarge'),
  m6i_4xlarge('m6i.4xlarge'),
  m6i_8xlarge('m6i.8xlarge'),
  m6i_12xlarge('m6i.12xlarge'),
  m6i_16xlarge('m6i.16xlarge'),
  m6i_24xlarge('m6i.24xlarge'),
  m6i_32xlarge('m6i.32xlarge'),
  m6iMetal('m6i.metal'),
  mac1Metal('mac1.metal'),
  p2Xlarge('p2.xlarge'),
  p2_8xlarge('p2.8xlarge'),
  p2_16xlarge('p2.16xlarge'),
  p3_2xlarge('p3.2xlarge'),
  p3_8xlarge('p3.8xlarge'),
  p3_16xlarge('p3.16xlarge'),
  p3dn_24xlarge('p3dn.24xlarge'),
  p4d_24xlarge('p4d.24xlarge'),
  r3Large('r3.large'),
  r3Xlarge('r3.xlarge'),
  r3_2xlarge('r3.2xlarge'),
  r3_4xlarge('r3.4xlarge'),
  r3_8xlarge('r3.8xlarge'),
  r4Large('r4.large'),
  r4Xlarge('r4.xlarge'),
  r4_2xlarge('r4.2xlarge'),
  r4_4xlarge('r4.4xlarge'),
  r4_8xlarge('r4.8xlarge'),
  r4_16xlarge('r4.16xlarge'),
  r5Large('r5.large'),
  r5Xlarge('r5.xlarge'),
  r5_2xlarge('r5.2xlarge'),
  r5_4xlarge('r5.4xlarge'),
  r5_8xlarge('r5.8xlarge'),
  r5_12xlarge('r5.12xlarge'),
  r5_16xlarge('r5.16xlarge'),
  r5_24xlarge('r5.24xlarge'),
  r5Metal('r5.metal'),
  r5aLarge('r5a.large'),
  r5aXlarge('r5a.xlarge'),
  r5a_2xlarge('r5a.2xlarge'),
  r5a_4xlarge('r5a.4xlarge'),
  r5a_8xlarge('r5a.8xlarge'),
  r5a_12xlarge('r5a.12xlarge'),
  r5a_16xlarge('r5a.16xlarge'),
  r5a_24xlarge('r5a.24xlarge'),
  r5adLarge('r5ad.large'),
  r5adXlarge('r5ad.xlarge'),
  r5ad_2xlarge('r5ad.2xlarge'),
  r5ad_4xlarge('r5ad.4xlarge'),
  r5ad_8xlarge('r5ad.8xlarge'),
  r5ad_12xlarge('r5ad.12xlarge'),
  r5ad_16xlarge('r5ad.16xlarge'),
  r5ad_24xlarge('r5ad.24xlarge'),
  r5bLarge('r5b.large'),
  r5bXlarge('r5b.xlarge'),
  r5b_2xlarge('r5b.2xlarge'),
  r5b_4xlarge('r5b.4xlarge'),
  r5b_8xlarge('r5b.8xlarge'),
  r5b_12xlarge('r5b.12xlarge'),
  r5b_16xlarge('r5b.16xlarge'),
  r5b_24xlarge('r5b.24xlarge'),
  r5bMetal('r5b.metal'),
  r5dLarge('r5d.large'),
  r5dXlarge('r5d.xlarge'),
  r5d_2xlarge('r5d.2xlarge'),
  r5d_4xlarge('r5d.4xlarge'),
  r5d_8xlarge('r5d.8xlarge'),
  r5d_12xlarge('r5d.12xlarge'),
  r5d_16xlarge('r5d.16xlarge'),
  r5d_24xlarge('r5d.24xlarge'),
  r5dMetal('r5d.metal'),
  r5dnLarge('r5dn.large'),
  r5dnXlarge('r5dn.xlarge'),
  r5dn_2xlarge('r5dn.2xlarge'),
  r5dn_4xlarge('r5dn.4xlarge'),
  r5dn_8xlarge('r5dn.8xlarge'),
  r5dn_12xlarge('r5dn.12xlarge'),
  r5dn_16xlarge('r5dn.16xlarge'),
  r5dn_24xlarge('r5dn.24xlarge'),
  r5dnMetal('r5dn.metal'),
  r5nLarge('r5n.large'),
  r5nXlarge('r5n.xlarge'),
  r5n_2xlarge('r5n.2xlarge'),
  r5n_4xlarge('r5n.4xlarge'),
  r5n_8xlarge('r5n.8xlarge'),
  r5n_12xlarge('r5n.12xlarge'),
  r5n_16xlarge('r5n.16xlarge'),
  r5n_24xlarge('r5n.24xlarge'),
  r5nMetal('r5n.metal'),
  r6gMedium('r6g.medium'),
  r6gLarge('r6g.large'),
  r6gXlarge('r6g.xlarge'),
  r6g_2xlarge('r6g.2xlarge'),
  r6g_4xlarge('r6g.4xlarge'),
  r6g_8xlarge('r6g.8xlarge'),
  r6g_12xlarge('r6g.12xlarge'),
  r6g_16xlarge('r6g.16xlarge'),
  r6gMetal('r6g.metal'),
  r6gdMedium('r6gd.medium'),
  r6gdLarge('r6gd.large'),
  r6gdXlarge('r6gd.xlarge'),
  r6gd_2xlarge('r6gd.2xlarge'),
  r6gd_4xlarge('r6gd.4xlarge'),
  r6gd_8xlarge('r6gd.8xlarge'),
  r6gd_12xlarge('r6gd.12xlarge'),
  r6gd_16xlarge('r6gd.16xlarge'),
  r6gdMetal('r6gd.metal'),
  r6iLarge('r6i.large'),
  r6iXlarge('r6i.xlarge'),
  r6i_2xlarge('r6i.2xlarge'),
  r6i_4xlarge('r6i.4xlarge'),
  r6i_8xlarge('r6i.8xlarge'),
  r6i_12xlarge('r6i.12xlarge'),
  r6i_16xlarge('r6i.16xlarge'),
  r6i_24xlarge('r6i.24xlarge'),
  r6i_32xlarge('r6i.32xlarge'),
  r6iMetal('r6i.metal'),
  t1Micro('t1.micro'),
  t2Nano('t2.nano'),
  t2Micro('t2.micro'),
  t2Small('t2.small'),
  t2Medium('t2.medium'),
  t2Large('t2.large'),
  t2Xlarge('t2.xlarge'),
  t2_2xlarge('t2.2xlarge'),
  t3Nano('t3.nano'),
  t3Micro('t3.micro'),
  t3Small('t3.small'),
  t3Medium('t3.medium'),
  t3Large('t3.large'),
  t3Xlarge('t3.xlarge'),
  t3_2xlarge('t3.2xlarge'),
  t3aNano('t3a.nano'),
  t3aMicro('t3a.micro'),
  t3aSmall('t3a.small'),
  t3aMedium('t3a.medium'),
  t3aLarge('t3a.large'),
  t3aXlarge('t3a.xlarge'),
  t3a_2xlarge('t3a.2xlarge'),
  t4gNano('t4g.nano'),
  t4gMicro('t4g.micro'),
  t4gSmall('t4g.small'),
  t4gMedium('t4g.medium'),
  t4gLarge('t4g.large'),
  t4gXlarge('t4g.xlarge'),
  t4g_2xlarge('t4g.2xlarge'),
  u_6tb1_56xlarge('u-6tb1.56xlarge'),
  u_6tb1_112xlarge('u-6tb1.112xlarge'),
  u_9tb1_112xlarge('u-9tb1.112xlarge'),
  u_12tb1_112xlarge('u-12tb1.112xlarge'),
  u_6tb1Metal('u-6tb1.metal'),
  u_9tb1Metal('u-9tb1.metal'),
  u_12tb1Metal('u-12tb1.metal'),
  u_18tb1Metal('u-18tb1.metal'),
  u_24tb1Metal('u-24tb1.metal'),
  vt1_3xlarge('vt1.3xlarge'),
  vt1_6xlarge('vt1.6xlarge'),
  vt1_24xlarge('vt1.24xlarge'),
  x1_16xlarge('x1.16xlarge'),
  x1_32xlarge('x1.32xlarge'),
  x1eXlarge('x1e.xlarge'),
  x1e_2xlarge('x1e.2xlarge'),
  x1e_4xlarge('x1e.4xlarge'),
  x1e_8xlarge('x1e.8xlarge'),
  x1e_16xlarge('x1e.16xlarge'),
  x1e_32xlarge('x1e.32xlarge'),
  x2iezn_2xlarge('x2iezn.2xlarge'),
  x2iezn_4xlarge('x2iezn.4xlarge'),
  x2iezn_6xlarge('x2iezn.6xlarge'),
  x2iezn_8xlarge('x2iezn.8xlarge'),
  x2iezn_12xlarge('x2iezn.12xlarge'),
  x2ieznMetal('x2iezn.metal'),
  x2gdMedium('x2gd.medium'),
  x2gdLarge('x2gd.large'),
  x2gdXlarge('x2gd.xlarge'),
  x2gd_2xlarge('x2gd.2xlarge'),
  x2gd_4xlarge('x2gd.4xlarge'),
  x2gd_8xlarge('x2gd.8xlarge'),
  x2gd_12xlarge('x2gd.12xlarge'),
  x2gd_16xlarge('x2gd.16xlarge'),
  x2gdMetal('x2gd.metal'),
  z1dLarge('z1d.large'),
  z1dXlarge('z1d.xlarge'),
  z1d_2xlarge('z1d.2xlarge'),
  z1d_3xlarge('z1d.3xlarge'),
  z1d_6xlarge('z1d.6xlarge'),
  z1d_12xlarge('z1d.12xlarge'),
  z1dMetal('z1d.metal'),
  x2idn_16xlarge('x2idn.16xlarge'),
  x2idn_24xlarge('x2idn.24xlarge'),
  x2idn_32xlarge('x2idn.32xlarge'),
  x2iednXlarge('x2iedn.xlarge'),
  x2iedn_2xlarge('x2iedn.2xlarge'),
  x2iedn_4xlarge('x2iedn.4xlarge'),
  x2iedn_8xlarge('x2iedn.8xlarge'),
  x2iedn_16xlarge('x2iedn.16xlarge'),
  x2iedn_24xlarge('x2iedn.24xlarge'),
  x2iedn_32xlarge('x2iedn.32xlarge'),
  c6aLarge('c6a.large'),
  c6aXlarge('c6a.xlarge'),
  c6a_2xlarge('c6a.2xlarge'),
  c6a_4xlarge('c6a.4xlarge'),
  c6a_8xlarge('c6a.8xlarge'),
  c6a_12xlarge('c6a.12xlarge'),
  c6a_16xlarge('c6a.16xlarge'),
  c6a_24xlarge('c6a.24xlarge'),
  c6a_32xlarge('c6a.32xlarge'),
  c6a_48xlarge('c6a.48xlarge'),
  c6aMetal('c6a.metal'),
  m6aMetal('m6a.metal'),
  i4iLarge('i4i.large'),
  i4iXlarge('i4i.xlarge'),
  i4i_2xlarge('i4i.2xlarge'),
  i4i_4xlarge('i4i.4xlarge'),
  i4i_8xlarge('i4i.8xlarge'),
  i4i_16xlarge('i4i.16xlarge'),
  i4i_32xlarge('i4i.32xlarge'),
  i4iMetal('i4i.metal'),
  x2idnMetal('x2idn.metal'),
  x2iednMetal('x2iedn.metal'),
  c7gMedium('c7g.medium'),
  c7gLarge('c7g.large'),
  c7gXlarge('c7g.xlarge'),
  c7g_2xlarge('c7g.2xlarge'),
  c7g_4xlarge('c7g.4xlarge'),
  c7g_8xlarge('c7g.8xlarge'),
  c7g_12xlarge('c7g.12xlarge'),
  c7g_16xlarge('c7g.16xlarge'),
  mac2Metal('mac2.metal'),
  c6idLarge('c6id.large'),
  c6idXlarge('c6id.xlarge'),
  c6id_2xlarge('c6id.2xlarge'),
  c6id_4xlarge('c6id.4xlarge'),
  c6id_8xlarge('c6id.8xlarge'),
  c6id_12xlarge('c6id.12xlarge'),
  c6id_16xlarge('c6id.16xlarge'),
  c6id_24xlarge('c6id.24xlarge'),
  c6id_32xlarge('c6id.32xlarge'),
  c6idMetal('c6id.metal'),
  m6idLarge('m6id.large'),
  m6idXlarge('m6id.xlarge'),
  m6id_2xlarge('m6id.2xlarge'),
  m6id_4xlarge('m6id.4xlarge'),
  m6id_8xlarge('m6id.8xlarge'),
  m6id_12xlarge('m6id.12xlarge'),
  m6id_16xlarge('m6id.16xlarge'),
  m6id_24xlarge('m6id.24xlarge'),
  m6id_32xlarge('m6id.32xlarge'),
  m6idMetal('m6id.metal'),
  r6idLarge('r6id.large'),
  r6idXlarge('r6id.xlarge'),
  r6id_2xlarge('r6id.2xlarge'),
  r6id_4xlarge('r6id.4xlarge'),
  r6id_8xlarge('r6id.8xlarge'),
  r6id_12xlarge('r6id.12xlarge'),
  r6id_16xlarge('r6id.16xlarge'),
  r6id_24xlarge('r6id.24xlarge'),
  r6id_32xlarge('r6id.32xlarge'),
  r6idMetal('r6id.metal'),
  r6aLarge('r6a.large'),
  r6aXlarge('r6a.xlarge'),
  r6a_2xlarge('r6a.2xlarge'),
  r6a_4xlarge('r6a.4xlarge'),
  r6a_8xlarge('r6a.8xlarge'),
  r6a_12xlarge('r6a.12xlarge'),
  r6a_16xlarge('r6a.16xlarge'),
  r6a_24xlarge('r6a.24xlarge'),
  r6a_32xlarge('r6a.32xlarge'),
  r6a_48xlarge('r6a.48xlarge'),
  r6aMetal('r6a.metal'),
  p4de_24xlarge('p4de.24xlarge'),
  u_3tb1_56xlarge('u-3tb1.56xlarge'),
  u_18tb1_112xlarge('u-18tb1.112xlarge'),
  u_24tb1_112xlarge('u-24tb1.112xlarge'),
  trn1_2xlarge('trn1.2xlarge'),
  trn1_32xlarge('trn1.32xlarge'),
  hpc6id_32xlarge('hpc6id.32xlarge'),
  c6inLarge('c6in.large'),
  c6inXlarge('c6in.xlarge'),
  c6in_2xlarge('c6in.2xlarge'),
  c6in_4xlarge('c6in.4xlarge'),
  c6in_8xlarge('c6in.8xlarge'),
  c6in_12xlarge('c6in.12xlarge'),
  c6in_16xlarge('c6in.16xlarge'),
  c6in_24xlarge('c6in.24xlarge'),
  c6in_32xlarge('c6in.32xlarge'),
  m6inLarge('m6in.large'),
  m6inXlarge('m6in.xlarge'),
  m6in_2xlarge('m6in.2xlarge'),
  m6in_4xlarge('m6in.4xlarge'),
  m6in_8xlarge('m6in.8xlarge'),
  m6in_12xlarge('m6in.12xlarge'),
  m6in_16xlarge('m6in.16xlarge'),
  m6in_24xlarge('m6in.24xlarge'),
  m6in_32xlarge('m6in.32xlarge'),
  m6idnLarge('m6idn.large'),
  m6idnXlarge('m6idn.xlarge'),
  m6idn_2xlarge('m6idn.2xlarge'),
  m6idn_4xlarge('m6idn.4xlarge'),
  m6idn_8xlarge('m6idn.8xlarge'),
  m6idn_12xlarge('m6idn.12xlarge'),
  m6idn_16xlarge('m6idn.16xlarge'),
  m6idn_24xlarge('m6idn.24xlarge'),
  m6idn_32xlarge('m6idn.32xlarge'),
  r6inLarge('r6in.large'),
  r6inXlarge('r6in.xlarge'),
  r6in_2xlarge('r6in.2xlarge'),
  r6in_4xlarge('r6in.4xlarge'),
  r6in_8xlarge('r6in.8xlarge'),
  r6in_12xlarge('r6in.12xlarge'),
  r6in_16xlarge('r6in.16xlarge'),
  r6in_24xlarge('r6in.24xlarge'),
  r6in_32xlarge('r6in.32xlarge'),
  r6idnLarge('r6idn.large'),
  r6idnXlarge('r6idn.xlarge'),
  r6idn_2xlarge('r6idn.2xlarge'),
  r6idn_4xlarge('r6idn.4xlarge'),
  r6idn_8xlarge('r6idn.8xlarge'),
  r6idn_12xlarge('r6idn.12xlarge'),
  r6idn_16xlarge('r6idn.16xlarge'),
  r6idn_24xlarge('r6idn.24xlarge'),
  r6idn_32xlarge('r6idn.32xlarge'),
  c7gMetal('c7g.metal'),
  m7gMedium('m7g.medium'),
  m7gLarge('m7g.large'),
  m7gXlarge('m7g.xlarge'),
  m7g_2xlarge('m7g.2xlarge'),
  m7g_4xlarge('m7g.4xlarge'),
  m7g_8xlarge('m7g.8xlarge'),
  m7g_12xlarge('m7g.12xlarge'),
  m7g_16xlarge('m7g.16xlarge'),
  m7gMetal('m7g.metal'),
  r7gMedium('r7g.medium'),
  r7gLarge('r7g.large'),
  r7gXlarge('r7g.xlarge'),
  r7g_2xlarge('r7g.2xlarge'),
  r7g_4xlarge('r7g.4xlarge'),
  r7g_8xlarge('r7g.8xlarge'),
  r7g_12xlarge('r7g.12xlarge'),
  r7g_16xlarge('r7g.16xlarge'),
  r7gMetal('r7g.metal'),
  c6inMetal('c6in.metal'),
  m6inMetal('m6in.metal'),
  m6idnMetal('m6idn.metal'),
  r6inMetal('r6in.metal'),
  r6idnMetal('r6idn.metal'),
  inf2Xlarge('inf2.xlarge'),
  inf2_8xlarge('inf2.8xlarge'),
  inf2_24xlarge('inf2.24xlarge'),
  inf2_48xlarge('inf2.48xlarge'),
  trn1n_32xlarge('trn1n.32xlarge'),
  i4gLarge('i4g.large'),
  i4gXlarge('i4g.xlarge'),
  i4g_2xlarge('i4g.2xlarge'),
  i4g_4xlarge('i4g.4xlarge'),
  i4g_8xlarge('i4g.8xlarge'),
  i4g_16xlarge('i4g.16xlarge'),
  hpc7g_4xlarge('hpc7g.4xlarge'),
  hpc7g_8xlarge('hpc7g.8xlarge'),
  hpc7g_16xlarge('hpc7g.16xlarge'),
  c7gnMedium('c7gn.medium'),
  c7gnLarge('c7gn.large'),
  c7gnXlarge('c7gn.xlarge'),
  c7gn_2xlarge('c7gn.2xlarge'),
  c7gn_4xlarge('c7gn.4xlarge'),
  c7gn_8xlarge('c7gn.8xlarge'),
  c7gn_12xlarge('c7gn.12xlarge'),
  c7gn_16xlarge('c7gn.16xlarge'),
  p5_48xlarge('p5.48xlarge'),
  m7iLarge('m7i.large'),
  m7iXlarge('m7i.xlarge'),
  m7i_2xlarge('m7i.2xlarge'),
  m7i_4xlarge('m7i.4xlarge'),
  m7i_8xlarge('m7i.8xlarge'),
  m7i_12xlarge('m7i.12xlarge'),
  m7i_16xlarge('m7i.16xlarge'),
  m7i_24xlarge('m7i.24xlarge'),
  m7i_48xlarge('m7i.48xlarge'),
  m7iFlexLarge('m7i-flex.large'),
  m7iFlexXlarge('m7i-flex.xlarge'),
  m7iFlex_2xlarge('m7i-flex.2xlarge'),
  m7iFlex_4xlarge('m7i-flex.4xlarge'),
  m7iFlex_8xlarge('m7i-flex.8xlarge'),
  m7aMedium('m7a.medium'),
  m7aLarge('m7a.large'),
  m7aXlarge('m7a.xlarge'),
  m7a_2xlarge('m7a.2xlarge'),
  m7a_4xlarge('m7a.4xlarge'),
  m7a_8xlarge('m7a.8xlarge'),
  m7a_12xlarge('m7a.12xlarge'),
  m7a_16xlarge('m7a.16xlarge'),
  m7a_24xlarge('m7a.24xlarge'),
  m7a_32xlarge('m7a.32xlarge'),
  m7a_48xlarge('m7a.48xlarge'),
  m7aMetal_48xl('m7a.metal-48xl'),
  hpc7a_12xlarge('hpc7a.12xlarge'),
  hpc7a_24xlarge('hpc7a.24xlarge'),
  hpc7a_48xlarge('hpc7a.48xlarge'),
  hpc7a_96xlarge('hpc7a.96xlarge'),
  c7gdMedium('c7gd.medium'),
  c7gdLarge('c7gd.large'),
  c7gdXlarge('c7gd.xlarge'),
  c7gd_2xlarge('c7gd.2xlarge'),
  c7gd_4xlarge('c7gd.4xlarge'),
  c7gd_8xlarge('c7gd.8xlarge'),
  c7gd_12xlarge('c7gd.12xlarge'),
  c7gd_16xlarge('c7gd.16xlarge'),
  m7gdMedium('m7gd.medium'),
  m7gdLarge('m7gd.large'),
  m7gdXlarge('m7gd.xlarge'),
  m7gd_2xlarge('m7gd.2xlarge'),
  m7gd_4xlarge('m7gd.4xlarge'),
  m7gd_8xlarge('m7gd.8xlarge'),
  m7gd_12xlarge('m7gd.12xlarge'),
  m7gd_16xlarge('m7gd.16xlarge'),
  r7gdMedium('r7gd.medium'),
  r7gdLarge('r7gd.large'),
  r7gdXlarge('r7gd.xlarge'),
  r7gd_2xlarge('r7gd.2xlarge'),
  r7gd_4xlarge('r7gd.4xlarge'),
  r7gd_8xlarge('r7gd.8xlarge'),
  r7gd_12xlarge('r7gd.12xlarge'),
  r7gd_16xlarge('r7gd.16xlarge'),
  r7aMedium('r7a.medium'),
  r7aLarge('r7a.large'),
  r7aXlarge('r7a.xlarge'),
  r7a_2xlarge('r7a.2xlarge'),
  r7a_4xlarge('r7a.4xlarge'),
  r7a_8xlarge('r7a.8xlarge'),
  r7a_12xlarge('r7a.12xlarge'),
  r7a_16xlarge('r7a.16xlarge'),
  r7a_24xlarge('r7a.24xlarge'),
  r7a_32xlarge('r7a.32xlarge'),
  r7a_48xlarge('r7a.48xlarge'),
  c7iLarge('c7i.large'),
  c7iXlarge('c7i.xlarge'),
  c7i_2xlarge('c7i.2xlarge'),
  c7i_4xlarge('c7i.4xlarge'),
  c7i_8xlarge('c7i.8xlarge'),
  c7i_12xlarge('c7i.12xlarge'),
  c7i_16xlarge('c7i.16xlarge'),
  c7i_24xlarge('c7i.24xlarge'),
  c7i_48xlarge('c7i.48xlarge'),
  mac2M2proMetal('mac2-m2pro.metal'),
  r7izLarge('r7iz.large'),
  r7izXlarge('r7iz.xlarge'),
  r7iz_2xlarge('r7iz.2xlarge'),
  r7iz_4xlarge('r7iz.4xlarge'),
  r7iz_8xlarge('r7iz.8xlarge'),
  r7iz_12xlarge('r7iz.12xlarge'),
  r7iz_16xlarge('r7iz.16xlarge'),
  r7iz_32xlarge('r7iz.32xlarge'),
  c7aMedium('c7a.medium'),
  c7aLarge('c7a.large'),
  c7aXlarge('c7a.xlarge'),
  c7a_2xlarge('c7a.2xlarge'),
  c7a_4xlarge('c7a.4xlarge'),
  c7a_8xlarge('c7a.8xlarge'),
  c7a_12xlarge('c7a.12xlarge'),
  c7a_16xlarge('c7a.16xlarge'),
  c7a_24xlarge('c7a.24xlarge'),
  c7a_32xlarge('c7a.32xlarge'),
  c7a_48xlarge('c7a.48xlarge'),
  c7aMetal_48xl('c7a.metal-48xl'),
  r7aMetal_48xl('r7a.metal-48xl'),
  r7iLarge('r7i.large'),
  r7iXlarge('r7i.xlarge'),
  r7i_2xlarge('r7i.2xlarge'),
  r7i_4xlarge('r7i.4xlarge'),
  r7i_8xlarge('r7i.8xlarge'),
  r7i_12xlarge('r7i.12xlarge'),
  r7i_16xlarge('r7i.16xlarge'),
  r7i_24xlarge('r7i.24xlarge'),
  r7i_48xlarge('r7i.48xlarge'),
  dl2q_24xlarge('dl2q.24xlarge'),
  mac2M2Metal('mac2-m2.metal'),
  i4i_12xlarge('i4i.12xlarge'),
  i4i_24xlarge('i4i.24xlarge'),
  c7iMetal_24xl('c7i.metal-24xl'),
  c7iMetal_48xl('c7i.metal-48xl'),
  m7iMetal_24xl('m7i.metal-24xl'),
  m7iMetal_48xl('m7i.metal-48xl'),
  r7iMetal_24xl('r7i.metal-24xl'),
  r7iMetal_48xl('r7i.metal-48xl'),
  r7izMetal_16xl('r7iz.metal-16xl'),
  r7izMetal_32xl('r7iz.metal-32xl'),
  c7gdMetal('c7gd.metal'),
  m7gdMetal('m7gd.metal'),
  r7gdMetal('r7gd.metal'),
  g6Xlarge('g6.xlarge'),
  g6_2xlarge('g6.2xlarge'),
  g6_4xlarge('g6.4xlarge'),
  g6_8xlarge('g6.8xlarge'),
  g6_12xlarge('g6.12xlarge'),
  g6_16xlarge('g6.16xlarge'),
  g6_24xlarge('g6.24xlarge'),
  g6_48xlarge('g6.48xlarge'),
  gr6_4xlarge('gr6.4xlarge'),
  gr6_8xlarge('gr6.8xlarge'),
  c7iFlexLarge('c7i-flex.large'),
  c7iFlexXlarge('c7i-flex.xlarge'),
  c7iFlex_2xlarge('c7i-flex.2xlarge'),
  c7iFlex_4xlarge('c7i-flex.4xlarge'),
  c7iFlex_8xlarge('c7i-flex.8xlarge'),
  u7i_12tb_224xlarge('u7i-12tb.224xlarge'),
  u7in_16tb_224xlarge('u7in-16tb.224xlarge'),
  u7in_24tb_224xlarge('u7in-24tb.224xlarge'),
  u7in_32tb_224xlarge('u7in-32tb.224xlarge'),
  ;

  final String value;

  const InstanceType(this.value);

  static InstanceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum InstanceType'));
}

enum InstanceTypeHypervisor {
  nitro('nitro'),
  xen('xen'),
  ;

  final String value;

  const InstanceTypeHypervisor(this.value);

  static InstanceTypeHypervisor fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InstanceTypeHypervisor'));
}

/// Describes the instance type.
class InstanceTypeInfo {
  /// Indicates whether Amazon CloudWatch action based recovery is supported.
  final bool? autoRecoverySupported;

  /// Indicates whether the instance is a bare metal instance type.
  final bool? bareMetal;

  /// Indicates whether the instance type is a burstable performance T instance
  /// type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// performance instances</a>.
  final bool? burstablePerformanceSupported;

  /// Indicates whether the instance type is current generation.
  final bool? currentGeneration;

  /// Indicates whether Dedicated Hosts are supported on the instance type.
  final bool? dedicatedHostsSupported;

  /// Describes the Amazon EBS settings for the instance type.
  final EbsInfo? ebsInfo;

  /// Describes the FPGA accelerator settings for the instance type.
  final FpgaInfo? fpgaInfo;

  /// Indicates whether the instance type is eligible for the free tier.
  final bool? freeTierEligible;

  /// Describes the GPU accelerator settings for the instance type.
  final GpuInfo? gpuInfo;

  /// Indicates whether On-Demand hibernation is supported.
  final bool? hibernationSupported;

  /// The hypervisor for the instance type.
  final InstanceTypeHypervisor? hypervisor;

  /// Describes the Inference accelerator settings for the instance type.
  final InferenceAcceleratorInfo? inferenceAcceleratorInfo;

  /// Describes the instance storage for the instance type.
  final InstanceStorageInfo? instanceStorageInfo;

  /// Indicates whether instance storage is supported.
  final bool? instanceStorageSupported;

  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  final InstanceType? instanceType;

  /// Describes the media accelerator settings for the instance type.
  final MediaAcceleratorInfo? mediaAcceleratorInfo;

  /// Describes the memory for the instance type.
  final MemoryInfo? memoryInfo;

  /// Describes the network settings for the instance type.
  final NetworkInfo? networkInfo;

  /// Describes the Neuron accelerator settings for the instance type.
  final NeuronInfo? neuronInfo;

  /// Indicates whether Nitro Enclaves is supported.
  final NitroEnclavesSupport? nitroEnclavesSupport;

  /// Describes the supported NitroTPM versions for the instance type.
  final NitroTpmInfo? nitroTpmInfo;

  /// Indicates whether NitroTPM is supported.
  final NitroTpmSupport? nitroTpmSupport;

  /// Indicates whether a local Precision Time Protocol (PTP) hardware clock (PHC)
  /// is supported.
  final PhcSupport? phcSupport;

  /// Describes the placement group settings for the instance type.
  final PlacementGroupInfo? placementGroupInfo;

  /// Describes the processor.
  final ProcessorInfo? processorInfo;

  /// The supported boot modes. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot
  /// modes</a> in the <i>Amazon EC2 User Guide</i>.
  final List<BootModeType>? supportedBootModes;

  /// The supported root device types.
  final List<RootDeviceType>? supportedRootDeviceTypes;

  /// Indicates whether the instance type is offered for spot or On-Demand.
  final List<UsageClassType>? supportedUsageClasses;

  /// The supported virtualization types.
  final List<VirtualizationType>? supportedVirtualizationTypes;

  /// Describes the vCPU configurations for the instance type.
  final VCpuInfo? vCpuInfo;

  InstanceTypeInfo({
    this.autoRecoverySupported,
    this.bareMetal,
    this.burstablePerformanceSupported,
    this.currentGeneration,
    this.dedicatedHostsSupported,
    this.ebsInfo,
    this.fpgaInfo,
    this.freeTierEligible,
    this.gpuInfo,
    this.hibernationSupported,
    this.hypervisor,
    this.inferenceAcceleratorInfo,
    this.instanceStorageInfo,
    this.instanceStorageSupported,
    this.instanceType,
    this.mediaAcceleratorInfo,
    this.memoryInfo,
    this.networkInfo,
    this.neuronInfo,
    this.nitroEnclavesSupport,
    this.nitroTpmInfo,
    this.nitroTpmSupport,
    this.phcSupport,
    this.placementGroupInfo,
    this.processorInfo,
    this.supportedBootModes,
    this.supportedRootDeviceTypes,
    this.supportedUsageClasses,
    this.supportedVirtualizationTypes,
    this.vCpuInfo,
  });

  Map<String, dynamic> toJson() {
    final autoRecoverySupported = this.autoRecoverySupported;
    final bareMetal = this.bareMetal;
    final burstablePerformanceSupported = this.burstablePerformanceSupported;
    final currentGeneration = this.currentGeneration;
    final dedicatedHostsSupported = this.dedicatedHostsSupported;
    final ebsInfo = this.ebsInfo;
    final fpgaInfo = this.fpgaInfo;
    final freeTierEligible = this.freeTierEligible;
    final gpuInfo = this.gpuInfo;
    final hibernationSupported = this.hibernationSupported;
    final hypervisor = this.hypervisor;
    final inferenceAcceleratorInfo = this.inferenceAcceleratorInfo;
    final instanceStorageInfo = this.instanceStorageInfo;
    final instanceStorageSupported = this.instanceStorageSupported;
    final instanceType = this.instanceType;
    final mediaAcceleratorInfo = this.mediaAcceleratorInfo;
    final memoryInfo = this.memoryInfo;
    final networkInfo = this.networkInfo;
    final neuronInfo = this.neuronInfo;
    final nitroEnclavesSupport = this.nitroEnclavesSupport;
    final nitroTpmInfo = this.nitroTpmInfo;
    final nitroTpmSupport = this.nitroTpmSupport;
    final phcSupport = this.phcSupport;
    final placementGroupInfo = this.placementGroupInfo;
    final processorInfo = this.processorInfo;
    final supportedBootModes = this.supportedBootModes;
    final supportedRootDeviceTypes = this.supportedRootDeviceTypes;
    final supportedUsageClasses = this.supportedUsageClasses;
    final supportedVirtualizationTypes = this.supportedVirtualizationTypes;
    final vCpuInfo = this.vCpuInfo;
    return {
      if (autoRecoverySupported != null)
        'autoRecoverySupported': autoRecoverySupported,
      if (bareMetal != null) 'bareMetal': bareMetal,
      if (burstablePerformanceSupported != null)
        'burstablePerformanceSupported': burstablePerformanceSupported,
      if (currentGeneration != null) 'currentGeneration': currentGeneration,
      if (dedicatedHostsSupported != null)
        'dedicatedHostsSupported': dedicatedHostsSupported,
      if (ebsInfo != null) 'ebsInfo': ebsInfo,
      if (fpgaInfo != null) 'fpgaInfo': fpgaInfo,
      if (freeTierEligible != null) 'freeTierEligible': freeTierEligible,
      if (gpuInfo != null) 'gpuInfo': gpuInfo,
      if (hibernationSupported != null)
        'hibernationSupported': hibernationSupported,
      if (hypervisor != null) 'hypervisor': hypervisor.value,
      if (inferenceAcceleratorInfo != null)
        'inferenceAcceleratorInfo': inferenceAcceleratorInfo,
      if (instanceStorageInfo != null)
        'instanceStorageInfo': instanceStorageInfo,
      if (instanceStorageSupported != null)
        'instanceStorageSupported': instanceStorageSupported,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (mediaAcceleratorInfo != null)
        'mediaAcceleratorInfo': mediaAcceleratorInfo,
      if (memoryInfo != null) 'memoryInfo': memoryInfo,
      if (networkInfo != null) 'networkInfo': networkInfo,
      if (neuronInfo != null) 'neuronInfo': neuronInfo,
      if (nitroEnclavesSupport != null)
        'nitroEnclavesSupport': nitroEnclavesSupport.value,
      if (nitroTpmInfo != null) 'nitroTpmInfo': nitroTpmInfo,
      if (nitroTpmSupport != null) 'nitroTpmSupport': nitroTpmSupport.value,
      if (phcSupport != null) 'phcSupport': phcSupport.value,
      if (placementGroupInfo != null) 'placementGroupInfo': placementGroupInfo,
      if (processorInfo != null) 'processorInfo': processorInfo,
      if (supportedBootModes != null)
        'supportedBootModes': supportedBootModes.map((e) => e.value).toList(),
      if (supportedRootDeviceTypes != null)
        'supportedRootDeviceTypes':
            supportedRootDeviceTypes.map((e) => e.value).toList(),
      if (supportedUsageClasses != null)
        'supportedUsageClasses':
            supportedUsageClasses.map((e) => e.value).toList(),
      if (supportedVirtualizationTypes != null)
        'supportedVirtualizationTypes':
            supportedVirtualizationTypes.map((e) => e.value).toList(),
      if (vCpuInfo != null) 'vCpuInfo': vCpuInfo,
    };
  }
}

/// The list of instance types with the specified instance attributes.
class InstanceTypeInfoFromInstanceRequirements {
  /// The matching instance type.
  final String? instanceType;

  InstanceTypeInfoFromInstanceRequirements({
    this.instanceType,
  });

  Map<String, dynamic> toJson() {
    final instanceType = this.instanceType;
    return {
      if (instanceType != null) 'instanceType': instanceType,
    };
  }
}

/// The instance types offered.
class InstanceTypeOffering {
  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon EC2 User Guide</i>.
  final InstanceType? instanceType;

  /// The identifier for the location. This depends on the location type. For
  /// example, if the location type is <code>region</code>, the location is the
  /// Region code (for example, <code>us-east-2</code>.)
  final String? location;

  /// The location type.
  final LocationType? locationType;

  InstanceTypeOffering({
    this.instanceType,
    this.location,
    this.locationType,
  });

  Map<String, dynamic> toJson() {
    final instanceType = this.instanceType;
    final location = this.location;
    final locationType = this.locationType;
    return {
      if (instanceType != null) 'instanceType': instanceType.value,
      if (location != null) 'location': location,
      if (locationType != null) 'locationType': locationType.value,
    };
  }
}

/// Information about the Capacity Reservation usage.
class InstanceUsage {
  /// The ID of the Amazon Web Services account that is making use of the Capacity
  /// Reservation.
  final String? accountId;

  /// The number of instances the Amazon Web Services account currently has in the
  /// Capacity Reservation.
  final int? usedInstanceCount;

  InstanceUsage({
    this.accountId,
    this.usedInstanceCount,
  });

  Map<String, dynamic> toJson() {
    final accountId = this.accountId;
    final usedInstanceCount = this.usedInstanceCount;
    return {
      if (accountId != null) 'accountId': accountId,
      if (usedInstanceCount != null) 'usedInstanceCount': usedInstanceCount,
    };
  }
}

/// Describes service integrations with VPC Flow logs.
class IntegrateServices {
  /// Information about the integration with Amazon Athena.
  final List<AthenaIntegration>? athenaIntegrations;

  IntegrateServices({
    this.athenaIntegrations,
  });

  Map<String, dynamic> toJson() {
    final athenaIntegrations = this.athenaIntegrations;
    return {
      if (athenaIntegrations != null) 'AthenaIntegration': athenaIntegrations,
    };
  }
}

enum InterfacePermissionType {
  instanceAttach('INSTANCE-ATTACH'),
  eipAssociate('EIP-ASSOCIATE'),
  ;

  final String value;

  const InterfacePermissionType(this.value);

  static InterfacePermissionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InterfacePermissionType'));
}

enum InterfaceProtocolType {
  vlan('VLAN'),
  gre('GRE'),
  ;

  final String value;

  const InterfaceProtocolType(this.value);

  static InterfaceProtocolType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum InterfaceProtocolType'));
}

/// Describes an internet gateway.
class InternetGateway {
  /// Any VPCs attached to the internet gateway.
  final List<InternetGatewayAttachment>? attachments;

  /// The ID of the internet gateway.
  final String? internetGatewayId;

  /// The ID of the Amazon Web Services account that owns the internet gateway.
  final String? ownerId;

  /// Any tags assigned to the internet gateway.
  final List<Tag>? tags;

  InternetGateway({
    this.attachments,
    this.internetGatewayId,
    this.ownerId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final attachments = this.attachments;
    final internetGatewayId = this.internetGatewayId;
    final ownerId = this.ownerId;
    final tags = this.tags;
    return {
      if (attachments != null) 'attachmentSet': attachments,
      if (internetGatewayId != null) 'internetGatewayId': internetGatewayId,
      if (ownerId != null) 'ownerId': ownerId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes the attachment of a VPC to an internet gateway or an egress-only
/// internet gateway.
class InternetGatewayAttachment {
  /// The current state of the attachment. For an internet gateway, the state is
  /// <code>available</code> when attached to a VPC; otherwise, this value is not
  /// returned.
  final AttachmentStatus? state;

  /// The ID of the VPC.
  final String? vpcId;

  InternetGatewayAttachment({
    this.state,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final vpcId = this.vpcId;
    return {
      if (state != null) 'state': state.value,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum IpAddressType {
  ipv4('ipv4'),
  dualstack('dualstack'),
  ipv6('ipv6'),
  ;

  final String value;

  const IpAddressType(this.value);

  static IpAddressType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpAddressType'));
}

/// Describes the permissions for a security group rule.
class IpPermission {
  /// If the protocol is TCP or UDP, this is the start of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
  final int? fromPort;

  /// The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
  /// <code>icmpv6</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>).
  ///
  /// Use <code>-1</code> to specify all protocols. When authorizing security
  /// group rules, specifying <code>-1</code> or a protocol number other than
  /// <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or
  /// <code>icmpv6</code> allows traffic on all ports, regardless of any port
  /// range you specify. For <code>tcp</code>, <code>udp</code>, and
  /// <code>icmp</code>, you must specify a port range. For <code>icmpv6</code>,
  /// the port range is optional; if you omit the port range, traffic for all
  /// types and codes is allowed.
  final String? ipProtocol;

  /// The IPv4 address ranges.
  final List<IpRange>? ipRanges;

  /// The IPv6 address ranges.
  final List<Ipv6Range>? ipv6Ranges;

  /// The prefix list IDs.
  final List<PrefixListId>? prefixListIds;

  /// If the protocol is TCP or UDP, this is the end of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If
  /// the start port is -1 (all ICMP types), then the end port must be -1 (all
  /// ICMP codes).
  final int? toPort;

  /// The security group and Amazon Web Services account ID pairs.
  final List<UserIdGroupPair>? userIdGroupPairs;

  IpPermission({
    this.fromPort,
    this.ipProtocol,
    this.ipRanges,
    this.ipv6Ranges,
    this.prefixListIds,
    this.toPort,
    this.userIdGroupPairs,
  });

  Map<String, dynamic> toJson() {
    final fromPort = this.fromPort;
    final ipProtocol = this.ipProtocol;
    final ipRanges = this.ipRanges;
    final ipv6Ranges = this.ipv6Ranges;
    final prefixListIds = this.prefixListIds;
    final toPort = this.toPort;
    final userIdGroupPairs = this.userIdGroupPairs;
    return {
      if (fromPort != null) 'fromPort': fromPort,
      if (ipProtocol != null) 'ipProtocol': ipProtocol,
      if (ipRanges != null) 'ipRanges': ipRanges,
      if (ipv6Ranges != null) 'ipv6Ranges': ipv6Ranges,
      if (prefixListIds != null) 'prefixListIds': prefixListIds,
      if (toPort != null) 'toPort': toPort,
      if (userIdGroupPairs != null) 'groups': userIdGroupPairs,
    };
  }
}

/// Describes an IPv4 address range.
class IpRange {
  /// The IPv4 address range. You can either specify a CIDR block or a source
  /// security group, not both. To specify a single IPv4 address, use the /32
  /// prefix length.
  final String? cidrIp;

  /// A description for the security group rule that references this IPv4 address
  /// range.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
  final String? description;

  IpRange({
    this.cidrIp,
    this.description,
  });

  Map<String, dynamic> toJson() {
    final cidrIp = this.cidrIp;
    final description = this.description;
    return {
      if (cidrIp != null) 'cidrIp': cidrIp,
      if (description != null) 'description': description,
    };
  }
}

/// IPAM is a VPC feature that you can use to automate your IP address
/// management workflows including assigning, tracking, troubleshooting, and
/// auditing IP addresses across Amazon Web Services Regions and accounts
/// throughout your Amazon Web Services Organization. For more information, see
/// <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What
/// is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
class Ipam {
  /// The IPAM's default resource discovery association ID.
  final String? defaultResourceDiscoveryAssociationId;

  /// The IPAM's default resource discovery ID.
  final String? defaultResourceDiscoveryId;

  /// The description for the IPAM.
  final String? description;

  /// The Amazon Resource Name (ARN) of the IPAM.
  final String? ipamArn;

  /// The ID of the IPAM.
  final String? ipamId;

  /// The Amazon Web Services Region of the IPAM.
  final String? ipamRegion;

  /// The operating Regions for an IPAM. Operating Regions are Amazon Web Services
  /// Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
  /// discovers and monitors resources in the Amazon Web Services Regions you
  /// select as operating Regions.
  ///
  /// For more information about operating Regions, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
  /// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final List<IpamOperatingRegion>? operatingRegions;

  /// The Amazon Web Services account ID of the owner of the IPAM.
  final String? ownerId;

  /// The ID of the IPAM's default private scope.
  final String? privateDefaultScopeId;

  /// The ID of the IPAM's default public scope.
  final String? publicDefaultScopeId;

  /// The IPAM's resource discovery association count.
  final int? resourceDiscoveryAssociationCount;

  /// The number of scopes in the IPAM. The scope quota is 5. For more information
  /// on quotas, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas
  /// in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final int? scopeCount;

  /// The state of the IPAM.
  final IpamState? state;

  /// The state message.
  final String? stateMessage;

  /// The key/value combination of a tag assigned to the resource. Use the tag key
  /// in the filter name and the tag value as the filter value. For example, to
  /// find all resources that have a tag with the key <code>Owner</code> and the
  /// value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name
  /// and <code>TeamA</code> for the filter value.
  final List<Tag>? tags;

  /// IPAM is offered in a Free Tier and an Advanced Tier. For more information
  /// about the features available in each tier and the costs associated with the
  /// tiers, see <a href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing
  /// &gt; IPAM tab</a>.
  final IpamTier? tier;

  Ipam({
    this.defaultResourceDiscoveryAssociationId,
    this.defaultResourceDiscoveryId,
    this.description,
    this.ipamArn,
    this.ipamId,
    this.ipamRegion,
    this.operatingRegions,
    this.ownerId,
    this.privateDefaultScopeId,
    this.publicDefaultScopeId,
    this.resourceDiscoveryAssociationCount,
    this.scopeCount,
    this.state,
    this.stateMessage,
    this.tags,
    this.tier,
  });

  Map<String, dynamic> toJson() {
    final defaultResourceDiscoveryAssociationId =
        this.defaultResourceDiscoveryAssociationId;
    final defaultResourceDiscoveryId = this.defaultResourceDiscoveryId;
    final description = this.description;
    final ipamArn = this.ipamArn;
    final ipamId = this.ipamId;
    final ipamRegion = this.ipamRegion;
    final operatingRegions = this.operatingRegions;
    final ownerId = this.ownerId;
    final privateDefaultScopeId = this.privateDefaultScopeId;
    final publicDefaultScopeId = this.publicDefaultScopeId;
    final resourceDiscoveryAssociationCount =
        this.resourceDiscoveryAssociationCount;
    final scopeCount = this.scopeCount;
    final state = this.state;
    final stateMessage = this.stateMessage;
    final tags = this.tags;
    final tier = this.tier;
    return {
      if (defaultResourceDiscoveryAssociationId != null)
        'defaultResourceDiscoveryAssociationId':
            defaultResourceDiscoveryAssociationId,
      if (defaultResourceDiscoveryId != null)
        'defaultResourceDiscoveryId': defaultResourceDiscoveryId,
      if (description != null) 'description': description,
      if (ipamArn != null) 'ipamArn': ipamArn,
      if (ipamId != null) 'ipamId': ipamId,
      if (ipamRegion != null) 'ipamRegion': ipamRegion,
      if (operatingRegions != null) 'operatingRegionSet': operatingRegions,
      if (ownerId != null) 'ownerId': ownerId,
      if (privateDefaultScopeId != null)
        'privateDefaultScopeId': privateDefaultScopeId,
      if (publicDefaultScopeId != null)
        'publicDefaultScopeId': publicDefaultScopeId,
      if (resourceDiscoveryAssociationCount != null)
        'resourceDiscoveryAssociationCount': resourceDiscoveryAssociationCount,
      if (scopeCount != null) 'scopeCount': scopeCount,
      if (state != null) 'state': state.value,
      if (stateMessage != null) 'stateMessage': stateMessage,
      if (tags != null) 'tagSet': tags,
      if (tier != null) 'tier': tier.value,
    };
  }
}

/// The historical record of a CIDR within an IPAM scope. For more information,
/// see <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/view-history-cidr-ipam.html">View
/// the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.
class IpamAddressHistoryRecord {
  /// The CIDR of the resource.
  final String? resourceCidr;

  /// The compliance status of a resource. For more information on compliance
  /// statuses, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor
  /// CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final IpamComplianceStatus? resourceComplianceStatus;

  /// The ID of the resource.
  final String? resourceId;

  /// The name of the resource.
  final String? resourceName;

  /// The overlap status of an IPAM resource. The overlap status tells you if the
  /// CIDR for a resource overlaps with another CIDR in the scope. For more
  /// information on overlap statuses, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor
  /// CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final IpamOverlapStatus? resourceOverlapStatus;

  /// The ID of the resource owner.
  final String? resourceOwnerId;

  /// The Amazon Web Services Region of the resource.
  final String? resourceRegion;

  /// The type of the resource.
  final IpamAddressHistoryResourceType? resourceType;

  /// Sampled end time of the resource-to-CIDR association within the IPAM scope.
  /// Changes are picked up in periodic snapshots, so the end time may have
  /// occurred before this specific time.
  final DateTime? sampledEndTime;

  /// Sampled start time of the resource-to-CIDR association within the IPAM
  /// scope. Changes are picked up in periodic snapshots, so the start time may
  /// have occurred before this specific time.
  final DateTime? sampledStartTime;

  /// The VPC ID of the resource.
  final String? vpcId;

  IpamAddressHistoryRecord({
    this.resourceCidr,
    this.resourceComplianceStatus,
    this.resourceId,
    this.resourceName,
    this.resourceOverlapStatus,
    this.resourceOwnerId,
    this.resourceRegion,
    this.resourceType,
    this.sampledEndTime,
    this.sampledStartTime,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final resourceCidr = this.resourceCidr;
    final resourceComplianceStatus = this.resourceComplianceStatus;
    final resourceId = this.resourceId;
    final resourceName = this.resourceName;
    final resourceOverlapStatus = this.resourceOverlapStatus;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceRegion = this.resourceRegion;
    final resourceType = this.resourceType;
    final sampledEndTime = this.sampledEndTime;
    final sampledStartTime = this.sampledStartTime;
    final vpcId = this.vpcId;
    return {
      if (resourceCidr != null) 'resourceCidr': resourceCidr,
      if (resourceComplianceStatus != null)
        'resourceComplianceStatus': resourceComplianceStatus.value,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceName != null) 'resourceName': resourceName,
      if (resourceOverlapStatus != null)
        'resourceOverlapStatus': resourceOverlapStatus.value,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceRegion != null) 'resourceRegion': resourceRegion,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (sampledEndTime != null)
        'sampledEndTime': iso8601ToJson(sampledEndTime),
      if (sampledStartTime != null)
        'sampledStartTime': iso8601ToJson(sampledStartTime),
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum IpamAddressHistoryResourceType {
  eip('eip'),
  vpc('vpc'),
  subnet('subnet'),
  networkInterface('network-interface'),
  instance('instance'),
  ;

  final String value;

  const IpamAddressHistoryResourceType(this.value);

  static IpamAddressHistoryResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamAddressHistoryResourceType'));
}

enum IpamAssociatedResourceDiscoveryStatus {
  active('active'),
  notFound('not-found'),
  ;

  final String value;

  const IpamAssociatedResourceDiscoveryStatus(this.value);

  static IpamAssociatedResourceDiscoveryStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamAssociatedResourceDiscoveryStatus'));
}

/// A signed document that proves that you are authorized to bring the specified
/// IP address range to Amazon using BYOIP.
class IpamCidrAuthorizationContext {
  /// The plain-text authorization message for the prefix and account.
  final String? message;

  /// The signed authorization message for the prefix and account.
  final String? signature;

  IpamCidrAuthorizationContext({
    this.message,
    this.signature,
  });

  Map<String, dynamic> toJson() {
    final message = this.message;
    final signature = this.signature;
    return {
      if (message != null) 'Message': message,
      if (signature != null) 'Signature': signature,
    };
  }
}

enum IpamComplianceStatus {
  compliant('compliant'),
  noncompliant('noncompliant'),
  unmanaged('unmanaged'),
  ignored('ignored'),
  ;

  final String value;

  const IpamComplianceStatus(this.value);

  static IpamComplianceStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum IpamComplianceStatus'));
}

/// An IPAM discovered account. A discovered account is an Amazon Web Services
/// account that is monitored under a resource discovery. If you have integrated
/// IPAM with Amazon Web Services Organizations, all accounts in the
/// organization are discovered accounts.
class IpamDiscoveredAccount {
  /// The account ID.
  final String? accountId;

  /// The Amazon Web Services Region that the account information is returned
  /// from. An account can be discovered in multiple regions and will have a
  /// separate discovered account for each Region.
  final String? discoveryRegion;

  /// The resource discovery failure reason.
  final IpamDiscoveryFailureReason? failureReason;

  /// The last attempted resource discovery time.
  final DateTime? lastAttemptedDiscoveryTime;

  /// The last successful resource discovery time.
  final DateTime? lastSuccessfulDiscoveryTime;

  IpamDiscoveredAccount({
    this.accountId,
    this.discoveryRegion,
    this.failureReason,
    this.lastAttemptedDiscoveryTime,
    this.lastSuccessfulDiscoveryTime,
  });

  Map<String, dynamic> toJson() {
    final accountId = this.accountId;
    final discoveryRegion = this.discoveryRegion;
    final failureReason = this.failureReason;
    final lastAttemptedDiscoveryTime = this.lastAttemptedDiscoveryTime;
    final lastSuccessfulDiscoveryTime = this.lastSuccessfulDiscoveryTime;
    return {
      if (accountId != null) 'accountId': accountId,
      if (discoveryRegion != null) 'discoveryRegion': discoveryRegion,
      if (failureReason != null) 'failureReason': failureReason,
      if (lastAttemptedDiscoveryTime != null)
        'lastAttemptedDiscoveryTime': iso8601ToJson(lastAttemptedDiscoveryTime),
      if (lastSuccessfulDiscoveryTime != null)
        'lastSuccessfulDiscoveryTime':
            iso8601ToJson(lastSuccessfulDiscoveryTime),
    };
  }
}

/// A public IP Address discovered by IPAM.
class IpamDiscoveredPublicAddress {
  /// The IP address.
  final String? address;

  /// The allocation ID of the resource the IP address is assigned to.
  final String? addressAllocationId;

  /// The ID of the owner of the resource the IP address is assigned to.
  final String? addressOwnerId;

  /// The Region of the resource the IP address is assigned to.
  final String? addressRegion;

  /// The IP address type.
  final IpamPublicAddressType? addressType;

  /// The association status.
  final IpamPublicAddressAssociationStatus? associationStatus;

  /// The instance ID of the instance the assigned IP address is assigned to.
  final String? instanceId;

  /// The resource discovery ID.
  final String? ipamResourceDiscoveryId;

  /// The network border group that the resource that the IP address is assigned
  /// to is in.
  final String? networkBorderGroup;

  /// The description of the network interface that IP address is assigned to.
  final String? networkInterfaceDescription;

  /// The network interface ID of the resource with the assigned IP address.
  final String? networkInterfaceId;

  /// The ID of the public IPv4 pool that the resource with the assigned IP
  /// address is from.
  final String? publicIpv4PoolId;

  /// The last successful resource discovery time.
  final DateTime? sampleTime;

  /// Security groups associated with the resource that the IP address is assigned
  /// to.
  final List<IpamPublicAddressSecurityGroup>? securityGroups;

  /// The Amazon Web Services service associated with the IP address.
  final IpamPublicAddressAwsService? service;

  /// The resource ARN or ID.
  final String? serviceResource;

  /// The ID of the subnet that the resource with the assigned IP address is in.
  final String? subnetId;

  /// Tags associated with the IP address.
  final IpamPublicAddressTags? tags;

  /// The ID of the VPC that the resource with the assigned IP address is in.
  final String? vpcId;

  IpamDiscoveredPublicAddress({
    this.address,
    this.addressAllocationId,
    this.addressOwnerId,
    this.addressRegion,
    this.addressType,
    this.associationStatus,
    this.instanceId,
    this.ipamResourceDiscoveryId,
    this.networkBorderGroup,
    this.networkInterfaceDescription,
    this.networkInterfaceId,
    this.publicIpv4PoolId,
    this.sampleTime,
    this.securityGroups,
    this.service,
    this.serviceResource,
    this.subnetId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final address = this.address;
    final addressAllocationId = this.addressAllocationId;
    final addressOwnerId = this.addressOwnerId;
    final addressRegion = this.addressRegion;
    final addressType = this.addressType;
    final associationStatus = this.associationStatus;
    final instanceId = this.instanceId;
    final ipamResourceDiscoveryId = this.ipamResourceDiscoveryId;
    final networkBorderGroup = this.networkBorderGroup;
    final networkInterfaceDescription = this.networkInterfaceDescription;
    final networkInterfaceId = this.networkInterfaceId;
    final publicIpv4PoolId = this.publicIpv4PoolId;
    final sampleTime = this.sampleTime;
    final securityGroups = this.securityGroups;
    final service = this.service;
    final serviceResource = this.serviceResource;
    final subnetId = this.subnetId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (address != null) 'address': address,
      if (addressAllocationId != null)
        'addressAllocationId': addressAllocationId,
      if (addressOwnerId != null) 'addressOwnerId': addressOwnerId,
      if (addressRegion != null) 'addressRegion': addressRegion,
      if (addressType != null) 'addressType': addressType.value,
      if (associationStatus != null)
        'associationStatus': associationStatus.value,
      if (instanceId != null) 'instanceId': instanceId,
      if (ipamResourceDiscoveryId != null)
        'ipamResourceDiscoveryId': ipamResourceDiscoveryId,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
      if (networkInterfaceDescription != null)
        'networkInterfaceDescription': networkInterfaceDescription,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (publicIpv4PoolId != null) 'publicIpv4PoolId': publicIpv4PoolId,
      if (sampleTime != null) 'sampleTime': iso8601ToJson(sampleTime),
      if (securityGroups != null) 'securityGroupSet': securityGroups,
      if (service != null) 'service': service.value,
      if (serviceResource != null) 'serviceResource': serviceResource,
      if (subnetId != null) 'subnetId': subnetId,
      if (tags != null) 'tags': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// An IPAM discovered resource CIDR. A discovered resource is a resource CIDR
/// monitored under a resource discovery. The following resources can be
/// discovered: VPCs, Public IPv4 pools, VPC subnets, and Elastic IP addresses.
/// The discovered resource CIDR is the IP address range in CIDR notation that
/// is associated with the resource.
class IpamDiscoveredResourceCidr {
  /// The percentage of IP address space in use. To convert the decimal to a
  /// percentage, multiply the decimal by 100. Note the following:
  ///
  /// <ul>
  /// <li>
  /// For resources that are VPCs, this is the percentage of IP address space in
  /// the VPC that's taken up by subnet CIDRs.
  /// </li>
  /// <li>
  /// For resources that are subnets, if the subnet has an IPv4 CIDR provisioned
  /// to it, this is the percentage of IPv4 address space in the subnet that's in
  /// use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of
  /// IPv6 address space in use is not represented. The percentage of IPv6 address
  /// space in use cannot currently be calculated.
  /// </li>
  /// <li>
  /// For resources that are public IPv4 pools, this is the percentage of IP
  /// address space in the pool that's been allocated to Elastic IP addresses
  /// (EIPs).
  /// </li>
  /// </ul>
  final double? ipUsage;

  /// The resource discovery ID.
  final String? ipamResourceDiscoveryId;

  /// The resource CIDR.
  final String? resourceCidr;

  /// The resource ID.
  final String? resourceId;

  /// The resource owner ID.
  final String? resourceOwnerId;

  /// The resource Region.
  final String? resourceRegion;

  /// The resource tags.
  final List<IpamResourceTag>? resourceTags;

  /// The resource type.
  final IpamResourceType? resourceType;

  /// The last successful resource discovery time.
  final DateTime? sampleTime;

  /// The VPC ID.
  final String? vpcId;

  IpamDiscoveredResourceCidr({
    this.ipUsage,
    this.ipamResourceDiscoveryId,
    this.resourceCidr,
    this.resourceId,
    this.resourceOwnerId,
    this.resourceRegion,
    this.resourceTags,
    this.resourceType,
    this.sampleTime,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final ipUsage = this.ipUsage;
    final ipamResourceDiscoveryId = this.ipamResourceDiscoveryId;
    final resourceCidr = this.resourceCidr;
    final resourceId = this.resourceId;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceRegion = this.resourceRegion;
    final resourceTags = this.resourceTags;
    final resourceType = this.resourceType;
    final sampleTime = this.sampleTime;
    final vpcId = this.vpcId;
    return {
      if (ipUsage != null) 'ipUsage': ipUsage,
      if (ipamResourceDiscoveryId != null)
        'ipamResourceDiscoveryId': ipamResourceDiscoveryId,
      if (resourceCidr != null) 'resourceCidr': resourceCidr,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceRegion != null) 'resourceRegion': resourceRegion,
      if (resourceTags != null) 'resourceTagSet': resourceTags,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (sampleTime != null) 'sampleTime': iso8601ToJson(sampleTime),
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum IpamDiscoveryFailureCode {
  assumeRoleFailure('assume-role-failure'),
  throttlingFailure('throttling-failure'),
  unauthorizedFailure('unauthorized-failure'),
  ;

  final String value;

  const IpamDiscoveryFailureCode(this.value);

  static IpamDiscoveryFailureCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamDiscoveryFailureCode'));
}

/// The discovery failure reason.
class IpamDiscoveryFailureReason {
  /// The discovery failure code.
  ///
  /// <ul>
  /// <li>
  /// <code>assume-role-failure</code> - IPAM could not assume the Amazon Web
  /// Services IAM service-linked role. This could be because of any of the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// SLR has not been created yet and IPAM is still creating it.
  /// </li>
  /// <li>
  /// You have opted-out of the IPAM home Region.
  /// </li>
  /// <li>
  /// Account you are using as your IPAM account has been suspended.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>throttling-failure</code> - IPAM account is already using the allotted
  /// transactions per second and IPAM is receiving a throttling error when
  /// assuming the Amazon Web Services IAM SLR.
  /// </li>
  /// <li>
  /// <code>unauthorized-failure</code> - Amazon Web Services account making the
  /// request is not authorized. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">AuthFailure</a>
  /// in the <i>Amazon Elastic Compute Cloud API Reference</i>.
  /// </li>
  /// </ul>
  final IpamDiscoveryFailureCode? code;

  /// The discovery failure message.
  final String? message;

  IpamDiscoveryFailureReason({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum IpamManagementState {
  managed('managed'),
  unmanaged('unmanaged'),
  ignored('ignored'),
  ;

  final String value;

  const IpamManagementState(this.value);

  static IpamManagementState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum IpamManagementState'));
}

/// The operating Regions for an IPAM. Operating Regions are Amazon Web Services
/// Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
/// discovers and monitors resources in the Amazon Web Services Regions you
/// select as operating Regions.
///
/// For more information about operating Regions, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
/// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
class IpamOperatingRegion {
  /// The name of the operating Region.
  final String? regionName;

  IpamOperatingRegion({
    this.regionName,
  });

  Map<String, dynamic> toJson() {
    final regionName = this.regionName;
    return {
      if (regionName != null) 'regionName': regionName,
    };
  }
}

enum IpamOverlapStatus {
  overlapping('overlapping'),
  nonoverlapping('nonoverlapping'),
  ignored('ignored'),
  ;

  final String value;

  const IpamOverlapStatus(this.value);

  static IpamOverlapStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpamOverlapStatus'));
}

/// In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools
/// enable you to organize your IP addresses according to your routing and
/// security needs. For example, if you have separate routing and security needs
/// for development and production applications, you can create a pool for each.
class IpamPool {
  /// The address family of the pool.
  final AddressFamily? addressFamily;

  /// The default netmask length for allocations added to this pool. If, for
  /// example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here,
  /// new allocations will default to 10.0.0.0/16.
  final int? allocationDefaultNetmaskLength;

  /// The maximum netmask length possible for CIDR allocations in this IPAM pool
  /// to be compliant. The maximum netmask length must be greater than the minimum
  /// netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32.
  /// Possible netmask lengths for IPv6 addresses are 0 - 128.
  final int? allocationMaxNetmaskLength;

  /// The minimum netmask length required for CIDR allocations in this IPAM pool
  /// to be compliant. The minimum netmask length must be less than the maximum
  /// netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32.
  /// Possible netmask lengths for IPv6 addresses are 0 - 128.
  final int? allocationMinNetmaskLength;

  /// Tags that are required for resources that use CIDRs from this IPAM pool.
  /// Resources that do not have these tags will not be allowed to allocate space
  /// from the pool. If the resources have their tags changed after they have
  /// allocated space or if the allocation tagging requirements are changed on the
  /// pool, the resource may be marked as noncompliant.
  final List<IpamResourceTag>? allocationResourceTags;

  /// If selected, IPAM will continuously look for resources within the CIDR range
  /// of this pool and automatically import them as allocations into your IPAM.
  /// The CIDRs that will be allocated for these resources must not already be
  /// allocated to other resources in order for the import to succeed. IPAM will
  /// import a CIDR regardless of its compliance with the pool's allocation rules,
  /// so a resource might be imported and subsequently marked as noncompliant. If
  /// IPAM discovers multiple CIDRs that overlap, IPAM will import the largest
  /// CIDR only. If IPAM discovers multiple CIDRs with matching CIDRs, IPAM will
  /// randomly import one of them only.
  ///
  /// A locale must be set on the pool for this feature to work.
  final bool? autoImport;

  /// Limits which service in Amazon Web Services that the pool can be used in.
  /// "ec2", for example, allows users to use space for Elastic IP addresses and
  /// VPCs.
  final IpamPoolAwsService? awsService;

  /// The description of the IPAM pool.
  final String? description;

  /// The ARN of the IPAM.
  final String? ipamArn;

  /// The Amazon Resource Name (ARN) of the IPAM pool.
  final String? ipamPoolArn;

  /// The ID of the IPAM pool.
  final String? ipamPoolId;

  /// The Amazon Web Services Region of the IPAM pool.
  final String? ipamRegion;

  /// The ARN of the scope of the IPAM pool.
  final String? ipamScopeArn;

  /// In IPAM, a scope is the highest-level container within IPAM. An IPAM
  /// contains two default scopes. Each scope represents the IP space for a single
  /// network. The private scope is intended for all private IP address space. The
  /// public scope is intended for all public IP address space. Scopes enable you
  /// to reuse IP addresses across multiple unconnected networks without causing
  /// IP address overlap or conflict.
  final IpamScopeType? ipamScopeType;

  /// The locale of the IPAM pool. In IPAM, the locale is the Amazon Web Services
  /// Region where you want to make an IPAM pool available for allocations. Only
  /// resources in the same Region as the locale of the pool can get IP address
  /// allocations from the pool. You can only allocate a CIDR for a VPC, for
  /// example, from an IPAM pool that shares a locale with the VPC’s Region. Note
  /// that once you choose a Locale for a pool, you cannot modify it. If you
  /// choose an Amazon Web Services Region for locale that has not been configured
  /// as an operating Region for the IPAM, you'll get an error.
  final String? locale;

  /// The Amazon Web Services account ID of the owner of the IPAM pool.
  final String? ownerId;

  /// The depth of pools in your IPAM pool. The pool depth quota is 10. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas
  /// in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final int? poolDepth;

  /// The IP address source for pools in the public scope. Only used for
  /// provisioning IP address CIDRs to pools in the public scope. Default is
  /// <code>BYOIP</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/intro-create-ipv6-pools.html">Create
  /// IPv6 pools</a> in the <i>Amazon VPC IPAM User Guide</i>. By default, you can
  /// add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool. For
  /// information on increasing the default limit, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html"> Quotas
  /// for your IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final IpamPoolPublicIpSource? publicIpSource;

  /// Determines if a pool is publicly advertisable. This option is not available
  /// for pools with AddressFamily set to <code>ipv4</code>.
  final bool? publiclyAdvertisable;

  /// The ID of the source IPAM pool. You can use this option to create an IPAM
  /// pool within an existing source pool.
  final String? sourceIpamPoolId;

  /// The resource used to provision CIDRs to a resource planning pool.
  final IpamPoolSourceResource? sourceResource;

  /// The state of the IPAM pool.
  final IpamPoolState? state;

  /// The state message.
  final String? stateMessage;

  /// The key/value combination of a tag assigned to the resource. Use the tag key
  /// in the filter name and the tag value as the filter value. For example, to
  /// find all resources that have a tag with the key <code>Owner</code> and the
  /// value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name
  /// and <code>TeamA</code> for the filter value.
  final List<Tag>? tags;

  IpamPool({
    this.addressFamily,
    this.allocationDefaultNetmaskLength,
    this.allocationMaxNetmaskLength,
    this.allocationMinNetmaskLength,
    this.allocationResourceTags,
    this.autoImport,
    this.awsService,
    this.description,
    this.ipamArn,
    this.ipamPoolArn,
    this.ipamPoolId,
    this.ipamRegion,
    this.ipamScopeArn,
    this.ipamScopeType,
    this.locale,
    this.ownerId,
    this.poolDepth,
    this.publicIpSource,
    this.publiclyAdvertisable,
    this.sourceIpamPoolId,
    this.sourceResource,
    this.state,
    this.stateMessage,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final addressFamily = this.addressFamily;
    final allocationDefaultNetmaskLength = this.allocationDefaultNetmaskLength;
    final allocationMaxNetmaskLength = this.allocationMaxNetmaskLength;
    final allocationMinNetmaskLength = this.allocationMinNetmaskLength;
    final allocationResourceTags = this.allocationResourceTags;
    final autoImport = this.autoImport;
    final awsService = this.awsService;
    final description = this.description;
    final ipamArn = this.ipamArn;
    final ipamPoolArn = this.ipamPoolArn;
    final ipamPoolId = this.ipamPoolId;
    final ipamRegion = this.ipamRegion;
    final ipamScopeArn = this.ipamScopeArn;
    final ipamScopeType = this.ipamScopeType;
    final locale = this.locale;
    final ownerId = this.ownerId;
    final poolDepth = this.poolDepth;
    final publicIpSource = this.publicIpSource;
    final publiclyAdvertisable = this.publiclyAdvertisable;
    final sourceIpamPoolId = this.sourceIpamPoolId;
    final sourceResource = this.sourceResource;
    final state = this.state;
    final stateMessage = this.stateMessage;
    final tags = this.tags;
    return {
      if (addressFamily != null) 'addressFamily': addressFamily.value,
      if (allocationDefaultNetmaskLength != null)
        'allocationDefaultNetmaskLength': allocationDefaultNetmaskLength,
      if (allocationMaxNetmaskLength != null)
        'allocationMaxNetmaskLength': allocationMaxNetmaskLength,
      if (allocationMinNetmaskLength != null)
        'allocationMinNetmaskLength': allocationMinNetmaskLength,
      if (allocationResourceTags != null)
        'allocationResourceTagSet': allocationResourceTags,
      if (autoImport != null) 'autoImport': autoImport,
      if (awsService != null) 'awsService': awsService.value,
      if (description != null) 'description': description,
      if (ipamArn != null) 'ipamArn': ipamArn,
      if (ipamPoolArn != null) 'ipamPoolArn': ipamPoolArn,
      if (ipamPoolId != null) 'ipamPoolId': ipamPoolId,
      if (ipamRegion != null) 'ipamRegion': ipamRegion,
      if (ipamScopeArn != null) 'ipamScopeArn': ipamScopeArn,
      if (ipamScopeType != null) 'ipamScopeType': ipamScopeType.value,
      if (locale != null) 'locale': locale,
      if (ownerId != null) 'ownerId': ownerId,
      if (poolDepth != null) 'poolDepth': poolDepth,
      if (publicIpSource != null) 'publicIpSource': publicIpSource.value,
      if (publiclyAdvertisable != null)
        'publiclyAdvertisable': publiclyAdvertisable,
      if (sourceIpamPoolId != null) 'sourceIpamPoolId': sourceIpamPoolId,
      if (sourceResource != null) 'sourceResource': sourceResource,
      if (state != null) 'state': state.value,
      if (stateMessage != null) 'stateMessage': stateMessage,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// In IPAM, an allocation is a CIDR assignment from an IPAM pool to another
/// IPAM pool or to a resource.
class IpamPoolAllocation {
  /// The CIDR for the allocation. A CIDR is a representation of an IP address and
  /// its associated network mask (or netmask) and refers to a range of IP
  /// addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR
  /// example is <code>2001:DB8::/32</code>.
  final String? cidr;

  /// A description of the pool allocation.
  final String? description;

  /// The ID of an allocation.
  final String? ipamPoolAllocationId;

  /// The ID of the resource.
  final String? resourceId;

  /// The owner of the resource.
  final String? resourceOwner;

  /// The Amazon Web Services Region of the resource.
  final String? resourceRegion;

  /// The type of the resource.
  final IpamPoolAllocationResourceType? resourceType;

  IpamPoolAllocation({
    this.cidr,
    this.description,
    this.ipamPoolAllocationId,
    this.resourceId,
    this.resourceOwner,
    this.resourceRegion,
    this.resourceType,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final description = this.description;
    final ipamPoolAllocationId = this.ipamPoolAllocationId;
    final resourceId = this.resourceId;
    final resourceOwner = this.resourceOwner;
    final resourceRegion = this.resourceRegion;
    final resourceType = this.resourceType;
    return {
      if (cidr != null) 'cidr': cidr,
      if (description != null) 'description': description,
      if (ipamPoolAllocationId != null)
        'ipamPoolAllocationId': ipamPoolAllocationId,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwner != null) 'resourceOwner': resourceOwner,
      if (resourceRegion != null) 'resourceRegion': resourceRegion,
      if (resourceType != null) 'resourceType': resourceType.value,
    };
  }
}

enum IpamPoolAllocationResourceType {
  ipamPool('ipam-pool'),
  vpc('vpc'),
  ec2PublicIpv4Pool('ec2-public-ipv4-pool'),
  custom('custom'),
  subnet('subnet'),
  ;

  final String value;

  const IpamPoolAllocationResourceType(this.value);

  static IpamPoolAllocationResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamPoolAllocationResourceType'));
}

enum IpamPoolAwsService {
  ec2('ec2'),
  ;

  final String value;

  const IpamPoolAwsService(this.value);

  static IpamPoolAwsService fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum IpamPoolAwsService'));
}

/// A CIDR provisioned to an IPAM pool.
class IpamPoolCidr {
  /// The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP
  /// address and its associated network mask (or netmask) and refers to a range
  /// of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6
  /// CIDR example is <code>2001:DB8::/32</code>.
  final String? cidr;

  /// Details related to why an IPAM pool CIDR failed to be provisioned.
  final IpamPoolCidrFailureReason? failureReason;

  /// The IPAM pool CIDR ID.
  final String? ipamPoolCidrId;

  /// The netmask length of the CIDR you'd like to provision to a pool. Can be
  /// used for provisioning Amazon-provided IPv6 CIDRs to top-level pools and for
  /// provisioning CIDRs to pools with source pools. Cannot be used to provision
  /// BYOIP CIDRs to top-level pools. "NetmaskLength" or "Cidr" is required.
  final int? netmaskLength;

  /// The state of the CIDR.
  final IpamPoolCidrState? state;

  IpamPoolCidr({
    this.cidr,
    this.failureReason,
    this.ipamPoolCidrId,
    this.netmaskLength,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final failureReason = this.failureReason;
    final ipamPoolCidrId = this.ipamPoolCidrId;
    final netmaskLength = this.netmaskLength;
    final state = this.state;
    return {
      if (cidr != null) 'cidr': cidr,
      if (failureReason != null) 'failureReason': failureReason,
      if (ipamPoolCidrId != null) 'ipamPoolCidrId': ipamPoolCidrId,
      if (netmaskLength != null) 'netmaskLength': netmaskLength,
      if (state != null) 'state': state.value,
    };
  }
}

enum IpamPoolCidrFailureCode {
  cidrNotAvailable('cidr-not-available'),
  limitExceeded('limit-exceeded'),
  ;

  final String value;

  const IpamPoolCidrFailureCode(this.value);

  static IpamPoolCidrFailureCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamPoolCidrFailureCode'));
}

/// Details related to why an IPAM pool CIDR failed to be provisioned.
class IpamPoolCidrFailureReason {
  /// An error code related to why an IPAM pool CIDR failed to be provisioned.
  final IpamPoolCidrFailureCode? code;

  /// A message related to why an IPAM pool CIDR failed to be provisioned.
  final String? message;

  IpamPoolCidrFailureReason({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum IpamPoolCidrState {
  pendingProvision('pending-provision'),
  provisioned('provisioned'),
  failedProvision('failed-provision'),
  pendingDeprovision('pending-deprovision'),
  deprovisioned('deprovisioned'),
  failedDeprovision('failed-deprovision'),
  pendingImport('pending-import'),
  failedImport('failed-import'),
  ;

  final String value;

  const IpamPoolCidrState(this.value);

  static IpamPoolCidrState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpamPoolCidrState'));
}

enum IpamPoolPublicIpSource {
  amazon('amazon'),
  byoip('byoip'),
  ;

  final String value;

  const IpamPoolPublicIpSource(this.value);

  static IpamPoolPublicIpSource fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamPoolPublicIpSource'));
}

/// The resource used to provision CIDRs to a resource planning pool.
class IpamPoolSourceResource {
  /// The source resource ID.
  final String? resourceId;

  /// The source resource owner.
  final String? resourceOwner;

  /// The source resource Region.
  final String? resourceRegion;

  /// The source resource type.
  final IpamPoolSourceResourceType? resourceType;

  IpamPoolSourceResource({
    this.resourceId,
    this.resourceOwner,
    this.resourceRegion,
    this.resourceType,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceOwner = this.resourceOwner;
    final resourceRegion = this.resourceRegion;
    final resourceType = this.resourceType;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwner != null) 'resourceOwner': resourceOwner,
      if (resourceRegion != null) 'resourceRegion': resourceRegion,
      if (resourceType != null) 'resourceType': resourceType.value,
    };
  }
}

/// The resource used to provision CIDRs to a resource planning pool.
class IpamPoolSourceResourceRequest {
  /// The source resource ID.
  final String? resourceId;

  /// The source resource owner.
  final String? resourceOwner;

  /// The source resource Region.
  final String? resourceRegion;

  /// The source resource type.
  final IpamPoolSourceResourceType? resourceType;

  IpamPoolSourceResourceRequest({
    this.resourceId,
    this.resourceOwner,
    this.resourceRegion,
    this.resourceType,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceOwner = this.resourceOwner;
    final resourceRegion = this.resourceRegion;
    final resourceType = this.resourceType;
    return {
      if (resourceId != null) 'ResourceId': resourceId,
      if (resourceOwner != null) 'ResourceOwner': resourceOwner,
      if (resourceRegion != null) 'ResourceRegion': resourceRegion,
      if (resourceType != null) 'ResourceType': resourceType.value,
    };
  }
}

enum IpamPoolSourceResourceType {
  vpc('vpc'),
  ;

  final String value;

  const IpamPoolSourceResourceType(this.value);

  static IpamPoolSourceResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamPoolSourceResourceType'));
}

enum IpamPoolState {
  createInProgress('create-in-progress'),
  createComplete('create-complete'),
  createFailed('create-failed'),
  modifyInProgress('modify-in-progress'),
  modifyComplete('modify-complete'),
  modifyFailed('modify-failed'),
  deleteInProgress('delete-in-progress'),
  deleteComplete('delete-complete'),
  deleteFailed('delete-failed'),
  isolateInProgress('isolate-in-progress'),
  isolateComplete('isolate-complete'),
  restoreInProgress('restore-in-progress'),
  ;

  final String value;

  const IpamPoolState(this.value);

  static IpamPoolState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpamPoolState'));
}

enum IpamPublicAddressAssociationStatus {
  associated('associated'),
  disassociated('disassociated'),
  ;

  final String value;

  const IpamPublicAddressAssociationStatus(this.value);

  static IpamPublicAddressAssociationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamPublicAddressAssociationStatus'));
}

enum IpamPublicAddressAwsService {
  natGateway('nat-gateway'),
  databaseMigrationService('database-migration-service'),
  redshift('redshift'),
  elasticContainerService('elastic-container-service'),
  relationalDatabaseService('relational-database-service'),
  siteToSiteVpn('site-to-site-vpn'),
  loadBalancer('load-balancer'),
  globalAccelerator('global-accelerator'),
  other('other'),
  ;

  final String value;

  const IpamPublicAddressAwsService(this.value);

  static IpamPublicAddressAwsService fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamPublicAddressAwsService'));
}

/// The security group that the resource with the public IP address is in.
class IpamPublicAddressSecurityGroup {
  /// The security group's ID.
  final String? groupId;

  /// The security group's name.
  final String? groupName;

  IpamPublicAddressSecurityGroup({
    this.groupId,
    this.groupName,
  });

  Map<String, dynamic> toJson() {
    final groupId = this.groupId;
    final groupName = this.groupName;
    return {
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
    };
  }
}

/// A tag for a public IP address discovered by IPAM.
class IpamPublicAddressTag {
  /// The tag's key.
  final String? key;

  /// The tag's value.
  final String? value;

  IpamPublicAddressTag({
    this.key,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'key': key,
      if (value != null) 'value': value,
    };
  }
}

/// Tags for a public IP address discovered by IPAM.
class IpamPublicAddressTags {
  /// Tags for an Elastic IP address.
  final List<IpamPublicAddressTag>? eipTags;

  IpamPublicAddressTags({
    this.eipTags,
  });

  Map<String, dynamic> toJson() {
    final eipTags = this.eipTags;
    return {
      if (eipTags != null) 'eipTagSet': eipTags,
    };
  }
}

enum IpamPublicAddressType {
  serviceManagedIp('service-managed-ip'),
  serviceManagedByoip('service-managed-byoip'),
  amazonOwnedEip('amazon-owned-eip'),
  byoip('byoip'),
  ec2PublicIp('ec2-public-ip'),
  ;

  final String value;

  const IpamPublicAddressType(this.value);

  static IpamPublicAddressType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum IpamPublicAddressType'));
}

/// The CIDR for an IPAM resource.
class IpamResourceCidr {
  /// The compliance status of the IPAM resource. For more information on
  /// compliance statuses, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor
  /// CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final IpamComplianceStatus? complianceStatus;

  /// The percentage of IP address space in use. To convert the decimal to a
  /// percentage, multiply the decimal by 100. Note the following:
  ///
  /// <ul>
  /// <li>
  /// For resources that are VPCs, this is the percentage of IP address space in
  /// the VPC that's taken up by subnet CIDRs.
  /// </li>
  /// <li>
  /// For resources that are subnets, if the subnet has an IPv4 CIDR provisioned
  /// to it, this is the percentage of IPv4 address space in the subnet that's in
  /// use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of
  /// IPv6 address space in use is not represented. The percentage of IPv6 address
  /// space in use cannot currently be calculated.
  /// </li>
  /// <li>
  /// For resources that are public IPv4 pools, this is the percentage of IP
  /// address space in the pool that's been allocated to Elastic IP addresses
  /// (EIPs).
  /// </li>
  /// </ul>
  final double? ipUsage;

  /// The IPAM ID for an IPAM resource.
  final String? ipamId;

  /// The pool ID for an IPAM resource.
  final String? ipamPoolId;

  /// The scope ID for an IPAM resource.
  final String? ipamScopeId;

  /// The management state of the resource. For more information about management
  /// states, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor
  /// CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final IpamManagementState? managementState;

  /// The overlap status of an IPAM resource. The overlap status tells you if the
  /// CIDR for a resource overlaps with another CIDR in the scope. For more
  /// information on overlap statuses, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor
  /// CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
  final IpamOverlapStatus? overlapStatus;

  /// The CIDR for an IPAM resource.
  final String? resourceCidr;

  /// The ID of an IPAM resource.
  final String? resourceId;

  /// The name of an IPAM resource.
  final String? resourceName;

  /// The Amazon Web Services account number of the owner of an IPAM resource.
  final String? resourceOwnerId;

  /// The Amazon Web Services Region for an IPAM resource.
  final String? resourceRegion;

  /// The tags for an IPAM resource.
  final List<IpamResourceTag>? resourceTags;

  /// The type of IPAM resource.
  final IpamResourceType? resourceType;

  /// The ID of a VPC.
  final String? vpcId;

  IpamResourceCidr({
    this.complianceStatus,
    this.ipUsage,
    this.ipamId,
    this.ipamPoolId,
    this.ipamScopeId,
    this.managementState,
    this.overlapStatus,
    this.resourceCidr,
    this.resourceId,
    this.resourceName,
    this.resourceOwnerId,
    this.resourceRegion,
    this.resourceTags,
    this.resourceType,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final complianceStatus = this.complianceStatus;
    final ipUsage = this.ipUsage;
    final ipamId = this.ipamId;
    final ipamPoolId = this.ipamPoolId;
    final ipamScopeId = this.ipamScopeId;
    final managementState = this.managementState;
    final overlapStatus = this.overlapStatus;
    final resourceCidr = this.resourceCidr;
    final resourceId = this.resourceId;
    final resourceName = this.resourceName;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceRegion = this.resourceRegion;
    final resourceTags = this.resourceTags;
    final resourceType = this.resourceType;
    final vpcId = this.vpcId;
    return {
      if (complianceStatus != null) 'complianceStatus': complianceStatus.value,
      if (ipUsage != null) 'ipUsage': ipUsage,
      if (ipamId != null) 'ipamId': ipamId,
      if (ipamPoolId != null) 'ipamPoolId': ipamPoolId,
      if (ipamScopeId != null) 'ipamScopeId': ipamScopeId,
      if (managementState != null) 'managementState': managementState.value,
      if (overlapStatus != null) 'overlapStatus': overlapStatus.value,
      if (resourceCidr != null) 'resourceCidr': resourceCidr,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceName != null) 'resourceName': resourceName,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceRegion != null) 'resourceRegion': resourceRegion,
      if (resourceTags != null) 'resourceTagSet': resourceTags,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// A resource discovery is an IPAM component that enables IPAM to manage and
/// monitor resources that belong to the owning account.
class IpamResourceDiscovery {
  /// The resource discovery description.
  final String? description;

  /// The resource discovery Amazon Resource Name (ARN).
  final String? ipamResourceDiscoveryArn;

  /// The resource discovery ID.
  final String? ipamResourceDiscoveryId;

  /// The resource discovery Region.
  final String? ipamResourceDiscoveryRegion;

  /// Defines if the resource discovery is the default. The default resource
  /// discovery is the resource discovery automatically created when you create an
  /// IPAM.
  final bool? isDefault;

  /// The operating Regions for the resource discovery. Operating Regions are
  /// Amazon Web Services Regions where the IPAM is allowed to manage IP address
  /// CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services
  /// Regions you select as operating Regions.
  final List<IpamOperatingRegion>? operatingRegions;

  /// The ID of the owner.
  final String? ownerId;

  /// The lifecycle state of the resource discovery.
  ///
  /// <ul>
  /// <li>
  /// <code>create-in-progress</code> - Resource discovery is being created.
  /// </li>
  /// <li>
  /// <code>create-complete</code> - Resource discovery creation is complete.
  /// </li>
  /// <li>
  /// <code>create-failed</code> - Resource discovery creation has failed.
  /// </li>
  /// <li>
  /// <code>modify-in-progress</code> - Resource discovery is being modified.
  /// </li>
  /// <li>
  /// <code>modify-complete</code> - Resource discovery modification is complete.
  /// </li>
  /// <li>
  /// <code>modify-failed</code> - Resource discovery modification has failed.
  /// </li>
  /// <li>
  /// <code>delete-in-progress</code> - Resource discovery is being deleted.
  /// </li>
  /// <li>
  /// <code>delete-complete</code> - Resource discovery deletion is complete.
  /// </li>
  /// <li>
  /// <code>delete-failed</code> - Resource discovery deletion has failed.
  /// </li>
  /// <li>
  /// <code>isolate-in-progress</code> - Amazon Web Services account that created
  /// the resource discovery has been removed and the resource discovery is being
  /// isolated.
  /// </li>
  /// <li>
  /// <code>isolate-complete</code> - Resource discovery isolation is complete.
  /// </li>
  /// <li>
  /// <code>restore-in-progress</code> - Amazon Web Services account that created
  /// the resource discovery and was isolated has been restored.
  /// </li>
  /// </ul>
  final IpamResourceDiscoveryState? state;

  /// A tag is a label that you assign to an Amazon Web Services resource. Each
  /// tag consists of a key and an optional value. You can use tags to search and
  /// filter your resources or track your Amazon Web Services costs.
  final List<Tag>? tags;

  IpamResourceDiscovery({
    this.description,
    this.ipamResourceDiscoveryArn,
    this.ipamResourceDiscoveryId,
    this.ipamResourceDiscoveryRegion,
    this.isDefault,
    this.operatingRegions,
    this.ownerId,
    this.state,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final ipamResourceDiscoveryArn = this.ipamResourceDiscoveryArn;
    final ipamResourceDiscoveryId = this.ipamResourceDiscoveryId;
    final ipamResourceDiscoveryRegion = this.ipamResourceDiscoveryRegion;
    final isDefault = this.isDefault;
    final operatingRegions = this.operatingRegions;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (ipamResourceDiscoveryArn != null)
        'ipamResourceDiscoveryArn': ipamResourceDiscoveryArn,
      if (ipamResourceDiscoveryId != null)
        'ipamResourceDiscoveryId': ipamResourceDiscoveryId,
      if (ipamResourceDiscoveryRegion != null)
        'ipamResourceDiscoveryRegion': ipamResourceDiscoveryRegion,
      if (isDefault != null) 'isDefault': isDefault,
      if (operatingRegions != null) 'operatingRegionSet': operatingRegions,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// An IPAM resource discovery association. An associated resource discovery is
/// a resource discovery that has been associated with an IPAM. IPAM aggregates
/// the resource CIDRs discovered by the associated resource discovery.
class IpamResourceDiscoveryAssociation {
  /// The IPAM ARN.
  final String? ipamArn;

  /// The IPAM ID.
  final String? ipamId;

  /// The IPAM home Region.
  final String? ipamRegion;

  /// The resource discovery association Amazon Resource Name (ARN).
  final String? ipamResourceDiscoveryAssociationArn;

  /// The resource discovery association ID.
  final String? ipamResourceDiscoveryAssociationId;

  /// The resource discovery ID.
  final String? ipamResourceDiscoveryId;

  /// Defines if the resource discovery is the default. When you create an IPAM, a
  /// default resource discovery is created for your IPAM and it's associated with
  /// your IPAM.
  final bool? isDefault;

  /// The Amazon Web Services account ID of the resource discovery owner.
  final String? ownerId;

  /// The resource discovery status.
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - Connection or permissions required to read the results
  /// of the resource discovery are intact.
  /// </li>
  /// <li>
  /// <code>not-found</code> - Connection or permissions required to read the
  /// results of the resource discovery are broken. This may happen if the owner
  /// of the resource discovery stopped sharing it or deleted the resource
  /// discovery. Verify the resource discovery still exists and the Amazon Web
  /// Services RAM resource share is still intact.
  /// </li>
  /// </ul>
  final IpamAssociatedResourceDiscoveryStatus? resourceDiscoveryStatus;

  /// The lifecycle state of the association when you associate or disassociate a
  /// resource discovery.
  ///
  /// <ul>
  /// <li>
  /// <code>associate-in-progress</code> - Resource discovery is being associated.
  /// </li>
  /// <li>
  /// <code>associate-complete</code> - Resource discovery association is
  /// complete.
  /// </li>
  /// <li>
  /// <code>associate-failed</code> - Resource discovery association has failed.
  /// </li>
  /// <li>
  /// <code>disassociate-in-progress</code> - Resource discovery is being
  /// disassociated.
  /// </li>
  /// <li>
  /// <code>disassociate-complete</code> - Resource discovery disassociation is
  /// complete.
  /// </li>
  /// <li>
  /// <code>disassociate-failed </code> - Resource discovery disassociation has
  /// failed.
  /// </li>
  /// <li>
  /// <code>isolate-in-progress</code> - Amazon Web Services account that created
  /// the resource discovery association has been removed and the resource
  /// discovery associatation is being isolated.
  /// </li>
  /// <li>
  /// <code>isolate-complete</code> - Resource discovery isolation is complete..
  /// </li>
  /// <li>
  /// <code>restore-in-progress</code> - Resource discovery is being restored.
  /// </li>
  /// </ul>
  final IpamResourceDiscoveryAssociationState? state;

  /// A tag is a label that you assign to an Amazon Web Services resource. Each
  /// tag consists of a key and an optional value. You can use tags to search and
  /// filter your resources or track your Amazon Web Services costs.
  final List<Tag>? tags;

  IpamResourceDiscoveryAssociation({
    this.ipamArn,
    this.ipamId,
    this.ipamRegion,
    this.ipamResourceDiscoveryAssociationArn,
    this.ipamResourceDiscoveryAssociationId,
    this.ipamResourceDiscoveryId,
    this.isDefault,
    this.ownerId,
    this.resourceDiscoveryStatus,
    this.state,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final ipamArn = this.ipamArn;
    final ipamId = this.ipamId;
    final ipamRegion = this.ipamRegion;
    final ipamResourceDiscoveryAssociationArn =
        this.ipamResourceDiscoveryAssociationArn;
    final ipamResourceDiscoveryAssociationId =
        this.ipamResourceDiscoveryAssociationId;
    final ipamResourceDiscoveryId = this.ipamResourceDiscoveryId;
    final isDefault = this.isDefault;
    final ownerId = this.ownerId;
    final resourceDiscoveryStatus = this.resourceDiscoveryStatus;
    final state = this.state;
    final tags = this.tags;
    return {
      if (ipamArn != null) 'ipamArn': ipamArn,
      if (ipamId != null) 'ipamId': ipamId,
      if (ipamRegion != null) 'ipamRegion': ipamRegion,
      if (ipamResourceDiscoveryAssociationArn != null)
        'ipamResourceDiscoveryAssociationArn':
            ipamResourceDiscoveryAssociationArn,
      if (ipamResourceDiscoveryAssociationId != null)
        'ipamResourceDiscoveryAssociationId':
            ipamResourceDiscoveryAssociationId,
      if (ipamResourceDiscoveryId != null)
        'ipamResourceDiscoveryId': ipamResourceDiscoveryId,
      if (isDefault != null) 'isDefault': isDefault,
      if (ownerId != null) 'ownerId': ownerId,
      if (resourceDiscoveryStatus != null)
        'resourceDiscoveryStatus': resourceDiscoveryStatus.value,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum IpamResourceDiscoveryAssociationState {
  associateInProgress('associate-in-progress'),
  associateComplete('associate-complete'),
  associateFailed('associate-failed'),
  disassociateInProgress('disassociate-in-progress'),
  disassociateComplete('disassociate-complete'),
  disassociateFailed('disassociate-failed'),
  isolateInProgress('isolate-in-progress'),
  isolateComplete('isolate-complete'),
  restoreInProgress('restore-in-progress'),
  ;

  final String value;

  const IpamResourceDiscoveryAssociationState(this.value);

  static IpamResourceDiscoveryAssociationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamResourceDiscoveryAssociationState'));
}

enum IpamResourceDiscoveryState {
  createInProgress('create-in-progress'),
  createComplete('create-complete'),
  createFailed('create-failed'),
  modifyInProgress('modify-in-progress'),
  modifyComplete('modify-complete'),
  modifyFailed('modify-failed'),
  deleteInProgress('delete-in-progress'),
  deleteComplete('delete-complete'),
  deleteFailed('delete-failed'),
  isolateInProgress('isolate-in-progress'),
  isolateComplete('isolate-complete'),
  restoreInProgress('restore-in-progress'),
  ;

  final String value;

  const IpamResourceDiscoveryState(this.value);

  static IpamResourceDiscoveryState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum IpamResourceDiscoveryState'));
}

/// The key/value combination of a tag assigned to the resource. Use the tag key
/// in the filter name and the tag value as the filter value. For example, to
/// find all resources that have a tag with the key <code>Owner</code> and the
/// value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name
/// and <code>TeamA</code> for the filter value.
class IpamResourceTag {
  /// The key of a tag assigned to the resource. Use this filter to find all
  /// resources assigned a tag with a specific key, regardless of the tag value.
  final String? key;

  /// The value of the tag.
  final String? value;

  IpamResourceTag({
    this.key,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'key': key,
      if (value != null) 'value': value,
    };
  }
}

enum IpamResourceType {
  vpc('vpc'),
  subnet('subnet'),
  eip('eip'),
  publicIpv4Pool('public-ipv4-pool'),
  ipv6Pool('ipv6-pool'),
  eni('eni'),
  ;

  final String value;

  const IpamResourceType(this.value);

  static IpamResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpamResourceType'));
}

/// In IPAM, a scope is the highest-level container within IPAM. An IPAM
/// contains two default scopes. Each scope represents the IP space for a single
/// network. The private scope is intended for all private IP address space. The
/// public scope is intended for all public IP address space. Scopes enable you
/// to reuse IP addresses across multiple unconnected networks without causing
/// IP address overlap or conflict.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/how-it-works-ipam.html">How
/// IPAM works</a> in the <i>Amazon VPC IPAM User Guide</i>.
class IpamScope {
  /// The description of the scope.
  final String? description;

  /// The ARN of the IPAM.
  final String? ipamArn;

  /// The Amazon Web Services Region of the IPAM scope.
  final String? ipamRegion;

  /// The Amazon Resource Name (ARN) of the scope.
  final String? ipamScopeArn;

  /// The ID of the scope.
  final String? ipamScopeId;

  /// The type of the scope.
  final IpamScopeType? ipamScopeType;

  /// Defines if the scope is the default scope or not.
  final bool? isDefault;

  /// The Amazon Web Services account ID of the owner of the scope.
  final String? ownerId;

  /// The number of pools in the scope.
  final int? poolCount;

  /// The state of the IPAM scope.
  final IpamScopeState? state;

  /// The key/value combination of a tag assigned to the resource. Use the tag key
  /// in the filter name and the tag value as the filter value. For example, to
  /// find all resources that have a tag with the key <code>Owner</code> and the
  /// value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name
  /// and <code>TeamA</code> for the filter value.
  final List<Tag>? tags;

  IpamScope({
    this.description,
    this.ipamArn,
    this.ipamRegion,
    this.ipamScopeArn,
    this.ipamScopeId,
    this.ipamScopeType,
    this.isDefault,
    this.ownerId,
    this.poolCount,
    this.state,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final ipamArn = this.ipamArn;
    final ipamRegion = this.ipamRegion;
    final ipamScopeArn = this.ipamScopeArn;
    final ipamScopeId = this.ipamScopeId;
    final ipamScopeType = this.ipamScopeType;
    final isDefault = this.isDefault;
    final ownerId = this.ownerId;
    final poolCount = this.poolCount;
    final state = this.state;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (ipamArn != null) 'ipamArn': ipamArn,
      if (ipamRegion != null) 'ipamRegion': ipamRegion,
      if (ipamScopeArn != null) 'ipamScopeArn': ipamScopeArn,
      if (ipamScopeId != null) 'ipamScopeId': ipamScopeId,
      if (ipamScopeType != null) 'ipamScopeType': ipamScopeType.value,
      if (isDefault != null) 'isDefault': isDefault,
      if (ownerId != null) 'ownerId': ownerId,
      if (poolCount != null) 'poolCount': poolCount,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum IpamScopeState {
  createInProgress('create-in-progress'),
  createComplete('create-complete'),
  createFailed('create-failed'),
  modifyInProgress('modify-in-progress'),
  modifyComplete('modify-complete'),
  modifyFailed('modify-failed'),
  deleteInProgress('delete-in-progress'),
  deleteComplete('delete-complete'),
  deleteFailed('delete-failed'),
  isolateInProgress('isolate-in-progress'),
  isolateComplete('isolate-complete'),
  restoreInProgress('restore-in-progress'),
  ;

  final String value;

  const IpamScopeState(this.value);

  static IpamScopeState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpamScopeState'));
}

enum IpamScopeType {
  public('public'),
  private('private'),
  ;

  final String value;

  const IpamScopeType(this.value);

  static IpamScopeType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IpamScopeType'));
}

enum IpamState {
  createInProgress('create-in-progress'),
  createComplete('create-complete'),
  createFailed('create-failed'),
  modifyInProgress('modify-in-progress'),
  modifyComplete('modify-complete'),
  modifyFailed('modify-failed'),
  deleteInProgress('delete-in-progress'),
  deleteComplete('delete-complete'),
  deleteFailed('delete-failed'),
  isolateInProgress('isolate-in-progress'),
  isolateComplete('isolate-complete'),
  restoreInProgress('restore-in-progress'),
  ;

  final String value;

  const IpamState(this.value);

  static IpamState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum IpamState'));
}

enum IpamTier {
  free('free'),
  advanced('advanced'),
  ;

  final String value;

  const IpamTier(this.value);

  static IpamTier fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum IpamTier'));
}

/// Describes an IPv4 prefix.
class Ipv4PrefixSpecification {
  /// The IPv4 prefix. For information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
  /// Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  final String? ipv4Prefix;

  Ipv4PrefixSpecification({
    this.ipv4Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv4Prefix = this.ipv4Prefix;
    return {
      if (ipv4Prefix != null) 'ipv4Prefix': ipv4Prefix,
    };
  }
}

/// Describes the IPv4 prefix option for a network interface.
class Ipv4PrefixSpecificationRequest {
  /// The IPv4 prefix. For information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
  /// Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  final String? ipv4Prefix;

  Ipv4PrefixSpecificationRequest({
    this.ipv4Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv4Prefix = this.ipv4Prefix;
    return {
      if (ipv4Prefix != null) 'Ipv4Prefix': ipv4Prefix,
    };
  }
}

/// Information about the IPv4 delegated prefixes assigned to a network
/// interface.
class Ipv4PrefixSpecificationResponse {
  /// The IPv4 delegated prefixes assigned to the network interface.
  final String? ipv4Prefix;

  Ipv4PrefixSpecificationResponse({
    this.ipv4Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv4Prefix = this.ipv4Prefix;
    return {
      if (ipv4Prefix != null) 'ipv4Prefix': ipv4Prefix,
    };
  }
}

/// Describes an IPv6 CIDR block association.
class Ipv6CidrAssociation {
  /// The resource that's associated with the IPv6 CIDR block.
  final String? associatedResource;

  /// The IPv6 CIDR block.
  final String? ipv6Cidr;

  Ipv6CidrAssociation({
    this.associatedResource,
    this.ipv6Cidr,
  });

  Map<String, dynamic> toJson() {
    final associatedResource = this.associatedResource;
    final ipv6Cidr = this.ipv6Cidr;
    return {
      if (associatedResource != null) 'associatedResource': associatedResource,
      if (ipv6Cidr != null) 'ipv6Cidr': ipv6Cidr,
    };
  }
}

/// Describes an IPv6 CIDR block.
class Ipv6CidrBlock {
  /// The IPv6 CIDR block.
  final String? ipv6CidrBlock;

  Ipv6CidrBlock({
    this.ipv6CidrBlock,
  });

  Map<String, dynamic> toJson() {
    final ipv6CidrBlock = this.ipv6CidrBlock;
    return {
      if (ipv6CidrBlock != null) 'ipv6CidrBlock': ipv6CidrBlock,
    };
  }
}

/// Describes an IPv6 address pool.
class Ipv6Pool {
  /// The description for the address pool.
  final String? description;

  /// The CIDR blocks for the address pool.
  final List<PoolCidrBlock>? poolCidrBlocks;

  /// The ID of the address pool.
  final String? poolId;

  /// Any tags for the address pool.
  final List<Tag>? tags;

  Ipv6Pool({
    this.description,
    this.poolCidrBlocks,
    this.poolId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final poolCidrBlocks = this.poolCidrBlocks;
    final poolId = this.poolId;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (poolCidrBlocks != null) 'poolCidrBlockSet': poolCidrBlocks,
      if (poolId != null) 'poolId': poolId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes the IPv6 prefix.
class Ipv6PrefixSpecification {
  /// The IPv6 prefix.
  final String? ipv6Prefix;

  Ipv6PrefixSpecification({
    this.ipv6Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv6Prefix = this.ipv6Prefix;
    return {
      if (ipv6Prefix != null) 'ipv6Prefix': ipv6Prefix,
    };
  }
}

/// Describes the IPv4 prefix option for a network interface.
class Ipv6PrefixSpecificationRequest {
  /// The IPv6 prefix.
  final String? ipv6Prefix;

  Ipv6PrefixSpecificationRequest({
    this.ipv6Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv6Prefix = this.ipv6Prefix;
    return {
      if (ipv6Prefix != null) 'Ipv6Prefix': ipv6Prefix,
    };
  }
}

/// Information about the IPv6 delegated prefixes assigned to a network
/// interface.
class Ipv6PrefixSpecificationResponse {
  /// The IPv6 delegated prefixes assigned to the network interface.
  final String? ipv6Prefix;

  Ipv6PrefixSpecificationResponse({
    this.ipv6Prefix,
  });

  Map<String, dynamic> toJson() {
    final ipv6Prefix = this.ipv6Prefix;
    return {
      if (ipv6Prefix != null) 'ipv6Prefix': ipv6Prefix,
    };
  }
}

/// Describes an IPv6 address range.
class Ipv6Range {
  /// The IPv6 address range. You can either specify a CIDR block or a source
  /// security group, not both. To specify a single IPv6 address, use the /128
  /// prefix length.
  final String? cidrIpv6;

  /// A description for the security group rule that references this IPv6 address
  /// range.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
  final String? description;

  Ipv6Range({
    this.cidrIpv6,
    this.description,
  });

  Map<String, dynamic> toJson() {
    final cidrIpv6 = this.cidrIpv6;
    final description = this.description;
    return {
      if (cidrIpv6 != null) 'cidrIpv6': cidrIpv6,
      if (description != null) 'description': description,
    };
  }
}

enum Ipv6SupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const Ipv6SupportValue(this.value);

  static Ipv6SupportValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum Ipv6SupportValue'));
}

enum KeyFormat {
  pem('pem'),
  ppk('ppk'),
  ;

  final String value;

  const KeyFormat(this.value);

  static KeyFormat fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum KeyFormat'));
}

/// Describes a key pair.
class KeyPair {
  /// <ul>
  /// <li>
  /// For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER
  /// encoded private key.
  /// </li>
  /// <li>
  /// For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
  /// digest, which is the default for OpenSSH, starting with OpenSSH 6.8.
  /// </li>
  /// </ul>
  final String? keyFingerprint;

  /// An unencrypted PEM encoded RSA or ED25519 private key.
  final String? keyMaterial;

  /// The name of the key pair.
  final String? keyName;

  /// The ID of the key pair.
  final String? keyPairId;

  /// Any tags applied to the key pair.
  final List<Tag>? tags;

  KeyPair({
    this.keyFingerprint,
    this.keyMaterial,
    this.keyName,
    this.keyPairId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final keyFingerprint = this.keyFingerprint;
    final keyMaterial = this.keyMaterial;
    final keyName = this.keyName;
    final keyPairId = this.keyPairId;
    final tags = this.tags;
    return {
      if (keyFingerprint != null) 'keyFingerprint': keyFingerprint,
      if (keyMaterial != null) 'keyMaterial': keyMaterial,
      if (keyName != null) 'keyName': keyName,
      if (keyPairId != null) 'keyPairId': keyPairId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes a key pair.
class KeyPairInfo {
  /// If you used Amazon EC2 to create the key pair, this is the date and time
  /// when the key was created, in <a
  /// href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601
  /// date-time format</a>, in the UTC time zone.
  ///
  /// If you imported an existing key pair to Amazon EC2, this is the date and
  /// time the key was imported, in <a
  /// href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601
  /// date-time format</a>, in the UTC time zone.
  final DateTime? createTime;

  /// If you used <a>CreateKeyPair</a> to create the key pair:
  ///
  /// <ul>
  /// <li>
  /// For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER
  /// encoded private key.
  /// </li>
  /// <li>
  /// For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
  /// digest, which is the default for OpenSSH, starting with <a
  /// href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.
  /// </li>
  /// </ul>
  /// If you used <a>ImportKeyPair</a> to provide Amazon Web Services the public
  /// key:
  ///
  /// <ul>
  /// <li>
  /// For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as
  /// specified in section 4 of RFC4716.
  /// </li>
  /// <li>
  /// For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
  /// digest, which is the default for OpenSSH, starting with <a
  /// href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.
  /// </li>
  /// </ul>
  final String? keyFingerprint;

  /// The name of the key pair.
  final String? keyName;

  /// The ID of the key pair.
  final String? keyPairId;

  /// The type of key pair.
  final KeyType? keyType;

  /// The public key material.
  final String? publicKey;

  /// Any tags applied to the key pair.
  final List<Tag>? tags;

  KeyPairInfo({
    this.createTime,
    this.keyFingerprint,
    this.keyName,
    this.keyPairId,
    this.keyType,
    this.publicKey,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final createTime = this.createTime;
    final keyFingerprint = this.keyFingerprint;
    final keyName = this.keyName;
    final keyPairId = this.keyPairId;
    final keyType = this.keyType;
    final publicKey = this.publicKey;
    final tags = this.tags;
    return {
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (keyFingerprint != null) 'keyFingerprint': keyFingerprint,
      if (keyName != null) 'keyName': keyName,
      if (keyPairId != null) 'keyPairId': keyPairId,
      if (keyType != null) 'keyType': keyType.value,
      if (publicKey != null) 'publicKey': publicKey,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum KeyType {
  rsa('rsa'),
  ed25519('ed25519'),
  ;

  final String value;

  const KeyType(this.value);

  static KeyType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum KeyType'));
}

/// The last error that occurred for a VPC endpoint.
class LastError {
  /// The error code for the VPC endpoint error.
  final String? code;

  /// The error message for the VPC endpoint error.
  final String? message;

  LastError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

/// Describes a launch permission.
class LaunchPermission {
  /// The name of the group.
  final PermissionGroup? group;

  /// The Amazon Resource Name (ARN) of an organization.
  final String? organizationArn;

  /// The Amazon Resource Name (ARN) of an organizational unit (OU).
  final String? organizationalUnitArn;

  /// The Amazon Web Services account ID.
  ///
  /// Constraints: Up to 10 000 account IDs can be specified in a single request.
  final String? userId;

  LaunchPermission({
    this.group,
    this.organizationArn,
    this.organizationalUnitArn,
    this.userId,
  });

  Map<String, dynamic> toJson() {
    final group = this.group;
    final organizationArn = this.organizationArn;
    final organizationalUnitArn = this.organizationalUnitArn;
    final userId = this.userId;
    return {
      if (group != null) 'group': group.value,
      if (organizationArn != null) 'organizationArn': organizationArn,
      if (organizationalUnitArn != null)
        'organizationalUnitArn': organizationalUnitArn,
      if (userId != null) 'userId': userId,
    };
  }
}

/// Describes a launch permission modification.
class LaunchPermissionModifications {
  /// The Amazon Web Services account ID, organization ARN, or OU ARN to add to
  /// the list of launch permissions for the AMI.
  final List<LaunchPermission>? add;

  /// The Amazon Web Services account ID, organization ARN, or OU ARN to remove
  /// from the list of launch permissions for the AMI.
  final List<LaunchPermission>? remove;

  LaunchPermissionModifications({
    this.add,
    this.remove,
  });

  Map<String, dynamic> toJson() {
    final add = this.add;
    final remove = this.remove;
    return {
      if (add != null) 'Add': add,
      if (remove != null) 'Remove': remove,
    };
  }
}

/// Describes the launch specification for an instance.
class LaunchSpecification {
  /// Deprecated.
  final String? addressingType;

  /// The block device mapping entries.
  final List<BlockDeviceMapping>? blockDeviceMappings;

  /// Indicates whether the instance is optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS Optimized instance.
  ///
  /// Default: <code>false</code>
  final bool? ebsOptimized;

  /// The IAM instance profile.
  final IamInstanceProfileSpecification? iamInstanceProfile;

  /// The ID of the AMI.
  final String? imageId;

  /// The instance type. Only one instance type can be specified.
  final InstanceType? instanceType;

  /// The ID of the kernel.
  final String? kernelId;

  /// The name of the key pair.
  final String? keyName;
  final RunInstancesMonitoringEnabled? monitoring;

  /// The network interfaces. If you specify a network interface, you must specify
  /// subnet IDs and security group IDs using the network interface.
  final List<InstanceNetworkInterfaceSpecification>? networkInterfaces;

  /// The placement information for the instance.
  final SpotPlacement? placement;

  /// The ID of the RAM disk.
  final String? ramdiskId;

  /// The IDs of the security groups.
  final List<GroupIdentifier>? securityGroups;

  /// The ID of the subnet in which to launch the instance.
  final String? subnetId;

  /// The base64-encoded user data that instances use when starting up. User data
  /// is limited to 16 KB.
  final String? userData;

  LaunchSpecification({
    this.addressingType,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroups,
    this.subnetId,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final addressingType = this.addressingType;
    final blockDeviceMappings = this.blockDeviceMappings;
    final ebsOptimized = this.ebsOptimized;
    final iamInstanceProfile = this.iamInstanceProfile;
    final imageId = this.imageId;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final placement = this.placement;
    final ramdiskId = this.ramdiskId;
    final securityGroups = this.securityGroups;
    final subnetId = this.subnetId;
    final userData = this.userData;
    return {
      if (addressingType != null) 'addressingType': addressingType,
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (iamInstanceProfile != null) 'iamInstanceProfile': iamInstanceProfile,
      if (imageId != null) 'imageId': imageId,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (kernelId != null) 'kernelId': kernelId,
      if (keyName != null) 'keyName': keyName,
      if (monitoring != null) 'monitoring': monitoring,
      if (networkInterfaces != null) 'networkInterfaceSet': networkInterfaces,
      if (placement != null) 'placement': placement,
      if (ramdiskId != null) 'ramdiskId': ramdiskId,
      if (securityGroups != null) 'groupSet': securityGroups,
      if (subnetId != null) 'subnetId': subnetId,
      if (userData != null) 'userData': userData,
    };
  }
}

/// Describes a launch template.
class LaunchTemplate {
  /// The time launch template was created.
  final DateTime? createTime;

  /// The principal that created the launch template.
  final String? createdBy;

  /// The version number of the default version of the launch template.
  final int? defaultVersionNumber;

  /// The version number of the latest version of the launch template.
  final int? latestVersionNumber;

  /// The ID of the launch template.
  final String? launchTemplateId;

  /// The name of the launch template.
  final String? launchTemplateName;

  /// The tags for the launch template.
  final List<Tag>? tags;

  LaunchTemplate({
    this.createTime,
    this.createdBy,
    this.defaultVersionNumber,
    this.latestVersionNumber,
    this.launchTemplateId,
    this.launchTemplateName,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final createTime = this.createTime;
    final createdBy = this.createdBy;
    final defaultVersionNumber = this.defaultVersionNumber;
    final latestVersionNumber = this.latestVersionNumber;
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final tags = this.tags;
    return {
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (createdBy != null) 'createdBy': createdBy,
      if (defaultVersionNumber != null)
        'defaultVersionNumber': defaultVersionNumber,
      if (latestVersionNumber != null)
        'latestVersionNumber': latestVersionNumber,
      if (launchTemplateId != null) 'launchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'launchTemplateName': launchTemplateName,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes a launch template and overrides.
class LaunchTemplateAndOverridesResponse {
  /// The launch template.
  final FleetLaunchTemplateSpecification? launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final FleetLaunchTemplateOverrides? overrides;

  LaunchTemplateAndOverridesResponse({
    this.launchTemplateSpecification,
    this.overrides,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateSpecification = this.launchTemplateSpecification;
    final overrides = this.overrides;
    return {
      if (launchTemplateSpecification != null)
        'launchTemplateSpecification': launchTemplateSpecification,
      if (overrides != null) 'overrides': overrides,
    };
  }
}

enum LaunchTemplateAutoRecoveryState {
  $default('default'),
  disabled('disabled'),
  ;

  final String value;

  const LaunchTemplateAutoRecoveryState(this.value);

  static LaunchTemplateAutoRecoveryState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateAutoRecoveryState'));
}

/// Describes a block device mapping.
class LaunchTemplateBlockDeviceMapping {
  /// The device name.
  final String? deviceName;

  /// Information about the block device for an EBS volume.
  final LaunchTemplateEbsBlockDevice? ebs;

  /// To omit the device from the block device mapping, specify an empty string.
  final String? noDevice;

  /// The virtual device name (ephemeralN).
  final String? virtualName;

  LaunchTemplateBlockDeviceMapping({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final ebs = this.ebs;
    final noDevice = this.noDevice;
    final virtualName = this.virtualName;
    return {
      if (deviceName != null) 'deviceName': deviceName,
      if (ebs != null) 'ebs': ebs,
      if (noDevice != null) 'noDevice': noDevice,
      if (virtualName != null) 'virtualName': virtualName,
    };
  }
}

/// Describes a block device mapping.
class LaunchTemplateBlockDeviceMappingRequest {
  /// The device name (for example, /dev/sdh or xvdh).
  final String? deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final LaunchTemplateEbsBlockDeviceRequest? ebs;

  /// To omit the device from the block device mapping, specify an empty string.
  final String? noDevice;

  /// The virtual device name (ephemeralN). Instance store volumes are numbered
  /// starting from 0. An instance type with 2 available instance store volumes
  /// can specify mappings for ephemeral0 and ephemeral1. The number of available
  /// instance store volumes depends on the instance type. After you connect to
  /// the instance, you must mount the volume.
  final String? virtualName;

  LaunchTemplateBlockDeviceMappingRequest({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final ebs = this.ebs;
    final noDevice = this.noDevice;
    final virtualName = this.virtualName;
    return {
      if (deviceName != null) 'DeviceName': deviceName,
      if (ebs != null) 'Ebs': ebs,
      if (noDevice != null) 'NoDevice': noDevice,
      if (virtualName != null) 'VirtualName': virtualName,
    };
  }
}

/// Describes an instance's Capacity Reservation targeting option. You can
/// specify only one option at a time. Use the
/// <code>CapacityReservationPreference</code> parameter to configure the
/// instance to run in On-Demand capacity or to run in any <code>open</code>
/// Capacity Reservation that has matching attributes (instance type, platform,
/// Availability Zone). Use the <code>CapacityReservationTarget</code> parameter
/// to explicitly target a specific Capacity Reservation or a Capacity
/// Reservation group.
class LaunchTemplateCapacityReservationSpecificationRequest {
  /// Indicates the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs in On-Demand capacity.
  /// </li>
  /// </ul>
  final CapacityReservationPreference? capacityReservationPreference;

  /// Information about the target Capacity Reservation or Capacity Reservation
  /// group.
  final CapacityReservationTarget? capacityReservationTarget;

  LaunchTemplateCapacityReservationSpecificationRequest({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationPreference = this.capacityReservationPreference;
    final capacityReservationTarget = this.capacityReservationTarget;
    return {
      if (capacityReservationPreference != null)
        'CapacityReservationPreference': capacityReservationPreference.value,
      if (capacityReservationTarget != null)
        'CapacityReservationTarget': capacityReservationTarget,
    };
  }
}

/// Information about the Capacity Reservation targeting option.
class LaunchTemplateCapacityReservationSpecificationResponse {
  /// Indicates the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs in On-Demand capacity.
  /// </li>
  /// </ul>
  final CapacityReservationPreference? capacityReservationPreference;

  /// Information about the target Capacity Reservation or Capacity Reservation
  /// group.
  final CapacityReservationTargetResponse? capacityReservationTarget;

  LaunchTemplateCapacityReservationSpecificationResponse({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });

  Map<String, dynamic> toJson() {
    final capacityReservationPreference = this.capacityReservationPreference;
    final capacityReservationTarget = this.capacityReservationTarget;
    return {
      if (capacityReservationPreference != null)
        'capacityReservationPreference': capacityReservationPreference.value,
      if (capacityReservationTarget != null)
        'capacityReservationTarget': capacityReservationTarget,
    };
  }
}

/// Describes a launch template and overrides.
class LaunchTemplateConfig {
  /// The launch template to use. Make sure that the launch template does not
  /// contain the <code>NetworkInterfaceId</code> parameter because you can't
  /// specify a network interface ID in a Spot Fleet.
  final FleetLaunchTemplateSpecification? launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final List<LaunchTemplateOverrides>? overrides;

  LaunchTemplateConfig({
    this.launchTemplateSpecification,
    this.overrides,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateSpecification = this.launchTemplateSpecification;
    final overrides = this.overrides;
    return {
      if (launchTemplateSpecification != null)
        'launchTemplateSpecification': launchTemplateSpecification,
      if (overrides != null) 'overrides': overrides,
    };
  }
}

/// The CPU options for the instance.
class LaunchTemplateCpuOptions {
  /// Indicates whether the instance is enabled for AMD SEV-SNP. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html">AMD
  /// SEV-SNP</a>.
  final AmdSevSnpSpecification? amdSevSnp;

  /// The number of CPU cores for the instance.
  final int? coreCount;

  /// The number of threads per CPU core.
  final int? threadsPerCore;

  LaunchTemplateCpuOptions({
    this.amdSevSnp,
    this.coreCount,
    this.threadsPerCore,
  });

  Map<String, dynamic> toJson() {
    final amdSevSnp = this.amdSevSnp;
    final coreCount = this.coreCount;
    final threadsPerCore = this.threadsPerCore;
    return {
      if (amdSevSnp != null) 'amdSevSnp': amdSevSnp.value,
      if (coreCount != null) 'coreCount': coreCount,
      if (threadsPerCore != null) 'threadsPerCore': threadsPerCore,
    };
  }
}

/// The CPU options for the instance. Both the core count and threads per core
/// must be specified in the request.
class LaunchTemplateCpuOptionsRequest {
  /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is
  /// supported with M6a, R6a, and C6a instance types only. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html">AMD
  /// SEV-SNP</a>.
  final AmdSevSnpSpecification? amdSevSnp;

  /// The number of CPU cores for the instance.
  final int? coreCount;

  /// The number of threads per CPU core. To disable multithreading for the
  /// instance, specify a value of <code>1</code>. Otherwise, specify the default
  /// value of <code>2</code>.
  final int? threadsPerCore;

  LaunchTemplateCpuOptionsRequest({
    this.amdSevSnp,
    this.coreCount,
    this.threadsPerCore,
  });

  Map<String, dynamic> toJson() {
    final amdSevSnp = this.amdSevSnp;
    final coreCount = this.coreCount;
    final threadsPerCore = this.threadsPerCore;
    return {
      if (amdSevSnp != null) 'AmdSevSnp': amdSevSnp.value,
      if (coreCount != null) 'CoreCount': coreCount,
      if (threadsPerCore != null) 'ThreadsPerCore': threadsPerCore,
    };
  }
}

/// Describes a block device for an EBS volume.
class LaunchTemplateEbsBlockDevice {
  /// Indicates whether the EBS volume is deleted on instance termination.
  final bool? deleteOnTermination;

  /// Indicates whether the EBS volume is encrypted.
  final bool? encrypted;

  /// The number of I/O operations per second (IOPS) that the volume supports.
  final int? iops;

  /// The ARN of the Key Management Service (KMS) CMK used for encryption.
  final String? kmsKeyId;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The throughput that the volume supports, in MiB/s.
  final int? throughput;

  /// The size of the volume, in GiB.
  final int? volumeSize;

  /// The volume type.
  final VolumeType? volumeType;

  LaunchTemplateEbsBlockDevice({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.kmsKeyId,
    this.snapshotId,
    this.throughput,
    this.volumeSize,
    this.volumeType,
  });

  Map<String, dynamic> toJson() {
    final deleteOnTermination = this.deleteOnTermination;
    final encrypted = this.encrypted;
    final iops = this.iops;
    final kmsKeyId = this.kmsKeyId;
    final snapshotId = this.snapshotId;
    final throughput = this.throughput;
    final volumeSize = this.volumeSize;
    final volumeType = this.volumeType;
    return {
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (encrypted != null) 'encrypted': encrypted,
      if (iops != null) 'iops': iops,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (throughput != null) 'throughput': throughput,
      if (volumeSize != null) 'volumeSize': volumeSize,
      if (volumeType != null) 'volumeType': volumeType.value,
    };
  }
}

/// The parameters for a block device for an EBS volume.
class LaunchTemplateEbsBlockDeviceRequest {
  /// Indicates whether the EBS volume is deleted on instance termination.
  final bool? deleteOnTermination;

  /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be
  /// attached to instances that support Amazon EBS encryption. If you are
  /// creating a volume from a snapshot, you can't specify an encryption value.
  final bool? encrypted;

  /// The number of I/O operations per second (IOPS). For <code>gp3</code>,
  /// <code>io1</code>, and <code>io2</code> volumes, this represents the number
  /// of IOPS that are provisioned for the volume. For <code>gp2</code> volumes,
  /// this represents the baseline performance of the volume and the rate at which
  /// the volume accumulates I/O credits for bursting.
  ///
  /// The following are the supported values for each volume type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp3</code>: 3,000 - 16,000 IOPS
  /// </li>
  /// <li>
  /// <code>io1</code>: 100 - 64,000 IOPS
  /// </li>
  /// <li>
  /// <code>io2</code>: 100 - 256,000 IOPS
  /// </li>
  /// </ul>
  /// For <code>io2</code> volumes, you can achieve up to 256,000 IOPS on <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances
  /// built on the Nitro System</a>. On other instances, you can achieve
  /// performance up to 32,000 IOPS.
  ///
  /// This parameter is supported for <code>io1</code>, <code>io2</code>, and
  /// <code>gp3</code> volumes only.
  final int? iops;

  /// The ARN of the symmetric Key Management Service (KMS) CMK used for
  /// encryption.
  final String? kmsKeyId;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The throughput to provision for a <code>gp3</code> volume, with a maximum of
  /// 1,000 MiB/s.
  ///
  /// Valid Range: Minimum value of 125. Maximum value of 1000.
  final int? throughput;

  /// The size of the volume, in GiBs. You must specify either a snapshot ID or a
  /// volume size. The following are the supported volumes sizes for each volume
  /// type:
  ///
  /// <ul>
  /// <li>
  /// <code>gp2</code> and <code>gp3</code>: 1 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io1</code>: 4 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>io2</code>: 4 - 65,536 GiB
  /// </li>
  /// <li>
  /// <code>st1</code> and <code>sc1</code>: 125 - 16,384 GiB
  /// </li>
  /// <li>
  /// <code>standard</code>: 1 - 1024 GiB
  /// </li>
  /// </ul>
  final int? volumeSize;

  /// The volume type. For more information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html">Amazon
  /// EBS volume types</a> in the <i>Amazon EBS User Guide</i>.
  final VolumeType? volumeType;

  LaunchTemplateEbsBlockDeviceRequest({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.kmsKeyId,
    this.snapshotId,
    this.throughput,
    this.volumeSize,
    this.volumeType,
  });

  Map<String, dynamic> toJson() {
    final deleteOnTermination = this.deleteOnTermination;
    final encrypted = this.encrypted;
    final iops = this.iops;
    final kmsKeyId = this.kmsKeyId;
    final snapshotId = this.snapshotId;
    final throughput = this.throughput;
    final volumeSize = this.volumeSize;
    final volumeType = this.volumeType;
    return {
      if (deleteOnTermination != null)
        'DeleteOnTermination': deleteOnTermination,
      if (encrypted != null) 'Encrypted': encrypted,
      if (iops != null) 'Iops': iops,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (snapshotId != null) 'SnapshotId': snapshotId,
      if (throughput != null) 'Throughput': throughput,
      if (volumeSize != null) 'VolumeSize': volumeSize,
      if (volumeType != null) 'VolumeType': volumeType.value,
    };
  }
}

/// Describes an elastic inference accelerator.
class LaunchTemplateElasticInferenceAccelerator {
  /// The type of elastic inference accelerator. The possible values are
  /// eia1.medium, eia1.large, and eia1.xlarge.
  final String type;

  /// The number of elastic inference accelerators to attach to the instance.
  ///
  /// Default: 1
  final int? count;

  LaunchTemplateElasticInferenceAccelerator({
    required this.type,
    this.count,
  });

  Map<String, dynamic> toJson() {
    final type = this.type;
    final count = this.count;
    return {
      'Type': type,
      if (count != null) 'Count': count,
    };
  }
}

/// Describes an elastic inference accelerator.
class LaunchTemplateElasticInferenceAcceleratorResponse {
  /// The number of elastic inference accelerators to attach to the instance.
  ///
  /// Default: 1
  final int? count;

  /// The type of elastic inference accelerator. The possible values are
  /// eia1.medium, eia1.large, and eia1.xlarge.
  final String? type;

  LaunchTemplateElasticInferenceAcceleratorResponse({
    this.count,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final type = this.type;
    return {
      if (count != null) 'count': count,
      if (type != null) 'type': type,
    };
  }
}

/// ENA Express uses Amazon Web Services Scalable Reliable Datagram (SRD)
/// technology to increase the maximum bandwidth used per stream and minimize
/// tail latency of network traffic between EC2 instances. With ENA Express, you
/// can communicate between two EC2 instances in the same subnet within the same
/// account, or in different accounts. Both sending and receiving instances must
/// have ENA Express enabled.
///
/// To improve the reliability of network packet delivery, ENA Express reorders
/// network packets on the receiving end by default. However, some UDP-based
/// applications are designed to handle network packets that are out of order to
/// reduce the overhead for packet delivery at the network layer. When ENA
/// Express is enabled, you can specify whether UDP network traffic uses it.
class LaunchTemplateEnaSrdSpecification {
  /// Indicates whether ENA Express is enabled for the network interface.
  final bool? enaSrdEnabled;

  /// Configures ENA Express for UDP network traffic.
  final LaunchTemplateEnaSrdUdpSpecification? enaSrdUdpSpecification;

  LaunchTemplateEnaSrdSpecification({
    this.enaSrdEnabled,
    this.enaSrdUdpSpecification,
  });

  Map<String, dynamic> toJson() {
    final enaSrdEnabled = this.enaSrdEnabled;
    final enaSrdUdpSpecification = this.enaSrdUdpSpecification;
    return {
      if (enaSrdEnabled != null) 'enaSrdEnabled': enaSrdEnabled,
      if (enaSrdUdpSpecification != null)
        'enaSrdUdpSpecification': enaSrdUdpSpecification,
    };
  }
}

/// ENA Express is compatible with both TCP and UDP transport protocols. When
/// it's enabled, TCP traffic automatically uses it. However, some UDP-based
/// applications are designed to handle network packets that are out of order,
/// without a need for retransmission, such as live video broadcasting or other
/// near-real-time applications. For UDP traffic, you can specify whether to use
/// ENA Express, based on your application environment needs.
class LaunchTemplateEnaSrdUdpSpecification {
  /// Indicates whether UDP traffic to and from the instance uses ENA Express. To
  /// specify this setting, you must first enable ENA Express.
  final bool? enaSrdUdpEnabled;

  LaunchTemplateEnaSrdUdpSpecification({
    this.enaSrdUdpEnabled,
  });

  Map<String, dynamic> toJson() {
    final enaSrdUdpEnabled = this.enaSrdUdpEnabled;
    return {
      if (enaSrdUdpEnabled != null) 'enaSrdUdpEnabled': enaSrdUdpEnabled,
    };
  }
}

/// Indicates whether the instance is enabled for Amazon Web Services Nitro
/// Enclaves.
class LaunchTemplateEnclaveOptions {
  /// If this parameter is set to <code>true</code>, the instance is enabled for
  /// Amazon Web Services Nitro Enclaves; otherwise, it is not enabled for Amazon
  /// Web Services Nitro Enclaves.
  final bool? enabled;

  LaunchTemplateEnclaveOptions({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'enabled': enabled,
    };
  }
}

/// Indicates whether the instance is enabled for Amazon Web Services Nitro
/// Enclaves. For more information, see <a
/// href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html">What
/// is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services
/// Nitro Enclaves User Guide</i>.
class LaunchTemplateEnclaveOptionsRequest {
  /// To enable the instance for Amazon Web Services Nitro Enclaves, set this
  /// parameter to <code>true</code>.
  final bool? enabled;

  LaunchTemplateEnclaveOptionsRequest({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

enum LaunchTemplateErrorCode {
  launchTemplateIdDoesNotExist('launchTemplateIdDoesNotExist'),
  launchTemplateIdMalformed('launchTemplateIdMalformed'),
  launchTemplateNameDoesNotExist('launchTemplateNameDoesNotExist'),
  launchTemplateNameMalformed('launchTemplateNameMalformed'),
  launchTemplateVersionDoesNotExist('launchTemplateVersionDoesNotExist'),
  unexpectedError('unexpectedError'),
  ;

  final String value;

  const LaunchTemplateErrorCode(this.value);

  static LaunchTemplateErrorCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateErrorCode'));
}

/// Indicates whether an instance is configured for hibernation.
class LaunchTemplateHibernationOptions {
  /// If this parameter is set to <code>true</code>, the instance is enabled for
  /// hibernation; otherwise, it is not enabled for hibernation.
  final bool? configured;

  LaunchTemplateHibernationOptions({
    this.configured,
  });

  Map<String, dynamic> toJson() {
    final configured = this.configured;
    return {
      if (configured != null) 'configured': configured,
    };
  }
}

/// Indicates whether the instance is configured for hibernation. This parameter
/// is valid only if the instance meets the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
/// prerequisites</a>.
class LaunchTemplateHibernationOptionsRequest {
  /// If you set this parameter to <code>true</code>, the instance is enabled for
  /// hibernation.
  ///
  /// Default: <code>false</code>
  final bool? configured;

  LaunchTemplateHibernationOptionsRequest({
    this.configured,
  });

  Map<String, dynamic> toJson() {
    final configured = this.configured;
    return {
      if (configured != null) 'Configured': configured,
    };
  }
}

enum LaunchTemplateHttpTokensState {
  optional('optional'),
  required('required'),
  ;

  final String value;

  const LaunchTemplateHttpTokensState(this.value);

  static LaunchTemplateHttpTokensState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateHttpTokensState'));
}

/// Describes an IAM instance profile.
class LaunchTemplateIamInstanceProfileSpecification {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String? arn;

  /// The name of the instance profile.
  final String? name;

  LaunchTemplateIamInstanceProfileSpecification({
    this.arn,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final name = this.name;
    return {
      if (arn != null) 'arn': arn,
      if (name != null) 'name': name,
    };
  }
}

/// An IAM instance profile.
class LaunchTemplateIamInstanceProfileSpecificationRequest {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String? arn;

  /// The name of the instance profile.
  final String? name;

  LaunchTemplateIamInstanceProfileSpecificationRequest({
    this.arn,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final name = this.name;
    return {
      if (arn != null) 'Arn': arn,
      if (name != null) 'Name': name,
    };
  }
}

/// The maintenance options of your instance.
class LaunchTemplateInstanceMaintenanceOptions {
  /// Disables the automatic recovery behavior of your instance or sets it to
  /// default.
  final LaunchTemplateAutoRecoveryState? autoRecovery;

  LaunchTemplateInstanceMaintenanceOptions({
    this.autoRecovery,
  });

  Map<String, dynamic> toJson() {
    final autoRecovery = this.autoRecovery;
    return {
      if (autoRecovery != null) 'autoRecovery': autoRecovery.value,
    };
  }
}

/// The maintenance options of your instance.
class LaunchTemplateInstanceMaintenanceOptionsRequest {
  /// Disables the automatic recovery behavior of your instance or sets it to
  /// default. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery">Simplified
  /// automatic recovery</a>.
  final LaunchTemplateAutoRecoveryState? autoRecovery;

  LaunchTemplateInstanceMaintenanceOptionsRequest({
    this.autoRecovery,
  });

  Map<String, dynamic> toJson() {
    final autoRecovery = this.autoRecovery;
    return {
      if (autoRecovery != null) 'AutoRecovery': autoRecovery.value,
    };
  }
}

/// The market (purchasing) option for the instances.
class LaunchTemplateInstanceMarketOptions {
  /// The market type.
  final MarketType? marketType;

  /// The options for Spot Instances.
  final LaunchTemplateSpotMarketOptions? spotOptions;

  LaunchTemplateInstanceMarketOptions({
    this.marketType,
    this.spotOptions,
  });

  Map<String, dynamic> toJson() {
    final marketType = this.marketType;
    final spotOptions = this.spotOptions;
    return {
      if (marketType != null) 'marketType': marketType.value,
      if (spotOptions != null) 'spotOptions': spotOptions,
    };
  }
}

/// The market (purchasing) option for the instances.
class LaunchTemplateInstanceMarketOptionsRequest {
  /// The market type.
  final MarketType? marketType;

  /// The options for Spot Instances.
  final LaunchTemplateSpotMarketOptionsRequest? spotOptions;

  LaunchTemplateInstanceMarketOptionsRequest({
    this.marketType,
    this.spotOptions,
  });

  Map<String, dynamic> toJson() {
    final marketType = this.marketType;
    final spotOptions = this.spotOptions;
    return {
      if (marketType != null) 'MarketType': marketType.value,
      if (spotOptions != null) 'SpotOptions': spotOptions,
    };
  }
}

enum LaunchTemplateInstanceMetadataEndpointState {
  disabled('disabled'),
  enabled('enabled'),
  ;

  final String value;

  const LaunchTemplateInstanceMetadataEndpointState(this.value);

  static LaunchTemplateInstanceMetadataEndpointState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateInstanceMetadataEndpointState'));
}

/// The metadata options for the instance. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
/// metadata and user data</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class LaunchTemplateInstanceMetadataOptions {
  /// Enables or disables the HTTP metadata endpoint on your instances. If the
  /// parameter is not specified, the default state is <code>enabled</code>.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  final LaunchTemplateInstanceMetadataEndpointState? httpEndpoint;

  /// Enables or disables the IPv6 endpoint for the instance metadata service.
  ///
  /// Default: <code>disabled</code>
  final LaunchTemplateInstanceMetadataProtocolIpv6? httpProtocolIpv6;

  /// The desired HTTP PUT response hop limit for instance metadata requests. The
  /// larger the number, the further instance metadata requests can travel.
  ///
  /// Default: 1
  ///
  /// Possible values: Integers from 1 to 64
  final int? httpPutResponseHopLimit;

  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> - IMDSv2 is optional. You can choose whether to send a
  /// session token in your instance metadata retrieval requests. If you retrieve
  /// IAM role credentials without a session token, you receive the IMDSv1 role
  /// credentials. If you retrieve IAM role credentials using a valid session
  /// token, you receive the IMDSv2 role credentials.
  /// </li>
  /// <li>
  /// <code>required</code> - IMDSv2 is required. You must send a session token in
  /// your instance metadata retrieval requests. With this option, retrieving the
  /// IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials
  /// are not available.
  /// </li>
  /// </ul>
  final LaunchTemplateHttpTokensState? httpTokens;

  /// Set to <code>enabled</code> to allow access to instance tags from the
  /// instance metadata. Set to <code>disabled</code> to turn off access to
  /// instance tags from the instance metadata. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a>.
  ///
  /// Default: <code>disabled</code>
  final LaunchTemplateInstanceMetadataTagsState? instanceMetadataTags;

  /// The state of the metadata option changes.
  ///
  /// <code>pending</code> - The metadata options are being updated and the
  /// instance is not ready to process metadata traffic with the new selection.
  ///
  /// <code>applied</code> - The metadata options have been successfully applied
  /// on the instance.
  final LaunchTemplateInstanceMetadataOptionsState? state;

  LaunchTemplateInstanceMetadataOptions({
    this.httpEndpoint,
    this.httpProtocolIpv6,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.instanceMetadataTags,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final httpEndpoint = this.httpEndpoint;
    final httpProtocolIpv6 = this.httpProtocolIpv6;
    final httpPutResponseHopLimit = this.httpPutResponseHopLimit;
    final httpTokens = this.httpTokens;
    final instanceMetadataTags = this.instanceMetadataTags;
    final state = this.state;
    return {
      if (httpEndpoint != null) 'httpEndpoint': httpEndpoint.value,
      if (httpProtocolIpv6 != null) 'httpProtocolIpv6': httpProtocolIpv6.value,
      if (httpPutResponseHopLimit != null)
        'httpPutResponseHopLimit': httpPutResponseHopLimit,
      if (httpTokens != null) 'httpTokens': httpTokens.value,
      if (instanceMetadataTags != null)
        'instanceMetadataTags': instanceMetadataTags.value,
      if (state != null) 'state': state.value,
    };
  }
}

/// The metadata options for the instance. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
/// metadata and user data</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class LaunchTemplateInstanceMetadataOptionsRequest {
  /// Enables or disables the HTTP metadata endpoint on your instances. If the
  /// parameter is not specified, the default state is <code>enabled</code>.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  final LaunchTemplateInstanceMetadataEndpointState? httpEndpoint;

  /// Enables or disables the IPv6 endpoint for the instance metadata service.
  ///
  /// Default: <code>disabled</code>
  final LaunchTemplateInstanceMetadataProtocolIpv6? httpProtocolIpv6;

  /// The desired HTTP PUT response hop limit for instance metadata requests. The
  /// larger the number, the further instance metadata requests can travel.
  ///
  /// Default: <code>1</code>
  ///
  /// Possible values: Integers from 1 to 64
  final int? httpPutResponseHopLimit;

  /// Indicates whether IMDSv2 is required.
  ///
  /// <ul>
  /// <li>
  /// <code>optional</code> - IMDSv2 is optional. You can choose whether to send a
  /// session token in your instance metadata retrieval requests. If you retrieve
  /// IAM role credentials without a session token, you receive the IMDSv1 role
  /// credentials. If you retrieve IAM role credentials using a valid session
  /// token, you receive the IMDSv2 role credentials.
  /// </li>
  /// <li>
  /// <code>required</code> - IMDSv2 is required. You must send a session token in
  /// your instance metadata retrieval requests. With this option, retrieving the
  /// IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials
  /// are not available.
  /// </li>
  /// </ul>
  /// Default: If the value of <code>ImdsSupport</code> for the Amazon Machine
  /// Image (AMI) for your instance is <code>v2.0</code>, the default is
  /// <code>required</code>.
  final LaunchTemplateHttpTokensState? httpTokens;

  /// Set to <code>enabled</code> to allow access to instance tags from the
  /// instance metadata. Set to <code>disabled</code> to turn off access to
  /// instance tags from the instance metadata. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work
  /// with instance tags using the instance metadata</a>.
  ///
  /// Default: <code>disabled</code>
  final LaunchTemplateInstanceMetadataTagsState? instanceMetadataTags;

  LaunchTemplateInstanceMetadataOptionsRequest({
    this.httpEndpoint,
    this.httpProtocolIpv6,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.instanceMetadataTags,
  });

  Map<String, dynamic> toJson() {
    final httpEndpoint = this.httpEndpoint;
    final httpProtocolIpv6 = this.httpProtocolIpv6;
    final httpPutResponseHopLimit = this.httpPutResponseHopLimit;
    final httpTokens = this.httpTokens;
    final instanceMetadataTags = this.instanceMetadataTags;
    return {
      if (httpEndpoint != null) 'HttpEndpoint': httpEndpoint.value,
      if (httpProtocolIpv6 != null) 'HttpProtocolIpv6': httpProtocolIpv6.value,
      if (httpPutResponseHopLimit != null)
        'HttpPutResponseHopLimit': httpPutResponseHopLimit,
      if (httpTokens != null) 'HttpTokens': httpTokens.value,
      if (instanceMetadataTags != null)
        'InstanceMetadataTags': instanceMetadataTags.value,
    };
  }
}

enum LaunchTemplateInstanceMetadataOptionsState {
  pending('pending'),
  applied('applied'),
  ;

  final String value;

  const LaunchTemplateInstanceMetadataOptionsState(this.value);

  static LaunchTemplateInstanceMetadataOptionsState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateInstanceMetadataOptionsState'));
}

enum LaunchTemplateInstanceMetadataProtocolIpv6 {
  disabled('disabled'),
  enabled('enabled'),
  ;

  final String value;

  const LaunchTemplateInstanceMetadataProtocolIpv6(this.value);

  static LaunchTemplateInstanceMetadataProtocolIpv6 fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateInstanceMetadataProtocolIpv6'));
}

enum LaunchTemplateInstanceMetadataTagsState {
  disabled('disabled'),
  enabled('enabled'),
  ;

  final String value;

  const LaunchTemplateInstanceMetadataTagsState(this.value);

  static LaunchTemplateInstanceMetadataTagsState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LaunchTemplateInstanceMetadataTagsState'));
}

/// Describes a network interface.
class LaunchTemplateInstanceNetworkInterfaceSpecification {
  /// Indicates whether to associate a Carrier IP address with eth0 for a new
  /// network interface.
  ///
  /// Use this option when you launch an instance in a Wavelength Zone and want to
  /// associate a Carrier IP address with the network interface. For more
  /// information about Carrier IP addresses, see <a
  /// href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip">Carrier
  /// IP addresses</a> in the <i>Wavelength Developer Guide</i>.
  final bool? associateCarrierIpAddress;

  /// Indicates whether to associate a public IPv4 address with eth0 for a new
  /// network interface.
  ///
  /// Amazon Web Services charges for all public IPv4 addresses, including public
  /// IPv4 addresses associated with running instances and Elastic IP addresses.
  /// For more information, see the <i>Public IPv4 Address</i> tab on the <a
  /// href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing page</a>.
  final bool? associatePublicIpAddress;

  /// A security group connection tracking specification that enables you to set
  /// the timeout for connection tracking on an Elastic network interface. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
  /// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final ConnectionTrackingSpecification? connectionTrackingSpecification;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool? deleteOnTermination;

  /// A description for the network interface.
  final String? description;

  /// The device index for the network interface attachment.
  final int? deviceIndex;

  /// Contains the ENA Express settings for instances launched from your launch
  /// template.
  final LaunchTemplateEnaSrdSpecification? enaSrdSpecification;

  /// The IDs of one or more security groups.
  final List<String>? groups;

  /// The type of network interface.
  final String? interfaceType;

  /// The number of IPv4 prefixes that Amazon Web Services automatically assigned
  /// to the network interface.
  final int? ipv4PrefixCount;

  /// One or more IPv4 prefixes assigned to the network interface.
  final List<Ipv4PrefixSpecificationResponse>? ipv4Prefixes;

  /// The number of IPv6 addresses for the network interface.
  final int? ipv6AddressCount;

  /// The IPv6 addresses for the network interface.
  final List<InstanceIpv6Address>? ipv6Addresses;

  /// The number of IPv6 prefixes that Amazon Web Services automatically assigned
  /// to the network interface.
  final int? ipv6PrefixCount;

  /// One or more IPv6 prefixes assigned to the network interface.
  final List<Ipv6PrefixSpecificationResponse>? ipv6Prefixes;

  /// The index of the network card.
  final int? networkCardIndex;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The primary IPv6 address of the network interface. When you enable an IPv6
  /// GUA address to be a primary IPv6, the first IPv6 GUA will be made the
  /// primary IPv6 address until the instance is terminated or the network
  /// interface is detached. For more information about primary IPv6 addresses,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>.
  final bool? primaryIpv6;

  /// The primary private IPv4 address of the network interface.
  final String? privateIpAddress;

  /// One or more private IPv4 addresses.
  final List<PrivateIpAddressSpecification>? privateIpAddresses;

  /// The number of secondary private IPv4 addresses for the network interface.
  final int? secondaryPrivateIpAddressCount;

  /// The ID of the subnet for the network interface.
  final String? subnetId;

  LaunchTemplateInstanceNetworkInterfaceSpecification({
    this.associateCarrierIpAddress,
    this.associatePublicIpAddress,
    this.connectionTrackingSpecification,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.enaSrdSpecification,
    this.groups,
    this.interfaceType,
    this.ipv4PrefixCount,
    this.ipv4Prefixes,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.ipv6PrefixCount,
    this.ipv6Prefixes,
    this.networkCardIndex,
    this.networkInterfaceId,
    this.primaryIpv6,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final associateCarrierIpAddress = this.associateCarrierIpAddress;
    final associatePublicIpAddress = this.associatePublicIpAddress;
    final connectionTrackingSpecification =
        this.connectionTrackingSpecification;
    final deleteOnTermination = this.deleteOnTermination;
    final description = this.description;
    final deviceIndex = this.deviceIndex;
    final enaSrdSpecification = this.enaSrdSpecification;
    final groups = this.groups;
    final interfaceType = this.interfaceType;
    final ipv4PrefixCount = this.ipv4PrefixCount;
    final ipv4Prefixes = this.ipv4Prefixes;
    final ipv6AddressCount = this.ipv6AddressCount;
    final ipv6Addresses = this.ipv6Addresses;
    final ipv6PrefixCount = this.ipv6PrefixCount;
    final ipv6Prefixes = this.ipv6Prefixes;
    final networkCardIndex = this.networkCardIndex;
    final networkInterfaceId = this.networkInterfaceId;
    final primaryIpv6 = this.primaryIpv6;
    final privateIpAddress = this.privateIpAddress;
    final privateIpAddresses = this.privateIpAddresses;
    final secondaryPrivateIpAddressCount = this.secondaryPrivateIpAddressCount;
    final subnetId = this.subnetId;
    return {
      if (associateCarrierIpAddress != null)
        'associateCarrierIpAddress': associateCarrierIpAddress,
      if (associatePublicIpAddress != null)
        'associatePublicIpAddress': associatePublicIpAddress,
      if (connectionTrackingSpecification != null)
        'connectionTrackingSpecification': connectionTrackingSpecification,
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (description != null) 'description': description,
      if (deviceIndex != null) 'deviceIndex': deviceIndex,
      if (enaSrdSpecification != null)
        'enaSrdSpecification': enaSrdSpecification,
      if (groups != null) 'groupSet': groups,
      if (interfaceType != null) 'interfaceType': interfaceType,
      if (ipv4PrefixCount != null) 'ipv4PrefixCount': ipv4PrefixCount,
      if (ipv4Prefixes != null) 'ipv4PrefixSet': ipv4Prefixes,
      if (ipv6AddressCount != null) 'ipv6AddressCount': ipv6AddressCount,
      if (ipv6Addresses != null) 'ipv6AddressesSet': ipv6Addresses,
      if (ipv6PrefixCount != null) 'ipv6PrefixCount': ipv6PrefixCount,
      if (ipv6Prefixes != null) 'ipv6PrefixSet': ipv6Prefixes,
      if (networkCardIndex != null) 'networkCardIndex': networkCardIndex,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (primaryIpv6 != null) 'primaryIpv6': primaryIpv6,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (privateIpAddresses != null)
        'privateIpAddressesSet': privateIpAddresses,
      if (secondaryPrivateIpAddressCount != null)
        'secondaryPrivateIpAddressCount': secondaryPrivateIpAddressCount,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

/// The parameters for a network interface.
class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest {
  /// Associates a Carrier IP address with eth0 for a new network interface.
  ///
  /// Use this option when you launch an instance in a Wavelength Zone and want to
  /// associate a Carrier IP address with the network interface. For more
  /// information about Carrier IP addresses, see <a
  /// href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip">Carrier
  /// IP addresses</a> in the <i>Wavelength Developer Guide</i>.
  final bool? associateCarrierIpAddress;

  /// Associates a public IPv4 address with eth0 for a new network interface.
  ///
  /// Amazon Web Services charges for all public IPv4 addresses, including public
  /// IPv4 addresses associated with running instances and Elastic IP addresses.
  /// For more information, see the <i>Public IPv4 Address</i> tab on the <a
  /// href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing page</a>.
  final bool? associatePublicIpAddress;

  /// A security group connection tracking specification that enables you to set
  /// the timeout for connection tracking on an Elastic network interface. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
  /// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final ConnectionTrackingSpecificationRequest? connectionTrackingSpecification;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool? deleteOnTermination;

  /// A description for the network interface.
  final String? description;

  /// The device index for the network interface attachment. Each network
  /// interface requires a device index. If you create a launch template that
  /// includes secondary network interfaces but not a primary network interface,
  /// then you must add a primary network interface as a launch parameter when you
  /// launch an instance from the template.
  final int? deviceIndex;

  /// Configure ENA Express settings for your launch template.
  final EnaSrdSpecificationRequest? enaSrdSpecification;

  /// The IDs of one or more security groups.
  final List<String>? groups;

  /// The type of network interface. To create an Elastic Fabric Adapter (EFA),
  /// specify <code>efa</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">Elastic
  /// Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// If you are not creating an EFA, specify <code>interface</code> or omit this
  /// parameter.
  ///
  /// Valid values: <code>interface</code> | <code>efa</code>
  final String? interfaceType;

  /// The number of IPv4 prefixes to be automatically assigned to the network
  /// interface. You cannot use this option if you use the <code>Ipv4Prefix</code>
  /// option.
  final int? ipv4PrefixCount;

  /// One or more IPv4 prefixes to be assigned to the network interface. You
  /// cannot use this option if you use the <code>Ipv4PrefixCount</code> option.
  final List<Ipv4PrefixSpecificationRequest>? ipv4Prefixes;

  /// The number of IPv6 addresses to assign to a network interface. Amazon EC2
  /// automatically selects the IPv6 addresses from the subnet range. You can't
  /// use this option if specifying specific IPv6 addresses.
  final int? ipv6AddressCount;

  /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your
  /// subnet. You can't use this option if you're specifying a number of IPv6
  /// addresses.
  final List<InstanceIpv6AddressRequest>? ipv6Addresses;

  /// The number of IPv6 prefixes to be automatically assigned to the network
  /// interface. You cannot use this option if you use the <code>Ipv6Prefix</code>
  /// option.
  final int? ipv6PrefixCount;

  /// One or more IPv6 prefixes to be assigned to the network interface. You
  /// cannot use this option if you use the <code>Ipv6PrefixCount</code> option.
  final List<Ipv6PrefixSpecificationRequest>? ipv6Prefixes;

  /// The index of the network card. Some instance types support multiple network
  /// cards. The primary network interface must be assigned to network card index
  /// 0. The default is network card index 0.
  final int? networkCardIndex;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The primary IPv6 address of the network interface. When you enable an IPv6
  /// GUA address to be a primary IPv6, the first IPv6 GUA will be made the
  /// primary IPv6 address until the instance is terminated or the network
  /// interface is detached. For more information about primary IPv6 addresses,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>.
  final bool? primaryIpv6;

  /// The primary private IPv4 address of the network interface.
  final String? privateIpAddress;

  /// One or more private IPv4 addresses.
  final List<PrivateIpAddressSpecification>? privateIpAddresses;

  /// The number of secondary private IPv4 addresses to assign to a network
  /// interface.
  final int? secondaryPrivateIpAddressCount;

  /// The ID of the subnet for the network interface.
  final String? subnetId;

  LaunchTemplateInstanceNetworkInterfaceSpecificationRequest({
    this.associateCarrierIpAddress,
    this.associatePublicIpAddress,
    this.connectionTrackingSpecification,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.enaSrdSpecification,
    this.groups,
    this.interfaceType,
    this.ipv4PrefixCount,
    this.ipv4Prefixes,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.ipv6PrefixCount,
    this.ipv6Prefixes,
    this.networkCardIndex,
    this.networkInterfaceId,
    this.primaryIpv6,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final associateCarrierIpAddress = this.associateCarrierIpAddress;
    final associatePublicIpAddress = this.associatePublicIpAddress;
    final connectionTrackingSpecification =
        this.connectionTrackingSpecification;
    final deleteOnTermination = this.deleteOnTermination;
    final description = this.description;
    final deviceIndex = this.deviceIndex;
    final enaSrdSpecification = this.enaSrdSpecification;
    final groups = this.groups;
    final interfaceType = this.interfaceType;
    final ipv4PrefixCount = this.ipv4PrefixCount;
    final ipv4Prefixes = this.ipv4Prefixes;
    final ipv6AddressCount = this.ipv6AddressCount;
    final ipv6Addresses = this.ipv6Addresses;
    final ipv6PrefixCount = this.ipv6PrefixCount;
    final ipv6Prefixes = this.ipv6Prefixes;
    final networkCardIndex = this.networkCardIndex;
    final networkInterfaceId = this.networkInterfaceId;
    final primaryIpv6 = this.primaryIpv6;
    final privateIpAddress = this.privateIpAddress;
    final privateIpAddresses = this.privateIpAddresses;
    final secondaryPrivateIpAddressCount = this.secondaryPrivateIpAddressCount;
    final subnetId = this.subnetId;
    return {
      if (associateCarrierIpAddress != null)
        'AssociateCarrierIpAddress': associateCarrierIpAddress,
      if (associatePublicIpAddress != null)
        'AssociatePublicIpAddress': associatePublicIpAddress,
      if (connectionTrackingSpecification != null)
        'ConnectionTrackingSpecification': connectionTrackingSpecification,
      if (deleteOnTermination != null)
        'DeleteOnTermination': deleteOnTermination,
      if (description != null) 'Description': description,
      if (deviceIndex != null) 'DeviceIndex': deviceIndex,
      if (enaSrdSpecification != null)
        'EnaSrdSpecification': enaSrdSpecification,
      if (groups != null) 'SecurityGroupId': groups,
      if (interfaceType != null) 'InterfaceType': interfaceType,
      if (ipv4PrefixCount != null) 'Ipv4PrefixCount': ipv4PrefixCount,
      if (ipv4Prefixes != null) 'Ipv4Prefix': ipv4Prefixes,
      if (ipv6AddressCount != null) 'Ipv6AddressCount': ipv6AddressCount,
      if (ipv6Addresses != null) 'Ipv6Addresses': ipv6Addresses,
      if (ipv6PrefixCount != null) 'Ipv6PrefixCount': ipv6PrefixCount,
      if (ipv6Prefixes != null) 'Ipv6Prefix': ipv6Prefixes,
      if (networkCardIndex != null) 'NetworkCardIndex': networkCardIndex,
      if (networkInterfaceId != null) 'NetworkInterfaceId': networkInterfaceId,
      if (primaryIpv6 != null) 'PrimaryIpv6': primaryIpv6,
      if (privateIpAddress != null) 'PrivateIpAddress': privateIpAddress,
      if (privateIpAddresses != null) 'PrivateIpAddresses': privateIpAddresses,
      if (secondaryPrivateIpAddressCount != null)
        'SecondaryPrivateIpAddressCount': secondaryPrivateIpAddressCount,
      if (subnetId != null) 'SubnetId': subnetId,
    };
  }
}

/// Describes a license configuration.
class LaunchTemplateLicenseConfiguration {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String? licenseConfigurationArn;

  LaunchTemplateLicenseConfiguration({
    this.licenseConfigurationArn,
  });

  Map<String, dynamic> toJson() {
    final licenseConfigurationArn = this.licenseConfigurationArn;
    return {
      if (licenseConfigurationArn != null)
        'licenseConfigurationArn': licenseConfigurationArn,
    };
  }
}

/// Describes a license configuration.
class LaunchTemplateLicenseConfigurationRequest {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String? licenseConfigurationArn;

  LaunchTemplateLicenseConfigurationRequest({
    this.licenseConfigurationArn,
  });

  Map<String, dynamic> toJson() {
    final licenseConfigurationArn = this.licenseConfigurationArn;
    return {
      if (licenseConfigurationArn != null)
        'LicenseConfigurationArn': licenseConfigurationArn,
    };
  }
}

/// Describes overrides for a launch template.
class LaunchTemplateOverrides {
  /// The Availability Zone in which to launch the instances.
  final String? availabilityZone;

  /// The instance requirements. When you specify instance requirements, Amazon
  /// EC2 will identify instance types with the provided requirements, and then
  /// use your On-Demand and Spot allocation strategies to launch instances from
  /// these instance types, in the same way as when you specify a list of instance
  /// types.
  /// <note>
  /// If you specify <code>InstanceRequirements</code>, you can't specify
  /// <code>InstanceType</code>.
  /// </note>
  final InstanceRequirements? instanceRequirements;

  /// The instance type.
  final InstanceType? instanceType;

  /// The priority for the launch template override. The highest priority is
  /// launched first.
  ///
  /// If <code>OnDemandAllocationStrategy</code> is set to
  /// <code>prioritized</code>, Spot Fleet uses priority to determine which launch
  /// template override to use first in fulfilling On-Demand capacity.
  ///
  /// If the Spot <code>AllocationStrategy</code> is set to
  /// <code>capacityOptimizedPrioritized</code>, Spot Fleet uses priority on a
  /// best-effort basis to determine which launch template override to use in
  /// fulfilling Spot capacity, but optimizes for capacity first.
  ///
  /// Valid values are whole numbers starting at <code>0</code>. The lower the
  /// number, the higher the priority. If no number is set, the launch template
  /// override has the lowest priority. You can set the same priority for
  /// different launch template overrides.
  final double? priority;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? spotPrice;

  /// The ID of the subnet in which to launch the instances.
  final String? subnetId;

  /// The number of units provided by the specified instance type.
  /// <note>
  /// When specifying weights, the price used in the <code>lowest-price</code> and
  /// <code>price-capacity-optimized</code> allocation strategies is per
  /// <i>unit</i> hour (where the instance price is divided by the specified
  /// weight). However, if all the specified weights are above the requested
  /// <code>TargetCapacity</code>, resulting in only 1 instance being launched,
  /// the price used is per <i>instance</i> hour.
  /// </note>
  final double? weightedCapacity;

  LaunchTemplateOverrides({
    this.availabilityZone,
    this.instanceRequirements,
    this.instanceType,
    this.priority,
    this.spotPrice,
    this.subnetId,
    this.weightedCapacity,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final instanceRequirements = this.instanceRequirements;
    final instanceType = this.instanceType;
    final priority = this.priority;
    final spotPrice = this.spotPrice;
    final subnetId = this.subnetId;
    final weightedCapacity = this.weightedCapacity;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (instanceRequirements != null)
        'instanceRequirements': instanceRequirements,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (priority != null) 'priority': priority,
      if (spotPrice != null) 'spotPrice': spotPrice,
      if (subnetId != null) 'subnetId': subnetId,
      if (weightedCapacity != null) 'weightedCapacity': weightedCapacity,
    };
  }
}

/// Describes the placement of an instance.
class LaunchTemplatePlacement {
  /// The affinity setting for the instance on the Dedicated Host.
  final String? affinity;

  /// The Availability Zone of the instance.
  final String? availabilityZone;

  /// The Group ID of the placement group. You must specify the Placement Group
  /// <b>Group ID</b> to launch an instance in a shared placement group.
  final String? groupId;

  /// The name of the placement group for the instance.
  final String? groupName;

  /// The ID of the Dedicated Host for the instance.
  final String? hostId;

  /// The ARN of the host resource group in which to launch the instances.
  final String? hostResourceGroupArn;

  /// The number of the partition the instance should launch in. Valid only if the
  /// placement group strategy is set to <code>partition</code>.
  final int? partitionNumber;

  /// Reserved for future use.
  final String? spreadDomain;

  /// The tenancy of the instance. An instance with a tenancy of
  /// <code>dedicated</code> runs on single-tenant hardware.
  final Tenancy? tenancy;

  LaunchTemplatePlacement({
    this.affinity,
    this.availabilityZone,
    this.groupId,
    this.groupName,
    this.hostId,
    this.hostResourceGroupArn,
    this.partitionNumber,
    this.spreadDomain,
    this.tenancy,
  });

  Map<String, dynamic> toJson() {
    final affinity = this.affinity;
    final availabilityZone = this.availabilityZone;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final hostId = this.hostId;
    final hostResourceGroupArn = this.hostResourceGroupArn;
    final partitionNumber = this.partitionNumber;
    final spreadDomain = this.spreadDomain;
    final tenancy = this.tenancy;
    return {
      if (affinity != null) 'affinity': affinity,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (hostId != null) 'hostId': hostId,
      if (hostResourceGroupArn != null)
        'hostResourceGroupArn': hostResourceGroupArn,
      if (partitionNumber != null) 'partitionNumber': partitionNumber,
      if (spreadDomain != null) 'spreadDomain': spreadDomain,
      if (tenancy != null) 'tenancy': tenancy.value,
    };
  }
}

/// Describes the placement of an instance.
class LaunchTemplatePlacementRequest {
  /// The affinity setting for an instance on a Dedicated Host.
  final String? affinity;

  /// The Availability Zone for the instance.
  final String? availabilityZone;

  /// The Group Id of a placement group. You must specify the Placement Group
  /// <b>Group Id</b> to launch an instance in a shared placement group.
  final String? groupId;

  /// The name of the placement group for the instance.
  final String? groupName;

  /// The ID of the Dedicated Host for the instance.
  final String? hostId;

  /// The ARN of the host resource group in which to launch the instances. If you
  /// specify a host resource group ARN, omit the <b>Tenancy</b> parameter or set
  /// it to <code>host</code>.
  final String? hostResourceGroupArn;

  /// The number of the partition the instance should launch in. Valid only if the
  /// placement group strategy is set to <code>partition</code>.
  final int? partitionNumber;

  /// Reserved for future use.
  final String? spreadDomain;

  /// The tenancy of the instance. An instance with a tenancy of dedicated runs on
  /// single-tenant hardware.
  final Tenancy? tenancy;

  LaunchTemplatePlacementRequest({
    this.affinity,
    this.availabilityZone,
    this.groupId,
    this.groupName,
    this.hostId,
    this.hostResourceGroupArn,
    this.partitionNumber,
    this.spreadDomain,
    this.tenancy,
  });

  Map<String, dynamic> toJson() {
    final affinity = this.affinity;
    final availabilityZone = this.availabilityZone;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final hostId = this.hostId;
    final hostResourceGroupArn = this.hostResourceGroupArn;
    final partitionNumber = this.partitionNumber;
    final spreadDomain = this.spreadDomain;
    final tenancy = this.tenancy;
    return {
      if (affinity != null) 'Affinity': affinity,
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (groupId != null) 'GroupId': groupId,
      if (groupName != null) 'GroupName': groupName,
      if (hostId != null) 'HostId': hostId,
      if (hostResourceGroupArn != null)
        'HostResourceGroupArn': hostResourceGroupArn,
      if (partitionNumber != null) 'PartitionNumber': partitionNumber,
      if (spreadDomain != null) 'SpreadDomain': spreadDomain,
      if (tenancy != null) 'Tenancy': tenancy.value,
    };
  }
}

/// Describes the options for instance hostnames.
class LaunchTemplatePrivateDnsNameOptions {
  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// AAAA records.
  final bool? enableResourceNameDnsAAAARecord;

  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// A records.
  final bool? enableResourceNameDnsARecord;

  /// The type of hostname to assign to an instance.
  final HostnameType? hostnameType;

  LaunchTemplatePrivateDnsNameOptions({
    this.enableResourceNameDnsAAAARecord,
    this.enableResourceNameDnsARecord,
    this.hostnameType,
  });

  Map<String, dynamic> toJson() {
    final enableResourceNameDnsAAAARecord =
        this.enableResourceNameDnsAAAARecord;
    final enableResourceNameDnsARecord = this.enableResourceNameDnsARecord;
    final hostnameType = this.hostnameType;
    return {
      if (enableResourceNameDnsAAAARecord != null)
        'enableResourceNameDnsAAAARecord': enableResourceNameDnsAAAARecord,
      if (enableResourceNameDnsARecord != null)
        'enableResourceNameDnsARecord': enableResourceNameDnsARecord,
      if (hostnameType != null) 'hostnameType': hostnameType.value,
    };
  }
}

/// Describes the options for instance hostnames.
class LaunchTemplatePrivateDnsNameOptionsRequest {
  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// AAAA records.
  final bool? enableResourceNameDnsAAAARecord;

  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// A records.
  final bool? enableResourceNameDnsARecord;

  /// The type of hostname for Amazon EC2 instances. For IPv4 only subnets, an
  /// instance DNS name must be based on the instance IPv4 address. For IPv6
  /// native subnets, an instance DNS name must be based on the instance ID. For
  /// dual-stack subnets, you can specify whether DNS names use the instance IPv4
  /// address or the instance ID.
  final HostnameType? hostnameType;

  LaunchTemplatePrivateDnsNameOptionsRequest({
    this.enableResourceNameDnsAAAARecord,
    this.enableResourceNameDnsARecord,
    this.hostnameType,
  });

  Map<String, dynamic> toJson() {
    final enableResourceNameDnsAAAARecord =
        this.enableResourceNameDnsAAAARecord;
    final enableResourceNameDnsARecord = this.enableResourceNameDnsARecord;
    final hostnameType = this.hostnameType;
    return {
      if (enableResourceNameDnsAAAARecord != null)
        'EnableResourceNameDnsAAAARecord': enableResourceNameDnsAAAARecord,
      if (enableResourceNameDnsARecord != null)
        'EnableResourceNameDnsARecord': enableResourceNameDnsARecord,
      if (hostnameType != null) 'HostnameType': hostnameType.value,
    };
  }
}

/// Describes the launch template to use.
class LaunchTemplateSpecification {
  /// The ID of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template name,
  /// but not both.
  final String? launchTemplateId;

  /// The name of the launch template.
  ///
  /// You must specify either the launch template ID or the launch template name,
  /// but not both.
  final String? launchTemplateName;

  /// The launch template version number, <code>$Latest</code>, or
  /// <code>$Default</code>.
  ///
  /// A value of <code>$Latest</code> uses the latest version of the launch
  /// template.
  ///
  /// A value of <code>$Default</code> uses the default version of the launch
  /// template.
  ///
  /// Default: The default version of the launch template.
  final String? version;

  LaunchTemplateSpecification({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });

  Map<String, dynamic> toJson() {
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final version = this.version;
    return {
      if (launchTemplateId != null) 'LaunchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'LaunchTemplateName': launchTemplateName,
      if (version != null) 'Version': version,
    };
  }
}

/// The options for Spot Instances.
class LaunchTemplateSpotMarketOptions {
  /// The required duration for the Spot Instances (also known as Spot blocks), in
  /// minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
  /// 360).
  final int? blockDurationMinutes;

  /// The behavior when a Spot Instance is interrupted.
  final InstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The maximum hourly price you're willing to pay for the Spot Instances. We do
  /// not recommend using this parameter because it can lead to increased
  /// interruptions. If you do not specify this parameter, you will pay the
  /// current Spot price.
  /// <important>
  /// If you specify a maximum price, your Spot Instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? maxPrice;

  /// The Spot Instance request type.
  final SpotInstanceType? spotInstanceType;

  /// The end date of the request. For a one-time request, the request remains
  /// active until all instances launch, the request is canceled, or this date is
  /// reached. If the request is persistent, it remains active until it is
  /// canceled or this date and time is reached.
  final DateTime? validUntil;

  LaunchTemplateSpotMarketOptions({
    this.blockDurationMinutes,
    this.instanceInterruptionBehavior,
    this.maxPrice,
    this.spotInstanceType,
    this.validUntil,
  });

  Map<String, dynamic> toJson() {
    final blockDurationMinutes = this.blockDurationMinutes;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final maxPrice = this.maxPrice;
    final spotInstanceType = this.spotInstanceType;
    final validUntil = this.validUntil;
    return {
      if (blockDurationMinutes != null)
        'blockDurationMinutes': blockDurationMinutes,
      if (instanceInterruptionBehavior != null)
        'instanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (maxPrice != null) 'maxPrice': maxPrice,
      if (spotInstanceType != null) 'spotInstanceType': spotInstanceType.value,
      if (validUntil != null) 'validUntil': iso8601ToJson(validUntil),
    };
  }
}

/// The options for Spot Instances.
class LaunchTemplateSpotMarketOptionsRequest {
  /// Deprecated.
  final int? blockDurationMinutes;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final InstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The maximum hourly price you're willing to pay for the Spot Instances. We do
  /// not recommend using this parameter because it can lead to increased
  /// interruptions. If you do not specify this parameter, you will pay the
  /// current Spot price.
  /// <important>
  /// If you specify a maximum price, your Spot Instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? maxPrice;

  /// The Spot Instance request type.
  final SpotInstanceType? spotInstanceType;

  /// The end date of the request, in UTC format
  /// (<i>YYYY-MM-DD</i>T<i>HH:MM:SS</i>Z). Supported only for persistent
  /// requests.
  ///
  /// <ul>
  /// <li>
  /// For a persistent request, the request remains active until the
  /// <code>ValidUntil</code> date and time is reached. Otherwise, the request
  /// remains active until you cancel it.
  /// </li>
  /// <li>
  /// For a one-time request, <code>ValidUntil</code> is not supported. The
  /// request remains active until all instances launch or you cancel the request.
  /// </li>
  /// </ul>
  /// Default: 7 days from the current date
  final DateTime? validUntil;

  LaunchTemplateSpotMarketOptionsRequest({
    this.blockDurationMinutes,
    this.instanceInterruptionBehavior,
    this.maxPrice,
    this.spotInstanceType,
    this.validUntil,
  });

  Map<String, dynamic> toJson() {
    final blockDurationMinutes = this.blockDurationMinutes;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final maxPrice = this.maxPrice;
    final spotInstanceType = this.spotInstanceType;
    final validUntil = this.validUntil;
    return {
      if (blockDurationMinutes != null)
        'BlockDurationMinutes': blockDurationMinutes,
      if (instanceInterruptionBehavior != null)
        'InstanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (maxPrice != null) 'MaxPrice': maxPrice,
      if (spotInstanceType != null) 'SpotInstanceType': spotInstanceType.value,
      if (validUntil != null) 'ValidUntil': iso8601ToJson(validUntil),
    };
  }
}

/// The tags specification for the launch template.
class LaunchTemplateTagSpecification {
  /// The type of resource to tag.
  final ResourceType? resourceType;

  /// The tags for the resource.
  final List<Tag>? tags;

  LaunchTemplateTagSpecification({
    this.resourceType,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final resourceType = this.resourceType;
    final tags = this.tags;
    return {
      if (resourceType != null) 'resourceType': resourceType.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// The tags specification for the resources that are created during instance
/// launch.
class LaunchTemplateTagSpecificationRequest {
  /// The type of resource to tag.
  ///
  /// Valid Values lists all resource types for Amazon EC2 that can be tagged.
  /// When you create a launch template, you can specify tags for the following
  /// resource types only: <code>instance</code> | <code>volume</code> |
  /// <code>network-interface</code> | <code>spot-instances-request</code>. If the
  /// instance does not include the resource type that you specify, the instance
  /// launch fails. For example, not all instance types include a volume.
  ///
  /// To tag a resource after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  final ResourceType? resourceType;

  /// The tags to apply to the resource.
  final List<Tag>? tags;

  LaunchTemplateTagSpecificationRequest({
    this.resourceType,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final resourceType = this.resourceType;
    final tags = this.tags;
    return {
      if (resourceType != null) 'ResourceType': resourceType.value,
      if (tags != null) 'Tag': tags,
    };
  }
}

/// Describes a launch template version.
class LaunchTemplateVersion {
  /// The time the version was created.
  final DateTime? createTime;

  /// The principal that created the version.
  final String? createdBy;

  /// Indicates whether the version is the default version.
  final bool? defaultVersion;

  /// Information about the launch template.
  final ResponseLaunchTemplateData? launchTemplateData;

  /// The ID of the launch template.
  final String? launchTemplateId;

  /// The name of the launch template.
  final String? launchTemplateName;

  /// The description for the version.
  final String? versionDescription;

  /// The version number.
  final int? versionNumber;

  LaunchTemplateVersion({
    this.createTime,
    this.createdBy,
    this.defaultVersion,
    this.launchTemplateData,
    this.launchTemplateId,
    this.launchTemplateName,
    this.versionDescription,
    this.versionNumber,
  });

  Map<String, dynamic> toJson() {
    final createTime = this.createTime;
    final createdBy = this.createdBy;
    final defaultVersion = this.defaultVersion;
    final launchTemplateData = this.launchTemplateData;
    final launchTemplateId = this.launchTemplateId;
    final launchTemplateName = this.launchTemplateName;
    final versionDescription = this.versionDescription;
    final versionNumber = this.versionNumber;
    return {
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (createdBy != null) 'createdBy': createdBy,
      if (defaultVersion != null) 'defaultVersion': defaultVersion,
      if (launchTemplateData != null) 'launchTemplateData': launchTemplateData,
      if (launchTemplateId != null) 'launchTemplateId': launchTemplateId,
      if (launchTemplateName != null) 'launchTemplateName': launchTemplateName,
      if (versionDescription != null) 'versionDescription': versionDescription,
      if (versionNumber != null) 'versionNumber': versionNumber,
    };
  }
}

/// Describes the monitoring for the instance.
class LaunchTemplatesMonitoring {
  /// Indicates whether detailed monitoring is enabled. Otherwise, basic
  /// monitoring is enabled.
  final bool? enabled;

  LaunchTemplatesMonitoring({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'enabled': enabled,
    };
  }
}

/// Describes the monitoring for the instance.
class LaunchTemplatesMonitoringRequest {
  /// Specify <code>true</code> to enable detailed monitoring. Otherwise, basic
  /// monitoring is enabled.
  final bool? enabled;

  LaunchTemplatesMonitoringRequest({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

/// Describes a license configuration.
class LicenseConfiguration {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String? licenseConfigurationArn;

  LicenseConfiguration({
    this.licenseConfigurationArn,
  });

  Map<String, dynamic> toJson() {
    final licenseConfigurationArn = this.licenseConfigurationArn;
    return {
      if (licenseConfigurationArn != null)
        'licenseConfigurationArn': licenseConfigurationArn,
    };
  }
}

/// Describes a license configuration.
class LicenseConfigurationRequest {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String? licenseConfigurationArn;

  LicenseConfigurationRequest({
    this.licenseConfigurationArn,
  });

  Map<String, dynamic> toJson() {
    final licenseConfigurationArn = this.licenseConfigurationArn;
    return {
      if (licenseConfigurationArn != null)
        'LicenseConfigurationArn': licenseConfigurationArn,
    };
  }
}

class ListImagesInRecycleBinResult {
  /// Information about the AMIs.
  final List<ImageRecycleBinInfo>? images;

  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  ListImagesInRecycleBinResult({
    this.images,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final images = this.images;
    final nextToken = this.nextToken;
    return {
      if (images != null) 'imageSet': images,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class ListSnapshotsInRecycleBinResult {
  /// The token to include in another request to get the next page of items. This
  /// value is <code>null</code> when there are no more items to return.
  final String? nextToken;

  /// Information about the snapshots.
  final List<SnapshotRecycleBinInfo>? snapshots;

  ListSnapshotsInRecycleBinResult({
    this.nextToken,
    this.snapshots,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final snapshots = this.snapshots;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (snapshots != null) 'snapshotSet': snapshots,
    };
  }
}

enum ListingState {
  available('available'),
  sold('sold'),
  cancelled('cancelled'),
  pending('pending'),
  ;

  final String value;

  const ListingState(this.value);

  static ListingState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ListingState'));
}

enum ListingStatus {
  active('active'),
  pending('pending'),
  cancelled('cancelled'),
  closed('closed'),
  ;

  final String value;

  const ListingStatus(this.value);

  static ListingStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ListingStatus'));
}

/// Describes the Classic Load Balancers and target groups to attach to a Spot
/// Fleet request.
class LoadBalancersConfig {
  /// The Classic Load Balancers.
  final ClassicLoadBalancersConfig? classicLoadBalancersConfig;

  /// The target groups.
  final TargetGroupsConfig? targetGroupsConfig;

  LoadBalancersConfig({
    this.classicLoadBalancersConfig,
    this.targetGroupsConfig,
  });

  Map<String, dynamic> toJson() {
    final classicLoadBalancersConfig = this.classicLoadBalancersConfig;
    final targetGroupsConfig = this.targetGroupsConfig;
    return {
      if (classicLoadBalancersConfig != null)
        'classicLoadBalancersConfig': classicLoadBalancersConfig,
      if (targetGroupsConfig != null) 'targetGroupsConfig': targetGroupsConfig,
    };
  }
}

/// Describes a load permission.
class LoadPermission {
  /// The name of the group.
  final PermissionGroup? group;

  /// The Amazon Web Services account ID.
  final String? userId;

  LoadPermission({
    this.group,
    this.userId,
  });

  Map<String, dynamic> toJson() {
    final group = this.group;
    final userId = this.userId;
    return {
      if (group != null) 'group': group.value,
      if (userId != null) 'userId': userId,
    };
  }
}

/// Describes modifications to the load permissions of an Amazon FPGA image
/// (AFI).
class LoadPermissionModifications {
  /// The load permissions to add.
  final List<LoadPermissionRequest>? add;

  /// The load permissions to remove.
  final List<LoadPermissionRequest>? remove;

  LoadPermissionModifications({
    this.add,
    this.remove,
  });

  Map<String, dynamic> toJson() {
    final add = this.add;
    final remove = this.remove;
    return {
      if (add != null) 'Add': add,
      if (remove != null) 'Remove': remove,
    };
  }
}

/// Describes a load permission.
class LoadPermissionRequest {
  /// The name of the group.
  final PermissionGroup? group;

  /// The Amazon Web Services account ID.
  final String? userId;

  LoadPermissionRequest({
    this.group,
    this.userId,
  });

  Map<String, dynamic> toJson() {
    final group = this.group;
    final userId = this.userId;
    return {
      if (group != null) 'Group': group.value,
      if (userId != null) 'UserId': userId,
    };
  }
}

/// Describes a local gateway.
class LocalGateway {
  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The ID of the Amazon Web Services account that owns the local gateway.
  final String? ownerId;

  /// The state of the local gateway.
  final String? state;

  /// The tags assigned to the local gateway.
  final List<Tag>? tags;

  LocalGateway({
    this.localGatewayId,
    this.outpostArn,
    this.ownerId,
    this.state,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final localGatewayId = this.localGatewayId;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    return {
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes a route for a local gateway route table.
class LocalGatewayRoute {
  /// The ID of the customer-owned address pool.
  final String? coipPoolId;

  /// The CIDR block used for destination matches.
  final String? destinationCidrBlock;

  /// The ID of the prefix list.
  final String? destinationPrefixListId;

  /// The Amazon Resource Name (ARN) of the local gateway route table.
  final String? localGatewayRouteTableArn;

  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  /// The ID of the virtual interface group.
  final String? localGatewayVirtualInterfaceGroupId;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The ID of the Amazon Web Services account that owns the local gateway route.
  final String? ownerId;

  /// The state of the route.
  final LocalGatewayRouteState? state;

  /// The ID of the subnet.
  final String? subnetId;

  /// The route type.
  final LocalGatewayRouteType? type;

  LocalGatewayRoute({
    this.coipPoolId,
    this.destinationCidrBlock,
    this.destinationPrefixListId,
    this.localGatewayRouteTableArn,
    this.localGatewayRouteTableId,
    this.localGatewayVirtualInterfaceGroupId,
    this.networkInterfaceId,
    this.ownerId,
    this.state,
    this.subnetId,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final coipPoolId = this.coipPoolId;
    final destinationCidrBlock = this.destinationCidrBlock;
    final destinationPrefixListId = this.destinationPrefixListId;
    final localGatewayRouteTableArn = this.localGatewayRouteTableArn;
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    final localGatewayVirtualInterfaceGroupId =
        this.localGatewayVirtualInterfaceGroupId;
    final networkInterfaceId = this.networkInterfaceId;
    final ownerId = this.ownerId;
    final state = this.state;
    final subnetId = this.subnetId;
    final type = this.type;
    return {
      if (coipPoolId != null) 'coipPoolId': coipPoolId,
      if (destinationCidrBlock != null)
        'destinationCidrBlock': destinationCidrBlock,
      if (destinationPrefixListId != null)
        'destinationPrefixListId': destinationPrefixListId,
      if (localGatewayRouteTableArn != null)
        'localGatewayRouteTableArn': localGatewayRouteTableArn,
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
      if (localGatewayVirtualInterfaceGroupId != null)
        'localGatewayVirtualInterfaceGroupId':
            localGatewayVirtualInterfaceGroupId,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state.value,
      if (subnetId != null) 'subnetId': subnetId,
      if (type != null) 'type': type.value,
    };
  }
}

enum LocalGatewayRouteState {
  pending('pending'),
  active('active'),
  blackhole('blackhole'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const LocalGatewayRouteState(this.value);

  static LocalGatewayRouteState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LocalGatewayRouteState'));
}

/// Describes a local gateway route table.
class LocalGatewayRouteTable {
  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The Amazon Resource Name (ARN) of the local gateway route table.
  final String? localGatewayRouteTableArn;

  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  /// The mode of the local gateway route table.
  final LocalGatewayRouteTableMode? mode;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The ID of the Amazon Web Services account that owns the local gateway route
  /// table.
  final String? ownerId;

  /// The state of the local gateway route table.
  final String? state;

  /// Information about the state change.
  final StateReason? stateReason;

  /// The tags assigned to the local gateway route table.
  final List<Tag>? tags;

  LocalGatewayRouteTable({
    this.localGatewayId,
    this.localGatewayRouteTableArn,
    this.localGatewayRouteTableId,
    this.mode,
    this.outpostArn,
    this.ownerId,
    this.state,
    this.stateReason,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final localGatewayId = this.localGatewayId;
    final localGatewayRouteTableArn = this.localGatewayRouteTableArn;
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    final mode = this.mode;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final state = this.state;
    final stateReason = this.stateReason;
    final tags = this.tags;
    return {
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (localGatewayRouteTableArn != null)
        'localGatewayRouteTableArn': localGatewayRouteTableArn,
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
      if (mode != null) 'mode': mode.value,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state,
      if (stateReason != null) 'stateReason': stateReason,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum LocalGatewayRouteTableMode {
  directVpcRouting('direct-vpc-routing'),
  coip('coip'),
  ;

  final String value;

  const LocalGatewayRouteTableMode(this.value);

  static LocalGatewayRouteTableMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LocalGatewayRouteTableMode'));
}

/// Describes an association between a local gateway route table and a virtual
/// interface group.
class LocalGatewayRouteTableVirtualInterfaceGroupAssociation {
  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The Amazon Resource Name (ARN) of the local gateway route table for the
  /// virtual interface group.
  final String? localGatewayRouteTableArn;

  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  /// The ID of the association.
  final String? localGatewayRouteTableVirtualInterfaceGroupAssociationId;

  /// The ID of the virtual interface group.
  final String? localGatewayVirtualInterfaceGroupId;

  /// The ID of the Amazon Web Services account that owns the local gateway
  /// virtual interface group association.
  final String? ownerId;

  /// The state of the association.
  final String? state;

  /// The tags assigned to the association.
  final List<Tag>? tags;

  LocalGatewayRouteTableVirtualInterfaceGroupAssociation({
    this.localGatewayId,
    this.localGatewayRouteTableArn,
    this.localGatewayRouteTableId,
    this.localGatewayRouteTableVirtualInterfaceGroupAssociationId,
    this.localGatewayVirtualInterfaceGroupId,
    this.ownerId,
    this.state,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final localGatewayId = this.localGatewayId;
    final localGatewayRouteTableArn = this.localGatewayRouteTableArn;
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    final localGatewayRouteTableVirtualInterfaceGroupAssociationId =
        this.localGatewayRouteTableVirtualInterfaceGroupAssociationId;
    final localGatewayVirtualInterfaceGroupId =
        this.localGatewayVirtualInterfaceGroupId;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    return {
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (localGatewayRouteTableArn != null)
        'localGatewayRouteTableArn': localGatewayRouteTableArn,
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
      if (localGatewayRouteTableVirtualInterfaceGroupAssociationId != null)
        'localGatewayRouteTableVirtualInterfaceGroupAssociationId':
            localGatewayRouteTableVirtualInterfaceGroupAssociationId,
      if (localGatewayVirtualInterfaceGroupId != null)
        'localGatewayVirtualInterfaceGroupId':
            localGatewayVirtualInterfaceGroupId,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes an association between a local gateway route table and a VPC.
class LocalGatewayRouteTableVpcAssociation {
  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The Amazon Resource Name (ARN) of the local gateway route table for the
  /// association.
  final String? localGatewayRouteTableArn;

  /// The ID of the local gateway route table.
  final String? localGatewayRouteTableId;

  /// The ID of the association.
  final String? localGatewayRouteTableVpcAssociationId;

  /// The ID of the Amazon Web Services account that owns the local gateway route
  /// table for the association.
  final String? ownerId;

  /// The state of the association.
  final String? state;

  /// The tags assigned to the association.
  final List<Tag>? tags;

  /// The ID of the VPC.
  final String? vpcId;

  LocalGatewayRouteTableVpcAssociation({
    this.localGatewayId,
    this.localGatewayRouteTableArn,
    this.localGatewayRouteTableId,
    this.localGatewayRouteTableVpcAssociationId,
    this.ownerId,
    this.state,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final localGatewayId = this.localGatewayId;
    final localGatewayRouteTableArn = this.localGatewayRouteTableArn;
    final localGatewayRouteTableId = this.localGatewayRouteTableId;
    final localGatewayRouteTableVpcAssociationId =
        this.localGatewayRouteTableVpcAssociationId;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (localGatewayRouteTableArn != null)
        'localGatewayRouteTableArn': localGatewayRouteTableArn,
      if (localGatewayRouteTableId != null)
        'localGatewayRouteTableId': localGatewayRouteTableId,
      if (localGatewayRouteTableVpcAssociationId != null)
        'localGatewayRouteTableVpcAssociationId':
            localGatewayRouteTableVpcAssociationId,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum LocalGatewayRouteType {
  static('static'),
  propagated('propagated'),
  ;

  final String value;

  const LocalGatewayRouteType(this.value);

  static LocalGatewayRouteType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum LocalGatewayRouteType'));
}

/// Describes a local gateway virtual interface.
class LocalGatewayVirtualInterface {
  /// The local address.
  final String? localAddress;

  /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the
  /// local gateway.
  final int? localBgpAsn;

  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The ID of the virtual interface.
  final String? localGatewayVirtualInterfaceId;

  /// The ID of the Amazon Web Services account that owns the local gateway
  /// virtual interface.
  final String? ownerId;

  /// The peer address.
  final String? peerAddress;

  /// The peer BGP ASN.
  final int? peerBgpAsn;

  /// The tags assigned to the virtual interface.
  final List<Tag>? tags;

  /// The ID of the VLAN.
  final int? vlan;

  LocalGatewayVirtualInterface({
    this.localAddress,
    this.localBgpAsn,
    this.localGatewayId,
    this.localGatewayVirtualInterfaceId,
    this.ownerId,
    this.peerAddress,
    this.peerBgpAsn,
    this.tags,
    this.vlan,
  });

  Map<String, dynamic> toJson() {
    final localAddress = this.localAddress;
    final localBgpAsn = this.localBgpAsn;
    final localGatewayId = this.localGatewayId;
    final localGatewayVirtualInterfaceId = this.localGatewayVirtualInterfaceId;
    final ownerId = this.ownerId;
    final peerAddress = this.peerAddress;
    final peerBgpAsn = this.peerBgpAsn;
    final tags = this.tags;
    final vlan = this.vlan;
    return {
      if (localAddress != null) 'localAddress': localAddress,
      if (localBgpAsn != null) 'localBgpAsn': localBgpAsn,
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (localGatewayVirtualInterfaceId != null)
        'localGatewayVirtualInterfaceId': localGatewayVirtualInterfaceId,
      if (ownerId != null) 'ownerId': ownerId,
      if (peerAddress != null) 'peerAddress': peerAddress,
      if (peerBgpAsn != null) 'peerBgpAsn': peerBgpAsn,
      if (tags != null) 'tagSet': tags,
      if (vlan != null) 'vlan': vlan,
    };
  }
}

/// Describes a local gateway virtual interface group.
class LocalGatewayVirtualInterfaceGroup {
  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The ID of the virtual interface group.
  final String? localGatewayVirtualInterfaceGroupId;

  /// The IDs of the virtual interfaces.
  final List<String>? localGatewayVirtualInterfaceIds;

  /// The ID of the Amazon Web Services account that owns the local gateway
  /// virtual interface group.
  final String? ownerId;

  /// The tags assigned to the virtual interface group.
  final List<Tag>? tags;

  LocalGatewayVirtualInterfaceGroup({
    this.localGatewayId,
    this.localGatewayVirtualInterfaceGroupId,
    this.localGatewayVirtualInterfaceIds,
    this.ownerId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final localGatewayId = this.localGatewayId;
    final localGatewayVirtualInterfaceGroupId =
        this.localGatewayVirtualInterfaceGroupId;
    final localGatewayVirtualInterfaceIds =
        this.localGatewayVirtualInterfaceIds;
    final ownerId = this.ownerId;
    final tags = this.tags;
    return {
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (localGatewayVirtualInterfaceGroupId != null)
        'localGatewayVirtualInterfaceGroupId':
            localGatewayVirtualInterfaceGroupId,
      if (localGatewayVirtualInterfaceIds != null)
        'localGatewayVirtualInterfaceIdSet': localGatewayVirtualInterfaceIds,
      if (ownerId != null) 'ownerId': ownerId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum LocalStorage {
  included('included'),
  required('required'),
  excluded('excluded'),
  ;

  final String value;

  const LocalStorage(this.value);

  static LocalStorage fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum LocalStorage'));
}

enum LocalStorageType {
  hdd('hdd'),
  ssd('ssd'),
  ;

  final String value;

  const LocalStorageType(this.value);

  static LocalStorageType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum LocalStorageType'));
}

enum LocationType {
  region('region'),
  availabilityZone('availability-zone'),
  availabilityZoneId('availability-zone-id'),
  outpost('outpost'),
  ;

  final String value;

  const LocationType(this.value);

  static LocationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum LocationType'));
}

enum LockMode {
  compliance('compliance'),
  governance('governance'),
  ;

  final String value;

  const LockMode(this.value);

  static LockMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum LockMode'));
}

class LockSnapshotResult {
  /// The compliance mode cooling-off period, in hours.
  final int? coolOffPeriod;

  /// The date and time at which the compliance mode cooling-off period expires,
  /// in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? coolOffPeriodExpiresOn;

  /// The date and time at which the snapshot was locked, in the UTC time zone
  /// (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? lockCreatedOn;

  /// The period of time for which the snapshot is locked, in days.
  final int? lockDuration;

  /// The date and time at which the lock duration started, in the UTC time zone
  /// (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? lockDurationStartTime;

  /// The date and time at which the lock will expire, in the UTC time zone
  /// (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? lockExpiresOn;

  /// The state of the snapshot lock. Valid states include:
  ///
  /// <ul>
  /// <li>
  /// <code>compliance-cooloff</code> - The snapshot has been locked in compliance
  /// mode but it is still within the cooling-off period. The snapshot can't be
  /// deleted, but it can be unlocked and the lock settings can be modified by
  /// users with appropriate permissions.
  /// </li>
  /// <li>
  /// <code>governance</code> - The snapshot is locked in governance mode. The
  /// snapshot can't be deleted, but it can be unlocked and the lock settings can
  /// be modified by users with appropriate permissions.
  /// </li>
  /// <li>
  /// <code>compliance</code> - The snapshot is locked in compliance mode and the
  /// cooling-off period has expired. The snapshot can't be unlocked or deleted.
  /// The lock duration can only be increased by users with appropriate
  /// permissions.
  /// </li>
  /// <li>
  /// <code>expired</code> - The snapshot was locked in compliance or governance
  /// mode but the lock duration has expired. The snapshot is not locked and can
  /// be deleted.
  /// </li>
  /// </ul>
  final LockState? lockState;

  /// The ID of the snapshot
  final String? snapshotId;

  LockSnapshotResult({
    this.coolOffPeriod,
    this.coolOffPeriodExpiresOn,
    this.lockCreatedOn,
    this.lockDuration,
    this.lockDurationStartTime,
    this.lockExpiresOn,
    this.lockState,
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final coolOffPeriod = this.coolOffPeriod;
    final coolOffPeriodExpiresOn = this.coolOffPeriodExpiresOn;
    final lockCreatedOn = this.lockCreatedOn;
    final lockDuration = this.lockDuration;
    final lockDurationStartTime = this.lockDurationStartTime;
    final lockExpiresOn = this.lockExpiresOn;
    final lockState = this.lockState;
    final snapshotId = this.snapshotId;
    return {
      if (coolOffPeriod != null) 'coolOffPeriod': coolOffPeriod,
      if (coolOffPeriodExpiresOn != null)
        'coolOffPeriodExpiresOn': iso8601ToJson(coolOffPeriodExpiresOn),
      if (lockCreatedOn != null) 'lockCreatedOn': iso8601ToJson(lockCreatedOn),
      if (lockDuration != null) 'lockDuration': lockDuration,
      if (lockDurationStartTime != null)
        'lockDurationStartTime': iso8601ToJson(lockDurationStartTime),
      if (lockExpiresOn != null) 'lockExpiresOn': iso8601ToJson(lockExpiresOn),
      if (lockState != null) 'lockState': lockState.value,
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

enum LockState {
  compliance('compliance'),
  governance('governance'),
  complianceCooloff('compliance-cooloff'),
  expired('expired'),
  ;

  final String value;

  const LockState(this.value);

  static LockState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum LockState'));
}

/// Information about a locked snapshot.
class LockedSnapshotsInfo {
  /// The compliance mode cooling-off period, in hours.
  final int? coolOffPeriod;

  /// The date and time at which the compliance mode cooling-off period expires,
  /// in the UTC time zone (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? coolOffPeriodExpiresOn;

  /// The date and time at which the snapshot was locked, in the UTC time zone
  /// (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? lockCreatedOn;

  /// The period of time for which the snapshot is locked, in days.
  final int? lockDuration;

  /// The date and time at which the lock duration started, in the UTC time zone
  /// (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  ///
  /// If you lock a snapshot that is in the <code>pending</code> state, the lock
  /// duration starts only once the snapshot enters the <code>completed</code>
  /// state.
  final DateTime? lockDurationStartTime;

  /// The date and time at which the lock will expire, in the UTC time zone
  /// (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>).
  final DateTime? lockExpiresOn;

  /// The state of the snapshot lock. Valid states include:
  ///
  /// <ul>
  /// <li>
  /// <code>compliance-cooloff</code> - The snapshot has been locked in compliance
  /// mode but it is still within the cooling-off period. The snapshot can't be
  /// deleted, but it can be unlocked and the lock settings can be modified by
  /// users with appropriate permissions.
  /// </li>
  /// <li>
  /// <code>governance</code> - The snapshot is locked in governance mode. The
  /// snapshot can't be deleted, but it can be unlocked and the lock settings can
  /// be modified by users with appropriate permissions.
  /// </li>
  /// <li>
  /// <code>compliance</code> - The snapshot is locked in compliance mode and the
  /// cooling-off period has expired. The snapshot can't be unlocked or deleted.
  /// The lock duration can only be increased by users with appropriate
  /// permissions.
  /// </li>
  /// <li>
  /// <code>expired</code> - The snapshot was locked in compliance or governance
  /// mode but the lock duration has expired. The snapshot is not locked and can
  /// be deleted.
  /// </li>
  /// </ul>
  final LockState? lockState;

  /// The account ID of the Amazon Web Services account that owns the snapshot.
  final String? ownerId;

  /// The ID of the snapshot.
  final String? snapshotId;

  LockedSnapshotsInfo({
    this.coolOffPeriod,
    this.coolOffPeriodExpiresOn,
    this.lockCreatedOn,
    this.lockDuration,
    this.lockDurationStartTime,
    this.lockExpiresOn,
    this.lockState,
    this.ownerId,
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final coolOffPeriod = this.coolOffPeriod;
    final coolOffPeriodExpiresOn = this.coolOffPeriodExpiresOn;
    final lockCreatedOn = this.lockCreatedOn;
    final lockDuration = this.lockDuration;
    final lockDurationStartTime = this.lockDurationStartTime;
    final lockExpiresOn = this.lockExpiresOn;
    final lockState = this.lockState;
    final ownerId = this.ownerId;
    final snapshotId = this.snapshotId;
    return {
      if (coolOffPeriod != null) 'coolOffPeriod': coolOffPeriod,
      if (coolOffPeriodExpiresOn != null)
        'coolOffPeriodExpiresOn': iso8601ToJson(coolOffPeriodExpiresOn),
      if (lockCreatedOn != null) 'lockCreatedOn': iso8601ToJson(lockCreatedOn),
      if (lockDuration != null) 'lockDuration': lockDuration,
      if (lockDurationStartTime != null)
        'lockDurationStartTime': iso8601ToJson(lockDurationStartTime),
      if (lockExpiresOn != null) 'lockExpiresOn': iso8601ToJson(lockExpiresOn),
      if (lockState != null) 'lockState': lockState.value,
      if (ownerId != null) 'ownerId': ownerId,
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

enum LogDestinationType {
  cloudWatchLogs('cloud-watch-logs'),
  s3('s3'),
  kinesisDataFirehose('kinesis-data-firehose'),
  ;

  final String value;

  const LogDestinationType(this.value);

  static LogDestinationType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum LogDestinationType'));
}

/// Information about the EC2 Mac Dedicated Host.
class MacHost {
  /// The EC2 Mac Dedicated Host ID.
  final String? hostId;

  /// The latest macOS versions that the EC2 Mac Dedicated Host can launch without
  /// being upgraded.
  final List<String>? macOSLatestSupportedVersions;

  MacHost({
    this.hostId,
    this.macOSLatestSupportedVersions,
  });

  Map<String, dynamic> toJson() {
    final hostId = this.hostId;
    final macOSLatestSupportedVersions = this.macOSLatestSupportedVersions;
    return {
      if (hostId != null) 'hostId': hostId,
      if (macOSLatestSupportedVersions != null)
        'macOSLatestSupportedVersionSet': macOSLatestSupportedVersions,
    };
  }
}

/// Details for Site-to-Site VPN tunnel endpoint maintenance events.
class MaintenanceDetails {
  /// Timestamp of last applied maintenance.
  final DateTime? lastMaintenanceApplied;

  /// The timestamp after which Amazon Web Services will automatically apply
  /// maintenance.
  final DateTime? maintenanceAutoAppliedAfter;

  /// Verify existence of a pending maintenance.
  final String? pendingMaintenance;

  MaintenanceDetails({
    this.lastMaintenanceApplied,
    this.maintenanceAutoAppliedAfter,
    this.pendingMaintenance,
  });

  Map<String, dynamic> toJson() {
    final lastMaintenanceApplied = this.lastMaintenanceApplied;
    final maintenanceAutoAppliedAfter = this.maintenanceAutoAppliedAfter;
    final pendingMaintenance = this.pendingMaintenance;
    return {
      if (lastMaintenanceApplied != null)
        'lastMaintenanceApplied': iso8601ToJson(lastMaintenanceApplied),
      if (maintenanceAutoAppliedAfter != null)
        'maintenanceAutoAppliedAfter':
            iso8601ToJson(maintenanceAutoAppliedAfter),
      if (pendingMaintenance != null) 'pendingMaintenance': pendingMaintenance,
    };
  }
}

/// Describes a managed prefix list.
class ManagedPrefixList {
  /// The IP address version.
  final String? addressFamily;

  /// The maximum number of entries for the prefix list.
  final int? maxEntries;

  /// The ID of the owner of the prefix list.
  final String? ownerId;

  /// The Amazon Resource Name (ARN) for the prefix list.
  final String? prefixListArn;

  /// The ID of the prefix list.
  final String? prefixListId;

  /// The name of the prefix list.
  final String? prefixListName;

  /// The current state of the prefix list.
  final PrefixListState? state;

  /// The state message.
  final String? stateMessage;

  /// The tags for the prefix list.
  final List<Tag>? tags;

  /// The version of the prefix list.
  final int? version;

  ManagedPrefixList({
    this.addressFamily,
    this.maxEntries,
    this.ownerId,
    this.prefixListArn,
    this.prefixListId,
    this.prefixListName,
    this.state,
    this.stateMessage,
    this.tags,
    this.version,
  });

  Map<String, dynamic> toJson() {
    final addressFamily = this.addressFamily;
    final maxEntries = this.maxEntries;
    final ownerId = this.ownerId;
    final prefixListArn = this.prefixListArn;
    final prefixListId = this.prefixListId;
    final prefixListName = this.prefixListName;
    final state = this.state;
    final stateMessage = this.stateMessage;
    final tags = this.tags;
    final version = this.version;
    return {
      if (addressFamily != null) 'addressFamily': addressFamily,
      if (maxEntries != null) 'maxEntries': maxEntries,
      if (ownerId != null) 'ownerId': ownerId,
      if (prefixListArn != null) 'prefixListArn': prefixListArn,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (prefixListName != null) 'prefixListName': prefixListName,
      if (state != null) 'state': state.value,
      if (stateMessage != null) 'stateMessage': stateMessage,
      if (tags != null) 'tagSet': tags,
      if (version != null) 'version': version,
    };
  }
}

enum MarketType {
  spot('spot'),
  capacityBlock('capacity-block'),
  ;

  final String value;

  const MarketType(this.value);

  static MarketType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum MarketType'));
}

/// Describes the media accelerators for the instance type.
class MediaAcceleratorInfo {
  /// Describes the media accelerators for the instance type.
  final List<MediaDeviceInfo>? accelerators;

  /// The total size of the memory for the media accelerators for the instance
  /// type, in MiB.
  final int? totalMediaMemoryInMiB;

  MediaAcceleratorInfo({
    this.accelerators,
    this.totalMediaMemoryInMiB,
  });

  Map<String, dynamic> toJson() {
    final accelerators = this.accelerators;
    final totalMediaMemoryInMiB = this.totalMediaMemoryInMiB;
    return {
      if (accelerators != null) 'accelerators': accelerators,
      if (totalMediaMemoryInMiB != null)
        'totalMediaMemoryInMiB': totalMediaMemoryInMiB,
    };
  }
}

/// Describes the media accelerators for the instance type.
class MediaDeviceInfo {
  /// The number of media accelerators for the instance type.
  final int? count;

  /// The manufacturer of the media accelerator.
  final String? manufacturer;

  /// Describes the memory available to the media accelerator.
  final MediaDeviceMemoryInfo? memoryInfo;

  /// The name of the media accelerator.
  final String? name;

  MediaDeviceInfo({
    this.count,
    this.manufacturer,
    this.memoryInfo,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final manufacturer = this.manufacturer;
    final memoryInfo = this.memoryInfo;
    final name = this.name;
    return {
      if (count != null) 'count': count,
      if (manufacturer != null) 'manufacturer': manufacturer,
      if (memoryInfo != null) 'memoryInfo': memoryInfo,
      if (name != null) 'name': name,
    };
  }
}

/// Describes the memory available to the media accelerator.
class MediaDeviceMemoryInfo {
  /// The size of the memory available to each media accelerator, in MiB.
  final int? sizeInMiB;

  MediaDeviceMemoryInfo({
    this.sizeInMiB,
  });

  Map<String, dynamic> toJson() {
    final sizeInMiB = this.sizeInMiB;
    return {
      if (sizeInMiB != null) 'sizeInMiB': sizeInMiB,
    };
  }
}

enum MembershipType {
  static('static'),
  igmp('igmp'),
  ;

  final String value;

  const MembershipType(this.value);

  static MembershipType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MembershipType'));
}

/// The minimum and maximum amount of memory per vCPU, in GiB.
/// <p/>
class MemoryGiBPerVCpu {
  /// The maximum amount of memory per vCPU, in GiB. If this parameter is not
  /// specified, there is no maximum limit.
  final double? max;

  /// The minimum amount of memory per vCPU, in GiB. If this parameter is not
  /// specified, there is no minimum limit.
  final double? min;

  MemoryGiBPerVCpu({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum amount of memory per vCPU, in GiB.
class MemoryGiBPerVCpuRequest {
  /// The maximum amount of memory per vCPU, in GiB. To specify no maximum limit,
  /// omit this parameter.
  final double? max;

  /// The minimum amount of memory per vCPU, in GiB. To specify no minimum limit,
  /// omit this parameter.
  final double? min;

  MemoryGiBPerVCpuRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

/// Describes the memory for the instance type.
class MemoryInfo {
  /// The size of the memory, in MiB.
  final int? sizeInMiB;

  MemoryInfo({
    this.sizeInMiB,
  });

  Map<String, dynamic> toJson() {
    final sizeInMiB = this.sizeInMiB;
    return {
      if (sizeInMiB != null) 'sizeInMiB': sizeInMiB,
    };
  }
}

/// The minimum and maximum amount of memory, in MiB.
class MemoryMiB {
  /// The maximum amount of memory, in MiB. If this parameter is not specified,
  /// there is no maximum limit.
  final int? max;

  /// The minimum amount of memory, in MiB. If this parameter is not specified,
  /// there is no minimum limit.
  final int? min;

  MemoryMiB({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum amount of memory, in MiB.
class MemoryMiBRequest {
  /// The minimum amount of memory, in MiB. To specify no minimum limit, specify
  /// <code>0</code>.
  final int min;

  /// The maximum amount of memory, in MiB. To specify no maximum limit, omit this
  /// parameter.
  final int? max;

  MemoryMiBRequest({
    required this.min,
    this.max,
  });

  Map<String, dynamic> toJson() {
    final min = this.min;
    final max = this.max;
    return {
      'Min': min,
      if (max != null) 'Max': max,
    };
  }
}

enum MetadataDefaultHttpTokensState {
  optional('optional'),
  required('required'),
  noPreference('no-preference'),
  ;

  final String value;

  const MetadataDefaultHttpTokensState(this.value);

  static MetadataDefaultHttpTokensState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum MetadataDefaultHttpTokensState'));
}

/// Indicates whether the network was healthy or degraded at a particular point.
/// The value is aggregated from the <code>startDate</code> to the
/// <code>endDate</code>. Currently only <code>five_minutes</code> is supported.
class MetricPoint {
  /// The end date for the metric point. The ending time must be formatted as
  /// <code>yyyy-mm-ddThh:mm:ss</code>. For example,
  /// <code>2022-06-12T12:00:00.000Z</code>.
  final DateTime? endDate;

  /// The start date for the metric point. The starting date for the metric point.
  /// The starting time must be formatted as <code>yyyy-mm-ddThh:mm:ss</code>. For
  /// example, <code>2022-06-10T12:00:00.000Z</code>.
  final DateTime? startDate;

  /// The status of the metric point.
  final String? status;
  final double? value;

  MetricPoint({
    this.endDate,
    this.startDate,
    this.status,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final endDate = this.endDate;
    final startDate = this.startDate;
    final status = this.status;
    final value = this.value;
    return {
      if (endDate != null) 'endDate': iso8601ToJson(endDate),
      if (startDate != null) 'startDate': iso8601ToJson(startDate),
      if (status != null) 'status': status,
      if (value != null) 'value': value,
    };
  }
}

enum MetricType {
  aggregateLatency('aggregate-latency'),
  ;

  final String value;

  const MetricType(this.value);

  static MetricType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum MetricType'));
}

class ModifyAddressAttributeResult {
  /// Information about the Elastic IP address.
  final AddressAttribute? address;

  ModifyAddressAttributeResult({
    this.address,
  });

  Map<String, dynamic> toJson() {
    final address = this.address;
    return {
      if (address != null) 'address': address,
    };
  }
}

class ModifyAvailabilityZoneGroupResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool? returnValue;

  ModifyAvailabilityZoneGroupResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

enum ModifyAvailabilityZoneOptInStatus {
  optedIn('opted-in'),
  notOptedIn('not-opted-in'),
  ;

  final String value;

  const ModifyAvailabilityZoneOptInStatus(this.value);

  static ModifyAvailabilityZoneOptInStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModifyAvailabilityZoneOptInStatus'));
}

class ModifyCapacityReservationFleetResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyCapacityReservationFleetResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyCapacityReservationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyCapacityReservationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyClientVpnEndpointResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyClientVpnEndpointResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyDefaultCreditSpecificationResult {
  /// The default credit option for CPU usage of the instance family.
  final InstanceFamilyCreditSpecification? instanceFamilyCreditSpecification;

  ModifyDefaultCreditSpecificationResult({
    this.instanceFamilyCreditSpecification,
  });

  Map<String, dynamic> toJson() {
    final instanceFamilyCreditSpecification =
        this.instanceFamilyCreditSpecification;
    return {
      if (instanceFamilyCreditSpecification != null)
        'instanceFamilyCreditSpecification': instanceFamilyCreditSpecification,
    };
  }
}

class ModifyEbsDefaultKmsKeyIdResult {
  /// The Amazon Resource Name (ARN) of the default KMS key for encryption by
  /// default.
  final String? kmsKeyId;

  ModifyEbsDefaultKmsKeyIdResult({
    this.kmsKeyId,
  });

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
    };
  }
}

class ModifyFleetResult {
  /// If the request succeeds, the response returns <code>true</code>. If the
  /// request fails, no response is returned, and instead an error message is
  /// returned.
  final bool? returnValue;

  ModifyFleetResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyFpgaImageAttributeResult {
  /// Information about the attribute.
  final FpgaImageAttribute? fpgaImageAttribute;

  ModifyFpgaImageAttributeResult({
    this.fpgaImageAttribute,
  });

  Map<String, dynamic> toJson() {
    final fpgaImageAttribute = this.fpgaImageAttribute;
    return {
      if (fpgaImageAttribute != null) 'fpgaImageAttribute': fpgaImageAttribute,
    };
  }
}

class ModifyHostsResult {
  /// The IDs of the Dedicated Hosts that were successfully modified.
  final List<String>? successful;

  /// The IDs of the Dedicated Hosts that could not be modified. Check whether the
  /// setting you requested can be used.
  final List<UnsuccessfulItem>? unsuccessful;

  ModifyHostsResult({
    this.successful,
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final successful = this.successful;
    final unsuccessful = this.unsuccessful;
    return {
      if (successful != null) 'successful': successful,
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class ModifyInstanceCapacityReservationAttributesResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyInstanceCapacityReservationAttributesResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyInstanceCreditSpecificationResult {
  /// Information about the instances whose credit option for CPU usage was
  /// successfully modified.
  final List<SuccessfulInstanceCreditSpecificationItem>?
      successfulInstanceCreditSpecifications;

  /// Information about the instances whose credit option for CPU usage was not
  /// modified.
  final List<UnsuccessfulInstanceCreditSpecificationItem>?
      unsuccessfulInstanceCreditSpecifications;

  ModifyInstanceCreditSpecificationResult({
    this.successfulInstanceCreditSpecifications,
    this.unsuccessfulInstanceCreditSpecifications,
  });

  Map<String, dynamic> toJson() {
    final successfulInstanceCreditSpecifications =
        this.successfulInstanceCreditSpecifications;
    final unsuccessfulInstanceCreditSpecifications =
        this.unsuccessfulInstanceCreditSpecifications;
    return {
      if (successfulInstanceCreditSpecifications != null)
        'successfulInstanceCreditSpecificationSet':
            successfulInstanceCreditSpecifications,
      if (unsuccessfulInstanceCreditSpecifications != null)
        'unsuccessfulInstanceCreditSpecificationSet':
            unsuccessfulInstanceCreditSpecifications,
    };
  }
}

class ModifyInstanceEventStartTimeResult {
  /// Information about the event.
  final InstanceStatusEvent? event;

  ModifyInstanceEventStartTimeResult({
    this.event,
  });

  Map<String, dynamic> toJson() {
    final event = this.event;
    return {
      if (event != null) 'event': event,
    };
  }
}

class ModifyInstanceEventWindowResult {
  /// Information about the event window.
  final InstanceEventWindow? instanceEventWindow;

  ModifyInstanceEventWindowResult({
    this.instanceEventWindow,
  });

  Map<String, dynamic> toJson() {
    final instanceEventWindow = this.instanceEventWindow;
    return {
      if (instanceEventWindow != null)
        'instanceEventWindow': instanceEventWindow,
    };
  }
}

class ModifyInstanceMaintenanceOptionsResult {
  /// Provides information on the current automatic recovery behavior of your
  /// instance.
  final InstanceAutoRecoveryState? autoRecovery;

  /// The ID of the instance.
  final String? instanceId;

  ModifyInstanceMaintenanceOptionsResult({
    this.autoRecovery,
    this.instanceId,
  });

  Map<String, dynamic> toJson() {
    final autoRecovery = this.autoRecovery;
    final instanceId = this.instanceId;
    return {
      if (autoRecovery != null) 'autoRecovery': autoRecovery.value,
      if (instanceId != null) 'instanceId': instanceId,
    };
  }
}

class ModifyInstanceMetadataDefaultsResult {
  /// If the request succeeds, the response returns <code>true</code>. If the
  /// request fails, no response is returned, and instead an error message is
  /// returned.
  final bool? returnValue;

  ModifyInstanceMetadataDefaultsResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyInstanceMetadataOptionsResult {
  /// The ID of the instance.
  final String? instanceId;

  /// The metadata options for the instance.
  final InstanceMetadataOptionsResponse? instanceMetadataOptions;

  ModifyInstanceMetadataOptionsResult({
    this.instanceId,
    this.instanceMetadataOptions,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final instanceMetadataOptions = this.instanceMetadataOptions;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceMetadataOptions != null)
        'instanceMetadataOptions': instanceMetadataOptions,
    };
  }
}

class ModifyInstancePlacementResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool? returnValue;

  ModifyInstancePlacementResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyIpamPoolResult {
  /// The results of the modification.
  final IpamPool? ipamPool;

  ModifyIpamPoolResult({
    this.ipamPool,
  });

  Map<String, dynamic> toJson() {
    final ipamPool = this.ipamPool;
    return {
      if (ipamPool != null) 'ipamPool': ipamPool,
    };
  }
}

class ModifyIpamResourceCidrResult {
  /// The CIDR of the resource.
  final IpamResourceCidr? ipamResourceCidr;

  ModifyIpamResourceCidrResult({
    this.ipamResourceCidr,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceCidr = this.ipamResourceCidr;
    return {
      if (ipamResourceCidr != null) 'ipamResourceCidr': ipamResourceCidr,
    };
  }
}

class ModifyIpamResourceDiscoveryResult {
  /// A resource discovery.
  final IpamResourceDiscovery? ipamResourceDiscovery;

  ModifyIpamResourceDiscoveryResult({
    this.ipamResourceDiscovery,
  });

  Map<String, dynamic> toJson() {
    final ipamResourceDiscovery = this.ipamResourceDiscovery;
    return {
      if (ipamResourceDiscovery != null)
        'ipamResourceDiscovery': ipamResourceDiscovery,
    };
  }
}

class ModifyIpamResult {
  /// The results of the modification.
  final Ipam? ipam;

  ModifyIpamResult({
    this.ipam,
  });

  Map<String, dynamic> toJson() {
    final ipam = this.ipam;
    return {
      if (ipam != null) 'ipam': ipam,
    };
  }
}

class ModifyIpamScopeResult {
  /// The results of the modification.
  final IpamScope? ipamScope;

  ModifyIpamScopeResult({
    this.ipamScope,
  });

  Map<String, dynamic> toJson() {
    final ipamScope = this.ipamScope;
    return {
      if (ipamScope != null) 'ipamScope': ipamScope,
    };
  }
}

class ModifyLaunchTemplateResult {
  /// Information about the launch template.
  final LaunchTemplate? launchTemplate;

  ModifyLaunchTemplateResult({
    this.launchTemplate,
  });

  Map<String, dynamic> toJson() {
    final launchTemplate = this.launchTemplate;
    return {
      if (launchTemplate != null) 'launchTemplate': launchTemplate,
    };
  }
}

class ModifyLocalGatewayRouteResult {
  /// Information about the local gateway route table.
  final LocalGatewayRoute? route;

  ModifyLocalGatewayRouteResult({
    this.route,
  });

  Map<String, dynamic> toJson() {
    final route = this.route;
    return {
      if (route != null) 'route': route,
    };
  }
}

class ModifyManagedPrefixListResult {
  /// Information about the prefix list.
  final ManagedPrefixList? prefixList;

  ModifyManagedPrefixListResult({
    this.prefixList,
  });

  Map<String, dynamic> toJson() {
    final prefixList = this.prefixList;
    return {
      if (prefixList != null) 'prefixList': prefixList,
    };
  }
}

class ModifyPrivateDnsNameOptionsResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyPrivateDnsNameOptionsResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

/// Contains the output of ModifyReservedInstances.
class ModifyReservedInstancesResult {
  /// The ID for the modification.
  final String? reservedInstancesModificationId;

  ModifyReservedInstancesResult({
    this.reservedInstancesModificationId,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesModificationId =
        this.reservedInstancesModificationId;
    return {
      if (reservedInstancesModificationId != null)
        'reservedInstancesModificationId': reservedInstancesModificationId,
    };
  }
}

class ModifySecurityGroupRulesResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  ModifySecurityGroupRulesResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifySnapshotTierResult {
  /// The ID of the snapshot.
  final String? snapshotId;

  /// The date and time when the archive process was started.
  final DateTime? tieringStartTime;

  ModifySnapshotTierResult({
    this.snapshotId,
    this.tieringStartTime,
  });

  Map<String, dynamic> toJson() {
    final snapshotId = this.snapshotId;
    final tieringStartTime = this.tieringStartTime;
    return {
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (tieringStartTime != null)
        'tieringStartTime': iso8601ToJson(tieringStartTime),
    };
  }
}

/// Contains the output of ModifySpotFleetRequest.
class ModifySpotFleetRequestResponse {
  /// If the request succeeds, the response returns <code>true</code>. If the
  /// request fails, no response is returned, and instead an error message is
  /// returned.
  final bool? returnValue;

  ModifySpotFleetRequestResponse({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyTrafficMirrorFilterNetworkServicesResult {
  /// The Traffic Mirror filter that the network service is associated with.
  final TrafficMirrorFilter? trafficMirrorFilter;

  ModifyTrafficMirrorFilterNetworkServicesResult({
    this.trafficMirrorFilter,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorFilter = this.trafficMirrorFilter;
    return {
      if (trafficMirrorFilter != null)
        'trafficMirrorFilter': trafficMirrorFilter,
    };
  }
}

class ModifyTrafficMirrorFilterRuleResult {
  /// Modifies a Traffic Mirror rule.
  final TrafficMirrorFilterRule? trafficMirrorFilterRule;

  ModifyTrafficMirrorFilterRuleResult({
    this.trafficMirrorFilterRule,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorFilterRule = this.trafficMirrorFilterRule;
    return {
      if (trafficMirrorFilterRule != null)
        'trafficMirrorFilterRule': trafficMirrorFilterRule,
    };
  }
}

class ModifyTrafficMirrorSessionResult {
  /// Information about the Traffic Mirror session.
  final TrafficMirrorSession? trafficMirrorSession;

  ModifyTrafficMirrorSessionResult({
    this.trafficMirrorSession,
  });

  Map<String, dynamic> toJson() {
    final trafficMirrorSession = this.trafficMirrorSession;
    return {
      if (trafficMirrorSession != null)
        'trafficMirrorSession': trafficMirrorSession,
    };
  }
}

/// The transit gateway options.
class ModifyTransitGatewayOptions {
  /// Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24
  /// CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
  final List<String>? addTransitGatewayCidrBlocks;

  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to
  /// 4294967294 for 32-bit ASNs.
  ///
  /// The modify ASN operation is not allowed on a transit gateway with active BGP
  /// sessions. You must first delete all transit gateway attachments that have
  /// BGP configured prior to modifying the ASN on the transit gateway.
  final int? amazonSideAsn;

  /// The ID of the default association route table.
  final String? associationDefaultRouteTableId;

  /// Enable or disable automatic acceptance of attachment requests.
  final AutoAcceptSharedAttachmentsValue? autoAcceptSharedAttachments;

  /// Enable or disable automatic association with the default association route
  /// table.
  final DefaultRouteTableAssociationValue? defaultRouteTableAssociation;

  /// Enable or disable automatic propagation of routes to the default propagation
  /// route table.
  final DefaultRouteTablePropagationValue? defaultRouteTablePropagation;

  /// Enable or disable DNS support.
  final DnsSupportValue? dnsSupport;

  /// The ID of the default propagation route table.
  final String? propagationDefaultRouteTableId;

  /// Removes CIDR blocks for the transit gateway.
  final List<String>? removeTransitGatewayCidrBlocks;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// Enables you to reference a security group across VPCs attached to a transit
  /// gateway. Use this option to simplify security group management and control
  /// of instance-to-instance traffic across VPCs that are connected by transit
  /// gateway. You can also use this option to migrate from VPC peering (which was
  /// the only option that supported security group referencing) to transit
  /// gateways (which now also support security group referencing). This option is
  /// disabled by default and there are no additional costs to use this feature.
  final SecurityGroupReferencingSupportValue? securityGroupReferencingSupport;

  /// Enable or disable Equal Cost Multipath Protocol support.
  final VpnEcmpSupportValue? vpnEcmpSupport;

  ModifyTransitGatewayOptions({
    this.addTransitGatewayCidrBlocks,
    this.amazonSideAsn,
    this.associationDefaultRouteTableId,
    this.autoAcceptSharedAttachments,
    this.defaultRouteTableAssociation,
    this.defaultRouteTablePropagation,
    this.dnsSupport,
    this.propagationDefaultRouteTableId,
    this.removeTransitGatewayCidrBlocks,
    this.securityGroupReferencingSupport,
    this.vpnEcmpSupport,
  });

  Map<String, dynamic> toJson() {
    final addTransitGatewayCidrBlocks = this.addTransitGatewayCidrBlocks;
    final amazonSideAsn = this.amazonSideAsn;
    final associationDefaultRouteTableId = this.associationDefaultRouteTableId;
    final autoAcceptSharedAttachments = this.autoAcceptSharedAttachments;
    final defaultRouteTableAssociation = this.defaultRouteTableAssociation;
    final defaultRouteTablePropagation = this.defaultRouteTablePropagation;
    final dnsSupport = this.dnsSupport;
    final propagationDefaultRouteTableId = this.propagationDefaultRouteTableId;
    final removeTransitGatewayCidrBlocks = this.removeTransitGatewayCidrBlocks;
    final securityGroupReferencingSupport =
        this.securityGroupReferencingSupport;
    final vpnEcmpSupport = this.vpnEcmpSupport;
    return {
      if (addTransitGatewayCidrBlocks != null)
        'AddTransitGatewayCidrBlocks': addTransitGatewayCidrBlocks,
      if (amazonSideAsn != null) 'AmazonSideAsn': amazonSideAsn,
      if (associationDefaultRouteTableId != null)
        'AssociationDefaultRouteTableId': associationDefaultRouteTableId,
      if (autoAcceptSharedAttachments != null)
        'AutoAcceptSharedAttachments': autoAcceptSharedAttachments.value,
      if (defaultRouteTableAssociation != null)
        'DefaultRouteTableAssociation': defaultRouteTableAssociation.value,
      if (defaultRouteTablePropagation != null)
        'DefaultRouteTablePropagation': defaultRouteTablePropagation.value,
      if (dnsSupport != null) 'DnsSupport': dnsSupport.value,
      if (propagationDefaultRouteTableId != null)
        'PropagationDefaultRouteTableId': propagationDefaultRouteTableId,
      if (removeTransitGatewayCidrBlocks != null)
        'RemoveTransitGatewayCidrBlocks': removeTransitGatewayCidrBlocks,
      if (securityGroupReferencingSupport != null)
        'SecurityGroupReferencingSupport':
            securityGroupReferencingSupport.value,
      if (vpnEcmpSupport != null) 'VpnEcmpSupport': vpnEcmpSupport.value,
    };
  }
}

class ModifyTransitGatewayPrefixListReferenceResult {
  /// Information about the prefix list reference.
  final TransitGatewayPrefixListReference? transitGatewayPrefixListReference;

  ModifyTransitGatewayPrefixListReferenceResult({
    this.transitGatewayPrefixListReference,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPrefixListReference =
        this.transitGatewayPrefixListReference;
    return {
      if (transitGatewayPrefixListReference != null)
        'transitGatewayPrefixListReference': transitGatewayPrefixListReference,
    };
  }
}

class ModifyTransitGatewayResult {
  /// Information about the transit gateway.
  final TransitGateway? transitGateway;

  ModifyTransitGatewayResult({
    this.transitGateway,
  });

  Map<String, dynamic> toJson() {
    final transitGateway = this.transitGateway;
    return {
      if (transitGateway != null) 'transitGateway': transitGateway,
    };
  }
}

/// Describes the options for a VPC attachment.
class ModifyTransitGatewayVpcAttachmentRequestOptions {
  /// Enable or disable support for appliance mode. If enabled, a traffic flow
  /// between a source and destination uses the same Availability Zone for the VPC
  /// attachment for the lifetime of that flow. The default is
  /// <code>disable</code>.
  final ApplianceModeSupportValue? applianceModeSupport;

  /// Enable or disable DNS support. The default is <code>enable</code>.
  final DnsSupportValue? dnsSupport;

  /// Enable or disable IPv6 support. The default is <code>enable</code>.
  final Ipv6SupportValue? ipv6Support;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// Enables you to reference a security group across VPCs attached to a transit
  /// gateway. Use this option to simplify security group management and control
  /// of instance-to-instance traffic across VPCs that are connected by transit
  /// gateway. You can also use this option to migrate from VPC peering (which was
  /// the only option that supported security group referencing) to transit
  /// gateways (which now also support security group referencing). This option is
  /// disabled by default and there are no additional costs to use this feature.
  final SecurityGroupReferencingSupportValue? securityGroupReferencingSupport;

  ModifyTransitGatewayVpcAttachmentRequestOptions({
    this.applianceModeSupport,
    this.dnsSupport,
    this.ipv6Support,
    this.securityGroupReferencingSupport,
  });

  Map<String, dynamic> toJson() {
    final applianceModeSupport = this.applianceModeSupport;
    final dnsSupport = this.dnsSupport;
    final ipv6Support = this.ipv6Support;
    final securityGroupReferencingSupport =
        this.securityGroupReferencingSupport;
    return {
      if (applianceModeSupport != null)
        'ApplianceModeSupport': applianceModeSupport.value,
      if (dnsSupport != null) 'DnsSupport': dnsSupport.value,
      if (ipv6Support != null) 'Ipv6Support': ipv6Support.value,
      if (securityGroupReferencingSupport != null)
        'SecurityGroupReferencingSupport':
            securityGroupReferencingSupport.value,
    };
  }
}

class ModifyTransitGatewayVpcAttachmentResult {
  /// Information about the modified attachment.
  final TransitGatewayVpcAttachment? transitGatewayVpcAttachment;

  ModifyTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayVpcAttachment = this.transitGatewayVpcAttachment;
    return {
      if (transitGatewayVpcAttachment != null)
        'transitGatewayVpcAttachment': transitGatewayVpcAttachment,
    };
  }
}

/// Describes the options when modifying a Verified Access endpoint with the
/// <code>network-interface</code> type.
class ModifyVerifiedAccessEndpointEniOptions {
  /// The IP port number.
  final int? port;

  /// The IP protocol.
  final VerifiedAccessEndpointProtocol? protocol;

  ModifyVerifiedAccessEndpointEniOptions({
    this.port,
    this.protocol,
  });

  Map<String, dynamic> toJson() {
    final port = this.port;
    final protocol = this.protocol;
    return {
      if (port != null) 'Port': port,
      if (protocol != null) 'Protocol': protocol.value,
    };
  }
}

/// Describes a load balancer when creating an Amazon Web Services Verified
/// Access endpoint using the <code>load-balancer</code> type.
class ModifyVerifiedAccessEndpointLoadBalancerOptions {
  /// The IP port number.
  final int? port;

  /// The IP protocol.
  final VerifiedAccessEndpointProtocol? protocol;

  /// The IDs of the subnets.
  final List<String>? subnetIds;

  ModifyVerifiedAccessEndpointLoadBalancerOptions({
    this.port,
    this.protocol,
    this.subnetIds,
  });

  Map<String, dynamic> toJson() {
    final port = this.port;
    final protocol = this.protocol;
    final subnetIds = this.subnetIds;
    return {
      if (port != null) 'Port': port,
      if (protocol != null) 'Protocol': protocol.value,
      if (subnetIds != null) 'SubnetId': subnetIds,
    };
  }
}

class ModifyVerifiedAccessEndpointPolicyResult {
  /// The Verified Access policy document.
  final String? policyDocument;

  /// The status of the Verified Access policy.
  final bool? policyEnabled;

  /// The options in use for server side encryption.
  final VerifiedAccessSseSpecificationResponse? sseSpecification;

  ModifyVerifiedAccessEndpointPolicyResult({
    this.policyDocument,
    this.policyEnabled,
    this.sseSpecification,
  });

  Map<String, dynamic> toJson() {
    final policyDocument = this.policyDocument;
    final policyEnabled = this.policyEnabled;
    final sseSpecification = this.sseSpecification;
    return {
      if (policyDocument != null) 'policyDocument': policyDocument,
      if (policyEnabled != null) 'policyEnabled': policyEnabled,
      if (sseSpecification != null) 'sseSpecification': sseSpecification,
    };
  }
}

class ModifyVerifiedAccessEndpointResult {
  /// Details about the Verified Access endpoint.
  final VerifiedAccessEndpoint? verifiedAccessEndpoint;

  ModifyVerifiedAccessEndpointResult({
    this.verifiedAccessEndpoint,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessEndpoint = this.verifiedAccessEndpoint;
    return {
      if (verifiedAccessEndpoint != null)
        'verifiedAccessEndpoint': verifiedAccessEndpoint,
    };
  }
}

class ModifyVerifiedAccessGroupPolicyResult {
  /// The Verified Access policy document.
  final String? policyDocument;

  /// The status of the Verified Access policy.
  final bool? policyEnabled;

  /// The options in use for server side encryption.
  final VerifiedAccessSseSpecificationResponse? sseSpecification;

  ModifyVerifiedAccessGroupPolicyResult({
    this.policyDocument,
    this.policyEnabled,
    this.sseSpecification,
  });

  Map<String, dynamic> toJson() {
    final policyDocument = this.policyDocument;
    final policyEnabled = this.policyEnabled;
    final sseSpecification = this.sseSpecification;
    return {
      if (policyDocument != null) 'policyDocument': policyDocument,
      if (policyEnabled != null) 'policyEnabled': policyEnabled,
      if (sseSpecification != null) 'sseSpecification': sseSpecification,
    };
  }
}

class ModifyVerifiedAccessGroupResult {
  /// Details about the Verified Access group.
  final VerifiedAccessGroup? verifiedAccessGroup;

  ModifyVerifiedAccessGroupResult({
    this.verifiedAccessGroup,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessGroup = this.verifiedAccessGroup;
    return {
      if (verifiedAccessGroup != null)
        'verifiedAccessGroup': verifiedAccessGroup,
    };
  }
}

class ModifyVerifiedAccessInstanceLoggingConfigurationResult {
  /// The logging configuration for the Verified Access instance.
  final VerifiedAccessInstanceLoggingConfiguration? loggingConfiguration;

  ModifyVerifiedAccessInstanceLoggingConfigurationResult({
    this.loggingConfiguration,
  });

  Map<String, dynamic> toJson() {
    final loggingConfiguration = this.loggingConfiguration;
    return {
      if (loggingConfiguration != null)
        'loggingConfiguration': loggingConfiguration,
    };
  }
}

class ModifyVerifiedAccessInstanceResult {
  /// Details about the Verified Access instance.
  final VerifiedAccessInstance? verifiedAccessInstance;

  ModifyVerifiedAccessInstanceResult({
    this.verifiedAccessInstance,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessInstance = this.verifiedAccessInstance;
    return {
      if (verifiedAccessInstance != null)
        'verifiedAccessInstance': verifiedAccessInstance,
    };
  }
}

/// Modifies the configuration of the specified device-based Amazon Web Services
/// Verified Access trust provider.
class ModifyVerifiedAccessTrustProviderDeviceOptions {
  /// The URL Amazon Web Services Verified Access will use to verify the
  /// authenticity of the device tokens.
  final String? publicSigningKeyUrl;

  ModifyVerifiedAccessTrustProviderDeviceOptions({
    this.publicSigningKeyUrl,
  });

  Map<String, dynamic> toJson() {
    final publicSigningKeyUrl = this.publicSigningKeyUrl;
    return {
      if (publicSigningKeyUrl != null)
        'PublicSigningKeyUrl': publicSigningKeyUrl,
    };
  }
}

/// Options for an OpenID Connect-compatible user-identity trust provider.
class ModifyVerifiedAccessTrustProviderOidcOptions {
  /// The OIDC authorization endpoint.
  final String? authorizationEndpoint;

  /// The client identifier.
  final String? clientId;

  /// The client secret.
  final String? clientSecret;

  /// The OIDC issuer.
  final String? issuer;

  /// OpenID Connect (OIDC) scopes are used by an application during
  /// authentication to authorize access to a user's details. Each scope returns a
  /// specific set of user attributes.
  final String? scope;

  /// The OIDC token endpoint.
  final String? tokenEndpoint;

  /// The OIDC user info endpoint.
  final String? userInfoEndpoint;

  ModifyVerifiedAccessTrustProviderOidcOptions({
    this.authorizationEndpoint,
    this.clientId,
    this.clientSecret,
    this.issuer,
    this.scope,
    this.tokenEndpoint,
    this.userInfoEndpoint,
  });

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final clientSecret = this.clientSecret;
    final issuer = this.issuer;
    final scope = this.scope;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      if (authorizationEndpoint != null)
        'AuthorizationEndpoint': authorizationEndpoint,
      if (clientId != null) 'ClientId': clientId,
      if (clientSecret != null) 'ClientSecret': clientSecret,
      if (issuer != null) 'Issuer': issuer,
      if (scope != null) 'Scope': scope,
      if (tokenEndpoint != null) 'TokenEndpoint': tokenEndpoint,
      if (userInfoEndpoint != null) 'UserInfoEndpoint': userInfoEndpoint,
    };
  }
}

class ModifyVerifiedAccessTrustProviderResult {
  /// Details about the Verified Access trust provider.
  final VerifiedAccessTrustProvider? verifiedAccessTrustProvider;

  ModifyVerifiedAccessTrustProviderResult({
    this.verifiedAccessTrustProvider,
  });

  Map<String, dynamic> toJson() {
    final verifiedAccessTrustProvider = this.verifiedAccessTrustProvider;
    return {
      if (verifiedAccessTrustProvider != null)
        'verifiedAccessTrustProvider': verifiedAccessTrustProvider,
    };
  }
}

class ModifyVolumeResult {
  /// Information about the volume modification.
  final VolumeModification? volumeModification;

  ModifyVolumeResult({
    this.volumeModification,
  });

  Map<String, dynamic> toJson() {
    final volumeModification = this.volumeModification;
    return {
      if (volumeModification != null) 'volumeModification': volumeModification,
    };
  }
}

class ModifyVpcEndpointConnectionNotificationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyVpcEndpointConnectionNotificationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyVpcEndpointResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyVpcEndpointResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyVpcEndpointServiceConfigurationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyVpcEndpointServiceConfigurationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyVpcEndpointServicePayerResponsibilityResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyVpcEndpointServicePayerResponsibilityResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyVpcEndpointServicePermissionsResult {
  /// Information about the added principals.
  final List<AddedPrincipal>? addedPrincipals;

  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  ModifyVpcEndpointServicePermissionsResult({
    this.addedPrincipals,
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final addedPrincipals = this.addedPrincipals;
    final returnValue = this.returnValue;
    return {
      if (addedPrincipals != null) 'addedPrincipalSet': addedPrincipals,
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyVpcPeeringConnectionOptionsResult {
  /// Information about the VPC peering connection options for the accepter VPC.
  final PeeringConnectionOptions? accepterPeeringConnectionOptions;

  /// Information about the VPC peering connection options for the requester VPC.
  final PeeringConnectionOptions? requesterPeeringConnectionOptions;

  ModifyVpcPeeringConnectionOptionsResult({
    this.accepterPeeringConnectionOptions,
    this.requesterPeeringConnectionOptions,
  });

  Map<String, dynamic> toJson() {
    final accepterPeeringConnectionOptions =
        this.accepterPeeringConnectionOptions;
    final requesterPeeringConnectionOptions =
        this.requesterPeeringConnectionOptions;
    return {
      if (accepterPeeringConnectionOptions != null)
        'accepterPeeringConnectionOptions': accepterPeeringConnectionOptions,
      if (requesterPeeringConnectionOptions != null)
        'requesterPeeringConnectionOptions': requesterPeeringConnectionOptions,
    };
  }
}

class ModifyVpcTenancyResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  ModifyVpcTenancyResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ModifyVpnConnectionOptionsResult {
  /// Information about the VPN connection.
  final VpnConnection? vpnConnection;

  ModifyVpnConnectionOptionsResult({
    this.vpnConnection,
  });

  Map<String, dynamic> toJson() {
    final vpnConnection = this.vpnConnection;
    return {
      if (vpnConnection != null) 'vpnConnection': vpnConnection,
    };
  }
}

class ModifyVpnConnectionResult {
  /// Information about the VPN connection.
  final VpnConnection? vpnConnection;

  ModifyVpnConnectionResult({
    this.vpnConnection,
  });

  Map<String, dynamic> toJson() {
    final vpnConnection = this.vpnConnection;
    return {
      if (vpnConnection != null) 'vpnConnection': vpnConnection,
    };
  }
}

class ModifyVpnTunnelCertificateResult {
  /// Information about the VPN connection.
  final VpnConnection? vpnConnection;

  ModifyVpnTunnelCertificateResult({
    this.vpnConnection,
  });

  Map<String, dynamic> toJson() {
    final vpnConnection = this.vpnConnection;
    return {
      if (vpnConnection != null) 'vpnConnection': vpnConnection,
    };
  }
}

class ModifyVpnTunnelOptionsResult {
  /// Information about the VPN connection.
  final VpnConnection? vpnConnection;

  ModifyVpnTunnelOptionsResult({
    this.vpnConnection,
  });

  Map<String, dynamic> toJson() {
    final vpnConnection = this.vpnConnection;
    return {
      if (vpnConnection != null) 'vpnConnection': vpnConnection,
    };
  }
}

/// The Amazon Web Services Site-to-Site VPN tunnel options to modify.
class ModifyVpnTunnelOptionsSpecification {
  /// The action to take after DPD timeout occurs. Specify <code>restart</code> to
  /// restart the IKE initiation. Specify <code>clear</code> to end the IKE
  /// session.
  ///
  /// Valid Values: <code>clear</code> | <code>none</code> | <code>restart</code>
  ///
  /// Default: <code>clear</code>
  final String? dPDTimeoutAction;

  /// The number of seconds after which a DPD timeout occurs. A DPD timeout of 40
  /// seconds means that the VPN endpoint will consider the peer dead 30 seconds
  /// after the first failed keep-alive.
  ///
  /// Constraints: A value greater than or equal to 30.
  ///
  /// Default: <code>40</code>
  final int? dPDTimeoutSeconds;

  /// Turn on or off tunnel endpoint lifecycle control feature.
  final bool? enableTunnelLifecycleControl;

  /// The IKE versions that are permitted for the VPN tunnel.
  ///
  /// Valid values: <code>ikev1</code> | <code>ikev2</code>
  final List<IKEVersionsRequestListValue>? iKEVersions;

  /// Options for logging VPN tunnel activity.
  final VpnTunnelLogOptionsSpecification? logOptions;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 1 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>14</code> | <code>15</code> |
  /// <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> |
  /// <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> |
  /// <code>24</code>
  final List<Phase1DHGroupNumbersRequestListValue>? phase1DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code> |
  /// <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code>
  final List<Phase1EncryptionAlgorithmsRequestListValue>?
      phase1EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code> |
  /// <code>SHA2-384</code> | <code>SHA2-512</code>
  final List<Phase1IntegrityAlgorithmsRequestListValue>?
      phase1IntegrityAlgorithms;

  /// The lifetime for phase 1 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 28,800.
  ///
  /// Default: <code>28800</code>
  final int? phase1LifetimeSeconds;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 2 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>5</code> | <code>14</code> |
  /// <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> |
  /// <code>19</code> | <code>20</code> | <code>21</code> | <code>22</code> |
  /// <code>23</code> | <code>24</code>
  final List<Phase2DHGroupNumbersRequestListValue>? phase2DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code> |
  /// <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code>
  final List<Phase2EncryptionAlgorithmsRequestListValue>?
      phase2EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code> |
  /// <code>SHA2-384</code> | <code>SHA2-512</code>
  final List<Phase2IntegrityAlgorithmsRequestListValue>?
      phase2IntegrityAlgorithms;

  /// The lifetime for phase 2 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 3,600. The value must be less than the
  /// value for <code>Phase1LifetimeSeconds</code>.
  ///
  /// Default: <code>3600</code>
  final int? phase2LifetimeSeconds;

  /// The pre-shared key (PSK) to establish initial authentication between the
  /// virtual private gateway and the customer gateway.
  ///
  /// Constraints: Allowed characters are alphanumeric characters, periods (.),
  /// and underscores (_). Must be between 8 and 64 characters in length and
  /// cannot start with zero (0).
  final String? preSharedKey;

  /// The percentage of the rekey window (determined by
  /// <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly
  /// selected.
  ///
  /// Constraints: A value between 0 and 100.
  ///
  /// Default: <code>100</code>
  final int? rekeyFuzzPercentage;

  /// The margin time, in seconds, before the phase 2 lifetime expires, during
  /// which the Amazon Web Services side of the VPN connection performs an IKE
  /// rekey. The exact time of the rekey is randomly selected based on the value
  /// for <code>RekeyFuzzPercentage</code>.
  ///
  /// Constraints: A value between 60 and half of
  /// <code>Phase2LifetimeSeconds</code>.
  ///
  /// Default: <code>270</code>
  final int? rekeyMarginTimeSeconds;

  /// The number of packets in an IKE replay window.
  ///
  /// Constraints: A value between 64 and 2048.
  ///
  /// Default: <code>1024</code>
  final int? replayWindowSize;

  /// The action to take when the establishing the tunnel for the VPN connection.
  /// By default, your customer gateway device must initiate the IKE negotiation
  /// and bring up the tunnel. Specify <code>start</code> for Amazon Web Services
  /// to initiate the IKE negotiation.
  ///
  /// Valid Values: <code>add</code> | <code>start</code>
  ///
  /// Default: <code>add</code>
  final String? startupAction;

  /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks
  /// must be unique across all VPN connections that use the same virtual private
  /// gateway.
  ///
  /// Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code>
  /// range. The following CIDR blocks are reserved and cannot be used:
  ///
  /// <ul>
  /// <li>
  /// <code>169.254.0.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.1.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.2.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.3.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.4.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.5.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.169.252/30</code>
  /// </li>
  /// </ul>
  final String? tunnelInsideCidr;

  /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks
  /// must be unique across all VPN connections that use the same transit gateway.
  ///
  /// Constraints: A size /126 CIDR block from the local <code>fd00::/8</code>
  /// range.
  final String? tunnelInsideIpv6Cidr;

  ModifyVpnTunnelOptionsSpecification({
    this.dPDTimeoutAction,
    this.dPDTimeoutSeconds,
    this.enableTunnelLifecycleControl,
    this.iKEVersions,
    this.logOptions,
    this.phase1DHGroupNumbers,
    this.phase1EncryptionAlgorithms,
    this.phase1IntegrityAlgorithms,
    this.phase1LifetimeSeconds,
    this.phase2DHGroupNumbers,
    this.phase2EncryptionAlgorithms,
    this.phase2IntegrityAlgorithms,
    this.phase2LifetimeSeconds,
    this.preSharedKey,
    this.rekeyFuzzPercentage,
    this.rekeyMarginTimeSeconds,
    this.replayWindowSize,
    this.startupAction,
    this.tunnelInsideCidr,
    this.tunnelInsideIpv6Cidr,
  });

  Map<String, dynamic> toJson() {
    final dPDTimeoutAction = this.dPDTimeoutAction;
    final dPDTimeoutSeconds = this.dPDTimeoutSeconds;
    final enableTunnelLifecycleControl = this.enableTunnelLifecycleControl;
    final iKEVersions = this.iKEVersions;
    final logOptions = this.logOptions;
    final phase1DHGroupNumbers = this.phase1DHGroupNumbers;
    final phase1EncryptionAlgorithms = this.phase1EncryptionAlgorithms;
    final phase1IntegrityAlgorithms = this.phase1IntegrityAlgorithms;
    final phase1LifetimeSeconds = this.phase1LifetimeSeconds;
    final phase2DHGroupNumbers = this.phase2DHGroupNumbers;
    final phase2EncryptionAlgorithms = this.phase2EncryptionAlgorithms;
    final phase2IntegrityAlgorithms = this.phase2IntegrityAlgorithms;
    final phase2LifetimeSeconds = this.phase2LifetimeSeconds;
    final preSharedKey = this.preSharedKey;
    final rekeyFuzzPercentage = this.rekeyFuzzPercentage;
    final rekeyMarginTimeSeconds = this.rekeyMarginTimeSeconds;
    final replayWindowSize = this.replayWindowSize;
    final startupAction = this.startupAction;
    final tunnelInsideCidr = this.tunnelInsideCidr;
    final tunnelInsideIpv6Cidr = this.tunnelInsideIpv6Cidr;
    return {
      if (dPDTimeoutAction != null) 'DPDTimeoutAction': dPDTimeoutAction,
      if (dPDTimeoutSeconds != null) 'DPDTimeoutSeconds': dPDTimeoutSeconds,
      if (enableTunnelLifecycleControl != null)
        'EnableTunnelLifecycleControl': enableTunnelLifecycleControl,
      if (iKEVersions != null) 'IKEVersion': iKEVersions,
      if (logOptions != null) 'LogOptions': logOptions,
      if (phase1DHGroupNumbers != null)
        'Phase1DHGroupNumber': phase1DHGroupNumbers,
      if (phase1EncryptionAlgorithms != null)
        'Phase1EncryptionAlgorithm': phase1EncryptionAlgorithms,
      if (phase1IntegrityAlgorithms != null)
        'Phase1IntegrityAlgorithm': phase1IntegrityAlgorithms,
      if (phase1LifetimeSeconds != null)
        'Phase1LifetimeSeconds': phase1LifetimeSeconds,
      if (phase2DHGroupNumbers != null)
        'Phase2DHGroupNumber': phase2DHGroupNumbers,
      if (phase2EncryptionAlgorithms != null)
        'Phase2EncryptionAlgorithm': phase2EncryptionAlgorithms,
      if (phase2IntegrityAlgorithms != null)
        'Phase2IntegrityAlgorithm': phase2IntegrityAlgorithms,
      if (phase2LifetimeSeconds != null)
        'Phase2LifetimeSeconds': phase2LifetimeSeconds,
      if (preSharedKey != null) 'PreSharedKey': preSharedKey,
      if (rekeyFuzzPercentage != null)
        'RekeyFuzzPercentage': rekeyFuzzPercentage,
      if (rekeyMarginTimeSeconds != null)
        'RekeyMarginTimeSeconds': rekeyMarginTimeSeconds,
      if (replayWindowSize != null) 'ReplayWindowSize': replayWindowSize,
      if (startupAction != null) 'StartupAction': startupAction,
      if (tunnelInsideCidr != null) 'TunnelInsideCidr': tunnelInsideCidr,
      if (tunnelInsideIpv6Cidr != null)
        'TunnelInsideIpv6Cidr': tunnelInsideIpv6Cidr,
    };
  }
}

class MonitorInstancesResult {
  /// The monitoring information.
  final List<InstanceMonitoring>? instanceMonitorings;

  MonitorInstancesResult({
    this.instanceMonitorings,
  });

  Map<String, dynamic> toJson() {
    final instanceMonitorings = this.instanceMonitorings;
    return {
      if (instanceMonitorings != null) 'instancesSet': instanceMonitorings,
    };
  }
}

/// Describes the monitoring of an instance.
class Monitoring {
  /// Indicates whether detailed monitoring is enabled. Otherwise, basic
  /// monitoring is enabled.
  final MonitoringState? state;

  Monitoring({
    this.state,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    return {
      if (state != null) 'state': state.value,
    };
  }
}

enum MonitoringState {
  disabled('disabled'),
  disabling('disabling'),
  enabled('enabled'),
  pending('pending'),
  ;

  final String value;

  const MonitoringState(this.value);

  static MonitoringState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MonitoringState'));
}

class MoveAddressToVpcResult {
  /// The allocation ID for the Elastic IP address.
  final String? allocationId;

  /// The status of the move of the IP address.
  final Status? status;

  MoveAddressToVpcResult({
    this.allocationId,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final status = this.status;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (status != null) 'status': status.value,
    };
  }
}

class MoveByoipCidrToIpamResult {
  /// The BYOIP CIDR.
  final ByoipCidr? byoipCidr;

  MoveByoipCidrToIpamResult({
    this.byoipCidr,
  });

  Map<String, dynamic> toJson() {
    final byoipCidr = this.byoipCidr;
    return {
      if (byoipCidr != null) 'byoipCidr': byoipCidr,
    };
  }
}

enum MoveStatus {
  movingToVpc('movingToVpc'),
  restoringToClassic('restoringToClassic'),
  ;

  final String value;

  const MoveStatus(this.value);

  static MoveStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum MoveStatus'));
}

/// <note>
/// This action is deprecated.
/// </note>
/// Describes the status of a moving Elastic IP address.
class MovingAddressStatus {
  /// The status of the Elastic IP address that's being moved or restored.
  final MoveStatus? moveStatus;

  /// The Elastic IP address.
  final String? publicIp;

  MovingAddressStatus({
    this.moveStatus,
    this.publicIp,
  });

  Map<String, dynamic> toJson() {
    final moveStatus = this.moveStatus;
    final publicIp = this.publicIp;
    return {
      if (moveStatus != null) 'moveStatus': moveStatus.value,
      if (publicIp != null) 'publicIp': publicIp,
    };
  }
}

enum MulticastSupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const MulticastSupportValue(this.value);

  static MulticastSupportValue fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum MulticastSupportValue'));
}

/// Describes a NAT gateway.
class NatGateway {
  /// Indicates whether the NAT gateway supports public or private connectivity.
  final ConnectivityType? connectivityType;

  /// The date and time the NAT gateway was created.
  final DateTime? createTime;

  /// The date and time the NAT gateway was deleted, if applicable.
  final DateTime? deleteTime;

  /// If the NAT gateway could not be created, specifies the error code for the
  /// failure. (<code>InsufficientFreeAddressesInSubnet</code> |
  /// <code>Gateway.NotAttached</code> | <code>InvalidAllocationID.NotFound</code>
  /// | <code>Resource.AlreadyAssociated</code> | <code>InternalError</code> |
  /// <code>InvalidSubnetID.NotFound</code>)
  final String? failureCode;

  /// If the NAT gateway could not be created, specifies the error message for the
  /// failure, that corresponds to the error code.
  ///
  /// <ul>
  /// <li>
  /// For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free
  /// addresses to create this NAT gateway"
  /// </li>
  /// <li>
  /// For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway
  /// attached"
  /// </li>
  /// <li>
  /// For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx
  /// could not be associated with this NAT gateway"
  /// </li>
  /// <li>
  /// For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is
  /// already associated"
  /// </li>
  /// <li>
  /// For InternalError: "Network interface eni-xxxxxxxx, created and used
  /// internally by this NAT gateway is in an invalid state. Please try again."
  /// </li>
  /// <li>
  /// For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not
  /// exist or could not be found."
  /// </li>
  /// </ul>
  final String? failureMessage;

  /// Information about the IP addresses and network interface associated with the
  /// NAT gateway.
  final List<NatGatewayAddress>? natGatewayAddresses;

  /// The ID of the NAT gateway.
  final String? natGatewayId;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final ProvisionedBandwidth? provisionedBandwidth;

  /// The state of the NAT gateway.
  ///
  /// <ul>
  /// <li>
  /// <code>pending</code>: The NAT gateway is being created and is not ready to
  /// process traffic.
  /// </li>
  /// <li>
  /// <code>failed</code>: The NAT gateway could not be created. Check the
  /// <code>failureCode</code> and <code>failureMessage</code> fields for the
  /// reason.
  /// </li>
  /// <li>
  /// <code>available</code>: The NAT gateway is able to process traffic. This
  /// status remains until you delete the NAT gateway, and does not indicate the
  /// health of the NAT gateway.
  /// </li>
  /// <li>
  /// <code>deleting</code>: The NAT gateway is in the process of being terminated
  /// and may still be processing traffic.
  /// </li>
  /// <li>
  /// <code>deleted</code>: The NAT gateway has been terminated and is no longer
  /// processing traffic.
  /// </li>
  /// </ul>
  final NatGatewayState? state;

  /// The ID of the subnet in which the NAT gateway is located.
  final String? subnetId;

  /// The tags for the NAT gateway.
  final List<Tag>? tags;

  /// The ID of the VPC in which the NAT gateway is located.
  final String? vpcId;

  NatGateway({
    this.connectivityType,
    this.createTime,
    this.deleteTime,
    this.failureCode,
    this.failureMessage,
    this.natGatewayAddresses,
    this.natGatewayId,
    this.provisionedBandwidth,
    this.state,
    this.subnetId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final connectivityType = this.connectivityType;
    final createTime = this.createTime;
    final deleteTime = this.deleteTime;
    final failureCode = this.failureCode;
    final failureMessage = this.failureMessage;
    final natGatewayAddresses = this.natGatewayAddresses;
    final natGatewayId = this.natGatewayId;
    final provisionedBandwidth = this.provisionedBandwidth;
    final state = this.state;
    final subnetId = this.subnetId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (connectivityType != null) 'connectivityType': connectivityType.value,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (deleteTime != null) 'deleteTime': iso8601ToJson(deleteTime),
      if (failureCode != null) 'failureCode': failureCode,
      if (failureMessage != null) 'failureMessage': failureMessage,
      if (natGatewayAddresses != null)
        'natGatewayAddressSet': natGatewayAddresses,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
      if (provisionedBandwidth != null)
        'provisionedBandwidth': provisionedBandwidth,
      if (state != null) 'state': state.value,
      if (subnetId != null) 'subnetId': subnetId,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes the IP addresses and network interface associated with a NAT
/// gateway.
class NatGatewayAddress {
  /// [Public NAT gateway only] The allocation ID of the Elastic IP address that's
  /// associated with the NAT gateway.
  final String? allocationId;

  /// [Public NAT gateway only] The association ID of the Elastic IP address
  /// that's associated with the NAT gateway.
  final String? associationId;

  /// The address failure message.
  final String? failureMessage;

  /// Defines if the IP address is the primary address.
  final bool? isPrimary;

  /// The ID of the network interface associated with the NAT gateway.
  final String? networkInterfaceId;

  /// The private IP address associated with the NAT gateway.
  final String? privateIp;

  /// [Public NAT gateway only] The Elastic IP address associated with the NAT
  /// gateway.
  final String? publicIp;

  /// The address status.
  final NatGatewayAddressStatus? status;

  NatGatewayAddress({
    this.allocationId,
    this.associationId,
    this.failureMessage,
    this.isPrimary,
    this.networkInterfaceId,
    this.privateIp,
    this.publicIp,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final associationId = this.associationId;
    final failureMessage = this.failureMessage;
    final isPrimary = this.isPrimary;
    final networkInterfaceId = this.networkInterfaceId;
    final privateIp = this.privateIp;
    final publicIp = this.publicIp;
    final status = this.status;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (associationId != null) 'associationId': associationId,
      if (failureMessage != null) 'failureMessage': failureMessage,
      if (isPrimary != null) 'isPrimary': isPrimary,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (privateIp != null) 'privateIp': privateIp,
      if (publicIp != null) 'publicIp': publicIp,
      if (status != null) 'status': status.value,
    };
  }
}

enum NatGatewayAddressStatus {
  assigning('assigning'),
  unassigning('unassigning'),
  associating('associating'),
  disassociating('disassociating'),
  succeeded('succeeded'),
  failed('failed'),
  ;

  final String value;

  const NatGatewayAddressStatus(this.value);

  static NatGatewayAddressStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NatGatewayAddressStatus'));
}

enum NatGatewayState {
  pending('pending'),
  failed('failed'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const NatGatewayState(this.value);

  static NatGatewayState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum NatGatewayState'));
}

/// Describes a network ACL.
class NetworkAcl {
  /// Any associations between the network ACL and one or more subnets
  final List<NetworkAclAssociation>? associations;

  /// The entries (rules) in the network ACL.
  final List<NetworkAclEntry>? entries;

  /// Indicates whether this is the default network ACL for the VPC.
  final bool? isDefault;

  /// The ID of the network ACL.
  final String? networkAclId;

  /// The ID of the Amazon Web Services account that owns the network ACL.
  final String? ownerId;

  /// Any tags assigned to the network ACL.
  final List<Tag>? tags;

  /// The ID of the VPC for the network ACL.
  final String? vpcId;

  NetworkAcl({
    this.associations,
    this.entries,
    this.isDefault,
    this.networkAclId,
    this.ownerId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    final entries = this.entries;
    final isDefault = this.isDefault;
    final networkAclId = this.networkAclId;
    final ownerId = this.ownerId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (associations != null) 'associationSet': associations,
      if (entries != null) 'entrySet': entries,
      if (isDefault != null) 'default': isDefault,
      if (networkAclId != null) 'networkAclId': networkAclId,
      if (ownerId != null) 'ownerId': ownerId,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes an association between a network ACL and a subnet.
class NetworkAclAssociation {
  /// The ID of the association between a network ACL and a subnet.
  final String? networkAclAssociationId;

  /// The ID of the network ACL.
  final String? networkAclId;

  /// The ID of the subnet.
  final String? subnetId;

  NetworkAclAssociation({
    this.networkAclAssociationId,
    this.networkAclId,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final networkAclAssociationId = this.networkAclAssociationId;
    final networkAclId = this.networkAclId;
    final subnetId = this.subnetId;
    return {
      if (networkAclAssociationId != null)
        'networkAclAssociationId': networkAclAssociationId,
      if (networkAclId != null) 'networkAclId': networkAclId,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

/// Describes an entry in a network ACL.
class NetworkAclEntry {
  /// The IPv4 network range to allow or deny, in CIDR notation.
  final String? cidrBlock;

  /// Indicates whether the rule is an egress rule (applied to traffic leaving the
  /// subnet).
  final bool? egress;

  /// ICMP protocol: The ICMP type and code.
  final IcmpTypeCode? icmpTypeCode;

  /// The IPv6 network range to allow or deny, in CIDR notation.
  final String? ipv6CidrBlock;

  /// TCP or UDP protocols: The range of ports the rule applies to.
  final PortRange? portRange;

  /// The protocol number. A value of "-1" means all protocols.
  final String? protocol;

  /// Indicates whether to allow or deny the traffic that matches the rule.
  final RuleAction? ruleAction;

  /// The rule number for the entry. ACL entries are processed in ascending order
  /// by rule number.
  final int? ruleNumber;

  NetworkAclEntry({
    this.cidrBlock,
    this.egress,
    this.icmpTypeCode,
    this.ipv6CidrBlock,
    this.portRange,
    this.protocol,
    this.ruleAction,
    this.ruleNumber,
  });

  Map<String, dynamic> toJson() {
    final cidrBlock = this.cidrBlock;
    final egress = this.egress;
    final icmpTypeCode = this.icmpTypeCode;
    final ipv6CidrBlock = this.ipv6CidrBlock;
    final portRange = this.portRange;
    final protocol = this.protocol;
    final ruleAction = this.ruleAction;
    final ruleNumber = this.ruleNumber;
    return {
      if (cidrBlock != null) 'cidrBlock': cidrBlock,
      if (egress != null) 'egress': egress,
      if (icmpTypeCode != null) 'icmpTypeCode': icmpTypeCode,
      if (ipv6CidrBlock != null) 'ipv6CidrBlock': ipv6CidrBlock,
      if (portRange != null) 'portRange': portRange,
      if (protocol != null) 'protocol': protocol,
      if (ruleAction != null) 'ruleAction': ruleAction.value,
      if (ruleNumber != null) 'ruleNumber': ruleNumber,
    };
  }
}

/// The minimum and maximum amount of network bandwidth, in gigabits per second
/// (Gbps).
/// <note>
/// Setting the minimum bandwidth does not guarantee that your instance will
/// achieve the minimum bandwidth. Amazon EC2 will identify instance types that
/// support the specified minimum bandwidth, but the actual bandwidth of your
/// instance might go below the specified minimum at times. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth">Available
/// instance bandwidth</a> in the <i>Amazon EC2 User Guide</i>.
/// </note>
class NetworkBandwidthGbps {
  /// The maximum amount of network bandwidth, in Gbps. If this parameter is not
  /// specified, there is no maximum limit.
  final double? max;

  /// The minimum amount of network bandwidth, in Gbps. If this parameter is not
  /// specified, there is no minimum limit.
  final double? min;

  NetworkBandwidthGbps({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum amount of network bandwidth, in gigabits per second
/// (Gbps).
/// <note>
/// Setting the minimum bandwidth does not guarantee that your instance will
/// achieve the minimum bandwidth. Amazon EC2 will identify instance types that
/// support the specified minimum bandwidth, but the actual bandwidth of your
/// instance might go below the specified minimum at times. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth">Available
/// instance bandwidth</a> in the <i>Amazon EC2 User Guide</i>.
/// </note>
class NetworkBandwidthGbpsRequest {
  /// The maximum amount of network bandwidth, in Gbps. To specify no maximum
  /// limit, omit this parameter.
  final double? max;

  /// The minimum amount of network bandwidth, in Gbps. To specify no minimum
  /// limit, omit this parameter.
  final double? min;

  NetworkBandwidthGbpsRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

/// Describes the network card support of the instance type.
class NetworkCardInfo {
  /// The baseline network performance of the network card, in Gbps.
  final double? baselineBandwidthInGbps;

  /// The maximum number of network interfaces for the network card.
  final int? maximumNetworkInterfaces;

  /// The index of the network card.
  final int? networkCardIndex;

  /// The network performance of the network card.
  final String? networkPerformance;

  /// The peak (burst) network performance of the network card, in Gbps.
  final double? peakBandwidthInGbps;

  NetworkCardInfo({
    this.baselineBandwidthInGbps,
    this.maximumNetworkInterfaces,
    this.networkCardIndex,
    this.networkPerformance,
    this.peakBandwidthInGbps,
  });

  Map<String, dynamic> toJson() {
    final baselineBandwidthInGbps = this.baselineBandwidthInGbps;
    final maximumNetworkInterfaces = this.maximumNetworkInterfaces;
    final networkCardIndex = this.networkCardIndex;
    final networkPerformance = this.networkPerformance;
    final peakBandwidthInGbps = this.peakBandwidthInGbps;
    return {
      if (baselineBandwidthInGbps != null)
        'baselineBandwidthInGbps': baselineBandwidthInGbps,
      if (maximumNetworkInterfaces != null)
        'maximumNetworkInterfaces': maximumNetworkInterfaces,
      if (networkCardIndex != null) 'networkCardIndex': networkCardIndex,
      if (networkPerformance != null) 'networkPerformance': networkPerformance,
      if (peakBandwidthInGbps != null)
        'peakBandwidthInGbps': peakBandwidthInGbps,
    };
  }
}

/// Describes the networking features of the instance type.
class NetworkInfo {
  /// The index of the default network card, starting at 0.
  final int? defaultNetworkCardIndex;

  /// Describes the Elastic Fabric Adapters for the instance type.
  final EfaInfo? efaInfo;

  /// Indicates whether Elastic Fabric Adapter (EFA) is supported.
  final bool? efaSupported;

  /// Indicates whether the instance type supports ENA Express. ENA Express uses
  /// Amazon Web Services Scalable Reliable Datagram (SRD) technology to increase
  /// the maximum bandwidth used per stream and minimize tail latency of network
  /// traffic between EC2 instances.
  final bool? enaSrdSupported;

  /// Indicates whether Elastic Network Adapter (ENA) is supported.
  final EnaSupport? enaSupport;

  /// Indicates whether the instance type automatically encrypts in-transit
  /// traffic between instances.
  final bool? encryptionInTransitSupported;

  /// The maximum number of IPv4 addresses per network interface.
  final int? ipv4AddressesPerInterface;

  /// The maximum number of IPv6 addresses per network interface.
  final int? ipv6AddressesPerInterface;

  /// Indicates whether IPv6 is supported.
  final bool? ipv6Supported;

  /// The maximum number of physical network cards that can be allocated to the
  /// instance.
  final int? maximumNetworkCards;

  /// The maximum number of network interfaces for the instance type.
  final int? maximumNetworkInterfaces;

  /// Describes the network cards for the instance type.
  final List<NetworkCardInfo>? networkCards;

  /// The network performance.
  final String? networkPerformance;

  NetworkInfo({
    this.defaultNetworkCardIndex,
    this.efaInfo,
    this.efaSupported,
    this.enaSrdSupported,
    this.enaSupport,
    this.encryptionInTransitSupported,
    this.ipv4AddressesPerInterface,
    this.ipv6AddressesPerInterface,
    this.ipv6Supported,
    this.maximumNetworkCards,
    this.maximumNetworkInterfaces,
    this.networkCards,
    this.networkPerformance,
  });

  Map<String, dynamic> toJson() {
    final defaultNetworkCardIndex = this.defaultNetworkCardIndex;
    final efaInfo = this.efaInfo;
    final efaSupported = this.efaSupported;
    final enaSrdSupported = this.enaSrdSupported;
    final enaSupport = this.enaSupport;
    final encryptionInTransitSupported = this.encryptionInTransitSupported;
    final ipv4AddressesPerInterface = this.ipv4AddressesPerInterface;
    final ipv6AddressesPerInterface = this.ipv6AddressesPerInterface;
    final ipv6Supported = this.ipv6Supported;
    final maximumNetworkCards = this.maximumNetworkCards;
    final maximumNetworkInterfaces = this.maximumNetworkInterfaces;
    final networkCards = this.networkCards;
    final networkPerformance = this.networkPerformance;
    return {
      if (defaultNetworkCardIndex != null)
        'defaultNetworkCardIndex': defaultNetworkCardIndex,
      if (efaInfo != null) 'efaInfo': efaInfo,
      if (efaSupported != null) 'efaSupported': efaSupported,
      if (enaSrdSupported != null) 'enaSrdSupported': enaSrdSupported,
      if (enaSupport != null) 'enaSupport': enaSupport.value,
      if (encryptionInTransitSupported != null)
        'encryptionInTransitSupported': encryptionInTransitSupported,
      if (ipv4AddressesPerInterface != null)
        'ipv4AddressesPerInterface': ipv4AddressesPerInterface,
      if (ipv6AddressesPerInterface != null)
        'ipv6AddressesPerInterface': ipv6AddressesPerInterface,
      if (ipv6Supported != null) 'ipv6Supported': ipv6Supported,
      if (maximumNetworkCards != null)
        'maximumNetworkCards': maximumNetworkCards,
      if (maximumNetworkInterfaces != null)
        'maximumNetworkInterfaces': maximumNetworkInterfaces,
      if (networkCards != null) 'networkCards': networkCards,
      if (networkPerformance != null) 'networkPerformance': networkPerformance,
    };
  }
}

/// Describes a Network Access Scope.
class NetworkInsightsAccessScope {
  /// The creation date.
  final DateTime? createdDate;

  /// The Amazon Resource Name (ARN) of the Network Access Scope.
  final String? networkInsightsAccessScopeArn;

  /// The ID of the Network Access Scope.
  final String? networkInsightsAccessScopeId;

  /// The tags.
  final List<Tag>? tags;

  /// The last updated date.
  final DateTime? updatedDate;

  NetworkInsightsAccessScope({
    this.createdDate,
    this.networkInsightsAccessScopeArn,
    this.networkInsightsAccessScopeId,
    this.tags,
    this.updatedDate,
  });

  Map<String, dynamic> toJson() {
    final createdDate = this.createdDate;
    final networkInsightsAccessScopeArn = this.networkInsightsAccessScopeArn;
    final networkInsightsAccessScopeId = this.networkInsightsAccessScopeId;
    final tags = this.tags;
    final updatedDate = this.updatedDate;
    return {
      if (createdDate != null) 'createdDate': iso8601ToJson(createdDate),
      if (networkInsightsAccessScopeArn != null)
        'networkInsightsAccessScopeArn': networkInsightsAccessScopeArn,
      if (networkInsightsAccessScopeId != null)
        'networkInsightsAccessScopeId': networkInsightsAccessScopeId,
      if (tags != null) 'tagSet': tags,
      if (updatedDate != null) 'updatedDate': iso8601ToJson(updatedDate),
    };
  }
}

/// Describes a Network Access Scope analysis.
class NetworkInsightsAccessScopeAnalysis {
  /// The number of network interfaces analyzed.
  final int? analyzedEniCount;

  /// The analysis end date.
  final DateTime? endDate;

  /// Indicates whether there are findings.
  final FindingsFound? findingsFound;

  /// The Amazon Resource Name (ARN) of the Network Access Scope analysis.
  final String? networkInsightsAccessScopeAnalysisArn;

  /// The ID of the Network Access Scope analysis.
  final String? networkInsightsAccessScopeAnalysisId;

  /// The ID of the Network Access Scope.
  final String? networkInsightsAccessScopeId;

  /// The analysis start date.
  final DateTime? startDate;

  /// The status.
  final AnalysisStatus? status;

  /// The status message.
  final String? statusMessage;

  /// The tags.
  final List<Tag>? tags;

  /// The warning message.
  final String? warningMessage;

  NetworkInsightsAccessScopeAnalysis({
    this.analyzedEniCount,
    this.endDate,
    this.findingsFound,
    this.networkInsightsAccessScopeAnalysisArn,
    this.networkInsightsAccessScopeAnalysisId,
    this.networkInsightsAccessScopeId,
    this.startDate,
    this.status,
    this.statusMessage,
    this.tags,
    this.warningMessage,
  });

  Map<String, dynamic> toJson() {
    final analyzedEniCount = this.analyzedEniCount;
    final endDate = this.endDate;
    final findingsFound = this.findingsFound;
    final networkInsightsAccessScopeAnalysisArn =
        this.networkInsightsAccessScopeAnalysisArn;
    final networkInsightsAccessScopeAnalysisId =
        this.networkInsightsAccessScopeAnalysisId;
    final networkInsightsAccessScopeId = this.networkInsightsAccessScopeId;
    final startDate = this.startDate;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    final warningMessage = this.warningMessage;
    return {
      if (analyzedEniCount != null) 'analyzedEniCount': analyzedEniCount,
      if (endDate != null) 'endDate': iso8601ToJson(endDate),
      if (findingsFound != null) 'findingsFound': findingsFound.value,
      if (networkInsightsAccessScopeAnalysisArn != null)
        'networkInsightsAccessScopeAnalysisArn':
            networkInsightsAccessScopeAnalysisArn,
      if (networkInsightsAccessScopeAnalysisId != null)
        'networkInsightsAccessScopeAnalysisId':
            networkInsightsAccessScopeAnalysisId,
      if (networkInsightsAccessScopeId != null)
        'networkInsightsAccessScopeId': networkInsightsAccessScopeId,
      if (startDate != null) 'startDate': iso8601ToJson(startDate),
      if (status != null) 'status': status.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
      if (warningMessage != null) 'warningMessage': warningMessage,
    };
  }
}

/// Describes the Network Access Scope content.
class NetworkInsightsAccessScopeContent {
  /// The paths to exclude.
  final List<AccessScopePath>? excludePaths;

  /// The paths to match.
  final List<AccessScopePath>? matchPaths;

  /// The ID of the Network Access Scope.
  final String? networkInsightsAccessScopeId;

  NetworkInsightsAccessScopeContent({
    this.excludePaths,
    this.matchPaths,
    this.networkInsightsAccessScopeId,
  });

  Map<String, dynamic> toJson() {
    final excludePaths = this.excludePaths;
    final matchPaths = this.matchPaths;
    final networkInsightsAccessScopeId = this.networkInsightsAccessScopeId;
    return {
      if (excludePaths != null) 'excludePathSet': excludePaths,
      if (matchPaths != null) 'matchPathSet': matchPaths,
      if (networkInsightsAccessScopeId != null)
        'networkInsightsAccessScopeId': networkInsightsAccessScopeId,
    };
  }
}

/// Describes a network insights analysis.
class NetworkInsightsAnalysis {
  /// The member accounts that contain resources that the path can traverse.
  final List<String>? additionalAccounts;

  /// Potential intermediate components.
  final List<AlternatePathHint>? alternatePathHints;

  /// The explanations. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html">Reachability
  /// Analyzer explanation codes</a>.
  final List<Explanation>? explanations;

  /// The Amazon Resource Names (ARN) of the resources that the path must
  /// traverse.
  final List<String>? filterInArns;

  /// The components in the path from source to destination.
  final List<PathComponent>? forwardPathComponents;

  /// The Amazon Resource Name (ARN) of the network insights analysis.
  final String? networkInsightsAnalysisArn;

  /// The ID of the network insights analysis.
  final String? networkInsightsAnalysisId;

  /// The ID of the path.
  final String? networkInsightsPathId;

  /// Indicates whether the destination is reachable from the source.
  final bool? networkPathFound;

  /// The components in the path from destination to source.
  final List<PathComponent>? returnPathComponents;

  /// The time the analysis started.
  final DateTime? startDate;

  /// The status of the network insights analysis.
  final AnalysisStatus? status;

  /// The status message, if the status is <code>failed</code>.
  final String? statusMessage;

  /// Potential intermediate accounts.
  final List<String>? suggestedAccounts;

  /// The tags.
  final List<Tag>? tags;

  /// The warning message.
  final String? warningMessage;

  NetworkInsightsAnalysis({
    this.additionalAccounts,
    this.alternatePathHints,
    this.explanations,
    this.filterInArns,
    this.forwardPathComponents,
    this.networkInsightsAnalysisArn,
    this.networkInsightsAnalysisId,
    this.networkInsightsPathId,
    this.networkPathFound,
    this.returnPathComponents,
    this.startDate,
    this.status,
    this.statusMessage,
    this.suggestedAccounts,
    this.tags,
    this.warningMessage,
  });

  Map<String, dynamic> toJson() {
    final additionalAccounts = this.additionalAccounts;
    final alternatePathHints = this.alternatePathHints;
    final explanations = this.explanations;
    final filterInArns = this.filterInArns;
    final forwardPathComponents = this.forwardPathComponents;
    final networkInsightsAnalysisArn = this.networkInsightsAnalysisArn;
    final networkInsightsAnalysisId = this.networkInsightsAnalysisId;
    final networkInsightsPathId = this.networkInsightsPathId;
    final networkPathFound = this.networkPathFound;
    final returnPathComponents = this.returnPathComponents;
    final startDate = this.startDate;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final suggestedAccounts = this.suggestedAccounts;
    final tags = this.tags;
    final warningMessage = this.warningMessage;
    return {
      if (additionalAccounts != null)
        'additionalAccountSet': additionalAccounts,
      if (alternatePathHints != null)
        'alternatePathHintSet': alternatePathHints,
      if (explanations != null) 'explanationSet': explanations,
      if (filterInArns != null) 'filterInArnSet': filterInArns,
      if (forwardPathComponents != null)
        'forwardPathComponentSet': forwardPathComponents,
      if (networkInsightsAnalysisArn != null)
        'networkInsightsAnalysisArn': networkInsightsAnalysisArn,
      if (networkInsightsAnalysisId != null)
        'networkInsightsAnalysisId': networkInsightsAnalysisId,
      if (networkInsightsPathId != null)
        'networkInsightsPathId': networkInsightsPathId,
      if (networkPathFound != null) 'networkPathFound': networkPathFound,
      if (returnPathComponents != null)
        'returnPathComponentSet': returnPathComponents,
      if (startDate != null) 'startDate': iso8601ToJson(startDate),
      if (status != null) 'status': status.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (suggestedAccounts != null) 'suggestedAccountSet': suggestedAccounts,
      if (tags != null) 'tagSet': tags,
      if (warningMessage != null) 'warningMessage': warningMessage,
    };
  }
}

/// Describes a path.
class NetworkInsightsPath {
  /// The time stamp when the path was created.
  final DateTime? createdDate;

  /// The ID of the destination.
  final String? destination;

  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The IP address of the destination.
  final String? destinationIp;

  /// The destination port.
  final int? destinationPort;

  /// Scopes the analysis to network paths that match specific filters at the
  /// destination.
  final PathFilter? filterAtDestination;

  /// Scopes the analysis to network paths that match specific filters at the
  /// source.
  final PathFilter? filterAtSource;

  /// The Amazon Resource Name (ARN) of the path.
  final String? networkInsightsPathArn;

  /// The ID of the path.
  final String? networkInsightsPathId;

  /// The protocol.
  final Protocol? protocol;

  /// The ID of the source.
  final String? source;

  /// The Amazon Resource Name (ARN) of the source.
  final String? sourceArn;

  /// The IP address of the source.
  final String? sourceIp;

  /// The tags associated with the path.
  final List<Tag>? tags;

  NetworkInsightsPath({
    this.createdDate,
    this.destination,
    this.destinationArn,
    this.destinationIp,
    this.destinationPort,
    this.filterAtDestination,
    this.filterAtSource,
    this.networkInsightsPathArn,
    this.networkInsightsPathId,
    this.protocol,
    this.source,
    this.sourceArn,
    this.sourceIp,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final createdDate = this.createdDate;
    final destination = this.destination;
    final destinationArn = this.destinationArn;
    final destinationIp = this.destinationIp;
    final destinationPort = this.destinationPort;
    final filterAtDestination = this.filterAtDestination;
    final filterAtSource = this.filterAtSource;
    final networkInsightsPathArn = this.networkInsightsPathArn;
    final networkInsightsPathId = this.networkInsightsPathId;
    final protocol = this.protocol;
    final source = this.source;
    final sourceArn = this.sourceArn;
    final sourceIp = this.sourceIp;
    final tags = this.tags;
    return {
      if (createdDate != null) 'createdDate': iso8601ToJson(createdDate),
      if (destination != null) 'destination': destination,
      if (destinationArn != null) 'destinationArn': destinationArn,
      if (destinationIp != null) 'destinationIp': destinationIp,
      if (destinationPort != null) 'destinationPort': destinationPort,
      if (filterAtDestination != null)
        'filterAtDestination': filterAtDestination,
      if (filterAtSource != null) 'filterAtSource': filterAtSource,
      if (networkInsightsPathArn != null)
        'networkInsightsPathArn': networkInsightsPathArn,
      if (networkInsightsPathId != null)
        'networkInsightsPathId': networkInsightsPathId,
      if (protocol != null) 'protocol': protocol.value,
      if (source != null) 'source': source,
      if (sourceArn != null) 'sourceArn': sourceArn,
      if (sourceIp != null) 'sourceIp': sourceIp,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes a network interface.
class NetworkInterface {
  /// The association information for an Elastic IP address (IPv4) associated with
  /// the network interface.
  final NetworkInterfaceAssociation? association;

  /// The network interface attachment.
  final NetworkInterfaceAttachment? attachment;

  /// The Availability Zone.
  final String? availabilityZone;

  /// A security group connection tracking configuration that enables you to set
  /// the timeout for connection tracking on an Elastic network interface. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection
  /// tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final ConnectionTrackingConfiguration? connectionTrackingConfiguration;

  /// Indicates whether a network interface with an IPv6 address is unreachable
  /// from the public internet. If the value is <code>true</code>, inbound traffic
  /// from the internet is dropped and you cannot assign an elastic IP address to
  /// the network interface. The network interface is reachable from peered VPCs
  /// and resources connected through a transit gateway, including on-premises
  /// networks.
  final bool? denyAllIgwTraffic;

  /// A description.
  final String? description;

  /// Any security groups for the network interface.
  final List<GroupIdentifier>? groups;

  /// The type of network interface.
  final NetworkInterfaceType? interfaceType;

  /// The IPv4 prefixes that are assigned to the network interface.
  final List<Ipv4PrefixSpecification>? ipv4Prefixes;

  /// The IPv6 globally unique address associated with the network interface.
  final String? ipv6Address;

  /// The IPv6 addresses associated with the network interface.
  final List<NetworkInterfaceIpv6Address>? ipv6Addresses;

  /// Indicates whether this is an IPv6 only network interface.
  final bool? ipv6Native;

  /// The IPv6 prefixes that are assigned to the network interface.
  final List<Ipv6PrefixSpecification>? ipv6Prefixes;

  /// The MAC address.
  final String? macAddress;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The Amazon Web Services account ID of the owner of the network interface.
  final String? ownerId;

  /// The private DNS name.
  final String? privateDnsName;

  /// The IPv4 address of the network interface within the subnet.
  final String? privateIpAddress;

  /// The private IPv4 addresses associated with the network interface.
  final List<NetworkInterfacePrivateIpAddress>? privateIpAddresses;

  /// The alias or Amazon Web Services account ID of the principal or service that
  /// created the network interface.
  final String? requesterId;

  /// Indicates whether the network interface is being managed by Amazon Web
  /// Services.
  final bool? requesterManaged;

  /// Indicates whether source/destination checking is enabled.
  final bool? sourceDestCheck;

  /// The status of the network interface.
  final NetworkInterfaceStatus? status;

  /// The ID of the subnet.
  final String? subnetId;

  /// Any tags assigned to the network interface.
  final List<Tag>? tagSet;

  /// The ID of the VPC.
  final String? vpcId;

  NetworkInterface({
    this.association,
    this.attachment,
    this.availabilityZone,
    this.connectionTrackingConfiguration,
    this.denyAllIgwTraffic,
    this.description,
    this.groups,
    this.interfaceType,
    this.ipv4Prefixes,
    this.ipv6Address,
    this.ipv6Addresses,
    this.ipv6Native,
    this.ipv6Prefixes,
    this.macAddress,
    this.networkInterfaceId,
    this.outpostArn,
    this.ownerId,
    this.privateDnsName,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.requesterId,
    this.requesterManaged,
    this.sourceDestCheck,
    this.status,
    this.subnetId,
    this.tagSet,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    final attachment = this.attachment;
    final availabilityZone = this.availabilityZone;
    final connectionTrackingConfiguration =
        this.connectionTrackingConfiguration;
    final denyAllIgwTraffic = this.denyAllIgwTraffic;
    final description = this.description;
    final groups = this.groups;
    final interfaceType = this.interfaceType;
    final ipv4Prefixes = this.ipv4Prefixes;
    final ipv6Address = this.ipv6Address;
    final ipv6Addresses = this.ipv6Addresses;
    final ipv6Native = this.ipv6Native;
    final ipv6Prefixes = this.ipv6Prefixes;
    final macAddress = this.macAddress;
    final networkInterfaceId = this.networkInterfaceId;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final privateDnsName = this.privateDnsName;
    final privateIpAddress = this.privateIpAddress;
    final privateIpAddresses = this.privateIpAddresses;
    final requesterId = this.requesterId;
    final requesterManaged = this.requesterManaged;
    final sourceDestCheck = this.sourceDestCheck;
    final status = this.status;
    final subnetId = this.subnetId;
    final tagSet = this.tagSet;
    final vpcId = this.vpcId;
    return {
      if (association != null) 'association': association,
      if (attachment != null) 'attachment': attachment,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (connectionTrackingConfiguration != null)
        'connectionTrackingConfiguration': connectionTrackingConfiguration,
      if (denyAllIgwTraffic != null) 'denyAllIgwTraffic': denyAllIgwTraffic,
      if (description != null) 'description': description,
      if (groups != null) 'groupSet': groups,
      if (interfaceType != null) 'interfaceType': interfaceType.value,
      if (ipv4Prefixes != null) 'ipv4PrefixSet': ipv4Prefixes,
      if (ipv6Address != null) 'ipv6Address': ipv6Address,
      if (ipv6Addresses != null) 'ipv6AddressesSet': ipv6Addresses,
      if (ipv6Native != null) 'ipv6Native': ipv6Native,
      if (ipv6Prefixes != null) 'ipv6PrefixSet': ipv6Prefixes,
      if (macAddress != null) 'macAddress': macAddress,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
      if (privateIpAddresses != null)
        'privateIpAddressesSet': privateIpAddresses,
      if (requesterId != null) 'requesterId': requesterId,
      if (requesterManaged != null) 'requesterManaged': requesterManaged,
      if (sourceDestCheck != null) 'sourceDestCheck': sourceDestCheck,
      if (status != null) 'status': status.value,
      if (subnetId != null) 'subnetId': subnetId,
      if (tagSet != null) 'tagSet': tagSet,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes association information for an Elastic IP address (IPv4 only), or
/// a Carrier IP address (for a network interface which resides in a subnet in a
/// Wavelength Zone).
class NetworkInterfaceAssociation {
  /// The allocation ID.
  final String? allocationId;

  /// The association ID.
  final String? associationId;

  /// The carrier IP address associated with the network interface.
  ///
  /// This option is only available when the network interface is in a subnet
  /// which is associated with a Wavelength Zone.
  final String? carrierIp;

  /// The customer-owned IP address associated with the network interface.
  final String? customerOwnedIp;

  /// The ID of the Elastic IP address owner.
  final String? ipOwnerId;

  /// The public DNS name.
  final String? publicDnsName;

  /// The address of the Elastic IP address bound to the network interface.
  final String? publicIp;

  NetworkInterfaceAssociation({
    this.allocationId,
    this.associationId,
    this.carrierIp,
    this.customerOwnedIp,
    this.ipOwnerId,
    this.publicDnsName,
    this.publicIp,
  });

  Map<String, dynamic> toJson() {
    final allocationId = this.allocationId;
    final associationId = this.associationId;
    final carrierIp = this.carrierIp;
    final customerOwnedIp = this.customerOwnedIp;
    final ipOwnerId = this.ipOwnerId;
    final publicDnsName = this.publicDnsName;
    final publicIp = this.publicIp;
    return {
      if (allocationId != null) 'allocationId': allocationId,
      if (associationId != null) 'associationId': associationId,
      if (carrierIp != null) 'carrierIp': carrierIp,
      if (customerOwnedIp != null) 'customerOwnedIp': customerOwnedIp,
      if (ipOwnerId != null) 'ipOwnerId': ipOwnerId,
      if (publicDnsName != null) 'publicDnsName': publicDnsName,
      if (publicIp != null) 'publicIp': publicIp,
    };
  }
}

/// Describes a network interface attachment.
class NetworkInterfaceAttachment {
  /// The timestamp indicating when the attachment initiated.
  final DateTime? attachTime;

  /// The ID of the network interface attachment.
  final String? attachmentId;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool? deleteOnTermination;

  /// The device index of the network interface attachment on the instance.
  final int? deviceIndex;

  /// Configures ENA Express for the network interface that this action attaches
  /// to the instance.
  final AttachmentEnaSrdSpecification? enaSrdSpecification;

  /// The ID of the instance.
  final String? instanceId;

  /// The Amazon Web Services account ID of the owner of the instance.
  final String? instanceOwnerId;

  /// The index of the network card.
  final int? networkCardIndex;

  /// The attachment state.
  final AttachmentStatus? status;

  NetworkInterfaceAttachment({
    this.attachTime,
    this.attachmentId,
    this.deleteOnTermination,
    this.deviceIndex,
    this.enaSrdSpecification,
    this.instanceId,
    this.instanceOwnerId,
    this.networkCardIndex,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final attachTime = this.attachTime;
    final attachmentId = this.attachmentId;
    final deleteOnTermination = this.deleteOnTermination;
    final deviceIndex = this.deviceIndex;
    final enaSrdSpecification = this.enaSrdSpecification;
    final instanceId = this.instanceId;
    final instanceOwnerId = this.instanceOwnerId;
    final networkCardIndex = this.networkCardIndex;
    final status = this.status;
    return {
      if (attachTime != null) 'attachTime': iso8601ToJson(attachTime),
      if (attachmentId != null) 'attachmentId': attachmentId,
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (deviceIndex != null) 'deviceIndex': deviceIndex,
      if (enaSrdSpecification != null)
        'enaSrdSpecification': enaSrdSpecification,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceOwnerId != null) 'instanceOwnerId': instanceOwnerId,
      if (networkCardIndex != null) 'networkCardIndex': networkCardIndex,
      if (status != null) 'status': status.value,
    };
  }
}

/// Describes an attachment change.
class NetworkInterfaceAttachmentChanges {
  /// The ID of the network interface attachment.
  final String? attachmentId;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool? deleteOnTermination;

  NetworkInterfaceAttachmentChanges({
    this.attachmentId,
    this.deleteOnTermination,
  });

  Map<String, dynamic> toJson() {
    final attachmentId = this.attachmentId;
    final deleteOnTermination = this.deleteOnTermination;
    return {
      if (attachmentId != null) 'attachmentId': attachmentId,
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
    };
  }
}

enum NetworkInterfaceAttribute {
  description('description'),
  groupSet('groupSet'),
  sourceDestCheck('sourceDestCheck'),
  attachment('attachment'),
  associatePublicIpAddress('associatePublicIpAddress'),
  ;

  final String value;

  const NetworkInterfaceAttribute(this.value);

  static NetworkInterfaceAttribute fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NetworkInterfaceAttribute'));
}

/// The minimum and maximum number of network interfaces.
class NetworkInterfaceCount {
  /// The maximum number of network interfaces. If this parameter is not
  /// specified, there is no maximum limit.
  final int? max;

  /// The minimum number of network interfaces. If this parameter is not
  /// specified, there is no minimum limit.
  final int? min;

  NetworkInterfaceCount({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum number of network interfaces.
class NetworkInterfaceCountRequest {
  /// The maximum number of network interfaces. To specify no maximum limit, omit
  /// this parameter.
  final int? max;

  /// The minimum number of network interfaces. To specify no minimum limit, omit
  /// this parameter.
  final int? min;

  NetworkInterfaceCountRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

enum NetworkInterfaceCreationType {
  efa('efa'),
  branch('branch'),
  trunk('trunk'),
  ;

  final String value;

  const NetworkInterfaceCreationType(this.value);

  static NetworkInterfaceCreationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NetworkInterfaceCreationType'));
}

/// Describes an IPv6 address associated with a network interface.
class NetworkInterfaceIpv6Address {
  /// The IPv6 address.
  final String? ipv6Address;

  /// Determines if an IPv6 address associated with a network interface is the
  /// primary IPv6 address. When you enable an IPv6 GUA address to be a primary
  /// IPv6, the first IPv6 GUA will be made the primary IPv6 address until the
  /// instance is terminated or the network interface is detached. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyNetworkInterfaceAttribute.html">ModifyNetworkInterfaceAttribute</a>.
  final bool? isPrimaryIpv6;

  NetworkInterfaceIpv6Address({
    this.ipv6Address,
    this.isPrimaryIpv6,
  });

  Map<String, dynamic> toJson() {
    final ipv6Address = this.ipv6Address;
    final isPrimaryIpv6 = this.isPrimaryIpv6;
    return {
      if (ipv6Address != null) 'ipv6Address': ipv6Address,
      if (isPrimaryIpv6 != null) 'isPrimaryIpv6': isPrimaryIpv6,
    };
  }
}

/// Describes a permission for a network interface.
class NetworkInterfacePermission {
  /// The Amazon Web Services account ID.
  final String? awsAccountId;

  /// The Amazon Web Service.
  final String? awsService;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The ID of the network interface permission.
  final String? networkInterfacePermissionId;

  /// The type of permission.
  final InterfacePermissionType? permission;

  /// Information about the state of the permission.
  final NetworkInterfacePermissionState? permissionState;

  NetworkInterfacePermission({
    this.awsAccountId,
    this.awsService,
    this.networkInterfaceId,
    this.networkInterfacePermissionId,
    this.permission,
    this.permissionState,
  });

  Map<String, dynamic> toJson() {
    final awsAccountId = this.awsAccountId;
    final awsService = this.awsService;
    final networkInterfaceId = this.networkInterfaceId;
    final networkInterfacePermissionId = this.networkInterfacePermissionId;
    final permission = this.permission;
    final permissionState = this.permissionState;
    return {
      if (awsAccountId != null) 'awsAccountId': awsAccountId,
      if (awsService != null) 'awsService': awsService,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (networkInterfacePermissionId != null)
        'networkInterfacePermissionId': networkInterfacePermissionId,
      if (permission != null) 'permission': permission.value,
      if (permissionState != null) 'permissionState': permissionState,
    };
  }
}

/// Describes the state of a network interface permission.
class NetworkInterfacePermissionState {
  /// The state of the permission.
  final NetworkInterfacePermissionStateCode? state;

  /// A status message, if applicable.
  final String? statusMessage;

  NetworkInterfacePermissionState({
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum NetworkInterfacePermissionStateCode {
  pending('pending'),
  granted('granted'),
  revoking('revoking'),
  revoked('revoked'),
  ;

  final String value;

  const NetworkInterfacePermissionStateCode(this.value);

  static NetworkInterfacePermissionStateCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NetworkInterfacePermissionStateCode'));
}

/// Describes the private IPv4 address of a network interface.
class NetworkInterfacePrivateIpAddress {
  /// The association information for an Elastic IP address (IPv4) associated with
  /// the network interface.
  final NetworkInterfaceAssociation? association;

  /// Indicates whether this IPv4 address is the primary private IPv4 address of
  /// the network interface.
  final bool? primary;

  /// The private DNS name.
  final String? privateDnsName;

  /// The private IPv4 address.
  final String? privateIpAddress;

  NetworkInterfacePrivateIpAddress({
    this.association,
    this.primary,
    this.privateDnsName,
    this.privateIpAddress,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    final primary = this.primary;
    final privateDnsName = this.privateDnsName;
    final privateIpAddress = this.privateIpAddress;
    return {
      if (association != null) 'association': association,
      if (primary != null) 'primary': primary,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
    };
  }
}

enum NetworkInterfaceStatus {
  available('available'),
  associated('associated'),
  attaching('attaching'),
  inUse('in-use'),
  detaching('detaching'),
  ;

  final String value;

  const NetworkInterfaceStatus(this.value);

  static NetworkInterfaceStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NetworkInterfaceStatus'));
}

enum NetworkInterfaceType {
  interface('interface'),
  natGateway('natGateway'),
  efa('efa'),
  trunk('trunk'),
  loadBalancer('load_balancer'),
  networkLoadBalancer('network_load_balancer'),
  vpcEndpoint('vpc_endpoint'),
  branch('branch'),
  transitGateway('transit_gateway'),
  lambda('lambda'),
  quicksight('quicksight'),
  globalAcceleratorManaged('global_accelerator_managed'),
  apiGatewayManaged('api_gateway_managed'),
  gatewayLoadBalancer('gateway_load_balancer'),
  gatewayLoadBalancerEndpoint('gateway_load_balancer_endpoint'),
  iotRulesManaged('iot_rules_managed'),
  awsCodestarConnectionsManaged('aws_codestar_connections_managed'),
  ;

  final String value;

  const NetworkInterfaceType(this.value);

  static NetworkInterfaceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum NetworkInterfaceType'));
}

/// Describes the cores available to the neuron accelerator.
class NeuronDeviceCoreInfo {
  /// The number of cores available to the neuron accelerator.
  final int? count;

  /// The version of the neuron accelerator.
  final int? version;

  NeuronDeviceCoreInfo({
    this.count,
    this.version,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final version = this.version;
    return {
      if (count != null) 'count': count,
      if (version != null) 'version': version,
    };
  }
}

/// Describes the neuron accelerators for the instance type.
class NeuronDeviceInfo {
  /// Describes the cores available to each neuron accelerator.
  final NeuronDeviceCoreInfo? coreInfo;

  /// The number of neuron accelerators for the instance type.
  final int? count;

  /// Describes the memory available to each neuron accelerator.
  final NeuronDeviceMemoryInfo? memoryInfo;

  /// The name of the neuron accelerator.
  final String? name;

  NeuronDeviceInfo({
    this.coreInfo,
    this.count,
    this.memoryInfo,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final coreInfo = this.coreInfo;
    final count = this.count;
    final memoryInfo = this.memoryInfo;
    final name = this.name;
    return {
      if (coreInfo != null) 'coreInfo': coreInfo,
      if (count != null) 'count': count,
      if (memoryInfo != null) 'memoryInfo': memoryInfo,
      if (name != null) 'name': name,
    };
  }
}

/// Describes the memory available to the neuron accelerator.
class NeuronDeviceMemoryInfo {
  /// The size of the memory available to the neuron accelerator, in MiB.
  final int? sizeInMiB;

  NeuronDeviceMemoryInfo({
    this.sizeInMiB,
  });

  Map<String, dynamic> toJson() {
    final sizeInMiB = this.sizeInMiB;
    return {
      if (sizeInMiB != null) 'sizeInMiB': sizeInMiB,
    };
  }
}

/// Describes the neuron accelerators for the instance type.
class NeuronInfo {
  /// Describes the neuron accelerators for the instance type.
  final List<NeuronDeviceInfo>? neuronDevices;

  /// The total size of the memory for the neuron accelerators for the instance
  /// type, in MiB.
  final int? totalNeuronDeviceMemoryInMiB;

  NeuronInfo({
    this.neuronDevices,
    this.totalNeuronDeviceMemoryInMiB,
  });

  Map<String, dynamic> toJson() {
    final neuronDevices = this.neuronDevices;
    final totalNeuronDeviceMemoryInMiB = this.totalNeuronDeviceMemoryInMiB;
    return {
      if (neuronDevices != null) 'neuronDevices': neuronDevices,
      if (totalNeuronDeviceMemoryInMiB != null)
        'totalNeuronDeviceMemoryInMiB': totalNeuronDeviceMemoryInMiB,
    };
  }
}

/// Describes a DHCP configuration option.
class NewDhcpConfiguration {
  /// The name of a DHCP option.
  final String? key;

  /// The values for the DHCP option.
  final List<String>? values;

  NewDhcpConfiguration({
    this.key,
    this.values,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final values = this.values;
    return {
      if (key != null) 'Key': key,
      if (values != null) 'Value': values,
    };
  }
}

enum NitroEnclavesSupport {
  unsupported('unsupported'),
  supported('supported'),
  ;

  final String value;

  const NitroEnclavesSupport(this.value);

  static NitroEnclavesSupport fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum NitroEnclavesSupport'));
}

/// Describes the supported NitroTPM versions for the instance type.
class NitroTpmInfo {
  /// Indicates the supported NitroTPM versions.
  final List<String>? supportedVersions;

  NitroTpmInfo({
    this.supportedVersions,
  });

  Map<String, dynamic> toJson() {
    final supportedVersions = this.supportedVersions;
    return {
      if (supportedVersions != null) 'supportedVersions': supportedVersions,
    };
  }
}

enum NitroTpmSupport {
  unsupported('unsupported'),
  supported('supported'),
  ;

  final String value;

  const NitroTpmSupport(this.value);

  static NitroTpmSupport fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum NitroTpmSupport'));
}

enum OfferingClassType {
  standard('standard'),
  convertible('convertible'),
  ;

  final String value;

  const OfferingClassType(this.value);

  static OfferingClassType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum OfferingClassType'));
}

enum OfferingTypeValues {
  heavyUtilization('Heavy Utilization'),
  mediumUtilization('Medium Utilization'),
  lightUtilization('Light Utilization'),
  noUpfront('No Upfront'),
  partialUpfront('Partial Upfront'),
  allUpfront('All Upfront'),
  ;

  final String value;

  const OfferingTypeValues(this.value);

  static OfferingTypeValues fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum OfferingTypeValues'));
}

/// Describes the options for an OpenID Connect-compatible user-identity trust
/// provider.
class OidcOptions {
  /// The OIDC authorization endpoint.
  final String? authorizationEndpoint;

  /// The client identifier.
  final String? clientId;

  /// The client secret.
  final String? clientSecret;

  /// The OIDC issuer.
  final String? issuer;

  /// The OpenID Connect (OIDC) scope specified.
  final String? scope;

  /// The OIDC token endpoint.
  final String? tokenEndpoint;

  /// The OIDC user info endpoint.
  final String? userInfoEndpoint;

  OidcOptions({
    this.authorizationEndpoint,
    this.clientId,
    this.clientSecret,
    this.issuer,
    this.scope,
    this.tokenEndpoint,
    this.userInfoEndpoint,
  });

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final clientSecret = this.clientSecret;
    final issuer = this.issuer;
    final scope = this.scope;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      if (authorizationEndpoint != null)
        'authorizationEndpoint': authorizationEndpoint,
      if (clientId != null) 'clientId': clientId,
      if (clientSecret != null) 'clientSecret': clientSecret,
      if (issuer != null) 'issuer': issuer,
      if (scope != null) 'scope': scope,
      if (tokenEndpoint != null) 'tokenEndpoint': tokenEndpoint,
      if (userInfoEndpoint != null) 'userInfoEndpoint': userInfoEndpoint,
    };
  }
}

enum OnDemandAllocationStrategy {
  lowestPrice('lowestPrice'),
  prioritized('prioritized'),
  ;

  final String value;

  const OnDemandAllocationStrategy(this.value);

  static OnDemandAllocationStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum OnDemandAllocationStrategy'));
}

/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
class OnDemandOptions {
  /// The strategy that determines the order of the launch template overrides to
  /// use in fulfilling On-Demand capacity.
  ///
  /// <code>lowest-price</code> - EC2 Fleet uses price to determine the order,
  /// launching the lowest price first.
  ///
  /// <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to
  /// each launch template override, launching the highest priority first.
  ///
  /// Default: <code>lowest-price</code>
  final FleetOnDemandAllocationStrategy? allocationStrategy;

  /// The strategy for using unused Capacity Reservations for fulfilling On-Demand
  /// capacity.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final CapacityReservationOptions? capacityReservationOptions;

  /// The maximum amount per hour for On-Demand Instances that you're willing to
  /// pay.
  /// <note>
  /// If your fleet includes T instances that are configured as
  /// <code>unlimited</code>, and if their average CPU usage exceeds the baseline
  /// utilization, you will incur a charge for surplus credits. The
  /// <code>maxTotalPrice</code> does not account for surplus credits, and, if you
  /// use surplus credits, your final cost might be higher than what you specified
  /// for <code>maxTotalPrice</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits">Surplus
  /// credits can incur charges</a> in the <i>EC2 User Guide</i>.
  /// </note>
  final String? maxTotalPrice;

  /// The minimum target capacity for On-Demand Instances in the fleet. If the
  /// minimum target capacity is not reached, the fleet launches no instances.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  ///
  /// At least one of the following must be specified:
  /// <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code>
  final int? minTargetCapacity;

  /// Indicates that the fleet launches all On-Demand Instances into a single
  /// Availability Zone.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all On-Demand
  /// Instances in the fleet.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleInstanceType;

  OnDemandOptions({
    this.allocationStrategy,
    this.capacityReservationOptions,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final capacityReservationOptions = this.capacityReservationOptions;
    final maxTotalPrice = this.maxTotalPrice;
    final minTargetCapacity = this.minTargetCapacity;
    final singleAvailabilityZone = this.singleAvailabilityZone;
    final singleInstanceType = this.singleInstanceType;
    return {
      if (allocationStrategy != null)
        'allocationStrategy': allocationStrategy.value,
      if (capacityReservationOptions != null)
        'capacityReservationOptions': capacityReservationOptions,
      if (maxTotalPrice != null) 'maxTotalPrice': maxTotalPrice,
      if (minTargetCapacity != null) 'minTargetCapacity': minTargetCapacity,
      if (singleAvailabilityZone != null)
        'singleAvailabilityZone': singleAvailabilityZone,
      if (singleInstanceType != null) 'singleInstanceType': singleInstanceType,
    };
  }
}

/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
class OnDemandOptionsRequest {
  /// The strategy that determines the order of the launch template overrides to
  /// use in fulfilling On-Demand capacity.
  ///
  /// <code>lowest-price</code> - EC2 Fleet uses price to determine the order,
  /// launching the lowest price first.
  ///
  /// <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to
  /// each launch template override, launching the highest priority first.
  ///
  /// Default: <code>lowest-price</code>
  final FleetOnDemandAllocationStrategy? allocationStrategy;

  /// The strategy for using unused Capacity Reservations for fulfilling On-Demand
  /// capacity.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final CapacityReservationOptionsRequest? capacityReservationOptions;

  /// The maximum amount per hour for On-Demand Instances that you're willing to
  /// pay.
  /// <note>
  /// If your fleet includes T instances that are configured as
  /// <code>unlimited</code>, and if their average CPU usage exceeds the baseline
  /// utilization, you will incur a charge for surplus credits. The
  /// <code>MaxTotalPrice</code> does not account for surplus credits, and, if you
  /// use surplus credits, your final cost might be higher than what you specified
  /// for <code>MaxTotalPrice</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits">Surplus
  /// credits can incur charges</a> in the <i>EC2 User Guide</i>.
  /// </note>
  final String? maxTotalPrice;

  /// The minimum target capacity for On-Demand Instances in the fleet. If the
  /// minimum target capacity is not reached, the fleet launches no instances.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  ///
  /// At least one of the following must be specified:
  /// <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code>
  final int? minTargetCapacity;

  /// Indicates that the fleet launches all On-Demand Instances into a single
  /// Availability Zone.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all On-Demand
  /// Instances in the fleet.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleInstanceType;

  OnDemandOptionsRequest({
    this.allocationStrategy,
    this.capacityReservationOptions,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final capacityReservationOptions = this.capacityReservationOptions;
    final maxTotalPrice = this.maxTotalPrice;
    final minTargetCapacity = this.minTargetCapacity;
    final singleAvailabilityZone = this.singleAvailabilityZone;
    final singleInstanceType = this.singleInstanceType;
    return {
      if (allocationStrategy != null)
        'AllocationStrategy': allocationStrategy.value,
      if (capacityReservationOptions != null)
        'CapacityReservationOptions': capacityReservationOptions,
      if (maxTotalPrice != null) 'MaxTotalPrice': maxTotalPrice,
      if (minTargetCapacity != null) 'MinTargetCapacity': minTargetCapacity,
      if (singleAvailabilityZone != null)
        'SingleAvailabilityZone': singleAvailabilityZone,
      if (singleInstanceType != null) 'SingleInstanceType': singleInstanceType,
    };
  }
}

enum OperationType {
  add('add'),
  remove('remove'),
  ;

  final String value;

  const OperationType(this.value);

  static OperationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum OperationType'));
}

/// Describes a packet header statement.
class PacketHeaderStatement {
  /// The destination addresses.
  final List<String>? destinationAddresses;

  /// The destination ports.
  final List<String>? destinationPorts;

  /// The destination prefix lists.
  final List<String>? destinationPrefixLists;

  /// The protocols.
  final List<Protocol>? protocols;

  /// The source addresses.
  final List<String>? sourceAddresses;

  /// The source ports.
  final List<String>? sourcePorts;

  /// The source prefix lists.
  final List<String>? sourcePrefixLists;

  PacketHeaderStatement({
    this.destinationAddresses,
    this.destinationPorts,
    this.destinationPrefixLists,
    this.protocols,
    this.sourceAddresses,
    this.sourcePorts,
    this.sourcePrefixLists,
  });

  Map<String, dynamic> toJson() {
    final destinationAddresses = this.destinationAddresses;
    final destinationPorts = this.destinationPorts;
    final destinationPrefixLists = this.destinationPrefixLists;
    final protocols = this.protocols;
    final sourceAddresses = this.sourceAddresses;
    final sourcePorts = this.sourcePorts;
    final sourcePrefixLists = this.sourcePrefixLists;
    return {
      if (destinationAddresses != null)
        'destinationAddressSet': destinationAddresses,
      if (destinationPorts != null) 'destinationPortSet': destinationPorts,
      if (destinationPrefixLists != null)
        'destinationPrefixListSet': destinationPrefixLists,
      if (protocols != null)
        'protocolSet': protocols.map((e) => e.value).toList(),
      if (sourceAddresses != null) 'sourceAddressSet': sourceAddresses,
      if (sourcePorts != null) 'sourcePortSet': sourcePorts,
      if (sourcePrefixLists != null) 'sourcePrefixListSet': sourcePrefixLists,
    };
  }
}

/// Describes a packet header statement.
class PacketHeaderStatementRequest {
  /// The destination addresses.
  final List<String>? destinationAddresses;

  /// The destination ports.
  final List<String>? destinationPorts;

  /// The destination prefix lists.
  final List<String>? destinationPrefixLists;

  /// The protocols.
  final List<Protocol>? protocols;

  /// The source addresses.
  final List<String>? sourceAddresses;

  /// The source ports.
  final List<String>? sourcePorts;

  /// The source prefix lists.
  final List<String>? sourcePrefixLists;

  PacketHeaderStatementRequest({
    this.destinationAddresses,
    this.destinationPorts,
    this.destinationPrefixLists,
    this.protocols,
    this.sourceAddresses,
    this.sourcePorts,
    this.sourcePrefixLists,
  });

  Map<String, dynamic> toJson() {
    final destinationAddresses = this.destinationAddresses;
    final destinationPorts = this.destinationPorts;
    final destinationPrefixLists = this.destinationPrefixLists;
    final protocols = this.protocols;
    final sourceAddresses = this.sourceAddresses;
    final sourcePorts = this.sourcePorts;
    final sourcePrefixLists = this.sourcePrefixLists;
    return {
      if (destinationAddresses != null)
        'DestinationAddress': destinationAddresses,
      if (destinationPorts != null) 'DestinationPort': destinationPorts,
      if (destinationPrefixLists != null)
        'DestinationPrefixList': destinationPrefixLists,
      if (protocols != null) 'Protocol': protocols.map((e) => e.value).toList(),
      if (sourceAddresses != null) 'SourceAddress': sourceAddresses,
      if (sourcePorts != null) 'SourcePort': sourcePorts,
      if (sourcePrefixLists != null) 'SourcePrefixList': sourcePrefixLists,
    };
  }
}

enum PartitionLoadFrequency {
  none('none'),
  daily('daily'),
  weekly('weekly'),
  monthly('monthly'),
  ;

  final String value;

  const PartitionLoadFrequency(this.value);

  static PartitionLoadFrequency fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum PartitionLoadFrequency'));
}

/// Describes a path component.
class PathComponent {
  /// The network ACL rule.
  final AnalysisAclRule? aclRule;

  /// The additional details.
  final List<AdditionalDetail>? additionalDetails;

  /// The resource to which the path component is attached.
  final AnalysisComponent? attachedTo;

  /// The component.
  final AnalysisComponent? component;

  /// The destination VPC.
  final AnalysisComponent? destinationVpc;

  /// The load balancer listener.
  final AnalysisComponent? elasticLoadBalancerListener;

  /// The explanation codes.
  final List<Explanation>? explanations;

  /// The Network Firewall stateful rule.
  final FirewallStatefulRule? firewallStatefulRule;

  /// The Network Firewall stateless rule.
  final FirewallStatelessRule? firewallStatelessRule;

  /// The inbound header.
  final AnalysisPacketHeader? inboundHeader;

  /// The outbound header.
  final AnalysisPacketHeader? outboundHeader;

  /// The route table route.
  final AnalysisRouteTableRoute? routeTableRoute;

  /// The security group rule.
  final AnalysisSecurityGroupRule? securityGroupRule;

  /// The sequence number.
  final int? sequenceNumber;

  /// The name of the VPC endpoint service.
  final String? serviceName;

  /// The source VPC.
  final AnalysisComponent? sourceVpc;

  /// The subnet.
  final AnalysisComponent? subnet;

  /// The transit gateway.
  final AnalysisComponent? transitGateway;

  /// The route in a transit gateway route table.
  final TransitGatewayRouteTableRoute? transitGatewayRouteTableRoute;

  /// The component VPC.
  final AnalysisComponent? vpc;

  PathComponent({
    this.aclRule,
    this.additionalDetails,
    this.attachedTo,
    this.component,
    this.destinationVpc,
    this.elasticLoadBalancerListener,
    this.explanations,
    this.firewallStatefulRule,
    this.firewallStatelessRule,
    this.inboundHeader,
    this.outboundHeader,
    this.routeTableRoute,
    this.securityGroupRule,
    this.sequenceNumber,
    this.serviceName,
    this.sourceVpc,
    this.subnet,
    this.transitGateway,
    this.transitGatewayRouteTableRoute,
    this.vpc,
  });

  Map<String, dynamic> toJson() {
    final aclRule = this.aclRule;
    final additionalDetails = this.additionalDetails;
    final attachedTo = this.attachedTo;
    final component = this.component;
    final destinationVpc = this.destinationVpc;
    final elasticLoadBalancerListener = this.elasticLoadBalancerListener;
    final explanations = this.explanations;
    final firewallStatefulRule = this.firewallStatefulRule;
    final firewallStatelessRule = this.firewallStatelessRule;
    final inboundHeader = this.inboundHeader;
    final outboundHeader = this.outboundHeader;
    final routeTableRoute = this.routeTableRoute;
    final securityGroupRule = this.securityGroupRule;
    final sequenceNumber = this.sequenceNumber;
    final serviceName = this.serviceName;
    final sourceVpc = this.sourceVpc;
    final subnet = this.subnet;
    final transitGateway = this.transitGateway;
    final transitGatewayRouteTableRoute = this.transitGatewayRouteTableRoute;
    final vpc = this.vpc;
    return {
      if (aclRule != null) 'aclRule': aclRule,
      if (additionalDetails != null) 'additionalDetailSet': additionalDetails,
      if (attachedTo != null) 'attachedTo': attachedTo,
      if (component != null) 'component': component,
      if (destinationVpc != null) 'destinationVpc': destinationVpc,
      if (elasticLoadBalancerListener != null)
        'elasticLoadBalancerListener': elasticLoadBalancerListener,
      if (explanations != null) 'explanationSet': explanations,
      if (firewallStatefulRule != null)
        'firewallStatefulRule': firewallStatefulRule,
      if (firewallStatelessRule != null)
        'firewallStatelessRule': firewallStatelessRule,
      if (inboundHeader != null) 'inboundHeader': inboundHeader,
      if (outboundHeader != null) 'outboundHeader': outboundHeader,
      if (routeTableRoute != null) 'routeTableRoute': routeTableRoute,
      if (securityGroupRule != null) 'securityGroupRule': securityGroupRule,
      if (sequenceNumber != null) 'sequenceNumber': sequenceNumber,
      if (serviceName != null) 'serviceName': serviceName,
      if (sourceVpc != null) 'sourceVpc': sourceVpc,
      if (subnet != null) 'subnet': subnet,
      if (transitGateway != null) 'transitGateway': transitGateway,
      if (transitGatewayRouteTableRoute != null)
        'transitGatewayRouteTableRoute': transitGatewayRouteTableRoute,
      if (vpc != null) 'vpc': vpc,
    };
  }
}

/// Describes a set of filters for a path analysis. Use path filters to scope
/// the analysis when there can be multiple resulting paths.
class PathFilter {
  /// The destination IPv4 address.
  final String? destinationAddress;

  /// The destination port range.
  final FilterPortRange? destinationPortRange;

  /// The source IPv4 address.
  final String? sourceAddress;

  /// The source port range.
  final FilterPortRange? sourcePortRange;

  PathFilter({
    this.destinationAddress,
    this.destinationPortRange,
    this.sourceAddress,
    this.sourcePortRange,
  });

  Map<String, dynamic> toJson() {
    final destinationAddress = this.destinationAddress;
    final destinationPortRange = this.destinationPortRange;
    final sourceAddress = this.sourceAddress;
    final sourcePortRange = this.sourcePortRange;
    return {
      if (destinationAddress != null) 'destinationAddress': destinationAddress,
      if (destinationPortRange != null)
        'destinationPortRange': destinationPortRange,
      if (sourceAddress != null) 'sourceAddress': sourceAddress,
      if (sourcePortRange != null) 'sourcePortRange': sourcePortRange,
    };
  }
}

/// Describes a set of filters for a path analysis. Use path filters to scope
/// the analysis when there can be multiple resulting paths.
class PathRequestFilter {
  /// The destination IPv4 address.
  final String? destinationAddress;

  /// The destination port range.
  final RequestFilterPortRange? destinationPortRange;

  /// The source IPv4 address.
  final String? sourceAddress;

  /// The source port range.
  final RequestFilterPortRange? sourcePortRange;

  PathRequestFilter({
    this.destinationAddress,
    this.destinationPortRange,
    this.sourceAddress,
    this.sourcePortRange,
  });

  Map<String, dynamic> toJson() {
    final destinationAddress = this.destinationAddress;
    final destinationPortRange = this.destinationPortRange;
    final sourceAddress = this.sourceAddress;
    final sourcePortRange = this.sourcePortRange;
    return {
      if (destinationAddress != null) 'DestinationAddress': destinationAddress,
      if (destinationPortRange != null)
        'DestinationPortRange': destinationPortRange,
      if (sourceAddress != null) 'SourceAddress': sourceAddress,
      if (sourcePortRange != null) 'SourcePortRange': sourcePortRange,
    };
  }
}

/// Describes a path statement.
class PathStatement {
  /// The packet header statement.
  final PacketHeaderStatement? packetHeaderStatement;

  /// The resource statement.
  final ResourceStatement? resourceStatement;

  PathStatement({
    this.packetHeaderStatement,
    this.resourceStatement,
  });

  Map<String, dynamic> toJson() {
    final packetHeaderStatement = this.packetHeaderStatement;
    final resourceStatement = this.resourceStatement;
    return {
      if (packetHeaderStatement != null)
        'packetHeaderStatement': packetHeaderStatement,
      if (resourceStatement != null) 'resourceStatement': resourceStatement,
    };
  }
}

/// Describes a path statement.
class PathStatementRequest {
  /// The packet header statement.
  final PacketHeaderStatementRequest? packetHeaderStatement;

  /// The resource statement.
  final ResourceStatementRequest? resourceStatement;

  PathStatementRequest({
    this.packetHeaderStatement,
    this.resourceStatement,
  });

  Map<String, dynamic> toJson() {
    final packetHeaderStatement = this.packetHeaderStatement;
    final resourceStatement = this.resourceStatement;
    return {
      if (packetHeaderStatement != null)
        'PacketHeaderStatement': packetHeaderStatement,
      if (resourceStatement != null) 'ResourceStatement': resourceStatement,
    };
  }
}

enum PayerResponsibility {
  serviceOwner('ServiceOwner'),
  ;

  final String value;

  const PayerResponsibility(this.value);

  static PayerResponsibility fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum PayerResponsibility'));
}

enum PaymentOption {
  allUpfront('AllUpfront'),
  partialUpfront('PartialUpfront'),
  noUpfront('NoUpfront'),
  ;

  final String value;

  const PaymentOption(this.value);

  static PaymentOption fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PaymentOption'));
}

/// Describes the data that identifies an Amazon FPGA image (AFI) on the PCI
/// bus.
class PciId {
  /// The ID of the device.
  final String? deviceId;

  /// The ID of the subsystem.
  final String? subsystemId;

  /// The ID of the vendor for the subsystem.
  final String? subsystemVendorId;

  /// The ID of the vendor.
  final String? vendorId;

  PciId({
    this.deviceId,
    this.subsystemId,
    this.subsystemVendorId,
    this.vendorId,
  });

  Map<String, dynamic> toJson() {
    final deviceId = this.deviceId;
    final subsystemId = this.subsystemId;
    final subsystemVendorId = this.subsystemVendorId;
    final vendorId = this.vendorId;
    return {
      if (deviceId != null) 'DeviceId': deviceId,
      if (subsystemId != null) 'SubsystemId': subsystemId,
      if (subsystemVendorId != null) 'SubsystemVendorId': subsystemVendorId,
      if (vendorId != null) 'VendorId': vendorId,
    };
  }
}

/// The status of the transit gateway peering attachment.
class PeeringAttachmentStatus {
  /// The status code.
  final String? code;

  /// The status message, if applicable.
  final String? message;

  PeeringAttachmentStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

/// Describes the VPC peering connection options.
class PeeringConnectionOptions {
  /// If true, the public DNS hostnames of instances in the specified VPC resolve
  /// to private IP addresses when queried from instances in the peer VPC.
  final bool? allowDnsResolutionFromRemoteVpc;

  /// Deprecated.
  final bool? allowEgressFromLocalClassicLinkToRemoteVpc;

  /// Deprecated.
  final bool? allowEgressFromLocalVpcToRemoteClassicLink;

  PeeringConnectionOptions({
    this.allowDnsResolutionFromRemoteVpc,
    this.allowEgressFromLocalClassicLinkToRemoteVpc,
    this.allowEgressFromLocalVpcToRemoteClassicLink,
  });

  Map<String, dynamic> toJson() {
    final allowDnsResolutionFromRemoteVpc =
        this.allowDnsResolutionFromRemoteVpc;
    final allowEgressFromLocalClassicLinkToRemoteVpc =
        this.allowEgressFromLocalClassicLinkToRemoteVpc;
    final allowEgressFromLocalVpcToRemoteClassicLink =
        this.allowEgressFromLocalVpcToRemoteClassicLink;
    return {
      if (allowDnsResolutionFromRemoteVpc != null)
        'allowDnsResolutionFromRemoteVpc': allowDnsResolutionFromRemoteVpc,
      if (allowEgressFromLocalClassicLinkToRemoteVpc != null)
        'allowEgressFromLocalClassicLinkToRemoteVpc':
            allowEgressFromLocalClassicLinkToRemoteVpc,
      if (allowEgressFromLocalVpcToRemoteClassicLink != null)
        'allowEgressFromLocalVpcToRemoteClassicLink':
            allowEgressFromLocalVpcToRemoteClassicLink,
    };
  }
}

/// The VPC peering connection options.
class PeeringConnectionOptionsRequest {
  /// If true, enables a local VPC to resolve public DNS hostnames to private IP
  /// addresses when queried from instances in the peer VPC.
  final bool? allowDnsResolutionFromRemoteVpc;

  /// Deprecated.
  final bool? allowEgressFromLocalClassicLinkToRemoteVpc;

  /// Deprecated.
  final bool? allowEgressFromLocalVpcToRemoteClassicLink;

  PeeringConnectionOptionsRequest({
    this.allowDnsResolutionFromRemoteVpc,
    this.allowEgressFromLocalClassicLinkToRemoteVpc,
    this.allowEgressFromLocalVpcToRemoteClassicLink,
  });

  Map<String, dynamic> toJson() {
    final allowDnsResolutionFromRemoteVpc =
        this.allowDnsResolutionFromRemoteVpc;
    final allowEgressFromLocalClassicLinkToRemoteVpc =
        this.allowEgressFromLocalClassicLinkToRemoteVpc;
    final allowEgressFromLocalVpcToRemoteClassicLink =
        this.allowEgressFromLocalVpcToRemoteClassicLink;
    return {
      if (allowDnsResolutionFromRemoteVpc != null)
        'AllowDnsResolutionFromRemoteVpc': allowDnsResolutionFromRemoteVpc,
      if (allowEgressFromLocalClassicLinkToRemoteVpc != null)
        'AllowEgressFromLocalClassicLinkToRemoteVpc':
            allowEgressFromLocalClassicLinkToRemoteVpc,
      if (allowEgressFromLocalVpcToRemoteClassicLink != null)
        'AllowEgressFromLocalVpcToRemoteClassicLink':
            allowEgressFromLocalVpcToRemoteClassicLink,
    };
  }
}

/// Information about the transit gateway in the peering attachment.
class PeeringTgwInfo {
  /// The ID of the core network where the transit gateway peer is located.
  final String? coreNetworkId;

  /// The ID of the Amazon Web Services account that owns the transit gateway.
  final String? ownerId;

  /// The Region of the transit gateway.
  final String? region;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  PeeringTgwInfo({
    this.coreNetworkId,
    this.ownerId,
    this.region,
    this.transitGatewayId,
  });

  Map<String, dynamic> toJson() {
    final coreNetworkId = this.coreNetworkId;
    final ownerId = this.ownerId;
    final region = this.region;
    final transitGatewayId = this.transitGatewayId;
    return {
      if (coreNetworkId != null) 'coreNetworkId': coreNetworkId,
      if (ownerId != null) 'ownerId': ownerId,
      if (region != null) 'region': region,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
    };
  }
}

enum PeriodType {
  fiveMinutes('five-minutes'),
  fifteenMinutes('fifteen-minutes'),
  oneHour('one-hour'),
  threeHours('three-hours'),
  oneDay('one-day'),
  oneWeek('one-week'),
  ;

  final String value;

  const PeriodType(this.value);

  static PeriodType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum PeriodType'));
}

enum PermissionGroup {
  all('all'),
  ;

  final String value;

  const PermissionGroup(this.value);

  static PermissionGroup fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PermissionGroup'));
}

/// The Diffie-Hellmann group number for phase 1 IKE negotiations.
class Phase1DHGroupNumbersListValue {
  /// The Diffie-Hellmann group number.
  final int? value;

  Phase1DHGroupNumbersListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE
/// negotiations.
class Phase1DHGroupNumbersRequestListValue {
  /// The Diffie-Hellmann group number.
  final int? value;

  Phase1DHGroupNumbersRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

/// The encryption algorithm for phase 1 IKE negotiations.
class Phase1EncryptionAlgorithmsListValue {
  /// The value for the encryption algorithm.
  final String? value;

  Phase1EncryptionAlgorithmsListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE
/// negotiations.
class Phase1EncryptionAlgorithmsRequestListValue {
  /// The value for the encryption algorithm.
  final String? value;

  Phase1EncryptionAlgorithmsRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

/// The integrity algorithm for phase 1 IKE negotiations.
class Phase1IntegrityAlgorithmsListValue {
  /// The value for the integrity algorithm.
  final String? value;

  Phase1IntegrityAlgorithmsListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE
/// negotiations.
class Phase1IntegrityAlgorithmsRequestListValue {
  /// The value for the integrity algorithm.
  final String? value;

  Phase1IntegrityAlgorithmsRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

/// The Diffie-Hellmann group number for phase 2 IKE negotiations.
class Phase2DHGroupNumbersListValue {
  /// The Diffie-Hellmann group number.
  final int? value;

  Phase2DHGroupNumbersListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE
/// negotiations.
class Phase2DHGroupNumbersRequestListValue {
  /// The Diffie-Hellmann group number.
  final int? value;

  Phase2DHGroupNumbersRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

/// The encryption algorithm for phase 2 IKE negotiations.
class Phase2EncryptionAlgorithmsListValue {
  /// The encryption algorithm.
  final String? value;

  Phase2EncryptionAlgorithmsListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE
/// negotiations.
class Phase2EncryptionAlgorithmsRequestListValue {
  /// The encryption algorithm.
  final String? value;

  Phase2EncryptionAlgorithmsRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

/// The integrity algorithm for phase 2 IKE negotiations.
class Phase2IntegrityAlgorithmsListValue {
  /// The integrity algorithm.
  final String? value;

  Phase2IntegrityAlgorithmsListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'value': value,
    };
  }
}

/// Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE
/// negotiations.
class Phase2IntegrityAlgorithmsRequestListValue {
  /// The integrity algorithm.
  final String? value;

  Phase2IntegrityAlgorithmsRequestListValue({
    this.value,
  });

  Map<String, dynamic> toJson() {
    final value = this.value;
    return {
      if (value != null) 'Value': value,
    };
  }
}

enum PhcSupport {
  unsupported('unsupported'),
  supported('supported'),
  ;

  final String value;

  const PhcSupport(this.value);

  static PhcSupport fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum PhcSupport'));
}

/// Describes the placement of an instance.
class Placement {
  /// The affinity setting for the instance on the Dedicated Host.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html">ImportInstance</a>.
  final String? affinity;

  /// The Availability Zone of the instance.
  ///
  /// If not specified, an Availability Zone will be automatically chosen for you
  /// based on the load balancing criteria for the Region.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String? availabilityZone;

  /// The ID of the placement group that the instance is in. If you specify
  /// <code>GroupId</code>, you can't specify <code>GroupName</code>.
  final String? groupId;

  /// The name of the placement group that the instance is in. If you specify
  /// <code>GroupName</code>, you can't specify <code>GroupId</code>.
  final String? groupName;

  /// The ID of the Dedicated Host on which the instance resides.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html">ImportInstance</a>.
  final String? hostId;

  /// The ARN of the host resource group in which to launch the instances.
  ///
  /// If you specify this parameter, either omit the <b>Tenancy</b> parameter or
  /// set it to <code>host</code>.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String? hostResourceGroupArn;

  /// The number of the partition that the instance is in. Valid only if the
  /// placement group strategy is set to <code>partition</code>.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final int? partitionNumber;

  /// Reserved for future use.
  final String? spreadDomain;

  /// The tenancy of the instance. An instance with a tenancy of
  /// <code>dedicated</code> runs on single-tenant hardware.
  ///
  /// This parameter is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  /// The <code>host</code> tenancy is not supported for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html">ImportInstance</a>
  /// or for T3 instances that are configured for the <code>unlimited</code> CPU
  /// credit option.
  final Tenancy? tenancy;

  Placement({
    this.affinity,
    this.availabilityZone,
    this.groupId,
    this.groupName,
    this.hostId,
    this.hostResourceGroupArn,
    this.partitionNumber,
    this.spreadDomain,
    this.tenancy,
  });

  Map<String, dynamic> toJson() {
    final affinity = this.affinity;
    final availabilityZone = this.availabilityZone;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final hostId = this.hostId;
    final hostResourceGroupArn = this.hostResourceGroupArn;
    final partitionNumber = this.partitionNumber;
    final spreadDomain = this.spreadDomain;
    final tenancy = this.tenancy;
    return {
      if (affinity != null) 'affinity': affinity,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (hostId != null) 'hostId': hostId,
      if (hostResourceGroupArn != null)
        'hostResourceGroupArn': hostResourceGroupArn,
      if (partitionNumber != null) 'partitionNumber': partitionNumber,
      if (spreadDomain != null) 'spreadDomain': spreadDomain,
      if (tenancy != null) 'tenancy': tenancy.value,
    };
  }
}

/// Describes a placement group.
class PlacementGroup {
  /// The Amazon Resource Name (ARN) of the placement group.
  final String? groupArn;

  /// The ID of the placement group.
  final String? groupId;

  /// The name of the placement group.
  final String? groupName;

  /// The number of partitions. Valid only if <b>strategy</b> is set to
  /// <code>partition</code>.
  final int? partitionCount;

  /// The spread level for the placement group. <i>Only</i> Outpost placement
  /// groups can be spread across hosts.
  final SpreadLevel? spreadLevel;

  /// The state of the placement group.
  final PlacementGroupState? state;

  /// The placement strategy.
  final PlacementStrategy? strategy;

  /// Any tags applied to the placement group.
  final List<Tag>? tags;

  PlacementGroup({
    this.groupArn,
    this.groupId,
    this.groupName,
    this.partitionCount,
    this.spreadLevel,
    this.state,
    this.strategy,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final groupArn = this.groupArn;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final partitionCount = this.partitionCount;
    final spreadLevel = this.spreadLevel;
    final state = this.state;
    final strategy = this.strategy;
    final tags = this.tags;
    return {
      if (groupArn != null) 'groupArn': groupArn,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (partitionCount != null) 'partitionCount': partitionCount,
      if (spreadLevel != null) 'spreadLevel': spreadLevel.value,
      if (state != null) 'state': state.value,
      if (strategy != null) 'strategy': strategy.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes the placement group support of the instance type.
class PlacementGroupInfo {
  /// The supported placement group types.
  final List<PlacementGroupStrategy>? supportedStrategies;

  PlacementGroupInfo({
    this.supportedStrategies,
  });

  Map<String, dynamic> toJson() {
    final supportedStrategies = this.supportedStrategies;
    return {
      if (supportedStrategies != null)
        'supportedStrategies': supportedStrategies.map((e) => e.value).toList(),
    };
  }
}

enum PlacementGroupState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const PlacementGroupState(this.value);

  static PlacementGroupState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum PlacementGroupState'));
}

enum PlacementGroupStrategy {
  cluster('cluster'),
  partition('partition'),
  spread('spread'),
  ;

  final String value;

  const PlacementGroupStrategy(this.value);

  static PlacementGroupStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum PlacementGroupStrategy'));
}

/// Describes the placement of an instance.
class PlacementResponse {
  /// The name of the placement group that the instance is in.
  final String? groupName;

  PlacementResponse({
    this.groupName,
  });

  Map<String, dynamic> toJson() {
    final groupName = this.groupName;
    return {
      if (groupName != null) 'groupName': groupName,
    };
  }
}

enum PlacementStrategy {
  cluster('cluster'),
  spread('spread'),
  partition('partition'),
  ;

  final String value;

  const PlacementStrategy(this.value);

  static PlacementStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PlacementStrategy'));
}

enum PlatformValues {
  windows('Windows'),
  ;

  final String value;

  const PlatformValues(this.value);

  static PlatformValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PlatformValues'));
}

/// Describes a CIDR block for an address pool.
class PoolCidrBlock {
  /// The CIDR block.
  final String? cidr;

  PoolCidrBlock({
    this.cidr,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    return {
      if (cidr != null) 'poolCidrBlock': cidr,
    };
  }
}

/// Describes a range of ports.
class PortRange {
  /// The first port in the range.
  final int? from;

  /// The last port in the range.
  final int? to;

  PortRange({
    this.from,
    this.to,
  });

  Map<String, dynamic> toJson() {
    final from = this.from;
    final to = this.to;
    return {
      if (from != null) 'from': from,
      if (to != null) 'to': to,
    };
  }
}

/// Describes prefixes for Amazon Web Services services.
class PrefixList {
  /// The IP address range of the Amazon Web Service.
  final List<String>? cidrs;

  /// The ID of the prefix.
  final String? prefixListId;

  /// The name of the prefix.
  final String? prefixListName;

  PrefixList({
    this.cidrs,
    this.prefixListId,
    this.prefixListName,
  });

  Map<String, dynamic> toJson() {
    final cidrs = this.cidrs;
    final prefixListId = this.prefixListId;
    final prefixListName = this.prefixListName;
    return {
      if (cidrs != null) 'cidrSet': cidrs,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (prefixListName != null) 'prefixListName': prefixListName,
    };
  }
}

/// Describes the resource with which a prefix list is associated.
class PrefixListAssociation {
  /// The ID of the resource.
  final String? resourceId;

  /// The owner of the resource.
  final String? resourceOwner;

  PrefixListAssociation({
    this.resourceId,
    this.resourceOwner,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceOwner = this.resourceOwner;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwner != null) 'resourceOwner': resourceOwner,
    };
  }
}

/// Describes a prefix list entry.
class PrefixListEntry {
  /// The CIDR block.
  final String? cidr;

  /// The description.
  final String? description;

  PrefixListEntry({
    this.cidr,
    this.description,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final description = this.description;
    return {
      if (cidr != null) 'cidr': cidr,
      if (description != null) 'description': description,
    };
  }
}

/// Describes a prefix list ID.
class PrefixListId {
  /// A description for the security group rule that references this prefix list
  /// ID.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
  final String? description;

  /// The ID of the prefix.
  final String? prefixListId;

  PrefixListId({
    this.description,
    this.prefixListId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final prefixListId = this.prefixListId;
    return {
      if (description != null) 'description': description,
      if (prefixListId != null) 'prefixListId': prefixListId,
    };
  }
}

enum PrefixListState {
  createInProgress('create-in-progress'),
  createComplete('create-complete'),
  createFailed('create-failed'),
  modifyInProgress('modify-in-progress'),
  modifyComplete('modify-complete'),
  modifyFailed('modify-failed'),
  restoreInProgress('restore-in-progress'),
  restoreComplete('restore-complete'),
  restoreFailed('restore-failed'),
  deleteInProgress('delete-in-progress'),
  deleteComplete('delete-complete'),
  deleteFailed('delete-failed'),
  ;

  final String value;

  const PrefixListState(this.value);

  static PrefixListState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PrefixListState'));
}

/// Describes the price for a Reserved Instance.
class PriceSchedule {
  /// The current price schedule, as determined by the term remaining for the
  /// Reserved Instance in the listing.
  ///
  /// A specific price schedule is always in effect, but only one price schedule
  /// can be active at any time. Take, for example, a Reserved Instance listing
  /// that has five months remaining in its term. When you specify price schedules
  /// for five months and two months, this means that schedule 1, covering the
  /// first three months of the remaining term, will be active during months 5, 4,
  /// and 3. Then schedule 2, covering the last two months of the term, will be
  /// active for months 2 and 1.
  final bool? active;

  /// The currency for transacting the Reserved Instance resale. At this time, the
  /// only supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The fixed price for the term.
  final double? price;

  /// The number of months remaining in the reservation. For example, 2 is the
  /// second to the last month before the capacity reservation expires.
  final int? term;

  PriceSchedule({
    this.active,
    this.currencyCode,
    this.price,
    this.term,
  });

  Map<String, dynamic> toJson() {
    final active = this.active;
    final currencyCode = this.currencyCode;
    final price = this.price;
    final term = this.term;
    return {
      if (active != null) 'active': active,
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (price != null) 'price': price,
      if (term != null) 'term': term,
    };
  }
}

/// Describes the price for a Reserved Instance.
class PriceScheduleSpecification {
  /// The currency for transacting the Reserved Instance resale. At this time, the
  /// only supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The fixed price for the term.
  final double? price;

  /// The number of months remaining in the reservation. For example, 2 is the
  /// second to the last month before the capacity reservation expires.
  final int? term;

  PriceScheduleSpecification({
    this.currencyCode,
    this.price,
    this.term,
  });

  Map<String, dynamic> toJson() {
    final currencyCode = this.currencyCode;
    final price = this.price;
    final term = this.term;
    return {
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (price != null) 'price': price,
      if (term != null) 'term': term,
    };
  }
}

/// Describes a Reserved Instance offering.
class PricingDetail {
  /// The number of reservations available for the price.
  final int? count;

  /// The price per instance.
  final double? price;

  PricingDetail({
    this.count,
    this.price,
  });

  Map<String, dynamic> toJson() {
    final count = this.count;
    final price = this.price;
    return {
      if (count != null) 'count': count,
      if (price != null) 'price': price,
    };
  }
}

/// PrincipalIdFormat description
class PrincipalIdFormat {
  /// PrincipalIdFormatARN description
  final String? arn;

  /// PrincipalIdFormatStatuses description
  final List<IdFormat>? statuses;

  PrincipalIdFormat({
    this.arn,
    this.statuses,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final statuses = this.statuses;
    return {
      if (arn != null) 'arn': arn,
      if (statuses != null) 'statusSet': statuses,
    };
  }
}

enum PrincipalType {
  all('All'),
  service('Service'),
  organizationUnit('OrganizationUnit'),
  account('Account'),
  user('User'),
  role('Role'),
  ;

  final String value;

  const PrincipalType(this.value);

  static PrincipalType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PrincipalType'));
}

/// Information about the Private DNS name for interface endpoints.
class PrivateDnsDetails {
  /// The private DNS name assigned to the VPC endpoint service.
  final String? privateDnsName;

  PrivateDnsDetails({
    this.privateDnsName,
  });

  Map<String, dynamic> toJson() {
    final privateDnsName = this.privateDnsName;
    return {
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
    };
  }
}

/// Information about the private DNS name for the service endpoint.
class PrivateDnsNameConfiguration {
  /// The name of the record subdomain the service provider needs to create. The
  /// service provider adds the <code>value</code> text to the <code>name</code>.
  final String? name;

  /// The verification state of the VPC endpoint service.
  ///
  /// &gt;Consumers of the endpoint service can use the private name only when the
  /// state is <code>verified</code>.
  final DnsNameState? state;

  /// The endpoint service verification type, for example TXT.
  final String? type;

  /// The value the service provider adds to the private DNS name domain record
  /// before verification.
  final String? value;

  PrivateDnsNameConfiguration({
    this.name,
    this.state,
    this.type,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final state = this.state;
    final type = this.type;
    final value = this.value;
    return {
      if (name != null) 'name': name,
      if (state != null) 'state': state.value,
      if (type != null) 'type': type,
      if (value != null) 'value': value,
    };
  }
}

/// Describes the options for instance hostnames.
class PrivateDnsNameOptionsOnLaunch {
  /// Indicates whether to respond to DNS queries for instance hostname with DNS
  /// AAAA records.
  final bool? enableResourceNameDnsAAAARecord;

  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// A records.
  final bool? enableResourceNameDnsARecord;

  /// The type of hostname for EC2 instances. For IPv4 only subnets, an instance
  /// DNS name must be based on the instance IPv4 address. For IPv6 only subnets,
  /// an instance DNS name must be based on the instance ID. For dual-stack
  /// subnets, you can specify whether DNS names use the instance IPv4 address or
  /// the instance ID.
  final HostnameType? hostnameType;

  PrivateDnsNameOptionsOnLaunch({
    this.enableResourceNameDnsAAAARecord,
    this.enableResourceNameDnsARecord,
    this.hostnameType,
  });

  Map<String, dynamic> toJson() {
    final enableResourceNameDnsAAAARecord =
        this.enableResourceNameDnsAAAARecord;
    final enableResourceNameDnsARecord = this.enableResourceNameDnsARecord;
    final hostnameType = this.hostnameType;
    return {
      if (enableResourceNameDnsAAAARecord != null)
        'enableResourceNameDnsAAAARecord': enableResourceNameDnsAAAARecord,
      if (enableResourceNameDnsARecord != null)
        'enableResourceNameDnsARecord': enableResourceNameDnsARecord,
      if (hostnameType != null) 'hostnameType': hostnameType.value,
    };
  }
}

/// Describes the options for instance hostnames.
class PrivateDnsNameOptionsRequest {
  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// AAAA records.
  final bool? enableResourceNameDnsAAAARecord;

  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// A records.
  final bool? enableResourceNameDnsARecord;

  /// The type of hostname for EC2 instances. For IPv4 only subnets, an instance
  /// DNS name must be based on the instance IPv4 address. For IPv6 only subnets,
  /// an instance DNS name must be based on the instance ID. For dual-stack
  /// subnets, you can specify whether DNS names use the instance IPv4 address or
  /// the instance ID.
  final HostnameType? hostnameType;

  PrivateDnsNameOptionsRequest({
    this.enableResourceNameDnsAAAARecord,
    this.enableResourceNameDnsARecord,
    this.hostnameType,
  });

  Map<String, dynamic> toJson() {
    final enableResourceNameDnsAAAARecord =
        this.enableResourceNameDnsAAAARecord;
    final enableResourceNameDnsARecord = this.enableResourceNameDnsARecord;
    final hostnameType = this.hostnameType;
    return {
      if (enableResourceNameDnsAAAARecord != null)
        'EnableResourceNameDnsAAAARecord': enableResourceNameDnsAAAARecord,
      if (enableResourceNameDnsARecord != null)
        'EnableResourceNameDnsARecord': enableResourceNameDnsARecord,
      if (hostnameType != null) 'HostnameType': hostnameType.value,
    };
  }
}

/// Describes the options for instance hostnames.
class PrivateDnsNameOptionsResponse {
  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// AAAA records.
  final bool? enableResourceNameDnsAAAARecord;

  /// Indicates whether to respond to DNS queries for instance hostnames with DNS
  /// A records.
  final bool? enableResourceNameDnsARecord;

  /// The type of hostname to assign to an instance.
  final HostnameType? hostnameType;

  PrivateDnsNameOptionsResponse({
    this.enableResourceNameDnsAAAARecord,
    this.enableResourceNameDnsARecord,
    this.hostnameType,
  });

  Map<String, dynamic> toJson() {
    final enableResourceNameDnsAAAARecord =
        this.enableResourceNameDnsAAAARecord;
    final enableResourceNameDnsARecord = this.enableResourceNameDnsARecord;
    final hostnameType = this.hostnameType;
    return {
      if (enableResourceNameDnsAAAARecord != null)
        'enableResourceNameDnsAAAARecord': enableResourceNameDnsAAAARecord,
      if (enableResourceNameDnsARecord != null)
        'enableResourceNameDnsARecord': enableResourceNameDnsARecord,
      if (hostnameType != null) 'hostnameType': hostnameType.value,
    };
  }
}

/// Describes a secondary private IPv4 address for a network interface.
class PrivateIpAddressSpecification {
  /// Indicates whether the private IPv4 address is the primary private IPv4
  /// address. Only one IPv4 address can be designated as primary.
  final bool? primary;

  /// The private IPv4 address.
  final String? privateIpAddress;

  PrivateIpAddressSpecification({
    this.primary,
    this.privateIpAddress,
  });

  Map<String, dynamic> toJson() {
    final primary = this.primary;
    final privateIpAddress = this.privateIpAddress;
    return {
      if (primary != null) 'primary': primary,
      if (privateIpAddress != null) 'privateIpAddress': privateIpAddress,
    };
  }
}

/// Describes the processor used by the instance type.
class ProcessorInfo {
  /// The manufacturer of the processor.
  final String? manufacturer;

  /// The architectures supported by the instance type.
  final List<ArchitectureType>? supportedArchitectures;

  /// Indicates whether the instance type supports AMD SEV-SNP. If the request
  /// returns <code>amd-sev-snp</code>, AMD SEV-SNP is supported. Otherwise, it is
  /// not supported. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html"> AMD
  /// SEV-SNP</a>.
  final List<SupportedAdditionalProcessorFeature>? supportedFeatures;

  /// The speed of the processor, in GHz.
  final double? sustainedClockSpeedInGhz;

  ProcessorInfo({
    this.manufacturer,
    this.supportedArchitectures,
    this.supportedFeatures,
    this.sustainedClockSpeedInGhz,
  });

  Map<String, dynamic> toJson() {
    final manufacturer = this.manufacturer;
    final supportedArchitectures = this.supportedArchitectures;
    final supportedFeatures = this.supportedFeatures;
    final sustainedClockSpeedInGhz = this.sustainedClockSpeedInGhz;
    return {
      if (manufacturer != null) 'manufacturer': manufacturer,
      if (supportedArchitectures != null)
        'supportedArchitectures':
            supportedArchitectures.map((e) => e.value).toList(),
      if (supportedFeatures != null)
        'supportedFeatures': supportedFeatures.map((e) => e.value).toList(),
      if (sustainedClockSpeedInGhz != null)
        'sustainedClockSpeedInGhz': sustainedClockSpeedInGhz,
    };
  }
}

/// Describes a product code.
class ProductCode {
  /// The product code.
  final String? productCodeId;

  /// The type of product code.
  final ProductCodeValues? productCodeType;

  ProductCode({
    this.productCodeId,
    this.productCodeType,
  });

  Map<String, dynamic> toJson() {
    final productCodeId = this.productCodeId;
    final productCodeType = this.productCodeType;
    return {
      if (productCodeId != null) 'productCode': productCodeId,
      if (productCodeType != null) 'type': productCodeType.value,
    };
  }
}

enum ProductCodeValues {
  devpay('devpay'),
  marketplace('marketplace'),
  ;

  final String value;

  const ProductCodeValues(this.value);

  static ProductCodeValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ProductCodeValues'));
}

/// Describes a virtual private gateway propagating route.
class PropagatingVgw {
  /// The ID of the virtual private gateway.
  final String? gatewayId;

  PropagatingVgw({
    this.gatewayId,
  });

  Map<String, dynamic> toJson() {
    final gatewayId = this.gatewayId;
    return {
      if (gatewayId != null) 'gatewayId': gatewayId,
    };
  }
}

enum Protocol {
  tcp('tcp'),
  udp('udp'),
  ;

  final String value;

  const Protocol(this.value);

  static Protocol fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Protocol'));
}

enum ProtocolValue {
  gre('gre'),
  ;

  final String value;

  const ProtocolValue(this.value);

  static ProtocolValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ProtocolValue'));
}

class ProvisionByoipCidrResult {
  /// Information about the address range.
  final ByoipCidr? byoipCidr;

  ProvisionByoipCidrResult({
    this.byoipCidr,
  });

  Map<String, dynamic> toJson() {
    final byoipCidr = this.byoipCidr;
    return {
      if (byoipCidr != null) 'byoipCidr': byoipCidr,
    };
  }
}

class ProvisionIpamByoasnResult {
  /// An ASN and BYOIP CIDR association.
  final Byoasn? byoasn;

  ProvisionIpamByoasnResult({
    this.byoasn,
  });

  Map<String, dynamic> toJson() {
    final byoasn = this.byoasn;
    return {
      if (byoasn != null) 'byoasn': byoasn,
    };
  }
}

class ProvisionIpamPoolCidrResult {
  /// Information about the provisioned CIDR.
  final IpamPoolCidr? ipamPoolCidr;

  ProvisionIpamPoolCidrResult({
    this.ipamPoolCidr,
  });

  Map<String, dynamic> toJson() {
    final ipamPoolCidr = this.ipamPoolCidr;
    return {
      if (ipamPoolCidr != null) 'ipamPoolCidr': ipamPoolCidr,
    };
  }
}

class ProvisionPublicIpv4PoolCidrResult {
  /// Information about the address range of the public IPv4 pool.
  final PublicIpv4PoolRange? poolAddressRange;

  /// The ID of the pool that you want to provision the CIDR to.
  final String? poolId;

  ProvisionPublicIpv4PoolCidrResult({
    this.poolAddressRange,
    this.poolId,
  });

  Map<String, dynamic> toJson() {
    final poolAddressRange = this.poolAddressRange;
    final poolId = this.poolId;
    return {
      if (poolAddressRange != null) 'poolAddressRange': poolAddressRange,
      if (poolId != null) 'poolId': poolId,
    };
  }
}

/// Reserved. If you need to sustain traffic greater than the <a
/// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
/// limits</a>, contact us through the <a
/// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
class ProvisionedBandwidth {
  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final DateTime? provisionTime;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final String? provisioned;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final DateTime? requestTime;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final String? requested;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final String? status;

  ProvisionedBandwidth({
    this.provisionTime,
    this.provisioned,
    this.requestTime,
    this.requested,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final provisionTime = this.provisionTime;
    final provisioned = this.provisioned;
    final requestTime = this.requestTime;
    final requested = this.requested;
    final status = this.status;
    return {
      if (provisionTime != null) 'provisionTime': iso8601ToJson(provisionTime),
      if (provisioned != null) 'provisioned': provisioned,
      if (requestTime != null) 'requestTime': iso8601ToJson(requestTime),
      if (requested != null) 'requested': requested,
      if (status != null) 'status': status,
    };
  }
}

/// The status of an updated pointer (PTR) record for an Elastic IP address.
class PtrUpdateStatus {
  /// The reason for the PTR record update.
  final String? reason;

  /// The status of the PTR record update.
  final String? status;

  /// The value for the PTR record update.
  final String? value;

  PtrUpdateStatus({
    this.reason,
    this.status,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final reason = this.reason;
    final status = this.status;
    final value = this.value;
    return {
      if (reason != null) 'reason': reason,
      if (status != null) 'status': status,
      if (value != null) 'value': value,
    };
  }
}

/// Describes an IPv4 address pool.
class PublicIpv4Pool {
  /// A description of the address pool.
  final String? description;

  /// The name of the location from which the address pool is advertised. A
  /// network border group is a unique set of Availability Zones or Local Zones
  /// from where Amazon Web Services advertises public IP addresses.
  final String? networkBorderGroup;

  /// The address ranges.
  final List<PublicIpv4PoolRange>? poolAddressRanges;

  /// The ID of the address pool.
  final String? poolId;

  /// Any tags for the address pool.
  final List<Tag>? tags;

  /// The total number of addresses.
  final int? totalAddressCount;

  /// The total number of available addresses.
  final int? totalAvailableAddressCount;

  PublicIpv4Pool({
    this.description,
    this.networkBorderGroup,
    this.poolAddressRanges,
    this.poolId,
    this.tags,
    this.totalAddressCount,
    this.totalAvailableAddressCount,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final networkBorderGroup = this.networkBorderGroup;
    final poolAddressRanges = this.poolAddressRanges;
    final poolId = this.poolId;
    final tags = this.tags;
    final totalAddressCount = this.totalAddressCount;
    final totalAvailableAddressCount = this.totalAvailableAddressCount;
    return {
      if (description != null) 'description': description,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
      if (poolAddressRanges != null) 'poolAddressRangeSet': poolAddressRanges,
      if (poolId != null) 'poolId': poolId,
      if (tags != null) 'tagSet': tags,
      if (totalAddressCount != null) 'totalAddressCount': totalAddressCount,
      if (totalAvailableAddressCount != null)
        'totalAvailableAddressCount': totalAvailableAddressCount,
    };
  }
}

/// Describes an address range of an IPv4 address pool.
class PublicIpv4PoolRange {
  /// The number of addresses in the range.
  final int? addressCount;

  /// The number of available addresses in the range.
  final int? availableAddressCount;

  /// The first IP address in the range.
  final String? firstAddress;

  /// The last IP address in the range.
  final String? lastAddress;

  PublicIpv4PoolRange({
    this.addressCount,
    this.availableAddressCount,
    this.firstAddress,
    this.lastAddress,
  });

  Map<String, dynamic> toJson() {
    final addressCount = this.addressCount;
    final availableAddressCount = this.availableAddressCount;
    final firstAddress = this.firstAddress;
    final lastAddress = this.lastAddress;
    return {
      if (addressCount != null) 'addressCount': addressCount,
      if (availableAddressCount != null)
        'availableAddressCount': availableAddressCount,
      if (firstAddress != null) 'firstAddress': firstAddress,
      if (lastAddress != null) 'lastAddress': lastAddress,
    };
  }
}

/// Describes the result of the purchase.
class Purchase {
  /// The currency in which the <code>UpfrontPrice</code> and
  /// <code>HourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The duration of the reservation's term in seconds.
  final int? duration;

  /// The IDs of the Dedicated Hosts associated with the reservation.
  final List<String>? hostIdSet;

  /// The ID of the reservation.
  final String? hostReservationId;

  /// The hourly price of the reservation per hour.
  final String? hourlyPrice;

  /// The instance family on the Dedicated Host that the reservation can be
  /// associated with.
  final String? instanceFamily;

  /// The payment option for the reservation.
  final PaymentOption? paymentOption;

  /// The upfront price of the reservation.
  final String? upfrontPrice;

  Purchase({
    this.currencyCode,
    this.duration,
    this.hostIdSet,
    this.hostReservationId,
    this.hourlyPrice,
    this.instanceFamily,
    this.paymentOption,
    this.upfrontPrice,
  });

  Map<String, dynamic> toJson() {
    final currencyCode = this.currencyCode;
    final duration = this.duration;
    final hostIdSet = this.hostIdSet;
    final hostReservationId = this.hostReservationId;
    final hourlyPrice = this.hourlyPrice;
    final instanceFamily = this.instanceFamily;
    final paymentOption = this.paymentOption;
    final upfrontPrice = this.upfrontPrice;
    return {
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (duration != null) 'duration': duration,
      if (hostIdSet != null) 'hostIdSet': hostIdSet,
      if (hostReservationId != null) 'hostReservationId': hostReservationId,
      if (hourlyPrice != null) 'hourlyPrice': hourlyPrice,
      if (instanceFamily != null) 'instanceFamily': instanceFamily,
      if (paymentOption != null) 'paymentOption': paymentOption.value,
      if (upfrontPrice != null) 'upfrontPrice': upfrontPrice,
    };
  }
}

class PurchaseCapacityBlockResult {
  /// The Capacity Reservation.
  final CapacityReservation? capacityReservation;

  PurchaseCapacityBlockResult({
    this.capacityReservation,
  });

  Map<String, dynamic> toJson() {
    final capacityReservation = this.capacityReservation;
    return {
      if (capacityReservation != null)
        'capacityReservation': capacityReservation,
    };
  }
}

class PurchaseHostReservationResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String? clientToken;

  /// The currency in which the <code>totalUpfrontPrice</code> and
  /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// Describes the details of the purchase.
  final List<Purchase>? purchase;

  /// The total hourly price of the reservation calculated per hour.
  final String? totalHourlyPrice;

  /// The total amount charged to your account when you purchase the reservation.
  final String? totalUpfrontPrice;

  PurchaseHostReservationResult({
    this.clientToken,
    this.currencyCode,
    this.purchase,
    this.totalHourlyPrice,
    this.totalUpfrontPrice,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final currencyCode = this.currencyCode;
    final purchase = this.purchase;
    final totalHourlyPrice = this.totalHourlyPrice;
    final totalUpfrontPrice = this.totalUpfrontPrice;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (purchase != null) 'purchase': purchase,
      if (totalHourlyPrice != null) 'totalHourlyPrice': totalHourlyPrice,
      if (totalUpfrontPrice != null) 'totalUpfrontPrice': totalUpfrontPrice,
    };
  }
}

/// Describes a request to purchase Scheduled Instances.
class PurchaseRequest {
  /// The number of instances.
  final int instanceCount;

  /// The purchase token.
  final String purchaseToken;

  PurchaseRequest({
    required this.instanceCount,
    required this.purchaseToken,
  });

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final purchaseToken = this.purchaseToken;
    return {
      'InstanceCount': instanceCount,
      'PurchaseToken': purchaseToken,
    };
  }
}

/// Contains the output of PurchaseReservedInstancesOffering.
class PurchaseReservedInstancesOfferingResult {
  /// The IDs of the purchased Reserved Instances. If your purchase crosses into a
  /// discounted pricing tier, the final Reserved Instances IDs might change. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers">Crossing
  /// pricing tiers</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final String? reservedInstancesId;

  PurchaseReservedInstancesOfferingResult({
    this.reservedInstancesId,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesId = this.reservedInstancesId;
    return {
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
    };
  }
}

/// Contains the output of PurchaseScheduledInstances.
class PurchaseScheduledInstancesResult {
  /// Information about the Scheduled Instances.
  final List<ScheduledInstance>? scheduledInstanceSet;

  PurchaseScheduledInstancesResult({
    this.scheduledInstanceSet,
  });

  Map<String, dynamic> toJson() {
    final scheduledInstanceSet = this.scheduledInstanceSet;
    return {
      if (scheduledInstanceSet != null)
        'scheduledInstanceSet': scheduledInstanceSet,
    };
  }
}

enum RIProductDescription {
  linuxUnix('Linux/UNIX'),
  linuxUnixAmazonVpc('Linux/UNIX (Amazon VPC)'),
  windows('Windows'),
  windowsAmazonVpc('Windows (Amazon VPC)'),
  ;

  final String value;

  const RIProductDescription(this.value);

  static RIProductDescription fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RIProductDescription'));
}

/// Describes a recurring charge.
class RecurringCharge {
  /// The amount of the recurring charge.
  final double? amount;

  /// The frequency of the recurring charge.
  final RecurringChargeFrequency? frequency;

  RecurringCharge({
    this.amount,
    this.frequency,
  });

  Map<String, dynamic> toJson() {
    final amount = this.amount;
    final frequency = this.frequency;
    return {
      if (amount != null) 'amount': amount,
      if (frequency != null) 'frequency': frequency.value,
    };
  }
}

enum RecurringChargeFrequency {
  hourly('Hourly'),
  ;

  final String value;

  const RecurringChargeFrequency(this.value);

  static RecurringChargeFrequency fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RecurringChargeFrequency'));
}

/// Describes the security group that is referenced in the security group rule.
class ReferencedSecurityGroup {
  /// The ID of the security group.
  final String? groupId;

  /// The status of a VPC peering connection, if applicable.
  final String? peeringStatus;

  /// The Amazon Web Services account ID.
  final String? userId;

  /// The ID of the VPC.
  final String? vpcId;

  /// The ID of the VPC peering connection (if applicable).
  final String? vpcPeeringConnectionId;

  ReferencedSecurityGroup({
    this.groupId,
    this.peeringStatus,
    this.userId,
    this.vpcId,
    this.vpcPeeringConnectionId,
  });

  Map<String, dynamic> toJson() {
    final groupId = this.groupId;
    final peeringStatus = this.peeringStatus;
    final userId = this.userId;
    final vpcId = this.vpcId;
    final vpcPeeringConnectionId = this.vpcPeeringConnectionId;
    return {
      if (groupId != null) 'groupId': groupId,
      if (peeringStatus != null) 'peeringStatus': peeringStatus,
      if (userId != null) 'userId': userId,
      if (vpcId != null) 'vpcId': vpcId,
      if (vpcPeeringConnectionId != null)
        'vpcPeeringConnectionId': vpcPeeringConnectionId,
    };
  }
}

/// Describes a Region.
class Region {
  /// The Region service endpoint.
  final String? endpoint;

  /// The Region opt-in status. The possible values are
  /// <code>opt-in-not-required</code>, <code>opted-in</code>, and
  /// <code>not-opted-in</code>.
  final String? optInStatus;

  /// The name of the Region.
  final String? regionName;

  Region({
    this.endpoint,
    this.optInStatus,
    this.regionName,
  });

  Map<String, dynamic> toJson() {
    final endpoint = this.endpoint;
    final optInStatus = this.optInStatus;
    final regionName = this.regionName;
    return {
      if (endpoint != null) 'regionEndpoint': endpoint,
      if (optInStatus != null) 'optInStatus': optInStatus,
      if (regionName != null) 'regionName': regionName,
    };
  }
}

/// Contains the output of RegisterImage.
class RegisterImageResult {
  /// The ID of the newly registered AMI.
  final String? imageId;

  RegisterImageResult({
    this.imageId,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    return {
      if (imageId != null) 'imageId': imageId,
    };
  }
}

class RegisterInstanceEventNotificationAttributesResult {
  /// The resulting set of tag keys.
  final InstanceTagNotificationAttribute? instanceTagAttribute;

  RegisterInstanceEventNotificationAttributesResult({
    this.instanceTagAttribute,
  });

  Map<String, dynamic> toJson() {
    final instanceTagAttribute = this.instanceTagAttribute;
    return {
      if (instanceTagAttribute != null)
        'instanceTagAttribute': instanceTagAttribute,
    };
  }
}

/// Information about the tag keys to register for the current Region. You can
/// either specify individual tag keys or register all tag keys in the current
/// Region. You must specify either <code>IncludeAllTagsOfInstance</code> or
/// <code>InstanceTagKeys</code> in the request
class RegisterInstanceTagAttributeRequest {
  /// Indicates whether to register all tag keys in the current Region. Specify
  /// <code>true</code> to register all tag keys.
  final bool? includeAllTagsOfInstance;

  /// The tag keys to register.
  final List<String>? instanceTagKeys;

  RegisterInstanceTagAttributeRequest({
    this.includeAllTagsOfInstance,
    this.instanceTagKeys,
  });

  Map<String, dynamic> toJson() {
    final includeAllTagsOfInstance = this.includeAllTagsOfInstance;
    final instanceTagKeys = this.instanceTagKeys;
    return {
      if (includeAllTagsOfInstance != null)
        'IncludeAllTagsOfInstance': includeAllTagsOfInstance,
      if (instanceTagKeys != null) 'InstanceTagKey': instanceTagKeys,
    };
  }
}

class RegisterTransitGatewayMulticastGroupMembersResult {
  /// Information about the registered transit gateway multicast group members.
  final TransitGatewayMulticastRegisteredGroupMembers?
      registeredMulticastGroupMembers;

  RegisterTransitGatewayMulticastGroupMembersResult({
    this.registeredMulticastGroupMembers,
  });

  Map<String, dynamic> toJson() {
    final registeredMulticastGroupMembers =
        this.registeredMulticastGroupMembers;
    return {
      if (registeredMulticastGroupMembers != null)
        'registeredMulticastGroupMembers': registeredMulticastGroupMembers,
    };
  }
}

class RegisterTransitGatewayMulticastGroupSourcesResult {
  /// Information about the transit gateway multicast group sources.
  final TransitGatewayMulticastRegisteredGroupSources?
      registeredMulticastGroupSources;

  RegisterTransitGatewayMulticastGroupSourcesResult({
    this.registeredMulticastGroupSources,
  });

  Map<String, dynamic> toJson() {
    final registeredMulticastGroupSources =
        this.registeredMulticastGroupSources;
    return {
      if (registeredMulticastGroupSources != null)
        'registeredMulticastGroupSources': registeredMulticastGroupSources,
    };
  }
}

class RejectTransitGatewayMulticastDomainAssociationsResult {
  /// Information about the multicast domain associations.
  final TransitGatewayMulticastDomainAssociations? associations;

  RejectTransitGatewayMulticastDomainAssociationsResult({
    this.associations,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    return {
      if (associations != null) 'associations': associations,
    };
  }
}

class RejectTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment? transitGatewayPeeringAttachment;

  RejectTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayPeeringAttachment =
        this.transitGatewayPeeringAttachment;
    return {
      if (transitGatewayPeeringAttachment != null)
        'transitGatewayPeeringAttachment': transitGatewayPeeringAttachment,
    };
  }
}

class RejectTransitGatewayVpcAttachmentResult {
  /// Information about the attachment.
  final TransitGatewayVpcAttachment? transitGatewayVpcAttachment;

  RejectTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });

  Map<String, dynamic> toJson() {
    final transitGatewayVpcAttachment = this.transitGatewayVpcAttachment;
    return {
      if (transitGatewayVpcAttachment != null)
        'transitGatewayVpcAttachment': transitGatewayVpcAttachment,
    };
  }
}

class RejectVpcEndpointConnectionsResult {
  /// Information about the endpoints that were not rejected, if applicable.
  final List<UnsuccessfulItem>? unsuccessful;

  RejectVpcEndpointConnectionsResult({
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final unsuccessful = this.unsuccessful;
    return {
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class RejectVpcPeeringConnectionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  RejectVpcPeeringConnectionResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class ReleaseHostsResult {
  /// The IDs of the Dedicated Hosts that were successfully released.
  final List<String>? successful;

  /// The IDs of the Dedicated Hosts that could not be released, including an
  /// error message.
  final List<UnsuccessfulItem>? unsuccessful;

  ReleaseHostsResult({
    this.successful,
    this.unsuccessful,
  });

  Map<String, dynamic> toJson() {
    final successful = this.successful;
    final unsuccessful = this.unsuccessful;
    return {
      if (successful != null) 'successful': successful,
      if (unsuccessful != null) 'unsuccessful': unsuccessful,
    };
  }
}

class ReleaseIpamPoolAllocationResult {
  /// Indicates if the release was successful.
  final bool? success;

  ReleaseIpamPoolAllocationResult({
    this.success,
  });

  Map<String, dynamic> toJson() {
    final success = this.success;
    return {
      if (success != null) 'success': success,
    };
  }
}

/// Remove an operating Region from an IPAM. Operating Regions are Amazon Web
/// Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM
/// only discovers and monitors resources in the Amazon Web Services Regions you
/// select as operating Regions.
///
/// For more information about operating Regions, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create
/// an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>
class RemoveIpamOperatingRegion {
  /// The name of the operating Region you want to remove.
  final String? regionName;

  RemoveIpamOperatingRegion({
    this.regionName,
  });

  Map<String, dynamic> toJson() {
    final regionName = this.regionName;
    return {
      if (regionName != null) 'RegionName': regionName,
    };
  }
}

/// An entry for a prefix list.
class RemovePrefixListEntry {
  /// The CIDR block.
  final String cidr;

  RemovePrefixListEntry({
    required this.cidr,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    return {
      'Cidr': cidr,
    };
  }
}

class ReplaceIamInstanceProfileAssociationResult {
  /// Information about the IAM instance profile association.
  final IamInstanceProfileAssociation? iamInstanceProfileAssociation;

  ReplaceIamInstanceProfileAssociationResult({
    this.iamInstanceProfileAssociation,
  });

  Map<String, dynamic> toJson() {
    final iamInstanceProfileAssociation = this.iamInstanceProfileAssociation;
    return {
      if (iamInstanceProfileAssociation != null)
        'iamInstanceProfileAssociation': iamInstanceProfileAssociation,
    };
  }
}

class ReplaceNetworkAclAssociationResult {
  /// The ID of the new association.
  final String? newAssociationId;

  ReplaceNetworkAclAssociationResult({
    this.newAssociationId,
  });

  Map<String, dynamic> toJson() {
    final newAssociationId = this.newAssociationId;
    return {
      if (newAssociationId != null) 'newAssociationId': newAssociationId,
    };
  }
}

/// Information about a root volume replacement task.
class ReplaceRootVolumeTask {
  /// The time the task completed.
  final String? completeTime;

  /// Indicates whether the original root volume is to be deleted after the root
  /// volume replacement task completes.
  final bool? deleteReplacedRootVolume;

  /// The ID of the AMI used to create the replacement root volume.
  final String? imageId;

  /// The ID of the instance for which the root volume replacement task was
  /// created.
  final String? instanceId;

  /// The ID of the root volume replacement task.
  final String? replaceRootVolumeTaskId;

  /// The ID of the snapshot used to create the replacement root volume.
  final String? snapshotId;

  /// The time the task was started.
  final String? startTime;

  /// The tags assigned to the task.
  final List<Tag>? tags;

  /// The state of the task. The task can be in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>pending</code> - the replacement volume is being created.
  /// </li>
  /// <li>
  /// <code>in-progress</code> - the original volume is being detached and the
  /// replacement volume is being attached.
  /// </li>
  /// <li>
  /// <code>succeeded</code> - the replacement volume has been successfully
  /// attached to the instance and the instance is available.
  /// </li>
  /// <li>
  /// <code>failing</code> - the replacement task is in the process of failing.
  /// </li>
  /// <li>
  /// <code>failed</code> - the replacement task has failed but the original root
  /// volume is still attached.
  /// </li>
  /// <li>
  /// <code>failing-detached</code> - the replacement task is in the process of
  /// failing. The instance might have no root volume attached.
  /// </li>
  /// <li>
  /// <code>failed-detached</code> - the replacement task has failed and the
  /// instance has no root volume attached.
  /// </li>
  /// </ul>
  final ReplaceRootVolumeTaskState? taskState;

  ReplaceRootVolumeTask({
    this.completeTime,
    this.deleteReplacedRootVolume,
    this.imageId,
    this.instanceId,
    this.replaceRootVolumeTaskId,
    this.snapshotId,
    this.startTime,
    this.tags,
    this.taskState,
  });

  Map<String, dynamic> toJson() {
    final completeTime = this.completeTime;
    final deleteReplacedRootVolume = this.deleteReplacedRootVolume;
    final imageId = this.imageId;
    final instanceId = this.instanceId;
    final replaceRootVolumeTaskId = this.replaceRootVolumeTaskId;
    final snapshotId = this.snapshotId;
    final startTime = this.startTime;
    final tags = this.tags;
    final taskState = this.taskState;
    return {
      if (completeTime != null) 'completeTime': completeTime,
      if (deleteReplacedRootVolume != null)
        'deleteReplacedRootVolume': deleteReplacedRootVolume,
      if (imageId != null) 'imageId': imageId,
      if (instanceId != null) 'instanceId': instanceId,
      if (replaceRootVolumeTaskId != null)
        'replaceRootVolumeTaskId': replaceRootVolumeTaskId,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (startTime != null) 'startTime': startTime,
      if (tags != null) 'tagSet': tags,
      if (taskState != null) 'taskState': taskState.value,
    };
  }
}

enum ReplaceRootVolumeTaskState {
  pending('pending'),
  inProgress('in-progress'),
  failing('failing'),
  succeeded('succeeded'),
  failed('failed'),
  failedDetached('failed-detached'),
  ;

  final String value;

  const ReplaceRootVolumeTaskState(this.value);

  static ReplaceRootVolumeTaskState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ReplaceRootVolumeTaskState'));
}

class ReplaceRouteTableAssociationResult {
  /// The state of the association.
  final RouteTableAssociationState? associationState;

  /// The ID of the new association.
  final String? newAssociationId;

  ReplaceRouteTableAssociationResult({
    this.associationState,
    this.newAssociationId,
  });

  Map<String, dynamic> toJson() {
    final associationState = this.associationState;
    final newAssociationId = this.newAssociationId;
    return {
      if (associationState != null) 'associationState': associationState,
      if (newAssociationId != null) 'newAssociationId': newAssociationId,
    };
  }
}

class ReplaceTransitGatewayRouteResult {
  /// Information about the modified route.
  final TransitGatewayRoute? route;

  ReplaceTransitGatewayRouteResult({
    this.route,
  });

  Map<String, dynamic> toJson() {
    final route = this.route;
    return {
      if (route != null) 'route': route,
    };
  }
}

class ReplaceVpnTunnelResult {
  /// Confirmation of replace tunnel operation.
  final bool? returnValue;

  ReplaceVpnTunnelResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

enum ReplacementStrategy {
  launch('launch'),
  launchBeforeTerminate('launch-before-terminate'),
  ;

  final String value;

  const ReplacementStrategy(this.value);

  static ReplacementStrategy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ReplacementStrategy'));
}

enum ReportInstanceReasonCodes {
  instanceStuckInState('instance-stuck-in-state'),
  unresponsive('unresponsive'),
  notAcceptingCredentials('not-accepting-credentials'),
  passwordNotAvailable('password-not-available'),
  performanceNetwork('performance-network'),
  performanceInstanceStore('performance-instance-store'),
  performanceEbsVolume('performance-ebs-volume'),
  performanceOther('performance-other'),
  other('other'),
  ;

  final String value;

  const ReportInstanceReasonCodes(this.value);

  static ReportInstanceReasonCodes fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ReportInstanceReasonCodes'));
}

enum ReportStatusType {
  ok('ok'),
  impaired('impaired'),
  ;

  final String value;

  const ReportStatusType(this.value);

  static ReportStatusType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ReportStatusType'));
}

/// Describes a port range.
class RequestFilterPortRange {
  /// The first port in the range.
  final int? fromPort;

  /// The last port in the range.
  final int? toPort;

  RequestFilterPortRange({
    this.fromPort,
    this.toPort,
  });

  Map<String, dynamic> toJson() {
    final fromPort = this.fromPort;
    final toPort = this.toPort;
    return {
      if (fromPort != null) 'FromPort': fromPort,
      if (toPort != null) 'ToPort': toPort,
    };
  }
}

/// A tag on an IPAM resource.
class RequestIpamResourceTag {
  /// The key of a tag assigned to the resource. Use this filter to find all
  /// resources assigned a tag with a specific key, regardless of the tag value.
  final String? key;

  /// The value for the tag.
  final String? value;

  RequestIpamResourceTag({
    this.key,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

/// The information to include in the launch template.
/// <note>
/// You must specify at least one parameter for the launch template data.
/// </note>
class RequestLaunchTemplateData {
  /// The block device mapping.
  final List<LaunchTemplateBlockDeviceMappingRequest>? blockDeviceMappings;

  /// The Capacity Reservation targeting option. If you do not specify this
  /// parameter, the instance's Capacity Reservation preference defaults to
  /// <code>open</code>, which enables it to run in any open Capacity Reservation
  /// that has matching attributes (instance type, platform, Availability Zone).
  final LaunchTemplateCapacityReservationSpecificationRequest?
      capacityReservationSpecification;

  /// The CPU options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing
  /// CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateCpuOptionsRequest? cpuOptions;

  /// The credit option for CPU usage of the instance. Valid only for T instances.
  final CreditSpecificationRequest? creditSpecification;

  /// Indicates whether to enable the instance for stop protection. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop
  /// protection</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final bool? disableApiStop;

  /// If you set this parameter to <code>true</code>, you can't terminate the
  /// instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To
  /// change this attribute after launch, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>.
  /// Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to
  /// <code>terminate</code>, you can terminate the instance by running the
  /// shutdown command from the instance.
  final bool? disableApiTermination;

  /// Indicates whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal Amazon EBS I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS-optimized instance.
  final bool? ebsOptimized;

  /// Deprecated.
  /// <note>
  /// Amazon Elastic Graphics reached end of life on January 8, 2024. For
  /// workloads that require graphics acceleration, we recommend that you use
  /// Amazon EC2 G4ad, G4dn, or G5 instances.
  /// </note>
  final List<ElasticGpuSpecification>? elasticGpuSpecifications;

  /// An elastic inference accelerator to associate with the instance. Elastic
  /// inference accelerators are a resource you can attach to your Amazon EC2
  /// instances to accelerate your Deep Learning (DL) inference workloads.
  ///
  /// You cannot specify accelerators from different generations in the same
  /// request.
  /// <note>
  /// Starting April 15, 2023, Amazon Web Services will not onboard new customers
  /// to Amazon Elastic Inference (EI), and will help current customers migrate
  /// their workloads to options that offer better price and performance. After
  /// April 15, 2023, new customers will not be able to launch instances with
  /// Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2.
  /// However, customers who have used Amazon EI at least once during the past
  /// 30-day period are considered current customers and will be able to continue
  /// using the service.
  /// </note>
  final List<LaunchTemplateElasticInferenceAccelerator>?
      elasticInferenceAccelerators;

  /// Indicates whether the instance is enabled for Amazon Web Services Nitro
  /// Enclaves. For more information, see <a
  /// href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html">
  /// What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web
  /// Services Nitro Enclaves User Guide</i>.
  ///
  /// You can't enable Amazon Web Services Nitro Enclaves and hibernation on the
  /// same instance.
  final LaunchTemplateEnclaveOptionsRequest? enclaveOptions;

  /// Indicates whether an instance is enabled for hibernation. This parameter is
  /// valid only if the instance meets the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
  /// prerequisites</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// your instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateHibernationOptionsRequest? hibernationOptions;

  /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
  final LaunchTemplateIamInstanceProfileSpecificationRequest?
      iamInstanceProfile;

  /// The ID of the AMI. Alternatively, you can specify a Systems Manager
  /// parameter, which will resolve to an AMI ID on launch.
  ///
  /// Valid formats:
  ///
  /// <ul>
  /// <li>
  /// <code>ami-17characters00000</code>
  /// </li>
  /// <li>
  /// <code>resolve:ssm:parameter-name</code>
  /// </li>
  /// <li>
  /// <code>resolve:ssm:parameter-name:version-number</code>
  /// </li>
  /// <li>
  /// <code>resolve:ssm:parameter-name:label</code>
  /// </li>
  /// <li>
  /// <code>resolve:ssm:public-parameter</code>
  /// </li>
  /// </ul> <note>
  /// Currently, EC2 Fleet and Spot Fleet do not support specifying a Systems
  /// Manager parameter. If the launch template will be used by an EC2 Fleet or
  /// Spot Fleet, you must specify the AMI ID.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#use-an-ssm-parameter-instead-of-an-ami-id">Use
  /// a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  final String? imageId;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  ///
  /// Default: <code>stop</code>
  final ShutdownBehavior? instanceInitiatedShutdownBehavior;

  /// The market (purchasing) option for the instances.
  final LaunchTemplateInstanceMarketOptionsRequest? instanceMarketOptions;

  /// The attributes for the instance types. When you specify instance attributes,
  /// Amazon EC2 will identify instance types with these attributes.
  ///
  /// You must specify <code>VCpuCount</code> and <code>MemoryMiB</code>. All
  /// other attributes are optional. Any unspecified optional attribute is set to
  /// its default.
  ///
  /// When you specify multiple attributes, you get instance types that satisfy
  /// all of the specified attributes. If you specify multiple values for an
  /// attribute, you get instance types that satisfy any of the specified values.
  ///
  /// To limit the list of instance types from which Amazon EC2 can identify
  /// matching instance types, you can use one of the following parameters, but
  /// not both in the same request:
  ///
  /// <ul>
  /// <li>
  /// <code>AllowedInstanceTypes</code> - The instance types to include in the
  /// list. All other instance types are ignored, even if they match your
  /// specified attributes.
  /// </li>
  /// <li>
  /// <code>ExcludedInstanceTypes</code> - The instance types to exclude from the
  /// list, even if they match your specified attributes.
  /// </li>
  /// </ul> <note>
  /// If you specify <code>InstanceRequirements</code>, you can't specify
  /// <code>InstanceType</code>.
  ///
  /// Attribute-based instance type selection is only supported when using Auto
  /// Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan
  /// to use the launch template in the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html">launch
  /// instance wizard</a>, or with the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// API or <a
  /// href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html">AWS::EC2::Instance</a>
  /// Amazon Web Services CloudFormation resource, you can't specify
  /// <code>InstanceRequirements</code>.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Attribute-based
  /// instance type selection for EC2 Fleet</a>, <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html">Attribute-based
  /// instance type selection for Spot Fleet</a>, and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
  /// placement score</a> in the <i>Amazon EC2 User Guide</i>.
  final InstanceRequirementsRequest? instanceRequirements;

  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// If you specify <code>InstanceType</code>, you can't specify
  /// <code>InstanceRequirements</code>.
  final InstanceType? instanceType;

  /// The ID of the kernel.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">User
  /// provided kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </important>
  final String? kernelId;

  /// The name of the key pair. You can create a key pair using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.
  /// <important>
  /// If you do not specify a key pair, you can't connect to the instance unless
  /// you choose an AMI that is configured to allow users another way to log in.
  /// </important>
  final String? keyName;

  /// The license configurations.
  final List<LaunchTemplateLicenseConfigurationRequest>? licenseSpecifications;

  /// The maintenance options for the instance.
  final LaunchTemplateInstanceMaintenanceOptionsRequest? maintenanceOptions;

  /// The metadata options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// metadata and user data</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  final LaunchTemplateInstanceMetadataOptionsRequest? metadataOptions;

  /// The monitoring for the instance.
  final LaunchTemplatesMonitoringRequest? monitoring;

  /// The network interfaces for the instance.
  final List<LaunchTemplateInstanceNetworkInterfaceSpecificationRequest>?
      networkInterfaces;

  /// The placement for the instance.
  final LaunchTemplatePlacementRequest? placement;

  /// The options for the instance hostname. The default values are inherited from
  /// the subnet.
  final LaunchTemplatePrivateDnsNameOptionsRequest? privateDnsNameOptions;

  /// The ID of the RAM disk.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">User
  /// provided kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </important>
  final String? ramDiskId;

  /// The IDs of the security groups.
  ///
  /// If you specify a network interface, you must specify any security groups as
  /// part of the network interface instead of using this parameter.
  final List<String>? securityGroupIds;

  /// The names of the security groups. For a nondefault VPC, you must use
  /// security group IDs instead.
  ///
  /// If you specify a network interface, you must specify any security groups as
  /// part of the network interface instead of using this parameter.
  final List<String>? securityGroups;

  /// The tags to apply to the resources that are created during instance launch.
  /// These tags are not applied to the launch template.
  final List<LaunchTemplateTagSpecificationRequest>? tagSpecifications;

  /// The user data to make available to the instance. You must provide
  /// base64-encoded text. User data is limited to 16 KB. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run
  /// commands on your Linux instance at launch</a> (Linux) or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instancedata-add-user-data.html">Work
  /// with instance user data</a> (Windows) in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// If you are creating the launch template for use with Batch, the user data
  /// must be provided in the <a
  /// href="https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive">
  /// MIME multi-part archive format</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html">Amazon
  /// EC2 user data in launch templates</a> in the <i>Batch User Guide</i>.
  final String? userData;

  RequestLaunchTemplateData({
    this.blockDeviceMappings,
    this.capacityReservationSpecification,
    this.cpuOptions,
    this.creditSpecification,
    this.disableApiStop,
    this.disableApiTermination,
    this.ebsOptimized,
    this.elasticGpuSpecifications,
    this.elasticInferenceAccelerators,
    this.enclaveOptions,
    this.hibernationOptions,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceInitiatedShutdownBehavior,
    this.instanceMarketOptions,
    this.instanceRequirements,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.licenseSpecifications,
    this.maintenanceOptions,
    this.metadataOptions,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.privateDnsNameOptions,
    this.ramDiskId,
    this.securityGroupIds,
    this.securityGroups,
    this.tagSpecifications,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final blockDeviceMappings = this.blockDeviceMappings;
    final capacityReservationSpecification =
        this.capacityReservationSpecification;
    final cpuOptions = this.cpuOptions;
    final creditSpecification = this.creditSpecification;
    final disableApiStop = this.disableApiStop;
    final disableApiTermination = this.disableApiTermination;
    final ebsOptimized = this.ebsOptimized;
    final elasticGpuSpecifications = this.elasticGpuSpecifications;
    final elasticInferenceAccelerators = this.elasticInferenceAccelerators;
    final enclaveOptions = this.enclaveOptions;
    final hibernationOptions = this.hibernationOptions;
    final iamInstanceProfile = this.iamInstanceProfile;
    final imageId = this.imageId;
    final instanceInitiatedShutdownBehavior =
        this.instanceInitiatedShutdownBehavior;
    final instanceMarketOptions = this.instanceMarketOptions;
    final instanceRequirements = this.instanceRequirements;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final licenseSpecifications = this.licenseSpecifications;
    final maintenanceOptions = this.maintenanceOptions;
    final metadataOptions = this.metadataOptions;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final placement = this.placement;
    final privateDnsNameOptions = this.privateDnsNameOptions;
    final ramDiskId = this.ramDiskId;
    final securityGroupIds = this.securityGroupIds;
    final securityGroups = this.securityGroups;
    final tagSpecifications = this.tagSpecifications;
    final userData = this.userData;
    return {
      if (blockDeviceMappings != null)
        'BlockDeviceMapping': blockDeviceMappings,
      if (capacityReservationSpecification != null)
        'CapacityReservationSpecification': capacityReservationSpecification,
      if (cpuOptions != null) 'CpuOptions': cpuOptions,
      if (creditSpecification != null)
        'CreditSpecification': creditSpecification,
      if (disableApiStop != null) 'DisableApiStop': disableApiStop,
      if (disableApiTermination != null)
        'DisableApiTermination': disableApiTermination,
      if (ebsOptimized != null) 'EbsOptimized': ebsOptimized,
      if (elasticGpuSpecifications != null)
        'ElasticGpuSpecification': elasticGpuSpecifications,
      if (elasticInferenceAccelerators != null)
        'ElasticInferenceAccelerator': elasticInferenceAccelerators,
      if (enclaveOptions != null) 'EnclaveOptions': enclaveOptions,
      if (hibernationOptions != null) 'HibernationOptions': hibernationOptions,
      if (iamInstanceProfile != null) 'IamInstanceProfile': iamInstanceProfile,
      if (imageId != null) 'ImageId': imageId,
      if (instanceInitiatedShutdownBehavior != null)
        'InstanceInitiatedShutdownBehavior':
            instanceInitiatedShutdownBehavior.value,
      if (instanceMarketOptions != null)
        'InstanceMarketOptions': instanceMarketOptions,
      if (instanceRequirements != null)
        'InstanceRequirements': instanceRequirements,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (kernelId != null) 'KernelId': kernelId,
      if (keyName != null) 'KeyName': keyName,
      if (licenseSpecifications != null)
        'LicenseSpecification': licenseSpecifications,
      if (maintenanceOptions != null) 'MaintenanceOptions': maintenanceOptions,
      if (metadataOptions != null) 'MetadataOptions': metadataOptions,
      if (monitoring != null) 'Monitoring': monitoring,
      if (networkInterfaces != null) 'NetworkInterface': networkInterfaces,
      if (placement != null) 'Placement': placement,
      if (privateDnsNameOptions != null)
        'PrivateDnsNameOptions': privateDnsNameOptions,
      if (ramDiskId != null) 'RamDiskId': ramDiskId,
      if (securityGroupIds != null) 'SecurityGroupId': securityGroupIds,
      if (securityGroups != null) 'SecurityGroup': securityGroups,
      if (tagSpecifications != null) 'TagSpecification': tagSpecifications,
      if (userData != null) 'UserData': userData,
    };
  }
}

/// Contains the output of RequestSpotFleet.
class RequestSpotFleetResponse {
  /// The ID of the Spot Fleet request.
  final String? spotFleetRequestId;

  RequestSpotFleetResponse({
    this.spotFleetRequestId,
  });

  Map<String, dynamic> toJson() {
    final spotFleetRequestId = this.spotFleetRequestId;
    return {
      if (spotFleetRequestId != null) 'spotFleetRequestId': spotFleetRequestId,
    };
  }
}

/// Contains the output of RequestSpotInstances.
class RequestSpotInstancesResult {
  /// The Spot Instance requests.
  final List<SpotInstanceRequest>? spotInstanceRequests;

  RequestSpotInstancesResult({
    this.spotInstanceRequests,
  });

  Map<String, dynamic> toJson() {
    final spotInstanceRequests = this.spotInstanceRequests;
    return {
      if (spotInstanceRequests != null)
        'spotInstanceRequestSet': spotInstanceRequests,
    };
  }
}

/// Describes the launch specification for an instance.
class RequestSpotLaunchSpecification {
  /// Deprecated.
  final String? addressingType;

  /// The block device mapping entries. You can't specify both a snapshot ID and
  /// an encryption value. This is because only blank volumes can be encrypted on
  /// creation. If a snapshot is the basis for a volume, it is not blank and its
  /// encryption status is used for the volume encryption status.
  final List<BlockDeviceMapping>? blockDeviceMappings;

  /// Indicates whether the instance is optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS Optimized instance.
  ///
  /// Default: <code>false</code>
  final bool? ebsOptimized;

  /// The IAM instance profile.
  final IamInstanceProfileSpecification? iamInstanceProfile;

  /// The ID of the AMI.
  final String? imageId;

  /// The instance type. Only one instance type can be specified.
  final InstanceType? instanceType;

  /// The ID of the kernel.
  final String? kernelId;

  /// The name of the key pair.
  final String? keyName;

  /// Indicates whether basic or detailed monitoring is enabled for the instance.
  ///
  /// Default: Disabled
  final RunInstancesMonitoringEnabled? monitoring;

  /// The network interfaces. If you specify a network interface, you must specify
  /// subnet IDs and security group IDs using the network interface.
  final List<InstanceNetworkInterfaceSpecification>? networkInterfaces;

  /// The placement information for the instance.
  final SpotPlacement? placement;

  /// The ID of the RAM disk.
  final String? ramdiskId;

  /// The IDs of the security groups.
  final List<String>? securityGroupIds;

  /// Not supported.
  final List<String>? securityGroups;

  /// The ID of the subnet in which to launch the instance.
  final String? subnetId;

  /// The base64-encoded user data that instances use when starting up. User data
  /// is limited to 16 KB.
  final String? userData;

  RequestSpotLaunchSpecification({
    this.addressingType,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroupIds,
    this.securityGroups,
    this.subnetId,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final addressingType = this.addressingType;
    final blockDeviceMappings = this.blockDeviceMappings;
    final ebsOptimized = this.ebsOptimized;
    final iamInstanceProfile = this.iamInstanceProfile;
    final imageId = this.imageId;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final placement = this.placement;
    final ramdiskId = this.ramdiskId;
    final securityGroupIds = this.securityGroupIds;
    final securityGroups = this.securityGroups;
    final subnetId = this.subnetId;
    final userData = this.userData;
    return {
      if (addressingType != null) 'addressingType': addressingType,
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (iamInstanceProfile != null) 'iamInstanceProfile': iamInstanceProfile,
      if (imageId != null) 'imageId': imageId,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (kernelId != null) 'kernelId': kernelId,
      if (keyName != null) 'keyName': keyName,
      if (monitoring != null) 'monitoring': monitoring,
      if (networkInterfaces != null) 'NetworkInterface': networkInterfaces,
      if (placement != null) 'placement': placement,
      if (ramdiskId != null) 'ramdiskId': ramdiskId,
      if (securityGroupIds != null) 'SecurityGroupId': securityGroupIds,
      if (securityGroups != null) 'SecurityGroup': securityGroups,
      if (subnetId != null) 'subnetId': subnetId,
      if (userData != null) 'userData': userData,
    };
  }
}

/// Describes a launch request for one or more instances, and includes owner,
/// requester, and security group information that applies to all instances in
/// the launch request.
class Reservation {
  /// Not supported.
  final List<GroupIdentifier>? groups;

  /// The instances.
  final List<Instance>? instances;

  /// The ID of the Amazon Web Services account that owns the reservation.
  final String? ownerId;

  /// The ID of the requester that launched the instances on your behalf (for
  /// example, Amazon Web Services Management Console or Auto Scaling).
  final String? requesterId;

  /// The ID of the reservation.
  final String? reservationId;

  Reservation({
    this.groups,
    this.instances,
    this.ownerId,
    this.requesterId,
    this.reservationId,
  });

  Map<String, dynamic> toJson() {
    final groups = this.groups;
    final instances = this.instances;
    final ownerId = this.ownerId;
    final requesterId = this.requesterId;
    final reservationId = this.reservationId;
    return {
      if (groups != null) 'groupSet': groups,
      if (instances != null) 'instancesSet': instances,
      if (ownerId != null) 'ownerId': ownerId,
      if (requesterId != null) 'requesterId': requesterId,
      if (reservationId != null) 'reservationId': reservationId,
    };
  }
}

/// Information about an instance type to use in a Capacity Reservation Fleet.
class ReservationFleetInstanceSpecification {
  /// The Availability Zone in which the Capacity Reservation Fleet reserves the
  /// capacity. A Capacity Reservation Fleet can't span Availability Zones. All
  /// instance type specifications that you specify for the Fleet must use the
  /// same Availability Zone.
  final String? availabilityZone;

  /// The ID of the Availability Zone in which the Capacity Reservation Fleet
  /// reserves the capacity. A Capacity Reservation Fleet can't span Availability
  /// Zones. All instance type specifications that you specify for the Fleet must
  /// use the same Availability Zone.
  final String? availabilityZoneId;

  /// Indicates whether the Capacity Reservation Fleet supports EBS-optimized
  /// instances types. This optimization provides dedicated throughput to Amazon
  /// EBS and an optimized configuration stack to provide optimal I/O performance.
  /// This optimization isn't available with all instance types. Additional usage
  /// charges apply when using EBS-optimized instance types.
  final bool? ebsOptimized;

  /// The type of operating system for which the Capacity Reservation Fleet
  /// reserves capacity.
  final CapacityReservationInstancePlatform? instancePlatform;

  /// The instance type for which the Capacity Reservation Fleet reserves
  /// capacity.
  final InstanceType? instanceType;

  /// The priority to assign to the instance type. This value is used to determine
  /// which of the instance types specified for the Fleet should be prioritized
  /// for use. A lower value indicates a high priority. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-priority">Instance
  /// type priority</a> in the Amazon EC2 User Guide.
  final int? priority;

  /// The number of capacity units provided by the specified instance type. This
  /// value, together with the total target capacity that you specify for the
  /// Fleet determine the number of instances for which the Fleet reserves
  /// capacity. Both values are based on units that make sense for your workload.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">Total
  /// target capacity</a> in the Amazon EC2 User Guide.
  final double? weight;

  ReservationFleetInstanceSpecification({
    this.availabilityZone,
    this.availabilityZoneId,
    this.ebsOptimized,
    this.instancePlatform,
    this.instanceType,
    this.priority,
    this.weight,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final availabilityZoneId = this.availabilityZoneId;
    final ebsOptimized = this.ebsOptimized;
    final instancePlatform = this.instancePlatform;
    final instanceType = this.instanceType;
    final priority = this.priority;
    final weight = this.weight;
    return {
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (availabilityZoneId != null) 'AvailabilityZoneId': availabilityZoneId,
      if (ebsOptimized != null) 'EbsOptimized': ebsOptimized,
      if (instancePlatform != null) 'InstancePlatform': instancePlatform.value,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (priority != null) 'Priority': priority,
      if (weight != null) 'Weight': weight,
    };
  }
}

enum ReservationState {
  paymentPending('payment-pending'),
  paymentFailed('payment-failed'),
  active('active'),
  retired('retired'),
  ;

  final String value;

  const ReservationState(this.value);

  static ReservationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ReservationState'));
}

/// The cost associated with the Reserved Instance.
class ReservationValue {
  /// The hourly rate of the reservation.
  final String? hourlyPrice;

  /// The balance of the total value (the sum of remainingUpfrontValue +
  /// hourlyPrice * number of hours remaining).
  final String? remainingTotalValue;

  /// The remaining upfront cost of the reservation.
  final String? remainingUpfrontValue;

  ReservationValue({
    this.hourlyPrice,
    this.remainingTotalValue,
    this.remainingUpfrontValue,
  });

  Map<String, dynamic> toJson() {
    final hourlyPrice = this.hourlyPrice;
    final remainingTotalValue = this.remainingTotalValue;
    final remainingUpfrontValue = this.remainingUpfrontValue;
    return {
      if (hourlyPrice != null) 'hourlyPrice': hourlyPrice,
      if (remainingTotalValue != null)
        'remainingTotalValue': remainingTotalValue,
      if (remainingUpfrontValue != null)
        'remainingUpfrontValue': remainingUpfrontValue,
    };
  }
}

/// Describes the limit price of a Reserved Instance offering.
class ReservedInstanceLimitPrice {
  /// Used for Reserved Instance Marketplace offerings. Specifies the limit price
  /// on the total order (instanceCount * price).
  final double? amount;

  /// The currency in which the <code>limitPrice</code> amount is specified. At
  /// this time, the only supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  ReservedInstanceLimitPrice({
    this.amount,
    this.currencyCode,
  });

  Map<String, dynamic> toJson() {
    final amount = this.amount;
    final currencyCode = this.currencyCode;
    return {
      if (amount != null) 'amount': amount,
      if (currencyCode != null) 'currencyCode': currencyCode.value,
    };
  }
}

/// The total value of the Convertible Reserved Instance.
class ReservedInstanceReservationValue {
  /// The total value of the Convertible Reserved Instance that you are
  /// exchanging.
  final ReservationValue? reservationValue;

  /// The ID of the Convertible Reserved Instance that you are exchanging.
  final String? reservedInstanceId;

  ReservedInstanceReservationValue({
    this.reservationValue,
    this.reservedInstanceId,
  });

  Map<String, dynamic> toJson() {
    final reservationValue = this.reservationValue;
    final reservedInstanceId = this.reservedInstanceId;
    return {
      if (reservationValue != null) 'reservationValue': reservationValue,
      if (reservedInstanceId != null) 'reservedInstanceId': reservedInstanceId,
    };
  }
}

enum ReservedInstanceState {
  paymentPending('payment-pending'),
  active('active'),
  paymentFailed('payment-failed'),
  retired('retired'),
  queued('queued'),
  queuedDeleted('queued-deleted'),
  ;

  final String value;

  const ReservedInstanceState(this.value);

  static ReservedInstanceState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ReservedInstanceState'));
}

/// Describes a Reserved Instance.
class ReservedInstances {
  /// The Availability Zone in which the Reserved Instance can be used.
  final String? availabilityZone;

  /// The currency of the Reserved Instance. It's specified using ISO 4217
  /// standard currency codes. At this time, the only supported currency is
  /// <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The duration of the Reserved Instance, in seconds.
  final int? duration;

  /// The time when the Reserved Instance expires.
  final DateTime? end;

  /// The purchase price of the Reserved Instance.
  final double? fixedPrice;

  /// The number of reservations purchased.
  final int? instanceCount;

  /// The tenancy of the instance.
  final Tenancy? instanceTenancy;

  /// The instance type on which the Reserved Instance can be used.
  final InstanceType? instanceType;

  /// The offering class of the Reserved Instance.
  final OfferingClassType? offeringClass;

  /// The Reserved Instance offering type.
  final OfferingTypeValues? offeringType;

  /// The Reserved Instance product platform description.
  final RIProductDescription? productDescription;

  /// The recurring charge tag assigned to the resource.
  final List<RecurringCharge>? recurringCharges;

  /// The ID of the Reserved Instance.
  final String? reservedInstancesId;

  /// The scope of the Reserved Instance.
  final Scope? scope;

  /// The date and time the Reserved Instance started.
  final DateTime? start;

  /// The state of the Reserved Instance purchase.
  final ReservedInstanceState? state;

  /// Any tags assigned to the resource.
  final List<Tag>? tags;

  /// The usage price of the Reserved Instance, per hour.
  final double? usagePrice;

  ReservedInstances({
    this.availabilityZone,
    this.currencyCode,
    this.duration,
    this.end,
    this.fixedPrice,
    this.instanceCount,
    this.instanceTenancy,
    this.instanceType,
    this.offeringClass,
    this.offeringType,
    this.productDescription,
    this.recurringCharges,
    this.reservedInstancesId,
    this.scope,
    this.start,
    this.state,
    this.tags,
    this.usagePrice,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final currencyCode = this.currencyCode;
    final duration = this.duration;
    final end = this.end;
    final fixedPrice = this.fixedPrice;
    final instanceCount = this.instanceCount;
    final instanceTenancy = this.instanceTenancy;
    final instanceType = this.instanceType;
    final offeringClass = this.offeringClass;
    final offeringType = this.offeringType;
    final productDescription = this.productDescription;
    final recurringCharges = this.recurringCharges;
    final reservedInstancesId = this.reservedInstancesId;
    final scope = this.scope;
    final start = this.start;
    final state = this.state;
    final tags = this.tags;
    final usagePrice = this.usagePrice;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (duration != null) 'duration': duration,
      if (end != null) 'end': iso8601ToJson(end),
      if (fixedPrice != null) 'fixedPrice': fixedPrice,
      if (instanceCount != null) 'instanceCount': instanceCount,
      if (instanceTenancy != null) 'instanceTenancy': instanceTenancy.value,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (offeringClass != null) 'offeringClass': offeringClass.value,
      if (offeringType != null) 'offeringType': offeringType.value,
      if (productDescription != null)
        'productDescription': productDescription.value,
      if (recurringCharges != null) 'recurringCharges': recurringCharges,
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
      if (scope != null) 'scope': scope.value,
      if (start != null) 'start': iso8601ToJson(start),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (usagePrice != null) 'usagePrice': usagePrice,
    };
  }
}

/// Describes the configuration settings for the modified Reserved Instances.
class ReservedInstancesConfiguration {
  /// The Availability Zone for the modified Reserved Instances.
  final String? availabilityZone;

  /// The number of modified Reserved Instances.
  /// <note>
  /// This is a required field for a request.
  /// </note>
  final int? instanceCount;

  /// The instance type for the modified Reserved Instances.
  final InstanceType? instanceType;

  /// The network platform of the modified Reserved Instances.
  final String? platform;

  /// Whether the Reserved Instance is applied to instances in a Region or
  /// instances in a specific Availability Zone.
  final Scope? scope;

  ReservedInstancesConfiguration({
    this.availabilityZone,
    this.instanceCount,
    this.instanceType,
    this.platform,
    this.scope,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final platform = this.platform;
    final scope = this.scope;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (instanceCount != null) 'instanceCount': instanceCount,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (platform != null) 'platform': platform,
      if (scope != null) 'scope': scope.value,
    };
  }
}

/// Describes the ID of a Reserved Instance.
class ReservedInstancesId {
  /// The ID of the Reserved Instance.
  final String? reservedInstancesId;

  ReservedInstancesId({
    this.reservedInstancesId,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesId = this.reservedInstancesId;
    return {
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
    };
  }
}

/// Describes a Reserved Instance listing.
class ReservedInstancesListing {
  /// A unique, case-sensitive key supplied by the client to ensure that the
  /// request is idempotent. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String? clientToken;

  /// The time the listing was created.
  final DateTime? createDate;

  /// The number of instances in this state.
  final List<InstanceCount>? instanceCounts;

  /// The price of the Reserved Instance listing.
  final List<PriceSchedule>? priceSchedules;

  /// The ID of the Reserved Instance.
  final String? reservedInstancesId;

  /// The ID of the Reserved Instance listing.
  final String? reservedInstancesListingId;

  /// The status of the Reserved Instance listing.
  final ListingStatus? status;

  /// The reason for the current status of the Reserved Instance listing. The
  /// response can be blank.
  final String? statusMessage;

  /// Any tags assigned to the resource.
  final List<Tag>? tags;

  /// The last modified timestamp of the listing.
  final DateTime? updateDate;

  ReservedInstancesListing({
    this.clientToken,
    this.createDate,
    this.instanceCounts,
    this.priceSchedules,
    this.reservedInstancesId,
    this.reservedInstancesListingId,
    this.status,
    this.statusMessage,
    this.tags,
    this.updateDate,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final createDate = this.createDate;
    final instanceCounts = this.instanceCounts;
    final priceSchedules = this.priceSchedules;
    final reservedInstancesId = this.reservedInstancesId;
    final reservedInstancesListingId = this.reservedInstancesListingId;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final tags = this.tags;
    final updateDate = this.updateDate;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (createDate != null) 'createDate': iso8601ToJson(createDate),
      if (instanceCounts != null) 'instanceCounts': instanceCounts,
      if (priceSchedules != null) 'priceSchedules': priceSchedules,
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
      if (reservedInstancesListingId != null)
        'reservedInstancesListingId': reservedInstancesListingId,
      if (status != null) 'status': status.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (tags != null) 'tagSet': tags,
      if (updateDate != null) 'updateDate': iso8601ToJson(updateDate),
    };
  }
}

/// Describes a Reserved Instance modification.
class ReservedInstancesModification {
  /// A unique, case-sensitive key supplied by the client to ensure that the
  /// request is idempotent. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String? clientToken;

  /// The time when the modification request was created.
  final DateTime? createDate;

  /// The time for the modification to become effective.
  final DateTime? effectiveDate;

  /// Contains target configurations along with their corresponding new Reserved
  /// Instance IDs.
  final List<ReservedInstancesModificationResult>? modificationResults;

  /// The IDs of one or more Reserved Instances.
  final List<ReservedInstancesId>? reservedInstancesIds;

  /// A unique ID for the Reserved Instance modification.
  final String? reservedInstancesModificationId;

  /// The status of the Reserved Instances modification request.
  final String? status;

  /// The reason for the status.
  final String? statusMessage;

  /// The time when the modification request was last updated.
  final DateTime? updateDate;

  ReservedInstancesModification({
    this.clientToken,
    this.createDate,
    this.effectiveDate,
    this.modificationResults,
    this.reservedInstancesIds,
    this.reservedInstancesModificationId,
    this.status,
    this.statusMessage,
    this.updateDate,
  });

  Map<String, dynamic> toJson() {
    final clientToken = this.clientToken;
    final createDate = this.createDate;
    final effectiveDate = this.effectiveDate;
    final modificationResults = this.modificationResults;
    final reservedInstancesIds = this.reservedInstancesIds;
    final reservedInstancesModificationId =
        this.reservedInstancesModificationId;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final updateDate = this.updateDate;
    return {
      if (clientToken != null) 'clientToken': clientToken,
      if (createDate != null) 'createDate': iso8601ToJson(createDate),
      if (effectiveDate != null) 'effectiveDate': iso8601ToJson(effectiveDate),
      if (modificationResults != null)
        'modificationResultSet': modificationResults,
      if (reservedInstancesIds != null)
        'reservedInstancesSet': reservedInstancesIds,
      if (reservedInstancesModificationId != null)
        'reservedInstancesModificationId': reservedInstancesModificationId,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (updateDate != null) 'updateDate': iso8601ToJson(updateDate),
    };
  }
}

/// Describes the modification request/s.
class ReservedInstancesModificationResult {
  /// The ID for the Reserved Instances that were created as part of the
  /// modification request. This field is only available when the modification is
  /// fulfilled.
  final String? reservedInstancesId;

  /// The target Reserved Instances configurations supplied as part of the
  /// modification request.
  final ReservedInstancesConfiguration? targetConfiguration;

  ReservedInstancesModificationResult({
    this.reservedInstancesId,
    this.targetConfiguration,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesId = this.reservedInstancesId;
    final targetConfiguration = this.targetConfiguration;
    return {
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
      if (targetConfiguration != null)
        'targetConfiguration': targetConfiguration,
    };
  }
}

/// Describes a Reserved Instance offering.
class ReservedInstancesOffering {
  /// The Availability Zone in which the Reserved Instance can be used.
  final String? availabilityZone;

  /// The currency of the Reserved Instance offering you are purchasing. It's
  /// specified using ISO 4217 standard currency codes. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues? currencyCode;

  /// The duration of the Reserved Instance, in seconds.
  final int? duration;

  /// The purchase price of the Reserved Instance.
  final double? fixedPrice;

  /// The tenancy of the instance.
  final Tenancy? instanceTenancy;

  /// The instance type on which the Reserved Instance can be used.
  final InstanceType? instanceType;

  /// Indicates whether the offering is available through the Reserved Instance
  /// Marketplace (resale) or Amazon Web Services. If it's a Reserved Instance
  /// Marketplace offering, this is <code>true</code>.
  final bool? marketplace;

  /// If <code>convertible</code> it can be exchanged for Reserved Instances of
  /// the same or higher monetary value, with different configurations. If
  /// <code>standard</code>, it is not possible to perform an exchange.
  final OfferingClassType? offeringClass;

  /// The Reserved Instance offering type.
  final OfferingTypeValues? offeringType;

  /// The pricing details of the Reserved Instance offering.
  final List<PricingDetail>? pricingDetails;

  /// The Reserved Instance product platform description.
  final RIProductDescription? productDescription;

  /// The recurring charge tag assigned to the resource.
  final List<RecurringCharge>? recurringCharges;

  /// The ID of the Reserved Instance offering. This is the offering ID used in
  /// <a>GetReservedInstancesExchangeQuote</a> to confirm that an exchange can be
  /// made.
  final String? reservedInstancesOfferingId;

  /// Whether the Reserved Instance is applied to instances in a Region or an
  /// Availability Zone.
  final Scope? scope;

  /// The usage price of the Reserved Instance, per hour.
  final double? usagePrice;

  ReservedInstancesOffering({
    this.availabilityZone,
    this.currencyCode,
    this.duration,
    this.fixedPrice,
    this.instanceTenancy,
    this.instanceType,
    this.marketplace,
    this.offeringClass,
    this.offeringType,
    this.pricingDetails,
    this.productDescription,
    this.recurringCharges,
    this.reservedInstancesOfferingId,
    this.scope,
    this.usagePrice,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final currencyCode = this.currencyCode;
    final duration = this.duration;
    final fixedPrice = this.fixedPrice;
    final instanceTenancy = this.instanceTenancy;
    final instanceType = this.instanceType;
    final marketplace = this.marketplace;
    final offeringClass = this.offeringClass;
    final offeringType = this.offeringType;
    final pricingDetails = this.pricingDetails;
    final productDescription = this.productDescription;
    final recurringCharges = this.recurringCharges;
    final reservedInstancesOfferingId = this.reservedInstancesOfferingId;
    final scope = this.scope;
    final usagePrice = this.usagePrice;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (currencyCode != null) 'currencyCode': currencyCode.value,
      if (duration != null) 'duration': duration,
      if (fixedPrice != null) 'fixedPrice': fixedPrice,
      if (instanceTenancy != null) 'instanceTenancy': instanceTenancy.value,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (marketplace != null) 'marketplace': marketplace,
      if (offeringClass != null) 'offeringClass': offeringClass.value,
      if (offeringType != null) 'offeringType': offeringType.value,
      if (pricingDetails != null) 'pricingDetailsSet': pricingDetails,
      if (productDescription != null)
        'productDescription': productDescription.value,
      if (recurringCharges != null) 'recurringCharges': recurringCharges,
      if (reservedInstancesOfferingId != null)
        'reservedInstancesOfferingId': reservedInstancesOfferingId,
      if (scope != null) 'scope': scope.value,
      if (usagePrice != null) 'usagePrice': usagePrice,
    };
  }
}

class ResetAddressAttributeResult {
  /// Information about the IP address.
  final AddressAttribute? address;

  ResetAddressAttributeResult({
    this.address,
  });

  Map<String, dynamic> toJson() {
    final address = this.address;
    return {
      if (address != null) 'address': address,
    };
  }
}

class ResetEbsDefaultKmsKeyIdResult {
  /// The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by
  /// default.
  final String? kmsKeyId;

  ResetEbsDefaultKmsKeyIdResult({
    this.kmsKeyId,
  });

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
    };
  }
}

enum ResetFpgaImageAttributeName {
  loadPermission('loadPermission'),
  ;

  final String value;

  const ResetFpgaImageAttributeName(this.value);

  static ResetFpgaImageAttributeName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ResetFpgaImageAttributeName'));
}

class ResetFpgaImageAttributeResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool? returnValue;

  ResetFpgaImageAttributeResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

enum ResetImageAttributeName {
  launchPermission('launchPermission'),
  ;

  final String value;

  const ResetImageAttributeName(this.value);

  static ResetImageAttributeName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ResetImageAttributeName'));
}

/// Describes a resource statement.
class ResourceStatement {
  /// The resource types.
  final List<String>? resourceTypes;

  /// The resources.
  final List<String>? resources;

  ResourceStatement({
    this.resourceTypes,
    this.resources,
  });

  Map<String, dynamic> toJson() {
    final resourceTypes = this.resourceTypes;
    final resources = this.resources;
    return {
      if (resourceTypes != null) 'resourceTypeSet': resourceTypes,
      if (resources != null) 'resourceSet': resources,
    };
  }
}

/// Describes a resource statement.
class ResourceStatementRequest {
  /// The resource types.
  final List<String>? resourceTypes;

  /// The resources.
  final List<String>? resources;

  ResourceStatementRequest({
    this.resourceTypes,
    this.resources,
  });

  Map<String, dynamic> toJson() {
    final resourceTypes = this.resourceTypes;
    final resources = this.resources;
    return {
      if (resourceTypes != null) 'ResourceType': resourceTypes,
      if (resources != null) 'Resource': resources,
    };
  }
}

enum ResourceType {
  capacityReservation('capacity-reservation'),
  clientVpnEndpoint('client-vpn-endpoint'),
  customerGateway('customer-gateway'),
  carrierGateway('carrier-gateway'),
  coipPool('coip-pool'),
  dedicatedHost('dedicated-host'),
  dhcpOptions('dhcp-options'),
  egressOnlyInternetGateway('egress-only-internet-gateway'),
  elasticIp('elastic-ip'),
  elasticGpu('elastic-gpu'),
  exportImageTask('export-image-task'),
  exportInstanceTask('export-instance-task'),
  fleet('fleet'),
  fpgaImage('fpga-image'),
  hostReservation('host-reservation'),
  image('image'),
  importImageTask('import-image-task'),
  importSnapshotTask('import-snapshot-task'),
  instance('instance'),
  instanceEventWindow('instance-event-window'),
  internetGateway('internet-gateway'),
  ipam('ipam'),
  ipamPool('ipam-pool'),
  ipamScope('ipam-scope'),
  ipv4poolEc2('ipv4pool-ec2'),
  ipv6poolEc2('ipv6pool-ec2'),
  keyPair('key-pair'),
  launchTemplate('launch-template'),
  localGateway('local-gateway'),
  localGatewayRouteTable('local-gateway-route-table'),
  localGatewayVirtualInterface('local-gateway-virtual-interface'),
  localGatewayVirtualInterfaceGroup('local-gateway-virtual-interface-group'),
  localGatewayRouteTableVpcAssociation(
      'local-gateway-route-table-vpc-association'),
  localGatewayRouteTableVirtualInterfaceGroupAssociation(
      'local-gateway-route-table-virtual-interface-group-association'),
  natgateway('natgateway'),
  networkAcl('network-acl'),
  networkInterface('network-interface'),
  networkInsightsAnalysis('network-insights-analysis'),
  networkInsightsPath('network-insights-path'),
  networkInsightsAccessScope('network-insights-access-scope'),
  networkInsightsAccessScopeAnalysis('network-insights-access-scope-analysis'),
  placementGroup('placement-group'),
  prefixList('prefix-list'),
  replaceRootVolumeTask('replace-root-volume-task'),
  reservedInstances('reserved-instances'),
  routeTable('route-table'),
  securityGroup('security-group'),
  securityGroupRule('security-group-rule'),
  snapshot('snapshot'),
  spotFleetRequest('spot-fleet-request'),
  spotInstancesRequest('spot-instances-request'),
  subnet('subnet'),
  subnetCidrReservation('subnet-cidr-reservation'),
  trafficMirrorFilter('traffic-mirror-filter'),
  trafficMirrorSession('traffic-mirror-session'),
  trafficMirrorTarget('traffic-mirror-target'),
  transitGateway('transit-gateway'),
  transitGatewayAttachment('transit-gateway-attachment'),
  transitGatewayConnectPeer('transit-gateway-connect-peer'),
  transitGatewayMulticastDomain('transit-gateway-multicast-domain'),
  transitGatewayPolicyTable('transit-gateway-policy-table'),
  transitGatewayRouteTable('transit-gateway-route-table'),
  transitGatewayRouteTableAnnouncement(
      'transit-gateway-route-table-announcement'),
  volume('volume'),
  vpc('vpc'),
  vpcEndpoint('vpc-endpoint'),
  vpcEndpointConnection('vpc-endpoint-connection'),
  vpcEndpointService('vpc-endpoint-service'),
  vpcEndpointServicePermission('vpc-endpoint-service-permission'),
  vpcPeeringConnection('vpc-peering-connection'),
  vpnConnection('vpn-connection'),
  vpnGateway('vpn-gateway'),
  vpcFlowLog('vpc-flow-log'),
  capacityReservationFleet('capacity-reservation-fleet'),
  trafficMirrorFilterRule('traffic-mirror-filter-rule'),
  vpcEndpointConnectionDeviceType('vpc-endpoint-connection-device-type'),
  verifiedAccessInstance('verified-access-instance'),
  verifiedAccessGroup('verified-access-group'),
  verifiedAccessEndpoint('verified-access-endpoint'),
  verifiedAccessPolicy('verified-access-policy'),
  verifiedAccessTrustProvider('verified-access-trust-provider'),
  vpnConnectionDeviceType('vpn-connection-device-type'),
  vpcBlockPublicAccessExclusion('vpc-block-public-access-exclusion'),
  ipamResourceDiscovery('ipam-resource-discovery'),
  ipamResourceDiscoveryAssociation('ipam-resource-discovery-association'),
  instanceConnectEndpoint('instance-connect-endpoint'),
  ;

  final String value;

  const ResourceType(this.value);

  static ResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ResourceType'));
}

/// Describes the error that's returned when you cannot delete a launch template
/// version.
class ResponseError {
  /// The error code.
  final LaunchTemplateErrorCode? code;

  /// The error message, if applicable.
  final String? message;

  ResponseError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

/// The information for a launch template.
class ResponseLaunchTemplateData {
  /// The block device mappings.
  final List<LaunchTemplateBlockDeviceMapping>? blockDeviceMappings;

  /// Information about the Capacity Reservation targeting option.
  final LaunchTemplateCapacityReservationSpecificationResponse?
      capacityReservationSpecification;

  /// The CPU options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing
  /// CPU options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateCpuOptions? cpuOptions;

  /// The credit option for CPU usage of the instance.
  final CreditSpecification? creditSpecification;

  /// Indicates whether the instance is enabled for stop protection. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop
  /// protection</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final bool? disableApiStop;

  /// If set to <code>true</code>, indicates that the instance cannot be
  /// terminated using the Amazon EC2 console, command line tool, or API.
  final bool? disableApiTermination;

  /// Indicates whether the instance is optimized for Amazon EBS I/O.
  final bool? ebsOptimized;

  /// Deprecated.
  /// <note>
  /// Amazon Elastic Graphics reached end of life on January 8, 2024. For
  /// workloads that require graphics acceleration, we recommend that you use
  /// Amazon EC2 G4ad, G4dn, or G5 instances.
  /// </note>
  final List<ElasticGpuSpecificationResponse>? elasticGpuSpecifications;

  /// An elastic inference accelerator to associate with the instance. Elastic
  /// inference accelerators are a resource you can attach to your Amazon EC2
  /// instances to accelerate your Deep Learning (DL) inference workloads.
  ///
  /// You cannot specify accelerators from different generations in the same
  /// request.
  /// <note>
  /// Starting April 15, 2023, Amazon Web Services will not onboard new customers
  /// to Amazon Elastic Inference (EI), and will help current customers migrate
  /// their workloads to options that offer better price and performance. After
  /// April 15, 2023, new customers will not be able to launch instances with
  /// Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2.
  /// However, customers who have used Amazon EI at least once during the past
  /// 30-day period are considered current customers and will be able to continue
  /// using the service.
  /// </note>
  final List<LaunchTemplateElasticInferenceAcceleratorResponse>?
      elasticInferenceAccelerators;

  /// Indicates whether the instance is enabled for Amazon Web Services Nitro
  /// Enclaves.
  final LaunchTemplateEnclaveOptions? enclaveOptions;

  /// Indicates whether an instance is configured for hibernation. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// your instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateHibernationOptions? hibernationOptions;

  /// The IAM instance profile.
  final LaunchTemplateIamInstanceProfileSpecification? iamInstanceProfile;

  /// The ID of the AMI or a Systems Manager parameter. The Systems Manager
  /// parameter will resolve to the ID of the AMI at instance launch.
  ///
  /// The value depends on what you specified in the request. The possible values
  /// are:
  ///
  /// <ul>
  /// <li>
  /// If an AMI ID was specified in the request, then this is the AMI ID.
  /// </li>
  /// <li>
  /// If a Systems Manager parameter was specified in the request, and
  /// <code>ResolveAlias</code> was configured as <code>true</code>, then this is
  /// the AMI ID that the parameter is mapped to in the Parameter Store.
  /// </li>
  /// <li>
  /// If a Systems Manager parameter was specified in the request, and
  /// <code>ResolveAlias</code> was configured as <code>false</code>, then this is
  /// the parameter value.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use
  /// a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  final String? imageId;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  final ShutdownBehavior? instanceInitiatedShutdownBehavior;

  /// The market (purchasing) option for the instances.
  final LaunchTemplateInstanceMarketOptions? instanceMarketOptions;

  /// The attributes for the instance types. When you specify instance attributes,
  /// Amazon EC2 will identify instance types with these attributes.
  ///
  /// If you specify <code>InstanceRequirements</code>, you can't specify
  /// <code>InstanceTypes</code>.
  final InstanceRequirements? instanceRequirements;

  /// The instance type.
  final InstanceType? instanceType;

  /// The ID of the kernel, if applicable.
  final String? kernelId;

  /// The name of the key pair.
  final String? keyName;

  /// The license configurations.
  final List<LaunchTemplateLicenseConfiguration>? licenseSpecifications;

  /// The maintenance options for your instance.
  final LaunchTemplateInstanceMaintenanceOptions? maintenanceOptions;

  /// The metadata options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// metadata and user data</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  final LaunchTemplateInstanceMetadataOptions? metadataOptions;

  /// The monitoring for the instance.
  final LaunchTemplatesMonitoring? monitoring;

  /// The network interfaces.
  final List<LaunchTemplateInstanceNetworkInterfaceSpecification>?
      networkInterfaces;

  /// The placement of the instance.
  final LaunchTemplatePlacement? placement;

  /// The options for the instance hostname.
  final LaunchTemplatePrivateDnsNameOptions? privateDnsNameOptions;

  /// The ID of the RAM disk, if applicable.
  final String? ramDiskId;

  /// The security group IDs.
  final List<String>? securityGroupIds;

  /// The security group names.
  final List<String>? securityGroups;

  /// The tags that are applied to the resources that are created during instance
  /// launch.
  final List<LaunchTemplateTagSpecification>? tagSpecifications;

  /// The user data for the instance.
  final String? userData;

  ResponseLaunchTemplateData({
    this.blockDeviceMappings,
    this.capacityReservationSpecification,
    this.cpuOptions,
    this.creditSpecification,
    this.disableApiStop,
    this.disableApiTermination,
    this.ebsOptimized,
    this.elasticGpuSpecifications,
    this.elasticInferenceAccelerators,
    this.enclaveOptions,
    this.hibernationOptions,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceInitiatedShutdownBehavior,
    this.instanceMarketOptions,
    this.instanceRequirements,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.licenseSpecifications,
    this.maintenanceOptions,
    this.metadataOptions,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.privateDnsNameOptions,
    this.ramDiskId,
    this.securityGroupIds,
    this.securityGroups,
    this.tagSpecifications,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final blockDeviceMappings = this.blockDeviceMappings;
    final capacityReservationSpecification =
        this.capacityReservationSpecification;
    final cpuOptions = this.cpuOptions;
    final creditSpecification = this.creditSpecification;
    final disableApiStop = this.disableApiStop;
    final disableApiTermination = this.disableApiTermination;
    final ebsOptimized = this.ebsOptimized;
    final elasticGpuSpecifications = this.elasticGpuSpecifications;
    final elasticInferenceAccelerators = this.elasticInferenceAccelerators;
    final enclaveOptions = this.enclaveOptions;
    final hibernationOptions = this.hibernationOptions;
    final iamInstanceProfile = this.iamInstanceProfile;
    final imageId = this.imageId;
    final instanceInitiatedShutdownBehavior =
        this.instanceInitiatedShutdownBehavior;
    final instanceMarketOptions = this.instanceMarketOptions;
    final instanceRequirements = this.instanceRequirements;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final licenseSpecifications = this.licenseSpecifications;
    final maintenanceOptions = this.maintenanceOptions;
    final metadataOptions = this.metadataOptions;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final placement = this.placement;
    final privateDnsNameOptions = this.privateDnsNameOptions;
    final ramDiskId = this.ramDiskId;
    final securityGroupIds = this.securityGroupIds;
    final securityGroups = this.securityGroups;
    final tagSpecifications = this.tagSpecifications;
    final userData = this.userData;
    return {
      if (blockDeviceMappings != null)
        'blockDeviceMappingSet': blockDeviceMappings,
      if (capacityReservationSpecification != null)
        'capacityReservationSpecification': capacityReservationSpecification,
      if (cpuOptions != null) 'cpuOptions': cpuOptions,
      if (creditSpecification != null)
        'creditSpecification': creditSpecification,
      if (disableApiStop != null) 'disableApiStop': disableApiStop,
      if (disableApiTermination != null)
        'disableApiTermination': disableApiTermination,
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (elasticGpuSpecifications != null)
        'elasticGpuSpecificationSet': elasticGpuSpecifications,
      if (elasticInferenceAccelerators != null)
        'elasticInferenceAcceleratorSet': elasticInferenceAccelerators,
      if (enclaveOptions != null) 'enclaveOptions': enclaveOptions,
      if (hibernationOptions != null) 'hibernationOptions': hibernationOptions,
      if (iamInstanceProfile != null) 'iamInstanceProfile': iamInstanceProfile,
      if (imageId != null) 'imageId': imageId,
      if (instanceInitiatedShutdownBehavior != null)
        'instanceInitiatedShutdownBehavior':
            instanceInitiatedShutdownBehavior.value,
      if (instanceMarketOptions != null)
        'instanceMarketOptions': instanceMarketOptions,
      if (instanceRequirements != null)
        'instanceRequirements': instanceRequirements,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (kernelId != null) 'kernelId': kernelId,
      if (keyName != null) 'keyName': keyName,
      if (licenseSpecifications != null) 'licenseSet': licenseSpecifications,
      if (maintenanceOptions != null) 'maintenanceOptions': maintenanceOptions,
      if (metadataOptions != null) 'metadataOptions': metadataOptions,
      if (monitoring != null) 'monitoring': monitoring,
      if (networkInterfaces != null) 'networkInterfaceSet': networkInterfaces,
      if (placement != null) 'placement': placement,
      if (privateDnsNameOptions != null)
        'privateDnsNameOptions': privateDnsNameOptions,
      if (ramDiskId != null) 'ramDiskId': ramDiskId,
      if (securityGroupIds != null) 'securityGroupIdSet': securityGroupIds,
      if (securityGroups != null) 'securityGroupSet': securityGroups,
      if (tagSpecifications != null) 'tagSpecificationSet': tagSpecifications,
      if (userData != null) 'userData': userData,
    };
  }
}

class RestoreAddressToClassicResult {
  /// The Elastic IP address.
  final String? publicIp;

  /// The move status for the IP address.
  final Status? status;

  RestoreAddressToClassicResult({
    this.publicIp,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final publicIp = this.publicIp;
    final status = this.status;
    return {
      if (publicIp != null) 'publicIp': publicIp,
      if (status != null) 'status': status.value,
    };
  }
}

class RestoreImageFromRecycleBinResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  RestoreImageFromRecycleBinResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class RestoreManagedPrefixListVersionResult {
  /// Information about the prefix list.
  final ManagedPrefixList? prefixList;

  RestoreManagedPrefixListVersionResult({
    this.prefixList,
  });

  Map<String, dynamic> toJson() {
    final prefixList = this.prefixList;
    return {
      if (prefixList != null) 'prefixList': prefixList,
    };
  }
}

class RestoreSnapshotFromRecycleBinResult {
  /// The description for the snapshot.
  final String? description;

  /// Indicates whether the snapshot is encrypted.
  final bool? encrypted;

  /// The ARN of the Outpost on which the snapshot is stored. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html">Amazon
  /// EBS local snapshots on Outposts</a> in the <i>Amazon EBS User Guide</i>.
  final String? outpostArn;

  /// The ID of the Amazon Web Services account that owns the EBS snapshot.
  final String? ownerId;

  /// The progress of the snapshot, as a percentage.
  final String? progress;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// Reserved for future use.
  final SSEType? sseType;

  /// The time stamp when the snapshot was initiated.
  final DateTime? startTime;

  /// The state of the snapshot.
  final SnapshotState? state;

  /// The ID of the volume that was used to create the snapshot.
  final String? volumeId;

  /// The size of the volume, in GiB.
  final int? volumeSize;

  RestoreSnapshotFromRecycleBinResult({
    this.description,
    this.encrypted,
    this.outpostArn,
    this.ownerId,
    this.progress,
    this.snapshotId,
    this.sseType,
    this.startTime,
    this.state,
    this.volumeId,
    this.volumeSize,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final encrypted = this.encrypted;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final progress = this.progress;
    final snapshotId = this.snapshotId;
    final sseType = this.sseType;
    final startTime = this.startTime;
    final state = this.state;
    final volumeId = this.volumeId;
    final volumeSize = this.volumeSize;
    return {
      if (description != null) 'description': description,
      if (encrypted != null) 'encrypted': encrypted,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (progress != null) 'progress': progress,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (sseType != null) 'sseType': sseType.value,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
      if (state != null) 'status': state.value,
      if (volumeId != null) 'volumeId': volumeId,
      if (volumeSize != null) 'volumeSize': volumeSize,
    };
  }
}

class RestoreSnapshotTierResult {
  /// Indicates whether the snapshot is permanently restored. <code>true</code>
  /// indicates a permanent restore. <code>false</code> indicates a temporary
  /// restore.
  final bool? isPermanentRestore;

  /// For temporary restores only. The number of days for which the archived
  /// snapshot is temporarily restored.
  final int? restoreDuration;

  /// The date and time when the snapshot restore process started.
  final DateTime? restoreStartTime;

  /// The ID of the snapshot.
  final String? snapshotId;

  RestoreSnapshotTierResult({
    this.isPermanentRestore,
    this.restoreDuration,
    this.restoreStartTime,
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final isPermanentRestore = this.isPermanentRestore;
    final restoreDuration = this.restoreDuration;
    final restoreStartTime = this.restoreStartTime;
    final snapshotId = this.snapshotId;
    return {
      if (isPermanentRestore != null) 'isPermanentRestore': isPermanentRestore,
      if (restoreDuration != null) 'restoreDuration': restoreDuration,
      if (restoreStartTime != null)
        'restoreStartTime': iso8601ToJson(restoreStartTime),
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

class RevokeClientVpnIngressResult {
  /// The current state of the authorization rule.
  final ClientVpnAuthorizationRuleStatus? status;

  RevokeClientVpnIngressResult({
    this.status,
  });

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'status': status,
    };
  }
}

class RevokeSecurityGroupEgressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  /// The outbound rules that were unknown to the service. In some cases,
  /// <code>unknownIpPermissionSet</code> might be in a different format from the
  /// request parameter.
  final List<IpPermission>? unknownIpPermissions;

  RevokeSecurityGroupEgressResult({
    this.returnValue,
    this.unknownIpPermissions,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    final unknownIpPermissions = this.unknownIpPermissions;
    return {
      if (returnValue != null) 'return': returnValue,
      if (unknownIpPermissions != null)
        'unknownIpPermissionSet': unknownIpPermissions,
    };
  }
}

class RevokeSecurityGroupIngressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  /// The inbound rules that were unknown to the service. In some cases,
  /// <code>unknownIpPermissionSet</code> might be in a different format from the
  /// request parameter.
  final List<IpPermission>? unknownIpPermissions;

  RevokeSecurityGroupIngressResult({
    this.returnValue,
    this.unknownIpPermissions,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    final unknownIpPermissions = this.unknownIpPermissions;
    return {
      if (returnValue != null) 'return': returnValue,
      if (unknownIpPermissions != null)
        'unknownIpPermissionSet': unknownIpPermissions,
    };
  }
}

enum RootDeviceType {
  ebs('ebs'),
  instanceStore('instance-store'),
  ;

  final String value;

  const RootDeviceType(this.value);

  static RootDeviceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum RootDeviceType'));
}

/// Describes a route in a route table.
class Route {
  /// The ID of the carrier gateway.
  final String? carrierGatewayId;

  /// The Amazon Resource Name (ARN) of the core network.
  final String? coreNetworkArn;

  /// The IPv4 CIDR block used for the destination match.
  final String? destinationCidrBlock;

  /// The IPv6 CIDR block used for the destination match.
  final String? destinationIpv6CidrBlock;

  /// The prefix of the Amazon Web Service.
  final String? destinationPrefixListId;

  /// The ID of the egress-only internet gateway.
  final String? egressOnlyInternetGatewayId;

  /// The ID of a gateway attached to your VPC.
  final String? gatewayId;

  /// The ID of a NAT instance in your VPC.
  final String? instanceId;

  /// The ID of Amazon Web Services account that owns the instance.
  final String? instanceOwnerId;

  /// The ID of the local gateway.
  final String? localGatewayId;

  /// The ID of a NAT gateway.
  final String? natGatewayId;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// Describes how the route was created.
  ///
  /// <ul>
  /// <li>
  /// <code>CreateRouteTable</code> - The route was automatically created when the
  /// route table was created.
  /// </li>
  /// <li>
  /// <code>CreateRoute</code> - The route was manually added to the route table.
  /// </li>
  /// <li>
  /// <code>EnableVgwRoutePropagation</code> - The route was propagated by route
  /// propagation.
  /// </li>
  /// </ul>
  final RouteOrigin? origin;

  /// The state of the route. The <code>blackhole</code> state indicates that the
  /// route's target isn't available (for example, the specified gateway isn't
  /// attached to the VPC, or the specified NAT instance has been terminated).
  final RouteState? state;

  /// The ID of a transit gateway.
  final String? transitGatewayId;

  /// The ID of a VPC peering connection.
  final String? vpcPeeringConnectionId;

  Route({
    this.carrierGatewayId,
    this.coreNetworkArn,
    this.destinationCidrBlock,
    this.destinationIpv6CidrBlock,
    this.destinationPrefixListId,
    this.egressOnlyInternetGatewayId,
    this.gatewayId,
    this.instanceId,
    this.instanceOwnerId,
    this.localGatewayId,
    this.natGatewayId,
    this.networkInterfaceId,
    this.origin,
    this.state,
    this.transitGatewayId,
    this.vpcPeeringConnectionId,
  });

  Map<String, dynamic> toJson() {
    final carrierGatewayId = this.carrierGatewayId;
    final coreNetworkArn = this.coreNetworkArn;
    final destinationCidrBlock = this.destinationCidrBlock;
    final destinationIpv6CidrBlock = this.destinationIpv6CidrBlock;
    final destinationPrefixListId = this.destinationPrefixListId;
    final egressOnlyInternetGatewayId = this.egressOnlyInternetGatewayId;
    final gatewayId = this.gatewayId;
    final instanceId = this.instanceId;
    final instanceOwnerId = this.instanceOwnerId;
    final localGatewayId = this.localGatewayId;
    final natGatewayId = this.natGatewayId;
    final networkInterfaceId = this.networkInterfaceId;
    final origin = this.origin;
    final state = this.state;
    final transitGatewayId = this.transitGatewayId;
    final vpcPeeringConnectionId = this.vpcPeeringConnectionId;
    return {
      if (carrierGatewayId != null) 'carrierGatewayId': carrierGatewayId,
      if (coreNetworkArn != null) 'coreNetworkArn': coreNetworkArn,
      if (destinationCidrBlock != null)
        'destinationCidrBlock': destinationCidrBlock,
      if (destinationIpv6CidrBlock != null)
        'destinationIpv6CidrBlock': destinationIpv6CidrBlock,
      if (destinationPrefixListId != null)
        'destinationPrefixListId': destinationPrefixListId,
      if (egressOnlyInternetGatewayId != null)
        'egressOnlyInternetGatewayId': egressOnlyInternetGatewayId,
      if (gatewayId != null) 'gatewayId': gatewayId,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceOwnerId != null) 'instanceOwnerId': instanceOwnerId,
      if (localGatewayId != null) 'localGatewayId': localGatewayId,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (origin != null) 'origin': origin.value,
      if (state != null) 'state': state.value,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (vpcPeeringConnectionId != null)
        'vpcPeeringConnectionId': vpcPeeringConnectionId,
    };
  }
}

enum RouteOrigin {
  createRouteTable('CreateRouteTable'),
  createRoute('CreateRoute'),
  enableVgwRoutePropagation('EnableVgwRoutePropagation'),
  ;

  final String value;

  const RouteOrigin(this.value);

  static RouteOrigin fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum RouteOrigin'));
}

enum RouteState {
  active('active'),
  blackhole('blackhole'),
  ;

  final String value;

  const RouteState(this.value);

  static RouteState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum RouteState'));
}

/// Describes a route table.
class RouteTable {
  /// The associations between the route table and one or more subnets or a
  /// gateway.
  final List<RouteTableAssociation>? associations;

  /// The ID of the Amazon Web Services account that owns the route table.
  final String? ownerId;

  /// Any virtual private gateway (VGW) propagating routes.
  final List<PropagatingVgw>? propagatingVgws;

  /// The ID of the route table.
  final String? routeTableId;

  /// The routes in the route table.
  final List<Route>? routes;

  /// Any tags assigned to the route table.
  final List<Tag>? tags;

  /// The ID of the VPC.
  final String? vpcId;

  RouteTable({
    this.associations,
    this.ownerId,
    this.propagatingVgws,
    this.routeTableId,
    this.routes,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final associations = this.associations;
    final ownerId = this.ownerId;
    final propagatingVgws = this.propagatingVgws;
    final routeTableId = this.routeTableId;
    final routes = this.routes;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (associations != null) 'associationSet': associations,
      if (ownerId != null) 'ownerId': ownerId,
      if (propagatingVgws != null) 'propagatingVgwSet': propagatingVgws,
      if (routeTableId != null) 'routeTableId': routeTableId,
      if (routes != null) 'routeSet': routes,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes an association between a route table and a subnet or gateway.
class RouteTableAssociation {
  /// The state of the association.
  final RouteTableAssociationState? associationState;

  /// The ID of the internet gateway or virtual private gateway.
  final String? gatewayId;

  /// Indicates whether this is the main route table.
  final bool? main;

  /// The ID of the association.
  final String? routeTableAssociationId;

  /// The ID of the route table.
  final String? routeTableId;

  /// The ID of the subnet. A subnet ID is not returned for an implicit
  /// association.
  final String? subnetId;

  RouteTableAssociation({
    this.associationState,
    this.gatewayId,
    this.main,
    this.routeTableAssociationId,
    this.routeTableId,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final associationState = this.associationState;
    final gatewayId = this.gatewayId;
    final main = this.main;
    final routeTableAssociationId = this.routeTableAssociationId;
    final routeTableId = this.routeTableId;
    final subnetId = this.subnetId;
    return {
      if (associationState != null) 'associationState': associationState,
      if (gatewayId != null) 'gatewayId': gatewayId,
      if (main != null) 'main': main,
      if (routeTableAssociationId != null)
        'routeTableAssociationId': routeTableAssociationId,
      if (routeTableId != null) 'routeTableId': routeTableId,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

/// Describes the state of an association between a route table and a subnet or
/// gateway.
class RouteTableAssociationState {
  /// The state of the association.
  final RouteTableAssociationStateCode? state;

  /// The status message, if applicable.
  final String? statusMessage;

  RouteTableAssociationState({
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum RouteTableAssociationStateCode {
  associating('associating'),
  associated('associated'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  failed('failed'),
  ;

  final String value;

  const RouteTableAssociationStateCode(this.value);

  static RouteTableAssociationStateCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RouteTableAssociationStateCode'));
}

enum RuleAction {
  allow('allow'),
  deny('deny'),
  ;

  final String value;

  const RuleAction(this.value);

  static RuleAction fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum RuleAction'));
}

/// Describes the rule options for a stateful rule group.
class RuleGroupRuleOptionsPair {
  /// The ARN of the rule group.
  final String? ruleGroupArn;

  /// The rule options.
  final List<RuleOption>? ruleOptions;

  RuleGroupRuleOptionsPair({
    this.ruleGroupArn,
    this.ruleOptions,
  });

  Map<String, dynamic> toJson() {
    final ruleGroupArn = this.ruleGroupArn;
    final ruleOptions = this.ruleOptions;
    return {
      if (ruleGroupArn != null) 'ruleGroupArn': ruleGroupArn,
      if (ruleOptions != null) 'ruleOptionSet': ruleOptions,
    };
  }
}

/// Describes the type of a stateful rule group.
class RuleGroupTypePair {
  /// The ARN of the rule group.
  final String? ruleGroupArn;

  /// The rule group type. The possible values are <code>Domain List</code> and
  /// <code>Suricata</code>.
  final String? ruleGroupType;

  RuleGroupTypePair({
    this.ruleGroupArn,
    this.ruleGroupType,
  });

  Map<String, dynamic> toJson() {
    final ruleGroupArn = this.ruleGroupArn;
    final ruleGroupType = this.ruleGroupType;
    return {
      if (ruleGroupArn != null) 'ruleGroupArn': ruleGroupArn,
      if (ruleGroupType != null) 'ruleGroupType': ruleGroupType,
    };
  }
}

/// Describes additional settings for a stateful rule.
class RuleOption {
  /// The Suricata keyword.
  final String? keyword;

  /// The settings for the keyword.
  final List<String>? settings;

  RuleOption({
    this.keyword,
    this.settings,
  });

  Map<String, dynamic> toJson() {
    final keyword = this.keyword;
    final settings = this.settings;
    return {
      if (keyword != null) 'keyword': keyword,
      if (settings != null) 'settingSet': settings,
    };
  }
}

/// Describes the monitoring of an instance.
class RunInstancesMonitoringEnabled {
  /// Indicates whether detailed monitoring is enabled. Otherwise, basic
  /// monitoring is enabled.
  final bool enabled;

  RunInstancesMonitoringEnabled({
    required this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      'enabled': enabled,
    };
  }
}

/// Contains the output of RunScheduledInstances.
class RunScheduledInstancesResult {
  /// The IDs of the newly launched instances.
  final List<String>? instanceIdSet;

  RunScheduledInstancesResult({
    this.instanceIdSet,
  });

  Map<String, dynamic> toJson() {
    final instanceIdSet = this.instanceIdSet;
    return {
      if (instanceIdSet != null) 'instanceIdSet': instanceIdSet,
    };
  }
}

/// The tags to apply to the AMI object that will be stored in the Amazon S3
/// bucket. For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html">Categorizing
/// your storage using tags</a> in the <i>Amazon Simple Storage Service User
/// Guide</i>.
class S3ObjectTag {
  /// The key of the tag.
  ///
  /// Constraints: Tag keys are case-sensitive and can be up to 128 Unicode
  /// characters in length. May not begin with <code>aws</code>:.
  final String? key;

  /// The value of the tag.
  ///
  /// Constraints: Tag values are case-sensitive and can be up to 256 Unicode
  /// characters in length.
  final String? value;

  S3ObjectTag({
    this.key,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

/// Describes the storage parameters for Amazon S3 and Amazon S3 buckets for an
/// instance store-backed AMI.
class S3Storage {
  /// The access key ID of the owner of the bucket. Before you specify a value for
  /// your access key ID, review and follow the guidance in <a
  /// href="https://docs.aws.amazon.com/accounts/latest/reference/best-practices.html">Best
  /// Practices for Amazon Web Services accounts</a> in the <i>Account
  /// ManagementReference Guide</i>.
  final String? awsAccessKeyId;

  /// The bucket in which to store the AMI. You can specify a bucket that you
  /// already own or a new bucket that Amazon EC2 creates on your behalf. If you
  /// specify a bucket that belongs to someone else, Amazon EC2 returns an error.
  final String? bucket;

  /// The beginning of the file name of the AMI.
  final String? prefix;

  /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items
  /// into Amazon S3 on your behalf.
  final Uint8List? uploadPolicy;

  /// The signature of the JSON document.
  final String? uploadPolicySignature;

  S3Storage({
    this.awsAccessKeyId,
    this.bucket,
    this.prefix,
    this.uploadPolicy,
    this.uploadPolicySignature,
  });

  Map<String, dynamic> toJson() {
    final awsAccessKeyId = this.awsAccessKeyId;
    final bucket = this.bucket;
    final prefix = this.prefix;
    final uploadPolicy = this.uploadPolicy;
    final uploadPolicySignature = this.uploadPolicySignature;
    return {
      if (awsAccessKeyId != null) 'AWSAccessKeyId': awsAccessKeyId,
      if (bucket != null) 'bucket': bucket,
      if (prefix != null) 'prefix': prefix,
      if (uploadPolicy != null) 'uploadPolicy': base64Encode(uploadPolicy),
      if (uploadPolicySignature != null)
        'uploadPolicySignature': uploadPolicySignature,
    };
  }
}

enum SSEType {
  sseEbs('sse-ebs'),
  sseKms('sse-kms'),
  none('none'),
  ;

  final String value;

  const SSEType(this.value);

  static SSEType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum SSEType'));
}

/// Describes a Scheduled Instance.
class ScheduledInstance {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The date when the Scheduled Instance was purchased.
  final DateTime? createDate;

  /// The hourly price for a single instance.
  final String? hourlyPrice;

  /// The number of instances.
  final int? instanceCount;

  /// The instance type.
  final String? instanceType;

  /// The network platform.
  final String? networkPlatform;

  /// The time for the next schedule to start.
  final DateTime? nextSlotStartTime;

  /// The platform (<code>Linux/UNIX</code> or <code>Windows</code>).
  final String? platform;

  /// The time that the previous schedule ended or will end.
  final DateTime? previousSlotEndTime;

  /// The schedule recurrence.
  final ScheduledInstanceRecurrence? recurrence;

  /// The Scheduled Instance ID.
  final String? scheduledInstanceId;

  /// The number of hours in the schedule.
  final int? slotDurationInHours;

  /// The end date for the Scheduled Instance.
  final DateTime? termEndDate;

  /// The start date for the Scheduled Instance.
  final DateTime? termStartDate;

  /// The total number of hours for a single instance for the entire term.
  final int? totalScheduledInstanceHours;

  ScheduledInstance({
    this.availabilityZone,
    this.createDate,
    this.hourlyPrice,
    this.instanceCount,
    this.instanceType,
    this.networkPlatform,
    this.nextSlotStartTime,
    this.platform,
    this.previousSlotEndTime,
    this.recurrence,
    this.scheduledInstanceId,
    this.slotDurationInHours,
    this.termEndDate,
    this.termStartDate,
    this.totalScheduledInstanceHours,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final createDate = this.createDate;
    final hourlyPrice = this.hourlyPrice;
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final networkPlatform = this.networkPlatform;
    final nextSlotStartTime = this.nextSlotStartTime;
    final platform = this.platform;
    final previousSlotEndTime = this.previousSlotEndTime;
    final recurrence = this.recurrence;
    final scheduledInstanceId = this.scheduledInstanceId;
    final slotDurationInHours = this.slotDurationInHours;
    final termEndDate = this.termEndDate;
    final termStartDate = this.termStartDate;
    final totalScheduledInstanceHours = this.totalScheduledInstanceHours;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (createDate != null) 'createDate': iso8601ToJson(createDate),
      if (hourlyPrice != null) 'hourlyPrice': hourlyPrice,
      if (instanceCount != null) 'instanceCount': instanceCount,
      if (instanceType != null) 'instanceType': instanceType,
      if (networkPlatform != null) 'networkPlatform': networkPlatform,
      if (nextSlotStartTime != null)
        'nextSlotStartTime': iso8601ToJson(nextSlotStartTime),
      if (platform != null) 'platform': platform,
      if (previousSlotEndTime != null)
        'previousSlotEndTime': iso8601ToJson(previousSlotEndTime),
      if (recurrence != null) 'recurrence': recurrence,
      if (scheduledInstanceId != null)
        'scheduledInstanceId': scheduledInstanceId,
      if (slotDurationInHours != null)
        'slotDurationInHours': slotDurationInHours,
      if (termEndDate != null) 'termEndDate': iso8601ToJson(termEndDate),
      if (termStartDate != null) 'termStartDate': iso8601ToJson(termStartDate),
      if (totalScheduledInstanceHours != null)
        'totalScheduledInstanceHours': totalScheduledInstanceHours,
    };
  }
}

/// Describes a schedule that is available for your Scheduled Instances.
class ScheduledInstanceAvailability {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The number of available instances.
  final int? availableInstanceCount;

  /// The time period for the first schedule to start.
  final DateTime? firstSlotStartTime;

  /// The hourly price for a single instance.
  final String? hourlyPrice;

  /// The instance type. You can specify one of the C3, C4, M4, or R3 instance
  /// types.
  final String? instanceType;

  /// The maximum term. The only possible value is 365 days.
  final int? maxTermDurationInDays;

  /// The minimum term. The only possible value is 365 days.
  final int? minTermDurationInDays;

  /// The network platform.
  final String? networkPlatform;

  /// The platform (<code>Linux/UNIX</code> or <code>Windows</code>).
  final String? platform;

  /// The purchase token. This token expires in two hours.
  final String? purchaseToken;

  /// The schedule recurrence.
  final ScheduledInstanceRecurrence? recurrence;

  /// The number of hours in the schedule.
  final int? slotDurationInHours;

  /// The total number of hours for a single instance for the entire term.
  final int? totalScheduledInstanceHours;

  ScheduledInstanceAvailability({
    this.availabilityZone,
    this.availableInstanceCount,
    this.firstSlotStartTime,
    this.hourlyPrice,
    this.instanceType,
    this.maxTermDurationInDays,
    this.minTermDurationInDays,
    this.networkPlatform,
    this.platform,
    this.purchaseToken,
    this.recurrence,
    this.slotDurationInHours,
    this.totalScheduledInstanceHours,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final availableInstanceCount = this.availableInstanceCount;
    final firstSlotStartTime = this.firstSlotStartTime;
    final hourlyPrice = this.hourlyPrice;
    final instanceType = this.instanceType;
    final maxTermDurationInDays = this.maxTermDurationInDays;
    final minTermDurationInDays = this.minTermDurationInDays;
    final networkPlatform = this.networkPlatform;
    final platform = this.platform;
    final purchaseToken = this.purchaseToken;
    final recurrence = this.recurrence;
    final slotDurationInHours = this.slotDurationInHours;
    final totalScheduledInstanceHours = this.totalScheduledInstanceHours;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (availableInstanceCount != null)
        'availableInstanceCount': availableInstanceCount,
      if (firstSlotStartTime != null)
        'firstSlotStartTime': iso8601ToJson(firstSlotStartTime),
      if (hourlyPrice != null) 'hourlyPrice': hourlyPrice,
      if (instanceType != null) 'instanceType': instanceType,
      if (maxTermDurationInDays != null)
        'maxTermDurationInDays': maxTermDurationInDays,
      if (minTermDurationInDays != null)
        'minTermDurationInDays': minTermDurationInDays,
      if (networkPlatform != null) 'networkPlatform': networkPlatform,
      if (platform != null) 'platform': platform,
      if (purchaseToken != null) 'purchaseToken': purchaseToken,
      if (recurrence != null) 'recurrence': recurrence,
      if (slotDurationInHours != null)
        'slotDurationInHours': slotDurationInHours,
      if (totalScheduledInstanceHours != null)
        'totalScheduledInstanceHours': totalScheduledInstanceHours,
    };
  }
}

/// Describes the recurring schedule for a Scheduled Instance.
class ScheduledInstanceRecurrence {
  /// The frequency (<code>Daily</code>, <code>Weekly</code>, or
  /// <code>Monthly</code>).
  final String? frequency;

  /// The interval quantity. The interval unit depends on the value of
  /// <code>frequency</code>. For example, every 2 weeks or every 2 months.
  final int? interval;

  /// The days. For a monthly schedule, this is one or more days of the month
  /// (1-31). For a weekly schedule, this is one or more days of the week (1-7,
  /// where 1 is Sunday).
  final List<int>? occurrenceDaySet;

  /// Indicates whether the occurrence is relative to the end of the specified
  /// week or month.
  final bool? occurrenceRelativeToEnd;

  /// The unit for <code>occurrenceDaySet</code> (<code>DayOfWeek</code> or
  /// <code>DayOfMonth</code>).
  final String? occurrenceUnit;

  ScheduledInstanceRecurrence({
    this.frequency,
    this.interval,
    this.occurrenceDaySet,
    this.occurrenceRelativeToEnd,
    this.occurrenceUnit,
  });

  Map<String, dynamic> toJson() {
    final frequency = this.frequency;
    final interval = this.interval;
    final occurrenceDaySet = this.occurrenceDaySet;
    final occurrenceRelativeToEnd = this.occurrenceRelativeToEnd;
    final occurrenceUnit = this.occurrenceUnit;
    return {
      if (frequency != null) 'frequency': frequency,
      if (interval != null) 'interval': interval,
      if (occurrenceDaySet != null) 'occurrenceDaySet': occurrenceDaySet,
      if (occurrenceRelativeToEnd != null)
        'occurrenceRelativeToEnd': occurrenceRelativeToEnd,
      if (occurrenceUnit != null) 'occurrenceUnit': occurrenceUnit,
    };
  }
}

/// Describes the recurring schedule for a Scheduled Instance.
class ScheduledInstanceRecurrenceRequest {
  /// The frequency (<code>Daily</code>, <code>Weekly</code>, or
  /// <code>Monthly</code>).
  final String? frequency;

  /// The interval quantity. The interval unit depends on the value of
  /// <code>Frequency</code>. For example, every 2 weeks or every 2 months.
  final int? interval;

  /// The days. For a monthly schedule, this is one or more days of the month
  /// (1-31). For a weekly schedule, this is one or more days of the week (1-7,
  /// where 1 is Sunday). You can't specify this value with a daily schedule. If
  /// the occurrence is relative to the end of the month, you can specify only a
  /// single day.
  final List<int>? occurrenceDays;

  /// Indicates whether the occurrence is relative to the end of the specified
  /// week or month. You can't specify this value with a daily schedule.
  final bool? occurrenceRelativeToEnd;

  /// The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or
  /// <code>DayOfMonth</code>). This value is required for a monthly schedule. You
  /// can't specify <code>DayOfWeek</code> with a weekly schedule. You can't
  /// specify this value with a daily schedule.
  final String? occurrenceUnit;

  ScheduledInstanceRecurrenceRequest({
    this.frequency,
    this.interval,
    this.occurrenceDays,
    this.occurrenceRelativeToEnd,
    this.occurrenceUnit,
  });

  Map<String, dynamic> toJson() {
    final frequency = this.frequency;
    final interval = this.interval;
    final occurrenceDays = this.occurrenceDays;
    final occurrenceRelativeToEnd = this.occurrenceRelativeToEnd;
    final occurrenceUnit = this.occurrenceUnit;
    return {
      if (frequency != null) 'Frequency': frequency,
      if (interval != null) 'Interval': interval,
      if (occurrenceDays != null) 'OccurrenceDay': occurrenceDays,
      if (occurrenceRelativeToEnd != null)
        'OccurrenceRelativeToEnd': occurrenceRelativeToEnd,
      if (occurrenceUnit != null) 'OccurrenceUnit': occurrenceUnit,
    };
  }
}

/// Describes a block device mapping for a Scheduled Instance.
class ScheduledInstancesBlockDeviceMapping {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String? deviceName;

  /// Parameters used to set up EBS volumes automatically when the instance is
  /// launched.
  final ScheduledInstancesEbs? ebs;

  /// To omit the device from the block device mapping, specify an empty string.
  final String? noDevice;

  /// The virtual device name (<code>ephemeral</code>N). Instance store volumes
  /// are numbered starting from 0. An instance type with two available instance
  /// store volumes can specify mappings for <code>ephemeral0</code> and
  /// <code>ephemeral1</code>. The number of available instance store volumes
  /// depends on the instance type. After you connect to the instance, you must
  /// mount the volume.
  ///
  /// Constraints: For M3 instances, you must specify instance store volumes in
  /// the block device mapping for the instance. When you launch an M3 instance,
  /// we ignore any instance store volumes specified in the block device mapping
  /// for the AMI.
  final String? virtualName;

  ScheduledInstancesBlockDeviceMapping({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final ebs = this.ebs;
    final noDevice = this.noDevice;
    final virtualName = this.virtualName;
    return {
      if (deviceName != null) 'DeviceName': deviceName,
      if (ebs != null) 'Ebs': ebs,
      if (noDevice != null) 'NoDevice': noDevice,
      if (virtualName != null) 'VirtualName': virtualName,
    };
  }
}

/// Describes an EBS volume for a Scheduled Instance.
class ScheduledInstancesEbs {
  /// Indicates whether the volume is deleted on instance termination.
  final bool? deleteOnTermination;

  /// Indicates whether the volume is encrypted. You can attached encrypted
  /// volumes only to instances that support them.
  final bool? encrypted;

  /// The number of I/O operations per second (IOPS) to provision for a
  /// <code>gp3</code>, <code>io1</code>, or <code>io2</code> volume.
  final int? iops;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The size of the volume, in GiB.
  ///
  /// Default: If you're creating the volume from a snapshot and don't specify a
  /// volume size, the default is the snapshot size.
  final int? volumeSize;

  /// The volume type.
  ///
  /// Default: <code>gp2</code>
  final String? volumeType;

  ScheduledInstancesEbs({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.snapshotId,
    this.volumeSize,
    this.volumeType,
  });

  Map<String, dynamic> toJson() {
    final deleteOnTermination = this.deleteOnTermination;
    final encrypted = this.encrypted;
    final iops = this.iops;
    final snapshotId = this.snapshotId;
    final volumeSize = this.volumeSize;
    final volumeType = this.volumeType;
    return {
      if (deleteOnTermination != null)
        'DeleteOnTermination': deleteOnTermination,
      if (encrypted != null) 'Encrypted': encrypted,
      if (iops != null) 'Iops': iops,
      if (snapshotId != null) 'SnapshotId': snapshotId,
      if (volumeSize != null) 'VolumeSize': volumeSize,
      if (volumeType != null) 'VolumeType': volumeType,
    };
  }
}

/// Describes an IAM instance profile for a Scheduled Instance.
class ScheduledInstancesIamInstanceProfile {
  /// The Amazon Resource Name (ARN).
  final String? arn;

  /// The name.
  final String? name;

  ScheduledInstancesIamInstanceProfile({
    this.arn,
    this.name,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final name = this.name;
    return {
      if (arn != null) 'Arn': arn,
      if (name != null) 'Name': name,
    };
  }
}

/// Describes an IPv6 address.
class ScheduledInstancesIpv6Address {
  /// The IPv6 address.
  final String? ipv6Address;

  ScheduledInstancesIpv6Address({
    this.ipv6Address,
  });

  Map<String, dynamic> toJson() {
    final ipv6Address = this.ipv6Address;
    return {
      if (ipv6Address != null) 'Ipv6Address': ipv6Address,
    };
  }
}

/// Describes the launch specification for a Scheduled Instance.
///
/// If you are launching the Scheduled Instance in EC2-VPC, you must specify the
/// ID of the subnet. You can specify the subnet using either
/// <code>SubnetId</code> or <code>NetworkInterface</code>.
class ScheduledInstancesLaunchSpecification {
  /// The ID of the Amazon Machine Image (AMI).
  final String imageId;

  /// The block device mapping entries.
  final List<ScheduledInstancesBlockDeviceMapping>? blockDeviceMappings;

  /// Indicates whether the instances are optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS-optimized instance.
  ///
  /// Default: <code>false</code>
  final bool? ebsOptimized;

  /// The IAM instance profile.
  final ScheduledInstancesIamInstanceProfile? iamInstanceProfile;

  /// The instance type.
  final String? instanceType;

  /// The ID of the kernel.
  final String? kernelId;

  /// The name of the key pair.
  final String? keyName;

  /// Enable or disable monitoring for the instances.
  final ScheduledInstancesMonitoring? monitoring;

  /// The network interfaces.
  final List<ScheduledInstancesNetworkInterface>? networkInterfaces;

  /// The placement information.
  final ScheduledInstancesPlacement? placement;

  /// The ID of the RAM disk.
  final String? ramdiskId;

  /// The IDs of the security groups.
  final List<String>? securityGroupIds;

  /// The ID of the subnet in which to launch the instances.
  final String? subnetId;

  /// The base64-encoded MIME user data.
  final String? userData;

  ScheduledInstancesLaunchSpecification({
    required this.imageId,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroupIds,
    this.subnetId,
    this.userData,
  });

  Map<String, dynamic> toJson() {
    final imageId = this.imageId;
    final blockDeviceMappings = this.blockDeviceMappings;
    final ebsOptimized = this.ebsOptimized;
    final iamInstanceProfile = this.iamInstanceProfile;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final placement = this.placement;
    final ramdiskId = this.ramdiskId;
    final securityGroupIds = this.securityGroupIds;
    final subnetId = this.subnetId;
    final userData = this.userData;
    return {
      'ImageId': imageId,
      if (blockDeviceMappings != null)
        'BlockDeviceMapping': blockDeviceMappings,
      if (ebsOptimized != null) 'EbsOptimized': ebsOptimized,
      if (iamInstanceProfile != null) 'IamInstanceProfile': iamInstanceProfile,
      if (instanceType != null) 'InstanceType': instanceType,
      if (kernelId != null) 'KernelId': kernelId,
      if (keyName != null) 'KeyName': keyName,
      if (monitoring != null) 'Monitoring': monitoring,
      if (networkInterfaces != null) 'NetworkInterface': networkInterfaces,
      if (placement != null) 'Placement': placement,
      if (ramdiskId != null) 'RamdiskId': ramdiskId,
      if (securityGroupIds != null) 'SecurityGroupId': securityGroupIds,
      if (subnetId != null) 'SubnetId': subnetId,
      if (userData != null) 'UserData': userData,
    };
  }
}

/// Describes whether monitoring is enabled for a Scheduled Instance.
class ScheduledInstancesMonitoring {
  /// Indicates whether monitoring is enabled.
  final bool? enabled;

  ScheduledInstancesMonitoring({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

/// Describes a network interface for a Scheduled Instance.
class ScheduledInstancesNetworkInterface {
  /// Indicates whether to assign a public IPv4 address to instances launched in a
  /// VPC. The public IPv4 address can only be assigned to a network interface for
  /// eth0, and can only be assigned to a new network interface, not an existing
  /// one. You cannot specify more than one network interface in the request. If
  /// launching into a default subnet, the default value is <code>true</code>.
  ///
  /// Amazon Web Services charges for all public IPv4 addresses, including public
  /// IPv4 addresses associated with running instances and Elastic IP addresses.
  /// For more information, see the <i>Public IPv4 Address</i> tab on the <a
  /// href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing page</a>.
  final bool? associatePublicIpAddress;

  /// Indicates whether to delete the interface when the instance is terminated.
  final bool? deleteOnTermination;

  /// The description.
  final String? description;

  /// The index of the device for the network interface attachment.
  final int? deviceIndex;

  /// The IDs of the security groups.
  final List<String>? groups;

  /// The number of IPv6 addresses to assign to the network interface. The IPv6
  /// addresses are automatically selected from the subnet range.
  final int? ipv6AddressCount;

  /// The specific IPv6 addresses from the subnet range.
  final List<ScheduledInstancesIpv6Address>? ipv6Addresses;

  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The IPv4 address of the network interface within the subnet.
  final String? privateIpAddress;

  /// The private IPv4 addresses.
  final List<ScheduledInstancesPrivateIpAddressConfig>? privateIpAddressConfigs;

  /// The number of secondary private IPv4 addresses.
  final int? secondaryPrivateIpAddressCount;

  /// The ID of the subnet.
  final String? subnetId;

  ScheduledInstancesNetworkInterface({
    this.associatePublicIpAddress,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.groups,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.networkInterfaceId,
    this.privateIpAddress,
    this.privateIpAddressConfigs,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final associatePublicIpAddress = this.associatePublicIpAddress;
    final deleteOnTermination = this.deleteOnTermination;
    final description = this.description;
    final deviceIndex = this.deviceIndex;
    final groups = this.groups;
    final ipv6AddressCount = this.ipv6AddressCount;
    final ipv6Addresses = this.ipv6Addresses;
    final networkInterfaceId = this.networkInterfaceId;
    final privateIpAddress = this.privateIpAddress;
    final privateIpAddressConfigs = this.privateIpAddressConfigs;
    final secondaryPrivateIpAddressCount = this.secondaryPrivateIpAddressCount;
    final subnetId = this.subnetId;
    return {
      if (associatePublicIpAddress != null)
        'AssociatePublicIpAddress': associatePublicIpAddress,
      if (deleteOnTermination != null)
        'DeleteOnTermination': deleteOnTermination,
      if (description != null) 'Description': description,
      if (deviceIndex != null) 'DeviceIndex': deviceIndex,
      if (groups != null) 'Group': groups,
      if (ipv6AddressCount != null) 'Ipv6AddressCount': ipv6AddressCount,
      if (ipv6Addresses != null) 'Ipv6Address': ipv6Addresses,
      if (networkInterfaceId != null) 'NetworkInterfaceId': networkInterfaceId,
      if (privateIpAddress != null) 'PrivateIpAddress': privateIpAddress,
      if (privateIpAddressConfigs != null)
        'PrivateIpAddressConfig': privateIpAddressConfigs,
      if (secondaryPrivateIpAddressCount != null)
        'SecondaryPrivateIpAddressCount': secondaryPrivateIpAddressCount,
      if (subnetId != null) 'SubnetId': subnetId,
    };
  }
}

/// Describes the placement for a Scheduled Instance.
class ScheduledInstancesPlacement {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The name of the placement group.
  final String? groupName;

  ScheduledInstancesPlacement({
    this.availabilityZone,
    this.groupName,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final groupName = this.groupName;
    return {
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (groupName != null) 'GroupName': groupName,
    };
  }
}

/// Describes a private IPv4 address for a Scheduled Instance.
class ScheduledInstancesPrivateIpAddressConfig {
  /// Indicates whether this is a primary IPv4 address. Otherwise, this is a
  /// secondary IPv4 address.
  final bool? primary;

  /// The IPv4 address.
  final String? privateIpAddress;

  ScheduledInstancesPrivateIpAddressConfig({
    this.primary,
    this.privateIpAddress,
  });

  Map<String, dynamic> toJson() {
    final primary = this.primary;
    final privateIpAddress = this.privateIpAddress;
    return {
      if (primary != null) 'Primary': primary,
      if (privateIpAddress != null) 'PrivateIpAddress': privateIpAddress,
    };
  }
}

class SearchLocalGatewayRoutesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  /// Information about the routes.
  final List<LocalGatewayRoute>? routes;

  SearchLocalGatewayRoutesResult({
    this.nextToken,
    this.routes,
  });

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final routes = this.routes;
    return {
      if (nextToken != null) 'nextToken': nextToken,
      if (routes != null) 'routeSet': routes,
    };
  }
}

class SearchTransitGatewayMulticastGroupsResult {
  /// Information about the transit gateway multicast group.
  final List<TransitGatewayMulticastGroup>? multicastGroups;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String? nextToken;

  SearchTransitGatewayMulticastGroupsResult({
    this.multicastGroups,
    this.nextToken,
  });

  Map<String, dynamic> toJson() {
    final multicastGroups = this.multicastGroups;
    final nextToken = this.nextToken;
    return {
      if (multicastGroups != null) 'multicastGroups': multicastGroups,
      if (nextToken != null) 'nextToken': nextToken,
    };
  }
}

class SearchTransitGatewayRoutesResult {
  /// Indicates whether there are additional routes available.
  final bool? additionalRoutesAvailable;

  /// Information about the routes.
  final List<TransitGatewayRoute>? routes;

  SearchTransitGatewayRoutesResult({
    this.additionalRoutesAvailable,
    this.routes,
  });

  Map<String, dynamic> toJson() {
    final additionalRoutesAvailable = this.additionalRoutesAvailable;
    final routes = this.routes;
    return {
      if (additionalRoutesAvailable != null)
        'additionalRoutesAvailable': additionalRoutesAvailable,
      if (routes != null) 'routeSet': routes,
    };
  }
}

/// Describes a security group.
class SecurityGroup {
  /// A description of the security group.
  final String? description;

  /// The ID of the security group.
  final String? groupId;

  /// The name of the security group.
  final String? groupName;

  /// The inbound rules associated with the security group.
  final List<IpPermission>? ipPermissions;

  /// The outbound rules associated with the security group.
  final List<IpPermission>? ipPermissionsEgress;

  /// The Amazon Web Services account ID of the owner of the security group.
  final String? ownerId;

  /// Any tags assigned to the security group.
  final List<Tag>? tags;

  /// The ID of the VPC for the security group.
  final String? vpcId;

  SecurityGroup({
    this.description,
    this.groupId,
    this.groupName,
    this.ipPermissions,
    this.ipPermissionsEgress,
    this.ownerId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final ipPermissions = this.ipPermissions;
    final ipPermissionsEgress = this.ipPermissionsEgress;
    final ownerId = this.ownerId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (description != null) 'groupDescription': description,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (ipPermissions != null) 'ipPermissions': ipPermissions,
      if (ipPermissionsEgress != null)
        'ipPermissionsEgress': ipPermissionsEgress,
      if (ownerId != null) 'ownerId': ownerId,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// A security group that can be used by interfaces in the VPC.
class SecurityGroupForVpc {
  /// The security group's description.
  final String? description;

  /// The security group ID.
  final String? groupId;

  /// The security group name.
  final String? groupName;

  /// The security group owner ID.
  final String? ownerId;

  /// The VPC ID in which the security group was created.
  final String? primaryVpcId;

  /// The security group tags.
  final List<Tag>? tags;

  SecurityGroupForVpc({
    this.description,
    this.groupId,
    this.groupName,
    this.ownerId,
    this.primaryVpcId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final ownerId = this.ownerId;
    final primaryVpcId = this.primaryVpcId;
    final tags = this.tags;
    return {
      if (description != null) 'description': description,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (ownerId != null) 'ownerId': ownerId,
      if (primaryVpcId != null) 'primaryVpcId': primaryVpcId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes a security group.
class SecurityGroupIdentifier {
  /// The ID of the security group.
  final String? groupId;

  /// The name of the security group.
  final String? groupName;

  SecurityGroupIdentifier({
    this.groupId,
    this.groupName,
  });

  Map<String, dynamic> toJson() {
    final groupId = this.groupId;
    final groupName = this.groupName;
    return {
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
    };
  }
}

/// Describes a VPC with a security group that references your security group.
class SecurityGroupReference {
  /// The ID of your security group.
  final String? groupId;

  /// The ID of the VPC with the referencing security group.
  final String? referencingVpcId;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// The ID of the transit gateway (if applicable).
  final String? transitGatewayId;

  /// The ID of the VPC peering connection (if applicable). For more information
  /// about security group referencing for peering connections, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-security-groups.html">Update
  /// your security groups to reference peer security groups</a> in the <i>VPC
  /// Peering Guide</i>.
  final String? vpcPeeringConnectionId;

  SecurityGroupReference({
    this.groupId,
    this.referencingVpcId,
    this.transitGatewayId,
    this.vpcPeeringConnectionId,
  });

  Map<String, dynamic> toJson() {
    final groupId = this.groupId;
    final referencingVpcId = this.referencingVpcId;
    final transitGatewayId = this.transitGatewayId;
    final vpcPeeringConnectionId = this.vpcPeeringConnectionId;
    return {
      if (groupId != null) 'groupId': groupId,
      if (referencingVpcId != null) 'referencingVpcId': referencingVpcId,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (vpcPeeringConnectionId != null)
        'vpcPeeringConnectionId': vpcPeeringConnectionId,
    };
  }
}

enum SecurityGroupReferencingSupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const SecurityGroupReferencingSupportValue(this.value);

  static SecurityGroupReferencingSupportValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SecurityGroupReferencingSupportValue'));
}

/// Describes a security group rule.
class SecurityGroupRule {
  /// The IPv4 CIDR range.
  final String? cidrIpv4;

  /// The IPv6 CIDR range.
  final String? cidrIpv6;

  /// The security group rule description.
  final String? description;

  /// If the protocol is TCP or UDP, this is the start of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
  final int? fromPort;

  /// The ID of the security group.
  final String? groupId;

  /// The ID of the Amazon Web Services account that owns the security group.
  final String? groupOwnerId;

  /// The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
  /// <code>icmpv6</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>).
  ///
  /// Use <code>-1</code> to specify all protocols.
  final String? ipProtocol;

  /// Indicates whether the security group rule is an outbound rule.
  final bool? isEgress;

  /// The ID of the prefix list.
  final String? prefixListId;

  /// Describes the security group that is referenced in the rule.
  final ReferencedSecurityGroup? referencedGroupInfo;

  /// The ID of the security group rule.
  final String? securityGroupRuleId;

  /// The tags applied to the security group rule.
  final List<Tag>? tags;

  /// If the protocol is TCP or UDP, this is the end of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If
  /// the start port is -1 (all ICMP types), then the end port must be -1 (all
  /// ICMP codes).
  final int? toPort;

  SecurityGroupRule({
    this.cidrIpv4,
    this.cidrIpv6,
    this.description,
    this.fromPort,
    this.groupId,
    this.groupOwnerId,
    this.ipProtocol,
    this.isEgress,
    this.prefixListId,
    this.referencedGroupInfo,
    this.securityGroupRuleId,
    this.tags,
    this.toPort,
  });

  Map<String, dynamic> toJson() {
    final cidrIpv4 = this.cidrIpv4;
    final cidrIpv6 = this.cidrIpv6;
    final description = this.description;
    final fromPort = this.fromPort;
    final groupId = this.groupId;
    final groupOwnerId = this.groupOwnerId;
    final ipProtocol = this.ipProtocol;
    final isEgress = this.isEgress;
    final prefixListId = this.prefixListId;
    final referencedGroupInfo = this.referencedGroupInfo;
    final securityGroupRuleId = this.securityGroupRuleId;
    final tags = this.tags;
    final toPort = this.toPort;
    return {
      if (cidrIpv4 != null) 'cidrIpv4': cidrIpv4,
      if (cidrIpv6 != null) 'cidrIpv6': cidrIpv6,
      if (description != null) 'description': description,
      if (fromPort != null) 'fromPort': fromPort,
      if (groupId != null) 'groupId': groupId,
      if (groupOwnerId != null) 'groupOwnerId': groupOwnerId,
      if (ipProtocol != null) 'ipProtocol': ipProtocol,
      if (isEgress != null) 'isEgress': isEgress,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (referencedGroupInfo != null)
        'referencedGroupInfo': referencedGroupInfo,
      if (securityGroupRuleId != null)
        'securityGroupRuleId': securityGroupRuleId,
      if (tags != null) 'tagSet': tags,
      if (toPort != null) 'toPort': toPort,
    };
  }
}

/// Describes the description of a security group rule.
///
/// You can use this when you want to update the security group rule description
/// for either an inbound or outbound rule.
class SecurityGroupRuleDescription {
  /// The description of the security group rule.
  final String? description;

  /// The ID of the security group rule.
  final String? securityGroupRuleId;

  SecurityGroupRuleDescription({
    this.description,
    this.securityGroupRuleId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final securityGroupRuleId = this.securityGroupRuleId;
    return {
      if (description != null) 'Description': description,
      if (securityGroupRuleId != null)
        'SecurityGroupRuleId': securityGroupRuleId,
    };
  }
}

/// Describes a security group rule.
///
/// You must specify exactly one of the following parameters, based on the rule
/// type:
///
/// <ul>
/// <li>
/// CidrIpv4
/// </li>
/// <li>
/// CidrIpv6
/// </li>
/// <li>
/// PrefixListId
/// </li>
/// <li>
/// ReferencedGroupId
/// </li>
/// </ul>
/// When you modify a rule, you cannot change the rule type. For example, if the
/// rule uses an IPv4 address range, you must use <code>CidrIpv4</code> to
/// specify a new IPv4 address range.
class SecurityGroupRuleRequest {
  /// The IPv4 CIDR range. To specify a single IPv4 address, use the /32 prefix
  /// length.
  final String? cidrIpv4;

  /// The IPv6 CIDR range. To specify a single IPv6 address, use the /128 prefix
  /// length.
  final String? cidrIpv6;

  /// The description of the security group rule.
  final String? description;

  /// If the protocol is TCP or UDP, this is the start of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
  final int? fromPort;

  /// The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
  /// <code>icmpv6</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>).
  ///
  /// Use <code>-1</code> to specify all protocols.
  final String? ipProtocol;

  /// The ID of the prefix list.
  final String? prefixListId;

  /// The ID of the security group that is referenced in the security group rule.
  final String? referencedGroupId;

  /// If the protocol is TCP or UDP, this is the end of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If
  /// the start port is -1 (all ICMP types), then the end port must be -1 (all
  /// ICMP codes).
  final int? toPort;

  SecurityGroupRuleRequest({
    this.cidrIpv4,
    this.cidrIpv6,
    this.description,
    this.fromPort,
    this.ipProtocol,
    this.prefixListId,
    this.referencedGroupId,
    this.toPort,
  });

  Map<String, dynamic> toJson() {
    final cidrIpv4 = this.cidrIpv4;
    final cidrIpv6 = this.cidrIpv6;
    final description = this.description;
    final fromPort = this.fromPort;
    final ipProtocol = this.ipProtocol;
    final prefixListId = this.prefixListId;
    final referencedGroupId = this.referencedGroupId;
    final toPort = this.toPort;
    return {
      if (cidrIpv4 != null) 'CidrIpv4': cidrIpv4,
      if (cidrIpv6 != null) 'CidrIpv6': cidrIpv6,
      if (description != null) 'Description': description,
      if (fromPort != null) 'FromPort': fromPort,
      if (ipProtocol != null) 'IpProtocol': ipProtocol,
      if (prefixListId != null) 'PrefixListId': prefixListId,
      if (referencedGroupId != null) 'ReferencedGroupId': referencedGroupId,
      if (toPort != null) 'ToPort': toPort,
    };
  }
}

/// Describes an update to a security group rule.
class SecurityGroupRuleUpdate {
  /// The ID of the security group rule.
  final String securityGroupRuleId;

  /// Information about the security group rule.
  final SecurityGroupRuleRequest? securityGroupRule;

  SecurityGroupRuleUpdate({
    required this.securityGroupRuleId,
    this.securityGroupRule,
  });

  Map<String, dynamic> toJson() {
    final securityGroupRuleId = this.securityGroupRuleId;
    final securityGroupRule = this.securityGroupRule;
    return {
      'SecurityGroupRuleId': securityGroupRuleId,
      if (securityGroupRule != null) 'SecurityGroupRule': securityGroupRule,
    };
  }
}

enum SelfServicePortal {
  enabled('enabled'),
  disabled('disabled'),
  ;

  final String value;

  const SelfServicePortal(this.value);

  static SelfServicePortal fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SelfServicePortal'));
}

/// Describes a service configuration for a VPC endpoint service.
class ServiceConfiguration {
  /// Indicates whether requests from other Amazon Web Services accounts to create
  /// an endpoint to the service must first be accepted.
  final bool? acceptanceRequired;

  /// The Availability Zones in which the service is available.
  final List<String>? availabilityZones;

  /// The DNS names for the service.
  final List<String>? baseEndpointDnsNames;

  /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the
  /// service.
  final List<String>? gatewayLoadBalancerArns;

  /// Indicates whether the service manages its VPC endpoints. Management of the
  /// service VPC endpoints using the VPC endpoint API is restricted.
  final bool? managesVpcEndpoints;

  /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the
  /// service.
  final List<String>? networkLoadBalancerArns;

  /// The payer responsibility.
  final PayerResponsibility? payerResponsibility;

  /// The private DNS name for the service.
  final String? privateDnsName;

  /// Information about the endpoint service private DNS name configuration.
  final PrivateDnsNameConfiguration? privateDnsNameConfiguration;

  /// The ID of the service.
  final String? serviceId;

  /// The name of the service.
  final String? serviceName;

  /// The service state.
  final ServiceState? serviceState;

  /// The type of service.
  final List<ServiceTypeDetail>? serviceType;

  /// The supported IP address types.
  final List<ServiceConnectivityType>? supportedIpAddressTypes;

  /// The tags assigned to the service.
  final List<Tag>? tags;

  ServiceConfiguration({
    this.acceptanceRequired,
    this.availabilityZones,
    this.baseEndpointDnsNames,
    this.gatewayLoadBalancerArns,
    this.managesVpcEndpoints,
    this.networkLoadBalancerArns,
    this.payerResponsibility,
    this.privateDnsName,
    this.privateDnsNameConfiguration,
    this.serviceId,
    this.serviceName,
    this.serviceState,
    this.serviceType,
    this.supportedIpAddressTypes,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final acceptanceRequired = this.acceptanceRequired;
    final availabilityZones = this.availabilityZones;
    final baseEndpointDnsNames = this.baseEndpointDnsNames;
    final gatewayLoadBalancerArns = this.gatewayLoadBalancerArns;
    final managesVpcEndpoints = this.managesVpcEndpoints;
    final networkLoadBalancerArns = this.networkLoadBalancerArns;
    final payerResponsibility = this.payerResponsibility;
    final privateDnsName = this.privateDnsName;
    final privateDnsNameConfiguration = this.privateDnsNameConfiguration;
    final serviceId = this.serviceId;
    final serviceName = this.serviceName;
    final serviceState = this.serviceState;
    final serviceType = this.serviceType;
    final supportedIpAddressTypes = this.supportedIpAddressTypes;
    final tags = this.tags;
    return {
      if (acceptanceRequired != null) 'acceptanceRequired': acceptanceRequired,
      if (availabilityZones != null) 'availabilityZoneSet': availabilityZones,
      if (baseEndpointDnsNames != null)
        'baseEndpointDnsNameSet': baseEndpointDnsNames,
      if (gatewayLoadBalancerArns != null)
        'gatewayLoadBalancerArnSet': gatewayLoadBalancerArns,
      if (managesVpcEndpoints != null)
        'managesVpcEndpoints': managesVpcEndpoints,
      if (networkLoadBalancerArns != null)
        'networkLoadBalancerArnSet': networkLoadBalancerArns,
      if (payerResponsibility != null)
        'payerResponsibility': payerResponsibility.value,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateDnsNameConfiguration != null)
        'privateDnsNameConfiguration': privateDnsNameConfiguration,
      if (serviceId != null) 'serviceId': serviceId,
      if (serviceName != null) 'serviceName': serviceName,
      if (serviceState != null) 'serviceState': serviceState.value,
      if (serviceType != null) 'serviceType': serviceType,
      if (supportedIpAddressTypes != null)
        'supportedIpAddressTypeSet':
            supportedIpAddressTypes.map((e) => e.value).toList(),
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum ServiceConnectivityType {
  ipv4('ipv4'),
  ipv6('ipv6'),
  ;

  final String value;

  const ServiceConnectivityType(this.value);

  static ServiceConnectivityType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ServiceConnectivityType'));
}

/// Describes a VPC endpoint service.
class ServiceDetail {
  /// Indicates whether VPC endpoint connection requests to the service must be
  /// accepted by the service owner.
  final bool? acceptanceRequired;

  /// The Availability Zones in which the service is available.
  final List<String>? availabilityZones;

  /// The DNS names for the service.
  final List<String>? baseEndpointDnsNames;

  /// Indicates whether the service manages its VPC endpoints. Management of the
  /// service VPC endpoints using the VPC endpoint API is restricted.
  final bool? managesVpcEndpoints;

  /// The Amazon Web Services account ID of the service owner.
  final String? owner;

  /// The payer responsibility.
  final PayerResponsibility? payerResponsibility;

  /// The private DNS name for the service.
  final String? privateDnsName;

  /// The verification state of the VPC endpoint service.
  ///
  /// Consumers of the endpoint service cannot use the private name when the state
  /// is not <code>verified</code>.
  final DnsNameState? privateDnsNameVerificationState;

  /// The private DNS names assigned to the VPC endpoint service.
  final List<PrivateDnsDetails>? privateDnsNames;

  /// The ID of the endpoint service.
  final String? serviceId;

  /// The name of the service.
  final String? serviceName;

  /// The type of service.
  final List<ServiceTypeDetail>? serviceType;

  /// The supported IP address types.
  final List<ServiceConnectivityType>? supportedIpAddressTypes;

  /// The tags assigned to the service.
  final List<Tag>? tags;

  /// Indicates whether the service supports endpoint policies.
  final bool? vpcEndpointPolicySupported;

  ServiceDetail({
    this.acceptanceRequired,
    this.availabilityZones,
    this.baseEndpointDnsNames,
    this.managesVpcEndpoints,
    this.owner,
    this.payerResponsibility,
    this.privateDnsName,
    this.privateDnsNameVerificationState,
    this.privateDnsNames,
    this.serviceId,
    this.serviceName,
    this.serviceType,
    this.supportedIpAddressTypes,
    this.tags,
    this.vpcEndpointPolicySupported,
  });

  Map<String, dynamic> toJson() {
    final acceptanceRequired = this.acceptanceRequired;
    final availabilityZones = this.availabilityZones;
    final baseEndpointDnsNames = this.baseEndpointDnsNames;
    final managesVpcEndpoints = this.managesVpcEndpoints;
    final owner = this.owner;
    final payerResponsibility = this.payerResponsibility;
    final privateDnsName = this.privateDnsName;
    final privateDnsNameVerificationState =
        this.privateDnsNameVerificationState;
    final privateDnsNames = this.privateDnsNames;
    final serviceId = this.serviceId;
    final serviceName = this.serviceName;
    final serviceType = this.serviceType;
    final supportedIpAddressTypes = this.supportedIpAddressTypes;
    final tags = this.tags;
    final vpcEndpointPolicySupported = this.vpcEndpointPolicySupported;
    return {
      if (acceptanceRequired != null) 'acceptanceRequired': acceptanceRequired,
      if (availabilityZones != null) 'availabilityZoneSet': availabilityZones,
      if (baseEndpointDnsNames != null)
        'baseEndpointDnsNameSet': baseEndpointDnsNames,
      if (managesVpcEndpoints != null)
        'managesVpcEndpoints': managesVpcEndpoints,
      if (owner != null) 'owner': owner,
      if (payerResponsibility != null)
        'payerResponsibility': payerResponsibility.value,
      if (privateDnsName != null) 'privateDnsName': privateDnsName,
      if (privateDnsNameVerificationState != null)
        'privateDnsNameVerificationState':
            privateDnsNameVerificationState.value,
      if (privateDnsNames != null) 'privateDnsNameSet': privateDnsNames,
      if (serviceId != null) 'serviceId': serviceId,
      if (serviceName != null) 'serviceName': serviceName,
      if (serviceType != null) 'serviceType': serviceType,
      if (supportedIpAddressTypes != null)
        'supportedIpAddressTypeSet':
            supportedIpAddressTypes.map((e) => e.value).toList(),
      if (tags != null) 'tagSet': tags,
      if (vpcEndpointPolicySupported != null)
        'vpcEndpointPolicySupported': vpcEndpointPolicySupported,
    };
  }
}

enum ServiceState {
  pending('Pending'),
  available('Available'),
  deleting('Deleting'),
  deleted('Deleted'),
  failed('Failed'),
  ;

  final String value;

  const ServiceState(this.value);

  static ServiceState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ServiceState'));
}

enum ServiceType {
  interface('Interface'),
  gateway('Gateway'),
  gatewayLoadBalancer('GatewayLoadBalancer'),
  ;

  final String value;

  const ServiceType(this.value);

  static ServiceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ServiceType'));
}

/// Describes the type of service for a VPC endpoint.
class ServiceTypeDetail {
  /// The type of service.
  final ServiceType? serviceType;

  ServiceTypeDetail({
    this.serviceType,
  });

  Map<String, dynamic> toJson() {
    final serviceType = this.serviceType;
    return {
      if (serviceType != null) 'serviceType': serviceType.value,
    };
  }
}

enum ShutdownBehavior {
  stop('stop'),
  terminate('terminate'),
  ;

  final String value;

  const ShutdownBehavior(this.value);

  static ShutdownBehavior fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ShutdownBehavior'));
}

/// Describes the time period for a Scheduled Instance to start its first
/// schedule. The time period must span less than one day.
class SlotDateTimeRangeRequest {
  /// The earliest date and time, in UTC, for the Scheduled Instance to start.
  final DateTime earliestTime;

  /// The latest date and time, in UTC, for the Scheduled Instance to start. This
  /// value must be later than or equal to the earliest date and at most three
  /// months in the future.
  final DateTime latestTime;

  SlotDateTimeRangeRequest({
    required this.earliestTime,
    required this.latestTime,
  });

  Map<String, dynamic> toJson() {
    final earliestTime = this.earliestTime;
    final latestTime = this.latestTime;
    return {
      'EarliestTime': iso8601ToJson(earliestTime),
      'LatestTime': iso8601ToJson(latestTime),
    };
  }
}

/// Describes the time period for a Scheduled Instance to start its first
/// schedule.
class SlotStartTimeRangeRequest {
  /// The earliest date and time, in UTC, for the Scheduled Instance to start.
  final DateTime? earliestTime;

  /// The latest date and time, in UTC, for the Scheduled Instance to start.
  final DateTime? latestTime;

  SlotStartTimeRangeRequest({
    this.earliestTime,
    this.latestTime,
  });

  Map<String, dynamic> toJson() {
    final earliestTime = this.earliestTime;
    final latestTime = this.latestTime;
    return {
      if (earliestTime != null) 'EarliestTime': iso8601ToJson(earliestTime),
      if (latestTime != null) 'LatestTime': iso8601ToJson(latestTime),
    };
  }
}

/// Describes a snapshot.
class Snapshot {
  /// The data encryption key identifier for the snapshot. This value is a unique
  /// identifier that corresponds to the data encryption key that was used to
  /// encrypt the original volume or snapshot copy. Because data encryption keys
  /// are inherited by volumes created from snapshots, and vice versa, if
  /// snapshots share the same data encryption key identifier, then they belong to
  /// the same volume/snapshot lineage. This parameter is only returned by
  /// <a>DescribeSnapshots</a>.
  final String? dataEncryptionKeyId;

  /// The description for the snapshot.
  final String? description;

  /// Indicates whether the snapshot is encrypted.
  final bool? encrypted;

  /// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
  /// that was used to protect the volume encryption key for the parent volume.
  final String? kmsKeyId;

  /// The ARN of the Outpost on which the snapshot is stored. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html">Amazon
  /// EBS local snapshots on Outposts</a> in the <i>Amazon EBS User Guide</i>.
  final String? outpostArn;

  /// The Amazon Web Services owner alias, from an Amazon-maintained list
  /// (<code>amazon</code>). This is not the user-configured Amazon Web Services
  /// account alias set using the IAM console.
  final String? ownerAlias;

  /// The ID of the Amazon Web Services account that owns the EBS snapshot.
  final String? ownerId;

  /// The progress of the snapshot, as a percentage.
  final String? progress;

  /// Only for archived snapshots that are temporarily restored. Indicates the
  /// date and time when a temporarily restored snapshot will be automatically
  /// re-archived.
  final DateTime? restoreExpiryTime;

  /// The ID of the snapshot. Each snapshot receives a unique identifier when it
  /// is created.
  final String? snapshotId;

  /// Reserved for future use.
  final SSEType? sseType;

  /// The time stamp when the snapshot was initiated.
  final DateTime? startTime;

  /// The snapshot state.
  final SnapshotState? state;

  /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy
  /// operation fails (for example, if the proper Key Management Service (KMS)
  /// permissions are not obtained) this field displays error state details to
  /// help you diagnose why the error occurred. This parameter is only returned by
  /// <a>DescribeSnapshots</a>.
  final String? stateMessage;

  /// The storage tier in which the snapshot is stored. <code>standard</code>
  /// indicates that the snapshot is stored in the standard snapshot storage tier
  /// and that it is ready for use. <code>archive</code> indicates that the
  /// snapshot is currently archived and that it must be restored before it can be
  /// used.
  final StorageTier? storageTier;

  /// Any tags assigned to the snapshot.
  final List<Tag>? tags;

  /// The ID of the volume that was used to create the snapshot. Snapshots created
  /// by the <a>CopySnapshot</a> action have an arbitrary volume ID that should
  /// not be used for any purpose.
  final String? volumeId;

  /// The size of the volume, in GiB.
  final int? volumeSize;

  Snapshot({
    this.dataEncryptionKeyId,
    this.description,
    this.encrypted,
    this.kmsKeyId,
    this.outpostArn,
    this.ownerAlias,
    this.ownerId,
    this.progress,
    this.restoreExpiryTime,
    this.snapshotId,
    this.sseType,
    this.startTime,
    this.state,
    this.stateMessage,
    this.storageTier,
    this.tags,
    this.volumeId,
    this.volumeSize,
  });

  Map<String, dynamic> toJson() {
    final dataEncryptionKeyId = this.dataEncryptionKeyId;
    final description = this.description;
    final encrypted = this.encrypted;
    final kmsKeyId = this.kmsKeyId;
    final outpostArn = this.outpostArn;
    final ownerAlias = this.ownerAlias;
    final ownerId = this.ownerId;
    final progress = this.progress;
    final restoreExpiryTime = this.restoreExpiryTime;
    final snapshotId = this.snapshotId;
    final sseType = this.sseType;
    final startTime = this.startTime;
    final state = this.state;
    final stateMessage = this.stateMessage;
    final storageTier = this.storageTier;
    final tags = this.tags;
    final volumeId = this.volumeId;
    final volumeSize = this.volumeSize;
    return {
      if (dataEncryptionKeyId != null)
        'dataEncryptionKeyId': dataEncryptionKeyId,
      if (description != null) 'description': description,
      if (encrypted != null) 'encrypted': encrypted,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerAlias != null) 'ownerAlias': ownerAlias,
      if (ownerId != null) 'ownerId': ownerId,
      if (progress != null) 'progress': progress,
      if (restoreExpiryTime != null)
        'restoreExpiryTime': iso8601ToJson(restoreExpiryTime),
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (sseType != null) 'sseType': sseType.value,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
      if (state != null) 'status': state.value,
      if (stateMessage != null) 'statusMessage': stateMessage,
      if (storageTier != null) 'storageTier': storageTier.value,
      if (tags != null) 'tagSet': tags,
      if (volumeId != null) 'volumeId': volumeId,
      if (volumeSize != null) 'volumeSize': volumeSize,
    };
  }
}

enum SnapshotAttributeName {
  productCodes('productCodes'),
  createVolumePermission('createVolumePermission'),
  ;

  final String value;

  const SnapshotAttributeName(this.value);

  static SnapshotAttributeName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum SnapshotAttributeName'));
}

enum SnapshotBlockPublicAccessState {
  blockAllSharing('block-all-sharing'),
  blockNewSharing('block-new-sharing'),
  unblocked('unblocked'),
  ;

  final String value;

  const SnapshotBlockPublicAccessState(this.value);

  static SnapshotBlockPublicAccessState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SnapshotBlockPublicAccessState'));
}

/// Describes the snapshot created from the imported disk.
class SnapshotDetail {
  /// A description for the snapshot.
  final String? description;

  /// The block device mapping for the snapshot.
  final String? deviceName;

  /// The size of the disk in the snapshot, in GiB.
  final double? diskImageSize;

  /// The format of the disk image from which the snapshot is created.
  final String? format;

  /// The percentage of progress for the task.
  final String? progress;

  /// The snapshot ID of the disk being imported.
  final String? snapshotId;

  /// A brief status of the snapshot creation.
  final String? status;

  /// A detailed status message for the snapshot creation.
  final String? statusMessage;

  /// The URL used to access the disk image.
  final String? url;

  /// The Amazon S3 bucket for the disk image.
  final UserBucketDetails? userBucket;

  SnapshotDetail({
    this.description,
    this.deviceName,
    this.diskImageSize,
    this.format,
    this.progress,
    this.snapshotId,
    this.status,
    this.statusMessage,
    this.url,
    this.userBucket,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final deviceName = this.deviceName;
    final diskImageSize = this.diskImageSize;
    final format = this.format;
    final progress = this.progress;
    final snapshotId = this.snapshotId;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final url = this.url;
    final userBucket = this.userBucket;
    return {
      if (description != null) 'description': description,
      if (deviceName != null) 'deviceName': deviceName,
      if (diskImageSize != null) 'diskImageSize': diskImageSize,
      if (format != null) 'format': format,
      if (progress != null) 'progress': progress,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (url != null) 'url': url,
      if (userBucket != null) 'userBucket': userBucket,
    };
  }
}

/// The disk container object for the import snapshot request.
class SnapshotDiskContainer {
  /// The description of the disk image being imported.
  final String? description;

  /// The format of the disk image being imported.
  ///
  /// Valid values: <code>VHD</code> | <code>VMDK</code> | <code>RAW</code>
  final String? format;

  /// The URL to the Amazon S3-based disk image being imported. It can either be a
  /// https URL (https://..) or an Amazon S3 URL (s3://..).
  final String? url;

  /// The Amazon S3 bucket for the disk image.
  final UserBucket? userBucket;

  SnapshotDiskContainer({
    this.description,
    this.format,
    this.url,
    this.userBucket,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final format = this.format;
    final url = this.url;
    final userBucket = this.userBucket;
    return {
      if (description != null) 'Description': description,
      if (format != null) 'Format': format,
      if (url != null) 'Url': url,
      if (userBucket != null) 'UserBucket': userBucket,
    };
  }
}

/// Information about a snapshot.
class SnapshotInfo {
  /// Description specified by the CreateSnapshotRequest that has been applied to
  /// all snapshots.
  final String? description;

  /// Indicates whether the snapshot is encrypted.
  final bool? encrypted;

  /// The ARN of the Outpost on which the snapshot is stored. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html">Amazon
  /// EBS local snapshots on Outposts</a> in the <i>Amazon EBS User Guide</i>.
  final String? outpostArn;

  /// Account id used when creating this snapshot.
  final String? ownerId;

  /// Progress this snapshot has made towards completing.
  final String? progress;

  /// Snapshot id that can be used to describe this snapshot.
  final String? snapshotId;

  /// Reserved for future use.
  final SSEType? sseType;

  /// Time this snapshot was started. This is the same for all snapshots initiated
  /// by the same request.
  final DateTime? startTime;

  /// Current state of the snapshot.
  final SnapshotState? state;

  /// Tags associated with this snapshot.
  final List<Tag>? tags;

  /// Source volume from which this snapshot was created.
  final String? volumeId;

  /// Size of the volume from which this snapshot was created.
  final int? volumeSize;

  SnapshotInfo({
    this.description,
    this.encrypted,
    this.outpostArn,
    this.ownerId,
    this.progress,
    this.snapshotId,
    this.sseType,
    this.startTime,
    this.state,
    this.tags,
    this.volumeId,
    this.volumeSize,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final encrypted = this.encrypted;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final progress = this.progress;
    final snapshotId = this.snapshotId;
    final sseType = this.sseType;
    final startTime = this.startTime;
    final state = this.state;
    final tags = this.tags;
    final volumeId = this.volumeId;
    final volumeSize = this.volumeSize;
    return {
      if (description != null) 'description': description,
      if (encrypted != null) 'encrypted': encrypted,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (progress != null) 'progress': progress,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (sseType != null) 'sseType': sseType.value,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (volumeId != null) 'volumeId': volumeId,
      if (volumeSize != null) 'volumeSize': volumeSize,
    };
  }
}

/// Information about a snapshot that is currently in the Recycle Bin.
class SnapshotRecycleBinInfo {
  /// The description for the snapshot.
  final String? description;

  /// The date and time when the snaphsot entered the Recycle Bin.
  final DateTime? recycleBinEnterTime;

  /// The date and time when the snapshot is to be permanently deleted from the
  /// Recycle Bin.
  final DateTime? recycleBinExitTime;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The ID of the volume from which the snapshot was created.
  final String? volumeId;

  SnapshotRecycleBinInfo({
    this.description,
    this.recycleBinEnterTime,
    this.recycleBinExitTime,
    this.snapshotId,
    this.volumeId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final recycleBinEnterTime = this.recycleBinEnterTime;
    final recycleBinExitTime = this.recycleBinExitTime;
    final snapshotId = this.snapshotId;
    final volumeId = this.volumeId;
    return {
      if (description != null) 'description': description,
      if (recycleBinEnterTime != null)
        'recycleBinEnterTime': iso8601ToJson(recycleBinEnterTime),
      if (recycleBinExitTime != null)
        'recycleBinExitTime': iso8601ToJson(recycleBinExitTime),
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (volumeId != null) 'volumeId': volumeId,
    };
  }
}

enum SnapshotState {
  pending('pending'),
  completed('completed'),
  error('error'),
  recoverable('recoverable'),
  recovering('recovering'),
  ;

  final String value;

  const SnapshotState(this.value);

  static SnapshotState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SnapshotState'));
}

/// Details about the import snapshot task.
class SnapshotTaskDetail {
  /// The description of the snapshot.
  final String? description;

  /// The size of the disk in the snapshot, in GiB.
  final double? diskImageSize;

  /// Indicates whether the snapshot is encrypted.
  final bool? encrypted;

  /// The format of the disk image from which the snapshot is created.
  final String? format;

  /// The identifier for the KMS key that was used to create the encrypted
  /// snapshot.
  final String? kmsKeyId;

  /// The percentage of completion for the import snapshot task.
  final String? progress;

  /// The snapshot ID of the disk being imported.
  final String? snapshotId;

  /// A brief status for the import snapshot task.
  final String? status;

  /// A detailed status message for the import snapshot task.
  final String? statusMessage;

  /// The URL of the disk image from which the snapshot is created.
  final String? url;

  /// The Amazon S3 bucket for the disk image.
  final UserBucketDetails? userBucket;

  SnapshotTaskDetail({
    this.description,
    this.diskImageSize,
    this.encrypted,
    this.format,
    this.kmsKeyId,
    this.progress,
    this.snapshotId,
    this.status,
    this.statusMessage,
    this.url,
    this.userBucket,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final diskImageSize = this.diskImageSize;
    final encrypted = this.encrypted;
    final format = this.format;
    final kmsKeyId = this.kmsKeyId;
    final progress = this.progress;
    final snapshotId = this.snapshotId;
    final status = this.status;
    final statusMessage = this.statusMessage;
    final url = this.url;
    final userBucket = this.userBucket;
    return {
      if (description != null) 'description': description,
      if (diskImageSize != null) 'diskImageSize': diskImageSize,
      if (encrypted != null) 'encrypted': encrypted,
      if (format != null) 'format': format,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (progress != null) 'progress': progress,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (status != null) 'status': status,
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (url != null) 'url': url,
      if (userBucket != null) 'userBucket': userBucket,
    };
  }
}

/// Provides information about a snapshot's storage tier.
class SnapshotTierStatus {
  /// The date and time when the last archive process was completed.
  final DateTime? archivalCompleteTime;

  /// The status of the last archive or restore process.
  final TieringOperationStatus? lastTieringOperationStatus;

  /// A message describing the status of the last archive or restore process.
  final String? lastTieringOperationStatusDetail;

  /// The progress of the last archive or restore process, as a percentage.
  final int? lastTieringProgress;

  /// The date and time when the last archive or restore process was started.
  final DateTime? lastTieringStartTime;

  /// The ID of the Amazon Web Services account that owns the snapshot.
  final String? ownerId;

  /// Only for archived snapshots that are temporarily restored. Indicates the
  /// date and time when a temporarily restored snapshot will be automatically
  /// re-archived.
  final DateTime? restoreExpiryTime;

  /// The ID of the snapshot.
  final String? snapshotId;

  /// The state of the snapshot.
  final SnapshotState? status;

  /// The storage tier in which the snapshot is stored. <code>standard</code>
  /// indicates that the snapshot is stored in the standard snapshot storage tier
  /// and that it is ready for use. <code>archive</code> indicates that the
  /// snapshot is currently archived and that it must be restored before it can be
  /// used.
  final StorageTier? storageTier;

  /// The tags that are assigned to the snapshot.
  final List<Tag>? tags;

  /// The ID of the volume from which the snapshot was created.
  final String? volumeId;

  SnapshotTierStatus({
    this.archivalCompleteTime,
    this.lastTieringOperationStatus,
    this.lastTieringOperationStatusDetail,
    this.lastTieringProgress,
    this.lastTieringStartTime,
    this.ownerId,
    this.restoreExpiryTime,
    this.snapshotId,
    this.status,
    this.storageTier,
    this.tags,
    this.volumeId,
  });

  Map<String, dynamic> toJson() {
    final archivalCompleteTime = this.archivalCompleteTime;
    final lastTieringOperationStatus = this.lastTieringOperationStatus;
    final lastTieringOperationStatusDetail =
        this.lastTieringOperationStatusDetail;
    final lastTieringProgress = this.lastTieringProgress;
    final lastTieringStartTime = this.lastTieringStartTime;
    final ownerId = this.ownerId;
    final restoreExpiryTime = this.restoreExpiryTime;
    final snapshotId = this.snapshotId;
    final status = this.status;
    final storageTier = this.storageTier;
    final tags = this.tags;
    final volumeId = this.volumeId;
    return {
      if (archivalCompleteTime != null)
        'archivalCompleteTime': iso8601ToJson(archivalCompleteTime),
      if (lastTieringOperationStatus != null)
        'lastTieringOperationStatus': lastTieringOperationStatus.value,
      if (lastTieringOperationStatusDetail != null)
        'lastTieringOperationStatusDetail': lastTieringOperationStatusDetail,
      if (lastTieringProgress != null)
        'lastTieringProgress': lastTieringProgress,
      if (lastTieringStartTime != null)
        'lastTieringStartTime': iso8601ToJson(lastTieringStartTime),
      if (ownerId != null) 'ownerId': ownerId,
      if (restoreExpiryTime != null)
        'restoreExpiryTime': iso8601ToJson(restoreExpiryTime),
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (status != null) 'status': status.value,
      if (storageTier != null) 'storageTier': storageTier.value,
      if (tags != null) 'tagSet': tags,
      if (volumeId != null) 'volumeId': volumeId,
    };
  }
}

enum SpotAllocationStrategy {
  lowestPrice('lowest-price'),
  diversified('diversified'),
  capacityOptimized('capacity-optimized'),
  capacityOptimizedPrioritized('capacity-optimized-prioritized'),
  priceCapacityOptimized('price-capacity-optimized'),
  ;

  final String value;

  const SpotAllocationStrategy(this.value);

  static SpotAllocationStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SpotAllocationStrategy'));
}

/// The Spot Instance replacement strategy to use when Amazon EC2 emits a signal
/// that your Spot Instance is at an elevated risk of being interrupted. For
/// more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html">Capacity
/// rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
class SpotCapacityRebalance {
  /// The replacement strategy to use. Only available for fleets of type
  /// <code>maintain</code>.
  ///
  /// <code>launch</code> - Spot Fleet launches a new replacement Spot Instance
  /// when a rebalance notification is emitted for an existing Spot Instance in
  /// the fleet. Spot Fleet does not terminate the instances that receive a
  /// rebalance notification. You can terminate the old instances, or you can
  /// leave them running. You are charged for all instances while they are
  /// running.
  ///
  /// <code>launch-before-terminate</code> - Spot Fleet launches a new replacement
  /// Spot Instance when a rebalance notification is emitted for an existing Spot
  /// Instance in the fleet, and then, after a delay that you specify (in
  /// <code>TerminationDelay</code>), terminates the instances that received a
  /// rebalance notification.
  final ReplacementStrategy? replacementStrategy;

  /// The amount of time (in seconds) that Amazon EC2 waits before terminating the
  /// old Spot Instance after launching a new replacement Spot Instance.
  ///
  /// Required when <code>ReplacementStrategy</code> is set to
  /// <code>launch-before-terminate</code>.
  ///
  /// Not valid when <code>ReplacementStrategy</code> is set to
  /// <code>launch</code>.
  ///
  /// Valid values: Minimum value of <code>120</code> seconds. Maximum value of
  /// <code>7200</code> seconds.
  final int? terminationDelay;

  SpotCapacityRebalance({
    this.replacementStrategy,
    this.terminationDelay,
  });

  Map<String, dynamic> toJson() {
    final replacementStrategy = this.replacementStrategy;
    final terminationDelay = this.terminationDelay;
    return {
      if (replacementStrategy != null)
        'replacementStrategy': replacementStrategy.value,
      if (terminationDelay != null) 'terminationDelay': terminationDelay,
    };
  }
}

/// Describes the data feed for a Spot Instance.
class SpotDatafeedSubscription {
  /// The name of the Amazon S3 bucket where the Spot Instance data feed is
  /// located.
  final String? bucket;

  /// The fault codes for the Spot Instance request, if any.
  final SpotInstanceStateFault? fault;

  /// The Amazon Web Services account ID of the account.
  final String? ownerId;

  /// The prefix for the data feed files.
  final String? prefix;

  /// The state of the Spot Instance data feed subscription.
  final DatafeedSubscriptionState? state;

  SpotDatafeedSubscription({
    this.bucket,
    this.fault,
    this.ownerId,
    this.prefix,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final fault = this.fault;
    final ownerId = this.ownerId;
    final prefix = this.prefix;
    final state = this.state;
    return {
      if (bucket != null) 'bucket': bucket,
      if (fault != null) 'fault': fault,
      if (ownerId != null) 'ownerId': ownerId,
      if (prefix != null) 'prefix': prefix,
      if (state != null) 'state': state.value,
    };
  }
}

/// Describes the launch specification for one or more Spot Instances. If you
/// include On-Demand capacity in your fleet request or want to specify an EFA
/// network device, you can't use <code>SpotFleetLaunchSpecification</code>; you
/// must use <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html">LaunchTemplateConfig</a>.
class SpotFleetLaunchSpecification {
  /// Deprecated.
  final String? addressingType;

  /// One or more block devices that are mapped to the Spot Instances. You can't
  /// specify both a snapshot ID and an encryption value. This is because only
  /// blank volumes can be encrypted on creation. If a snapshot is the basis for a
  /// volume, it is not blank and its encryption status is used for the volume
  /// encryption status.
  final List<BlockDeviceMapping>? blockDeviceMappings;

  /// Indicates whether the instances are optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS Optimized instance.
  ///
  /// Default: <code>false</code>
  final bool? ebsOptimized;

  /// The IAM instance profile.
  final IamInstanceProfileSpecification? iamInstanceProfile;

  /// The ID of the AMI.
  final String? imageId;

  /// The attributes for the instance types. When you specify instance attributes,
  /// Amazon EC2 will identify instance types with those attributes.
  /// <note>
  /// If you specify <code>InstanceRequirements</code>, you can't specify
  /// <code>InstanceType</code>.
  /// </note>
  final InstanceRequirements? instanceRequirements;

  /// The instance type.
  final InstanceType? instanceType;

  /// The ID of the kernel.
  final String? kernelId;

  /// The name of the key pair.
  final String? keyName;

  /// Enable or disable monitoring for the instances.
  final SpotFleetMonitoring? monitoring;

  /// The network interfaces.
  /// <note>
  /// <code>SpotFleetLaunchSpecification</code> does not support Elastic Fabric
  /// Adapter (EFA). You must use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html">LaunchTemplateConfig</a>
  /// instead.
  /// </note>
  final List<InstanceNetworkInterfaceSpecification>? networkInterfaces;

  /// The placement information.
  final SpotPlacement? placement;

  /// The ID of the RAM disk. Some kernels require additional drivers at launch.
  /// Check the kernel requirements for information about whether you need to
  /// specify a RAM disk. To find kernel requirements, refer to the Amazon Web
  /// Services Resource Center and search for the kernel ID.
  final String? ramdiskId;

  /// The security groups.
  ///
  /// If you specify a network interface, you must specify any security groups as
  /// part of the network interface instead of using this parameter.
  final List<GroupIdentifier>? securityGroups;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? spotPrice;

  /// The IDs of the subnets in which to launch the instances. To specify multiple
  /// subnets, separate them using commas; for example, "subnet-1234abcdeexample1,
  /// subnet-0987cdef6example2".
  ///
  /// If you specify a network interface, you must specify any subnets as part of
  /// the network interface instead of using this parameter.
  final String? subnetId;

  /// The tags to apply during creation.
  final List<SpotFleetTagSpecification>? tagSpecifications;

  /// The base64-encoded user data that instances use when starting up. User data
  /// is limited to 16 KB.
  final String? userData;

  /// The number of units provided by the specified instance type. These are the
  /// same units that you chose to set the target capacity in terms of instances,
  /// or a performance characteristic such as vCPUs, memory, or I/O.
  ///
  /// If the target capacity divided by this value is not a whole number, Amazon
  /// EC2 rounds the number of instances to the next whole number. If this value
  /// is not specified, the default is 1.
  final double? weightedCapacity;

  SpotFleetLaunchSpecification({
    this.addressingType,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceRequirements,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroups,
    this.spotPrice,
    this.subnetId,
    this.tagSpecifications,
    this.userData,
    this.weightedCapacity,
  });

  Map<String, dynamic> toJson() {
    final addressingType = this.addressingType;
    final blockDeviceMappings = this.blockDeviceMappings;
    final ebsOptimized = this.ebsOptimized;
    final iamInstanceProfile = this.iamInstanceProfile;
    final imageId = this.imageId;
    final instanceRequirements = this.instanceRequirements;
    final instanceType = this.instanceType;
    final kernelId = this.kernelId;
    final keyName = this.keyName;
    final monitoring = this.monitoring;
    final networkInterfaces = this.networkInterfaces;
    final placement = this.placement;
    final ramdiskId = this.ramdiskId;
    final securityGroups = this.securityGroups;
    final spotPrice = this.spotPrice;
    final subnetId = this.subnetId;
    final tagSpecifications = this.tagSpecifications;
    final userData = this.userData;
    final weightedCapacity = this.weightedCapacity;
    return {
      if (addressingType != null) 'addressingType': addressingType,
      if (blockDeviceMappings != null)
        'blockDeviceMapping': blockDeviceMappings,
      if (ebsOptimized != null) 'ebsOptimized': ebsOptimized,
      if (iamInstanceProfile != null) 'iamInstanceProfile': iamInstanceProfile,
      if (imageId != null) 'imageId': imageId,
      if (instanceRequirements != null)
        'instanceRequirements': instanceRequirements,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (kernelId != null) 'kernelId': kernelId,
      if (keyName != null) 'keyName': keyName,
      if (monitoring != null) 'monitoring': monitoring,
      if (networkInterfaces != null) 'networkInterfaceSet': networkInterfaces,
      if (placement != null) 'placement': placement,
      if (ramdiskId != null) 'ramdiskId': ramdiskId,
      if (securityGroups != null) 'groupSet': securityGroups,
      if (spotPrice != null) 'spotPrice': spotPrice,
      if (subnetId != null) 'subnetId': subnetId,
      if (tagSpecifications != null) 'tagSpecificationSet': tagSpecifications,
      if (userData != null) 'userData': userData,
      if (weightedCapacity != null) 'weightedCapacity': weightedCapacity,
    };
  }
}

/// Describes whether monitoring is enabled.
class SpotFleetMonitoring {
  /// Enables monitoring for the instance.
  ///
  /// Default: <code>false</code>
  final bool? enabled;

  SpotFleetMonitoring({
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'enabled': enabled,
    };
  }
}

/// Describes a Spot Fleet request.
class SpotFleetRequestConfig {
  /// The progress of the Spot Fleet request. If there is an error, the status is
  /// <code>error</code>. After all requests are placed, the status is
  /// <code>pending_fulfillment</code>. If the size of the fleet is equal to or
  /// greater than its target capacity, the status is <code>fulfilled</code>. If
  /// the size of the fleet is decreased, the status is
  /// <code>pending_termination</code> while Spot Instances are terminating.
  final ActivityStatus? activityStatus;

  /// The creation date and time of the request.
  final DateTime? createTime;

  /// The configuration of the Spot Fleet request.
  final SpotFleetRequestConfigData? spotFleetRequestConfig;

  /// The ID of the Spot Fleet request.
  final String? spotFleetRequestId;

  /// The state of the Spot Fleet request.
  final BatchState? spotFleetRequestState;

  /// The tags for a Spot Fleet resource.
  final List<Tag>? tags;

  SpotFleetRequestConfig({
    this.activityStatus,
    this.createTime,
    this.spotFleetRequestConfig,
    this.spotFleetRequestId,
    this.spotFleetRequestState,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final activityStatus = this.activityStatus;
    final createTime = this.createTime;
    final spotFleetRequestConfig = this.spotFleetRequestConfig;
    final spotFleetRequestId = this.spotFleetRequestId;
    final spotFleetRequestState = this.spotFleetRequestState;
    final tags = this.tags;
    return {
      if (activityStatus != null) 'activityStatus': activityStatus.value,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (spotFleetRequestConfig != null)
        'spotFleetRequestConfig': spotFleetRequestConfig,
      if (spotFleetRequestId != null) 'spotFleetRequestId': spotFleetRequestId,
      if (spotFleetRequestState != null)
        'spotFleetRequestState': spotFleetRequestState.value,
      if (tags != null) 'tagSet': tags,
    };
  }
}

/// Describes the configuration of a Spot Fleet request.
class SpotFleetRequestConfigData {
  /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM)
  /// role that grants the Spot Fleet the permission to request, launch,
  /// terminate, and tag instances on your behalf. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites">Spot
  /// Fleet prerequisites</a> in the <i>Amazon EC2 User Guide</i>. Spot Fleet can
  /// terminate Spot Instances on your behalf when you cancel its Spot Fleet
  /// request using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests">CancelSpotFleetRequests</a>
  /// or when the Spot Fleet request expires, if you set
  /// <code>TerminateInstancesWithExpiration</code>.
  final String iamFleetRole;

  /// The number of units to request for the Spot Fleet. You can choose to set the
  /// target capacity in terms of instances or a performance characteristic that
  /// is important to your application workload, such as vCPUs, memory, or I/O. If
  /// the request type is <code>maintain</code>, you can specify a target capacity
  /// of 0 and add capacity later.
  final int targetCapacity;

  /// The strategy that determines how to allocate the target Spot Instance
  /// capacity across the Spot Instance pools specified by the Spot Fleet launch
  /// configuration. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-allocation-strategy.html">Allocation
  /// strategies for Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.
  /// <dl> <dt>priceCapacityOptimized (recommended)</dt> <dd>
  /// Spot Fleet identifies the pools with the highest capacity availability for
  /// the number of instances that are launching. This means that we will request
  /// Spot Instances from the pools that we believe have the lowest chance of
  /// interruption in the near term. Spot Fleet then requests Spot Instances from
  /// the lowest priced of these pools.
  /// </dd> <dt>capacityOptimized</dt> <dd>
  /// Spot Fleet identifies the pools with the highest capacity availability for
  /// the number of instances that are launching. This means that we will request
  /// Spot Instances from the pools that we believe have the lowest chance of
  /// interruption in the near term. To give certain instance types a higher
  /// chance of launching first, use <code>capacityOptimizedPrioritized</code>.
  /// Set a priority for each instance type by using the <code>Priority</code>
  /// parameter for <code>LaunchTemplateOverrides</code>. You can assign the same
  /// priority to different <code>LaunchTemplateOverrides</code>. EC2 implements
  /// the priorities on a best-effort basis, but optimizes for capacity first.
  /// <code>capacityOptimizedPrioritized</code> is supported only if your Spot
  /// Fleet uses a launch template. Note that if the
  /// <code>OnDemandAllocationStrategy</code> is set to <code>prioritized</code>,
  /// the same priority is applied when fulfilling On-Demand capacity.
  /// </dd> <dt>diversified</dt> <dd>
  /// Spot Fleet requests instances from all of the Spot Instance pools that you
  /// specify.
  /// </dd> <dt>lowestPrice</dt> <dd>
  /// Spot Fleet requests instances from the lowest priced Spot Instance pool that
  /// has available capacity. If the lowest priced pool doesn't have available
  /// capacity, the Spot Instances come from the next lowest priced pool that has
  /// available capacity. If a pool runs out of capacity before fulfilling your
  /// desired capacity, Spot Fleet will continue to fulfill your request by
  /// drawing from the next lowest priced pool. To ensure that your desired
  /// capacity is met, you might receive Spot Instances from several pools.
  /// Because this strategy only considers instance price and not capacity
  /// availability, it might lead to high interruption rates.
  /// </dd> </dl>
  /// Default: <code>lowestPrice</code>
  final AllocationStrategy? allocationStrategy;

  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of your listings. This helps to avoid duplicate listings. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String? clientToken;

  /// Reserved.
  final String? context;

  /// Indicates whether running instances should be terminated if you decrease the
  /// target capacity of the Spot Fleet request below the current size of the Spot
  /// Fleet.
  ///
  /// Supported only for fleets of type <code>maintain</code>.
  final ExcessCapacityTerminationPolicy? excessCapacityTerminationPolicy;

  /// The number of units fulfilled by this request compared to the set target
  /// capacity. You cannot set this value.
  final double? fulfilledCapacity;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final InstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The number of Spot pools across which to allocate your target Spot capacity.
  /// Valid only when Spot <b>AllocationStrategy</b> is set to
  /// <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and
  /// evenly allocates your target Spot capacity across the number of Spot pools
  /// that you specify.
  ///
  /// Note that Spot Fleet attempts to draw Spot Instances from the number of
  /// pools that you specify on a best effort basis. If a pool runs out of Spot
  /// capacity before fulfilling your target capacity, Spot Fleet will continue to
  /// fulfill your request by drawing from the next cheapest pool. To ensure that
  /// your target capacity is met, you might receive Spot Instances from more than
  /// the number of pools that you specified. Similarly, if most of the pools have
  /// no Spot capacity, you might receive your full target capacity from fewer
  /// than the number of pools that you specified.
  final int? instancePoolsToUseCount;

  /// The launch specifications for the Spot Fleet request. If you specify
  /// <code>LaunchSpecifications</code>, you can't specify
  /// <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in
  /// your request, you must use <code>LaunchTemplateConfigs</code>.
  /// <note>
  /// If an AMI specified in a launch specification is deregistered or disabled,
  /// no new instances can be launched from the AMI. For fleets of type
  /// <code>maintain</code>, the target capacity will not be maintained.
  /// </note>
  final List<SpotFleetLaunchSpecification>? launchSpecifications;

  /// The launch template and overrides. If you specify
  /// <code>LaunchTemplateConfigs</code>, you can't specify
  /// <code>LaunchSpecifications</code>. If you include On-Demand capacity in your
  /// request, you must use <code>LaunchTemplateConfigs</code>.
  final List<LaunchTemplateConfig>? launchTemplateConfigs;

  /// One or more Classic Load Balancers and target groups to attach to the Spot
  /// Fleet request. Spot Fleet registers the running Spot Instances with the
  /// specified Classic Load Balancers and target groups.
  ///
  /// With Network Load Balancers, Spot Fleet cannot register instances that have
  /// the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1,
  /// HS1, M1, M2, M3, and T1.
  final LoadBalancersConfig? loadBalancersConfig;

  /// The order of the launch template overrides to use in fulfilling On-Demand
  /// capacity. If you specify <code>lowestPrice</code>, Spot Fleet uses price to
  /// determine the order, launching the lowest price first. If you specify
  /// <code>prioritized</code>, Spot Fleet uses the priority that you assign to
  /// each Spot Fleet launch template override, launching the highest priority
  /// first. If you do not specify a value, Spot Fleet defaults to
  /// <code>lowestPrice</code>.
  final OnDemandAllocationStrategy? onDemandAllocationStrategy;

  /// The number of On-Demand units fulfilled by this request compared to the set
  /// target On-Demand capacity.
  final double? onDemandFulfilledCapacity;

  /// The maximum amount per hour for On-Demand Instances that you're willing to
  /// pay. You can use the <code>onDemandMaxTotalPrice</code> parameter, the
  /// <code>spotMaxTotalPrice</code> parameter, or both parameters to ensure that
  /// your fleet cost does not exceed your budget. If you set a maximum price per
  /// hour for the On-Demand Instances and Spot Instances in your request, Spot
  /// Fleet will launch instances until it reaches the maximum amount you're
  /// willing to pay. When the maximum amount you're willing to pay is reached,
  /// the fleet stops launching instances even if it hasn’t met the target
  /// capacity.
  /// <note>
  /// If your fleet includes T instances that are configured as
  /// <code>unlimited</code>, and if their average CPU usage exceeds the baseline
  /// utilization, you will incur a charge for surplus credits. The
  /// <code>onDemandMaxTotalPrice</code> does not account for surplus credits,
  /// and, if you use surplus credits, your final cost might be higher than what
  /// you specified for <code>onDemandMaxTotalPrice</code>. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits">Surplus
  /// credits can incur charges</a> in the <i>EC2 User Guide</i>.
  /// </note>
  final String? onDemandMaxTotalPrice;

  /// The number of On-Demand units to request. You can choose to set the target
  /// capacity in terms of instances or a performance characteristic that is
  /// important to your application workload, such as vCPUs, memory, or I/O. If
  /// the request type is <code>maintain</code>, you can specify a target capacity
  /// of 0 and add capacity later.
  final int? onDemandTargetCapacity;

  /// Indicates whether Spot Fleet should replace unhealthy instances.
  final bool? replaceUnhealthyInstances;

  /// The strategies for managing your Spot Instances that are at an elevated risk
  /// of being interrupted.
  final SpotMaintenanceStrategies? spotMaintenanceStrategies;

  /// The maximum amount per hour for Spot Instances that you're willing to pay.
  /// You can use the <code>spotMaxTotalPrice</code> parameter, the
  /// <code>onDemandMaxTotalPrice</code> parameter, or both parameters to ensure
  /// that your fleet cost does not exceed your budget. If you set a maximum price
  /// per hour for the On-Demand Instances and Spot Instances in your request,
  /// Spot Fleet will launch instances until it reaches the maximum amount you're
  /// willing to pay. When the maximum amount you're willing to pay is reached,
  /// the fleet stops launching instances even if it hasn’t met the target
  /// capacity.
  /// <note>
  /// If your fleet includes T instances that are configured as
  /// <code>unlimited</code>, and if their average CPU usage exceeds the baseline
  /// utilization, you will incur a charge for surplus credits. The
  /// <code>spotMaxTotalPrice</code> does not account for surplus credits, and, if
  /// you use surplus credits, your final cost might be higher than what you
  /// specified for <code>spotMaxTotalPrice</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits">Surplus
  /// credits can incur charges</a> in the <i>EC2 User Guide</i>.
  /// </note>
  final String? spotMaxTotalPrice;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? spotPrice;

  /// The key-value pair for tagging the Spot Fleet request on creation. The value
  /// for <code>ResourceType</code> must be <code>spot-fleet-request</code>,
  /// otherwise the Spot Fleet request fails. To tag instances at launch, specify
  /// the tags in the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch
  /// template</a> (valid only if you use <code>LaunchTemplateConfigs</code>) or
  /// in the <code> <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html">SpotFleetTagSpecification</a>
  /// </code> (valid only if you use <code>LaunchSpecifications</code>). For
  /// information about tagging after launch, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tag
  /// your resources</a>.
  final List<TagSpecification>? tagSpecifications;

  /// The unit for the target capacity. You can specify this parameter only when
  /// using attribute-based instance type selection.
  ///
  /// Default: <code>units</code> (the number of instances)
  final TargetCapacityUnitType? targetCapacityUnitType;

  /// Indicates whether running Spot Instances are terminated when the Spot Fleet
  /// request expires.
  final bool? terminateInstancesWithExpiration;

  /// The type of request. Indicates whether the Spot Fleet only requests the
  /// target capacity or also attempts to maintain it. When this value is
  /// <code>request</code>, the Spot Fleet only places the required requests. It
  /// does not attempt to replenish Spot Instances if capacity is diminished, nor
  /// does it submit requests in alternative Spot pools if capacity is not
  /// available. When this value is <code>maintain</code>, the Spot Fleet
  /// maintains the target capacity. The Spot Fleet places the required requests
  /// to meet capacity and automatically replenishes any interrupted instances.
  /// Default: <code>maintain</code>. <code>instant</code> is listed but is not
  /// used by Spot Fleet.
  final FleetType? type;

  /// The start date and time of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). By
  /// default, Amazon EC2 starts fulfilling the request immediately.
  final DateTime? validFrom;

  /// The end date and time of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). After the
  /// end date and time, no new Spot Instance requests are placed or able to
  /// fulfill the request. If no value is specified, the Spot Fleet request
  /// remains until you cancel it.
  final DateTime? validUntil;

  SpotFleetRequestConfigData({
    required this.iamFleetRole,
    required this.targetCapacity,
    this.allocationStrategy,
    this.clientToken,
    this.context,
    this.excessCapacityTerminationPolicy,
    this.fulfilledCapacity,
    this.instanceInterruptionBehavior,
    this.instancePoolsToUseCount,
    this.launchSpecifications,
    this.launchTemplateConfigs,
    this.loadBalancersConfig,
    this.onDemandAllocationStrategy,
    this.onDemandFulfilledCapacity,
    this.onDemandMaxTotalPrice,
    this.onDemandTargetCapacity,
    this.replaceUnhealthyInstances,
    this.spotMaintenanceStrategies,
    this.spotMaxTotalPrice,
    this.spotPrice,
    this.tagSpecifications,
    this.targetCapacityUnitType,
    this.terminateInstancesWithExpiration,
    this.type,
    this.validFrom,
    this.validUntil,
  });

  Map<String, dynamic> toJson() {
    final iamFleetRole = this.iamFleetRole;
    final targetCapacity = this.targetCapacity;
    final allocationStrategy = this.allocationStrategy;
    final clientToken = this.clientToken;
    final context = this.context;
    final excessCapacityTerminationPolicy =
        this.excessCapacityTerminationPolicy;
    final fulfilledCapacity = this.fulfilledCapacity;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final instancePoolsToUseCount = this.instancePoolsToUseCount;
    final launchSpecifications = this.launchSpecifications;
    final launchTemplateConfigs = this.launchTemplateConfigs;
    final loadBalancersConfig = this.loadBalancersConfig;
    final onDemandAllocationStrategy = this.onDemandAllocationStrategy;
    final onDemandFulfilledCapacity = this.onDemandFulfilledCapacity;
    final onDemandMaxTotalPrice = this.onDemandMaxTotalPrice;
    final onDemandTargetCapacity = this.onDemandTargetCapacity;
    final replaceUnhealthyInstances = this.replaceUnhealthyInstances;
    final spotMaintenanceStrategies = this.spotMaintenanceStrategies;
    final spotMaxTotalPrice = this.spotMaxTotalPrice;
    final spotPrice = this.spotPrice;
    final tagSpecifications = this.tagSpecifications;
    final targetCapacityUnitType = this.targetCapacityUnitType;
    final terminateInstancesWithExpiration =
        this.terminateInstancesWithExpiration;
    final type = this.type;
    final validFrom = this.validFrom;
    final validUntil = this.validUntil;
    return {
      'iamFleetRole': iamFleetRole,
      'targetCapacity': targetCapacity,
      if (allocationStrategy != null)
        'allocationStrategy': allocationStrategy.value,
      if (clientToken != null) 'clientToken': clientToken,
      if (context != null) 'context': context,
      if (excessCapacityTerminationPolicy != null)
        'excessCapacityTerminationPolicy':
            excessCapacityTerminationPolicy.value,
      if (fulfilledCapacity != null) 'fulfilledCapacity': fulfilledCapacity,
      if (instanceInterruptionBehavior != null)
        'instanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (instancePoolsToUseCount != null)
        'instancePoolsToUseCount': instancePoolsToUseCount,
      if (launchSpecifications != null)
        'launchSpecifications': launchSpecifications,
      if (launchTemplateConfigs != null)
        'launchTemplateConfigs': launchTemplateConfigs,
      if (loadBalancersConfig != null)
        'loadBalancersConfig': loadBalancersConfig,
      if (onDemandAllocationStrategy != null)
        'onDemandAllocationStrategy': onDemandAllocationStrategy.value,
      if (onDemandFulfilledCapacity != null)
        'onDemandFulfilledCapacity': onDemandFulfilledCapacity,
      if (onDemandMaxTotalPrice != null)
        'onDemandMaxTotalPrice': onDemandMaxTotalPrice,
      if (onDemandTargetCapacity != null)
        'onDemandTargetCapacity': onDemandTargetCapacity,
      if (replaceUnhealthyInstances != null)
        'replaceUnhealthyInstances': replaceUnhealthyInstances,
      if (spotMaintenanceStrategies != null)
        'spotMaintenanceStrategies': spotMaintenanceStrategies,
      if (spotMaxTotalPrice != null) 'spotMaxTotalPrice': spotMaxTotalPrice,
      if (spotPrice != null) 'spotPrice': spotPrice,
      if (tagSpecifications != null) 'TagSpecification': tagSpecifications,
      if (targetCapacityUnitType != null)
        'targetCapacityUnitType': targetCapacityUnitType.value,
      if (terminateInstancesWithExpiration != null)
        'terminateInstancesWithExpiration': terminateInstancesWithExpiration,
      if (type != null) 'type': type.value,
      if (validFrom != null) 'validFrom': iso8601ToJson(validFrom),
      if (validUntil != null) 'validUntil': iso8601ToJson(validUntil),
    };
  }
}

/// The tags for a Spot Fleet resource.
class SpotFleetTagSpecification {
  /// The type of resource. Currently, the only resource type that is supported is
  /// <code>instance</code>. To tag the Spot Fleet request on creation, use the
  /// <code>TagSpecifications</code> parameter in <code> <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html">SpotFleetRequestConfigData</a>
  /// </code>.
  final ResourceType? resourceType;

  /// The tags.
  final List<Tag>? tags;

  SpotFleetTagSpecification({
    this.resourceType,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final resourceType = this.resourceType;
    final tags = this.tags;
    return {
      if (resourceType != null) 'resourceType': resourceType.value,
      if (tags != null) 'tag': tags,
    };
  }
}

enum SpotInstanceInterruptionBehavior {
  hibernate('hibernate'),
  stop('stop'),
  terminate('terminate'),
  ;

  final String value;

  const SpotInstanceInterruptionBehavior(this.value);

  static SpotInstanceInterruptionBehavior fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SpotInstanceInterruptionBehavior'));
}

/// Describes a Spot Instance request.
class SpotInstanceRequest {
  /// Deprecated.
  final String? actualBlockHourlyPrice;

  /// The Availability Zone group. If you specify the same Availability Zone group
  /// for all Spot Instance requests, all Spot Instances are launched in the same
  /// Availability Zone.
  final String? availabilityZoneGroup;

  /// Deprecated.
  final int? blockDurationMinutes;

  /// The date and time when the Spot Instance request was created, in UTC format
  /// (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? createTime;

  /// The fault codes for the Spot Instance request, if any.
  final SpotInstanceStateFault? fault;

  /// The instance ID, if an instance has been launched to fulfill the Spot
  /// Instance request.
  final String? instanceId;

  /// The behavior when a Spot Instance is interrupted.
  final InstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The instance launch group. Launch groups are Spot Instances that launch
  /// together and terminate together.
  final String? launchGroup;

  /// Additional information for launching instances.
  final LaunchSpecification? launchSpecification;

  /// The Availability Zone in which the request is launched.
  final String? launchedAvailabilityZone;

  /// The product description associated with the Spot Instance.
  final RIProductDescription? productDescription;

  /// The ID of the Spot Instance request.
  final String? spotInstanceRequestId;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? spotPrice;

  /// The state of the Spot Instance request. Spot request status information
  /// helps track your Spot Instance requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot
  /// request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  final SpotInstanceState? state;

  /// The status code and status message describing the Spot Instance request.
  final SpotInstanceStatus? status;

  /// Any tags assigned to the resource.
  final List<Tag>? tags;

  /// The Spot Instance request type.
  final SpotInstanceType? type;

  /// The start date of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The request
  /// becomes active at this date and time.
  final DateTime? validFrom;

  /// The end date of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// <ul>
  /// <li>
  /// For a persistent request, the request remains active until the
  /// <code>validUntil</code> date and time is reached. Otherwise, the request
  /// remains active until you cancel it.
  /// </li>
  /// <li>
  /// For a one-time request, the request remains active until all instances
  /// launch, the request is canceled, or the <code>validUntil</code> date and
  /// time is reached. By default, the request is valid for 7 days from the date
  /// the request was created.
  /// </li>
  /// </ul>
  final DateTime? validUntil;

  SpotInstanceRequest({
    this.actualBlockHourlyPrice,
    this.availabilityZoneGroup,
    this.blockDurationMinutes,
    this.createTime,
    this.fault,
    this.instanceId,
    this.instanceInterruptionBehavior,
    this.launchGroup,
    this.launchSpecification,
    this.launchedAvailabilityZone,
    this.productDescription,
    this.spotInstanceRequestId,
    this.spotPrice,
    this.state,
    this.status,
    this.tags,
    this.type,
    this.validFrom,
    this.validUntil,
  });

  Map<String, dynamic> toJson() {
    final actualBlockHourlyPrice = this.actualBlockHourlyPrice;
    final availabilityZoneGroup = this.availabilityZoneGroup;
    final blockDurationMinutes = this.blockDurationMinutes;
    final createTime = this.createTime;
    final fault = this.fault;
    final instanceId = this.instanceId;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final launchGroup = this.launchGroup;
    final launchSpecification = this.launchSpecification;
    final launchedAvailabilityZone = this.launchedAvailabilityZone;
    final productDescription = this.productDescription;
    final spotInstanceRequestId = this.spotInstanceRequestId;
    final spotPrice = this.spotPrice;
    final state = this.state;
    final status = this.status;
    final tags = this.tags;
    final type = this.type;
    final validFrom = this.validFrom;
    final validUntil = this.validUntil;
    return {
      if (actualBlockHourlyPrice != null)
        'actualBlockHourlyPrice': actualBlockHourlyPrice,
      if (availabilityZoneGroup != null)
        'availabilityZoneGroup': availabilityZoneGroup,
      if (blockDurationMinutes != null)
        'blockDurationMinutes': blockDurationMinutes,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (fault != null) 'fault': fault,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceInterruptionBehavior != null)
        'instanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (launchGroup != null) 'launchGroup': launchGroup,
      if (launchSpecification != null)
        'launchSpecification': launchSpecification,
      if (launchedAvailabilityZone != null)
        'launchedAvailabilityZone': launchedAvailabilityZone,
      if (productDescription != null)
        'productDescription': productDescription.value,
      if (spotInstanceRequestId != null)
        'spotInstanceRequestId': spotInstanceRequestId,
      if (spotPrice != null) 'spotPrice': spotPrice,
      if (state != null) 'state': state.value,
      if (status != null) 'status': status,
      if (tags != null) 'tagSet': tags,
      if (type != null) 'type': type.value,
      if (validFrom != null) 'validFrom': iso8601ToJson(validFrom),
      if (validUntil != null) 'validUntil': iso8601ToJson(validUntil),
    };
  }
}

enum SpotInstanceState {
  open('open'),
  active('active'),
  closed('closed'),
  cancelled('cancelled'),
  failed('failed'),
  disabled('disabled'),
  ;

  final String value;

  const SpotInstanceState(this.value);

  static SpotInstanceState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SpotInstanceState'));
}

/// Describes a Spot Instance state change.
class SpotInstanceStateFault {
  /// The reason code for the Spot Instance state change.
  final String? code;

  /// The message for the Spot Instance state change.
  final String? message;

  SpotInstanceStateFault({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

/// Describes the status of a Spot Instance request.
class SpotInstanceStatus {
  /// The status code. For a list of status codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html#spot-instance-request-status-understand">Spot
  /// request status codes</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  final String? code;

  /// The description for the status code.
  final String? message;

  /// The date and time of the most recent status update, in UTC format (for
  /// example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? updateTime;

  SpotInstanceStatus({
    this.code,
    this.message,
    this.updateTime,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    final updateTime = this.updateTime;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
      if (updateTime != null) 'updateTime': iso8601ToJson(updateTime),
    };
  }
}

enum SpotInstanceType {
  oneTime('one-time'),
  persistent('persistent'),
  ;

  final String value;

  const SpotInstanceType(this.value);

  static SpotInstanceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SpotInstanceType'));
}

/// The strategies for managing your Spot Instances that are at an elevated risk
/// of being interrupted.
class SpotMaintenanceStrategies {
  /// The Spot Instance replacement strategy to use when Amazon EC2 emits a signal
  /// that your Spot Instance is at an elevated risk of being interrupted. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html">Capacity
  /// rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  final SpotCapacityRebalance? capacityRebalance;

  SpotMaintenanceStrategies({
    this.capacityRebalance,
  });

  Map<String, dynamic> toJson() {
    final capacityRebalance = this.capacityRebalance;
    return {
      if (capacityRebalance != null) 'capacityRebalance': capacityRebalance,
    };
  }
}

/// The options for Spot Instances.
class SpotMarketOptions {
  /// Deprecated.
  final int? blockDurationMinutes;

  /// The behavior when a Spot Instance is interrupted.
  ///
  /// If <code>Configured</code> (for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_HibernationOptionsRequest.html">
  /// <code>HibernationOptions</code> </a>) is set to <code>true</code>, the
  /// <code>InstanceInterruptionBehavior</code> parameter is automatically set to
  /// <code>hibernate</code>. If you set it to <code>stop</code> or
  /// <code>terminate</code>, you'll get an error.
  ///
  /// If <code>Configured</code> (for <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_HibernationOptionsRequest.html">
  /// <code>HibernationOptions</code> </a>) is set to <code>false</code> or
  /// <code>null</code>, the <code>InstanceInterruptionBehavior</code> parameter
  /// is automatically set to <code>terminate</code>. You can also set it to
  /// <code>stop</code> or <code>hibernate</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/interruption-behavior.html">Interruption
  /// behavior</a> in the <i>Amazon EC2 User Guide</i>.
  final InstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The maximum hourly price that you're willing to pay for a Spot Instance. We
  /// do not recommend using this parameter because it can lead to increased
  /// interruptions. If you do not specify this parameter, you will pay the
  /// current Spot price.
  /// <important>
  /// If you specify a maximum price, your Spot Instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? maxPrice;

  /// The Spot Instance request type. For <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances">RunInstances</a>,
  /// persistent Spot Instance requests are only supported when the instance
  /// interruption behavior is either <code>hibernate</code> or <code>stop</code>.
  final SpotInstanceType? spotInstanceType;

  /// The end date of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). Supported
  /// only for persistent requests.
  ///
  /// <ul>
  /// <li>
  /// For a persistent request, the request remains active until the
  /// <code>ValidUntil</code> date and time is reached. Otherwise, the request
  /// remains active until you cancel it.
  /// </li>
  /// <li>
  /// For a one-time request, <code>ValidUntil</code> is not supported. The
  /// request remains active until all instances launch or you cancel the request.
  /// </li>
  /// </ul>
  final DateTime? validUntil;

  SpotMarketOptions({
    this.blockDurationMinutes,
    this.instanceInterruptionBehavior,
    this.maxPrice,
    this.spotInstanceType,
    this.validUntil,
  });

  Map<String, dynamic> toJson() {
    final blockDurationMinutes = this.blockDurationMinutes;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final maxPrice = this.maxPrice;
    final spotInstanceType = this.spotInstanceType;
    final validUntil = this.validUntil;
    return {
      if (blockDurationMinutes != null)
        'BlockDurationMinutes': blockDurationMinutes,
      if (instanceInterruptionBehavior != null)
        'InstanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (maxPrice != null) 'MaxPrice': maxPrice,
      if (spotInstanceType != null) 'SpotInstanceType': spotInstanceType.value,
      if (validUntil != null) 'ValidUntil': iso8601ToJson(validUntil),
    };
  }
}

/// Describes the configuration of Spot Instances in an EC2 Fleet.
class SpotOptions {
  /// The strategy that determines how to allocate the target Spot Instance
  /// capacity across the Spot Instance pools specified by the EC2 Fleet launch
  /// configuration. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html">Allocation
  /// strategies for Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.
  /// <dl> <dt>price-capacity-optimized (recommended)</dt> <dd>
  /// EC2 Fleet identifies the pools with the highest capacity availability for
  /// the number of instances that are launching. This means that we will request
  /// Spot Instances from the pools that we believe have the lowest chance of
  /// interruption in the near term. EC2 Fleet then requests Spot Instances from
  /// the lowest priced of these pools.
  /// </dd> <dt>capacity-optimized</dt> <dd>
  /// EC2 Fleet identifies the pools with the highest capacity availability for
  /// the number of instances that are launching. This means that we will request
  /// Spot Instances from the pools that we believe have the lowest chance of
  /// interruption in the near term. To give certain instance types a higher
  /// chance of launching first, use <code>capacity-optimized-prioritized</code>.
  /// Set a priority for each instance type by using the <code>Priority</code>
  /// parameter for <code>LaunchTemplateOverrides</code>. You can assign the same
  /// priority to different <code>LaunchTemplateOverrides</code>. EC2 implements
  /// the priorities on a best-effort basis, but optimizes for capacity first.
  /// <code>capacity-optimized-prioritized</code> is supported only if your EC2
  /// Fleet uses a launch template. Note that if the On-Demand
  /// <code>AllocationStrategy</code> is set to <code>prioritized</code>, the same
  /// priority is applied when fulfilling On-Demand capacity.
  /// </dd> <dt>diversified</dt> <dd>
  /// EC2 Fleet requests instances from all of the Spot Instance pools that you
  /// specify.
  /// </dd> <dt>lowest-price</dt> <dd>
  /// EC2 Fleet requests instances from the lowest priced Spot Instance pool that
  /// has available capacity. If the lowest priced pool doesn't have available
  /// capacity, the Spot Instances come from the next lowest priced pool that has
  /// available capacity. If a pool runs out of capacity before fulfilling your
  /// desired capacity, EC2 Fleet will continue to fulfill your request by drawing
  /// from the next lowest priced pool. To ensure that your desired capacity is
  /// met, you might receive Spot Instances from several pools. Because this
  /// strategy only considers instance price and not capacity availability, it
  /// might lead to high interruption rates.
  /// </dd> </dl>
  /// Default: <code>lowest-price</code>
  final SpotAllocationStrategy? allocationStrategy;

  /// The behavior when a Spot Instance is interrupted.
  ///
  /// Default: <code>terminate</code>
  final SpotInstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The number of Spot pools across which to allocate your target Spot capacity.
  /// Supported only when <code>AllocationStrategy</code> is set to
  /// <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and
  /// evenly allocates your target Spot capacity across the number of Spot pools
  /// that you specify.
  ///
  /// Note that EC2 Fleet attempts to draw Spot Instances from the number of pools
  /// that you specify on a best effort basis. If a pool runs out of Spot capacity
  /// before fulfilling your target capacity, EC2 Fleet will continue to fulfill
  /// your request by drawing from the next cheapest pool. To ensure that your
  /// target capacity is met, you might receive Spot Instances from more than the
  /// number of pools that you specified. Similarly, if most of the pools have no
  /// Spot capacity, you might receive your full target capacity from fewer than
  /// the number of pools that you specified.
  final int? instancePoolsToUseCount;

  /// The strategies for managing your workloads on your Spot Instances that will
  /// be interrupted. Currently only the capacity rebalance strategy is available.
  final FleetSpotMaintenanceStrategies? maintenanceStrategies;

  /// The maximum amount per hour for Spot Instances that you're willing to pay.
  /// We do not recommend using this parameter because it can lead to increased
  /// interruptions. If you do not specify this parameter, you will pay the
  /// current Spot price.
  /// <important>
  /// If you specify a maximum price, your Spot Instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important> <note>
  /// If your fleet includes T instances that are configured as
  /// <code>unlimited</code>, and if their average CPU usage exceeds the baseline
  /// utilization, you will incur a charge for surplus credits. The
  /// <code>maxTotalPrice</code> does not account for surplus credits, and, if you
  /// use surplus credits, your final cost might be higher than what you specified
  /// for <code>maxTotalPrice</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits">Surplus
  /// credits can incur charges</a> in the <i>EC2 User Guide</i>.
  /// </note>
  final String? maxTotalPrice;

  /// The minimum target capacity for Spot Instances in the fleet. If the minimum
  /// target capacity is not reached, the fleet launches no instances.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  ///
  /// At least one of the following must be specified:
  /// <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code>
  final int? minTargetCapacity;

  /// Indicates that the fleet launches all Spot Instances into a single
  /// Availability Zone.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all Spot
  /// Instances in the fleet.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleInstanceType;

  SpotOptions({
    this.allocationStrategy,
    this.instanceInterruptionBehavior,
    this.instancePoolsToUseCount,
    this.maintenanceStrategies,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final instancePoolsToUseCount = this.instancePoolsToUseCount;
    final maintenanceStrategies = this.maintenanceStrategies;
    final maxTotalPrice = this.maxTotalPrice;
    final minTargetCapacity = this.minTargetCapacity;
    final singleAvailabilityZone = this.singleAvailabilityZone;
    final singleInstanceType = this.singleInstanceType;
    return {
      if (allocationStrategy != null)
        'allocationStrategy': allocationStrategy.value,
      if (instanceInterruptionBehavior != null)
        'instanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (instancePoolsToUseCount != null)
        'instancePoolsToUseCount': instancePoolsToUseCount,
      if (maintenanceStrategies != null)
        'maintenanceStrategies': maintenanceStrategies,
      if (maxTotalPrice != null) 'maxTotalPrice': maxTotalPrice,
      if (minTargetCapacity != null) 'minTargetCapacity': minTargetCapacity,
      if (singleAvailabilityZone != null)
        'singleAvailabilityZone': singleAvailabilityZone,
      if (singleInstanceType != null) 'singleInstanceType': singleInstanceType,
    };
  }
}

/// Describes the configuration of Spot Instances in an EC2 Fleet request.
class SpotOptionsRequest {
  /// The strategy that determines how to allocate the target Spot Instance
  /// capacity across the Spot Instance pools specified by the EC2 Fleet launch
  /// configuration. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html">Allocation
  /// strategies for Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.
  /// <dl> <dt>price-capacity-optimized (recommended)</dt> <dd>
  /// EC2 Fleet identifies the pools with the highest capacity availability for
  /// the number of instances that are launching. This means that we will request
  /// Spot Instances from the pools that we believe have the lowest chance of
  /// interruption in the near term. EC2 Fleet then requests Spot Instances from
  /// the lowest priced of these pools.
  /// </dd> <dt>capacity-optimized</dt> <dd>
  /// EC2 Fleet identifies the pools with the highest capacity availability for
  /// the number of instances that are launching. This means that we will request
  /// Spot Instances from the pools that we believe have the lowest chance of
  /// interruption in the near term. To give certain instance types a higher
  /// chance of launching first, use <code>capacity-optimized-prioritized</code>.
  /// Set a priority for each instance type by using the <code>Priority</code>
  /// parameter for <code>LaunchTemplateOverrides</code>. You can assign the same
  /// priority to different <code>LaunchTemplateOverrides</code>. EC2 implements
  /// the priorities on a best-effort basis, but optimizes for capacity first.
  /// <code>capacity-optimized-prioritized</code> is supported only if your EC2
  /// Fleet uses a launch template. Note that if the On-Demand
  /// <code>AllocationStrategy</code> is set to <code>prioritized</code>, the same
  /// priority is applied when fulfilling On-Demand capacity.
  /// </dd> <dt>diversified</dt> <dd>
  /// EC2 Fleet requests instances from all of the Spot Instance pools that you
  /// specify.
  /// </dd> <dt>lowest-price</dt> <dd>
  /// EC2 Fleet requests instances from the lowest priced Spot Instance pool that
  /// has available capacity. If the lowest priced pool doesn't have available
  /// capacity, the Spot Instances come from the next lowest priced pool that has
  /// available capacity. If a pool runs out of capacity before fulfilling your
  /// desired capacity, EC2 Fleet will continue to fulfill your request by drawing
  /// from the next lowest priced pool. To ensure that your desired capacity is
  /// met, you might receive Spot Instances from several pools. Because this
  /// strategy only considers instance price and not capacity availability, it
  /// might lead to high interruption rates.
  /// </dd> </dl>
  /// Default: <code>lowest-price</code>
  final SpotAllocationStrategy? allocationStrategy;

  /// The behavior when a Spot Instance is interrupted.
  ///
  /// Default: <code>terminate</code>
  final SpotInstanceInterruptionBehavior? instanceInterruptionBehavior;

  /// The number of Spot pools across which to allocate your target Spot capacity.
  /// Supported only when Spot <code>AllocationStrategy</code> is set to
  /// <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and
  /// evenly allocates your target Spot capacity across the number of Spot pools
  /// that you specify.
  ///
  /// Note that EC2 Fleet attempts to draw Spot Instances from the number of pools
  /// that you specify on a best effort basis. If a pool runs out of Spot capacity
  /// before fulfilling your target capacity, EC2 Fleet will continue to fulfill
  /// your request by drawing from the next cheapest pool. To ensure that your
  /// target capacity is met, you might receive Spot Instances from more than the
  /// number of pools that you specified. Similarly, if most of the pools have no
  /// Spot capacity, you might receive your full target capacity from fewer than
  /// the number of pools that you specified.
  final int? instancePoolsToUseCount;

  /// The strategies for managing your Spot Instances that are at an elevated risk
  /// of being interrupted.
  final FleetSpotMaintenanceStrategiesRequest? maintenanceStrategies;

  /// The maximum amount per hour for Spot Instances that you're willing to pay.
  /// We do not recommend using this parameter because it can lead to increased
  /// interruptions. If you do not specify this parameter, you will pay the
  /// current Spot price.
  /// <important>
  /// If you specify a maximum price, your Spot Instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important> <note>
  /// If your fleet includes T instances that are configured as
  /// <code>unlimited</code>, and if their average CPU usage exceeds the baseline
  /// utilization, you will incur a charge for surplus credits. The
  /// <code>MaxTotalPrice</code> does not account for surplus credits, and, if you
  /// use surplus credits, your final cost might be higher than what you specified
  /// for <code>MaxTotalPrice</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits">Surplus
  /// credits can incur charges</a> in the <i>EC2 User Guide</i>.
  /// </note>
  final String? maxTotalPrice;

  /// The minimum target capacity for Spot Instances in the fleet. If the minimum
  /// target capacity is not reached, the fleet launches no instances.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  ///
  /// At least one of the following must be specified:
  /// <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code>
  final int? minTargetCapacity;

  /// Indicates that the fleet launches all Spot Instances into a single
  /// Availability Zone.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all Spot
  /// Instances in the fleet.
  ///
  /// Supported only for fleets of type <code>instant</code>.
  final bool? singleInstanceType;

  SpotOptionsRequest({
    this.allocationStrategy,
    this.instanceInterruptionBehavior,
    this.instancePoolsToUseCount,
    this.maintenanceStrategies,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final instanceInterruptionBehavior = this.instanceInterruptionBehavior;
    final instancePoolsToUseCount = this.instancePoolsToUseCount;
    final maintenanceStrategies = this.maintenanceStrategies;
    final maxTotalPrice = this.maxTotalPrice;
    final minTargetCapacity = this.minTargetCapacity;
    final singleAvailabilityZone = this.singleAvailabilityZone;
    final singleInstanceType = this.singleInstanceType;
    return {
      if (allocationStrategy != null)
        'AllocationStrategy': allocationStrategy.value,
      if (instanceInterruptionBehavior != null)
        'InstanceInterruptionBehavior': instanceInterruptionBehavior.value,
      if (instancePoolsToUseCount != null)
        'InstancePoolsToUseCount': instancePoolsToUseCount,
      if (maintenanceStrategies != null)
        'MaintenanceStrategies': maintenanceStrategies,
      if (maxTotalPrice != null) 'MaxTotalPrice': maxTotalPrice,
      if (minTargetCapacity != null) 'MinTargetCapacity': minTargetCapacity,
      if (singleAvailabilityZone != null)
        'SingleAvailabilityZone': singleAvailabilityZone,
      if (singleInstanceType != null) 'SingleInstanceType': singleInstanceType,
    };
  }
}

/// Describes Spot Instance placement.
class SpotPlacement {
  /// The Availability Zone.
  ///
  /// [Spot Fleet only] To specify multiple Availability Zones, separate them
  /// using commas; for example, "us-west-2a, us-west-2b".
  final String? availabilityZone;

  /// The name of the placement group.
  final String? groupName;

  /// The tenancy of the instance (if the instance is running in a VPC). An
  /// instance with a tenancy of <code>dedicated</code> runs on single-tenant
  /// hardware. The <code>host</code> tenancy is not supported for Spot Instances.
  final Tenancy? tenancy;

  SpotPlacement({
    this.availabilityZone,
    this.groupName,
    this.tenancy,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final groupName = this.groupName;
    final tenancy = this.tenancy;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (groupName != null) 'groupName': groupName,
      if (tenancy != null) 'tenancy': tenancy.value,
    };
  }
}

/// The Spot placement score for this Region or Availability Zone. The score is
/// calculated based on the assumption that the <code>capacity-optimized</code>
/// allocation strategy is used and that all of the Availability Zones in the
/// Region can be used.
class SpotPlacementScore {
  /// The Availability Zone.
  final String? availabilityZoneId;

  /// The Region.
  final String? region;

  /// The placement score, on a scale from <code>1</code> to <code>10</code>. A
  /// score of <code>10</code> indicates that your Spot request is highly likely
  /// to succeed in this Region or Availability Zone. A score of <code>1</code>
  /// indicates that your Spot request is not likely to succeed.
  final int? score;

  SpotPlacementScore({
    this.availabilityZoneId,
    this.region,
    this.score,
  });

  Map<String, dynamic> toJson() {
    final availabilityZoneId = this.availabilityZoneId;
    final region = this.region;
    final score = this.score;
    return {
      if (availabilityZoneId != null) 'availabilityZoneId': availabilityZoneId,
      if (region != null) 'region': region,
      if (score != null) 'score': score,
    };
  }
}

/// The maximum price per unit hour that you are willing to pay for a Spot
/// Instance. We do not recommend using this parameter because it can lead to
/// increased interruptions. If you do not specify this parameter, you will pay
/// the current Spot price.
/// <important>
/// If you specify a maximum price, your instances will be interrupted more
/// frequently than if you do not specify this parameter.
/// </important>
class SpotPrice {
  /// The Availability Zone.
  final String? availabilityZone;

  /// The instance type.
  final InstanceType? instanceType;

  /// A general description of the AMI.
  final RIProductDescription? productDescription;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. We do not recommend using this parameter because it can lead to
  /// increased interruptions. If you do not specify this parameter, you will pay
  /// the current Spot price.
  /// <important>
  /// If you specify a maximum price, your instances will be interrupted more
  /// frequently than if you do not specify this parameter.
  /// </important>
  final String? spotPrice;

  /// The date and time the request was created, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime? timestamp;

  SpotPrice({
    this.availabilityZone,
    this.instanceType,
    this.productDescription,
    this.spotPrice,
    this.timestamp,
  });

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final instanceType = this.instanceType;
    final productDescription = this.productDescription;
    final spotPrice = this.spotPrice;
    final timestamp = this.timestamp;
    return {
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (instanceType != null) 'instanceType': instanceType.value,
      if (productDescription != null)
        'productDescription': productDescription.value,
      if (spotPrice != null) 'spotPrice': spotPrice,
      if (timestamp != null) 'timestamp': iso8601ToJson(timestamp),
    };
  }
}

enum SpreadLevel {
  host('host'),
  rack('rack'),
  ;

  final String value;

  const SpreadLevel(this.value);

  static SpreadLevel fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SpreadLevel'));
}

/// Describes a stale rule in a security group.
class StaleIpPermission {
  /// If the protocol is TCP or UDP, this is the start of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
  final int? fromPort;

  /// The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
  /// <code>icmpv6</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers)</a>.
  final String? ipProtocol;

  /// The IP ranges. Not applicable for stale security group rules.
  final List<String>? ipRanges;

  /// The prefix list IDs. Not applicable for stale security group rules.
  final List<String>? prefixListIds;

  /// If the protocol is TCP or UDP, this is the end of the port range. If the
  /// protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes).
  final int? toPort;

  /// The security group pairs. Returns the ID of the referenced security group
  /// and VPC, and the ID and status of the VPC peering connection.
  final List<UserIdGroupPair>? userIdGroupPairs;

  StaleIpPermission({
    this.fromPort,
    this.ipProtocol,
    this.ipRanges,
    this.prefixListIds,
    this.toPort,
    this.userIdGroupPairs,
  });

  Map<String, dynamic> toJson() {
    final fromPort = this.fromPort;
    final ipProtocol = this.ipProtocol;
    final ipRanges = this.ipRanges;
    final prefixListIds = this.prefixListIds;
    final toPort = this.toPort;
    final userIdGroupPairs = this.userIdGroupPairs;
    return {
      if (fromPort != null) 'fromPort': fromPort,
      if (ipProtocol != null) 'ipProtocol': ipProtocol,
      if (ipRanges != null) 'ipRanges': ipRanges,
      if (prefixListIds != null) 'prefixListIds': prefixListIds,
      if (toPort != null) 'toPort': toPort,
      if (userIdGroupPairs != null) 'groups': userIdGroupPairs,
    };
  }
}

/// Describes a stale security group (a security group that contains stale
/// rules).
class StaleSecurityGroup {
  /// The description of the security group.
  final String? description;

  /// The ID of the security group.
  final String? groupId;

  /// The name of the security group.
  final String? groupName;

  /// Information about the stale inbound rules in the security group.
  final List<StaleIpPermission>? staleIpPermissions;

  /// Information about the stale outbound rules in the security group.
  final List<StaleIpPermission>? staleIpPermissionsEgress;

  /// The ID of the VPC for the security group.
  final String? vpcId;

  StaleSecurityGroup({
    this.description,
    this.groupId,
    this.groupName,
    this.staleIpPermissions,
    this.staleIpPermissionsEgress,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final staleIpPermissions = this.staleIpPermissions;
    final staleIpPermissionsEgress = this.staleIpPermissionsEgress;
    final vpcId = this.vpcId;
    return {
      if (description != null) 'description': description,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (staleIpPermissions != null) 'staleIpPermissions': staleIpPermissions,
      if (staleIpPermissionsEgress != null)
        'staleIpPermissionsEgress': staleIpPermissionsEgress,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

class StartInstancesResult {
  /// Information about the started instances.
  final List<InstanceStateChange>? startingInstances;

  StartInstancesResult({
    this.startingInstances,
  });

  Map<String, dynamic> toJson() {
    final startingInstances = this.startingInstances;
    return {
      if (startingInstances != null) 'instancesSet': startingInstances,
    };
  }
}

class StartNetworkInsightsAccessScopeAnalysisResult {
  /// The Network Access Scope analysis.
  final NetworkInsightsAccessScopeAnalysis? networkInsightsAccessScopeAnalysis;

  StartNetworkInsightsAccessScopeAnalysisResult({
    this.networkInsightsAccessScopeAnalysis,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAccessScopeAnalysis =
        this.networkInsightsAccessScopeAnalysis;
    return {
      if (networkInsightsAccessScopeAnalysis != null)
        'networkInsightsAccessScopeAnalysis':
            networkInsightsAccessScopeAnalysis,
    };
  }
}

class StartNetworkInsightsAnalysisResult {
  /// Information about the network insights analysis.
  final NetworkInsightsAnalysis? networkInsightsAnalysis;

  StartNetworkInsightsAnalysisResult({
    this.networkInsightsAnalysis,
  });

  Map<String, dynamic> toJson() {
    final networkInsightsAnalysis = this.networkInsightsAnalysis;
    return {
      if (networkInsightsAnalysis != null)
        'networkInsightsAnalysis': networkInsightsAnalysis,
    };
  }
}

class StartVpcEndpointServicePrivateDnsVerificationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool? returnValue;

  StartVpcEndpointServicePrivateDnsVerificationResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

enum State {
  pendingAcceptance('PendingAcceptance'),
  pending('Pending'),
  available('Available'),
  deleting('Deleting'),
  deleted('Deleted'),
  rejected('Rejected'),
  failed('Failed'),
  expired('Expired'),
  ;

  final String value;

  const State(this.value);

  static State fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum State'));
}

/// Describes a state change.
class StateReason {
  /// The reason code for the state change.
  final String? code;

  /// The message for the state change.
  ///
  /// <ul>
  /// <li>
  /// <code>Server.InsufficientInstanceCapacity</code>: There was insufficient
  /// capacity available to satisfy the launch request.
  /// </li>
  /// <li>
  /// <code>Server.InternalError</code>: An internal error caused the instance to
  /// terminate during launch.
  /// </li>
  /// <li>
  /// <code>Server.ScheduledStop</code>: The instance was stopped due to a
  /// scheduled retirement.
  /// </li>
  /// <li>
  /// <code>Server.SpotInstanceShutdown</code>: The instance was stopped because
  /// the number of Spot requests with a maximum price equal to or higher than the
  /// Spot price exceeded available capacity or because of an increase in the Spot
  /// price.
  /// </li>
  /// <li>
  /// <code>Server.SpotInstanceTermination</code>: The instance was terminated
  /// because the number of Spot requests with a maximum price equal to or higher
  /// than the Spot price exceeded available capacity or because of an increase in
  /// the Spot price.
  /// </li>
  /// <li>
  /// <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down
  /// from the operating system of the instance.
  /// </li>
  /// <li>
  /// <code>Client.InstanceTerminated</code>: The instance was terminated or
  /// rebooted during AMI creation.
  /// </li>
  /// <li>
  /// <code>Client.InternalError</code>: A client error caused the instance to
  /// terminate during launch.
  /// </li>
  /// <li>
  /// <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot was not
  /// found.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiatedHibernate</code>: Hibernation was initiated on the
  /// instance.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiatedShutdown</code>: The instance was shut down using
  /// the Amazon EC2 API.
  /// </li>
  /// <li>
  /// <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS
  /// volumes or total storage was exceeded. Decrease usage or request an increase
  /// in your account limits.
  /// </li>
  /// </ul>
  final String? message;

  StateReason({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

enum StaticSourcesSupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const StaticSourcesSupportValue(this.value);

  static StaticSourcesSupportValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum StaticSourcesSupportValue'));
}

enum StatisticType {
  p50('p50'),
  ;

  final String value;

  const StatisticType(this.value);

  static StatisticType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum StatisticType'));
}

enum Status {
  moveInProgress('MoveInProgress'),
  inVpc('InVpc'),
  inClassic('InClassic'),
  ;

  final String value;

  const Status(this.value);

  static Status fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Status'));
}

enum StatusName {
  reachability('reachability'),
  ;

  final String value;

  const StatusName(this.value);

  static StatusName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum StatusName'));
}

enum StatusType {
  passed('passed'),
  failed('failed'),
  insufficientData('insufficient-data'),
  initializing('initializing'),
  ;

  final String value;

  const StatusType(this.value);

  static StatusType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum StatusType'));
}

class StopInstancesResult {
  /// Information about the stopped instances.
  final List<InstanceStateChange>? stoppingInstances;

  StopInstancesResult({
    this.stoppingInstances,
  });

  Map<String, dynamic> toJson() {
    final stoppingInstances = this.stoppingInstances;
    return {
      if (stoppingInstances != null) 'instancesSet': stoppingInstances,
    };
  }
}

/// Describes the storage location for an instance store-backed AMI.
class Storage {
  /// An Amazon S3 storage location.
  final S3Storage? s3;

  Storage({
    this.s3,
  });

  Map<String, dynamic> toJson() {
    final s3 = this.s3;
    return {
      if (s3 != null) 'S3': s3,
    };
  }
}

/// Describes a storage location in Amazon S3.
class StorageLocation {
  /// The name of the S3 bucket.
  final String? bucket;

  /// The key.
  final String? key;

  StorageLocation({
    this.bucket,
    this.key,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final key = this.key;
    return {
      if (bucket != null) 'Bucket': bucket,
      if (key != null) 'Key': key,
    };
  }
}

enum StorageTier {
  archive('archive'),
  standard('standard'),
  ;

  final String value;

  const StorageTier(this.value);

  static StorageTier fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum StorageTier'));
}

/// The information about the AMI store task, including the progress of the
/// task.
class StoreImageTaskResult {
  /// The ID of the AMI that is being stored.
  final String? amiId;

  /// The name of the Amazon S3 bucket that contains the stored AMI object.
  final String? bucket;

  /// The progress of the task as a percentage.
  final int? progressPercentage;

  /// The name of the stored AMI object in the bucket.
  final String? s3objectKey;

  /// If the tasks fails, the reason for the failure is returned. If the task
  /// succeeds, <code>null</code> is returned.
  final String? storeTaskFailureReason;

  /// The state of the store task (<code>InProgress</code>,
  /// <code>Completed</code>, or <code>Failed</code>).
  final String? storeTaskState;

  /// The time the task started.
  final DateTime? taskStartTime;

  StoreImageTaskResult({
    this.amiId,
    this.bucket,
    this.progressPercentage,
    this.s3objectKey,
    this.storeTaskFailureReason,
    this.storeTaskState,
    this.taskStartTime,
  });

  Map<String, dynamic> toJson() {
    final amiId = this.amiId;
    final bucket = this.bucket;
    final progressPercentage = this.progressPercentage;
    final s3objectKey = this.s3objectKey;
    final storeTaskFailureReason = this.storeTaskFailureReason;
    final storeTaskState = this.storeTaskState;
    final taskStartTime = this.taskStartTime;
    return {
      if (amiId != null) 'amiId': amiId,
      if (bucket != null) 'bucket': bucket,
      if (progressPercentage != null) 'progressPercentage': progressPercentage,
      if (s3objectKey != null) 's3objectKey': s3objectKey,
      if (storeTaskFailureReason != null)
        'storeTaskFailureReason': storeTaskFailureReason,
      if (storeTaskState != null) 'storeTaskState': storeTaskState,
      if (taskStartTime != null) 'taskStartTime': iso8601ToJson(taskStartTime),
    };
  }
}

/// Describes a subnet.
class Subnet {
  /// Indicates whether a network interface created in this subnet (including a
  /// network interface created by <a>RunInstances</a>) receives an IPv6 address.
  final bool? assignIpv6AddressOnCreation;

  /// The Availability Zone of the subnet.
  final String? availabilityZone;

  /// The AZ ID of the subnet.
  final String? availabilityZoneId;

  /// The number of unused private IPv4 addresses in the subnet. The IPv4
  /// addresses for any stopped instances are considered unavailable.
  final int? availableIpAddressCount;

  /// The IPv4 CIDR block assigned to the subnet.
  final String? cidrBlock;

  /// The customer-owned IPv4 address pool associated with the subnet.
  final String? customerOwnedIpv4Pool;

  /// Indicates whether this is the default subnet for the Availability Zone.
  final bool? defaultForAz;

  /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in
  /// this subnet should return synthetic IPv6 addresses for IPv4-only
  /// destinations.
  final bool? enableDns64;

  /// Indicates the device position for local network interfaces in this subnet.
  /// For example, <code>1</code> indicates local network interfaces in this
  /// subnet are the secondary network interface (eth1).
  final int? enableLniAtDeviceIndex;

  /// Information about the IPv6 CIDR blocks associated with the subnet.
  final List<SubnetIpv6CidrBlockAssociation>? ipv6CidrBlockAssociationSet;

  /// Indicates whether this is an IPv6 only subnet.
  final bool? ipv6Native;

  /// Indicates whether a network interface created in this subnet (including a
  /// network interface created by <a>RunInstances</a>) receives a customer-owned
  /// IPv4 address.
  final bool? mapCustomerOwnedIpOnLaunch;

  /// Indicates whether instances launched in this subnet receive a public IPv4
  /// address.
  ///
  /// Amazon Web Services charges for all public IPv4 addresses, including public
  /// IPv4 addresses associated with running instances and Elastic IP addresses.
  /// For more information, see the <i>Public IPv4 Address</i> tab on the <a
  /// href="http://aws.amazon.com/vpc/pricing/">Amazon VPC pricing page</a>.
  final bool? mapPublicIpOnLaunch;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The ID of the Amazon Web Services account that owns the subnet.
  final String? ownerId;

  /// The type of hostnames to assign to instances in the subnet at launch. An
  /// instance hostname is based on the IPv4 address or ID of the instance.
  final PrivateDnsNameOptionsOnLaunch? privateDnsNameOptionsOnLaunch;

  /// The current state of the subnet.
  final SubnetState? state;

  /// The Amazon Resource Name (ARN) of the subnet.
  final String? subnetArn;

  /// The ID of the subnet.
  final String? subnetId;

  /// Any tags assigned to the subnet.
  final List<Tag>? tags;

  /// The ID of the VPC the subnet is in.
  final String? vpcId;

  Subnet({
    this.assignIpv6AddressOnCreation,
    this.availabilityZone,
    this.availabilityZoneId,
    this.availableIpAddressCount,
    this.cidrBlock,
    this.customerOwnedIpv4Pool,
    this.defaultForAz,
    this.enableDns64,
    this.enableLniAtDeviceIndex,
    this.ipv6CidrBlockAssociationSet,
    this.ipv6Native,
    this.mapCustomerOwnedIpOnLaunch,
    this.mapPublicIpOnLaunch,
    this.outpostArn,
    this.ownerId,
    this.privateDnsNameOptionsOnLaunch,
    this.state,
    this.subnetArn,
    this.subnetId,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final assignIpv6AddressOnCreation = this.assignIpv6AddressOnCreation;
    final availabilityZone = this.availabilityZone;
    final availabilityZoneId = this.availabilityZoneId;
    final availableIpAddressCount = this.availableIpAddressCount;
    final cidrBlock = this.cidrBlock;
    final customerOwnedIpv4Pool = this.customerOwnedIpv4Pool;
    final defaultForAz = this.defaultForAz;
    final enableDns64 = this.enableDns64;
    final enableLniAtDeviceIndex = this.enableLniAtDeviceIndex;
    final ipv6CidrBlockAssociationSet = this.ipv6CidrBlockAssociationSet;
    final ipv6Native = this.ipv6Native;
    final mapCustomerOwnedIpOnLaunch = this.mapCustomerOwnedIpOnLaunch;
    final mapPublicIpOnLaunch = this.mapPublicIpOnLaunch;
    final outpostArn = this.outpostArn;
    final ownerId = this.ownerId;
    final privateDnsNameOptionsOnLaunch = this.privateDnsNameOptionsOnLaunch;
    final state = this.state;
    final subnetArn = this.subnetArn;
    final subnetId = this.subnetId;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (assignIpv6AddressOnCreation != null)
        'assignIpv6AddressOnCreation': assignIpv6AddressOnCreation,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (availabilityZoneId != null) 'availabilityZoneId': availabilityZoneId,
      if (availableIpAddressCount != null)
        'availableIpAddressCount': availableIpAddressCount,
      if (cidrBlock != null) 'cidrBlock': cidrBlock,
      if (customerOwnedIpv4Pool != null)
        'customerOwnedIpv4Pool': customerOwnedIpv4Pool,
      if (defaultForAz != null) 'defaultForAz': defaultForAz,
      if (enableDns64 != null) 'enableDns64': enableDns64,
      if (enableLniAtDeviceIndex != null)
        'enableLniAtDeviceIndex': enableLniAtDeviceIndex,
      if (ipv6CidrBlockAssociationSet != null)
        'ipv6CidrBlockAssociationSet': ipv6CidrBlockAssociationSet,
      if (ipv6Native != null) 'ipv6Native': ipv6Native,
      if (mapCustomerOwnedIpOnLaunch != null)
        'mapCustomerOwnedIpOnLaunch': mapCustomerOwnedIpOnLaunch,
      if (mapPublicIpOnLaunch != null)
        'mapPublicIpOnLaunch': mapPublicIpOnLaunch,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (privateDnsNameOptionsOnLaunch != null)
        'privateDnsNameOptionsOnLaunch': privateDnsNameOptionsOnLaunch,
      if (state != null) 'state': state.value,
      if (subnetArn != null) 'subnetArn': subnetArn,
      if (subnetId != null) 'subnetId': subnetId,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes the subnet association with the transit gateway multicast domain.
class SubnetAssociation {
  /// The state of the subnet association.
  final TransitGatewayMulitcastDomainAssociationState? state;

  /// The ID of the subnet.
  final String? subnetId;

  SubnetAssociation({
    this.state,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final subnetId = this.subnetId;
    return {
      if (state != null) 'state': state.value,
      if (subnetId != null) 'subnetId': subnetId,
    };
  }
}

/// Describes the state of a CIDR block.
class SubnetCidrBlockState {
  /// The state of a CIDR block.
  final SubnetCidrBlockStateCode? state;

  /// A message about the status of the CIDR block, if applicable.
  final String? statusMessage;

  SubnetCidrBlockState({
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum SubnetCidrBlockStateCode {
  associating('associating'),
  associated('associated'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  failing('failing'),
  failed('failed'),
  ;

  final String value;

  const SubnetCidrBlockStateCode(this.value);

  static SubnetCidrBlockStateCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SubnetCidrBlockStateCode'));
}

/// Describes a subnet CIDR reservation.
class SubnetCidrReservation {
  /// The CIDR that has been reserved.
  final String? cidr;

  /// The description assigned to the subnet CIDR reservation.
  final String? description;

  /// The ID of the account that owns the subnet CIDR reservation.
  final String? ownerId;

  /// The type of reservation.
  final SubnetCidrReservationType? reservationType;

  /// The ID of the subnet CIDR reservation.
  final String? subnetCidrReservationId;

  /// The ID of the subnet.
  final String? subnetId;

  /// The tags assigned to the subnet CIDR reservation.
  final List<Tag>? tags;

  SubnetCidrReservation({
    this.cidr,
    this.description,
    this.ownerId,
    this.reservationType,
    this.subnetCidrReservationId,
    this.subnetId,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final cidr = this.cidr;
    final description = this.description;
    final ownerId = this.ownerId;
    final reservationType = this.reservationType;
    final subnetCidrReservationId = this.subnetCidrReservationId;
    final subnetId = this.subnetId;
    final tags = this.tags;
    return {
      if (cidr != null) 'cidr': cidr,
      if (description != null) 'description': description,
      if (ownerId != null) 'ownerId': ownerId,
      if (reservationType != null) 'reservationType': reservationType.value,
      if (subnetCidrReservationId != null)
        'subnetCidrReservationId': subnetCidrReservationId,
      if (subnetId != null) 'subnetId': subnetId,
      if (tags != null) 'tagSet': tags,
    };
  }
}

enum SubnetCidrReservationType {
  prefix('prefix'),
  explicit('explicit'),
  ;

  final String value;

  const SubnetCidrReservationType(this.value);

  static SubnetCidrReservationType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SubnetCidrReservationType'));
}

/// Describes the configuration of a subnet for a VPC endpoint.
class SubnetConfiguration {
  /// The IPv4 address to assign to the endpoint network interface in the subnet.
  /// You must provide an IPv4 address if the VPC endpoint supports IPv4.
  ///
  /// If you specify an IPv4 address when modifying a VPC endpoint, we replace the
  /// existing endpoint network interface with a new endpoint network interface
  /// with this IP address. This process temporarily disconnects the subnet and
  /// the VPC endpoint.
  final String? ipv4;

  /// The IPv6 address to assign to the endpoint network interface in the subnet.
  /// You must provide an IPv6 address if the VPC endpoint supports IPv6.
  ///
  /// If you specify an IPv6 address when modifying a VPC endpoint, we replace the
  /// existing endpoint network interface with a new endpoint network interface
  /// with this IP address. This process temporarily disconnects the subnet and
  /// the VPC endpoint.
  final String? ipv6;

  /// The ID of the subnet.
  final String? subnetId;

  SubnetConfiguration({
    this.ipv4,
    this.ipv6,
    this.subnetId,
  });

  Map<String, dynamic> toJson() {
    final ipv4 = this.ipv4;
    final ipv6 = this.ipv6;
    final subnetId = this.subnetId;
    return {
      if (ipv4 != null) 'Ipv4': ipv4,
      if (ipv6 != null) 'Ipv6': ipv6,
      if (subnetId != null) 'SubnetId': subnetId,
    };
  }
}

/// Describes an association between a subnet and an IPv6 CIDR block.
class SubnetIpv6CidrBlockAssociation {
  /// The ID of the association.
  final String? associationId;

  /// The IPv6 CIDR block.
  final String? ipv6CidrBlock;

  /// The state of the CIDR block.
  final SubnetCidrBlockState? ipv6CidrBlockState;

  SubnetIpv6CidrBlockAssociation({
    this.associationId,
    this.ipv6CidrBlock,
    this.ipv6CidrBlockState,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final ipv6CidrBlock = this.ipv6CidrBlock;
    final ipv6CidrBlockState = this.ipv6CidrBlockState;
    return {
      if (associationId != null) 'associationId': associationId,
      if (ipv6CidrBlock != null) 'ipv6CidrBlock': ipv6CidrBlock,
      if (ipv6CidrBlockState != null) 'ipv6CidrBlockState': ipv6CidrBlockState,
    };
  }
}

enum SubnetState {
  pending('pending'),
  available('available'),
  unavailable('unavailable'),
  ;

  final String value;

  const SubnetState(this.value);

  static SubnetState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SubnetState'));
}

/// Describes an Infrastructure Performance subscription.
class Subscription {
  /// The Region or Availability Zone that's the target for the subscription. For
  /// example, <code>eu-west-1</code>.
  final String? destination;

  /// The metric used for the subscription.
  final MetricType? metric;

  /// The data aggregation time for the subscription.
  final PeriodType? period;

  /// The Region or Availability Zone that's the source for the subscription. For
  /// example, <code>us-east-1</code>.
  final String? source;

  /// The statistic used for the subscription.
  final StatisticType? statistic;

  Subscription({
    this.destination,
    this.metric,
    this.period,
    this.source,
    this.statistic,
  });

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final metric = this.metric;
    final period = this.period;
    final source = this.source;
    final statistic = this.statistic;
    return {
      if (destination != null) 'destination': destination,
      if (metric != null) 'metric': metric.value,
      if (period != null) 'period': period.value,
      if (source != null) 'source': source,
      if (statistic != null) 'statistic': statistic.value,
    };
  }
}

/// Describes the burstable performance instance whose credit option for CPU
/// usage was successfully modified.
class SuccessfulInstanceCreditSpecificationItem {
  /// The ID of the instance.
  final String? instanceId;

  SuccessfulInstanceCreditSpecificationItem({
    this.instanceId,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    return {
      if (instanceId != null) 'instanceId': instanceId,
    };
  }
}

/// Describes a Reserved Instance whose queued purchase was successfully
/// deleted.
class SuccessfulQueuedPurchaseDeletion {
  /// The ID of the Reserved Instance.
  final String? reservedInstancesId;

  SuccessfulQueuedPurchaseDeletion({
    this.reservedInstancesId,
  });

  Map<String, dynamic> toJson() {
    final reservedInstancesId = this.reservedInstancesId;
    return {
      if (reservedInstancesId != null)
        'reservedInstancesId': reservedInstancesId,
    };
  }
}

enum SummaryStatus {
  ok('ok'),
  impaired('impaired'),
  insufficientData('insufficient-data'),
  notApplicable('not-applicable'),
  initializing('initializing'),
  ;

  final String value;

  const SummaryStatus(this.value);

  static SummaryStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SummaryStatus'));
}

enum SupportedAdditionalProcessorFeature {
  amdSevSnp('amd-sev-snp'),
  ;

  final String value;

  const SupportedAdditionalProcessorFeature(this.value);

  static SupportedAdditionalProcessorFeature fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SupportedAdditionalProcessorFeature'));
}

/// Describes a tag.
class Tag {
  /// The key of the tag.
  ///
  /// Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode
  /// characters. May not begin with <code>aws:</code>.
  final String? key;

  /// The value of the tag.
  ///
  /// Constraints: Tag values are case-sensitive and accept a maximum of 256
  /// Unicode characters.
  final String? value;

  Tag({
    this.key,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'key': key,
      if (value != null) 'value': value,
    };
  }
}

/// Describes a tag.
class TagDescription {
  /// The tag key.
  final String? key;

  /// The ID of the resource.
  final String? resourceId;

  /// The resource type.
  final ResourceType? resourceType;

  /// The tag value.
  final String? value;

  TagDescription({
    this.key,
    this.resourceId,
    this.resourceType,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final value = this.value;
    return {
      if (key != null) 'key': key,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (value != null) 'value': value,
    };
  }
}

/// The tags to apply to a resource when the resource is being created. When you
/// specify a tag, you must specify the resource type to tag, otherwise the
/// request will fail.
/// <note>
/// The <code>Valid Values</code> lists all the resource types that can be
/// tagged. However, the action you're using might not support tagging all of
/// these resource types. If you try to tag a resource type that is unsupported
/// for the action you're using, you'll get an error.
/// </note>
class TagSpecification {
  /// The type of resource to tag on creation.
  final ResourceType? resourceType;

  /// The tags to apply to the resource.
  final List<Tag>? tags;

  TagSpecification({
    this.resourceType,
    this.tags,
  });

  Map<String, dynamic> toJson() {
    final resourceType = this.resourceType;
    final tags = this.tags;
    return {
      if (resourceType != null) 'resourceType': resourceType.value,
      if (tags != null) 'Tag': tags,
    };
  }
}

/// The number of units to request. You can choose to set the target capacity in
/// terms of instances or a performance characteristic that is important to your
/// application workload, such as vCPUs, memory, or I/O. If the request type is
/// <code>maintain</code>, you can specify a target capacity of 0 and add
/// capacity later.
///
/// You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the
/// Spot Instance <code>MaxTotalPrice</code>, or both to ensure that your fleet
/// cost does not exceed your budget. If you set a maximum price per hour for
/// the On-Demand Instances and Spot Instances in your request, EC2 Fleet will
/// launch instances until it reaches the maximum amount that you're willing to
/// pay. When the maximum amount you're willing to pay is reached, the fleet
/// stops launching instances even if it hasn’t met the target capacity. The
/// <code>MaxTotalPrice</code> parameters are located in <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html">OnDemandOptions</a>
/// and <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions">SpotOptions</a>.
class TargetCapacitySpecification {
  /// The default target capacity type.
  final DefaultTargetCapacityType? defaultTargetCapacityType;

  /// The number of On-Demand units to request. If you specify a target capacity
  /// for Spot units, you cannot specify a target capacity for On-Demand units.
  final int? onDemandTargetCapacity;

  /// The maximum number of Spot units to launch. If you specify a target capacity
  /// for On-Demand units, you cannot specify a target capacity for Spot units.
  final int? spotTargetCapacity;

  /// The unit for the target capacity.
  final TargetCapacityUnitType? targetCapacityUnitType;

  /// The number of units to request, filled the default target capacity type.
  final int? totalTargetCapacity;

  TargetCapacitySpecification({
    this.defaultTargetCapacityType,
    this.onDemandTargetCapacity,
    this.spotTargetCapacity,
    this.targetCapacityUnitType,
    this.totalTargetCapacity,
  });

  Map<String, dynamic> toJson() {
    final defaultTargetCapacityType = this.defaultTargetCapacityType;
    final onDemandTargetCapacity = this.onDemandTargetCapacity;
    final spotTargetCapacity = this.spotTargetCapacity;
    final targetCapacityUnitType = this.targetCapacityUnitType;
    final totalTargetCapacity = this.totalTargetCapacity;
    return {
      if (defaultTargetCapacityType != null)
        'defaultTargetCapacityType': defaultTargetCapacityType.value,
      if (onDemandTargetCapacity != null)
        'onDemandTargetCapacity': onDemandTargetCapacity,
      if (spotTargetCapacity != null) 'spotTargetCapacity': spotTargetCapacity,
      if (targetCapacityUnitType != null)
        'targetCapacityUnitType': targetCapacityUnitType.value,
      if (totalTargetCapacity != null)
        'totalTargetCapacity': totalTargetCapacity,
    };
  }
}

/// The number of units to request. You can choose to set the target capacity as
/// the number of instances. Or you can set the target capacity to a performance
/// characteristic that is important to your application workload, such as
/// vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can
/// specify a target capacity of 0 and add capacity later.
///
/// You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the
/// Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to
/// ensure that your fleet cost does not exceed your budget. If you set a
/// maximum price per hour for the On-Demand Instances and Spot Instances in
/// your request, EC2 Fleet will launch instances until it reaches the maximum
/// amount that you're willing to pay. When the maximum amount you're willing to
/// pay is reached, the fleet stops launching instances even if it hasn't met
/// the target capacity. The <code>MaxTotalPrice</code> parameters are located
/// in <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest">OnDemandOptionsRequest</a>
/// and <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest">SpotOptionsRequest</a>.
class TargetCapacitySpecificationRequest {
  /// The number of units to request, filled using the default target capacity
  /// type.
  final int totalTargetCapacity;

  /// The default target capacity type.
  final DefaultTargetCapacityType? defaultTargetCapacityType;

  /// The number of On-Demand units to request.
  final int? onDemandTargetCapacity;

  /// The number of Spot units to request.
  final int? spotTargetCapacity;

  /// The unit for the target capacity. You can specify this parameter only when
  /// using attributed-based instance type selection.
  ///
  /// Default: <code>units</code> (the number of instances)
  final TargetCapacityUnitType? targetCapacityUnitType;

  TargetCapacitySpecificationRequest({
    required this.totalTargetCapacity,
    this.defaultTargetCapacityType,
    this.onDemandTargetCapacity,
    this.spotTargetCapacity,
    this.targetCapacityUnitType,
  });

  Map<String, dynamic> toJson() {
    final totalTargetCapacity = this.totalTargetCapacity;
    final defaultTargetCapacityType = this.defaultTargetCapacityType;
    final onDemandTargetCapacity = this.onDemandTargetCapacity;
    final spotTargetCapacity = this.spotTargetCapacity;
    final targetCapacityUnitType = this.targetCapacityUnitType;
    return {
      'TotalTargetCapacity': totalTargetCapacity,
      if (defaultTargetCapacityType != null)
        'DefaultTargetCapacityType': defaultTargetCapacityType.value,
      if (onDemandTargetCapacity != null)
        'OnDemandTargetCapacity': onDemandTargetCapacity,
      if (spotTargetCapacity != null) 'SpotTargetCapacity': spotTargetCapacity,
      if (targetCapacityUnitType != null)
        'TargetCapacityUnitType': targetCapacityUnitType.value,
    };
  }
}

enum TargetCapacityUnitType {
  vcpu('vcpu'),
  memoryMib('memory-mib'),
  units('units'),
  ;

  final String value;

  const TargetCapacityUnitType(this.value);

  static TargetCapacityUnitType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TargetCapacityUnitType'));
}

/// Information about the Convertible Reserved Instance offering.
class TargetConfiguration {
  /// The number of instances the Convertible Reserved Instance offering can be
  /// applied to. This parameter is reserved and cannot be specified in a request
  final int? instanceCount;

  /// The ID of the Convertible Reserved Instance offering.
  final String? offeringId;

  TargetConfiguration({
    this.instanceCount,
    this.offeringId,
  });

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final offeringId = this.offeringId;
    return {
      if (instanceCount != null) 'instanceCount': instanceCount,
      if (offeringId != null) 'offeringId': offeringId,
    };
  }
}

/// Details about the target configuration.
class TargetConfigurationRequest {
  /// The Convertible Reserved Instance offering ID.
  final String offeringId;

  /// The number of instances the Convertible Reserved Instance offering can be
  /// applied to. This parameter is reserved and cannot be specified in a request
  final int? instanceCount;

  TargetConfigurationRequest({
    required this.offeringId,
    this.instanceCount,
  });

  Map<String, dynamic> toJson() {
    final offeringId = this.offeringId;
    final instanceCount = this.instanceCount;
    return {
      'OfferingId': offeringId,
      if (instanceCount != null) 'InstanceCount': instanceCount,
    };
  }
}

/// Describes a load balancer target group.
class TargetGroup {
  /// The Amazon Resource Name (ARN) of the target group.
  final String? arn;

  TargetGroup({
    this.arn,
  });

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'arn': arn,
    };
  }
}

/// Describes the target groups to attach to a Spot Fleet. Spot Fleet registers
/// the running Spot Instances with these target groups.
class TargetGroupsConfig {
  /// One or more target groups.
  final List<TargetGroup>? targetGroups;

  TargetGroupsConfig({
    this.targetGroups,
  });

  Map<String, dynamic> toJson() {
    final targetGroups = this.targetGroups;
    return {
      if (targetGroups != null) 'targetGroups': targetGroups,
    };
  }
}

/// Describes a target network associated with a Client VPN endpoint.
class TargetNetwork {
  /// The ID of the association.
  final String? associationId;

  /// The ID of the Client VPN endpoint with which the target network is
  /// associated.
  final String? clientVpnEndpointId;

  /// The IDs of the security groups applied to the target network association.
  final List<String>? securityGroups;

  /// The current state of the target network association.
  final AssociationStatus? status;

  /// The ID of the subnet specified as the target network.
  final String? targetNetworkId;

  /// The ID of the VPC in which the target network (subnet) is located.
  final String? vpcId;

  TargetNetwork({
    this.associationId,
    this.clientVpnEndpointId,
    this.securityGroups,
    this.status,
    this.targetNetworkId,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final securityGroups = this.securityGroups;
    final status = this.status;
    final targetNetworkId = this.targetNetworkId;
    final vpcId = this.vpcId;
    return {
      if (associationId != null) 'associationId': associationId,
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (securityGroups != null) 'securityGroups': securityGroups,
      if (status != null) 'status': status,
      if (targetNetworkId != null) 'targetNetworkId': targetNetworkId,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// The total value of the new Convertible Reserved Instances.
class TargetReservationValue {
  /// The total value of the Convertible Reserved Instances that make up the
  /// exchange. This is the sum of the list value, remaining upfront price, and
  /// additional upfront cost of the exchange.
  final ReservationValue? reservationValue;

  /// The configuration of the Convertible Reserved Instances that make up the
  /// exchange.
  final TargetConfiguration? targetConfiguration;

  TargetReservationValue({
    this.reservationValue,
    this.targetConfiguration,
  });

  Map<String, dynamic> toJson() {
    final reservationValue = this.reservationValue;
    final targetConfiguration = this.targetConfiguration;
    return {
      if (reservationValue != null) 'reservationValue': reservationValue,
      if (targetConfiguration != null)
        'targetConfiguration': targetConfiguration,
    };
  }
}

enum TargetStorageTier {
  archive('archive'),
  ;

  final String value;

  const TargetStorageTier(this.value);

  static TargetStorageTier fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TargetStorageTier'));
}

enum TelemetryStatus {
  up('UP'),
  down('DOWN'),
  ;

  final String value;

  const TelemetryStatus(this.value);

  static TelemetryStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TelemetryStatus'));
}

enum Tenancy {
  $default('default'),
  dedicated('dedicated'),
  host('host'),
  ;

  final String value;

  const Tenancy(this.value);

  static Tenancy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Tenancy'));
}

class TerminateClientVpnConnectionsResult {
  /// The ID of the Client VPN endpoint.
  final String? clientVpnEndpointId;

  /// The current state of the client connections.
  final List<TerminateConnectionStatus>? connectionStatuses;

  /// The user who established the terminated client connections.
  final String? username;

  TerminateClientVpnConnectionsResult({
    this.clientVpnEndpointId,
    this.connectionStatuses,
    this.username,
  });

  Map<String, dynamic> toJson() {
    final clientVpnEndpointId = this.clientVpnEndpointId;
    final connectionStatuses = this.connectionStatuses;
    final username = this.username;
    return {
      if (clientVpnEndpointId != null)
        'clientVpnEndpointId': clientVpnEndpointId,
      if (connectionStatuses != null) 'connectionStatuses': connectionStatuses,
      if (username != null) 'username': username,
    };
  }
}

/// Information about a terminated Client VPN endpoint client connection.
class TerminateConnectionStatus {
  /// The ID of the client connection.
  final String? connectionId;

  /// A message about the status of the client connection, if applicable.
  final ClientVpnConnectionStatus? currentStatus;

  /// The state of the client connection.
  final ClientVpnConnectionStatus? previousStatus;

  TerminateConnectionStatus({
    this.connectionId,
    this.currentStatus,
    this.previousStatus,
  });

  Map<String, dynamic> toJson() {
    final connectionId = this.connectionId;
    final currentStatus = this.currentStatus;
    final previousStatus = this.previousStatus;
    return {
      if (connectionId != null) 'connectionId': connectionId,
      if (currentStatus != null) 'currentStatus': currentStatus,
      if (previousStatus != null) 'previousStatus': previousStatus,
    };
  }
}

class TerminateInstancesResult {
  /// Information about the terminated instances.
  final List<InstanceStateChange>? terminatingInstances;

  TerminateInstancesResult({
    this.terminatingInstances,
  });

  Map<String, dynamic> toJson() {
    final terminatingInstances = this.terminatingInstances;
    return {
      if (terminatingInstances != null) 'instancesSet': terminatingInstances,
    };
  }
}

/// Describes a through resource statement.
class ThroughResourcesStatement {
  /// The resource statement.
  final ResourceStatement? resourceStatement;

  ThroughResourcesStatement({
    this.resourceStatement,
  });

  Map<String, dynamic> toJson() {
    final resourceStatement = this.resourceStatement;
    return {
      if (resourceStatement != null) 'resourceStatement': resourceStatement,
    };
  }
}

/// Describes a through resource statement.
class ThroughResourcesStatementRequest {
  /// The resource statement.
  final ResourceStatementRequest? resourceStatement;

  ThroughResourcesStatementRequest({
    this.resourceStatement,
  });

  Map<String, dynamic> toJson() {
    final resourceStatement = this.resourceStatement;
    return {
      if (resourceStatement != null) 'ResourceStatement': resourceStatement,
    };
  }
}

enum TieringOperationStatus {
  archivalInProgress('archival-in-progress'),
  archivalCompleted('archival-completed'),
  archivalFailed('archival-failed'),
  temporaryRestoreInProgress('temporary-restore-in-progress'),
  temporaryRestoreCompleted('temporary-restore-completed'),
  temporaryRestoreFailed('temporary-restore-failed'),
  permanentRestoreInProgress('permanent-restore-in-progress'),
  permanentRestoreCompleted('permanent-restore-completed'),
  permanentRestoreFailed('permanent-restore-failed'),
  ;

  final String value;

  const TieringOperationStatus(this.value);

  static TieringOperationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TieringOperationStatus'));
}

/// The minimum and maximum amount of total local storage, in GB.
class TotalLocalStorageGB {
  /// The maximum amount of total local storage, in GB. If this parameter is not
  /// specified, there is no maximum limit.
  final double? max;

  /// The minimum amount of total local storage, in GB. If this parameter is not
  /// specified, there is no minimum limit.
  final double? min;

  TotalLocalStorageGB({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum amount of total local storage, in GB.
class TotalLocalStorageGBRequest {
  /// The maximum amount of total local storage, in GB. To specify no maximum
  /// limit, omit this parameter.
  final double? max;

  /// The minimum amount of total local storage, in GB. To specify no minimum
  /// limit, omit this parameter.
  final double? min;

  TotalLocalStorageGBRequest({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'Max': max,
      if (min != null) 'Min': min,
    };
  }
}

enum TpmSupportValues {
  v2_0('v2.0'),
  ;

  final String value;

  const TpmSupportValues(this.value);

  static TpmSupportValues fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TpmSupportValues'));
}

enum TrafficDirection {
  ingress('ingress'),
  egress('egress'),
  ;

  final String value;

  const TrafficDirection(this.value);

  static TrafficDirection fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TrafficDirection'));
}

/// Describes the Traffic Mirror filter.
class TrafficMirrorFilter {
  /// The description of the Traffic Mirror filter.
  final String? description;

  /// Information about the egress rules that are associated with the Traffic
  /// Mirror filter.
  final List<TrafficMirrorFilterRule>? egressFilterRules;

  /// Information about the ingress rules that are associated with the Traffic
  /// Mirror filter.
  final List<TrafficMirrorFilterRule>? ingressFilterRules;

  /// The network service traffic that is associated with the Traffic Mirror
  /// filter.
  final List<TrafficMirrorNetworkService>? networkServices;

  /// The tags assigned to the Traffic Mirror filter.
  final List<Tag>? tags;

  /// The ID of the Traffic Mirror filter.
  final String? trafficMirrorFilterId;

  TrafficMirrorFilter({
    this.description,
    this.egressFilterRules,
    this.ingressFilterRules,
    this.networkServices,
    this.tags,
    this.trafficMirrorFilterId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final egressFilterRules = this.egressFilterRules;
    final ingressFilterRules = this.ingressFilterRules;
    final networkServices = this.networkServices;
    final tags = this.tags;
    final trafficMirrorFilterId = this.trafficMirrorFilterId;
    return {
      if (description != null) 'description': description,
      if (egressFilterRules != null) 'egressFilterRuleSet': egressFilterRules,
      if (ingressFilterRules != null)
        'ingressFilterRuleSet': ingressFilterRules,
      if (networkServices != null)
        'networkServiceSet': networkServices.map((e) => e.value).toList(),
      if (tags != null) 'tagSet': tags,
      if (trafficMirrorFilterId != null)
        'trafficMirrorFilterId': trafficMirrorFilterId,
    };
  }
}

/// Describes the Traffic Mirror rule.
class TrafficMirrorFilterRule {
  /// The description of the Traffic Mirror rule.
  final String? description;

  /// The destination CIDR block assigned to the Traffic Mirror rule.
  final String? destinationCidrBlock;

  /// The destination port range assigned to the Traffic Mirror rule.
  final TrafficMirrorPortRange? destinationPortRange;

  /// The protocol assigned to the Traffic Mirror rule.
  final int? protocol;

  /// The action assigned to the Traffic Mirror rule.
  final TrafficMirrorRuleAction? ruleAction;

  /// The rule number of the Traffic Mirror rule.
  final int? ruleNumber;

  /// The source CIDR block assigned to the Traffic Mirror rule.
  final String? sourceCidrBlock;

  /// The source port range assigned to the Traffic Mirror rule.
  final TrafficMirrorPortRange? sourcePortRange;

  /// The traffic direction assigned to the Traffic Mirror rule.
  final TrafficDirection? trafficDirection;

  /// The ID of the Traffic Mirror filter that the rule is associated with.
  final String? trafficMirrorFilterId;

  /// The ID of the Traffic Mirror rule.
  final String? trafficMirrorFilterRuleId;

  TrafficMirrorFilterRule({
    this.description,
    this.destinationCidrBlock,
    this.destinationPortRange,
    this.protocol,
    this.ruleAction,
    this.ruleNumber,
    this.sourceCidrBlock,
    this.sourcePortRange,
    this.trafficDirection,
    this.trafficMirrorFilterId,
    this.trafficMirrorFilterRuleId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final destinationCidrBlock = this.destinationCidrBlock;
    final destinationPortRange = this.destinationPortRange;
    final protocol = this.protocol;
    final ruleAction = this.ruleAction;
    final ruleNumber = this.ruleNumber;
    final sourceCidrBlock = this.sourceCidrBlock;
    final sourcePortRange = this.sourcePortRange;
    final trafficDirection = this.trafficDirection;
    final trafficMirrorFilterId = this.trafficMirrorFilterId;
    final trafficMirrorFilterRuleId = this.trafficMirrorFilterRuleId;
    return {
      if (description != null) 'description': description,
      if (destinationCidrBlock != null)
        'destinationCidrBlock': destinationCidrBlock,
      if (destinationPortRange != null)
        'destinationPortRange': destinationPortRange,
      if (protocol != null) 'protocol': protocol,
      if (ruleAction != null) 'ruleAction': ruleAction.value,
      if (ruleNumber != null) 'ruleNumber': ruleNumber,
      if (sourceCidrBlock != null) 'sourceCidrBlock': sourceCidrBlock,
      if (sourcePortRange != null) 'sourcePortRange': sourcePortRange,
      if (trafficDirection != null) 'trafficDirection': trafficDirection.value,
      if (trafficMirrorFilterId != null)
        'trafficMirrorFilterId': trafficMirrorFilterId,
      if (trafficMirrorFilterRuleId != null)
        'trafficMirrorFilterRuleId': trafficMirrorFilterRuleId,
    };
  }
}

enum TrafficMirrorFilterRuleField {
  destinationPortRange('destination-port-range'),
  sourcePortRange('source-port-range'),
  protocol('protocol'),
  description('description'),
  ;

  final String value;

  const TrafficMirrorFilterRuleField(this.value);

  static TrafficMirrorFilterRuleField fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrafficMirrorFilterRuleField'));
}

enum TrafficMirrorNetworkService {
  amazonDns('amazon-dns'),
  ;

  final String value;

  const TrafficMirrorNetworkService(this.value);

  static TrafficMirrorNetworkService fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrafficMirrorNetworkService'));
}

/// Describes the Traffic Mirror port range.
class TrafficMirrorPortRange {
  /// The start of the Traffic Mirror port range. This applies to the TCP and UDP
  /// protocols.
  final int? fromPort;

  /// The end of the Traffic Mirror port range. This applies to the TCP and UDP
  /// protocols.
  final int? toPort;

  TrafficMirrorPortRange({
    this.fromPort,
    this.toPort,
  });

  Map<String, dynamic> toJson() {
    final fromPort = this.fromPort;
    final toPort = this.toPort;
    return {
      if (fromPort != null) 'fromPort': fromPort,
      if (toPort != null) 'toPort': toPort,
    };
  }
}

/// Information about the Traffic Mirror filter rule port range.
class TrafficMirrorPortRangeRequest {
  /// The first port in the Traffic Mirror port range. This applies to the TCP and
  /// UDP protocols.
  final int? fromPort;

  /// The last port in the Traffic Mirror port range. This applies to the TCP and
  /// UDP protocols.
  final int? toPort;

  TrafficMirrorPortRangeRequest({
    this.fromPort,
    this.toPort,
  });

  Map<String, dynamic> toJson() {
    final fromPort = this.fromPort;
    final toPort = this.toPort;
    return {
      if (fromPort != null) 'FromPort': fromPort,
      if (toPort != null) 'ToPort': toPort,
    };
  }
}

enum TrafficMirrorRuleAction {
  accept('accept'),
  reject('reject'),
  ;

  final String value;

  const TrafficMirrorRuleAction(this.value);

  static TrafficMirrorRuleAction fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrafficMirrorRuleAction'));
}

/// Describes a Traffic Mirror session.
class TrafficMirrorSession {
  /// The description of the Traffic Mirror session.
  final String? description;

  /// The ID of the Traffic Mirror session's network interface.
  final String? networkInterfaceId;

  /// The ID of the account that owns the Traffic Mirror session.
  final String? ownerId;

  /// The number of bytes in each packet to mirror. These are the bytes after the
  /// VXLAN header. To mirror a subset, set this to the length (in bytes) to
  /// mirror. For example, if you set this value to 100, then the first 100 bytes
  /// that meet the filter criteria are copied to the target. Do not specify this
  /// parameter when you want to mirror the entire packet
  final int? packetLength;

  /// The session number determines the order in which sessions are evaluated when
  /// an interface is used by multiple sessions. The first session with a matching
  /// filter is the one that mirrors the packets.
  ///
  /// Valid values are 1-32766.
  final int? sessionNumber;

  /// The tags assigned to the Traffic Mirror session.
  final List<Tag>? tags;

  /// The ID of the Traffic Mirror filter.
  final String? trafficMirrorFilterId;

  /// The ID for the Traffic Mirror session.
  final String? trafficMirrorSessionId;

  /// The ID of the Traffic Mirror target.
  final String? trafficMirrorTargetId;

  /// The virtual network ID associated with the Traffic Mirror session.
  final int? virtualNetworkId;

  TrafficMirrorSession({
    this.description,
    this.networkInterfaceId,
    this.ownerId,
    this.packetLength,
    this.sessionNumber,
    this.tags,
    this.trafficMirrorFilterId,
    this.trafficMirrorSessionId,
    this.trafficMirrorTargetId,
    this.virtualNetworkId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final networkInterfaceId = this.networkInterfaceId;
    final ownerId = this.ownerId;
    final packetLength = this.packetLength;
    final sessionNumber = this.sessionNumber;
    final tags = this.tags;
    final trafficMirrorFilterId = this.trafficMirrorFilterId;
    final trafficMirrorSessionId = this.trafficMirrorSessionId;
    final trafficMirrorTargetId = this.trafficMirrorTargetId;
    final virtualNetworkId = this.virtualNetworkId;
    return {
      if (description != null) 'description': description,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (ownerId != null) 'ownerId': ownerId,
      if (packetLength != null) 'packetLength': packetLength,
      if (sessionNumber != null) 'sessionNumber': sessionNumber,
      if (tags != null) 'tagSet': tags,
      if (trafficMirrorFilterId != null)
        'trafficMirrorFilterId': trafficMirrorFilterId,
      if (trafficMirrorSessionId != null)
        'trafficMirrorSessionId': trafficMirrorSessionId,
      if (trafficMirrorTargetId != null)
        'trafficMirrorTargetId': trafficMirrorTargetId,
      if (virtualNetworkId != null) 'virtualNetworkId': virtualNetworkId,
    };
  }
}

enum TrafficMirrorSessionField {
  packetLength('packet-length'),
  description('description'),
  virtualNetworkId('virtual-network-id'),
  ;

  final String value;

  const TrafficMirrorSessionField(this.value);

  static TrafficMirrorSessionField fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrafficMirrorSessionField'));
}

/// Describes a Traffic Mirror target.
class TrafficMirrorTarget {
  /// Information about the Traffic Mirror target.
  final String? description;

  /// The ID of the Gateway Load Balancer endpoint.
  final String? gatewayLoadBalancerEndpointId;

  /// The network interface ID that is attached to the target.
  final String? networkInterfaceId;

  /// The Amazon Resource Name (ARN) of the Network Load Balancer.
  final String? networkLoadBalancerArn;

  /// The ID of the account that owns the Traffic Mirror target.
  final String? ownerId;

  /// The tags assigned to the Traffic Mirror target.
  final List<Tag>? tags;

  /// The ID of the Traffic Mirror target.
  final String? trafficMirrorTargetId;

  /// The type of Traffic Mirror target.
  final TrafficMirrorTargetType? type;

  TrafficMirrorTarget({
    this.description,
    this.gatewayLoadBalancerEndpointId,
    this.networkInterfaceId,
    this.networkLoadBalancerArn,
    this.ownerId,
    this.tags,
    this.trafficMirrorTargetId,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final gatewayLoadBalancerEndpointId = this.gatewayLoadBalancerEndpointId;
    final networkInterfaceId = this.networkInterfaceId;
    final networkLoadBalancerArn = this.networkLoadBalancerArn;
    final ownerId = this.ownerId;
    final tags = this.tags;
    final trafficMirrorTargetId = this.trafficMirrorTargetId;
    final type = this.type;
    return {
      if (description != null) 'description': description,
      if (gatewayLoadBalancerEndpointId != null)
        'gatewayLoadBalancerEndpointId': gatewayLoadBalancerEndpointId,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (networkLoadBalancerArn != null)
        'networkLoadBalancerArn': networkLoadBalancerArn,
      if (ownerId != null) 'ownerId': ownerId,
      if (tags != null) 'tagSet': tags,
      if (trafficMirrorTargetId != null)
        'trafficMirrorTargetId': trafficMirrorTargetId,
      if (type != null) 'type': type.value,
    };
  }
}

enum TrafficMirrorTargetType {
  networkInterface('network-interface'),
  networkLoadBalancer('network-load-balancer'),
  gatewayLoadBalancerEndpoint('gateway-load-balancer-endpoint'),
  ;

  final String value;

  const TrafficMirrorTargetType(this.value);

  static TrafficMirrorTargetType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrafficMirrorTargetType'));
}

enum TrafficType {
  accept('ACCEPT'),
  reject('REJECT'),
  all('ALL'),
  ;

  final String value;

  const TrafficType(this.value);

  static TrafficType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum TrafficType'));
}

/// Describes a transit gateway.
class TransitGateway {
  /// The creation time.
  final DateTime? creationTime;

  /// The description of the transit gateway.
  final String? description;

  /// The transit gateway options.
  final TransitGatewayOptions? options;

  /// The ID of the Amazon Web Services account that owns the transit gateway.
  final String? ownerId;

  /// The state of the transit gateway.
  final TransitGatewayState? state;

  /// The tags for the transit gateway.
  final List<Tag>? tags;

  /// The Amazon Resource Name (ARN) of the transit gateway.
  final String? transitGatewayArn;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  TransitGateway({
    this.creationTime,
    this.description,
    this.options,
    this.ownerId,
    this.state,
    this.tags,
    this.transitGatewayArn,
    this.transitGatewayId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final options = this.options;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayArn = this.transitGatewayArn;
    final transitGatewayId = this.transitGatewayId;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (description != null) 'description': description,
      if (options != null) 'options': options,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayArn != null) 'transitGatewayArn': transitGatewayArn,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
    };
  }
}

/// Describes an association between a resource attachment and a transit gateway
/// route table.
class TransitGatewayAssociation {
  /// The ID of the resource.
  final String? resourceId;

  /// The resource type. Note that the <code>tgw-peering</code> resource type has
  /// been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The state of the association.
  final TransitGatewayAssociationState? state;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway route table.
  final String? transitGatewayRouteTableId;

  TransitGatewayAssociation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final state = this.state;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

enum TransitGatewayAssociationState {
  associating('associating'),
  associated('associated'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  ;

  final String value;

  const TransitGatewayAssociationState(this.value);

  static TransitGatewayAssociationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayAssociationState'));
}

/// Describes an attachment between a resource and a transit gateway.
class TransitGatewayAttachment {
  /// The association.
  final TransitGatewayAttachmentAssociation? association;

  /// The creation time.
  final DateTime? creationTime;

  /// The ID of the resource.
  final String? resourceId;

  /// The ID of the Amazon Web Services account that owns the resource.
  final String? resourceOwnerId;

  /// The resource type. Note that the <code>tgw-peering</code> resource type has
  /// been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The attachment state. Note that the <code>initiating</code> state has been
  /// deprecated.
  final TransitGatewayAttachmentState? state;

  /// The tags for the attachment.
  final List<Tag>? tags;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The ID of the Amazon Web Services account that owns the transit gateway.
  final String? transitGatewayOwnerId;

  TransitGatewayAttachment({
    this.association,
    this.creationTime,
    this.resourceId,
    this.resourceOwnerId,
    this.resourceType,
    this.state,
    this.tags,
    this.transitGatewayAttachmentId,
    this.transitGatewayId,
    this.transitGatewayOwnerId,
  });

  Map<String, dynamic> toJson() {
    final association = this.association;
    final creationTime = this.creationTime;
    final resourceId = this.resourceId;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceType = this.resourceType;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayId = this.transitGatewayId;
    final transitGatewayOwnerId = this.transitGatewayOwnerId;
    return {
      if (association != null) 'association': association,
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (transitGatewayOwnerId != null)
        'transitGatewayOwnerId': transitGatewayOwnerId,
    };
  }
}

/// Describes an association.
class TransitGatewayAttachmentAssociation {
  /// The state of the association.
  final TransitGatewayAssociationState? state;

  /// The ID of the route table for the transit gateway.
  final String? transitGatewayRouteTableId;

  TransitGatewayAttachmentAssociation({
    this.state,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (state != null) 'state': state.value,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

/// The BGP configuration information.
class TransitGatewayAttachmentBgpConfiguration {
  /// The BGP status.
  final BgpStatus? bgpStatus;

  /// The interior BGP peer IP address for the appliance.
  final String? peerAddress;

  /// The peer Autonomous System Number (ASN).
  final int? peerAsn;

  /// The interior BGP peer IP address for the transit gateway.
  final String? transitGatewayAddress;

  /// The transit gateway Autonomous System Number (ASN).
  final int? transitGatewayAsn;

  TransitGatewayAttachmentBgpConfiguration({
    this.bgpStatus,
    this.peerAddress,
    this.peerAsn,
    this.transitGatewayAddress,
    this.transitGatewayAsn,
  });

  Map<String, dynamic> toJson() {
    final bgpStatus = this.bgpStatus;
    final peerAddress = this.peerAddress;
    final peerAsn = this.peerAsn;
    final transitGatewayAddress = this.transitGatewayAddress;
    final transitGatewayAsn = this.transitGatewayAsn;
    return {
      if (bgpStatus != null) 'bgpStatus': bgpStatus.value,
      if (peerAddress != null) 'peerAddress': peerAddress,
      if (peerAsn != null) 'peerAsn': peerAsn,
      if (transitGatewayAddress != null)
        'transitGatewayAddress': transitGatewayAddress,
      if (transitGatewayAsn != null) 'transitGatewayAsn': transitGatewayAsn,
    };
  }
}

/// Describes a propagation route table.
class TransitGatewayAttachmentPropagation {
  /// The state of the propagation route table.
  final TransitGatewayPropagationState? state;

  /// The ID of the propagation route table.
  final String? transitGatewayRouteTableId;

  TransitGatewayAttachmentPropagation({
    this.state,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (state != null) 'state': state.value,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

enum TransitGatewayAttachmentResourceType {
  vpc('vpc'),
  vpn('vpn'),
  directConnectGateway('direct-connect-gateway'),
  connect('connect'),
  peering('peering'),
  tgwPeering('tgw-peering'),
  ;

  final String value;

  const TransitGatewayAttachmentResourceType(this.value);

  static TransitGatewayAttachmentResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayAttachmentResourceType'));
}

enum TransitGatewayAttachmentState {
  initiating('initiating'),
  initiatingRequest('initiatingRequest'),
  pendingAcceptance('pendingAcceptance'),
  rollingBack('rollingBack'),
  pending('pending'),
  available('available'),
  modifying('modifying'),
  deleting('deleting'),
  deleted('deleted'),
  failed('failed'),
  rejected('rejected'),
  rejecting('rejecting'),
  failing('failing'),
  ;

  final String value;

  const TransitGatewayAttachmentState(this.value);

  static TransitGatewayAttachmentState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayAttachmentState'));
}

/// Describes a transit gateway Connect attachment.
class TransitGatewayConnect {
  /// The creation time.
  final DateTime? creationTime;

  /// The Connect attachment options.
  final TransitGatewayConnectOptions? options;

  /// The state of the attachment.
  final TransitGatewayAttachmentState? state;

  /// The tags for the attachment.
  final List<Tag>? tags;

  /// The ID of the Connect attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The ID of the attachment from which the Connect attachment was created.
  final String? transportTransitGatewayAttachmentId;

  TransitGatewayConnect({
    this.creationTime,
    this.options,
    this.state,
    this.tags,
    this.transitGatewayAttachmentId,
    this.transitGatewayId,
    this.transportTransitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final options = this.options;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayId = this.transitGatewayId;
    final transportTransitGatewayAttachmentId =
        this.transportTransitGatewayAttachmentId;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (options != null) 'options': options,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (transportTransitGatewayAttachmentId != null)
        'transportTransitGatewayAttachmentId':
            transportTransitGatewayAttachmentId,
    };
  }
}

/// Describes the Connect attachment options.
class TransitGatewayConnectOptions {
  /// The tunnel protocol.
  final ProtocolValue? protocol;

  TransitGatewayConnectOptions({
    this.protocol,
  });

  Map<String, dynamic> toJson() {
    final protocol = this.protocol;
    return {
      if (protocol != null) 'protocol': protocol.value,
    };
  }
}

/// Describes a transit gateway Connect peer.
class TransitGatewayConnectPeer {
  /// The Connect peer details.
  final TransitGatewayConnectPeerConfiguration? connectPeerConfiguration;

  /// The creation time.
  final DateTime? creationTime;

  /// The state of the Connect peer.
  final TransitGatewayConnectPeerState? state;

  /// The tags for the Connect peer.
  final List<Tag>? tags;

  /// The ID of the Connect attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the Connect peer.
  final String? transitGatewayConnectPeerId;

  TransitGatewayConnectPeer({
    this.connectPeerConfiguration,
    this.creationTime,
    this.state,
    this.tags,
    this.transitGatewayAttachmentId,
    this.transitGatewayConnectPeerId,
  });

  Map<String, dynamic> toJson() {
    final connectPeerConfiguration = this.connectPeerConfiguration;
    final creationTime = this.creationTime;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayConnectPeerId = this.transitGatewayConnectPeerId;
    return {
      if (connectPeerConfiguration != null)
        'connectPeerConfiguration': connectPeerConfiguration,
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayConnectPeerId != null)
        'transitGatewayConnectPeerId': transitGatewayConnectPeerId,
    };
  }
}

/// Describes the Connect peer details.
class TransitGatewayConnectPeerConfiguration {
  /// The BGP configuration details.
  final List<TransitGatewayAttachmentBgpConfiguration>? bgpConfigurations;

  /// The range of interior BGP peer IP addresses.
  final List<String>? insideCidrBlocks;

  /// The Connect peer IP address on the appliance side of the tunnel.
  final String? peerAddress;

  /// The tunnel protocol.
  final ProtocolValue? protocol;

  /// The Connect peer IP address on the transit gateway side of the tunnel.
  final String? transitGatewayAddress;

  TransitGatewayConnectPeerConfiguration({
    this.bgpConfigurations,
    this.insideCidrBlocks,
    this.peerAddress,
    this.protocol,
    this.transitGatewayAddress,
  });

  Map<String, dynamic> toJson() {
    final bgpConfigurations = this.bgpConfigurations;
    final insideCidrBlocks = this.insideCidrBlocks;
    final peerAddress = this.peerAddress;
    final protocol = this.protocol;
    final transitGatewayAddress = this.transitGatewayAddress;
    return {
      if (bgpConfigurations != null) 'bgpConfigurations': bgpConfigurations,
      if (insideCidrBlocks != null) 'insideCidrBlocks': insideCidrBlocks,
      if (peerAddress != null) 'peerAddress': peerAddress,
      if (protocol != null) 'protocol': protocol.value,
      if (transitGatewayAddress != null)
        'transitGatewayAddress': transitGatewayAddress,
    };
  }
}

enum TransitGatewayConnectPeerState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayConnectPeerState(this.value);

  static TransitGatewayConnectPeerState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayConnectPeerState'));
}

/// The BGP options for the Connect attachment.
class TransitGatewayConnectRequestBgpOptions {
  /// The peer Autonomous System Number (ASN).
  final int? peerAsn;

  TransitGatewayConnectRequestBgpOptions({
    this.peerAsn,
  });

  Map<String, dynamic> toJson() {
    final peerAsn = this.peerAsn;
    return {
      if (peerAsn != null) 'PeerAsn': peerAsn,
    };
  }
}

enum TransitGatewayMulitcastDomainAssociationState {
  pendingAcceptance('pendingAcceptance'),
  associating('associating'),
  associated('associated'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  rejected('rejected'),
  failed('failed'),
  ;

  final String value;

  const TransitGatewayMulitcastDomainAssociationState(this.value);

  static TransitGatewayMulitcastDomainAssociationState fromString(
          String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayMulitcastDomainAssociationState'));
}

/// Describes the deregistered transit gateway multicast group members.
class TransitGatewayMulticastDeregisteredGroupMembers {
  /// The network interface IDs of the deregistered members.
  final List<String>? deregisteredNetworkInterfaceIds;

  /// The IP address assigned to the transit gateway multicast group.
  final String? groupIpAddress;

  /// The ID of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainId;

  TransitGatewayMulticastDeregisteredGroupMembers({
    this.deregisteredNetworkInterfaceIds,
    this.groupIpAddress,
    this.transitGatewayMulticastDomainId,
  });

  Map<String, dynamic> toJson() {
    final deregisteredNetworkInterfaceIds =
        this.deregisteredNetworkInterfaceIds;
    final groupIpAddress = this.groupIpAddress;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (deregisteredNetworkInterfaceIds != null)
        'deregisteredNetworkInterfaceIds': deregisteredNetworkInterfaceIds,
      if (groupIpAddress != null) 'groupIpAddress': groupIpAddress,
      if (transitGatewayMulticastDomainId != null)
        'transitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

/// Describes the deregistered transit gateway multicast group sources.
class TransitGatewayMulticastDeregisteredGroupSources {
  /// The network interface IDs of the non-registered members.
  final List<String>? deregisteredNetworkInterfaceIds;

  /// The IP address assigned to the transit gateway multicast group.
  final String? groupIpAddress;

  /// The ID of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainId;

  TransitGatewayMulticastDeregisteredGroupSources({
    this.deregisteredNetworkInterfaceIds,
    this.groupIpAddress,
    this.transitGatewayMulticastDomainId,
  });

  Map<String, dynamic> toJson() {
    final deregisteredNetworkInterfaceIds =
        this.deregisteredNetworkInterfaceIds;
    final groupIpAddress = this.groupIpAddress;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (deregisteredNetworkInterfaceIds != null)
        'deregisteredNetworkInterfaceIds': deregisteredNetworkInterfaceIds,
      if (groupIpAddress != null) 'groupIpAddress': groupIpAddress,
      if (transitGatewayMulticastDomainId != null)
        'transitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

/// Describes the transit gateway multicast domain.
class TransitGatewayMulticastDomain {
  /// The time the transit gateway multicast domain was created.
  final DateTime? creationTime;

  /// The options for the transit gateway multicast domain.
  final TransitGatewayMulticastDomainOptions? options;

  /// The ID of the Amazon Web Services account that owns the transit gateway
  /// multicast domain.
  final String? ownerId;

  /// The state of the transit gateway multicast domain.
  final TransitGatewayMulticastDomainState? state;

  /// The tags for the transit gateway multicast domain.
  final List<Tag>? tags;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The Amazon Resource Name (ARN) of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainArn;

  /// The ID of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainId;

  TransitGatewayMulticastDomain({
    this.creationTime,
    this.options,
    this.ownerId,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.transitGatewayMulticastDomainArn,
    this.transitGatewayMulticastDomainId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final options = this.options;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayId = this.transitGatewayId;
    final transitGatewayMulticastDomainArn =
        this.transitGatewayMulticastDomainArn;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (options != null) 'options': options,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (transitGatewayMulticastDomainArn != null)
        'transitGatewayMulticastDomainArn': transitGatewayMulticastDomainArn,
      if (transitGatewayMulticastDomainId != null)
        'transitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

/// Describes the resources associated with the transit gateway multicast
/// domain.
class TransitGatewayMulticastDomainAssociation {
  /// The ID of the resource.
  final String? resourceId;

  /// The ID of the Amazon Web Services account that owns the transit gateway
  /// multicast domain association resource.
  final String? resourceOwnerId;

  /// The type of resource, for example a VPC attachment.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The subnet associated with the transit gateway multicast domain.
  final SubnetAssociation? subnet;

  /// The ID of the transit gateway attachment.
  final String? transitGatewayAttachmentId;

  TransitGatewayMulticastDomainAssociation({
    this.resourceId,
    this.resourceOwnerId,
    this.resourceType,
    this.subnet,
    this.transitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceType = this.resourceType;
    final subnet = this.subnet;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (subnet != null) 'subnet': subnet,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
    };
  }
}

/// Describes the multicast domain associations.
class TransitGatewayMulticastDomainAssociations {
  /// The ID of the resource.
  final String? resourceId;

  /// The ID of the Amazon Web Services account that owns the resource.
  final String? resourceOwnerId;

  /// The type of resource, for example a VPC attachment.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The subnets associated with the multicast domain.
  final List<SubnetAssociation>? subnets;

  /// The ID of the transit gateway attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainId;

  TransitGatewayMulticastDomainAssociations({
    this.resourceId,
    this.resourceOwnerId,
    this.resourceType,
    this.subnets,
    this.transitGatewayAttachmentId,
    this.transitGatewayMulticastDomainId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceType = this.resourceType;
    final subnets = this.subnets;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (subnets != null) 'subnets': subnets,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayMulticastDomainId != null)
        'transitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

/// Describes the options for a transit gateway multicast domain.
class TransitGatewayMulticastDomainOptions {
  /// Indicates whether to automatically cross-account subnet associations that
  /// are associated with the transit gateway multicast domain.
  final AutoAcceptSharedAssociationsValue? autoAcceptSharedAssociations;

  /// Indicates whether Internet Group Management Protocol (IGMP) version 2 is
  /// turned on for the transit gateway multicast domain.
  final Igmpv2SupportValue? igmpv2Support;

  /// Indicates whether support for statically configuring transit gateway
  /// multicast group sources is turned on.
  final StaticSourcesSupportValue? staticSourcesSupport;

  TransitGatewayMulticastDomainOptions({
    this.autoAcceptSharedAssociations,
    this.igmpv2Support,
    this.staticSourcesSupport,
  });

  Map<String, dynamic> toJson() {
    final autoAcceptSharedAssociations = this.autoAcceptSharedAssociations;
    final igmpv2Support = this.igmpv2Support;
    final staticSourcesSupport = this.staticSourcesSupport;
    return {
      if (autoAcceptSharedAssociations != null)
        'autoAcceptSharedAssociations': autoAcceptSharedAssociations.value,
      if (igmpv2Support != null) 'igmpv2Support': igmpv2Support.value,
      if (staticSourcesSupport != null)
        'staticSourcesSupport': staticSourcesSupport.value,
    };
  }
}

enum TransitGatewayMulticastDomainState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayMulticastDomainState(this.value);

  static TransitGatewayMulticastDomainState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayMulticastDomainState'));
}

/// Describes the transit gateway multicast group resources.
class TransitGatewayMulticastGroup {
  /// The IP address assigned to the transit gateway multicast group.
  final String? groupIpAddress;

  /// Indicates that the resource is a transit gateway multicast group member.
  final bool? groupMember;

  /// Indicates that the resource is a transit gateway multicast group member.
  final bool? groupSource;

  /// The member type (for example, <code>static</code>).
  final MembershipType? memberType;

  /// The ID of the transit gateway attachment.
  final String? networkInterfaceId;

  /// The ID of the resource.
  final String? resourceId;

  /// The ID of the Amazon Web Services account that owns the transit gateway
  /// multicast domain group resource.
  final String? resourceOwnerId;

  /// The type of resource, for example a VPC attachment.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The source type.
  final MembershipType? sourceType;

  /// The ID of the subnet.
  final String? subnetId;

  /// The ID of the transit gateway attachment.
  final String? transitGatewayAttachmentId;

  TransitGatewayMulticastGroup({
    this.groupIpAddress,
    this.groupMember,
    this.groupSource,
    this.memberType,
    this.networkInterfaceId,
    this.resourceId,
    this.resourceOwnerId,
    this.resourceType,
    this.sourceType,
    this.subnetId,
    this.transitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final groupIpAddress = this.groupIpAddress;
    final groupMember = this.groupMember;
    final groupSource = this.groupSource;
    final memberType = this.memberType;
    final networkInterfaceId = this.networkInterfaceId;
    final resourceId = this.resourceId;
    final resourceOwnerId = this.resourceOwnerId;
    final resourceType = this.resourceType;
    final sourceType = this.sourceType;
    final subnetId = this.subnetId;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    return {
      if (groupIpAddress != null) 'groupIpAddress': groupIpAddress,
      if (groupMember != null) 'groupMember': groupMember,
      if (groupSource != null) 'groupSource': groupSource,
      if (memberType != null) 'memberType': memberType.value,
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceOwnerId != null) 'resourceOwnerId': resourceOwnerId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (sourceType != null) 'sourceType': sourceType.value,
      if (subnetId != null) 'subnetId': subnetId,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
    };
  }
}

/// Describes the registered transit gateway multicast group members.
class TransitGatewayMulticastRegisteredGroupMembers {
  /// The IP address assigned to the transit gateway multicast group.
  final String? groupIpAddress;

  /// The ID of the registered network interfaces.
  final List<String>? registeredNetworkInterfaceIds;

  /// The ID of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainId;

  TransitGatewayMulticastRegisteredGroupMembers({
    this.groupIpAddress,
    this.registeredNetworkInterfaceIds,
    this.transitGatewayMulticastDomainId,
  });

  Map<String, dynamic> toJson() {
    final groupIpAddress = this.groupIpAddress;
    final registeredNetworkInterfaceIds = this.registeredNetworkInterfaceIds;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (groupIpAddress != null) 'groupIpAddress': groupIpAddress,
      if (registeredNetworkInterfaceIds != null)
        'registeredNetworkInterfaceIds': registeredNetworkInterfaceIds,
      if (transitGatewayMulticastDomainId != null)
        'transitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

/// Describes the members registered with the transit gateway multicast group.
class TransitGatewayMulticastRegisteredGroupSources {
  /// The IP address assigned to the transit gateway multicast group.
  final String? groupIpAddress;

  /// The IDs of the network interfaces members registered with the transit
  /// gateway multicast group.
  final List<String>? registeredNetworkInterfaceIds;

  /// The ID of the transit gateway multicast domain.
  final String? transitGatewayMulticastDomainId;

  TransitGatewayMulticastRegisteredGroupSources({
    this.groupIpAddress,
    this.registeredNetworkInterfaceIds,
    this.transitGatewayMulticastDomainId,
  });

  Map<String, dynamic> toJson() {
    final groupIpAddress = this.groupIpAddress;
    final registeredNetworkInterfaceIds = this.registeredNetworkInterfaceIds;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (groupIpAddress != null) 'groupIpAddress': groupIpAddress,
      if (registeredNetworkInterfaceIds != null)
        'registeredNetworkInterfaceIds': registeredNetworkInterfaceIds,
      if (transitGatewayMulticastDomainId != null)
        'transitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

/// Describes the options for a transit gateway.
class TransitGatewayOptions {
  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to
  /// 4294967294 for 32-bit ASNs.
  final int? amazonSideAsn;

  /// The ID of the default association route table.
  final String? associationDefaultRouteTableId;

  /// Indicates whether attachment requests are automatically accepted.
  final AutoAcceptSharedAttachmentsValue? autoAcceptSharedAttachments;

  /// Indicates whether resource attachments are automatically associated with the
  /// default association route table.
  final DefaultRouteTableAssociationValue? defaultRouteTableAssociation;

  /// Indicates whether resource attachments automatically propagate routes to the
  /// default propagation route table.
  final DefaultRouteTablePropagationValue? defaultRouteTablePropagation;

  /// Indicates whether DNS support is enabled.
  final DnsSupportValue? dnsSupport;

  /// Indicates whether multicast is enabled on the transit gateway
  final MulticastSupportValue? multicastSupport;

  /// The ID of the default propagation route table.
  final String? propagationDefaultRouteTableId;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// Enables you to reference a security group across VPCs attached to a transit
  /// gateway. Use this option to simplify security group management and control
  /// of instance-to-instance traffic across VPCs that are connected by transit
  /// gateway. You can also use this option to migrate from VPC peering (which was
  /// the only option that supported security group referencing) to transit
  /// gateways (which now also support security group referencing). This option is
  /// disabled by default and there are no additional costs to use this feature.
  final SecurityGroupReferencingSupportValue? securityGroupReferencingSupport;

  /// The transit gateway CIDR blocks.
  final List<String>? transitGatewayCidrBlocks;

  /// Indicates whether Equal Cost Multipath Protocol support is enabled.
  final VpnEcmpSupportValue? vpnEcmpSupport;

  TransitGatewayOptions({
    this.amazonSideAsn,
    this.associationDefaultRouteTableId,
    this.autoAcceptSharedAttachments,
    this.defaultRouteTableAssociation,
    this.defaultRouteTablePropagation,
    this.dnsSupport,
    this.multicastSupport,
    this.propagationDefaultRouteTableId,
    this.securityGroupReferencingSupport,
    this.transitGatewayCidrBlocks,
    this.vpnEcmpSupport,
  });

  Map<String, dynamic> toJson() {
    final amazonSideAsn = this.amazonSideAsn;
    final associationDefaultRouteTableId = this.associationDefaultRouteTableId;
    final autoAcceptSharedAttachments = this.autoAcceptSharedAttachments;
    final defaultRouteTableAssociation = this.defaultRouteTableAssociation;
    final defaultRouteTablePropagation = this.defaultRouteTablePropagation;
    final dnsSupport = this.dnsSupport;
    final multicastSupport = this.multicastSupport;
    final propagationDefaultRouteTableId = this.propagationDefaultRouteTableId;
    final securityGroupReferencingSupport =
        this.securityGroupReferencingSupport;
    final transitGatewayCidrBlocks = this.transitGatewayCidrBlocks;
    final vpnEcmpSupport = this.vpnEcmpSupport;
    return {
      if (amazonSideAsn != null) 'amazonSideAsn': amazonSideAsn,
      if (associationDefaultRouteTableId != null)
        'associationDefaultRouteTableId': associationDefaultRouteTableId,
      if (autoAcceptSharedAttachments != null)
        'autoAcceptSharedAttachments': autoAcceptSharedAttachments.value,
      if (defaultRouteTableAssociation != null)
        'defaultRouteTableAssociation': defaultRouteTableAssociation.value,
      if (defaultRouteTablePropagation != null)
        'defaultRouteTablePropagation': defaultRouteTablePropagation.value,
      if (dnsSupport != null) 'dnsSupport': dnsSupport.value,
      if (multicastSupport != null) 'multicastSupport': multicastSupport.value,
      if (propagationDefaultRouteTableId != null)
        'propagationDefaultRouteTableId': propagationDefaultRouteTableId,
      if (securityGroupReferencingSupport != null)
        'securityGroupReferencingSupport':
            securityGroupReferencingSupport.value,
      if (transitGatewayCidrBlocks != null)
        'transitGatewayCidrBlocks': transitGatewayCidrBlocks,
      if (vpnEcmpSupport != null) 'vpnEcmpSupport': vpnEcmpSupport.value,
    };
  }
}

/// Describes the transit gateway peering attachment.
class TransitGatewayPeeringAttachment {
  /// Information about the accepter transit gateway.
  final PeeringTgwInfo? accepterTgwInfo;

  /// The ID of the accepter transit gateway attachment.
  final String? accepterTransitGatewayAttachmentId;

  /// The time the transit gateway peering attachment was created.
  final DateTime? creationTime;

  /// Details about the transit gateway peering attachment.
  final TransitGatewayPeeringAttachmentOptions? options;

  /// Information about the requester transit gateway.
  final PeeringTgwInfo? requesterTgwInfo;

  /// The state of the transit gateway peering attachment. Note that the
  /// <code>initiating</code> state has been deprecated.
  final TransitGatewayAttachmentState? state;

  /// The status of the transit gateway peering attachment.
  final PeeringAttachmentStatus? status;

  /// The tags for the transit gateway peering attachment.
  final List<Tag>? tags;

  /// The ID of the transit gateway peering attachment.
  final String? transitGatewayAttachmentId;

  TransitGatewayPeeringAttachment({
    this.accepterTgwInfo,
    this.accepterTransitGatewayAttachmentId,
    this.creationTime,
    this.options,
    this.requesterTgwInfo,
    this.state,
    this.status,
    this.tags,
    this.transitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final accepterTgwInfo = this.accepterTgwInfo;
    final accepterTransitGatewayAttachmentId =
        this.accepterTransitGatewayAttachmentId;
    final creationTime = this.creationTime;
    final options = this.options;
    final requesterTgwInfo = this.requesterTgwInfo;
    final state = this.state;
    final status = this.status;
    final tags = this.tags;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    return {
      if (accepterTgwInfo != null) 'accepterTgwInfo': accepterTgwInfo,
      if (accepterTransitGatewayAttachmentId != null)
        'accepterTransitGatewayAttachmentId':
            accepterTransitGatewayAttachmentId,
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (options != null) 'options': options,
      if (requesterTgwInfo != null) 'requesterTgwInfo': requesterTgwInfo,
      if (state != null) 'state': state.value,
      if (status != null) 'status': status,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
    };
  }
}

/// Describes dynamic routing for the transit gateway peering attachment.
class TransitGatewayPeeringAttachmentOptions {
  /// Describes whether dynamic routing is enabled or disabled for the transit
  /// gateway peering attachment.
  final DynamicRoutingValue? dynamicRouting;

  TransitGatewayPeeringAttachmentOptions({
    this.dynamicRouting,
  });

  Map<String, dynamic> toJson() {
    final dynamicRouting = this.dynamicRouting;
    return {
      if (dynamicRouting != null) 'dynamicRouting': dynamicRouting.value,
    };
  }
}

/// Describes a rule associated with a transit gateway policy.
class TransitGatewayPolicyRule {
  /// The destination CIDR block for the transit gateway policy rule.
  final String? destinationCidrBlock;

  /// The port range for the transit gateway policy rule. Currently this is set to
  /// * (all).
  final String? destinationPortRange;

  /// The meta data tags used for the transit gateway policy rule.
  final TransitGatewayPolicyRuleMetaData? metaData;

  /// The protocol used by the transit gateway policy rule.
  final String? protocol;

  /// The source CIDR block for the transit gateway policy rule.
  final String? sourceCidrBlock;

  /// The port range for the transit gateway policy rule. Currently this is set to
  /// * (all).
  final String? sourcePortRange;

  TransitGatewayPolicyRule({
    this.destinationCidrBlock,
    this.destinationPortRange,
    this.metaData,
    this.protocol,
    this.sourceCidrBlock,
    this.sourcePortRange,
  });

  Map<String, dynamic> toJson() {
    final destinationCidrBlock = this.destinationCidrBlock;
    final destinationPortRange = this.destinationPortRange;
    final metaData = this.metaData;
    final protocol = this.protocol;
    final sourceCidrBlock = this.sourceCidrBlock;
    final sourcePortRange = this.sourcePortRange;
    return {
      if (destinationCidrBlock != null)
        'destinationCidrBlock': destinationCidrBlock,
      if (destinationPortRange != null)
        'destinationPortRange': destinationPortRange,
      if (metaData != null) 'metaData': metaData,
      if (protocol != null) 'protocol': protocol,
      if (sourceCidrBlock != null) 'sourceCidrBlock': sourceCidrBlock,
      if (sourcePortRange != null) 'sourcePortRange': sourcePortRange,
    };
  }
}

/// Describes the meta data tags associated with a transit gateway policy rule.
class TransitGatewayPolicyRuleMetaData {
  /// The key name for the transit gateway policy rule meta data tag.
  final String? metaDataKey;

  /// The value of the key for the transit gateway policy rule meta data tag.
  final String? metaDataValue;

  TransitGatewayPolicyRuleMetaData({
    this.metaDataKey,
    this.metaDataValue,
  });

  Map<String, dynamic> toJson() {
    final metaDataKey = this.metaDataKey;
    final metaDataValue = this.metaDataValue;
    return {
      if (metaDataKey != null) 'metaDataKey': metaDataKey,
      if (metaDataValue != null) 'metaDataValue': metaDataValue,
    };
  }
}

/// Describes a transit gateway policy table.
class TransitGatewayPolicyTable {
  /// The timestamp when the transit gateway policy table was created.
  final DateTime? creationTime;

  /// The state of the transit gateway policy table
  final TransitGatewayPolicyTableState? state;

  /// he key-value pairs associated with the transit gateway policy table.
  final List<Tag>? tags;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The ID of the transit gateway policy table.
  final String? transitGatewayPolicyTableId;

  TransitGatewayPolicyTable({
    this.creationTime,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.transitGatewayPolicyTableId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayId = this.transitGatewayId;
    final transitGatewayPolicyTableId = this.transitGatewayPolicyTableId;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (transitGatewayPolicyTableId != null)
        'transitGatewayPolicyTableId': transitGatewayPolicyTableId,
    };
  }
}

/// Describes a transit gateway policy table association.
class TransitGatewayPolicyTableAssociation {
  /// The resource ID of the transit gateway attachment.
  final String? resourceId;

  /// The resource type for the transit gateway policy table association.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The state of the transit gateway policy table association.
  final TransitGatewayAssociationState? state;

  /// The ID of the transit gateway attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway policy table.
  final String? transitGatewayPolicyTableId;

  TransitGatewayPolicyTableAssociation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
    this.transitGatewayPolicyTableId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final state = this.state;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayPolicyTableId = this.transitGatewayPolicyTableId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayPolicyTableId != null)
        'transitGatewayPolicyTableId': transitGatewayPolicyTableId,
    };
  }
}

/// Describes a transit gateway policy table entry
class TransitGatewayPolicyTableEntry {
  /// The policy rule associated with the transit gateway policy table.
  final TransitGatewayPolicyRule? policyRule;

  /// The rule number for the transit gateway policy table entry.
  final String? policyRuleNumber;

  /// The ID of the target route table.
  final String? targetRouteTableId;

  TransitGatewayPolicyTableEntry({
    this.policyRule,
    this.policyRuleNumber,
    this.targetRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final policyRule = this.policyRule;
    final policyRuleNumber = this.policyRuleNumber;
    final targetRouteTableId = this.targetRouteTableId;
    return {
      if (policyRule != null) 'policyRule': policyRule,
      if (policyRuleNumber != null) 'policyRuleNumber': policyRuleNumber,
      if (targetRouteTableId != null) 'targetRouteTableId': targetRouteTableId,
    };
  }
}

enum TransitGatewayPolicyTableState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayPolicyTableState(this.value);

  static TransitGatewayPolicyTableState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayPolicyTableState'));
}

/// Describes a transit gateway prefix list attachment.
class TransitGatewayPrefixListAttachment {
  /// The ID of the resource.
  final String? resourceId;

  /// The resource type. Note that the <code>tgw-peering</code> resource type has
  /// been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  TransitGatewayPrefixListAttachment({
    this.resourceId,
    this.resourceType,
    this.transitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
    };
  }
}

/// Describes a prefix list reference.
class TransitGatewayPrefixListReference {
  /// Indicates whether traffic that matches this route is dropped.
  final bool? blackhole;

  /// The ID of the prefix list.
  final String? prefixListId;

  /// The ID of the prefix list owner.
  final String? prefixListOwnerId;

  /// The state of the prefix list reference.
  final TransitGatewayPrefixListReferenceState? state;

  /// Information about the transit gateway attachment.
  final TransitGatewayPrefixListAttachment? transitGatewayAttachment;

  /// The ID of the transit gateway route table.
  final String? transitGatewayRouteTableId;

  TransitGatewayPrefixListReference({
    this.blackhole,
    this.prefixListId,
    this.prefixListOwnerId,
    this.state,
    this.transitGatewayAttachment,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final blackhole = this.blackhole;
    final prefixListId = this.prefixListId;
    final prefixListOwnerId = this.prefixListOwnerId;
    final state = this.state;
    final transitGatewayAttachment = this.transitGatewayAttachment;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (blackhole != null) 'blackhole': blackhole,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (prefixListOwnerId != null) 'prefixListOwnerId': prefixListOwnerId,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachment != null)
        'transitGatewayAttachment': transitGatewayAttachment,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

enum TransitGatewayPrefixListReferenceState {
  pending('pending'),
  available('available'),
  modifying('modifying'),
  deleting('deleting'),
  ;

  final String value;

  const TransitGatewayPrefixListReferenceState(this.value);

  static TransitGatewayPrefixListReferenceState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayPrefixListReferenceState'));
}

/// Describes route propagation.
class TransitGatewayPropagation {
  /// The ID of the resource.
  final String? resourceId;

  /// The resource type. Note that the <code>tgw-peering</code> resource type has
  /// been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The state.
  final TransitGatewayPropagationState? state;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway route table announcement.
  final String? transitGatewayRouteTableAnnouncementId;

  /// The ID of the transit gateway route table.
  final String? transitGatewayRouteTableId;

  TransitGatewayPropagation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
    this.transitGatewayRouteTableAnnouncementId,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final state = this.state;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayRouteTableAnnouncementId =
        this.transitGatewayRouteTableAnnouncementId;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayRouteTableAnnouncementId != null)
        'transitGatewayRouteTableAnnouncementId':
            transitGatewayRouteTableAnnouncementId,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

enum TransitGatewayPropagationState {
  enabling('enabling'),
  enabled('enabled'),
  disabling('disabling'),
  disabled('disabled'),
  ;

  final String value;

  const TransitGatewayPropagationState(this.value);

  static TransitGatewayPropagationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayPropagationState'));
}

/// Describes the options for a transit gateway.
class TransitGatewayRequestOptions {
  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to
  /// 4294967294 for 32-bit ASNs. The default is <code>64512</code>.
  final int? amazonSideAsn;

  /// Enable or disable automatic acceptance of attachment requests. Disabled by
  /// default.
  final AutoAcceptSharedAttachmentsValue? autoAcceptSharedAttachments;

  /// Enable or disable automatic association with the default association route
  /// table. Enabled by default.
  final DefaultRouteTableAssociationValue? defaultRouteTableAssociation;

  /// Enable or disable automatic propagation of routes to the default propagation
  /// route table. Enabled by default.
  final DefaultRouteTablePropagationValue? defaultRouteTablePropagation;

  /// Enable or disable DNS support. Enabled by default.
  final DnsSupportValue? dnsSupport;

  /// Indicates whether multicast is enabled on the transit gateway
  final MulticastSupportValue? multicastSupport;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// Enables you to reference a security group across VPCs attached to a transit
  /// gateway. Use this option to simplify security group management and control
  /// of instance-to-instance traffic across VPCs that are connected by transit
  /// gateway. You can also use this option to migrate from VPC peering (which was
  /// the only option that supported security group referencing) to transit
  /// gateways (which now also support security group referencing). This option is
  /// disabled by default and there are no additional costs to use this feature.
  final SecurityGroupReferencingSupportValue? securityGroupReferencingSupport;

  /// One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size
  /// /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for
  /// IPv6.
  final List<String>? transitGatewayCidrBlocks;

  /// Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
  final VpnEcmpSupportValue? vpnEcmpSupport;

  TransitGatewayRequestOptions({
    this.amazonSideAsn,
    this.autoAcceptSharedAttachments,
    this.defaultRouteTableAssociation,
    this.defaultRouteTablePropagation,
    this.dnsSupport,
    this.multicastSupport,
    this.securityGroupReferencingSupport,
    this.transitGatewayCidrBlocks,
    this.vpnEcmpSupport,
  });

  Map<String, dynamic> toJson() {
    final amazonSideAsn = this.amazonSideAsn;
    final autoAcceptSharedAttachments = this.autoAcceptSharedAttachments;
    final defaultRouteTableAssociation = this.defaultRouteTableAssociation;
    final defaultRouteTablePropagation = this.defaultRouteTablePropagation;
    final dnsSupport = this.dnsSupport;
    final multicastSupport = this.multicastSupport;
    final securityGroupReferencingSupport =
        this.securityGroupReferencingSupport;
    final transitGatewayCidrBlocks = this.transitGatewayCidrBlocks;
    final vpnEcmpSupport = this.vpnEcmpSupport;
    return {
      if (amazonSideAsn != null) 'AmazonSideAsn': amazonSideAsn,
      if (autoAcceptSharedAttachments != null)
        'AutoAcceptSharedAttachments': autoAcceptSharedAttachments.value,
      if (defaultRouteTableAssociation != null)
        'DefaultRouteTableAssociation': defaultRouteTableAssociation.value,
      if (defaultRouteTablePropagation != null)
        'DefaultRouteTablePropagation': defaultRouteTablePropagation.value,
      if (dnsSupport != null) 'DnsSupport': dnsSupport.value,
      if (multicastSupport != null) 'MulticastSupport': multicastSupport.value,
      if (securityGroupReferencingSupport != null)
        'SecurityGroupReferencingSupport':
            securityGroupReferencingSupport.value,
      if (transitGatewayCidrBlocks != null)
        'TransitGatewayCidrBlocks': transitGatewayCidrBlocks,
      if (vpnEcmpSupport != null) 'VpnEcmpSupport': vpnEcmpSupport.value,
    };
  }
}

/// Describes a route for a transit gateway route table.
class TransitGatewayRoute {
  /// The CIDR block used for destination matches.
  final String? destinationCidrBlock;

  /// The ID of the prefix list used for destination matches.
  final String? prefixListId;

  /// The state of the route.
  final TransitGatewayRouteState? state;

  /// The attachments.
  final List<TransitGatewayRouteAttachment>? transitGatewayAttachments;

  /// The ID of the transit gateway route table announcement.
  final String? transitGatewayRouteTableAnnouncementId;

  /// The route type.
  final TransitGatewayRouteType? type;

  TransitGatewayRoute({
    this.destinationCidrBlock,
    this.prefixListId,
    this.state,
    this.transitGatewayAttachments,
    this.transitGatewayRouteTableAnnouncementId,
    this.type,
  });

  Map<String, dynamic> toJson() {
    final destinationCidrBlock = this.destinationCidrBlock;
    final prefixListId = this.prefixListId;
    final state = this.state;
    final transitGatewayAttachments = this.transitGatewayAttachments;
    final transitGatewayRouteTableAnnouncementId =
        this.transitGatewayRouteTableAnnouncementId;
    final type = this.type;
    return {
      if (destinationCidrBlock != null)
        'destinationCidrBlock': destinationCidrBlock,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachments != null)
        'transitGatewayAttachments': transitGatewayAttachments,
      if (transitGatewayRouteTableAnnouncementId != null)
        'transitGatewayRouteTableAnnouncementId':
            transitGatewayRouteTableAnnouncementId,
      if (type != null) 'type': type.value,
    };
  }
}

/// Describes a route attachment.
class TransitGatewayRouteAttachment {
  /// The ID of the resource.
  final String? resourceId;

  /// The resource type. Note that the <code>tgw-peering</code> resource type has
  /// been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  TransitGatewayRouteAttachment({
    this.resourceId,
    this.resourceType,
    this.transitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
    };
  }
}

enum TransitGatewayRouteState {
  pending('pending'),
  active('active'),
  blackhole('blackhole'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayRouteState(this.value);

  static TransitGatewayRouteState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayRouteState'));
}

/// Describes a transit gateway route table.
class TransitGatewayRouteTable {
  /// The creation time.
  final DateTime? creationTime;

  /// Indicates whether this is the default association route table for the
  /// transit gateway.
  final bool? defaultAssociationRouteTable;

  /// Indicates whether this is the default propagation route table for the
  /// transit gateway.
  final bool? defaultPropagationRouteTable;

  /// The state of the transit gateway route table.
  final TransitGatewayRouteTableState? state;

  /// Any tags assigned to the route table.
  final List<Tag>? tags;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The ID of the transit gateway route table.
  final String? transitGatewayRouteTableId;

  TransitGatewayRouteTable({
    this.creationTime,
    this.defaultAssociationRouteTable,
    this.defaultPropagationRouteTable,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final defaultAssociationRouteTable = this.defaultAssociationRouteTable;
    final defaultPropagationRouteTable = this.defaultPropagationRouteTable;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayId = this.transitGatewayId;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (defaultAssociationRouteTable != null)
        'defaultAssociationRouteTable': defaultAssociationRouteTable,
      if (defaultPropagationRouteTable != null)
        'defaultPropagationRouteTable': defaultPropagationRouteTable,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

/// Describes a transit gateway route table announcement.
class TransitGatewayRouteTableAnnouncement {
  /// The direction for the route table announcement.
  final TransitGatewayRouteTableAnnouncementDirection? announcementDirection;

  /// The ID of the core network for the transit gateway route table announcement.
  final String? coreNetworkId;

  /// The timestamp when the transit gateway route table announcement was created.
  final DateTime? creationTime;

  /// The ID of the core network ID for the peer.
  final String? peerCoreNetworkId;

  /// The ID of the peer transit gateway.
  final String? peerTransitGatewayId;

  /// The ID of the peering attachment.
  final String? peeringAttachmentId;

  /// The state of the transit gateway announcement.
  final TransitGatewayRouteTableAnnouncementState? state;

  /// The key-value pairs associated with the route table announcement.
  final List<Tag>? tags;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The ID of the transit gateway route table announcement.
  final String? transitGatewayRouteTableAnnouncementId;

  /// The ID of the transit gateway route table.
  final String? transitGatewayRouteTableId;

  TransitGatewayRouteTableAnnouncement({
    this.announcementDirection,
    this.coreNetworkId,
    this.creationTime,
    this.peerCoreNetworkId,
    this.peerTransitGatewayId,
    this.peeringAttachmentId,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.transitGatewayRouteTableAnnouncementId,
    this.transitGatewayRouteTableId,
  });

  Map<String, dynamic> toJson() {
    final announcementDirection = this.announcementDirection;
    final coreNetworkId = this.coreNetworkId;
    final creationTime = this.creationTime;
    final peerCoreNetworkId = this.peerCoreNetworkId;
    final peerTransitGatewayId = this.peerTransitGatewayId;
    final peeringAttachmentId = this.peeringAttachmentId;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayId = this.transitGatewayId;
    final transitGatewayRouteTableAnnouncementId =
        this.transitGatewayRouteTableAnnouncementId;
    final transitGatewayRouteTableId = this.transitGatewayRouteTableId;
    return {
      if (announcementDirection != null)
        'announcementDirection': announcementDirection.value,
      if (coreNetworkId != null) 'coreNetworkId': coreNetworkId,
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (peerCoreNetworkId != null) 'peerCoreNetworkId': peerCoreNetworkId,
      if (peerTransitGatewayId != null)
        'peerTransitGatewayId': peerTransitGatewayId,
      if (peeringAttachmentId != null)
        'peeringAttachmentId': peeringAttachmentId,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (transitGatewayRouteTableAnnouncementId != null)
        'transitGatewayRouteTableAnnouncementId':
            transitGatewayRouteTableAnnouncementId,
      if (transitGatewayRouteTableId != null)
        'transitGatewayRouteTableId': transitGatewayRouteTableId,
    };
  }
}

enum TransitGatewayRouteTableAnnouncementDirection {
  outgoing('outgoing'),
  incoming('incoming'),
  ;

  final String value;

  const TransitGatewayRouteTableAnnouncementDirection(this.value);

  static TransitGatewayRouteTableAnnouncementDirection fromString(
          String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayRouteTableAnnouncementDirection'));
}

enum TransitGatewayRouteTableAnnouncementState {
  available('available'),
  pending('pending'),
  failing('failing'),
  failed('failed'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayRouteTableAnnouncementState(this.value);

  static TransitGatewayRouteTableAnnouncementState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayRouteTableAnnouncementState'));
}

/// Describes an association between a route table and a resource attachment.
class TransitGatewayRouteTableAssociation {
  /// The ID of the resource.
  final String? resourceId;

  /// The resource type. Note that the <code>tgw-peering</code> resource type has
  /// been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The state of the association.
  final TransitGatewayAssociationState? state;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  TransitGatewayRouteTableAssociation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final state = this.state;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
    };
  }
}

/// Describes a route table propagation.
class TransitGatewayRouteTablePropagation {
  /// The ID of the resource.
  final String? resourceId;

  /// The type of resource. Note that the <code>tgw-peering</code> resource type
  /// has been deprecated.
  final TransitGatewayAttachmentResourceType? resourceType;

  /// The state of the resource.
  final TransitGatewayPropagationState? state;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway route table announcement.
  final String? transitGatewayRouteTableAnnouncementId;

  TransitGatewayRouteTablePropagation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
    this.transitGatewayRouteTableAnnouncementId,
  });

  Map<String, dynamic> toJson() {
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final state = this.state;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayRouteTableAnnouncementId =
        this.transitGatewayRouteTableAnnouncementId;
    return {
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType.value,
      if (state != null) 'state': state.value,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayRouteTableAnnouncementId != null)
        'transitGatewayRouteTableAnnouncementId':
            transitGatewayRouteTableAnnouncementId,
    };
  }
}

/// Describes a route in a transit gateway route table.
class TransitGatewayRouteTableRoute {
  /// The ID of the route attachment.
  final String? attachmentId;

  /// The CIDR block used for destination matches.
  final String? destinationCidr;

  /// The ID of the prefix list.
  final String? prefixListId;

  /// The ID of the resource for the route attachment.
  final String? resourceId;

  /// The resource type for the route attachment.
  final String? resourceType;

  /// The route origin. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// static
  /// </li>
  /// <li>
  /// propagated
  /// </li>
  /// </ul>
  final String? routeOrigin;

  /// The state of the route.
  final String? state;

  TransitGatewayRouteTableRoute({
    this.attachmentId,
    this.destinationCidr,
    this.prefixListId,
    this.resourceId,
    this.resourceType,
    this.routeOrigin,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final attachmentId = this.attachmentId;
    final destinationCidr = this.destinationCidr;
    final prefixListId = this.prefixListId;
    final resourceId = this.resourceId;
    final resourceType = this.resourceType;
    final routeOrigin = this.routeOrigin;
    final state = this.state;
    return {
      if (attachmentId != null) 'attachmentId': attachmentId,
      if (destinationCidr != null) 'destinationCidr': destinationCidr,
      if (prefixListId != null) 'prefixListId': prefixListId,
      if (resourceId != null) 'resourceId': resourceId,
      if (resourceType != null) 'resourceType': resourceType,
      if (routeOrigin != null) 'routeOrigin': routeOrigin,
      if (state != null) 'state': state,
    };
  }
}

enum TransitGatewayRouteTableState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayRouteTableState(this.value);

  static TransitGatewayRouteTableState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayRouteTableState'));
}

enum TransitGatewayRouteType {
  static('static'),
  propagated('propagated'),
  ;

  final String value;

  const TransitGatewayRouteType(this.value);

  static TransitGatewayRouteType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TransitGatewayRouteType'));
}

enum TransitGatewayState {
  pending('pending'),
  available('available'),
  modifying('modifying'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const TransitGatewayState(this.value);

  static TransitGatewayState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TransitGatewayState'));
}

/// Describes a VPC attachment.
class TransitGatewayVpcAttachment {
  /// The creation time.
  final DateTime? creationTime;

  /// The VPC attachment options.
  final TransitGatewayVpcAttachmentOptions? options;

  /// The state of the VPC attachment. Note that the <code>initiating</code> state
  /// has been deprecated.
  final TransitGatewayAttachmentState? state;

  /// The IDs of the subnets.
  final List<String>? subnetIds;

  /// The tags for the VPC attachment.
  final List<Tag>? tags;

  /// The ID of the attachment.
  final String? transitGatewayAttachmentId;

  /// The ID of the transit gateway.
  final String? transitGatewayId;

  /// The ID of the VPC.
  final String? vpcId;

  /// The ID of the Amazon Web Services account that owns the VPC.
  final String? vpcOwnerId;

  TransitGatewayVpcAttachment({
    this.creationTime,
    this.options,
    this.state,
    this.subnetIds,
    this.tags,
    this.transitGatewayAttachmentId,
    this.transitGatewayId,
    this.vpcId,
    this.vpcOwnerId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final options = this.options;
    final state = this.state;
    final subnetIds = this.subnetIds;
    final tags = this.tags;
    final transitGatewayAttachmentId = this.transitGatewayAttachmentId;
    final transitGatewayId = this.transitGatewayId;
    final vpcId = this.vpcId;
    final vpcOwnerId = this.vpcOwnerId;
    return {
      if (creationTime != null) 'creationTime': iso8601ToJson(creationTime),
      if (options != null) 'options': options,
      if (state != null) 'state': state.value,
      if (subnetIds != null) 'subnetIds': subnetIds,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayAttachmentId != null)
        'transitGatewayAttachmentId': transitGatewayAttachmentId,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (vpcId != null) 'vpcId': vpcId,
      if (vpcOwnerId != null) 'vpcOwnerId': vpcOwnerId,
    };
  }
}

/// Describes the VPC attachment options.
class TransitGatewayVpcAttachmentOptions {
  /// Indicates whether appliance mode support is enabled.
  final ApplianceModeSupportValue? applianceModeSupport;

  /// Indicates whether DNS support is enabled.
  final DnsSupportValue? dnsSupport;

  /// Indicates whether IPv6 support is disabled.
  final Ipv6SupportValue? ipv6Support;

  /// <note>
  /// This parameter is in preview and may not be available for your account.
  /// </note>
  /// Enables you to reference a security group across VPCs attached to a transit
  /// gateway. Use this option to simplify security group management and control
  /// of instance-to-instance traffic across VPCs that are connected by transit
  /// gateway. You can also use this option to migrate from VPC peering (which was
  /// the only option that supported security group referencing) to transit
  /// gateways (which now also support security group referencing). This option is
  /// disabled by default and there are no additional costs to use this feature.
  final SecurityGroupReferencingSupportValue? securityGroupReferencingSupport;

  TransitGatewayVpcAttachmentOptions({
    this.applianceModeSupport,
    this.dnsSupport,
    this.ipv6Support,
    this.securityGroupReferencingSupport,
  });

  Map<String, dynamic> toJson() {
    final applianceModeSupport = this.applianceModeSupport;
    final dnsSupport = this.dnsSupport;
    final ipv6Support = this.ipv6Support;
    final securityGroupReferencingSupport =
        this.securityGroupReferencingSupport;
    return {
      if (applianceModeSupport != null)
        'applianceModeSupport': applianceModeSupport.value,
      if (dnsSupport != null) 'dnsSupport': dnsSupport.value,
      if (ipv6Support != null) 'ipv6Support': ipv6Support.value,
      if (securityGroupReferencingSupport != null)
        'securityGroupReferencingSupport':
            securityGroupReferencingSupport.value,
    };
  }
}

enum TransportProtocol {
  tcp('tcp'),
  udp('udp'),
  ;

  final String value;

  const TransportProtocol(this.value);

  static TransportProtocol fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TransportProtocol'));
}

/// Information about an association between a branch network interface with a
/// trunk network interface.
class TrunkInterfaceAssociation {
  /// The ID of the association.
  final String? associationId;

  /// The ID of the branch network interface.
  final String? branchInterfaceId;

  /// The application key when you use the GRE protocol.
  final int? greKey;

  /// The interface protocol. Valid values are <code>VLAN</code> and
  /// <code>GRE</code>.
  final InterfaceProtocolType? interfaceProtocol;

  /// The tags for the trunk interface association.
  final List<Tag>? tags;

  /// The ID of the trunk network interface.
  final String? trunkInterfaceId;

  /// The ID of the VLAN when you use the VLAN protocol.
  final int? vlanId;

  TrunkInterfaceAssociation({
    this.associationId,
    this.branchInterfaceId,
    this.greKey,
    this.interfaceProtocol,
    this.tags,
    this.trunkInterfaceId,
    this.vlanId,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final branchInterfaceId = this.branchInterfaceId;
    final greKey = this.greKey;
    final interfaceProtocol = this.interfaceProtocol;
    final tags = this.tags;
    final trunkInterfaceId = this.trunkInterfaceId;
    final vlanId = this.vlanId;
    return {
      if (associationId != null) 'associationId': associationId,
      if (branchInterfaceId != null) 'branchInterfaceId': branchInterfaceId,
      if (greKey != null) 'greKey': greKey,
      if (interfaceProtocol != null)
        'interfaceProtocol': interfaceProtocol.value,
      if (tags != null) 'tagSet': tags,
      if (trunkInterfaceId != null) 'trunkInterfaceId': trunkInterfaceId,
      if (vlanId != null) 'vlanId': vlanId,
    };
  }
}

enum TrustProviderType {
  user('user'),
  device('device'),
  ;

  final String value;

  const TrustProviderType(this.value);

  static TrustProviderType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TrustProviderType'));
}

enum TunnelInsideIpVersion {
  ipv4('ipv4'),
  ipv6('ipv6'),
  ;

  final String value;

  const TunnelInsideIpVersion(this.value);

  static TunnelInsideIpVersion fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TunnelInsideIpVersion'));
}

/// The VPN tunnel options.
class TunnelOption {
  /// The action to take after a DPD timeout occurs.
  final String? dpdTimeoutAction;

  /// The number of seconds after which a DPD timeout occurs.
  final int? dpdTimeoutSeconds;

  /// Status of tunnel endpoint lifecycle control feature.
  final bool? enableTunnelLifecycleControl;

  /// The IKE versions that are permitted for the VPN tunnel.
  final List<IKEVersionsListValue>? ikeVersions;

  /// Options for logging VPN tunnel activity.
  final VpnTunnelLogOptions? logOptions;

  /// The external IP address of the VPN tunnel.
  final String? outsideIpAddress;

  /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1
  /// IKE negotiations.
  final List<Phase1DHGroupNumbersListValue>? phase1DHGroupNumbers;

  /// The permitted encryption algorithms for the VPN tunnel for phase 1 IKE
  /// negotiations.
  final List<Phase1EncryptionAlgorithmsListValue>? phase1EncryptionAlgorithms;

  /// The permitted integrity algorithms for the VPN tunnel for phase 1 IKE
  /// negotiations.
  final List<Phase1IntegrityAlgorithmsListValue>? phase1IntegrityAlgorithms;

  /// The lifetime for phase 1 of the IKE negotiation, in seconds.
  final int? phase1LifetimeSeconds;

  /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2
  /// IKE negotiations.
  final List<Phase2DHGroupNumbersListValue>? phase2DHGroupNumbers;

  /// The permitted encryption algorithms for the VPN tunnel for phase 2 IKE
  /// negotiations.
  final List<Phase2EncryptionAlgorithmsListValue>? phase2EncryptionAlgorithms;

  /// The permitted integrity algorithms for the VPN tunnel for phase 2 IKE
  /// negotiations.
  final List<Phase2IntegrityAlgorithmsListValue>? phase2IntegrityAlgorithms;

  /// The lifetime for phase 2 of the IKE negotiation, in seconds.
  final int? phase2LifetimeSeconds;

  /// The pre-shared key (PSK) to establish initial authentication between the
  /// virtual private gateway and the customer gateway.
  final String? preSharedKey;

  /// The percentage of the rekey window determined by
  /// <code>RekeyMarginTimeSeconds</code> during which the rekey time is randomly
  /// selected.
  final int? rekeyFuzzPercentage;

  /// The margin time, in seconds, before the phase 2 lifetime expires, during
  /// which the Amazon Web Services side of the VPN connection performs an IKE
  /// rekey.
  final int? rekeyMarginTimeSeconds;

  /// The number of packets in an IKE replay window.
  final int? replayWindowSize;

  /// The action to take when the establishing the VPN tunnels for a VPN
  /// connection.
  final String? startupAction;

  /// The range of inside IPv4 addresses for the tunnel.
  final String? tunnelInsideCidr;

  /// The range of inside IPv6 addresses for the tunnel.
  final String? tunnelInsideIpv6Cidr;

  TunnelOption({
    this.dpdTimeoutAction,
    this.dpdTimeoutSeconds,
    this.enableTunnelLifecycleControl,
    this.ikeVersions,
    this.logOptions,
    this.outsideIpAddress,
    this.phase1DHGroupNumbers,
    this.phase1EncryptionAlgorithms,
    this.phase1IntegrityAlgorithms,
    this.phase1LifetimeSeconds,
    this.phase2DHGroupNumbers,
    this.phase2EncryptionAlgorithms,
    this.phase2IntegrityAlgorithms,
    this.phase2LifetimeSeconds,
    this.preSharedKey,
    this.rekeyFuzzPercentage,
    this.rekeyMarginTimeSeconds,
    this.replayWindowSize,
    this.startupAction,
    this.tunnelInsideCidr,
    this.tunnelInsideIpv6Cidr,
  });

  Map<String, dynamic> toJson() {
    final dpdTimeoutAction = this.dpdTimeoutAction;
    final dpdTimeoutSeconds = this.dpdTimeoutSeconds;
    final enableTunnelLifecycleControl = this.enableTunnelLifecycleControl;
    final ikeVersions = this.ikeVersions;
    final logOptions = this.logOptions;
    final outsideIpAddress = this.outsideIpAddress;
    final phase1DHGroupNumbers = this.phase1DHGroupNumbers;
    final phase1EncryptionAlgorithms = this.phase1EncryptionAlgorithms;
    final phase1IntegrityAlgorithms = this.phase1IntegrityAlgorithms;
    final phase1LifetimeSeconds = this.phase1LifetimeSeconds;
    final phase2DHGroupNumbers = this.phase2DHGroupNumbers;
    final phase2EncryptionAlgorithms = this.phase2EncryptionAlgorithms;
    final phase2IntegrityAlgorithms = this.phase2IntegrityAlgorithms;
    final phase2LifetimeSeconds = this.phase2LifetimeSeconds;
    final preSharedKey = this.preSharedKey;
    final rekeyFuzzPercentage = this.rekeyFuzzPercentage;
    final rekeyMarginTimeSeconds = this.rekeyMarginTimeSeconds;
    final replayWindowSize = this.replayWindowSize;
    final startupAction = this.startupAction;
    final tunnelInsideCidr = this.tunnelInsideCidr;
    final tunnelInsideIpv6Cidr = this.tunnelInsideIpv6Cidr;
    return {
      if (dpdTimeoutAction != null) 'dpdTimeoutAction': dpdTimeoutAction,
      if (dpdTimeoutSeconds != null) 'dpdTimeoutSeconds': dpdTimeoutSeconds,
      if (enableTunnelLifecycleControl != null)
        'enableTunnelLifecycleControl': enableTunnelLifecycleControl,
      if (ikeVersions != null) 'ikeVersionSet': ikeVersions,
      if (logOptions != null) 'logOptions': logOptions,
      if (outsideIpAddress != null) 'outsideIpAddress': outsideIpAddress,
      if (phase1DHGroupNumbers != null)
        'phase1DHGroupNumberSet': phase1DHGroupNumbers,
      if (phase1EncryptionAlgorithms != null)
        'phase1EncryptionAlgorithmSet': phase1EncryptionAlgorithms,
      if (phase1IntegrityAlgorithms != null)
        'phase1IntegrityAlgorithmSet': phase1IntegrityAlgorithms,
      if (phase1LifetimeSeconds != null)
        'phase1LifetimeSeconds': phase1LifetimeSeconds,
      if (phase2DHGroupNumbers != null)
        'phase2DHGroupNumberSet': phase2DHGroupNumbers,
      if (phase2EncryptionAlgorithms != null)
        'phase2EncryptionAlgorithmSet': phase2EncryptionAlgorithms,
      if (phase2IntegrityAlgorithms != null)
        'phase2IntegrityAlgorithmSet': phase2IntegrityAlgorithms,
      if (phase2LifetimeSeconds != null)
        'phase2LifetimeSeconds': phase2LifetimeSeconds,
      if (preSharedKey != null) 'preSharedKey': preSharedKey,
      if (rekeyFuzzPercentage != null)
        'rekeyFuzzPercentage': rekeyFuzzPercentage,
      if (rekeyMarginTimeSeconds != null)
        'rekeyMarginTimeSeconds': rekeyMarginTimeSeconds,
      if (replayWindowSize != null) 'replayWindowSize': replayWindowSize,
      if (startupAction != null) 'startupAction': startupAction,
      if (tunnelInsideCidr != null) 'tunnelInsideCidr': tunnelInsideCidr,
      if (tunnelInsideIpv6Cidr != null)
        'tunnelInsideIpv6Cidr': tunnelInsideIpv6Cidr,
    };
  }
}

class UnassignIpv6AddressesResult {
  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The IPv6 addresses that have been unassigned from the network interface.
  final List<String>? unassignedIpv6Addresses;

  /// The IPv4 prefixes that have been unassigned from the network interface.
  final List<String>? unassignedIpv6Prefixes;

  UnassignIpv6AddressesResult({
    this.networkInterfaceId,
    this.unassignedIpv6Addresses,
    this.unassignedIpv6Prefixes,
  });

  Map<String, dynamic> toJson() {
    final networkInterfaceId = this.networkInterfaceId;
    final unassignedIpv6Addresses = this.unassignedIpv6Addresses;
    final unassignedIpv6Prefixes = this.unassignedIpv6Prefixes;
    return {
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (unassignedIpv6Addresses != null)
        'unassignedIpv6Addresses': unassignedIpv6Addresses,
      if (unassignedIpv6Prefixes != null)
        'unassignedIpv6PrefixSet': unassignedIpv6Prefixes,
    };
  }
}

class UnassignPrivateNatGatewayAddressResult {
  /// Information about the NAT gateway IP addresses.
  final List<NatGatewayAddress>? natGatewayAddresses;

  /// The ID of the NAT gateway.
  final String? natGatewayId;

  UnassignPrivateNatGatewayAddressResult({
    this.natGatewayAddresses,
    this.natGatewayId,
  });

  Map<String, dynamic> toJson() {
    final natGatewayAddresses = this.natGatewayAddresses;
    final natGatewayId = this.natGatewayId;
    return {
      if (natGatewayAddresses != null)
        'natGatewayAddressSet': natGatewayAddresses,
      if (natGatewayId != null) 'natGatewayId': natGatewayId,
    };
  }
}

enum UnlimitedSupportedInstanceFamily {
  t2('t2'),
  t3('t3'),
  t3a('t3a'),
  t4g('t4g'),
  ;

  final String value;

  const UnlimitedSupportedInstanceFamily(this.value);

  static UnlimitedSupportedInstanceFamily fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum UnlimitedSupportedInstanceFamily'));
}

class UnlockSnapshotResult {
  /// The ID of the snapshot.
  final String? snapshotId;

  UnlockSnapshotResult({
    this.snapshotId,
  });

  Map<String, dynamic> toJson() {
    final snapshotId = this.snapshotId;
    return {
      if (snapshotId != null) 'snapshotId': snapshotId,
    };
  }
}

class UnmonitorInstancesResult {
  /// The monitoring information.
  final List<InstanceMonitoring>? instanceMonitorings;

  UnmonitorInstancesResult({
    this.instanceMonitorings,
  });

  Map<String, dynamic> toJson() {
    final instanceMonitorings = this.instanceMonitorings;
    return {
      if (instanceMonitorings != null) 'instancesSet': instanceMonitorings,
    };
  }
}

enum UnsuccessfulInstanceCreditSpecificationErrorCode {
  invalidInstanceIDMalformed('InvalidInstanceID.Malformed'),
  invalidInstanceIDNotFound('InvalidInstanceID.NotFound'),
  incorrectInstanceState('IncorrectInstanceState'),
  instanceCreditSpecificationNotSupported(
      'InstanceCreditSpecification.NotSupported'),
  ;

  final String value;

  const UnsuccessfulInstanceCreditSpecificationErrorCode(this.value);

  static UnsuccessfulInstanceCreditSpecificationErrorCode fromString(
          String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum UnsuccessfulInstanceCreditSpecificationErrorCode'));
}

/// Describes the burstable performance instance whose credit option for CPU
/// usage was not modified.
class UnsuccessfulInstanceCreditSpecificationItem {
  /// The applicable error for the burstable performance instance whose credit
  /// option for CPU usage was not modified.
  final UnsuccessfulInstanceCreditSpecificationItemError? error;

  /// The ID of the instance.
  final String? instanceId;

  UnsuccessfulInstanceCreditSpecificationItem({
    this.error,
    this.instanceId,
  });

  Map<String, dynamic> toJson() {
    final error = this.error;
    final instanceId = this.instanceId;
    return {
      if (error != null) 'error': error,
      if (instanceId != null) 'instanceId': instanceId,
    };
  }
}

/// Information about the error for the burstable performance instance whose
/// credit option for CPU usage was not modified.
class UnsuccessfulInstanceCreditSpecificationItemError {
  /// The error code.
  final UnsuccessfulInstanceCreditSpecificationErrorCode? code;

  /// The applicable error message.
  final String? message;

  UnsuccessfulInstanceCreditSpecificationItemError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

/// Information about items that were not successfully processed in a batch
/// call.
class UnsuccessfulItem {
  /// Information about the error.
  final UnsuccessfulItemError? error;

  /// The ID of the resource.
  final String? resourceId;

  UnsuccessfulItem({
    this.error,
    this.resourceId,
  });

  Map<String, dynamic> toJson() {
    final error = this.error;
    final resourceId = this.resourceId;
    return {
      if (error != null) 'error': error,
      if (resourceId != null) 'resourceId': resourceId,
    };
  }
}

/// Information about the error that occurred. For more information about
/// errors, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
/// codes</a>.
class UnsuccessfulItemError {
  /// The error code.
  final String? code;

  /// The error message accompanying the error code.
  final String? message;

  UnsuccessfulItemError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

class UpdateSecurityGroupRuleDescriptionsEgressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  UpdateSecurityGroupRuleDescriptionsEgressResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

class UpdateSecurityGroupRuleDescriptionsIngressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool? returnValue;

  UpdateSecurityGroupRuleDescriptionsIngressResult({
    this.returnValue,
  });

  Map<String, dynamic> toJson() {
    final returnValue = this.returnValue;
    return {
      if (returnValue != null) 'return': returnValue,
    };
  }
}

enum UsageClassType {
  spot('spot'),
  onDemand('on-demand'),
  capacityBlock('capacity-block'),
  ;

  final String value;

  const UsageClassType(this.value);

  static UsageClassType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum UsageClassType'));
}

/// Describes the Amazon S3 bucket for the disk image.
class UserBucket {
  /// The name of the Amazon S3 bucket where the disk image is located.
  final String? s3Bucket;

  /// The file name of the disk image.
  final String? s3Key;

  UserBucket({
    this.s3Bucket,
    this.s3Key,
  });

  Map<String, dynamic> toJson() {
    final s3Bucket = this.s3Bucket;
    final s3Key = this.s3Key;
    return {
      if (s3Bucket != null) 'S3Bucket': s3Bucket,
      if (s3Key != null) 'S3Key': s3Key,
    };
  }
}

/// Describes the Amazon S3 bucket for the disk image.
class UserBucketDetails {
  /// The Amazon S3 bucket from which the disk image was created.
  final String? s3Bucket;

  /// The file name of the disk image.
  final String? s3Key;

  UserBucketDetails({
    this.s3Bucket,
    this.s3Key,
  });

  Map<String, dynamic> toJson() {
    final s3Bucket = this.s3Bucket;
    final s3Key = this.s3Key;
    return {
      if (s3Bucket != null) 's3Bucket': s3Bucket,
      if (s3Key != null) 's3Key': s3Key,
    };
  }
}

/// Describes the user data for an instance.
class UserData {
  /// The user data. If you are using an Amazon Web Services SDK or command line
  /// tool, Base64-encoding is performed for you, and you can load the text from a
  /// file. Otherwise, you must provide Base64-encoded text.
  final String? data;

  UserData({
    this.data,
  });

  Map<String, dynamic> toJson() {
    final data = this.data;
    return {
      if (data != null) 'data': data,
    };
  }
}

/// Describes a security group and Amazon Web Services account ID pair.
class UserIdGroupPair {
  /// A description for the security group rule that references this user ID group
  /// pair.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
  final String? description;

  /// The ID of the security group.
  final String? groupId;

  /// [Default VPC] The name of the security group. For a security group in a
  /// nondefault VPC, use the security group ID.
  ///
  /// For a referenced security group in another VPC, this value is not returned
  /// if the referenced security group is deleted.
  final String? groupName;

  /// The status of a VPC peering connection, if applicable.
  final String? peeringStatus;

  /// The ID of an Amazon Web Services account.
  ///
  /// For a referenced security group in another VPC, the account ID of the
  /// referenced security group is returned in the response. If the referenced
  /// security group is deleted, this value is not returned.
  final String? userId;

  /// The ID of the VPC for the referenced security group, if applicable.
  final String? vpcId;

  /// The ID of the VPC peering connection, if applicable.
  final String? vpcPeeringConnectionId;

  UserIdGroupPair({
    this.description,
    this.groupId,
    this.groupName,
    this.peeringStatus,
    this.userId,
    this.vpcId,
    this.vpcPeeringConnectionId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final groupId = this.groupId;
    final groupName = this.groupName;
    final peeringStatus = this.peeringStatus;
    final userId = this.userId;
    final vpcId = this.vpcId;
    final vpcPeeringConnectionId = this.vpcPeeringConnectionId;
    return {
      if (description != null) 'description': description,
      if (groupId != null) 'groupId': groupId,
      if (groupName != null) 'groupName': groupName,
      if (peeringStatus != null) 'peeringStatus': peeringStatus,
      if (userId != null) 'userId': userId,
      if (vpcId != null) 'vpcId': vpcId,
      if (vpcPeeringConnectionId != null)
        'vpcPeeringConnectionId': vpcPeeringConnectionId,
    };
  }
}

enum UserTrustProviderType {
  iamIdentityCenter('iam-identity-center'),
  oidc('oidc'),
  ;

  final String value;

  const UserTrustProviderType(this.value);

  static UserTrustProviderType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum UserTrustProviderType'));
}

/// The minimum and maximum number of vCPUs.
class VCpuCountRange {
  /// The maximum number of vCPUs. If this parameter is not specified, there is no
  /// maximum limit.
  final int? max;

  /// The minimum number of vCPUs. If the value is <code>0</code>, there is no
  /// minimum limit.
  final int? min;

  VCpuCountRange({
    this.max,
    this.min,
  });

  Map<String, dynamic> toJson() {
    final max = this.max;
    final min = this.min;
    return {
      if (max != null) 'max': max,
      if (min != null) 'min': min,
    };
  }
}

/// The minimum and maximum number of vCPUs.
class VCpuCountRangeRequest {
  /// The minimum number of vCPUs. To specify no minimum limit, specify
  /// <code>0</code>.
  final int min;

  /// The maximum number of vCPUs. To specify no maximum limit, omit this
  /// parameter.
  final int? max;

  VCpuCountRangeRequest({
    required this.min,
    this.max,
  });

  Map<String, dynamic> toJson() {
    final min = this.min;
    final max = this.max;
    return {
      'Min': min,
      if (max != null) 'Max': max,
    };
  }
}

/// Describes the vCPU configurations for the instance type.
class VCpuInfo {
  /// The default number of cores for the instance type.
  final int? defaultCores;

  /// The default number of threads per core for the instance type.
  final int? defaultThreadsPerCore;

  /// The default number of vCPUs for the instance type.
  final int? defaultVCpus;

  /// The valid number of cores that can be configured for the instance type.
  final List<int>? validCores;

  /// The valid number of threads per core that can be configured for the instance
  /// type.
  final List<int>? validThreadsPerCore;

  VCpuInfo({
    this.defaultCores,
    this.defaultThreadsPerCore,
    this.defaultVCpus,
    this.validCores,
    this.validThreadsPerCore,
  });

  Map<String, dynamic> toJson() {
    final defaultCores = this.defaultCores;
    final defaultThreadsPerCore = this.defaultThreadsPerCore;
    final defaultVCpus = this.defaultVCpus;
    final validCores = this.validCores;
    final validThreadsPerCore = this.validThreadsPerCore;
    return {
      if (defaultCores != null) 'defaultCores': defaultCores,
      if (defaultThreadsPerCore != null)
        'defaultThreadsPerCore': defaultThreadsPerCore,
      if (defaultVCpus != null) 'defaultVCpus': defaultVCpus,
      if (validCores != null) 'validCores': validCores,
      if (validThreadsPerCore != null)
        'validThreadsPerCore': validThreadsPerCore,
    };
  }
}

/// The error code and error message that is returned for a parameter or
/// parameter combination that is not valid when a new launch template or new
/// version of a launch template is created.
class ValidationError {
  /// The error code that indicates why the parameter or parameter combination is
  /// not valid. For more information about error codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// codes</a>.
  final String? code;

  /// The error message that describes why the parameter or parameter combination
  /// is not valid. For more information about error messages, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// codes</a>.
  final String? message;

  ValidationError({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code,
      if (message != null) 'message': message,
    };
  }
}

/// The error codes and error messages that are returned for the parameters or
/// parameter combinations that are not valid when a new launch template or new
/// version of a launch template is created.
class ValidationWarning {
  /// The error codes and error messages.
  final List<ValidationError>? errors;

  ValidationWarning({
    this.errors,
  });

  Map<String, dynamic> toJson() {
    final errors = this.errors;
    return {
      if (errors != null) 'errorSet': errors,
    };
  }
}

/// An Amazon Web Services Verified Access endpoint specifies the application
/// that Amazon Web Services Verified Access provides access to. It must be
/// attached to an Amazon Web Services Verified Access group. An Amazon Web
/// Services Verified Access endpoint must also have an attached access policy
/// before you attached it to a group.
class VerifiedAccessEndpoint {
  /// The DNS name for users to reach your application.
  final String? applicationDomain;

  /// The type of attachment used to provide connectivity between the Amazon Web
  /// Services Verified Access endpoint and the application.
  final VerifiedAccessEndpointAttachmentType? attachmentType;

  /// The creation time.
  final String? creationTime;

  /// The deletion time.
  final String? deletionTime;

  /// A description for the Amazon Web Services Verified Access endpoint.
  final String? description;

  /// Returned if endpoint has a device trust provider attached.
  final String? deviceValidationDomain;

  /// The ARN of a public TLS/SSL certificate imported into or created with ACM.
  final String? domainCertificateArn;

  /// A DNS name that is generated for the endpoint.
  final String? endpointDomain;

  /// The type of Amazon Web Services Verified Access endpoint. Incoming
  /// application requests will be sent to an IP address, load balancer or a
  /// network interface depending on the endpoint type specified.
  final VerifiedAccessEndpointType? endpointType;

  /// The last updated time.
  final String? lastUpdatedTime;

  /// The load balancer details if creating the Amazon Web Services Verified
  /// Access endpoint as <code>load-balancer</code>type.
  final VerifiedAccessEndpointLoadBalancerOptions? loadBalancerOptions;

  /// The options for network-interface type endpoint.
  final VerifiedAccessEndpointEniOptions? networkInterfaceOptions;

  /// The IDs of the security groups for the endpoint.
  final List<String>? securityGroupIds;

  /// The options in use for server side encryption.
  final VerifiedAccessSseSpecificationResponse? sseSpecification;

  /// The endpoint status.
  final VerifiedAccessEndpointStatus? status;

  /// The tags.
  final List<Tag>? tags;

  /// The ID of the Amazon Web Services Verified Access endpoint.
  final String? verifiedAccessEndpointId;

  /// The ID of the Amazon Web Services Verified Access group.
  final String? verifiedAccessGroupId;

  /// The ID of the Amazon Web Services Verified Access instance.
  final String? verifiedAccessInstanceId;

  VerifiedAccessEndpoint({
    this.applicationDomain,
    this.attachmentType,
    this.creationTime,
    this.deletionTime,
    this.description,
    this.deviceValidationDomain,
    this.domainCertificateArn,
    this.endpointDomain,
    this.endpointType,
    this.lastUpdatedTime,
    this.loadBalancerOptions,
    this.networkInterfaceOptions,
    this.securityGroupIds,
    this.sseSpecification,
    this.status,
    this.tags,
    this.verifiedAccessEndpointId,
    this.verifiedAccessGroupId,
    this.verifiedAccessInstanceId,
  });

  Map<String, dynamic> toJson() {
    final applicationDomain = this.applicationDomain;
    final attachmentType = this.attachmentType;
    final creationTime = this.creationTime;
    final deletionTime = this.deletionTime;
    final description = this.description;
    final deviceValidationDomain = this.deviceValidationDomain;
    final domainCertificateArn = this.domainCertificateArn;
    final endpointDomain = this.endpointDomain;
    final endpointType = this.endpointType;
    final lastUpdatedTime = this.lastUpdatedTime;
    final loadBalancerOptions = this.loadBalancerOptions;
    final networkInterfaceOptions = this.networkInterfaceOptions;
    final securityGroupIds = this.securityGroupIds;
    final sseSpecification = this.sseSpecification;
    final status = this.status;
    final tags = this.tags;
    final verifiedAccessEndpointId = this.verifiedAccessEndpointId;
    final verifiedAccessGroupId = this.verifiedAccessGroupId;
    final verifiedAccessInstanceId = this.verifiedAccessInstanceId;
    return {
      if (applicationDomain != null) 'applicationDomain': applicationDomain,
      if (attachmentType != null) 'attachmentType': attachmentType.value,
      if (creationTime != null) 'creationTime': creationTime,
      if (deletionTime != null) 'deletionTime': deletionTime,
      if (description != null) 'description': description,
      if (deviceValidationDomain != null)
        'deviceValidationDomain': deviceValidationDomain,
      if (domainCertificateArn != null)
        'domainCertificateArn': domainCertificateArn,
      if (endpointDomain != null) 'endpointDomain': endpointDomain,
      if (endpointType != null) 'endpointType': endpointType.value,
      if (lastUpdatedTime != null) 'lastUpdatedTime': lastUpdatedTime,
      if (loadBalancerOptions != null)
        'loadBalancerOptions': loadBalancerOptions,
      if (networkInterfaceOptions != null)
        'networkInterfaceOptions': networkInterfaceOptions,
      if (securityGroupIds != null) 'securityGroupIdSet': securityGroupIds,
      if (sseSpecification != null) 'sseSpecification': sseSpecification,
      if (status != null) 'status': status,
      if (tags != null) 'tagSet': tags,
      if (verifiedAccessEndpointId != null)
        'verifiedAccessEndpointId': verifiedAccessEndpointId,
      if (verifiedAccessGroupId != null)
        'verifiedAccessGroupId': verifiedAccessGroupId,
      if (verifiedAccessInstanceId != null)
        'verifiedAccessInstanceId': verifiedAccessInstanceId,
    };
  }
}

enum VerifiedAccessEndpointAttachmentType {
  vpc('vpc'),
  ;

  final String value;

  const VerifiedAccessEndpointAttachmentType(this.value);

  static VerifiedAccessEndpointAttachmentType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VerifiedAccessEndpointAttachmentType'));
}

/// Options for a network-interface type endpoint.
class VerifiedAccessEndpointEniOptions {
  /// The ID of the network interface.
  final String? networkInterfaceId;

  /// The IP port number.
  final int? port;

  /// The IP protocol.
  final VerifiedAccessEndpointProtocol? protocol;

  VerifiedAccessEndpointEniOptions({
    this.networkInterfaceId,
    this.port,
    this.protocol,
  });

  Map<String, dynamic> toJson() {
    final networkInterfaceId = this.networkInterfaceId;
    final port = this.port;
    final protocol = this.protocol;
    return {
      if (networkInterfaceId != null) 'networkInterfaceId': networkInterfaceId,
      if (port != null) 'port': port,
      if (protocol != null) 'protocol': protocol.value,
    };
  }
}

/// Describes a load balancer when creating an Amazon Web Services Verified
/// Access endpoint using the <code>load-balancer</code> type.
class VerifiedAccessEndpointLoadBalancerOptions {
  /// The ARN of the load balancer.
  final String? loadBalancerArn;

  /// The IP port number.
  final int? port;

  /// The IP protocol.
  final VerifiedAccessEndpointProtocol? protocol;

  /// The IDs of the subnets.
  final List<String>? subnetIds;

  VerifiedAccessEndpointLoadBalancerOptions({
    this.loadBalancerArn,
    this.port,
    this.protocol,
    this.subnetIds,
  });

  Map<String, dynamic> toJson() {
    final loadBalancerArn = this.loadBalancerArn;
    final port = this.port;
    final protocol = this.protocol;
    final subnetIds = this.subnetIds;
    return {
      if (loadBalancerArn != null) 'loadBalancerArn': loadBalancerArn,
      if (port != null) 'port': port,
      if (protocol != null) 'protocol': protocol.value,
      if (subnetIds != null) 'subnetIdSet': subnetIds,
    };
  }
}

enum VerifiedAccessEndpointProtocol {
  http('http'),
  https('https'),
  ;

  final String value;

  const VerifiedAccessEndpointProtocol(this.value);

  static VerifiedAccessEndpointProtocol fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VerifiedAccessEndpointProtocol'));
}

/// Describes the status of a Verified Access endpoint.
class VerifiedAccessEndpointStatus {
  /// The status code of the Verified Access endpoint.
  final VerifiedAccessEndpointStatusCode? code;

  /// The status message of the Verified Access endpoint.
  final String? message;

  VerifiedAccessEndpointStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum VerifiedAccessEndpointStatusCode {
  pending('pending'),
  active('active'),
  updating('updating'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const VerifiedAccessEndpointStatusCode(this.value);

  static VerifiedAccessEndpointStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VerifiedAccessEndpointStatusCode'));
}

enum VerifiedAccessEndpointType {
  loadBalancer('load-balancer'),
  networkInterface('network-interface'),
  ;

  final String value;

  const VerifiedAccessEndpointType(this.value);

  static VerifiedAccessEndpointType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VerifiedAccessEndpointType'));
}

/// Describes a Verified Access group.
class VerifiedAccessGroup {
  /// The creation time.
  final String? creationTime;

  /// The deletion time.
  final String? deletionTime;

  /// A description for the Amazon Web Services Verified Access group.
  final String? description;

  /// The last updated time.
  final String? lastUpdatedTime;

  /// The Amazon Web Services account number that owns the group.
  final String? owner;

  /// The options in use for server side encryption.
  final VerifiedAccessSseSpecificationResponse? sseSpecification;

  /// The tags.
  final List<Tag>? tags;

  /// The ARN of the Verified Access group.
  final String? verifiedAccessGroupArn;

  /// The ID of the Verified Access group.
  final String? verifiedAccessGroupId;

  /// The ID of the Amazon Web Services Verified Access instance.
  final String? verifiedAccessInstanceId;

  VerifiedAccessGroup({
    this.creationTime,
    this.deletionTime,
    this.description,
    this.lastUpdatedTime,
    this.owner,
    this.sseSpecification,
    this.tags,
    this.verifiedAccessGroupArn,
    this.verifiedAccessGroupId,
    this.verifiedAccessInstanceId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final deletionTime = this.deletionTime;
    final description = this.description;
    final lastUpdatedTime = this.lastUpdatedTime;
    final owner = this.owner;
    final sseSpecification = this.sseSpecification;
    final tags = this.tags;
    final verifiedAccessGroupArn = this.verifiedAccessGroupArn;
    final verifiedAccessGroupId = this.verifiedAccessGroupId;
    final verifiedAccessInstanceId = this.verifiedAccessInstanceId;
    return {
      if (creationTime != null) 'creationTime': creationTime,
      if (deletionTime != null) 'deletionTime': deletionTime,
      if (description != null) 'description': description,
      if (lastUpdatedTime != null) 'lastUpdatedTime': lastUpdatedTime,
      if (owner != null) 'owner': owner,
      if (sseSpecification != null) 'sseSpecification': sseSpecification,
      if (tags != null) 'tagSet': tags,
      if (verifiedAccessGroupArn != null)
        'verifiedAccessGroupArn': verifiedAccessGroupArn,
      if (verifiedAccessGroupId != null)
        'verifiedAccessGroupId': verifiedAccessGroupId,
      if (verifiedAccessInstanceId != null)
        'verifiedAccessInstanceId': verifiedAccessInstanceId,
    };
  }
}

/// Describes a Verified Access instance.
class VerifiedAccessInstance {
  /// The creation time.
  final String? creationTime;

  /// A description for the Amazon Web Services Verified Access instance.
  final String? description;

  /// Indicates whether support for Federal Information Processing Standards
  /// (FIPS) is enabled on the instance.
  final bool? fipsEnabled;

  /// The last updated time.
  final String? lastUpdatedTime;

  /// The tags.
  final List<Tag>? tags;

  /// The ID of the Amazon Web Services Verified Access instance.
  final String? verifiedAccessInstanceId;

  /// The IDs of the Amazon Web Services Verified Access trust providers.
  final List<VerifiedAccessTrustProviderCondensed>?
      verifiedAccessTrustProviders;

  VerifiedAccessInstance({
    this.creationTime,
    this.description,
    this.fipsEnabled,
    this.lastUpdatedTime,
    this.tags,
    this.verifiedAccessInstanceId,
    this.verifiedAccessTrustProviders,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final fipsEnabled = this.fipsEnabled;
    final lastUpdatedTime = this.lastUpdatedTime;
    final tags = this.tags;
    final verifiedAccessInstanceId = this.verifiedAccessInstanceId;
    final verifiedAccessTrustProviders = this.verifiedAccessTrustProviders;
    return {
      if (creationTime != null) 'creationTime': creationTime,
      if (description != null) 'description': description,
      if (fipsEnabled != null) 'fipsEnabled': fipsEnabled,
      if (lastUpdatedTime != null) 'lastUpdatedTime': lastUpdatedTime,
      if (tags != null) 'tagSet': tags,
      if (verifiedAccessInstanceId != null)
        'verifiedAccessInstanceId': verifiedAccessInstanceId,
      if (verifiedAccessTrustProviders != null)
        'verifiedAccessTrustProviderSet': verifiedAccessTrustProviders,
    };
  }
}

/// Describes logging options for an Amazon Web Services Verified Access
/// instance.
class VerifiedAccessInstanceLoggingConfiguration {
  /// Details about the logging options.
  final VerifiedAccessLogs? accessLogs;

  /// The ID of the Amazon Web Services Verified Access instance.
  final String? verifiedAccessInstanceId;

  VerifiedAccessInstanceLoggingConfiguration({
    this.accessLogs,
    this.verifiedAccessInstanceId,
  });

  Map<String, dynamic> toJson() {
    final accessLogs = this.accessLogs;
    final verifiedAccessInstanceId = this.verifiedAccessInstanceId;
    return {
      if (accessLogs != null) 'accessLogs': accessLogs,
      if (verifiedAccessInstanceId != null)
        'verifiedAccessInstanceId': verifiedAccessInstanceId,
    };
  }
}

/// Options for CloudWatch Logs as a logging destination.
class VerifiedAccessLogCloudWatchLogsDestination {
  /// The delivery status for access logs.
  final VerifiedAccessLogDeliveryStatus? deliveryStatus;

  /// Indicates whether logging is enabled.
  final bool? enabled;

  /// The ID of the CloudWatch Logs log group.
  final String? logGroup;

  VerifiedAccessLogCloudWatchLogsDestination({
    this.deliveryStatus,
    this.enabled,
    this.logGroup,
  });

  Map<String, dynamic> toJson() {
    final deliveryStatus = this.deliveryStatus;
    final enabled = this.enabled;
    final logGroup = this.logGroup;
    return {
      if (deliveryStatus != null) 'deliveryStatus': deliveryStatus,
      if (enabled != null) 'enabled': enabled,
      if (logGroup != null) 'logGroup': logGroup,
    };
  }
}

/// Options for CloudWatch Logs as a logging destination.
class VerifiedAccessLogCloudWatchLogsDestinationOptions {
  /// Indicates whether logging is enabled.
  final bool enabled;

  /// The ID of the CloudWatch Logs log group.
  final String? logGroup;

  VerifiedAccessLogCloudWatchLogsDestinationOptions({
    required this.enabled,
    this.logGroup,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    final logGroup = this.logGroup;
    return {
      'Enabled': enabled,
      if (logGroup != null) 'LogGroup': logGroup,
    };
  }
}

/// Describes a log delivery status.
class VerifiedAccessLogDeliveryStatus {
  /// The status code.
  final VerifiedAccessLogDeliveryStatusCode? code;

  /// The status message.
  final String? message;

  VerifiedAccessLogDeliveryStatus({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum VerifiedAccessLogDeliveryStatusCode {
  success('success'),
  failed('failed'),
  ;

  final String value;

  const VerifiedAccessLogDeliveryStatusCode(this.value);

  static VerifiedAccessLogDeliveryStatusCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VerifiedAccessLogDeliveryStatusCode'));
}

/// Options for Kinesis as a logging destination.
class VerifiedAccessLogKinesisDataFirehoseDestination {
  /// The delivery status.
  final VerifiedAccessLogDeliveryStatus? deliveryStatus;

  /// The ID of the delivery stream.
  final String? deliveryStream;

  /// Indicates whether logging is enabled.
  final bool? enabled;

  VerifiedAccessLogKinesisDataFirehoseDestination({
    this.deliveryStatus,
    this.deliveryStream,
    this.enabled,
  });

  Map<String, dynamic> toJson() {
    final deliveryStatus = this.deliveryStatus;
    final deliveryStream = this.deliveryStream;
    final enabled = this.enabled;
    return {
      if (deliveryStatus != null) 'deliveryStatus': deliveryStatus,
      if (deliveryStream != null) 'deliveryStream': deliveryStream,
      if (enabled != null) 'enabled': enabled,
    };
  }
}

/// Describes Amazon Kinesis Data Firehose logging options.
class VerifiedAccessLogKinesisDataFirehoseDestinationOptions {
  /// Indicates whether logging is enabled.
  final bool enabled;

  /// The ID of the delivery stream.
  final String? deliveryStream;

  VerifiedAccessLogKinesisDataFirehoseDestinationOptions({
    required this.enabled,
    this.deliveryStream,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    final deliveryStream = this.deliveryStream;
    return {
      'Enabled': enabled,
      if (deliveryStream != null) 'DeliveryStream': deliveryStream,
    };
  }
}

/// Options for Verified Access logs.
class VerifiedAccessLogOptions {
  /// Sends Verified Access logs to CloudWatch Logs.
  final VerifiedAccessLogCloudWatchLogsDestinationOptions? cloudWatchLogs;

  /// Indicates whether to include trust data sent by trust providers in the logs.
  final bool? includeTrustContext;

  /// Sends Verified Access logs to Kinesis.
  final VerifiedAccessLogKinesisDataFirehoseDestinationOptions?
      kinesisDataFirehose;

  /// The logging version.
  ///
  /// Valid values: <code>ocsf-0.1</code> | <code>ocsf-1.0.0-rc.2</code>
  final String? logVersion;

  /// Sends Verified Access logs to Amazon S3.
  final VerifiedAccessLogS3DestinationOptions? s3;

  VerifiedAccessLogOptions({
    this.cloudWatchLogs,
    this.includeTrustContext,
    this.kinesisDataFirehose,
    this.logVersion,
    this.s3,
  });

  Map<String, dynamic> toJson() {
    final cloudWatchLogs = this.cloudWatchLogs;
    final includeTrustContext = this.includeTrustContext;
    final kinesisDataFirehose = this.kinesisDataFirehose;
    final logVersion = this.logVersion;
    final s3 = this.s3;
    return {
      if (cloudWatchLogs != null) 'CloudWatchLogs': cloudWatchLogs,
      if (includeTrustContext != null)
        'IncludeTrustContext': includeTrustContext,
      if (kinesisDataFirehose != null)
        'KinesisDataFirehose': kinesisDataFirehose,
      if (logVersion != null) 'LogVersion': logVersion,
      if (s3 != null) 'S3': s3,
    };
  }
}

/// Options for Amazon S3 as a logging destination.
class VerifiedAccessLogS3Destination {
  /// The bucket name.
  final String? bucketName;

  /// The Amazon Web Services account number that owns the bucket.
  final String? bucketOwner;

  /// The delivery status.
  final VerifiedAccessLogDeliveryStatus? deliveryStatus;

  /// Indicates whether logging is enabled.
  final bool? enabled;

  /// The bucket prefix.
  final String? prefix;

  VerifiedAccessLogS3Destination({
    this.bucketName,
    this.bucketOwner,
    this.deliveryStatus,
    this.enabled,
    this.prefix,
  });

  Map<String, dynamic> toJson() {
    final bucketName = this.bucketName;
    final bucketOwner = this.bucketOwner;
    final deliveryStatus = this.deliveryStatus;
    final enabled = this.enabled;
    final prefix = this.prefix;
    return {
      if (bucketName != null) 'bucketName': bucketName,
      if (bucketOwner != null) 'bucketOwner': bucketOwner,
      if (deliveryStatus != null) 'deliveryStatus': deliveryStatus,
      if (enabled != null) 'enabled': enabled,
      if (prefix != null) 'prefix': prefix,
    };
  }
}

/// Options for Amazon S3 as a logging destination.
class VerifiedAccessLogS3DestinationOptions {
  /// Indicates whether logging is enabled.
  final bool enabled;

  /// The bucket name.
  final String? bucketName;

  /// The ID of the Amazon Web Services account that owns the Amazon S3 bucket.
  final String? bucketOwner;

  /// The bucket prefix.
  final String? prefix;

  VerifiedAccessLogS3DestinationOptions({
    required this.enabled,
    this.bucketName,
    this.bucketOwner,
    this.prefix,
  });

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    final bucketName = this.bucketName;
    final bucketOwner = this.bucketOwner;
    final prefix = this.prefix;
    return {
      'Enabled': enabled,
      if (bucketName != null) 'BucketName': bucketName,
      if (bucketOwner != null) 'BucketOwner': bucketOwner,
      if (prefix != null) 'Prefix': prefix,
    };
  }
}

/// Describes the options for Verified Access logs.
class VerifiedAccessLogs {
  /// CloudWatch Logs logging destination.
  final VerifiedAccessLogCloudWatchLogsDestination? cloudWatchLogs;

  /// Indicates whether trust data is included in the logs.
  final bool? includeTrustContext;

  /// Kinesis logging destination.
  final VerifiedAccessLogKinesisDataFirehoseDestination? kinesisDataFirehose;

  /// The log version.
  final String? logVersion;

  /// Amazon S3 logging options.
  final VerifiedAccessLogS3Destination? s3;

  VerifiedAccessLogs({
    this.cloudWatchLogs,
    this.includeTrustContext,
    this.kinesisDataFirehose,
    this.logVersion,
    this.s3,
  });

  Map<String, dynamic> toJson() {
    final cloudWatchLogs = this.cloudWatchLogs;
    final includeTrustContext = this.includeTrustContext;
    final kinesisDataFirehose = this.kinesisDataFirehose;
    final logVersion = this.logVersion;
    final s3 = this.s3;
    return {
      if (cloudWatchLogs != null) 'cloudWatchLogs': cloudWatchLogs,
      if (includeTrustContext != null)
        'includeTrustContext': includeTrustContext,
      if (kinesisDataFirehose != null)
        'kinesisDataFirehose': kinesisDataFirehose,
      if (logVersion != null) 'logVersion': logVersion,
      if (s3 != null) 's3': s3,
    };
  }
}

/// Verified Access provides server side encryption by default to data at rest
/// using Amazon Web Services-owned KMS keys. You also have the option of using
/// customer managed KMS keys, which can be specified using the options below.
class VerifiedAccessSseSpecificationRequest {
  /// Enable or disable the use of customer managed KMS keys for server side
  /// encryption.
  ///
  /// Valid values: <code>True</code> | <code>False</code>
  final bool? customerManagedKeyEnabled;

  /// The ARN of the KMS key.
  final String? kmsKeyArn;

  VerifiedAccessSseSpecificationRequest({
    this.customerManagedKeyEnabled,
    this.kmsKeyArn,
  });

  Map<String, dynamic> toJson() {
    final customerManagedKeyEnabled = this.customerManagedKeyEnabled;
    final kmsKeyArn = this.kmsKeyArn;
    return {
      if (customerManagedKeyEnabled != null)
        'CustomerManagedKeyEnabled': customerManagedKeyEnabled,
      if (kmsKeyArn != null) 'KmsKeyArn': kmsKeyArn,
    };
  }
}

/// The options in use for server side encryption.
class VerifiedAccessSseSpecificationResponse {
  /// Indicates whether customer managed KMS keys are in use for server side
  /// encryption.
  ///
  /// Valid values: <code>True</code> | <code>False</code>
  final bool? customerManagedKeyEnabled;

  /// The ARN of the KMS key.
  final String? kmsKeyArn;

  VerifiedAccessSseSpecificationResponse({
    this.customerManagedKeyEnabled,
    this.kmsKeyArn,
  });

  Map<String, dynamic> toJson() {
    final customerManagedKeyEnabled = this.customerManagedKeyEnabled;
    final kmsKeyArn = this.kmsKeyArn;
    return {
      if (customerManagedKeyEnabled != null)
        'customerManagedKeyEnabled': customerManagedKeyEnabled,
      if (kmsKeyArn != null) 'kmsKeyArn': kmsKeyArn,
    };
  }
}

/// Describes a Verified Access trust provider.
class VerifiedAccessTrustProvider {
  /// The creation time.
  final String? creationTime;

  /// A description for the Amazon Web Services Verified Access trust provider.
  final String? description;

  /// The options for device-identity trust provider.
  final DeviceOptions? deviceOptions;

  /// The type of device-based trust provider.
  final DeviceTrustProviderType? deviceTrustProviderType;

  /// The last updated time.
  final String? lastUpdatedTime;

  /// The options for an OpenID Connect-compatible user-identity trust provider.
  final OidcOptions? oidcOptions;

  /// The identifier to be used when working with policy rules.
  final String? policyReferenceName;

  /// The options in use for server side encryption.
  final VerifiedAccessSseSpecificationResponse? sseSpecification;

  /// The tags.
  final List<Tag>? tags;

  /// The type of Verified Access trust provider.
  final TrustProviderType? trustProviderType;

  /// The type of user-based trust provider.
  final UserTrustProviderType? userTrustProviderType;

  /// The ID of the Amazon Web Services Verified Access trust provider.
  final String? verifiedAccessTrustProviderId;

  VerifiedAccessTrustProvider({
    this.creationTime,
    this.description,
    this.deviceOptions,
    this.deviceTrustProviderType,
    this.lastUpdatedTime,
    this.oidcOptions,
    this.policyReferenceName,
    this.sseSpecification,
    this.tags,
    this.trustProviderType,
    this.userTrustProviderType,
    this.verifiedAccessTrustProviderId,
  });

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final deviceOptions = this.deviceOptions;
    final deviceTrustProviderType = this.deviceTrustProviderType;
    final lastUpdatedTime = this.lastUpdatedTime;
    final oidcOptions = this.oidcOptions;
    final policyReferenceName = this.policyReferenceName;
    final sseSpecification = this.sseSpecification;
    final tags = this.tags;
    final trustProviderType = this.trustProviderType;
    final userTrustProviderType = this.userTrustProviderType;
    final verifiedAccessTrustProviderId = this.verifiedAccessTrustProviderId;
    return {
      if (creationTime != null) 'creationTime': creationTime,
      if (description != null) 'description': description,
      if (deviceOptions != null) 'deviceOptions': deviceOptions,
      if (deviceTrustProviderType != null)
        'deviceTrustProviderType': deviceTrustProviderType.value,
      if (lastUpdatedTime != null) 'lastUpdatedTime': lastUpdatedTime,
      if (oidcOptions != null) 'oidcOptions': oidcOptions,
      if (policyReferenceName != null)
        'policyReferenceName': policyReferenceName,
      if (sseSpecification != null) 'sseSpecification': sseSpecification,
      if (tags != null) 'tagSet': tags,
      if (trustProviderType != null)
        'trustProviderType': trustProviderType.value,
      if (userTrustProviderType != null)
        'userTrustProviderType': userTrustProviderType.value,
      if (verifiedAccessTrustProviderId != null)
        'verifiedAccessTrustProviderId': verifiedAccessTrustProviderId,
    };
  }
}

/// Condensed information about a trust provider.
class VerifiedAccessTrustProviderCondensed {
  /// The description of trust provider.
  final String? description;

  /// The type of device-based trust provider.
  final DeviceTrustProviderType? deviceTrustProviderType;

  /// The type of trust provider (user- or device-based).
  final TrustProviderType? trustProviderType;

  /// The type of user-based trust provider.
  final UserTrustProviderType? userTrustProviderType;

  /// The ID of the trust provider.
  final String? verifiedAccessTrustProviderId;

  VerifiedAccessTrustProviderCondensed({
    this.description,
    this.deviceTrustProviderType,
    this.trustProviderType,
    this.userTrustProviderType,
    this.verifiedAccessTrustProviderId,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final deviceTrustProviderType = this.deviceTrustProviderType;
    final trustProviderType = this.trustProviderType;
    final userTrustProviderType = this.userTrustProviderType;
    final verifiedAccessTrustProviderId = this.verifiedAccessTrustProviderId;
    return {
      if (description != null) 'description': description,
      if (deviceTrustProviderType != null)
        'deviceTrustProviderType': deviceTrustProviderType.value,
      if (trustProviderType != null)
        'trustProviderType': trustProviderType.value,
      if (userTrustProviderType != null)
        'userTrustProviderType': userTrustProviderType.value,
      if (verifiedAccessTrustProviderId != null)
        'verifiedAccessTrustProviderId': verifiedAccessTrustProviderId,
    };
  }
}

/// Describes telemetry for a VPN tunnel.
class VgwTelemetry {
  /// The number of accepted routes.
  final int? acceptedRouteCount;

  /// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
  final String? certificateArn;

  /// The date and time of the last change in status. This field is updated when
  /// changes in IKE (Phase 1), IPSec (Phase 2), or BGP status are detected.
  final DateTime? lastStatusChange;

  /// The Internet-routable IP address of the virtual private gateway's outside
  /// interface.
  final String? outsideIpAddress;

  /// The status of the VPN tunnel.
  final TelemetryStatus? status;

  /// If an error occurs, a description of the error.
  final String? statusMessage;

  VgwTelemetry({
    this.acceptedRouteCount,
    this.certificateArn,
    this.lastStatusChange,
    this.outsideIpAddress,
    this.status,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final acceptedRouteCount = this.acceptedRouteCount;
    final certificateArn = this.certificateArn;
    final lastStatusChange = this.lastStatusChange;
    final outsideIpAddress = this.outsideIpAddress;
    final status = this.status;
    final statusMessage = this.statusMessage;
    return {
      if (acceptedRouteCount != null) 'acceptedRouteCount': acceptedRouteCount,
      if (certificateArn != null) 'certificateArn': certificateArn,
      if (lastStatusChange != null)
        'lastStatusChange': iso8601ToJson(lastStatusChange),
      if (outsideIpAddress != null) 'outsideIpAddress': outsideIpAddress,
      if (status != null) 'status': status.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum VirtualizationType {
  hvm('hvm'),
  paravirtual('paravirtual'),
  ;

  final String value;

  const VirtualizationType(this.value);

  static VirtualizationType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VirtualizationType'));
}

/// Describes a volume.
class Volume {
  /// <note>
  /// This parameter is not returned by CreateVolume.
  /// </note>
  /// Information about the volume attachments.
  final List<VolumeAttachment>? attachments;

  /// The Availability Zone for the volume.
  final String? availabilityZone;

  /// The time stamp when volume creation was initiated.
  final DateTime? createTime;

  /// Indicates whether the volume is encrypted.
  final bool? encrypted;

  /// <note>
  /// This parameter is not returned by CreateVolume.
  /// </note>
  /// Indicates whether the volume was created using fast snapshot restore.
  final bool? fastRestored;

  /// The number of I/O operations per second (IOPS). For <code>gp3</code>,
  /// <code>io1</code>, and <code>io2</code> volumes, this represents the number
  /// of IOPS that are provisioned for the volume. For <code>gp2</code> volumes,
  /// this represents the baseline performance of the volume and the rate at which
  /// the volume accumulates I/O credits for bursting.
  final int? iops;

  /// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
  /// that was used to protect the volume encryption key for the volume.
  final String? kmsKeyId;

  /// Indicates whether Amazon EBS Multi-Attach is enabled.
  final bool? multiAttachEnabled;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The size of the volume, in GiBs.
  final int? size;

  /// The snapshot from which the volume was created, if applicable.
  final String? snapshotId;

  /// <note>
  /// This parameter is not returned by CreateVolume.
  /// </note>
  /// Reserved for future use.
  final SSEType? sseType;

  /// The volume state.
  final VolumeState? state;

  /// Any tags assigned to the volume.
  final List<Tag>? tags;

  /// The throughput that the volume supports, in MiB/s.
  final int? throughput;

  /// The ID of the volume.
  final String? volumeId;

  /// The volume type.
  final VolumeType? volumeType;

  Volume({
    this.attachments,
    this.availabilityZone,
    this.createTime,
    this.encrypted,
    this.fastRestored,
    this.iops,
    this.kmsKeyId,
    this.multiAttachEnabled,
    this.outpostArn,
    this.size,
    this.snapshotId,
    this.sseType,
    this.state,
    this.tags,
    this.throughput,
    this.volumeId,
    this.volumeType,
  });

  Map<String, dynamic> toJson() {
    final attachments = this.attachments;
    final availabilityZone = this.availabilityZone;
    final createTime = this.createTime;
    final encrypted = this.encrypted;
    final fastRestored = this.fastRestored;
    final iops = this.iops;
    final kmsKeyId = this.kmsKeyId;
    final multiAttachEnabled = this.multiAttachEnabled;
    final outpostArn = this.outpostArn;
    final size = this.size;
    final snapshotId = this.snapshotId;
    final sseType = this.sseType;
    final state = this.state;
    final tags = this.tags;
    final throughput = this.throughput;
    final volumeId = this.volumeId;
    final volumeType = this.volumeType;
    return {
      if (attachments != null) 'attachmentSet': attachments,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (createTime != null) 'createTime': iso8601ToJson(createTime),
      if (encrypted != null) 'encrypted': encrypted,
      if (fastRestored != null) 'fastRestored': fastRestored,
      if (iops != null) 'iops': iops,
      if (kmsKeyId != null) 'kmsKeyId': kmsKeyId,
      if (multiAttachEnabled != null) 'multiAttachEnabled': multiAttachEnabled,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (size != null) 'size': size,
      if (snapshotId != null) 'snapshotId': snapshotId,
      if (sseType != null) 'sseType': sseType.value,
      if (state != null) 'status': state.value,
      if (tags != null) 'tagSet': tags,
      if (throughput != null) 'throughput': throughput,
      if (volumeId != null) 'volumeId': volumeId,
      if (volumeType != null) 'volumeType': volumeType.value,
    };
  }
}

/// Describes volume attachment details.
class VolumeAttachment {
  /// The ARN of the Amazon ECS or Fargate task to which the volume is attached.
  final String? associatedResource;

  /// The time stamp when the attachment initiated.
  final DateTime? attachTime;

  /// Indicates whether the EBS volume is deleted on instance termination.
  final bool? deleteOnTermination;

  /// The device name.
  ///
  /// If the volume is attached to a Fargate task, this parameter returns
  /// <code>null</code>.
  final String? device;

  /// The ID of the instance.
  ///
  /// If the volume is attached to a Fargate task, this parameter returns
  /// <code>null</code>.
  final String? instanceId;

  /// The service principal of Amazon Web Services service that owns the
  /// underlying instance to which the volume is attached.
  ///
  /// This parameter is returned only for volumes that are attached to Fargate
  /// tasks.
  final String? instanceOwningService;

  /// The attachment state of the volume.
  final VolumeAttachmentState? state;

  /// The ID of the volume.
  final String? volumeId;

  VolumeAttachment({
    this.associatedResource,
    this.attachTime,
    this.deleteOnTermination,
    this.device,
    this.instanceId,
    this.instanceOwningService,
    this.state,
    this.volumeId,
  });

  Map<String, dynamic> toJson() {
    final associatedResource = this.associatedResource;
    final attachTime = this.attachTime;
    final deleteOnTermination = this.deleteOnTermination;
    final device = this.device;
    final instanceId = this.instanceId;
    final instanceOwningService = this.instanceOwningService;
    final state = this.state;
    final volumeId = this.volumeId;
    return {
      if (associatedResource != null) 'associatedResource': associatedResource,
      if (attachTime != null) 'attachTime': iso8601ToJson(attachTime),
      if (deleteOnTermination != null)
        'deleteOnTermination': deleteOnTermination,
      if (device != null) 'device': device,
      if (instanceId != null) 'instanceId': instanceId,
      if (instanceOwningService != null)
        'instanceOwningService': instanceOwningService,
      if (state != null) 'status': state.value,
      if (volumeId != null) 'volumeId': volumeId,
    };
  }
}

enum VolumeAttachmentState {
  attaching('attaching'),
  attached('attached'),
  detaching('detaching'),
  detached('detached'),
  busy('busy'),
  ;

  final String value;

  const VolumeAttachmentState(this.value);

  static VolumeAttachmentState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VolumeAttachmentState'));
}

enum VolumeAttributeName {
  autoEnableIO('autoEnableIO'),
  productCodes('productCodes'),
  ;

  final String value;

  const VolumeAttributeName(this.value);

  static VolumeAttributeName fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VolumeAttributeName'));
}

/// Describes an EBS volume.
class VolumeDetail {
  /// The size of the volume, in GiB.
  final int size;

  VolumeDetail({
    required this.size,
  });

  Map<String, dynamic> toJson() {
    final size = this.size;
    return {
      'size': size,
    };
  }
}

/// Describes the modification status of an EBS volume.
///
/// If the volume has never been modified, some element values will be null.
class VolumeModification {
  /// The modification completion or failure time.
  final DateTime? endTime;

  /// The current modification state. The modification state is null for
  /// unmodified volumes.
  final VolumeModificationState? modificationState;

  /// The original IOPS rate of the volume.
  final int? originalIops;

  /// The original setting for Amazon EBS Multi-Attach.
  final bool? originalMultiAttachEnabled;

  /// The original size of the volume, in GiB.
  final int? originalSize;

  /// The original throughput of the volume, in MiB/s.
  final int? originalThroughput;

  /// The original EBS volume type of the volume.
  final VolumeType? originalVolumeType;

  /// The modification progress, from 0 to 100 percent complete.
  final int? progress;

  /// The modification start time.
  final DateTime? startTime;

  /// A status message about the modification progress or failure.
  final String? statusMessage;

  /// The target IOPS rate of the volume.
  final int? targetIops;

  /// The target setting for Amazon EBS Multi-Attach.
  final bool? targetMultiAttachEnabled;

  /// The target size of the volume, in GiB.
  final int? targetSize;

  /// The target throughput of the volume, in MiB/s.
  final int? targetThroughput;

  /// The target EBS volume type of the volume.
  final VolumeType? targetVolumeType;

  /// The ID of the volume.
  final String? volumeId;

  VolumeModification({
    this.endTime,
    this.modificationState,
    this.originalIops,
    this.originalMultiAttachEnabled,
    this.originalSize,
    this.originalThroughput,
    this.originalVolumeType,
    this.progress,
    this.startTime,
    this.statusMessage,
    this.targetIops,
    this.targetMultiAttachEnabled,
    this.targetSize,
    this.targetThroughput,
    this.targetVolumeType,
    this.volumeId,
  });

  Map<String, dynamic> toJson() {
    final endTime = this.endTime;
    final modificationState = this.modificationState;
    final originalIops = this.originalIops;
    final originalMultiAttachEnabled = this.originalMultiAttachEnabled;
    final originalSize = this.originalSize;
    final originalThroughput = this.originalThroughput;
    final originalVolumeType = this.originalVolumeType;
    final progress = this.progress;
    final startTime = this.startTime;
    final statusMessage = this.statusMessage;
    final targetIops = this.targetIops;
    final targetMultiAttachEnabled = this.targetMultiAttachEnabled;
    final targetSize = this.targetSize;
    final targetThroughput = this.targetThroughput;
    final targetVolumeType = this.targetVolumeType;
    final volumeId = this.volumeId;
    return {
      if (endTime != null) 'endTime': iso8601ToJson(endTime),
      if (modificationState != null)
        'modificationState': modificationState.value,
      if (originalIops != null) 'originalIops': originalIops,
      if (originalMultiAttachEnabled != null)
        'originalMultiAttachEnabled': originalMultiAttachEnabled,
      if (originalSize != null) 'originalSize': originalSize,
      if (originalThroughput != null) 'originalThroughput': originalThroughput,
      if (originalVolumeType != null)
        'originalVolumeType': originalVolumeType.value,
      if (progress != null) 'progress': progress,
      if (startTime != null) 'startTime': iso8601ToJson(startTime),
      if (statusMessage != null) 'statusMessage': statusMessage,
      if (targetIops != null) 'targetIops': targetIops,
      if (targetMultiAttachEnabled != null)
        'targetMultiAttachEnabled': targetMultiAttachEnabled,
      if (targetSize != null) 'targetSize': targetSize,
      if (targetThroughput != null) 'targetThroughput': targetThroughput,
      if (targetVolumeType != null) 'targetVolumeType': targetVolumeType.value,
      if (volumeId != null) 'volumeId': volumeId,
    };
  }
}

enum VolumeModificationState {
  modifying('modifying'),
  optimizing('optimizing'),
  completed('completed'),
  failed('failed'),
  ;

  final String value;

  const VolumeModificationState(this.value);

  static VolumeModificationState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VolumeModificationState'));
}

enum VolumeState {
  creating('creating'),
  available('available'),
  inUse('in-use'),
  deleting('deleting'),
  deleted('deleted'),
  error('error'),
  ;

  final String value;

  const VolumeState(this.value);

  static VolumeState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum VolumeState'));
}

/// Describes a volume status operation code.
class VolumeStatusAction {
  /// The code identifying the operation, for example,
  /// <code>enable-volume-io</code>.
  final String? code;

  /// A description of the operation.
  final String? description;

  /// The ID of the event associated with this operation.
  final String? eventId;

  /// The event type associated with this operation.
  final String? eventType;

  VolumeStatusAction({
    this.code,
    this.description,
    this.eventId,
    this.eventType,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final description = this.description;
    final eventId = this.eventId;
    final eventType = this.eventType;
    return {
      if (code != null) 'code': code,
      if (description != null) 'description': description,
      if (eventId != null) 'eventId': eventId,
      if (eventType != null) 'eventType': eventType,
    };
  }
}

/// Information about the instances to which the volume is attached.
class VolumeStatusAttachmentStatus {
  /// The ID of the attached instance.
  final String? instanceId;

  /// The maximum IOPS supported by the attached instance.
  final String? ioPerformance;

  VolumeStatusAttachmentStatus({
    this.instanceId,
    this.ioPerformance,
  });

  Map<String, dynamic> toJson() {
    final instanceId = this.instanceId;
    final ioPerformance = this.ioPerformance;
    return {
      if (instanceId != null) 'instanceId': instanceId,
      if (ioPerformance != null) 'ioPerformance': ioPerformance,
    };
  }
}

/// Describes a volume status.
class VolumeStatusDetails {
  /// The name of the volume status.
  final VolumeStatusName? name;

  /// The intended status of the volume status.
  final String? status;

  VolumeStatusDetails({
    this.name,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final status = this.status;
    return {
      if (name != null) 'name': name.value,
      if (status != null) 'status': status,
    };
  }
}

/// Describes a volume status event.
class VolumeStatusEvent {
  /// A description of the event.
  final String? description;

  /// The ID of this event.
  final String? eventId;

  /// The type of this event.
  final String? eventType;

  /// The ID of the instance associated with the event.
  final String? instanceId;

  /// The latest end time of the event.
  final DateTime? notAfter;

  /// The earliest start time of the event.
  final DateTime? notBefore;

  VolumeStatusEvent({
    this.description,
    this.eventId,
    this.eventType,
    this.instanceId,
    this.notAfter,
    this.notBefore,
  });

  Map<String, dynamic> toJson() {
    final description = this.description;
    final eventId = this.eventId;
    final eventType = this.eventType;
    final instanceId = this.instanceId;
    final notAfter = this.notAfter;
    final notBefore = this.notBefore;
    return {
      if (description != null) 'description': description,
      if (eventId != null) 'eventId': eventId,
      if (eventType != null) 'eventType': eventType,
      if (instanceId != null) 'instanceId': instanceId,
      if (notAfter != null) 'notAfter': iso8601ToJson(notAfter),
      if (notBefore != null) 'notBefore': iso8601ToJson(notBefore),
    };
  }
}

/// Describes the status of a volume.
class VolumeStatusInfo {
  /// The details of the volume status.
  final List<VolumeStatusDetails>? details;

  /// The status of the volume.
  final VolumeStatusInfoStatus? status;

  VolumeStatusInfo({
    this.details,
    this.status,
  });

  Map<String, dynamic> toJson() {
    final details = this.details;
    final status = this.status;
    return {
      if (details != null) 'details': details,
      if (status != null) 'status': status.value,
    };
  }
}

enum VolumeStatusInfoStatus {
  ok('ok'),
  impaired('impaired'),
  insufficientData('insufficient-data'),
  ;

  final String value;

  const VolumeStatusInfoStatus(this.value);

  static VolumeStatusInfoStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VolumeStatusInfoStatus'));
}

/// Describes the volume status.
class VolumeStatusItem {
  /// The details of the operation.
  final List<VolumeStatusAction>? actions;

  /// Information about the instances to which the volume is attached.
  final List<VolumeStatusAttachmentStatus>? attachmentStatuses;

  /// The Availability Zone of the volume.
  final String? availabilityZone;

  /// A list of events associated with the volume.
  final List<VolumeStatusEvent>? events;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? outpostArn;

  /// The volume ID.
  final String? volumeId;

  /// The volume status.
  final VolumeStatusInfo? volumeStatus;

  VolumeStatusItem({
    this.actions,
    this.attachmentStatuses,
    this.availabilityZone,
    this.events,
    this.outpostArn,
    this.volumeId,
    this.volumeStatus,
  });

  Map<String, dynamic> toJson() {
    final actions = this.actions;
    final attachmentStatuses = this.attachmentStatuses;
    final availabilityZone = this.availabilityZone;
    final events = this.events;
    final outpostArn = this.outpostArn;
    final volumeId = this.volumeId;
    final volumeStatus = this.volumeStatus;
    return {
      if (actions != null) 'actionsSet': actions,
      if (attachmentStatuses != null) 'attachmentStatuses': attachmentStatuses,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (events != null) 'eventsSet': events,
      if (outpostArn != null) 'outpostArn': outpostArn,
      if (volumeId != null) 'volumeId': volumeId,
      if (volumeStatus != null) 'volumeStatus': volumeStatus,
    };
  }
}

enum VolumeStatusName {
  ioEnabled('io-enabled'),
  ioPerformance('io-performance'),
  ;

  final String value;

  const VolumeStatusName(this.value);

  static VolumeStatusName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum VolumeStatusName'));
}

enum VolumeType {
  standard('standard'),
  io1('io1'),
  io2('io2'),
  gp2('gp2'),
  sc1('sc1'),
  st1('st1'),
  gp3('gp3'),
  ;

  final String value;

  const VolumeType(this.value);

  static VolumeType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum VolumeType'));
}

/// Describes a VPC.
class Vpc {
  /// The primary IPv4 CIDR block for the VPC.
  final String? cidrBlock;

  /// Information about the IPv4 CIDR blocks associated with the VPC.
  final List<VpcCidrBlockAssociation>? cidrBlockAssociationSet;

  /// The ID of the set of DHCP options you've associated with the VPC.
  final String? dhcpOptionsId;

  /// The allowed tenancy of instances launched into the VPC.
  final Tenancy? instanceTenancy;

  /// Information about the IPv6 CIDR blocks associated with the VPC.
  final List<VpcIpv6CidrBlockAssociation>? ipv6CidrBlockAssociationSet;

  /// Indicates whether the VPC is the default VPC.
  final bool? isDefault;

  /// The ID of the Amazon Web Services account that owns the VPC.
  final String? ownerId;

  /// The current state of the VPC.
  final VpcState? state;

  /// Any tags assigned to the VPC.
  final List<Tag>? tags;

  /// The ID of the VPC.
  final String? vpcId;

  Vpc({
    this.cidrBlock,
    this.cidrBlockAssociationSet,
    this.dhcpOptionsId,
    this.instanceTenancy,
    this.ipv6CidrBlockAssociationSet,
    this.isDefault,
    this.ownerId,
    this.state,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final cidrBlock = this.cidrBlock;
    final cidrBlockAssociationSet = this.cidrBlockAssociationSet;
    final dhcpOptionsId = this.dhcpOptionsId;
    final instanceTenancy = this.instanceTenancy;
    final ipv6CidrBlockAssociationSet = this.ipv6CidrBlockAssociationSet;
    final isDefault = this.isDefault;
    final ownerId = this.ownerId;
    final state = this.state;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (cidrBlock != null) 'cidrBlock': cidrBlock,
      if (cidrBlockAssociationSet != null)
        'cidrBlockAssociationSet': cidrBlockAssociationSet,
      if (dhcpOptionsId != null) 'dhcpOptionsId': dhcpOptionsId,
      if (instanceTenancy != null) 'instanceTenancy': instanceTenancy.value,
      if (ipv6CidrBlockAssociationSet != null)
        'ipv6CidrBlockAssociationSet': ipv6CidrBlockAssociationSet,
      if (isDefault != null) 'isDefault': isDefault,
      if (ownerId != null) 'ownerId': ownerId,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes an attachment between a virtual private gateway and a VPC.
class VpcAttachment {
  /// The current state of the attachment.
  final AttachmentStatus? state;

  /// The ID of the VPC.
  final String? vpcId;

  VpcAttachment({
    this.state,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final vpcId = this.vpcId;
    return {
      if (state != null) 'state': state.value,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum VpcAttributeName {
  enableDnsSupport('enableDnsSupport'),
  enableDnsHostnames('enableDnsHostnames'),
  enableNetworkAddressUsageMetrics('enableNetworkAddressUsageMetrics'),
  ;

  final String value;

  const VpcAttributeName(this.value);

  static VpcAttributeName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum VpcAttributeName'));
}

/// Describes an IPv4 CIDR block associated with a VPC.
class VpcCidrBlockAssociation {
  /// The association ID for the IPv4 CIDR block.
  final String? associationId;

  /// The IPv4 CIDR block.
  final String? cidrBlock;

  /// Information about the state of the CIDR block.
  final VpcCidrBlockState? cidrBlockState;

  VpcCidrBlockAssociation({
    this.associationId,
    this.cidrBlock,
    this.cidrBlockState,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final cidrBlock = this.cidrBlock;
    final cidrBlockState = this.cidrBlockState;
    return {
      if (associationId != null) 'associationId': associationId,
      if (cidrBlock != null) 'cidrBlock': cidrBlock,
      if (cidrBlockState != null) 'cidrBlockState': cidrBlockState,
    };
  }
}

/// Describes the state of a CIDR block.
class VpcCidrBlockState {
  /// The state of the CIDR block.
  final VpcCidrBlockStateCode? state;

  /// A message about the status of the CIDR block, if applicable.
  final String? statusMessage;

  VpcCidrBlockState({
    this.state,
    this.statusMessage,
  });

  Map<String, dynamic> toJson() {
    final state = this.state;
    final statusMessage = this.statusMessage;
    return {
      if (state != null) 'state': state.value,
      if (statusMessage != null) 'statusMessage': statusMessage,
    };
  }
}

enum VpcCidrBlockStateCode {
  associating('associating'),
  associated('associated'),
  disassociating('disassociating'),
  disassociated('disassociated'),
  failing('failing'),
  failed('failed'),
  ;

  final String value;

  const VpcCidrBlockStateCode(this.value);

  static VpcCidrBlockStateCode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VpcCidrBlockStateCode'));
}

/// <note>
/// Deprecated.
/// </note>
/// Describes whether a VPC is enabled for ClassicLink.
class VpcClassicLink {
  /// Indicates whether the VPC is enabled for ClassicLink.
  final bool? classicLinkEnabled;

  /// Any tags assigned to the VPC.
  final List<Tag>? tags;

  /// The ID of the VPC.
  final String? vpcId;

  VpcClassicLink({
    this.classicLinkEnabled,
    this.tags,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final classicLinkEnabled = this.classicLinkEnabled;
    final tags = this.tags;
    final vpcId = this.vpcId;
    return {
      if (classicLinkEnabled != null) 'classicLinkEnabled': classicLinkEnabled,
      if (tags != null) 'tagSet': tags,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes a VPC endpoint.
class VpcEndpoint {
  /// The date and time that the endpoint was created.
  final DateTime? creationTimestamp;

  /// (Interface endpoint) The DNS entries for the endpoint.
  final List<DnsEntry>? dnsEntries;

  /// The DNS options for the endpoint.
  final DnsOptions? dnsOptions;

  /// (Interface endpoint) Information about the security groups that are
  /// associated with the network interface.
  final List<SecurityGroupIdentifier>? groups;

  /// The IP address type for the endpoint.
  final IpAddressType? ipAddressType;

  /// The last error that occurred for endpoint.
  final LastError? lastError;

  /// (Interface endpoint) The network interfaces for the endpoint.
  final List<String>? networkInterfaceIds;

  /// The ID of the Amazon Web Services account that owns the endpoint.
  final String? ownerId;

  /// The policy document associated with the endpoint, if applicable.
  final String? policyDocument;

  /// (Interface endpoint) Indicates whether the VPC is associated with a private
  /// hosted zone.
  final bool? privateDnsEnabled;

  /// Indicates whether the endpoint is being managed by its service.
  final bool? requesterManaged;

  /// (Gateway endpoint) The IDs of the route tables associated with the endpoint.
  final List<String>? routeTableIds;

  /// The name of the service to which the endpoint is associated.
  final String? serviceName;

  /// The state of the endpoint.
  final State? state;

  /// (Interface endpoint) The subnets for the endpoint.
  final List<String>? subnetIds;

  /// The tags assigned to the endpoint.
  final List<Tag>? tags;

  /// The ID of the endpoint.
  final String? vpcEndpointId;

  /// The type of endpoint.
  final VpcEndpointType? vpcEndpointType;

  /// The ID of the VPC to which the endpoint is associated.
  final String? vpcId;

  VpcEndpoint({
    this.creationTimestamp,
    this.dnsEntries,
    this.dnsOptions,
    this.groups,
    this.ipAddressType,
    this.lastError,
    this.networkInterfaceIds,
    this.ownerId,
    this.policyDocument,
    this.privateDnsEnabled,
    this.requesterManaged,
    this.routeTableIds,
    this.serviceName,
    this.state,
    this.subnetIds,
    this.tags,
    this.vpcEndpointId,
    this.vpcEndpointType,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final creationTimestamp = this.creationTimestamp;
    final dnsEntries = this.dnsEntries;
    final dnsOptions = this.dnsOptions;
    final groups = this.groups;
    final ipAddressType = this.ipAddressType;
    final lastError = this.lastError;
    final networkInterfaceIds = this.networkInterfaceIds;
    final ownerId = this.ownerId;
    final policyDocument = this.policyDocument;
    final privateDnsEnabled = this.privateDnsEnabled;
    final requesterManaged = this.requesterManaged;
    final routeTableIds = this.routeTableIds;
    final serviceName = this.serviceName;
    final state = this.state;
    final subnetIds = this.subnetIds;
    final tags = this.tags;
    final vpcEndpointId = this.vpcEndpointId;
    final vpcEndpointType = this.vpcEndpointType;
    final vpcId = this.vpcId;
    return {
      if (creationTimestamp != null)
        'creationTimestamp': iso8601ToJson(creationTimestamp),
      if (dnsEntries != null) 'dnsEntrySet': dnsEntries,
      if (dnsOptions != null) 'dnsOptions': dnsOptions,
      if (groups != null) 'groupSet': groups,
      if (ipAddressType != null) 'ipAddressType': ipAddressType.value,
      if (lastError != null) 'lastError': lastError,
      if (networkInterfaceIds != null)
        'networkInterfaceIdSet': networkInterfaceIds,
      if (ownerId != null) 'ownerId': ownerId,
      if (policyDocument != null) 'policyDocument': policyDocument,
      if (privateDnsEnabled != null) 'privateDnsEnabled': privateDnsEnabled,
      if (requesterManaged != null) 'requesterManaged': requesterManaged,
      if (routeTableIds != null) 'routeTableIdSet': routeTableIds,
      if (serviceName != null) 'serviceName': serviceName,
      if (state != null) 'state': state.value,
      if (subnetIds != null) 'subnetIdSet': subnetIds,
      if (tags != null) 'tagSet': tags,
      if (vpcEndpointId != null) 'vpcEndpointId': vpcEndpointId,
      if (vpcEndpointType != null) 'vpcEndpointType': vpcEndpointType.value,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

/// Describes a VPC endpoint connection to a service.
class VpcEndpointConnection {
  /// The date and time that the VPC endpoint was created.
  final DateTime? creationTimestamp;

  /// The DNS entries for the VPC endpoint.
  final List<DnsEntry>? dnsEntries;

  /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the
  /// service.
  final List<String>? gatewayLoadBalancerArns;

  /// The IP address type for the endpoint.
  final IpAddressType? ipAddressType;

  /// The Amazon Resource Names (ARNs) of the network load balancers for the
  /// service.
  final List<String>? networkLoadBalancerArns;

  /// The ID of the service to which the endpoint is connected.
  final String? serviceId;

  /// The tags.
  final List<Tag>? tags;

  /// The ID of the VPC endpoint connection.
  final String? vpcEndpointConnectionId;

  /// The ID of the VPC endpoint.
  final String? vpcEndpointId;

  /// The ID of the Amazon Web Services account that owns the VPC endpoint.
  final String? vpcEndpointOwner;

  /// The state of the VPC endpoint.
  final State? vpcEndpointState;

  VpcEndpointConnection({
    this.creationTimestamp,
    this.dnsEntries,
    this.gatewayLoadBalancerArns,
    this.ipAddressType,
    this.networkLoadBalancerArns,
    this.serviceId,
    this.tags,
    this.vpcEndpointConnectionId,
    this.vpcEndpointId,
    this.vpcEndpointOwner,
    this.vpcEndpointState,
  });

  Map<String, dynamic> toJson() {
    final creationTimestamp = this.creationTimestamp;
    final dnsEntries = this.dnsEntries;
    final gatewayLoadBalancerArns = this.gatewayLoadBalancerArns;
    final ipAddressType = this.ipAddressType;
    final networkLoadBalancerArns = this.networkLoadBalancerArns;
    final serviceId = this.serviceId;
    final tags = this.tags;
    final vpcEndpointConnectionId = this.vpcEndpointConnectionId;
    final vpcEndpointId = this.vpcEndpointId;
    final vpcEndpointOwner = this.vpcEndpointOwner;
    final vpcEndpointState = this.vpcEndpointState;
    return {
      if (creationTimestamp != null)
        'creationTimestamp': iso8601ToJson(creationTimestamp),
      if (dnsEntries != null) 'dnsEntrySet': dnsEntries,
      if (gatewayLoadBalancerArns != null)
        'gatewayLoadBalancerArnSet': gatewayLoadBalancerArns,
      if (ipAddressType != null) 'ipAddressType': ipAddressType.value,
      if (networkLoadBalancerArns != null)
        'networkLoadBalancerArnSet': networkLoadBalancerArns,
      if (serviceId != null) 'serviceId': serviceId,
      if (tags != null) 'tagSet': tags,
      if (vpcEndpointConnectionId != null)
        'vpcEndpointConnectionId': vpcEndpointConnectionId,
      if (vpcEndpointId != null) 'vpcEndpointId': vpcEndpointId,
      if (vpcEndpointOwner != null) 'vpcEndpointOwner': vpcEndpointOwner,
      if (vpcEndpointState != null) 'vpcEndpointState': vpcEndpointState.value,
    };
  }
}

enum VpcEndpointType {
  interface('Interface'),
  gateway('Gateway'),
  gatewayLoadBalancer('GatewayLoadBalancer'),
  ;

  final String value;

  const VpcEndpointType(this.value);

  static VpcEndpointType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum VpcEndpointType'));
}

/// Describes an IPv6 CIDR block associated with a VPC.
class VpcIpv6CidrBlockAssociation {
  /// The association ID for the IPv6 CIDR block.
  final String? associationId;

  /// The IPv6 CIDR block.
  final String? ipv6CidrBlock;

  /// Information about the state of the CIDR block.
  final VpcCidrBlockState? ipv6CidrBlockState;

  /// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
  final String? ipv6Pool;

  /// The name of the unique set of Availability Zones, Local Zones, or Wavelength
  /// Zones from which Amazon Web Services advertises IP addresses, for example,
  /// <code>us-east-1-wl1-bos-wlz-1</code>.
  final String? networkBorderGroup;

  VpcIpv6CidrBlockAssociation({
    this.associationId,
    this.ipv6CidrBlock,
    this.ipv6CidrBlockState,
    this.ipv6Pool,
    this.networkBorderGroup,
  });

  Map<String, dynamic> toJson() {
    final associationId = this.associationId;
    final ipv6CidrBlock = this.ipv6CidrBlock;
    final ipv6CidrBlockState = this.ipv6CidrBlockState;
    final ipv6Pool = this.ipv6Pool;
    final networkBorderGroup = this.networkBorderGroup;
    return {
      if (associationId != null) 'associationId': associationId,
      if (ipv6CidrBlock != null) 'ipv6CidrBlock': ipv6CidrBlock,
      if (ipv6CidrBlockState != null) 'ipv6CidrBlockState': ipv6CidrBlockState,
      if (ipv6Pool != null) 'ipv6Pool': ipv6Pool,
      if (networkBorderGroup != null) 'networkBorderGroup': networkBorderGroup,
    };
  }
}

/// Describes a VPC peering connection.
class VpcPeeringConnection {
  /// Information about the accepter VPC. CIDR block information is only returned
  /// when describing an active VPC peering connection.
  final VpcPeeringConnectionVpcInfo? accepterVpcInfo;

  /// The time that an unaccepted VPC peering connection will expire.
  final DateTime? expirationTime;

  /// Information about the requester VPC. CIDR block information is only returned
  /// when describing an active VPC peering connection.
  final VpcPeeringConnectionVpcInfo? requesterVpcInfo;

  /// The status of the VPC peering connection.
  final VpcPeeringConnectionStateReason? status;

  /// Any tags assigned to the resource.
  final List<Tag>? tags;

  /// The ID of the VPC peering connection.
  final String? vpcPeeringConnectionId;

  VpcPeeringConnection({
    this.accepterVpcInfo,
    this.expirationTime,
    this.requesterVpcInfo,
    this.status,
    this.tags,
    this.vpcPeeringConnectionId,
  });

  Map<String, dynamic> toJson() {
    final accepterVpcInfo = this.accepterVpcInfo;
    final expirationTime = this.expirationTime;
    final requesterVpcInfo = this.requesterVpcInfo;
    final status = this.status;
    final tags = this.tags;
    final vpcPeeringConnectionId = this.vpcPeeringConnectionId;
    return {
      if (accepterVpcInfo != null) 'accepterVpcInfo': accepterVpcInfo,
      if (expirationTime != null)
        'expirationTime': iso8601ToJson(expirationTime),
      if (requesterVpcInfo != null) 'requesterVpcInfo': requesterVpcInfo,
      if (status != null) 'status': status,
      if (tags != null) 'tagSet': tags,
      if (vpcPeeringConnectionId != null)
        'vpcPeeringConnectionId': vpcPeeringConnectionId,
    };
  }
}

/// Describes the VPC peering connection options.
class VpcPeeringConnectionOptionsDescription {
  /// Indicates whether a local VPC can resolve public DNS hostnames to private IP
  /// addresses when queried from instances in a peer VPC.
  final bool? allowDnsResolutionFromRemoteVpc;

  /// Deprecated.
  final bool? allowEgressFromLocalClassicLinkToRemoteVpc;

  /// Deprecated.
  final bool? allowEgressFromLocalVpcToRemoteClassicLink;

  VpcPeeringConnectionOptionsDescription({
    this.allowDnsResolutionFromRemoteVpc,
    this.allowEgressFromLocalClassicLinkToRemoteVpc,
    this.allowEgressFromLocalVpcToRemoteClassicLink,
  });

  Map<String, dynamic> toJson() {
    final allowDnsResolutionFromRemoteVpc =
        this.allowDnsResolutionFromRemoteVpc;
    final allowEgressFromLocalClassicLinkToRemoteVpc =
        this.allowEgressFromLocalClassicLinkToRemoteVpc;
    final allowEgressFromLocalVpcToRemoteClassicLink =
        this.allowEgressFromLocalVpcToRemoteClassicLink;
    return {
      if (allowDnsResolutionFromRemoteVpc != null)
        'allowDnsResolutionFromRemoteVpc': allowDnsResolutionFromRemoteVpc,
      if (allowEgressFromLocalClassicLinkToRemoteVpc != null)
        'allowEgressFromLocalClassicLinkToRemoteVpc':
            allowEgressFromLocalClassicLinkToRemoteVpc,
      if (allowEgressFromLocalVpcToRemoteClassicLink != null)
        'allowEgressFromLocalVpcToRemoteClassicLink':
            allowEgressFromLocalVpcToRemoteClassicLink,
    };
  }
}

/// Describes the status of a VPC peering connection.
class VpcPeeringConnectionStateReason {
  /// The status of the VPC peering connection.
  final VpcPeeringConnectionStateReasonCode? code;

  /// A message that provides more information about the status, if applicable.
  final String? message;

  VpcPeeringConnectionStateReason({
    this.code,
    this.message,
  });

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      if (code != null) 'code': code.value,
      if (message != null) 'message': message,
    };
  }
}

enum VpcPeeringConnectionStateReasonCode {
  initiatingRequest('initiating-request'),
  pendingAcceptance('pending-acceptance'),
  active('active'),
  deleted('deleted'),
  rejected('rejected'),
  failed('failed'),
  expired('expired'),
  provisioning('provisioning'),
  deleting('deleting'),
  ;

  final String value;

  const VpcPeeringConnectionStateReasonCode(this.value);

  static VpcPeeringConnectionStateReasonCode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum VpcPeeringConnectionStateReasonCode'));
}

/// Describes a VPC in a VPC peering connection.
class VpcPeeringConnectionVpcInfo {
  /// The IPv4 CIDR block for the VPC.
  final String? cidrBlock;

  /// Information about the IPv4 CIDR blocks for the VPC.
  final List<CidrBlock>? cidrBlockSet;

  /// The IPv6 CIDR block for the VPC.
  final List<Ipv6CidrBlock>? ipv6CidrBlockSet;

  /// The ID of the Amazon Web Services account that owns the VPC.
  final String? ownerId;

  /// Information about the VPC peering connection options for the accepter or
  /// requester VPC.
  final VpcPeeringConnectionOptionsDescription? peeringOptions;

  /// The Region in which the VPC is located.
  final String? region;

  /// The ID of the VPC.
  final String? vpcId;

  VpcPeeringConnectionVpcInfo({
    this.cidrBlock,
    this.cidrBlockSet,
    this.ipv6CidrBlockSet,
    this.ownerId,
    this.peeringOptions,
    this.region,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final cidrBlock = this.cidrBlock;
    final cidrBlockSet = this.cidrBlockSet;
    final ipv6CidrBlockSet = this.ipv6CidrBlockSet;
    final ownerId = this.ownerId;
    final peeringOptions = this.peeringOptions;
    final region = this.region;
    final vpcId = this.vpcId;
    return {
      if (cidrBlock != null) 'cidrBlock': cidrBlock,
      if (cidrBlockSet != null) 'cidrBlockSet': cidrBlockSet,
      if (ipv6CidrBlockSet != null) 'ipv6CidrBlockSet': ipv6CidrBlockSet,
      if (ownerId != null) 'ownerId': ownerId,
      if (peeringOptions != null) 'peeringOptions': peeringOptions,
      if (region != null) 'region': region,
      if (vpcId != null) 'vpcId': vpcId,
    };
  }
}

enum VpcState {
  pending('pending'),
  available('available'),
  ;

  final String value;

  const VpcState(this.value);

  static VpcState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum VpcState'));
}

enum VpcTenancy {
  $default('default'),
  ;

  final String value;

  const VpcTenancy(this.value);

  static VpcTenancy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum VpcTenancy'));
}

/// Describes a VPN connection.
class VpnConnection {
  /// The category of the VPN connection. A value of <code>VPN</code> indicates an
  /// Amazon Web Services VPN connection. A value of <code>VPN-Classic</code>
  /// indicates an Amazon Web Services Classic VPN connection.
  final String? category;

  /// The ARN of the core network.
  final String? coreNetworkArn;

  /// The ARN of the core network attachment.
  final String? coreNetworkAttachmentArn;

  /// The configuration information for the VPN connection's customer gateway (in
  /// the native XML format). This element is always present in the
  /// <a>CreateVpnConnection</a> response; however, it's present in the
  /// <a>DescribeVpnConnections</a> response only if the VPN connection is in the
  /// <code>pending</code> or <code>available</code> state.
  final String? customerGatewayConfiguration;

  /// The ID of the customer gateway at your end of the VPN connection.
  final String? customerGatewayId;

  /// The current state of the gateway association.
  final GatewayAssociationState? gatewayAssociationState;

  /// The VPN connection options.
  final VpnConnectionOptions? options;

  /// The static routes associated with the VPN connection.
  final List<VpnStaticRoute>? routes;

  /// The current state of the VPN connection.
  final VpnState? state;

  /// Any tags assigned to the VPN connection.
  final List<Tag>? tags;

  /// The ID of the transit gateway associated with the VPN connection.
  final String? transitGatewayId;

  /// The type of VPN connection.
  final GatewayType? type;

  /// Information about the VPN tunnel.
  final List<VgwTelemetry>? vgwTelemetry;

  /// The ID of the VPN connection.
  final String? vpnConnectionId;

  /// The ID of the virtual private gateway at the Amazon Web Services side of the
  /// VPN connection.
  final String? vpnGatewayId;

  VpnConnection({
    this.category,
    this.coreNetworkArn,
    this.coreNetworkAttachmentArn,
    this.customerGatewayConfiguration,
    this.customerGatewayId,
    this.gatewayAssociationState,
    this.options,
    this.routes,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.type,
    this.vgwTelemetry,
    this.vpnConnectionId,
    this.vpnGatewayId,
  });

  Map<String, dynamic> toJson() {
    final category = this.category;
    final coreNetworkArn = this.coreNetworkArn;
    final coreNetworkAttachmentArn = this.coreNetworkAttachmentArn;
    final customerGatewayConfiguration = this.customerGatewayConfiguration;
    final customerGatewayId = this.customerGatewayId;
    final gatewayAssociationState = this.gatewayAssociationState;
    final options = this.options;
    final routes = this.routes;
    final state = this.state;
    final tags = this.tags;
    final transitGatewayId = this.transitGatewayId;
    final type = this.type;
    final vgwTelemetry = this.vgwTelemetry;
    final vpnConnectionId = this.vpnConnectionId;
    final vpnGatewayId = this.vpnGatewayId;
    return {
      if (category != null) 'category': category,
      if (coreNetworkArn != null) 'coreNetworkArn': coreNetworkArn,
      if (coreNetworkAttachmentArn != null)
        'coreNetworkAttachmentArn': coreNetworkAttachmentArn,
      if (customerGatewayConfiguration != null)
        'customerGatewayConfiguration': customerGatewayConfiguration,
      if (customerGatewayId != null) 'customerGatewayId': customerGatewayId,
      if (gatewayAssociationState != null)
        'gatewayAssociationState': gatewayAssociationState.value,
      if (options != null) 'options': options,
      if (routes != null) 'routes': routes,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (transitGatewayId != null) 'transitGatewayId': transitGatewayId,
      if (type != null) 'type': type.value,
      if (vgwTelemetry != null) 'vgwTelemetry': vgwTelemetry,
      if (vpnConnectionId != null) 'vpnConnectionId': vpnConnectionId,
      if (vpnGatewayId != null) 'vpnGatewayId': vpnGatewayId,
    };
  }
}

/// List of customer gateway devices that have a sample configuration file
/// available for use. You can also see the list of device types with sample
/// configuration files available under <a
/// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html">Your
/// customer gateway device</a> in the <i>Amazon Web Services Site-to-Site VPN
/// User Guide</i>.
class VpnConnectionDeviceType {
  /// Customer gateway device platform.
  final String? platform;

  /// Customer gateway device software version.
  final String? software;

  /// Customer gateway device vendor.
  final String? vendor;

  /// Customer gateway device identifier.
  final String? vpnConnectionDeviceTypeId;

  VpnConnectionDeviceType({
    this.platform,
    this.software,
    this.vendor,
    this.vpnConnectionDeviceTypeId,
  });

  Map<String, dynamic> toJson() {
    final platform = this.platform;
    final software = this.software;
    final vendor = this.vendor;
    final vpnConnectionDeviceTypeId = this.vpnConnectionDeviceTypeId;
    return {
      if (platform != null) 'platform': platform,
      if (software != null) 'software': software,
      if (vendor != null) 'vendor': vendor,
      if (vpnConnectionDeviceTypeId != null)
        'vpnConnectionDeviceTypeId': vpnConnectionDeviceTypeId,
    };
  }
}

/// Describes VPN connection options.
class VpnConnectionOptions {
  /// Indicates whether acceleration is enabled for the VPN connection.
  final bool? enableAcceleration;

  /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN
  /// connection.
  final String? localIpv4NetworkCidr;

  /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN
  /// connection.
  final String? localIpv6NetworkCidr;

  /// The type of IPv4 address assigned to the outside interface of the customer
  /// gateway.
  ///
  /// Valid values: <code>PrivateIpv4</code> | <code>PublicIpv4</code>
  ///
  /// Default: <code>PublicIpv4</code>
  final String? outsideIpAddressType;

  /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
  final String? remoteIpv4NetworkCidr;

  /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
  final String? remoteIpv6NetworkCidr;

  /// Indicates whether the VPN connection uses static routes only. Static routes
  /// must be used for devices that don't support BGP.
  final bool? staticRoutesOnly;

  /// The transit gateway attachment ID in use for the VPN tunnel.
  final String? transportTransitGatewayAttachmentId;

  /// Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
  final TunnelInsideIpVersion? tunnelInsideIpVersion;

  /// Indicates the VPN tunnel options.
  final List<TunnelOption>? tunnelOptions;

  VpnConnectionOptions({
    this.enableAcceleration,
    this.localIpv4NetworkCidr,
    this.localIpv6NetworkCidr,
    this.outsideIpAddressType,
    this.remoteIpv4NetworkCidr,
    this.remoteIpv6NetworkCidr,
    this.staticRoutesOnly,
    this.transportTransitGatewayAttachmentId,
    this.tunnelInsideIpVersion,
    this.tunnelOptions,
  });

  Map<String, dynamic> toJson() {
    final enableAcceleration = this.enableAcceleration;
    final localIpv4NetworkCidr = this.localIpv4NetworkCidr;
    final localIpv6NetworkCidr = this.localIpv6NetworkCidr;
    final outsideIpAddressType = this.outsideIpAddressType;
    final remoteIpv4NetworkCidr = this.remoteIpv4NetworkCidr;
    final remoteIpv6NetworkCidr = this.remoteIpv6NetworkCidr;
    final staticRoutesOnly = this.staticRoutesOnly;
    final transportTransitGatewayAttachmentId =
        this.transportTransitGatewayAttachmentId;
    final tunnelInsideIpVersion = this.tunnelInsideIpVersion;
    final tunnelOptions = this.tunnelOptions;
    return {
      if (enableAcceleration != null) 'enableAcceleration': enableAcceleration,
      if (localIpv4NetworkCidr != null)
        'localIpv4NetworkCidr': localIpv4NetworkCidr,
      if (localIpv6NetworkCidr != null)
        'localIpv6NetworkCidr': localIpv6NetworkCidr,
      if (outsideIpAddressType != null)
        'outsideIpAddressType': outsideIpAddressType,
      if (remoteIpv4NetworkCidr != null)
        'remoteIpv4NetworkCidr': remoteIpv4NetworkCidr,
      if (remoteIpv6NetworkCidr != null)
        'remoteIpv6NetworkCidr': remoteIpv6NetworkCidr,
      if (staticRoutesOnly != null) 'staticRoutesOnly': staticRoutesOnly,
      if (transportTransitGatewayAttachmentId != null)
        'transportTransitGatewayAttachmentId':
            transportTransitGatewayAttachmentId,
      if (tunnelInsideIpVersion != null)
        'tunnelInsideIpVersion': tunnelInsideIpVersion.value,
      if (tunnelOptions != null) 'tunnelOptionSet': tunnelOptions,
    };
  }
}

/// Describes VPN connection options.
class VpnConnectionOptionsSpecification {
  /// Indicate whether to enable acceleration for the VPN connection.
  ///
  /// Default: <code>false</code>
  final bool? enableAcceleration;

  /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN
  /// connection.
  ///
  /// Default: <code>0.0.0.0/0</code>
  final String? localIpv4NetworkCidr;

  /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN
  /// connection.
  ///
  /// Default: <code>::/0</code>
  final String? localIpv6NetworkCidr;

  /// The type of IPv4 address assigned to the outside interface of the customer
  /// gateway device.
  ///
  /// Valid values: <code>PrivateIpv4</code> | <code>PublicIpv4</code>
  ///
  /// Default: <code>PublicIpv4</code>
  final String? outsideIpAddressType;

  /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
  ///
  /// Default: <code>0.0.0.0/0</code>
  final String? remoteIpv4NetworkCidr;

  /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
  ///
  /// Default: <code>::/0</code>
  final String? remoteIpv6NetworkCidr;

  /// Indicate whether the VPN connection uses static routes only. If you are
  /// creating a VPN connection for a device that does not support BGP, you must
  /// specify <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a
  /// static route.
  ///
  /// Default: <code>false</code>
  final bool? staticRoutesOnly;

  /// The transit gateway attachment ID to use for the VPN tunnel.
  ///
  /// Required if <code>OutsideIpAddressType</code> is set to
  /// <code>PrivateIpv4</code>.
  final String? transportTransitGatewayAttachmentId;

  /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
  ///
  /// Default: <code>ipv4</code>
  final TunnelInsideIpVersion? tunnelInsideIpVersion;

  /// The tunnel options for the VPN connection.
  final List<VpnTunnelOptionsSpecification>? tunnelOptions;

  VpnConnectionOptionsSpecification({
    this.enableAcceleration,
    this.localIpv4NetworkCidr,
    this.localIpv6NetworkCidr,
    this.outsideIpAddressType,
    this.remoteIpv4NetworkCidr,
    this.remoteIpv6NetworkCidr,
    this.staticRoutesOnly,
    this.transportTransitGatewayAttachmentId,
    this.tunnelInsideIpVersion,
    this.tunnelOptions,
  });

  Map<String, dynamic> toJson() {
    final enableAcceleration = this.enableAcceleration;
    final localIpv4NetworkCidr = this.localIpv4NetworkCidr;
    final localIpv6NetworkCidr = this.localIpv6NetworkCidr;
    final outsideIpAddressType = this.outsideIpAddressType;
    final remoteIpv4NetworkCidr = this.remoteIpv4NetworkCidr;
    final remoteIpv6NetworkCidr = this.remoteIpv6NetworkCidr;
    final staticRoutesOnly = this.staticRoutesOnly;
    final transportTransitGatewayAttachmentId =
        this.transportTransitGatewayAttachmentId;
    final tunnelInsideIpVersion = this.tunnelInsideIpVersion;
    final tunnelOptions = this.tunnelOptions;
    return {
      if (enableAcceleration != null) 'EnableAcceleration': enableAcceleration,
      if (localIpv4NetworkCidr != null)
        'LocalIpv4NetworkCidr': localIpv4NetworkCidr,
      if (localIpv6NetworkCidr != null)
        'LocalIpv6NetworkCidr': localIpv6NetworkCidr,
      if (outsideIpAddressType != null)
        'OutsideIpAddressType': outsideIpAddressType,
      if (remoteIpv4NetworkCidr != null)
        'RemoteIpv4NetworkCidr': remoteIpv4NetworkCidr,
      if (remoteIpv6NetworkCidr != null)
        'RemoteIpv6NetworkCidr': remoteIpv6NetworkCidr,
      if (staticRoutesOnly != null) 'staticRoutesOnly': staticRoutesOnly,
      if (transportTransitGatewayAttachmentId != null)
        'TransportTransitGatewayAttachmentId':
            transportTransitGatewayAttachmentId,
      if (tunnelInsideIpVersion != null)
        'TunnelInsideIpVersion': tunnelInsideIpVersion.value,
      if (tunnelOptions != null) 'TunnelOptions': tunnelOptions,
    };
  }
}

enum VpnEcmpSupportValue {
  enable('enable'),
  disable('disable'),
  ;

  final String value;

  const VpnEcmpSupportValue(this.value);

  static VpnEcmpSupportValue fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VpnEcmpSupportValue'));
}

/// Describes a virtual private gateway.
class VpnGateway {
  /// The private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session.
  final int? amazonSideAsn;

  /// The Availability Zone where the virtual private gateway was created, if
  /// applicable. This field may be empty or not returned.
  final String? availabilityZone;

  /// The current state of the virtual private gateway.
  final VpnState? state;

  /// Any tags assigned to the virtual private gateway.
  final List<Tag>? tags;

  /// The type of VPN connection the virtual private gateway supports.
  final GatewayType? type;

  /// Any VPCs attached to the virtual private gateway.
  final List<VpcAttachment>? vpcAttachments;

  /// The ID of the virtual private gateway.
  final String? vpnGatewayId;

  VpnGateway({
    this.amazonSideAsn,
    this.availabilityZone,
    this.state,
    this.tags,
    this.type,
    this.vpcAttachments,
    this.vpnGatewayId,
  });

  Map<String, dynamic> toJson() {
    final amazonSideAsn = this.amazonSideAsn;
    final availabilityZone = this.availabilityZone;
    final state = this.state;
    final tags = this.tags;
    final type = this.type;
    final vpcAttachments = this.vpcAttachments;
    final vpnGatewayId = this.vpnGatewayId;
    return {
      if (amazonSideAsn != null) 'amazonSideAsn': amazonSideAsn,
      if (availabilityZone != null) 'availabilityZone': availabilityZone,
      if (state != null) 'state': state.value,
      if (tags != null) 'tagSet': tags,
      if (type != null) 'type': type.value,
      if (vpcAttachments != null) 'attachments': vpcAttachments,
      if (vpnGatewayId != null) 'vpnGatewayId': vpnGatewayId,
    };
  }
}

enum VpnProtocol {
  openvpn('openvpn'),
  ;

  final String value;

  const VpnProtocol(this.value);

  static VpnProtocol fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum VpnProtocol'));
}

enum VpnState {
  pending('pending'),
  available('available'),
  deleting('deleting'),
  deleted('deleted'),
  ;

  final String value;

  const VpnState(this.value);

  static VpnState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum VpnState'));
}

/// Describes a static route for a VPN connection.
class VpnStaticRoute {
  /// The CIDR block associated with the local subnet of the customer data center.
  final String? destinationCidrBlock;

  /// Indicates how the routes were provided.
  final VpnStaticRouteSource? source;

  /// The current state of the static route.
  final VpnState? state;

  VpnStaticRoute({
    this.destinationCidrBlock,
    this.source,
    this.state,
  });

  Map<String, dynamic> toJson() {
    final destinationCidrBlock = this.destinationCidrBlock;
    final source = this.source;
    final state = this.state;
    return {
      if (destinationCidrBlock != null)
        'destinationCidrBlock': destinationCidrBlock,
      if (source != null) 'source': source.value,
      if (state != null) 'state': state.value,
    };
  }
}

enum VpnStaticRouteSource {
  static('Static'),
  ;

  final String value;

  const VpnStaticRouteSource(this.value);

  static VpnStaticRouteSource fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VpnStaticRouteSource'));
}

/// Options for logging VPN tunnel activity.
class VpnTunnelLogOptions {
  /// Options for sending VPN tunnel logs to CloudWatch.
  final CloudWatchLogOptions? cloudWatchLogOptions;

  VpnTunnelLogOptions({
    this.cloudWatchLogOptions,
  });

  Map<String, dynamic> toJson() {
    final cloudWatchLogOptions = this.cloudWatchLogOptions;
    return {
      if (cloudWatchLogOptions != null)
        'cloudWatchLogOptions': cloudWatchLogOptions,
    };
  }
}

/// Options for logging VPN tunnel activity.
class VpnTunnelLogOptionsSpecification {
  /// Options for sending VPN tunnel logs to CloudWatch.
  final CloudWatchLogOptionsSpecification? cloudWatchLogOptions;

  VpnTunnelLogOptionsSpecification({
    this.cloudWatchLogOptions,
  });

  Map<String, dynamic> toJson() {
    final cloudWatchLogOptions = this.cloudWatchLogOptions;
    return {
      if (cloudWatchLogOptions != null)
        'CloudWatchLogOptions': cloudWatchLogOptions,
    };
  }
}

/// The tunnel options for a single VPN tunnel.
class VpnTunnelOptionsSpecification {
  /// The action to take after DPD timeout occurs. Specify <code>restart</code> to
  /// restart the IKE initiation. Specify <code>clear</code> to end the IKE
  /// session.
  ///
  /// Valid Values: <code>clear</code> | <code>none</code> | <code>restart</code>
  ///
  /// Default: <code>clear</code>
  final String? dPDTimeoutAction;

  /// The number of seconds after which a DPD timeout occurs.
  ///
  /// Constraints: A value greater than or equal to 30.
  ///
  /// Default: <code>30</code>
  final int? dPDTimeoutSeconds;

  /// Turn on or off tunnel endpoint lifecycle control feature.
  final bool? enableTunnelLifecycleControl;

  /// The IKE versions that are permitted for the VPN tunnel.
  ///
  /// Valid values: <code>ikev1</code> | <code>ikev2</code>
  final List<IKEVersionsRequestListValue>? iKEVersions;

  /// Options for logging VPN tunnel activity.
  final VpnTunnelLogOptionsSpecification? logOptions;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 1 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>14</code> | <code>15</code> |
  /// <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> |
  /// <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> |
  /// <code>24</code>
  final List<Phase1DHGroupNumbersRequestListValue>? phase1DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code> |
  /// <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code>
  final List<Phase1EncryptionAlgorithmsRequestListValue>?
      phase1EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code> |
  /// <code>SHA2-384</code> | <code>SHA2-512</code>
  final List<Phase1IntegrityAlgorithmsRequestListValue>?
      phase1IntegrityAlgorithms;

  /// The lifetime for phase 1 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 28,800.
  ///
  /// Default: <code>28800</code>
  final int? phase1LifetimeSeconds;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 2 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>5</code> | <code>14</code> |
  /// <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> |
  /// <code>19</code> | <code>20</code> | <code>21</code> | <code>22</code> |
  /// <code>23</code> | <code>24</code>
  final List<Phase2DHGroupNumbersRequestListValue>? phase2DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code> |
  /// <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code>
  final List<Phase2EncryptionAlgorithmsRequestListValue>?
      phase2EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code> |
  /// <code>SHA2-384</code> | <code>SHA2-512</code>
  final List<Phase2IntegrityAlgorithmsRequestListValue>?
      phase2IntegrityAlgorithms;

  /// The lifetime for phase 2 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 3,600. The value must be less than the
  /// value for <code>Phase1LifetimeSeconds</code>.
  ///
  /// Default: <code>3600</code>
  final int? phase2LifetimeSeconds;

  /// The pre-shared key (PSK) to establish initial authentication between the
  /// virtual private gateway and customer gateway.
  ///
  /// Constraints: Allowed characters are alphanumeric characters, periods (.),
  /// and underscores (_). Must be between 8 and 64 characters in length and
  /// cannot start with zero (0).
  final String? preSharedKey;

  /// The percentage of the rekey window (determined by
  /// <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly
  /// selected.
  ///
  /// Constraints: A value between 0 and 100.
  ///
  /// Default: <code>100</code>
  final int? rekeyFuzzPercentage;

  /// The margin time, in seconds, before the phase 2 lifetime expires, during
  /// which the Amazon Web Services side of the VPN connection performs an IKE
  /// rekey. The exact time of the rekey is randomly selected based on the value
  /// for <code>RekeyFuzzPercentage</code>.
  ///
  /// Constraints: A value between 60 and half of
  /// <code>Phase2LifetimeSeconds</code>.
  ///
  /// Default: <code>270</code>
  final int? rekeyMarginTimeSeconds;

  /// The number of packets in an IKE replay window.
  ///
  /// Constraints: A value between 64 and 2048.
  ///
  /// Default: <code>1024</code>
  final int? replayWindowSize;

  /// The action to take when the establishing the tunnel for the VPN connection.
  /// By default, your customer gateway device must initiate the IKE negotiation
  /// and bring up the tunnel. Specify <code>start</code> for Amazon Web Services
  /// to initiate the IKE negotiation.
  ///
  /// Valid Values: <code>add</code> | <code>start</code>
  ///
  /// Default: <code>add</code>
  final String? startupAction;

  /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks
  /// must be unique across all VPN connections that use the same virtual private
  /// gateway.
  ///
  /// Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code>
  /// range. The following CIDR blocks are reserved and cannot be used:
  ///
  /// <ul>
  /// <li>
  /// <code>169.254.0.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.1.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.2.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.3.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.4.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.5.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.169.252/30</code>
  /// </li>
  /// </ul>
  final String? tunnelInsideCidr;

  /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks
  /// must be unique across all VPN connections that use the same transit gateway.
  ///
  /// Constraints: A size /126 CIDR block from the local <code>fd00::/8</code>
  /// range.
  final String? tunnelInsideIpv6Cidr;

  VpnTunnelOptionsSpecification({
    this.dPDTimeoutAction,
    this.dPDTimeoutSeconds,
    this.enableTunnelLifecycleControl,
    this.iKEVersions,
    this.logOptions,
    this.phase1DHGroupNumbers,
    this.phase1EncryptionAlgorithms,
    this.phase1IntegrityAlgorithms,
    this.phase1LifetimeSeconds,
    this.phase2DHGroupNumbers,
    this.phase2EncryptionAlgorithms,
    this.phase2IntegrityAlgorithms,
    this.phase2LifetimeSeconds,
    this.preSharedKey,
    this.rekeyFuzzPercentage,
    this.rekeyMarginTimeSeconds,
    this.replayWindowSize,
    this.startupAction,
    this.tunnelInsideCidr,
    this.tunnelInsideIpv6Cidr,
  });

  Map<String, dynamic> toJson() {
    final dPDTimeoutAction = this.dPDTimeoutAction;
    final dPDTimeoutSeconds = this.dPDTimeoutSeconds;
    final enableTunnelLifecycleControl = this.enableTunnelLifecycleControl;
    final iKEVersions = this.iKEVersions;
    final logOptions = this.logOptions;
    final phase1DHGroupNumbers = this.phase1DHGroupNumbers;
    final phase1EncryptionAlgorithms = this.phase1EncryptionAlgorithms;
    final phase1IntegrityAlgorithms = this.phase1IntegrityAlgorithms;
    final phase1LifetimeSeconds = this.phase1LifetimeSeconds;
    final phase2DHGroupNumbers = this.phase2DHGroupNumbers;
    final phase2EncryptionAlgorithms = this.phase2EncryptionAlgorithms;
    final phase2IntegrityAlgorithms = this.phase2IntegrityAlgorithms;
    final phase2LifetimeSeconds = this.phase2LifetimeSeconds;
    final preSharedKey = this.preSharedKey;
    final rekeyFuzzPercentage = this.rekeyFuzzPercentage;
    final rekeyMarginTimeSeconds = this.rekeyMarginTimeSeconds;
    final replayWindowSize = this.replayWindowSize;
    final startupAction = this.startupAction;
    final tunnelInsideCidr = this.tunnelInsideCidr;
    final tunnelInsideIpv6Cidr = this.tunnelInsideIpv6Cidr;
    return {
      if (dPDTimeoutAction != null) 'DPDTimeoutAction': dPDTimeoutAction,
      if (dPDTimeoutSeconds != null) 'DPDTimeoutSeconds': dPDTimeoutSeconds,
      if (enableTunnelLifecycleControl != null)
        'EnableTunnelLifecycleControl': enableTunnelLifecycleControl,
      if (iKEVersions != null) 'IKEVersion': iKEVersions,
      if (logOptions != null) 'LogOptions': logOptions,
      if (phase1DHGroupNumbers != null)
        'Phase1DHGroupNumber': phase1DHGroupNumbers,
      if (phase1EncryptionAlgorithms != null)
        'Phase1EncryptionAlgorithm': phase1EncryptionAlgorithms,
      if (phase1IntegrityAlgorithms != null)
        'Phase1IntegrityAlgorithm': phase1IntegrityAlgorithms,
      if (phase1LifetimeSeconds != null)
        'Phase1LifetimeSeconds': phase1LifetimeSeconds,
      if (phase2DHGroupNumbers != null)
        'Phase2DHGroupNumber': phase2DHGroupNumbers,
      if (phase2EncryptionAlgorithms != null)
        'Phase2EncryptionAlgorithm': phase2EncryptionAlgorithms,
      if (phase2IntegrityAlgorithms != null)
        'Phase2IntegrityAlgorithm': phase2IntegrityAlgorithms,
      if (phase2LifetimeSeconds != null)
        'Phase2LifetimeSeconds': phase2LifetimeSeconds,
      if (preSharedKey != null) 'PreSharedKey': preSharedKey,
      if (rekeyFuzzPercentage != null)
        'RekeyFuzzPercentage': rekeyFuzzPercentage,
      if (rekeyMarginTimeSeconds != null)
        'RekeyMarginTimeSeconds': rekeyMarginTimeSeconds,
      if (replayWindowSize != null) 'ReplayWindowSize': replayWindowSize,
      if (startupAction != null) 'StartupAction': startupAction,
      if (tunnelInsideCidr != null) 'TunnelInsideCidr': tunnelInsideCidr,
      if (tunnelInsideIpv6Cidr != null)
        'TunnelInsideIpv6Cidr': tunnelInsideIpv6Cidr,
    };
  }
}

enum WeekDay {
  sunday('sunday'),
  monday('monday'),
  tuesday('tuesday'),
  wednesday('wednesday'),
  thursday('thursday'),
  friday('friday'),
  saturday('saturday'),
  ;

  final String value;

  const WeekDay(this.value);

  static WeekDay fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum WeekDay'));
}

class WithdrawByoipCidrResult {
  /// Information about the address pool.
  final ByoipCidr? byoipCidr;

  WithdrawByoipCidrResult({
    this.byoipCidr,
  });

  Map<String, dynamic> toJson() {
    final byoipCidr = this.byoipCidr;
    return {
      if (byoipCidr != null) 'byoipCidr': byoipCidr,
    };
  }
}

enum Scope {
  availabilityZone('Availability Zone'),
  region('Region'),
  ;

  final String value;

  const Scope(this.value);

  static Scope fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum Scope'));
}

final _exceptionFns = <String, _s.AwsExceptionFn>{};
