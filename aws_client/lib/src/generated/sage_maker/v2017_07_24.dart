// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import 'dart:convert';
import 'dart:typed_data';

import '../../shared/shared.dart' as _s;
import '../../shared/shared.dart'
    show
        rfc822ToJson,
        iso8601ToJson,
        unixTimestampToJson,
        nonNullableTimeStampFromJson,
        timeStampFromJson;

export '../../shared/shared.dart' show AwsClientCredentials;

/// Provides APIs for creating and managing SageMaker resources.
///
/// Other Resources:
///
/// <ul>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">SageMaker
/// Developer Guide</a>
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon
/// Augmented AI Runtime API Reference</a>
/// </li>
/// </ul>
class SageMaker {
  final _s.JsonProtocol _protocol;
  SageMaker({
    required String region,
    _s.AwsClientCredentials? credentials,
    _s.AwsClientCredentialsProvider? credentialsProvider,
    _s.Client? client,
    String? endpointUrl,
  }) : _protocol = _s.JsonProtocol(
          client: client,
          service: _s.ServiceMetadata(
            endpointPrefix: 'api.sagemaker',
            signingName: 'sagemaker',
          ),
          region: region,
          credentials: credentials,
          credentialsProvider: credentialsProvider,
          endpointUrl: endpointUrl,
        );

  /// Closes the internal HTTP client if none was provided at creation.
  /// If a client was passed as a constructor argument, this becomes a noop.
  ///
  /// It's important to close all clients when it's done being used; failing to
  /// do so can cause the Dart process to hang.
  void close() {
    _protocol.close();
  }

  /// Creates an <i>association</i> between the source and the destination. A
  /// source can be associated with multiple destinations, and a destination can
  /// be associated with multiple sources. An association is a lineage tracking
  /// entity. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [destinationArn] :
  /// The Amazon Resource Name (ARN) of the destination.
  ///
  /// Parameter [sourceArn] :
  /// The ARN of the source.
  ///
  /// Parameter [associationType] :
  /// The type of association. The following are suggested uses for each type.
  /// Amazon SageMaker places no restrictions on their use.
  ///
  /// <ul>
  /// <li>
  /// ContributedTo - The source contributed to the destination or had a part in
  /// enabling the destination. For example, the training data contributed to
  /// the training job.
  /// </li>
  /// <li>
  /// AssociatedWith - The source is connected to the destination. For example,
  /// an approval workflow is associated with a model deployment.
  /// </li>
  /// <li>
  /// DerivedFrom - The destination is a modification of the source. For
  /// example, a digest output of a channel input for a processing job is
  /// derived from the original inputs.
  /// </li>
  /// <li>
  /// Produced - The source generated the destination. For example, a training
  /// job produced a model artifact.
  /// </li>
  /// </ul>
  Future<AddAssociationResponse> addAssociation({
    required String destinationArn,
    required String sourceArn,
    AssociationEdgeType? associationType,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.AddAssociation'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DestinationArn': destinationArn,
        'SourceArn': sourceArn,
        if (associationType != null) 'AssociationType': associationType.value,
      },
    );

    return AddAssociationResponse.fromJson(jsonResponse.body);
  }

  /// Adds or overwrites one or more tags for the specified SageMaker resource.
  /// You can add tags to notebook instances, training jobs, hyperparameter
  /// tuning jobs, batch transform jobs, models, labeling jobs, work teams,
  /// endpoint configurations, and endpoints.
  ///
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource. For more information about tags, see For more information,
  /// see <a
  /// href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon
  /// Web Services Tagging Strategies</a>.
  /// <note>
  /// Tags that you add to a hyperparameter tuning job by calling this API are
  /// also added to any training jobs that the hyperparameter tuning job
  /// launches after you call this API, but not to training jobs that the
  /// hyperparameter tuning job launched before you called this API. To make
  /// sure that the tags associated with a hyperparameter tuning job are also
  /// added to all training jobs that the hyperparameter tuning job launches,
  /// add the tags when you first create the tuning job by specifying them in
  /// the <code>Tags</code> parameter of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a>
  /// </note> <note>
  /// Tags that you add to a SageMaker Domain or User Profile by calling this
  /// API are also added to any Apps that the Domain or User Profile launches
  /// after you call this API, but not to Apps that the Domain or User Profile
  /// launched before you called this API. To make sure that the tags associated
  /// with a Domain or User Profile are also added to all Apps that the Domain
  /// or User Profile launches, add the tags when you first create the Domain or
  /// User Profile by specifying them in the <code>Tags</code> parameter of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html">CreateDomain</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html">CreateUserProfile</a>.
  /// </note>
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the resource that you want to tag.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<AddTagsOutput> addTags({
    required String resourceArn,
    required List<Tag> tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.AddTags'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ResourceArn': resourceArn,
        'Tags': tags,
      },
    );

    return AddTagsOutput.fromJson(jsonResponse.body);
  }

  /// Associates a trial component with a trial. A trial component can be
  /// associated with multiple trials. To disassociate a trial component from a
  /// trial, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a>
  /// API.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to associated with the trial.
  ///
  /// Parameter [trialName] :
  /// The name of the trial to associate with.
  Future<AssociateTrialComponentResponse> associateTrialComponent({
    required String trialComponentName,
    required String trialName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.AssociateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        'TrialName': trialName,
      },
    );

    return AssociateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// This action batch describes a list of versioned model packages
  ///
  /// Parameter [modelPackageArnList] :
  /// The list of Amazon Resource Name (ARN) of the model package groups.
  Future<BatchDescribeModelPackageOutput> batchDescribeModelPackage({
    required List<String> modelPackageArnList,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.BatchDescribeModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageArnList': modelPackageArnList,
      },
    );

    return BatchDescribeModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Creates an <i>action</i>. An action is a lineage tracking entity that
  /// represents an action or activity. For example, a model deployment or an
  /// HPO job. Generally, an action involves at least one input or output
  /// artifact. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [actionName] :
  /// The name of the action. Must be unique to your account in an Amazon Web
  /// Services Region.
  ///
  /// Parameter [actionType] :
  /// The action type.
  ///
  /// Parameter [source] :
  /// The source type, ID, and URI.
  ///
  /// Parameter [description] :
  /// The description of the action.
  ///
  /// Parameter [properties] :
  /// A list of properties to add to the action.
  ///
  /// Parameter [status] :
  /// The status of the action.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the action.
  Future<CreateActionResponse> createAction({
    required String actionName,
    required String actionType,
    required ActionSource source,
    String? description,
    MetadataProperties? metadataProperties,
    Map<String, String>? properties,
    ActionStatus? status,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
        'ActionType': actionType,
        'Source': source,
        if (description != null) 'Description': description,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (properties != null) 'Properties': properties,
        if (status != null) 'Status': status.value,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateActionResponse.fromJson(jsonResponse.body);
  }

  /// Create a machine learning algorithm that you can use in SageMaker and list
  /// in the Amazon Web Services Marketplace.
  ///
  /// Parameter [algorithmName] :
  /// The name of the algorithm.
  ///
  /// Parameter [trainingSpecification] :
  /// Specifies details about training jobs run by this algorithm, including the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR path of the container and the version digest of the
  /// algorithm.
  /// </li>
  /// <li>
  /// The hyperparameters that the algorithm supports.
  /// </li>
  /// <li>
  /// The instance types that the algorithm supports for training.
  /// </li>
  /// <li>
  /// Whether the algorithm supports distributed training.
  /// </li>
  /// <li>
  /// The metrics that the algorithm emits to Amazon CloudWatch.
  /// </li>
  /// <li>
  /// Which metrics that the algorithm emits can be used as the objective metric
  /// for hyperparameter tuning jobs.
  /// </li>
  /// <li>
  /// The input channels that the algorithm supports for training data. For
  /// example, an algorithm might support <code>train</code>,
  /// <code>validation</code>, and <code>test</code> channels.
  /// </li>
  /// </ul>
  ///
  /// Parameter [algorithmDescription] :
  /// A description of the algorithm.
  ///
  /// Parameter [certifyForMarketplace] :
  /// Whether to certify the algorithm so that it can be listed in Amazon Web
  /// Services Marketplace.
  ///
  /// Parameter [inferenceSpecification] :
  /// Specifies details about inference jobs that the algorithm runs, including
  /// the following:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR paths of containers that contain the inference code and
  /// model artifacts.
  /// </li>
  /// <li>
  /// The instance types that the algorithm supports for transform jobs and
  /// real-time endpoints used for inference.
  /// </li>
  /// <li>
  /// The input and output content formats that the algorithm supports for
  /// inference.
  /// </li>
  /// </ul>
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [validationSpecification] :
  /// Specifies configurations for one or more training jobs and that SageMaker
  /// runs to test the algorithm's training code and, optionally, one or more
  /// batch transform jobs that SageMaker runs to test the algorithm's inference
  /// code.
  Future<CreateAlgorithmOutput> createAlgorithm({
    required String algorithmName,
    required TrainingSpecification trainingSpecification,
    String? algorithmDescription,
    bool? certifyForMarketplace,
    InferenceSpecification? inferenceSpecification,
    List<Tag>? tags,
    AlgorithmValidationSpecification? validationSpecification,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAlgorithm'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmName': algorithmName,
        'TrainingSpecification': trainingSpecification,
        if (algorithmDescription != null)
          'AlgorithmDescription': algorithmDescription,
        if (certifyForMarketplace != null)
          'CertifyForMarketplace': certifyForMarketplace,
        if (inferenceSpecification != null)
          'InferenceSpecification': inferenceSpecification,
        if (tags != null) 'Tags': tags,
        if (validationSpecification != null)
          'ValidationSpecification': validationSpecification,
      },
    );

    return CreateAlgorithmOutput.fromJson(jsonResponse.body);
  }

  /// Creates a running app for the specified UserProfile. This operation is
  /// automatically invoked by Amazon SageMaker upon access to the associated
  /// Domain, and when new kernel configurations are selected by the user. A
  /// user may have multiple Apps active simultaneously.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [appName] :
  /// The name of the app.
  ///
  /// Parameter [appType] :
  /// The type of app.
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [resourceSpec] :
  /// The instance type and the Amazon Resource Name (ARN) of the SageMaker
  /// image created on the instance.
  /// <note>
  /// The value of <code>InstanceType</code> passed as part of the
  /// <code>ResourceSpec</code> in the <code>CreateApp</code> call overrides the
  /// value passed as part of the <code>ResourceSpec</code> configured for the
  /// user profile or the domain. If <code>InstanceType</code> is not specified
  /// in any of those three <code>ResourceSpec</code> values for a
  /// <code>KernelGateway</code> app, the <code>CreateApp</code> call fails with
  /// a request validation error.
  /// </note>
  ///
  /// Parameter [spaceName] :
  /// The name of the space. If this value is not set, then
  /// <code>UserProfileName</code> must be set.
  ///
  /// Parameter [tags] :
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name. If this value is not set, then
  /// <code>SpaceName</code> must be set.
  Future<CreateAppResponse> createApp({
    required String appName,
    required AppType appType,
    required String domainId,
    ResourceSpec? resourceSpec,
    String? spaceName,
    List<Tag>? tags,
    String? userProfileName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateApp'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppName': appName,
        'AppType': appType.value,
        'DomainId': domainId,
        if (resourceSpec != null) 'ResourceSpec': resourceSpec,
        if (spaceName != null) 'SpaceName': spaceName,
        if (tags != null) 'Tags': tags,
        if (userProfileName != null) 'UserProfileName': userProfileName,
      },
    );

    return CreateAppResponse.fromJson(jsonResponse.body);
  }

  /// Creates a configuration for running a SageMaker image as a KernelGateway
  /// app. The configuration specifies the Amazon Elastic File System storage
  /// volume on the image, and a list of the kernels in the image.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig. Must be unique to your account.
  ///
  /// Parameter [codeEditorAppImageConfig] :
  /// The <code>CodeEditorAppImageConfig</code>. You can only specify one image
  /// kernel in the AppImageConfig API. This kernel is shown to users before the
  /// image starts. After the image runs, all kernels are visible in Code
  /// Editor.
  ///
  /// Parameter [jupyterLabAppImageConfig] :
  /// The <code>JupyterLabAppImageConfig</code>. You can only specify one image
  /// kernel in the <code>AppImageConfig</code> API. This kernel is shown to
  /// users before the image starts. After the image runs, all kernels are
  /// visible in JupyterLab.
  ///
  /// Parameter [kernelGatewayImageConfig] :
  /// The KernelGatewayImageConfig. You can only specify one image kernel in the
  /// AppImageConfig API. This kernel will be shown to users before the image
  /// starts. Once the image runs, all kernels are visible in JupyterLab.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the AppImageConfig.
  Future<CreateAppImageConfigResponse> createAppImageConfig({
    required String appImageConfigName,
    CodeEditorAppImageConfig? codeEditorAppImageConfig,
    JupyterLabAppImageConfig? jupyterLabAppImageConfig,
    KernelGatewayImageConfig? kernelGatewayImageConfig,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAppImageConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
        if (codeEditorAppImageConfig != null)
          'CodeEditorAppImageConfig': codeEditorAppImageConfig,
        if (jupyterLabAppImageConfig != null)
          'JupyterLabAppImageConfig': jupyterLabAppImageConfig,
        if (kernelGatewayImageConfig != null)
          'KernelGatewayImageConfig': kernelGatewayImageConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateAppImageConfigResponse.fromJson(jsonResponse.body);
  }

  /// Creates an <i>artifact</i>. An artifact is a lineage tracking entity that
  /// represents a URI addressable object or data. Some examples are the S3 URI
  /// of a dataset and the ECR registry path of an image. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [artifactType] :
  /// The artifact type.
  ///
  /// Parameter [source] :
  /// The ID, ID type, and URI of the source.
  ///
  /// Parameter [artifactName] :
  /// The name of the artifact. Must be unique to your account in an Amazon Web
  /// Services Region.
  ///
  /// Parameter [properties] :
  /// A list of properties to add to the artifact.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the artifact.
  Future<CreateArtifactResponse> createArtifact({
    required String artifactType,
    required ArtifactSource source,
    String? artifactName,
    MetadataProperties? metadataProperties,
    Map<String, String>? properties,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ArtifactType': artifactType,
        'Source': source,
        if (artifactName != null) 'ArtifactName': artifactName,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (properties != null) 'Properties': properties,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Creates an Autopilot job also referred to as Autopilot experiment or
  /// AutoML job.
  /// <note>
  /// We recommend using the new versions <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>,
  /// which offer backward compatibility.
  ///
  /// <code>CreateAutoMLJobV2</code> can manage tabular problem types identical
  /// to those of its previous version <code>CreateAutoMLJob</code>, as well as
  /// time-series forecasting, non-tabular problem types such as image or text
  /// classification, and text generation (LLMs fine-tuning).
  ///
  /// Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to
  /// <code>CreateAutoMLJobV2</code> in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment.html#autopilot-create-experiment-api-migrate-v1-v2">Migrate
  /// a CreateAutoMLJob to CreateAutoMLJobV2</a>.
  /// </note>
  /// You can find the best-performing model after you run an AutoML job by
  /// calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>
  /// (recommended) or <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [autoMLJobName] :
  /// Identifies an Autopilot job. The name must be unique to your account and
  /// is case insensitive.
  ///
  /// Parameter [inputDataConfig] :
  /// An array of channel objects that describes the input data and its
  /// location. Each channel is a named input source. Similar to
  /// <code>InputDataConfig</code> supported by <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html">HyperParameterTrainingJobDefinition</a>.
  /// Format(s) supported: CSV, Parquet. A minimum of 500 rows is required for
  /// the training dataset. There is not a minimum number of rows required for
  /// the validation dataset.
  ///
  /// Parameter [outputDataConfig] :
  /// Provides information about encryption and the Amazon S3 output path needed
  /// to store artifacts from an AutoML job. Format(s) supported: CSV.
  ///
  /// Parameter [roleArn] :
  /// The ARN of the role that is used to access the data.
  ///
  /// Parameter [autoMLJobConfig] :
  /// A collection of settings used to configure an AutoML job.
  ///
  /// Parameter [autoMLJobObjective] :
  /// Specifies a metric to minimize or maximize as the objective of a job. If
  /// not specified, the default objective metric depends on the problem type.
  /// See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective</a>
  /// for the default values.
  ///
  /// Parameter [generateCandidateDefinitionsOnly] :
  /// Generates possible candidates without training the models. A candidate is
  /// a combination of data preprocessors, algorithms, and algorithm parameter
  /// settings.
  ///
  /// Parameter [modelDeployConfig] :
  /// Specifies how to generate the endpoint name for an automatic one-click
  /// Autopilot model deployment.
  ///
  /// Parameter [problemType] :
  /// Defines the type of supervised learning problem available for the
  /// candidates. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-problem-types">
  /// SageMaker Autopilot problem types</a>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web ServicesResources</a>. Tag keys must be unique per resource.
  Future<CreateAutoMLJobResponse> createAutoMLJob({
    required String autoMLJobName,
    required List<AutoMLChannel> inputDataConfig,
    required AutoMLOutputDataConfig outputDataConfig,
    required String roleArn,
    AutoMLJobConfig? autoMLJobConfig,
    AutoMLJobObjective? autoMLJobObjective,
    bool? generateCandidateDefinitionsOnly,
    ModelDeployConfig? modelDeployConfig,
    ProblemType? problemType,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAutoMLJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
        'InputDataConfig': inputDataConfig,
        'OutputDataConfig': outputDataConfig,
        'RoleArn': roleArn,
        if (autoMLJobConfig != null) 'AutoMLJobConfig': autoMLJobConfig,
        if (autoMLJobObjective != null)
          'AutoMLJobObjective': autoMLJobObjective,
        if (generateCandidateDefinitionsOnly != null)
          'GenerateCandidateDefinitionsOnly': generateCandidateDefinitionsOnly,
        if (modelDeployConfig != null) 'ModelDeployConfig': modelDeployConfig,
        if (problemType != null) 'ProblemType': problemType.value,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateAutoMLJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates an Autopilot job also referred to as Autopilot experiment or
  /// AutoML job V2.
  /// <note>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>
  /// are new versions of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a>
  /// which offer backward compatibility.
  ///
  /// <code>CreateAutoMLJobV2</code> can manage tabular problem types identical
  /// to those of its previous version <code>CreateAutoMLJob</code>, as well as
  /// time-series forecasting, non-tabular problem types such as image or text
  /// classification, and text generation (LLMs fine-tuning).
  ///
  /// Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to
  /// <code>CreateAutoMLJobV2</code> in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment.html#autopilot-create-experiment-api-migrate-v1-v2">Migrate
  /// a CreateAutoMLJob to CreateAutoMLJobV2</a>.
  /// </note>
  /// For the list of available problem types supported by
  /// <code>CreateAutoMLJobV2</code>, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLProblemTypeConfig.html">AutoMLProblemTypeConfig</a>.
  ///
  /// You can find the best-performing model after you run an AutoML job V2 by
  /// calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [autoMLJobInputDataConfig] :
  /// An array of channel objects describing the input data and their location.
  /// Each channel is a named input source. Similar to the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html#sagemaker-CreateAutoMLJob-request-InputDataConfig">InputDataConfig</a>
  /// attribute in the <code>CreateAutoMLJob</code> input parameters. The
  /// supported formats depend on the problem type:
  ///
  /// <ul>
  /// <li>
  /// For tabular problem types: <code>S3Prefix</code>,
  /// <code>ManifestFile</code>.
  /// </li>
  /// <li>
  /// For image classification: <code>S3Prefix</code>,
  /// <code>ManifestFile</code>, <code>AugmentedManifestFile</code>.
  /// </li>
  /// <li>
  /// For text classification: <code>S3Prefix</code>.
  /// </li>
  /// <li>
  /// For time-series forecasting: <code>S3Prefix</code>.
  /// </li>
  /// <li>
  /// For text generation (LLMs fine-tuning): <code>S3Prefix</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [autoMLJobName] :
  /// Identifies an Autopilot job. The name must be unique to your account and
  /// is case insensitive.
  ///
  /// Parameter [autoMLProblemTypeConfig] :
  /// Defines the configuration settings of one of the supported problem types.
  ///
  /// Parameter [outputDataConfig] :
  /// Provides information about encryption and the Amazon S3 output path needed
  /// to store artifacts from an AutoML job.
  ///
  /// Parameter [roleArn] :
  /// The ARN of the role that is used to access the data.
  ///
  /// Parameter [autoMLJobObjective] :
  /// Specifies a metric to minimize or maximize as the objective of a job. If
  /// not specified, the default objective metric depends on the problem type.
  /// For the list of default values per problem type, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective</a>.
  /// <note>
  /// <ul>
  /// <li>
  /// For tabular problem types: You must either provide both the
  /// <code>AutoMLJobObjective</code> and indicate the type of supervised
  /// learning problem in <code>AutoMLProblemTypeConfig</code>
  /// (<code>TabularJobConfig.ProblemType</code>), or none at all.
  /// </li>
  /// <li>
  /// For text generation problem types (LLMs fine-tuning): Fine-tuning language
  /// models in Autopilot does not require setting the
  /// <code>AutoMLJobObjective</code> field. Autopilot fine-tunes LLMs without
  /// requiring multiple candidates to be trained and evaluated. Instead, using
  /// your dataset, Autopilot directly fine-tunes your target model to enhance a
  /// default objective metric, the cross-entropy loss. After fine-tuning a
  /// language model, you can evaluate the quality of its generated text using
  /// different metrics. For a list of the available metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-metrics.html">Metrics
  /// for fine-tuning LLMs in Autopilot</a>.
  /// </li>
  /// </ul> </note>
  ///
  /// Parameter [dataSplitConfig] :
  /// This structure specifies how to split the data into train and validation
  /// datasets.
  ///
  /// The validation and training datasets must contain the same headers. For
  /// jobs created by calling <code>CreateAutoMLJob</code>, the validation
  /// dataset must be less than 2 GB in size.
  /// <note>
  /// This attribute must not be set for the time-series forecasting problem
  /// type, as Autopilot automatically splits the input dataset into training
  /// and validation sets.
  /// </note>
  ///
  /// Parameter [modelDeployConfig] :
  /// Specifies how to generate the endpoint name for an automatic one-click
  /// Autopilot model deployment.
  ///
  /// Parameter [securityConfig] :
  /// The security configuration for traffic encryption or Amazon VPC settings.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, such as by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web ServicesResources</a>. Tag keys must be unique per resource.
  Future<CreateAutoMLJobV2Response> createAutoMLJobV2({
    required List<AutoMLJobChannel> autoMLJobInputDataConfig,
    required String autoMLJobName,
    required AutoMLProblemTypeConfig autoMLProblemTypeConfig,
    required AutoMLOutputDataConfig outputDataConfig,
    required String roleArn,
    AutoMLJobObjective? autoMLJobObjective,
    AutoMLDataSplitConfig? dataSplitConfig,
    ModelDeployConfig? modelDeployConfig,
    AutoMLSecurityConfig? securityConfig,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateAutoMLJobV2'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobInputDataConfig': autoMLJobInputDataConfig,
        'AutoMLJobName': autoMLJobName,
        'AutoMLProblemTypeConfig': autoMLProblemTypeConfig,
        'OutputDataConfig': outputDataConfig,
        'RoleArn': roleArn,
        if (autoMLJobObjective != null)
          'AutoMLJobObjective': autoMLJobObjective,
        if (dataSplitConfig != null) 'DataSplitConfig': dataSplitConfig,
        if (modelDeployConfig != null) 'ModelDeployConfig': modelDeployConfig,
        if (securityConfig != null) 'SecurityConfig': securityConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateAutoMLJobV2Response.fromJson(jsonResponse.body);
  }

  /// Creates a SageMaker HyperPod cluster. SageMaker HyperPod is a capability
  /// of SageMaker for creating and managing persistent clusters for developing
  /// large machine learning models, such as large language models (LLMs) and
  /// diffusion models. To learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod.html">Amazon
  /// SageMaker HyperPod</a> in the <i>Amazon SageMaker Developer Guide</i>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [clusterName] :
  /// The name for the new SageMaker HyperPod cluster.
  ///
  /// Parameter [instanceGroups] :
  /// The instance groups to be created in the SageMaker HyperPod cluster.
  ///
  /// Parameter [tags] :
  /// Custom tags for managing the SageMaker HyperPod cluster as an Amazon Web
  /// Services resource. You can add tags to your cluster in the same way you
  /// add them in other Amazon Web Services services that support tagging. To
  /// learn more about tagging Amazon Web Services resources in general, see <a
  /// href="https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html">Tagging
  /// Amazon Web Services Resources User Guide</a>.
  Future<CreateClusterResponse> createCluster({
    required String clusterName,
    required List<ClusterInstanceGroupSpecification> instanceGroups,
    List<Tag>? tags,
    VpcConfig? vpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateCluster'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
        'InstanceGroups': instanceGroups,
        if (tags != null) 'Tags': tags,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateClusterResponse.fromJson(jsonResponse.body);
  }

  /// Creates a Git repository as a resource in your SageMaker account. You can
  /// associate the repository with notebook instances so that you can use Git
  /// source control for the notebooks you create. The Git repository is a
  /// resource in your SageMaker account, so it can be associated with more than
  /// one notebook instance, and it persists independently from the lifecycle of
  /// any notebook instances it is associated with.
  ///
  /// The repository can be hosted either in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository. The name must have 1 to 63 characters.
  /// Valid characters are a-z, A-Z, 0-9, and - (hyphen).
  ///
  /// Parameter [gitConfig] :
  /// Specifies details about the repository, including the URL where the
  /// repository is located, the default branch, and credentials to use to
  /// access the repository.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<CreateCodeRepositoryOutput> createCodeRepository({
    required String codeRepositoryName,
    required GitConfig gitConfig,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateCodeRepository'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
        'GitConfig': gitConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateCodeRepositoryOutput.fromJson(jsonResponse.body);
  }

  /// Starts a model compilation job. After the model has been compiled, Amazon
  /// SageMaker saves the resulting model artifacts to an Amazon Simple Storage
  /// Service (Amazon S3) bucket that you specify.
  ///
  /// If you choose to host your model using Amazon SageMaker hosting services,
  /// you can use the resulting model artifacts as part of the model. You can
  /// also use the artifacts with Amazon Web Services IoT Greengrass. In that
  /// case, deploy them as an ML resource.
  ///
  /// In the request body, you provide the following:
  ///
  /// <ul>
  /// <li>
  /// A name for the compilation job
  /// </li>
  /// <li>
  /// Information about the input model artifacts
  /// </li>
  /// <li>
  /// The output location for the compiled model and the device (target) that
  /// the model runs on
  /// </li>
  /// <li>
  /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker
  /// assumes to perform the model compilation job.
  /// </li>
  /// </ul>
  /// You can also provide a <code>Tag</code> to track the model compilation
  /// job's resource use and costs. The response body contains the
  /// <code>CompilationJobArn</code> for the compiled job.
  ///
  /// To stop a model compilation job, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html">StopCompilationJob</a>.
  /// To get information about a particular model compilation job, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>.
  /// To get information about multiple model compilation jobs, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [compilationJobName] :
  /// A name for the model compilation job. The name must be unique within the
  /// Amazon Web Services Region and within your Amazon Web Services account.
  ///
  /// Parameter [outputConfig] :
  /// Provides information about the output location for the compiled model and
  /// the target device the model runs on.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon
  /// SageMaker to perform tasks on your behalf.
  ///
  /// During model compilation, Amazon SageMaker needs your permission to:
  ///
  /// <ul>
  /// <li>
  /// Read input data from an S3 bucket
  /// </li>
  /// <li>
  /// Write model artifacts to an S3 bucket
  /// </li>
  /// <li>
  /// Write logs to Amazon CloudWatch Logs
  /// </li>
  /// <li>
  /// Publish metrics to Amazon CloudWatch
  /// </li>
  /// </ul>
  /// You grant permissions for all of these tasks to an IAM role. To pass this
  /// role to Amazon SageMaker, the caller of this API must have the
  /// <code>iam:PassRole</code> permission. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon
  /// SageMaker Roles.</a>
  ///
  /// Parameter [stoppingCondition] :
  /// Specifies a limit to how long a model compilation job can run. When the
  /// job reaches the time limit, Amazon SageMaker ends the compilation job. Use
  /// this API to cap model training costs.
  ///
  /// Parameter [inputConfig] :
  /// Provides information about the location of input model artifacts, the name
  /// and shape of the expected data inputs, and the framework in which the
  /// model was trained.
  ///
  /// Parameter [modelPackageVersionArn] :
  /// The Amazon Resource Name (ARN) of a versioned model package. Provide
  /// either a <code>ModelPackageVersionArn</code> or an
  /// <code>InputConfig</code> object in the request syntax. The presence of
  /// both objects in the <code>CreateCompilationJob</code> request will return
  /// an exception.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [vpcConfig] :
  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that you want your compilation job to
  /// connect to. Control access to your models by configuring the VPC. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect
  /// Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.
  Future<CreateCompilationJobResponse> createCompilationJob({
    required String compilationJobName,
    required OutputConfig outputConfig,
    required String roleArn,
    required StoppingCondition stoppingCondition,
    InputConfig? inputConfig,
    String? modelPackageVersionArn,
    List<Tag>? tags,
    NeoVpcConfig? vpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateCompilationJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        'StoppingCondition': stoppingCondition,
        if (inputConfig != null) 'InputConfig': inputConfig,
        if (modelPackageVersionArn != null)
          'ModelPackageVersionArn': modelPackageVersionArn,
        if (tags != null) 'Tags': tags,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateCompilationJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a <i>context</i>. A context is a lineage tracking entity that
  /// represents a logical grouping of other tracking or experiment entities.
  /// Some examples are an endpoint and a model package. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon
  /// SageMaker ML Lineage Tracking</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [contextName] :
  /// The name of the context. Must be unique to your account in an Amazon Web
  /// Services Region.
  ///
  /// Parameter [contextType] :
  /// The context type.
  ///
  /// Parameter [source] :
  /// The source type, ID, and URI.
  ///
  /// Parameter [description] :
  /// The description of the context.
  ///
  /// Parameter [properties] :
  /// A list of properties to add to the context.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the context.
  Future<CreateContextResponse> createContext({
    required String contextName,
    required String contextType,
    required ContextSource source,
    String? description,
    Map<String, String>? properties,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
        'ContextType': contextType,
        'Source': source,
        if (description != null) 'Description': description,
        if (properties != null) 'Properties': properties,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateContextResponse.fromJson(jsonResponse.body);
  }

  /// Creates a definition for a job that monitors data quality and drift. For
  /// information about model monitor, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
  /// SageMaker Model Monitor</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [dataQualityAppSpecification] :
  /// Specifies the container that runs the monitoring job.
  ///
  /// Parameter [dataQualityJobInput] :
  /// A list of inputs for the monitoring job. Currently endpoints are supported
  /// as monitoring inputs.
  ///
  /// Parameter [jobDefinitionName] :
  /// The name for the monitoring job definition.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [dataQualityBaselineConfig] :
  /// Configures the constraints and baselines for the monitoring job.
  ///
  /// Parameter [networkConfig] :
  /// Specifies networking configuration for the monitoring job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">
  /// Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and
  /// Cost Management User Guide</i>.
  Future<CreateDataQualityJobDefinitionResponse>
      createDataQualityJobDefinition({
    required DataQualityAppSpecification dataQualityAppSpecification,
    required DataQualityJobInput dataQualityJobInput,
    required MonitoringOutputConfig dataQualityJobOutputConfig,
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required String roleArn,
    DataQualityBaselineConfig? dataQualityBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateDataQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DataQualityAppSpecification': dataQualityAppSpecification,
        'DataQualityJobInput': dataQualityJobInput,
        'DataQualityJobOutputConfig': dataQualityJobOutputConfig,
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'RoleArn': roleArn,
        if (dataQualityBaselineConfig != null)
          'DataQualityBaselineConfig': dataQualityBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateDataQualityJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Creates a device fleet.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet that the device belongs to.
  ///
  /// Parameter [outputConfig] :
  /// The output configuration for storing sample data collected by the fleet.
  ///
  /// Parameter [description] :
  /// A description of the fleet.
  ///
  /// Parameter [enableIotRoleAlias] :
  /// Whether to create an Amazon Web Services IoT Role Alias during device
  /// fleet creation. The name of the role alias generated will match this
  /// pattern: "SageMakerEdge-{DeviceFleetName}".
  ///
  /// For example, if your device fleet is called "demo-fleet", the name of the
  /// role alias will be "SageMakerEdge-demo-fleet".
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) that has access to Amazon Web Services
  /// Internet of Things (IoT).
  ///
  /// Parameter [tags] :
  /// Creates tags for the specified fleet.
  Future<void> createDeviceFleet({
    required String deviceFleetName,
    required EdgeOutputConfig outputConfig,
    String? description,
    bool? enableIotRoleAlias,
    String? roleArn,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateDeviceFleet'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'OutputConfig': outputConfig,
        if (description != null) 'Description': description,
        if (enableIotRoleAlias != null)
          'EnableIotRoleAlias': enableIotRoleAlias,
        if (roleArn != null) 'RoleArn': roleArn,
        if (tags != null) 'Tags': tags,
      },
    );
  }

  /// Creates a <code>Domain</code>. A domain consists of an associated Amazon
  /// Elastic File System volume, a list of authorized users, and a variety of
  /// security, application, policy, and Amazon Virtual Private Cloud (VPC)
  /// configurations. Users within a domain can share notebook files and other
  /// artifacts with each other.
  ///
  /// <b>EFS storage</b>
  ///
  /// When a domain is created, an EFS volume is created for use by all of the
  /// users within the domain. Each user receives a private home directory
  /// within the EFS volume for notebooks, Git repositories, and data files.
  ///
  /// SageMaker uses the Amazon Web Services Key Management Service (Amazon Web
  /// Services KMS) to encrypt the EFS volume attached to the domain with an
  /// Amazon Web Services managed key by default. For more control, you can
  /// specify a customer managed key. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect
  /// Data at Rest Using Encryption</a>.
  ///
  /// <b>VPC configuration</b>
  ///
  /// All traffic between the domain and the Amazon EFS volume is through the
  /// specified VPC and subnets. For other traffic, you can specify the
  /// <code>AppNetworkAccessType</code> parameter.
  /// <code>AppNetworkAccessType</code> corresponds to the network access type
  /// that you choose when you onboard to the domain. The following options are
  /// available:
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC
  /// managed by Amazon SageMaker, which allows internet access. This is the
  /// default value.
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All traffic is through the specified VPC and
  /// subnets. Internet access is disabled by default. To allow internet access,
  /// you must specify a NAT gateway.
  ///
  /// When internet access is disabled, you won't be able to run a Amazon
  /// SageMaker Studio notebook or to train or host models unless your VPC has
  /// an interface endpoint to the SageMaker API and runtime or a NAT gateway
  /// and your security groups allow outbound connections.
  /// </li>
  /// </ul> <important>
  /// NFS traffic over TCP on port 2049 needs to be allowed in both inbound and
  /// outbound rules in order to launch a Amazon SageMaker Studio app
  /// successfully.
  /// </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect
  /// Amazon SageMaker Studio Notebooks to Resources in a VPC</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [authMode] :
  /// The mode of authentication that members use to access the domain.
  ///
  /// Parameter [defaultUserSettings] :
  /// The default settings to use to create a user profile when
  /// <code>UserSettings</code> isn't specified in the call to the
  /// <code>CreateUserProfile</code> API.
  ///
  /// <code>SecurityGroups</code> is aggregated when specified in both calls.
  /// For all other settings in <code>UserSettings</code>, the values specified
  /// in <code>CreateUserProfile</code> take precedence over those specified in
  /// <code>CreateDomain</code>.
  ///
  /// Parameter [domainName] :
  /// A name for the domain.
  ///
  /// Parameter [subnetIds] :
  /// The VPC subnets that the domain uses for communication.
  ///
  /// Parameter [vpcId] :
  /// The ID of the Amazon Virtual Private Cloud (VPC) that the domain uses for
  /// communication.
  ///
  /// Parameter [appNetworkAccessType] :
  /// Specifies the VPC used for non-EFS traffic. The default value is
  /// <code>PublicInternetOnly</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed
  /// by Amazon SageMaker, which allows direct internet access
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All traffic is through the specified VPC and
  /// subnets
  /// </li>
  /// </ul>
  ///
  /// Parameter [appSecurityGroupManagement] :
  /// The entity that creates and manages the required security groups for
  /// inter-app communication in <code>VPCOnly</code> mode. Required when
  /// <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and
  /// <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code>
  /// is provided. If setting up the domain for use with RStudio, this value
  /// must be set to <code>Service</code>.
  ///
  /// Parameter [defaultSpaceSettings] :
  /// The default settings used to create a space.
  ///
  /// Parameter [domainSettings] :
  /// A collection of <code>Domain</code> settings.
  ///
  /// Parameter [homeEfsFileSystemKmsKeyId] :
  /// Use <code>KmsKeyId</code>.
  ///
  /// Parameter [kmsKeyId] :
  /// SageMaker uses Amazon Web Services KMS to encrypt EFS and EBS volumes
  /// attached to the domain with an Amazon Web Services managed key by default.
  /// For more control, specify a customer managed key.
  ///
  /// Parameter [tags] :
  /// Tags to associated with the Domain. Each tag consists of a key and an
  /// optional value. Tag keys must be unique per resource. Tags are searchable
  /// using the <code>Search</code> API.
  ///
  /// Tags that you specify for the Domain are also added to all Apps that the
  /// Domain launches.
  Future<CreateDomainResponse> createDomain({
    required AuthMode authMode,
    required UserSettings defaultUserSettings,
    required String domainName,
    required List<String> subnetIds,
    required String vpcId,
    AppNetworkAccessType? appNetworkAccessType,
    AppSecurityGroupManagement? appSecurityGroupManagement,
    DefaultSpaceSettings? defaultSpaceSettings,
    DomainSettings? domainSettings,
    String? homeEfsFileSystemKmsKeyId,
    String? kmsKeyId,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateDomain'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AuthMode': authMode.value,
        'DefaultUserSettings': defaultUserSettings,
        'DomainName': domainName,
        'SubnetIds': subnetIds,
        'VpcId': vpcId,
        if (appNetworkAccessType != null)
          'AppNetworkAccessType': appNetworkAccessType.value,
        if (appSecurityGroupManagement != null)
          'AppSecurityGroupManagement': appSecurityGroupManagement.value,
        if (defaultSpaceSettings != null)
          'DefaultSpaceSettings': defaultSpaceSettings,
        if (domainSettings != null) 'DomainSettings': domainSettings,
        if (homeEfsFileSystemKmsKeyId != null)
          'HomeEfsFileSystemKmsKeyId': homeEfsFileSystemKmsKeyId,
        if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateDomainResponse.fromJson(jsonResponse.body);
  }

  /// Creates an edge deployment plan, consisting of multiple stages. Each stage
  /// may have a different deployment configuration and devices.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [deviceFleetName] :
  /// The device fleet used for this edge deployment plan.
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan.
  ///
  /// Parameter [modelConfigs] :
  /// List of models associated with the edge deployment plan.
  ///
  /// Parameter [stages] :
  /// List of stages of the edge deployment plan. The number of stages is
  /// limited to 10 per deployment.
  ///
  /// Parameter [tags] :
  /// List of tags with which to tag the edge deployment plan.
  Future<CreateEdgeDeploymentPlanResponse> createEdgeDeploymentPlan({
    required String deviceFleetName,
    required String edgeDeploymentPlanName,
    required List<EdgeDeploymentModelConfig> modelConfigs,
    List<DeploymentStage>? stages,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEdgeDeploymentPlan'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        'ModelConfigs': modelConfigs,
        if (stages != null) 'Stages': stages,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateEdgeDeploymentPlanResponse.fromJson(jsonResponse.body);
  }

  /// Creates a new stage in an existing edge deployment plan.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan.
  ///
  /// Parameter [stages] :
  /// List of stages to be added to the edge deployment plan.
  Future<void> createEdgeDeploymentStage({
    required String edgeDeploymentPlanName,
    required List<DeploymentStage> stages,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEdgeDeploymentStage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        'Stages': stages,
      },
    );
  }

  /// Starts a SageMaker Edge Manager model packaging job. Edge Manager will use
  /// the model artifacts from the Amazon Simple Storage Service bucket that you
  /// specify. After the model has been packaged, Amazon SageMaker saves the
  /// resulting artifacts to an S3 bucket that you specify.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the SageMaker Neo compilation job that will be used to locate
  /// model artifacts for packaging.
  ///
  /// Parameter [edgePackagingJobName] :
  /// The name of the edge packaging job.
  ///
  /// Parameter [modelName] :
  /// The name of the model.
  ///
  /// Parameter [modelVersion] :
  /// The version of the model.
  ///
  /// Parameter [outputConfig] :
  /// Provides information about the output location for the packaged model.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon
  /// SageMaker to download and upload the model, and to contact SageMaker Neo.
  ///
  /// Parameter [resourceKey] :
  /// The Amazon Web Services KMS key to use when encrypting the EBS volume the
  /// edge packaging job runs on.
  ///
  /// Parameter [tags] :
  /// Creates tags for the packaging job.
  Future<void> createEdgePackagingJob({
    required String compilationJobName,
    required String edgePackagingJobName,
    required String modelName,
    required String modelVersion,
    required EdgeOutputConfig outputConfig,
    required String roleArn,
    String? resourceKey,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEdgePackagingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
        'EdgePackagingJobName': edgePackagingJobName,
        'ModelName': modelName,
        'ModelVersion': modelVersion,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        if (resourceKey != null) 'ResourceKey': resourceKey,
        if (tags != null) 'Tags': tags,
      },
    );
  }

  /// Creates an endpoint using the endpoint configuration specified in the
  /// request. SageMaker uses the endpoint to provision resources and deploy
  /// models. You create the endpoint configuration with the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>
  /// API.
  ///
  /// Use this API to deploy models using SageMaker hosting services.
  /// <note>
  /// You must not delete an <code>EndpointConfig</code> that is in use by an
  /// endpoint that is live or while the <code>UpdateEndpoint</code> or
  /// <code>CreateEndpoint</code> operations are being performed on the
  /// endpoint. To update an endpoint, you must create a new
  /// <code>EndpointConfig</code>.
  /// </note>
  /// The endpoint name must be unique within an Amazon Web Services Region in
  /// your Amazon Web Services account.
  ///
  /// When it receives the request, SageMaker creates the endpoint, launches the
  /// resources (ML compute instances), and deploys the model(s) on them.
  /// <note>
  /// When you call <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>,
  /// a load call is made to DynamoDB to verify that your endpoint configuration
  /// exists. When you read data from a DynamoDB table supporting <a
  /// href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
  /// <code>Eventually Consistent Reads</code> </a>, the response might not
  /// reflect the results of a recently completed write operation. The response
  /// might include some stale data. If the dependent entities are not yet in
  /// DynamoDB, this causes a validation error. If you repeat your read request
  /// after a short time, the response should return the latest data. So retry
  /// logic is recommended to handle these possible issues. We also recommend
  /// that customers call <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a>
  /// before calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// to minimize the potential impact of a DynamoDB eventually consistent read.
  /// </note>
  /// When SageMaker receives the request, it sets the endpoint status to
  /// <code>Creating</code>. After it creates the endpoint, it sets the status
  /// to <code>InService</code>. SageMaker can then process incoming requests
  /// for inferences. To check the status of an endpoint, use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a>
  /// API.
  ///
  /// If any of the models hosted at this endpoint get model data from an Amazon
  /// S3 location, SageMaker uses Amazon Web Services Security Token Service to
  /// download model artifacts from the S3 path you provided. Amazon Web
  /// Services STS is activated in your Amazon Web Services account by default.
  /// If you previously deactivated Amazon Web Services STS for a region, you
  /// need to reactivate Amazon Web Services STS for that region. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating
  /// and Deactivating Amazon Web Services STS in an Amazon Web Services
  /// Region</a> in the <i>Amazon Web Services Identity and Access Management
  /// User Guide</i>.
  /// <note>
  /// To add the IAM role policies for using this API operation, go to the <a
  /// href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose
  /// Roles in the left navigation pane. Search the IAM role that you want to
  /// grant access to use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>
  /// API operations, add the following policies to the role.
  ///
  /// <ul>
  /// <li>
  /// Option 1: For a full SageMaker access, search and attach the
  /// <code>AmazonSageMakerFullAccess</code> policy.
  /// </li>
  /// <li>
  /// Option 2: For granting a limited access to an IAM role, paste the
  /// following Action elements manually into the JSON file of the IAM role:
  ///
  /// <code>"Action": ["sagemaker:CreateEndpoint",
  /// "sagemaker:CreateEndpointConfig"]</code>
  ///
  /// <code>"Resource": [</code>
  ///
  /// <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code>
  ///
  /// <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code>
  ///
  /// <code>]</code>
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker
  /// API Permissions: Actions, Permissions, and Resources Reference</a>.
  /// </li>
  /// </ul> </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointConfigName] :
  /// The name of an endpoint configuration. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint.The name must be unique within an Amazon Web
  /// Services Region in your Amazon Web Services account. The name is
  /// case-insensitive in <code>CreateEndpoint</code>, but the case is preserved
  /// and must be matched in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html">InvokeEndpoint</a>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<CreateEndpointOutput> createEndpoint({
    required String endpointConfigName,
    required String endpointName,
    DeploymentConfig? deploymentConfig,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEndpoint'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
        'EndpointName': endpointName,
        if (deploymentConfig != null) 'DeploymentConfig': deploymentConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateEndpointOutput.fromJson(jsonResponse.body);
  }

  /// Creates an endpoint configuration that SageMaker hosting services uses to
  /// deploy models. In the configuration, you identify one or more models,
  /// created using the <code>CreateModel</code> API, to deploy and the
  /// resources that you want SageMaker to provision. Then you call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// API.
  /// <note>
  /// Use this API if you want to use SageMaker hosting services to deploy
  /// models into production.
  /// </note>
  /// In the request, you define a <code>ProductionVariant</code>, for each
  /// model that you want to deploy. Each <code>ProductionVariant</code>
  /// parameter also describes the resources that you want SageMaker to
  /// provision. This includes the number and type of ML compute instances to
  /// deploy.
  ///
  /// If you are hosting multiple models, you also assign a
  /// <code>VariantWeight</code> to specify how much traffic you want to
  /// allocate to each model. For example, suppose that you want to host two
  /// models, A and B, and you assign traffic weight 2 for model A and 1 for
  /// model B. SageMaker distributes two-thirds of the traffic to Model A, and
  /// one-third to model B.
  /// <note>
  /// When you call <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>,
  /// a load call is made to DynamoDB to verify that your endpoint configuration
  /// exists. When you read data from a DynamoDB table supporting <a
  /// href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
  /// <code>Eventually Consistent Reads</code> </a>, the response might not
  /// reflect the results of a recently completed write operation. The response
  /// might include some stale data. If the dependent entities are not yet in
  /// DynamoDB, this causes a validation error. If you repeat your read request
  /// after a short time, the response should return the latest data. So retry
  /// logic is recommended to handle these possible issues. We also recommend
  /// that customers call <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a>
  /// before calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// to minimize the potential impact of a DynamoDB eventually consistent read.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the endpoint configuration. You specify this name in a <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// request.
  ///
  /// Parameter [productionVariants] :
  /// An array of <code>ProductionVariant</code> objects, one for each model
  /// that you want to host at this endpoint.
  ///
  /// Parameter [asyncInferenceConfig] :
  /// Specifies configuration for how an endpoint performs asynchronous
  /// inference. This is a required field in order for your Endpoint to be
  /// invoked using <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html">InvokeEndpointAsync</a>.
  ///
  /// Parameter [enableNetworkIsolation] :
  /// Sets whether all model containers deployed to the endpoint are isolated.
  /// If they are, no inbound or outbound network calls can be made to or from
  /// the model containers.
  ///
  /// Parameter [executionRoleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform actions on your behalf. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
  /// Roles</a>.
  /// <note>
  /// To be able to pass this role to Amazon SageMaker, the caller of this
  /// action must have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [explainerConfig] :
  /// A member of <code>CreateEndpointConfig</code> that enables explainers.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service key that SageMaker uses to encrypt data on the storage volume
  /// attached to the ML compute instance that hosts the endpoint.
  ///
  /// The KmsKeyId can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  /// The KMS key policy must grant permission to the IAM role that you specify
  /// in your <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests.
  /// For more information, refer to the Amazon Web Services Key Management
  /// Service section<a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">
  /// Using Key Policies in Amazon Web Services KMS </a>
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>KmsKeyId</code> when using an
  /// instance type with local storage. If any of the models that you specify in
  /// the <code>ProductionVariants</code> parameter use nitro-based instances
  /// with local storage, do not specify a value for the <code>KmsKeyId</code>
  /// parameter. If you specify a value for <code>KmsKeyId</code> when using any
  /// nitro-based instances with local storage, the call to
  /// <code>CreateEndpointConfig</code> fails.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  ///
  /// Parameter [shadowProductionVariants] :
  /// An array of <code>ProductionVariant</code> objects, one for each model
  /// that you want to host at this endpoint in shadow mode with production
  /// traffic replicated from the model specified on
  /// <code>ProductionVariants</code>. If you use this field, you can only
  /// specify one variant for <code>ProductionVariants</code> and one variant
  /// for <code>ShadowProductionVariants</code>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  Future<CreateEndpointConfigOutput> createEndpointConfig({
    required String endpointConfigName,
    required List<ProductionVariant> productionVariants,
    AsyncInferenceConfig? asyncInferenceConfig,
    DataCaptureConfig? dataCaptureConfig,
    bool? enableNetworkIsolation,
    String? executionRoleArn,
    ExplainerConfig? explainerConfig,
    String? kmsKeyId,
    List<ProductionVariant>? shadowProductionVariants,
    List<Tag>? tags,
    VpcConfig? vpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateEndpointConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
        'ProductionVariants': productionVariants,
        if (asyncInferenceConfig != null)
          'AsyncInferenceConfig': asyncInferenceConfig,
        if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
        if (enableNetworkIsolation != null)
          'EnableNetworkIsolation': enableNetworkIsolation,
        if (executionRoleArn != null) 'ExecutionRoleArn': executionRoleArn,
        if (explainerConfig != null) 'ExplainerConfig': explainerConfig,
        if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
        if (shadowProductionVariants != null)
          'ShadowProductionVariants': shadowProductionVariants,
        if (tags != null) 'Tags': tags,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateEndpointConfigOutput.fromJson(jsonResponse.body);
  }

  /// Creates a SageMaker <i>experiment</i>. An experiment is a collection of
  /// <i>trials</i> that are observed, compared and evaluated as a group. A
  /// trial is a set of steps, called <i>trial components</i>, that produce a
  /// machine learning model.
  /// <note>
  /// In the Studio UI, trials are referred to as <i>run groups</i> and trial
  /// components are referred to as <i>runs</i>.
  /// </note>
  /// The goal of an experiment is to determine the components that produce the
  /// best model. Multiple trials are performed, each one isolating and
  /// measuring the impact of a change to one or more inputs, while keeping the
  /// remaining inputs constant.
  ///
  /// When you use SageMaker Studio or the SageMaker Python SDK, all
  /// experiments, trials, and trial components are automatically tracked,
  /// logged, and indexed. When you use the Amazon Web Services SDK for Python
  /// (Boto), you must use the logging APIs provided by the SDK.
  ///
  /// You can add tags to experiments, trials, trial components and then use the
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search for the tags.
  ///
  /// To add a description to an experiment, specify the optional
  /// <code>Description</code> parameter. To add a description later, or to
  /// change the description, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a>
  /// API.
  ///
  /// To get a list of all your experiments, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html">ListExperiments</a>
  /// API. To view an experiment's properties, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a>
  /// API. To get a list of all the trials associated with an experiment, call
  /// the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a>
  /// API. To create a trial call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html">CreateTrial</a>
  /// API.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment. The name must be unique in your Amazon Web
  /// Services account and is not case-sensitive.
  ///
  /// Parameter [description] :
  /// The description of the experiment.
  ///
  /// Parameter [displayName] :
  /// The name of the experiment as displayed. The name doesn't need to be
  /// unique. If you don't specify <code>DisplayName</code>, the value in
  /// <code>ExperimentName</code> is displayed.
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with the experiment. You can use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search on the tags.
  Future<CreateExperimentResponse> createExperiment({
    required String experimentName,
    String? description,
    String? displayName,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a
  /// group of <code>Features</code> defined in the <code>FeatureStore</code> to
  /// describe a <code>Record</code>.
  ///
  /// The <code>FeatureGroup</code> defines the schema and features contained in
  /// the <code>FeatureGroup</code>. A <code>FeatureGroup</code> definition is
  /// composed of a list of <code>Features</code>, a
  /// <code>RecordIdentifierFeatureName</code>, an
  /// <code>EventTimeFeatureName</code> and configurations for its
  /// <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon
  /// Web Services service quotas</a> to see the <code>FeatureGroup</code>s
  /// quota for your Amazon Web Services account.
  ///
  /// Note that it can take approximately 10-15 minutes to provision an
  /// <code>OnlineStore</code> <code>FeatureGroup</code> with the
  /// <code>InMemory</code> <code>StorageType</code>.
  /// <important>
  /// You must include at least one of <code>OnlineStoreConfig</code> and
  /// <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.
  /// </important>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [eventTimeFeatureName] :
  /// The name of the feature that stores the <code>EventTime</code> of a
  /// <code>Record</code> in a <code>FeatureGroup</code>.
  ///
  /// An <code>EventTime</code> is a point in time when a new event occurs that
  /// corresponds to the creation or update of a <code>Record</code> in a
  /// <code>FeatureGroup</code>. All <code>Records</code> in the
  /// <code>FeatureGroup</code> must have a corresponding
  /// <code>EventTime</code>.
  ///
  /// An <code>EventTime</code> can be a <code>String</code> or
  /// <code>Fractional</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>Fractional</code>: <code>EventTime</code> feature values must be a
  /// Unix timestamp in seconds.
  /// </li>
  /// <li>
  /// <code>String</code>: <code>EventTime</code> feature values must be an
  /// ISO-8601 string in the format. The following formats are supported
  /// <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and
  /// <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code> where <code>yyyy</code>,
  /// <code>MM</code>, and <code>dd</code> represent the year, month, and day
  /// respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>, and if
  /// applicable, <code>SSS</code> represent the hour, month, second and
  /// milliseconds respsectively. <code>'T'</code> and <code>Z</code> are
  /// constants.
  /// </li>
  /// </ul>
  ///
  /// Parameter [featureDefinitions] :
  /// A list of <code>Feature</code> names and types. <code>Name</code> and
  /// <code>Type</code> is compulsory per <code>Feature</code>.
  ///
  /// Valid feature <code>FeatureType</code>s are <code>Integral</code>,
  /// <code>Fractional</code> and <code>String</code>.
  ///
  /// <code>FeatureName</code>s cannot be any of the following:
  /// <code>is_deleted</code>, <code>write_time</code>,
  /// <code>api_invocation_time</code>
  ///
  /// You can create up to 2,500 <code>FeatureDefinition</code>s per
  /// <code>FeatureGroup</code>.
  ///
  /// Parameter [featureGroupName] :
  /// The name of the <code>FeatureGroup</code>. The name must be unique within
  /// an Amazon Web Services Region in an Amazon Web Services account.
  ///
  /// The name:
  ///
  /// <ul>
  /// <li>
  /// Must start with an alphanumeric character.
  /// </li>
  /// <li>
  /// Can only include alphanumeric characters, underscores, and hyphens. Spaces
  /// are not allowed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [recordIdentifierFeatureName] :
  /// The name of the <code>Feature</code> whose value uniquely identifies a
  /// <code>Record</code> defined in the <code>FeatureStore</code>. Only the
  /// latest record per identifier value will be stored in the
  /// <code>OnlineStore</code>. <code>RecordIdentifierFeatureName</code> must be
  /// one of feature definitions' names.
  ///
  /// You use the <code>RecordIdentifierFeatureName</code> to access data in a
  /// <code>FeatureStore</code>.
  ///
  /// This name:
  ///
  /// <ul>
  /// <li>
  /// Must start with an alphanumeric character.
  /// </li>
  /// <li>
  /// Can only contains alphanumeric characters, hyphens, underscores. Spaces
  /// are not allowed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [description] :
  /// A free-form description of a <code>FeatureGroup</code>.
  ///
  /// Parameter [offlineStoreConfig] :
  /// Use this to configure an <code>OfflineFeatureStore</code>. This parameter
  /// allows you to specify:
  ///
  /// <ul>
  /// <li>
  /// The Amazon Simple Storage Service (Amazon S3) location of an
  /// <code>OfflineStore</code>.
  /// </li>
  /// <li>
  /// A configuration for an Amazon Web Services Glue or Amazon Web Services
  /// Hive data catalog.
  /// </li>
  /// <li>
  /// An KMS encryption key to encrypt the Amazon S3 location used for
  /// <code>OfflineStore</code>. If KMS encryption key is not specified, by
  /// default we encrypt all data at rest using Amazon Web Services KMS key. By
  /// defining your <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html">bucket-level
  /// key</a> for SSE, you can reduce Amazon Web Services KMS requests costs by
  /// up to 99 percent.
  /// </li>
  /// <li>
  /// Format for the offline store table. Supported formats are Glue (Default)
  /// and <a href="https://iceberg.apache.org/">Apache Iceberg</a>.
  /// </li>
  /// </ul>
  /// To learn more about this parameter, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OfflineStoreConfig.html">OfflineStoreConfig</a>.
  ///
  /// Parameter [onlineStoreConfig] :
  /// You can turn the <code>OnlineStore</code> on or off by specifying
  /// <code>True</code> for the <code>EnableOnlineStore</code> flag in
  /// <code>OnlineStoreConfig</code>.
  ///
  /// You can also include an Amazon Web Services KMS key ID
  /// (<code>KMSKeyId</code>) for at-rest encryption of the
  /// <code>OnlineStore</code>.
  ///
  /// The default value is <code>False</code>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM execution role used to persist
  /// data into the <code>OfflineStore</code> if an
  /// <code>OfflineStoreConfig</code> is provided.
  ///
  /// Parameter [tags] :
  /// Tags used to identify <code>Features</code> in each
  /// <code>FeatureGroup</code>.
  Future<CreateFeatureGroupResponse> createFeatureGroup({
    required String eventTimeFeatureName,
    required List<FeatureDefinition> featureDefinitions,
    required String featureGroupName,
    required String recordIdentifierFeatureName,
    String? description,
    OfflineStoreConfig? offlineStoreConfig,
    OnlineStoreConfig? onlineStoreConfig,
    String? roleArn,
    List<Tag>? tags,
    ThroughputConfig? throughputConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateFeatureGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EventTimeFeatureName': eventTimeFeatureName,
        'FeatureDefinitions': featureDefinitions,
        'FeatureGroupName': featureGroupName,
        'RecordIdentifierFeatureName': recordIdentifierFeatureName,
        if (description != null) 'Description': description,
        if (offlineStoreConfig != null)
          'OfflineStoreConfig': offlineStoreConfig,
        if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
        if (roleArn != null) 'RoleArn': roleArn,
        if (tags != null) 'Tags': tags,
        if (throughputConfig != null) 'ThroughputConfig': throughputConfig,
      },
    );

    return CreateFeatureGroupResponse.fromJson(jsonResponse.body);
  }

  /// Creates a flow definition.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [flowDefinitionName] :
  /// The name of your flow definition.
  ///
  /// Parameter [outputConfig] :
  /// An object containing information about where the human review results will
  /// be uploaded.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the role needed to call other services
  /// on your behalf. For example,
  /// <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.
  ///
  /// Parameter [humanLoopActivationConfig] :
  /// An object containing information about the events that trigger a human
  /// workflow.
  ///
  /// Parameter [humanLoopConfig] :
  /// An object containing information about the tasks the human reviewers will
  /// perform.
  ///
  /// Parameter [humanLoopRequestSource] :
  /// Container for configuring the source of human task requests. Use to
  /// specify if Amazon Rekognition or Amazon Textract is used as an integration
  /// source.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that contain metadata to help you categorize
  /// and organize a flow definition. Each tag consists of a key and a value,
  /// both of which you define.
  Future<CreateFlowDefinitionResponse> createFlowDefinition({
    required String flowDefinitionName,
    required FlowDefinitionOutputConfig outputConfig,
    required String roleArn,
    HumanLoopActivationConfig? humanLoopActivationConfig,
    HumanLoopConfig? humanLoopConfig,
    HumanLoopRequestSource? humanLoopRequestSource,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateFlowDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FlowDefinitionName': flowDefinitionName,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        if (humanLoopActivationConfig != null)
          'HumanLoopActivationConfig': humanLoopActivationConfig,
        if (humanLoopConfig != null) 'HumanLoopConfig': humanLoopConfig,
        if (humanLoopRequestSource != null)
          'HumanLoopRequestSource': humanLoopRequestSource,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateFlowDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Create a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [hubDescription] :
  /// A description of the hub.
  ///
  /// Parameter [hubName] :
  /// The name of the hub to create.
  ///
  /// Parameter [hubDisplayName] :
  /// The display name of the hub.
  ///
  /// Parameter [hubSearchKeywords] :
  /// The searchable keywords for the hub.
  ///
  /// Parameter [s3StorageConfig] :
  /// The Amazon S3 storage configuration for the hub.
  ///
  /// Parameter [tags] :
  /// Any tags to associate with the hub.
  Future<CreateHubResponse> createHub({
    required String hubDescription,
    required String hubName,
    String? hubDisplayName,
    List<String>? hubSearchKeywords,
    HubS3StorageConfig? s3StorageConfig,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateHub'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubDescription': hubDescription,
        'HubName': hubName,
        if (hubDisplayName != null) 'HubDisplayName': hubDisplayName,
        if (hubSearchKeywords != null) 'HubSearchKeywords': hubSearchKeywords,
        if (s3StorageConfig != null) 'S3StorageConfig': s3StorageConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateHubResponse.fromJson(jsonResponse.body);
  }

  /// Defines the settings you will use for the human review workflow user
  /// interface. Reviewers will see a three-panel interface with an instruction
  /// area, the item to review, and an input area.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [humanTaskUiName] :
  /// The name of the user interface you are creating.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that contain metadata to help you categorize
  /// and organize a human review workflow user interface. Each tag consists of
  /// a key and a value, both of which you define.
  Future<CreateHumanTaskUiResponse> createHumanTaskUi({
    required String humanTaskUiName,
    required UiTemplate uiTemplate,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateHumanTaskUi'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskUiName': humanTaskUiName,
        'UiTemplate': uiTemplate,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateHumanTaskUiResponse.fromJson(jsonResponse.body);
  }

  /// Starts a hyperparameter tuning job. A hyperparameter tuning job finds the
  /// best version of a model by running many training jobs on your dataset
  /// using the algorithm you choose and values for hyperparameters within
  /// ranges that you specify. It then chooses the hyperparameter values that
  /// result in a model that performs the best, as measured by an objective
  /// metric that you choose.
  ///
  /// A hyperparameter tuning job automatically creates Amazon SageMaker
  /// experiments, trials, and trial components for each training job that it
  /// runs. You can view these entities in Amazon SageMaker Studio. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view">View
  /// Experiments, Trials, and Trial Components</a>.
  /// <important>
  /// Do not include any security-sensitive information including account access
  /// IDs, secrets or tokens in any hyperparameter field. If the use of
  /// security-sensitive credentials are detected, SageMaker will reject your
  /// training job request and return an exception error.
  /// </important>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [hyperParameterTuningJobConfig] :
  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>
  /// object that describes the tuning job, including the search strategy, the
  /// objective metric used to evaluate training jobs, ranges of parameters to
  /// search, and resource limits for the tuning job. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
  /// Hyperparameter Tuning Works</a>.
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job. This name is the prefix for the names of all
  /// training jobs that this tuning job launches. The name must be unique
  /// within the same Amazon Web Services account and Amazon Web Services
  /// Region. The name must have 1 to 32 characters. Valid characters are a-z,
  /// A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.
  ///
  /// Parameter [autotune] :
  /// Configures SageMaker Automatic model tuning (AMT) to automatically find
  /// optimal parameters for the following fields:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges">ParameterRanges</a>:
  /// The names and ranges of parameters that a hyperparameter tuning job can
  /// optimize.
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>:
  /// The maximum resources that can be used for a training job. These resources
  /// include the maximum number of training jobs, the maximum runtime of a
  /// tuning job, and the maximum number of training jobs to run at the same
  /// time.
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType">TrainingJobEarlyStoppingType</a>:
  /// A flag that specifies whether or not to use early stopping for training
  /// jobs launched by a hyperparameter tuning job.
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy">RetryStrategy</a>:
  /// The number of times to retry a training job.
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">Strategy</a>:
  /// Specifies how hyperparameter tuning chooses the combinations of
  /// hyperparameter values to use for the training jobs that it launches.
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html">ConvergenceDetected</a>:
  /// A flag to indicate that Automatic model tuning (AMT) has detected model
  /// convergence.
  /// </li>
  /// </ul>
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Tags that you specify for the tuning job are also added to all training
  /// jobs that the tuning job launches.
  ///
  /// Parameter [trainingJobDefinition] :
  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html">HyperParameterTrainingJobDefinition</a>
  /// object that describes the training jobs that this tuning job launches,
  /// including static hyperparameters, input data configuration, output data
  /// configuration, resource configuration, and stopping condition.
  ///
  /// Parameter [trainingJobDefinitions] :
  /// A list of the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html">HyperParameterTrainingJobDefinition</a>
  /// objects launched for this tuning job.
  ///
  /// Parameter [warmStartConfig] :
  /// Specifies the configuration for starting the hyperparameter tuning job
  /// using one or more previous tuning jobs as a starting point. The results of
  /// previous tuning jobs are used to inform which combinations of
  /// hyperparameters to search over in the new tuning job.
  ///
  /// All training jobs launched by the new hyperparameter tuning job are
  /// evaluated by using the objective metric. If you specify
  /// <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the
  /// <code>WarmStartType</code> value for the warm start configuration, the
  /// training job that performs the best in the new tuning job is compared to
  /// the best training jobs from the parent tuning jobs. From these, the
  /// training job that performs the best as measured by the objective metric is
  /// returned as the overall best training job.
  /// <note>
  /// All training jobs launched by parent hyperparameter tuning jobs and the
  /// new hyperparameter tuning jobs count against the limit of training jobs
  /// for the tuning job.
  /// </note>
  Future<CreateHyperParameterTuningJobResponse> createHyperParameterTuningJob({
    required HyperParameterTuningJobConfig hyperParameterTuningJobConfig,
    required String hyperParameterTuningJobName,
    Autotune? autotune,
    List<Tag>? tags,
    HyperParameterTrainingJobDefinition? trainingJobDefinition,
    List<HyperParameterTrainingJobDefinition>? trainingJobDefinitions,
    HyperParameterTuningJobWarmStartConfig? warmStartConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateHyperParameterTuningJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobConfig': hyperParameterTuningJobConfig,
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
        if (autotune != null) 'Autotune': autotune,
        if (tags != null) 'Tags': tags,
        if (trainingJobDefinition != null)
          'TrainingJobDefinition': trainingJobDefinition,
        if (trainingJobDefinitions != null)
          'TrainingJobDefinitions': trainingJobDefinitions,
        if (warmStartConfig != null) 'WarmStartConfig': warmStartConfig,
      },
    );

    return CreateHyperParameterTuningJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a custom SageMaker image. A SageMaker image is a set of image
  /// versions. Each image version represents a container image stored in Amazon
  /// ECR. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring
  /// your own SageMaker image</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [imageName] :
  /// The name of the image. Must be unique to your account.
  ///
  /// Parameter [roleArn] :
  /// The ARN of an IAM role that enables Amazon SageMaker to perform tasks on
  /// your behalf.
  ///
  /// Parameter [description] :
  /// The description of the image.
  ///
  /// Parameter [displayName] :
  /// The display name of the image. If not provided, <code>ImageName</code> is
  /// displayed.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the image.
  Future<CreateImageResponse> createImage({
    required String imageName,
    required String roleArn,
    String? description,
    String? displayName,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateImage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        'RoleArn': roleArn,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateImageResponse.fromJson(jsonResponse.body);
  }

  /// Creates a version of the SageMaker image specified by
  /// <code>ImageName</code>. The version represents the Amazon ECR container
  /// image specified by <code>BaseImage</code>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [baseImage] :
  /// The registry path of the container image to use as the starting point for
  /// this version. The path is an Amazon ECR URI in the following format:
  ///
  /// <code>&lt;acct-id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repo-name[:tag]
  /// or [@digest]&gt;</code>
  ///
  /// Parameter [imageName] :
  /// The <code>ImageName</code> of the <code>Image</code> to create a version
  /// of.
  ///
  /// Parameter [aliases] :
  /// A list of aliases created with the image version.
  ///
  /// Parameter [clientToken] :
  /// A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web
  /// Services SDKs, such as the SDK for Python (Boto3), add a unique value to
  /// the call.
  ///
  /// Parameter [horovod] :
  /// Indicates Horovod compatibility.
  ///
  /// Parameter [jobType] :
  /// Indicates SageMaker job type compatibility.
  ///
  /// <ul>
  /// <li>
  /// <code>TRAINING</code>: The image version is compatible with SageMaker
  /// training jobs.
  /// </li>
  /// <li>
  /// <code>INFERENCE</code>: The image version is compatible with SageMaker
  /// inference jobs.
  /// </li>
  /// <li>
  /// <code>NOTEBOOK_KERNEL</code>: The image version is compatible with
  /// SageMaker notebook kernels.
  /// </li>
  /// </ul>
  ///
  /// Parameter [mLFramework] :
  /// The machine learning framework vended in the image version.
  ///
  /// Parameter [processor] :
  /// Indicates CPU or GPU compatibility.
  ///
  /// <ul>
  /// <li>
  /// <code>CPU</code>: The image version is compatible with CPU.
  /// </li>
  /// <li>
  /// <code>GPU</code>: The image version is compatible with GPU.
  /// </li>
  /// </ul>
  ///
  /// Parameter [programmingLang] :
  /// The supported programming language and its version.
  ///
  /// Parameter [releaseNotes] :
  /// The maintainer description of the image version.
  ///
  /// Parameter [vendorGuidance] :
  /// The stability of the image version, specified by the maintainer.
  ///
  /// <ul>
  /// <li>
  /// <code>NOT_PROVIDED</code>: The maintainers did not provide a status for
  /// image version stability.
  /// </li>
  /// <li>
  /// <code>STABLE</code>: The image version is stable.
  /// </li>
  /// <li>
  /// <code>TO_BE_ARCHIVED</code>: The image version is set to be archived.
  /// Custom image versions that are set to be archived are automatically
  /// archived after three months.
  /// </li>
  /// <li>
  /// <code>ARCHIVED</code>: The image version is archived. Archived image
  /// versions are not searchable and are no longer actively supported.
  /// </li>
  /// </ul>
  Future<CreateImageVersionResponse> createImageVersion({
    required String baseImage,
    required String imageName,
    List<String>? aliases,
    String? clientToken,
    bool? horovod,
    JobType? jobType,
    String? mLFramework,
    Processor? processor,
    String? programmingLang,
    String? releaseNotes,
    VendorGuidance? vendorGuidance,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateImageVersion'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'BaseImage': baseImage,
        'ImageName': imageName,
        if (aliases != null) 'Aliases': aliases,
        'ClientToken': clientToken ?? _s.generateIdempotencyToken(),
        if (horovod != null) 'Horovod': horovod,
        if (jobType != null) 'JobType': jobType.value,
        if (mLFramework != null) 'MLFramework': mLFramework,
        if (processor != null) 'Processor': processor.value,
        if (programmingLang != null) 'ProgrammingLang': programmingLang,
        if (releaseNotes != null) 'ReleaseNotes': releaseNotes,
        if (vendorGuidance != null) 'VendorGuidance': vendorGuidance.value,
      },
    );

    return CreateImageVersionResponse.fromJson(jsonResponse.body);
  }

  /// Creates an inference component, which is a SageMaker hosting object that
  /// you can use to deploy a model to an endpoint. In the inference component
  /// settings, you specify the model, the endpoint, and how the model utilizes
  /// the resources that the endpoint hosts. You can optimize resource
  /// utilization by tailoring how the required CPU cores, accelerators, and
  /// memory are allocated. You can deploy multiple inference components to an
  /// endpoint, where each inference component contains one model and the
  /// resource utilization needs for that individual model. After you deploy an
  /// inference component, you can directly invoke the associated model when you
  /// use the InvokeEndpoint API action.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointName] :
  /// The name of an existing endpoint where you host the inference component.
  ///
  /// Parameter [inferenceComponentName] :
  /// A unique name to assign to the inference component.
  ///
  /// Parameter [runtimeConfig] :
  /// Runtime settings for a model that is deployed with an inference component.
  ///
  /// Parameter [specification] :
  /// Details about the resources to deploy with this inference component,
  /// including the model, container, and compute resources.
  ///
  /// Parameter [variantName] :
  /// The name of an existing production variant where you host the inference
  /// component.
  ///
  /// Parameter [tags] :
  /// A list of key-value pairs associated with the model. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference</i>.
  Future<CreateInferenceComponentOutput> createInferenceComponent({
    required String endpointName,
    required String inferenceComponentName,
    required InferenceComponentRuntimeConfig runtimeConfig,
    required InferenceComponentSpecification specification,
    required String variantName,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateInferenceComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointName': endpointName,
        'InferenceComponentName': inferenceComponentName,
        'RuntimeConfig': runtimeConfig,
        'Specification': specification,
        'VariantName': variantName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateInferenceComponentOutput.fromJson(jsonResponse.body);
  }

  /// Creates an inference experiment using the configurations specified in the
  /// request.
  ///
  /// Use this API to setup and schedule an experiment to compare model variants
  /// on a Amazon SageMaker inference endpoint. For more information about
  /// inference experiments, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow
  /// tests</a>.
  ///
  /// Amazon SageMaker begins your experiment at the scheduled time and routes
  /// traffic to your endpoint's model variants based on your specified
  /// configuration.
  ///
  /// While the experiment is in progress or after it has concluded, you can
  /// view metrics that compare your model variants. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html">View,
  /// monitor, and edit shadow tests</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointName] :
  /// The name of the Amazon SageMaker endpoint on which you want to run the
  /// inference experiment.
  ///
  /// Parameter [modelVariants] :
  /// An array of <code>ModelVariantConfig</code> objects. There is one for each
  /// variant in the inference experiment. Each <code>ModelVariantConfig</code>
  /// object in the array describes the infrastructure configuration for the
  /// corresponding variant.
  ///
  /// Parameter [name] :
  /// The name for the inference experiment.
  ///
  /// Parameter [roleArn] :
  /// The ARN of the IAM role that Amazon SageMaker can assume to access model
  /// artifacts and container images, and manage Amazon SageMaker Inference
  /// endpoints for model deployment.
  ///
  /// Parameter [shadowModeConfig] :
  /// The configuration of <code>ShadowMode</code> inference experiment type.
  /// Use this field to specify a production variant which takes all the
  /// inference requests, and a shadow variant to which Amazon SageMaker
  /// replicates a percentage of the inference requests. For the shadow variant
  /// also specify the percentage of requests that Amazon SageMaker replicates.
  ///
  /// Parameter [type] :
  /// The type of the inference experiment that you want to run. The following
  /// types of experiments are possible:
  ///
  /// <ul>
  /// <li>
  /// <code>ShadowMode</code>: You can use this type to validate a shadow
  /// variant. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow
  /// tests</a>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dataStorageConfig] :
  /// The Amazon S3 location and configuration for storing inference request and
  /// response data.
  ///
  /// This is an optional parameter that you can use for data capture. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html">Capture
  /// data</a>.
  ///
  /// Parameter [description] :
  /// A description for the inference experiment.
  ///
  /// Parameter [kmsKey] :
  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS)
  /// key that Amazon SageMaker uses to encrypt data on the storage volume
  /// attached to the ML compute instance that hosts the endpoint. The
  /// <code>KmsKey</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// KMS key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// Amazon Resource Name (ARN) of a KMS key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// KMS key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// Amazon Resource Name (ARN) of a KMS key Alias
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
  /// </li>
  /// </ul>
  /// If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker
  /// execution role must include permissions to call <code>kms:Encrypt</code>.
  /// If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS
  /// key for Amazon S3 for your role's account. Amazon SageMaker uses
  /// server-side encryption with KMS managed keys for
  /// <code>OutputDataConfig</code>. If you use a bucket policy with an
  /// <code>s3:PutObject</code> permission that only allows objects with
  /// server-side encryption, set the condition key of
  /// <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS
  /// managed Encryption Keys</a> in the <i>Amazon Simple Storage Service
  /// Developer Guide.</i>
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify
  /// in your <code>CreateEndpoint</code> and <code>UpdateEndpoint</code>
  /// requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  ///
  /// Parameter [schedule] :
  /// The duration for which you want the inference experiment to run. If you
  /// don't specify this field, the experiment automatically starts immediately
  /// upon creation and concludes after 7 days.
  ///
  /// Parameter [tags] :
  /// Array of key-value pairs. You can use tags to categorize your Amazon Web
  /// Services resources in different ways, for example, by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/ARG/latest/userguide/tagging.html">Tagging
  /// your Amazon Web Services Resources</a>.
  Future<CreateInferenceExperimentResponse> createInferenceExperiment({
    required String endpointName,
    required List<ModelVariantConfig> modelVariants,
    required String name,
    required String roleArn,
    required ShadowModeConfig shadowModeConfig,
    required InferenceExperimentType type,
    InferenceExperimentDataStorageConfig? dataStorageConfig,
    String? description,
    String? kmsKey,
    InferenceExperimentSchedule? schedule,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateInferenceExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointName': endpointName,
        'ModelVariants': modelVariants,
        'Name': name,
        'RoleArn': roleArn,
        'ShadowModeConfig': shadowModeConfig,
        'Type': type.value,
        if (dataStorageConfig != null) 'DataStorageConfig': dataStorageConfig,
        if (description != null) 'Description': description,
        if (kmsKey != null) 'KmsKey': kmsKey,
        if (schedule != null) 'Schedule': schedule,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateInferenceExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Starts a recommendation job. You can create either an instance
  /// recommendation or load test job.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [inputConfig] :
  /// Provides information about the versioned model package Amazon Resource
  /// Name (ARN), the traffic pattern, and endpoint configurations.
  ///
  /// Parameter [jobName] :
  /// A name for the recommendation job. The name must be unique within the
  /// Amazon Web Services Region and within your Amazon Web Services account.
  /// The job name is passed down to the resources created by the recommendation
  /// job. The names of resources (such as the model, endpoint configuration,
  /// endpoint, and compilation) that are prefixed with the job name are
  /// truncated at 40 characters.
  ///
  /// Parameter [jobType] :
  /// Defines the type of recommendation job. Specify <code>Default</code> to
  /// initiate an instance recommendation and <code>Advanced</code> to initiate
  /// a load test. If left unspecified, Amazon SageMaker Inference Recommender
  /// will run an instance recommendation (<code>DEFAULT</code>) job.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon
  /// SageMaker to perform tasks on your behalf.
  ///
  /// Parameter [jobDescription] :
  /// Description of the recommendation job.
  ///
  /// Parameter [outputConfig] :
  /// Provides information about the output artifacts and the KMS key to use for
  /// Amazon S3 server-side encryption.
  ///
  /// Parameter [stoppingConditions] :
  /// A set of conditions for stopping a recommendation job. If any of the
  /// conditions are met, the job is automatically stopped.
  ///
  /// Parameter [tags] :
  /// The metadata that you apply to Amazon Web Services resources to help you
  /// categorize and organize them. Each tag consists of a key and a value, both
  /// of which you define. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a> in the Amazon Web Services General
  /// Reference.
  Future<CreateInferenceRecommendationsJobResponse>
      createInferenceRecommendationsJob({
    required RecommendationJobInputConfig inputConfig,
    required String jobName,
    required RecommendationJobType jobType,
    required String roleArn,
    String? jobDescription,
    RecommendationJobOutputConfig? outputConfig,
    RecommendationJobStoppingConditions? stoppingConditions,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateInferenceRecommendationsJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InputConfig': inputConfig,
        'JobName': jobName,
        'JobType': jobType.value,
        'RoleArn': roleArn,
        if (jobDescription != null) 'JobDescription': jobDescription,
        if (outputConfig != null) 'OutputConfig': outputConfig,
        if (stoppingConditions != null)
          'StoppingConditions': stoppingConditions,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateInferenceRecommendationsJobResponse.fromJson(
        jsonResponse.body);
  }

  /// Creates a job that uses workers to label the data objects in your input
  /// dataset. You can use the labeled data to train machine learning models.
  ///
  /// You can select your workforce from one of three providers:
  ///
  /// <ul>
  /// <li>
  /// A private workforce that you create. It can include employees,
  /// contractors, and outside experts. Use a private workforce when want the
  /// data to stay within your organization or when a specific set of skills is
  /// required.
  /// </li>
  /// <li>
  /// One or more vendors that you select from the Amazon Web Services
  /// Marketplace. Vendors provide expertise in specific areas.
  /// </li>
  /// <li>
  /// The Amazon Mechanical Turk workforce. This is the largest workforce, but
  /// it should only be used for public data or data that has been stripped of
  /// any personally identifiable information.
  /// </li>
  /// </ul>
  /// You can also use <i>automated data labeling</i> to reduce the number of
  /// data objects that need to be labeled by a human. Automated data labeling
  /// uses <i>active learning</i> to determine if a data object can be labeled
  /// by machine or if it needs to be sent to a human worker. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using
  /// Automated Data Labeling</a>.
  ///
  /// The data objects to be labeled are contained in an Amazon S3 bucket. You
  /// create a <i>manifest file</i> that describes the location of each object.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using
  /// Input and Output Data</a>.
  ///
  /// The output can be used as the manifest file for another labeling job or as
  /// training data for your machine learning models.
  ///
  /// You can use this operation to create a static labeling job or a streaming
  /// labeling job. A static labeling job stops if all data objects in the input
  /// manifest file identified in <code>ManifestS3Uri</code> have been labeled.
  /// A streaming labeling job runs perpetually until it is manually stopped, or
  /// remains idle for 10 days. You can send new data objects to an active
  /// (<code>InProgress</code>) streaming labeling job in real time. To learn
  /// how to create a static labeling job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create
  /// a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To
  /// learn how to create a streaming labeling job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create
  /// a Streaming Labeling Job</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [humanTaskConfig] :
  /// Configures the labeling task and how it is presented to workers;
  /// including, but not limited to price, keywords, and batch size (task
  /// count).
  ///
  /// Parameter [inputConfig] :
  /// Input data for the labeling job, such as the Amazon S3 location of the
  /// data objects and the location of the manifest file that describes the data
  /// objects.
  ///
  /// You must specify at least one of the following: <code>S3DataSource</code>
  /// or <code>SnsDataSource</code>.
  ///
  /// <ul>
  /// <li>
  /// Use <code>SnsDataSource</code> to specify an SNS input topic for a
  /// streaming labeling job. If you do not specify and SNS input topic ARN,
  /// Ground Truth will create a one-time labeling job that stops after all data
  /// objects in the input manifest file have been labeled.
  /// </li>
  /// <li>
  /// Use <code>S3DataSource</code> to specify an input manifest file for both
  /// streaming and one-time labeling jobs. Adding an <code>S3DataSource</code>
  /// is optional if you use <code>SnsDataSource</code> to create a streaming
  /// labeling job.
  /// </li>
  /// </ul>
  /// If you use the Amazon Mechanical Turk workforce, your input data should
  /// not include confidential information, personal information or protected
  /// health information. Use <code>ContentClassifiers</code> to specify that
  /// your data is free of personally identifiable information and adult
  /// content.
  ///
  /// Parameter [labelAttributeName] :
  /// The attribute name to use for the label in the output manifest file. This
  /// is the key for the key/value pair formed with the label that a worker
  /// assigns to the object. The <code>LabelAttributeName</code> must meet the
  /// following requirements.
  ///
  /// <ul>
  /// <li>
  /// The name can't end with "-metadata".
  /// </li>
  /// <li>
  /// If you are using one of the following <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a>, the attribute name <i>must</i> end with "-ref". If the
  /// task type you are using is not listed below, the attribute name <i>must
  /// not</i> end with "-ref".
  ///
  /// <ul>
  /// <li>
  /// Image semantic segmentation (<code>SemanticSegmentation)</code>, and
  /// adjustment (<code>AdjustmentSemanticSegmentation</code>) and verification
  /// (<code>VerificationSemanticSegmentation</code>) labeling jobs for this
  /// task type.
  /// </li>
  /// <li>
  /// Video frame object detection (<code>VideoObjectDetection</code>), and
  /// adjustment and verification (<code>AdjustmentVideoObjectDetection</code>)
  /// labeling jobs for this task type.
  /// </li>
  /// <li>
  /// Video frame object tracking (<code>VideoObjectTracking</code>), and
  /// adjustment and verification (<code>AdjustmentVideoObjectTracking</code>)
  /// labeling jobs for this task type.
  /// </li>
  /// <li>
  /// 3D point cloud semantic segmentation
  /// (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and
  /// verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>)
  /// labeling jobs for this task type.
  /// </li>
  /// <li>
  /// 3D point cloud object tracking (<code>3DPointCloudObjectTracking</code>),
  /// and adjustment and verification
  /// (<code>Adjustment3DPointCloudObjectTracking</code>) labeling jobs for this
  /// task type.
  /// </li>
  /// </ul> </li>
  /// </ul> <p/> <important>
  /// If you are creating an adjustment or verification labeling job, you must
  /// use a <i>different</i> <code>LabelAttributeName</code> than the one used
  /// in the original labeling job. The original labeling job is the Ground
  /// Truth labeling job that produced the labels that you want verified or
  /// adjusted. To learn more about adjustment and verification labeling jobs,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify
  /// and Adjust Labels</a>.
  /// </important>
  ///
  /// Parameter [labelingJobName] :
  /// The name of the labeling job. This name is used to identify the job in a
  /// list of labeling jobs. Labeling job names must be unique within an Amazon
  /// Web Services account and region. <code>LabelingJobName</code> is not case
  /// sensitive. For example, Example-job and example-job are considered the
  /// same labeling job name by Ground Truth.
  ///
  /// Parameter [outputConfig] :
  /// The location of the output data and the Amazon Web Services Key Management
  /// Service key ID for the key used to encrypt the output data, if any.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform
  /// tasks on your behalf during data labeling. You must grant this role the
  /// necessary permissions so that Amazon SageMaker can successfully complete
  /// data labeling.
  ///
  /// Parameter [labelCategoryConfigS3Uri] :
  /// The S3 URI of the file, referred to as a <i>label category configuration
  /// file</i>, that defines the categories used to label the data objects.
  ///
  /// For 3D point cloud and video frame task types, you can add label category
  /// attributes and frame attributes to your label category configuration file.
  /// To learn how, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html">Create
  /// a Labeling Category Configuration File for 3D Point Cloud Labeling
  /// Jobs</a>.
  ///
  /// For named entity recognition jobs, in addition to <code>"labels"</code>,
  /// you must provide worker instructions in the label category configuration
  /// file using the <code>"instructions"</code> parameter:
  /// <code>"instructions": {"shortInstruction":"&lt;h1&gt;Add
  /// header&lt;/h1&gt;&lt;p&gt;Add Instructions&lt;/p&gt;",
  /// "fullInstruction":"&lt;p&gt;Add additional
  /// instructions.&lt;/p&gt;"}</code>. For details and an example, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api">Create
  /// a Named Entity Recognition Labeling Job (API) </a>.
  ///
  /// For all other <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html">custom
  /// tasks</a>, your label category configuration file must be a JSON file in
  /// the following format. Identify the labels you want to use by replacing
  /// <code>label_1</code>,
  /// <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label
  /// categories.
  ///
  /// <code>{ </code>
  ///
  /// <code>"document-version": "2018-11-28",</code>
  ///
  /// <code>"labels": [{"label": "label_1"},{"label": "label_2"},...{"label":
  /// "label_n"}]</code>
  ///
  /// <code>}</code>
  ///
  /// Note the following about the label category configuration file:
  ///
  /// <ul>
  /// <li>
  /// For image classification and text classification (single and multi-label)
  /// you must specify at least two label categories. For all other task types,
  /// the minimum number of label categories required is one.
  /// </li>
  /// <li>
  /// Each label category must be unique, you cannot specify duplicate label
  /// categories.
  /// </li>
  /// <li>
  /// If you create a 3D point cloud or video frame adjustment or verification
  /// labeling job, you must include <code>auditLabelAttributeName</code> in the
  /// label category configuration. Use this parameter to enter the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName">
  /// <code>LabelAttributeName</code> </a> of the labeling job you want to
  /// adjust or verify annotations of.
  /// </li>
  /// </ul>
  ///
  /// Parameter [labelingJobAlgorithmsConfig] :
  /// Configures the information required to perform automated data labeling.
  ///
  /// Parameter [stoppingConditions] :
  /// A set of conditions for stopping the labeling job. If any of the
  /// conditions are met, the job is automatically stopped. You can use these
  /// conditions to control the cost of data labeling.
  ///
  /// Parameter [tags] :
  /// An array of key/value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateLabelingJobResponse> createLabelingJob({
    required HumanTaskConfig humanTaskConfig,
    required LabelingJobInputConfig inputConfig,
    required String labelAttributeName,
    required String labelingJobName,
    required LabelingJobOutputConfig outputConfig,
    required String roleArn,
    String? labelCategoryConfigS3Uri,
    LabelingJobAlgorithmsConfig? labelingJobAlgorithmsConfig,
    LabelingJobStoppingConditions? stoppingConditions,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateLabelingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskConfig': humanTaskConfig,
        'InputConfig': inputConfig,
        'LabelAttributeName': labelAttributeName,
        'LabelingJobName': labelingJobName,
        'OutputConfig': outputConfig,
        'RoleArn': roleArn,
        if (labelCategoryConfigS3Uri != null)
          'LabelCategoryConfigS3Uri': labelCategoryConfigS3Uri,
        if (labelingJobAlgorithmsConfig != null)
          'LabelingJobAlgorithmsConfig': labelingJobAlgorithmsConfig,
        if (stoppingConditions != null)
          'StoppingConditions': stoppingConditions,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateLabelingJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a model in SageMaker. In the request, you name the model and
  /// describe a primary container. For the primary container, you specify the
  /// Docker image that contains inference code, artifacts (from prior
  /// training), and a custom environment map that the inference code uses when
  /// you deploy the model for predictions.
  ///
  /// Use this API to create a model if you want to use SageMaker hosting
  /// services or run a batch transform job.
  ///
  /// To host your model, you create an endpoint configuration with the
  /// <code>CreateEndpointConfig</code> API, and then create an endpoint with
  /// the <code>CreateEndpoint</code> API. SageMaker then deploys all of the
  /// containers that you defined for the model in the hosting environment.
  ///
  /// To run a batch transform using your model, you start a job with the
  /// <code>CreateTransformJob</code> API. SageMaker uses your model and your
  /// dataset to get inferences which are then saved to a specified S3 location.
  ///
  /// In the request, you also provide an IAM role that SageMaker can assume to
  /// access model artifacts and docker image for deployment on ML compute
  /// hosting instances or for batch transform jobs. In addition, you also use
  /// the IAM role to manage permissions the inference code needs. For example,
  /// if the inference code access any other Amazon Web Services resources, you
  /// grant necessary permissions via this role.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [modelName] :
  /// The name of the new model.
  ///
  /// Parameter [containers] :
  /// Specifies the containers in the inference pipeline.
  ///
  /// Parameter [enableNetworkIsolation] :
  /// Isolates the model container. No inbound or outbound network calls can be
  /// made to or from the model container.
  ///
  /// Parameter [executionRoleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume
  /// to access model artifacts and docker image for deployment on ML compute
  /// instances or for batch transform jobs. Deploying on ML compute instances
  /// is part of model hosting. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
  /// Roles</a>.
  /// <note>
  /// To be able to pass this role to SageMaker, the caller of this API must
  /// have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [inferenceExecutionConfig] :
  /// Specifies details of how containers in a multi-container endpoint are
  /// called.
  ///
  /// Parameter [primaryContainer] :
  /// The location of the primary docker image containing inference code,
  /// associated artifacts, and custom environment map that the inference code
  /// uses when the model is deployed for predictions.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [vpcConfig] :
  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that you want your model to connect to.
  /// Control access to and from your model container by configuring the VPC.
  /// <code>VpcConfig</code> is used in hosting services and in batch transform.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect
  /// Endpoints by Using an Amazon Virtual Private Cloud</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html">Protect
  /// Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud</a>.
  Future<CreateModelOutput> createModel({
    required String modelName,
    List<ContainerDefinition>? containers,
    bool? enableNetworkIsolation,
    String? executionRoleArn,
    InferenceExecutionConfig? inferenceExecutionConfig,
    ContainerDefinition? primaryContainer,
    List<Tag>? tags,
    VpcConfig? vpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModel'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
        if (containers != null) 'Containers': containers,
        if (enableNetworkIsolation != null)
          'EnableNetworkIsolation': enableNetworkIsolation,
        if (executionRoleArn != null) 'ExecutionRoleArn': executionRoleArn,
        if (inferenceExecutionConfig != null)
          'InferenceExecutionConfig': inferenceExecutionConfig,
        if (primaryContainer != null) 'PrimaryContainer': primaryContainer,
        if (tags != null) 'Tags': tags,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateModelOutput.fromJson(jsonResponse.body);
  }

  /// Creates the definition for a model bias job.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the bias job definition. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  ///
  /// Parameter [modelBiasAppSpecification] :
  /// Configures the model bias job to run a specified Docker container image.
  ///
  /// Parameter [modelBiasJobInput] :
  /// Inputs for the model bias job.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [modelBiasBaselineConfig] :
  /// The baseline configuration for a model bias job.
  ///
  /// Parameter [networkConfig] :
  /// Networking options for a model bias job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">
  /// Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and
  /// Cost Management User Guide</i>.
  Future<CreateModelBiasJobDefinitionResponse> createModelBiasJobDefinition({
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required ModelBiasAppSpecification modelBiasAppSpecification,
    required ModelBiasJobInput modelBiasJobInput,
    required MonitoringOutputConfig modelBiasJobOutputConfig,
    required String roleArn,
    ModelBiasBaselineConfig? modelBiasBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelBiasJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'ModelBiasAppSpecification': modelBiasAppSpecification,
        'ModelBiasJobInput': modelBiasJobInput,
        'ModelBiasJobOutputConfig': modelBiasJobOutputConfig,
        'RoleArn': roleArn,
        if (modelBiasBaselineConfig != null)
          'ModelBiasBaselineConfig': modelBiasBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelBiasJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Creates an Amazon SageMaker Model Card.
  ///
  /// For information about how to use model cards, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html">Amazon
  /// SageMaker Model Card</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [content] :
  /// The content of the model card. Content must be in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema">model
  /// card JSON schema</a> and provided as a string.
  ///
  /// Parameter [modelCardName] :
  /// The unique name of the model card.
  ///
  /// Parameter [modelCardStatus] :
  /// The approval status of the model card within your organization. Different
  /// organizations might have different criteria for model card review and
  /// approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates should
  /// be made to the model card, but it can still be exported.
  /// </li>
  /// </ul>
  ///
  /// Parameter [securityConfig] :
  /// An optional Key Management Service key to encrypt, decrypt, and re-encrypt
  /// model card content for regulated workloads with highly sensitive data.
  ///
  /// Parameter [tags] :
  /// Key-value pairs used to manage metadata for model cards.
  Future<CreateModelCardResponse> createModelCard({
    required String content,
    required String modelCardName,
    required ModelCardStatus modelCardStatus,
    ModelCardSecurityConfig? securityConfig,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelCard'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Content': content,
        'ModelCardName': modelCardName,
        'ModelCardStatus': modelCardStatus.value,
        if (securityConfig != null) 'SecurityConfig': securityConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelCardResponse.fromJson(jsonResponse.body);
  }

  /// Creates an Amazon SageMaker Model Card export job.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [modelCardExportJobName] :
  /// The name of the model card export job.
  ///
  /// Parameter [modelCardName] :
  /// The name or Amazon Resource Name (ARN) of the model card to export.
  ///
  /// Parameter [outputConfig] :
  /// The model card output configuration that specifies the Amazon S3 path for
  /// exporting.
  ///
  /// Parameter [modelCardVersion] :
  /// The version of the model card to export. If a version is not provided,
  /// then the latest version of the model card is exported.
  Future<CreateModelCardExportJobResponse> createModelCardExportJob({
    required String modelCardExportJobName,
    required String modelCardName,
    required ModelCardExportOutputConfig outputConfig,
    int? modelCardVersion,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelCardExportJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardExportJobName': modelCardExportJobName,
        'ModelCardName': modelCardName,
        'OutputConfig': outputConfig,
        if (modelCardVersion != null) 'ModelCardVersion': modelCardVersion,
      },
    );

    return CreateModelCardExportJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates the definition for a model explainability job.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model explainability job definition. The name must be
  /// unique within an Amazon Web Services Region in the Amazon Web Services
  /// account.
  ///
  /// Parameter [modelExplainabilityAppSpecification] :
  /// Configures the model explainability job to run a specified Docker
  /// container image.
  ///
  /// Parameter [modelExplainabilityJobInput] :
  /// Inputs for the model explainability job.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [modelExplainabilityBaselineConfig] :
  /// The baseline configuration for a model explainability job.
  ///
  /// Parameter [networkConfig] :
  /// Networking options for a model explainability job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">
  /// Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and
  /// Cost Management User Guide</i>.
  Future<CreateModelExplainabilityJobDefinitionResponse>
      createModelExplainabilityJobDefinition({
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required ModelExplainabilityAppSpecification
        modelExplainabilityAppSpecification,
    required ModelExplainabilityJobInput modelExplainabilityJobInput,
    required MonitoringOutputConfig modelExplainabilityJobOutputConfig,
    required String roleArn,
    ModelExplainabilityBaselineConfig? modelExplainabilityBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelExplainabilityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'ModelExplainabilityAppSpecification':
            modelExplainabilityAppSpecification,
        'ModelExplainabilityJobInput': modelExplainabilityJobInput,
        'ModelExplainabilityJobOutputConfig':
            modelExplainabilityJobOutputConfig,
        'RoleArn': roleArn,
        if (modelExplainabilityBaselineConfig != null)
          'ModelExplainabilityBaselineConfig':
              modelExplainabilityBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelExplainabilityJobDefinitionResponse.fromJson(
        jsonResponse.body);
  }

  /// Creates a model package that you can use to create SageMaker models or
  /// list on Amazon Web Services Marketplace, or a versioned model that is part
  /// of a model group. Buyers can subscribe to model packages listed on Amazon
  /// Web Services Marketplace to create models in SageMaker.
  ///
  /// To create a model package by specifying a Docker container that contains
  /// your inference code and the Amazon S3 location of your model artifacts,
  /// provide values for <code>InferenceSpecification</code>. To create a model
  /// from an algorithm resource that you created or subscribed to in Amazon Web
  /// Services Marketplace, provide a value for
  /// <code>SourceAlgorithmSpecification</code>.
  /// <note>
  /// There are two types of model packages:
  ///
  /// <ul>
  /// <li>
  /// Versioned - a model that is part of a model group in the model registry.
  /// </li>
  /// <li>
  /// Unversioned - a model package that is not part of a model group.
  /// </li>
  /// </ul> </note>
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [additionalInferenceSpecifications] :
  /// An array of additional Inference Specification objects. Each additional
  /// Inference Specification specifies artifacts based on this model package
  /// that can be used on inference endpoints. Generally used with SageMaker Neo
  /// to store the compiled artifacts.
  ///
  /// Parameter [certifyForMarketplace] :
  /// Whether to certify the model package for listing on Amazon Web Services
  /// Marketplace.
  ///
  /// This parameter is optional for unversioned models, and does not apply to
  /// versioned models.
  ///
  /// Parameter [clientToken] :
  /// A unique token that guarantees that the call to this API is idempotent.
  ///
  /// Parameter [customerMetadataProperties] :
  /// The metadata properties associated with the model package versions.
  ///
  /// Parameter [domain] :
  /// The machine learning domain of your model package and its components.
  /// Common machine learning domains include computer vision and natural
  /// language processing.
  ///
  /// Parameter [driftCheckBaselines] :
  /// Represents the drift check baselines that can be used when the model
  /// monitor is set using the model package. For more information, see the
  /// topic on <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift
  /// Detection against Previous Baselines in SageMaker Pipelines</a> in the
  /// <i>Amazon SageMaker Developer Guide</i>.
  ///
  /// Parameter [inferenceSpecification] :
  /// Specifies details about inference jobs that you can run with models based
  /// on this model package, including the following information:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR paths of containers that contain the inference code and
  /// model artifacts.
  /// </li>
  /// <li>
  /// The instance types that the model package supports for transform jobs and
  /// real-time endpoints used for inference.
  /// </li>
  /// <li>
  /// The input and output content formats that the model package supports for
  /// inference.
  /// </li>
  /// </ul>
  ///
  /// Parameter [modelApprovalStatus] :
  /// Whether the model is approved for deployment.
  ///
  /// This parameter is optional for versioned models, and does not apply to
  /// unversioned models.
  ///
  /// For versioned models, the value of this parameter must be set to
  /// <code>Approved</code> to deploy the model.
  ///
  /// Parameter [modelCard] :
  /// The model card associated with the model package. Since
  /// <code>ModelPackageModelCard</code> is tied to a model package, it is a
  /// specific usage of a model card and its schema is simplified compared to
  /// the schema of <code>ModelCard</code>. The
  /// <code>ModelPackageModelCard</code> schema does not include
  /// <code>model_package_details</code>, and <code>model_overview</code> is
  /// composed of the <code>model_creator</code> and <code>model_artifact</code>
  /// properties. For more information about the model card associated with the
  /// model package, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View
  /// the Details of a Model Version</a>.
  ///
  /// Parameter [modelMetrics] :
  /// A structure that contains model metrics reports.
  ///
  /// Parameter [modelPackageDescription] :
  /// A description of the model package.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name or Amazon Resource Name (ARN) of the model package group that
  /// this model version belongs to.
  ///
  /// This parameter is required for versioned models, and does not apply to
  /// unversioned models.
  ///
  /// Parameter [modelPackageName] :
  /// The name of the model package. The name must have 1 to 63 characters.
  /// Valid characters are a-z, A-Z, 0-9, and - (hyphen).
  ///
  /// This parameter is required for unversioned models. It is not applicable to
  /// versioned models.
  ///
  /// Parameter [samplePayloadUrl] :
  /// The Amazon Simple Storage Service (Amazon S3) path where the sample
  /// payload is stored. This path must point to a single gzip compressed tar
  /// archive (.tar.gz suffix). This archive can hold multiple files that are
  /// all equally used in the load test. Each file in the archive must satisfy
  /// the size constraints of the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html#API_runtime_InvokeEndpoint_RequestSyntax">InvokeEndpoint</a>
  /// call.
  ///
  /// Parameter [securityConfig] :
  /// The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model
  /// package information.
  ///
  /// Parameter [skipModelValidation] :
  /// Indicates if you want to skip model validation.
  ///
  /// Parameter [sourceAlgorithmSpecification] :
  /// Details about the algorithm that was used to create the model package.
  ///
  /// Parameter [sourceUri] :
  /// The URI of the source for the model package. If you want to clone a model
  /// package, set it to the model package Amazon Resource Name (ARN). If you
  /// want to register a model, set it to the model ARN.
  ///
  /// Parameter [tags] :
  /// A list of key value pairs associated with the model. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  ///
  /// If you supply <code>ModelPackageGroupName</code>, your model package
  /// belongs to the model group you specify and uses the tags associated with
  /// the model group. In this case, you cannot supply a <code>tag</code>
  /// argument.
  ///
  /// Parameter [task] :
  /// The machine learning task your model package accomplishes. Common machine
  /// learning tasks include object detection and image classification. The
  /// following tasks are supported by Inference Recommender:
  /// <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> |
  /// <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> |
  /// <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> |
  /// <code>"REGRESSION"</code> | <code>"OTHER"</code>.
  ///
  /// Specify "OTHER" if none of the tasks listed fit your use case.
  ///
  /// Parameter [validationSpecification] :
  /// Specifies configurations for one or more transform jobs that SageMaker
  /// runs to test the model package.
  Future<CreateModelPackageOutput> createModelPackage({
    List<AdditionalInferenceSpecificationDefinition>?
        additionalInferenceSpecifications,
    bool? certifyForMarketplace,
    String? clientToken,
    Map<String, String>? customerMetadataProperties,
    String? domain,
    DriftCheckBaselines? driftCheckBaselines,
    InferenceSpecification? inferenceSpecification,
    MetadataProperties? metadataProperties,
    ModelApprovalStatus? modelApprovalStatus,
    ModelPackageModelCard? modelCard,
    ModelMetrics? modelMetrics,
    String? modelPackageDescription,
    String? modelPackageGroupName,
    String? modelPackageName,
    String? samplePayloadUrl,
    ModelPackageSecurityConfig? securityConfig,
    SkipModelValidation? skipModelValidation,
    SourceAlgorithmSpecification? sourceAlgorithmSpecification,
    String? sourceUri,
    List<Tag>? tags,
    String? task,
    ModelPackageValidationSpecification? validationSpecification,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (additionalInferenceSpecifications != null)
          'AdditionalInferenceSpecifications':
              additionalInferenceSpecifications,
        if (certifyForMarketplace != null)
          'CertifyForMarketplace': certifyForMarketplace,
        'ClientToken': clientToken ?? _s.generateIdempotencyToken(),
        if (customerMetadataProperties != null)
          'CustomerMetadataProperties': customerMetadataProperties,
        if (domain != null) 'Domain': domain,
        if (driftCheckBaselines != null)
          'DriftCheckBaselines': driftCheckBaselines,
        if (inferenceSpecification != null)
          'InferenceSpecification': inferenceSpecification,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (modelApprovalStatus != null)
          'ModelApprovalStatus': modelApprovalStatus.value,
        if (modelCard != null) 'ModelCard': modelCard,
        if (modelMetrics != null) 'ModelMetrics': modelMetrics,
        if (modelPackageDescription != null)
          'ModelPackageDescription': modelPackageDescription,
        if (modelPackageGroupName != null)
          'ModelPackageGroupName': modelPackageGroupName,
        if (modelPackageName != null) 'ModelPackageName': modelPackageName,
        if (samplePayloadUrl != null) 'SamplePayloadUrl': samplePayloadUrl,
        if (securityConfig != null) 'SecurityConfig': securityConfig,
        if (skipModelValidation != null)
          'SkipModelValidation': skipModelValidation.value,
        if (sourceAlgorithmSpecification != null)
          'SourceAlgorithmSpecification': sourceAlgorithmSpecification,
        if (sourceUri != null) 'SourceUri': sourceUri,
        if (tags != null) 'Tags': tags,
        if (task != null) 'Task': task,
        if (validationSpecification != null)
          'ValidationSpecification': validationSpecification,
      },
    );

    return CreateModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Creates a model group. A model group contains a group of model versions.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group.
  ///
  /// Parameter [modelPackageGroupDescription] :
  /// A description for the model group.
  ///
  /// Parameter [tags] :
  /// A list of key value pairs associated with the model group. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  Future<CreateModelPackageGroupOutput> createModelPackageGroup({
    required String modelPackageGroupName,
    String? modelPackageGroupDescription,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelPackageGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
        if (modelPackageGroupDescription != null)
          'ModelPackageGroupDescription': modelPackageGroupDescription,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelPackageGroupOutput.fromJson(jsonResponse.body);
  }

  /// Creates a definition for a job that monitors model quality and drift. For
  /// information about model monitor, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
  /// SageMaker Model Monitor</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the monitoring job definition.
  ///
  /// Parameter [modelQualityAppSpecification] :
  /// The container that runs the monitoring job.
  ///
  /// Parameter [modelQualityJobInput] :
  /// A list of the inputs that are monitored. Currently endpoints are
  /// supported.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [modelQualityBaselineConfig] :
  /// Specifies the constraints and baselines for the monitoring job.
  ///
  /// Parameter [networkConfig] :
  /// Specifies the network configuration for the monitoring job.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">
  /// Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and
  /// Cost Management User Guide</i>.
  Future<CreateModelQualityJobDefinitionResponse>
      createModelQualityJobDefinition({
    required String jobDefinitionName,
    required MonitoringResources jobResources,
    required ModelQualityAppSpecification modelQualityAppSpecification,
    required ModelQualityJobInput modelQualityJobInput,
    required MonitoringOutputConfig modelQualityJobOutputConfig,
    required String roleArn,
    ModelQualityBaselineConfig? modelQualityBaselineConfig,
    MonitoringNetworkConfig? networkConfig,
    MonitoringStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateModelQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
        'JobResources': jobResources,
        'ModelQualityAppSpecification': modelQualityAppSpecification,
        'ModelQualityJobInput': modelQualityJobInput,
        'ModelQualityJobOutputConfig': modelQualityJobOutputConfig,
        'RoleArn': roleArn,
        if (modelQualityBaselineConfig != null)
          'ModelQualityBaselineConfig': modelQualityBaselineConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateModelQualityJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Creates a schedule that regularly starts Amazon SageMaker Processing Jobs
  /// to monitor the data captured for an Amazon SageMaker Endpoint.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [monitoringScheduleConfig] :
  /// The configuration object that specifies the monitoring schedule and
  /// defines the monitoring job.
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the monitoring schedule. The name must be unique within an
  /// Amazon Web Services Region within an Amazon Web Services account.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="
  /// https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateMonitoringScheduleResponse> createMonitoringSchedule({
    required MonitoringScheduleConfig monitoringScheduleConfig,
    required String monitoringScheduleName,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateMonitoringSchedule'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleConfig': monitoringScheduleConfig,
        'MonitoringScheduleName': monitoringScheduleName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateMonitoringScheduleResponse.fromJson(jsonResponse.body);
  }

  /// Creates an SageMaker notebook instance. A notebook instance is a machine
  /// learning (ML) compute instance running on a Jupyter notebook.
  ///
  /// In a <code>CreateNotebookInstance</code> request, specify the type of ML
  /// compute instance that you want to run. SageMaker launches the instance,
  /// installs common libraries that you can use to explore datasets for model
  /// training, and attaches an ML storage volume to the notebook instance.
  ///
  /// SageMaker also provides a set of example notebooks. Each notebook
  /// demonstrates how to use SageMaker with a specific algorithm or with a
  /// machine learning framework.
  ///
  /// After receiving the request, SageMaker does the following:
  /// <ol>
  /// <li>
  /// Creates a network interface in the SageMaker VPC.
  /// </li>
  /// <li>
  /// (Option) If you specified <code>SubnetId</code>, SageMaker creates a
  /// network interface in your own VPC, which is inferred from the subnet ID
  /// that you provide in the input. When creating this network interface,
  /// SageMaker attaches the security group that you specified in the request to
  /// the network interface that it creates in your VPC.
  /// </li>
  /// <li>
  /// Launches an EC2 instance of the type specified in the request in the
  /// SageMaker VPC. If you specified <code>SubnetId</code> of your VPC,
  /// SageMaker specifies both network interfaces when launching this instance.
  /// This enables inbound traffic from your own VPC to the notebook instance,
  /// assuming that the security groups allow it.
  /// </li> </ol>
  /// After creating the notebook instance, SageMaker returns its Amazon
  /// Resource Name (ARN). You can't change the name of a notebook instance
  /// after you create it.
  ///
  /// After SageMaker creates the notebook instance, you can connect to the
  /// Jupyter server and work in Jupyter notebooks. For example, you can write
  /// code to explore a dataset that you can use for model training, train a
  /// model, host models by creating SageMaker endpoints, and validate hosted
  /// models.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How
  /// It Works</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [instanceType] :
  /// The type of ML compute instance to launch for the notebook instance.
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the new notebook instance.
  ///
  /// Parameter [roleArn] :
  /// When you send any requests to Amazon Web Services resources from the
  /// notebook instance, SageMaker assumes this role to perform tasks on your
  /// behalf. You must grant this role necessary permissions so SageMaker can
  /// perform these tasks. The policy must allow the SageMaker service principal
  /// (sagemaker.amazonaws.com) permissions to assume this role. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
  /// Roles</a>.
  /// <note>
  /// To be able to pass this role to SageMaker, the caller of this API must
  /// have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [acceleratorTypes] :
  /// A list of Elastic Inference (EI) instance types to associate with this
  /// notebook instance. Currently, only one instance type can be associated
  /// with a notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using
  /// Elastic Inference in Amazon SageMaker</a>.
  ///
  /// Parameter [additionalCodeRepositories] :
  /// An array of up to three Git repositories to associate with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of
  /// your notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  ///
  /// Parameter [defaultCodeRepository] :
  /// A Git repository to associate with the notebook instance as its default
  /// code repository. This can be either the name of a Git repository stored as
  /// a resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open
  /// a notebook instance, it opens in the directory that contains this
  /// repository. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  ///
  /// Parameter [directInternetAccess] :
  /// Sets whether SageMaker provides internet access to the notebook instance.
  /// If you set this to <code>Disabled</code> this notebook instance is able to
  /// access resources only in your VPC, and is not be able to connect to
  /// SageMaker training and endpoint services unless you configure a NAT
  /// Gateway in your VPC.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook
  /// Instances Are Internet-Enabled by Default</a>. You can set the value of
  /// this parameter to <code>Disabled</code> only if you set a value for the
  /// <code>SubnetId</code> parameter.
  ///
  /// Parameter [instanceMetadataServiceConfiguration] :
  /// Information on the IMDS configuration of the notebook instance
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service key that SageMaker uses to encrypt data on the storage volume
  /// attached to your notebook instance. The KMS key you provide must be
  /// enabled. For information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling
  /// and Disabling Keys</a> in the <i>Amazon Web Services Key Management
  /// Service Developer Guide</i>.
  ///
  /// Parameter [lifecycleConfigName] :
  /// The name of a lifecycle configuration to associate with the notebook
  /// instance. For information about lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// Parameter [platformIdentifier] :
  /// The platform identifier of the notebook instance runtime environment.
  ///
  /// Parameter [rootAccess] :
  /// Whether root access is enabled or disabled for users of the notebook
  /// instance. The default value is <code>Enabled</code>.
  /// <note>
  /// Lifecycle configurations need root access to be able to set up a notebook
  /// instance. Because of this, lifecycle configurations associated with a
  /// notebook instance always run with root access even if you disable root
  /// access for users.
  /// </note>
  ///
  /// Parameter [securityGroupIds] :
  /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups
  /// must be for the same VPC as specified in the subnet.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet in a VPC to which you would like to have a
  /// connectivity from your ML compute instance.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [volumeSizeInGB] :
  /// The size, in GB, of the ML storage volume to attach to the notebook
  /// instance. The default value is 5 GB.
  Future<CreateNotebookInstanceOutput> createNotebookInstance({
    required InstanceType instanceType,
    required String notebookInstanceName,
    required String roleArn,
    List<NotebookInstanceAcceleratorType>? acceleratorTypes,
    List<String>? additionalCodeRepositories,
    String? defaultCodeRepository,
    DirectInternetAccess? directInternetAccess,
    InstanceMetadataServiceConfiguration? instanceMetadataServiceConfiguration,
    String? kmsKeyId,
    String? lifecycleConfigName,
    String? platformIdentifier,
    RootAccess? rootAccess,
    List<String>? securityGroupIds,
    String? subnetId,
    List<Tag>? tags,
    int? volumeSizeInGB,
  }) async {
    _s.validateNumRange(
      'volumeSizeInGB',
      volumeSizeInGB,
      5,
      16384,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateNotebookInstance'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InstanceType': instanceType.value,
        'NotebookInstanceName': notebookInstanceName,
        'RoleArn': roleArn,
        if (acceleratorTypes != null)
          'AcceleratorTypes': acceleratorTypes.map((e) => e.value).toList(),
        if (additionalCodeRepositories != null)
          'AdditionalCodeRepositories': additionalCodeRepositories,
        if (defaultCodeRepository != null)
          'DefaultCodeRepository': defaultCodeRepository,
        if (directInternetAccess != null)
          'DirectInternetAccess': directInternetAccess.value,
        if (instanceMetadataServiceConfiguration != null)
          'InstanceMetadataServiceConfiguration':
              instanceMetadataServiceConfiguration,
        if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
        if (lifecycleConfigName != null)
          'LifecycleConfigName': lifecycleConfigName,
        if (platformIdentifier != null)
          'PlatformIdentifier': platformIdentifier,
        if (rootAccess != null) 'RootAccess': rootAccess.value,
        if (securityGroupIds != null) 'SecurityGroupIds': securityGroupIds,
        if (subnetId != null) 'SubnetId': subnetId,
        if (tags != null) 'Tags': tags,
        if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
      },
    );

    return CreateNotebookInstanceOutput.fromJson(jsonResponse.body);
  }

  /// Creates a lifecycle configuration that you can associate with a notebook
  /// instance. A <i>lifecycle configuration</i> is a collection of shell
  /// scripts that run when you create or start a notebook instance.
  ///
  /// Each lifecycle configuration script has a limit of 16384 characters.
  ///
  /// The value of the <code>$PATH</code> environment variable that is available
  /// to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.
  ///
  /// View Amazon CloudWatch Logs for notebook instance lifecycle configurations
  /// in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream
  /// <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.
  ///
  /// Lifecycle configuration scripts cannot run for longer than 5 minutes. If a
  /// script runs for longer than 5 minutes, it fails and the notebook instance
  /// is not created or started.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration.
  ///
  /// Parameter [onCreate] :
  /// A shell script that runs only once, when you create a notebook instance.
  /// The shell script must be a base64-encoded string.
  ///
  /// Parameter [onStart] :
  /// A shell script that runs every time you start a notebook instance,
  /// including when you create the notebook instance. The shell script must be
  /// a base64-encoded string.
  Future<CreateNotebookInstanceLifecycleConfigOutput>
      createNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
    List<NotebookInstanceLifecycleHook>? onCreate,
    List<NotebookInstanceLifecycleHook>? onStart,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateNotebookInstanceLifecycleConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
        if (onCreate != null) 'OnCreate': onCreate,
        if (onStart != null) 'OnStart': onStart,
      },
    );

    return CreateNotebookInstanceLifecycleConfigOutput.fromJson(
        jsonResponse.body);
  }

  /// Creates a pipeline using a JSON pipeline definition.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the role used by the pipeline to access
  /// and create resources.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [parallelismConfiguration] :
  /// This is the configuration that controls the parallelism of the pipeline.
  /// If specified, it applies to all runs of this pipeline by default.
  ///
  /// Parameter [pipelineDefinition] :
  /// The <a
  /// href="https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/">JSON
  /// pipeline definition</a> of the pipeline.
  ///
  /// Parameter [pipelineDefinitionS3Location] :
  /// The location of the pipeline definition stored in Amazon S3. If specified,
  /// SageMaker will retrieve the pipeline definition from this location.
  ///
  /// Parameter [pipelineDescription] :
  /// A description of the pipeline.
  ///
  /// Parameter [pipelineDisplayName] :
  /// The display name of the pipeline.
  ///
  /// Parameter [tags] :
  /// A list of tags to apply to the created pipeline.
  Future<CreatePipelineResponse> createPipeline({
    required String pipelineName,
    required String roleArn,
    String? clientRequestToken,
    ParallelismConfiguration? parallelismConfiguration,
    String? pipelineDefinition,
    PipelineDefinitionS3Location? pipelineDefinitionS3Location,
    String? pipelineDescription,
    String? pipelineDisplayName,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreatePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        'RoleArn': roleArn,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (parallelismConfiguration != null)
          'ParallelismConfiguration': parallelismConfiguration,
        if (pipelineDefinition != null)
          'PipelineDefinition': pipelineDefinition,
        if (pipelineDefinitionS3Location != null)
          'PipelineDefinitionS3Location': pipelineDefinitionS3Location,
        if (pipelineDescription != null)
          'PipelineDescription': pipelineDescription,
        if (pipelineDisplayName != null)
          'PipelineDisplayName': pipelineDisplayName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreatePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Creates a URL for a specified UserProfile in a Domain. When accessed in a
  /// web browser, the user will be automatically signed in to the domain, and
  /// granted access to all of the Apps and files associated with the Domain's
  /// Amazon Elastic File System volume. This operation can only be called when
  /// the authentication mode equals IAM.
  ///
  /// The IAM role or user passed to this API defines the permissions to access
  /// the app. Once the presigned URL is created, no additional permission is
  /// required to access this URL. IAM authorization policies for this API are
  /// also enforced for every HTTP request and WebSocket frame that attempts to
  /// connect to the app.
  ///
  /// You can restrict access to this API and to the URL that it returns to a
  /// list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you
  /// specify. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect
  /// to Amazon SageMaker Studio Through an Interface VPC Endpoint</a> .
  /// <note>
  /// The URL that you get from a call to <code>CreatePresignedDomainUrl</code>
  /// has a default timeout of 5 minutes. You can configure this value using
  /// <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout
  /// limit expires, you are directed to the Amazon Web Services console sign-in
  /// page.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The name of the UserProfile to sign-in as.
  ///
  /// Parameter [expiresInSeconds] :
  /// The number of seconds until the pre-signed URL expires. This value
  /// defaults to 300.
  ///
  /// Parameter [landingUri] :
  /// The landing page that the user is directed to when accessing the presigned
  /// URL. Using this value, users can access Studio or Studio Classic, even if
  /// it is not the default experience for the domain. The supported values are:
  ///
  /// <ul>
  /// <li>
  /// <code>studio::relative/path</code>: Directs users to the relative path in
  /// Studio.
  /// </li>
  /// <li>
  /// <code>app:JupyterServer:relative/path</code>: Directs users to the
  /// relative path in the Studio Classic application.
  /// </li>
  /// <li>
  /// <code>app:JupyterLab:relative/path</code>: Directs users to the relative
  /// path in the JupyterLab application.
  /// </li>
  /// <li>
  /// <code>app:RStudioServerPro:relative/path</code>: Directs users to the
  /// relative path in the RStudio application.
  /// </li>
  /// <li>
  /// <code>app:CodeEditor:relative/path</code>: Directs users to the relative
  /// path in the Code Editor, based on Code-OSS, Visual Studio Code - Open
  /// Source application.
  /// </li>
  /// <li>
  /// <code>app:Canvas:relative/path</code>: Directs users to the relative path
  /// in the Canvas application.
  /// </li>
  /// </ul>
  ///
  /// Parameter [sessionExpirationDurationInSeconds] :
  /// The session expiration duration in seconds. This value defaults to 43200.
  ///
  /// Parameter [spaceName] :
  /// The name of the space.
  Future<CreatePresignedDomainUrlResponse> createPresignedDomainUrl({
    required String domainId,
    required String userProfileName,
    int? expiresInSeconds,
    String? landingUri,
    int? sessionExpirationDurationInSeconds,
    String? spaceName,
  }) async {
    _s.validateNumRange(
      'expiresInSeconds',
      expiresInSeconds,
      5,
      300,
    );
    _s.validateNumRange(
      'sessionExpirationDurationInSeconds',
      sessionExpirationDurationInSeconds,
      1800,
      43200,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreatePresignedDomainUrl'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (expiresInSeconds != null) 'ExpiresInSeconds': expiresInSeconds,
        if (landingUri != null) 'LandingUri': landingUri,
        if (sessionExpirationDurationInSeconds != null)
          'SessionExpirationDurationInSeconds':
              sessionExpirationDurationInSeconds,
        if (spaceName != null) 'SpaceName': spaceName,
      },
    );

    return CreatePresignedDomainUrlResponse.fromJson(jsonResponse.body);
  }

  /// Returns a URL that you can use to connect to the Jupyter server from a
  /// notebook instance. In the SageMaker console, when you choose
  /// <code>Open</code> next to a notebook instance, SageMaker opens a new tab
  /// showing the Jupyter server home page from the notebook instance. The
  /// console uses this API to get the URL and show the page.
  ///
  /// The IAM role or user used to call this API defines the permissions to
  /// access the notebook instance. Once the presigned URL is created, no
  /// additional permission is required to access this URL. IAM authorization
  /// policies for this API are also enforced for every HTTP request and
  /// WebSocket frame that attempts to connect to the notebook instance.
  ///
  /// You can restrict access to this API and to the URL that it returns to a
  /// list of IP addresses that you specify. Use the <code>NotIpAddress</code>
  /// condition operator and the <code>aws:SourceIP</code> condition context key
  /// to specify the list of IP addresses that you want to have access to the
  /// notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit
  /// Access to a Notebook Instance by IP Address</a>.
  /// <note>
  /// The URL that you get from a call to <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html">CreatePresignedNotebookInstanceUrl</a>
  /// is valid only for 5 minutes. If you try to use the URL after the 5-minute
  /// limit expires, you are directed to the Amazon Web Services console sign-in
  /// page.
  /// </note>
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance.
  ///
  /// Parameter [sessionExpirationDurationInSeconds] :
  /// The duration of the session, in seconds. The default is 12 hours.
  Future<CreatePresignedNotebookInstanceUrlOutput>
      createPresignedNotebookInstanceUrl({
    required String notebookInstanceName,
    int? sessionExpirationDurationInSeconds,
  }) async {
    _s.validateNumRange(
      'sessionExpirationDurationInSeconds',
      sessionExpirationDurationInSeconds,
      1800,
      43200,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreatePresignedNotebookInstanceUrl'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
        if (sessionExpirationDurationInSeconds != null)
          'SessionExpirationDurationInSeconds':
              sessionExpirationDurationInSeconds,
      },
    );

    return CreatePresignedNotebookInstanceUrlOutput.fromJson(jsonResponse.body);
  }

  /// Creates a processing job.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appSpecification] :
  /// Configures the processing job to run a specified Docker container image.
  ///
  /// Parameter [processingJobName] :
  /// The name of the processing job. The name must be unique within an Amazon
  /// Web Services Region in the Amazon Web Services account.
  ///
  /// Parameter [processingResources] :
  /// Identifies the resources, ML compute instances, and ML storage volumes to
  /// deploy for a processing job. In distributed training, you specify more
  /// than one instance.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  ///
  /// Parameter [environment] :
  /// The environment variables to set in the Docker container. Up to 100 key
  /// and values entries in the map are supported.
  ///
  /// Parameter [networkConfig] :
  /// Networking options for a processing job, such as whether to allow inbound
  /// and outbound network calls to and from processing containers, and the VPC
  /// subnets and security groups to use for VPC-enabled processing jobs.
  ///
  /// Parameter [processingInputs] :
  /// An array of inputs configuring the data to download into the processing
  /// container.
  ///
  /// Parameter [processingOutputConfig] :
  /// Output configuration for the processing job.
  ///
  /// Parameter [stoppingCondition] :
  /// The time limit for how long the processing job is allowed to run.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateProcessingJobResponse> createProcessingJob({
    required AppSpecification appSpecification,
    required String processingJobName,
    required ProcessingResources processingResources,
    required String roleArn,
    Map<String, String>? environment,
    ExperimentConfig? experimentConfig,
    NetworkConfig? networkConfig,
    List<ProcessingInput>? processingInputs,
    ProcessingOutputConfig? processingOutputConfig,
    ProcessingStoppingCondition? stoppingCondition,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateProcessingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppSpecification': appSpecification,
        'ProcessingJobName': processingJobName,
        'ProcessingResources': processingResources,
        'RoleArn': roleArn,
        if (environment != null) 'Environment': environment,
        if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
        if (networkConfig != null) 'NetworkConfig': networkConfig,
        if (processingInputs != null) 'ProcessingInputs': processingInputs,
        if (processingOutputConfig != null)
          'ProcessingOutputConfig': processingOutputConfig,
        if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateProcessingJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates a machine learning (ML) project that can contain one or more
  /// templates that set up an ML pipeline from training to deploying an
  /// approved model.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [projectName] :
  /// The name of the project.
  ///
  /// Parameter [serviceCatalogProvisioningDetails] :
  /// The product ID and provisioning artifact ID to provision a service
  /// catalog. The provisioning artifact ID will default to the latest
  /// provisioning artifact ID of the product, if you don't provide the
  /// provisioning artifact ID. For more information, see <a
  /// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
  /// is Amazon Web Services Service Catalog</a>.
  ///
  /// Parameter [projectDescription] :
  /// A description for the project.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that you want to use to organize and track
  /// your Amazon Web Services resource costs. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  Future<CreateProjectOutput> createProject({
    required String projectName,
    required ServiceCatalogProvisioningDetails
        serviceCatalogProvisioningDetails,
    String? projectDescription,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateProject'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
        'ServiceCatalogProvisioningDetails': serviceCatalogProvisioningDetails,
        if (projectDescription != null)
          'ProjectDescription': projectDescription,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateProjectOutput.fromJson(jsonResponse.body);
  }

  /// Creates a private space or a space used for real time collaboration in a
  /// domain.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [domainId] :
  /// The ID of the associated domain.
  ///
  /// Parameter [spaceName] :
  /// The name of the space.
  ///
  /// Parameter [ownershipSettings] :
  /// A collection of ownership settings.
  ///
  /// Parameter [spaceDisplayName] :
  /// The name of the space that appears in the SageMaker Studio UI.
  ///
  /// Parameter [spaceSettings] :
  /// A collection of space settings.
  ///
  /// Parameter [spaceSharingSettings] :
  /// A collection of space sharing settings.
  ///
  /// Parameter [tags] :
  /// Tags to associated with the space. Each tag consists of a key and an
  /// optional value. Tag keys must be unique for each resource. Tags are
  /// searchable using the <code>Search</code> API.
  Future<CreateSpaceResponse> createSpace({
    required String domainId,
    required String spaceName,
    OwnershipSettings? ownershipSettings,
    String? spaceDisplayName,
    SpaceSettings? spaceSettings,
    SpaceSharingSettings? spaceSharingSettings,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateSpace'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'SpaceName': spaceName,
        if (ownershipSettings != null) 'OwnershipSettings': ownershipSettings,
        if (spaceDisplayName != null) 'SpaceDisplayName': spaceDisplayName,
        if (spaceSettings != null) 'SpaceSettings': spaceSettings,
        if (spaceSharingSettings != null)
          'SpaceSharingSettings': spaceSharingSettings,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateSpaceResponse.fromJson(jsonResponse.body);
  }

  /// Creates a new Amazon SageMaker Studio Lifecycle Configuration.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [studioLifecycleConfigAppType] :
  /// The App type that the Lifecycle Configuration is attached to.
  ///
  /// Parameter [studioLifecycleConfigContent] :
  /// The content of your Amazon SageMaker Studio Lifecycle Configuration
  /// script. This content must be base64 encoded.
  ///
  /// Parameter [studioLifecycleConfigName] :
  /// The name of the Amazon SageMaker Studio Lifecycle Configuration to create.
  ///
  /// Parameter [tags] :
  /// Tags to be associated with the Lifecycle Configuration. Each tag consists
  /// of a key and an optional value. Tag keys must be unique per resource. Tags
  /// are searchable using the Search API.
  Future<CreateStudioLifecycleConfigResponse> createStudioLifecycleConfig({
    required StudioLifecycleConfigAppType studioLifecycleConfigAppType,
    required String studioLifecycleConfigContent,
    required String studioLifecycleConfigName,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateStudioLifecycleConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'StudioLifecycleConfigAppType': studioLifecycleConfigAppType.value,
        'StudioLifecycleConfigContent': studioLifecycleConfigContent,
        'StudioLifecycleConfigName': studioLifecycleConfigName,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateStudioLifecycleConfigResponse.fromJson(jsonResponse.body);
  }

  /// Starts a model training job. After training completes, SageMaker saves the
  /// resulting model artifacts to an Amazon S3 location that you specify.
  ///
  /// If you choose to host your model using SageMaker hosting services, you can
  /// use the resulting model artifacts as part of the model. You can also use
  /// the artifacts in a machine learning service other than SageMaker, provided
  /// that you know how to use them for inference.
  ///
  /// In the request body, you provide the following:
  ///
  /// <ul>
  /// <li>
  /// <code>AlgorithmSpecification</code> - Identifies the training algorithm to
  /// use.
  /// </li>
  /// <li>
  /// <code>HyperParameters</code> - Specify these algorithm-specific parameters
  /// to enable the estimation of model parameters during training.
  /// Hyperparameters can be tuned to optimize this learning process. For a list
  /// of hyperparameters for each training algorithm provided by SageMaker, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  /// <important>
  /// Do not include any security-sensitive information including account access
  /// IDs, secrets or tokens in any hyperparameter field. If the use of
  /// security-sensitive credentials are detected, SageMaker will reject your
  /// training job request and return an exception error.
  /// </important> </li>
  /// <li>
  /// <code>InputDataConfig</code> - Describes the input required by the
  /// training job and the Amazon S3, EFS, or FSx location where it is stored.
  /// </li>
  /// <li>
  /// <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you
  /// want SageMaker to save the results of model training.
  /// </li>
  /// <li>
  /// <code>ResourceConfig</code> - Identifies the resources, ML compute
  /// instances, and ML storage volumes to deploy for model training. In
  /// distributed training, you specify more than one instance.
  /// </li>
  /// <li>
  /// <code>EnableManagedSpotTraining</code> - Optimize the cost of training
  /// machine learning models by up to 80% by using Amazon EC2 Spot instances.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed
  /// Spot Training</a>.
  /// </li>
  /// <li>
  /// <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker
  /// assumes to perform tasks on your behalf during model training. You must
  /// grant this role the necessary permissions so that SageMaker can
  /// successfully complete model training.
  /// </li>
  /// <li>
  /// <code>StoppingCondition</code> - To help cap training costs, use
  /// <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use
  /// <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot
  /// training job has to complete.
  /// </li>
  /// <li>
  /// <code>Environment</code> - The environment variables to set in the Docker
  /// container.
  /// </li>
  /// <li>
  /// <code>RetryStrategy</code> - The number of times to retry the job when the
  /// job fails due to an <code>InternalServerError</code>.
  /// </li>
  /// </ul>
  /// For more information about SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How
  /// It Works</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [algorithmSpecification] :
  /// The registry path of the Docker image that contains the training algorithm
  /// and algorithm-specific metadata, including the input mode. For more
  /// information about algorithms provided by SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  /// For information about providing your own algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  ///
  /// Parameter [outputDataConfig] :
  /// Specifies the path to the S3 location where you want to store model
  /// artifacts. SageMaker creates subfolders for the artifacts.
  ///
  /// Parameter [resourceConfig] :
  /// The resources, including the ML compute instances and ML storage volumes,
  /// to use for model training.
  ///
  /// ML storage volumes store model artifacts and incremental states. Training
  /// algorithms might also use ML storage volumes for scratch space. If you
  /// want SageMaker to use the ML storage volume to store the training data,
  /// choose <code>File</code> as the <code>TrainingInputMode</code> in the
  /// algorithm specification. For distributed training algorithms, specify an
  /// instance count greater than 1.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to
  /// perform tasks on your behalf.
  ///
  /// During model training, SageMaker needs your permission to read input data
  /// from an S3 bucket, download a Docker image that contains training code,
  /// write model artifacts to an S3 bucket, write logs to Amazon CloudWatch
  /// Logs, and publish metrics to Amazon CloudWatch. You grant permissions for
  /// all of these tasks to an IAM role. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
  /// Roles</a>.
  /// <note>
  /// To be able to pass this role to SageMaker, the caller of this API must
  /// have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [stoppingCondition] :
  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the
  /// job reaches the time limit, SageMaker ends the training job. Use this API
  /// to cap model training costs.
  ///
  /// To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code>
  /// signal, which delays job termination for 120 seconds. Algorithms can use
  /// this 120-second window to save the model artifacts, so the results of
  /// training are not lost.
  ///
  /// Parameter [trainingJobName] :
  /// The name of the training job. The name must be unique within an Amazon Web
  /// Services Region in an Amazon Web Services account.
  ///
  /// Parameter [checkpointConfig] :
  /// Contains information about the output location for managed spot training
  /// checkpoint data.
  ///
  /// Parameter [debugRuleConfigurations] :
  /// Configuration information for Amazon SageMaker Debugger rules for
  /// debugging output tensors.
  ///
  /// Parameter [enableInterContainerTrafficEncryption] :
  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security
  /// for distributed training, but training might take longer. How long it
  /// takes depends on the amount of communication between compute instances,
  /// especially if you use a deep learning algorithm in distributed training.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html">Protect
  /// Communications Between ML Compute Instances in a Distributed Training
  /// Job</a>.
  ///
  /// Parameter [enableManagedSpotTraining] :
  /// To train models using managed spot training, choose <code>True</code>.
  /// Managed spot training provides a fully managed and scalable infrastructure
  /// for training machine learning models. this option is useful when training
  /// jobs can be interrupted and when there is flexibility when the training
  /// job is run.
  ///
  /// The complete and intermediate results of jobs are stored in an Amazon S3
  /// bucket, and can be used as a starting point to train models incrementally.
  /// Amazon SageMaker provides metrics and logs in CloudWatch. They can be used
  /// to see when managed spot training jobs are running, interrupted, resumed,
  /// or completed.
  ///
  /// Parameter [enableNetworkIsolation] :
  /// Isolates the training container. No inbound or outbound network calls can
  /// be made, except for calls between peers within a training cluster for
  /// distributed training. If you enable network isolation for training jobs
  /// that are configured to use a VPC, SageMaker downloads and uploads customer
  /// data and model artifacts through the specified VPC, but the training
  /// container does not have network access.
  ///
  /// Parameter [environment] :
  /// The environment variables to set in the Docker container.
  ///
  /// Parameter [hyperParameters] :
  /// Algorithm-specific parameters that influence the quality of the model. You
  /// set hyperparameters before you start the learning process. For a list of
  /// hyperparameters for each training algorithm provided by SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
  ///
  /// You can specify a maximum of 100 hyperparameters. Each hyperparameter is a
  /// key-value pair. Each key and value is limited to 256 characters, as
  /// specified by the <code>Length Constraint</code>.
  /// <important>
  /// Do not include any security-sensitive information including account access
  /// IDs, secrets or tokens in any hyperparameter field. If the use of
  /// security-sensitive credentials are detected, SageMaker will reject your
  /// training job request and return an exception error.
  /// </important>
  ///
  /// Parameter [infraCheckConfig] :
  /// Contains information about the infrastructure health check configuration
  /// for the training job.
  ///
  /// Parameter [inputDataConfig] :
  /// An array of <code>Channel</code> objects. Each channel is a named input
  /// source. <code>InputDataConfig</code> describes the input data and its
  /// location.
  ///
  /// Algorithms can accept input data from one or more channels. For example,
  /// an algorithm might have two channels of input data,
  /// <code>training_data</code> and <code>validation_data</code>. The
  /// configuration for each channel provides the S3, EFS, or FSx location where
  /// the input data is stored. It also provides information about the stored
  /// data: the MIME type, compression method, and whether the data is wrapped
  /// in RecordIO format.
  ///
  /// Depending on the input mode that the algorithm supports, SageMaker either
  /// copies input data files from an S3 bucket to a local directory in the
  /// Docker container, or makes it available as input streams. For example, if
  /// you specify an EFS location, input data files are available as input
  /// streams. They do not need to be downloaded.
  ///
  /// Your input must be in the same Amazon Web Services region as your training
  /// job.
  ///
  /// Parameter [profilerRuleConfigurations] :
  /// Configuration information for Amazon SageMaker Debugger rules for
  /// profiling system and framework metrics.
  ///
  /// Parameter [remoteDebugConfig] :
  /// Configuration for remote debugging. To learn more about the remote
  /// debugging functionality of SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html">Access
  /// a training container through Amazon Web Services Systems Manager (SSM) for
  /// remote debugging</a>.
  ///
  /// Parameter [retryStrategy] :
  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  ///
  /// Parameter [sessionChainingConfig] :
  /// Contains information about attribute-based access control (ABAC) for the
  /// training job.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  ///
  /// Parameter [vpcConfig] :
  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that you want your training job to connect
  /// to. Control access to and from your training container by configuring the
  /// VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  Future<CreateTrainingJobResponse> createTrainingJob({
    required AlgorithmSpecification algorithmSpecification,
    required OutputDataConfig outputDataConfig,
    required ResourceConfig resourceConfig,
    required String roleArn,
    required StoppingCondition stoppingCondition,
    required String trainingJobName,
    CheckpointConfig? checkpointConfig,
    DebugHookConfig? debugHookConfig,
    List<DebugRuleConfiguration>? debugRuleConfigurations,
    bool? enableInterContainerTrafficEncryption,
    bool? enableManagedSpotTraining,
    bool? enableNetworkIsolation,
    Map<String, String>? environment,
    ExperimentConfig? experimentConfig,
    Map<String, String>? hyperParameters,
    InfraCheckConfig? infraCheckConfig,
    List<Channel>? inputDataConfig,
    ProfilerConfig? profilerConfig,
    List<ProfilerRuleConfiguration>? profilerRuleConfigurations,
    RemoteDebugConfig? remoteDebugConfig,
    RetryStrategy? retryStrategy,
    SessionChainingConfig? sessionChainingConfig,
    List<Tag>? tags,
    TensorBoardOutputConfig? tensorBoardOutputConfig,
    VpcConfig? vpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTrainingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmSpecification': algorithmSpecification,
        'OutputDataConfig': outputDataConfig,
        'ResourceConfig': resourceConfig,
        'RoleArn': roleArn,
        'StoppingCondition': stoppingCondition,
        'TrainingJobName': trainingJobName,
        if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
        if (debugHookConfig != null) 'DebugHookConfig': debugHookConfig,
        if (debugRuleConfigurations != null)
          'DebugRuleConfigurations': debugRuleConfigurations,
        if (enableInterContainerTrafficEncryption != null)
          'EnableInterContainerTrafficEncryption':
              enableInterContainerTrafficEncryption,
        if (enableManagedSpotTraining != null)
          'EnableManagedSpotTraining': enableManagedSpotTraining,
        if (enableNetworkIsolation != null)
          'EnableNetworkIsolation': enableNetworkIsolation,
        if (environment != null) 'Environment': environment,
        if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
        if (hyperParameters != null) 'HyperParameters': hyperParameters,
        if (infraCheckConfig != null) 'InfraCheckConfig': infraCheckConfig,
        if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
        if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
        if (profilerRuleConfigurations != null)
          'ProfilerRuleConfigurations': profilerRuleConfigurations,
        if (remoteDebugConfig != null) 'RemoteDebugConfig': remoteDebugConfig,
        if (retryStrategy != null) 'RetryStrategy': retryStrategy,
        if (sessionChainingConfig != null)
          'SessionChainingConfig': sessionChainingConfig,
        if (tags != null) 'Tags': tags,
        if (tensorBoardOutputConfig != null)
          'TensorBoardOutputConfig': tensorBoardOutputConfig,
        if (vpcConfig != null) 'VpcConfig': vpcConfig,
      },
    );

    return CreateTrainingJobResponse.fromJson(jsonResponse.body);
  }

  /// Starts a transform job. A transform job uses a trained model to get
  /// inferences on a dataset and saves these results to an Amazon S3 location
  /// that you specify.
  ///
  /// To perform batch transformations, you create a transform job and use the
  /// data that you have readily available.
  ///
  /// In the request body, you provide the following:
  ///
  /// <ul>
  /// <li>
  /// <code>TransformJobName</code> - Identifies the transform job. The name
  /// must be unique within an Amazon Web Services Region in an Amazon Web
  /// Services account.
  /// </li>
  /// <li>
  /// <code>ModelName</code> - Identifies the model to use.
  /// <code>ModelName</code> must be the name of an existing Amazon SageMaker
  /// model in the same Amazon Web Services Region and Amazon Web Services
  /// account. For information on creating a model, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.
  /// </li>
  /// <li>
  /// <code>TransformInput</code> - Describes the dataset to be transformed and
  /// the Amazon S3 location where it is stored.
  /// </li>
  /// <li>
  /// <code>TransformOutput</code> - Identifies the Amazon S3 location where you
  /// want Amazon SageMaker to save the results from the transform job.
  /// </li>
  /// <li>
  /// <code>TransformResources</code> - Identifies the ML compute instances for
  /// the transform job.
  /// </li>
  /// </ul>
  /// For more information about how batch transformation works, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch
  /// Transform</a>.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [modelName] :
  /// The name of the model that you want to use for the transform job.
  /// <code>ModelName</code> must be the name of an existing Amazon SageMaker
  /// model within an Amazon Web Services Region in an Amazon Web Services
  /// account.
  ///
  /// Parameter [transformInput] :
  /// Describes the input source and the way the transform job consumes it.
  ///
  /// Parameter [transformJobName] :
  /// The name of the transform job. The name must be unique within an Amazon
  /// Web Services Region in an Amazon Web Services account.
  ///
  /// Parameter [transformOutput] :
  /// Describes the results of the transform job.
  ///
  /// Parameter [transformResources] :
  /// Describes the resources, including ML instance types and ML instance
  /// count, to use for the transform job.
  ///
  /// Parameter [batchStrategy] :
  /// Specifies the number of records to include in a mini-batch for an HTTP
  /// inference request. A <i>record</i> <i/> is a single unit of input data
  /// that inference can be made on. For example, a single line in a CSV file is
  /// a record.
  ///
  /// To enable the batch strategy, you must set the <code>SplitType</code>
  /// property to <code>Line</code>, <code>RecordIO</code>, or
  /// <code>TFRecord</code>.
  ///
  /// To use only one record when making an HTTP invocation request to a
  /// container, set <code>BatchStrategy</code> to <code>SingleRecord</code> and
  /// <code>SplitType</code> to <code>Line</code>.
  ///
  /// To fit as many records in a mini-batch as can fit within the
  /// <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to
  /// <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.
  ///
  /// Parameter [dataCaptureConfig] :
  /// Configuration to control how SageMaker captures inference data.
  ///
  /// Parameter [dataProcessing] :
  /// The data structure used to specify the data to be used for inference in a
  /// batch transform job and to associate the data that is relevant to the
  /// prediction results in the output. The input filter provided allows you to
  /// exclude input data that is not needed for inference in a batch transform
  /// job. The output filter provided allows you to include input data relevant
  /// to interpreting the predictions in the output from the job. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate
  /// Prediction Results with their Corresponding Input Records</a>.
  ///
  /// Parameter [environment] :
  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  ///
  /// Parameter [maxConcurrentTransforms] :
  /// The maximum number of parallel requests that can be sent to each instance
  /// in a transform job. If <code>MaxConcurrentTransforms</code> is set to
  /// <code>0</code> or left unset, Amazon SageMaker checks the optional
  /// execution-parameters to determine the settings for your chosen algorithm.
  /// If the execution-parameters endpoint is not enabled, the default value is
  /// <code>1</code>. For more information on execution-parameters, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How
  /// Containers Serve Requests</a>. For built-in algorithms, you don't need to
  /// set a value for <code>MaxConcurrentTransforms</code>.
  ///
  /// Parameter [maxPayloadInMB] :
  /// The maximum allowed size of the payload, in MB. A <i>payload</i> is the
  /// data portion of a record (without metadata). The value in
  /// <code>MaxPayloadInMB</code> must be greater than, or equal to, the size of
  /// a single record. To estimate the size of a record in MB, divide the size
  /// of your dataset by the number of records. To ensure that the records fit
  /// within the maximum payload size, we recommend using a slightly larger
  /// value. The default value is <code>6</code> MB.
  ///
  /// The value of <code>MaxPayloadInMB</code> cannot be greater than 100 MB. If
  /// you specify the <code>MaxConcurrentTransforms</code> parameter, the value
  /// of <code>(MaxConcurrentTransforms * MaxPayloadInMB)</code> also cannot
  /// exceed 100 MB.
  ///
  /// For cases where the payload might be arbitrarily large and is transmitted
  /// using HTTP chunked encoding, set the value to <code>0</code>. This feature
  /// works only in supported algorithms. Currently, Amazon SageMaker built-in
  /// algorithms do not support HTTP chunked encoding.
  ///
  /// Parameter [modelClientConfig] :
  /// Configures the timeout and maximum number of retries for processing a
  /// transform job invocation.
  ///
  /// Parameter [tags] :
  /// (Optional) An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  Future<CreateTransformJobResponse> createTransformJob({
    required String modelName,
    required TransformInput transformInput,
    required String transformJobName,
    required TransformOutput transformOutput,
    required TransformResources transformResources,
    BatchStrategy? batchStrategy,
    BatchDataCaptureConfig? dataCaptureConfig,
    DataProcessing? dataProcessing,
    Map<String, String>? environment,
    ExperimentConfig? experimentConfig,
    int? maxConcurrentTransforms,
    int? maxPayloadInMB,
    ModelClientConfig? modelClientConfig,
    List<Tag>? tags,
  }) async {
    _s.validateNumRange(
      'maxConcurrentTransforms',
      maxConcurrentTransforms,
      0,
      1152921504606846976,
    );
    _s.validateNumRange(
      'maxPayloadInMB',
      maxPayloadInMB,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTransformJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
        'TransformInput': transformInput,
        'TransformJobName': transformJobName,
        'TransformOutput': transformOutput,
        'TransformResources': transformResources,
        if (batchStrategy != null) 'BatchStrategy': batchStrategy.value,
        if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
        if (dataProcessing != null) 'DataProcessing': dataProcessing,
        if (environment != null) 'Environment': environment,
        if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
        if (maxConcurrentTransforms != null)
          'MaxConcurrentTransforms': maxConcurrentTransforms,
        if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
        if (modelClientConfig != null) 'ModelClientConfig': modelClientConfig,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateTransformJobResponse.fromJson(jsonResponse.body);
  }

  /// Creates an SageMaker <i>trial</i>. A trial is a set of steps called
  /// <i>trial components</i> that produce a machine learning model. A trial is
  /// part of a single SageMaker <i>experiment</i>.
  ///
  /// When you use SageMaker Studio or the SageMaker Python SDK, all
  /// experiments, trials, and trial components are automatically tracked,
  /// logged, and indexed. When you use the Amazon Web Services SDK for Python
  /// (Boto), you must use the logging APIs provided by the SDK.
  ///
  /// You can add tags to a trial and then use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search for the tags.
  ///
  /// To get a list of all your trials, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a>
  /// API. To view a trial's properties, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a>
  /// API. To create a trial component, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a>
  /// API.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to associate the trial with.
  ///
  /// Parameter [trialName] :
  /// The name of the trial. The name must be unique in your Amazon Web Services
  /// account and is not case-sensitive.
  ///
  /// Parameter [displayName] :
  /// The name of the trial as displayed. The name doesn't need to be unique. If
  /// <code>DisplayName</code> isn't specified, <code>TrialName</code> is
  /// displayed.
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with the trial. You can use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search on the tags.
  Future<CreateTrialResponse> createTrial({
    required String experimentName,
    required String trialName,
    String? displayName,
    MetadataProperties? metadataProperties,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
        'TrialName': trialName,
        if (displayName != null) 'DisplayName': displayName,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateTrialResponse.fromJson(jsonResponse.body);
  }

  /// Creates a <i>trial component</i>, which is a stage of a machine learning
  /// <i>trial</i>. A trial is composed of one or more trial components. A trial
  /// component can be used in multiple trials.
  ///
  /// Trial components include pre-processing jobs, training jobs, and batch
  /// transform jobs.
  ///
  /// When you use SageMaker Studio or the SageMaker Python SDK, all
  /// experiments, trials, and trial components are automatically tracked,
  /// logged, and indexed. When you use the Amazon Web Services SDK for Python
  /// (Boto), you must use the logging APIs provided by the SDK.
  ///
  /// You can add tags to a trial component and then use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search for the tags.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component. The name must be unique in your Amazon Web
  /// Services account and is not case-sensitive.
  ///
  /// Parameter [displayName] :
  /// The name of the component as displayed. The name doesn't need to be
  /// unique. If <code>DisplayName</code> isn't specified,
  /// <code>TrialComponentName</code> is displayed.
  ///
  /// Parameter [endTime] :
  /// When the component ended.
  ///
  /// Parameter [inputArtifacts] :
  /// The input artifacts for the component. Examples of input artifacts are
  /// datasets, algorithms, hyperparameters, source code, and instance types.
  ///
  /// Parameter [outputArtifacts] :
  /// The output artifacts for the component. Examples of output artifacts are
  /// metrics, snapshots, logs, and images.
  ///
  /// Parameter [parameters] :
  /// The hyperparameters for the component.
  ///
  /// Parameter [startTime] :
  /// When the component started.
  ///
  /// Parameter [status] :
  /// The status of the component. States include:
  ///
  /// <ul>
  /// <li>
  /// InProgress
  /// </li>
  /// <li>
  /// Completed
  /// </li>
  /// <li>
  /// Failed
  /// </li>
  /// </ul>
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with the component. You can use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search on the tags.
  Future<CreateTrialComponentResponse> createTrialComponent({
    required String trialComponentName,
    String? displayName,
    DateTime? endTime,
    Map<String, TrialComponentArtifact>? inputArtifacts,
    MetadataProperties? metadataProperties,
    Map<String, TrialComponentArtifact>? outputArtifacts,
    Map<String, TrialComponentParameterValue>? parameters,
    DateTime? startTime,
    TrialComponentStatus? status,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        if (displayName != null) 'DisplayName': displayName,
        if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
        if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
        if (metadataProperties != null)
          'MetadataProperties': metadataProperties,
        if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
        if (parameters != null) 'Parameters': parameters,
        if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
        if (status != null) 'Status': status,
        if (tags != null) 'Tags': tags,
      },
    );

    return CreateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Creates a user profile. A user profile represents a single user within a
  /// domain, and is the main way to reference a "person" for the purposes of
  /// sharing, reporting, and other user-oriented features. This entity is
  /// created when a user onboards to a domain. If an administrator invites a
  /// person by email or imports them from IAM Identity Center, a user profile
  /// is automatically created. A user profile is the primary holder of settings
  /// for an individual user and has a reference to the user's private Amazon
  /// Elastic File System home directory.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [domainId] :
  /// The ID of the associated Domain.
  ///
  /// Parameter [userProfileName] :
  /// A name for the UserProfile. This value is not case sensitive.
  ///
  /// Parameter [singleSignOnUserIdentifier] :
  /// A specifier for the type of value specified in SingleSignOnUserValue.
  /// Currently, the only supported value is "UserName". If the Domain's
  /// AuthMode is IAM Identity Center, this field is required. If the Domain's
  /// AuthMode is not IAM Identity Center, this field cannot be specified.
  ///
  /// Parameter [singleSignOnUserValue] :
  /// The username of the associated Amazon Web Services Single Sign-On User for
  /// this UserProfile. If the Domain's AuthMode is IAM Identity Center, this
  /// field is required, and must match a valid username of a user in your
  /// directory. If the Domain's AuthMode is not IAM Identity Center, this field
  /// cannot be specified.
  ///
  /// Parameter [tags] :
  /// Each tag consists of a key and an optional value. Tag keys must be unique
  /// per resource.
  ///
  /// Tags that you specify for the User Profile are also added to all Apps that
  /// the User Profile launches.
  ///
  /// Parameter [userSettings] :
  /// A collection of settings.
  Future<CreateUserProfileResponse> createUserProfile({
    required String domainId,
    required String userProfileName,
    String? singleSignOnUserIdentifier,
    String? singleSignOnUserValue,
    List<Tag>? tags,
    UserSettings? userSettings,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateUserProfile'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (singleSignOnUserIdentifier != null)
          'SingleSignOnUserIdentifier': singleSignOnUserIdentifier,
        if (singleSignOnUserValue != null)
          'SingleSignOnUserValue': singleSignOnUserValue,
        if (tags != null) 'Tags': tags,
        if (userSettings != null) 'UserSettings': userSettings,
      },
    );

    return CreateUserProfileResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to create a workforce. This operation will return an
  /// error if a workforce already exists in the Amazon Web Services Region that
  /// you specify. You can only create one workforce in each Amazon Web Services
  /// Region per Amazon Web Services account.
  ///
  /// If you want to create a new workforce in an Amazon Web Services Region
  /// where a workforce already exists, use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html">DeleteWorkforce</a>
  /// API operation to delete the existing workforce and then use
  /// <code>CreateWorkforce</code> to create a new workforce.
  ///
  /// To create a private workforce using Amazon Cognito, you must specify a
  /// Cognito user pool in <code>CognitoConfig</code>. You can also create an
  /// Amazon Cognito workforce using the Amazon SageMaker console. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
  /// Create a Private Workforce (Amazon Cognito)</a>.
  ///
  /// To create a private workforce using your own OIDC Identity Provider (IdP),
  /// specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP
  /// must support <i>groups</i> because groups are used by Ground Truth and
  /// Amazon A2I to create work teams. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
  /// Create a Private Workforce (OIDC IdP)</a>.
  ///
  /// Parameter [workforceName] :
  /// The name of the private workforce.
  ///
  /// Parameter [cognitoConfig] :
  /// Use this parameter to configure an Amazon Cognito private workforce. A
  /// single Cognito workforce is created using and corresponds to a single <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
  /// Amazon Cognito user pool</a>.
  ///
  /// Do not use <code>OidcConfig</code> if you specify values for
  /// <code>CognitoConfig</code>.
  ///
  /// Parameter [oidcConfig] :
  /// Use this parameter to configure a private workforce using your own OIDC
  /// Identity Provider.
  ///
  /// Do not use <code>CognitoConfig</code> if you specify values for
  /// <code>OidcConfig</code>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs that contain metadata to help you categorize
  /// and organize our workforce. Each tag consists of a key and a value, both
  /// of which you define.
  ///
  /// Parameter [workforceVpcConfig] :
  /// Use this parameter to configure a workforce using VPC.
  Future<CreateWorkforceResponse> createWorkforce({
    required String workforceName,
    CognitoConfig? cognitoConfig,
    OidcConfig? oidcConfig,
    SourceIpConfig? sourceIpConfig,
    List<Tag>? tags,
    WorkforceVpcConfigRequest? workforceVpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateWorkforce'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
        if (cognitoConfig != null) 'CognitoConfig': cognitoConfig,
        if (oidcConfig != null) 'OidcConfig': oidcConfig,
        if (sourceIpConfig != null) 'SourceIpConfig': sourceIpConfig,
        if (tags != null) 'Tags': tags,
        if (workforceVpcConfig != null)
          'WorkforceVpcConfig': workforceVpcConfig,
      },
    );

    return CreateWorkforceResponse.fromJson(jsonResponse.body);
  }

  /// Creates a new work team for labeling your data. A work team is defined by
  /// one or more Amazon Cognito user pools. You must first create the user
  /// pools before you can create a work team.
  ///
  /// You cannot create more than 25 work teams in an account and region.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [description] :
  /// A description of the work team.
  ///
  /// Parameter [memberDefinitions] :
  /// A list of <code>MemberDefinition</code> objects that contains objects that
  /// identify the workers that make up the work team.
  ///
  /// Workforces can be created using Amazon Cognito or your own OIDC Identity
  /// Provider (IdP). For private workforces created using Amazon Cognito use
  /// <code>CognitoMemberDefinition</code>. For workforces created using your
  /// own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>. Do
  /// not provide input for both of these parameters in a single request.
  ///
  /// For workforces created using Amazon Cognito, private work teams correspond
  /// to Amazon Cognito <i>user groups</i> within the user pool used to create a
  /// workforce. All of the <code>CognitoMemberDefinition</code> objects that
  /// make up the member definition must have the same <code>ClientId</code> and
  /// <code>UserPool</code> values. To add a Amazon Cognito user group to an
  /// existing worker pool, see <a href="">Adding groups to a User Pool</a>. For
  /// more information about user pools, see <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon
  /// Cognito User Pools</a>.
  ///
  /// For workforces created using your own OIDC IdP, specify the user groups
  /// that you want to include in your private work team in
  /// <code>OidcMemberDefinition</code> by listing those groups in
  /// <code>Groups</code>.
  ///
  /// Parameter [workteamName] :
  /// The name of the work team. Use this name to identify the work team.
  ///
  /// Parameter [notificationConfiguration] :
  /// Configures notification of workers regarding available or expiring work
  /// items.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html">Resource
  /// Tag</a> and <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
  /// Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  ///
  /// Parameter [workerAccessConfiguration] :
  /// Use this optional parameter to constrain access to an Amazon S3 resource
  /// based on the IP address using supported IAM global condition keys. The
  /// Amazon S3 resource is accessed in the worker portal using a Amazon S3
  /// presigned URL.
  ///
  /// Parameter [workforceName] :
  /// The name of the workforce.
  Future<CreateWorkteamResponse> createWorkteam({
    required String description,
    required List<MemberDefinition> memberDefinitions,
    required String workteamName,
    NotificationConfiguration? notificationConfiguration,
    List<Tag>? tags,
    WorkerAccessConfiguration? workerAccessConfiguration,
    String? workforceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.CreateWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Description': description,
        'MemberDefinitions': memberDefinitions,
        'WorkteamName': workteamName,
        if (notificationConfiguration != null)
          'NotificationConfiguration': notificationConfiguration,
        if (tags != null) 'Tags': tags,
        if (workerAccessConfiguration != null)
          'WorkerAccessConfiguration': workerAccessConfiguration,
        if (workforceName != null) 'WorkforceName': workforceName,
      },
    );

    return CreateWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Deletes an action.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionName] :
  /// The name of the action to delete.
  Future<DeleteActionResponse> deleteAction({
    required String actionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
      },
    );

    return DeleteActionResponse.fromJson(jsonResponse.body);
  }

  /// Removes the specified algorithm from your account.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [algorithmName] :
  /// The name of the algorithm to delete.
  Future<void> deleteAlgorithm({
    required String algorithmName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAlgorithm'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmName': algorithmName,
      },
    );
  }

  /// Used to stop and delete an app.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appName] :
  /// The name of the app.
  ///
  /// Parameter [appType] :
  /// The type of app.
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [spaceName] :
  /// The name of the space. If this value is not set, then
  /// <code>UserProfileName</code> must be set.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name. If this value is not set, then
  /// <code>SpaceName</code> must be set.
  Future<void> deleteApp({
    required String appName,
    required AppType appType,
    required String domainId,
    String? spaceName,
    String? userProfileName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteApp'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppName': appName,
        'AppType': appType.value,
        'DomainId': domainId,
        if (spaceName != null) 'SpaceName': spaceName,
        if (userProfileName != null) 'UserProfileName': userProfileName,
      },
    );
  }

  /// Deletes an AppImageConfig.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig to delete.
  Future<void> deleteAppImageConfig({
    required String appImageConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAppImageConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
      },
    );
  }

  /// Deletes an artifact. Either <code>ArtifactArn</code> or
  /// <code>Source</code> must be specified.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactArn] :
  /// The Amazon Resource Name (ARN) of the artifact to delete.
  ///
  /// Parameter [source] :
  /// The URI of the source.
  Future<DeleteArtifactResponse> deleteArtifact({
    String? artifactArn,
    ArtifactSource? source,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (artifactArn != null) 'ArtifactArn': artifactArn,
        if (source != null) 'Source': source,
      },
    );

    return DeleteArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Deletes an association.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [destinationArn] :
  /// The Amazon Resource Name (ARN) of the destination.
  ///
  /// Parameter [sourceArn] :
  /// The ARN of the source.
  Future<DeleteAssociationResponse> deleteAssociation({
    required String destinationArn,
    required String sourceArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteAssociation'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DestinationArn': destinationArn,
        'SourceArn': sourceArn,
      },
    );

    return DeleteAssociationResponse.fromJson(jsonResponse.body);
  }

  /// Delete a SageMaker HyperPod cluster.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [clusterName] :
  /// The string name or the Amazon Resource Name (ARN) of the SageMaker
  /// HyperPod cluster to delete.
  Future<DeleteClusterResponse> deleteCluster({
    required String clusterName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteCluster'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
      },
    );

    return DeleteClusterResponse.fromJson(jsonResponse.body);
  }

  /// Deletes the specified Git repository from your account.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository to delete.
  Future<void> deleteCodeRepository({
    required String codeRepositoryName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteCodeRepository'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
      },
    );
  }

  /// Deletes the specified compilation job. This action deletes only the
  /// compilation job resource in Amazon SageMaker. It doesn't delete other
  /// resources that are related to that job, such as the model artifacts that
  /// the job creates, the compilation logs in CloudWatch, the compiled model,
  /// or the IAM role.
  ///
  /// You can delete a compilation job only if its current status is
  /// <code>COMPLETED</code>, <code>FAILED</code>, or <code>STOPPED</code>. If
  /// the job status is <code>STARTING</code> or <code>INPROGRESS</code>, stop
  /// the job, and then delete it after its status becomes <code>STOPPED</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the compilation job to delete.
  Future<void> deleteCompilationJob({
    required String compilationJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteCompilationJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
      },
    );
  }

  /// Deletes an context.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextName] :
  /// The name of the context to delete.
  Future<DeleteContextResponse> deleteContext({
    required String contextName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
      },
    );

    return DeleteContextResponse.fromJson(jsonResponse.body);
  }

  /// Deletes a data quality monitoring job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the data quality monitoring job definition to delete.
  Future<void> deleteDataQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteDataQualityJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes a fleet.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet to delete.
  Future<void> deleteDeviceFleet({
    required String deviceFleetName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteDeviceFleet'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
      },
    );
  }

  /// Used to delete a domain. If you onboarded with IAM mode, you will need to
  /// delete your domain to onboard again using IAM Identity Center. Use with
  /// caution. All of the members of the domain will lose access to their EFS
  /// volume, including data, notebooks, and other artifacts.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [retentionPolicy] :
  /// The retention policy for this domain, which specifies whether resources
  /// will be retained after the Domain is deleted. By default, all resources
  /// are retained (not automatically deleted).
  Future<void> deleteDomain({
    required String domainId,
    RetentionPolicy? retentionPolicy,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteDomain'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        if (retentionPolicy != null) 'RetentionPolicy': retentionPolicy,
      },
    );
  }

  /// Deletes an edge deployment plan if (and only if) all the stages in the
  /// plan are inactive or there are no stages in the plan.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan to delete.
  Future<void> deleteEdgeDeploymentPlan({
    required String edgeDeploymentPlanName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteEdgeDeploymentPlan'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
      },
    );
  }

  /// Delete a stage in an edge deployment plan if (and only if) the stage is
  /// inactive.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan from which the stage will be deleted.
  ///
  /// Parameter [stageName] :
  /// The name of the stage.
  Future<void> deleteEdgeDeploymentStage({
    required String edgeDeploymentPlanName,
    required String stageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteEdgeDeploymentStage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        'StageName': stageName,
      },
    );
  }

  /// Deletes an endpoint. SageMaker frees up all of the resources that were
  /// deployed when the endpoint was created.
  ///
  /// SageMaker retires any custom KMS key grants associated with the endpoint,
  /// meaning you don't need to use the <a
  /// href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a>
  /// API call.
  ///
  /// When you delete your endpoint, SageMaker asynchronously deletes associated
  /// endpoint resources such as KMS key grants. You might still see these
  /// resources in your account for a few minutes after deleting your endpoint.
  /// Do not delete or revoke the permissions for your <code> <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a>
  /// </code>, otherwise SageMaker cannot delete these resources.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint that you want to delete.
  Future<void> deleteEndpoint({
    required String endpointName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteEndpoint'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointName': endpointName,
      },
    );
  }

  /// Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code>
  /// API deletes only the specified configuration. It does not delete endpoints
  /// created using the configuration.
  ///
  /// You must not delete an <code>EndpointConfig</code> in use by an endpoint
  /// that is live or while the <code>UpdateEndpoint</code> or
  /// <code>CreateEndpoint</code> operations are being performed on the
  /// endpoint. If you delete the <code>EndpointConfig</code> of an endpoint
  /// that is active or being created or updated you may lose visibility into
  /// the instance type the endpoint is using. The endpoint must be deleted in
  /// order to stop incurring charges.
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the endpoint configuration that you want to delete.
  Future<void> deleteEndpointConfig({
    required String endpointConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteEndpointConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
      },
    );
  }

  /// Deletes an SageMaker experiment. All trials associated with the experiment
  /// must be deleted first. Use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a>
  /// API to get a list of the trials associated with the experiment.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to delete.
  Future<DeleteExperimentResponse> deleteExperiment({
    required String experimentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
      },
    );

    return DeleteExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Delete the <code>FeatureGroup</code> and any data that was written to the
  /// <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be
  /// accessed from the <code>OnlineStore</code> immediately after
  /// <code>DeleteFeatureGroup</code> is called.
  ///
  /// Data written into the <code>OfflineStore</code> will not be deleted. The
  /// Amazon Web Services Glue database and tables that are automatically
  /// created for your <code>OfflineStore</code> are not deleted.
  ///
  /// Note that it can take approximately 10-15 minutes to delete an
  /// <code>OnlineStore</code> <code>FeatureGroup</code> with the
  /// <code>InMemory</code> <code>StorageType</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [featureGroupName] :
  /// The name of the <code>FeatureGroup</code> you want to delete. The name
  /// must be unique within an Amazon Web Services Region in an Amazon Web
  /// Services account.
  Future<void> deleteFeatureGroup({
    required String featureGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteFeatureGroup'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
      },
    );
  }

  /// Deletes the specified flow definition.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [flowDefinitionName] :
  /// The name of the flow definition you are deleting.
  Future<void> deleteFlowDefinition({
    required String flowDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteFlowDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FlowDefinitionName': flowDefinitionName,
      },
    );
  }

  /// Delete a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubName] :
  /// The name of the hub to delete.
  Future<void> deleteHub({
    required String hubName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteHub'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubName': hubName,
      },
    );
  }

  /// Delete the contents of a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubContentName] :
  /// The name of the content that you want to delete from a hub.
  ///
  /// Parameter [hubContentType] :
  /// The type of content that you want to delete from a hub.
  ///
  /// Parameter [hubContentVersion] :
  /// The version of the content that you want to delete from a hub.
  ///
  /// Parameter [hubName] :
  /// The name of the hub that you want to delete content in.
  Future<void> deleteHubContent({
    required String hubContentName,
    required HubContentType hubContentType,
    required String hubContentVersion,
    required String hubName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteHubContent'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubContentName': hubContentName,
        'HubContentType': hubContentType.value,
        'HubContentVersion': hubContentVersion,
        'HubName': hubName,
      },
    );
  }

  /// Use this operation to delete a human task user interface (worker task
  /// template).
  ///
  /// To see a list of human task user interfaces (work task templates) in your
  /// account, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html">ListHumanTaskUis</a>.
  /// When you delete a worker task template, it no longer appears when you call
  /// <code>ListHumanTaskUis</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [humanTaskUiName] :
  /// The name of the human task user interface (work task template) you want to
  /// delete.
  Future<void> deleteHumanTaskUi({
    required String humanTaskUiName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteHumanTaskUi'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskUiName': humanTaskUiName,
      },
    );
  }

  /// Deletes a hyperparameter tuning job. The
  /// <code>DeleteHyperParameterTuningJob</code> API deletes only the tuning job
  /// entry that was created in SageMaker when you called the
  /// <code>CreateHyperParameterTuningJob</code> API. It does not delete
  /// training jobs, artifacts, or the IAM role that you specified when creating
  /// the model.
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the hyperparameter tuning job that you want to delete.
  Future<void> deleteHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteHyperParameterTuningJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
      },
    );
  }

  /// Deletes a SageMaker image and all versions of the image. The container
  /// images aren't deleted.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to delete.
  Future<void> deleteImage({
    required String imageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteImage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
      },
    );
  }

  /// Deletes a version of a SageMaker image. The container image the version
  /// represents isn't deleted.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to delete.
  ///
  /// Parameter [alias] :
  /// The alias of the image to delete.
  ///
  /// Parameter [version] :
  /// The version to delete.
  Future<void> deleteImageVersion({
    required String imageName,
    String? alias,
    int? version,
  }) async {
    _s.validateNumRange(
      'version',
      version,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteImageVersion'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (alias != null) 'Alias': alias,
        if (version != null) 'Version': version,
      },
    );
  }

  /// Deletes an inference component.
  ///
  /// Parameter [inferenceComponentName] :
  /// The name of the inference component to delete.
  Future<void> deleteInferenceComponent({
    required String inferenceComponentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteInferenceComponent'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InferenceComponentName': inferenceComponentName,
      },
    );
  }

  /// Deletes an inference experiment.
  /// <note>
  /// This operation does not delete your endpoint, variants, or any underlying
  /// resources. This operation only deletes the metadata of your experiment.
  /// </note>
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [name] :
  /// The name of the inference experiment you want to delete.
  Future<DeleteInferenceExperimentResponse> deleteInferenceExperiment({
    required String name,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteInferenceExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Name': name,
      },
    );

    return DeleteInferenceExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Deletes a model. The <code>DeleteModel</code> API deletes only the model
  /// entry that was created in SageMaker when you called the
  /// <code>CreateModel</code> API. It does not delete model artifacts,
  /// inference code, or the IAM role that you specified when creating the
  /// model.
  ///
  /// Parameter [modelName] :
  /// The name of the model to delete.
  Future<void> deleteModel({
    required String modelName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModel'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
      },
    );
  }

  /// Deletes an Amazon SageMaker model bias job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model bias job definition to delete.
  Future<void> deleteModelBiasJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelBiasJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes an Amazon SageMaker Model Card.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [modelCardName] :
  /// The name of the model card to delete.
  Future<void> deleteModelCard({
    required String modelCardName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelCard'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardName': modelCardName,
      },
    );
  }

  /// Deletes an Amazon SageMaker model explainability job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model explainability job definition to delete.
  Future<void> deleteModelExplainabilityJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelExplainabilityJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes a model package.
  ///
  /// A model package is used to create SageMaker models or list on Amazon Web
  /// Services Marketplace. Buyers can subscribe to model packages listed on
  /// Amazon Web Services Marketplace to create models in SageMaker.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [modelPackageName] :
  /// The name or Amazon Resource Name (ARN) of the model package to delete.
  ///
  /// When you specify a name, the name must have 1 to 63 characters. Valid
  /// characters are a-z, A-Z, 0-9, and - (hyphen).
  Future<void> deleteModelPackage({
    required String modelPackageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelPackage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageName': modelPackageName,
      },
    );
  }

  /// Deletes the specified model group.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group to delete.
  Future<void> deleteModelPackageGroup({
    required String modelPackageGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelPackageGroup'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );
  }

  /// Deletes a model group resource policy.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group for which to delete the policy.
  Future<void> deleteModelPackageGroupPolicy({
    required String modelPackageGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelPackageGroupPolicy'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );
  }

  /// Deletes the secified model quality monitoring job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model quality monitoring job definition to delete.
  Future<void> deleteModelQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteModelQualityJobDefinition'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );
  }

  /// Deletes a monitoring schedule. Also stops the schedule had not already
  /// been stopped. This does not delete the job execution history of the
  /// monitoring schedule.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the monitoring schedule to delete.
  Future<void> deleteMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteMonitoringSchedule'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );
  }

  /// Deletes an SageMaker notebook instance. Before you can delete a notebook
  /// instance, you must call the <code>StopNotebookInstance</code> API.
  /// <important>
  /// When you delete a notebook instance, you lose all of your data. SageMaker
  /// removes the ML compute instance, and deletes the ML storage volume and the
  /// network interface associated with the notebook instance.
  /// </important>
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the SageMaker notebook instance to delete.
  Future<void> deleteNotebookInstance({
    required String notebookInstanceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );
  }

  /// Deletes a notebook instance lifecycle configuration.
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration to delete.
  Future<void> deleteNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteNotebookInstanceLifecycleConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      },
    );
  }

  /// Deletes a pipeline if there are no running instances of the pipeline. To
  /// delete a pipeline, you must stop all running instances of the pipeline
  /// using the <code>StopPipelineExecution</code> API. When you delete a
  /// pipeline, all instances of the pipeline are deleted.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline to delete.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  Future<DeletePipelineResponse> deletePipeline({
    required String pipelineName,
    String? clientRequestToken,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeletePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
      },
    );

    return DeletePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Delete the specified project.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [projectName] :
  /// The name of the project to delete.
  Future<void> deleteProject({
    required String projectName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteProject'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
      },
    );
  }

  /// Used to delete a space.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The ID of the associated domain.
  ///
  /// Parameter [spaceName] :
  /// The name of the space.
  Future<void> deleteSpace({
    required String domainId,
    required String spaceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteSpace'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'SpaceName': spaceName,
      },
    );
  }

  /// Deletes the Amazon SageMaker Studio Lifecycle Configuration. In order to
  /// delete the Lifecycle Configuration, there must be no running apps using
  /// the Lifecycle Configuration. You must also remove the Lifecycle
  /// Configuration from UserSettings in all Domains and UserProfiles.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceInUse].
  ///
  /// Parameter [studioLifecycleConfigName] :
  /// The name of the Amazon SageMaker Studio Lifecycle Configuration to delete.
  Future<void> deleteStudioLifecycleConfig({
    required String studioLifecycleConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteStudioLifecycleConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'StudioLifecycleConfigName': studioLifecycleConfigName,
      },
    );
  }

  /// Deletes the specified tags from an SageMaker resource.
  ///
  /// To list a resource's tags, use the <code>ListTags</code> API.
  /// <note>
  /// When you call this API to delete tags from a hyperparameter tuning job,
  /// the deleted tags are not removed from training jobs that the
  /// hyperparameter tuning job launched before you called this API.
  /// </note> <note>
  /// When you call this API to delete tags from a SageMaker Domain or User
  /// Profile, the deleted tags are not removed from Apps that the SageMaker
  /// Domain or User Profile launched before you called this API.
  /// </note>
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the resource whose tags you want to
  /// delete.
  ///
  /// Parameter [tagKeys] :
  /// An array or one or more tag keys to delete.
  Future<void> deleteTags({
    required String resourceArn,
    required List<String> tagKeys,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteTags'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ResourceArn': resourceArn,
        'TagKeys': tagKeys,
      },
    );
  }

  /// Deletes the specified trial. All trial components that make up the trial
  /// must be deleted first. Use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a>
  /// API to get the list of trial components.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialName] :
  /// The name of the trial to delete.
  Future<DeleteTrialResponse> deleteTrial({
    required String trialName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialName': trialName,
      },
    );

    return DeleteTrialResponse.fromJson(jsonResponse.body);
  }

  /// Deletes the specified trial component. A trial component must be
  /// disassociated from all trials before the trial component can be deleted.
  /// To disassociate a trial component from a trial, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a>
  /// API.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to delete.
  Future<DeleteTrialComponentResponse> deleteTrialComponent({
    required String trialComponentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
      },
    );

    return DeleteTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Deletes a user profile. When a user profile is deleted, the user loses
  /// access to their EFS volume, including data, notebooks, and other
  /// artifacts.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  Future<void> deleteUserProfile({
    required String domainId,
    required String userProfileName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteUserProfile'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
      },
    );
  }

  /// Use this operation to delete a workforce.
  ///
  /// If you want to create a new workforce in an Amazon Web Services Region
  /// where a workforce already exists, use this operation to delete the
  /// existing workforce and then use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html">CreateWorkforce</a>
  /// to create a new workforce.
  /// <important>
  /// If a private workforce contains one or more work teams, you must use the
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a>
  /// operation to delete all work teams before you delete the workforce. If you
  /// try to delete a workforce that contains one or more work teams, you will
  /// recieve a <code>ResourceInUse</code> error.
  /// </important>
  ///
  /// Parameter [workforceName] :
  /// The name of the workforce.
  Future<void> deleteWorkforce({
    required String workforceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteWorkforce'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
      },
    );
  }

  /// Deletes an existing work team. This operation can't be undone.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [workteamName] :
  /// The name of the work team to delete.
  Future<DeleteWorkteamResponse> deleteWorkteam({
    required String workteamName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeleteWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamName': workteamName,
      },
    );

    return DeleteWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Deregisters the specified devices. After you deregister a device, you will
  /// need to re-register the devices.
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet the devices belong to.
  ///
  /// Parameter [deviceNames] :
  /// The unique IDs of the devices.
  Future<void> deregisterDevices({
    required String deviceFleetName,
    required List<String> deviceNames,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DeregisterDevices'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'DeviceNames': deviceNames,
      },
    );
  }

  /// Describes an action.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionName] :
  /// The name of the action to describe.
  Future<DescribeActionResponse> describeAction({
    required String actionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
      },
    );

    return DescribeActionResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of the specified algorithm that is in your account.
  ///
  /// Parameter [algorithmName] :
  /// The name of the algorithm to describe.
  Future<DescribeAlgorithmOutput> describeAlgorithm({
    required String algorithmName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAlgorithm'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AlgorithmName': algorithmName,
      },
    );

    return DescribeAlgorithmOutput.fromJson(jsonResponse.body);
  }

  /// Describes the app.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appName] :
  /// The name of the app.
  ///
  /// Parameter [appType] :
  /// The type of app.
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [spaceName] :
  /// The name of the space.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name. If this value is not set, then
  /// <code>SpaceName</code> must be set.
  Future<DescribeAppResponse> describeApp({
    required String appName,
    required AppType appType,
    required String domainId,
    String? spaceName,
    String? userProfileName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeApp'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppName': appName,
        'AppType': appType.value,
        'DomainId': domainId,
        if (spaceName != null) 'SpaceName': spaceName,
        if (userProfileName != null) 'UserProfileName': userProfileName,
      },
    );

    return DescribeAppResponse.fromJson(jsonResponse.body);
  }

  /// Describes an AppImageConfig.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig to describe.
  Future<DescribeAppImageConfigResponse> describeAppImageConfig({
    required String appImageConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAppImageConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
      },
    );

    return DescribeAppImageConfigResponse.fromJson(jsonResponse.body);
  }

  /// Describes an artifact.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactArn] :
  /// The Amazon Resource Name (ARN) of the artifact to describe.
  Future<DescribeArtifactResponse> describeArtifact({
    required String artifactArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ArtifactArn': artifactArn,
      },
    );

    return DescribeArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about an AutoML job created by calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.
  /// <note>
  /// AutoML jobs created by calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>
  /// cannot be described by <code>DescribeAutoMLJob</code>.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// Requests information about an AutoML job using its unique name.
  Future<DescribeAutoMLJobResponse> describeAutoMLJob({
    required String autoMLJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAutoMLJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
      },
    );

    return DescribeAutoMLJobResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about an AutoML job created by calling <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// Requests information about an AutoML job V2 using its unique name.
  Future<DescribeAutoMLJobV2Response> describeAutoMLJobV2({
    required String autoMLJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeAutoMLJobV2'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
      },
    );

    return DescribeAutoMLJobV2Response.fromJson(jsonResponse.body);
  }

  /// Retrieves information of a SageMaker HyperPod cluster.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [clusterName] :
  /// The string name or the Amazon Resource Name (ARN) of the SageMaker
  /// HyperPod cluster.
  Future<DescribeClusterResponse> describeCluster({
    required String clusterName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeCluster'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
      },
    );

    return DescribeClusterResponse.fromJson(jsonResponse.body);
  }

  /// Retrieves information of a node (also called a <i>instance</i>
  /// interchangeably) of a SageMaker HyperPod cluster.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [clusterName] :
  /// The string name or the Amazon Resource Name (ARN) of the SageMaker
  /// HyperPod cluster in which the node is.
  ///
  /// Parameter [nodeId] :
  /// The ID of the SageMaker HyperPod cluster node.
  Future<DescribeClusterNodeResponse> describeClusterNode({
    required String clusterName,
    required String nodeId,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeClusterNode'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
        'NodeId': nodeId,
      },
    );

    return DescribeClusterNodeResponse.fromJson(jsonResponse.body);
  }

  /// Gets details about the specified Git repository.
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository to describe.
  Future<DescribeCodeRepositoryOutput> describeCodeRepository({
    required String codeRepositoryName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeCodeRepository'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
      },
    );

    return DescribeCodeRepositoryOutput.fromJson(jsonResponse.body);
  }

  /// Returns information about a model compilation job.
  ///
  /// To create a model compilation job, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>.
  /// To get information about multiple model compilation jobs, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the model compilation job that you want information about.
  Future<DescribeCompilationJobResponse> describeCompilationJob({
    required String compilationJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeCompilationJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
      },
    );

    return DescribeCompilationJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes a context.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextName] :
  /// The name of the context to describe.
  Future<DescribeContextResponse> describeContext({
    required String contextName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
      },
    );

    return DescribeContextResponse.fromJson(jsonResponse.body);
  }

  /// Gets the details of a data quality monitoring job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the data quality monitoring job definition to describe.
  Future<DescribeDataQualityJobDefinitionResponse>
      describeDataQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDataQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeDataQualityJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Describes the device.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet the devices belong to.
  ///
  /// Parameter [deviceName] :
  /// The unique ID of the device.
  ///
  /// Parameter [nextToken] :
  /// Next token of device description.
  Future<DescribeDeviceResponse> describeDevice({
    required String deviceFleetName,
    required String deviceName,
    String? nextToken,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDevice'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'DeviceName': deviceName,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return DescribeDeviceResponse.fromJson(jsonResponse.body);
  }

  /// A description of the fleet the device belongs to.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  Future<DescribeDeviceFleetResponse> describeDeviceFleet({
    required String deviceFleetName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDeviceFleet'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
      },
    );

    return DescribeDeviceFleetResponse.fromJson(jsonResponse.body);
  }

  /// The description of the domain.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  Future<DescribeDomainResponse> describeDomain({
    required String domainId,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeDomain'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
      },
    );

    return DescribeDomainResponse.fromJson(jsonResponse.body);
  }

  /// Describes an edge deployment plan with deployment status per stage.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the deployment plan to describe.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to select (50 by default).
  ///
  /// Parameter [nextToken] :
  /// If the edge deployment plan has enough stages to require tokening, then
  /// this is the response from the last list of stages returned.
  Future<DescribeEdgeDeploymentPlanResponse> describeEdgeDeploymentPlan({
    required String edgeDeploymentPlanName,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      10,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEdgeDeploymentPlan'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return DescribeEdgeDeploymentPlanResponse.fromJson(jsonResponse.body);
  }

  /// A description of edge packaging jobs.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [edgePackagingJobName] :
  /// The name of the edge packaging job.
  Future<DescribeEdgePackagingJobResponse> describeEdgePackagingJob({
    required String edgePackagingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEdgePackagingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgePackagingJobName': edgePackagingJobName,
      },
    );

    return DescribeEdgePackagingJobResponse.fromJson(jsonResponse.body);
  }

  /// Returns the description of an endpoint.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint.
  Future<DescribeEndpointOutput> describeEndpoint({
    required String endpointName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEndpoint'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointName': endpointName,
      },
    );

    return DescribeEndpointOutput.fromJson(jsonResponse.body);
  }

  /// Returns the description of an endpoint configuration created using the
  /// <code>CreateEndpointConfig</code> API.
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the endpoint configuration.
  Future<DescribeEndpointConfigOutput> describeEndpointConfig({
    required String endpointConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeEndpointConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
      },
    );

    return DescribeEndpointConfigOutput.fromJson(jsonResponse.body);
  }

  /// Provides a list of an experiment's properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to describe.
  Future<DescribeExperimentResponse> describeExperiment({
    required String experimentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
      },
    );

    return DescribeExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to describe a <code>FeatureGroup</code>. The response
  /// includes information on the creation time, <code>FeatureGroup</code> name,
  /// the unique identifier for each <code>FeatureGroup</code>, and more.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [featureGroupName] :
  /// The name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code>
  /// you want described.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination of the list of <code>Features</code>
  /// (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are
  /// returned by default.
  Future<DescribeFeatureGroupResponse> describeFeatureGroup({
    required String featureGroupName,
    String? nextToken,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeFeatureGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return DescribeFeatureGroupResponse.fromJson(jsonResponse.body);
  }

  /// Shows the metadata for a feature within a feature group.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [featureGroupName] :
  /// The name or Amazon Resource Name (ARN) of the feature group containing the
  /// feature.
  ///
  /// Parameter [featureName] :
  /// The name of the feature.
  Future<DescribeFeatureMetadataResponse> describeFeatureMetadata({
    required String featureGroupName,
    required String featureName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeFeatureMetadata'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
        'FeatureName': featureName,
      },
    );

    return DescribeFeatureMetadataResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the specified flow definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [flowDefinitionName] :
  /// The name of the flow definition.
  Future<DescribeFlowDefinitionResponse> describeFlowDefinition({
    required String flowDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeFlowDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FlowDefinitionName': flowDefinitionName,
      },
    );

    return DescribeFlowDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Describe a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubName] :
  /// The name of the hub to describe.
  Future<DescribeHubResponse> describeHub({
    required String hubName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeHub'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubName': hubName,
      },
    );

    return DescribeHubResponse.fromJson(jsonResponse.body);
  }

  /// Describe the content of a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubContentName] :
  /// The name of the content to describe.
  ///
  /// Parameter [hubContentType] :
  /// The type of content in the hub.
  ///
  /// Parameter [hubName] :
  /// The name of the hub that contains the content to describe.
  ///
  /// Parameter [hubContentVersion] :
  /// The version of the content to describe.
  Future<DescribeHubContentResponse> describeHubContent({
    required String hubContentName,
    required HubContentType hubContentType,
    required String hubName,
    String? hubContentVersion,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeHubContent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubContentName': hubContentName,
        'HubContentType': hubContentType.value,
        'HubName': hubName,
        if (hubContentVersion != null) 'HubContentVersion': hubContentVersion,
      },
    );

    return DescribeHubContentResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the requested human task user interface (worker
  /// task template).
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [humanTaskUiName] :
  /// The name of the human task user interface (worker task template) you want
  /// information about.
  Future<DescribeHumanTaskUiResponse> describeHumanTaskUi({
    required String humanTaskUiName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeHumanTaskUi'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HumanTaskUiName': humanTaskUiName,
      },
    );

    return DescribeHumanTaskUiResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of a hyperparameter tuning job, depending on the
  /// fields selected. These fields can include the name, Amazon Resource Name
  /// (ARN), job status of your tuning job and more.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job.
  Future<DescribeHyperParameterTuningJobResponse>
      describeHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeHyperParameterTuningJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
      },
    );

    return DescribeHyperParameterTuningJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes a SageMaker image.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to describe.
  Future<DescribeImageResponse> describeImage({
    required String imageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeImage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
      },
    );

    return DescribeImageResponse.fromJson(jsonResponse.body);
  }

  /// Describes a version of a SageMaker image.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image.
  ///
  /// Parameter [alias] :
  /// The alias of the image version.
  ///
  /// Parameter [version] :
  /// The version of the image. If not specified, the latest version is
  /// described.
  Future<DescribeImageVersionResponse> describeImageVersion({
    required String imageName,
    String? alias,
    int? version,
  }) async {
    _s.validateNumRange(
      'version',
      version,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeImageVersion'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (alias != null) 'Alias': alias,
        if (version != null) 'Version': version,
      },
    );

    return DescribeImageVersionResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about an inference component.
  ///
  /// Parameter [inferenceComponentName] :
  /// The name of the inference component.
  Future<DescribeInferenceComponentOutput> describeInferenceComponent({
    required String inferenceComponentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeInferenceComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InferenceComponentName': inferenceComponentName,
      },
    );

    return DescribeInferenceComponentOutput.fromJson(jsonResponse.body);
  }

  /// Returns details about an inference experiment.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [name] :
  /// The name of the inference experiment to describe.
  Future<DescribeInferenceExperimentResponse> describeInferenceExperiment({
    required String name,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeInferenceExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Name': name,
      },
    );

    return DescribeInferenceExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Provides the results of the Inference Recommender job. One or more
  /// recommendation jobs are returned.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobName] :
  /// The name of the job. The name must be unique within an Amazon Web Services
  /// Region in the Amazon Web Services account.
  Future<DescribeInferenceRecommendationsJobResponse>
      describeInferenceRecommendationsJob({
    required String jobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeInferenceRecommendationsJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobName': jobName,
      },
    );

    return DescribeInferenceRecommendationsJobResponse.fromJson(
        jsonResponse.body);
  }

  /// Gets information about a labeling job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [labelingJobName] :
  /// The name of the labeling job to return information for.
  Future<DescribeLabelingJobResponse> describeLabelingJob({
    required String labelingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeLabelingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'LabelingJobName': labelingJobName,
      },
    );

    return DescribeLabelingJobResponse.fromJson(jsonResponse.body);
  }

  /// Provides a list of properties for the requested lineage group. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
  /// Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer
  /// Guide</i>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [lineageGroupName] :
  /// The name of the lineage group.
  Future<DescribeLineageGroupResponse> describeLineageGroup({
    required String lineageGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeLineageGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'LineageGroupName': lineageGroupName,
      },
    );

    return DescribeLineageGroupResponse.fromJson(jsonResponse.body);
  }

  /// Describes a model that you created using the <code>CreateModel</code> API.
  ///
  /// Parameter [modelName] :
  /// The name of the model.
  Future<DescribeModelOutput> describeModel({
    required String modelName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModel'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelName': modelName,
      },
    );

    return DescribeModelOutput.fromJson(jsonResponse.body);
  }

  /// Returns a description of a model bias job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model bias job definition. The name must be unique within
  /// an Amazon Web Services Region in the Amazon Web Services account.
  Future<DescribeModelBiasJobDefinitionResponse>
      describeModelBiasJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelBiasJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeModelBiasJobDefinitionResponse.fromJson(jsonResponse.body);
  }

  /// Describes the content, creation time, and security configuration of an
  /// Amazon SageMaker Model Card.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [modelCardName] :
  /// The name or Amazon Resource Name (ARN) of the model card to describe.
  ///
  /// Parameter [modelCardVersion] :
  /// The version of the model card to describe. If a version is not provided,
  /// then the latest version of the model card is described.
  Future<DescribeModelCardResponse> describeModelCard({
    required String modelCardName,
    int? modelCardVersion,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelCard'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardName': modelCardName,
        if (modelCardVersion != null) 'ModelCardVersion': modelCardVersion,
      },
    );

    return DescribeModelCardResponse.fromJson(jsonResponse.body);
  }

  /// Describes an Amazon SageMaker Model Card export job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [modelCardExportJobArn] :
  /// The Amazon Resource Name (ARN) of the model card export job to describe.
  Future<DescribeModelCardExportJobResponse> describeModelCardExportJob({
    required String modelCardExportJobArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelCardExportJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardExportJobArn': modelCardExportJobArn,
      },
    );

    return DescribeModelCardExportJobResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of a model explainability job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model explainability job definition. The name must be
  /// unique within an Amazon Web Services Region in the Amazon Web Services
  /// account.
  Future<DescribeModelExplainabilityJobDefinitionResponse>
      describeModelExplainabilityJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelExplainabilityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeModelExplainabilityJobDefinitionResponse.fromJson(
        jsonResponse.body);
  }

  /// Returns a description of the specified model package, which is used to
  /// create SageMaker models or list them on Amazon Web Services Marketplace.
  /// <important>
  /// If you provided a KMS Key ID when you created your model package, you will
  /// see the <a
  /// href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Decrypt.html">KMS
  /// Decrypt</a> API call in your CloudTrail logs when you use this API.
  /// </important>
  /// To create models in SageMaker, buyers can subscribe to model packages
  /// listed on Amazon Web Services Marketplace.
  ///
  /// Parameter [modelPackageName] :
  /// The name or Amazon Resource Name (ARN) of the model package to describe.
  ///
  /// When you specify a name, the name must have 1 to 63 characters. Valid
  /// characters are a-z, A-Z, 0-9, and - (hyphen).
  Future<DescribeModelPackageOutput> describeModelPackage({
    required String modelPackageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageName': modelPackageName,
      },
    );

    return DescribeModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Gets a description for the specified model group.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group to describe.
  Future<DescribeModelPackageGroupOutput> describeModelPackageGroup({
    required String modelPackageGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelPackageGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );

    return DescribeModelPackageGroupOutput.fromJson(jsonResponse.body);
  }

  /// Returns a description of a model quality job definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobDefinitionName] :
  /// The name of the model quality job. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  Future<DescribeModelQualityJobDefinitionResponse>
      describeModelQualityJobDefinition({
    required String jobDefinitionName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeModelQualityJobDefinition'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobDefinitionName': jobDefinitionName,
      },
    );

    return DescribeModelQualityJobDefinitionResponse.fromJson(
        jsonResponse.body);
  }

  /// Describes the schedule for a monitoring job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// Name of a previously created monitoring schedule.
  Future<DescribeMonitoringScheduleResponse> describeMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeMonitoringSchedule'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );

    return DescribeMonitoringScheduleResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about a notebook instance.
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance that you want information about.
  Future<DescribeNotebookInstanceOutput> describeNotebookInstance({
    required String notebookInstanceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeNotebookInstance'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );

    return DescribeNotebookInstanceOutput.fromJson(jsonResponse.body);
  }

  /// Returns a description of a notebook instance lifecycle configuration.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration to describe.
  Future<DescribeNotebookInstanceLifecycleConfigOutput>
      describeNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeNotebookInstanceLifecycleConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      },
    );

    return DescribeNotebookInstanceLifecycleConfigOutput.fromJson(
        jsonResponse.body);
  }

  /// Describes the details of a pipeline.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineName] :
  /// The name or Amazon Resource Name (ARN) of the pipeline to describe.
  Future<DescribePipelineResponse> describePipeline({
    required String pipelineName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
      },
    );

    return DescribePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Describes the details of an execution's pipeline definition.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  Future<DescribePipelineDefinitionForExecutionResponse>
      describePipelineDefinitionForExecution({
    required String pipelineExecutionArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribePipelineDefinitionForExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
      },
    );

    return DescribePipelineDefinitionForExecutionResponse.fromJson(
        jsonResponse.body);
  }

  /// Describes the details of a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  Future<DescribePipelineExecutionResponse> describePipelineExecution({
    required String pipelineExecutionArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribePipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
      },
    );

    return DescribePipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Returns a description of a processing job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [processingJobName] :
  /// The name of the processing job. The name must be unique within an Amazon
  /// Web Services Region in the Amazon Web Services account.
  Future<DescribeProcessingJobResponse> describeProcessingJob({
    required String processingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeProcessingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProcessingJobName': processingJobName,
      },
    );

    return DescribeProcessingJobResponse.fromJson(jsonResponse.body);
  }

  /// Describes the details of a project.
  ///
  /// Parameter [projectName] :
  /// The name of the project to describe.
  Future<DescribeProjectOutput> describeProject({
    required String projectName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeProject'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
      },
    );

    return DescribeProjectOutput.fromJson(jsonResponse.body);
  }

  /// Describes the space.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The ID of the associated domain.
  ///
  /// Parameter [spaceName] :
  /// The name of the space.
  Future<DescribeSpaceResponse> describeSpace({
    required String domainId,
    required String spaceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeSpace'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'SpaceName': spaceName,
      },
    );

    return DescribeSpaceResponse.fromJson(jsonResponse.body);
  }

  /// Describes the Amazon SageMaker Studio Lifecycle Configuration.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [studioLifecycleConfigName] :
  /// The name of the Amazon SageMaker Studio Lifecycle Configuration to
  /// describe.
  Future<DescribeStudioLifecycleConfigResponse> describeStudioLifecycleConfig({
    required String studioLifecycleConfigName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeStudioLifecycleConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'StudioLifecycleConfigName': studioLifecycleConfigName,
      },
    );

    return DescribeStudioLifecycleConfigResponse.fromJson(jsonResponse.body);
  }

  /// Gets information about a work team provided by a vendor. It returns
  /// details about the subscription with a vendor in the Amazon Web Services
  /// Marketplace.
  ///
  /// Parameter [workteamArn] :
  /// The Amazon Resource Name (ARN) of the subscribed work team to describe.
  Future<DescribeSubscribedWorkteamResponse> describeSubscribedWorkteam({
    required String workteamArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeSubscribedWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamArn': workteamArn,
      },
    );

    return DescribeSubscribedWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about a training job.
  ///
  /// Some of the attributes below only appear if the training job successfully
  /// starts. If the training job fails, <code>TrainingJobStatus</code> is
  /// <code>Failed</code> and, depending on the <code>FailureReason</code>,
  /// attributes like <code>TrainingStartTime</code>,
  /// <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and
  /// <code>BillableTimeInSeconds</code> may not be present in the response.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trainingJobName] :
  /// The name of the training job.
  Future<DescribeTrainingJobResponse> describeTrainingJob({
    required String trainingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTrainingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrainingJobName': trainingJobName,
      },
    );

    return DescribeTrainingJobResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about a transform job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [transformJobName] :
  /// The name of the transform job that you want to view details of.
  Future<DescribeTransformJobResponse> describeTransformJob({
    required String transformJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTransformJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TransformJobName': transformJobName,
      },
    );

    return DescribeTransformJobResponse.fromJson(jsonResponse.body);
  }

  /// Provides a list of a trial's properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialName] :
  /// The name of the trial to describe.
  Future<DescribeTrialResponse> describeTrial({
    required String trialName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialName': trialName,
      },
    );

    return DescribeTrialResponse.fromJson(jsonResponse.body);
  }

  /// Provides a list of a trials component's properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the trial component to describe.
  Future<DescribeTrialComponentResponse> describeTrialComponent({
    required String trialComponentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
      },
    );

    return DescribeTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Describes a user profile. For more information, see
  /// <code>CreateUserProfile</code>.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name. This value is not case sensitive.
  Future<DescribeUserProfileResponse> describeUserProfile({
    required String domainId,
    required String userProfileName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeUserProfile'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
      },
    );

    return DescribeUserProfileResponse.fromJson(jsonResponse.body);
  }

  /// Lists private workforce information, including workforce name, Amazon
  /// Resource Name (ARN), and, if applicable, allowed IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>).
  /// Allowable IP address ranges are the IP addresses that workers can use to
  /// access tasks.
  /// <important>
  /// This operation applies only to private workforces.
  /// </important>
  ///
  /// Parameter [workforceName] :
  /// The name of the private workforce whose access you want to restrict.
  /// <code>WorkforceName</code> is automatically set to <code>default</code>
  /// when a workforce is created and cannot be modified.
  Future<DescribeWorkforceResponse> describeWorkforce({
    required String workforceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeWorkforce'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
      },
    );

    return DescribeWorkforceResponse.fromJson(jsonResponse.body);
  }

  /// Gets information about a specific work team. You can see information such
  /// as the create date, the last updated date, membership information, and the
  /// work team's Amazon Resource Name (ARN).
  ///
  /// Parameter [workteamName] :
  /// The name of the work team to return a description of.
  Future<DescribeWorkteamResponse> describeWorkteam({
    required String workteamName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DescribeWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamName': workteamName,
      },
    );

    return DescribeWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// Disables using Service Catalog in SageMaker. Service Catalog is used to
  /// create SageMaker projects.
  Future<void> disableSagemakerServicecatalogPortfolio() async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DisableSagemakerServicecatalogPortfolio'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
    );
  }

  /// Disassociates a trial component from a trial. This doesn't effect other
  /// trials the component is associated with. Before you can delete a
  /// component, you must disassociate the component from all trials it is
  /// associated with. To associate a trial component with a trial, call the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html">AssociateTrialComponent</a>
  /// API.
  ///
  /// To get a list of the trials a component is associated with, use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API. Specify <code>ExperimentTrialComponent</code> for the
  /// <code>Resource</code> parameter. The list appears in the response under
  /// <code>Results.TrialComponent.Parents</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to disassociate from the trial.
  ///
  /// Parameter [trialName] :
  /// The name of the trial to disassociate from.
  Future<DisassociateTrialComponentResponse> disassociateTrialComponent({
    required String trialComponentName,
    required String trialName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.DisassociateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        'TrialName': trialName,
      },
    );

    return DisassociateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Enables using Service Catalog in SageMaker. Service Catalog is used to
  /// create SageMaker projects.
  Future<void> enableSagemakerServicecatalogPortfolio() async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.EnableSagemakerServicecatalogPortfolio'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
    );
  }

  /// Describes a fleet.
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  Future<GetDeviceFleetReportResponse> getDeviceFleetReport({
    required String deviceFleetName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetDeviceFleetReport'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
      },
    );

    return GetDeviceFleetReportResponse.fromJson(jsonResponse.body);
  }

  /// The resource policy for the lineage group.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [lineageGroupName] :
  /// The name or Amazon Resource Name (ARN) of the lineage group.
  Future<GetLineageGroupPolicyResponse> getLineageGroupPolicy({
    required String lineageGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetLineageGroupPolicy'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'LineageGroupName': lineageGroupName,
      },
    );

    return GetLineageGroupPolicyResponse.fromJson(jsonResponse.body);
  }

  /// Gets a resource policy that manages access for a model group. For
  /// information about resource policies, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
  /// policies and resource-based policies</a> in the <i>Amazon Web Services
  /// Identity and Access Management User Guide.</i>.
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group for which to get the resource policy.
  Future<GetModelPackageGroupPolicyOutput> getModelPackageGroupPolicy({
    required String modelPackageGroupName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetModelPackageGroupPolicy'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
      },
    );

    return GetModelPackageGroupPolicyOutput.fromJson(jsonResponse.body);
  }

  /// Gets the status of Service Catalog in SageMaker. Service Catalog is used
  /// to create SageMaker projects.
  Future<GetSagemakerServicecatalogPortfolioStatusOutput>
      getSagemakerServicecatalogPortfolioStatus() async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetSagemakerServicecatalogPortfolioStatus'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
    );

    return GetSagemakerServicecatalogPortfolioStatusOutput.fromJson(
        jsonResponse.body);
  }

  /// Starts an Amazon SageMaker Inference Recommender autoscaling
  /// recommendation job. Returns recommendations for autoscaling policies that
  /// you can apply to your SageMaker endpoint.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [inferenceRecommendationsJobName] :
  /// The name of a previously completed Inference Recommender job.
  ///
  /// Parameter [endpointName] :
  /// The name of an endpoint benchmarked during a previously completed
  /// inference recommendation job. This name should come from one of the
  /// recommendations returned by the job specified in the
  /// <code>InferenceRecommendationsJobName</code> field.
  ///
  /// Specify either this field or the <code>RecommendationId</code> field.
  ///
  /// Parameter [recommendationId] :
  /// The recommendation ID of a previously completed inference recommendation.
  /// This ID should come from one of the recommendations returned by the job
  /// specified in the <code>InferenceRecommendationsJobName</code> field.
  ///
  /// Specify either this field or the <code>EndpointName</code> field.
  ///
  /// Parameter [scalingPolicyObjective] :
  /// An object where you specify the anticipated traffic pattern for an
  /// endpoint.
  ///
  /// Parameter [targetCpuUtilizationPerCore] :
  /// The percentage of how much utilization you want an instance to use before
  /// autoscaling. The default value is 50%.
  Future<GetScalingConfigurationRecommendationResponse>
      getScalingConfigurationRecommendation({
    required String inferenceRecommendationsJobName,
    String? endpointName,
    String? recommendationId,
    ScalingPolicyObjective? scalingPolicyObjective,
    int? targetCpuUtilizationPerCore,
  }) async {
    _s.validateNumRange(
      'targetCpuUtilizationPerCore',
      targetCpuUtilizationPerCore,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetScalingConfigurationRecommendation'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InferenceRecommendationsJobName': inferenceRecommendationsJobName,
        if (endpointName != null) 'EndpointName': endpointName,
        if (recommendationId != null) 'RecommendationId': recommendationId,
        if (scalingPolicyObjective != null)
          'ScalingPolicyObjective': scalingPolicyObjective,
        if (targetCpuUtilizationPerCore != null)
          'TargetCpuUtilizationPerCore': targetCpuUtilizationPerCore,
      },
    );

    return GetScalingConfigurationRecommendationResponse.fromJson(
        jsonResponse.body);
  }

  /// An auto-complete API for the search functionality in the SageMaker
  /// console. It returns suggestions of possible matches for the property name
  /// to use in <code>Search</code> queries. Provides suggestions for
  /// <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.
  ///
  /// Parameter [resource] :
  /// The name of the SageMaker resource to search for.
  ///
  /// Parameter [suggestionQuery] :
  /// Limits the property names that are included in the response.
  Future<GetSearchSuggestionsResponse> getSearchSuggestions({
    required ResourceType resource,
    SuggestionQuery? suggestionQuery,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.GetSearchSuggestions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Resource': resource.value,
        if (suggestionQuery != null) 'SuggestionQuery': suggestionQuery,
      },
    );

    return GetSearchSuggestionsResponse.fromJson(jsonResponse.body);
  }

  /// Import hub content.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [documentSchemaVersion] :
  /// The version of the hub content schema to import.
  ///
  /// Parameter [hubContentDocument] :
  /// The hub content document that describes information about the hub content
  /// such as type, associated containers, scripts, and more.
  ///
  /// Parameter [hubContentName] :
  /// The name of the hub content to import.
  ///
  /// Parameter [hubContentType] :
  /// The type of hub content to import.
  ///
  /// Parameter [hubName] :
  /// The name of the hub to import content into.
  ///
  /// Parameter [hubContentDescription] :
  /// A description of the hub content to import.
  ///
  /// Parameter [hubContentDisplayName] :
  /// The display name of the hub content to import.
  ///
  /// Parameter [hubContentMarkdown] :
  /// A string that provides a description of the hub content. This string can
  /// include links, tables, and standard markdown formating.
  ///
  /// Parameter [hubContentSearchKeywords] :
  /// The searchable keywords of the hub content.
  ///
  /// Parameter [hubContentVersion] :
  /// The version of the hub content to import.
  ///
  /// Parameter [tags] :
  /// Any tags associated with the hub content.
  Future<ImportHubContentResponse> importHubContent({
    required String documentSchemaVersion,
    required String hubContentDocument,
    required String hubContentName,
    required HubContentType hubContentType,
    required String hubName,
    String? hubContentDescription,
    String? hubContentDisplayName,
    String? hubContentMarkdown,
    List<String>? hubContentSearchKeywords,
    String? hubContentVersion,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ImportHubContent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DocumentSchemaVersion': documentSchemaVersion,
        'HubContentDocument': hubContentDocument,
        'HubContentName': hubContentName,
        'HubContentType': hubContentType.value,
        'HubName': hubName,
        if (hubContentDescription != null)
          'HubContentDescription': hubContentDescription,
        if (hubContentDisplayName != null)
          'HubContentDisplayName': hubContentDisplayName,
        if (hubContentMarkdown != null)
          'HubContentMarkdown': hubContentMarkdown,
        if (hubContentSearchKeywords != null)
          'HubContentSearchKeywords': hubContentSearchKeywords,
        if (hubContentVersion != null) 'HubContentVersion': hubContentVersion,
        if (tags != null) 'Tags': tags,
      },
    );

    return ImportHubContentResponse.fromJson(jsonResponse.body);
  }

  /// Lists the actions in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionType] :
  /// A filter that returns only actions of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only actions created on or after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only actions created on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of actions to return in the response. The default value
  /// is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListActions</code> didn't return the full
  /// set of actions, the call returns a token for getting the next set of
  /// actions.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceUri] :
  /// A filter that returns only actions with the specified source URI.
  Future<ListActionsResponse> listActions({
    String? actionType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortActionsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceUri,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListActions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (actionType != null) 'ActionType': actionType,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return ListActionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the machine learning algorithms that have been created.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only algorithms created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only algorithms created before the specified time
  /// (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of algorithms to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the algorithm name. This filter returns only algorithms whose
  /// name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListAlgorithms</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of algorithms, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  Future<ListAlgorithmsOutput> listAlgorithms({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    AlgorithmSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAlgorithms'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListAlgorithmsOutput.fromJson(jsonResponse.body);
  }

  /// Lists the aliases of a specified image or image version.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image.
  ///
  /// Parameter [alias] :
  /// The alias of the image version.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of aliases to return.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListAliases</code> didn't return the full
  /// set of aliases, the call returns a token for retrieving the next set of
  /// aliases.
  ///
  /// Parameter [version] :
  /// The version of the image. If image version is not specified, the aliases
  /// of all versions of the image are listed.
  Future<ListAliasesResponse> listAliases({
    required String imageName,
    String? alias,
    int? maxResults,
    String? nextToken,
    int? version,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    _s.validateNumRange(
      'version',
      version,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAliases'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (alias != null) 'Alias': alias,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (version != null) 'Version': version,
      },
    );

    return ListAliasesResponse.fromJson(jsonResponse.body);
  }

  /// Lists the AppImageConfigs in your account and their properties. The list
  /// can be filtered by creation time or modified time, and whether the
  /// AppImageConfig name contains a specified string.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only AppImageConfigs created on or after the
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only AppImageConfigs created on or before the
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The total number of items to return in the response. If the total number
  /// of items available is more than the value specified, a
  /// <code>NextToken</code> is provided in the response. To resume pagination,
  /// provide the <code>NextToken</code> value in the as part of a subsequent
  /// call. The default value is 10.
  ///
  /// Parameter [modifiedTimeAfter] :
  /// A filter that returns only AppImageConfigs modified on or after the
  /// specified time.
  ///
  /// Parameter [modifiedTimeBefore] :
  /// A filter that returns only AppImageConfigs modified on or before the
  /// specified time.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns only AppImageConfigs whose name contains the
  /// specified string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListImages</code> didn't return the full set
  /// of AppImageConfigs, the call returns a token for getting the next set of
  /// AppImageConfigs.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  Future<ListAppImageConfigsResponse> listAppImageConfigs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    DateTime? modifiedTimeAfter,
    DateTime? modifiedTimeBefore,
    String? nameContains,
    String? nextToken,
    AppImageConfigSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAppImageConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modifiedTimeAfter != null)
          'ModifiedTimeAfter': unixTimestampToJson(modifiedTimeAfter),
        if (modifiedTimeBefore != null)
          'ModifiedTimeBefore': unixTimestampToJson(modifiedTimeBefore),
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListAppImageConfigsResponse.fromJson(jsonResponse.body);
  }

  /// Lists apps.
  ///
  /// Parameter [domainIdEquals] :
  /// A parameter to search for the domain ID.
  ///
  /// Parameter [maxResults] :
  /// This parameter defines the maximum number of results that can be return in
  /// a single response. The <code>MaxResults</code> parameter is an upper
  /// bound, not a target. If there are more results available than the value
  /// specified, a <code>NextToken</code> is provided in the response. The
  /// <code>NextToken</code> indicates that the user should get the next set of
  /// results by providing this token as a part of a subsequent call. The
  /// default value for <code>MaxResults</code> is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is CreationTime.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is Ascending.
  ///
  /// Parameter [spaceNameEquals] :
  /// A parameter to search by space name. If <code>UserProfileNameEquals</code>
  /// is set, then this value cannot be set.
  ///
  /// Parameter [userProfileNameEquals] :
  /// A parameter to search by user profile name. If
  /// <code>SpaceNameEquals</code> is set, then this value cannot be set.
  Future<ListAppsResponse> listApps({
    String? domainIdEquals,
    int? maxResults,
    String? nextToken,
    AppSortKey? sortBy,
    SortOrder? sortOrder,
    String? spaceNameEquals,
    String? userProfileNameEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListApps'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (domainIdEquals != null) 'DomainIdEquals': domainIdEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (spaceNameEquals != null) 'SpaceNameEquals': spaceNameEquals,
        if (userProfileNameEquals != null)
          'UserProfileNameEquals': userProfileNameEquals,
      },
    );

    return ListAppsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the artifacts in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactType] :
  /// A filter that returns only artifacts of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only artifacts created on or after the specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only artifacts created on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of artifacts to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListArtifacts</code> didn't return the full
  /// set of artifacts, the call returns a token for getting the next set of
  /// artifacts.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceUri] :
  /// A filter that returns only artifacts with the specified source URI.
  Future<ListArtifactsResponse> listArtifacts({
    String? artifactType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortArtifactsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceUri,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListArtifacts'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (artifactType != null) 'ArtifactType': artifactType,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return ListArtifactsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the associations in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [associationType] :
  /// A filter that returns only associations of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only associations created on or after the specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only associations created on or before the specified
  /// time.
  ///
  /// Parameter [destinationArn] :
  /// A filter that returns only associations with the specified destination
  /// Amazon Resource Name (ARN).
  ///
  /// Parameter [destinationType] :
  /// A filter that returns only associations with the specified destination
  /// type.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of associations to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListAssociations</code> didn't return the
  /// full set of associations, the call returns a token for getting the next
  /// set of associations.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceArn] :
  /// A filter that returns only associations with the specified source ARN.
  ///
  /// Parameter [sourceType] :
  /// A filter that returns only associations with the specified source type.
  Future<ListAssociationsResponse> listAssociations({
    AssociationEdgeType? associationType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    String? destinationArn,
    String? destinationType,
    int? maxResults,
    String? nextToken,
    SortAssociationsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceArn,
    String? sourceType,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAssociations'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (associationType != null) 'AssociationType': associationType.value,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (destinationArn != null) 'DestinationArn': destinationArn,
        if (destinationType != null) 'DestinationType': destinationType,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (sourceArn != null) 'SourceArn': sourceArn,
        if (sourceType != null) 'SourceType': sourceType,
      },
    );

    return ListAssociationsResponse.fromJson(jsonResponse.body);
  }

  /// Request a list of jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Request a list of jobs, using a filter for time.
  ///
  /// Parameter [maxResults] :
  /// Request a list of jobs up to a specified limit.
  ///
  /// Parameter [nameContains] :
  /// Request a list of jobs, using a search filter for name.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// Request a list of jobs, using a filter for status.
  Future<ListAutoMLJobsResponse> listAutoMLJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    AutoMLSortBy? sortBy,
    AutoMLSortOrder? sortOrder,
    AutoMLJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListAutoMLJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListAutoMLJobsResponse.fromJson(jsonResponse.body);
  }

  /// List the candidates created for the job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// List the candidates created for the job by providing the job's name.
  ///
  /// Parameter [candidateNameEquals] :
  /// List the candidates for the job and filter by candidate name.
  ///
  /// Parameter [maxResults] :
  /// List the job's candidates up to a specified limit.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>Descending</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// List the candidates for the job and filter by status.
  Future<ListCandidatesForAutoMLJobResponse> listCandidatesForAutoMLJob({
    required String autoMLJobName,
    String? candidateNameEquals,
    int? maxResults,
    String? nextToken,
    CandidateSortBy? sortBy,
    AutoMLSortOrder? sortOrder,
    CandidateStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      300,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListCandidatesForAutoMLJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
        if (candidateNameEquals != null)
          'CandidateNameEquals': candidateNameEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListCandidatesForAutoMLJobResponse.fromJson(jsonResponse.body);
  }

  /// Retrieves the list of instances (also called <i>nodes</i> interchangeably)
  /// in a SageMaker HyperPod cluster.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [clusterName] :
  /// The string name or the Amazon Resource Name (ARN) of the SageMaker
  /// HyperPod cluster in which you want to retrieve the list of nodes.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns nodes in a SageMaker HyperPod cluster created after
  /// the specified time. Timestamps are formatted according to the ISO 8601
  /// standard.
  ///
  /// Acceptable formats include:
  ///
  /// <ul>
  /// <li>
  /// <code>YYYY-MM-DDThh:mm:ss.sssTZD</code> (UTC), for example,
  /// <code>2014-10-01T20:30:00.000Z</code>
  /// </li>
  /// <li>
  /// <code>YYYY-MM-DDThh:mm:ss.sssTZD</code> (with offset), for example,
  /// <code>2014-10-01T12:30:00.000-08:00</code>
  /// </li>
  /// <li>
  /// <code>YYYY-MM-DD</code>, for example, <code>2014-10-01</code>
  /// </li>
  /// <li>
  /// Unix time in seconds, for example, <code>1412195400</code>. This is also
  /// referred to as Unix Epoch time and represents the number of seconds since
  /// midnight, January 1, 1970 UTC.
  /// </li>
  /// </ul>
  /// For more information about the timestamp format, see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp">Timestamp</a>
  /// in the <i>Amazon Web Services Command Line Interface User Guide</i>.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns nodes in a SageMaker HyperPod cluster created before
  /// the specified time. The acceptable formats are the same as the timestamp
  /// formats for <code>CreationTimeAfter</code>. For more information about the
  /// timestamp format, see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp">Timestamp</a>
  /// in the <i>Amazon Web Services Command Line Interface User Guide</i>.
  ///
  /// Parameter [instanceGroupNameContains] :
  /// A filter that returns the instance groups whose name contain a specified
  /// string.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of nodes to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListClusterNodes</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of cluster nodes, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default value is
  /// <code>CREATION_TIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default value is <code>Ascending</code>.
  Future<ListClusterNodesResponse> listClusterNodes({
    required String clusterName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? instanceGroupNameContains,
    int? maxResults,
    String? nextToken,
    ClusterSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListClusterNodes'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (instanceGroupNameContains != null)
          'InstanceGroupNameContains': instanceGroupNameContains,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListClusterNodesResponse.fromJson(jsonResponse.body);
  }

  /// Retrieves the list of SageMaker HyperPod clusters.
  ///
  /// Parameter [creationTimeAfter] :
  /// Set a start time for the time range during which you want to list
  /// SageMaker HyperPod clusters. Timestamps are formatted according to the ISO
  /// 8601 standard.
  ///
  /// Acceptable formats include:
  ///
  /// <ul>
  /// <li>
  /// <code>YYYY-MM-DDThh:mm:ss.sssTZD</code> (UTC), for example,
  /// <code>2014-10-01T20:30:00.000Z</code>
  /// </li>
  /// <li>
  /// <code>YYYY-MM-DDThh:mm:ss.sssTZD</code> (with offset), for example,
  /// <code>2014-10-01T12:30:00.000-08:00</code>
  /// </li>
  /// <li>
  /// <code>YYYY-MM-DD</code>, for example, <code>2014-10-01</code>
  /// </li>
  /// <li>
  /// Unix time in seconds, for example, <code>1412195400</code>. This is also
  /// referred to as Unix Epoch time and represents the number of seconds since
  /// midnight, January 1, 1970 UTC.
  /// </li>
  /// </ul>
  /// For more information about the timestamp format, see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp">Timestamp</a>
  /// in the <i>Amazon Web Services Command Line Interface User Guide</i>.
  ///
  /// Parameter [creationTimeBefore] :
  /// Set an end time for the time range during which you want to list SageMaker
  /// HyperPod clusters. A filter that returns nodes in a SageMaker HyperPod
  /// cluster created before the specified time. The acceptable formats are the
  /// same as the timestamp formats for <code>CreationTimeAfter</code>. For more
  /// information about the timestamp format, see <a
  /// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp">Timestamp</a>
  /// in the <i>Amazon Web Services Command Line Interface User Guide</i>.
  ///
  /// Parameter [maxResults] :
  /// Set the maximum number of SageMaker HyperPod clusters to list.
  ///
  /// Parameter [nameContains] :
  /// Set the maximum number of instances to print in the list.
  ///
  /// Parameter [nextToken] :
  /// Set the next token to retrieve the list of SageMaker HyperPod clusters.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default value is
  /// <code>CREATION_TIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default value is <code>Ascending</code>.
  Future<ListClustersResponse> listClusters({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ClusterSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListClusters'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListClustersResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the Git repositories in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only Git repositories that were created after the
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only Git repositories that were created before the
  /// specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only Git repositories that were last modified after
  /// the specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only Git repositories that were last modified before
  /// the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of Git repositories to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the Git repositories name. This filter returns only
  /// repositories whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of a <code>ListCodeRepositoriesOutput</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To get the next
  /// set of Git repositories, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListCodeRepositoriesOutput> listCodeRepositories({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    CodeRepositorySortBy? sortBy,
    CodeRepositorySortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListCodeRepositories'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListCodeRepositoriesOutput.fromJson(jsonResponse.body);
  }

  /// Lists model compilation jobs that satisfy various filters.
  ///
  /// To create a model compilation job, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>.
  /// To get information about a particular model compilation job you have
  /// created, use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns the model compilation jobs that were created after a
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns the model compilation jobs that were created before
  /// a specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns the model compilation jobs that were modified after
  /// a specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns the model compilation jobs that were modified before
  /// a specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model compilation jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns the model compilation jobs whose name contains a
  /// specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListCompilationJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model compilation jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves model compilation jobs with a specific
  /// <code>CompilationJobStatus</code> status.
  Future<ListCompilationJobsResponse> listCompilationJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListCompilationJobsSortBy? sortBy,
    SortOrder? sortOrder,
    CompilationJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListCompilationJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListCompilationJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the contexts in your account and their properties.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextType] :
  /// A filter that returns only contexts of the specified type.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only contexts created on or after the specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only contexts created on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of contexts to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListContexts</code> didn't return the full
  /// set of contexts, the call returns a token for getting the next set of
  /// contexts.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceUri] :
  /// A filter that returns only contexts with the specified source URI.
  Future<ListContextsResponse> listContexts({
    String? contextType,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortContextsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceUri,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListContexts'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (contextType != null) 'ContextType': contextType,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return ListContextsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the data quality job definitions in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only data quality monitoring job definitions created
  /// after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only data quality monitoring job definitions created
  /// before the specified time.
  ///
  /// Parameter [endpointName] :
  /// A filter that lists the data quality job definitions associated with the
  /// specified endpoint.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of data quality monitoring job definitions to return in
  /// the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the data quality monitoring job definition name. This filter
  /// returns only data quality monitoring job definitions whose name contains
  /// the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListDataQualityJobDefinitions</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of transform jobs, use the token in the next
  /// request.&gt;
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  Future<ListDataQualityJobDefinitionsResponse> listDataQualityJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDataQualityJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListDataQualityJobDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// Returns a list of devices in the fleet.
  ///
  /// Parameter [creationTimeAfter] :
  /// Filter fleets where packaging job was created after specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Filter fleets where the edge packaging job was created before specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Select fleets where the job was updated after X
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Select fleets where the job was updated before X
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to select.
  ///
  /// Parameter [nameContains] :
  /// Filter for fleets containing this name in their fleet device name.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  ///
  /// Parameter [sortBy] :
  /// The column to sort by.
  ///
  /// Parameter [sortOrder] :
  /// What direction to sort in.
  Future<ListDeviceFleetsResponse> listDeviceFleets({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListDeviceFleetsSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDeviceFleets'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListDeviceFleetsResponse.fromJson(jsonResponse.body);
  }

  /// A list of devices.
  ///
  /// Parameter [deviceFleetName] :
  /// Filter for fleets containing this name in their device fleet name.
  ///
  /// Parameter [latestHeartbeatAfter] :
  /// Select fleets where the job was updated after X
  ///
  /// Parameter [maxResults] :
  /// Maximum number of results to select.
  ///
  /// Parameter [modelName] :
  /// A filter that searches devices that contains this name in any of their
  /// models.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  Future<ListDevicesResponse> listDevices({
    String? deviceFleetName,
    DateTime? latestHeartbeatAfter,
    int? maxResults,
    String? modelName,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDevices'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (deviceFleetName != null) 'DeviceFleetName': deviceFleetName,
        if (latestHeartbeatAfter != null)
          'LatestHeartbeatAfter': unixTimestampToJson(latestHeartbeatAfter),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelName != null) 'ModelName': modelName,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListDevicesResponse.fromJson(jsonResponse.body);
  }

  /// Lists the domains.
  ///
  /// Parameter [maxResults] :
  /// This parameter defines the maximum number of results that can be return in
  /// a single response. The <code>MaxResults</code> parameter is an upper
  /// bound, not a target. If there are more results available than the value
  /// specified, a <code>NextToken</code> is provided in the response. The
  /// <code>NextToken</code> indicates that the user should get the next set of
  /// results by providing this token as a part of a subsequent call. The
  /// default value for <code>MaxResults</code> is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  Future<ListDomainsResponse> listDomains({
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListDomains'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListDomainsResponse.fromJson(jsonResponse.body);
  }

  /// Lists all edge deployment plans.
  ///
  /// Parameter [creationTimeAfter] :
  /// Selects edge deployment plans created after this time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Selects edge deployment plans created before this time.
  ///
  /// Parameter [deviceFleetNameContains] :
  /// Selects edge deployment plans with a device fleet name containing this
  /// name.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Selects edge deployment plans that were last updated after this time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Selects edge deployment plans that were last updated before this time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to select (50 by default).
  ///
  /// Parameter [nameContains] :
  /// Selects edge deployment plans with names containing this name.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  ///
  /// Parameter [sortBy] :
  /// The column by which to sort the edge deployment plans. Can be one of
  /// <code>NAME</code>, <code>DEVICEFLEETNAME</code>,
  /// <code>CREATIONTIME</code>, <code>LASTMODIFIEDTIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The direction of the sorting (ascending or descending).
  Future<ListEdgeDeploymentPlansResponse> listEdgeDeploymentPlans({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? deviceFleetNameContains,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListEdgeDeploymentPlansSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEdgeDeploymentPlans'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (deviceFleetNameContains != null)
          'DeviceFleetNameContains': deviceFleetNameContains,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListEdgeDeploymentPlansResponse.fromJson(jsonResponse.body);
  }

  /// Returns a list of edge packaging jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// Select jobs where the job was created after specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Select jobs where the job was created before specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Select jobs where the job was updated after specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Select jobs where the job was updated before specified time.
  ///
  /// Parameter [maxResults] :
  /// Maximum number of results to select.
  ///
  /// Parameter [modelNameContains] :
  /// Filter for jobs where the model name contains this string.
  ///
  /// Parameter [nameContains] :
  /// Filter for jobs containing this name in their packaging job name.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  ///
  /// Parameter [sortBy] :
  /// Use to specify what column to sort by.
  ///
  /// Parameter [sortOrder] :
  /// What direction to sort by.
  ///
  /// Parameter [statusEquals] :
  /// The job status to filter for.
  Future<ListEdgePackagingJobsResponse> listEdgePackagingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? modelNameContains,
    String? nameContains,
    String? nextToken,
    ListEdgePackagingJobsSortBy? sortBy,
    SortOrder? sortOrder,
    EdgePackagingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEdgePackagingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelNameContains != null) 'ModelNameContains': modelNameContains,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListEdgePackagingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists endpoint configurations.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only endpoint configurations with a creation time
  /// greater than or equal to the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only endpoint configurations created before the
  /// specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of training jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the endpoint configuration name. This filter returns only
  /// endpoint configurations whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListEndpointConfig</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of endpoint configurations, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  Future<ListEndpointConfigsOutput> listEndpointConfigs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    EndpointConfigSortKey? sortBy,
    OrderKey? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEndpointConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListEndpointConfigsOutput.fromJson(jsonResponse.body);
  }

  /// Lists endpoints.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only endpoints with a creation time greater than or
  /// equal to the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only endpoints that were created before the
  /// specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only endpoints that were modified after the
  /// specified timestamp.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only endpoints that were modified before the
  /// specified timestamp.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of endpoints to return in the response. This value
  /// defaults to 10.
  ///
  /// Parameter [nameContains] :
  /// A string in endpoint names. This filter returns only endpoints whose name
  /// contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of a <code>ListEndpoints</code> request was truncated, the
  /// response includes a <code>NextToken</code>. To retrieve the next set of
  /// endpoints, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sorts the list of results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only endpoints with the specified status.
  Future<ListEndpointsOutput> listEndpoints({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    EndpointSortKey? sortBy,
    OrderKey? sortOrder,
    EndpointStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListEndpoints'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListEndpointsOutput.fromJson(jsonResponse.body);
  }

  /// Lists all the experiments in your account. The list can be filtered to
  /// show only experiments that were created in a specific time range. The list
  /// can be sorted by experiment name or creation time.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only experiments created after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only experiments created before the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of experiments to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListExperiments</code> didn't return the
  /// full set of experiments, the call returns a token for getting the next set
  /// of experiments.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  Future<ListExperimentsResponse> listExperiments({
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortExperimentsBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListExperiments'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListExperimentsResponse.fromJson(jsonResponse.body);
  }

  /// List <code>FeatureGroup</code>s based on given filter and order.
  ///
  /// Parameter [creationTimeAfter] :
  /// Use this parameter to search for <code>FeatureGroups</code>s created after
  /// a specific date and time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Use this parameter to search for <code>FeatureGroups</code>s created
  /// before a specific date and time.
  ///
  /// Parameter [featureGroupStatusEquals] :
  /// A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code>
  /// status.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results returned by <code>ListFeatureGroups</code>.
  ///
  /// Parameter [nameContains] :
  /// A string that partially matches one or more <code>FeatureGroup</code>s
  /// names. Filters <code>FeatureGroup</code>s by name.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination of <code>ListFeatureGroups</code> results.
  ///
  /// Parameter [offlineStoreStatusEquals] :
  /// An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code>
  /// status.
  ///
  /// Parameter [sortBy] :
  /// The value on which the feature group list is sorted.
  ///
  /// Parameter [sortOrder] :
  /// The order in which feature groups are listed.
  Future<ListFeatureGroupsResponse> listFeatureGroups({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    FeatureGroupStatus? featureGroupStatusEquals,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    OfflineStoreStatusValue? offlineStoreStatusEquals,
    FeatureGroupSortBy? sortBy,
    FeatureGroupSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListFeatureGroups'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (featureGroupStatusEquals != null)
          'FeatureGroupStatusEquals': featureGroupStatusEquals.value,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (offlineStoreStatusEquals != null)
          'OfflineStoreStatusEquals': offlineStoreStatusEquals.value,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListFeatureGroupsResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the flow definitions in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only flow definitions with a creation time greater
  /// than or equal to the specified timestamp.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only flow definitions that were created before the
  /// specified timestamp.
  ///
  /// Parameter [maxResults] :
  /// The total number of items to return. If the total number of available
  /// items is more than the value specified in <code>MaxResults</code>, then a
  /// <code>NextToken</code> will be provided in the output that you can use to
  /// resume pagination.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination.
  ///
  /// Parameter [sortOrder] :
  /// An optional value that specifies whether you want the results sorted in
  /// <code>Ascending</code> or <code>Descending</code> order.
  Future<ListFlowDefinitionsResponse> listFlowDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nextToken,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListFlowDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListFlowDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// List hub content versions.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubContentName] :
  /// The name of the hub content.
  ///
  /// Parameter [hubContentType] :
  /// The type of hub content to list versions of.
  ///
  /// Parameter [hubName] :
  /// The name of the hub to list the content versions of.
  ///
  /// Parameter [creationTimeAfter] :
  /// Only list hub content versions that were created after the time specified.
  ///
  /// Parameter [creationTimeBefore] :
  /// Only list hub content versions that were created before the time
  /// specified.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of hub content versions to list.
  ///
  /// Parameter [maxSchemaVersion] :
  /// The upper bound of the hub content schema version.
  ///
  /// Parameter [minVersion] :
  /// The lower bound of the hub content versions to list.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListHubContentVersions</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of hub content versions, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sort hub content versions by either name or creation time.
  ///
  /// Parameter [sortOrder] :
  /// Sort hub content versions by ascending or descending order.
  Future<ListHubContentVersionsResponse> listHubContentVersions({
    required String hubContentName,
    required HubContentType hubContentType,
    required String hubName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? maxSchemaVersion,
    String? minVersion,
    String? nextToken,
    HubContentSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHubContentVersions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubContentName': hubContentName,
        'HubContentType': hubContentType.value,
        'HubName': hubName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (maxSchemaVersion != null) 'MaxSchemaVersion': maxSchemaVersion,
        if (minVersion != null) 'MinVersion': minVersion,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListHubContentVersionsResponse.fromJson(jsonResponse.body);
  }

  /// List the contents of a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubContentType] :
  /// The type of hub content to list.
  ///
  /// Parameter [hubName] :
  /// The name of the hub to list the contents of.
  ///
  /// Parameter [creationTimeAfter] :
  /// Only list hub content that was created after the time specified.
  ///
  /// Parameter [creationTimeBefore] :
  /// Only list hub content that was created before the time specified.
  ///
  /// Parameter [maxResults] :
  /// The maximum amount of hub content to list.
  ///
  /// Parameter [maxSchemaVersion] :
  /// The upper bound of the hub content schema verion.
  ///
  /// Parameter [nameContains] :
  /// Only list hub content if the name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListHubContents</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of hub content, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sort hub content versions by either name or creation time.
  ///
  /// Parameter [sortOrder] :
  /// Sort hubs by ascending or descending order.
  Future<ListHubContentsResponse> listHubContents({
    required HubContentType hubContentType,
    required String hubName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? maxSchemaVersion,
    String? nameContains,
    String? nextToken,
    HubContentSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHubContents'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubContentType': hubContentType.value,
        'HubName': hubName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (maxSchemaVersion != null) 'MaxSchemaVersion': maxSchemaVersion,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListHubContentsResponse.fromJson(jsonResponse.body);
  }

  /// List all existing hubs.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// Parameter [creationTimeAfter] :
  /// Only list hubs that were created after the time specified.
  ///
  /// Parameter [creationTimeBefore] :
  /// Only list hubs that were created before the time specified.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Only list hubs that were last modified after the time specified.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Only list hubs that were last modified before the time specified.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of hubs to list.
  ///
  /// Parameter [nameContains] :
  /// Only list hubs with names that contain the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListHubs</code> request was truncated,
  /// the response includes a <code>NextToken</code>. To retrieve the next set
  /// of hubs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sort hubs by either name or creation time.
  ///
  /// Parameter [sortOrder] :
  /// Sort hubs by ascending or descending order.
  Future<ListHubsResponse> listHubs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    HubSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHubs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListHubsResponse.fromJson(jsonResponse.body);
  }

  /// Returns information about the human task user interfaces in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only human task user interfaces with a creation time
  /// greater than or equal to the specified timestamp.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only human task user interfaces that were created
  /// before the specified timestamp.
  ///
  /// Parameter [maxResults] :
  /// The total number of items to return. If the total number of available
  /// items is more than the value specified in <code>MaxResults</code>, then a
  /// <code>NextToken</code> will be provided in the output that you can use to
  /// resume pagination.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination.
  ///
  /// Parameter [sortOrder] :
  /// An optional value that specifies whether you want the results sorted in
  /// <code>Ascending</code> or <code>Descending</code> order.
  Future<ListHumanTaskUisResponse> listHumanTaskUis({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nextToken,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHumanTaskUis'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListHumanTaskUisResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html">HyperParameterTuningJobSummary</a>
  /// objects that describe the hyperparameter tuning jobs launched in your
  /// account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only tuning jobs that were created after the
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only tuning jobs that were created before the
  /// specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only tuning jobs that were modified after the
  /// specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only tuning jobs that were modified before the
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of tuning jobs to return. The default value is 10.
  ///
  /// Parameter [nameContains] :
  /// A string in the tuning job name. This filter returns only tuning jobs
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListHyperParameterTuningJobs</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of tuning jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only tuning jobs with the specified status.
  Future<ListHyperParameterTuningJobsResponse> listHyperParameterTuningJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    HyperParameterTuningJobSortByOptions? sortBy,
    SortOrder? sortOrder,
    HyperParameterTuningJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListHyperParameterTuningJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListHyperParameterTuningJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the versions of a specified image and their properties. The list can
  /// be filtered by creation time or modified time.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to list the versions of.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only versions created on or after the specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only versions created on or before the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only versions modified on or after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only versions modified on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of versions to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListImageVersions</code> didn't return the
  /// full set of versions, the call returns a token for getting the next set of
  /// versions.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CREATION_TIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>DESCENDING</code>.
  Future<ListImageVersionsResponse> listImageVersions({
    required String imageName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nextToken,
    ImageVersionSortBy? sortBy,
    ImageVersionSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListImageVersions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListImageVersionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the images in your account and their properties. The list can be
  /// filtered by creation time or modified time, and whether the image name
  /// contains a specified string.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only images created on or after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only images created on or before the specified time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only images modified on or after the specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only images modified on or before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of images to return in the response. The default value
  /// is 10.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns only images whose name contains the specified
  /// string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListImages</code> didn't return the full set
  /// of images, the call returns a token for getting the next set of images.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CREATION_TIME</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>DESCENDING</code>.
  Future<ListImagesResponse> listImages({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ImageSortBy? sortBy,
    ImageSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListImages'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListImagesResponse.fromJson(jsonResponse.body);
  }

  /// Lists the inference components in your account and their properties.
  ///
  /// Parameter [creationTimeAfter] :
  /// Filters the results to only those inference components that were created
  /// after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Filters the results to only those inference components that were created
  /// before the specified time.
  ///
  /// Parameter [endpointNameEquals] :
  /// An endpoint name to filter the listed inference components. The response
  /// includes only those inference components that are hosted at the specified
  /// endpoint.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Filters the results to only those inference components that were updated
  /// after the specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Filters the results to only those inference components that were updated
  /// before the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of inference components to return in the response. This
  /// value defaults to 10.
  ///
  /// Parameter [nameContains] :
  /// Filters the results to only those inference components with a name that
  /// contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// A token that you use to get the next set of results following a truncated
  /// response. If the response to the previous request was truncated, that
  /// response provides the value for this token.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort the inference components in the response. The
  /// default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// Filters the results to only those inference components with the specified
  /// status.
  ///
  /// Parameter [variantNameEquals] :
  /// A production variant name to filter the listed inference components. The
  /// response includes only those inference components that are hosted at the
  /// specified variant.
  Future<ListInferenceComponentsOutput> listInferenceComponents({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointNameEquals,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    InferenceComponentSortKey? sortBy,
    OrderKey? sortOrder,
    InferenceComponentStatus? statusEquals,
    String? variantNameEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListInferenceComponents'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointNameEquals != null)
          'EndpointNameEquals': endpointNameEquals,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
        if (variantNameEquals != null) 'VariantNameEquals': variantNameEquals,
      },
    );

    return ListInferenceComponentsOutput.fromJson(jsonResponse.body);
  }

  /// Returns the list of all inference experiments.
  ///
  /// Parameter [creationTimeAfter] :
  /// Selects inference experiments which were created after this timestamp.
  ///
  /// Parameter [creationTimeBefore] :
  /// Selects inference experiments which were created before this timestamp.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// Selects inference experiments which were last modified after this
  /// timestamp.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// Selects inference experiments which were last modified before this
  /// timestamp.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to select.
  ///
  /// Parameter [nameContains] :
  /// Selects inference experiments whose names contain this name.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to need
  /// tokening.
  ///
  /// Parameter [sortBy] :
  /// The column by which to sort the listed inference experiments.
  ///
  /// Parameter [sortOrder] :
  /// The direction of sorting (ascending or descending).
  ///
  /// Parameter [statusEquals] :
  /// Selects inference experiments which are in this status. For the possible
  /// statuses, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html">DescribeInferenceExperiment</a>.
  ///
  /// Parameter [type] :
  /// Selects inference experiments of this type. For the possible types of
  /// inference experiments, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceExperiment.html">CreateInferenceExperiment</a>.
  Future<ListInferenceExperimentsResponse> listInferenceExperiments({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortInferenceExperimentsBy? sortBy,
    SortOrder? sortOrder,
    InferenceExperimentStatus? statusEquals,
    InferenceExperimentType? type,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListInferenceExperiments'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
        if (type != null) 'Type': type.value,
      },
    );

    return ListInferenceExperimentsResponse.fromJson(jsonResponse.body);
  }

  /// Returns a list of the subtasks for an Inference Recommender job.
  ///
  /// The supported subtasks are benchmarks, which evaluate the performance of
  /// your model on different instance types.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobName] :
  /// The name for the Inference Recommender job.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return.
  ///
  /// Parameter [nextToken] :
  /// A token that you can specify to return more results from the list. Specify
  /// this field if you have a token that was returned from a previous request.
  ///
  /// Parameter [status] :
  /// A filter to return benchmarks of a specified status. If this field is left
  /// empty, then all benchmarks are returned.
  ///
  /// Parameter [stepType] :
  /// A filter to return details about the specified type of subtask.
  ///
  /// <code>BENCHMARK</code>: Evaluate the performance of your model on
  /// different instance types.
  Future<ListInferenceRecommendationsJobStepsResponse>
      listInferenceRecommendationsJobSteps({
    required String jobName,
    int? maxResults,
    String? nextToken,
    RecommendationJobStatus? status,
    RecommendationStepType? stepType,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListInferenceRecommendationsJobSteps'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobName': jobName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (status != null) 'Status': status.value,
        if (stepType != null) 'StepType': stepType.value,
      },
    );

    return ListInferenceRecommendationsJobStepsResponse.fromJson(
        jsonResponse.body);
  }

  /// Lists recommendation jobs that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only jobs that were last modified after the
  /// specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only jobs that were last modified before the
  /// specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of recommendations to return in the response.
  ///
  /// Parameter [modelNameEquals] :
  /// A filter that returns only jobs that were created for this model.
  ///
  /// Parameter [modelPackageVersionArnEquals] :
  /// A filter that returns only jobs that were created for this versioned model
  /// package.
  ///
  /// Parameter [nameContains] :
  /// A string in the job name. This filter returns only recommendations whose
  /// name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous
  /// <code>ListInferenceRecommendationsJobsRequest</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of recommendations, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only inference recommendations jobs with a
  /// specific status.
  Future<ListInferenceRecommendationsJobsResponse>
      listInferenceRecommendationsJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? modelNameEquals,
    String? modelPackageVersionArnEquals,
    String? nameContains,
    String? nextToken,
    ListInferenceRecommendationsJobsSortBy? sortBy,
    SortOrder? sortOrder,
    RecommendationJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListInferenceRecommendationsJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelNameEquals != null) 'ModelNameEquals': modelNameEquals,
        if (modelPackageVersionArnEquals != null)
          'ModelPackageVersionArnEquals': modelPackageVersionArnEquals,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListInferenceRecommendationsJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of labeling jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only labeling jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only labeling jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only labeling jobs modified after the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only labeling jobs modified before the specified
  /// time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of labeling jobs to return in each page of the
  /// response.
  ///
  /// Parameter [nameContains] :
  /// A string in the labeling job name. This filter returns only labeling jobs
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListLabelingJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of labeling jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only labeling jobs with a specific status.
  Future<ListLabelingJobsResponse> listLabelingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    LabelingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListLabelingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListLabelingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of labeling jobs assigned to a specified work team.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [workteamArn] :
  /// The Amazon Resource Name (ARN) of the work team for which you want to see
  /// labeling jobs for.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only labeling jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only labeling jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [jobReferenceCodeContains] :
  /// A filter the limits jobs to only the ones whose job reference code
  /// contains the specified string.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of labeling jobs to return in each page of the
  /// response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListLabelingJobsForWorkteam</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of labeling jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListLabelingJobsForWorkteamResponse> listLabelingJobsForWorkteam({
    required String workteamArn,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? jobReferenceCodeContains,
    int? maxResults,
    String? nextToken,
    ListLabelingJobsForWorkteamSortByOptions? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListLabelingJobsForWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamArn': workteamArn,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (jobReferenceCodeContains != null)
          'JobReferenceCodeContains': jobReferenceCodeContains,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListLabelingJobsForWorkteamResponse.fromJson(jsonResponse.body);
  }

  /// A list of lineage groups shared with your Amazon Web Services account. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
  /// Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer
  /// Guide</i>.
  ///
  /// Parameter [createdAfter] :
  /// A timestamp to filter against lineage groups created after a certain point
  /// in time.
  ///
  /// Parameter [createdBefore] :
  /// A timestamp to filter against lineage groups created before a certain
  /// point in time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of endpoints to return in the response. This value
  /// defaults to 10.
  ///
  /// Parameter [nextToken] :
  /// If the response is truncated, SageMaker returns this token. To retrieve
  /// the next set of algorithms, use it in the subsequent request.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  Future<ListLineageGroupsResponse> listLineageGroups({
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortLineageGroupsBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListLineageGroups'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListLineageGroupsResponse.fromJson(jsonResponse.body);
  }

  /// Lists model bias jobs definitions that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model bias jobs created after a specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model bias jobs created before a specified
  /// time.
  ///
  /// Parameter [endpointName] :
  /// Name of the endpoint to monitor for model bias.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model bias jobs to return in the response. The
  /// default value is 10.
  ///
  /// Parameter [nameContains] :
  /// Filter for model bias jobs whose name contains a specified string.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort results by the <code>Name</code> or
  /// <code>CreationTime</code> field. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  Future<ListModelBiasJobDefinitionsResponse> listModelBiasJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelBiasJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelBiasJobDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// List the export jobs for the Amazon SageMaker Model Card.
  ///
  /// Parameter [modelCardName] :
  /// List export jobs for the model card with the specified name.
  ///
  /// Parameter [creationTimeAfter] :
  /// Only list model card export jobs that were created after the time
  /// specified.
  ///
  /// Parameter [creationTimeBefore] :
  /// Only list model card export jobs that were created before the time
  /// specified.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model card export jobs to list.
  ///
  /// Parameter [modelCardExportJobNameContains] :
  /// Only list model card export jobs with names that contain the specified
  /// string.
  ///
  /// Parameter [modelCardVersion] :
  /// List export jobs for the model card with the specified version.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModelCardExportJobs</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of model card export jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sort model card export jobs by either name or creation time. Sorts by
  /// creation time by default.
  ///
  /// Parameter [sortOrder] :
  /// Sort model card export jobs by ascending or descending order.
  ///
  /// Parameter [statusEquals] :
  /// Only list model card export jobs with the specified status.
  Future<ListModelCardExportJobsResponse> listModelCardExportJobs({
    required String modelCardName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? modelCardExportJobNameContains,
    int? modelCardVersion,
    String? nextToken,
    ModelCardExportJobSortBy? sortBy,
    ModelCardExportJobSortOrder? sortOrder,
    ModelCardExportJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelCardExportJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardName': modelCardName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelCardExportJobNameContains != null)
          'ModelCardExportJobNameContains': modelCardExportJobNameContains,
        if (modelCardVersion != null) 'ModelCardVersion': modelCardVersion,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListModelCardExportJobsResponse.fromJson(jsonResponse.body);
  }

  /// List existing versions of an Amazon SageMaker Model Card.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [modelCardName] :
  /// List model card versions for the model card with the specified name or
  /// Amazon Resource Name (ARN).
  ///
  /// Parameter [creationTimeAfter] :
  /// Only list model card versions that were created after the time specified.
  ///
  /// Parameter [creationTimeBefore] :
  /// Only list model card versions that were created before the time specified.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model card versions to list.
  ///
  /// Parameter [modelCardStatus] :
  /// Only list model card versions with the specified approval status.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModelCardVersions</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of model card versions, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sort listed model card versions by version. Sorts by version by default.
  ///
  /// Parameter [sortOrder] :
  /// Sort model card versions by ascending or descending order.
  Future<ListModelCardVersionsResponse> listModelCardVersions({
    required String modelCardName,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    ModelCardStatus? modelCardStatus,
    String? nextToken,
    ModelCardVersionSortBy? sortBy,
    ModelCardSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelCardVersions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardName': modelCardName,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelCardStatus != null) 'ModelCardStatus': modelCardStatus.value,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelCardVersionsResponse.fromJson(jsonResponse.body);
  }

  /// List existing model cards.
  ///
  /// Parameter [creationTimeAfter] :
  /// Only list model cards that were created after the time specified.
  ///
  /// Parameter [creationTimeBefore] :
  /// Only list model cards that were created before the time specified.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model cards to list.
  ///
  /// Parameter [modelCardStatus] :
  /// Only list model cards with the specified approval status.
  ///
  /// Parameter [nameContains] :
  /// Only list model cards with names that contain the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModelCards</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model cards, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sort model cards by either name or creation time. Sorts by creation time
  /// by default.
  ///
  /// Parameter [sortOrder] :
  /// Sort model cards by ascending or descending order.
  Future<ListModelCardsResponse> listModelCards({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    ModelCardStatus? modelCardStatus,
    String? nameContains,
    String? nextToken,
    ModelCardSortBy? sortBy,
    ModelCardSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelCards'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelCardStatus != null) 'ModelCardStatus': modelCardStatus.value,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelCardsResponse.fromJson(jsonResponse.body);
  }

  /// Lists model explainability job definitions that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model explainability jobs created after a
  /// specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model explainability jobs created before a
  /// specified time.
  ///
  /// Parameter [endpointName] :
  /// Name of the endpoint to monitor for model explainability.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of jobs to return in the response. The default value is
  /// 10.
  ///
  /// Parameter [nameContains] :
  /// Filter for model explainability jobs whose name contains a specified
  /// string.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort results by the <code>Name</code> or
  /// <code>CreationTime</code> field. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  Future<ListModelExplainabilityJobDefinitionsResponse>
      listModelExplainabilityJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelExplainabilityJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelExplainabilityJobDefinitionsResponse.fromJson(
        jsonResponse.body);
  }

  /// Lists the domain, framework, task, and model name of standard machine
  /// learning models found in common model zoos.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of models to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModelMetadataResponse</code>
  /// request was truncated, the response includes a NextToken. To retrieve the
  /// next set of model metadata, use the token in the next request.
  ///
  /// Parameter [searchExpression] :
  /// One or more filters that searches for the specified resource or resources
  /// in a search. All resource objects that satisfy the expression's condition
  /// are included in the search results. Specify the Framework,
  /// FrameworkVersion, Domain or Task to filter supported. Filter names and
  /// values are case-sensitive.
  Future<ListModelMetadataResponse> listModelMetadata({
    int? maxResults,
    String? nextToken,
    ModelMetadataSearchExpression? searchExpression,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelMetadata'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (searchExpression != null) 'SearchExpression': searchExpression,
      },
    );

    return ListModelMetadataResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the model groups in your Amazon Web Services account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model groups created after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model groups created before the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the model group name. This filter returns only model groups
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListModelPackageGroups</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of model groups, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListModelPackageGroupsOutput> listModelPackageGroups({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ModelPackageGroupSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelPackageGroups'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelPackageGroupsOutput.fromJson(jsonResponse.body);
  }

  /// Lists the model packages that have been created.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model packages created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model packages created before the specified
  /// time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of model packages to return in the response.
  ///
  /// Parameter [modelApprovalStatus] :
  /// A filter that returns only the model packages with the specified approval
  /// status.
  ///
  /// Parameter [modelPackageGroupName] :
  /// A filter that returns only model versions that belong to the specified
  /// model group.
  ///
  /// Parameter [modelPackageType] :
  /// A filter that returns only the model packages of the specified type. This
  /// can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>UNVERSIONED</code> - List only unversioined models. This is the
  /// default value if no <code>ModelPackageType</code> is specified.
  /// </li>
  /// <li>
  /// <code>VERSIONED</code> - List only versioned models.
  /// </li>
  /// <li>
  /// <code>BOTH</code> - List both versioned and unversioned models.
  /// </li>
  /// </ul>
  ///
  /// Parameter [nameContains] :
  /// A string in the model package name. This filter returns only model
  /// packages whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModelPackages</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model packages, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  Future<ListModelPackagesOutput> listModelPackages({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    ModelApprovalStatus? modelApprovalStatus,
    String? modelPackageGroupName,
    ModelPackageType? modelPackageType,
    String? nameContains,
    String? nextToken,
    ModelPackageSortBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelPackages'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modelApprovalStatus != null)
          'ModelApprovalStatus': modelApprovalStatus.value,
        if (modelPackageGroupName != null)
          'ModelPackageGroupName': modelPackageGroupName,
        if (modelPackageType != null)
          'ModelPackageType': modelPackageType.value,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelPackagesOutput.fromJson(jsonResponse.body);
  }

  /// Gets a list of model quality monitoring job definitions in your account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only model quality monitoring job definitions
  /// created after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only model quality monitoring job definitions
  /// created before the specified time.
  ///
  /// Parameter [endpointName] :
  /// A filter that returns only model quality monitoring job definitions that
  /// are associated with the specified endpoint.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a call to
  /// <code>ListModelQualityJobDefinitions</code>.
  ///
  /// Parameter [nameContains] :
  /// A string in the transform job name. This filter returns only model quality
  /// monitoring job definitions whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListModelQualityJobDefinitions</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of model quality monitoring job definitions, use the
  /// token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  Future<ListModelQualityJobDefinitionsResponse>
      listModelQualityJobDefinitions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    MonitoringJobDefinitionSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModelQualityJobDefinitions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelQualityJobDefinitionsResponse.fromJson(jsonResponse.body);
  }

  /// Lists models created with the <code>CreateModel</code> API.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only models with a creation time greater than or
  /// equal to the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only models created before the specified time
  /// (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of models to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the model name. This filter returns only models whose name
  /// contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the response to a previous <code>ListModels</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of models, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// Sorts the list of results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  Future<ListModelsOutput> listModels({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ModelSortKey? sortBy,
    OrderKey? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListModels'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListModelsOutput.fromJson(jsonResponse.body);
  }

  /// Gets a list of past alerts in a model monitoring schedule.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only alerts created on or after the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only alerts created on or before the specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to display. The default is 100.
  ///
  /// Parameter [monitoringAlertName] :
  /// The name of a monitoring alert.
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of a monitoring schedule.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListMonitoringAlertHistory</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of alerts in the history, use the token in the next
  /// request.
  ///
  /// Parameter [sortBy] :
  /// The field used to sort results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order, whether <code>Ascending</code> or <code>Descending</code>,
  /// of the alert history. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only alerts with a specific status.
  Future<ListMonitoringAlertHistoryResponse> listMonitoringAlertHistory({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? monitoringAlertName,
    String? monitoringScheduleName,
    String? nextToken,
    MonitoringAlertHistorySortKey? sortBy,
    SortOrder? sortOrder,
    MonitoringAlertStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListMonitoringAlertHistory'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (monitoringAlertName != null)
          'MonitoringAlertName': monitoringAlertName,
        if (monitoringScheduleName != null)
          'MonitoringScheduleName': monitoringScheduleName,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListMonitoringAlertHistoryResponse.fromJson(jsonResponse.body);
  }

  /// Gets the alerts for a single monitoring schedule.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of a monitoring schedule.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to display. The default is 100.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListMonitoringAlerts</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of alerts in the history, use the token in the next request.
  Future<ListMonitoringAlertsResponse> listMonitoringAlerts({
    required String monitoringScheduleName,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListMonitoringAlerts'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListMonitoringAlertsResponse.fromJson(jsonResponse.body);
  }

  /// Returns list of all monitoring job executions.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only jobs created after a specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only jobs created before a specified time.
  ///
  /// Parameter [endpointName] :
  /// Name of a specific endpoint to fetch jobs for.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only jobs modified before a specified time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only jobs modified after a specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of jobs to return in the response. The default value is
  /// 10.
  ///
  /// Parameter [monitoringJobDefinitionName] :
  /// Gets a list of the monitoring job runs of the specified monitoring job
  /// definitions.
  ///
  /// Parameter [monitoringScheduleName] :
  /// Name of a specific schedule to fetch jobs for.
  ///
  /// Parameter [monitoringTypeEquals] :
  /// A filter that returns only the monitoring job runs of the specified
  /// monitoring type.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [scheduledTimeAfter] :
  /// Filter for jobs scheduled after a specified time.
  ///
  /// Parameter [scheduledTimeBefore] :
  /// Filter for jobs scheduled before a specified time.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort the results by the <code>Status</code>,
  /// <code>CreationTime</code>, or <code>ScheduledTime</code> field. The
  /// default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only jobs with a specific status.
  Future<ListMonitoringExecutionsResponse> listMonitoringExecutions({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? monitoringJobDefinitionName,
    String? monitoringScheduleName,
    MonitoringType? monitoringTypeEquals,
    String? nextToken,
    DateTime? scheduledTimeAfter,
    DateTime? scheduledTimeBefore,
    MonitoringExecutionSortKey? sortBy,
    SortOrder? sortOrder,
    ExecutionStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListMonitoringExecutions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (monitoringJobDefinitionName != null)
          'MonitoringJobDefinitionName': monitoringJobDefinitionName,
        if (monitoringScheduleName != null)
          'MonitoringScheduleName': monitoringScheduleName,
        if (monitoringTypeEquals != null)
          'MonitoringTypeEquals': monitoringTypeEquals.value,
        if (nextToken != null) 'NextToken': nextToken,
        if (scheduledTimeAfter != null)
          'ScheduledTimeAfter': unixTimestampToJson(scheduledTimeAfter),
        if (scheduledTimeBefore != null)
          'ScheduledTimeBefore': unixTimestampToJson(scheduledTimeBefore),
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListMonitoringExecutionsResponse.fromJson(jsonResponse.body);
  }

  /// Returns list of all monitoring schedules.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only monitoring schedules created after a specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only monitoring schedules created before a specified
  /// time.
  ///
  /// Parameter [endpointName] :
  /// Name of a specific endpoint to fetch schedules for.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only monitoring schedules modified after a specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only monitoring schedules modified before a
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of jobs to return in the response. The default value is
  /// 10.
  ///
  /// Parameter [monitoringJobDefinitionName] :
  /// Gets a list of the monitoring schedules for the specified monitoring job
  /// definition.
  ///
  /// Parameter [monitoringTypeEquals] :
  /// A filter that returns only the monitoring schedules for the specified
  /// monitoring type.
  ///
  /// Parameter [nameContains] :
  /// Filter for monitoring schedules whose name contains a specified string.
  ///
  /// Parameter [nextToken] :
  /// The token returned if the response is truncated. To retrieve the next set
  /// of job executions, use it in the next request.
  ///
  /// Parameter [sortBy] :
  /// Whether to sort the results by the <code>Status</code>,
  /// <code>CreationTime</code>, or <code>ScheduledTime</code> field. The
  /// default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// Whether to sort the results in <code>Ascending</code> or
  /// <code>Descending</code> order. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only monitoring schedules modified before a
  /// specified time.
  Future<ListMonitoringSchedulesResponse> listMonitoringSchedules({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? endpointName,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? monitoringJobDefinitionName,
    MonitoringType? monitoringTypeEquals,
    String? nameContains,
    String? nextToken,
    MonitoringScheduleSortKey? sortBy,
    SortOrder? sortOrder,
    ScheduleStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListMonitoringSchedules'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (endpointName != null) 'EndpointName': endpointName,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (monitoringJobDefinitionName != null)
          'MonitoringJobDefinitionName': monitoringJobDefinitionName,
        if (monitoringTypeEquals != null)
          'MonitoringTypeEquals': monitoringTypeEquals.value,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListMonitoringSchedulesResponse.fromJson(jsonResponse.body);
  }

  /// Lists notebook instance lifestyle configurations created with the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a>
  /// API.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only lifecycle configurations that were created
  /// after the specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only lifecycle configurations that were created
  /// before the specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only lifecycle configurations that were modified
  /// after the specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only lifecycle configurations that were modified
  /// before the specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of lifecycle configurations to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the lifecycle configuration name. This filter returns only
  /// lifecycle configurations whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of a <code>ListNotebookInstanceLifecycleConfigs</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// get the next set of lifecycle configurations, use the token in the next
  /// request.
  ///
  /// Parameter [sortBy] :
  /// Sorts the list of results. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  Future<ListNotebookInstanceLifecycleConfigsOutput>
      listNotebookInstanceLifecycleConfigs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    NotebookInstanceLifecycleConfigSortKey? sortBy,
    NotebookInstanceLifecycleConfigSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListNotebookInstanceLifecycleConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListNotebookInstanceLifecycleConfigsOutput.fromJson(
        jsonResponse.body);
  }

  /// Returns a list of the SageMaker notebook instances in the requester's
  /// account in an Amazon Web Services Region.
  ///
  /// Parameter [additionalCodeRepositoryEquals] :
  /// A filter that returns only notebook instances with associated with the
  /// specified git repository.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only notebook instances that were created after the
  /// specified time (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only notebook instances that were created before the
  /// specified time (timestamp).
  ///
  /// Parameter [defaultCodeRepositoryContains] :
  /// A string in the name or URL of a Git repository associated with this
  /// notebook instance. This filter returns only notebook instances associated
  /// with a git repository with a name that contains the specified string.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only notebook instances that were modified after the
  /// specified time (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only notebook instances that were modified before
  /// the specified time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of notebook instances to return.
  ///
  /// Parameter [nameContains] :
  /// A string in the notebook instances' name. This filter returns only
  /// notebook instances whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to the <code>ListNotebookInstances</code> is
  /// truncated, the response includes a <code>NextToken</code>. You can use
  /// this token in your subsequent <code>ListNotebookInstances</code> request
  /// to fetch the next set of notebook instances.
  /// <note>
  /// You might specify a filter or a sort order in your request. When response
  /// is truncated, you must use the same values for the filer and sort order in
  /// the next request.
  /// </note>
  ///
  /// Parameter [notebookInstanceLifecycleConfigNameContains] :
  /// A string in the name of a notebook instances lifecycle configuration
  /// associated with this notebook instance. This filter returns only notebook
  /// instances associated with a lifecycle configuration with a name that
  /// contains the specified string.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only notebook instances with the specified status.
  Future<ListNotebookInstancesOutput> listNotebookInstances({
    String? additionalCodeRepositoryEquals,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    String? defaultCodeRepositoryContains,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    String? notebookInstanceLifecycleConfigNameContains,
    NotebookInstanceSortKey? sortBy,
    NotebookInstanceSortOrder? sortOrder,
    NotebookInstanceStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListNotebookInstances'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (additionalCodeRepositoryEquals != null)
          'AdditionalCodeRepositoryEquals': additionalCodeRepositoryEquals,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (defaultCodeRepositoryContains != null)
          'DefaultCodeRepositoryContains': defaultCodeRepositoryContains,
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (notebookInstanceLifecycleConfigNameContains != null)
          'NotebookInstanceLifecycleConfigNameContains':
              notebookInstanceLifecycleConfigNameContains,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListNotebookInstancesOutput.fromJson(jsonResponse.body);
  }

  /// Gets a list of <code>PipeLineExecutionStep</code> objects.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [maxResults] :
  /// The maximum number of pipeline execution steps to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListPipelineExecutionSteps</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of pipeline execution steps, use the token in the
  /// next request.
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [sortOrder] :
  /// The field by which to sort results. The default is
  /// <code>CreatedTime</code>.
  Future<ListPipelineExecutionStepsResponse> listPipelineExecutionSteps({
    int? maxResults,
    String? nextToken,
    String? pipelineExecutionArn,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelineExecutionSteps'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (pipelineExecutionArn != null)
          'PipelineExecutionArn': pipelineExecutionArn,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListPipelineExecutionStepsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the pipeline executions.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineName] :
  /// The name or Amazon Resource Name (ARN) of the pipeline.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns the pipeline executions that were created after a
  /// specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns the pipeline executions that were created before a
  /// specified time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of pipeline executions to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListPipelineExecutions</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of pipeline executions, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreatedTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  Future<ListPipelineExecutionsResponse> listPipelineExecutions({
    required String pipelineName,
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    SortPipelineExecutionsBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelineExecutions'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListPipelineExecutionsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of parameters for a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of parameters to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous
  /// <code>ListPipelineParametersForExecution</code> request was truncated, the
  /// response includes a <code>NextToken</code>. To retrieve the next set of
  /// parameters, use the token in the next request.
  Future<ListPipelineParametersForExecutionResponse>
      listPipelineParametersForExecution({
    required String pipelineExecutionArn,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelineParametersForExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListPipelineParametersForExecutionResponse.fromJson(
        jsonResponse.body);
  }

  /// Gets a list of pipelines.
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns the pipelines that were created after a specified
  /// time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns the pipelines that were created before a specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of pipelines to return in the response.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListPipelines</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of pipelines, use the token in the next request.
  ///
  /// Parameter [pipelineNamePrefix] :
  /// The prefix of the pipeline name.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreatedTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results.
  Future<ListPipelinesResponse> listPipelines({
    DateTime? createdAfter,
    DateTime? createdBefore,
    int? maxResults,
    String? nextToken,
    String? pipelineNamePrefix,
    SortPipelinesBy? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListPipelines'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (pipelineNamePrefix != null)
          'PipelineNamePrefix': pipelineNamePrefix,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListPipelinesResponse.fromJson(jsonResponse.body);
  }

  /// Lists processing jobs that satisfy various filters.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only processing jobs created after the specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only processing jobs created after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only processing jobs modified after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only processing jobs modified before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of processing jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the processing job name. This filter returns only processing
  /// jobs whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListProcessingJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of processing jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only processing jobs with a specific status.
  Future<ListProcessingJobsResponse> listProcessingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    ProcessingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListProcessingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListProcessingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the projects in an Amazon Web Services account.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns the projects that were created after a specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns the projects that were created before a specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of projects to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A filter that returns the projects whose name contains a specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListProjects</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of projects, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field by which to sort results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListProjectsOutput> listProjects({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ProjectSortBy? sortBy,
    ProjectSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListProjects'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListProjectsOutput.fromJson(jsonResponse.body);
  }

  /// Lists Amazon SageMaker Catalogs based on given filters and orders. The
  /// maximum number of <code>ResourceCatalog</code>s viewable is 1000.
  ///
  /// Parameter [creationTimeAfter] :
  /// Use this parameter to search for <code>ResourceCatalog</code>s created
  /// after a specific date and time.
  ///
  /// Parameter [creationTimeBefore] :
  /// Use this parameter to search for <code>ResourceCatalog</code>s created
  /// before a specific date and time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results returned by
  /// <code>ListResourceCatalogs</code>.
  ///
  /// Parameter [nameContains] :
  /// A string that partially matches one or more <code>ResourceCatalog</code>s
  /// names. Filters <code>ResourceCatalog</code> by name.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination of <code>ListResourceCatalogs</code> results.
  ///
  /// Parameter [sortBy] :
  /// The value on which the resource catalog list is sorted.
  ///
  /// Parameter [sortOrder] :
  /// The order in which the resource catalogs are listed.
  Future<ListResourceCatalogsResponse> listResourceCatalogs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ResourceCatalogSortBy? sortBy,
    ResourceCatalogSortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListResourceCatalogs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListResourceCatalogsResponse.fromJson(jsonResponse.body);
  }

  /// Lists spaces.
  ///
  /// Parameter [domainIdEquals] :
  /// A parameter to search for the domain ID.
  ///
  /// Parameter [maxResults] :
  /// This parameter defines the maximum number of results that can be return in
  /// a single response. The <code>MaxResults</code> parameter is an upper
  /// bound, not a target. If there are more results available than the value
  /// specified, a <code>NextToken</code> is provided in the response. The
  /// <code>NextToken</code> indicates that the user should get the next set of
  /// results by providing this token as a part of a subsequent call. The
  /// default value for <code>MaxResults</code> is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is <code>Ascending</code>.
  ///
  /// Parameter [spaceNameContains] :
  /// A parameter by which to filter the results.
  Future<ListSpacesResponse> listSpaces({
    String? domainIdEquals,
    int? maxResults,
    String? nextToken,
    SpaceSortKey? sortBy,
    SortOrder? sortOrder,
    String? spaceNameContains,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListSpaces'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (domainIdEquals != null) 'DomainIdEquals': domainIdEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (spaceNameContains != null) 'SpaceNameContains': spaceNameContains,
      },
    );

    return ListSpacesResponse.fromJson(jsonResponse.body);
  }

  /// Lists devices allocated to the stage, containing detailed device
  /// information and deployment status.
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan.
  ///
  /// Parameter [stageName] :
  /// The name of the stage in the deployment.
  ///
  /// Parameter [excludeDevicesDeployedInOtherStage] :
  /// Toggle for excluding devices deployed in other stages.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of requests to select.
  ///
  /// Parameter [nextToken] :
  /// The response from the last list when returning a list large enough to
  /// neeed tokening.
  Future<ListStageDevicesResponse> listStageDevices({
    required String edgeDeploymentPlanName,
    required String stageName,
    bool? excludeDevicesDeployedInOtherStage,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListStageDevices'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        'StageName': stageName,
        if (excludeDevicesDeployedInOtherStage != null)
          'ExcludeDevicesDeployedInOtherStage':
              excludeDevicesDeployedInOtherStage,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListStageDevicesResponse.fromJson(jsonResponse.body);
  }

  /// Lists the Amazon SageMaker Studio Lifecycle Configurations in your Amazon
  /// Web Services Account.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [appTypeEquals] :
  /// A parameter to search for the App Type to which the Lifecycle
  /// Configuration is attached.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only Lifecycle Configurations created on or after
  /// the specified time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only Lifecycle Configurations created on or before
  /// the specified time.
  ///
  /// Parameter [maxResults] :
  /// The total number of items to return in the response. If the total number
  /// of items available is more than the value specified, a
  /// <code>NextToken</code> is provided in the response. To resume pagination,
  /// provide the <code>NextToken</code> value in the as part of a subsequent
  /// call. The default value is 10.
  ///
  /// Parameter [modifiedTimeAfter] :
  /// A filter that returns only Lifecycle Configurations modified after the
  /// specified time.
  ///
  /// Parameter [modifiedTimeBefore] :
  /// A filter that returns only Lifecycle Configurations modified before the
  /// specified time.
  ///
  /// Parameter [nameContains] :
  /// A string in the Lifecycle Configuration name. This filter returns only
  /// Lifecycle Configurations whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to ListStudioLifecycleConfigs didn't return the full
  /// set of Lifecycle Configurations, the call returns a token for getting the
  /// next set of Lifecycle Configurations.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is CreationTime.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is Descending.
  Future<ListStudioLifecycleConfigsResponse> listStudioLifecycleConfigs({
    StudioLifecycleConfigAppType? appTypeEquals,
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    int? maxResults,
    DateTime? modifiedTimeAfter,
    DateTime? modifiedTimeBefore,
    String? nameContains,
    String? nextToken,
    StudioLifecycleConfigSortKey? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListStudioLifecycleConfigs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (appTypeEquals != null) 'AppTypeEquals': appTypeEquals.value,
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (modifiedTimeAfter != null)
          'ModifiedTimeAfter': unixTimestampToJson(modifiedTimeAfter),
        if (modifiedTimeBefore != null)
          'ModifiedTimeBefore': unixTimestampToJson(modifiedTimeBefore),
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListStudioLifecycleConfigsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of the work teams that you are subscribed to in the Amazon Web
  /// Services Marketplace. The list may be empty if no work team satisfies the
  /// filter specified in the <code>NameContains</code> parameter.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of work teams to return in each page of the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the work team name. This filter returns only work teams whose
  /// name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListSubscribedWorkteams</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of labeling jobs, use the token in the next request.
  Future<ListSubscribedWorkteamsResponse> listSubscribedWorkteams({
    int? maxResults,
    String? nameContains,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListSubscribedWorkteams'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListSubscribedWorkteamsResponse.fromJson(jsonResponse.body);
  }

  /// Returns the tags for the specified SageMaker resource.
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the resource whose tags you want to
  /// retrieve.
  ///
  /// Parameter [maxResults] :
  /// Maximum number of tags to return.
  ///
  /// Parameter [nextToken] :
  /// If the response to the previous <code>ListTags</code> request is
  /// truncated, SageMaker returns this token. To retrieve the next set of tags,
  /// use it in the subsequent request.
  Future<ListTagsOutput> listTags({
    required String resourceArn,
    int? maxResults,
    String? nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      50,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTags'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ResourceArn': resourceArn,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
      },
    );

    return ListTagsOutput.fromJson(jsonResponse.body);
  }

  /// Lists training jobs.
  /// <note>
  /// When <code>StatusEquals</code> and <code>MaxResults</code> are set at the
  /// same time, the <code>MaxResults</code> number of training jobs are first
  /// retrieved ignoring the <code>StatusEquals</code> parameter and then they
  /// are filtered by the <code>StatusEquals</code> parameter, which is returned
  /// as a response.
  ///
  /// For example, if <code>ListTrainingJobs</code> is invoked with the
  /// following parameters:
  ///
  /// <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code>
  ///
  /// First, 100 trainings jobs with any status, including those other than
  /// <code>InProgress</code>, are selected (sorted according to the creation
  /// time, from the most current to the oldest). Next, those with a status of
  /// <code>InProgress</code> are returned.
  ///
  /// You can quickly test the API using the following Amazon Web Services CLI
  /// code.
  ///
  /// <code>aws sagemaker list-training-jobs --max-results 100 --status-equals
  /// InProgress</code>
  /// </note>
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only training jobs created after the specified time
  /// (timestamp).
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only training jobs created before the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only training jobs modified after the specified time
  /// (timestamp).
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only training jobs modified before the specified
  /// time (timestamp).
  ///
  /// Parameter [maxResults] :
  /// The maximum number of training jobs to return in the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the training job name. This filter returns only training jobs
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListTrainingJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of training jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only training jobs with a specific status.
  ///
  /// Parameter [warmPoolStatusEquals] :
  /// A filter that retrieves only training jobs with a specific warm pool
  /// status.
  Future<ListTrainingJobsResponse> listTrainingJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    TrainingJobStatus? statusEquals,
    WarmPoolResourceStatus? warmPoolStatusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrainingJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
        if (warmPoolStatusEquals != null)
          'WarmPoolStatusEquals': warmPoolStatusEquals.value,
      },
    );

    return ListTrainingJobsResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a>
  /// objects that describe the training jobs that a hyperparameter tuning job
  /// launched.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job whose training jobs you want to list.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of training jobs to return. The default value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous
  /// <code>ListTrainingJobsForHyperParameterTuningJob</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of training jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>Name</code>.
  ///
  /// If the value of this field is <code>FinalObjectiveMetricValue</code>, any
  /// training jobs that did not return an objective metric are not listed.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that returns only training jobs with the specified status.
  Future<ListTrainingJobsForHyperParameterTuningJobResponse>
      listTrainingJobsForHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
    int? maxResults,
    String? nextToken,
    TrainingJobSortByOptions? sortBy,
    SortOrder? sortOrder,
    TrainingJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrainingJobsForHyperParameterTuningJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListTrainingJobsForHyperParameterTuningJobResponse.fromJson(
        jsonResponse.body);
  }

  /// Lists transform jobs.
  ///
  /// Parameter [creationTimeAfter] :
  /// A filter that returns only transform jobs created after the specified
  /// time.
  ///
  /// Parameter [creationTimeBefore] :
  /// A filter that returns only transform jobs created before the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeAfter] :
  /// A filter that returns only transform jobs modified after the specified
  /// time.
  ///
  /// Parameter [lastModifiedTimeBefore] :
  /// A filter that returns only transform jobs modified before the specified
  /// time.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of transform jobs to return in the response. The
  /// default value is <code>10</code>.
  ///
  /// Parameter [nameContains] :
  /// A string in the transform job name. This filter returns only transform
  /// jobs whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListTransformJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of transform jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Descending</code>.
  ///
  /// Parameter [statusEquals] :
  /// A filter that retrieves only transform jobs with a specific status.
  Future<ListTransformJobsResponse> listTransformJobs({
    DateTime? creationTimeAfter,
    DateTime? creationTimeBefore,
    DateTime? lastModifiedTimeAfter,
    DateTime? lastModifiedTimeBefore,
    int? maxResults,
    String? nameContains,
    String? nextToken,
    SortBy? sortBy,
    SortOrder? sortOrder,
    TransformJobStatus? statusEquals,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTransformJobs'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (creationTimeAfter != null)
          'CreationTimeAfter': unixTimestampToJson(creationTimeAfter),
        if (creationTimeBefore != null)
          'CreationTimeBefore': unixTimestampToJson(creationTimeBefore),
        if (lastModifiedTimeAfter != null)
          'LastModifiedTimeAfter': unixTimestampToJson(lastModifiedTimeAfter),
        if (lastModifiedTimeBefore != null)
          'LastModifiedTimeBefore': unixTimestampToJson(lastModifiedTimeBefore),
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (statusEquals != null) 'StatusEquals': statusEquals.value,
      },
    );

    return ListTransformJobsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the trial components in your account. You can sort the list by trial
  /// component name or creation time. You can filter the list to show only
  /// components that were created in a specific time range. You can also filter
  /// on one of the following:
  ///
  /// <ul>
  /// <li>
  /// <code>ExperimentName</code>
  /// </li>
  /// <li>
  /// <code>SourceArn</code>
  /// </li>
  /// <li>
  /// <code>TrialName</code>
  /// </li>
  /// </ul>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only components created after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only components created before the specified time.
  ///
  /// Parameter [experimentName] :
  /// A filter that returns only components that are part of the specified
  /// experiment. If you specify <code>ExperimentName</code>, you can't filter
  /// by <code>SourceArn</code> or <code>TrialName</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of components to return in the response. The default
  /// value is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListTrialComponents</code> didn't return the
  /// full set of components, the call returns a token for getting the next set
  /// of components.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [sourceArn] :
  /// A filter that returns only components that have the specified source
  /// Amazon Resource Name (ARN). If you specify <code>SourceArn</code>, you
  /// can't filter by <code>ExperimentName</code> or <code>TrialName</code>.
  ///
  /// Parameter [trialName] :
  /// A filter that returns only components that are part of the specified
  /// trial. If you specify <code>TrialName</code>, you can't filter by
  /// <code>ExperimentName</code> or <code>SourceArn</code>.
  Future<ListTrialComponentsResponse> listTrialComponents({
    DateTime? createdAfter,
    DateTime? createdBefore,
    String? experimentName,
    int? maxResults,
    String? nextToken,
    SortTrialComponentsBy? sortBy,
    SortOrder? sortOrder,
    String? sourceArn,
    String? trialName,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrialComponents'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (experimentName != null) 'ExperimentName': experimentName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (sourceArn != null) 'SourceArn': sourceArn,
        if (trialName != null) 'TrialName': trialName,
      },
    );

    return ListTrialComponentsResponse.fromJson(jsonResponse.body);
  }

  /// Lists the trials in your account. Specify an experiment name to limit the
  /// list to the trials that are part of that experiment. Specify a trial
  /// component name to limit the list to the trials that associated with that
  /// trial component. The list can be filtered to show only trials that were
  /// created in a specific time range. The list can be sorted by trial name or
  /// creation time.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [createdAfter] :
  /// A filter that returns only trials created after the specified time.
  ///
  /// Parameter [createdBefore] :
  /// A filter that returns only trials created before the specified time.
  ///
  /// Parameter [experimentName] :
  /// A filter that returns only trials that are part of the specified
  /// experiment.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of trials to return in the response. The default value
  /// is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous call to <code>ListTrials</code> didn't return the full set
  /// of trials, the call returns a token for getting the next set of trials.
  ///
  /// Parameter [sortBy] :
  /// The property used to sort results. The default value is
  /// <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order. The default value is <code>Descending</code>.
  ///
  /// Parameter [trialComponentName] :
  /// A filter that returns only trials that are associated with the specified
  /// trial component.
  Future<ListTrialsResponse> listTrials({
    DateTime? createdAfter,
    DateTime? createdBefore,
    String? experimentName,
    int? maxResults,
    String? nextToken,
    SortTrialsBy? sortBy,
    SortOrder? sortOrder,
    String? trialComponentName,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListTrials'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (createdAfter != null)
          'CreatedAfter': unixTimestampToJson(createdAfter),
        if (createdBefore != null)
          'CreatedBefore': unixTimestampToJson(createdBefore),
        if (experimentName != null) 'ExperimentName': experimentName,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (trialComponentName != null)
          'TrialComponentName': trialComponentName,
      },
    );

    return ListTrialsResponse.fromJson(jsonResponse.body);
  }

  /// Lists user profiles.
  ///
  /// Parameter [domainIdEquals] :
  /// A parameter by which to filter the results.
  ///
  /// Parameter [maxResults] :
  /// This parameter defines the maximum number of results that can be return in
  /// a single response. The <code>MaxResults</code> parameter is an upper
  /// bound, not a target. If there are more results available than the value
  /// specified, a <code>NextToken</code> is provided in the response. The
  /// <code>NextToken</code> indicates that the user should get the next set of
  /// results by providing this token as a part of a subsequent call. The
  /// default value for <code>MaxResults</code> is 10.
  ///
  /// Parameter [nextToken] :
  /// If the previous response was truncated, you will receive this token. Use
  /// it in your next request to receive the next set of results.
  ///
  /// Parameter [sortBy] :
  /// The parameter by which to sort the results. The default is CreationTime.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for the results. The default is Ascending.
  ///
  /// Parameter [userProfileNameContains] :
  /// A parameter by which to filter the results.
  Future<ListUserProfilesResponse> listUserProfiles({
    String? domainIdEquals,
    int? maxResults,
    String? nextToken,
    UserProfileSortKey? sortBy,
    SortOrder? sortOrder,
    String? userProfileNameContains,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListUserProfiles'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (domainIdEquals != null) 'DomainIdEquals': domainIdEquals,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (userProfileNameContains != null)
          'UserProfileNameContains': userProfileNameContains,
      },
    );

    return ListUserProfilesResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to list all private and vendor workforces in an Amazon
  /// Web Services Region. Note that you can only have one private workforce per
  /// Amazon Web Services Region.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of workforces returned in the response.
  ///
  /// Parameter [nameContains] :
  /// A filter you can use to search for workforces using part of the workforce
  /// name.
  ///
  /// Parameter [nextToken] :
  /// A token to resume pagination.
  ///
  /// Parameter [sortBy] :
  /// Sort workforces using the workforce name or creation date.
  ///
  /// Parameter [sortOrder] :
  /// Sort workforces in ascending or descending order.
  Future<ListWorkforcesResponse> listWorkforces({
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListWorkforcesSortByOptions? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListWorkforces'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListWorkforcesResponse.fromJson(jsonResponse.body);
  }

  /// Gets a list of private work teams that you have defined in a region. The
  /// list may be empty if no work team satisfies the filter specified in the
  /// <code>NameContains</code> parameter.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of work teams to return in each page of the response.
  ///
  /// Parameter [nameContains] :
  /// A string in the work team's name. This filter returns only work teams
  /// whose name contains the specified string.
  ///
  /// Parameter [nextToken] :
  /// If the result of the previous <code>ListWorkteams</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of labeling jobs, use the token in the next request.
  ///
  /// Parameter [sortBy] :
  /// The field to sort results by. The default is <code>CreationTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// The sort order for results. The default is <code>Ascending</code>.
  Future<ListWorkteamsResponse> listWorkteams({
    int? maxResults,
    String? nameContains,
    String? nextToken,
    ListWorkteamsSortByOptions? sortBy,
    SortOrder? sortOrder,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.ListWorkteams'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (maxResults != null) 'MaxResults': maxResults,
        if (nameContains != null) 'NameContains': nameContains,
        if (nextToken != null) 'NextToken': nextToken,
        if (sortBy != null) 'SortBy': sortBy.value,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
      },
    );

    return ListWorkteamsResponse.fromJson(jsonResponse.body);
  }

  /// Adds a resouce policy to control access to a model group. For information
  /// about resoure policies, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
  /// policies and resource-based policies</a> in the <i>Amazon Web Services
  /// Identity and Access Management User Guide.</i>.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [modelPackageGroupName] :
  /// The name of the model group to add a resource policy to.
  ///
  /// Parameter [resourcePolicy] :
  /// The resource policy for the model group.
  Future<PutModelPackageGroupPolicyOutput> putModelPackageGroupPolicy({
    required String modelPackageGroupName,
    required String resourcePolicy,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.PutModelPackageGroupPolicy'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageGroupName': modelPackageGroupName,
        'ResourcePolicy': resourcePolicy,
      },
    );

    return PutModelPackageGroupPolicyOutput.fromJson(jsonResponse.body);
  }

  /// Use this action to inspect your lineage and discover relationships between
  /// entities. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html">
  /// Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer
  /// Guide</i>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [direction] :
  /// Associations between lineage entities have a direction. This parameter
  /// determines the direction from the StartArn(s) that the query traverses.
  ///
  /// Parameter [filters] :
  /// A set of filtering parameters that allow you to specify which entities
  /// should be returned.
  ///
  /// <ul>
  /// <li>
  /// Properties - Key-value pairs to match on the lineage entities' properties.
  /// </li>
  /// <li>
  /// LineageTypes - A set of lineage entity types to match on. For example:
  /// <code>TrialComponent</code>, <code>Artifact</code>, or
  /// <code>Context</code>.
  /// </li>
  /// <li>
  /// CreatedBefore - Filter entities created before this date.
  /// </li>
  /// <li>
  /// ModifiedBefore - Filter entities modified before this date.
  /// </li>
  /// <li>
  /// ModifiedAfter - Filter entities modified after this date.
  /// </li>
  /// </ul>
  ///
  /// Parameter [includeEdges] :
  /// Setting this value to <code>True</code> retrieves not only the entities of
  /// interest but also the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a>
  /// and lineage entities on the path. Set to <code>False</code> to only return
  /// lineage entities that match your query.
  ///
  /// Parameter [maxDepth] :
  /// The maximum depth in lineage relationships from the <code>StartArns</code>
  /// that are traversed. Depth is a measure of the number of
  /// <code>Associations</code> from the <code>StartArn</code> entity to the
  /// matched results.
  ///
  /// Parameter [maxResults] :
  /// Limits the number of vertices in the results. Use the
  /// <code>NextToken</code> in a response to to retrieve the next page of
  /// results.
  ///
  /// Parameter [nextToken] :
  /// Limits the number of vertices in the request. Use the
  /// <code>NextToken</code> in a response to to retrieve the next page of
  /// results.
  ///
  /// Parameter [startArns] :
  /// A list of resource Amazon Resource Name (ARN) that represent the starting
  /// point for your lineage query.
  Future<QueryLineageResponse> queryLineage({
    Direction? direction,
    QueryFilters? filters,
    bool? includeEdges,
    int? maxDepth,
    int? maxResults,
    String? nextToken,
    List<String>? startArns,
  }) async {
    _s.validateNumRange(
      'maxDepth',
      maxDepth,
      0,
      10,
    );
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      50,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.QueryLineage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        if (direction != null) 'Direction': direction.value,
        if (filters != null) 'Filters': filters,
        if (includeEdges != null) 'IncludeEdges': includeEdges,
        if (maxDepth != null) 'MaxDepth': maxDepth,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (startArns != null) 'StartArns': startArns,
      },
    );

    return QueryLineageResponse.fromJson(jsonResponse.body);
  }

  /// Register devices.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  ///
  /// Parameter [devices] :
  /// A list of devices to register with SageMaker Edge Manager.
  ///
  /// Parameter [tags] :
  /// The tags associated with devices.
  Future<void> registerDevices({
    required String deviceFleetName,
    required List<Device> devices,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.RegisterDevices'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'Devices': devices,
        if (tags != null) 'Tags': tags,
      },
    );
  }

  /// Renders the UI template so that you can preview the worker's experience.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) that has access to the S3 objects that are
  /// used by the template.
  ///
  /// Parameter [task] :
  /// A <code>RenderableTask</code> object containing a representative task to
  /// render.
  ///
  /// Parameter [humanTaskUiArn] :
  /// The <code>HumanTaskUiArn</code> of the worker UI that you want to render.
  /// Do not provide a <code>HumanTaskUiArn</code> if you use the
  /// <code>UiTemplate</code> parameter.
  ///
  /// See a list of available Human Ui Amazon Resource Names (ARNs) in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UiConfig.html">UiConfig</a>.
  ///
  /// Parameter [uiTemplate] :
  /// A <code>Template</code> object containing the worker UI template to
  /// render.
  Future<RenderUiTemplateResponse> renderUiTemplate({
    required String roleArn,
    required RenderableTask task,
    String? humanTaskUiArn,
    UiTemplate? uiTemplate,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.RenderUiTemplate'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'RoleArn': roleArn,
        'Task': task,
        if (humanTaskUiArn != null) 'HumanTaskUiArn': humanTaskUiArn,
        if (uiTemplate != null) 'UiTemplate': uiTemplate,
      },
    );

    return RenderUiTemplateResponse.fromJson(jsonResponse.body);
  }

  /// Retry the execution of the pipeline.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than once.
  ///
  /// Parameter [parallelismConfiguration] :
  /// This configuration, if specified, overrides the parallelism configuration
  /// of the parent pipeline.
  Future<RetryPipelineExecutionResponse> retryPipelineExecution({
    required String pipelineExecutionArn,
    String? clientRequestToken,
    ParallelismConfiguration? parallelismConfiguration,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.RetryPipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (parallelismConfiguration != null)
          'ParallelismConfiguration': parallelismConfiguration,
      },
    );

    return RetryPipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Finds SageMaker resources that match a search query. Matching resources
  /// are returned as a list of <code>SearchRecord</code> objects in the
  /// response. You can sort the search results by any resource property in a
  /// ascending or descending order.
  ///
  /// You can query against the following value types: numeric, text, Boolean,
  /// and timestamp.
  /// <note>
  /// The Search API may provide access to otherwise restricted data. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">Amazon
  /// SageMaker API Permissions: Actions, Permissions, and Resources
  /// Reference</a> for more information.
  /// </note>
  ///
  /// Parameter [resource] :
  /// The name of the SageMaker resource to search for.
  ///
  /// Parameter [crossAccountFilterOption] :
  /// A cross account filter option. When the value is
  /// <code>"CrossAccount"</code> the search results will only include resources
  /// made discoverable to you from other accounts. When the value is
  /// <code>"SameAccount"</code> or <code>null</code> the search results will
  /// only include resources from your account. Default is <code>null</code>.
  /// For more information on searching for resources made discoverable to your
  /// account, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/feature-store-cross-account-discoverability-use.html">
  /// Search discoverable resources</a> in the SageMaker Developer Guide. The
  /// maximum number of <code>ResourceCatalog</code>s viewable is 1000.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return.
  ///
  /// Parameter [nextToken] :
  /// If more than <code>MaxResults</code> resources match the specified
  /// <code>SearchExpression</code>, the response includes a
  /// <code>NextToken</code>. The <code>NextToken</code> can be passed to the
  /// next <code>SearchRequest</code> to continue retrieving results.
  ///
  /// Parameter [searchExpression] :
  /// A Boolean conditional statement. Resources must satisfy this condition to
  /// be included in search results. You must provide at least one
  /// subexpression, filter, or nested filter. The maximum number of recursive
  /// <code>SubExpressions</code>, <code>NestedFilters</code>, and
  /// <code>Filters</code> that can be included in a
  /// <code>SearchExpression</code> object is 50.
  ///
  /// Parameter [sortBy] :
  /// The name of the resource property used to sort the
  /// <code>SearchResults</code>. The default is <code>LastModifiedTime</code>.
  ///
  /// Parameter [sortOrder] :
  /// How <code>SearchResults</code> are ordered. Valid values are
  /// <code>Ascending</code> or <code>Descending</code>. The default is
  /// <code>Descending</code>.
  ///
  /// Parameter [visibilityConditions] :
  /// Limits the results of your search request to the resources that you can
  /// access.
  Future<SearchResponse> search({
    required ResourceType resource,
    CrossAccountFilterOption? crossAccountFilterOption,
    int? maxResults,
    String? nextToken,
    SearchExpression? searchExpression,
    String? sortBy,
    SearchSortOrder? sortOrder,
    List<VisibilityConditions>? visibilityConditions,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.Search'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Resource': resource.value,
        if (crossAccountFilterOption != null)
          'CrossAccountFilterOption': crossAccountFilterOption.value,
        if (maxResults != null) 'MaxResults': maxResults,
        if (nextToken != null) 'NextToken': nextToken,
        if (searchExpression != null) 'SearchExpression': searchExpression,
        if (sortBy != null) 'SortBy': sortBy,
        if (sortOrder != null) 'SortOrder': sortOrder.value,
        if (visibilityConditions != null)
          'VisibilityConditions': visibilityConditions,
      },
    );

    return SearchResponse.fromJson(jsonResponse.body);
  }

  /// Notifies the pipeline that the execution of a callback step failed, along
  /// with a message describing why. When a callback step is run, the pipeline
  /// generates a callback token and includes the token in a message sent to
  /// Amazon Simple Queue Service (Amazon SQS).
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [callbackToken] :
  /// The pipeline generated token from the Amazon SQS queue.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [failureReason] :
  /// A message describing why the step failed.
  Future<SendPipelineExecutionStepFailureResponse>
      sendPipelineExecutionStepFailure({
    required String callbackToken,
    String? clientRequestToken,
    String? failureReason,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.SendPipelineExecutionStepFailure'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CallbackToken': callbackToken,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (failureReason != null) 'FailureReason': failureReason,
      },
    );

    return SendPipelineExecutionStepFailureResponse.fromJson(jsonResponse.body);
  }

  /// Notifies the pipeline that the execution of a callback step succeeded and
  /// provides a list of the step's output parameters. When a callback step is
  /// run, the pipeline generates a callback token and includes the token in a
  /// message sent to Amazon Simple Queue Service (Amazon SQS).
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [callbackToken] :
  /// The pipeline generated token from the Amazon SQS queue.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than one time.
  ///
  /// Parameter [outputParameters] :
  /// A list of the output parameters of the callback step.
  Future<SendPipelineExecutionStepSuccessResponse>
      sendPipelineExecutionStepSuccess({
    required String callbackToken,
    String? clientRequestToken,
    List<OutputParameter>? outputParameters,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.SendPipelineExecutionStepSuccess'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CallbackToken': callbackToken,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (outputParameters != null) 'OutputParameters': outputParameters,
      },
    );

    return SendPipelineExecutionStepSuccessResponse.fromJson(jsonResponse.body);
  }

  /// Starts a stage in an edge deployment plan.
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan to start.
  ///
  /// Parameter [stageName] :
  /// The name of the stage to start.
  Future<void> startEdgeDeploymentStage({
    required String edgeDeploymentPlanName,
    required String stageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartEdgeDeploymentStage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        'StageName': stageName,
      },
    );
  }

  /// Starts an inference experiment.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [name] :
  /// The name of the inference experiment to start.
  Future<StartInferenceExperimentResponse> startInferenceExperiment({
    required String name,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartInferenceExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Name': name,
      },
    );

    return StartInferenceExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Starts a previously stopped monitoring schedule.
  /// <note>
  /// By default, when you successfully create a new schedule, the status of a
  /// monitoring schedule is <code>scheduled</code>.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the schedule to start.
  Future<void> startMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartMonitoringSchedule'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );
  }

  /// Launches an ML compute instance with the latest version of the libraries
  /// and attaches your ML storage volume. After configuring the notebook
  /// instance, SageMaker sets the notebook instance status to
  /// <code>InService</code>. A notebook instance's status must be
  /// <code>InService</code> before you can connect to your Jupyter notebook.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance to start.
  Future<void> startNotebookInstance({
    required String notebookInstanceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );
  }

  /// Starts a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineName] :
  /// The name or Amazon Resource Name (ARN) of the pipeline.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than once.
  ///
  /// Parameter [parallelismConfiguration] :
  /// This configuration, if specified, overrides the parallelism configuration
  /// of the parent pipeline for this specific run.
  ///
  /// Parameter [pipelineExecutionDescription] :
  /// The description of the pipeline execution.
  ///
  /// Parameter [pipelineExecutionDisplayName] :
  /// The display name of the pipeline execution.
  ///
  /// Parameter [pipelineParameters] :
  /// Contains a list of pipeline parameters. This list can be empty.
  ///
  /// Parameter [selectiveExecutionConfig] :
  /// The selective execution configuration applied to the pipeline run.
  Future<StartPipelineExecutionResponse> startPipelineExecution({
    required String pipelineName,
    String? clientRequestToken,
    ParallelismConfiguration? parallelismConfiguration,
    String? pipelineExecutionDescription,
    String? pipelineExecutionDisplayName,
    List<Parameter>? pipelineParameters,
    SelectiveExecutionConfig? selectiveExecutionConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StartPipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
        if (parallelismConfiguration != null)
          'ParallelismConfiguration': parallelismConfiguration,
        if (pipelineExecutionDescription != null)
          'PipelineExecutionDescription': pipelineExecutionDescription,
        if (pipelineExecutionDisplayName != null)
          'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
        if (pipelineParameters != null)
          'PipelineParameters': pipelineParameters,
        if (selectiveExecutionConfig != null)
          'SelectiveExecutionConfig': selectiveExecutionConfig,
      },
    );

    return StartPipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// A method for forcing a running job to shut down.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [autoMLJobName] :
  /// The name of the object you are requesting.
  Future<void> stopAutoMLJob({
    required String autoMLJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopAutoMLJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AutoMLJobName': autoMLJobName,
      },
    );
  }

  /// Stops a model compilation job.
  ///
  /// To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal.
  /// This gracefully shuts the job down. If the job hasn't stopped, it sends
  /// the SIGKILL signal.
  ///
  /// When it receives a <code>StopCompilationJob</code> request, Amazon
  /// SageMaker changes the <code>CompilationJobStatus</code> of the job to
  /// <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the
  /// <code>CompilationJobStatus</code> to <code>Stopped</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [compilationJobName] :
  /// The name of the model compilation job to stop.
  Future<void> stopCompilationJob({
    required String compilationJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopCompilationJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CompilationJobName': compilationJobName,
      },
    );
  }

  /// Stops a stage in an edge deployment plan.
  ///
  /// Parameter [edgeDeploymentPlanName] :
  /// The name of the edge deployment plan to stop.
  ///
  /// Parameter [stageName] :
  /// The name of the stage to stop.
  Future<void> stopEdgeDeploymentStage({
    required String edgeDeploymentPlanName,
    required String stageName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopEdgeDeploymentStage'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgeDeploymentPlanName': edgeDeploymentPlanName,
        'StageName': stageName,
      },
    );
  }

  /// Request to stop an edge packaging job.
  ///
  /// Parameter [edgePackagingJobName] :
  /// The name of the edge packaging job.
  Future<void> stopEdgePackagingJob({
    required String edgePackagingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopEdgePackagingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EdgePackagingJobName': edgePackagingJobName,
      },
    );
  }

  /// Stops a running hyperparameter tuning job and all running training jobs
  /// that the tuning job launched.
  ///
  /// All model artifacts output from the training jobs are stored in Amazon
  /// Simple Storage Service (Amazon S3). All data that the training jobs write
  /// to Amazon CloudWatch Logs are still available in CloudWatch. After the
  /// tuning job moves to the <code>Stopped</code> state, it releases all
  /// reserved resources for the tuning job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hyperParameterTuningJobName] :
  /// The name of the tuning job to stop.
  Future<void> stopHyperParameterTuningJob({
    required String hyperParameterTuningJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopHyperParameterTuningJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
      },
    );
  }

  /// Stops an inference experiment.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [modelVariantActions] :
  /// Array of key-value pairs, with names of variants mapped to actions. The
  /// possible actions are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>Promote</code> - Promote the shadow variant to a production variant
  /// </li>
  /// <li>
  /// <code>Remove</code> - Delete the variant
  /// </li>
  /// <li>
  /// <code>Retain</code> - Keep the variant as it is
  /// </li>
  /// </ul>
  ///
  /// Parameter [name] :
  /// The name of the inference experiment to stop.
  ///
  /// Parameter [desiredModelVariants] :
  /// An array of <code>ModelVariantConfig</code> objects. There is one for each
  /// variant that you want to deploy after the inference experiment stops. Each
  /// <code>ModelVariantConfig</code> describes the infrastructure configuration
  /// for deploying the corresponding variant.
  ///
  /// Parameter [desiredState] :
  /// The desired state of the experiment after stopping. The possible states
  /// are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>Completed</code>: The experiment completed successfully
  /// </li>
  /// <li>
  /// <code>Cancelled</code>: The experiment was canceled
  /// </li>
  /// </ul>
  ///
  /// Parameter [reason] :
  /// The reason for stopping the experiment.
  Future<StopInferenceExperimentResponse> stopInferenceExperiment({
    required Map<String, ModelVariantAction> modelVariantActions,
    required String name,
    List<ModelVariantConfig>? desiredModelVariants,
    InferenceExperimentStopDesiredState? desiredState,
    String? reason,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopInferenceExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelVariantActions':
            modelVariantActions.map((k, e) => MapEntry(k, e.value)),
        'Name': name,
        if (desiredModelVariants != null)
          'DesiredModelVariants': desiredModelVariants,
        if (desiredState != null) 'DesiredState': desiredState.value,
        if (reason != null) 'Reason': reason,
      },
    );

    return StopInferenceExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Stops an Inference Recommender job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [jobName] :
  /// The name of the job you want to stop.
  Future<void> stopInferenceRecommendationsJob({
    required String jobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopInferenceRecommendationsJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'JobName': jobName,
      },
    );
  }

  /// Stops a running labeling job. A job that is stopped cannot be restarted.
  /// Any results obtained before the job is stopped are placed in the Amazon S3
  /// output bucket.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [labelingJobName] :
  /// The name of the labeling job to stop.
  Future<void> stopLabelingJob({
    required String labelingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopLabelingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'LabelingJobName': labelingJobName,
      },
    );
  }

  /// Stops a previously started monitoring schedule.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the schedule to stop.
  Future<void> stopMonitoringSchedule({
    required String monitoringScheduleName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopMonitoringSchedule'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );
  }

  /// Terminates the ML compute instance. Before terminating the instance,
  /// SageMaker disconnects the ML storage volume from it. SageMaker preserves
  /// the ML storage volume. SageMaker stops charging you for the ML compute
  /// instance when you call <code>StopNotebookInstance</code>.
  ///
  /// To access data on the ML storage volume for a notebook instance that has
  /// been terminated, call the <code>StartNotebookInstance</code> API.
  /// <code>StartNotebookInstance</code> launches another ML compute instance,
  /// configures it, and attaches the preserved ML storage volume so you can
  /// continue your work.
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance to terminate.
  Future<void> stopNotebookInstance({
    required String notebookInstanceName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
      },
    );
  }

  /// Stops a pipeline execution.
  ///
  /// <b>Callback Step</b>
  ///
  /// A pipeline execution won't stop while a callback step is running. When you
  /// call <code>StopPipelineExecution</code> on a pipeline execution with a
  /// running callback step, SageMaker Pipelines sends an additional Amazon SQS
  /// message to the specified SQS queue. The body of the SQS message contains a
  /// "Status" field which is set to "Stopping".
  ///
  /// You should add logic to your Amazon SQS message consumer to take any
  /// needed action (for example, resource cleanup) upon receipt of the message
  /// followed by a call to <code>SendPipelineExecutionStepSuccess</code> or
  /// <code>SendPipelineExecutionStepFailure</code>.
  ///
  /// Only when SageMaker Pipelines receives one of these calls will it stop the
  /// pipeline execution.
  ///
  /// <b>Lambda Step</b>
  ///
  /// A pipeline execution can't be stopped while a lambda step is running
  /// because the Lambda function invoked by the lambda step can't be stopped.
  /// If you attempt to stop the execution while the Lambda function is running,
  /// the pipeline waits for the Lambda function to finish or until the timeout
  /// is hit, whichever occurs first, and then stops. If the Lambda function
  /// finishes, the pipeline execution status is <code>Stopped</code>. If the
  /// timeout is hit the pipeline execution status is <code>Failed</code>.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [clientRequestToken] :
  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the operation. An idempotent operation completes no more
  /// than once.
  Future<StopPipelineExecutionResponse> stopPipelineExecution({
    required String pipelineExecutionArn,
    String? clientRequestToken,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopPipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        'ClientRequestToken':
            clientRequestToken ?? _s.generateIdempotencyToken(),
      },
    );

    return StopPipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Stops a processing job.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [processingJobName] :
  /// The name of the processing job to stop.
  Future<void> stopProcessingJob({
    required String processingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopProcessingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProcessingJobName': processingJobName,
      },
    );
  }

  /// Stops a training job. To stop a job, SageMaker sends the algorithm the
  /// <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
  /// Algorithms might use this 120-second window to save the model artifacts,
  /// so the results of the training is not lost.
  ///
  /// When it receives a <code>StopTrainingJob</code> request, SageMaker changes
  /// the status of the job to <code>Stopping</code>. After SageMaker stops the
  /// job, it sets the status to <code>Stopped</code>.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trainingJobName] :
  /// The name of the training job to stop.
  Future<void> stopTrainingJob({
    required String trainingJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopTrainingJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrainingJobName': trainingJobName,
      },
    );
  }

  /// Stops a batch transform job.
  ///
  /// When Amazon SageMaker receives a <code>StopTransformJob</code> request,
  /// the status of the job changes to <code>Stopping</code>. After Amazon
  /// SageMaker stops the job, the status is set to <code>Stopped</code>. When
  /// you stop a batch transform job before it is completed, Amazon SageMaker
  /// doesn't store the job's output in Amazon S3.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [transformJobName] :
  /// The name of the batch transform job to stop.
  Future<void> stopTransformJob({
    required String transformJobName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.StopTransformJob'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TransformJobName': transformJobName,
      },
    );
  }

  /// Updates an action.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [actionName] :
  /// The name of the action to update.
  ///
  /// Parameter [description] :
  /// The new description for the action.
  ///
  /// Parameter [properties] :
  /// The new list of properties. Overwrites the current property list.
  ///
  /// Parameter [propertiesToRemove] :
  /// A list of properties to remove.
  ///
  /// Parameter [status] :
  /// The new status for the action.
  Future<UpdateActionResponse> updateAction({
    required String actionName,
    String? description,
    Map<String, String>? properties,
    List<String>? propertiesToRemove,
    ActionStatus? status,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateAction'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ActionName': actionName,
        if (description != null) 'Description': description,
        if (properties != null) 'Properties': properties,
        if (propertiesToRemove != null)
          'PropertiesToRemove': propertiesToRemove,
        if (status != null) 'Status': status.value,
      },
    );

    return UpdateActionResponse.fromJson(jsonResponse.body);
  }

  /// Updates the properties of an AppImageConfig.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [appImageConfigName] :
  /// The name of the AppImageConfig to update.
  ///
  /// Parameter [codeEditorAppImageConfig] :
  /// The Code Editor app running on the image.
  ///
  /// Parameter [jupyterLabAppImageConfig] :
  /// The JupyterLab app running on the image.
  ///
  /// Parameter [kernelGatewayImageConfig] :
  /// The new KernelGateway app to run on the image.
  Future<UpdateAppImageConfigResponse> updateAppImageConfig({
    required String appImageConfigName,
    CodeEditorAppImageConfig? codeEditorAppImageConfig,
    JupyterLabAppImageConfig? jupyterLabAppImageConfig,
    KernelGatewayImageConfig? kernelGatewayImageConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateAppImageConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'AppImageConfigName': appImageConfigName,
        if (codeEditorAppImageConfig != null)
          'CodeEditorAppImageConfig': codeEditorAppImageConfig,
        if (jupyterLabAppImageConfig != null)
          'JupyterLabAppImageConfig': jupyterLabAppImageConfig,
        if (kernelGatewayImageConfig != null)
          'KernelGatewayImageConfig': kernelGatewayImageConfig,
      },
    );

    return UpdateAppImageConfigResponse.fromJson(jsonResponse.body);
  }

  /// Updates an artifact.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [artifactArn] :
  /// The Amazon Resource Name (ARN) of the artifact to update.
  ///
  /// Parameter [artifactName] :
  /// The new name for the artifact.
  ///
  /// Parameter [properties] :
  /// The new list of properties. Overwrites the current property list.
  ///
  /// Parameter [propertiesToRemove] :
  /// A list of properties to remove.
  Future<UpdateArtifactResponse> updateArtifact({
    required String artifactArn,
    String? artifactName,
    Map<String, String>? properties,
    List<String>? propertiesToRemove,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateArtifact'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ArtifactArn': artifactArn,
        if (artifactName != null) 'ArtifactName': artifactName,
        if (properties != null) 'Properties': properties,
        if (propertiesToRemove != null)
          'PropertiesToRemove': propertiesToRemove,
      },
    );

    return UpdateArtifactResponse.fromJson(jsonResponse.body);
  }

  /// Updates a SageMaker HyperPod cluster.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [clusterName] :
  /// Specify the name of the SageMaker HyperPod cluster you want to update.
  ///
  /// Parameter [instanceGroups] :
  /// Specify the instance groups to update.
  Future<UpdateClusterResponse> updateCluster({
    required String clusterName,
    required List<ClusterInstanceGroupSpecification> instanceGroups,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateCluster'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
        'InstanceGroups': instanceGroups,
      },
    );

    return UpdateClusterResponse.fromJson(jsonResponse.body);
  }

  /// Updates the platform software of a SageMaker HyperPod cluster for security
  /// patching. To learn how to use this API, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-operate.html#sagemaker-hyperpod-operate-cli-command-update-cluster-software">Update
  /// the SageMaker HyperPod platform software of a cluster</a>.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [clusterName] :
  /// Specify the name or the Amazon Resource Name (ARN) of the SageMaker
  /// HyperPod cluster you want to update for security patching.
  Future<UpdateClusterSoftwareResponse> updateClusterSoftware({
    required String clusterName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateClusterSoftware'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ClusterName': clusterName,
      },
    );

    return UpdateClusterSoftwareResponse.fromJson(jsonResponse.body);
  }

  /// Updates the specified Git repository with the specified values.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [codeRepositoryName] :
  /// The name of the Git repository to update.
  ///
  /// Parameter [gitConfig] :
  /// The configuration of the git repository, including the URL and the Amazon
  /// Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that
  /// contains the credentials used to access the repository. The secret must
  /// have a staging label of <code>AWSCURRENT</code> and must be in the
  /// following format:
  ///
  /// <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code>
  Future<UpdateCodeRepositoryOutput> updateCodeRepository({
    required String codeRepositoryName,
    GitConfigForUpdate? gitConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateCodeRepository'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'CodeRepositoryName': codeRepositoryName,
        if (gitConfig != null) 'GitConfig': gitConfig,
      },
    );

    return UpdateCodeRepositoryOutput.fromJson(jsonResponse.body);
  }

  /// Updates a context.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [contextName] :
  /// The name of the context to update.
  ///
  /// Parameter [description] :
  /// The new description for the context.
  ///
  /// Parameter [properties] :
  /// The new list of properties. Overwrites the current property list.
  ///
  /// Parameter [propertiesToRemove] :
  /// A list of properties to remove.
  Future<UpdateContextResponse> updateContext({
    required String contextName,
    String? description,
    Map<String, String>? properties,
    List<String>? propertiesToRemove,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateContext'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ContextName': contextName,
        if (description != null) 'Description': description,
        if (properties != null) 'Properties': properties,
        if (propertiesToRemove != null)
          'PropertiesToRemove': propertiesToRemove,
      },
    );

    return UpdateContextResponse.fromJson(jsonResponse.body);
  }

  /// Updates a fleet of devices.
  ///
  /// May throw [ResourceInUse].
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet.
  ///
  /// Parameter [outputConfig] :
  /// Output configuration for storing sample data collected by the fleet.
  ///
  /// Parameter [description] :
  /// Description of the fleet.
  ///
  /// Parameter [enableIotRoleAlias] :
  /// Whether to create an Amazon Web Services IoT Role Alias during device
  /// fleet creation. The name of the role alias generated will match this
  /// pattern: "SageMakerEdge-{DeviceFleetName}".
  ///
  /// For example, if your device fleet is called "demo-fleet", the name of the
  /// role alias will be "SageMakerEdge-demo-fleet".
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the device.
  Future<void> updateDeviceFleet({
    required String deviceFleetName,
    required EdgeOutputConfig outputConfig,
    String? description,
    bool? enableIotRoleAlias,
    String? roleArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateDeviceFleet'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'OutputConfig': outputConfig,
        if (description != null) 'Description': description,
        if (enableIotRoleAlias != null)
          'EnableIotRoleAlias': enableIotRoleAlias,
        if (roleArn != null) 'RoleArn': roleArn,
      },
    );
  }

  /// Updates one or more devices in a fleet.
  ///
  /// Parameter [deviceFleetName] :
  /// The name of the fleet the devices belong to.
  ///
  /// Parameter [devices] :
  /// List of devices to register with Edge Manager agent.
  Future<void> updateDevices({
    required String deviceFleetName,
    required List<Device> devices,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateDevices'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DeviceFleetName': deviceFleetName,
        'Devices': devices,
      },
    );
  }

  /// Updates the default settings for new user profiles in the domain.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The ID of the domain to be updated.
  ///
  /// Parameter [appNetworkAccessType] :
  /// Specifies the VPC used for non-EFS traffic.
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed
  /// by Amazon SageMaker, which allows direct internet access.
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All Studio traffic is through the specified VPC and
  /// subnets.
  /// </li>
  /// </ul>
  /// This configuration can only be modified if there are no apps in the
  /// <code>InService</code>, <code>Pending</code>, or <code>Deleting</code>
  /// state. The configuration cannot be updated if
  /// <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code>
  /// is already set or
  /// <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code>
  /// is provided as part of the same request.
  ///
  /// Parameter [appSecurityGroupManagement] :
  /// The entity that creates and manages the required security groups for
  /// inter-app communication in <code>VPCOnly</code> mode. Required when
  /// <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and
  /// <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code>
  /// is provided. If setting up the domain for use with RStudio, this value
  /// must be set to <code>Service</code>.
  ///
  /// Parameter [defaultSpaceSettings] :
  /// The default settings used to create a space within the domain.
  ///
  /// Parameter [defaultUserSettings] :
  /// A collection of settings.
  ///
  /// Parameter [domainSettingsForUpdate] :
  /// A collection of <code>DomainSettings</code> configuration values to
  /// update.
  ///
  /// Parameter [subnetIds] :
  /// The VPC subnets that Studio uses for communication.
  ///
  /// If removing subnets, ensure there are no apps in the
  /// <code>InService</code>, <code>Pending</code>, or <code>Deleting</code>
  /// state.
  Future<UpdateDomainResponse> updateDomain({
    required String domainId,
    AppNetworkAccessType? appNetworkAccessType,
    AppSecurityGroupManagement? appSecurityGroupManagement,
    DefaultSpaceSettings? defaultSpaceSettings,
    UserSettings? defaultUserSettings,
    DomainSettingsForUpdate? domainSettingsForUpdate,
    List<String>? subnetIds,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateDomain'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        if (appNetworkAccessType != null)
          'AppNetworkAccessType': appNetworkAccessType.value,
        if (appSecurityGroupManagement != null)
          'AppSecurityGroupManagement': appSecurityGroupManagement.value,
        if (defaultSpaceSettings != null)
          'DefaultSpaceSettings': defaultSpaceSettings,
        if (defaultUserSettings != null)
          'DefaultUserSettings': defaultUserSettings,
        if (domainSettingsForUpdate != null)
          'DomainSettingsForUpdate': domainSettingsForUpdate,
        if (subnetIds != null) 'SubnetIds': subnetIds,
      },
    );

    return UpdateDomainResponse.fromJson(jsonResponse.body);
  }

  /// Deploys the <code>EndpointConfig</code> specified in the request to a new
  /// fleet of instances. SageMaker shifts endpoint traffic to the new instances
  /// with the updated endpoint configuration and then deletes the old instances
  /// using the previous <code>EndpointConfig</code> (there is no availability
  /// loss). For more information about how to control the update and traffic
  /// shifting process, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/deployment-guardrails.html">
  /// Update models in production</a>.
  ///
  /// When SageMaker receives the request, it sets the endpoint status to
  /// <code>Updating</code>. After updating the endpoint, it sets the status to
  /// <code>InService</code>. To check the status of an endpoint, use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a>
  /// API.
  /// <note>
  /// You must not delete an <code>EndpointConfig</code> in use by an endpoint
  /// that is live or while the <code>UpdateEndpoint</code> or
  /// <code>CreateEndpoint</code> operations are being performed on the
  /// endpoint. To update an endpoint, you must create a new
  /// <code>EndpointConfig</code>.
  ///
  /// If you delete the <code>EndpointConfig</code> of an endpoint that is
  /// active or being created or updated you may lose visibility into the
  /// instance type the endpoint is using. The endpoint must be deleted in order
  /// to stop incurring charges.
  /// </note>
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [endpointConfigName] :
  /// The name of the new endpoint configuration.
  ///
  /// Parameter [endpointName] :
  /// The name of the endpoint whose configuration you want to update.
  ///
  /// Parameter [deploymentConfig] :
  /// The deployment configuration for an endpoint, which contains the desired
  /// deployment strategy and rollback configurations.
  ///
  /// Parameter [excludeRetainedVariantProperties] :
  /// When you are updating endpoint resources with
  /// <code>RetainAllVariantProperties</code>, whose value is set to
  /// <code>true</code>, <code>ExcludeRetainedVariantProperties</code> specifies
  /// the list of type <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">VariantProperty</a>
  /// to override with the values provided by <code>EndpointConfig</code>. If
  /// you don't specify a value for
  /// <code>ExcludeRetainedVariantProperties</code>, no variant properties are
  /// overridden.
  ///
  /// Parameter [retainAllVariantProperties] :
  /// When updating endpoint resources, enables or disables the retention of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">variant
  /// properties</a>, such as the instance count or the variant weight. To
  /// retain the variant properties of an endpoint when updating it, set
  /// <code>RetainAllVariantProperties</code> to <code>true</code>. To use the
  /// variant properties specified in a new <code>EndpointConfig</code> call
  /// when updating an endpoint, set <code>RetainAllVariantProperties</code> to
  /// <code>false</code>. The default is <code>false</code>.
  ///
  /// Parameter [retainDeploymentConfig] :
  /// Specifies whether to reuse the last deployment configuration. The default
  /// value is false (the configuration is not reused).
  Future<UpdateEndpointOutput> updateEndpoint({
    required String endpointConfigName,
    required String endpointName,
    DeploymentConfig? deploymentConfig,
    List<VariantProperty>? excludeRetainedVariantProperties,
    bool? retainAllVariantProperties,
    bool? retainDeploymentConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateEndpoint'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'EndpointConfigName': endpointConfigName,
        'EndpointName': endpointName,
        if (deploymentConfig != null) 'DeploymentConfig': deploymentConfig,
        if (excludeRetainedVariantProperties != null)
          'ExcludeRetainedVariantProperties': excludeRetainedVariantProperties,
        if (retainAllVariantProperties != null)
          'RetainAllVariantProperties': retainAllVariantProperties,
        if (retainDeploymentConfig != null)
          'RetainDeploymentConfig': retainDeploymentConfig,
      },
    );

    return UpdateEndpointOutput.fromJson(jsonResponse.body);
  }

  /// Updates variant weight of one or more variants associated with an existing
  /// endpoint, or capacity of one variant associated with an existing endpoint.
  /// When it receives the request, SageMaker sets the endpoint status to
  /// <code>Updating</code>. After updating the endpoint, it sets the status to
  /// <code>InService</code>. To check the status of an endpoint, use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a>
  /// API.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [desiredWeightsAndCapacities] :
  /// An object that provides new capacity and weight values for a variant.
  ///
  /// Parameter [endpointName] :
  /// The name of an existing SageMaker endpoint.
  Future<UpdateEndpointWeightsAndCapacitiesOutput>
      updateEndpointWeightsAndCapacities({
    required List<DesiredWeightAndCapacity> desiredWeightsAndCapacities,
    required String endpointName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateEndpointWeightsAndCapacities'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DesiredWeightsAndCapacities': desiredWeightsAndCapacities,
        'EndpointName': endpointName,
      },
    );

    return UpdateEndpointWeightsAndCapacitiesOutput.fromJson(jsonResponse.body);
  }

  /// Adds, updates, or removes the description of an experiment. Updates the
  /// display name of an experiment.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [experimentName] :
  /// The name of the experiment to update.
  ///
  /// Parameter [description] :
  /// The description of the experiment.
  ///
  /// Parameter [displayName] :
  /// The name of the experiment as displayed. The name doesn't need to be
  /// unique. If <code>DisplayName</code> isn't specified,
  /// <code>ExperimentName</code> is displayed.
  Future<UpdateExperimentResponse> updateExperiment({
    required String experimentName,
    String? description,
    String? displayName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ExperimentName': experimentName,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
      },
    );

    return UpdateExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Updates the feature group by either adding features or updating the online
  /// store configuration. Use one of the following request parameters at a time
  /// while using the <code>UpdateFeatureGroup</code> API.
  ///
  /// You can add features for your feature group using the
  /// <code>FeatureAdditions</code> request parameter. Features cannot be
  /// removed from a feature group.
  ///
  /// You can update the online store configuration by using the
  /// <code>OnlineStoreConfig</code> request parameter. If a
  /// <code>TtlDuration</code> is specified, the default
  /// <code>TtlDuration</code> applies for all records added to the feature
  /// group <i>after the feature group is updated</i>. If a record level
  /// <code>TtlDuration</code> exists from using the <code>PutRecord</code> API,
  /// the record level <code>TtlDuration</code> applies to that record instead
  /// of the default <code>TtlDuration</code>. To remove the default
  /// <code>TtlDuration</code> from an existing feature group, use the
  /// <code>UpdateFeatureGroup</code> API and set the <code>TtlDuration</code>
  /// <code>Unit</code> and <code>Value</code> to <code>null</code>.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [featureGroupName] :
  /// The name or Amazon Resource Name (ARN) of the feature group that you're
  /// updating.
  ///
  /// Parameter [featureAdditions] :
  /// Updates the feature group. Updating a feature group is an asynchronous
  /// operation. When you get an HTTP 200 response, you've made a valid request.
  /// It takes some time after you've made a valid request for Feature Store to
  /// update the feature group.
  ///
  /// Parameter [onlineStoreConfig] :
  /// Updates the feature group online store configuration.
  Future<UpdateFeatureGroupResponse> updateFeatureGroup({
    required String featureGroupName,
    List<FeatureDefinition>? featureAdditions,
    OnlineStoreConfigUpdate? onlineStoreConfig,
    ThroughputConfigUpdate? throughputConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateFeatureGroup'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
        if (featureAdditions != null) 'FeatureAdditions': featureAdditions,
        if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
        if (throughputConfig != null) 'ThroughputConfig': throughputConfig,
      },
    );

    return UpdateFeatureGroupResponse.fromJson(jsonResponse.body);
  }

  /// Updates the description and parameters of the feature group.
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [featureGroupName] :
  /// The name or Amazon Resource Name (ARN) of the feature group containing the
  /// feature that you're updating.
  ///
  /// Parameter [featureName] :
  /// The name of the feature that you're updating.
  ///
  /// Parameter [description] :
  /// A description that you can write to better describe the feature.
  ///
  /// Parameter [parameterAdditions] :
  /// A list of key-value pairs that you can add to better describe the feature.
  ///
  /// Parameter [parameterRemovals] :
  /// A list of parameter keys that you can specify to remove parameters that
  /// describe your feature.
  Future<void> updateFeatureMetadata({
    required String featureGroupName,
    required String featureName,
    String? description,
    List<FeatureParameter>? parameterAdditions,
    List<String>? parameterRemovals,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateFeatureMetadata'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'FeatureGroupName': featureGroupName,
        'FeatureName': featureName,
        if (description != null) 'Description': description,
        if (parameterAdditions != null)
          'ParameterAdditions': parameterAdditions,
        if (parameterRemovals != null) 'ParameterRemovals': parameterRemovals,
      },
    );
  }

  /// Update a hub.
  /// <note>
  /// Hub APIs are only callable through SageMaker Studio.
  /// </note>
  ///
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [hubName] :
  /// The name of the hub to update.
  ///
  /// Parameter [hubDescription] :
  /// A description of the updated hub.
  ///
  /// Parameter [hubDisplayName] :
  /// The display name of the hub.
  ///
  /// Parameter [hubSearchKeywords] :
  /// The searchable keywords for the hub.
  Future<UpdateHubResponse> updateHub({
    required String hubName,
    String? hubDescription,
    String? hubDisplayName,
    List<String>? hubSearchKeywords,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateHub'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'HubName': hubName,
        if (hubDescription != null) 'HubDescription': hubDescription,
        if (hubDisplayName != null) 'HubDisplayName': hubDisplayName,
        if (hubSearchKeywords != null) 'HubSearchKeywords': hubSearchKeywords,
      },
    );

    return UpdateHubResponse.fromJson(jsonResponse.body);
  }

  /// Updates the properties of a SageMaker image. To change the image's tags,
  /// use the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html">DeleteTags</a>
  /// APIs.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image to update.
  ///
  /// Parameter [deleteProperties] :
  /// A list of properties to delete. Only the <code>Description</code> and
  /// <code>DisplayName</code> properties can be deleted.
  ///
  /// Parameter [description] :
  /// The new description for the image.
  ///
  /// Parameter [displayName] :
  /// The new display name for the image.
  ///
  /// Parameter [roleArn] :
  /// The new ARN for the IAM role that enables Amazon SageMaker to perform
  /// tasks on your behalf.
  Future<UpdateImageResponse> updateImage({
    required String imageName,
    List<String>? deleteProperties,
    String? description,
    String? displayName,
    String? roleArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateImage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (deleteProperties != null) 'DeleteProperties': deleteProperties,
        if (description != null) 'Description': description,
        if (displayName != null) 'DisplayName': displayName,
        if (roleArn != null) 'RoleArn': roleArn,
      },
    );

    return UpdateImageResponse.fromJson(jsonResponse.body);
  }

  /// Updates the properties of a SageMaker image version.
  ///
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [imageName] :
  /// The name of the image.
  ///
  /// Parameter [alias] :
  /// The alias of the image version.
  ///
  /// Parameter [aliasesToAdd] :
  /// A list of aliases to add.
  ///
  /// Parameter [aliasesToDelete] :
  /// A list of aliases to delete.
  ///
  /// Parameter [horovod] :
  /// Indicates Horovod compatibility.
  ///
  /// Parameter [jobType] :
  /// Indicates SageMaker job type compatibility.
  ///
  /// <ul>
  /// <li>
  /// <code>TRAINING</code>: The image version is compatible with SageMaker
  /// training jobs.
  /// </li>
  /// <li>
  /// <code>INFERENCE</code>: The image version is compatible with SageMaker
  /// inference jobs.
  /// </li>
  /// <li>
  /// <code>NOTEBOOK_KERNEL</code>: The image version is compatible with
  /// SageMaker notebook kernels.
  /// </li>
  /// </ul>
  ///
  /// Parameter [mLFramework] :
  /// The machine learning framework vended in the image version.
  ///
  /// Parameter [processor] :
  /// Indicates CPU or GPU compatibility.
  ///
  /// <ul>
  /// <li>
  /// <code>CPU</code>: The image version is compatible with CPU.
  /// </li>
  /// <li>
  /// <code>GPU</code>: The image version is compatible with GPU.
  /// </li>
  /// </ul>
  ///
  /// Parameter [programmingLang] :
  /// The supported programming language and its version.
  ///
  /// Parameter [releaseNotes] :
  /// The maintainer description of the image version.
  ///
  /// Parameter [vendorGuidance] :
  /// The availability of the image version specified by the maintainer.
  ///
  /// <ul>
  /// <li>
  /// <code>NOT_PROVIDED</code>: The maintainers did not provide a status for
  /// image version stability.
  /// </li>
  /// <li>
  /// <code>STABLE</code>: The image version is stable.
  /// </li>
  /// <li>
  /// <code>TO_BE_ARCHIVED</code>: The image version is set to be archived.
  /// Custom image versions that are set to be archived are automatically
  /// archived after three months.
  /// </li>
  /// <li>
  /// <code>ARCHIVED</code>: The image version is archived. Archived image
  /// versions are not searchable and are no longer actively supported.
  /// </li>
  /// </ul>
  ///
  /// Parameter [version] :
  /// The version of the image.
  Future<UpdateImageVersionResponse> updateImageVersion({
    required String imageName,
    String? alias,
    List<String>? aliasesToAdd,
    List<String>? aliasesToDelete,
    bool? horovod,
    JobType? jobType,
    String? mLFramework,
    Processor? processor,
    String? programmingLang,
    String? releaseNotes,
    VendorGuidance? vendorGuidance,
    int? version,
  }) async {
    _s.validateNumRange(
      'version',
      version,
      0,
      1152921504606846976,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateImageVersion'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ImageName': imageName,
        if (alias != null) 'Alias': alias,
        if (aliasesToAdd != null) 'AliasesToAdd': aliasesToAdd,
        if (aliasesToDelete != null) 'AliasesToDelete': aliasesToDelete,
        if (horovod != null) 'Horovod': horovod,
        if (jobType != null) 'JobType': jobType.value,
        if (mLFramework != null) 'MLFramework': mLFramework,
        if (processor != null) 'Processor': processor.value,
        if (programmingLang != null) 'ProgrammingLang': programmingLang,
        if (releaseNotes != null) 'ReleaseNotes': releaseNotes,
        if (vendorGuidance != null) 'VendorGuidance': vendorGuidance.value,
        if (version != null) 'Version': version,
      },
    );

    return UpdateImageVersionResponse.fromJson(jsonResponse.body);
  }

  /// Updates an inference component.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [inferenceComponentName] :
  /// The name of the inference component.
  ///
  /// Parameter [runtimeConfig] :
  /// Runtime settings for a model that is deployed with an inference component.
  ///
  /// Parameter [specification] :
  /// Details about the resources to deploy with this inference component,
  /// including the model, container, and compute resources.
  Future<UpdateInferenceComponentOutput> updateInferenceComponent({
    required String inferenceComponentName,
    InferenceComponentRuntimeConfig? runtimeConfig,
    InferenceComponentSpecification? specification,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateInferenceComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'InferenceComponentName': inferenceComponentName,
        if (runtimeConfig != null) 'RuntimeConfig': runtimeConfig,
        if (specification != null) 'Specification': specification,
      },
    );

    return UpdateInferenceComponentOutput.fromJson(jsonResponse.body);
  }

  /// Runtime settings for a model that is deployed with an inference component.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [desiredRuntimeConfig] :
  /// Runtime settings for a model that is deployed with an inference component.
  ///
  /// Parameter [inferenceComponentName] :
  /// The name of the inference component to update.
  Future<UpdateInferenceComponentRuntimeConfigOutput>
      updateInferenceComponentRuntimeConfig({
    required InferenceComponentRuntimeConfig desiredRuntimeConfig,
    required String inferenceComponentName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateInferenceComponentRuntimeConfig'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DesiredRuntimeConfig': desiredRuntimeConfig,
        'InferenceComponentName': inferenceComponentName,
      },
    );

    return UpdateInferenceComponentRuntimeConfigOutput.fromJson(
        jsonResponse.body);
  }

  /// Updates an inference experiment that you created. The status of the
  /// inference experiment has to be either <code>Created</code>,
  /// <code>Running</code>. For more information on the status of an inference
  /// experiment, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html">DescribeInferenceExperiment</a>.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [name] :
  /// The name of the inference experiment to be updated.
  ///
  /// Parameter [dataStorageConfig] :
  /// The Amazon S3 location and configuration for storing inference request and
  /// response data.
  ///
  /// Parameter [description] :
  /// The description of the inference experiment.
  ///
  /// Parameter [modelVariants] :
  /// An array of <code>ModelVariantConfig</code> objects. There is one for each
  /// variant, whose infrastructure configuration you want to update.
  ///
  /// Parameter [schedule] :
  /// The duration for which the inference experiment will run. If the status of
  /// the inference experiment is <code>Created</code>, then you can update both
  /// the start and end dates. If the status of the inference experiment is
  /// <code>Running</code>, then you can update only the end date.
  ///
  /// Parameter [shadowModeConfig] :
  /// The configuration of <code>ShadowMode</code> inference experiment type.
  /// Use this field to specify a production variant which takes all the
  /// inference requests, and a shadow variant to which Amazon SageMaker
  /// replicates a percentage of the inference requests. For the shadow variant
  /// also specify the percentage of requests that Amazon SageMaker replicates.
  Future<UpdateInferenceExperimentResponse> updateInferenceExperiment({
    required String name,
    InferenceExperimentDataStorageConfig? dataStorageConfig,
    String? description,
    List<ModelVariantConfig>? modelVariants,
    InferenceExperimentSchedule? schedule,
    ShadowModeConfig? shadowModeConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateInferenceExperiment'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'Name': name,
        if (dataStorageConfig != null) 'DataStorageConfig': dataStorageConfig,
        if (description != null) 'Description': description,
        if (modelVariants != null) 'ModelVariants': modelVariants,
        if (schedule != null) 'Schedule': schedule,
        if (shadowModeConfig != null) 'ShadowModeConfig': shadowModeConfig,
      },
    );

    return UpdateInferenceExperimentResponse.fromJson(jsonResponse.body);
  }

  /// Update an Amazon SageMaker Model Card.
  /// <important>
  /// You cannot update both model card content and model card status in a
  /// single call.
  /// </important>
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  /// May throw [ConflictException].
  ///
  /// Parameter [modelCardName] :
  /// The name or Amazon Resource Name (ARN) of the model card to update.
  ///
  /// Parameter [content] :
  /// The updated model card content. Content must be in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema">model
  /// card JSON schema</a> and provided as a string.
  ///
  /// When updating model card content, be sure to include the full content and
  /// not just updated content.
  ///
  /// Parameter [modelCardStatus] :
  /// The approval status of the model card within your organization. Different
  /// organizations might have different criteria for model card review and
  /// approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates should
  /// be made to the model card, but it can still be exported.
  /// </li>
  /// </ul>
  Future<UpdateModelCardResponse> updateModelCard({
    required String modelCardName,
    String? content,
    ModelCardStatus? modelCardStatus,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateModelCard'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelCardName': modelCardName,
        if (content != null) 'Content': content,
        if (modelCardStatus != null) 'ModelCardStatus': modelCardStatus.value,
      },
    );

    return UpdateModelCardResponse.fromJson(jsonResponse.body);
  }

  /// Updates a versioned model.
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [modelPackageArn] :
  /// The Amazon Resource Name (ARN) of the model package.
  ///
  /// Parameter [additionalInferenceSpecificationsToAdd] :
  /// An array of additional Inference Specification objects to be added to the
  /// existing array additional Inference Specification. Total number of
  /// additional Inference Specifications can not exceed 15. Each additional
  /// Inference Specification specifies artifacts based on this model package
  /// that can be used on inference endpoints. Generally used with SageMaker Neo
  /// to store the compiled artifacts.
  ///
  /// Parameter [approvalDescription] :
  /// A description for the approval status of the model.
  ///
  /// Parameter [customerMetadataProperties] :
  /// The metadata properties associated with the model package versions.
  ///
  /// Parameter [customerMetadataPropertiesToRemove] :
  /// The metadata properties associated with the model package versions to
  /// remove.
  ///
  /// Parameter [inferenceSpecification] :
  /// Specifies details about inference jobs that you can run with models based
  /// on this model package, including the following information:
  ///
  /// <ul>
  /// <li>
  /// The Amazon ECR paths of containers that contain the inference code and
  /// model artifacts.
  /// </li>
  /// <li>
  /// The instance types that the model package supports for transform jobs and
  /// real-time endpoints used for inference.
  /// </li>
  /// <li>
  /// The input and output content formats that the model package supports for
  /// inference.
  /// </li>
  /// </ul>
  ///
  /// Parameter [modelApprovalStatus] :
  /// The approval status of the model.
  ///
  /// Parameter [modelCard] :
  /// The model card associated with the model package. Since
  /// <code>ModelPackageModelCard</code> is tied to a model package, it is a
  /// specific usage of a model card and its schema is simplified compared to
  /// the schema of <code>ModelCard</code>. The
  /// <code>ModelPackageModelCard</code> schema does not include
  /// <code>model_package_details</code>, and <code>model_overview</code> is
  /// composed of the <code>model_creator</code> and <code>model_artifact</code>
  /// properties. For more information about the model card associated with the
  /// model package, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View
  /// the Details of a Model Version</a>.
  ///
  /// Parameter [sourceUri] :
  /// The URI of the source for the model package.
  Future<UpdateModelPackageOutput> updateModelPackage({
    required String modelPackageArn,
    List<AdditionalInferenceSpecificationDefinition>?
        additionalInferenceSpecificationsToAdd,
    String? approvalDescription,
    Map<String, String>? customerMetadataProperties,
    List<String>? customerMetadataPropertiesToRemove,
    InferenceSpecification? inferenceSpecification,
    ModelApprovalStatus? modelApprovalStatus,
    ModelPackageModelCard? modelCard,
    String? sourceUri,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateModelPackage'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ModelPackageArn': modelPackageArn,
        if (additionalInferenceSpecificationsToAdd != null)
          'AdditionalInferenceSpecificationsToAdd':
              additionalInferenceSpecificationsToAdd,
        if (approvalDescription != null)
          'ApprovalDescription': approvalDescription,
        if (customerMetadataProperties != null)
          'CustomerMetadataProperties': customerMetadataProperties,
        if (customerMetadataPropertiesToRemove != null)
          'CustomerMetadataPropertiesToRemove':
              customerMetadataPropertiesToRemove,
        if (inferenceSpecification != null)
          'InferenceSpecification': inferenceSpecification,
        if (modelApprovalStatus != null)
          'ModelApprovalStatus': modelApprovalStatus.value,
        if (modelCard != null) 'ModelCard': modelCard,
        if (sourceUri != null) 'SourceUri': sourceUri,
      },
    );

    return UpdateModelPackageOutput.fromJson(jsonResponse.body);
  }

  /// Update the parameters of a model monitor alert.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [datapointsToAlert] :
  /// Within <code>EvaluationPeriod</code>, how many execution failures will
  /// raise an alert.
  ///
  /// Parameter [evaluationPeriod] :
  /// The number of most recent monitoring executions to consider when
  /// evaluating alert status.
  ///
  /// Parameter [monitoringAlertName] :
  /// The name of a monitoring alert.
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of a monitoring schedule.
  Future<UpdateMonitoringAlertResponse> updateMonitoringAlert({
    required int datapointsToAlert,
    required int evaluationPeriod,
    required String monitoringAlertName,
    required String monitoringScheduleName,
  }) async {
    _s.validateNumRange(
      'datapointsToAlert',
      datapointsToAlert,
      1,
      100,
      isRequired: true,
    );
    _s.validateNumRange(
      'evaluationPeriod',
      evaluationPeriod,
      1,
      100,
      isRequired: true,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateMonitoringAlert'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DatapointsToAlert': datapointsToAlert,
        'EvaluationPeriod': evaluationPeriod,
        'MonitoringAlertName': monitoringAlertName,
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );

    return UpdateMonitoringAlertResponse.fromJson(jsonResponse.body);
  }

  /// Updates a previously created schedule.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [monitoringScheduleConfig] :
  /// The configuration object that specifies the monitoring schedule and
  /// defines the monitoring job.
  ///
  /// Parameter [monitoringScheduleName] :
  /// The name of the monitoring schedule. The name must be unique within an
  /// Amazon Web Services Region within an Amazon Web Services account.
  Future<UpdateMonitoringScheduleResponse> updateMonitoringSchedule({
    required MonitoringScheduleConfig monitoringScheduleConfig,
    required String monitoringScheduleName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateMonitoringSchedule'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'MonitoringScheduleConfig': monitoringScheduleConfig,
        'MonitoringScheduleName': monitoringScheduleName,
      },
    );

    return UpdateMonitoringScheduleResponse.fromJson(jsonResponse.body);
  }

  /// Updates a notebook instance. NotebookInstance updates include upgrading or
  /// downgrading the ML compute instance used for your notebook instance to
  /// accommodate changes in your workload requirements.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceName] :
  /// The name of the notebook instance to update.
  ///
  /// Parameter [acceleratorTypes] :
  /// A list of the Elastic Inference (EI) instance types to associate with this
  /// notebook instance. Currently only one EI instance type can be associated
  /// with a notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using
  /// Elastic Inference in Amazon SageMaker</a>.
  ///
  /// Parameter [additionalCodeRepositories] :
  /// An array of up to three Git repositories to associate with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of
  /// your notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  ///
  /// Parameter [defaultCodeRepository] :
  /// The Git repository to associate with the notebook instance as its default
  /// code repository. This can be either the name of a Git repository stored as
  /// a resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open
  /// a notebook instance, it opens in the directory that contains this
  /// repository. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  ///
  /// Parameter [disassociateAcceleratorTypes] :
  /// A list of the Elastic Inference (EI) instance types to remove from this
  /// notebook instance. This operation is idempotent. If you specify an
  /// accelerator type that is not associated with the notebook instance when
  /// you call this method, it does not throw an error.
  ///
  /// Parameter [disassociateAdditionalCodeRepositories] :
  /// A list of names or URLs of the default Git repositories to remove from
  /// this notebook instance. This operation is idempotent. If you specify a Git
  /// repository that is not associated with the notebook instance when you call
  /// this method, it does not throw an error.
  ///
  /// Parameter [disassociateDefaultCodeRepository] :
  /// The name or URL of the default Git repository to remove from this notebook
  /// instance. This operation is idempotent. If you specify a Git repository
  /// that is not associated with the notebook instance when you call this
  /// method, it does not throw an error.
  ///
  /// Parameter [disassociateLifecycleConfig] :
  /// Set to <code>true</code> to remove the notebook instance lifecycle
  /// configuration currently associated with the notebook instance. This
  /// operation is idempotent. If you specify a lifecycle configuration that is
  /// not associated with the notebook instance when you call this method, it
  /// does not throw an error.
  ///
  /// Parameter [instanceMetadataServiceConfiguration] :
  /// Information on the IMDS configuration of the notebook instance
  ///
  /// Parameter [instanceType] :
  /// The Amazon ML compute instance type.
  ///
  /// Parameter [lifecycleConfigName] :
  /// The name of a lifecycle configuration to associate with the notebook
  /// instance. For information about lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume
  /// to access the notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
  /// Roles</a>.
  /// <note>
  /// To be able to pass this role to SageMaker, the caller of this API must
  /// have the <code>iam:PassRole</code> permission.
  /// </note>
  ///
  /// Parameter [rootAccess] :
  /// Whether root access is enabled or disabled for users of the notebook
  /// instance. The default value is <code>Enabled</code>.
  /// <note>
  /// If you set this to <code>Disabled</code>, users don't have root access on
  /// the notebook instance, but lifecycle configuration scripts still run with
  /// root permissions.
  /// </note>
  ///
  /// Parameter [volumeSizeInGB] :
  /// The size, in GB, of the ML storage volume to attach to the notebook
  /// instance. The default value is 5 GB. ML storage volumes are encrypted, so
  /// SageMaker can't determine the amount of available free space on the
  /// volume. Because of this, you can increase the volume size when you update
  /// a notebook instance, but you can't decrease the volume size. If you want
  /// to decrease the size of the ML storage volume in use, create a new
  /// notebook instance with the desired size.
  Future<void> updateNotebookInstance({
    required String notebookInstanceName,
    List<NotebookInstanceAcceleratorType>? acceleratorTypes,
    List<String>? additionalCodeRepositories,
    String? defaultCodeRepository,
    bool? disassociateAcceleratorTypes,
    bool? disassociateAdditionalCodeRepositories,
    bool? disassociateDefaultCodeRepository,
    bool? disassociateLifecycleConfig,
    InstanceMetadataServiceConfiguration? instanceMetadataServiceConfiguration,
    InstanceType? instanceType,
    String? lifecycleConfigName,
    String? roleArn,
    RootAccess? rootAccess,
    int? volumeSizeInGB,
  }) async {
    _s.validateNumRange(
      'volumeSizeInGB',
      volumeSizeInGB,
      5,
      16384,
    );
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateNotebookInstance'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceName': notebookInstanceName,
        if (acceleratorTypes != null)
          'AcceleratorTypes': acceleratorTypes.map((e) => e.value).toList(),
        if (additionalCodeRepositories != null)
          'AdditionalCodeRepositories': additionalCodeRepositories,
        if (defaultCodeRepository != null)
          'DefaultCodeRepository': defaultCodeRepository,
        if (disassociateAcceleratorTypes != null)
          'DisassociateAcceleratorTypes': disassociateAcceleratorTypes,
        if (disassociateAdditionalCodeRepositories != null)
          'DisassociateAdditionalCodeRepositories':
              disassociateAdditionalCodeRepositories,
        if (disassociateDefaultCodeRepository != null)
          'DisassociateDefaultCodeRepository':
              disassociateDefaultCodeRepository,
        if (disassociateLifecycleConfig != null)
          'DisassociateLifecycleConfig': disassociateLifecycleConfig,
        if (instanceMetadataServiceConfiguration != null)
          'InstanceMetadataServiceConfiguration':
              instanceMetadataServiceConfiguration,
        if (instanceType != null) 'InstanceType': instanceType.value,
        if (lifecycleConfigName != null)
          'LifecycleConfigName': lifecycleConfigName,
        if (roleArn != null) 'RoleArn': roleArn,
        if (rootAccess != null) 'RootAccess': rootAccess.value,
        if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
      },
    );
  }

  /// Updates a notebook instance lifecycle configuration created with the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a>
  /// API.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [notebookInstanceLifecycleConfigName] :
  /// The name of the lifecycle configuration.
  ///
  /// Parameter [onCreate] :
  /// The shell script that runs only once, when you create a notebook instance.
  /// The shell script must be a base64-encoded string.
  ///
  /// Parameter [onStart] :
  /// The shell script that runs every time you start a notebook instance,
  /// including when you create the notebook instance. The shell script must be
  /// a base64-encoded string.
  Future<void> updateNotebookInstanceLifecycleConfig({
    required String notebookInstanceLifecycleConfigName,
    List<NotebookInstanceLifecycleHook>? onCreate,
    List<NotebookInstanceLifecycleHook>? onStart,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateNotebookInstanceLifecycleConfig'
    };
    await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
        if (onCreate != null) 'OnCreate': onCreate,
        if (onStart != null) 'OnStart': onStart,
      },
    );
  }

  /// Updates a pipeline.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineName] :
  /// The name of the pipeline to update.
  ///
  /// Parameter [parallelismConfiguration] :
  /// If specified, it applies to all executions of this pipeline by default.
  ///
  /// Parameter [pipelineDefinition] :
  /// The JSON pipeline definition.
  ///
  /// Parameter [pipelineDefinitionS3Location] :
  /// The location of the pipeline definition stored in Amazon S3. If specified,
  /// SageMaker will retrieve the pipeline definition from this location.
  ///
  /// Parameter [pipelineDescription] :
  /// The description of the pipeline.
  ///
  /// Parameter [pipelineDisplayName] :
  /// The display name of the pipeline.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
  Future<UpdatePipelineResponse> updatePipeline({
    required String pipelineName,
    ParallelismConfiguration? parallelismConfiguration,
    String? pipelineDefinition,
    PipelineDefinitionS3Location? pipelineDefinitionS3Location,
    String? pipelineDescription,
    String? pipelineDisplayName,
    String? roleArn,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdatePipeline'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineName': pipelineName,
        if (parallelismConfiguration != null)
          'ParallelismConfiguration': parallelismConfiguration,
        if (pipelineDefinition != null)
          'PipelineDefinition': pipelineDefinition,
        if (pipelineDefinitionS3Location != null)
          'PipelineDefinitionS3Location': pipelineDefinitionS3Location,
        if (pipelineDescription != null)
          'PipelineDescription': pipelineDescription,
        if (pipelineDisplayName != null)
          'PipelineDisplayName': pipelineDisplayName,
        if (roleArn != null) 'RoleArn': roleArn,
      },
    );

    return UpdatePipelineResponse.fromJson(jsonResponse.body);
  }

  /// Updates a pipeline execution.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ConflictException].
  ///
  /// Parameter [pipelineExecutionArn] :
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  ///
  /// Parameter [parallelismConfiguration] :
  /// This configuration, if specified, overrides the parallelism configuration
  /// of the parent pipeline for this specific run.
  ///
  /// Parameter [pipelineExecutionDescription] :
  /// The description of the pipeline execution.
  ///
  /// Parameter [pipelineExecutionDisplayName] :
  /// The display name of the pipeline execution.
  Future<UpdatePipelineExecutionResponse> updatePipelineExecution({
    required String pipelineExecutionArn,
    ParallelismConfiguration? parallelismConfiguration,
    String? pipelineExecutionDescription,
    String? pipelineExecutionDisplayName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdatePipelineExecution'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'PipelineExecutionArn': pipelineExecutionArn,
        if (parallelismConfiguration != null)
          'ParallelismConfiguration': parallelismConfiguration,
        if (pipelineExecutionDescription != null)
          'PipelineExecutionDescription': pipelineExecutionDescription,
        if (pipelineExecutionDisplayName != null)
          'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      },
    );

    return UpdatePipelineExecutionResponse.fromJson(jsonResponse.body);
  }

  /// Updates a machine learning (ML) project that is created from a template
  /// that sets up an ML pipeline from training to deploying an approved model.
  /// <note>
  /// You must not update a project that is in use. If you update the
  /// <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is
  /// active or being created, or updated, you may lose resources already
  /// created by the project.
  /// </note>
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [projectName] :
  /// The name of the project.
  ///
  /// Parameter [projectDescription] :
  /// The description for the project.
  ///
  /// Parameter [serviceCatalogProvisioningUpdateDetails] :
  /// The product ID and provisioning artifact ID to provision a service
  /// catalog. The provisioning artifact ID will default to the latest
  /// provisioning artifact ID of the product, if you don't provide the
  /// provisioning artifact ID. For more information, see <a
  /// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
  /// is Amazon Web Services Service Catalog</a>.
  ///
  /// Parameter [tags] :
  /// An array of key-value pairs. You can use tags to categorize your Amazon
  /// Web Services resources in different ways, for example, by purpose, owner,
  /// or environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>. In addition, the project must have tag
  /// update constraints set in order to include this parameter in the request.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-resourceupdate.html">Amazon
  /// Web Services Service Catalog Tag Update Constraints</a>.
  Future<UpdateProjectOutput> updateProject({
    required String projectName,
    String? projectDescription,
    ServiceCatalogProvisioningUpdateDetails?
        serviceCatalogProvisioningUpdateDetails,
    List<Tag>? tags,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateProject'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'ProjectName': projectName,
        if (projectDescription != null)
          'ProjectDescription': projectDescription,
        if (serviceCatalogProvisioningUpdateDetails != null)
          'ServiceCatalogProvisioningUpdateDetails':
              serviceCatalogProvisioningUpdateDetails,
        if (tags != null) 'Tags': tags,
      },
    );

    return UpdateProjectOutput.fromJson(jsonResponse.body);
  }

  /// Updates the settings of a space.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The ID of the associated domain.
  ///
  /// Parameter [spaceName] :
  /// The name of the space.
  ///
  /// Parameter [spaceDisplayName] :
  /// The name of the space that appears in the Amazon SageMaker Studio UI.
  ///
  /// Parameter [spaceSettings] :
  /// A collection of space settings.
  Future<UpdateSpaceResponse> updateSpace({
    required String domainId,
    required String spaceName,
    String? spaceDisplayName,
    SpaceSettings? spaceSettings,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateSpace'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'SpaceName': spaceName,
        if (spaceDisplayName != null) 'SpaceDisplayName': spaceDisplayName,
        if (spaceSettings != null) 'SpaceSettings': spaceSettings,
      },
    );

    return UpdateSpaceResponse.fromJson(jsonResponse.body);
  }

  /// Update a model training job to request a new Debugger profiling
  /// configuration or to change warm pool retention length.
  ///
  /// May throw [ResourceNotFound].
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [trainingJobName] :
  /// The name of a training job to update the Debugger profiling configuration.
  ///
  /// Parameter [profilerConfig] :
  /// Configuration information for Amazon SageMaker Debugger system monitoring,
  /// framework profiling, and storage paths.
  ///
  /// Parameter [profilerRuleConfigurations] :
  /// Configuration information for Amazon SageMaker Debugger rules for
  /// profiling system and framework metrics.
  ///
  /// Parameter [remoteDebugConfig] :
  /// Configuration for remote debugging while the training job is running. You
  /// can update the remote debugging configuration when the
  /// <code>SecondaryStatus</code> of the job is <code>Downloading</code> or
  /// <code>Training</code>.To learn more about the remote debugging
  /// functionality of SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html">Access
  /// a training container through Amazon Web Services Systems Manager (SSM) for
  /// remote debugging</a>.
  ///
  /// Parameter [resourceConfig] :
  /// The training job <code>ResourceConfig</code> to update warm pool retention
  /// length.
  Future<UpdateTrainingJobResponse> updateTrainingJob({
    required String trainingJobName,
    ProfilerConfigForUpdate? profilerConfig,
    List<ProfilerRuleConfiguration>? profilerRuleConfigurations,
    RemoteDebugConfigForUpdate? remoteDebugConfig,
    ResourceConfigForUpdate? resourceConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateTrainingJob'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrainingJobName': trainingJobName,
        if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
        if (profilerRuleConfigurations != null)
          'ProfilerRuleConfigurations': profilerRuleConfigurations,
        if (remoteDebugConfig != null) 'RemoteDebugConfig': remoteDebugConfig,
        if (resourceConfig != null) 'ResourceConfig': resourceConfig,
      },
    );

    return UpdateTrainingJobResponse.fromJson(jsonResponse.body);
  }

  /// Updates the display name of a trial.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialName] :
  /// The name of the trial to update.
  ///
  /// Parameter [displayName] :
  /// The name of the trial as displayed. The name doesn't need to be unique. If
  /// <code>DisplayName</code> isn't specified, <code>TrialName</code> is
  /// displayed.
  Future<UpdateTrialResponse> updateTrial({
    required String trialName,
    String? displayName,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateTrial'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialName': trialName,
        if (displayName != null) 'DisplayName': displayName,
      },
    );

    return UpdateTrialResponse.fromJson(jsonResponse.body);
  }

  /// Updates one or more properties of a trial component.
  ///
  /// May throw [ConflictException].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [trialComponentName] :
  /// The name of the component to update.
  ///
  /// Parameter [displayName] :
  /// The name of the component as displayed. The name doesn't need to be
  /// unique. If <code>DisplayName</code> isn't specified,
  /// <code>TrialComponentName</code> is displayed.
  ///
  /// Parameter [endTime] :
  /// When the component ended.
  ///
  /// Parameter [inputArtifacts] :
  /// Replaces all of the component's input artifacts with the specified
  /// artifacts or adds new input artifacts. Existing input artifacts are
  /// replaced if the trial component is updated with an identical input
  /// artifact key.
  ///
  /// Parameter [inputArtifactsToRemove] :
  /// The input artifacts to remove from the component.
  ///
  /// Parameter [outputArtifacts] :
  /// Replaces all of the component's output artifacts with the specified
  /// artifacts or adds new output artifacts. Existing output artifacts are
  /// replaced if the trial component is updated with an identical output
  /// artifact key.
  ///
  /// Parameter [outputArtifactsToRemove] :
  /// The output artifacts to remove from the component.
  ///
  /// Parameter [parameters] :
  /// Replaces all of the component's hyperparameters with the specified
  /// hyperparameters or add new hyperparameters. Existing hyperparameters are
  /// replaced if the trial component is updated with an identical
  /// hyperparameter key.
  ///
  /// Parameter [parametersToRemove] :
  /// The hyperparameters to remove from the component.
  ///
  /// Parameter [startTime] :
  /// When the component started.
  ///
  /// Parameter [status] :
  /// The new status of the component.
  Future<UpdateTrialComponentResponse> updateTrialComponent({
    required String trialComponentName,
    String? displayName,
    DateTime? endTime,
    Map<String, TrialComponentArtifact>? inputArtifacts,
    List<String>? inputArtifactsToRemove,
    Map<String, TrialComponentArtifact>? outputArtifacts,
    List<String>? outputArtifactsToRemove,
    Map<String, TrialComponentParameterValue>? parameters,
    List<String>? parametersToRemove,
    DateTime? startTime,
    TrialComponentStatus? status,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateTrialComponent'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'TrialComponentName': trialComponentName,
        if (displayName != null) 'DisplayName': displayName,
        if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
        if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
        if (inputArtifactsToRemove != null)
          'InputArtifactsToRemove': inputArtifactsToRemove,
        if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
        if (outputArtifactsToRemove != null)
          'OutputArtifactsToRemove': outputArtifactsToRemove,
        if (parameters != null) 'Parameters': parameters,
        if (parametersToRemove != null)
          'ParametersToRemove': parametersToRemove,
        if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
        if (status != null) 'Status': status,
      },
    );

    return UpdateTrialComponentResponse.fromJson(jsonResponse.body);
  }

  /// Updates a user profile.
  ///
  /// May throw [ResourceLimitExceeded].
  /// May throw [ResourceInUse].
  /// May throw [ResourceNotFound].
  ///
  /// Parameter [domainId] :
  /// The domain ID.
  ///
  /// Parameter [userProfileName] :
  /// The user profile name.
  ///
  /// Parameter [userSettings] :
  /// A collection of settings.
  Future<UpdateUserProfileResponse> updateUserProfile({
    required String domainId,
    required String userProfileName,
    UserSettings? userSettings,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateUserProfile'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'DomainId': domainId,
        'UserProfileName': userProfileName,
        if (userSettings != null) 'UserSettings': userSettings,
      },
    );

    return UpdateUserProfileResponse.fromJson(jsonResponse.body);
  }

  /// Use this operation to update your workforce. You can use this operation to
  /// require that workers use specific IP addresses to work on tasks and to
  /// update your OpenID Connect (OIDC) Identity Provider (IdP) workforce
  /// configuration.
  ///
  /// The worker portal is now supported in VPC and public internet.
  ///
  /// Use <code>SourceIpConfig</code> to restrict worker access to tasks to a
  /// specific range of IP addresses. You specify allowed IP addresses by
  /// creating a list of up to ten <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>.
  /// By default, a workforce isn't restricted to specific IP addresses. If you
  /// specify a range of IP addresses, workers who attempt to access tasks using
  /// any IP address outside the specified range are denied and get a <code>Not
  /// Found</code> error message on the worker portal.
  ///
  /// To restrict access to all the workers in public internet, add the
  /// <code>SourceIpConfig</code> CIDR value as "10.0.0.0/16".
  /// <important>
  /// Amazon SageMaker does not support Source Ip restriction for worker portals
  /// in VPC.
  /// </important>
  /// Use <code>OidcConfig</code> to update the configuration of a workforce
  /// created using your own OIDC IdP.
  /// <important>
  /// You can only update your OIDC IdP configuration when there are no work
  /// teams associated with your workforce. You can delete work teams using the
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a>
  /// operation.
  /// </important>
  /// After restricting access to a range of IP addresses or updating your OIDC
  /// IdP configuration with this operation, you can view details about your
  /// update workforce using the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html">DescribeWorkforce</a>
  /// operation.
  /// <important>
  /// This operation only applies to private workforces.
  /// </important>
  ///
  /// May throw [ConflictException].
  ///
  /// Parameter [workforceName] :
  /// The name of the private workforce that you want to update. You can find
  /// your workforce name by using the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListWorkforces.html">ListWorkforces</a>
  /// operation.
  ///
  /// Parameter [oidcConfig] :
  /// Use this parameter to update your OIDC Identity Provider (IdP)
  /// configuration for a workforce made using your own IdP.
  ///
  /// Parameter [sourceIpConfig] :
  /// A list of one to ten worker IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>)
  /// that can be used to access tasks assigned to this workforce.
  ///
  /// Maximum: Ten CIDR values
  ///
  /// Parameter [workforceVpcConfig] :
  /// Use this parameter to update your VPC configuration for a workforce.
  Future<UpdateWorkforceResponse> updateWorkforce({
    required String workforceName,
    OidcConfig? oidcConfig,
    SourceIpConfig? sourceIpConfig,
    WorkforceVpcConfigRequest? workforceVpcConfig,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateWorkforce'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkforceName': workforceName,
        if (oidcConfig != null) 'OidcConfig': oidcConfig,
        if (sourceIpConfig != null) 'SourceIpConfig': sourceIpConfig,
        if (workforceVpcConfig != null)
          'WorkforceVpcConfig': workforceVpcConfig,
      },
    );

    return UpdateWorkforceResponse.fromJson(jsonResponse.body);
  }

  /// Updates an existing work team with new member definitions or description.
  ///
  /// May throw [ResourceLimitExceeded].
  ///
  /// Parameter [workteamName] :
  /// The name of the work team to update.
  ///
  /// Parameter [description] :
  /// An updated description for the work team.
  ///
  /// Parameter [memberDefinitions] :
  /// A list of <code>MemberDefinition</code> objects that contains objects that
  /// identify the workers that make up the work team.
  ///
  /// Workforces can be created using Amazon Cognito or your own OIDC Identity
  /// Provider (IdP). For private workforces created using Amazon Cognito use
  /// <code>CognitoMemberDefinition</code>. For workforces created using your
  /// own OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>.
  /// You should not provide input for both of these parameters in a single
  /// request.
  ///
  /// For workforces created using Amazon Cognito, private work teams correspond
  /// to Amazon Cognito <i>user groups</i> within the user pool used to create a
  /// workforce. All of the <code>CognitoMemberDefinition</code> objects that
  /// make up the member definition must have the same <code>ClientId</code> and
  /// <code>UserPool</code> values. To add a Amazon Cognito user group to an
  /// existing worker pool, see <a href="">Adding groups to a User Pool</a>. For
  /// more information about user pools, see <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon
  /// Cognito User Pools</a>.
  ///
  /// For workforces created using your own OIDC IdP, specify the user groups
  /// that you want to include in your private work team in
  /// <code>OidcMemberDefinition</code> by listing those groups in
  /// <code>Groups</code>. Be aware that user groups that are already in the
  /// work team must also be listed in <code>Groups</code> when you make this
  /// request to remain on the work team. If you do not include these user
  /// groups, they will no longer be associated with the work team you update.
  ///
  /// Parameter [notificationConfiguration] :
  /// Configures SNS topic notifications for available or expiring work items
  ///
  /// Parameter [workerAccessConfiguration] :
  /// Use this optional parameter to constrain access to an Amazon S3 resource
  /// based on the IP address using supported IAM global condition keys. The
  /// Amazon S3 resource is accessed in the worker portal using a Amazon S3
  /// presigned URL.
  Future<UpdateWorkteamResponse> updateWorkteam({
    required String workteamName,
    String? description,
    List<MemberDefinition>? memberDefinitions,
    NotificationConfiguration? notificationConfiguration,
    WorkerAccessConfiguration? workerAccessConfiguration,
  }) async {
    final headers = <String, String>{
      'Content-Type': 'application/x-amz-json-1.1',
      'X-Amz-Target': 'SageMaker.UpdateWorkteam'
    };
    final jsonResponse = await _protocol.send(
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      // TODO queryParams
      headers: headers,
      payload: {
        'WorkteamName': workteamName,
        if (description != null) 'Description': description,
        if (memberDefinitions != null) 'MemberDefinitions': memberDefinitions,
        if (notificationConfiguration != null)
          'NotificationConfiguration': notificationConfiguration,
        if (workerAccessConfiguration != null)
          'WorkerAccessConfiguration': workerAccessConfiguration,
      },
    );

    return UpdateWorkteamResponse.fromJson(jsonResponse.body);
  }
}

/// A structure describing the source of an action.
class ActionSource {
  /// The URI of the source.
  final String sourceUri;

  /// The ID of the source.
  final String? sourceId;

  /// The type of the source.
  final String? sourceType;

  ActionSource({
    required this.sourceUri,
    this.sourceId,
    this.sourceType,
  });

  factory ActionSource.fromJson(Map<String, dynamic> json) {
    return ActionSource(
      sourceUri: json['SourceUri'] as String,
      sourceId: json['SourceId'] as String?,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceUri = this.sourceUri;
    final sourceId = this.sourceId;
    final sourceType = this.sourceType;
    return {
      'SourceUri': sourceUri,
      if (sourceId != null) 'SourceId': sourceId,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

enum ActionStatus {
  unknown('Unknown'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const ActionStatus(this.value);

  static ActionStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ActionStatus'));
}

/// Lists the properties of an <i>action</i>. An action represents an action or
/// activity. Some examples are a workflow step and a model deployment.
/// Generally, an action involves at least one input artifact or output
/// artifact.
class ActionSummary {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  /// The name of the action.
  final String? actionName;

  /// The type of the action.
  final String? actionType;

  /// When the action was created.
  final DateTime? creationTime;

  /// When the action was last modified.
  final DateTime? lastModifiedTime;

  /// The source of the action.
  final ActionSource? source;

  /// The status of the action.
  final ActionStatus? status;

  ActionSummary({
    this.actionArn,
    this.actionName,
    this.actionType,
    this.creationTime,
    this.lastModifiedTime,
    this.source,
    this.status,
  });

  factory ActionSummary.fromJson(Map<String, dynamic> json) {
    return ActionSummary(
      actionArn: json['ActionArn'] as String?,
      actionName: json['ActionName'] as String?,
      actionType: json['ActionType'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ActionSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.let(ActionStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    final actionName = this.actionName;
    final actionType = this.actionType;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    final status = this.status;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
      if (actionName != null) 'ActionName': actionName,
      if (actionType != null) 'ActionType': actionType,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
      if (status != null) 'Status': status.value,
    };
  }
}

class AddAssociationResponse {
  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The ARN of the source.
  final String? sourceArn;

  AddAssociationResponse({
    this.destinationArn,
    this.sourceArn,
  });

  factory AddAssociationResponse.fromJson(Map<String, dynamic> json) {
    return AddAssociationResponse(
      destinationArn: json['DestinationArn'] as String?,
      sourceArn: json['SourceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationArn = this.destinationArn;
    final sourceArn = this.sourceArn;
    return {
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (sourceArn != null) 'SourceArn': sourceArn,
    };
  }
}

class AddTagsOutput {
  /// A list of tags associated with the SageMaker resource.
  final List<Tag>? tags;

  AddTagsOutput({
    this.tags,
  });

  factory AddTagsOutput.fromJson(Map<String, dynamic> json) {
    return AddTagsOutput(
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final tags = this.tags;
    return {
      if (tags != null) 'Tags': tags,
    };
  }
}

/// A structure of additional Inference Specification. Additional Inference
/// Specification specifies details about inference jobs that can be run with
/// models based on this model package
class AdditionalInferenceSpecificationDefinition {
  /// The Amazon ECR registry path of the Docker image that contains the inference
  /// code.
  final List<ModelPackageContainerDefinition> containers;

  /// A unique name to identify the additional inference specification. The name
  /// must be unique within the list of your additional inference specifications
  /// for a particular model package.
  final String name;

  /// A description of the additional Inference specification
  final String? description;

  /// The supported MIME types for the input data.
  final List<String>? supportedContentTypes;

  /// A list of the instance types that are used to generate inferences in
  /// real-time.
  final List<ProductionVariantInstanceType>?
      supportedRealtimeInferenceInstanceTypes;

  /// The supported MIME types for the output data.
  final List<String>? supportedResponseMIMETypes;

  /// A list of the instance types on which a transformation job can be run or on
  /// which an endpoint can be deployed.
  final List<TransformInstanceType>? supportedTransformInstanceTypes;

  AdditionalInferenceSpecificationDefinition({
    required this.containers,
    required this.name,
    this.description,
    this.supportedContentTypes,
    this.supportedRealtimeInferenceInstanceTypes,
    this.supportedResponseMIMETypes,
    this.supportedTransformInstanceTypes,
  });

  factory AdditionalInferenceSpecificationDefinition.fromJson(
      Map<String, dynamic> json) {
    return AdditionalInferenceSpecificationDefinition(
      containers: (json['Containers'] as List)
          .nonNulls
          .map((e) => ModelPackageContainerDefinition.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      name: json['Name'] as String,
      description: json['Description'] as String?,
      supportedContentTypes: (json['SupportedContentTypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      supportedRealtimeInferenceInstanceTypes: (json[
              'SupportedRealtimeInferenceInstanceTypes'] as List?)
          ?.nonNulls
          .map((e) => ProductionVariantInstanceType.fromString((e as String)))
          .toList(),
      supportedResponseMIMETypes: (json['SupportedResponseMIMETypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      supportedTransformInstanceTypes:
          (json['SupportedTransformInstanceTypes'] as List?)
              ?.nonNulls
              .map((e) => TransformInstanceType.fromString((e as String)))
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final containers = this.containers;
    final name = this.name;
    final description = this.description;
    final supportedContentTypes = this.supportedContentTypes;
    final supportedRealtimeInferenceInstanceTypes =
        this.supportedRealtimeInferenceInstanceTypes;
    final supportedResponseMIMETypes = this.supportedResponseMIMETypes;
    final supportedTransformInstanceTypes =
        this.supportedTransformInstanceTypes;
    return {
      'Containers': containers,
      'Name': name,
      if (description != null) 'Description': description,
      if (supportedContentTypes != null)
        'SupportedContentTypes': supportedContentTypes,
      if (supportedRealtimeInferenceInstanceTypes != null)
        'SupportedRealtimeInferenceInstanceTypes':
            supportedRealtimeInferenceInstanceTypes
                .map((e) => e.value)
                .toList(),
      if (supportedResponseMIMETypes != null)
        'SupportedResponseMIMETypes': supportedResponseMIMETypes,
      if (supportedTransformInstanceTypes != null)
        'SupportedTransformInstanceTypes':
            supportedTransformInstanceTypes.map((e) => e.value).toList(),
    };
  }
}

/// A data source used for training or inference that is in addition to the
/// input dataset or model data.
class AdditionalS3DataSource {
  /// The data type of the additional data source that you specify for use in
  /// inference or training.
  final AdditionalS3DataSourceDataType s3DataType;

  /// The uniform resource identifier (URI) used to identify an additional data
  /// source used in inference or training.
  final String s3Uri;

  /// The type of compression used for an additional data source used in inference
  /// or training. Specify <code>None</code> if your additional data source is not
  /// compressed.
  final CompressionType? compressionType;

  AdditionalS3DataSource({
    required this.s3DataType,
    required this.s3Uri,
    this.compressionType,
  });

  factory AdditionalS3DataSource.fromJson(Map<String, dynamic> json) {
    return AdditionalS3DataSource(
      s3DataType: AdditionalS3DataSourceDataType.fromString(
          (json['S3DataType'] as String)),
      s3Uri: json['S3Uri'] as String,
      compressionType:
          (json['CompressionType'] as String?)?.let(CompressionType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    final compressionType = this.compressionType;
    return {
      'S3DataType': s3DataType.value,
      'S3Uri': s3Uri,
      if (compressionType != null) 'CompressionType': compressionType.value,
    };
  }
}

enum AdditionalS3DataSourceDataType {
  s3Object('S3Object'),
  s3Prefix('S3Prefix'),
  ;

  final String value;

  const AdditionalS3DataSourceDataType(this.value);

  static AdditionalS3DataSourceDataType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AdditionalS3DataSourceDataType'));
}

/// Edge Manager agent version.
class AgentVersion {
  /// The number of Edge Manager agents.
  final int agentCount;

  /// Version of the agent.
  final String version;

  AgentVersion({
    required this.agentCount,
    required this.version,
  });

  factory AgentVersion.fromJson(Map<String, dynamic> json) {
    return AgentVersion(
      agentCount: json['AgentCount'] as int,
      version: json['Version'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final agentCount = this.agentCount;
    final version = this.version;
    return {
      'AgentCount': agentCount,
      'Version': version,
    };
  }
}

enum AggregationTransformationValue {
  sum('sum'),
  avg('avg'),
  first('first'),
  min('min'),
  max('max'),
  ;

  final String value;

  const AggregationTransformationValue(this.value);

  static AggregationTransformationValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AggregationTransformationValue'));
}

/// An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.
class Alarm {
  /// The name of a CloudWatch alarm in your account.
  final String? alarmName;

  Alarm({
    this.alarmName,
  });

  factory Alarm.fromJson(Map<String, dynamic> json) {
    return Alarm(
      alarmName: json['AlarmName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final alarmName = this.alarmName;
    return {
      if (alarmName != null) 'AlarmName': alarmName,
    };
  }
}

enum AlgorithmSortBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const AlgorithmSortBy(this.value);

  static AlgorithmSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AlgorithmSortBy'));
}

/// Specifies the training algorithm to use in a <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a>
/// request.
///
/// For more information about algorithms provided by SageMaker, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
/// For information about using your own algorithms, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
/// Your Own Algorithms with Amazon SageMaker</a>.
class AlgorithmSpecification {
  final TrainingInputMode trainingInputMode;

  /// The name of the algorithm resource to use for the training job. This must be
  /// an algorithm resource that you created or subscribe to on Amazon Web
  /// Services Marketplace.
  /// <note>
  /// You must specify either the algorithm name to the <code>AlgorithmName</code>
  /// parameter or the image URI of the algorithm container to the
  /// <code>TrainingImage</code> parameter.
  ///
  /// Note that the <code>AlgorithmName</code> parameter is mutually exclusive
  /// with the <code>TrainingImage</code> parameter. If you specify a value for
  /// the <code>AlgorithmName</code> parameter, you can't specify a value for
  /// <code>TrainingImage</code>, and vice versa.
  ///
  /// If you specify values for both parameters, the training job might break; if
  /// you don't specify any value for both parameters, the training job might
  /// raise a <code>null</code> error.
  /// </note>
  final String? algorithmName;

  /// The arguments for a container used to run a training job. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How
  /// Amazon SageMaker Runs Your Training Image</a> for additional information.
  final List<String>? containerArguments;

  /// The <a href="https://docs.docker.com/engine/reference/builder/">entrypoint
  /// script for a Docker container</a> used to run a training job. This script
  /// takes precedence over the default train processing instructions. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How
  /// Amazon SageMaker Runs Your Training Image</a> for more information.
  final List<String>? containerEntrypoint;

  /// To generate and save time-series metrics during training, set to
  /// <code>true</code>. The default is <code>false</code> and time-series metrics
  /// aren't generated except in the following cases:
  ///
  /// <ul>
  /// <li>
  /// You use one of the SageMaker built-in algorithms
  /// </li>
  /// <li>
  /// You use one of the following <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html">Prebuilt
  /// SageMaker Docker Images</a>:
  ///
  /// <ul>
  /// <li>
  /// Tensorflow (version &gt;= 1.15)
  /// </li>
  /// <li>
  /// MXNet (version &gt;= 1.6)
  /// </li>
  /// <li>
  /// PyTorch (version &gt;= 1.3)
  /// </li>
  /// </ul> </li>
  /// <li>
  /// You specify at least one <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html">MetricDefinition</a>
  /// </li>
  /// </ul>
  final bool? enableSageMakerMetricsTimeSeries;

  /// A list of metric definition objects. Each object specifies the metric name
  /// and regular expressions used to parse algorithm logs. SageMaker publishes
  /// each metric to Amazon CloudWatch.
  final List<MetricDefinition>? metricDefinitions;

  /// The registry path of the Docker image that contains the training algorithm.
  /// For information about docker registry paths for SageMaker built-in
  /// algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Docker
  /// Registry Paths and Example Code</a> in the <i>Amazon SageMaker developer
  /// guide</i>. SageMaker supports both <code>registry/repository[:tag]</code>
  /// and <code>registry/repository[@digest]</code> image path formats. For more
  /// information about using your custom training container, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  /// <note>
  /// You must specify either the algorithm name to the <code>AlgorithmName</code>
  /// parameter or the image URI of the algorithm container to the
  /// <code>TrainingImage</code> parameter.
  ///
  /// For more information, see the note in the <code>AlgorithmName</code>
  /// parameter description.
  /// </note>
  final String? trainingImage;

  /// The configuration to use an image from a private Docker registry for a
  /// training job.
  final TrainingImageConfig? trainingImageConfig;

  AlgorithmSpecification({
    required this.trainingInputMode,
    this.algorithmName,
    this.containerArguments,
    this.containerEntrypoint,
    this.enableSageMakerMetricsTimeSeries,
    this.metricDefinitions,
    this.trainingImage,
    this.trainingImageConfig,
  });

  factory AlgorithmSpecification.fromJson(Map<String, dynamic> json) {
    return AlgorithmSpecification(
      trainingInputMode:
          TrainingInputMode.fromString((json['TrainingInputMode'] as String)),
      algorithmName: json['AlgorithmName'] as String?,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      enableSageMakerMetricsTimeSeries:
          json['EnableSageMakerMetricsTimeSeries'] as bool?,
      metricDefinitions: (json['MetricDefinitions'] as List?)
          ?.nonNulls
          .map((e) => MetricDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingImage: json['TrainingImage'] as String?,
      trainingImageConfig: json['TrainingImageConfig'] != null
          ? TrainingImageConfig.fromJson(
              json['TrainingImageConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingInputMode = this.trainingInputMode;
    final algorithmName = this.algorithmName;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final enableSageMakerMetricsTimeSeries =
        this.enableSageMakerMetricsTimeSeries;
    final metricDefinitions = this.metricDefinitions;
    final trainingImage = this.trainingImage;
    final trainingImageConfig = this.trainingImageConfig;
    return {
      'TrainingInputMode': trainingInputMode.value,
      if (algorithmName != null) 'AlgorithmName': algorithmName,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (enableSageMakerMetricsTimeSeries != null)
        'EnableSageMakerMetricsTimeSeries': enableSageMakerMetricsTimeSeries,
      if (metricDefinitions != null) 'MetricDefinitions': metricDefinitions,
      if (trainingImage != null) 'TrainingImage': trainingImage,
      if (trainingImageConfig != null)
        'TrainingImageConfig': trainingImageConfig,
    };
  }
}

enum AlgorithmStatus {
  pending('Pending'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  deleting('Deleting'),
  ;

  final String value;

  const AlgorithmStatus(this.value);

  static AlgorithmStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AlgorithmStatus'));
}

/// Specifies the validation and image scan statuses of the algorithm.
class AlgorithmStatusDetails {
  /// The status of the scan of the algorithm's Docker image container.
  final List<AlgorithmStatusItem>? imageScanStatuses;

  /// The status of algorithm validation.
  final List<AlgorithmStatusItem>? validationStatuses;

  AlgorithmStatusDetails({
    this.imageScanStatuses,
    this.validationStatuses,
  });

  factory AlgorithmStatusDetails.fromJson(Map<String, dynamic> json) {
    return AlgorithmStatusDetails(
      imageScanStatuses: (json['ImageScanStatuses'] as List?)
          ?.nonNulls
          .map((e) => AlgorithmStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationStatuses: (json['ValidationStatuses'] as List?)
          ?.nonNulls
          .map((e) => AlgorithmStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final imageScanStatuses = this.imageScanStatuses;
    final validationStatuses = this.validationStatuses;
    return {
      if (imageScanStatuses != null) 'ImageScanStatuses': imageScanStatuses,
      if (validationStatuses != null) 'ValidationStatuses': validationStatuses,
    };
  }
}

/// Represents the overall status of an algorithm.
class AlgorithmStatusItem {
  /// The name of the algorithm for which the overall status is being reported.
  final String name;

  /// The current status.
  final DetailedAlgorithmStatus status;

  /// if the overall status is <code>Failed</code>, the reason for the failure.
  final String? failureReason;

  AlgorithmStatusItem({
    required this.name,
    required this.status,
    this.failureReason,
  });

  factory AlgorithmStatusItem.fromJson(Map<String, dynamic> json) {
    return AlgorithmStatusItem(
      name: json['Name'] as String,
      status: DetailedAlgorithmStatus.fromString((json['Status'] as String)),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final status = this.status;
    final failureReason = this.failureReason;
    return {
      'Name': name,
      'Status': status.value,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// Provides summary information about an algorithm.
class AlgorithmSummary {
  /// The Amazon Resource Name (ARN) of the algorithm.
  final String algorithmArn;

  /// The name of the algorithm that is described by the summary.
  final String algorithmName;

  /// The overall status of the algorithm.
  final AlgorithmStatus algorithmStatus;

  /// A timestamp that shows when the algorithm was created.
  final DateTime creationTime;

  /// A brief description of the algorithm.
  final String? algorithmDescription;

  AlgorithmSummary({
    required this.algorithmArn,
    required this.algorithmName,
    required this.algorithmStatus,
    required this.creationTime,
    this.algorithmDescription,
  });

  factory AlgorithmSummary.fromJson(Map<String, dynamic> json) {
    return AlgorithmSummary(
      algorithmArn: json['AlgorithmArn'] as String,
      algorithmName: json['AlgorithmName'] as String,
      algorithmStatus:
          AlgorithmStatus.fromString((json['AlgorithmStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      algorithmDescription: json['AlgorithmDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmArn = this.algorithmArn;
    final algorithmName = this.algorithmName;
    final algorithmStatus = this.algorithmStatus;
    final creationTime = this.creationTime;
    final algorithmDescription = this.algorithmDescription;
    return {
      'AlgorithmArn': algorithmArn,
      'AlgorithmName': algorithmName,
      'AlgorithmStatus': algorithmStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      if (algorithmDescription != null)
        'AlgorithmDescription': algorithmDescription,
    };
  }
}

/// Defines a training job and a batch transform job that SageMaker runs to
/// validate your algorithm.
///
/// The data provided in the validation profile is made available to your buyers
/// on Amazon Web Services Marketplace.
class AlgorithmValidationProfile {
  /// The name of the profile for the algorithm. The name must have 1 to 63
  /// characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
  final String profileName;

  /// The <code>TrainingJobDefinition</code> object that describes the training
  /// job that SageMaker runs to validate your algorithm.
  final TrainingJobDefinition trainingJobDefinition;

  /// The <code>TransformJobDefinition</code> object that describes the transform
  /// job that SageMaker runs to validate your algorithm.
  final TransformJobDefinition? transformJobDefinition;

  AlgorithmValidationProfile({
    required this.profileName,
    required this.trainingJobDefinition,
    this.transformJobDefinition,
  });

  factory AlgorithmValidationProfile.fromJson(Map<String, dynamic> json) {
    return AlgorithmValidationProfile(
      profileName: json['ProfileName'] as String,
      trainingJobDefinition: TrainingJobDefinition.fromJson(
          json['TrainingJobDefinition'] as Map<String, dynamic>),
      transformJobDefinition: json['TransformJobDefinition'] != null
          ? TransformJobDefinition.fromJson(
              json['TransformJobDefinition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final profileName = this.profileName;
    final trainingJobDefinition = this.trainingJobDefinition;
    final transformJobDefinition = this.transformJobDefinition;
    return {
      'ProfileName': profileName,
      'TrainingJobDefinition': trainingJobDefinition,
      if (transformJobDefinition != null)
        'TransformJobDefinition': transformJobDefinition,
    };
  }
}

/// Specifies configurations for one or more training jobs that SageMaker runs
/// to test the algorithm.
class AlgorithmValidationSpecification {
  /// An array of <code>AlgorithmValidationProfile</code> objects, each of which
  /// specifies a training job and batch transform job that SageMaker runs to
  /// validate your algorithm.
  final List<AlgorithmValidationProfile> validationProfiles;

  /// The IAM roles that SageMaker uses to run the training jobs.
  final String validationRole;

  AlgorithmValidationSpecification({
    required this.validationProfiles,
    required this.validationRole,
  });

  factory AlgorithmValidationSpecification.fromJson(Map<String, dynamic> json) {
    return AlgorithmValidationSpecification(
      validationProfiles: (json['ValidationProfiles'] as List)
          .nonNulls
          .map((e) =>
              AlgorithmValidationProfile.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationRole: json['ValidationRole'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final validationProfiles = this.validationProfiles;
    final validationRole = this.validationRole;
    return {
      'ValidationProfiles': validationProfiles,
      'ValidationRole': validationRole,
    };
  }
}

/// Configures how labels are consolidated across human workers and processes
/// output data.
class AnnotationConsolidationConfig {
  /// The Amazon Resource Name (ARN) of a Lambda function implements the logic for
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html">annotation
  /// consolidation</a> and to process output data.
  ///
  /// This parameter is required for all labeling jobs. For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a>, use one of the following Amazon SageMaker Ground Truth
  /// Lambda function ARNs for <code>AnnotationConsolidationLambdaArn</code>. For
  /// custom labeling workflows, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-postlambda">Post-annotation
  /// Lambda</a>.
  ///
  /// <b>Bounding box</b> - Finds the most similar boxes from different workers
  /// based on the Jaccard index of the boxes.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Image classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of an image based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label image classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of an image based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel annotations from workers as
  /// "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Text classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of text based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label text classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of text based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Named entity recognition</b> - Groups similar selections and calculates
  /// aggregate boundaries, resolving to most-assigned label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition</code>
  /// </li>
  /// </ul>
  /// <b>Video Classification</b> - Use this task type when you need workers to
  /// classify videos using predefined labels that you specify. Workers are shown
  /// videos and are asked to choose one label for each video.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection</b> - Use this task type to have workers
  /// identify and locate objects in a sequence of video frames (images extracted
  /// from a video) using bounding boxes. For example, you can use this task to
  /// ask workers to identify and localize various objects in a series of video
  /// frames, such as cars, bikes, and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking</b> - Use this task type to have workers
  /// track the movement of objects in a sequence of video frames (images
  /// extracted from a video) using bounding boxes. For example, you can use this
  /// task to ask workers to track the movement of objects, such as cars, bikes,
  /// and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Detection</b> - Use this task type when you want
  /// workers to classify objects in a 3D point cloud by drawing 3D cuboids around
  /// objects. For example, you can use this task type to ask workers to identify
  /// different types of objects in a point cloud, such as cars, bikes, and
  /// pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Tracking</b> - Use this task type when you want
  /// workers to draw 3D cuboids around objects that appear in a sequence of 3D
  /// point cloud frames. For example, you can use this task type to ask workers
  /// to track the movement of vehicles across multiple point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Semantic Segmentation</b> - Use this task type when you
  /// want workers to create a point-level semantic segmentation masks by painting
  /// objects in a 3D point cloud using different colors where each color is
  /// assigned to one of the classes you specify.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
  ///
  /// Use label verification and adjustment jobs to review and adjust labels. To
  /// learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify
  /// and Adjust Labels </a>.
  ///
  /// <b>Semantic Segmentation Adjustment</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel adjusted annotations from
  /// workers as "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Semantic Segmentation Verification</b> - Uses a variant of the
  /// Expectation Maximization approach to estimate the true class of verification
  /// judgment for semantic segmentation labels based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Bounding Box Adjustment</b> - Finds the most similar boxes from different
  /// workers based on the Jaccard index of the adjusted annotations.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Bounding Box Verification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true class of verification judgement
  /// for bounding box labels based on annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to classify and localize objects in a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to track object movement across a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Detection Adjustment</b> - Use this task type when
  /// you want workers to adjust 3D cuboids around objects in a 3D point cloud.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Tracking Adjustment</b> - Use this task type when
  /// you want workers to adjust 3D cuboids around objects that appear in a
  /// sequence of 3D point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Semantic Segmentation Adjustment</b> - Use this task type
  /// when you want workers to adjust a point-level semantic segmentation masks
  /// using a paint tool.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  final String annotationConsolidationLambdaArn;

  AnnotationConsolidationConfig({
    required this.annotationConsolidationLambdaArn,
  });

  factory AnnotationConsolidationConfig.fromJson(Map<String, dynamic> json) {
    return AnnotationConsolidationConfig(
      annotationConsolidationLambdaArn:
          json['AnnotationConsolidationLambdaArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final annotationConsolidationLambdaArn =
        this.annotationConsolidationLambdaArn;
    return {
      'AnnotationConsolidationLambdaArn': annotationConsolidationLambdaArn,
    };
  }
}

/// Details about an Amazon SageMaker app.
class AppDetails {
  /// The name of the app.
  final String? appName;

  /// The type of app.
  final AppType? appType;

  /// The creation time.
  final DateTime? creationTime;

  /// The domain ID.
  final String? domainId;
  final ResourceSpec? resourceSpec;

  /// The name of the space.
  final String? spaceName;

  /// The status.
  final AppStatus? status;

  /// The user profile name.
  final String? userProfileName;

  AppDetails({
    this.appName,
    this.appType,
    this.creationTime,
    this.domainId,
    this.resourceSpec,
    this.spaceName,
    this.status,
    this.userProfileName,
  });

  factory AppDetails.fromJson(Map<String, dynamic> json) {
    return AppDetails(
      appName: json['AppName'] as String?,
      appType: (json['AppType'] as String?)?.let(AppType.fromString),
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      resourceSpec: json['ResourceSpec'] != null
          ? ResourceSpec.fromJson(json['ResourceSpec'] as Map<String, dynamic>)
          : null,
      spaceName: json['SpaceName'] as String?,
      status: (json['Status'] as String?)?.let(AppStatus.fromString),
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appName = this.appName;
    final appType = this.appType;
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final resourceSpec = this.resourceSpec;
    final spaceName = this.spaceName;
    final status = this.status;
    final userProfileName = this.userProfileName;
    return {
      if (appName != null) 'AppName': appName,
      if (appType != null) 'AppType': appType.value,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (resourceSpec != null) 'ResourceSpec': resourceSpec,
      if (spaceName != null) 'SpaceName': spaceName,
      if (status != null) 'Status': status.value,
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

/// The configuration for running a SageMaker image as a KernelGateway app.
class AppImageConfigDetails {
  /// The ARN of the AppImageConfig.
  final String? appImageConfigArn;

  /// The name of the AppImageConfig. Must be unique to your account.
  final String? appImageConfigName;

  /// The configuration for the file system and the runtime, such as the
  /// environment variables and entry point.
  final CodeEditorAppImageConfig? codeEditorAppImageConfig;

  /// When the AppImageConfig was created.
  final DateTime? creationTime;

  /// The configuration for the file system and the runtime, such as the
  /// environment variables and entry point.
  final JupyterLabAppImageConfig? jupyterLabAppImageConfig;

  /// The configuration for the file system and kernels in the SageMaker image.
  final KernelGatewayImageConfig? kernelGatewayImageConfig;

  /// When the AppImageConfig was last modified.
  final DateTime? lastModifiedTime;

  AppImageConfigDetails({
    this.appImageConfigArn,
    this.appImageConfigName,
    this.codeEditorAppImageConfig,
    this.creationTime,
    this.jupyterLabAppImageConfig,
    this.kernelGatewayImageConfig,
    this.lastModifiedTime,
  });

  factory AppImageConfigDetails.fromJson(Map<String, dynamic> json) {
    return AppImageConfigDetails(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
      appImageConfigName: json['AppImageConfigName'] as String?,
      codeEditorAppImageConfig: json['CodeEditorAppImageConfig'] != null
          ? CodeEditorAppImageConfig.fromJson(
              json['CodeEditorAppImageConfig'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      jupyterLabAppImageConfig: json['JupyterLabAppImageConfig'] != null
          ? JupyterLabAppImageConfig.fromJson(
              json['JupyterLabAppImageConfig'] as Map<String, dynamic>)
          : null,
      kernelGatewayImageConfig: json['KernelGatewayImageConfig'] != null
          ? KernelGatewayImageConfig.fromJson(
              json['KernelGatewayImageConfig'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    final appImageConfigName = this.appImageConfigName;
    final codeEditorAppImageConfig = this.codeEditorAppImageConfig;
    final creationTime = this.creationTime;
    final jupyterLabAppImageConfig = this.jupyterLabAppImageConfig;
    final kernelGatewayImageConfig = this.kernelGatewayImageConfig;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
      if (appImageConfigName != null) 'AppImageConfigName': appImageConfigName,
      if (codeEditorAppImageConfig != null)
        'CodeEditorAppImageConfig': codeEditorAppImageConfig,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (jupyterLabAppImageConfig != null)
        'JupyterLabAppImageConfig': jupyterLabAppImageConfig,
      if (kernelGatewayImageConfig != null)
        'KernelGatewayImageConfig': kernelGatewayImageConfig,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

enum AppImageConfigSortKey {
  creationTime('CreationTime'),
  lastModifiedTime('LastModifiedTime'),
  name('Name'),
  ;

  final String value;

  const AppImageConfigSortKey(this.value);

  static AppImageConfigSortKey fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AppImageConfigSortKey'));
}

enum AppInstanceType {
  system('system'),
  mlT3Micro('ml.t3.micro'),
  mlT3Small('ml.t3.small'),
  mlT3Medium('ml.t3.medium'),
  mlT3Large('ml.t3.large'),
  mlT3Xlarge('ml.t3.xlarge'),
  mlT3_2xlarge('ml.t3.2xlarge'),
  mlM5Large('ml.m5.large'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_8xlarge('ml.m5.8xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_16xlarge('ml.m5.16xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlM5dLarge('ml.m5d.large'),
  mlM5dXlarge('ml.m5d.xlarge'),
  mlM5d_2xlarge('ml.m5d.2xlarge'),
  mlM5d_4xlarge('ml.m5d.4xlarge'),
  mlM5d_8xlarge('ml.m5d.8xlarge'),
  mlM5d_12xlarge('ml.m5d.12xlarge'),
  mlM5d_16xlarge('ml.m5d.16xlarge'),
  mlM5d_24xlarge('ml.m5d.24xlarge'),
  mlC5Large('ml.c5.large'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_12xlarge('ml.c5.12xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlC5_24xlarge('ml.c5.24xlarge'),
  mlP3_2xlarge('ml.p3.2xlarge'),
  mlP3_8xlarge('ml.p3.8xlarge'),
  mlP3_16xlarge('ml.p3.16xlarge'),
  mlP3dn_24xlarge('ml.p3dn.24xlarge'),
  mlG4dnXlarge('ml.g4dn.xlarge'),
  mlG4dn_2xlarge('ml.g4dn.2xlarge'),
  mlG4dn_4xlarge('ml.g4dn.4xlarge'),
  mlG4dn_8xlarge('ml.g4dn.8xlarge'),
  mlG4dn_12xlarge('ml.g4dn.12xlarge'),
  mlG4dn_16xlarge('ml.g4dn.16xlarge'),
  mlR5Large('ml.r5.large'),
  mlR5Xlarge('ml.r5.xlarge'),
  mlR5_2xlarge('ml.r5.2xlarge'),
  mlR5_4xlarge('ml.r5.4xlarge'),
  mlR5_8xlarge('ml.r5.8xlarge'),
  mlR5_12xlarge('ml.r5.12xlarge'),
  mlR5_16xlarge('ml.r5.16xlarge'),
  mlR5_24xlarge('ml.r5.24xlarge'),
  mlG5Xlarge('ml.g5.xlarge'),
  mlG5_2xlarge('ml.g5.2xlarge'),
  mlG5_4xlarge('ml.g5.4xlarge'),
  mlG5_8xlarge('ml.g5.8xlarge'),
  mlG5_16xlarge('ml.g5.16xlarge'),
  mlG5_12xlarge('ml.g5.12xlarge'),
  mlG5_24xlarge('ml.g5.24xlarge'),
  mlG5_48xlarge('ml.g5.48xlarge'),
  mlG6Xlarge('ml.g6.xlarge'),
  mlG6_2xlarge('ml.g6.2xlarge'),
  mlG6_4xlarge('ml.g6.4xlarge'),
  mlG6_8xlarge('ml.g6.8xlarge'),
  mlG6_12xlarge('ml.g6.12xlarge'),
  mlG6_16xlarge('ml.g6.16xlarge'),
  mlG6_24xlarge('ml.g6.24xlarge'),
  mlG6_48xlarge('ml.g6.48xlarge'),
  mlGeospatialInteractive('ml.geospatial.interactive'),
  mlP4d_24xlarge('ml.p4d.24xlarge'),
  mlP4de_24xlarge('ml.p4de.24xlarge'),
  mlTrn1_2xlarge('ml.trn1.2xlarge'),
  mlTrn1_32xlarge('ml.trn1.32xlarge'),
  mlTrn1n_32xlarge('ml.trn1n.32xlarge'),
  mlP5_48xlarge('ml.p5.48xlarge'),
  mlM6iLarge('ml.m6i.large'),
  mlM6iXlarge('ml.m6i.xlarge'),
  mlM6i_2xlarge('ml.m6i.2xlarge'),
  mlM6i_4xlarge('ml.m6i.4xlarge'),
  mlM6i_8xlarge('ml.m6i.8xlarge'),
  mlM6i_12xlarge('ml.m6i.12xlarge'),
  mlM6i_16xlarge('ml.m6i.16xlarge'),
  mlM6i_24xlarge('ml.m6i.24xlarge'),
  mlM6i_32xlarge('ml.m6i.32xlarge'),
  mlM7iLarge('ml.m7i.large'),
  mlM7iXlarge('ml.m7i.xlarge'),
  mlM7i_2xlarge('ml.m7i.2xlarge'),
  mlM7i_4xlarge('ml.m7i.4xlarge'),
  mlM7i_8xlarge('ml.m7i.8xlarge'),
  mlM7i_12xlarge('ml.m7i.12xlarge'),
  mlM7i_16xlarge('ml.m7i.16xlarge'),
  mlM7i_24xlarge('ml.m7i.24xlarge'),
  mlM7i_48xlarge('ml.m7i.48xlarge'),
  mlC6iLarge('ml.c6i.large'),
  mlC6iXlarge('ml.c6i.xlarge'),
  mlC6i_2xlarge('ml.c6i.2xlarge'),
  mlC6i_4xlarge('ml.c6i.4xlarge'),
  mlC6i_8xlarge('ml.c6i.8xlarge'),
  mlC6i_12xlarge('ml.c6i.12xlarge'),
  mlC6i_16xlarge('ml.c6i.16xlarge'),
  mlC6i_24xlarge('ml.c6i.24xlarge'),
  mlC6i_32xlarge('ml.c6i.32xlarge'),
  mlC7iLarge('ml.c7i.large'),
  mlC7iXlarge('ml.c7i.xlarge'),
  mlC7i_2xlarge('ml.c7i.2xlarge'),
  mlC7i_4xlarge('ml.c7i.4xlarge'),
  mlC7i_8xlarge('ml.c7i.8xlarge'),
  mlC7i_12xlarge('ml.c7i.12xlarge'),
  mlC7i_16xlarge('ml.c7i.16xlarge'),
  mlC7i_24xlarge('ml.c7i.24xlarge'),
  mlC7i_48xlarge('ml.c7i.48xlarge'),
  mlR6iLarge('ml.r6i.large'),
  mlR6iXlarge('ml.r6i.xlarge'),
  mlR6i_2xlarge('ml.r6i.2xlarge'),
  mlR6i_4xlarge('ml.r6i.4xlarge'),
  mlR6i_8xlarge('ml.r6i.8xlarge'),
  mlR6i_12xlarge('ml.r6i.12xlarge'),
  mlR6i_16xlarge('ml.r6i.16xlarge'),
  mlR6i_24xlarge('ml.r6i.24xlarge'),
  mlR6i_32xlarge('ml.r6i.32xlarge'),
  mlR7iLarge('ml.r7i.large'),
  mlR7iXlarge('ml.r7i.xlarge'),
  mlR7i_2xlarge('ml.r7i.2xlarge'),
  mlR7i_4xlarge('ml.r7i.4xlarge'),
  mlR7i_8xlarge('ml.r7i.8xlarge'),
  mlR7i_12xlarge('ml.r7i.12xlarge'),
  mlR7i_16xlarge('ml.r7i.16xlarge'),
  mlR7i_24xlarge('ml.r7i.24xlarge'),
  mlR7i_48xlarge('ml.r7i.48xlarge'),
  mlM6idLarge('ml.m6id.large'),
  mlM6idXlarge('ml.m6id.xlarge'),
  mlM6id_2xlarge('ml.m6id.2xlarge'),
  mlM6id_4xlarge('ml.m6id.4xlarge'),
  mlM6id_8xlarge('ml.m6id.8xlarge'),
  mlM6id_12xlarge('ml.m6id.12xlarge'),
  mlM6id_16xlarge('ml.m6id.16xlarge'),
  mlM6id_24xlarge('ml.m6id.24xlarge'),
  mlM6id_32xlarge('ml.m6id.32xlarge'),
  mlC6idLarge('ml.c6id.large'),
  mlC6idXlarge('ml.c6id.xlarge'),
  mlC6id_2xlarge('ml.c6id.2xlarge'),
  mlC6id_4xlarge('ml.c6id.4xlarge'),
  mlC6id_8xlarge('ml.c6id.8xlarge'),
  mlC6id_12xlarge('ml.c6id.12xlarge'),
  mlC6id_16xlarge('ml.c6id.16xlarge'),
  mlC6id_24xlarge('ml.c6id.24xlarge'),
  mlC6id_32xlarge('ml.c6id.32xlarge'),
  mlR6idLarge('ml.r6id.large'),
  mlR6idXlarge('ml.r6id.xlarge'),
  mlR6id_2xlarge('ml.r6id.2xlarge'),
  mlR6id_4xlarge('ml.r6id.4xlarge'),
  mlR6id_8xlarge('ml.r6id.8xlarge'),
  mlR6id_12xlarge('ml.r6id.12xlarge'),
  mlR6id_16xlarge('ml.r6id.16xlarge'),
  mlR6id_24xlarge('ml.r6id.24xlarge'),
  mlR6id_32xlarge('ml.r6id.32xlarge'),
  ;

  final String value;

  const AppInstanceType(this.value);

  static AppInstanceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AppInstanceType'));
}

enum AppNetworkAccessType {
  publicInternetOnly('PublicInternetOnly'),
  vpcOnly('VpcOnly'),
  ;

  final String value;

  const AppNetworkAccessType(this.value);

  static AppNetworkAccessType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AppNetworkAccessType'));
}

enum AppSecurityGroupManagement {
  service('Service'),
  customer('Customer'),
  ;

  final String value;

  const AppSecurityGroupManagement(this.value);

  static AppSecurityGroupManagement fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AppSecurityGroupManagement'));
}

enum AppSortKey {
  creationTime('CreationTime'),
  ;

  final String value;

  const AppSortKey(this.value);

  static AppSortKey fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum AppSortKey'));
}

/// Configuration to run a processing job in a specified container image.
class AppSpecification {
  /// The container image to be run by the processing job.
  final String imageUri;

  /// The arguments for a container used to run a processing job.
  final List<String>? containerArguments;

  /// The entrypoint for a container used to run a processing job.
  final List<String>? containerEntrypoint;

  AppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
  });

  factory AppSpecification.fromJson(Map<String, dynamic> json) {
    return AppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
    };
  }
}

enum AppStatus {
  deleted('Deleted'),
  deleting('Deleting'),
  failed('Failed'),
  inService('InService'),
  pending('Pending'),
  ;

  final String value;

  const AppStatus(this.value);

  static AppStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum AppStatus'));
}

enum AppType {
  jupyterServer('JupyterServer'),
  kernelGateway('KernelGateway'),
  detailedProfiler('DetailedProfiler'),
  tensorBoard('TensorBoard'),
  codeEditor('CodeEditor'),
  jupyterLab('JupyterLab'),
  rStudioServerPro('RStudioServerPro'),
  rSessionGateway('RSessionGateway'),
  canvas('Canvas'),
  ;

  final String value;

  const AppType(this.value);

  static AppType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum AppType'));
}

/// A structure describing the source of an artifact.
class ArtifactSource {
  /// The URI of the source.
  final String sourceUri;

  /// A list of source types.
  final List<ArtifactSourceType>? sourceTypes;

  ArtifactSource({
    required this.sourceUri,
    this.sourceTypes,
  });

  factory ArtifactSource.fromJson(Map<String, dynamic> json) {
    return ArtifactSource(
      sourceUri: json['SourceUri'] as String,
      sourceTypes: (json['SourceTypes'] as List?)
          ?.nonNulls
          .map((e) => ArtifactSourceType.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final sourceUri = this.sourceUri;
    final sourceTypes = this.sourceTypes;
    return {
      'SourceUri': sourceUri,
      if (sourceTypes != null) 'SourceTypes': sourceTypes,
    };
  }
}

enum ArtifactSourceIdType {
  mD5Hash('MD5Hash'),
  s3ETag('S3ETag'),
  s3Version('S3Version'),
  custom('Custom'),
  ;

  final String value;

  const ArtifactSourceIdType(this.value);

  static ArtifactSourceIdType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ArtifactSourceIdType'));
}

/// The ID and ID type of an artifact source.
class ArtifactSourceType {
  /// The type of ID.
  final ArtifactSourceIdType sourceIdType;

  /// The ID.
  final String value;

  ArtifactSourceType({
    required this.sourceIdType,
    required this.value,
  });

  factory ArtifactSourceType.fromJson(Map<String, dynamic> json) {
    return ArtifactSourceType(
      sourceIdType:
          ArtifactSourceIdType.fromString((json['SourceIdType'] as String)),
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceIdType = this.sourceIdType;
    final value = this.value;
    return {
      'SourceIdType': sourceIdType.value,
      'Value': value,
    };
  }
}

/// Lists a summary of the properties of an artifact. An artifact represents a
/// URI addressable object or data. Some examples are a dataset and a model.
class ArtifactSummary {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  /// The name of the artifact.
  final String? artifactName;

  /// The type of the artifact.
  final String? artifactType;

  /// When the artifact was created.
  final DateTime? creationTime;

  /// When the artifact was last modified.
  final DateTime? lastModifiedTime;

  /// The source of the artifact.
  final ArtifactSource? source;

  ArtifactSummary({
    this.artifactArn,
    this.artifactName,
    this.artifactType,
    this.creationTime,
    this.lastModifiedTime,
    this.source,
  });

  factory ArtifactSummary.fromJson(Map<String, dynamic> json) {
    return ArtifactSummary(
      artifactArn: json['ArtifactArn'] as String?,
      artifactName: json['ArtifactName'] as String?,
      artifactType: json['ArtifactType'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ArtifactSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    final artifactName = this.artifactName;
    final artifactType = this.artifactType;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
      if (artifactName != null) 'ArtifactName': artifactName,
      if (artifactType != null) 'ArtifactType': artifactType,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
    };
  }
}

enum AssemblyType {
  none('None'),
  line('Line'),
  ;

  final String value;

  const AssemblyType(this.value);

  static AssemblyType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AssemblyType'));
}

class AssociateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  AssociateTrialComponentResponse({
    this.trialArn,
    this.trialComponentArn,
  });

  factory AssociateTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return AssociateTrialComponentResponse(
      trialArn: json['TrialArn'] as String?,
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

enum AssociationEdgeType {
  contributedTo('ContributedTo'),
  associatedWith('AssociatedWith'),
  derivedFrom('DerivedFrom'),
  produced('Produced'),
  sameAs('SameAs'),
  ;

  final String value;

  const AssociationEdgeType(this.value);

  static AssociationEdgeType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AssociationEdgeType'));
}

/// Lists a summary of the properties of an association. An association is an
/// entity that links other lineage or experiment entities. An example would be
/// an association between a training job and a model.
class AssociationSummary {
  /// The type of the association.
  final AssociationEdgeType? associationType;
  final UserContext? createdBy;

  /// When the association was created.
  final DateTime? creationTime;

  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The name of the destination.
  final String? destinationName;

  /// The destination type.
  final String? destinationType;

  /// The ARN of the source.
  final String? sourceArn;

  /// The name of the source.
  final String? sourceName;

  /// The source type.
  final String? sourceType;

  AssociationSummary({
    this.associationType,
    this.createdBy,
    this.creationTime,
    this.destinationArn,
    this.destinationName,
    this.destinationType,
    this.sourceArn,
    this.sourceName,
    this.sourceType,
  });

  factory AssociationSummary.fromJson(Map<String, dynamic> json) {
    return AssociationSummary(
      associationType: (json['AssociationType'] as String?)
          ?.let(AssociationEdgeType.fromString),
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      destinationArn: json['DestinationArn'] as String?,
      destinationName: json['DestinationName'] as String?,
      destinationType: json['DestinationType'] as String?,
      sourceArn: json['SourceArn'] as String?,
      sourceName: json['SourceName'] as String?,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final associationType = this.associationType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final destinationArn = this.destinationArn;
    final destinationName = this.destinationName;
    final destinationType = this.destinationType;
    final sourceArn = this.sourceArn;
    final sourceName = this.sourceName;
    final sourceType = this.sourceType;
    return {
      if (associationType != null) 'AssociationType': associationType.value,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (destinationName != null) 'DestinationName': destinationName,
      if (destinationType != null) 'DestinationType': destinationType,
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (sourceName != null) 'SourceName': sourceName,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// Configures the behavior of the client used by SageMaker to interact with the
/// model container during asynchronous inference.
class AsyncInferenceClientConfig {
  /// The maximum number of concurrent requests sent by the SageMaker client to
  /// the model container. If no value is provided, SageMaker chooses an optimal
  /// value.
  final int? maxConcurrentInvocationsPerInstance;

  AsyncInferenceClientConfig({
    this.maxConcurrentInvocationsPerInstance,
  });

  factory AsyncInferenceClientConfig.fromJson(Map<String, dynamic> json) {
    return AsyncInferenceClientConfig(
      maxConcurrentInvocationsPerInstance:
          json['MaxConcurrentInvocationsPerInstance'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxConcurrentInvocationsPerInstance =
        this.maxConcurrentInvocationsPerInstance;
    return {
      if (maxConcurrentInvocationsPerInstance != null)
        'MaxConcurrentInvocationsPerInstance':
            maxConcurrentInvocationsPerInstance,
    };
  }
}

/// Specifies configuration for how an endpoint performs asynchronous inference.
class AsyncInferenceConfig {
  /// Specifies the configuration for asynchronous inference invocation outputs.
  final AsyncInferenceOutputConfig outputConfig;

  /// Configures the behavior of the client used by SageMaker to interact with the
  /// model container during asynchronous inference.
  final AsyncInferenceClientConfig? clientConfig;

  AsyncInferenceConfig({
    required this.outputConfig,
    this.clientConfig,
  });

  factory AsyncInferenceConfig.fromJson(Map<String, dynamic> json) {
    return AsyncInferenceConfig(
      outputConfig: AsyncInferenceOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      clientConfig: json['ClientConfig'] != null
          ? AsyncInferenceClientConfig.fromJson(
              json['ClientConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final outputConfig = this.outputConfig;
    final clientConfig = this.clientConfig;
    return {
      'OutputConfig': outputConfig,
      if (clientConfig != null) 'ClientConfig': clientConfig,
    };
  }
}

/// Specifies the configuration for notifications of inference results for
/// asynchronous inference.
class AsyncInferenceNotificationConfig {
  /// Amazon SNS topic to post a notification to when inference fails. If no topic
  /// is provided, no notification is sent on failure.
  final String? errorTopic;

  /// The Amazon SNS topics where you want the inference response to be included.
  /// <note>
  /// The inference response is included only if the response size is less than or
  /// equal to 128 KB.
  /// </note>
  final List<AsyncNotificationTopicTypes>? includeInferenceResponseIn;

  /// Amazon SNS topic to post a notification to when inference completes
  /// successfully. If no topic is provided, no notification is sent on success.
  final String? successTopic;

  AsyncInferenceNotificationConfig({
    this.errorTopic,
    this.includeInferenceResponseIn,
    this.successTopic,
  });

  factory AsyncInferenceNotificationConfig.fromJson(Map<String, dynamic> json) {
    return AsyncInferenceNotificationConfig(
      errorTopic: json['ErrorTopic'] as String?,
      includeInferenceResponseIn: (json['IncludeInferenceResponseIn'] as List?)
          ?.nonNulls
          .map((e) => AsyncNotificationTopicTypes.fromString((e as String)))
          .toList(),
      successTopic: json['SuccessTopic'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final errorTopic = this.errorTopic;
    final includeInferenceResponseIn = this.includeInferenceResponseIn;
    final successTopic = this.successTopic;
    return {
      if (errorTopic != null) 'ErrorTopic': errorTopic,
      if (includeInferenceResponseIn != null)
        'IncludeInferenceResponseIn':
            includeInferenceResponseIn.map((e) => e.value).toList(),
      if (successTopic != null) 'SuccessTopic': successTopic,
    };
  }
}

/// Specifies the configuration for asynchronous inference invocation outputs.
class AsyncInferenceOutputConfig {
  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that SageMaker uses to encrypt the asynchronous inference output in Amazon
  /// S3.
  /// <p/>
  final String? kmsKeyId;

  /// Specifies the configuration for notifications of inference results for
  /// asynchronous inference.
  final AsyncInferenceNotificationConfig? notificationConfig;

  /// The Amazon S3 location to upload failure inference responses to.
  final String? s3FailurePath;

  /// The Amazon S3 location to upload inference responses to.
  final String? s3OutputPath;

  AsyncInferenceOutputConfig({
    this.kmsKeyId,
    this.notificationConfig,
    this.s3FailurePath,
    this.s3OutputPath,
  });

  factory AsyncInferenceOutputConfig.fromJson(Map<String, dynamic> json) {
    return AsyncInferenceOutputConfig(
      kmsKeyId: json['KmsKeyId'] as String?,
      notificationConfig: json['NotificationConfig'] != null
          ? AsyncInferenceNotificationConfig.fromJson(
              json['NotificationConfig'] as Map<String, dynamic>)
          : null,
      s3FailurePath: json['S3FailurePath'] as String?,
      s3OutputPath: json['S3OutputPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    final notificationConfig = this.notificationConfig;
    final s3FailurePath = this.s3FailurePath;
    final s3OutputPath = this.s3OutputPath;
    return {
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (notificationConfig != null) 'NotificationConfig': notificationConfig,
      if (s3FailurePath != null) 'S3FailurePath': s3FailurePath,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

enum AsyncNotificationTopicTypes {
  successNotificationTopic('SUCCESS_NOTIFICATION_TOPIC'),
  errorNotificationTopic('ERROR_NOTIFICATION_TOPIC'),
  ;

  final String value;

  const AsyncNotificationTopicTypes(this.value);

  static AsyncNotificationTopicTypes fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AsyncNotificationTopicTypes'));
}

/// Configuration for Athena Dataset Definition input.
class AthenaDatasetDefinition {
  final String catalog;
  final String database;
  final AthenaResultFormat outputFormat;

  /// The location in Amazon S3 where Athena query results are stored.
  final String outputS3Uri;
  final String queryString;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data generated from an Athena query
  /// execution.
  final String? kmsKeyId;
  final AthenaResultCompressionType? outputCompression;
  final String? workGroup;

  AthenaDatasetDefinition({
    required this.catalog,
    required this.database,
    required this.outputFormat,
    required this.outputS3Uri,
    required this.queryString,
    this.kmsKeyId,
    this.outputCompression,
    this.workGroup,
  });

  factory AthenaDatasetDefinition.fromJson(Map<String, dynamic> json) {
    return AthenaDatasetDefinition(
      catalog: json['Catalog'] as String,
      database: json['Database'] as String,
      outputFormat:
          AthenaResultFormat.fromString((json['OutputFormat'] as String)),
      outputS3Uri: json['OutputS3Uri'] as String,
      queryString: json['QueryString'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      outputCompression: (json['OutputCompression'] as String?)
          ?.let(AthenaResultCompressionType.fromString),
      workGroup: json['WorkGroup'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final catalog = this.catalog;
    final database = this.database;
    final outputFormat = this.outputFormat;
    final outputS3Uri = this.outputS3Uri;
    final queryString = this.queryString;
    final kmsKeyId = this.kmsKeyId;
    final outputCompression = this.outputCompression;
    final workGroup = this.workGroup;
    return {
      'Catalog': catalog,
      'Database': database,
      'OutputFormat': outputFormat.value,
      'OutputS3Uri': outputS3Uri,
      'QueryString': queryString,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (outputCompression != null)
        'OutputCompression': outputCompression.value,
      if (workGroup != null) 'WorkGroup': workGroup,
    };
  }
}

/// The compression used for Athena query results.
enum AthenaResultCompressionType {
  gzip('GZIP'),
  snappy('SNAPPY'),
  zlib('ZLIB'),
  ;

  final String value;

  const AthenaResultCompressionType(this.value);

  static AthenaResultCompressionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AthenaResultCompressionType'));
}

/// The data storage format for Athena query results.
enum AthenaResultFormat {
  parquet('PARQUET'),
  orc('ORC'),
  avro('AVRO'),
  json('JSON'),
  textfile('TEXTFILE'),
  ;

  final String value;

  const AthenaResultFormat(this.value);

  static AthenaResultFormat fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AthenaResultFormat'));
}

enum AuthMode {
  sso('SSO'),
  iam('IAM'),
  ;

  final String value;

  const AuthMode(this.value);

  static AuthMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum AuthMode'));
}

enum AutoMLAlgorithm {
  xgboost('xgboost'),
  linearLearner('linear-learner'),
  mlp('mlp'),
  lightgbm('lightgbm'),
  catboost('catboost'),
  randomforest('randomforest'),
  extraTrees('extra-trees'),
  nnTorch('nn-torch'),
  fastai('fastai'),
  cnnQr('cnn-qr'),
  deepar('deepar'),
  prophet('prophet'),
  npts('npts'),
  arima('arima'),
  ets('ets'),
  ;

  final String value;

  const AutoMLAlgorithm(this.value);

  static AutoMLAlgorithm fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLAlgorithm'));
}

/// The selection of algorithms trained on your dataset to generate the model
/// candidates for an Autopilot job.
class AutoMLAlgorithmConfig {
  /// The selection of algorithms trained on your dataset to generate the model
  /// candidates for an Autopilot job.
  ///
  /// <ul>
  /// <li>
  /// <b>For the tabular problem type <code>TabularJobConfig</code>:</b>
  /// <note>
  /// Selected algorithms must belong to the list corresponding to the training
  /// mode set in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobConfig.html#sagemaker-Type-AutoMLJobConfig-Mode">AutoMLJobConfig.Mode</a>
  /// (<code>ENSEMBLING</code> or <code>HYPERPARAMETER_TUNING</code>). Choose a
  /// minimum of 1 algorithm.
  /// </note>
  /// <ul>
  /// <li>
  /// In <code>ENSEMBLING</code> mode:
  ///
  /// <ul>
  /// <li>
  /// "catboost"
  /// </li>
  /// <li>
  /// "extra-trees"
  /// </li>
  /// <li>
  /// "fastai"
  /// </li>
  /// <li>
  /// "lightgbm"
  /// </li>
  /// <li>
  /// "linear-learner"
  /// </li>
  /// <li>
  /// "nn-torch"
  /// </li>
  /// <li>
  /// "randomforest"
  /// </li>
  /// <li>
  /// "xgboost"
  /// </li>
  /// </ul> </li>
  /// <li>
  /// In <code>HYPERPARAMETER_TUNING</code> mode:
  ///
  /// <ul>
  /// <li>
  /// "linear-learner"
  /// </li>
  /// <li>
  /// "mlp"
  /// </li>
  /// <li>
  /// "xgboost"
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <b>For the time-series forecasting problem type
  /// <code>TimeSeriesForecastingJobConfig</code>:</b>
  ///
  /// <ul>
  /// <li>
  /// Choose your algorithms from this list.
  ///
  /// <ul>
  /// <li>
  /// "cnn-qr"
  /// </li>
  /// <li>
  /// "deepar"
  /// </li>
  /// <li>
  /// "prophet"
  /// </li>
  /// <li>
  /// "arima"
  /// </li>
  /// <li>
  /// "npts"
  /// </li>
  /// <li>
  /// "ets"
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// </ul>
  final List<AutoMLAlgorithm> autoMLAlgorithms;

  AutoMLAlgorithmConfig({
    required this.autoMLAlgorithms,
  });

  factory AutoMLAlgorithmConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLAlgorithmConfig(
      autoMLAlgorithms: (json['AutoMLAlgorithms'] as List)
          .nonNulls
          .map((e) => AutoMLAlgorithm.fromString((e as String)))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLAlgorithms = this.autoMLAlgorithms;
    return {
      'AutoMLAlgorithms': autoMLAlgorithms.map((e) => e.value).toList(),
    };
  }
}

/// Information about a candidate produced by an AutoML training job, including
/// its status, steps, and other properties.
class AutoMLCandidate {
  /// The name of the candidate.
  final String candidateName;

  /// The candidate's status.
  final CandidateStatus candidateStatus;

  /// Information about the candidate's steps.
  final List<AutoMLCandidateStep> candidateSteps;

  /// The creation time.
  final DateTime creationTime;

  /// The last modified time.
  final DateTime lastModifiedTime;

  /// The objective's status.
  final ObjectiveStatus objectiveStatus;

  /// The properties of an AutoML candidate job.
  final CandidateProperties? candidateProperties;

  /// The end time.
  final DateTime? endTime;

  /// The failure reason.
  final String? failureReason;
  final FinalAutoMLJobObjectiveMetric? finalAutoMLJobObjectiveMetric;

  /// The mapping of all supported processing unit (CPU, GPU, etc...) to inference
  /// container definitions for the candidate. This field is populated for the
  /// AutoML jobs V2 (for example, for jobs created by calling
  /// <code>CreateAutoMLJobV2</code>) related to image or text classification
  /// problem types only.
  final Map<AutoMLProcessingUnit, List<AutoMLContainerDefinition>>?
      inferenceContainerDefinitions;

  /// Information about the recommended inference container definitions.
  final List<AutoMLContainerDefinition>? inferenceContainers;

  AutoMLCandidate({
    required this.candidateName,
    required this.candidateStatus,
    required this.candidateSteps,
    required this.creationTime,
    required this.lastModifiedTime,
    required this.objectiveStatus,
    this.candidateProperties,
    this.endTime,
    this.failureReason,
    this.finalAutoMLJobObjectiveMetric,
    this.inferenceContainerDefinitions,
    this.inferenceContainers,
  });

  factory AutoMLCandidate.fromJson(Map<String, dynamic> json) {
    return AutoMLCandidate(
      candidateName: json['CandidateName'] as String,
      candidateStatus:
          CandidateStatus.fromString((json['CandidateStatus'] as String)),
      candidateSteps: (json['CandidateSteps'] as List)
          .nonNulls
          .map((e) => AutoMLCandidateStep.fromJson(e as Map<String, dynamic>))
          .toList(),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      objectiveStatus:
          ObjectiveStatus.fromString((json['ObjectiveStatus'] as String)),
      candidateProperties: json['CandidateProperties'] != null
          ? CandidateProperties.fromJson(
              json['CandidateProperties'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      finalAutoMLJobObjectiveMetric:
          json['FinalAutoMLJobObjectiveMetric'] != null
              ? FinalAutoMLJobObjectiveMetric.fromJson(
                  json['FinalAutoMLJobObjectiveMetric'] as Map<String, dynamic>)
              : null,
      inferenceContainerDefinitions:
          (json['InferenceContainerDefinitions'] as Map<String, dynamic>?)?.map(
              (k, e) => MapEntry(
                  AutoMLProcessingUnit.fromString(k),
                  (e as List)
                      .nonNulls
                      .map((e) => AutoMLContainerDefinition.fromJson(
                          e as Map<String, dynamic>))
                      .toList())),
      inferenceContainers: (json['InferenceContainers'] as List?)
          ?.nonNulls
          .map((e) =>
              AutoMLContainerDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final candidateName = this.candidateName;
    final candidateStatus = this.candidateStatus;
    final candidateSteps = this.candidateSteps;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final objectiveStatus = this.objectiveStatus;
    final candidateProperties = this.candidateProperties;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final finalAutoMLJobObjectiveMetric = this.finalAutoMLJobObjectiveMetric;
    final inferenceContainerDefinitions = this.inferenceContainerDefinitions;
    final inferenceContainers = this.inferenceContainers;
    return {
      'CandidateName': candidateName,
      'CandidateStatus': candidateStatus.value,
      'CandidateSteps': candidateSteps,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'ObjectiveStatus': objectiveStatus.value,
      if (candidateProperties != null)
        'CandidateProperties': candidateProperties,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalAutoMLJobObjectiveMetric != null)
        'FinalAutoMLJobObjectiveMetric': finalAutoMLJobObjectiveMetric,
      if (inferenceContainerDefinitions != null)
        'InferenceContainerDefinitions':
            inferenceContainerDefinitions.map((k, e) => MapEntry(k.value, e)),
      if (inferenceContainers != null)
        'InferenceContainers': inferenceContainers,
    };
  }
}

/// Stores the configuration information for how a candidate is generated
/// (optional).
class AutoMLCandidateGenerationConfig {
  /// Stores the configuration information for the selection of algorithms trained
  /// on tabular data.
  ///
  /// The list of available algorithms to choose from depends on the training mode
  /// set in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TabularJobConfig.html">
  /// <code>TabularJobConfig.Mode</code> </a>.
  ///
  /// <ul>
  /// <li>
  /// <code>AlgorithmsConfig</code> should not be set if the training mode is set
  /// on <code>AUTO</code>.
  /// </li>
  /// <li>
  /// When <code>AlgorithmsConfig</code> is provided, one
  /// <code>AutoMLAlgorithms</code> attribute must be set and one only.
  ///
  /// If the list of algorithms provided as values for
  /// <code>AutoMLAlgorithms</code> is empty,
  /// <code>CandidateGenerationConfig</code> uses the full set of algorithms for
  /// the given training mode.
  /// </li>
  /// <li>
  /// When <code>AlgorithmsConfig</code> is not provided,
  /// <code>CandidateGenerationConfig</code> uses the full set of algorithms for
  /// the given training mode.
  /// </li>
  /// </ul>
  /// For the list of all algorithms per problem type and training mode, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html">
  /// AutoMLAlgorithmConfig</a>.
  ///
  /// For more information on each algorithm, see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support">Algorithm
  /// support</a> section in Autopilot developer guide.
  final List<AutoMLAlgorithmConfig>? algorithmsConfig;

  /// A URL to the Amazon S3 data source containing selected features from the
  /// input data source to run an Autopilot job. You can input
  /// <code>FeatureAttributeNames</code> (optional) in JSON format as shown below:
  ///
  /// <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.
  ///
  /// You can also specify the data type of the feature (optional) in the format
  /// shown below:
  ///
  /// <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... }
  /// }</code>
  /// <note>
  /// These column keys may not include the target column.
  /// </note>
  /// In ensembling mode, Autopilot only supports the following data types:
  /// <code>numeric</code>, <code>categorical</code>, <code>text</code>, and
  /// <code>datetime</code>. In HPO mode, Autopilot can support
  /// <code>numeric</code>, <code>categorical</code>, <code>text</code>,
  /// <code>datetime</code>, and <code>sequence</code>.
  ///
  /// If only <code>FeatureDataTypes</code> is provided, the column keys
  /// (<code>col1</code>, <code>col2</code>,..) should be a subset of the column
  /// names in the input data.
  ///
  /// If both <code>FeatureDataTypes</code> and <code>FeatureAttributeNames</code>
  /// are provided, then the column keys should be a subset of the column names
  /// provided in <code>FeatureAttributeNames</code>.
  ///
  /// The key name <code>FeatureAttributeNames</code> is fixed. The values listed
  /// in <code>["col1", "col2", ...]</code> are case sensitive and should be a
  /// list of strings containing unique values that are a subset of the column
  /// names in the input data. The list of columns provided must not include the
  /// target column.
  final String? featureSpecificationS3Uri;

  AutoMLCandidateGenerationConfig({
    this.algorithmsConfig,
    this.featureSpecificationS3Uri,
  });

  factory AutoMLCandidateGenerationConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLCandidateGenerationConfig(
      algorithmsConfig: (json['AlgorithmsConfig'] as List?)
          ?.nonNulls
          .map((e) => AutoMLAlgorithmConfig.fromJson(e as Map<String, dynamic>))
          .toList(),
      featureSpecificationS3Uri: json['FeatureSpecificationS3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmsConfig = this.algorithmsConfig;
    final featureSpecificationS3Uri = this.featureSpecificationS3Uri;
    return {
      if (algorithmsConfig != null) 'AlgorithmsConfig': algorithmsConfig,
      if (featureSpecificationS3Uri != null)
        'FeatureSpecificationS3Uri': featureSpecificationS3Uri,
    };
  }
}

/// Information about the steps for a candidate and what step it is working on.
class AutoMLCandidateStep {
  /// The ARN for the candidate's step.
  final String candidateStepArn;

  /// The name for the candidate's step.
  final String candidateStepName;

  /// Whether the candidate is at the transform, training, or processing step.
  final CandidateStepType candidateStepType;

  AutoMLCandidateStep({
    required this.candidateStepArn,
    required this.candidateStepName,
    required this.candidateStepType,
  });

  factory AutoMLCandidateStep.fromJson(Map<String, dynamic> json) {
    return AutoMLCandidateStep(
      candidateStepArn: json['CandidateStepArn'] as String,
      candidateStepName: json['CandidateStepName'] as String,
      candidateStepType:
          CandidateStepType.fromString((json['CandidateStepType'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final candidateStepArn = this.candidateStepArn;
    final candidateStepName = this.candidateStepName;
    final candidateStepType = this.candidateStepType;
    return {
      'CandidateStepArn': candidateStepArn,
      'CandidateStepName': candidateStepName,
      'CandidateStepType': candidateStepType.value,
    };
  }
}

/// A channel is a named input source that training algorithms can consume. The
/// validation dataset size is limited to less than 2 GB. The training dataset
/// size must be less than 100 GB. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html">
/// Channel</a>.
/// <note>
/// A validation dataset must contain the same headers as the training dataset.
/// </note> <p/>
class AutoMLChannel {
  /// The name of the target variable in supervised learning, usually represented
  /// by 'y'.
  final String targetAttributeName;

  /// The channel type (optional) is an <code>enum</code> string. The default
  /// value is <code>training</code>. Channels for training and validation must
  /// share the same <code>ContentType</code> and
  /// <code>TargetAttributeName</code>. For information on specifying training and
  /// validation channel types, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-data-sources-training-or-validation">How
  /// to specify training and validation datasets</a>.
  final AutoMLChannelType? channelType;

  /// You can use <code>Gzip</code> or <code>None</code>. The default value is
  /// <code>None</code>.
  final CompressionType? compressionType;

  /// The content type of the data from the input source. You can use
  /// <code>text/csv;header=present</code> or
  /// <code>x-application/vnd.amazon+parquet</code>. The default value is
  /// <code>text/csv;header=present</code>.
  final String? contentType;

  /// The data source for an AutoML channel.
  final AutoMLDataSource? dataSource;

  /// If specified, this column name indicates which column of the dataset should
  /// be treated as sample weights for use by the objective metric during the
  /// training, evaluation, and the selection of the best model. This column is
  /// not considered as a predictive feature. For more information on Autopilot
  /// metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html">Metrics
  /// and validation</a>.
  ///
  /// Sample weights should be numeric, non-negative, with larger values
  /// indicating which rows are more important than others. Data points that have
  /// invalid or no weight value are excluded.
  ///
  /// Support for sample weights is available in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html">Ensembling</a>
  /// mode only.
  final String? sampleWeightAttributeName;

  AutoMLChannel({
    required this.targetAttributeName,
    this.channelType,
    this.compressionType,
    this.contentType,
    this.dataSource,
    this.sampleWeightAttributeName,
  });

  factory AutoMLChannel.fromJson(Map<String, dynamic> json) {
    return AutoMLChannel(
      targetAttributeName: json['TargetAttributeName'] as String,
      channelType:
          (json['ChannelType'] as String?)?.let(AutoMLChannelType.fromString),
      compressionType:
          (json['CompressionType'] as String?)?.let(CompressionType.fromString),
      contentType: json['ContentType'] as String?,
      dataSource: json['DataSource'] != null
          ? AutoMLDataSource.fromJson(
              json['DataSource'] as Map<String, dynamic>)
          : null,
      sampleWeightAttributeName: json['SampleWeightAttributeName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final targetAttributeName = this.targetAttributeName;
    final channelType = this.channelType;
    final compressionType = this.compressionType;
    final contentType = this.contentType;
    final dataSource = this.dataSource;
    final sampleWeightAttributeName = this.sampleWeightAttributeName;
    return {
      'TargetAttributeName': targetAttributeName,
      if (channelType != null) 'ChannelType': channelType.value,
      if (compressionType != null) 'CompressionType': compressionType.value,
      if (contentType != null) 'ContentType': contentType,
      if (dataSource != null) 'DataSource': dataSource,
      if (sampleWeightAttributeName != null)
        'SampleWeightAttributeName': sampleWeightAttributeName,
    };
  }
}

enum AutoMLChannelType {
  training('training'),
  validation('validation'),
  ;

  final String value;

  const AutoMLChannelType(this.value);

  static AutoMLChannelType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLChannelType'));
}

/// A list of container definitions that describe the different containers that
/// make up an AutoML candidate. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html">
/// ContainerDefinition</a>.
class AutoMLContainerDefinition {
  /// The Amazon Elastic Container Registry (Amazon ECR) path of the container.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html">
  /// ContainerDefinition</a>.
  final String image;

  /// The location of the model artifacts. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html">
  /// ContainerDefinition</a>.
  final String modelDataUrl;

  /// The environment variables to set in the container. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html">
  /// ContainerDefinition</a>.
  final Map<String, String>? environment;

  AutoMLContainerDefinition({
    required this.image,
    required this.modelDataUrl,
    this.environment,
  });

  factory AutoMLContainerDefinition.fromJson(Map<String, dynamic> json) {
    return AutoMLContainerDefinition(
      image: json['Image'] as String,
      modelDataUrl: json['ModelDataUrl'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final image = this.image;
    final modelDataUrl = this.modelDataUrl;
    final environment = this.environment;
    return {
      'Image': image,
      'ModelDataUrl': modelDataUrl,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// The data source for the Autopilot job.
class AutoMLDataSource {
  /// The Amazon S3 location of the input data.
  final AutoMLS3DataSource s3DataSource;

  AutoMLDataSource({
    required this.s3DataSource,
  });

  factory AutoMLDataSource.fromJson(Map<String, dynamic> json) {
    return AutoMLDataSource(
      s3DataSource: AutoMLS3DataSource.fromJson(
          json['S3DataSource'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    return {
      'S3DataSource': s3DataSource,
    };
  }
}

/// This structure specifies how to split the data into train and validation
/// datasets.
///
/// The validation and training datasets must contain the same headers. For jobs
/// created by calling <code>CreateAutoMLJob</code>, the validation dataset must
/// be less than 2 GB in size.
class AutoMLDataSplitConfig {
  /// The validation fraction (optional) is a float that specifies the portion of
  /// the training dataset to be used for validation. The default value is 0.2,
  /// and values must be greater than 0 and less than 1. We recommend setting this
  /// value to be less than 0.5.
  final double? validationFraction;

  AutoMLDataSplitConfig({
    this.validationFraction,
  });

  factory AutoMLDataSplitConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLDataSplitConfig(
      validationFraction: json['ValidationFraction'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final validationFraction = this.validationFraction;
    return {
      if (validationFraction != null) 'ValidationFraction': validationFraction,
    };
  }
}

/// The artifacts that are generated during an AutoML job.
class AutoMLJobArtifacts {
  /// The URL of the notebook location.
  final String? candidateDefinitionNotebookLocation;

  /// The URL of the notebook location.
  final String? dataExplorationNotebookLocation;

  AutoMLJobArtifacts({
    this.candidateDefinitionNotebookLocation,
    this.dataExplorationNotebookLocation,
  });

  factory AutoMLJobArtifacts.fromJson(Map<String, dynamic> json) {
    return AutoMLJobArtifacts(
      candidateDefinitionNotebookLocation:
          json['CandidateDefinitionNotebookLocation'] as String?,
      dataExplorationNotebookLocation:
          json['DataExplorationNotebookLocation'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final candidateDefinitionNotebookLocation =
        this.candidateDefinitionNotebookLocation;
    final dataExplorationNotebookLocation =
        this.dataExplorationNotebookLocation;
    return {
      if (candidateDefinitionNotebookLocation != null)
        'CandidateDefinitionNotebookLocation':
            candidateDefinitionNotebookLocation,
      if (dataExplorationNotebookLocation != null)
        'DataExplorationNotebookLocation': dataExplorationNotebookLocation,
    };
  }
}

/// A channel is a named input source that training algorithms can consume. This
/// channel is used for AutoML jobs V2 (jobs created by calling <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>).
class AutoMLJobChannel {
  /// The type of channel. Defines whether the data are used for training or
  /// validation. The default value is <code>training</code>. Channels for
  /// <code>training</code> and <code>validation</code> must share the same
  /// <code>ContentType</code>
  /// <note>
  /// The type of channel defaults to <code>training</code> for the time-series
  /// forecasting problem type.
  /// </note>
  final AutoMLChannelType? channelType;

  /// The allowed compression types depend on the input format and problem type.
  /// We allow the compression type <code>Gzip</code> for <code>S3Prefix</code>
  /// inputs on tabular data only. For all other inputs, the compression type
  /// should be <code>None</code>. If no compression type is provided, we default
  /// to <code>None</code>.
  final CompressionType? compressionType;

  /// The content type of the data from the input source. The following are the
  /// allowed content types for different problems:
  ///
  /// <ul>
  /// <li>
  /// For tabular problem types: <code>text/csv;header=present</code> or
  /// <code>x-application/vnd.amazon+parquet</code>. The default value is
  /// <code>text/csv;header=present</code>.
  /// </li>
  /// <li>
  /// For image classification: <code>image/png</code>, <code>image/jpeg</code>,
  /// or <code>image/*</code>. The default value is <code>image/*</code>.
  /// </li>
  /// <li>
  /// For text classification: <code>text/csv;header=present</code> or
  /// <code>x-application/vnd.amazon+parquet</code>. The default value is
  /// <code>text/csv;header=present</code>.
  /// </li>
  /// <li>
  /// For time-series forecasting: <code>text/csv;header=present</code> or
  /// <code>x-application/vnd.amazon+parquet</code>. The default value is
  /// <code>text/csv;header=present</code>.
  /// </li>
  /// <li>
  /// For text generation (LLMs fine-tuning): <code>text/csv;header=present</code>
  /// or <code>x-application/vnd.amazon+parquet</code>. The default value is
  /// <code>text/csv;header=present</code>.
  /// </li>
  /// </ul>
  final String? contentType;

  /// The data source for an AutoML channel (Required).
  final AutoMLDataSource? dataSource;

  AutoMLJobChannel({
    this.channelType,
    this.compressionType,
    this.contentType,
    this.dataSource,
  });

  factory AutoMLJobChannel.fromJson(Map<String, dynamic> json) {
    return AutoMLJobChannel(
      channelType:
          (json['ChannelType'] as String?)?.let(AutoMLChannelType.fromString),
      compressionType:
          (json['CompressionType'] as String?)?.let(CompressionType.fromString),
      contentType: json['ContentType'] as String?,
      dataSource: json['DataSource'] != null
          ? AutoMLDataSource.fromJson(
              json['DataSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final channelType = this.channelType;
    final compressionType = this.compressionType;
    final contentType = this.contentType;
    final dataSource = this.dataSource;
    return {
      if (channelType != null) 'ChannelType': channelType.value,
      if (compressionType != null) 'CompressionType': compressionType.value,
      if (contentType != null) 'ContentType': contentType,
      if (dataSource != null) 'DataSource': dataSource,
    };
  }
}

/// How long a job is allowed to run, or how many candidates a job is allowed to
/// generate.
class AutoMLJobCompletionCriteria {
  /// The maximum runtime, in seconds, an AutoML job has to complete.
  ///
  /// If an AutoML job exceeds the maximum runtime, the job is stopped
  /// automatically and its processing is ended gracefully. The AutoML job
  /// identifies the best model whose training was completed and marks it as the
  /// best-performing model. Any unfinished steps of the job, such as automatic
  /// one-click Autopilot model deployment, are not completed.
  final int? maxAutoMLJobRuntimeInSeconds;

  /// The maximum number of times a training job is allowed to run.
  ///
  /// For text and image classification, time-series forecasting, as well as text
  /// generation (LLMs fine-tuning) problem types, the supported value is 1. For
  /// tabular problem types, the maximum value is 750.
  final int? maxCandidates;

  /// The maximum time, in seconds, that each training job executed inside
  /// hyperparameter tuning is allowed to run as part of a hyperparameter tuning
  /// job. For more information, see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html">StoppingCondition</a>
  /// used by the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a>
  /// action.
  ///
  /// For job V2s (jobs created by calling <code>CreateAutoMLJobV2</code>), this
  /// field controls the runtime of the job candidate.
  ///
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TextClassificationJobConfig.html">TextGenerationJobConfig</a>
  /// problem types, the maximum time defaults to 72 hours (259200 seconds).
  final int? maxRuntimePerTrainingJobInSeconds;

  AutoMLJobCompletionCriteria({
    this.maxAutoMLJobRuntimeInSeconds,
    this.maxCandidates,
    this.maxRuntimePerTrainingJobInSeconds,
  });

  factory AutoMLJobCompletionCriteria.fromJson(Map<String, dynamic> json) {
    return AutoMLJobCompletionCriteria(
      maxAutoMLJobRuntimeInSeconds:
          json['MaxAutoMLJobRuntimeInSeconds'] as int?,
      maxCandidates: json['MaxCandidates'] as int?,
      maxRuntimePerTrainingJobInSeconds:
          json['MaxRuntimePerTrainingJobInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxAutoMLJobRuntimeInSeconds = this.maxAutoMLJobRuntimeInSeconds;
    final maxCandidates = this.maxCandidates;
    final maxRuntimePerTrainingJobInSeconds =
        this.maxRuntimePerTrainingJobInSeconds;
    return {
      if (maxAutoMLJobRuntimeInSeconds != null)
        'MaxAutoMLJobRuntimeInSeconds': maxAutoMLJobRuntimeInSeconds,
      if (maxCandidates != null) 'MaxCandidates': maxCandidates,
      if (maxRuntimePerTrainingJobInSeconds != null)
        'MaxRuntimePerTrainingJobInSeconds': maxRuntimePerTrainingJobInSeconds,
    };
  }
}

/// A collection of settings used for an AutoML job.
class AutoMLJobConfig {
  /// The configuration for generating a candidate for an AutoML job (optional).
  final AutoMLCandidateGenerationConfig? candidateGenerationConfig;

  /// How long an AutoML job is allowed to run, or how many candidates a job is
  /// allowed to generate.
  final AutoMLJobCompletionCriteria? completionCriteria;

  /// The configuration for splitting the input training dataset.
  ///
  /// Type: AutoMLDataSplitConfig
  final AutoMLDataSplitConfig? dataSplitConfig;

  /// The method that Autopilot uses to train the data. You can either specify the
  /// mode manually or let Autopilot choose for you based on the dataset size by
  /// selecting <code>AUTO</code>. In <code>AUTO</code> mode, Autopilot chooses
  /// <code>ENSEMBLING</code> for datasets smaller than 100 MB, and
  /// <code>HYPERPARAMETER_TUNING</code> for larger ones.
  ///
  /// The <code>ENSEMBLING</code> mode uses a multi-stack ensemble model to
  /// predict classification and regression tasks directly from your dataset. This
  /// machine learning mode combines several base models to produce an optimal
  /// predictive model. It then uses a stacking ensemble method to combine
  /// predictions from contributing members. A multi-stack ensemble model can
  /// provide better performance over a single model by combining the predictive
  /// capabilities of multiple models. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support">Autopilot
  /// algorithm support</a> for a list of algorithms supported by
  /// <code>ENSEMBLING</code> mode.
  ///
  /// The <code>HYPERPARAMETER_TUNING</code> (HPO) mode uses the best
  /// hyperparameters to train the best version of a model. HPO automatically
  /// selects an algorithm for the type of problem you want to solve. Then HPO
  /// finds the best hyperparameters according to your objective metric. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support">Autopilot
  /// algorithm support</a> for a list of algorithms supported by
  /// <code>HYPERPARAMETER_TUNING</code> mode.
  final AutoMLMode? mode;

  /// The security configuration for traffic encryption or Amazon VPC settings.
  final AutoMLSecurityConfig? securityConfig;

  AutoMLJobConfig({
    this.candidateGenerationConfig,
    this.completionCriteria,
    this.dataSplitConfig,
    this.mode,
    this.securityConfig,
  });

  factory AutoMLJobConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLJobConfig(
      candidateGenerationConfig: json['CandidateGenerationConfig'] != null
          ? AutoMLCandidateGenerationConfig.fromJson(
              json['CandidateGenerationConfig'] as Map<String, dynamic>)
          : null,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      dataSplitConfig: json['DataSplitConfig'] != null
          ? AutoMLDataSplitConfig.fromJson(
              json['DataSplitConfig'] as Map<String, dynamic>)
          : null,
      mode: (json['Mode'] as String?)?.let(AutoMLMode.fromString),
      securityConfig: json['SecurityConfig'] != null
          ? AutoMLSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final candidateGenerationConfig = this.candidateGenerationConfig;
    final completionCriteria = this.completionCriteria;
    final dataSplitConfig = this.dataSplitConfig;
    final mode = this.mode;
    final securityConfig = this.securityConfig;
    return {
      if (candidateGenerationConfig != null)
        'CandidateGenerationConfig': candidateGenerationConfig,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (dataSplitConfig != null) 'DataSplitConfig': dataSplitConfig,
      if (mode != null) 'Mode': mode.value,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
    };
  }
}

/// Specifies a metric to minimize or maximize as the objective of an AutoML
/// job.
class AutoMLJobObjective {
  /// The name of the objective metric used to measure the predictive quality of a
  /// machine learning system. During training, the model's parameters are updated
  /// iteratively to optimize its performance based on the feedback provided by
  /// the objective metric when evaluating the model on the validation dataset.
  ///
  /// The list of available metrics supported by Autopilot and the default metric
  /// applied when you do not specify a metric name explicitly depend on the
  /// problem type.
  ///
  /// <ul>
  /// <li>
  /// For tabular problem types:
  ///
  /// <ul>
  /// <li>
  /// List of available metrics:
  ///
  /// <ul>
  /// <li>
  /// Regression: <code>MAE</code>, <code>MSE</code>, <code>R2</code>,
  /// <code>RMSE</code>
  /// </li>
  /// <li>
  /// Binary classification: <code>Accuracy</code>, <code>AUC</code>,
  /// <code>BalancedAccuracy</code>, <code>F1</code>, <code>Precision</code>,
  /// <code>Recall</code>
  /// </li>
  /// <li>
  /// Multiclass classification: <code>Accuracy</code>,
  /// <code>BalancedAccuracy</code>, <code>F1macro</code>,
  /// <code>PrecisionMacro</code>, <code>RecallMacro</code>
  /// </li>
  /// </ul>
  /// For a description of each metric, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot
  /// metrics for classification and regression</a>.
  /// </li>
  /// <li>
  /// Default objective metrics:
  ///
  /// <ul>
  /// <li>
  /// Regression: <code>MSE</code>.
  /// </li>
  /// <li>
  /// Binary classification: <code>F1</code>.
  /// </li>
  /// <li>
  /// Multiclass classification: <code>Accuracy</code>.
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// For image or text classification problem types:
  ///
  /// <ul>
  /// <li>
  /// List of available metrics: <code>Accuracy</code>
  ///
  /// For a description of each metric, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/text-classification-data-format-and-metric.html">Autopilot
  /// metrics for text and image classification</a>.
  /// </li>
  /// <li>
  /// Default objective metrics: <code>Accuracy</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// For time-series forecasting problem types:
  ///
  /// <ul>
  /// <li>
  /// List of available metrics: <code>RMSE</code>, <code>wQL</code>,
  /// <code>Average wQL</code>, <code>MASE</code>, <code>MAPE</code>,
  /// <code>WAPE</code>
  ///
  /// For a description of each metric, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/timeseries-objective-metric.html">Autopilot
  /// metrics for time-series forecasting</a>.
  /// </li>
  /// <li>
  /// Default objective metrics: <code>AverageWeightedQuantileLoss</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// For text generation problem types (LLMs fine-tuning): Fine-tuning language
  /// models in Autopilot does not require setting the
  /// <code>AutoMLJobObjective</code> field. Autopilot fine-tunes LLMs without
  /// requiring multiple candidates to be trained and evaluated. Instead, using
  /// your dataset, Autopilot directly fine-tunes your target model to enhance a
  /// default objective metric, the cross-entropy loss. After fine-tuning a
  /// language model, you can evaluate the quality of its generated text using
  /// different metrics. For a list of the available metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-metrics.html">Metrics
  /// for fine-tuning LLMs in Autopilot</a>.
  /// </li>
  /// </ul>
  final AutoMLMetricEnum metricName;

  AutoMLJobObjective({
    required this.metricName,
  });

  factory AutoMLJobObjective.fromJson(Map<String, dynamic> json) {
    return AutoMLJobObjective(
      metricName: AutoMLMetricEnum.fromString((json['MetricName'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    return {
      'MetricName': metricName.value,
    };
  }
}

enum AutoMLJobObjectiveType {
  maximize('Maximize'),
  minimize('Minimize'),
  ;

  final String value;

  const AutoMLJobObjectiveType(this.value);

  static AutoMLJobObjectiveType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AutoMLJobObjectiveType'));
}

enum AutoMLJobSecondaryStatus {
  starting('Starting'),
  maxCandidatesReached('MaxCandidatesReached'),
  failed('Failed'),
  stopped('Stopped'),
  maxAutoMLJobRuntimeReached('MaxAutoMLJobRuntimeReached'),
  stopping('Stopping'),
  candidateDefinitionsGenerated('CandidateDefinitionsGenerated'),
  completed('Completed'),
  explainabilityError('ExplainabilityError'),
  deployingModel('DeployingModel'),
  modelDeploymentError('ModelDeploymentError'),
  generatingModelInsightsReport('GeneratingModelInsightsReport'),
  modelInsightsError('ModelInsightsError'),
  analyzingData('AnalyzingData'),
  featureEngineering('FeatureEngineering'),
  modelTuning('ModelTuning'),
  generatingExplainabilityReport('GeneratingExplainabilityReport'),
  trainingModels('TrainingModels'),
  preTraining('PreTraining'),
  ;

  final String value;

  const AutoMLJobSecondaryStatus(this.value);

  static AutoMLJobSecondaryStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AutoMLJobSecondaryStatus'));
}

enum AutoMLJobStatus {
  completed('Completed'),
  inProgress('InProgress'),
  failed('Failed'),
  stopped('Stopped'),
  stopping('Stopping'),
  ;

  final String value;

  const AutoMLJobStatus(this.value);

  static AutoMLJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLJobStatus'));
}

/// Metadata for an AutoML job step.
class AutoMLJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the AutoML job.
  final String? arn;

  AutoMLJobStepMetadata({
    this.arn,
  });

  factory AutoMLJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return AutoMLJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides a summary about an AutoML job.
class AutoMLJobSummary {
  /// The ARN of the AutoML job.
  final String autoMLJobArn;

  /// The name of the AutoML job you are requesting.
  final String autoMLJobName;

  /// The secondary status of the AutoML job.
  final AutoMLJobSecondaryStatus autoMLJobSecondaryStatus;

  /// The status of the AutoML job.
  final AutoMLJobStatus autoMLJobStatus;

  /// When the AutoML job was created.
  final DateTime creationTime;

  /// When the AutoML job was last modified.
  final DateTime lastModifiedTime;

  /// The end time of an AutoML job.
  final DateTime? endTime;

  /// The failure reason of an AutoML job.
  final String? failureReason;

  /// The list of reasons for partial failures within an AutoML job.
  final List<AutoMLPartialFailureReason>? partialFailureReasons;

  AutoMLJobSummary({
    required this.autoMLJobArn,
    required this.autoMLJobName,
    required this.autoMLJobSecondaryStatus,
    required this.autoMLJobStatus,
    required this.creationTime,
    required this.lastModifiedTime,
    this.endTime,
    this.failureReason,
    this.partialFailureReasons,
  });

  factory AutoMLJobSummary.fromJson(Map<String, dynamic> json) {
    return AutoMLJobSummary(
      autoMLJobArn: json['AutoMLJobArn'] as String,
      autoMLJobName: json['AutoMLJobName'] as String,
      autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus.fromString(
          (json['AutoMLJobSecondaryStatus'] as String)),
      autoMLJobStatus:
          AutoMLJobStatus.fromString((json['AutoMLJobStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      partialFailureReasons: (json['PartialFailureReasons'] as List?)
          ?.nonNulls
          .map((e) =>
              AutoMLPartialFailureReason.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final autoMLJobName = this.autoMLJobName;
    final autoMLJobSecondaryStatus = this.autoMLJobSecondaryStatus;
    final autoMLJobStatus = this.autoMLJobStatus;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final partialFailureReasons = this.partialFailureReasons;
    return {
      'AutoMLJobArn': autoMLJobArn,
      'AutoMLJobName': autoMLJobName,
      'AutoMLJobSecondaryStatus': autoMLJobSecondaryStatus.value,
      'AutoMLJobStatus': autoMLJobStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (partialFailureReasons != null)
        'PartialFailureReasons': partialFailureReasons,
    };
  }
}

enum AutoMLMetricEnum {
  accuracy('Accuracy'),
  mse('MSE'),
  f1('F1'),
  f1macro('F1macro'),
  auc('AUC'),
  rmse('RMSE'),
  balancedAccuracy('BalancedAccuracy'),
  r2('R2'),
  recall('Recall'),
  recallMacro('RecallMacro'),
  precision('Precision'),
  precisionMacro('PrecisionMacro'),
  mae('MAE'),
  mape('MAPE'),
  mase('MASE'),
  wape('WAPE'),
  averageWeightedQuantileLoss('AverageWeightedQuantileLoss'),
  ;

  final String value;

  const AutoMLMetricEnum(this.value);

  static AutoMLMetricEnum fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLMetricEnum'));
}

enum AutoMLMetricExtendedEnum {
  accuracy('Accuracy'),
  mse('MSE'),
  f1('F1'),
  f1macro('F1macro'),
  auc('AUC'),
  rmse('RMSE'),
  mae('MAE'),
  r2('R2'),
  balancedAccuracy('BalancedAccuracy'),
  precision('Precision'),
  precisionMacro('PrecisionMacro'),
  recall('Recall'),
  recallMacro('RecallMacro'),
  logLoss('LogLoss'),
  inferenceLatency('InferenceLatency'),
  mape('MAPE'),
  mase('MASE'),
  wape('WAPE'),
  averageWeightedQuantileLoss('AverageWeightedQuantileLoss'),
  rouge1('Rouge1'),
  rouge2('Rouge2'),
  rougeL('RougeL'),
  rougeLSum('RougeLSum'),
  perplexity('Perplexity'),
  validationLoss('ValidationLoss'),
  trainingLoss('TrainingLoss'),
  ;

  final String value;

  const AutoMLMetricExtendedEnum(this.value);

  static AutoMLMetricExtendedEnum fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AutoMLMetricExtendedEnum'));
}

enum AutoMLMode {
  auto('AUTO'),
  ensembling('ENSEMBLING'),
  hyperparameterTuning('HYPERPARAMETER_TUNING'),
  ;

  final String value;

  const AutoMLMode(this.value);

  static AutoMLMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum AutoMLMode'));
}

/// The output data configuration.
class AutoMLOutputDataConfig {
  /// The Amazon S3 output path. Must be 128 characters or less.
  final String s3OutputPath;

  /// The Key Management Service encryption key ID.
  final String? kmsKeyId;

  AutoMLOutputDataConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
  });

  factory AutoMLOutputDataConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLOutputDataConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// The reason for a partial failure of an AutoML job.
class AutoMLPartialFailureReason {
  /// The message containing the reason for a partial failure of an AutoML job.
  final String? partialFailureMessage;

  AutoMLPartialFailureReason({
    this.partialFailureMessage,
  });

  factory AutoMLPartialFailureReason.fromJson(Map<String, dynamic> json) {
    return AutoMLPartialFailureReason(
      partialFailureMessage: json['PartialFailureMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final partialFailureMessage = this.partialFailureMessage;
    return {
      if (partialFailureMessage != null)
        'PartialFailureMessage': partialFailureMessage,
    };
  }
}

/// A collection of settings specific to the problem type used to configure an
/// AutoML job V2. There must be one and only one config of the following type.
class AutoMLProblemTypeConfig {
  /// Settings used to configure an AutoML job V2 for the image classification
  /// problem type.
  final ImageClassificationJobConfig? imageClassificationJobConfig;

  /// Settings used to configure an AutoML job V2 for the tabular problem type
  /// (regression, classification).
  final TabularJobConfig? tabularJobConfig;

  /// Settings used to configure an AutoML job V2 for the text classification
  /// problem type.
  final TextClassificationJobConfig? textClassificationJobConfig;

  /// Settings used to configure an AutoML job V2 for the text generation (LLMs
  /// fine-tuning) problem type.
  /// <note>
  /// The text generation models that support fine-tuning in Autopilot are
  /// currently accessible exclusively in regions supported by Canvas. Refer to
  /// the documentation of Canvas for the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/canvas.html">full list
  /// of its supported Regions</a>.
  /// </note>
  final TextGenerationJobConfig? textGenerationJobConfig;

  /// Settings used to configure an AutoML job V2 for the time-series forecasting
  /// problem type.
  final TimeSeriesForecastingJobConfig? timeSeriesForecastingJobConfig;

  AutoMLProblemTypeConfig({
    this.imageClassificationJobConfig,
    this.tabularJobConfig,
    this.textClassificationJobConfig,
    this.textGenerationJobConfig,
    this.timeSeriesForecastingJobConfig,
  });

  factory AutoMLProblemTypeConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLProblemTypeConfig(
      imageClassificationJobConfig: json['ImageClassificationJobConfig'] != null
          ? ImageClassificationJobConfig.fromJson(
              json['ImageClassificationJobConfig'] as Map<String, dynamic>)
          : null,
      tabularJobConfig: json['TabularJobConfig'] != null
          ? TabularJobConfig.fromJson(
              json['TabularJobConfig'] as Map<String, dynamic>)
          : null,
      textClassificationJobConfig: json['TextClassificationJobConfig'] != null
          ? TextClassificationJobConfig.fromJson(
              json['TextClassificationJobConfig'] as Map<String, dynamic>)
          : null,
      textGenerationJobConfig: json['TextGenerationJobConfig'] != null
          ? TextGenerationJobConfig.fromJson(
              json['TextGenerationJobConfig'] as Map<String, dynamic>)
          : null,
      timeSeriesForecastingJobConfig: json['TimeSeriesForecastingJobConfig'] !=
              null
          ? TimeSeriesForecastingJobConfig.fromJson(
              json['TimeSeriesForecastingJobConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final imageClassificationJobConfig = this.imageClassificationJobConfig;
    final tabularJobConfig = this.tabularJobConfig;
    final textClassificationJobConfig = this.textClassificationJobConfig;
    final textGenerationJobConfig = this.textGenerationJobConfig;
    final timeSeriesForecastingJobConfig = this.timeSeriesForecastingJobConfig;
    return {
      if (imageClassificationJobConfig != null)
        'ImageClassificationJobConfig': imageClassificationJobConfig,
      if (tabularJobConfig != null) 'TabularJobConfig': tabularJobConfig,
      if (textClassificationJobConfig != null)
        'TextClassificationJobConfig': textClassificationJobConfig,
      if (textGenerationJobConfig != null)
        'TextGenerationJobConfig': textGenerationJobConfig,
      if (timeSeriesForecastingJobConfig != null)
        'TimeSeriesForecastingJobConfig': timeSeriesForecastingJobConfig,
    };
  }
}

enum AutoMLProblemTypeConfigName {
  imageClassification('ImageClassification'),
  textClassification('TextClassification'),
  timeSeriesForecasting('TimeSeriesForecasting'),
  tabular('Tabular'),
  textGeneration('TextGeneration'),
  ;

  final String value;

  const AutoMLProblemTypeConfigName(this.value);

  static AutoMLProblemTypeConfigName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AutoMLProblemTypeConfigName'));
}

/// Stores resolved attributes specific to the problem type of an AutoML job V2.
class AutoMLProblemTypeResolvedAttributes {
  /// The resolved attributes for the tabular problem type.
  final TabularResolvedAttributes? tabularResolvedAttributes;

  /// The resolved attributes for the text generation problem type.
  final TextGenerationResolvedAttributes? textGenerationResolvedAttributes;

  AutoMLProblemTypeResolvedAttributes({
    this.tabularResolvedAttributes,
    this.textGenerationResolvedAttributes,
  });

  factory AutoMLProblemTypeResolvedAttributes.fromJson(
      Map<String, dynamic> json) {
    return AutoMLProblemTypeResolvedAttributes(
      tabularResolvedAttributes: json['TabularResolvedAttributes'] != null
          ? TabularResolvedAttributes.fromJson(
              json['TabularResolvedAttributes'] as Map<String, dynamic>)
          : null,
      textGenerationResolvedAttributes:
          json['TextGenerationResolvedAttributes'] != null
              ? TextGenerationResolvedAttributes.fromJson(
                  json['TextGenerationResolvedAttributes']
                      as Map<String, dynamic>)
              : null,
    );
  }

  Map<String, dynamic> toJson() {
    final tabularResolvedAttributes = this.tabularResolvedAttributes;
    final textGenerationResolvedAttributes =
        this.textGenerationResolvedAttributes;
    return {
      if (tabularResolvedAttributes != null)
        'TabularResolvedAttributes': tabularResolvedAttributes,
      if (textGenerationResolvedAttributes != null)
        'TextGenerationResolvedAttributes': textGenerationResolvedAttributes,
    };
  }
}

enum AutoMLProcessingUnit {
  cpu('CPU'),
  gpu('GPU'),
  ;

  final String value;

  const AutoMLProcessingUnit(this.value);

  static AutoMLProcessingUnit fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum AutoMLProcessingUnit'));
}

/// The resolved attributes used to configure an AutoML job V2.
class AutoMLResolvedAttributes {
  final AutoMLJobObjective? autoMLJobObjective;

  /// Defines the resolved attributes specific to a problem type.
  final AutoMLProblemTypeResolvedAttributes?
      autoMLProblemTypeResolvedAttributes;
  final AutoMLJobCompletionCriteria? completionCriteria;

  AutoMLResolvedAttributes({
    this.autoMLJobObjective,
    this.autoMLProblemTypeResolvedAttributes,
    this.completionCriteria,
  });

  factory AutoMLResolvedAttributes.fromJson(Map<String, dynamic> json) {
    return AutoMLResolvedAttributes(
      autoMLJobObjective: json['AutoMLJobObjective'] != null
          ? AutoMLJobObjective.fromJson(
              json['AutoMLJobObjective'] as Map<String, dynamic>)
          : null,
      autoMLProblemTypeResolvedAttributes:
          json['AutoMLProblemTypeResolvedAttributes'] != null
              ? AutoMLProblemTypeResolvedAttributes.fromJson(
                  json['AutoMLProblemTypeResolvedAttributes']
                      as Map<String, dynamic>)
              : null,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobObjective = this.autoMLJobObjective;
    final autoMLProblemTypeResolvedAttributes =
        this.autoMLProblemTypeResolvedAttributes;
    final completionCriteria = this.completionCriteria;
    return {
      if (autoMLJobObjective != null) 'AutoMLJobObjective': autoMLJobObjective,
      if (autoMLProblemTypeResolvedAttributes != null)
        'AutoMLProblemTypeResolvedAttributes':
            autoMLProblemTypeResolvedAttributes,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
    };
  }
}

/// Describes the Amazon S3 data source.
class AutoMLS3DataSource {
  /// The data type.
  ///
  /// <ul>
  /// <li>
  /// If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
  /// name prefix. SageMaker uses all objects that match the specified key name
  /// prefix for model training.
  ///
  /// The <code>S3Prefix</code> should have the following format:
  ///
  /// <code>s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE</code>
  /// </li>
  /// <li>
  /// If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an
  /// object that is a manifest file containing a list of object keys that you
  /// want SageMaker to use for model training.
  ///
  /// A <code>ManifestFile</code> should have the format shown below:
  ///
  /// <code>[ {"prefix":
  /// "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, </code>
  ///
  /// <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1",</code>
  ///
  /// <code>"DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",</code>
  ///
  /// <code>... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]</code>
  /// </li>
  /// <li>
  /// If you choose <code>AugmentedManifestFile</code>, <code>S3Uri</code>
  /// identifies an object that is an augmented manifest file in JSON lines
  /// format. This file contains the data you want to use for model training.
  /// <code>AugmentedManifestFile</code> is available for V2 API jobs only (for
  /// example, for jobs created by calling <code>CreateAutoMLJobV2</code>).
  ///
  /// Here is a minimal, single-record example of an
  /// <code>AugmentedManifestFile</code>:
  ///
  /// <code>{"source-ref":
  /// "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/cats/cat.jpg",</code>
  ///
  /// <code>"label-metadata": {"class-name": "cat"</code> }
  ///
  /// For more information on <code>AugmentedManifestFile</code>, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/augmented-manifest.html">Provide
  /// Dataset Metadata to Training Jobs with an Augmented Manifest File</a>.
  /// </li>
  /// </ul>
  final AutoMLS3DataType s3DataType;

  /// The URL to the Amazon S3 data source. The Uri refers to the Amazon S3 prefix
  /// or ManifestFile depending on the data type.
  final String s3Uri;

  AutoMLS3DataSource({
    required this.s3DataType,
    required this.s3Uri,
  });

  factory AutoMLS3DataSource.fromJson(Map<String, dynamic> json) {
    return AutoMLS3DataSource(
      s3DataType: AutoMLS3DataType.fromString((json['S3DataType'] as String)),
      s3Uri: json['S3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    return {
      'S3DataType': s3DataType.value,
      'S3Uri': s3Uri,
    };
  }
}

enum AutoMLS3DataType {
  manifestFile('ManifestFile'),
  s3Prefix('S3Prefix'),
  augmentedManifestFile('AugmentedManifestFile'),
  ;

  final String value;

  const AutoMLS3DataType(this.value);

  static AutoMLS3DataType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLS3DataType'));
}

/// Security options.
class AutoMLSecurityConfig {
  /// Whether to use traffic encryption between the container layers.
  final bool? enableInterContainerTrafficEncryption;

  /// The key used to encrypt stored data.
  final String? volumeKmsKeyId;

  /// The VPC configuration.
  final VpcConfig? vpcConfig;

  AutoMLSecurityConfig({
    this.enableInterContainerTrafficEncryption,
    this.volumeKmsKeyId,
    this.vpcConfig,
  });

  factory AutoMLSecurityConfig.fromJson(Map<String, dynamic> json) {
    return AutoMLSecurityConfig(
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    final vpcConfig = this.vpcConfig;
    return {
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

enum AutoMLSortBy {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const AutoMLSortBy(this.value);

  static AutoMLSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLSortBy'));
}

enum AutoMLSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const AutoMLSortOrder(this.value);

  static AutoMLSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutoMLSortOrder'));
}

/// The name and an example value of the hyperparameter that you want to use in
/// Autotune. If Automatic model tuning (AMT) determines that your
/// hyperparameter is eligible for Autotune, an optimal hyperparameter range is
/// selected for you.
class AutoParameter {
  /// The name of the hyperparameter to optimize using Autotune.
  final String name;

  /// An example value of the hyperparameter to optimize using Autotune.
  final String valueHint;

  AutoParameter({
    required this.name,
    required this.valueHint,
  });

  factory AutoParameter.fromJson(Map<String, dynamic> json) {
    return AutoParameter(
      name: json['Name'] as String,
      valueHint: json['ValueHint'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final valueHint = this.valueHint;
    return {
      'Name': name,
      'ValueHint': valueHint,
    };
  }
}

/// Automatic rollback configuration for handling endpoint deployment failures
/// and recovery.
class AutoRollbackConfig {
  /// List of CloudWatch alarms in your account that are configured to monitor
  /// metrics on an endpoint. If any alarms are tripped during a deployment,
  /// SageMaker rolls back the deployment.
  final List<Alarm>? alarms;

  AutoRollbackConfig({
    this.alarms,
  });

  factory AutoRollbackConfig.fromJson(Map<String, dynamic> json) {
    return AutoRollbackConfig(
      alarms: (json['Alarms'] as List?)
          ?.nonNulls
          .map((e) => Alarm.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final alarms = this.alarms;
    return {
      if (alarms != null) 'Alarms': alarms,
    };
  }
}

/// A flag to indicate if you want to use Autotune to automatically find optimal
/// values for the following fields:
///
/// <ul>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges">ParameterRanges</a>:
/// The names and ranges of parameters that a hyperparameter tuning job can
/// optimize.
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>:
/// The maximum resources that can be used for a training job. These resources
/// include the maximum number of training jobs, the maximum runtime of a tuning
/// job, and the maximum number of training jobs to run at the same time.
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType">TrainingJobEarlyStoppingType</a>:
/// A flag that specifies whether or not to use early stopping for training jobs
/// launched by a hyperparameter tuning job.
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy">RetryStrategy</a>:
/// The number of times to retry a training job.
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">Strategy</a>:
/// Specifies how hyperparameter tuning chooses the combinations of
/// hyperparameter values to use for the training jobs that it launches.
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html">ConvergenceDetected</a>:
/// A flag to indicate that Automatic model tuning (AMT) has detected model
/// convergence.
/// </li>
/// </ul>
class Autotune {
  /// Set <code>Mode</code> to <code>Enabled</code> if you want to use Autotune.
  final AutotuneMode mode;

  Autotune({
    required this.mode,
  });

  factory Autotune.fromJson(Map<String, dynamic> json) {
    return Autotune(
      mode: AutotuneMode.fromString((json['Mode'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final mode = this.mode;
    return {
      'Mode': mode.value,
    };
  }
}

enum AutotuneMode {
  enabled('Enabled'),
  ;

  final String value;

  const AutotuneMode(this.value);

  static AutotuneMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutotuneMode'));
}

enum AwsManagedHumanLoopRequestSource {
  awsRekognitionDetectModerationLabelsImageV3(
      'AWS/Rekognition/DetectModerationLabels/Image/V3'),
  awsTextractAnalyzeDocumentFormsV1('AWS/Textract/AnalyzeDocument/Forms/V1'),
  ;

  final String value;

  const AwsManagedHumanLoopRequestSource(this.value);

  static AwsManagedHumanLoopRequestSource fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum AwsManagedHumanLoopRequestSource'));
}

/// Configuration to control how SageMaker captures inference data for batch
/// transform jobs.
class BatchDataCaptureConfig {
  /// The Amazon S3 location being used to capture the data.
  final String destinationS3Uri;

  /// Flag that indicates whether to append inference id to the output.
  final bool? generateInferenceId;

  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service key that SageMaker uses to encrypt data on the storage volume
  /// attached to the ML compute instance that hosts the batch transform job.
  ///
  /// The KmsKeyId can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  BatchDataCaptureConfig({
    required this.destinationS3Uri,
    this.generateInferenceId,
    this.kmsKeyId,
  });

  factory BatchDataCaptureConfig.fromJson(Map<String, dynamic> json) {
    return BatchDataCaptureConfig(
      destinationS3Uri: json['DestinationS3Uri'] as String,
      generateInferenceId: json['GenerateInferenceId'] as bool?,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationS3Uri = this.destinationS3Uri;
    final generateInferenceId = this.generateInferenceId;
    final kmsKeyId = this.kmsKeyId;
    return {
      'DestinationS3Uri': destinationS3Uri,
      if (generateInferenceId != null)
        'GenerateInferenceId': generateInferenceId,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// The error code and error description associated with the resource.
class BatchDescribeModelPackageError {
  /// <p/>
  final String errorCode;

  /// <p/>
  final String errorResponse;

  BatchDescribeModelPackageError({
    required this.errorCode,
    required this.errorResponse,
  });

  factory BatchDescribeModelPackageError.fromJson(Map<String, dynamic> json) {
    return BatchDescribeModelPackageError(
      errorCode: json['ErrorCode'] as String,
      errorResponse: json['ErrorResponse'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final errorCode = this.errorCode;
    final errorResponse = this.errorResponse;
    return {
      'ErrorCode': errorCode,
      'ErrorResponse': errorResponse,
    };
  }
}

class BatchDescribeModelPackageOutput {
  /// A map of the resource and BatchDescribeModelPackageError objects reporting
  /// the error associated with describing the model package.
  final Map<String, BatchDescribeModelPackageError>?
      batchDescribeModelPackageErrorMap;

  /// The summaries for the model package versions
  final Map<String, BatchDescribeModelPackageSummary>? modelPackageSummaries;

  BatchDescribeModelPackageOutput({
    this.batchDescribeModelPackageErrorMap,
    this.modelPackageSummaries,
  });

  factory BatchDescribeModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return BatchDescribeModelPackageOutput(
      batchDescribeModelPackageErrorMap:
          (json['BatchDescribeModelPackageErrorMap'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(
                  k,
                  BatchDescribeModelPackageError.fromJson(
                      e as Map<String, dynamic>))),
      modelPackageSummaries:
          (json['ModelPackageSummaries'] as Map<String, dynamic>?)?.map(
              (k, e) => MapEntry(
                  k,
                  BatchDescribeModelPackageSummary.fromJson(
                      e as Map<String, dynamic>))),
    );
  }

  Map<String, dynamic> toJson() {
    final batchDescribeModelPackageErrorMap =
        this.batchDescribeModelPackageErrorMap;
    final modelPackageSummaries = this.modelPackageSummaries;
    return {
      if (batchDescribeModelPackageErrorMap != null)
        'BatchDescribeModelPackageErrorMap': batchDescribeModelPackageErrorMap,
      if (modelPackageSummaries != null)
        'ModelPackageSummaries': modelPackageSummaries,
    };
  }
}

/// Provides summary information about the model package.
class BatchDescribeModelPackageSummary {
  /// The creation time of the mortgage package summary.
  final DateTime creationTime;
  final InferenceSpecification inferenceSpecification;

  /// The Amazon Resource Name (ARN) of the model package.
  final String modelPackageArn;

  /// The group name for the model package
  final String modelPackageGroupName;

  /// The status of the mortgage package.
  final ModelPackageStatus modelPackageStatus;

  /// The approval status of the model.
  final ModelApprovalStatus? modelApprovalStatus;

  /// The description of the model package.
  final String? modelPackageDescription;

  /// The version number of a versioned model.
  final int? modelPackageVersion;

  BatchDescribeModelPackageSummary({
    required this.creationTime,
    required this.inferenceSpecification,
    required this.modelPackageArn,
    required this.modelPackageGroupName,
    required this.modelPackageStatus,
    this.modelApprovalStatus,
    this.modelPackageDescription,
    this.modelPackageVersion,
  });

  factory BatchDescribeModelPackageSummary.fromJson(Map<String, dynamic> json) {
    return BatchDescribeModelPackageSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      inferenceSpecification: InferenceSpecification.fromJson(
          json['InferenceSpecification'] as Map<String, dynamic>),
      modelPackageArn: json['ModelPackageArn'] as String,
      modelPackageGroupName: json['ModelPackageGroupName'] as String,
      modelPackageStatus:
          ModelPackageStatus.fromString((json['ModelPackageStatus'] as String)),
      modelApprovalStatus: (json['ModelApprovalStatus'] as String?)
          ?.let(ModelApprovalStatus.fromString),
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final inferenceSpecification = this.inferenceSpecification;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageStatus = this.modelPackageStatus;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageVersion = this.modelPackageVersion;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'InferenceSpecification': inferenceSpecification,
      'ModelPackageArn': modelPackageArn,
      'ModelPackageGroupName': modelPackageGroupName,
      'ModelPackageStatus': modelPackageStatus.value,
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.value,
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
    };
  }
}

enum BatchStrategy {
  multiRecord('MultiRecord'),
  singleRecord('SingleRecord'),
  ;

  final String value;

  const BatchStrategy(this.value);

  static BatchStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum BatchStrategy'));
}

/// Input object for the batch transform job.
class BatchTransformInput {
  /// The Amazon S3 location being used to capture the data.
  final String dataCapturedDestinationS3Uri;

  /// The dataset format for your batch transform job.
  final MonitoringDatasetFormat datasetFormat;

  /// Path to the filesystem where the batch transform data is available to the
  /// container.
  final String localPath;

  /// If specified, monitoring jobs subtract this time from the end time. For
  /// information about using offsets for scheduling monitoring jobs, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule
  /// Model Quality Monitoring Jobs</a>.
  final String? endTimeOffset;

  /// The attributes of the input data to exclude from the analysis.
  final String? excludeFeaturesAttribute;

  /// The attributes of the input data that are the input features.
  final String? featuresAttribute;

  /// The attribute of the input data that represents the ground truth label.
  final String? inferenceAttribute;

  /// In a classification problem, the attribute that represents the class
  /// probability.
  final String? probabilityAttribute;

  /// The threshold for the class probability to be evaluated as a positive
  /// result.
  final double? probabilityThresholdAttribute;

  /// Whether input data distributed in Amazon S3 is fully replicated or sharded
  /// by an S3 key. Defaults to <code>FullyReplicated</code>
  final ProcessingS3DataDistributionType? s3DataDistributionType;

  /// Whether the <code>Pipe</code> or <code>File</code> is used as the input mode
  /// for transferring data for the monitoring job. <code>Pipe</code> mode is
  /// recommended for large datasets. <code>File</code> mode is useful for small
  /// files that fit in memory. Defaults to <code>File</code>.
  final ProcessingS3InputMode? s3InputMode;

  /// If specified, monitoring jobs substract this time from the start time. For
  /// information about using offsets for scheduling monitoring jobs, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule
  /// Model Quality Monitoring Jobs</a>.
  final String? startTimeOffset;

  BatchTransformInput({
    required this.dataCapturedDestinationS3Uri,
    required this.datasetFormat,
    required this.localPath,
    this.endTimeOffset,
    this.excludeFeaturesAttribute,
    this.featuresAttribute,
    this.inferenceAttribute,
    this.probabilityAttribute,
    this.probabilityThresholdAttribute,
    this.s3DataDistributionType,
    this.s3InputMode,
    this.startTimeOffset,
  });

  factory BatchTransformInput.fromJson(Map<String, dynamic> json) {
    return BatchTransformInput(
      dataCapturedDestinationS3Uri:
          json['DataCapturedDestinationS3Uri'] as String,
      datasetFormat: MonitoringDatasetFormat.fromJson(
          json['DatasetFormat'] as Map<String, dynamic>),
      localPath: json['LocalPath'] as String,
      endTimeOffset: json['EndTimeOffset'] as String?,
      excludeFeaturesAttribute: json['ExcludeFeaturesAttribute'] as String?,
      featuresAttribute: json['FeaturesAttribute'] as String?,
      inferenceAttribute: json['InferenceAttribute'] as String?,
      probabilityAttribute: json['ProbabilityAttribute'] as String?,
      probabilityThresholdAttribute:
          json['ProbabilityThresholdAttribute'] as double?,
      s3DataDistributionType: (json['S3DataDistributionType'] as String?)
          ?.let(ProcessingS3DataDistributionType.fromString),
      s3InputMode: (json['S3InputMode'] as String?)
          ?.let(ProcessingS3InputMode.fromString),
      startTimeOffset: json['StartTimeOffset'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final dataCapturedDestinationS3Uri = this.dataCapturedDestinationS3Uri;
    final datasetFormat = this.datasetFormat;
    final localPath = this.localPath;
    final endTimeOffset = this.endTimeOffset;
    final excludeFeaturesAttribute = this.excludeFeaturesAttribute;
    final featuresAttribute = this.featuresAttribute;
    final inferenceAttribute = this.inferenceAttribute;
    final probabilityAttribute = this.probabilityAttribute;
    final probabilityThresholdAttribute = this.probabilityThresholdAttribute;
    final s3DataDistributionType = this.s3DataDistributionType;
    final s3InputMode = this.s3InputMode;
    final startTimeOffset = this.startTimeOffset;
    return {
      'DataCapturedDestinationS3Uri': dataCapturedDestinationS3Uri,
      'DatasetFormat': datasetFormat,
      'LocalPath': localPath,
      if (endTimeOffset != null) 'EndTimeOffset': endTimeOffset,
      if (excludeFeaturesAttribute != null)
        'ExcludeFeaturesAttribute': excludeFeaturesAttribute,
      if (featuresAttribute != null) 'FeaturesAttribute': featuresAttribute,
      if (inferenceAttribute != null) 'InferenceAttribute': inferenceAttribute,
      if (probabilityAttribute != null)
        'ProbabilityAttribute': probabilityAttribute,
      if (probabilityThresholdAttribute != null)
        'ProbabilityThresholdAttribute': probabilityThresholdAttribute,
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.value,
      if (s3InputMode != null) 'S3InputMode': s3InputMode.value,
      if (startTimeOffset != null) 'StartTimeOffset': startTimeOffset,
    };
  }
}

/// A structure that keeps track of which training jobs launched by your
/// hyperparameter tuning job are not improving model performance as evaluated
/// against an objective function.
class BestObjectiveNotImproving {
  /// The number of training jobs that have failed to improve model performance by
  /// 1% or greater over prior training jobs as evaluated against an objective
  /// function.
  final int? maxNumberOfTrainingJobsNotImproving;

  BestObjectiveNotImproving({
    this.maxNumberOfTrainingJobsNotImproving,
  });

  factory BestObjectiveNotImproving.fromJson(Map<String, dynamic> json) {
    return BestObjectiveNotImproving(
      maxNumberOfTrainingJobsNotImproving:
          json['MaxNumberOfTrainingJobsNotImproving'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxNumberOfTrainingJobsNotImproving =
        this.maxNumberOfTrainingJobsNotImproving;
    return {
      if (maxNumberOfTrainingJobsNotImproving != null)
        'MaxNumberOfTrainingJobsNotImproving':
            maxNumberOfTrainingJobsNotImproving,
    };
  }
}

/// Contains bias metrics for a model.
class Bias {
  /// The post-training bias report for a model.
  final MetricsSource? postTrainingReport;

  /// The pre-training bias report for a model.
  final MetricsSource? preTrainingReport;

  /// The bias report for a model
  final MetricsSource? report;

  Bias({
    this.postTrainingReport,
    this.preTrainingReport,
    this.report,
  });

  factory Bias.fromJson(Map<String, dynamic> json) {
    return Bias(
      postTrainingReport: json['PostTrainingReport'] != null
          ? MetricsSource.fromJson(
              json['PostTrainingReport'] as Map<String, dynamic>)
          : null,
      preTrainingReport: json['PreTrainingReport'] != null
          ? MetricsSource.fromJson(
              json['PreTrainingReport'] as Map<String, dynamic>)
          : null,
      report: json['Report'] != null
          ? MetricsSource.fromJson(json['Report'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final postTrainingReport = this.postTrainingReport;
    final preTrainingReport = this.preTrainingReport;
    final report = this.report;
    return {
      if (postTrainingReport != null) 'PostTrainingReport': postTrainingReport,
      if (preTrainingReport != null) 'PreTrainingReport': preTrainingReport,
      if (report != null) 'Report': report,
    };
  }
}

/// Update policy for a blue/green deployment. If this update policy is
/// specified, SageMaker creates a new fleet during the deployment while
/// maintaining the old fleet. SageMaker flips traffic to the new fleet
/// according to the specified traffic routing configuration. Only one update
/// policy should be used in the deployment configuration. If no update policy
/// is specified, SageMaker uses a blue/green deployment strategy with all at
/// once traffic shifting by default.
class BlueGreenUpdatePolicy {
  /// Defines the traffic routing strategy to shift traffic from the old fleet to
  /// the new fleet during an endpoint deployment.
  final TrafficRoutingConfig trafficRoutingConfiguration;

  /// Maximum execution timeout for the deployment. Note that the timeout value
  /// should be larger than the total waiting time specified in
  /// <code>TerminationWaitInSeconds</code> and
  /// <code>WaitIntervalInSeconds</code>.
  final int? maximumExecutionTimeoutInSeconds;

  /// Additional waiting time in seconds after the completion of an endpoint
  /// deployment before terminating the old endpoint fleet. Default is 0.
  final int? terminationWaitInSeconds;

  BlueGreenUpdatePolicy({
    required this.trafficRoutingConfiguration,
    this.maximumExecutionTimeoutInSeconds,
    this.terminationWaitInSeconds,
  });

  factory BlueGreenUpdatePolicy.fromJson(Map<String, dynamic> json) {
    return BlueGreenUpdatePolicy(
      trafficRoutingConfiguration: TrafficRoutingConfig.fromJson(
          json['TrafficRoutingConfiguration'] as Map<String, dynamic>),
      maximumExecutionTimeoutInSeconds:
          json['MaximumExecutionTimeoutInSeconds'] as int?,
      terminationWaitInSeconds: json['TerminationWaitInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final trafficRoutingConfiguration = this.trafficRoutingConfiguration;
    final maximumExecutionTimeoutInSeconds =
        this.maximumExecutionTimeoutInSeconds;
    final terminationWaitInSeconds = this.terminationWaitInSeconds;
    return {
      'TrafficRoutingConfiguration': trafficRoutingConfiguration,
      if (maximumExecutionTimeoutInSeconds != null)
        'MaximumExecutionTimeoutInSeconds': maximumExecutionTimeoutInSeconds,
      if (terminationWaitInSeconds != null)
        'TerminationWaitInSeconds': terminationWaitInSeconds,
    };
  }
}

enum BooleanOperator {
  and('And'),
  or('Or'),
  ;

  final String value;

  const BooleanOperator(this.value);

  static BooleanOperator fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum BooleanOperator'));
}

/// Details on the cache hit of a pipeline execution step.
class CacheHitResult {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? sourcePipelineExecutionArn;

  CacheHitResult({
    this.sourcePipelineExecutionArn,
  });

  factory CacheHitResult.fromJson(Map<String, dynamic> json) {
    return CacheHitResult(
      sourcePipelineExecutionArn: json['SourcePipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourcePipelineExecutionArn = this.sourcePipelineExecutionArn;
    return {
      if (sourcePipelineExecutionArn != null)
        'SourcePipelineExecutionArn': sourcePipelineExecutionArn,
    };
  }
}

/// Metadata about a callback step.
class CallbackStepMetadata {
  /// The pipeline generated token from the Amazon SQS queue.
  final String? callbackToken;

  /// A list of the output parameters of the callback step.
  final List<OutputParameter>? outputParameters;

  /// The URL of the Amazon Simple Queue Service (Amazon SQS) queue used by the
  /// callback step.
  final String? sqsQueueUrl;

  CallbackStepMetadata({
    this.callbackToken,
    this.outputParameters,
    this.sqsQueueUrl,
  });

  factory CallbackStepMetadata.fromJson(Map<String, dynamic> json) {
    return CallbackStepMetadata(
      callbackToken: json['CallbackToken'] as String?,
      outputParameters: (json['OutputParameters'] as List?)
          ?.nonNulls
          .map((e) => OutputParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
      sqsQueueUrl: json['SqsQueueUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final callbackToken = this.callbackToken;
    final outputParameters = this.outputParameters;
    final sqsQueueUrl = this.sqsQueueUrl;
    return {
      if (callbackToken != null) 'CallbackToken': callbackToken,
      if (outputParameters != null) 'OutputParameters': outputParameters,
      if (sqsQueueUrl != null) 'SqsQueueUrl': sqsQueueUrl,
    };
  }
}

/// The location of artifacts for an AutoML candidate job.
class CandidateArtifactLocations {
  /// The Amazon S3 prefix to the explainability artifacts generated for the
  /// AutoML candidate.
  final String explainability;

  /// The Amazon S3 prefix to the accuracy metrics and the inference results
  /// observed over the testing window. Available only for the time-series
  /// forecasting problem type.
  final String? backtestResults;

  /// The Amazon S3 prefix to the model insight artifacts generated for the AutoML
  /// candidate.
  final String? modelInsights;

  CandidateArtifactLocations({
    required this.explainability,
    this.backtestResults,
    this.modelInsights,
  });

  factory CandidateArtifactLocations.fromJson(Map<String, dynamic> json) {
    return CandidateArtifactLocations(
      explainability: json['Explainability'] as String,
      backtestResults: json['BacktestResults'] as String?,
      modelInsights: json['ModelInsights'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final explainability = this.explainability;
    final backtestResults = this.backtestResults;
    final modelInsights = this.modelInsights;
    return {
      'Explainability': explainability,
      if (backtestResults != null) 'BacktestResults': backtestResults,
      if (modelInsights != null) 'ModelInsights': modelInsights,
    };
  }
}

/// Stores the configuration information for how model candidates are generated
/// using an AutoML job V2.
class CandidateGenerationConfig {
  /// Your Autopilot job trains a default set of algorithms on your dataset. For
  /// tabular and time-series data, you can customize the algorithm list by
  /// selecting a subset of algorithms for your problem type.
  ///
  /// <code>AlgorithmsConfig</code> stores the customized selection of algorithms
  /// to train on your data.
  ///
  /// <ul>
  /// <li>
  /// <b>For the tabular problem type <code>TabularJobConfig</code>,</b> the list
  /// of available algorithms to choose from depends on the training mode set in
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobConfig.html">
  /// <code>AutoMLJobConfig.Mode</code> </a>.
  ///
  /// <ul>
  /// <li>
  /// <code>AlgorithmsConfig</code> should not be set when the training mode
  /// <code>AutoMLJobConfig.Mode</code> is set to <code>AUTO</code>.
  /// </li>
  /// <li>
  /// When <code>AlgorithmsConfig</code> is provided, one
  /// <code>AutoMLAlgorithms</code> attribute must be set and one only.
  ///
  /// If the list of algorithms provided as values for
  /// <code>AutoMLAlgorithms</code> is empty,
  /// <code>CandidateGenerationConfig</code> uses the full set of algorithms for
  /// the given training mode.
  /// </li>
  /// <li>
  /// When <code>AlgorithmsConfig</code> is not provided,
  /// <code>CandidateGenerationConfig</code> uses the full set of algorithms for
  /// the given training mode.
  /// </li>
  /// </ul>
  /// For the list of all algorithms per training mode, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html">
  /// AlgorithmConfig</a>.
  ///
  /// For more information on each algorithm, see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support">Algorithm
  /// support</a> section in the Autopilot developer guide.
  /// </li>
  /// <li>
  /// <b>For the time-series forecasting problem type
  /// <code>TimeSeriesForecastingJobConfig</code>,</b> choose your algorithms from
  /// the list provided in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html">
  /// AlgorithmConfig</a>.
  ///
  /// For more information on each algorithm, see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/timeseries-forecasting-algorithms.html">Algorithms
  /// support for time-series forecasting</a> section in the Autopilot developer
  /// guide.
  ///
  /// <ul>
  /// <li>
  /// When <code>AlgorithmsConfig</code> is provided, one
  /// <code>AutoMLAlgorithms</code> attribute must be set and one only.
  ///
  /// If the list of algorithms provided as values for
  /// <code>AutoMLAlgorithms</code> is empty,
  /// <code>CandidateGenerationConfig</code> uses the full set of algorithms for
  /// time-series forecasting.
  /// </li>
  /// <li>
  /// When <code>AlgorithmsConfig</code> is not provided,
  /// <code>CandidateGenerationConfig</code> uses the full set of algorithms for
  /// time-series forecasting.
  /// </li>
  /// </ul> </li>
  /// </ul>
  final List<AutoMLAlgorithmConfig>? algorithmsConfig;

  CandidateGenerationConfig({
    this.algorithmsConfig,
  });

  factory CandidateGenerationConfig.fromJson(Map<String, dynamic> json) {
    return CandidateGenerationConfig(
      algorithmsConfig: (json['AlgorithmsConfig'] as List?)
          ?.nonNulls
          .map((e) => AutoMLAlgorithmConfig.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmsConfig = this.algorithmsConfig;
    return {
      if (algorithmsConfig != null) 'AlgorithmsConfig': algorithmsConfig,
    };
  }
}

/// The properties of an AutoML candidate job.
class CandidateProperties {
  /// The Amazon S3 prefix to the artifacts generated for an AutoML candidate.
  final CandidateArtifactLocations? candidateArtifactLocations;

  /// Information about the candidate metrics for an AutoML job.
  final List<MetricDatum>? candidateMetrics;

  CandidateProperties({
    this.candidateArtifactLocations,
    this.candidateMetrics,
  });

  factory CandidateProperties.fromJson(Map<String, dynamic> json) {
    return CandidateProperties(
      candidateArtifactLocations: json['CandidateArtifactLocations'] != null
          ? CandidateArtifactLocations.fromJson(
              json['CandidateArtifactLocations'] as Map<String, dynamic>)
          : null,
      candidateMetrics: (json['CandidateMetrics'] as List?)
          ?.nonNulls
          .map((e) => MetricDatum.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final candidateArtifactLocations = this.candidateArtifactLocations;
    final candidateMetrics = this.candidateMetrics;
    return {
      if (candidateArtifactLocations != null)
        'CandidateArtifactLocations': candidateArtifactLocations,
      if (candidateMetrics != null) 'CandidateMetrics': candidateMetrics,
    };
  }
}

enum CandidateSortBy {
  creationTime('CreationTime'),
  status('Status'),
  finalObjectiveMetricValue('FinalObjectiveMetricValue'),
  ;

  final String value;

  const CandidateSortBy(this.value);

  static CandidateSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CandidateSortBy'));
}

enum CandidateStatus {
  completed('Completed'),
  inProgress('InProgress'),
  failed('Failed'),
  stopped('Stopped'),
  stopping('Stopping'),
  ;

  final String value;

  const CandidateStatus(this.value);

  static CandidateStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CandidateStatus'));
}

enum CandidateStepType {
  awsSageMakerTrainingJob('AWS::SageMaker::TrainingJob'),
  awsSageMakerTransformJob('AWS::SageMaker::TransformJob'),
  awsSageMakerProcessingJob('AWS::SageMaker::ProcessingJob'),
  ;

  final String value;

  const CandidateStepType(this.value);

  static CandidateStepType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CandidateStepType'));
}

/// The SageMaker Canvas application settings.
class CanvasAppSettings {
  /// The model deployment settings for the SageMaker Canvas application.
  final DirectDeploySettings? directDeploySettings;

  /// The generative AI settings for the SageMaker Canvas application.
  final GenerativeAiSettings? generativeAiSettings;

  /// The settings for connecting to an external data source with OAuth.
  final List<IdentityProviderOAuthSetting>? identityProviderOAuthSettings;

  /// The settings for document querying.
  final KendraSettings? kendraSettings;

  /// The model registry settings for the SageMaker Canvas application.
  final ModelRegisterSettings? modelRegisterSettings;

  /// Time series forecast settings for the SageMaker Canvas application.
  final TimeSeriesForecastingSettings? timeSeriesForecastingSettings;

  /// The workspace settings for the SageMaker Canvas application.
  final WorkspaceSettings? workspaceSettings;

  CanvasAppSettings({
    this.directDeploySettings,
    this.generativeAiSettings,
    this.identityProviderOAuthSettings,
    this.kendraSettings,
    this.modelRegisterSettings,
    this.timeSeriesForecastingSettings,
    this.workspaceSettings,
  });

  factory CanvasAppSettings.fromJson(Map<String, dynamic> json) {
    return CanvasAppSettings(
      directDeploySettings: json['DirectDeploySettings'] != null
          ? DirectDeploySettings.fromJson(
              json['DirectDeploySettings'] as Map<String, dynamic>)
          : null,
      generativeAiSettings: json['GenerativeAiSettings'] != null
          ? GenerativeAiSettings.fromJson(
              json['GenerativeAiSettings'] as Map<String, dynamic>)
          : null,
      identityProviderOAuthSettings: (json['IdentityProviderOAuthSettings']
              as List?)
          ?.nonNulls
          .map((e) =>
              IdentityProviderOAuthSetting.fromJson(e as Map<String, dynamic>))
          .toList(),
      kendraSettings: json['KendraSettings'] != null
          ? KendraSettings.fromJson(
              json['KendraSettings'] as Map<String, dynamic>)
          : null,
      modelRegisterSettings: json['ModelRegisterSettings'] != null
          ? ModelRegisterSettings.fromJson(
              json['ModelRegisterSettings'] as Map<String, dynamic>)
          : null,
      timeSeriesForecastingSettings:
          json['TimeSeriesForecastingSettings'] != null
              ? TimeSeriesForecastingSettings.fromJson(
                  json['TimeSeriesForecastingSettings'] as Map<String, dynamic>)
              : null,
      workspaceSettings: json['WorkspaceSettings'] != null
          ? WorkspaceSettings.fromJson(
              json['WorkspaceSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final directDeploySettings = this.directDeploySettings;
    final generativeAiSettings = this.generativeAiSettings;
    final identityProviderOAuthSettings = this.identityProviderOAuthSettings;
    final kendraSettings = this.kendraSettings;
    final modelRegisterSettings = this.modelRegisterSettings;
    final timeSeriesForecastingSettings = this.timeSeriesForecastingSettings;
    final workspaceSettings = this.workspaceSettings;
    return {
      if (directDeploySettings != null)
        'DirectDeploySettings': directDeploySettings,
      if (generativeAiSettings != null)
        'GenerativeAiSettings': generativeAiSettings,
      if (identityProviderOAuthSettings != null)
        'IdentityProviderOAuthSettings': identityProviderOAuthSettings,
      if (kendraSettings != null) 'KendraSettings': kendraSettings,
      if (modelRegisterSettings != null)
        'ModelRegisterSettings': modelRegisterSettings,
      if (timeSeriesForecastingSettings != null)
        'TimeSeriesForecastingSettings': timeSeriesForecastingSettings,
      if (workspaceSettings != null) 'WorkspaceSettings': workspaceSettings,
    };
  }
}

/// Specifies the type and size of the endpoint capacity to activate for a
/// blue/green deployment, a rolling deployment, or a rollback strategy. You can
/// specify your batches as either instance count or the overall percentage or
/// your fleet.
///
/// For a rollback strategy, if you don't specify the fields in this object, or
/// if you set the <code>Value</code> to 100%, then SageMaker uses a blue/green
/// rollback strategy and rolls all traffic back to the blue fleet.
class CapacitySize {
  /// Specifies the endpoint capacity type.
  ///
  /// <ul>
  /// <li>
  /// <code>INSTANCE_COUNT</code>: The endpoint activates based on the number of
  /// instances.
  /// </li>
  /// <li>
  /// <code>CAPACITY_PERCENT</code>: The endpoint activates based on the specified
  /// percentage of capacity.
  /// </li>
  /// </ul>
  final CapacitySizeType type;

  /// Defines the capacity size, either as a number of instances or a capacity
  /// percentage.
  final int value;

  CapacitySize({
    required this.type,
    required this.value,
  });

  factory CapacitySize.fromJson(Map<String, dynamic> json) {
    return CapacitySize(
      type: CapacitySizeType.fromString((json['Type'] as String)),
      value: json['Value'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final value = this.value;
    return {
      'Type': type.value,
      'Value': value,
    };
  }
}

enum CapacitySizeType {
  instanceCount('INSTANCE_COUNT'),
  capacityPercent('CAPACITY_PERCENT'),
  ;

  final String value;

  const CapacitySizeType(this.value);

  static CapacitySizeType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CapacitySizeType'));
}

/// Configuration specifying how to treat different headers. If no headers are
/// specified Amazon SageMaker will by default base64 encode when capturing the
/// data.
class CaptureContentTypeHeader {
  /// The list of all content type headers that Amazon SageMaker will treat as CSV
  /// and capture accordingly.
  final List<String>? csvContentTypes;

  /// The list of all content type headers that SageMaker will treat as JSON and
  /// capture accordingly.
  final List<String>? jsonContentTypes;

  CaptureContentTypeHeader({
    this.csvContentTypes,
    this.jsonContentTypes,
  });

  factory CaptureContentTypeHeader.fromJson(Map<String, dynamic> json) {
    return CaptureContentTypeHeader(
      csvContentTypes: (json['CsvContentTypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      jsonContentTypes: (json['JsonContentTypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final csvContentTypes = this.csvContentTypes;
    final jsonContentTypes = this.jsonContentTypes;
    return {
      if (csvContentTypes != null) 'CsvContentTypes': csvContentTypes,
      if (jsonContentTypes != null) 'JsonContentTypes': jsonContentTypes,
    };
  }
}

enum CaptureMode {
  input('Input'),
  output('Output'),
  inputAndOutput('InputAndOutput'),
  ;

  final String value;

  const CaptureMode(this.value);

  static CaptureMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum CaptureMode'));
}

/// Specifies data Model Monitor will capture.
class CaptureOption {
  /// Specify the boundary of data to capture.
  final CaptureMode captureMode;

  CaptureOption({
    required this.captureMode,
  });

  factory CaptureOption.fromJson(Map<String, dynamic> json) {
    return CaptureOption(
      captureMode: CaptureMode.fromString((json['CaptureMode'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final captureMode = this.captureMode;
    return {
      'CaptureMode': captureMode.value,
    };
  }
}

enum CaptureStatus {
  started('Started'),
  stopped('Stopped'),
  ;

  final String value;

  const CaptureStatus(this.value);

  static CaptureStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CaptureStatus'));
}

/// Environment parameters you want to benchmark your load test against.
class CategoricalParameter {
  /// The Name of the environment variable.
  final String name;

  /// The list of values you can pass.
  final List<String> value;

  CategoricalParameter({
    required this.name,
    required this.value,
  });

  factory CategoricalParameter.fromJson(Map<String, dynamic> json) {
    return CategoricalParameter(
      name: json['Name'] as String,
      value: (json['Value'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      'Name': name,
      'Value': value,
    };
  }
}

/// A list of categorical hyperparameters to tune.
class CategoricalParameterRange {
  /// The name of the categorical hyperparameter to tune.
  final String name;

  /// A list of the categories for the hyperparameter.
  final List<String> values;

  CategoricalParameterRange({
    required this.name,
    required this.values,
  });

  factory CategoricalParameterRange.fromJson(Map<String, dynamic> json) {
    return CategoricalParameterRange(
      name: json['Name'] as String,
      values:
          (json['Values'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final values = this.values;
    return {
      'Name': name,
      'Values': values,
    };
  }
}

/// Defines the possible values for a categorical hyperparameter.
class CategoricalParameterRangeSpecification {
  /// The allowed categories for the hyperparameter.
  final List<String> values;

  CategoricalParameterRangeSpecification({
    required this.values,
  });

  factory CategoricalParameterRangeSpecification.fromJson(
      Map<String, dynamic> json) {
    return CategoricalParameterRangeSpecification(
      values:
          (json['Values'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final values = this.values;
    return {
      'Values': values,
    };
  }
}

/// A channel is a named input source that training algorithms can consume.
class Channel {
  /// The name of the channel.
  final String channelName;

  /// The location of the channel data.
  final DataSource dataSource;

  /// If training data is compressed, the compression type. The default value is
  /// <code>None</code>. <code>CompressionType</code> is used only in Pipe input
  /// mode. In File mode, leave this field unset or set it to None.
  final CompressionType? compressionType;

  /// The MIME type of the data.
  final String? contentType;

  /// (Optional) The input mode to use for the data channel in a training job. If
  /// you don't set a value for <code>InputMode</code>, SageMaker uses the value
  /// set for <code>TrainingInputMode</code>. Use this parameter to override the
  /// <code>TrainingInputMode</code> setting in a <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html">AlgorithmSpecification</a>
  /// request when you have a channel that needs a different input mode from the
  /// training job's general setting. To download the data from Amazon Simple
  /// Storage Service (Amazon S3) to the provisioned ML storage volume, and mount
  /// the directory to a Docker volume, use <code>File</code> input mode. To
  /// stream data directly from Amazon S3 to the container, choose
  /// <code>Pipe</code> input mode.
  ///
  /// To use a model for incremental training, choose <code>File</code> input
  /// model.
  final TrainingInputMode? inputMode;

  /// <p/>
  /// Specify RecordIO as the value when input data is in raw format but the
  /// training algorithm requires the RecordIO format. In this case, SageMaker
  /// wraps each individual S3 object in a RecordIO record. If the input data is
  /// already in RecordIO format, you don't need to set this attribute. For more
  /// information, see <a
  /// href="https://mxnet.apache.org/api/architecture/note_data_loading#data-format">Create
  /// a Dataset Using RecordIO</a>.
  ///
  /// In File mode, leave this field unset or set it to None.
  final RecordWrapper? recordWrapperType;

  /// A configuration for a shuffle option for input data in a channel. If you use
  /// <code>S3Prefix</code> for <code>S3DataType</code>, this shuffles the results
  /// of the S3 key prefix matches. If you use <code>ManifestFile</code>, the
  /// order of the S3 object references in the <code>ManifestFile</code> is
  /// shuffled. If you use <code>AugmentedManifestFile</code>, the order of the
  /// JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The
  /// shuffling order is determined using the <code>Seed</code> value.
  ///
  /// For Pipe input mode, shuffling is done at the start of every epoch. With
  /// large datasets this ensures that the order of the training data is different
  /// for each epoch, it helps reduce bias and possible overfitting. In a
  /// multi-node training job when ShuffleConfig is combined with
  /// <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data
  /// is shuffled across nodes so that the content sent to a particular node on
  /// the first epoch might be sent to a different node on the second epoch.
  final ShuffleConfig? shuffleConfig;

  Channel({
    required this.channelName,
    required this.dataSource,
    this.compressionType,
    this.contentType,
    this.inputMode,
    this.recordWrapperType,
    this.shuffleConfig,
  });

  factory Channel.fromJson(Map<String, dynamic> json) {
    return Channel(
      channelName: json['ChannelName'] as String,
      dataSource:
          DataSource.fromJson(json['DataSource'] as Map<String, dynamic>),
      compressionType:
          (json['CompressionType'] as String?)?.let(CompressionType.fromString),
      contentType: json['ContentType'] as String?,
      inputMode:
          (json['InputMode'] as String?)?.let(TrainingInputMode.fromString),
      recordWrapperType:
          (json['RecordWrapperType'] as String?)?.let(RecordWrapper.fromString),
      shuffleConfig: json['ShuffleConfig'] != null
          ? ShuffleConfig.fromJson(
              json['ShuffleConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final channelName = this.channelName;
    final dataSource = this.dataSource;
    final compressionType = this.compressionType;
    final contentType = this.contentType;
    final inputMode = this.inputMode;
    final recordWrapperType = this.recordWrapperType;
    final shuffleConfig = this.shuffleConfig;
    return {
      'ChannelName': channelName,
      'DataSource': dataSource,
      if (compressionType != null) 'CompressionType': compressionType.value,
      if (contentType != null) 'ContentType': contentType,
      if (inputMode != null) 'InputMode': inputMode.value,
      if (recordWrapperType != null)
        'RecordWrapperType': recordWrapperType.value,
      if (shuffleConfig != null) 'ShuffleConfig': shuffleConfig,
    };
  }
}

/// Defines a named input source, called a channel, to be used by an algorithm.
class ChannelSpecification {
  /// The name of the channel.
  final String name;

  /// The supported MIME types for the data.
  final List<String> supportedContentTypes;

  /// The allowed input mode, either FILE or PIPE.
  ///
  /// In FILE mode, Amazon SageMaker copies the data from the input source onto
  /// the local Amazon Elastic Block Store (Amazon EBS) volumes before starting
  /// your training algorithm. This is the most commonly used input mode.
  ///
  /// In PIPE mode, Amazon SageMaker streams input data from the source directly
  /// to your algorithm without using the EBS volume.
  final List<TrainingInputMode> supportedInputModes;

  /// A brief description of the channel.
  final String? description;

  /// Indicates whether the channel is required by the algorithm.
  final bool? isRequired;

  /// The allowed compression types, if data compression is used.
  final List<CompressionType>? supportedCompressionTypes;

  ChannelSpecification({
    required this.name,
    required this.supportedContentTypes,
    required this.supportedInputModes,
    this.description,
    this.isRequired,
    this.supportedCompressionTypes,
  });

  factory ChannelSpecification.fromJson(Map<String, dynamic> json) {
    return ChannelSpecification(
      name: json['Name'] as String,
      supportedContentTypes: (json['SupportedContentTypes'] as List)
          .nonNulls
          .map((e) => e as String)
          .toList(),
      supportedInputModes: (json['SupportedInputModes'] as List)
          .nonNulls
          .map((e) => TrainingInputMode.fromString((e as String)))
          .toList(),
      description: json['Description'] as String?,
      isRequired: json['IsRequired'] as bool?,
      supportedCompressionTypes: (json['SupportedCompressionTypes'] as List?)
          ?.nonNulls
          .map((e) => CompressionType.fromString((e as String)))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final supportedContentTypes = this.supportedContentTypes;
    final supportedInputModes = this.supportedInputModes;
    final description = this.description;
    final isRequired = this.isRequired;
    final supportedCompressionTypes = this.supportedCompressionTypes;
    return {
      'Name': name,
      'SupportedContentTypes': supportedContentTypes,
      'SupportedInputModes': supportedInputModes.map((e) => e.value).toList(),
      if (description != null) 'Description': description,
      if (isRequired != null) 'IsRequired': isRequired,
      if (supportedCompressionTypes != null)
        'SupportedCompressionTypes':
            supportedCompressionTypes.map((e) => e.value).toList(),
    };
  }
}

/// Contains information about the output location for managed spot training
/// checkpoint data.
class CheckpointConfig {
  /// Identifies the S3 path where you want SageMaker to store checkpoints. For
  /// example, <code>s3://bucket-name/key-name-prefix</code>.
  final String s3Uri;

  /// (Optional) The local directory where checkpoints are written. The default
  /// directory is <code>/opt/ml/checkpoints/</code>.
  final String? localPath;

  CheckpointConfig({
    required this.s3Uri,
    this.localPath,
  });

  factory CheckpointConfig.fromJson(Map<String, dynamic> json) {
    return CheckpointConfig(
      s3Uri: json['S3Uri'] as String,
      localPath: json['LocalPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    final localPath = this.localPath;
    return {
      'S3Uri': s3Uri,
      if (localPath != null) 'LocalPath': localPath,
    };
  }
}

/// The container for the metadata for the ClarifyCheck step. For more
/// information, see the topic on <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check">ClarifyCheck
/// step</a> in the <i>Amazon SageMaker Developer Guide</i>.
class ClarifyCheckStepMetadata {
  /// The Amazon S3 URI of baseline constraints file to be used for the drift
  /// check.
  final String? baselineUsedForDriftCheckConstraints;

  /// The Amazon S3 URI of the newly calculated baseline constraints file.
  final String? calculatedBaselineConstraints;

  /// The Amazon Resource Name (ARN) of the check processing job that was run by
  /// this step's execution.
  final String? checkJobArn;

  /// The type of the Clarify Check step
  final String? checkType;

  /// The model package group name.
  final String? modelPackageGroupName;

  /// This flag indicates if a newly calculated baseline can be accessed through
  /// step properties <code>BaselineUsedForDriftCheckConstraints</code> and
  /// <code>BaselineUsedForDriftCheckStatistics</code>. If it is set to
  /// <code>False</code>, the previous baseline of the configured check type must
  /// also be available. These can be accessed through the
  /// <code>BaselineUsedForDriftCheckConstraints</code> property.
  final bool? registerNewBaseline;

  /// This flag indicates if the drift check against the previous baseline will be
  /// skipped or not. If it is set to <code>False</code>, the previous baseline of
  /// the configured check type must be available.
  final bool? skipCheck;

  /// The Amazon S3 URI of the violation report if violations are detected.
  final String? violationReport;

  ClarifyCheckStepMetadata({
    this.baselineUsedForDriftCheckConstraints,
    this.calculatedBaselineConstraints,
    this.checkJobArn,
    this.checkType,
    this.modelPackageGroupName,
    this.registerNewBaseline,
    this.skipCheck,
    this.violationReport,
  });

  factory ClarifyCheckStepMetadata.fromJson(Map<String, dynamic> json) {
    return ClarifyCheckStepMetadata(
      baselineUsedForDriftCheckConstraints:
          json['BaselineUsedForDriftCheckConstraints'] as String?,
      calculatedBaselineConstraints:
          json['CalculatedBaselineConstraints'] as String?,
      checkJobArn: json['CheckJobArn'] as String?,
      checkType: json['CheckType'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      registerNewBaseline: json['RegisterNewBaseline'] as bool?,
      skipCheck: json['SkipCheck'] as bool?,
      violationReport: json['ViolationReport'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final baselineUsedForDriftCheckConstraints =
        this.baselineUsedForDriftCheckConstraints;
    final calculatedBaselineConstraints = this.calculatedBaselineConstraints;
    final checkJobArn = this.checkJobArn;
    final checkType = this.checkType;
    final modelPackageGroupName = this.modelPackageGroupName;
    final registerNewBaseline = this.registerNewBaseline;
    final skipCheck = this.skipCheck;
    final violationReport = this.violationReport;
    return {
      if (baselineUsedForDriftCheckConstraints != null)
        'BaselineUsedForDriftCheckConstraints':
            baselineUsedForDriftCheckConstraints,
      if (calculatedBaselineConstraints != null)
        'CalculatedBaselineConstraints': calculatedBaselineConstraints,
      if (checkJobArn != null) 'CheckJobArn': checkJobArn,
      if (checkType != null) 'CheckType': checkType,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (registerNewBaseline != null)
        'RegisterNewBaseline': registerNewBaseline,
      if (skipCheck != null) 'SkipCheck': skipCheck,
      if (violationReport != null) 'ViolationReport': violationReport,
    };
  }
}

/// The configuration parameters for the SageMaker Clarify explainer.
class ClarifyExplainerConfig {
  /// The configuration for SHAP analysis.
  final ClarifyShapConfig shapConfig;

  /// A JMESPath boolean expression used to filter which records to explain.
  /// Explanations are activated by default. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable">
  /// <code>EnableExplanations</code> </a>for additional information.
  final String? enableExplanations;

  /// The inference configuration parameter for the model container.
  final ClarifyInferenceConfig? inferenceConfig;

  ClarifyExplainerConfig({
    required this.shapConfig,
    this.enableExplanations,
    this.inferenceConfig,
  });

  factory ClarifyExplainerConfig.fromJson(Map<String, dynamic> json) {
    return ClarifyExplainerConfig(
      shapConfig: ClarifyShapConfig.fromJson(
          json['ShapConfig'] as Map<String, dynamic>),
      enableExplanations: json['EnableExplanations'] as String?,
      inferenceConfig: json['InferenceConfig'] != null
          ? ClarifyInferenceConfig.fromJson(
              json['InferenceConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final shapConfig = this.shapConfig;
    final enableExplanations = this.enableExplanations;
    final inferenceConfig = this.inferenceConfig;
    return {
      'ShapConfig': shapConfig,
      if (enableExplanations != null) 'EnableExplanations': enableExplanations,
      if (inferenceConfig != null) 'InferenceConfig': inferenceConfig,
    };
  }
}

enum ClarifyFeatureType {
  numerical('numerical'),
  categorical('categorical'),
  text('text'),
  ;

  final String value;

  const ClarifyFeatureType(this.value);

  static ClarifyFeatureType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ClarifyFeatureType'));
}

/// The inference configuration parameter for the model container.
class ClarifyInferenceConfig {
  /// A template string used to format a JSON record into an acceptable model
  /// container input. For example, a <code>ContentTemplate</code> string
  /// <code>'{"myfeatures":$features}'</code> will format a list of features
  /// <code>[1,2,3]</code> into the record string
  /// <code>'{"myfeatures":[1,2,3]}'</code>. Required only when the model
  /// container input is in JSON Lines format.
  final String? contentTemplate;

  /// The names of the features. If provided, these are included in the endpoint
  /// response payload to help readability of the <code>InvokeEndpoint</code>
  /// output. See the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response">Response</a>
  /// section under <b>Invoke the endpoint</b> in the Developer Guide for more
  /// information.
  final List<String>? featureHeaders;

  /// A list of data types of the features (optional). Applicable only to NLP
  /// explainability. If provided, <code>FeatureTypes</code> must have at least
  /// one <code>'text'</code> string (for example, <code>['text']</code>). If
  /// <code>FeatureTypes</code> is not provided, the explainer infers the feature
  /// types based on the baseline data. The feature types are included in the
  /// endpoint response payload. For additional information see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response">response</a>
  /// section under <b>Invoke the endpoint</b> in the Developer Guide for more
  /// information.
  final List<ClarifyFeatureType>? featureTypes;

  /// Provides the JMESPath expression to extract the features from a model
  /// container input in JSON Lines format. For example, if
  /// <code>FeaturesAttribute</code> is the JMESPath expression
  /// <code>'myfeatures'</code>, it extracts a list of features
  /// <code>[1,2,3]</code> from request data
  /// <code>'{"myfeatures":[1,2,3]}'</code>.
  final String? featuresAttribute;

  /// A JMESPath expression used to locate the list of label headers in the model
  /// container output.
  ///
  /// <b>Example</b>: If the model container output of a batch request is
  /// <code>'{"labels":["cat","dog","fish"],"probability":[0.6,0.3,0.1]}'</code>,
  /// then set <code>LabelAttribute</code> to <code>'labels'</code> to extract the
  /// list of label headers <code>["cat","dog","fish"]</code>
  final String? labelAttribute;

  /// For multiclass classification problems, the label headers are the names of
  /// the classes. Otherwise, the label header is the name of the predicted label.
  /// These are used to help readability for the output of the
  /// <code>InvokeEndpoint</code> API. See the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response">response</a>
  /// section under <b>Invoke the endpoint</b> in the Developer Guide for more
  /// information. If there are no label headers in the model container output,
  /// provide them manually using this parameter.
  final List<String>? labelHeaders;

  /// A zero-based index used to extract a label header or list of label headers
  /// from model container output in CSV format.
  ///
  /// <b>Example for a multiclass model:</b> If the model container output
  /// consists of label headers followed by probabilities:
  /// <code>'"[\'cat\',\'dog\',\'fish\']","[0.1,0.6,0.3]"'</code>, set
  /// <code>LabelIndex</code> to <code>0</code> to select the label headers
  /// <code>['cat','dog','fish']</code>.
  final int? labelIndex;

  /// The maximum payload size (MB) allowed of a request from the explainer to the
  /// model container. Defaults to <code>6</code> MB.
  final int? maxPayloadInMB;

  /// The maximum number of records in a request that the model container can
  /// process when querying the model container for the predictions of a <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-synthetic">synthetic
  /// dataset</a>. A record is a unit of input data that inference can be made on,
  /// for example, a single line in CSV data. If <code>MaxRecordCount</code> is
  /// <code>1</code>, the model container expects one record per request. A value
  /// of 2 or greater means that the model expects batch requests, which can
  /// reduce overhead and speed up the inferencing process. If this parameter is
  /// not provided, the explainer will tune the record count per request according
  /// to the model container's capacity at runtime.
  final int? maxRecordCount;

  /// A JMESPath expression used to extract the probability (or score) from the
  /// model container output if the model container is in JSON Lines format.
  ///
  /// <b>Example</b>: If the model container output of a single request is
  /// <code>'{"predicted_label":1,"probability":0.6}'</code>, then set
  /// <code>ProbabilityAttribute</code> to <code>'probability'</code>.
  final String? probabilityAttribute;

  /// A zero-based index used to extract a probability value (score) or list from
  /// model container output in CSV format. If this value is not provided, the
  /// entire model container output will be treated as a probability value (score)
  /// or list.
  ///
  /// <b>Example for a single class model:</b> If the model container output
  /// consists of a string-formatted prediction label followed by its probability:
  /// <code>'1,0.6'</code>, set <code>ProbabilityIndex</code> to <code>1</code> to
  /// select the probability value <code>0.6</code>.
  ///
  /// <b>Example for a multiclass model:</b> If the model container output
  /// consists of a string-formatted prediction label followed by its probability:
  /// <code>'"[\'cat\',\'dog\',\'fish\']","[0.1,0.6,0.3]"'</code>, set
  /// <code>ProbabilityIndex</code> to <code>1</code> to select the probability
  /// values <code>[0.1,0.6,0.3]</code>.
  final int? probabilityIndex;

  ClarifyInferenceConfig({
    this.contentTemplate,
    this.featureHeaders,
    this.featureTypes,
    this.featuresAttribute,
    this.labelAttribute,
    this.labelHeaders,
    this.labelIndex,
    this.maxPayloadInMB,
    this.maxRecordCount,
    this.probabilityAttribute,
    this.probabilityIndex,
  });

  factory ClarifyInferenceConfig.fromJson(Map<String, dynamic> json) {
    return ClarifyInferenceConfig(
      contentTemplate: json['ContentTemplate'] as String?,
      featureHeaders: (json['FeatureHeaders'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      featureTypes: (json['FeatureTypes'] as List?)
          ?.nonNulls
          .map((e) => ClarifyFeatureType.fromString((e as String)))
          .toList(),
      featuresAttribute: json['FeaturesAttribute'] as String?,
      labelAttribute: json['LabelAttribute'] as String?,
      labelHeaders: (json['LabelHeaders'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      labelIndex: json['LabelIndex'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
      maxRecordCount: json['MaxRecordCount'] as int?,
      probabilityAttribute: json['ProbabilityAttribute'] as String?,
      probabilityIndex: json['ProbabilityIndex'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final contentTemplate = this.contentTemplate;
    final featureHeaders = this.featureHeaders;
    final featureTypes = this.featureTypes;
    final featuresAttribute = this.featuresAttribute;
    final labelAttribute = this.labelAttribute;
    final labelHeaders = this.labelHeaders;
    final labelIndex = this.labelIndex;
    final maxPayloadInMB = this.maxPayloadInMB;
    final maxRecordCount = this.maxRecordCount;
    final probabilityAttribute = this.probabilityAttribute;
    final probabilityIndex = this.probabilityIndex;
    return {
      if (contentTemplate != null) 'ContentTemplate': contentTemplate,
      if (featureHeaders != null) 'FeatureHeaders': featureHeaders,
      if (featureTypes != null)
        'FeatureTypes': featureTypes.map((e) => e.value).toList(),
      if (featuresAttribute != null) 'FeaturesAttribute': featuresAttribute,
      if (labelAttribute != null) 'LabelAttribute': labelAttribute,
      if (labelHeaders != null) 'LabelHeaders': labelHeaders,
      if (labelIndex != null) 'LabelIndex': labelIndex,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
      if (maxRecordCount != null) 'MaxRecordCount': maxRecordCount,
      if (probabilityAttribute != null)
        'ProbabilityAttribute': probabilityAttribute,
      if (probabilityIndex != null) 'ProbabilityIndex': probabilityIndex,
    };
  }
}

/// The configuration for the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html">SHAP
/// baseline</a> (also called the background or reference dataset) of the Kernal
/// SHAP algorithm.
/// <note>
/// <ul>
/// <li>
/// The number of records in the baseline data determines the size of the
/// synthetic dataset, which has an impact on latency of explainability
/// requests. For more information, see the <b>Synthetic data</b> of <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html">Configure
/// and create an endpoint</a>.
/// </li>
/// <li>
/// <code>ShapBaseline</code> and <code>ShapBaselineUri</code> are mutually
/// exclusive parameters. One or the either is required to configure a SHAP
/// baseline.
/// </li>
/// </ul> </note>
class ClarifyShapBaselineConfig {
  /// The MIME type of the baseline data. Choose from <code>'text/csv'</code> or
  /// <code>'application/jsonlines'</code>. Defaults to <code>'text/csv'</code>.
  final String? mimeType;

  /// The inline SHAP baseline data in string format. <code>ShapBaseline</code>
  /// can have one or multiple records to be used as the baseline dataset. The
  /// format of the SHAP baseline file should be the same format as the training
  /// dataset. For example, if the training dataset is in CSV format and each
  /// record contains four features, and all features are numerical, then the
  /// format of the baseline data should also share these characteristics. For
  /// natural language processing (NLP) of text columns, the baseline value should
  /// be the value used to replace the unit of text specified by the
  /// <code>Granularity</code> of the <code>TextConfig</code> parameter. The size
  /// limit for <code>ShapBasline</code> is 4 KB. Use the
  /// <code>ShapBaselineUri</code> parameter if you want to provide more than 4 KB
  /// of baseline data.
  final String? shapBaseline;

  /// The uniform resource identifier (URI) of the S3 bucket where the SHAP
  /// baseline file is stored. The format of the SHAP baseline file should be the
  /// same format as the format of the training dataset. For example, if the
  /// training dataset is in CSV format, and each record in the training dataset
  /// has four features, and all features are numerical, then the baseline file
  /// should also have this same format. Each record should contain only the
  /// features. If you are using a virtual private cloud (VPC), the
  /// <code>ShapBaselineUri</code> should be accessible to the VPC. For more
  /// information about setting up endpoints with Amazon Virtual Private Cloud,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give
  /// SageMaker access to Resources in your Amazon Virtual Private Cloud</a>.
  final String? shapBaselineUri;

  ClarifyShapBaselineConfig({
    this.mimeType,
    this.shapBaseline,
    this.shapBaselineUri,
  });

  factory ClarifyShapBaselineConfig.fromJson(Map<String, dynamic> json) {
    return ClarifyShapBaselineConfig(
      mimeType: json['MimeType'] as String?,
      shapBaseline: json['ShapBaseline'] as String?,
      shapBaselineUri: json['ShapBaselineUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final mimeType = this.mimeType;
    final shapBaseline = this.shapBaseline;
    final shapBaselineUri = this.shapBaselineUri;
    return {
      if (mimeType != null) 'MimeType': mimeType,
      if (shapBaseline != null) 'ShapBaseline': shapBaseline,
      if (shapBaselineUri != null) 'ShapBaselineUri': shapBaselineUri,
    };
  }
}

/// The configuration for SHAP analysis using SageMaker Clarify Explainer.
class ClarifyShapConfig {
  /// The configuration for the SHAP baseline of the Kernal SHAP algorithm.
  final ClarifyShapBaselineConfig shapBaselineConfig;

  /// The number of samples to be used for analysis by the Kernal SHAP algorithm.
  /// <note>
  /// The number of samples determines the size of the synthetic dataset, which
  /// has an impact on latency of explainability requests. For more information,
  /// see the <b>Synthetic data</b> of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html">Configure
  /// and create an endpoint</a>.
  /// </note>
  final int? numberOfSamples;

  /// The starting value used to initialize the random number generator in the
  /// explainer. Provide a value for this parameter to obtain a deterministic SHAP
  /// result.
  final int? seed;

  /// A parameter that indicates if text features are treated as text and
  /// explanations are provided for individual units of text. Required for natural
  /// language processing (NLP) explainability only.
  final ClarifyTextConfig? textConfig;

  /// A Boolean toggle to indicate if you want to use the logit function (true) or
  /// log-odds units (false) for model predictions. Defaults to false.
  final bool? useLogit;

  ClarifyShapConfig({
    required this.shapBaselineConfig,
    this.numberOfSamples,
    this.seed,
    this.textConfig,
    this.useLogit,
  });

  factory ClarifyShapConfig.fromJson(Map<String, dynamic> json) {
    return ClarifyShapConfig(
      shapBaselineConfig: ClarifyShapBaselineConfig.fromJson(
          json['ShapBaselineConfig'] as Map<String, dynamic>),
      numberOfSamples: json['NumberOfSamples'] as int?,
      seed: json['Seed'] as int?,
      textConfig: json['TextConfig'] != null
          ? ClarifyTextConfig.fromJson(
              json['TextConfig'] as Map<String, dynamic>)
          : null,
      useLogit: json['UseLogit'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final shapBaselineConfig = this.shapBaselineConfig;
    final numberOfSamples = this.numberOfSamples;
    final seed = this.seed;
    final textConfig = this.textConfig;
    final useLogit = this.useLogit;
    return {
      'ShapBaselineConfig': shapBaselineConfig,
      if (numberOfSamples != null) 'NumberOfSamples': numberOfSamples,
      if (seed != null) 'Seed': seed,
      if (textConfig != null) 'TextConfig': textConfig,
      if (useLogit != null) 'UseLogit': useLogit,
    };
  }
}

/// A parameter used to configure the SageMaker Clarify explainer to treat text
/// features as text so that explanations are provided for individual units of
/// text. Required only for natural language processing (NLP) explainability.
class ClarifyTextConfig {
  /// The unit of granularity for the analysis of text features. For example, if
  /// the unit is <code>'token'</code>, then each token (like a word in English)
  /// of the text is treated as a feature. SHAP values are computed for each
  /// unit/feature.
  final ClarifyTextGranularity granularity;

  /// Specifies the language of the text features in <a href="
  /// https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a> or <a
  /// href="https://en.wikipedia.org/wiki/ISO_639-3">ISO 639-3</a> code of a
  /// supported language.
  /// <note>
  /// For a mix of multiple languages, use code <code>'xx'</code>.
  /// </note>
  final ClarifyTextLanguage language;

  ClarifyTextConfig({
    required this.granularity,
    required this.language,
  });

  factory ClarifyTextConfig.fromJson(Map<String, dynamic> json) {
    return ClarifyTextConfig(
      granularity:
          ClarifyTextGranularity.fromString((json['Granularity'] as String)),
      language: ClarifyTextLanguage.fromString((json['Language'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final granularity = this.granularity;
    final language = this.language;
    return {
      'Granularity': granularity.value,
      'Language': language.value,
    };
  }
}

enum ClarifyTextGranularity {
  token('token'),
  sentence('sentence'),
  paragraph('paragraph'),
  ;

  final String value;

  const ClarifyTextGranularity(this.value);

  static ClarifyTextGranularity fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClarifyTextGranularity'));
}

enum ClarifyTextLanguage {
  af('af'),
  sq('sq'),
  ar('ar'),
  hy('hy'),
  eu('eu'),
  bn('bn'),
  bg('bg'),
  ca('ca'),
  zh('zh'),
  hr('hr'),
  cs('cs'),
  da('da'),
  nl('nl'),
  en('en'),
  et('et'),
  fi('fi'),
  fr('fr'),
  de('de'),
  el('el'),
  gu('gu'),
  he('he'),
  hi('hi'),
  hu('hu'),
  $is('is'),
  id('id'),
  ga('ga'),
  it('it'),
  kn('kn'),
  ky('ky'),
  lv('lv'),
  lt('lt'),
  lb('lb'),
  mk('mk'),
  ml('ml'),
  mr('mr'),
  ne('ne'),
  nb('nb'),
  fa('fa'),
  pl('pl'),
  pt('pt'),
  ro('ro'),
  ru('ru'),
  sa('sa'),
  sr('sr'),
  tn('tn'),
  si('si'),
  sk('sk'),
  sl('sl'),
  es('es'),
  sv('sv'),
  tl('tl'),
  ta('ta'),
  tt('tt'),
  te('te'),
  tr('tr'),
  uk('uk'),
  ur('ur'),
  yo('yo'),
  lij('lij'),
  xx('xx'),
  ;

  final String value;

  const ClarifyTextLanguage(this.value);

  static ClarifyTextLanguage fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ClarifyTextLanguage'));
}

/// Details of an instance group in a SageMaker HyperPod cluster.
class ClusterInstanceGroupDetails {
  /// The number of instances that are currently in the instance group of a
  /// SageMaker HyperPod cluster.
  final int? currentCount;

  /// The execution role for the instance group to assume.
  final String? executionRole;

  /// The name of the instance group of a SageMaker HyperPod cluster.
  final String? instanceGroupName;

  /// The instance type of the instance group of a SageMaker HyperPod cluster.
  final ClusterInstanceType? instanceType;

  /// Details of LifeCycle configuration for the instance group.
  final ClusterLifeCycleConfig? lifeCycleConfig;

  /// The number of instances you specified to add to the instance group of a
  /// SageMaker HyperPod cluster.
  final int? targetCount;

  /// The number you specified to <code>TreadsPerCore</code> in
  /// <code>CreateCluster</code> for enabling or disabling multithreading. For
  /// instance types that support multithreading, you can specify 1 for disabling
  /// multithreading and 2 for enabling multithreading. For more information, see
  /// the reference table of <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU
  /// cores and threads per CPU core per instance type</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  final int? threadsPerCore;

  ClusterInstanceGroupDetails({
    this.currentCount,
    this.executionRole,
    this.instanceGroupName,
    this.instanceType,
    this.lifeCycleConfig,
    this.targetCount,
    this.threadsPerCore,
  });

  factory ClusterInstanceGroupDetails.fromJson(Map<String, dynamic> json) {
    return ClusterInstanceGroupDetails(
      currentCount: json['CurrentCount'] as int?,
      executionRole: json['ExecutionRole'] as String?,
      instanceGroupName: json['InstanceGroupName'] as String?,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ClusterInstanceType.fromString),
      lifeCycleConfig: json['LifeCycleConfig'] != null
          ? ClusterLifeCycleConfig.fromJson(
              json['LifeCycleConfig'] as Map<String, dynamic>)
          : null,
      targetCount: json['TargetCount'] as int?,
      threadsPerCore: json['ThreadsPerCore'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final currentCount = this.currentCount;
    final executionRole = this.executionRole;
    final instanceGroupName = this.instanceGroupName;
    final instanceType = this.instanceType;
    final lifeCycleConfig = this.lifeCycleConfig;
    final targetCount = this.targetCount;
    final threadsPerCore = this.threadsPerCore;
    return {
      if (currentCount != null) 'CurrentCount': currentCount,
      if (executionRole != null) 'ExecutionRole': executionRole,
      if (instanceGroupName != null) 'InstanceGroupName': instanceGroupName,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (lifeCycleConfig != null) 'LifeCycleConfig': lifeCycleConfig,
      if (targetCount != null) 'TargetCount': targetCount,
      if (threadsPerCore != null) 'ThreadsPerCore': threadsPerCore,
    };
  }
}

/// The specifications of an instance group that you need to define.
class ClusterInstanceGroupSpecification {
  /// Specifies an IAM execution role to be assumed by the instance group.
  final String executionRole;

  /// Specifies the number of instances to add to the instance group of a
  /// SageMaker HyperPod cluster.
  final int instanceCount;

  /// Specifies the name of the instance group.
  final String instanceGroupName;

  /// Specifies the instance type of the instance group.
  final ClusterInstanceType instanceType;

  /// Specifies the LifeCycle configuration for the instance group.
  final ClusterLifeCycleConfig lifeCycleConfig;

  /// Specifies the value for <b>Threads per core</b>. For instance types that
  /// support multithreading, you can specify <code>1</code> for disabling
  /// multithreading and <code>2</code> for enabling multithreading. For instance
  /// types that doesn't support multithreading, specify <code>1</code>. For more
  /// information, see the reference table of <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU
  /// cores and threads per CPU core per instance type</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  final int? threadsPerCore;

  ClusterInstanceGroupSpecification({
    required this.executionRole,
    required this.instanceCount,
    required this.instanceGroupName,
    required this.instanceType,
    required this.lifeCycleConfig,
    this.threadsPerCore,
  });

  Map<String, dynamic> toJson() {
    final executionRole = this.executionRole;
    final instanceCount = this.instanceCount;
    final instanceGroupName = this.instanceGroupName;
    final instanceType = this.instanceType;
    final lifeCycleConfig = this.lifeCycleConfig;
    final threadsPerCore = this.threadsPerCore;
    return {
      'ExecutionRole': executionRole,
      'InstanceCount': instanceCount,
      'InstanceGroupName': instanceGroupName,
      'InstanceType': instanceType.value,
      'LifeCycleConfig': lifeCycleConfig,
      if (threadsPerCore != null) 'ThreadsPerCore': threadsPerCore,
    };
  }
}

/// Specifies the placement details for the node in the SageMaker HyperPod
/// cluster, including the Availability Zone and the unique identifier (ID) of
/// the Availability Zone.
class ClusterInstancePlacement {
  /// The Availability Zone where the node in the SageMaker HyperPod cluster is
  /// launched.
  final String? availabilityZone;

  /// The unique identifier (ID) of the Availability Zone where the node in the
  /// SageMaker HyperPod cluster is launched.
  final String? availabilityZoneId;

  ClusterInstancePlacement({
    this.availabilityZone,
    this.availabilityZoneId,
  });

  factory ClusterInstancePlacement.fromJson(Map<String, dynamic> json) {
    return ClusterInstancePlacement(
      availabilityZone: json['AvailabilityZone'] as String?,
      availabilityZoneId: json['AvailabilityZoneId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final availabilityZone = this.availabilityZone;
    final availabilityZoneId = this.availabilityZoneId;
    return {
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (availabilityZoneId != null) 'AvailabilityZoneId': availabilityZoneId,
    };
  }
}

enum ClusterInstanceStatus {
  running('Running'),
  failure('Failure'),
  pending('Pending'),
  shuttingDown('ShuttingDown'),
  systemUpdating('SystemUpdating'),
  ;

  final String value;

  const ClusterInstanceStatus(this.value);

  static ClusterInstanceStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ClusterInstanceStatus'));
}

/// Details of an instance in a SageMaker HyperPod cluster.
class ClusterInstanceStatusDetails {
  /// The status of an instance in a SageMaker HyperPod cluster.
  final ClusterInstanceStatus status;

  /// The message from an instance in a SageMaker HyperPod cluster.
  final String? message;

  ClusterInstanceStatusDetails({
    required this.status,
    this.message,
  });

  factory ClusterInstanceStatusDetails.fromJson(Map<String, dynamic> json) {
    return ClusterInstanceStatusDetails(
      status: ClusterInstanceStatus.fromString((json['Status'] as String)),
      message: json['Message'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final message = this.message;
    return {
      'Status': status.value,
      if (message != null) 'Message': message,
    };
  }
}

enum ClusterInstanceType {
  mlP4d_24xlarge('ml.p4d.24xlarge'),
  mlP4de_24xlarge('ml.p4de.24xlarge'),
  mlP5_48xlarge('ml.p5.48xlarge'),
  mlTrn1_32xlarge('ml.trn1.32xlarge'),
  mlTrn1n_32xlarge('ml.trn1n.32xlarge'),
  mlG5Xlarge('ml.g5.xlarge'),
  mlG5_2xlarge('ml.g5.2xlarge'),
  mlG5_4xlarge('ml.g5.4xlarge'),
  mlG5_8xlarge('ml.g5.8xlarge'),
  mlG5_12xlarge('ml.g5.12xlarge'),
  mlG5_16xlarge('ml.g5.16xlarge'),
  mlG5_24xlarge('ml.g5.24xlarge'),
  mlG5_48xlarge('ml.g5.48xlarge'),
  mlC5Large('ml.c5.large'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_12xlarge('ml.c5.12xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlC5_24xlarge('ml.c5.24xlarge'),
  mlC5nLarge('ml.c5n.large'),
  mlC5n_2xlarge('ml.c5n.2xlarge'),
  mlC5n_4xlarge('ml.c5n.4xlarge'),
  mlC5n_9xlarge('ml.c5n.9xlarge'),
  mlC5n_18xlarge('ml.c5n.18xlarge'),
  mlM5Large('ml.m5.large'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_8xlarge('ml.m5.8xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_16xlarge('ml.m5.16xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlT3Medium('ml.t3.medium'),
  mlT3Large('ml.t3.large'),
  mlT3Xlarge('ml.t3.xlarge'),
  mlT3_2xlarge('ml.t3.2xlarge'),
  ;

  final String value;

  const ClusterInstanceType(this.value);

  static ClusterInstanceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ClusterInstanceType'));
}

/// The lifecycle configuration for a SageMaker HyperPod cluster.
class ClusterLifeCycleConfig {
  /// The file name of the entrypoint script of lifecycle scripts under
  /// <code>SourceS3Uri</code>. This entrypoint script runs during cluster
  /// creation.
  final String onCreate;

  /// An Amazon S3 bucket path where your lifecycle scripts are stored.
  /// <important>
  /// Make sure that the S3 bucket path starts with <code>s3://sagemaker-</code>.
  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-prerequisites.html#sagemaker-hyperpod-prerequisites-iam-role-for-hyperpod">IAM
  /// role for SageMaker HyperPod</a> has the managed <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-cluster.html">
  /// <code>AmazonSageMakerClusterInstanceRolePolicy</code> </a> attached, which
  /// allows access to S3 buckets with the specific prefix
  /// <code>sagemaker-</code>.
  /// </important>
  final String sourceS3Uri;

  ClusterLifeCycleConfig({
    required this.onCreate,
    required this.sourceS3Uri,
  });

  factory ClusterLifeCycleConfig.fromJson(Map<String, dynamic> json) {
    return ClusterLifeCycleConfig(
      onCreate: json['OnCreate'] as String,
      sourceS3Uri: json['SourceS3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final onCreate = this.onCreate;
    final sourceS3Uri = this.sourceS3Uri;
    return {
      'OnCreate': onCreate,
      'SourceS3Uri': sourceS3Uri,
    };
  }
}

/// Details of an instance (also called a <i>node</i> interchangeably) in a
/// SageMaker HyperPod cluster.
class ClusterNodeDetails {
  /// The instance group name in which the instance is.
  final String? instanceGroupName;

  /// The ID of the instance.
  final String? instanceId;

  /// The status of the instance.
  final ClusterInstanceStatusDetails? instanceStatus;

  /// The type of the instance.
  final ClusterInstanceType? instanceType;

  /// The time when the instance is launched.
  final DateTime? launchTime;

  /// The LifeCycle configuration applied to the instance.
  final ClusterLifeCycleConfig? lifeCycleConfig;

  /// The placement details of the SageMaker HyperPod cluster node.
  final ClusterInstancePlacement? placement;

  /// The private DNS hostname of the SageMaker HyperPod cluster node.
  final String? privateDnsHostname;

  /// The private primary IP address of the SageMaker HyperPod cluster node.
  final String? privatePrimaryIp;

  /// The number of threads per CPU core you specified under
  /// <code>CreateCluster</code>.
  final int? threadsPerCore;

  ClusterNodeDetails({
    this.instanceGroupName,
    this.instanceId,
    this.instanceStatus,
    this.instanceType,
    this.launchTime,
    this.lifeCycleConfig,
    this.placement,
    this.privateDnsHostname,
    this.privatePrimaryIp,
    this.threadsPerCore,
  });

  factory ClusterNodeDetails.fromJson(Map<String, dynamic> json) {
    return ClusterNodeDetails(
      instanceGroupName: json['InstanceGroupName'] as String?,
      instanceId: json['InstanceId'] as String?,
      instanceStatus: json['InstanceStatus'] != null
          ? ClusterInstanceStatusDetails.fromJson(
              json['InstanceStatus'] as Map<String, dynamic>)
          : null,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ClusterInstanceType.fromString),
      launchTime: timeStampFromJson(json['LaunchTime']),
      lifeCycleConfig: json['LifeCycleConfig'] != null
          ? ClusterLifeCycleConfig.fromJson(
              json['LifeCycleConfig'] as Map<String, dynamic>)
          : null,
      placement: json['Placement'] != null
          ? ClusterInstancePlacement.fromJson(
              json['Placement'] as Map<String, dynamic>)
          : null,
      privateDnsHostname: json['PrivateDnsHostname'] as String?,
      privatePrimaryIp: json['PrivatePrimaryIp'] as String?,
      threadsPerCore: json['ThreadsPerCore'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceGroupName = this.instanceGroupName;
    final instanceId = this.instanceId;
    final instanceStatus = this.instanceStatus;
    final instanceType = this.instanceType;
    final launchTime = this.launchTime;
    final lifeCycleConfig = this.lifeCycleConfig;
    final placement = this.placement;
    final privateDnsHostname = this.privateDnsHostname;
    final privatePrimaryIp = this.privatePrimaryIp;
    final threadsPerCore = this.threadsPerCore;
    return {
      if (instanceGroupName != null) 'InstanceGroupName': instanceGroupName,
      if (instanceId != null) 'InstanceId': instanceId,
      if (instanceStatus != null) 'InstanceStatus': instanceStatus,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (launchTime != null) 'LaunchTime': unixTimestampToJson(launchTime),
      if (lifeCycleConfig != null) 'LifeCycleConfig': lifeCycleConfig,
      if (placement != null) 'Placement': placement,
      if (privateDnsHostname != null) 'PrivateDnsHostname': privateDnsHostname,
      if (privatePrimaryIp != null) 'PrivatePrimaryIp': privatePrimaryIp,
      if (threadsPerCore != null) 'ThreadsPerCore': threadsPerCore,
    };
  }
}

/// Lists a summary of the properties of an instance (also called a <i>node</i>
/// interchangeably) of a SageMaker HyperPod cluster.
class ClusterNodeSummary {
  /// The name of the instance group in which the instance is.
  final String instanceGroupName;

  /// The ID of the instance.
  final String instanceId;

  /// The status of the instance.
  final ClusterInstanceStatusDetails instanceStatus;

  /// The type of the instance.
  final ClusterInstanceType instanceType;

  /// The time when the instance is launched.
  final DateTime launchTime;

  ClusterNodeSummary({
    required this.instanceGroupName,
    required this.instanceId,
    required this.instanceStatus,
    required this.instanceType,
    required this.launchTime,
  });

  factory ClusterNodeSummary.fromJson(Map<String, dynamic> json) {
    return ClusterNodeSummary(
      instanceGroupName: json['InstanceGroupName'] as String,
      instanceId: json['InstanceId'] as String,
      instanceStatus: ClusterInstanceStatusDetails.fromJson(
          json['InstanceStatus'] as Map<String, dynamic>),
      instanceType:
          ClusterInstanceType.fromString((json['InstanceType'] as String)),
      launchTime: nonNullableTimeStampFromJson(json['LaunchTime'] as Object),
    );
  }

  Map<String, dynamic> toJson() {
    final instanceGroupName = this.instanceGroupName;
    final instanceId = this.instanceId;
    final instanceStatus = this.instanceStatus;
    final instanceType = this.instanceType;
    final launchTime = this.launchTime;
    return {
      'InstanceGroupName': instanceGroupName,
      'InstanceId': instanceId,
      'InstanceStatus': instanceStatus,
      'InstanceType': instanceType.value,
      'LaunchTime': unixTimestampToJson(launchTime),
    };
  }
}

enum ClusterSortBy {
  creationTime('CREATION_TIME'),
  name('NAME'),
  ;

  final String value;

  const ClusterSortBy(this.value);

  static ClusterSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ClusterSortBy'));
}

enum ClusterStatus {
  creating('Creating'),
  deleting('Deleting'),
  failed('Failed'),
  inService('InService'),
  rollingBack('RollingBack'),
  systemUpdating('SystemUpdating'),
  updating('Updating'),
  ;

  final String value;

  const ClusterStatus(this.value);

  static ClusterStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ClusterStatus'));
}

/// Lists a summary of the properties of a SageMaker HyperPod cluster.
class ClusterSummary {
  /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.
  final String clusterArn;

  /// The name of the SageMaker HyperPod cluster.
  final String clusterName;

  /// The status of the SageMaker HyperPod cluster.
  final ClusterStatus clusterStatus;

  /// The time when the SageMaker HyperPod cluster is created.
  final DateTime creationTime;

  ClusterSummary({
    required this.clusterArn,
    required this.clusterName,
    required this.clusterStatus,
    required this.creationTime,
  });

  factory ClusterSummary.fromJson(Map<String, dynamic> json) {
    return ClusterSummary(
      clusterArn: json['ClusterArn'] as String,
      clusterName: json['ClusterName'] as String,
      clusterStatus:
          ClusterStatus.fromString((json['ClusterStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterArn = this.clusterArn;
    final clusterName = this.clusterName;
    final clusterStatus = this.clusterStatus;
    final creationTime = this.creationTime;
    return {
      'ClusterArn': clusterArn,
      'ClusterName': clusterName,
      'ClusterStatus': clusterStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
    };
  }
}

/// The configuration for the file system and kernels in a SageMaker image
/// running as a Code Editor app. The <code>FileSystemConfig</code> object is
/// not supported.
class CodeEditorAppImageConfig {
  final ContainerConfig? containerConfig;
  final FileSystemConfig? fileSystemConfig;

  CodeEditorAppImageConfig({
    this.containerConfig,
    this.fileSystemConfig,
  });

  factory CodeEditorAppImageConfig.fromJson(Map<String, dynamic> json) {
    return CodeEditorAppImageConfig(
      containerConfig: json['ContainerConfig'] != null
          ? ContainerConfig.fromJson(
              json['ContainerConfig'] as Map<String, dynamic>)
          : null,
      fileSystemConfig: json['FileSystemConfig'] != null
          ? FileSystemConfig.fromJson(
              json['FileSystemConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final containerConfig = this.containerConfig;
    final fileSystemConfig = this.fileSystemConfig;
    return {
      if (containerConfig != null) 'ContainerConfig': containerConfig,
      if (fileSystemConfig != null) 'FileSystemConfig': fileSystemConfig,
    };
  }
}

/// The Code Editor application settings.
///
/// For more information about Code Editor, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/code-editor.html">Get
/// started with Code Editor in Amazon SageMaker</a>.
class CodeEditorAppSettings {
  /// A list of custom SageMaker images that are configured to run as a Code
  /// Editor app.
  final List<CustomImage>? customImages;
  final ResourceSpec? defaultResourceSpec;

  /// The Amazon Resource Name (ARN) of the Code Editor application lifecycle
  /// configuration.
  final List<String>? lifecycleConfigArns;

  CodeEditorAppSettings({
    this.customImages,
    this.defaultResourceSpec,
    this.lifecycleConfigArns,
  });

  factory CodeEditorAppSettings.fromJson(Map<String, dynamic> json) {
    return CodeEditorAppSettings(
      customImages: (json['CustomImages'] as List?)
          ?.nonNulls
          .map((e) => CustomImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
      lifecycleConfigArns: (json['LifecycleConfigArns'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final customImages = this.customImages;
    final defaultResourceSpec = this.defaultResourceSpec;
    final lifecycleConfigArns = this.lifecycleConfigArns;
    return {
      if (customImages != null) 'CustomImages': customImages,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
      if (lifecycleConfigArns != null)
        'LifecycleConfigArns': lifecycleConfigArns,
    };
  }
}

/// A Git repository that SageMaker automatically displays to users for cloning
/// in the JupyterServer application.
class CodeRepository {
  /// The URL of the Git repository.
  final String repositoryUrl;

  CodeRepository({
    required this.repositoryUrl,
  });

  factory CodeRepository.fromJson(Map<String, dynamic> json) {
    return CodeRepository(
      repositoryUrl: json['RepositoryUrl'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryUrl = this.repositoryUrl;
    return {
      'RepositoryUrl': repositoryUrl,
    };
  }
}

enum CodeRepositorySortBy {
  name('Name'),
  creationTime('CreationTime'),
  lastModifiedTime('LastModifiedTime'),
  ;

  final String value;

  const CodeRepositorySortBy(this.value);

  static CodeRepositorySortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CodeRepositorySortBy'));
}

enum CodeRepositorySortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const CodeRepositorySortOrder(this.value);

  static CodeRepositorySortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CodeRepositorySortOrder'));
}

/// Specifies summary information about a Git repository.
class CodeRepositorySummary {
  /// The Amazon Resource Name (ARN) of the Git repository.
  final String codeRepositoryArn;

  /// The name of the Git repository.
  final String codeRepositoryName;

  /// The date and time that the Git repository was created.
  final DateTime creationTime;

  /// The date and time that the Git repository was last modified.
  final DateTime lastModifiedTime;

  /// Configuration details for the Git repository, including the URL where it is
  /// located and the ARN of the Amazon Web Services Secrets Manager secret that
  /// contains the credentials used to access the repository.
  final GitConfig? gitConfig;

  CodeRepositorySummary({
    required this.codeRepositoryArn,
    required this.codeRepositoryName,
    required this.creationTime,
    required this.lastModifiedTime,
    this.gitConfig,
  });

  factory CodeRepositorySummary.fromJson(Map<String, dynamic> json) {
    return CodeRepositorySummary(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
      codeRepositoryName: json['CodeRepositoryName'] as String,
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      gitConfig: json['GitConfig'] != null
          ? GitConfig.fromJson(json['GitConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    final codeRepositoryName = this.codeRepositoryName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final gitConfig = this.gitConfig;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
      'CodeRepositoryName': codeRepositoryName,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (gitConfig != null) 'GitConfig': gitConfig,
    };
  }
}

/// Use this parameter to configure your Amazon Cognito workforce. A single
/// Cognito workforce is created using and corresponds to a single <a
/// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
/// Amazon Cognito user pool</a>.
class CognitoConfig {
  /// The client ID for your Amazon Cognito user pool.
  final String clientId;

  /// A <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
  /// user pool</a> is a user directory in Amazon Cognito. With a user pool, your
  /// users can sign in to your web or mobile app through Amazon Cognito. Your
  /// users can also sign in through social identity providers like Google,
  /// Facebook, Amazon, or Apple, and through SAML identity providers.
  final String userPool;

  CognitoConfig({
    required this.clientId,
    required this.userPool,
  });

  factory CognitoConfig.fromJson(Map<String, dynamic> json) {
    return CognitoConfig(
      clientId: json['ClientId'] as String,
      userPool: json['UserPool'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clientId = this.clientId;
    final userPool = this.userPool;
    return {
      'ClientId': clientId,
      'UserPool': userPool,
    };
  }
}

/// Identifies a Amazon Cognito user group. A user group can be used in on or
/// more work teams.
class CognitoMemberDefinition {
  /// An identifier for an application client. You must create the app client ID
  /// using Amazon Cognito.
  final String clientId;

  /// An identifier for a user group.
  final String userGroup;

  /// An identifier for a user pool. The user pool must be in the same region as
  /// the service that you are calling.
  final String userPool;

  CognitoMemberDefinition({
    required this.clientId,
    required this.userGroup,
    required this.userPool,
  });

  factory CognitoMemberDefinition.fromJson(Map<String, dynamic> json) {
    return CognitoMemberDefinition(
      clientId: json['ClientId'] as String,
      userGroup: json['UserGroup'] as String,
      userPool: json['UserPool'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clientId = this.clientId;
    final userGroup = this.userGroup;
    final userPool = this.userPool;
    return {
      'ClientId': clientId,
      'UserGroup': userGroup,
      'UserPool': userPool,
    };
  }
}

/// Configuration for your collection.
class CollectionConfig {
  /// Configuration for your vector collection type.
  ///
  /// <ul>
  /// <li>
  /// <code>Dimension</code>: The number of elements in your vector.
  /// </li>
  /// </ul>
  final VectorConfig? vectorConfig;

  CollectionConfig({
    this.vectorConfig,
  });

  factory CollectionConfig.fromJson(Map<String, dynamic> json) {
    return CollectionConfig(
      vectorConfig: json['VectorConfig'] != null
          ? VectorConfig.fromJson(json['VectorConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final vectorConfig = this.vectorConfig;
    return {
      if (vectorConfig != null) 'VectorConfig': vectorConfig,
    };
  }
}

/// Configuration information for the Amazon SageMaker Debugger output tensor
/// collections.
class CollectionConfiguration {
  /// The name of the tensor collection. The name must be unique relative to other
  /// rule configuration names.
  final String? collectionName;

  /// Parameter values for the tensor collection. The allowed parameters are
  /// <code>"name"</code>, <code>"include_regex"</code>,
  /// <code>"reduction_config"</code>, <code>"save_config"</code>,
  /// <code>"tensor_names"</code>, and <code>"save_histogram"</code>.
  final Map<String, String>? collectionParameters;

  CollectionConfiguration({
    this.collectionName,
    this.collectionParameters,
  });

  factory CollectionConfiguration.fromJson(Map<String, dynamic> json) {
    return CollectionConfiguration(
      collectionName: json['CollectionName'] as String?,
      collectionParameters:
          (json['CollectionParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final collectionName = this.collectionName;
    final collectionParameters = this.collectionParameters;
    return {
      if (collectionName != null) 'CollectionName': collectionName,
      if (collectionParameters != null)
        'CollectionParameters': collectionParameters,
    };
  }
}

enum CollectionType {
  list('List'),
  set('Set'),
  vector('Vector'),
  ;

  final String value;

  const CollectionType(this.value);

  static CollectionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CollectionType'));
}

enum CompilationJobStatus {
  inprogress('INPROGRESS'),
  completed('COMPLETED'),
  failed('FAILED'),
  starting('STARTING'),
  stopping('STOPPING'),
  stopped('STOPPED'),
  ;

  final String value;

  const CompilationJobStatus(this.value);

  static CompilationJobStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CompilationJobStatus'));
}

/// A summary of a model compilation job.
class CompilationJobSummary {
  /// The Amazon Resource Name (ARN) of the model compilation job.
  final String compilationJobArn;

  /// The name of the model compilation job that you want a summary for.
  final String compilationJobName;

  /// The status of the model compilation job.
  final CompilationJobStatus compilationJobStatus;

  /// The time when the model compilation job was created.
  final DateTime creationTime;

  /// The time when the model compilation job completed.
  final DateTime? compilationEndTime;

  /// The time when the model compilation job started.
  final DateTime? compilationStartTime;

  /// The type of device that the model will run on after the compilation job has
  /// completed.
  final TargetDevice? compilationTargetDevice;

  /// The type of accelerator that the model will run on after the compilation job
  /// has completed.
  final TargetPlatformAccelerator? compilationTargetPlatformAccelerator;

  /// The type of architecture that the model will run on after the compilation
  /// job has completed.
  final TargetPlatformArch? compilationTargetPlatformArch;

  /// The type of OS that the model will run on after the compilation job has
  /// completed.
  final TargetPlatformOs? compilationTargetPlatformOs;

  /// The time when the model compilation job was last modified.
  final DateTime? lastModifiedTime;

  CompilationJobSummary({
    required this.compilationJobArn,
    required this.compilationJobName,
    required this.compilationJobStatus,
    required this.creationTime,
    this.compilationEndTime,
    this.compilationStartTime,
    this.compilationTargetDevice,
    this.compilationTargetPlatformAccelerator,
    this.compilationTargetPlatformArch,
    this.compilationTargetPlatformOs,
    this.lastModifiedTime,
  });

  factory CompilationJobSummary.fromJson(Map<String, dynamic> json) {
    return CompilationJobSummary(
      compilationJobArn: json['CompilationJobArn'] as String,
      compilationJobName: json['CompilationJobName'] as String,
      compilationJobStatus: CompilationJobStatus.fromString(
          (json['CompilationJobStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      compilationEndTime: timeStampFromJson(json['CompilationEndTime']),
      compilationStartTime: timeStampFromJson(json['CompilationStartTime']),
      compilationTargetDevice: (json['CompilationTargetDevice'] as String?)
          ?.let(TargetDevice.fromString),
      compilationTargetPlatformAccelerator:
          (json['CompilationTargetPlatformAccelerator'] as String?)
              ?.let(TargetPlatformAccelerator.fromString),
      compilationTargetPlatformArch:
          (json['CompilationTargetPlatformArch'] as String?)
              ?.let(TargetPlatformArch.fromString),
      compilationTargetPlatformOs:
          (json['CompilationTargetPlatformOs'] as String?)
              ?.let(TargetPlatformOs.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobArn = this.compilationJobArn;
    final compilationJobName = this.compilationJobName;
    final compilationJobStatus = this.compilationJobStatus;
    final creationTime = this.creationTime;
    final compilationEndTime = this.compilationEndTime;
    final compilationStartTime = this.compilationStartTime;
    final compilationTargetDevice = this.compilationTargetDevice;
    final compilationTargetPlatformAccelerator =
        this.compilationTargetPlatformAccelerator;
    final compilationTargetPlatformArch = this.compilationTargetPlatformArch;
    final compilationTargetPlatformOs = this.compilationTargetPlatformOs;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CompilationJobArn': compilationJobArn,
      'CompilationJobName': compilationJobName,
      'CompilationJobStatus': compilationJobStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      if (compilationEndTime != null)
        'CompilationEndTime': unixTimestampToJson(compilationEndTime),
      if (compilationStartTime != null)
        'CompilationStartTime': unixTimestampToJson(compilationStartTime),
      if (compilationTargetDevice != null)
        'CompilationTargetDevice': compilationTargetDevice.value,
      if (compilationTargetPlatformAccelerator != null)
        'CompilationTargetPlatformAccelerator':
            compilationTargetPlatformAccelerator.value,
      if (compilationTargetPlatformArch != null)
        'CompilationTargetPlatformArch': compilationTargetPlatformArch.value,
      if (compilationTargetPlatformOs != null)
        'CompilationTargetPlatformOs': compilationTargetPlatformOs.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

enum CompleteOnConvergence {
  disabled('Disabled'),
  enabled('Enabled'),
  ;

  final String value;

  const CompleteOnConvergence(this.value);

  static CompleteOnConvergence fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum CompleteOnConvergence'));
}

enum CompressionType {
  none('None'),
  gzip('Gzip'),
  ;

  final String value;

  const CompressionType(this.value);

  static CompressionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum CompressionType'));
}

enum ConditionOutcome {
  $true('True'),
  $false('False'),
  ;

  final String value;

  const ConditionOutcome(this.value);

  static ConditionOutcome fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ConditionOutcome'));
}

/// Metadata for a Condition step.
class ConditionStepMetadata {
  /// The outcome of the Condition step evaluation.
  final ConditionOutcome? outcome;

  ConditionStepMetadata({
    this.outcome,
  });

  factory ConditionStepMetadata.fromJson(Map<String, dynamic> json) {
    return ConditionStepMetadata(
      outcome: (json['Outcome'] as String?)?.let(ConditionOutcome.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final outcome = this.outcome;
    return {
      if (outcome != null) 'Outcome': outcome.value,
    };
  }
}

/// The configuration used to run the application image container.
class ContainerConfig {
  /// The arguments for the container when you're running the application.
  final List<String>? containerArguments;

  /// The entrypoint used to run the application in the container.
  final List<String>? containerEntrypoint;

  /// The environment variables to set in the container
  final Map<String, String>? containerEnvironmentVariables;

  ContainerConfig({
    this.containerArguments,
    this.containerEntrypoint,
    this.containerEnvironmentVariables,
  });

  factory ContainerConfig.fromJson(Map<String, dynamic> json) {
    return ContainerConfig(
      containerArguments: (json['ContainerArguments'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEnvironmentVariables:
          (json['ContainerEnvironmentVariables'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final containerEnvironmentVariables = this.containerEnvironmentVariables;
    return {
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (containerEnvironmentVariables != null)
        'ContainerEnvironmentVariables': containerEnvironmentVariables,
    };
  }
}

/// Describes the container, as part of model definition.
class ContainerDefinition {
  /// This parameter is ignored for models that contain only a
  /// <code>PrimaryContainer</code>.
  ///
  /// When a <code>ContainerDefinition</code> is part of an inference pipeline,
  /// the value of the parameter uniquely identifies the container for the
  /// purposes of logging and metrics. For information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html">Use
  /// Logs and Metrics to Monitor an Inference Pipeline</a>. If you don't specify
  /// a value for this parameter for a <code>ContainerDefinition</code> that is
  /// part of an inference pipeline, a unique name is automatically assigned based
  /// on the position of the <code>ContainerDefinition</code> in the pipeline. If
  /// you specify a value for the <code>ContainerHostName</code> for any
  /// <code>ContainerDefinition</code> that is part of an inference pipeline, you
  /// must specify a value for the <code>ContainerHostName</code> parameter of
  /// every <code>ContainerDefinition</code> in that pipeline.
  final String? containerHostname;

  /// The environment variables to set in the Docker container.
  ///
  /// The maximum length of each key and value in the <code>Environment</code> map
  /// is 1024 bytes. The maximum length of all keys and values in the map,
  /// combined, is 32 KB. If you pass multiple containers to a
  /// <code>CreateModel</code> request, then the maximum length of all of their
  /// maps, combined, is also 32 KB.
  final Map<String, String>? environment;

  /// The path where inference code is stored. This can be either in Amazon EC2
  /// Container Registry or in a Docker registry that is accessible from the same
  /// VPC that you configure for your endpoint. If you are using your own custom
  /// algorithm instead of an algorithm provided by SageMaker, the inference code
  /// must meet SageMaker requirements. SageMaker supports both
  /// <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  /// <note>
  /// The model artifacts in an Amazon S3 bucket and the Docker image for
  /// inference container in Amazon EC2 Container Registry must be in the same
  /// region as the model or endpoint you are creating.
  /// </note>
  final String? image;

  /// Specifies whether the model container is in Amazon ECR or a private Docker
  /// registry accessible from your Amazon Virtual Private Cloud (VPC). For
  /// information about storing containers in a private Docker registry, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html">Use
  /// a Private Docker Registry for Real-Time Inference Containers</a>.
  /// <note>
  /// The model artifacts in an Amazon S3 bucket and the Docker image for
  /// inference container in Amazon EC2 Container Registry must be in the same
  /// region as the model or endpoint you are creating.
  /// </note>
  final ImageConfig? imageConfig;

  /// The inference specification name in the model package version.
  final String? inferenceSpecificationName;

  /// Whether the container hosts a single model or multiple models.
  final ContainerMode? mode;

  /// Specifies the location of ML model data to deploy.
  /// <note>
  /// Currently you cannot use <code>ModelDataSource</code> in conjunction with
  /// SageMaker batch transform, SageMaker serverless endpoints, SageMaker
  /// multi-model endpoints, and SageMaker Marketplace.
  /// </note>
  final ModelDataSource? modelDataSource;

  /// The S3 path where the model artifacts, which result from model training, are
  /// stored. This path must point to a single gzip compressed tar archive
  /// (.tar.gz suffix). The S3 path is required for SageMaker built-in algorithms,
  /// but not if you use your own algorithms. For more information on built-in
  /// algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Common
  /// Parameters</a>.
  /// <note>
  /// The model artifacts must be in an S3 bucket that is in the same region as
  /// the model or endpoint you are creating.
  /// </note>
  /// If you provide a value for this parameter, SageMaker uses Amazon Web
  /// Services Security Token Service to download model artifacts from the S3 path
  /// you provide. Amazon Web Services STS is activated in your Amazon Web
  /// Services account by default. If you previously deactivated Amazon Web
  /// Services STS for a region, you need to reactivate Amazon Web Services STS
  /// for that region. For more information, see <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating
  /// and Deactivating Amazon Web Services STS in an Amazon Web Services
  /// Region</a> in the <i>Amazon Web Services Identity and Access Management User
  /// Guide</i>.
  /// <important>
  /// If you use a built-in algorithm to create a model, SageMaker requires that
  /// you provide a S3 path to the model artifacts in <code>ModelDataUrl</code>.
  /// </important>
  final String? modelDataUrl;

  /// The name or Amazon Resource Name (ARN) of the model package to use to create
  /// the model.
  final String? modelPackageName;

  /// Specifies additional configuration for multi-model endpoints.
  final MultiModelConfig? multiModelConfig;

  ContainerDefinition({
    this.containerHostname,
    this.environment,
    this.image,
    this.imageConfig,
    this.inferenceSpecificationName,
    this.mode,
    this.modelDataSource,
    this.modelDataUrl,
    this.modelPackageName,
    this.multiModelConfig,
  });

  factory ContainerDefinition.fromJson(Map<String, dynamic> json) {
    return ContainerDefinition(
      containerHostname: json['ContainerHostname'] as String?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      image: json['Image'] as String?,
      imageConfig: json['ImageConfig'] != null
          ? ImageConfig.fromJson(json['ImageConfig'] as Map<String, dynamic>)
          : null,
      inferenceSpecificationName: json['InferenceSpecificationName'] as String?,
      mode: (json['Mode'] as String?)?.let(ContainerMode.fromString),
      modelDataSource: json['ModelDataSource'] != null
          ? ModelDataSource.fromJson(
              json['ModelDataSource'] as Map<String, dynamic>)
          : null,
      modelDataUrl: json['ModelDataUrl'] as String?,
      modelPackageName: json['ModelPackageName'] as String?,
      multiModelConfig: json['MultiModelConfig'] != null
          ? MultiModelConfig.fromJson(
              json['MultiModelConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final containerHostname = this.containerHostname;
    final environment = this.environment;
    final image = this.image;
    final imageConfig = this.imageConfig;
    final inferenceSpecificationName = this.inferenceSpecificationName;
    final mode = this.mode;
    final modelDataSource = this.modelDataSource;
    final modelDataUrl = this.modelDataUrl;
    final modelPackageName = this.modelPackageName;
    final multiModelConfig = this.multiModelConfig;
    return {
      if (containerHostname != null) 'ContainerHostname': containerHostname,
      if (environment != null) 'Environment': environment,
      if (image != null) 'Image': image,
      if (imageConfig != null) 'ImageConfig': imageConfig,
      if (inferenceSpecificationName != null)
        'InferenceSpecificationName': inferenceSpecificationName,
      if (mode != null) 'Mode': mode.value,
      if (modelDataSource != null) 'ModelDataSource': modelDataSource,
      if (modelDataUrl != null) 'ModelDataUrl': modelDataUrl,
      if (modelPackageName != null) 'ModelPackageName': modelPackageName,
      if (multiModelConfig != null) 'MultiModelConfig': multiModelConfig,
    };
  }
}

enum ContainerMode {
  singleModel('SingleModel'),
  multiModel('MultiModel'),
  ;

  final String value;

  const ContainerMode(this.value);

  static ContainerMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ContainerMode'));
}

enum ContentClassifier {
  freeOfPersonallyIdentifiableInformation(
      'FreeOfPersonallyIdentifiableInformation'),
  freeOfAdultContent('FreeOfAdultContent'),
  ;

  final String value;

  const ContentClassifier(this.value);

  static ContentClassifier fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ContentClassifier'));
}

/// A structure describing the source of a context.
class ContextSource {
  /// The URI of the source.
  final String sourceUri;

  /// The ID of the source.
  final String? sourceId;

  /// The type of the source.
  final String? sourceType;

  ContextSource({
    required this.sourceUri,
    this.sourceId,
    this.sourceType,
  });

  factory ContextSource.fromJson(Map<String, dynamic> json) {
    return ContextSource(
      sourceUri: json['SourceUri'] as String,
      sourceId: json['SourceId'] as String?,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceUri = this.sourceUri;
    final sourceId = this.sourceId;
    final sourceType = this.sourceType;
    return {
      'SourceUri': sourceUri,
      if (sourceId != null) 'SourceId': sourceId,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// Lists a summary of the properties of a context. A context provides a logical
/// grouping of other entities.
class ContextSummary {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  /// The name of the context.
  final String? contextName;

  /// The type of the context.
  final String? contextType;

  /// When the context was created.
  final DateTime? creationTime;

  /// When the context was last modified.
  final DateTime? lastModifiedTime;

  /// The source of the context.
  final ContextSource? source;

  ContextSummary({
    this.contextArn,
    this.contextName,
    this.contextType,
    this.creationTime,
    this.lastModifiedTime,
    this.source,
  });

  factory ContextSummary.fromJson(Map<String, dynamic> json) {
    return ContextSummary(
      contextArn: json['ContextArn'] as String?,
      contextName: json['ContextName'] as String?,
      contextType: json['ContextType'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ContextSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    final contextName = this.contextName;
    final contextType = this.contextType;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
      if (contextName != null) 'ContextName': contextName,
      if (contextType != null) 'ContextType': contextType,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
    };
  }
}

/// A list of continuous hyperparameters to tune.
class ContinuousParameterRange {
  /// The maximum value for the hyperparameter. The tuning job uses floating-point
  /// values between <code>MinValue</code> value and this value for tuning.
  final String maxValue;

  /// The minimum value for the hyperparameter. The tuning job uses floating-point
  /// values between this value and <code>MaxValue</code>for tuning.
  final String minValue;

  /// The name of the continuous hyperparameter to tune.
  final String name;

  /// The scale that hyperparameter tuning uses to search the hyperparameter
  /// range. For information about choosing a hyperparameter scale, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter
  /// Scaling</a>. One of the following values:
  /// <dl> <dt>Auto</dt> <dd>
  /// SageMaker hyperparameter tuning chooses the best scale for the
  /// hyperparameter.
  /// </dd> <dt>Linear</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a linear scale.
  /// </dd> <dt>Logarithmic</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a logarithmic scale.
  ///
  /// Logarithmic scaling works only for ranges that have only values greater than
  /// 0.
  /// </dd> <dt>ReverseLogarithmic</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a reverse logarithmic scale.
  ///
  /// Reverse logarithmic scaling works only for ranges that are entirely within
  /// the range 0&lt;=x&lt;1.0.
  /// </dd> </dl>
  final HyperParameterScalingType? scalingType;

  ContinuousParameterRange({
    required this.maxValue,
    required this.minValue,
    required this.name,
    this.scalingType,
  });

  factory ContinuousParameterRange.fromJson(Map<String, dynamic> json) {
    return ContinuousParameterRange(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
      name: json['Name'] as String,
      scalingType: (json['ScalingType'] as String?)
          ?.let(HyperParameterScalingType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    final name = this.name;
    final scalingType = this.scalingType;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
      'Name': name,
      if (scalingType != null) 'ScalingType': scalingType.value,
    };
  }
}

/// Defines the possible values for a continuous hyperparameter.
class ContinuousParameterRangeSpecification {
  /// The maximum floating-point value allowed.
  final String maxValue;

  /// The minimum floating-point value allowed.
  final String minValue;

  ContinuousParameterRangeSpecification({
    required this.maxValue,
    required this.minValue,
  });

  factory ContinuousParameterRangeSpecification.fromJson(
      Map<String, dynamic> json) {
    return ContinuousParameterRangeSpecification(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
    };
  }
}

/// A flag to indicating that automatic model tuning (AMT) has detected model
/// convergence, defined as a lack of significant improvement (1% or less)
/// against an objective metric.
class ConvergenceDetected {
  /// A flag to stop a tuning job once AMT has detected that the job has
  /// converged.
  final CompleteOnConvergence? completeOnConvergence;

  ConvergenceDetected({
    this.completeOnConvergence,
  });

  factory ConvergenceDetected.fromJson(Map<String, dynamic> json) {
    return ConvergenceDetected(
      completeOnConvergence: (json['CompleteOnConvergence'] as String?)
          ?.let(CompleteOnConvergence.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final completeOnConvergence = this.completeOnConvergence;
    return {
      if (completeOnConvergence != null)
        'CompleteOnConvergence': completeOnConvergence.value,
    };
  }
}

class CreateActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  CreateActionResponse({
    this.actionArn,
  });

  factory CreateActionResponse.fromJson(Map<String, dynamic> json) {
    return CreateActionResponse(
      actionArn: json['ActionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
    };
  }
}

class CreateAlgorithmOutput {
  /// The Amazon Resource Name (ARN) of the new algorithm.
  final String algorithmArn;

  CreateAlgorithmOutput({
    required this.algorithmArn,
  });

  factory CreateAlgorithmOutput.fromJson(Map<String, dynamic> json) {
    return CreateAlgorithmOutput(
      algorithmArn: json['AlgorithmArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmArn = this.algorithmArn;
    return {
      'AlgorithmArn': algorithmArn,
    };
  }
}

class CreateAppImageConfigResponse {
  /// The ARN of the AppImageConfig.
  final String? appImageConfigArn;

  CreateAppImageConfigResponse({
    this.appImageConfigArn,
  });

  factory CreateAppImageConfigResponse.fromJson(Map<String, dynamic> json) {
    return CreateAppImageConfigResponse(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
    };
  }
}

class CreateAppResponse {
  /// The Amazon Resource Name (ARN) of the app.
  final String? appArn;

  CreateAppResponse({
    this.appArn,
  });

  factory CreateAppResponse.fromJson(Map<String, dynamic> json) {
    return CreateAppResponse(
      appArn: json['AppArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appArn = this.appArn;
    return {
      if (appArn != null) 'AppArn': appArn,
    };
  }
}

class CreateArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  CreateArtifactResponse({
    this.artifactArn,
  });

  factory CreateArtifactResponse.fromJson(Map<String, dynamic> json) {
    return CreateArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
    };
  }
}

class CreateAutoMLJobResponse {
  /// The unique ARN assigned to the AutoML job when it is created.
  final String autoMLJobArn;

  CreateAutoMLJobResponse({
    required this.autoMLJobArn,
  });

  factory CreateAutoMLJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateAutoMLJobResponse(
      autoMLJobArn: json['AutoMLJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    return {
      'AutoMLJobArn': autoMLJobArn,
    };
  }
}

class CreateAutoMLJobV2Response {
  /// The unique ARN assigned to the AutoMLJob when it is created.
  final String autoMLJobArn;

  CreateAutoMLJobV2Response({
    required this.autoMLJobArn,
  });

  factory CreateAutoMLJobV2Response.fromJson(Map<String, dynamic> json) {
    return CreateAutoMLJobV2Response(
      autoMLJobArn: json['AutoMLJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    return {
      'AutoMLJobArn': autoMLJobArn,
    };
  }
}

class CreateClusterResponse {
  /// The Amazon Resource Name (ARN) of the cluster.
  final String clusterArn;

  CreateClusterResponse({
    required this.clusterArn,
  });

  factory CreateClusterResponse.fromJson(Map<String, dynamic> json) {
    return CreateClusterResponse(
      clusterArn: json['ClusterArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterArn = this.clusterArn;
    return {
      'ClusterArn': clusterArn,
    };
  }
}

class CreateCodeRepositoryOutput {
  /// The Amazon Resource Name (ARN) of the new repository.
  final String codeRepositoryArn;

  CreateCodeRepositoryOutput({
    required this.codeRepositoryArn,
  });

  factory CreateCodeRepositoryOutput.fromJson(Map<String, dynamic> json) {
    return CreateCodeRepositoryOutput(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
    };
  }
}

class CreateCompilationJobResponse {
  /// If the action is successful, the service sends back an HTTP 200 response.
  /// Amazon SageMaker returns the following data in JSON format:
  ///
  /// <ul>
  /// <li>
  /// <code>CompilationJobArn</code>: The Amazon Resource Name (ARN) of the
  /// compiled job.
  /// </li>
  /// </ul>
  final String compilationJobArn;

  CreateCompilationJobResponse({
    required this.compilationJobArn,
  });

  factory CreateCompilationJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateCompilationJobResponse(
      compilationJobArn: json['CompilationJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobArn = this.compilationJobArn;
    return {
      'CompilationJobArn': compilationJobArn,
    };
  }
}

class CreateContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  CreateContextResponse({
    this.contextArn,
  });

  factory CreateContextResponse.fromJson(Map<String, dynamic> json) {
    return CreateContextResponse(
      contextArn: json['ContextArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
    };
  }
}

class CreateDataQualityJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the job definition.
  final String jobDefinitionArn;

  CreateDataQualityJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateDataQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateDataQualityJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateDomainResponse {
  /// The Amazon Resource Name (ARN) of the created domain.
  final String? domainArn;

  /// The URL to the created domain.
  final String? url;

  CreateDomainResponse({
    this.domainArn,
    this.url,
  });

  factory CreateDomainResponse.fromJson(Map<String, dynamic> json) {
    return CreateDomainResponse(
      domainArn: json['DomainArn'] as String?,
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainArn = this.domainArn;
    final url = this.url;
    return {
      if (domainArn != null) 'DomainArn': domainArn,
      if (url != null) 'Url': url,
    };
  }
}

class CreateEdgeDeploymentPlanResponse {
  /// The ARN of the edge deployment plan.
  final String edgeDeploymentPlanArn;

  CreateEdgeDeploymentPlanResponse({
    required this.edgeDeploymentPlanArn,
  });

  factory CreateEdgeDeploymentPlanResponse.fromJson(Map<String, dynamic> json) {
    return CreateEdgeDeploymentPlanResponse(
      edgeDeploymentPlanArn: json['EdgeDeploymentPlanArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final edgeDeploymentPlanArn = this.edgeDeploymentPlanArn;
    return {
      'EdgeDeploymentPlanArn': edgeDeploymentPlanArn,
    };
  }
}

class CreateEndpointConfigOutput {
  /// The Amazon Resource Name (ARN) of the endpoint configuration.
  final String endpointConfigArn;

  CreateEndpointConfigOutput({
    required this.endpointConfigArn,
  });

  factory CreateEndpointConfigOutput.fromJson(Map<String, dynamic> json) {
    return CreateEndpointConfigOutput(
      endpointConfigArn: json['EndpointConfigArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointConfigArn = this.endpointConfigArn;
    return {
      'EndpointConfigArn': endpointConfigArn,
    };
  }
}

class CreateEndpointOutput {
  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  CreateEndpointOutput({
    required this.endpointArn,
  });

  factory CreateEndpointOutput.fromJson(Map<String, dynamic> json) {
    return CreateEndpointOutput(
      endpointArn: json['EndpointArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointArn = this.endpointArn;
    return {
      'EndpointArn': endpointArn,
    };
  }
}

class CreateExperimentResponse {
  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  CreateExperimentResponse({
    this.experimentArn,
  });

  factory CreateExperimentResponse.fromJson(Map<String, dynamic> json) {
    return CreateExperimentResponse(
      experimentArn: json['ExperimentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentArn = this.experimentArn;
    return {
      if (experimentArn != null) 'ExperimentArn': experimentArn,
    };
  }
}

class CreateFeatureGroupResponse {
  /// The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>. This is a
  /// unique identifier for the feature group.
  final String featureGroupArn;

  CreateFeatureGroupResponse({
    required this.featureGroupArn,
  });

  factory CreateFeatureGroupResponse.fromJson(Map<String, dynamic> json) {
    return CreateFeatureGroupResponse(
      featureGroupArn: json['FeatureGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupArn = this.featureGroupArn;
    return {
      'FeatureGroupArn': featureGroupArn,
    };
  }
}

class CreateFlowDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the flow definition you create.
  final String flowDefinitionArn;

  CreateFlowDefinitionResponse({
    required this.flowDefinitionArn,
  });

  factory CreateFlowDefinitionResponse.fromJson(Map<String, dynamic> json) {
    return CreateFlowDefinitionResponse(
      flowDefinitionArn: json['FlowDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final flowDefinitionArn = this.flowDefinitionArn;
    return {
      'FlowDefinitionArn': flowDefinitionArn,
    };
  }
}

class CreateHubResponse {
  /// The Amazon Resource Name (ARN) of the hub.
  final String hubArn;

  CreateHubResponse({
    required this.hubArn,
  });

  factory CreateHubResponse.fromJson(Map<String, dynamic> json) {
    return CreateHubResponse(
      hubArn: json['HubArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final hubArn = this.hubArn;
    return {
      'HubArn': hubArn,
    };
  }
}

class CreateHumanTaskUiResponse {
  /// The Amazon Resource Name (ARN) of the human review workflow user interface
  /// you create.
  final String humanTaskUiArn;

  CreateHumanTaskUiResponse({
    required this.humanTaskUiArn,
  });

  factory CreateHumanTaskUiResponse.fromJson(Map<String, dynamic> json) {
    return CreateHumanTaskUiResponse(
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiArn = this.humanTaskUiArn;
    return {
      'HumanTaskUiArn': humanTaskUiArn,
    };
  }
}

class CreateHyperParameterTuningJobResponse {
  /// The Amazon Resource Name (ARN) of the tuning job. SageMaker assigns an ARN
  /// to a hyperparameter tuning job when you create it.
  final String hyperParameterTuningJobArn;

  CreateHyperParameterTuningJobResponse({
    required this.hyperParameterTuningJobArn,
  });

  factory CreateHyperParameterTuningJobResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateHyperParameterTuningJobResponse(
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    return {
      'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
    };
  }
}

class CreateImageResponse {
  /// The ARN of the image.
  final String? imageArn;

  CreateImageResponse({
    this.imageArn,
  });

  factory CreateImageResponse.fromJson(Map<String, dynamic> json) {
    return CreateImageResponse(
      imageArn: json['ImageArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageArn = this.imageArn;
    return {
      if (imageArn != null) 'ImageArn': imageArn,
    };
  }
}

class CreateImageVersionResponse {
  /// The ARN of the image version.
  final String? imageVersionArn;

  CreateImageVersionResponse({
    this.imageVersionArn,
  });

  factory CreateImageVersionResponse.fromJson(Map<String, dynamic> json) {
    return CreateImageVersionResponse(
      imageVersionArn: json['ImageVersionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageVersionArn = this.imageVersionArn;
    return {
      if (imageVersionArn != null) 'ImageVersionArn': imageVersionArn,
    };
  }
}

class CreateInferenceComponentOutput {
  /// The Amazon Resource Name (ARN) of the inference component.
  final String inferenceComponentArn;

  CreateInferenceComponentOutput({
    required this.inferenceComponentArn,
  });

  factory CreateInferenceComponentOutput.fromJson(Map<String, dynamic> json) {
    return CreateInferenceComponentOutput(
      inferenceComponentArn: json['InferenceComponentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceComponentArn = this.inferenceComponentArn;
    return {
      'InferenceComponentArn': inferenceComponentArn,
    };
  }
}

class CreateInferenceExperimentResponse {
  /// The ARN for your inference experiment.
  final String inferenceExperimentArn;

  CreateInferenceExperimentResponse({
    required this.inferenceExperimentArn,
  });

  factory CreateInferenceExperimentResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateInferenceExperimentResponse(
      inferenceExperimentArn: json['InferenceExperimentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceExperimentArn = this.inferenceExperimentArn;
    return {
      'InferenceExperimentArn': inferenceExperimentArn,
    };
  }
}

class CreateInferenceRecommendationsJobResponse {
  /// The Amazon Resource Name (ARN) of the recommendation job.
  final String jobArn;

  CreateInferenceRecommendationsJobResponse({
    required this.jobArn,
  });

  factory CreateInferenceRecommendationsJobResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateInferenceRecommendationsJobResponse(
      jobArn: json['JobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobArn = this.jobArn;
    return {
      'JobArn': jobArn,
    };
  }
}

class CreateLabelingJobResponse {
  /// The Amazon Resource Name (ARN) of the labeling job. You use this ARN to
  /// identify the labeling job.
  final String labelingJobArn;

  CreateLabelingJobResponse({
    required this.labelingJobArn,
  });

  factory CreateLabelingJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateLabelingJobResponse(
      labelingJobArn: json['LabelingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobArn = this.labelingJobArn;
    return {
      'LabelingJobArn': labelingJobArn,
    };
  }
}

class CreateModelBiasJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the model bias job.
  final String jobDefinitionArn;

  CreateModelBiasJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateModelBiasJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateModelBiasJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateModelCardExportJobResponse {
  /// The Amazon Resource Name (ARN) of the model card export job.
  final String modelCardExportJobArn;

  CreateModelCardExportJobResponse({
    required this.modelCardExportJobArn,
  });

  factory CreateModelCardExportJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateModelCardExportJobResponse(
      modelCardExportJobArn: json['ModelCardExportJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardExportJobArn = this.modelCardExportJobArn;
    return {
      'ModelCardExportJobArn': modelCardExportJobArn,
    };
  }
}

class CreateModelCardResponse {
  /// The Amazon Resource Name (ARN) of the successfully created model card.
  final String modelCardArn;

  CreateModelCardResponse({
    required this.modelCardArn,
  });

  factory CreateModelCardResponse.fromJson(Map<String, dynamic> json) {
    return CreateModelCardResponse(
      modelCardArn: json['ModelCardArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardArn = this.modelCardArn;
    return {
      'ModelCardArn': modelCardArn,
    };
  }
}

class CreateModelExplainabilityJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the model explainability job.
  final String jobDefinitionArn;

  CreateModelExplainabilityJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateModelExplainabilityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateModelExplainabilityJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateModelOutput {
  /// The ARN of the model created in SageMaker.
  final String modelArn;

  CreateModelOutput({
    required this.modelArn,
  });

  factory CreateModelOutput.fromJson(Map<String, dynamic> json) {
    return CreateModelOutput(
      modelArn: json['ModelArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelArn = this.modelArn;
    return {
      'ModelArn': modelArn,
    };
  }
}

class CreateModelPackageGroupOutput {
  /// The Amazon Resource Name (ARN) of the model group.
  final String modelPackageGroupArn;

  CreateModelPackageGroupOutput({
    required this.modelPackageGroupArn,
  });

  factory CreateModelPackageGroupOutput.fromJson(Map<String, dynamic> json) {
    return CreateModelPackageGroupOutput(
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageGroupArn = this.modelPackageGroupArn;
    return {
      'ModelPackageGroupArn': modelPackageGroupArn,
    };
  }
}

class CreateModelPackageOutput {
  /// The Amazon Resource Name (ARN) of the new model package.
  final String modelPackageArn;

  CreateModelPackageOutput({
    required this.modelPackageArn,
  });

  factory CreateModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return CreateModelPackageOutput(
      modelPackageArn: json['ModelPackageArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageArn = this.modelPackageArn;
    return {
      'ModelPackageArn': modelPackageArn,
    };
  }
}

class CreateModelQualityJobDefinitionResponse {
  /// The Amazon Resource Name (ARN) of the model quality monitoring job.
  final String jobDefinitionArn;

  CreateModelQualityJobDefinitionResponse({
    required this.jobDefinitionArn,
  });

  factory CreateModelQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateModelQualityJobDefinitionResponse(
      jobDefinitionArn: json['JobDefinitionArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionArn = this.jobDefinitionArn;
    return {
      'JobDefinitionArn': jobDefinitionArn,
    };
  }
}

class CreateMonitoringScheduleResponse {
  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  CreateMonitoringScheduleResponse({
    required this.monitoringScheduleArn,
  });

  factory CreateMonitoringScheduleResponse.fromJson(Map<String, dynamic> json) {
    return CreateMonitoringScheduleResponse(
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleArn = this.monitoringScheduleArn;
    return {
      'MonitoringScheduleArn': monitoringScheduleArn,
    };
  }
}

class CreateNotebookInstanceLifecycleConfigOutput {
  /// The Amazon Resource Name (ARN) of the lifecycle configuration.
  final String? notebookInstanceLifecycleConfigArn;

  CreateNotebookInstanceLifecycleConfigOutput({
    this.notebookInstanceLifecycleConfigArn,
  });

  factory CreateNotebookInstanceLifecycleConfigOutput.fromJson(
      Map<String, dynamic> json) {
    return CreateNotebookInstanceLifecycleConfigOutput(
      notebookInstanceLifecycleConfigArn:
          json['NotebookInstanceLifecycleConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceLifecycleConfigArn =
        this.notebookInstanceLifecycleConfigArn;
    return {
      if (notebookInstanceLifecycleConfigArn != null)
        'NotebookInstanceLifecycleConfigArn':
            notebookInstanceLifecycleConfigArn,
    };
  }
}

class CreateNotebookInstanceOutput {
  /// The Amazon Resource Name (ARN) of the notebook instance.
  final String? notebookInstanceArn;

  CreateNotebookInstanceOutput({
    this.notebookInstanceArn,
  });

  factory CreateNotebookInstanceOutput.fromJson(Map<String, dynamic> json) {
    return CreateNotebookInstanceOutput(
      notebookInstanceArn: json['NotebookInstanceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceArn = this.notebookInstanceArn;
    return {
      if (notebookInstanceArn != null)
        'NotebookInstanceArn': notebookInstanceArn,
    };
  }
}

class CreatePipelineResponse {
  /// The Amazon Resource Name (ARN) of the created pipeline.
  final String? pipelineArn;

  CreatePipelineResponse({
    this.pipelineArn,
  });

  factory CreatePipelineResponse.fromJson(Map<String, dynamic> json) {
    return CreatePipelineResponse(
      pipelineArn: json['PipelineArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineArn = this.pipelineArn;
    return {
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
    };
  }
}

class CreatePresignedDomainUrlResponse {
  /// The presigned URL.
  final String? authorizedUrl;

  CreatePresignedDomainUrlResponse({
    this.authorizedUrl,
  });

  factory CreatePresignedDomainUrlResponse.fromJson(Map<String, dynamic> json) {
    return CreatePresignedDomainUrlResponse(
      authorizedUrl: json['AuthorizedUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizedUrl = this.authorizedUrl;
    return {
      if (authorizedUrl != null) 'AuthorizedUrl': authorizedUrl,
    };
  }
}

class CreatePresignedNotebookInstanceUrlOutput {
  /// A JSON object that contains the URL string.
  final String? authorizedUrl;

  CreatePresignedNotebookInstanceUrlOutput({
    this.authorizedUrl,
  });

  factory CreatePresignedNotebookInstanceUrlOutput.fromJson(
      Map<String, dynamic> json) {
    return CreatePresignedNotebookInstanceUrlOutput(
      authorizedUrl: json['AuthorizedUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizedUrl = this.authorizedUrl;
    return {
      if (authorizedUrl != null) 'AuthorizedUrl': authorizedUrl,
    };
  }
}

class CreateProcessingJobResponse {
  /// The Amazon Resource Name (ARN) of the processing job.
  final String processingJobArn;

  CreateProcessingJobResponse({
    required this.processingJobArn,
  });

  factory CreateProcessingJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateProcessingJobResponse(
      processingJobArn: json['ProcessingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final processingJobArn = this.processingJobArn;
    return {
      'ProcessingJobArn': processingJobArn,
    };
  }
}

class CreateProjectOutput {
  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  /// The ID of the new project.
  final String projectId;

  CreateProjectOutput({
    required this.projectArn,
    required this.projectId,
  });

  factory CreateProjectOutput.fromJson(Map<String, dynamic> json) {
    return CreateProjectOutput(
      projectArn: json['ProjectArn'] as String,
      projectId: json['ProjectId'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final projectArn = this.projectArn;
    final projectId = this.projectId;
    return {
      'ProjectArn': projectArn,
      'ProjectId': projectId,
    };
  }
}

class CreateSpaceResponse {
  /// The space's Amazon Resource Name (ARN).
  final String? spaceArn;

  CreateSpaceResponse({
    this.spaceArn,
  });

  factory CreateSpaceResponse.fromJson(Map<String, dynamic> json) {
    return CreateSpaceResponse(
      spaceArn: json['SpaceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final spaceArn = this.spaceArn;
    return {
      if (spaceArn != null) 'SpaceArn': spaceArn,
    };
  }
}

class CreateStudioLifecycleConfigResponse {
  /// The ARN of your created Lifecycle Configuration.
  final String? studioLifecycleConfigArn;

  CreateStudioLifecycleConfigResponse({
    this.studioLifecycleConfigArn,
  });

  factory CreateStudioLifecycleConfigResponse.fromJson(
      Map<String, dynamic> json) {
    return CreateStudioLifecycleConfigResponse(
      studioLifecycleConfigArn: json['StudioLifecycleConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final studioLifecycleConfigArn = this.studioLifecycleConfigArn;
    return {
      if (studioLifecycleConfigArn != null)
        'StudioLifecycleConfigArn': studioLifecycleConfigArn,
    };
  }
}

class CreateTrainingJobResponse {
  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  CreateTrainingJobResponse({
    required this.trainingJobArn,
  });

  factory CreateTrainingJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateTrainingJobResponse(
      trainingJobArn: json['TrainingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobArn = this.trainingJobArn;
    return {
      'TrainingJobArn': trainingJobArn,
    };
  }
}

class CreateTransformJobResponse {
  /// The Amazon Resource Name (ARN) of the transform job.
  final String transformJobArn;

  CreateTransformJobResponse({
    required this.transformJobArn,
  });

  factory CreateTransformJobResponse.fromJson(Map<String, dynamic> json) {
    return CreateTransformJobResponse(
      transformJobArn: json['TransformJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final transformJobArn = this.transformJobArn;
    return {
      'TransformJobArn': transformJobArn,
    };
  }
}

class CreateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  CreateTrialComponentResponse({
    this.trialComponentArn,
  });

  factory CreateTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return CreateTrialComponentResponse(
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

class CreateTrialResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  CreateTrialResponse({
    this.trialArn,
  });

  factory CreateTrialResponse.fromJson(Map<String, dynamic> json) {
    return CreateTrialResponse(
      trialArn: json['TrialArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
    };
  }
}

class CreateUserProfileResponse {
  /// The user profile Amazon Resource Name (ARN).
  final String? userProfileArn;

  CreateUserProfileResponse({
    this.userProfileArn,
  });

  factory CreateUserProfileResponse.fromJson(Map<String, dynamic> json) {
    return CreateUserProfileResponse(
      userProfileArn: json['UserProfileArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final userProfileArn = this.userProfileArn;
    return {
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
    };
  }
}

class CreateWorkforceResponse {
  /// The Amazon Resource Name (ARN) of the workforce.
  final String workforceArn;

  CreateWorkforceResponse({
    required this.workforceArn,
  });

  factory CreateWorkforceResponse.fromJson(Map<String, dynamic> json) {
    return CreateWorkforceResponse(
      workforceArn: json['WorkforceArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final workforceArn = this.workforceArn;
    return {
      'WorkforceArn': workforceArn,
    };
  }
}

class CreateWorkteamResponse {
  /// The Amazon Resource Name (ARN) of the work team. You can use this ARN to
  /// identify the work team.
  final String? workteamArn;

  CreateWorkteamResponse({
    this.workteamArn,
  });

  factory CreateWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return CreateWorkteamResponse(
      workteamArn: json['WorkteamArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workteamArn = this.workteamArn;
    return {
      if (workteamArn != null) 'WorkteamArn': workteamArn,
    };
  }
}

enum CrossAccountFilterOption {
  sameAccount('SameAccount'),
  crossAccount('CrossAccount'),
  ;

  final String value;

  const CrossAccountFilterOption(this.value);

  static CrossAccountFilterOption fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CrossAccountFilterOption'));
}

/// A file system, created by you, that you assign to a user profile or space
/// for an Amazon SageMaker Domain. Permitted users can access this file system
/// in Amazon SageMaker Studio.
class CustomFileSystem {
  /// A custom file system in Amazon EFS.
  final EFSFileSystem? eFSFileSystem;

  CustomFileSystem({
    this.eFSFileSystem,
  });

  factory CustomFileSystem.fromJson(Map<String, dynamic> json) {
    return CustomFileSystem(
      eFSFileSystem: json['EFSFileSystem'] != null
          ? EFSFileSystem.fromJson(
              json['EFSFileSystem'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final eFSFileSystem = this.eFSFileSystem;
    return {
      if (eFSFileSystem != null) 'EFSFileSystem': eFSFileSystem,
    };
  }
}

/// The settings for assigning a custom file system to a user profile or space
/// for an Amazon SageMaker Domain. Permitted users can access this file system
/// in Amazon SageMaker Studio.
class CustomFileSystemConfig {
  /// The settings for a custom Amazon EFS file system.
  final EFSFileSystemConfig? eFSFileSystemConfig;

  CustomFileSystemConfig({
    this.eFSFileSystemConfig,
  });

  factory CustomFileSystemConfig.fromJson(Map<String, dynamic> json) {
    return CustomFileSystemConfig(
      eFSFileSystemConfig: json['EFSFileSystemConfig'] != null
          ? EFSFileSystemConfig.fromJson(
              json['EFSFileSystemConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final eFSFileSystemConfig = this.eFSFileSystemConfig;
    return {
      if (eFSFileSystemConfig != null)
        'EFSFileSystemConfig': eFSFileSystemConfig,
    };
  }
}

/// A custom SageMaker image. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring
/// your own SageMaker image</a>.
class CustomImage {
  /// The name of the AppImageConfig.
  final String appImageConfigName;

  /// The name of the CustomImage. Must be unique to your account.
  final String imageName;

  /// The version number of the CustomImage.
  final int? imageVersionNumber;

  CustomImage({
    required this.appImageConfigName,
    required this.imageName,
    this.imageVersionNumber,
  });

  factory CustomImage.fromJson(Map<String, dynamic> json) {
    return CustomImage(
      appImageConfigName: json['AppImageConfigName'] as String,
      imageName: json['ImageName'] as String,
      imageVersionNumber: json['ImageVersionNumber'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigName = this.appImageConfigName;
    final imageName = this.imageName;
    final imageVersionNumber = this.imageVersionNumber;
    return {
      'AppImageConfigName': appImageConfigName,
      'ImageName': imageName,
      if (imageVersionNumber != null) 'ImageVersionNumber': imageVersionNumber,
    };
  }
}

/// Details about the POSIX identity that is used for file system operations.
class CustomPosixUserConfig {
  /// The POSIX group ID.
  final int gid;

  /// The POSIX user ID.
  final int uid;

  CustomPosixUserConfig({
    required this.gid,
    required this.uid,
  });

  factory CustomPosixUserConfig.fromJson(Map<String, dynamic> json) {
    return CustomPosixUserConfig(
      gid: json['Gid'] as int,
      uid: json['Uid'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final gid = this.gid;
    final uid = this.uid;
    return {
      'Gid': gid,
      'Uid': uid,
    };
  }
}

/// A customized metric.
class CustomizedMetricSpecification {
  /// The name of the customized metric.
  final String? metricName;

  /// The namespace of the customized metric.
  final String? namespace;

  /// The statistic of the customized metric.
  final Statistic? statistic;

  CustomizedMetricSpecification({
    this.metricName,
    this.namespace,
    this.statistic,
  });

  factory CustomizedMetricSpecification.fromJson(Map<String, dynamic> json) {
    return CustomizedMetricSpecification(
      metricName: json['MetricName'] as String?,
      namespace: json['Namespace'] as String?,
      statistic: (json['Statistic'] as String?)?.let(Statistic.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final namespace = this.namespace;
    final statistic = this.statistic;
    return {
      if (metricName != null) 'MetricName': metricName,
      if (namespace != null) 'Namespace': namespace,
      if (statistic != null) 'Statistic': statistic.value,
    };
  }
}

/// Configuration to control how SageMaker captures inference data.
class DataCaptureConfig {
  /// Specifies data Model Monitor will capture. You can configure whether to
  /// collect only input, only output, or both
  final List<CaptureOption> captureOptions;

  /// The Amazon S3 location used to capture the data.
  final String destinationS3Uri;

  /// The percentage of requests SageMaker will capture. A lower value is
  /// recommended for Endpoints with high traffic.
  final int initialSamplingPercentage;

  /// Configuration specifying how to treat different headers. If no headers are
  /// specified SageMaker will by default base64 encode when capturing the data.
  final CaptureContentTypeHeader? captureContentTypeHeader;

  /// Whether data capture should be enabled or disabled (defaults to enabled).
  final bool? enableCapture;

  /// The Amazon Resource Name (ARN) of an Key Management Service key that
  /// SageMaker uses to encrypt the captured data at rest using Amazon S3
  /// server-side encryption.
  ///
  /// The KmsKeyId can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  DataCaptureConfig({
    required this.captureOptions,
    required this.destinationS3Uri,
    required this.initialSamplingPercentage,
    this.captureContentTypeHeader,
    this.enableCapture,
    this.kmsKeyId,
  });

  factory DataCaptureConfig.fromJson(Map<String, dynamic> json) {
    return DataCaptureConfig(
      captureOptions: (json['CaptureOptions'] as List)
          .nonNulls
          .map((e) => CaptureOption.fromJson(e as Map<String, dynamic>))
          .toList(),
      destinationS3Uri: json['DestinationS3Uri'] as String,
      initialSamplingPercentage: json['InitialSamplingPercentage'] as int,
      captureContentTypeHeader: json['CaptureContentTypeHeader'] != null
          ? CaptureContentTypeHeader.fromJson(
              json['CaptureContentTypeHeader'] as Map<String, dynamic>)
          : null,
      enableCapture: json['EnableCapture'] as bool?,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final captureOptions = this.captureOptions;
    final destinationS3Uri = this.destinationS3Uri;
    final initialSamplingPercentage = this.initialSamplingPercentage;
    final captureContentTypeHeader = this.captureContentTypeHeader;
    final enableCapture = this.enableCapture;
    final kmsKeyId = this.kmsKeyId;
    return {
      'CaptureOptions': captureOptions,
      'DestinationS3Uri': destinationS3Uri,
      'InitialSamplingPercentage': initialSamplingPercentage,
      if (captureContentTypeHeader != null)
        'CaptureContentTypeHeader': captureContentTypeHeader,
      if (enableCapture != null) 'EnableCapture': enableCapture,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// The currently active data capture configuration used by your Endpoint.
class DataCaptureConfigSummary {
  /// Whether data capture is currently functional.
  final CaptureStatus captureStatus;

  /// The percentage of requests being captured by your Endpoint.
  final int currentSamplingPercentage;

  /// The Amazon S3 location being used to capture the data.
  final String destinationS3Uri;

  /// Whether data capture is enabled or disabled.
  final bool enableCapture;

  /// The KMS key being used to encrypt the data in Amazon S3.
  final String kmsKeyId;

  DataCaptureConfigSummary({
    required this.captureStatus,
    required this.currentSamplingPercentage,
    required this.destinationS3Uri,
    required this.enableCapture,
    required this.kmsKeyId,
  });

  factory DataCaptureConfigSummary.fromJson(Map<String, dynamic> json) {
    return DataCaptureConfigSummary(
      captureStatus:
          CaptureStatus.fromString((json['CaptureStatus'] as String)),
      currentSamplingPercentage: json['CurrentSamplingPercentage'] as int,
      destinationS3Uri: json['DestinationS3Uri'] as String,
      enableCapture: json['EnableCapture'] as bool,
      kmsKeyId: json['KmsKeyId'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final captureStatus = this.captureStatus;
    final currentSamplingPercentage = this.currentSamplingPercentage;
    final destinationS3Uri = this.destinationS3Uri;
    final enableCapture = this.enableCapture;
    final kmsKeyId = this.kmsKeyId;
    return {
      'CaptureStatus': captureStatus.value,
      'CurrentSamplingPercentage': currentSamplingPercentage,
      'DestinationS3Uri': destinationS3Uri,
      'EnableCapture': enableCapture,
      'KmsKeyId': kmsKeyId,
    };
  }
}

/// The meta data of the Glue table which serves as data catalog for the
/// <code>OfflineStore</code>.
class DataCatalogConfig {
  /// The name of the Glue table catalog.
  final String catalog;

  /// The name of the Glue table database.
  final String database;

  /// The name of the Glue table.
  final String tableName;

  DataCatalogConfig({
    required this.catalog,
    required this.database,
    required this.tableName,
  });

  factory DataCatalogConfig.fromJson(Map<String, dynamic> json) {
    return DataCatalogConfig(
      catalog: json['Catalog'] as String,
      database: json['Database'] as String,
      tableName: json['TableName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final catalog = this.catalog;
    final database = this.database;
    final tableName = this.tableName;
    return {
      'Catalog': catalog,
      'Database': database,
      'TableName': tableName,
    };
  }
}

enum DataDistributionType {
  fullyReplicated('FullyReplicated'),
  shardedByS3Key('ShardedByS3Key'),
  ;

  final String value;

  const DataDistributionType(this.value);

  static DataDistributionType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum DataDistributionType'));
}

/// The data structure used to specify the data to be used for inference in a
/// batch transform job and to associate the data that is relevant to the
/// prediction results in the output. The input filter provided allows you to
/// exclude input data that is not needed for inference in a batch transform
/// job. The output filter provided allows you to include input data relevant to
/// interpreting the predictions in the output from the job. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate
/// Prediction Results with their Corresponding Input Records</a>.
class DataProcessing {
  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a>
  /// expression used to select a portion of the input data to pass to the
  /// algorithm. Use the <code>InputFilter</code> parameter to exclude fields,
  /// such as an ID column, from the input. If you want SageMaker to pass the
  /// entire input dataset to the algorithm, accept the default value
  /// <code>$</code>.
  ///
  /// Examples: <code>"$"</code>, <code>"$[1:]"</code>, <code>"$.features"</code>
  final String? inputFilter;

  /// Specifies the source of the data to join with the transformed data. The
  /// valid values are <code>None</code> and <code>Input</code>. The default value
  /// is <code>None</code>, which specifies not to join the input with the
  /// transformed data. If you want the batch transform job to join the original
  /// input data with the transformed data, set <code>JoinSource</code> to
  /// <code>Input</code>. You can specify <code>OutputFilter</code> as an
  /// additional filter to select a portion of the joined dataset and store it in
  /// the output file.
  ///
  /// For JSON or JSONLines objects, such as a JSON array, SageMaker adds the
  /// transformed data to the input JSON object in an attribute called
  /// <code>SageMakerOutput</code>. The joined result for JSON must be a key-value
  /// pair object. If the input is not a key-value pair object, SageMaker creates
  /// a new JSON file. In the new JSON file, and the input data is stored under
  /// the <code>SageMakerInput</code> key and the results are stored in
  /// <code>SageMakerOutput</code>.
  ///
  /// For CSV data, SageMaker takes each row as a JSON array and joins the
  /// transformed data with the input by appending each transformed row to the end
  /// of the input. The joined data has the original input data followed by the
  /// transformed data and the output is a CSV file.
  ///
  /// For information on how joining in applied, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow">Workflow
  /// for Associating Inferences with Input Records</a>.
  final JoinSource? joinSource;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators">JSONPath</a>
  /// expression used to select a portion of the joined dataset to save in the
  /// output file for a batch transform job. If you want SageMaker to store the
  /// entire input dataset in the output file, leave the default value,
  /// <code>$</code>. If you specify indexes that aren't within the dimension size
  /// of the joined dataset, you get an error.
  ///
  /// Examples: <code>"$"</code>, <code>"$[0,5:]"</code>,
  /// <code>"$['id','SageMakerOutput']"</code>
  final String? outputFilter;

  DataProcessing({
    this.inputFilter,
    this.joinSource,
    this.outputFilter,
  });

  factory DataProcessing.fromJson(Map<String, dynamic> json) {
    return DataProcessing(
      inputFilter: json['InputFilter'] as String?,
      joinSource: (json['JoinSource'] as String?)?.let(JoinSource.fromString),
      outputFilter: json['OutputFilter'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final inputFilter = this.inputFilter;
    final joinSource = this.joinSource;
    final outputFilter = this.outputFilter;
    return {
      if (inputFilter != null) 'InputFilter': inputFilter,
      if (joinSource != null) 'JoinSource': joinSource.value,
      if (outputFilter != null) 'OutputFilter': outputFilter,
    };
  }
}

/// Information about the container that a data quality monitoring job runs.
class DataQualityAppSpecification {
  /// The container image that the data quality monitoring job runs.
  final String imageUri;

  /// The arguments to send to the container that the monitoring job runs.
  final List<String>? containerArguments;

  /// The entrypoint for a container used to run a monitoring job.
  final List<String>? containerEntrypoint;

  /// Sets the environment variables in the container that the monitoring job
  /// runs.
  final Map<String, String>? environment;

  /// An Amazon S3 URI to a script that is called after analysis has been
  /// performed. Applicable only for the built-in (first party) containers.
  final String? postAnalyticsProcessorSourceUri;

  /// An Amazon S3 URI to a script that is called per row prior to running
  /// analysis. It can base64 decode the payload and convert it into a flattened
  /// JSON so that the built-in container can use the converted data. Applicable
  /// only for the built-in (first party) containers.
  final String? recordPreprocessorSourceUri;

  DataQualityAppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
    this.environment,
    this.postAnalyticsProcessorSourceUri,
    this.recordPreprocessorSourceUri,
  });

  factory DataQualityAppSpecification.fromJson(Map<String, dynamic> json) {
    return DataQualityAppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      postAnalyticsProcessorSourceUri:
          json['PostAnalyticsProcessorSourceUri'] as String?,
      recordPreprocessorSourceUri:
          json['RecordPreprocessorSourceUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final environment = this.environment;
    final postAnalyticsProcessorSourceUri =
        this.postAnalyticsProcessorSourceUri;
    final recordPreprocessorSourceUri = this.recordPreprocessorSourceUri;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (environment != null) 'Environment': environment,
      if (postAnalyticsProcessorSourceUri != null)
        'PostAnalyticsProcessorSourceUri': postAnalyticsProcessorSourceUri,
      if (recordPreprocessorSourceUri != null)
        'RecordPreprocessorSourceUri': recordPreprocessorSourceUri,
    };
  }
}

/// Configuration for monitoring constraints and monitoring statistics. These
/// baseline resources are compared against the results of the current job from
/// the series of jobs scheduled to collect data periodically.
class DataQualityBaselineConfig {
  /// The name of the job that performs baselining for the data quality monitoring
  /// job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;
  final MonitoringStatisticsResource? statisticsResource;

  DataQualityBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
    this.statisticsResource,
  });

  factory DataQualityBaselineConfig.fromJson(Map<String, dynamic> json) {
    return DataQualityBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
      statisticsResource: json['StatisticsResource'] != null
          ? MonitoringStatisticsResource.fromJson(
              json['StatisticsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    final statisticsResource = this.statisticsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
      if (statisticsResource != null) 'StatisticsResource': statisticsResource,
    };
  }
}

/// The input for the data quality monitoring job. Currently endpoints are
/// supported for input.
class DataQualityJobInput {
  /// Input object for the batch transform job.
  final BatchTransformInput? batchTransformInput;
  final EndpointInput? endpointInput;

  DataQualityJobInput({
    this.batchTransformInput,
    this.endpointInput,
  });

  factory DataQualityJobInput.fromJson(Map<String, dynamic> json) {
    return DataQualityJobInput(
      batchTransformInput: json['BatchTransformInput'] != null
          ? BatchTransformInput.fromJson(
              json['BatchTransformInput'] as Map<String, dynamic>)
          : null,
      endpointInput: json['EndpointInput'] != null
          ? EndpointInput.fromJson(
              json['EndpointInput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final batchTransformInput = this.batchTransformInput;
    final endpointInput = this.endpointInput;
    return {
      if (batchTransformInput != null)
        'BatchTransformInput': batchTransformInput,
      if (endpointInput != null) 'EndpointInput': endpointInput,
    };
  }
}

/// Describes the location of the channel data.
class DataSource {
  /// The file system that is associated with a channel.
  final FileSystemDataSource? fileSystemDataSource;

  /// The S3 location of the data source that is associated with a channel.
  final S3DataSource? s3DataSource;

  DataSource({
    this.fileSystemDataSource,
    this.s3DataSource,
  });

  factory DataSource.fromJson(Map<String, dynamic> json) {
    return DataSource(
      fileSystemDataSource: json['FileSystemDataSource'] != null
          ? FileSystemDataSource.fromJson(
              json['FileSystemDataSource'] as Map<String, dynamic>)
          : null,
      s3DataSource: json['S3DataSource'] != null
          ? S3DataSource.fromJson(json['S3DataSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final fileSystemDataSource = this.fileSystemDataSource;
    final s3DataSource = this.s3DataSource;
    return {
      if (fileSystemDataSource != null)
        'FileSystemDataSource': fileSystemDataSource,
      if (s3DataSource != null) 'S3DataSource': s3DataSource,
    };
  }
}

enum DataSourceName {
  salesforceGenie('SalesforceGenie'),
  snowflake('Snowflake'),
  ;

  final String value;

  const DataSourceName(this.value);

  static DataSourceName fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DataSourceName'));
}

/// Configuration for Dataset Definition inputs. The Dataset Definition input
/// must specify exactly one of either <code>AthenaDatasetDefinition</code> or
/// <code>RedshiftDatasetDefinition</code> types.
class DatasetDefinition {
  final AthenaDatasetDefinition? athenaDatasetDefinition;

  /// Whether the generated dataset is <code>FullyReplicated</code> or
  /// <code>ShardedByS3Key</code> (default).
  final DataDistributionType? dataDistributionType;

  /// Whether to use <code>File</code> or <code>Pipe</code> input mode. In
  /// <code>File</code> (default) mode, Amazon SageMaker copies the data from the
  /// input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes
  /// before starting your training algorithm. This is the most commonly used
  /// input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data
  /// from the source directly to your algorithm without using the EBS volume.
  final InputMode? inputMode;

  /// The local path where you want Amazon SageMaker to download the Dataset
  /// Definition inputs to run a processing job. <code>LocalPath</code> is an
  /// absolute path to the input data. This is a required parameter when
  /// <code>AppManaged</code> is <code>False</code> (default).
  final String? localPath;
  final RedshiftDatasetDefinition? redshiftDatasetDefinition;

  DatasetDefinition({
    this.athenaDatasetDefinition,
    this.dataDistributionType,
    this.inputMode,
    this.localPath,
    this.redshiftDatasetDefinition,
  });

  factory DatasetDefinition.fromJson(Map<String, dynamic> json) {
    return DatasetDefinition(
      athenaDatasetDefinition: json['AthenaDatasetDefinition'] != null
          ? AthenaDatasetDefinition.fromJson(
              json['AthenaDatasetDefinition'] as Map<String, dynamic>)
          : null,
      dataDistributionType: (json['DataDistributionType'] as String?)
          ?.let(DataDistributionType.fromString),
      inputMode: (json['InputMode'] as String?)?.let(InputMode.fromString),
      localPath: json['LocalPath'] as String?,
      redshiftDatasetDefinition: json['RedshiftDatasetDefinition'] != null
          ? RedshiftDatasetDefinition.fromJson(
              json['RedshiftDatasetDefinition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final athenaDatasetDefinition = this.athenaDatasetDefinition;
    final dataDistributionType = this.dataDistributionType;
    final inputMode = this.inputMode;
    final localPath = this.localPath;
    final redshiftDatasetDefinition = this.redshiftDatasetDefinition;
    return {
      if (athenaDatasetDefinition != null)
        'AthenaDatasetDefinition': athenaDatasetDefinition,
      if (dataDistributionType != null)
        'DataDistributionType': dataDistributionType.value,
      if (inputMode != null) 'InputMode': inputMode.value,
      if (localPath != null) 'LocalPath': localPath,
      if (redshiftDatasetDefinition != null)
        'RedshiftDatasetDefinition': redshiftDatasetDefinition,
    };
  }
}

/// Configuration information for the Amazon SageMaker Debugger hook parameters,
/// metric and tensor collections, and storage paths. To learn more about how to
/// configure the <code>DebugHookConfig</code> parameter, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
/// the SageMaker and Debugger Configuration API Operations to Create, Update,
/// and Debug Your Training Job</a>.
class DebugHookConfig {
  /// Path to Amazon S3 storage location for metrics and tensors.
  final String s3OutputPath;

  /// Configuration information for Amazon SageMaker Debugger tensor collections.
  /// To learn more about how to configure the
  /// <code>CollectionConfiguration</code> parameter, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
  /// the SageMaker and Debugger Configuration API Operations to Create, Update,
  /// and Debug Your Training Job</a>.
  final List<CollectionConfiguration>? collectionConfigurations;

  /// Configuration information for the Amazon SageMaker Debugger hook parameters.
  final Map<String, String>? hookParameters;

  /// Path to local storage location for metrics and tensors. Defaults to
  /// <code>/opt/ml/output/tensors/</code>.
  final String? localPath;

  DebugHookConfig({
    required this.s3OutputPath,
    this.collectionConfigurations,
    this.hookParameters,
    this.localPath,
  });

  factory DebugHookConfig.fromJson(Map<String, dynamic> json) {
    return DebugHookConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      collectionConfigurations: (json['CollectionConfigurations'] as List?)
          ?.nonNulls
          .map((e) =>
              CollectionConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      hookParameters: (json['HookParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      localPath: json['LocalPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final collectionConfigurations = this.collectionConfigurations;
    final hookParameters = this.hookParameters;
    final localPath = this.localPath;
    return {
      'S3OutputPath': s3OutputPath,
      if (collectionConfigurations != null)
        'CollectionConfigurations': collectionConfigurations,
      if (hookParameters != null) 'HookParameters': hookParameters,
      if (localPath != null) 'LocalPath': localPath,
    };
  }
}

/// Configuration information for SageMaker Debugger rules for debugging. To
/// learn more about how to configure the <code>DebugRuleConfiguration</code>
/// parameter, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
/// the SageMaker and Debugger Configuration API Operations to Create, Update,
/// and Debug Your Training Job</a>.
class DebugRuleConfiguration {
  /// The name of the rule configuration. It must be unique relative to other rule
  /// configuration names.
  final String ruleConfigurationName;

  /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
  final String ruleEvaluatorImage;

  /// The instance type to deploy a custom rule for debugging a training job.
  final ProcessingInstanceType? instanceType;

  /// Path to local storage location for output of rules. Defaults to
  /// <code>/opt/ml/processing/output/rule/</code>.
  final String? localPath;

  /// Runtime configuration for rule container.
  final Map<String, String>? ruleParameters;

  /// Path to Amazon S3 storage location for rules.
  final String? s3OutputPath;

  /// The size, in GB, of the ML storage volume attached to the processing
  /// instance.
  final int? volumeSizeInGB;

  DebugRuleConfiguration({
    required this.ruleConfigurationName,
    required this.ruleEvaluatorImage,
    this.instanceType,
    this.localPath,
    this.ruleParameters,
    this.s3OutputPath,
    this.volumeSizeInGB,
  });

  factory DebugRuleConfiguration.fromJson(Map<String, dynamic> json) {
    return DebugRuleConfiguration(
      ruleConfigurationName: json['RuleConfigurationName'] as String,
      ruleEvaluatorImage: json['RuleEvaluatorImage'] as String,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ProcessingInstanceType.fromString),
      localPath: json['LocalPath'] as String?,
      ruleParameters: (json['RuleParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      s3OutputPath: json['S3OutputPath'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluatorImage = this.ruleEvaluatorImage;
    final instanceType = this.instanceType;
    final localPath = this.localPath;
    final ruleParameters = this.ruleParameters;
    final s3OutputPath = this.s3OutputPath;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      'RuleConfigurationName': ruleConfigurationName,
      'RuleEvaluatorImage': ruleEvaluatorImage,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (localPath != null) 'LocalPath': localPath,
      if (ruleParameters != null) 'RuleParameters': ruleParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

/// Information about the status of the rule evaluation.
class DebugRuleEvaluationStatus {
  /// Timestamp when the rule evaluation status was last modified.
  final DateTime? lastModifiedTime;

  /// The name of the rule configuration.
  final String? ruleConfigurationName;

  /// The Amazon Resource Name (ARN) of the rule evaluation job.
  final String? ruleEvaluationJobArn;

  /// Status of the rule evaluation.
  final RuleEvaluationStatus? ruleEvaluationStatus;

  /// Details from the rule evaluation.
  final String? statusDetails;

  DebugRuleEvaluationStatus({
    this.lastModifiedTime,
    this.ruleConfigurationName,
    this.ruleEvaluationJobArn,
    this.ruleEvaluationStatus,
    this.statusDetails,
  });

  factory DebugRuleEvaluationStatus.fromJson(Map<String, dynamic> json) {
    return DebugRuleEvaluationStatus(
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      ruleConfigurationName: json['RuleConfigurationName'] as String?,
      ruleEvaluationJobArn: json['RuleEvaluationJobArn'] as String?,
      ruleEvaluationStatus: (json['RuleEvaluationStatus'] as String?)
          ?.let(RuleEvaluationStatus.fromString),
      statusDetails: json['StatusDetails'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final lastModifiedTime = this.lastModifiedTime;
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluationJobArn = this.ruleEvaluationJobArn;
    final ruleEvaluationStatus = this.ruleEvaluationStatus;
    final statusDetails = this.statusDetails;
    return {
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (ruleConfigurationName != null)
        'RuleConfigurationName': ruleConfigurationName,
      if (ruleEvaluationJobArn != null)
        'RuleEvaluationJobArn': ruleEvaluationJobArn,
      if (ruleEvaluationStatus != null)
        'RuleEvaluationStatus': ruleEvaluationStatus.value,
      if (statusDetails != null) 'StatusDetails': statusDetails,
    };
  }
}

/// A collection of default EBS storage settings that apply to spaces created
/// within a domain or user profile.
class DefaultEbsStorageSettings {
  /// The default size of the EBS storage volume for a space.
  final int defaultEbsVolumeSizeInGb;

  /// The maximum size of the EBS storage volume for a space.
  final int maximumEbsVolumeSizeInGb;

  DefaultEbsStorageSettings({
    required this.defaultEbsVolumeSizeInGb,
    required this.maximumEbsVolumeSizeInGb,
  });

  factory DefaultEbsStorageSettings.fromJson(Map<String, dynamic> json) {
    return DefaultEbsStorageSettings(
      defaultEbsVolumeSizeInGb: json['DefaultEbsVolumeSizeInGb'] as int,
      maximumEbsVolumeSizeInGb: json['MaximumEbsVolumeSizeInGb'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultEbsVolumeSizeInGb = this.defaultEbsVolumeSizeInGb;
    final maximumEbsVolumeSizeInGb = this.maximumEbsVolumeSizeInGb;
    return {
      'DefaultEbsVolumeSizeInGb': defaultEbsVolumeSizeInGb,
      'MaximumEbsVolumeSizeInGb': maximumEbsVolumeSizeInGb,
    };
  }
}

/// A collection of settings that apply to spaces created in the domain.
class DefaultSpaceSettings {
  /// The settings for assigning a custom file system to a domain. Permitted users
  /// can access this file system in Amazon SageMaker Studio.
  final List<CustomFileSystemConfig>? customFileSystemConfigs;
  final CustomPosixUserConfig? customPosixUserConfig;

  /// The ARN of the execution role for the space.
  final String? executionRole;
  final JupyterLabAppSettings? jupyterLabAppSettings;
  final JupyterServerAppSettings? jupyterServerAppSettings;
  final KernelGatewayAppSettings? kernelGatewayAppSettings;

  /// The security group IDs for the Amazon VPC that the space uses for
  /// communication.
  final List<String>? securityGroups;
  final DefaultSpaceStorageSettings? spaceStorageSettings;

  DefaultSpaceSettings({
    this.customFileSystemConfigs,
    this.customPosixUserConfig,
    this.executionRole,
    this.jupyterLabAppSettings,
    this.jupyterServerAppSettings,
    this.kernelGatewayAppSettings,
    this.securityGroups,
    this.spaceStorageSettings,
  });

  factory DefaultSpaceSettings.fromJson(Map<String, dynamic> json) {
    return DefaultSpaceSettings(
      customFileSystemConfigs: (json['CustomFileSystemConfigs'] as List?)
          ?.nonNulls
          .map(
              (e) => CustomFileSystemConfig.fromJson(e as Map<String, dynamic>))
          .toList(),
      customPosixUserConfig: json['CustomPosixUserConfig'] != null
          ? CustomPosixUserConfig.fromJson(
              json['CustomPosixUserConfig'] as Map<String, dynamic>)
          : null,
      executionRole: json['ExecutionRole'] as String?,
      jupyterLabAppSettings: json['JupyterLabAppSettings'] != null
          ? JupyterLabAppSettings.fromJson(
              json['JupyterLabAppSettings'] as Map<String, dynamic>)
          : null,
      jupyterServerAppSettings: json['JupyterServerAppSettings'] != null
          ? JupyterServerAppSettings.fromJson(
              json['JupyterServerAppSettings'] as Map<String, dynamic>)
          : null,
      kernelGatewayAppSettings: json['KernelGatewayAppSettings'] != null
          ? KernelGatewayAppSettings.fromJson(
              json['KernelGatewayAppSettings'] as Map<String, dynamic>)
          : null,
      securityGroups: (json['SecurityGroups'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      spaceStorageSettings: json['SpaceStorageSettings'] != null
          ? DefaultSpaceStorageSettings.fromJson(
              json['SpaceStorageSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final customFileSystemConfigs = this.customFileSystemConfigs;
    final customPosixUserConfig = this.customPosixUserConfig;
    final executionRole = this.executionRole;
    final jupyterLabAppSettings = this.jupyterLabAppSettings;
    final jupyterServerAppSettings = this.jupyterServerAppSettings;
    final kernelGatewayAppSettings = this.kernelGatewayAppSettings;
    final securityGroups = this.securityGroups;
    final spaceStorageSettings = this.spaceStorageSettings;
    return {
      if (customFileSystemConfigs != null)
        'CustomFileSystemConfigs': customFileSystemConfigs,
      if (customPosixUserConfig != null)
        'CustomPosixUserConfig': customPosixUserConfig,
      if (executionRole != null) 'ExecutionRole': executionRole,
      if (jupyterLabAppSettings != null)
        'JupyterLabAppSettings': jupyterLabAppSettings,
      if (jupyterServerAppSettings != null)
        'JupyterServerAppSettings': jupyterServerAppSettings,
      if (kernelGatewayAppSettings != null)
        'KernelGatewayAppSettings': kernelGatewayAppSettings,
      if (securityGroups != null) 'SecurityGroups': securityGroups,
      if (spaceStorageSettings != null)
        'SpaceStorageSettings': spaceStorageSettings,
    };
  }
}

/// The default storage settings for a space.
class DefaultSpaceStorageSettings {
  /// The default EBS storage settings for a space.
  final DefaultEbsStorageSettings? defaultEbsStorageSettings;

  DefaultSpaceStorageSettings({
    this.defaultEbsStorageSettings,
  });

  factory DefaultSpaceStorageSettings.fromJson(Map<String, dynamic> json) {
    return DefaultSpaceStorageSettings(
      defaultEbsStorageSettings: json['DefaultEbsStorageSettings'] != null
          ? DefaultEbsStorageSettings.fromJson(
              json['DefaultEbsStorageSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultEbsStorageSettings = this.defaultEbsStorageSettings;
    return {
      if (defaultEbsStorageSettings != null)
        'DefaultEbsStorageSettings': defaultEbsStorageSettings,
    };
  }
}

class DeleteActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  DeleteActionResponse({
    this.actionArn,
  });

  factory DeleteActionResponse.fromJson(Map<String, dynamic> json) {
    return DeleteActionResponse(
      actionArn: json['ActionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
    };
  }
}

class DeleteArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  DeleteArtifactResponse({
    this.artifactArn,
  });

  factory DeleteArtifactResponse.fromJson(Map<String, dynamic> json) {
    return DeleteArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
    };
  }
}

class DeleteAssociationResponse {
  /// The Amazon Resource Name (ARN) of the destination.
  final String? destinationArn;

  /// The ARN of the source.
  final String? sourceArn;

  DeleteAssociationResponse({
    this.destinationArn,
    this.sourceArn,
  });

  factory DeleteAssociationResponse.fromJson(Map<String, dynamic> json) {
    return DeleteAssociationResponse(
      destinationArn: json['DestinationArn'] as String?,
      sourceArn: json['SourceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationArn = this.destinationArn;
    final sourceArn = this.sourceArn;
    return {
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (sourceArn != null) 'SourceArn': sourceArn,
    };
  }
}

class DeleteClusterResponse {
  /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster to delete.
  final String clusterArn;

  DeleteClusterResponse({
    required this.clusterArn,
  });

  factory DeleteClusterResponse.fromJson(Map<String, dynamic> json) {
    return DeleteClusterResponse(
      clusterArn: json['ClusterArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterArn = this.clusterArn;
    return {
      'ClusterArn': clusterArn,
    };
  }
}

class DeleteContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  DeleteContextResponse({
    this.contextArn,
  });

  factory DeleteContextResponse.fromJson(Map<String, dynamic> json) {
    return DeleteContextResponse(
      contextArn: json['ContextArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
    };
  }
}

class DeleteExperimentResponse {
  /// The Amazon Resource Name (ARN) of the experiment that is being deleted.
  final String? experimentArn;

  DeleteExperimentResponse({
    this.experimentArn,
  });

  factory DeleteExperimentResponse.fromJson(Map<String, dynamic> json) {
    return DeleteExperimentResponse(
      experimentArn: json['ExperimentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentArn = this.experimentArn;
    return {
      if (experimentArn != null) 'ExperimentArn': experimentArn,
    };
  }
}

class DeleteFlowDefinitionResponse {
  DeleteFlowDefinitionResponse();

  factory DeleteFlowDefinitionResponse.fromJson(Map<String, dynamic> _) {
    return DeleteFlowDefinitionResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteHumanTaskUiResponse {
  DeleteHumanTaskUiResponse();

  factory DeleteHumanTaskUiResponse.fromJson(Map<String, dynamic> _) {
    return DeleteHumanTaskUiResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteImageResponse {
  DeleteImageResponse();

  factory DeleteImageResponse.fromJson(Map<String, dynamic> _) {
    return DeleteImageResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteImageVersionResponse {
  DeleteImageVersionResponse();

  factory DeleteImageVersionResponse.fromJson(Map<String, dynamic> _) {
    return DeleteImageVersionResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteInferenceExperimentResponse {
  /// The ARN of the deleted inference experiment.
  final String inferenceExperimentArn;

  DeleteInferenceExperimentResponse({
    required this.inferenceExperimentArn,
  });

  factory DeleteInferenceExperimentResponse.fromJson(
      Map<String, dynamic> json) {
    return DeleteInferenceExperimentResponse(
      inferenceExperimentArn: json['InferenceExperimentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceExperimentArn = this.inferenceExperimentArn;
    return {
      'InferenceExperimentArn': inferenceExperimentArn,
    };
  }
}

class DeletePipelineResponse {
  /// The Amazon Resource Name (ARN) of the pipeline to delete.
  final String? pipelineArn;

  DeletePipelineResponse({
    this.pipelineArn,
  });

  factory DeletePipelineResponse.fromJson(Map<String, dynamic> json) {
    return DeletePipelineResponse(
      pipelineArn: json['PipelineArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineArn = this.pipelineArn;
    return {
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
    };
  }
}

class DeleteTagsOutput {
  DeleteTagsOutput();

  factory DeleteTagsOutput.fromJson(Map<String, dynamic> _) {
    return DeleteTagsOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the component is being deleted.
  final String? trialComponentArn;

  DeleteTrialComponentResponse({
    this.trialComponentArn,
  });

  factory DeleteTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return DeleteTrialComponentResponse(
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

class DeleteTrialResponse {
  /// The Amazon Resource Name (ARN) of the trial that is being deleted.
  final String? trialArn;

  DeleteTrialResponse({
    this.trialArn,
  });

  factory DeleteTrialResponse.fromJson(Map<String, dynamic> json) {
    return DeleteTrialResponse(
      trialArn: json['TrialArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
    };
  }
}

class DeleteWorkforceResponse {
  DeleteWorkforceResponse();

  factory DeleteWorkforceResponse.fromJson(Map<String, dynamic> _) {
    return DeleteWorkforceResponse();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DeleteWorkteamResponse {
  /// Returns <code>true</code> if the work team was successfully deleted;
  /// otherwise, returns <code>false</code>.
  final bool success;

  DeleteWorkteamResponse({
    required this.success,
  });

  factory DeleteWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return DeleteWorkteamResponse(
      success: json['Success'] as bool,
    );
  }

  Map<String, dynamic> toJson() {
    final success = this.success;
    return {
      'Success': success,
    };
  }
}

/// Gets the Amazon EC2 Container Registry path of the docker image of the model
/// that is hosted in this <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html">ProductionVariant</a>.
///
/// If you used the <code>registry/repository[:tag]</code> form to specify the
/// image path of the primary container when you created the model hosted in
/// this <code>ProductionVariant</code>, the path resolves to a path of the form
/// <code>registry/repository[@digest]</code>. A digest is a hash value that
/// identifies a specific version of an image. For information about Amazon ECR
/// paths, see <a
/// href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling
/// an Image</a> in the <i>Amazon ECR User Guide</i>.
class DeployedImage {
  /// The date and time when the image path for the model resolved to the
  /// <code>ResolvedImage</code>
  final DateTime? resolutionTime;

  /// The specific digest path of the image hosted in this
  /// <code>ProductionVariant</code>.
  final String? resolvedImage;

  /// The image path you specified when you created the model.
  final String? specifiedImage;

  DeployedImage({
    this.resolutionTime,
    this.resolvedImage,
    this.specifiedImage,
  });

  factory DeployedImage.fromJson(Map<String, dynamic> json) {
    return DeployedImage(
      resolutionTime: timeStampFromJson(json['ResolutionTime']),
      resolvedImage: json['ResolvedImage'] as String?,
      specifiedImage: json['SpecifiedImage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final resolutionTime = this.resolutionTime;
    final resolvedImage = this.resolvedImage;
    final specifiedImage = this.specifiedImage;
    return {
      if (resolutionTime != null)
        'ResolutionTime': unixTimestampToJson(resolutionTime),
      if (resolvedImage != null) 'ResolvedImage': resolvedImage,
      if (specifiedImage != null) 'SpecifiedImage': specifiedImage,
    };
  }
}

/// The deployment configuration for an endpoint, which contains the desired
/// deployment strategy and rollback configurations.
class DeploymentConfig {
  /// Automatic rollback configuration for handling endpoint deployment failures
  /// and recovery.
  final AutoRollbackConfig? autoRollbackConfiguration;

  /// Update policy for a blue/green deployment. If this update policy is
  /// specified, SageMaker creates a new fleet during the deployment while
  /// maintaining the old fleet. SageMaker flips traffic to the new fleet
  /// according to the specified traffic routing configuration. Only one update
  /// policy should be used in the deployment configuration. If no update policy
  /// is specified, SageMaker uses a blue/green deployment strategy with all at
  /// once traffic shifting by default.
  final BlueGreenUpdatePolicy? blueGreenUpdatePolicy;

  /// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
  final RollingUpdatePolicy? rollingUpdatePolicy;

  DeploymentConfig({
    this.autoRollbackConfiguration,
    this.blueGreenUpdatePolicy,
    this.rollingUpdatePolicy,
  });

  factory DeploymentConfig.fromJson(Map<String, dynamic> json) {
    return DeploymentConfig(
      autoRollbackConfiguration: json['AutoRollbackConfiguration'] != null
          ? AutoRollbackConfig.fromJson(
              json['AutoRollbackConfiguration'] as Map<String, dynamic>)
          : null,
      blueGreenUpdatePolicy: json['BlueGreenUpdatePolicy'] != null
          ? BlueGreenUpdatePolicy.fromJson(
              json['BlueGreenUpdatePolicy'] as Map<String, dynamic>)
          : null,
      rollingUpdatePolicy: json['RollingUpdatePolicy'] != null
          ? RollingUpdatePolicy.fromJson(
              json['RollingUpdatePolicy'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final autoRollbackConfiguration = this.autoRollbackConfiguration;
    final blueGreenUpdatePolicy = this.blueGreenUpdatePolicy;
    final rollingUpdatePolicy = this.rollingUpdatePolicy;
    return {
      if (autoRollbackConfiguration != null)
        'AutoRollbackConfiguration': autoRollbackConfiguration,
      if (blueGreenUpdatePolicy != null)
        'BlueGreenUpdatePolicy': blueGreenUpdatePolicy,
      if (rollingUpdatePolicy != null)
        'RollingUpdatePolicy': rollingUpdatePolicy,
    };
  }
}

/// A set of recommended deployment configurations for the model. To get more
/// advanced recommendations, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a>
/// to create an inference recommendation job.
class DeploymentRecommendation {
  /// Status of the deployment recommendation. The status
  /// <code>NOT_APPLICABLE</code> means that SageMaker is unable to provide a
  /// default recommendation for the model using the information provided. If the
  /// deployment status is <code>IN_PROGRESS</code>, retry your API call after a
  /// few seconds to get a <code>COMPLETED</code> deployment recommendation.
  final RecommendationStatus recommendationStatus;

  /// A list of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_RealTimeInferenceRecommendation.html">RealTimeInferenceRecommendation</a>
  /// items.
  final List<RealTimeInferenceRecommendation>? realTimeInferenceRecommendations;

  DeploymentRecommendation({
    required this.recommendationStatus,
    this.realTimeInferenceRecommendations,
  });

  factory DeploymentRecommendation.fromJson(Map<String, dynamic> json) {
    return DeploymentRecommendation(
      recommendationStatus: RecommendationStatus.fromString(
          (json['RecommendationStatus'] as String)),
      realTimeInferenceRecommendations:
          (json['RealTimeInferenceRecommendations'] as List?)
              ?.nonNulls
              .map((e) => RealTimeInferenceRecommendation.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final recommendationStatus = this.recommendationStatus;
    final realTimeInferenceRecommendations =
        this.realTimeInferenceRecommendations;
    return {
      'RecommendationStatus': recommendationStatus.value,
      if (realTimeInferenceRecommendations != null)
        'RealTimeInferenceRecommendations': realTimeInferenceRecommendations,
    };
  }
}

/// Contains information about a stage in an edge deployment plan.
class DeploymentStage {
  /// Configuration of the devices in the stage.
  final DeviceSelectionConfig deviceSelectionConfig;

  /// The name of the stage.
  final String stageName;

  /// Configuration of the deployment details.
  final EdgeDeploymentConfig? deploymentConfig;

  DeploymentStage({
    required this.deviceSelectionConfig,
    required this.stageName,
    this.deploymentConfig,
  });

  Map<String, dynamic> toJson() {
    final deviceSelectionConfig = this.deviceSelectionConfig;
    final stageName = this.stageName;
    final deploymentConfig = this.deploymentConfig;
    return {
      'DeviceSelectionConfig': deviceSelectionConfig,
      'StageName': stageName,
      if (deploymentConfig != null) 'DeploymentConfig': deploymentConfig,
    };
  }
}

/// Contains information summarizing the deployment stage results.
class DeploymentStageStatusSummary {
  /// Configuration of the deployment details.
  final EdgeDeploymentConfig deploymentConfig;

  /// General status of the current state.
  final EdgeDeploymentStatus deploymentStatus;

  /// Configuration of the devices in the stage.
  final DeviceSelectionConfig deviceSelectionConfig;

  /// The name of the stage.
  final String stageName;

  DeploymentStageStatusSummary({
    required this.deploymentConfig,
    required this.deploymentStatus,
    required this.deviceSelectionConfig,
    required this.stageName,
  });

  factory DeploymentStageStatusSummary.fromJson(Map<String, dynamic> json) {
    return DeploymentStageStatusSummary(
      deploymentConfig: EdgeDeploymentConfig.fromJson(
          json['DeploymentConfig'] as Map<String, dynamic>),
      deploymentStatus: EdgeDeploymentStatus.fromJson(
          json['DeploymentStatus'] as Map<String, dynamic>),
      deviceSelectionConfig: DeviceSelectionConfig.fromJson(
          json['DeviceSelectionConfig'] as Map<String, dynamic>),
      stageName: json['StageName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final deploymentConfig = this.deploymentConfig;
    final deploymentStatus = this.deploymentStatus;
    final deviceSelectionConfig = this.deviceSelectionConfig;
    final stageName = this.stageName;
    return {
      'DeploymentConfig': deploymentConfig,
      'DeploymentStatus': deploymentStatus,
      'DeviceSelectionConfig': deviceSelectionConfig,
      'StageName': stageName,
    };
  }
}

/// Information that SageMaker Neo automatically derived about the model.
class DerivedInformation {
  /// The data input configuration that SageMaker Neo automatically derived for
  /// the model. When SageMaker Neo derives this information, you don't need to
  /// specify the data input configuration when you create a compilation job.
  final String? derivedDataInputConfig;

  DerivedInformation({
    this.derivedDataInputConfig,
  });

  factory DerivedInformation.fromJson(Map<String, dynamic> json) {
    return DerivedInformation(
      derivedDataInputConfig: json['DerivedDataInputConfig'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final derivedDataInputConfig = this.derivedDataInputConfig;
    return {
      if (derivedDataInputConfig != null)
        'DerivedDataInputConfig': derivedDataInputConfig,
    };
  }
}

class DescribeActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  /// The name of the action.
  final String? actionName;

  /// The type of the action.
  final String? actionType;
  final UserContext? createdBy;

  /// When the action was created.
  final DateTime? creationTime;

  /// The description of the action.
  final String? description;
  final UserContext? lastModifiedBy;

  /// When the action was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupArn;
  final MetadataProperties? metadataProperties;

  /// A list of the action's properties.
  final Map<String, String>? properties;

  /// The source of the action.
  final ActionSource? source;

  /// The status of the action.
  final ActionStatus? status;

  DescribeActionResponse({
    this.actionArn,
    this.actionName,
    this.actionType,
    this.createdBy,
    this.creationTime,
    this.description,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.metadataProperties,
    this.properties,
    this.source,
    this.status,
  });

  factory DescribeActionResponse.fromJson(Map<String, dynamic> json) {
    return DescribeActionResponse(
      actionArn: json['ActionArn'] as String?,
      actionName: json['ActionName'] as String?,
      actionType: json['ActionType'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      properties: (json['Properties'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      source: json['Source'] != null
          ? ActionSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.let(ActionStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    final actionName = this.actionName;
    final actionType = this.actionType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final metadataProperties = this.metadataProperties;
    final properties = this.properties;
    final source = this.source;
    final status = this.status;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
      if (actionName != null) 'ActionName': actionName,
      if (actionType != null) 'ActionType': actionType,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (properties != null) 'Properties': properties,
      if (source != null) 'Source': source,
      if (status != null) 'Status': status.value,
    };
  }
}

class DescribeAlgorithmOutput {
  /// The Amazon Resource Name (ARN) of the algorithm.
  final String algorithmArn;

  /// The name of the algorithm being described.
  final String algorithmName;

  /// The current status of the algorithm.
  final AlgorithmStatus algorithmStatus;

  /// Details about the current status of the algorithm.
  final AlgorithmStatusDetails algorithmStatusDetails;

  /// A timestamp specifying when the algorithm was created.
  final DateTime creationTime;

  /// Details about training jobs run by this algorithm.
  final TrainingSpecification trainingSpecification;

  /// A brief summary about the algorithm.
  final String? algorithmDescription;

  /// Whether the algorithm is certified to be listed in Amazon Web Services
  /// Marketplace.
  final bool? certifyForMarketplace;

  /// Details about inference jobs that the algorithm runs.
  final InferenceSpecification? inferenceSpecification;

  /// The product identifier of the algorithm.
  final String? productId;

  /// Details about configurations for one or more training jobs that SageMaker
  /// runs to test the algorithm.
  final AlgorithmValidationSpecification? validationSpecification;

  DescribeAlgorithmOutput({
    required this.algorithmArn,
    required this.algorithmName,
    required this.algorithmStatus,
    required this.algorithmStatusDetails,
    required this.creationTime,
    required this.trainingSpecification,
    this.algorithmDescription,
    this.certifyForMarketplace,
    this.inferenceSpecification,
    this.productId,
    this.validationSpecification,
  });

  factory DescribeAlgorithmOutput.fromJson(Map<String, dynamic> json) {
    return DescribeAlgorithmOutput(
      algorithmArn: json['AlgorithmArn'] as String,
      algorithmName: json['AlgorithmName'] as String,
      algorithmStatus:
          AlgorithmStatus.fromString((json['AlgorithmStatus'] as String)),
      algorithmStatusDetails: AlgorithmStatusDetails.fromJson(
          json['AlgorithmStatusDetails'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      trainingSpecification: TrainingSpecification.fromJson(
          json['TrainingSpecification'] as Map<String, dynamic>),
      algorithmDescription: json['AlgorithmDescription'] as String?,
      certifyForMarketplace: json['CertifyForMarketplace'] as bool?,
      inferenceSpecification: json['InferenceSpecification'] != null
          ? InferenceSpecification.fromJson(
              json['InferenceSpecification'] as Map<String, dynamic>)
          : null,
      productId: json['ProductId'] as String?,
      validationSpecification: json['ValidationSpecification'] != null
          ? AlgorithmValidationSpecification.fromJson(
              json['ValidationSpecification'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmArn = this.algorithmArn;
    final algorithmName = this.algorithmName;
    final algorithmStatus = this.algorithmStatus;
    final algorithmStatusDetails = this.algorithmStatusDetails;
    final creationTime = this.creationTime;
    final trainingSpecification = this.trainingSpecification;
    final algorithmDescription = this.algorithmDescription;
    final certifyForMarketplace = this.certifyForMarketplace;
    final inferenceSpecification = this.inferenceSpecification;
    final productId = this.productId;
    final validationSpecification = this.validationSpecification;
    return {
      'AlgorithmArn': algorithmArn,
      'AlgorithmName': algorithmName,
      'AlgorithmStatus': algorithmStatus.value,
      'AlgorithmStatusDetails': algorithmStatusDetails,
      'CreationTime': unixTimestampToJson(creationTime),
      'TrainingSpecification': trainingSpecification,
      if (algorithmDescription != null)
        'AlgorithmDescription': algorithmDescription,
      if (certifyForMarketplace != null)
        'CertifyForMarketplace': certifyForMarketplace,
      if (inferenceSpecification != null)
        'InferenceSpecification': inferenceSpecification,
      if (productId != null) 'ProductId': productId,
      if (validationSpecification != null)
        'ValidationSpecification': validationSpecification,
    };
  }
}

class DescribeAppImageConfigResponse {
  /// The ARN of the AppImageConfig.
  final String? appImageConfigArn;

  /// The name of the AppImageConfig.
  final String? appImageConfigName;

  /// The configuration of the Code Editor app.
  final CodeEditorAppImageConfig? codeEditorAppImageConfig;

  /// When the AppImageConfig was created.
  final DateTime? creationTime;

  /// The configuration of the JupyterLab app.
  final JupyterLabAppImageConfig? jupyterLabAppImageConfig;

  /// The configuration of a KernelGateway app.
  final KernelGatewayImageConfig? kernelGatewayImageConfig;

  /// When the AppImageConfig was last modified.
  final DateTime? lastModifiedTime;

  DescribeAppImageConfigResponse({
    this.appImageConfigArn,
    this.appImageConfigName,
    this.codeEditorAppImageConfig,
    this.creationTime,
    this.jupyterLabAppImageConfig,
    this.kernelGatewayImageConfig,
    this.lastModifiedTime,
  });

  factory DescribeAppImageConfigResponse.fromJson(Map<String, dynamic> json) {
    return DescribeAppImageConfigResponse(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
      appImageConfigName: json['AppImageConfigName'] as String?,
      codeEditorAppImageConfig: json['CodeEditorAppImageConfig'] != null
          ? CodeEditorAppImageConfig.fromJson(
              json['CodeEditorAppImageConfig'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      jupyterLabAppImageConfig: json['JupyterLabAppImageConfig'] != null
          ? JupyterLabAppImageConfig.fromJson(
              json['JupyterLabAppImageConfig'] as Map<String, dynamic>)
          : null,
      kernelGatewayImageConfig: json['KernelGatewayImageConfig'] != null
          ? KernelGatewayImageConfig.fromJson(
              json['KernelGatewayImageConfig'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    final appImageConfigName = this.appImageConfigName;
    final codeEditorAppImageConfig = this.codeEditorAppImageConfig;
    final creationTime = this.creationTime;
    final jupyterLabAppImageConfig = this.jupyterLabAppImageConfig;
    final kernelGatewayImageConfig = this.kernelGatewayImageConfig;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
      if (appImageConfigName != null) 'AppImageConfigName': appImageConfigName,
      if (codeEditorAppImageConfig != null)
        'CodeEditorAppImageConfig': codeEditorAppImageConfig,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (jupyterLabAppImageConfig != null)
        'JupyterLabAppImageConfig': jupyterLabAppImageConfig,
      if (kernelGatewayImageConfig != null)
        'KernelGatewayImageConfig': kernelGatewayImageConfig,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

class DescribeAppResponse {
  /// The Amazon Resource Name (ARN) of the app.
  final String? appArn;

  /// The name of the app.
  final String? appName;

  /// The type of app.
  final AppType? appType;

  /// The creation time of the application.
  /// <note>
  /// After an application has been shut down for 24 hours, SageMaker deletes all
  /// metadata for the application. To be considered an update and retain
  /// application metadata, applications must be restarted within 24 hours after
  /// the previous application has been shut down. After this time window,
  /// creation of an application is considered a new application rather than an
  /// update of the previous application.
  /// </note>
  final DateTime? creationTime;

  /// The domain ID.
  final String? domainId;

  /// The failure reason.
  final String? failureReason;

  /// The timestamp of the last health check.
  final DateTime? lastHealthCheckTimestamp;

  /// The timestamp of the last user's activity.
  /// <code>LastUserActivityTimestamp</code> is also updated when SageMaker
  /// performs health checks without user activity. As a result, this value is set
  /// to the same value as <code>LastHealthCheckTimestamp</code>.
  final DateTime? lastUserActivityTimestamp;

  /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image
  /// created on the instance.
  final ResourceSpec? resourceSpec;

  /// The name of the space. If this value is not set, then
  /// <code>UserProfileName</code> must be set.
  final String? spaceName;

  /// The status.
  final AppStatus? status;

  /// The user profile name.
  final String? userProfileName;

  DescribeAppResponse({
    this.appArn,
    this.appName,
    this.appType,
    this.creationTime,
    this.domainId,
    this.failureReason,
    this.lastHealthCheckTimestamp,
    this.lastUserActivityTimestamp,
    this.resourceSpec,
    this.spaceName,
    this.status,
    this.userProfileName,
  });

  factory DescribeAppResponse.fromJson(Map<String, dynamic> json) {
    return DescribeAppResponse(
      appArn: json['AppArn'] as String?,
      appName: json['AppName'] as String?,
      appType: (json['AppType'] as String?)?.let(AppType.fromString),
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastHealthCheckTimestamp:
          timeStampFromJson(json['LastHealthCheckTimestamp']),
      lastUserActivityTimestamp:
          timeStampFromJson(json['LastUserActivityTimestamp']),
      resourceSpec: json['ResourceSpec'] != null
          ? ResourceSpec.fromJson(json['ResourceSpec'] as Map<String, dynamic>)
          : null,
      spaceName: json['SpaceName'] as String?,
      status: (json['Status'] as String?)?.let(AppStatus.fromString),
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appArn = this.appArn;
    final appName = this.appName;
    final appType = this.appType;
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final failureReason = this.failureReason;
    final lastHealthCheckTimestamp = this.lastHealthCheckTimestamp;
    final lastUserActivityTimestamp = this.lastUserActivityTimestamp;
    final resourceSpec = this.resourceSpec;
    final spaceName = this.spaceName;
    final status = this.status;
    final userProfileName = this.userProfileName;
    return {
      if (appArn != null) 'AppArn': appArn,
      if (appName != null) 'AppName': appName,
      if (appType != null) 'AppType': appType.value,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastHealthCheckTimestamp != null)
        'LastHealthCheckTimestamp':
            unixTimestampToJson(lastHealthCheckTimestamp),
      if (lastUserActivityTimestamp != null)
        'LastUserActivityTimestamp':
            unixTimestampToJson(lastUserActivityTimestamp),
      if (resourceSpec != null) 'ResourceSpec': resourceSpec,
      if (spaceName != null) 'SpaceName': spaceName,
      if (status != null) 'Status': status.value,
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

class DescribeArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  /// The name of the artifact.
  final String? artifactName;

  /// The type of the artifact.
  final String? artifactType;
  final UserContext? createdBy;

  /// When the artifact was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// When the artifact was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupArn;
  final MetadataProperties? metadataProperties;

  /// A list of the artifact's properties.
  final Map<String, String>? properties;

  /// The source of the artifact.
  final ArtifactSource? source;

  DescribeArtifactResponse({
    this.artifactArn,
    this.artifactName,
    this.artifactType,
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.metadataProperties,
    this.properties,
    this.source,
  });

  factory DescribeArtifactResponse.fromJson(Map<String, dynamic> json) {
    return DescribeArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
      artifactName: json['ArtifactName'] as String?,
      artifactType: json['ArtifactType'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      properties: (json['Properties'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      source: json['Source'] != null
          ? ArtifactSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    final artifactName = this.artifactName;
    final artifactType = this.artifactType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final metadataProperties = this.metadataProperties;
    final properties = this.properties;
    final source = this.source;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
      if (artifactName != null) 'ArtifactName': artifactName,
      if (artifactType != null) 'ArtifactType': artifactType,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (properties != null) 'Properties': properties,
      if (source != null) 'Source': source,
    };
  }
}

class DescribeAutoMLJobResponse {
  /// Returns the ARN of the AutoML job.
  final String autoMLJobArn;

  /// Returns the name of the AutoML job.
  final String autoMLJobName;

  /// Returns the secondary status of the AutoML job.
  final AutoMLJobSecondaryStatus autoMLJobSecondaryStatus;

  /// Returns the status of the AutoML job.
  final AutoMLJobStatus autoMLJobStatus;

  /// Returns the creation time of the AutoML job.
  final DateTime creationTime;

  /// Returns the input data configuration for the AutoML job.
  final List<AutoMLChannel> inputDataConfig;

  /// Returns the job's last modified time.
  final DateTime lastModifiedTime;

  /// Returns the job's output data config.
  final AutoMLOutputDataConfig outputDataConfig;

  /// The ARN of the IAM role that has read permission to the input data location
  /// and write permission to the output data location in Amazon S3.
  final String roleArn;

  /// Returns information on the job's artifacts found in
  /// <code>AutoMLJobArtifacts</code>.
  final AutoMLJobArtifacts? autoMLJobArtifacts;

  /// Returns the configuration for the AutoML job.
  final AutoMLJobConfig? autoMLJobConfig;

  /// Returns the job's objective.
  final AutoMLJobObjective? autoMLJobObjective;

  /// The best model candidate selected by SageMaker Autopilot using both the best
  /// objective metric and lowest <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html">InferenceLatency</a>
  /// for an experiment.
  final AutoMLCandidate? bestCandidate;

  /// Returns the end time of the AutoML job.
  final DateTime? endTime;

  /// Returns the failure reason for an AutoML job, when applicable.
  final String? failureReason;

  /// Indicates whether the output for an AutoML job generates candidate
  /// definitions only.
  final bool? generateCandidateDefinitionsOnly;

  /// Indicates whether the model was deployed automatically to an endpoint and
  /// the name of that endpoint if deployed automatically.
  final ModelDeployConfig? modelDeployConfig;

  /// Provides information about endpoint for the model deployment.
  final ModelDeployResult? modelDeployResult;

  /// Returns a list of reasons for partial failures within an AutoML job.
  final List<AutoMLPartialFailureReason>? partialFailureReasons;

  /// Returns the job's problem type.
  final ProblemType? problemType;

  /// Contains <code>ProblemType</code>, <code>AutoMLJobObjective</code>, and
  /// <code>CompletionCriteria</code>. If you do not provide these values, they
  /// are inferred.
  final ResolvedAttributes? resolvedAttributes;

  DescribeAutoMLJobResponse({
    required this.autoMLJobArn,
    required this.autoMLJobName,
    required this.autoMLJobSecondaryStatus,
    required this.autoMLJobStatus,
    required this.creationTime,
    required this.inputDataConfig,
    required this.lastModifiedTime,
    required this.outputDataConfig,
    required this.roleArn,
    this.autoMLJobArtifacts,
    this.autoMLJobConfig,
    this.autoMLJobObjective,
    this.bestCandidate,
    this.endTime,
    this.failureReason,
    this.generateCandidateDefinitionsOnly,
    this.modelDeployConfig,
    this.modelDeployResult,
    this.partialFailureReasons,
    this.problemType,
    this.resolvedAttributes,
  });

  factory DescribeAutoMLJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeAutoMLJobResponse(
      autoMLJobArn: json['AutoMLJobArn'] as String,
      autoMLJobName: json['AutoMLJobName'] as String,
      autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus.fromString(
          (json['AutoMLJobSecondaryStatus'] as String)),
      autoMLJobStatus:
          AutoMLJobStatus.fromString((json['AutoMLJobStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      inputDataConfig: (json['InputDataConfig'] as List)
          .nonNulls
          .map((e) => AutoMLChannel.fromJson(e as Map<String, dynamic>))
          .toList(),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputDataConfig: AutoMLOutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      autoMLJobArtifacts: json['AutoMLJobArtifacts'] != null
          ? AutoMLJobArtifacts.fromJson(
              json['AutoMLJobArtifacts'] as Map<String, dynamic>)
          : null,
      autoMLJobConfig: json['AutoMLJobConfig'] != null
          ? AutoMLJobConfig.fromJson(
              json['AutoMLJobConfig'] as Map<String, dynamic>)
          : null,
      autoMLJobObjective: json['AutoMLJobObjective'] != null
          ? AutoMLJobObjective.fromJson(
              json['AutoMLJobObjective'] as Map<String, dynamic>)
          : null,
      bestCandidate: json['BestCandidate'] != null
          ? AutoMLCandidate.fromJson(
              json['BestCandidate'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      generateCandidateDefinitionsOnly:
          json['GenerateCandidateDefinitionsOnly'] as bool?,
      modelDeployConfig: json['ModelDeployConfig'] != null
          ? ModelDeployConfig.fromJson(
              json['ModelDeployConfig'] as Map<String, dynamic>)
          : null,
      modelDeployResult: json['ModelDeployResult'] != null
          ? ModelDeployResult.fromJson(
              json['ModelDeployResult'] as Map<String, dynamic>)
          : null,
      partialFailureReasons: (json['PartialFailureReasons'] as List?)
          ?.nonNulls
          .map((e) =>
              AutoMLPartialFailureReason.fromJson(e as Map<String, dynamic>))
          .toList(),
      problemType:
          (json['ProblemType'] as String?)?.let(ProblemType.fromString),
      resolvedAttributes: json['ResolvedAttributes'] != null
          ? ResolvedAttributes.fromJson(
              json['ResolvedAttributes'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final autoMLJobName = this.autoMLJobName;
    final autoMLJobSecondaryStatus = this.autoMLJobSecondaryStatus;
    final autoMLJobStatus = this.autoMLJobStatus;
    final creationTime = this.creationTime;
    final inputDataConfig = this.inputDataConfig;
    final lastModifiedTime = this.lastModifiedTime;
    final outputDataConfig = this.outputDataConfig;
    final roleArn = this.roleArn;
    final autoMLJobArtifacts = this.autoMLJobArtifacts;
    final autoMLJobConfig = this.autoMLJobConfig;
    final autoMLJobObjective = this.autoMLJobObjective;
    final bestCandidate = this.bestCandidate;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final generateCandidateDefinitionsOnly =
        this.generateCandidateDefinitionsOnly;
    final modelDeployConfig = this.modelDeployConfig;
    final modelDeployResult = this.modelDeployResult;
    final partialFailureReasons = this.partialFailureReasons;
    final problemType = this.problemType;
    final resolvedAttributes = this.resolvedAttributes;
    return {
      'AutoMLJobArn': autoMLJobArn,
      'AutoMLJobName': autoMLJobName,
      'AutoMLJobSecondaryStatus': autoMLJobSecondaryStatus.value,
      'AutoMLJobStatus': autoMLJobStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      'InputDataConfig': inputDataConfig,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputDataConfig': outputDataConfig,
      'RoleArn': roleArn,
      if (autoMLJobArtifacts != null) 'AutoMLJobArtifacts': autoMLJobArtifacts,
      if (autoMLJobConfig != null) 'AutoMLJobConfig': autoMLJobConfig,
      if (autoMLJobObjective != null) 'AutoMLJobObjective': autoMLJobObjective,
      if (bestCandidate != null) 'BestCandidate': bestCandidate,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (generateCandidateDefinitionsOnly != null)
        'GenerateCandidateDefinitionsOnly': generateCandidateDefinitionsOnly,
      if (modelDeployConfig != null) 'ModelDeployConfig': modelDeployConfig,
      if (modelDeployResult != null) 'ModelDeployResult': modelDeployResult,
      if (partialFailureReasons != null)
        'PartialFailureReasons': partialFailureReasons,
      if (problemType != null) 'ProblemType': problemType.value,
      if (resolvedAttributes != null) 'ResolvedAttributes': resolvedAttributes,
    };
  }
}

class DescribeAutoMLJobV2Response {
  /// Returns the Amazon Resource Name (ARN) of the AutoML job V2.
  final String autoMLJobArn;

  /// Returns an array of channel objects describing the input data and their
  /// location.
  final List<AutoMLJobChannel> autoMLJobInputDataConfig;

  /// Returns the name of the AutoML job V2.
  final String autoMLJobName;

  /// Returns the secondary status of the AutoML job V2.
  final AutoMLJobSecondaryStatus autoMLJobSecondaryStatus;

  /// Returns the status of the AutoML job V2.
  final AutoMLJobStatus autoMLJobStatus;

  /// Returns the creation time of the AutoML job V2.
  final DateTime creationTime;

  /// Returns the job's last modified time.
  final DateTime lastModifiedTime;

  /// Returns the job's output data config.
  final AutoMLOutputDataConfig outputDataConfig;

  /// The ARN of the IAM role that has read permission to the input data location
  /// and write permission to the output data location in Amazon S3.
  final String roleArn;
  final AutoMLJobArtifacts? autoMLJobArtifacts;

  /// Returns the job's objective.
  final AutoMLJobObjective? autoMLJobObjective;

  /// Returns the configuration settings of the problem type set for the AutoML
  /// job V2.
  final AutoMLProblemTypeConfig? autoMLProblemTypeConfig;

  /// Returns the name of the problem type configuration set for the AutoML job
  /// V2.
  final AutoMLProblemTypeConfigName? autoMLProblemTypeConfigName;

  /// Information about the candidate produced by an AutoML training job V2,
  /// including its status, steps, and other properties.
  final AutoMLCandidate? bestCandidate;

  /// Returns the configuration settings of how the data are split into train and
  /// validation datasets.
  final AutoMLDataSplitConfig? dataSplitConfig;

  /// Returns the end time of the AutoML job V2.
  final DateTime? endTime;

  /// Returns the reason for the failure of the AutoML job V2, when applicable.
  final String? failureReason;

  /// Indicates whether the model was deployed automatically to an endpoint and
  /// the name of that endpoint if deployed automatically.
  final ModelDeployConfig? modelDeployConfig;

  /// Provides information about endpoint for the model deployment.
  final ModelDeployResult? modelDeployResult;

  /// Returns a list of reasons for partial failures within an AutoML job V2.
  final List<AutoMLPartialFailureReason>? partialFailureReasons;

  /// Returns the resolved attributes used by the AutoML job V2.
  final AutoMLResolvedAttributes? resolvedAttributes;

  /// Returns the security configuration for traffic encryption or Amazon VPC
  /// settings.
  final AutoMLSecurityConfig? securityConfig;

  DescribeAutoMLJobV2Response({
    required this.autoMLJobArn,
    required this.autoMLJobInputDataConfig,
    required this.autoMLJobName,
    required this.autoMLJobSecondaryStatus,
    required this.autoMLJobStatus,
    required this.creationTime,
    required this.lastModifiedTime,
    required this.outputDataConfig,
    required this.roleArn,
    this.autoMLJobArtifacts,
    this.autoMLJobObjective,
    this.autoMLProblemTypeConfig,
    this.autoMLProblemTypeConfigName,
    this.bestCandidate,
    this.dataSplitConfig,
    this.endTime,
    this.failureReason,
    this.modelDeployConfig,
    this.modelDeployResult,
    this.partialFailureReasons,
    this.resolvedAttributes,
    this.securityConfig,
  });

  factory DescribeAutoMLJobV2Response.fromJson(Map<String, dynamic> json) {
    return DescribeAutoMLJobV2Response(
      autoMLJobArn: json['AutoMLJobArn'] as String,
      autoMLJobInputDataConfig: (json['AutoMLJobInputDataConfig'] as List)
          .nonNulls
          .map((e) => AutoMLJobChannel.fromJson(e as Map<String, dynamic>))
          .toList(),
      autoMLJobName: json['AutoMLJobName'] as String,
      autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus.fromString(
          (json['AutoMLJobSecondaryStatus'] as String)),
      autoMLJobStatus:
          AutoMLJobStatus.fromString((json['AutoMLJobStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputDataConfig: AutoMLOutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      autoMLJobArtifacts: json['AutoMLJobArtifacts'] != null
          ? AutoMLJobArtifacts.fromJson(
              json['AutoMLJobArtifacts'] as Map<String, dynamic>)
          : null,
      autoMLJobObjective: json['AutoMLJobObjective'] != null
          ? AutoMLJobObjective.fromJson(
              json['AutoMLJobObjective'] as Map<String, dynamic>)
          : null,
      autoMLProblemTypeConfig: json['AutoMLProblemTypeConfig'] != null
          ? AutoMLProblemTypeConfig.fromJson(
              json['AutoMLProblemTypeConfig'] as Map<String, dynamic>)
          : null,
      autoMLProblemTypeConfigName:
          (json['AutoMLProblemTypeConfigName'] as String?)
              ?.let(AutoMLProblemTypeConfigName.fromString),
      bestCandidate: json['BestCandidate'] != null
          ? AutoMLCandidate.fromJson(
              json['BestCandidate'] as Map<String, dynamic>)
          : null,
      dataSplitConfig: json['DataSplitConfig'] != null
          ? AutoMLDataSplitConfig.fromJson(
              json['DataSplitConfig'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      modelDeployConfig: json['ModelDeployConfig'] != null
          ? ModelDeployConfig.fromJson(
              json['ModelDeployConfig'] as Map<String, dynamic>)
          : null,
      modelDeployResult: json['ModelDeployResult'] != null
          ? ModelDeployResult.fromJson(
              json['ModelDeployResult'] as Map<String, dynamic>)
          : null,
      partialFailureReasons: (json['PartialFailureReasons'] as List?)
          ?.nonNulls
          .map((e) =>
              AutoMLPartialFailureReason.fromJson(e as Map<String, dynamic>))
          .toList(),
      resolvedAttributes: json['ResolvedAttributes'] != null
          ? AutoMLResolvedAttributes.fromJson(
              json['ResolvedAttributes'] as Map<String, dynamic>)
          : null,
      securityConfig: json['SecurityConfig'] != null
          ? AutoMLSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final autoMLJobInputDataConfig = this.autoMLJobInputDataConfig;
    final autoMLJobName = this.autoMLJobName;
    final autoMLJobSecondaryStatus = this.autoMLJobSecondaryStatus;
    final autoMLJobStatus = this.autoMLJobStatus;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final outputDataConfig = this.outputDataConfig;
    final roleArn = this.roleArn;
    final autoMLJobArtifacts = this.autoMLJobArtifacts;
    final autoMLJobObjective = this.autoMLJobObjective;
    final autoMLProblemTypeConfig = this.autoMLProblemTypeConfig;
    final autoMLProblemTypeConfigName = this.autoMLProblemTypeConfigName;
    final bestCandidate = this.bestCandidate;
    final dataSplitConfig = this.dataSplitConfig;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final modelDeployConfig = this.modelDeployConfig;
    final modelDeployResult = this.modelDeployResult;
    final partialFailureReasons = this.partialFailureReasons;
    final resolvedAttributes = this.resolvedAttributes;
    final securityConfig = this.securityConfig;
    return {
      'AutoMLJobArn': autoMLJobArn,
      'AutoMLJobInputDataConfig': autoMLJobInputDataConfig,
      'AutoMLJobName': autoMLJobName,
      'AutoMLJobSecondaryStatus': autoMLJobSecondaryStatus.value,
      'AutoMLJobStatus': autoMLJobStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputDataConfig': outputDataConfig,
      'RoleArn': roleArn,
      if (autoMLJobArtifacts != null) 'AutoMLJobArtifacts': autoMLJobArtifacts,
      if (autoMLJobObjective != null) 'AutoMLJobObjective': autoMLJobObjective,
      if (autoMLProblemTypeConfig != null)
        'AutoMLProblemTypeConfig': autoMLProblemTypeConfig,
      if (autoMLProblemTypeConfigName != null)
        'AutoMLProblemTypeConfigName': autoMLProblemTypeConfigName.value,
      if (bestCandidate != null) 'BestCandidate': bestCandidate,
      if (dataSplitConfig != null) 'DataSplitConfig': dataSplitConfig,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (modelDeployConfig != null) 'ModelDeployConfig': modelDeployConfig,
      if (modelDeployResult != null) 'ModelDeployResult': modelDeployResult,
      if (partialFailureReasons != null)
        'PartialFailureReasons': partialFailureReasons,
      if (resolvedAttributes != null) 'ResolvedAttributes': resolvedAttributes,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
    };
  }
}

class DescribeClusterNodeResponse {
  /// The details of the SageMaker HyperPod cluster node.
  final ClusterNodeDetails nodeDetails;

  DescribeClusterNodeResponse({
    required this.nodeDetails,
  });

  factory DescribeClusterNodeResponse.fromJson(Map<String, dynamic> json) {
    return DescribeClusterNodeResponse(
      nodeDetails: ClusterNodeDetails.fromJson(
          json['NodeDetails'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final nodeDetails = this.nodeDetails;
    return {
      'NodeDetails': nodeDetails,
    };
  }
}

class DescribeClusterResponse {
  /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.
  final String clusterArn;

  /// The status of the SageMaker HyperPod cluster.
  final ClusterStatus clusterStatus;

  /// The instance groups of the SageMaker HyperPod cluster.
  final List<ClusterInstanceGroupDetails> instanceGroups;

  /// The name of the SageMaker HyperPod cluster.
  final String? clusterName;

  /// The time when the SageMaker Cluster is created.
  final DateTime? creationTime;

  /// The failure message of the SageMaker HyperPod cluster.
  final String? failureMessage;
  final VpcConfig? vpcConfig;

  DescribeClusterResponse({
    required this.clusterArn,
    required this.clusterStatus,
    required this.instanceGroups,
    this.clusterName,
    this.creationTime,
    this.failureMessage,
    this.vpcConfig,
  });

  factory DescribeClusterResponse.fromJson(Map<String, dynamic> json) {
    return DescribeClusterResponse(
      clusterArn: json['ClusterArn'] as String,
      clusterStatus:
          ClusterStatus.fromString((json['ClusterStatus'] as String)),
      instanceGroups: (json['InstanceGroups'] as List)
          .nonNulls
          .map((e) =>
              ClusterInstanceGroupDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      clusterName: json['ClusterName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureMessage: json['FailureMessage'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterArn = this.clusterArn;
    final clusterStatus = this.clusterStatus;
    final instanceGroups = this.instanceGroups;
    final clusterName = this.clusterName;
    final creationTime = this.creationTime;
    final failureMessage = this.failureMessage;
    final vpcConfig = this.vpcConfig;
    return {
      'ClusterArn': clusterArn,
      'ClusterStatus': clusterStatus.value,
      'InstanceGroups': instanceGroups,
      if (clusterName != null) 'ClusterName': clusterName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureMessage != null) 'FailureMessage': failureMessage,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeCodeRepositoryOutput {
  /// The Amazon Resource Name (ARN) of the Git repository.
  final String codeRepositoryArn;

  /// The name of the Git repository.
  final String codeRepositoryName;

  /// The date and time that the repository was created.
  final DateTime creationTime;

  /// The date and time that the repository was last changed.
  final DateTime lastModifiedTime;

  /// Configuration details about the repository, including the URL where the
  /// repository is located, the default branch, and the Amazon Resource Name
  /// (ARN) of the Amazon Web Services Secrets Manager secret that contains the
  /// credentials used to access the repository.
  final GitConfig? gitConfig;

  DescribeCodeRepositoryOutput({
    required this.codeRepositoryArn,
    required this.codeRepositoryName,
    required this.creationTime,
    required this.lastModifiedTime,
    this.gitConfig,
  });

  factory DescribeCodeRepositoryOutput.fromJson(Map<String, dynamic> json) {
    return DescribeCodeRepositoryOutput(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
      codeRepositoryName: json['CodeRepositoryName'] as String,
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      gitConfig: json['GitConfig'] != null
          ? GitConfig.fromJson(json['GitConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    final codeRepositoryName = this.codeRepositoryName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final gitConfig = this.gitConfig;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
      'CodeRepositoryName': codeRepositoryName,
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (gitConfig != null) 'GitConfig': gitConfig,
    };
  }
}

class DescribeCompilationJobResponse {
  /// The Amazon Resource Name (ARN) of the model compilation job.
  final String compilationJobArn;

  /// The name of the model compilation job.
  final String compilationJobName;

  /// The status of the model compilation job.
  final CompilationJobStatus compilationJobStatus;

  /// The time that the model compilation job was created.
  final DateTime creationTime;

  /// If a model compilation job failed, the reason it failed.
  final String failureReason;

  /// Information about the location in Amazon S3 of the input model artifacts,
  /// the name and shape of the expected data inputs, and the framework in which
  /// the model was trained.
  final InputConfig inputConfig;

  /// The time that the status of the model compilation job was last modified.
  final DateTime lastModifiedTime;

  /// Information about the location in Amazon S3 that has been configured for
  /// storing the model artifacts used in the compilation job.
  final ModelArtifacts modelArtifacts;

  /// Information about the output location for the compiled model and the target
  /// device that the model runs on.
  final OutputConfig outputConfig;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes
  /// to perform the model compilation job.
  final String roleArn;

  /// Specifies a limit to how long a model compilation job can run. When the job
  /// reaches the time limit, Amazon SageMaker ends the compilation job. Use this
  /// API to cap model training costs.
  final StoppingCondition stoppingCondition;

  /// The time when the model compilation job on a compilation job instance ended.
  /// For a successful or stopped job, this is when the job's model artifacts have
  /// finished uploading. For a failed job, this is when Amazon SageMaker detected
  /// that the job failed.
  final DateTime? compilationEndTime;

  /// The time when the model compilation job started the
  /// <code>CompilationJob</code> instances.
  ///
  /// You are billed for the time between this timestamp and the timestamp in the
  /// <code>CompilationEndTime</code> field. In Amazon CloudWatch Logs, the start
  /// time might be later than this time. That's because it takes time to download
  /// the compilation job, which depends on the size of the compilation job
  /// container.
  final DateTime? compilationStartTime;

  /// Information that SageMaker Neo automatically derived about the model.
  final DerivedInformation? derivedInformation;

  /// The inference image to use when compiling a model. Specify an image only if
  /// the target device is a cloud instance.
  final String? inferenceImage;

  /// Provides a BLAKE2 hash value that identifies the compiled model artifacts in
  /// Amazon S3.
  final ModelDigests? modelDigests;

  /// The Amazon Resource Name (ARN) of the versioned model package that was
  /// provided to SageMaker Neo when you initiated a compilation job.
  final String? modelPackageVersionArn;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that you want your compilation job to connect
  /// to. Control access to your models by configuring the VPC. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect
  /// Compilation Jobs by Using an Amazon Virtual Private Cloud</a>.
  final NeoVpcConfig? vpcConfig;

  DescribeCompilationJobResponse({
    required this.compilationJobArn,
    required this.compilationJobName,
    required this.compilationJobStatus,
    required this.creationTime,
    required this.failureReason,
    required this.inputConfig,
    required this.lastModifiedTime,
    required this.modelArtifacts,
    required this.outputConfig,
    required this.roleArn,
    required this.stoppingCondition,
    this.compilationEndTime,
    this.compilationStartTime,
    this.derivedInformation,
    this.inferenceImage,
    this.modelDigests,
    this.modelPackageVersionArn,
    this.vpcConfig,
  });

  factory DescribeCompilationJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeCompilationJobResponse(
      compilationJobArn: json['CompilationJobArn'] as String,
      compilationJobName: json['CompilationJobName'] as String,
      compilationJobStatus: CompilationJobStatus.fromString(
          (json['CompilationJobStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      failureReason: json['FailureReason'] as String,
      inputConfig:
          InputConfig.fromJson(json['InputConfig'] as Map<String, dynamic>),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      modelArtifacts: ModelArtifacts.fromJson(
          json['ModelArtifacts'] as Map<String, dynamic>),
      outputConfig:
          OutputConfig.fromJson(json['OutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      compilationEndTime: timeStampFromJson(json['CompilationEndTime']),
      compilationStartTime: timeStampFromJson(json['CompilationStartTime']),
      derivedInformation: json['DerivedInformation'] != null
          ? DerivedInformation.fromJson(
              json['DerivedInformation'] as Map<String, dynamic>)
          : null,
      inferenceImage: json['InferenceImage'] as String?,
      modelDigests: json['ModelDigests'] != null
          ? ModelDigests.fromJson(json['ModelDigests'] as Map<String, dynamic>)
          : null,
      modelPackageVersionArn: json['ModelPackageVersionArn'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? NeoVpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobArn = this.compilationJobArn;
    final compilationJobName = this.compilationJobName;
    final compilationJobStatus = this.compilationJobStatus;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final inputConfig = this.inputConfig;
    final lastModifiedTime = this.lastModifiedTime;
    final modelArtifacts = this.modelArtifacts;
    final outputConfig = this.outputConfig;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final compilationEndTime = this.compilationEndTime;
    final compilationStartTime = this.compilationStartTime;
    final derivedInformation = this.derivedInformation;
    final inferenceImage = this.inferenceImage;
    final modelDigests = this.modelDigests;
    final modelPackageVersionArn = this.modelPackageVersionArn;
    final vpcConfig = this.vpcConfig;
    return {
      'CompilationJobArn': compilationJobArn,
      'CompilationJobName': compilationJobName,
      'CompilationJobStatus': compilationJobStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      'FailureReason': failureReason,
      'InputConfig': inputConfig,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'ModelArtifacts': modelArtifacts,
      'OutputConfig': outputConfig,
      'RoleArn': roleArn,
      'StoppingCondition': stoppingCondition,
      if (compilationEndTime != null)
        'CompilationEndTime': unixTimestampToJson(compilationEndTime),
      if (compilationStartTime != null)
        'CompilationStartTime': unixTimestampToJson(compilationStartTime),
      if (derivedInformation != null) 'DerivedInformation': derivedInformation,
      if (inferenceImage != null) 'InferenceImage': inferenceImage,
      if (modelDigests != null) 'ModelDigests': modelDigests,
      if (modelPackageVersionArn != null)
        'ModelPackageVersionArn': modelPackageVersionArn,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  /// The name of the context.
  final String? contextName;

  /// The type of the context.
  final String? contextType;
  final UserContext? createdBy;

  /// When the context was created.
  final DateTime? creationTime;

  /// The description of the context.
  final String? description;
  final UserContext? lastModifiedBy;

  /// When the context was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupArn;

  /// A list of the context's properties.
  final Map<String, String>? properties;

  /// The source of the context.
  final ContextSource? source;

  DescribeContextResponse({
    this.contextArn,
    this.contextName,
    this.contextType,
    this.createdBy,
    this.creationTime,
    this.description,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.properties,
    this.source,
  });

  factory DescribeContextResponse.fromJson(Map<String, dynamic> json) {
    return DescribeContextResponse(
      contextArn: json['ContextArn'] as String?,
      contextName: json['ContextName'] as String?,
      contextType: json['ContextType'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      properties: (json['Properties'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      source: json['Source'] != null
          ? ContextSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    final contextName = this.contextName;
    final contextType = this.contextType;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final properties = this.properties;
    final source = this.source;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
      if (contextName != null) 'ContextName': contextName,
      if (contextType != null) 'ContextType': contextType,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (properties != null) 'Properties': properties,
      if (source != null) 'Source': source,
    };
  }
}

class DescribeDataQualityJobDefinitionResponse {
  /// The time that the data quality monitoring job definition was created.
  final DateTime creationTime;

  /// Information about the container that runs the data quality monitoring job.
  final DataQualityAppSpecification dataQualityAppSpecification;

  /// The list of inputs for the data quality monitoring job. Currently endpoints
  /// are supported.
  final DataQualityJobInput dataQualityJobInput;
  final MonitoringOutputConfig dataQualityJobOutputConfig;

  /// The Amazon Resource Name (ARN) of the data quality monitoring job
  /// definition.
  final String jobDefinitionArn;

  /// The name of the data quality monitoring job definition.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String roleArn;

  /// The constraints and baselines for the data quality monitoring job
  /// definition.
  final DataQualityBaselineConfig? dataQualityBaselineConfig;

  /// The networking configuration for the data quality monitoring job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeDataQualityJobDefinitionResponse({
    required this.creationTime,
    required this.dataQualityAppSpecification,
    required this.dataQualityJobInput,
    required this.dataQualityJobOutputConfig,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.roleArn,
    this.dataQualityBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeDataQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeDataQualityJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      dataQualityAppSpecification: DataQualityAppSpecification.fromJson(
          json['DataQualityAppSpecification'] as Map<String, dynamic>),
      dataQualityJobInput: DataQualityJobInput.fromJson(
          json['DataQualityJobInput'] as Map<String, dynamic>),
      dataQualityJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['DataQualityJobOutputConfig'] as Map<String, dynamic>),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      dataQualityBaselineConfig: json['DataQualityBaselineConfig'] != null
          ? DataQualityBaselineConfig.fromJson(
              json['DataQualityBaselineConfig'] as Map<String, dynamic>)
          : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final dataQualityAppSpecification = this.dataQualityAppSpecification;
    final dataQualityJobInput = this.dataQualityJobInput;
    final dataQualityJobOutputConfig = this.dataQualityJobOutputConfig;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final roleArn = this.roleArn;
    final dataQualityBaselineConfig = this.dataQualityBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'DataQualityAppSpecification': dataQualityAppSpecification,
      'DataQualityJobInput': dataQualityJobInput,
      'DataQualityJobOutputConfig': dataQualityJobOutputConfig,
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'RoleArn': roleArn,
      if (dataQualityBaselineConfig != null)
        'DataQualityBaselineConfig': dataQualityBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeDeviceFleetResponse {
  /// Timestamp of when the device fleet was created.
  final DateTime creationTime;

  /// The The Amazon Resource Name (ARN) of the fleet.
  final String deviceFleetArn;

  /// The name of the fleet.
  final String deviceFleetName;

  /// Timestamp of when the device fleet was last updated.
  final DateTime lastModifiedTime;

  /// The output configuration for storing sampled data.
  final EdgeOutputConfig outputConfig;

  /// A description of the fleet.
  final String? description;

  /// The Amazon Resource Name (ARN) alias created in Amazon Web Services Internet
  /// of Things (IoT).
  final String? iotRoleAlias;

  /// The Amazon Resource Name (ARN) that has access to Amazon Web Services
  /// Internet of Things (IoT).
  final String? roleArn;

  DescribeDeviceFleetResponse({
    required this.creationTime,
    required this.deviceFleetArn,
    required this.deviceFleetName,
    required this.lastModifiedTime,
    required this.outputConfig,
    this.description,
    this.iotRoleAlias,
    this.roleArn,
  });

  factory DescribeDeviceFleetResponse.fromJson(Map<String, dynamic> json) {
    return DescribeDeviceFleetResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      deviceFleetArn: json['DeviceFleetArn'] as String,
      deviceFleetName: json['DeviceFleetName'] as String,
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputConfig: EdgeOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      description: json['Description'] as String?,
      iotRoleAlias: json['IotRoleAlias'] as String?,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final deviceFleetArn = this.deviceFleetArn;
    final deviceFleetName = this.deviceFleetName;
    final lastModifiedTime = this.lastModifiedTime;
    final outputConfig = this.outputConfig;
    final description = this.description;
    final iotRoleAlias = this.iotRoleAlias;
    final roleArn = this.roleArn;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'DeviceFleetArn': deviceFleetArn,
      'DeviceFleetName': deviceFleetName,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputConfig': outputConfig,
      if (description != null) 'Description': description,
      if (iotRoleAlias != null) 'IotRoleAlias': iotRoleAlias,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeDeviceResponse {
  /// The name of the fleet the device belongs to.
  final String deviceFleetName;

  /// The unique identifier of the device.
  final String deviceName;

  /// The timestamp of the last registration or de-reregistration.
  final DateTime registrationTime;

  /// Edge Manager agent version.
  final String? agentVersion;

  /// A description of the device.
  final String? description;

  /// The Amazon Resource Name (ARN) of the device.
  final String? deviceArn;

  /// The Amazon Web Services Internet of Things (IoT) object thing name
  /// associated with the device.
  final String? iotThingName;

  /// The last heartbeat received from the device.
  final DateTime? latestHeartbeat;

  /// The maximum number of models.
  final int? maxModels;

  /// Models on the device.
  final List<EdgeModel>? models;

  /// The response from the last list when returning a list large enough to need
  /// tokening.
  final String? nextToken;

  DescribeDeviceResponse({
    required this.deviceFleetName,
    required this.deviceName,
    required this.registrationTime,
    this.agentVersion,
    this.description,
    this.deviceArn,
    this.iotThingName,
    this.latestHeartbeat,
    this.maxModels,
    this.models,
    this.nextToken,
  });

  factory DescribeDeviceResponse.fromJson(Map<String, dynamic> json) {
    return DescribeDeviceResponse(
      deviceFleetName: json['DeviceFleetName'] as String,
      deviceName: json['DeviceName'] as String,
      registrationTime:
          nonNullableTimeStampFromJson(json['RegistrationTime'] as Object),
      agentVersion: json['AgentVersion'] as String?,
      description: json['Description'] as String?,
      deviceArn: json['DeviceArn'] as String?,
      iotThingName: json['IotThingName'] as String?,
      latestHeartbeat: timeStampFromJson(json['LatestHeartbeat']),
      maxModels: json['MaxModels'] as int?,
      models: (json['Models'] as List?)
          ?.nonNulls
          .map((e) => EdgeModel.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetName = this.deviceFleetName;
    final deviceName = this.deviceName;
    final registrationTime = this.registrationTime;
    final agentVersion = this.agentVersion;
    final description = this.description;
    final deviceArn = this.deviceArn;
    final iotThingName = this.iotThingName;
    final latestHeartbeat = this.latestHeartbeat;
    final maxModels = this.maxModels;
    final models = this.models;
    final nextToken = this.nextToken;
    return {
      'DeviceFleetName': deviceFleetName,
      'DeviceName': deviceName,
      'RegistrationTime': unixTimestampToJson(registrationTime),
      if (agentVersion != null) 'AgentVersion': agentVersion,
      if (description != null) 'Description': description,
      if (deviceArn != null) 'DeviceArn': deviceArn,
      if (iotThingName != null) 'IotThingName': iotThingName,
      if (latestHeartbeat != null)
        'LatestHeartbeat': unixTimestampToJson(latestHeartbeat),
      if (maxModels != null) 'MaxModels': maxModels,
      if (models != null) 'Models': models,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class DescribeDomainResponse {
  /// Specifies the VPC used for non-EFS traffic. The default value is
  /// <code>PublicInternetOnly</code>.
  ///
  /// <ul>
  /// <li>
  /// <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed
  /// by Amazon SageMaker, which allows direct internet access
  /// </li>
  /// <li>
  /// <code>VpcOnly</code> - All traffic is through the specified VPC and subnets
  /// </li>
  /// </ul>
  final AppNetworkAccessType? appNetworkAccessType;

  /// The entity that creates and manages the required security groups for
  /// inter-app communication in <code>VPCOnly</code> mode. Required when
  /// <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and
  /// <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code>
  /// is provided.
  final AppSecurityGroupManagement? appSecurityGroupManagement;

  /// The domain's authentication mode.
  final AuthMode? authMode;

  /// The creation time.
  final DateTime? creationTime;

  /// The default settings used to create a space.
  final DefaultSpaceSettings? defaultSpaceSettings;

  /// Settings which are applied to UserProfiles in this domain if settings are
  /// not explicitly specified in a given UserProfile.
  final UserSettings? defaultUserSettings;

  /// The domain's Amazon Resource Name (ARN).
  final String? domainArn;

  /// The domain ID.
  final String? domainId;

  /// The domain name.
  final String? domainName;

  /// A collection of <code>Domain</code> settings.
  final DomainSettings? domainSettings;

  /// The failure reason.
  final String? failureReason;

  /// The ID of the Amazon Elastic File System managed by this Domain.
  final String? homeEfsFileSystemId;

  /// Use <code>KmsKeyId</code>.
  final String? homeEfsFileSystemKmsKeyId;

  /// The Amazon Web Services KMS customer managed key used to encrypt the EFS
  /// volume attached to the domain.
  final String? kmsKeyId;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The ID of the security group that authorizes traffic between the
  /// <code>RSessionGateway</code> apps and the <code>RStudioServerPro</code> app.
  final String? securityGroupIdForDomainBoundary;

  /// The ARN of the application managed by SageMaker in IAM Identity Center. This
  /// value is only returned for domains created after October 1, 2023.
  final String? singleSignOnApplicationArn;

  /// The IAM Identity Center managed application instance ID.
  final String? singleSignOnManagedApplicationInstanceId;

  /// The status.
  final DomainStatus? status;

  /// The VPC subnets that the domain uses for communication.
  final List<String>? subnetIds;

  /// The domain's URL.
  final String? url;

  /// The ID of the Amazon Virtual Private Cloud (VPC) that the domain uses for
  /// communication.
  final String? vpcId;

  DescribeDomainResponse({
    this.appNetworkAccessType,
    this.appSecurityGroupManagement,
    this.authMode,
    this.creationTime,
    this.defaultSpaceSettings,
    this.defaultUserSettings,
    this.domainArn,
    this.domainId,
    this.domainName,
    this.domainSettings,
    this.failureReason,
    this.homeEfsFileSystemId,
    this.homeEfsFileSystemKmsKeyId,
    this.kmsKeyId,
    this.lastModifiedTime,
    this.securityGroupIdForDomainBoundary,
    this.singleSignOnApplicationArn,
    this.singleSignOnManagedApplicationInstanceId,
    this.status,
    this.subnetIds,
    this.url,
    this.vpcId,
  });

  factory DescribeDomainResponse.fromJson(Map<String, dynamic> json) {
    return DescribeDomainResponse(
      appNetworkAccessType: (json['AppNetworkAccessType'] as String?)
          ?.let(AppNetworkAccessType.fromString),
      appSecurityGroupManagement:
          (json['AppSecurityGroupManagement'] as String?)
              ?.let(AppSecurityGroupManagement.fromString),
      authMode: (json['AuthMode'] as String?)?.let(AuthMode.fromString),
      creationTime: timeStampFromJson(json['CreationTime']),
      defaultSpaceSettings: json['DefaultSpaceSettings'] != null
          ? DefaultSpaceSettings.fromJson(
              json['DefaultSpaceSettings'] as Map<String, dynamic>)
          : null,
      defaultUserSettings: json['DefaultUserSettings'] != null
          ? UserSettings.fromJson(
              json['DefaultUserSettings'] as Map<String, dynamic>)
          : null,
      domainArn: json['DomainArn'] as String?,
      domainId: json['DomainId'] as String?,
      domainName: json['DomainName'] as String?,
      domainSettings: json['DomainSettings'] != null
          ? DomainSettings.fromJson(
              json['DomainSettings'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      homeEfsFileSystemId: json['HomeEfsFileSystemId'] as String?,
      homeEfsFileSystemKmsKeyId: json['HomeEfsFileSystemKmsKeyId'] as String?,
      kmsKeyId: json['KmsKeyId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      securityGroupIdForDomainBoundary:
          json['SecurityGroupIdForDomainBoundary'] as String?,
      singleSignOnApplicationArn: json['SingleSignOnApplicationArn'] as String?,
      singleSignOnManagedApplicationInstanceId:
          json['SingleSignOnManagedApplicationInstanceId'] as String?,
      status: (json['Status'] as String?)?.let(DomainStatus.fromString),
      subnetIds: (json['SubnetIds'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      url: json['Url'] as String?,
      vpcId: json['VpcId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appNetworkAccessType = this.appNetworkAccessType;
    final appSecurityGroupManagement = this.appSecurityGroupManagement;
    final authMode = this.authMode;
    final creationTime = this.creationTime;
    final defaultSpaceSettings = this.defaultSpaceSettings;
    final defaultUserSettings = this.defaultUserSettings;
    final domainArn = this.domainArn;
    final domainId = this.domainId;
    final domainName = this.domainName;
    final domainSettings = this.domainSettings;
    final failureReason = this.failureReason;
    final homeEfsFileSystemId = this.homeEfsFileSystemId;
    final homeEfsFileSystemKmsKeyId = this.homeEfsFileSystemKmsKeyId;
    final kmsKeyId = this.kmsKeyId;
    final lastModifiedTime = this.lastModifiedTime;
    final securityGroupIdForDomainBoundary =
        this.securityGroupIdForDomainBoundary;
    final singleSignOnApplicationArn = this.singleSignOnApplicationArn;
    final singleSignOnManagedApplicationInstanceId =
        this.singleSignOnManagedApplicationInstanceId;
    final status = this.status;
    final subnetIds = this.subnetIds;
    final url = this.url;
    final vpcId = this.vpcId;
    return {
      if (appNetworkAccessType != null)
        'AppNetworkAccessType': appNetworkAccessType.value,
      if (appSecurityGroupManagement != null)
        'AppSecurityGroupManagement': appSecurityGroupManagement.value,
      if (authMode != null) 'AuthMode': authMode.value,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (defaultSpaceSettings != null)
        'DefaultSpaceSettings': defaultSpaceSettings,
      if (defaultUserSettings != null)
        'DefaultUserSettings': defaultUserSettings,
      if (domainArn != null) 'DomainArn': domainArn,
      if (domainId != null) 'DomainId': domainId,
      if (domainName != null) 'DomainName': domainName,
      if (domainSettings != null) 'DomainSettings': domainSettings,
      if (failureReason != null) 'FailureReason': failureReason,
      if (homeEfsFileSystemId != null)
        'HomeEfsFileSystemId': homeEfsFileSystemId,
      if (homeEfsFileSystemKmsKeyId != null)
        'HomeEfsFileSystemKmsKeyId': homeEfsFileSystemKmsKeyId,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (securityGroupIdForDomainBoundary != null)
        'SecurityGroupIdForDomainBoundary': securityGroupIdForDomainBoundary,
      if (singleSignOnApplicationArn != null)
        'SingleSignOnApplicationArn': singleSignOnApplicationArn,
      if (singleSignOnManagedApplicationInstanceId != null)
        'SingleSignOnManagedApplicationInstanceId':
            singleSignOnManagedApplicationInstanceId,
      if (status != null) 'Status': status.value,
      if (subnetIds != null) 'SubnetIds': subnetIds,
      if (url != null) 'Url': url,
      if (vpcId != null) 'VpcId': vpcId,
    };
  }
}

class DescribeEdgeDeploymentPlanResponse {
  /// The device fleet used for this edge deployment plan.
  final String deviceFleetName;

  /// The ARN of edge deployment plan.
  final String edgeDeploymentPlanArn;

  /// The name of the edge deployment plan.
  final String edgeDeploymentPlanName;

  /// List of models associated with the edge deployment plan.
  final List<EdgeDeploymentModelConfig> modelConfigs;

  /// List of stages in the edge deployment plan.
  final List<DeploymentStageStatusSummary> stages;

  /// The time when the edge deployment plan was created.
  final DateTime? creationTime;

  /// The number of edge devices that failed the deployment.
  final int? edgeDeploymentFailed;

  /// The number of edge devices yet to pick up deployment, or in progress.
  final int? edgeDeploymentPending;

  /// The number of edge devices with the successful deployment.
  final int? edgeDeploymentSuccess;

  /// The time when the edge deployment plan was last updated.
  final DateTime? lastModifiedTime;

  /// Token to use when calling the next set of stages in the edge deployment
  /// plan.
  final String? nextToken;

  DescribeEdgeDeploymentPlanResponse({
    required this.deviceFleetName,
    required this.edgeDeploymentPlanArn,
    required this.edgeDeploymentPlanName,
    required this.modelConfigs,
    required this.stages,
    this.creationTime,
    this.edgeDeploymentFailed,
    this.edgeDeploymentPending,
    this.edgeDeploymentSuccess,
    this.lastModifiedTime,
    this.nextToken,
  });

  factory DescribeEdgeDeploymentPlanResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeEdgeDeploymentPlanResponse(
      deviceFleetName: json['DeviceFleetName'] as String,
      edgeDeploymentPlanArn: json['EdgeDeploymentPlanArn'] as String,
      edgeDeploymentPlanName: json['EdgeDeploymentPlanName'] as String,
      modelConfigs: (json['ModelConfigs'] as List)
          .nonNulls
          .map((e) =>
              EdgeDeploymentModelConfig.fromJson(e as Map<String, dynamic>))
          .toList(),
      stages: (json['Stages'] as List)
          .nonNulls
          .map((e) =>
              DeploymentStageStatusSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      creationTime: timeStampFromJson(json['CreationTime']),
      edgeDeploymentFailed: json['EdgeDeploymentFailed'] as int?,
      edgeDeploymentPending: json['EdgeDeploymentPending'] as int?,
      edgeDeploymentSuccess: json['EdgeDeploymentSuccess'] as int?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetName = this.deviceFleetName;
    final edgeDeploymentPlanArn = this.edgeDeploymentPlanArn;
    final edgeDeploymentPlanName = this.edgeDeploymentPlanName;
    final modelConfigs = this.modelConfigs;
    final stages = this.stages;
    final creationTime = this.creationTime;
    final edgeDeploymentFailed = this.edgeDeploymentFailed;
    final edgeDeploymentPending = this.edgeDeploymentPending;
    final edgeDeploymentSuccess = this.edgeDeploymentSuccess;
    final lastModifiedTime = this.lastModifiedTime;
    final nextToken = this.nextToken;
    return {
      'DeviceFleetName': deviceFleetName,
      'EdgeDeploymentPlanArn': edgeDeploymentPlanArn,
      'EdgeDeploymentPlanName': edgeDeploymentPlanName,
      'ModelConfigs': modelConfigs,
      'Stages': stages,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (edgeDeploymentFailed != null)
        'EdgeDeploymentFailed': edgeDeploymentFailed,
      if (edgeDeploymentPending != null)
        'EdgeDeploymentPending': edgeDeploymentPending,
      if (edgeDeploymentSuccess != null)
        'EdgeDeploymentSuccess': edgeDeploymentSuccess,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class DescribeEdgePackagingJobResponse {
  /// The Amazon Resource Name (ARN) of the edge packaging job.
  final String edgePackagingJobArn;

  /// The name of the edge packaging job.
  final String edgePackagingJobName;

  /// The current status of the packaging job.
  final EdgePackagingJobStatus edgePackagingJobStatus;

  /// The name of the SageMaker Neo compilation job that is used to locate model
  /// artifacts that are being packaged.
  final String? compilationJobName;

  /// The timestamp of when the packaging job was created.
  final DateTime? creationTime;

  /// Returns a message describing the job status and error messages.
  final String? edgePackagingJobStatusMessage;

  /// The timestamp of when the job was last updated.
  final DateTime? lastModifiedTime;

  /// The Amazon Simple Storage (S3) URI where model artifacts ares stored.
  final String? modelArtifact;

  /// The name of the model.
  final String? modelName;

  /// The signature document of files in the model artifact.
  final String? modelSignature;

  /// The version of the model.
  final String? modelVersion;

  /// The output configuration for the edge packaging job.
  final EdgeOutputConfig? outputConfig;

  /// The output of a SageMaker Edge Manager deployable resource.
  final EdgePresetDeploymentOutput? presetDeploymentOutput;

  /// The Amazon Web Services KMS key to use when encrypting the EBS volume the
  /// job run on.
  final String? resourceKey;

  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
  /// to download and upload the model, and to contact Neo.
  final String? roleArn;

  DescribeEdgePackagingJobResponse({
    required this.edgePackagingJobArn,
    required this.edgePackagingJobName,
    required this.edgePackagingJobStatus,
    this.compilationJobName,
    this.creationTime,
    this.edgePackagingJobStatusMessage,
    this.lastModifiedTime,
    this.modelArtifact,
    this.modelName,
    this.modelSignature,
    this.modelVersion,
    this.outputConfig,
    this.presetDeploymentOutput,
    this.resourceKey,
    this.roleArn,
  });

  factory DescribeEdgePackagingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeEdgePackagingJobResponse(
      edgePackagingJobArn: json['EdgePackagingJobArn'] as String,
      edgePackagingJobName: json['EdgePackagingJobName'] as String,
      edgePackagingJobStatus: EdgePackagingJobStatus.fromString(
          (json['EdgePackagingJobStatus'] as String)),
      compilationJobName: json['CompilationJobName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      edgePackagingJobStatusMessage:
          json['EdgePackagingJobStatusMessage'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelArtifact: json['ModelArtifact'] as String?,
      modelName: json['ModelName'] as String?,
      modelSignature: json['ModelSignature'] as String?,
      modelVersion: json['ModelVersion'] as String?,
      outputConfig: json['OutputConfig'] != null
          ? EdgeOutputConfig.fromJson(
              json['OutputConfig'] as Map<String, dynamic>)
          : null,
      presetDeploymentOutput: json['PresetDeploymentOutput'] != null
          ? EdgePresetDeploymentOutput.fromJson(
              json['PresetDeploymentOutput'] as Map<String, dynamic>)
          : null,
      resourceKey: json['ResourceKey'] as String?,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobArn = this.edgePackagingJobArn;
    final edgePackagingJobName = this.edgePackagingJobName;
    final edgePackagingJobStatus = this.edgePackagingJobStatus;
    final compilationJobName = this.compilationJobName;
    final creationTime = this.creationTime;
    final edgePackagingJobStatusMessage = this.edgePackagingJobStatusMessage;
    final lastModifiedTime = this.lastModifiedTime;
    final modelArtifact = this.modelArtifact;
    final modelName = this.modelName;
    final modelSignature = this.modelSignature;
    final modelVersion = this.modelVersion;
    final outputConfig = this.outputConfig;
    final presetDeploymentOutput = this.presetDeploymentOutput;
    final resourceKey = this.resourceKey;
    final roleArn = this.roleArn;
    return {
      'EdgePackagingJobArn': edgePackagingJobArn,
      'EdgePackagingJobName': edgePackagingJobName,
      'EdgePackagingJobStatus': edgePackagingJobStatus.value,
      if (compilationJobName != null) 'CompilationJobName': compilationJobName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (edgePackagingJobStatusMessage != null)
        'EdgePackagingJobStatusMessage': edgePackagingJobStatusMessage,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelArtifact != null) 'ModelArtifact': modelArtifact,
      if (modelName != null) 'ModelName': modelName,
      if (modelSignature != null) 'ModelSignature': modelSignature,
      if (modelVersion != null) 'ModelVersion': modelVersion,
      if (outputConfig != null) 'OutputConfig': outputConfig,
      if (presetDeploymentOutput != null)
        'PresetDeploymentOutput': presetDeploymentOutput,
      if (resourceKey != null) 'ResourceKey': resourceKey,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeEndpointConfigOutput {
  /// A timestamp that shows when the endpoint configuration was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint configuration.
  final String endpointConfigArn;

  /// Name of the SageMaker endpoint configuration.
  final String endpointConfigName;

  /// An array of <code>ProductionVariant</code> objects, one for each model that
  /// you want to host at this endpoint.
  final List<ProductionVariant> productionVariants;

  /// Returns the description of an endpoint configuration created using the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">
  /// <code>CreateEndpointConfig</code> </a> API.
  final AsyncInferenceConfig? asyncInferenceConfig;
  final DataCaptureConfig? dataCaptureConfig;

  /// Indicates whether all model containers deployed to the endpoint are
  /// isolated. If they are, no inbound or outbound network calls can be made to
  /// or from the model containers.
  final bool? enableNetworkIsolation;

  /// The Amazon Resource Name (ARN) of the IAM role that you assigned to the
  /// endpoint configuration.
  final String? executionRoleArn;

  /// The configuration parameters for an explainer.
  final ExplainerConfig? explainerConfig;

  /// Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when
  /// storing it on the ML storage volume attached to the instance.
  final String? kmsKeyId;

  /// An array of <code>ProductionVariant</code> objects, one for each model that
  /// you want to host at this endpoint in shadow mode with production traffic
  /// replicated from the model specified on <code>ProductionVariants</code>.
  final List<ProductionVariant>? shadowProductionVariants;
  final VpcConfig? vpcConfig;

  DescribeEndpointConfigOutput({
    required this.creationTime,
    required this.endpointConfigArn,
    required this.endpointConfigName,
    required this.productionVariants,
    this.asyncInferenceConfig,
    this.dataCaptureConfig,
    this.enableNetworkIsolation,
    this.executionRoleArn,
    this.explainerConfig,
    this.kmsKeyId,
    this.shadowProductionVariants,
    this.vpcConfig,
  });

  factory DescribeEndpointConfigOutput.fromJson(Map<String, dynamic> json) {
    return DescribeEndpointConfigOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointConfigArn: json['EndpointConfigArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
      productionVariants: (json['ProductionVariants'] as List)
          .nonNulls
          .map((e) => ProductionVariant.fromJson(e as Map<String, dynamic>))
          .toList(),
      asyncInferenceConfig: json['AsyncInferenceConfig'] != null
          ? AsyncInferenceConfig.fromJson(
              json['AsyncInferenceConfig'] as Map<String, dynamic>)
          : null,
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? DataCaptureConfig.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      executionRoleArn: json['ExecutionRoleArn'] as String?,
      explainerConfig: json['ExplainerConfig'] != null
          ? ExplainerConfig.fromJson(
              json['ExplainerConfig'] as Map<String, dynamic>)
          : null,
      kmsKeyId: json['KmsKeyId'] as String?,
      shadowProductionVariants: (json['ShadowProductionVariants'] as List?)
          ?.nonNulls
          .map((e) => ProductionVariant.fromJson(e as Map<String, dynamic>))
          .toList(),
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointConfigArn = this.endpointConfigArn;
    final endpointConfigName = this.endpointConfigName;
    final productionVariants = this.productionVariants;
    final asyncInferenceConfig = this.asyncInferenceConfig;
    final dataCaptureConfig = this.dataCaptureConfig;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final executionRoleArn = this.executionRoleArn;
    final explainerConfig = this.explainerConfig;
    final kmsKeyId = this.kmsKeyId;
    final shadowProductionVariants = this.shadowProductionVariants;
    final vpcConfig = this.vpcConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointConfigArn': endpointConfigArn,
      'EndpointConfigName': endpointConfigName,
      'ProductionVariants': productionVariants,
      if (asyncInferenceConfig != null)
        'AsyncInferenceConfig': asyncInferenceConfig,
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (executionRoleArn != null) 'ExecutionRoleArn': executionRoleArn,
      if (explainerConfig != null) 'ExplainerConfig': explainerConfig,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (shadowProductionVariants != null)
        'ShadowProductionVariants': shadowProductionVariants,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeEndpointOutput {
  /// A timestamp that shows when the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// Name of the endpoint.
  final String endpointName;

  /// The status of the endpoint.
  ///
  /// <ul>
  /// <li>
  /// <code>OutOfService</code>: Endpoint is not available to take incoming
  /// requests.
  /// </li>
  /// <li>
  /// <code>Creating</code>: <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// is executing.
  /// </li>
  /// <li>
  /// <code>Updating</code>: <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpoint</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html">UpdateEndpointWeightsAndCapacities</a>
  /// is executing.
  /// </li>
  /// <li>
  /// <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot
  /// be updated or deleted or re-scaled until it has completed. This maintenance
  /// operation does not change any customer-specified values such as VPC config,
  /// KMS encryption, model, instance type, or instance count.
  /// </li>
  /// <li>
  /// <code>RollingBack</code>: Endpoint fails to scale up or down or change its
  /// variant weight and is in the process of rolling back to its previous
  /// configuration. Once the rollback completes, endpoint returns to an
  /// <code>InService</code> status. This transitional status only applies to an
  /// endpoint that has autoscaling enabled and is undergoing variant weight or
  /// capacity changes as part of an <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html">UpdateEndpointWeightsAndCapacities</a>
  /// call or when the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html">UpdateEndpointWeightsAndCapacities</a>
  /// operation is called explicitly.
  /// </li>
  /// <li>
  /// <code>InService</code>: Endpoint is available to process incoming requests.
  /// </li>
  /// <li>
  /// <code>Deleting</code>: <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html">DeleteEndpoint</a>
  /// is executing.
  /// </li>
  /// <li>
  /// <code>Failed</code>: Endpoint could not be created, updated, or re-scaled.
  /// Use the <code>FailureReason</code> value returned by <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a>
  /// for information about the failure. <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html">DeleteEndpoint</a>
  /// is the only operation that can be performed on a failed endpoint.
  /// </li>
  /// <li>
  /// <code>UpdateRollbackFailed</code>: Both the rolling deployment and
  /// auto-rollback failed. Your endpoint is in service with a mix of the old and
  /// new endpoint configurations. For information about how to remedy this issue
  /// and restore the endpoint's status to <code>InService</code>, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/deployment-guardrails-rolling.html">Rolling
  /// Deployments</a>.
  /// </li>
  /// </ul>
  final EndpointStatus endpointStatus;

  /// A timestamp that shows when the endpoint was last modified.
  final DateTime lastModifiedTime;

  /// Returns the description of an endpoint configuration created using the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">
  /// <code>CreateEndpointConfig</code> </a> API.
  final AsyncInferenceConfig? asyncInferenceConfig;
  final DataCaptureConfigSummary? dataCaptureConfig;

  /// The name of the endpoint configuration associated with this endpoint.
  final String? endpointConfigName;

  /// The configuration parameters for an explainer.
  final ExplainerConfig? explainerConfig;

  /// If the status of the endpoint is <code>Failed</code>, the reason why it
  /// failed.
  final String? failureReason;

  /// The most recent deployment configuration for the endpoint.
  final DeploymentConfig? lastDeploymentConfig;

  /// Returns the summary of an in-progress deployment. This field is only
  /// returned when the endpoint is creating or updating with a new endpoint
  /// configuration.
  final PendingDeploymentSummary? pendingDeploymentSummary;

  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariantSummary.html">ProductionVariantSummary</a>
  /// objects, one for each model hosted behind this endpoint.
  final List<ProductionVariantSummary>? productionVariants;

  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariantSummary.html">ProductionVariantSummary</a>
  /// objects, one for each model that you want to host at this endpoint in shadow
  /// mode with production traffic replicated from the model specified on
  /// <code>ProductionVariants</code>.
  final List<ProductionVariantSummary>? shadowProductionVariants;

  DescribeEndpointOutput({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
    this.asyncInferenceConfig,
    this.dataCaptureConfig,
    this.endpointConfigName,
    this.explainerConfig,
    this.failureReason,
    this.lastDeploymentConfig,
    this.pendingDeploymentSummary,
    this.productionVariants,
    this.shadowProductionVariants,
  });

  factory DescribeEndpointOutput.fromJson(Map<String, dynamic> json) {
    return DescribeEndpointOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus:
          EndpointStatus.fromString((json['EndpointStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      asyncInferenceConfig: json['AsyncInferenceConfig'] != null
          ? AsyncInferenceConfig.fromJson(
              json['AsyncInferenceConfig'] as Map<String, dynamic>)
          : null,
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? DataCaptureConfigSummary.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      endpointConfigName: json['EndpointConfigName'] as String?,
      explainerConfig: json['ExplainerConfig'] != null
          ? ExplainerConfig.fromJson(
              json['ExplainerConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      lastDeploymentConfig: json['LastDeploymentConfig'] != null
          ? DeploymentConfig.fromJson(
              json['LastDeploymentConfig'] as Map<String, dynamic>)
          : null,
      pendingDeploymentSummary: json['PendingDeploymentSummary'] != null
          ? PendingDeploymentSummary.fromJson(
              json['PendingDeploymentSummary'] as Map<String, dynamic>)
          : null,
      productionVariants: (json['ProductionVariants'] as List?)
          ?.nonNulls
          .map((e) =>
              ProductionVariantSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      shadowProductionVariants: (json['ShadowProductionVariants'] as List?)
          ?.nonNulls
          .map((e) =>
              ProductionVariantSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final asyncInferenceConfig = this.asyncInferenceConfig;
    final dataCaptureConfig = this.dataCaptureConfig;
    final endpointConfigName = this.endpointConfigName;
    final explainerConfig = this.explainerConfig;
    final failureReason = this.failureReason;
    final lastDeploymentConfig = this.lastDeploymentConfig;
    final pendingDeploymentSummary = this.pendingDeploymentSummary;
    final productionVariants = this.productionVariants;
    final shadowProductionVariants = this.shadowProductionVariants;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (asyncInferenceConfig != null)
        'AsyncInferenceConfig': asyncInferenceConfig,
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (endpointConfigName != null) 'EndpointConfigName': endpointConfigName,
      if (explainerConfig != null) 'ExplainerConfig': explainerConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastDeploymentConfig != null)
        'LastDeploymentConfig': lastDeploymentConfig,
      if (pendingDeploymentSummary != null)
        'PendingDeploymentSummary': pendingDeploymentSummary,
      if (productionVariants != null) 'ProductionVariants': productionVariants,
      if (shadowProductionVariants != null)
        'ShadowProductionVariants': shadowProductionVariants,
    };
  }
}

class DescribeExperimentResponse {
  /// Who created the experiment.
  final UserContext? createdBy;

  /// When the experiment was created.
  final DateTime? creationTime;

  /// The description of the experiment.
  final String? description;

  /// The name of the experiment as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>ExperimentName</code> is displayed.
  final String? displayName;

  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  /// The name of the experiment.
  final String? experimentName;

  /// Who last modified the experiment.
  final UserContext? lastModifiedBy;

  /// When the experiment was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the source and, optionally, the type.
  final ExperimentSource? source;

  DescribeExperimentResponse({
    this.createdBy,
    this.creationTime,
    this.description,
    this.displayName,
    this.experimentArn,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.source,
  });

  factory DescribeExperimentResponse.fromJson(Map<String, dynamic> json) {
    return DescribeExperimentResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      experimentArn: json['ExperimentArn'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ExperimentSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final experimentArn = this.experimentArn;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (experimentArn != null) 'ExperimentArn': experimentArn,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
    };
  }
}

class DescribeFeatureGroupResponse {
  /// A timestamp indicating when SageMaker created the <code>FeatureGroup</code>.
  final DateTime creationTime;

  /// The name of the feature that stores the <code>EventTime</code> of a Record
  /// in a <code>FeatureGroup</code>.
  ///
  /// An <code>EventTime</code> is a point in time when a new event occurs that
  /// corresponds to the creation or update of a <code>Record</code> in a
  /// <code>FeatureGroup</code>. All <code>Records</code> in the
  /// <code>FeatureGroup</code> have a corresponding <code>EventTime</code>.
  final String eventTimeFeatureName;

  /// A list of the <code>Features</code> in the <code>FeatureGroup</code>. Each
  /// feature is defined by a <code>FeatureName</code> and
  /// <code>FeatureType</code>.
  final List<FeatureDefinition> featureDefinitions;

  /// The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>.
  final String featureGroupArn;

  /// he name of the <code>FeatureGroup</code>.
  final String featureGroupName;

  /// A token to resume pagination of the list of <code>Features</code>
  /// (<code>FeatureDefinitions</code>).
  final String nextToken;

  /// The name of the <code>Feature</code> used for <code>RecordIdentifier</code>,
  /// whose value uniquely identifies a record stored in the feature store.
  final String recordIdentifierFeatureName;

  /// A free form description of the feature group.
  final String? description;

  /// The reason that the <code>FeatureGroup</code> failed to be replicated in the
  /// <code>OfflineStore</code>. This is failure can occur because:
  ///
  /// <ul>
  /// <li>
  /// The <code>FeatureGroup</code> could not be created in the
  /// <code>OfflineStore</code>.
  /// </li>
  /// <li>
  /// The <code>FeatureGroup</code> could not be deleted from the
  /// <code>OfflineStore</code>.
  /// </li>
  /// </ul>
  final String? failureReason;

  /// The status of the feature group.
  final FeatureGroupStatus? featureGroupStatus;

  /// A timestamp indicating when the feature group was last updated.
  final DateTime? lastModifiedTime;

  /// A value indicating whether the update made to the feature group was
  /// successful.
  final LastUpdateStatus? lastUpdateStatus;

  /// The configuration of the offline store. It includes the following
  /// configurations:
  ///
  /// <ul>
  /// <li>
  /// Amazon S3 location of the offline store.
  /// </li>
  /// <li>
  /// Configuration of the Glue data catalog.
  /// </li>
  /// <li>
  /// Table format of the offline store.
  /// </li>
  /// <li>
  /// Option to disable the automatic creation of a Glue table for the offline
  /// store.
  /// </li>
  /// <li>
  /// Encryption configuration.
  /// </li>
  /// </ul>
  final OfflineStoreConfig? offlineStoreConfig;

  /// The status of the <code>OfflineStore</code>. Notifies you if replicating
  /// data into the <code>OfflineStore</code> has failed. Returns either:
  /// <code>Active</code> or <code>Blocked</code>
  final OfflineStoreStatus? offlineStoreStatus;

  /// The configuration for the <code>OnlineStore</code>.
  final OnlineStoreConfig? onlineStoreConfig;

  /// The size of the <code>OnlineStore</code> in bytes.
  final int? onlineStoreTotalSizeBytes;

  /// The Amazon Resource Name (ARN) of the IAM execution role used to persist
  /// data into the OfflineStore if an OfflineStoreConfig is provided.
  final String? roleArn;
  final ThroughputConfigDescription? throughputConfig;

  DescribeFeatureGroupResponse({
    required this.creationTime,
    required this.eventTimeFeatureName,
    required this.featureDefinitions,
    required this.featureGroupArn,
    required this.featureGroupName,
    required this.nextToken,
    required this.recordIdentifierFeatureName,
    this.description,
    this.failureReason,
    this.featureGroupStatus,
    this.lastModifiedTime,
    this.lastUpdateStatus,
    this.offlineStoreConfig,
    this.offlineStoreStatus,
    this.onlineStoreConfig,
    this.onlineStoreTotalSizeBytes,
    this.roleArn,
    this.throughputConfig,
  });

  factory DescribeFeatureGroupResponse.fromJson(Map<String, dynamic> json) {
    return DescribeFeatureGroupResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      eventTimeFeatureName: json['EventTimeFeatureName'] as String,
      featureDefinitions: (json['FeatureDefinitions'] as List)
          .nonNulls
          .map((e) => FeatureDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      featureGroupArn: json['FeatureGroupArn'] as String,
      featureGroupName: json['FeatureGroupName'] as String,
      nextToken: json['NextToken'] as String,
      recordIdentifierFeatureName:
          json['RecordIdentifierFeatureName'] as String,
      description: json['Description'] as String?,
      failureReason: json['FailureReason'] as String?,
      featureGroupStatus: (json['FeatureGroupStatus'] as String?)
          ?.let(FeatureGroupStatus.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastUpdateStatus: json['LastUpdateStatus'] != null
          ? LastUpdateStatus.fromJson(
              json['LastUpdateStatus'] as Map<String, dynamic>)
          : null,
      offlineStoreConfig: json['OfflineStoreConfig'] != null
          ? OfflineStoreConfig.fromJson(
              json['OfflineStoreConfig'] as Map<String, dynamic>)
          : null,
      offlineStoreStatus: json['OfflineStoreStatus'] != null
          ? OfflineStoreStatus.fromJson(
              json['OfflineStoreStatus'] as Map<String, dynamic>)
          : null,
      onlineStoreConfig: json['OnlineStoreConfig'] != null
          ? OnlineStoreConfig.fromJson(
              json['OnlineStoreConfig'] as Map<String, dynamic>)
          : null,
      onlineStoreTotalSizeBytes: json['OnlineStoreTotalSizeBytes'] as int?,
      roleArn: json['RoleArn'] as String?,
      throughputConfig: json['ThroughputConfig'] != null
          ? ThroughputConfigDescription.fromJson(
              json['ThroughputConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final eventTimeFeatureName = this.eventTimeFeatureName;
    final featureDefinitions = this.featureDefinitions;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final nextToken = this.nextToken;
    final recordIdentifierFeatureName = this.recordIdentifierFeatureName;
    final description = this.description;
    final failureReason = this.failureReason;
    final featureGroupStatus = this.featureGroupStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final lastUpdateStatus = this.lastUpdateStatus;
    final offlineStoreConfig = this.offlineStoreConfig;
    final offlineStoreStatus = this.offlineStoreStatus;
    final onlineStoreConfig = this.onlineStoreConfig;
    final onlineStoreTotalSizeBytes = this.onlineStoreTotalSizeBytes;
    final roleArn = this.roleArn;
    final throughputConfig = this.throughputConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EventTimeFeatureName': eventTimeFeatureName,
      'FeatureDefinitions': featureDefinitions,
      'FeatureGroupArn': featureGroupArn,
      'FeatureGroupName': featureGroupName,
      'NextToken': nextToken,
      'RecordIdentifierFeatureName': recordIdentifierFeatureName,
      if (description != null) 'Description': description,
      if (failureReason != null) 'FailureReason': failureReason,
      if (featureGroupStatus != null)
        'FeatureGroupStatus': featureGroupStatus.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastUpdateStatus != null) 'LastUpdateStatus': lastUpdateStatus,
      if (offlineStoreConfig != null) 'OfflineStoreConfig': offlineStoreConfig,
      if (offlineStoreStatus != null) 'OfflineStoreStatus': offlineStoreStatus,
      if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
      if (onlineStoreTotalSizeBytes != null)
        'OnlineStoreTotalSizeBytes': onlineStoreTotalSizeBytes,
      if (roleArn != null) 'RoleArn': roleArn,
      if (throughputConfig != null) 'ThroughputConfig': throughputConfig,
    };
  }
}

class DescribeFeatureMetadataResponse {
  /// A timestamp indicating when the feature was created.
  final DateTime creationTime;

  /// The Amazon Resource Number (ARN) of the feature group that contains the
  /// feature.
  final String featureGroupArn;

  /// The name of the feature group that you've specified.
  final String featureGroupName;

  /// The name of the feature that you've specified.
  final String featureName;

  /// The data type of the feature.
  final FeatureType featureType;

  /// A timestamp indicating when the metadata for the feature group was modified.
  /// For example, if you add a parameter describing the feature, the timestamp
  /// changes to reflect the last time you
  final DateTime lastModifiedTime;

  /// The description you added to describe the feature.
  final String? description;

  /// The key-value pairs that you added to describe the feature.
  final List<FeatureParameter>? parameters;

  DescribeFeatureMetadataResponse({
    required this.creationTime,
    required this.featureGroupArn,
    required this.featureGroupName,
    required this.featureName,
    required this.featureType,
    required this.lastModifiedTime,
    this.description,
    this.parameters,
  });

  factory DescribeFeatureMetadataResponse.fromJson(Map<String, dynamic> json) {
    return DescribeFeatureMetadataResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      featureGroupArn: json['FeatureGroupArn'] as String,
      featureGroupName: json['FeatureGroupName'] as String,
      featureName: json['FeatureName'] as String,
      featureType: FeatureType.fromString((json['FeatureType'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      description: json['Description'] as String?,
      parameters: (json['Parameters'] as List?)
          ?.nonNulls
          .map((e) => FeatureParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final featureName = this.featureName;
    final featureType = this.featureType;
    final lastModifiedTime = this.lastModifiedTime;
    final description = this.description;
    final parameters = this.parameters;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FeatureGroupArn': featureGroupArn,
      'FeatureGroupName': featureGroupName,
      'FeatureName': featureName,
      'FeatureType': featureType.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (description != null) 'Description': description,
      if (parameters != null) 'Parameters': parameters,
    };
  }
}

class DescribeFlowDefinitionResponse {
  /// The timestamp when the flow definition was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the flow defintion.
  final String flowDefinitionArn;

  /// The Amazon Resource Name (ARN) of the flow definition.
  final String flowDefinitionName;

  /// The status of the flow definition. Valid values are listed below.
  final FlowDefinitionStatus flowDefinitionStatus;

  /// An object containing information about the output file.
  final FlowDefinitionOutputConfig outputConfig;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) execution role for the flow definition.
  final String roleArn;

  /// The reason your flow definition failed.
  final String? failureReason;

  /// An object containing information about what triggers a human review
  /// workflow.
  final HumanLoopActivationConfig? humanLoopActivationConfig;

  /// An object containing information about who works on the task, the workforce
  /// task price, and other task details.
  final HumanLoopConfig? humanLoopConfig;

  /// Container for configuring the source of human task requests. Used to specify
  /// if Amazon Rekognition or Amazon Textract is used as an integration source.
  final HumanLoopRequestSource? humanLoopRequestSource;

  DescribeFlowDefinitionResponse({
    required this.creationTime,
    required this.flowDefinitionArn,
    required this.flowDefinitionName,
    required this.flowDefinitionStatus,
    required this.outputConfig,
    required this.roleArn,
    this.failureReason,
    this.humanLoopActivationConfig,
    this.humanLoopConfig,
    this.humanLoopRequestSource,
  });

  factory DescribeFlowDefinitionResponse.fromJson(Map<String, dynamic> json) {
    return DescribeFlowDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      flowDefinitionArn: json['FlowDefinitionArn'] as String,
      flowDefinitionName: json['FlowDefinitionName'] as String,
      flowDefinitionStatus: FlowDefinitionStatus.fromString(
          (json['FlowDefinitionStatus'] as String)),
      outputConfig: FlowDefinitionOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      failureReason: json['FailureReason'] as String?,
      humanLoopActivationConfig: json['HumanLoopActivationConfig'] != null
          ? HumanLoopActivationConfig.fromJson(
              json['HumanLoopActivationConfig'] as Map<String, dynamic>)
          : null,
      humanLoopConfig: json['HumanLoopConfig'] != null
          ? HumanLoopConfig.fromJson(
              json['HumanLoopConfig'] as Map<String, dynamic>)
          : null,
      humanLoopRequestSource: json['HumanLoopRequestSource'] != null
          ? HumanLoopRequestSource.fromJson(
              json['HumanLoopRequestSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final flowDefinitionArn = this.flowDefinitionArn;
    final flowDefinitionName = this.flowDefinitionName;
    final flowDefinitionStatus = this.flowDefinitionStatus;
    final outputConfig = this.outputConfig;
    final roleArn = this.roleArn;
    final failureReason = this.failureReason;
    final humanLoopActivationConfig = this.humanLoopActivationConfig;
    final humanLoopConfig = this.humanLoopConfig;
    final humanLoopRequestSource = this.humanLoopRequestSource;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FlowDefinitionArn': flowDefinitionArn,
      'FlowDefinitionName': flowDefinitionName,
      'FlowDefinitionStatus': flowDefinitionStatus.value,
      'OutputConfig': outputConfig,
      'RoleArn': roleArn,
      if (failureReason != null) 'FailureReason': failureReason,
      if (humanLoopActivationConfig != null)
        'HumanLoopActivationConfig': humanLoopActivationConfig,
      if (humanLoopConfig != null) 'HumanLoopConfig': humanLoopConfig,
      if (humanLoopRequestSource != null)
        'HumanLoopRequestSource': humanLoopRequestSource,
    };
  }
}

class DescribeHubContentResponse {
  /// The date and time that hub content was created.
  final DateTime creationTime;

  /// The document schema version for the hub content.
  final String documentSchemaVersion;

  /// The Amazon Resource Name (ARN) of the hub that contains the content.
  final String hubArn;

  /// The Amazon Resource Name (ARN) of the hub content.
  final String hubContentArn;

  /// The hub content document that describes information about the hub content
  /// such as type, associated containers, scripts, and more.
  final String hubContentDocument;

  /// The name of the hub content.
  final String hubContentName;

  /// The status of the hub content.
  final HubContentStatus hubContentStatus;

  /// The type of hub content.
  final HubContentType hubContentType;

  /// The version of the hub content.
  final String hubContentVersion;

  /// The name of the hub that contains the content.
  final String hubName;

  /// The failure reason if importing hub content failed.
  final String? failureReason;

  /// The location of any dependencies that the hub content has, such as scripts,
  /// model artifacts, datasets, or notebooks.
  final List<HubContentDependency>? hubContentDependencies;

  /// A description of the hub content.
  final String? hubContentDescription;

  /// The display name of the hub content.
  final String? hubContentDisplayName;

  /// A string that provides a description of the hub content. This string can
  /// include links, tables, and standard markdown formating.
  final String? hubContentMarkdown;

  /// The searchable keywords for the hub content.
  final List<String>? hubContentSearchKeywords;

  DescribeHubContentResponse({
    required this.creationTime,
    required this.documentSchemaVersion,
    required this.hubArn,
    required this.hubContentArn,
    required this.hubContentDocument,
    required this.hubContentName,
    required this.hubContentStatus,
    required this.hubContentType,
    required this.hubContentVersion,
    required this.hubName,
    this.failureReason,
    this.hubContentDependencies,
    this.hubContentDescription,
    this.hubContentDisplayName,
    this.hubContentMarkdown,
    this.hubContentSearchKeywords,
  });

  factory DescribeHubContentResponse.fromJson(Map<String, dynamic> json) {
    return DescribeHubContentResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      documentSchemaVersion: json['DocumentSchemaVersion'] as String,
      hubArn: json['HubArn'] as String,
      hubContentArn: json['HubContentArn'] as String,
      hubContentDocument: json['HubContentDocument'] as String,
      hubContentName: json['HubContentName'] as String,
      hubContentStatus:
          HubContentStatus.fromString((json['HubContentStatus'] as String)),
      hubContentType:
          HubContentType.fromString((json['HubContentType'] as String)),
      hubContentVersion: json['HubContentVersion'] as String,
      hubName: json['HubName'] as String,
      failureReason: json['FailureReason'] as String?,
      hubContentDependencies: (json['HubContentDependencies'] as List?)
          ?.nonNulls
          .map((e) => HubContentDependency.fromJson(e as Map<String, dynamic>))
          .toList(),
      hubContentDescription: json['HubContentDescription'] as String?,
      hubContentDisplayName: json['HubContentDisplayName'] as String?,
      hubContentMarkdown: json['HubContentMarkdown'] as String?,
      hubContentSearchKeywords: (json['HubContentSearchKeywords'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final documentSchemaVersion = this.documentSchemaVersion;
    final hubArn = this.hubArn;
    final hubContentArn = this.hubContentArn;
    final hubContentDocument = this.hubContentDocument;
    final hubContentName = this.hubContentName;
    final hubContentStatus = this.hubContentStatus;
    final hubContentType = this.hubContentType;
    final hubContentVersion = this.hubContentVersion;
    final hubName = this.hubName;
    final failureReason = this.failureReason;
    final hubContentDependencies = this.hubContentDependencies;
    final hubContentDescription = this.hubContentDescription;
    final hubContentDisplayName = this.hubContentDisplayName;
    final hubContentMarkdown = this.hubContentMarkdown;
    final hubContentSearchKeywords = this.hubContentSearchKeywords;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'DocumentSchemaVersion': documentSchemaVersion,
      'HubArn': hubArn,
      'HubContentArn': hubContentArn,
      'HubContentDocument': hubContentDocument,
      'HubContentName': hubContentName,
      'HubContentStatus': hubContentStatus.value,
      'HubContentType': hubContentType.value,
      'HubContentVersion': hubContentVersion,
      'HubName': hubName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (hubContentDependencies != null)
        'HubContentDependencies': hubContentDependencies,
      if (hubContentDescription != null)
        'HubContentDescription': hubContentDescription,
      if (hubContentDisplayName != null)
        'HubContentDisplayName': hubContentDisplayName,
      if (hubContentMarkdown != null) 'HubContentMarkdown': hubContentMarkdown,
      if (hubContentSearchKeywords != null)
        'HubContentSearchKeywords': hubContentSearchKeywords,
    };
  }
}

class DescribeHubResponse {
  /// The date and time that the hub was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the hub.
  final String hubArn;

  /// The name of the hub.
  final String hubName;

  /// The status of the hub.
  final HubStatus hubStatus;

  /// The date and time that the hub was last modified.
  final DateTime lastModifiedTime;

  /// The failure reason if importing hub content failed.
  final String? failureReason;

  /// A description of the hub.
  final String? hubDescription;

  /// The display name of the hub.
  final String? hubDisplayName;

  /// The searchable keywords for the hub.
  final List<String>? hubSearchKeywords;

  /// The Amazon S3 storage configuration for the hub.
  final HubS3StorageConfig? s3StorageConfig;

  DescribeHubResponse({
    required this.creationTime,
    required this.hubArn,
    required this.hubName,
    required this.hubStatus,
    required this.lastModifiedTime,
    this.failureReason,
    this.hubDescription,
    this.hubDisplayName,
    this.hubSearchKeywords,
    this.s3StorageConfig,
  });

  factory DescribeHubResponse.fromJson(Map<String, dynamic> json) {
    return DescribeHubResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      hubArn: json['HubArn'] as String,
      hubName: json['HubName'] as String,
      hubStatus: HubStatus.fromString((json['HubStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      failureReason: json['FailureReason'] as String?,
      hubDescription: json['HubDescription'] as String?,
      hubDisplayName: json['HubDisplayName'] as String?,
      hubSearchKeywords: (json['HubSearchKeywords'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      s3StorageConfig: json['S3StorageConfig'] != null
          ? HubS3StorageConfig.fromJson(
              json['S3StorageConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final hubArn = this.hubArn;
    final hubName = this.hubName;
    final hubStatus = this.hubStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final failureReason = this.failureReason;
    final hubDescription = this.hubDescription;
    final hubDisplayName = this.hubDisplayName;
    final hubSearchKeywords = this.hubSearchKeywords;
    final s3StorageConfig = this.s3StorageConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HubArn': hubArn,
      'HubName': hubName,
      'HubStatus': hubStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (hubDescription != null) 'HubDescription': hubDescription,
      if (hubDisplayName != null) 'HubDisplayName': hubDisplayName,
      if (hubSearchKeywords != null) 'HubSearchKeywords': hubSearchKeywords,
      if (s3StorageConfig != null) 'S3StorageConfig': s3StorageConfig,
    };
  }
}

class DescribeHumanTaskUiResponse {
  /// The timestamp when the human task user interface was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the human task user interface (worker task
  /// template).
  final String humanTaskUiArn;

  /// The name of the human task user interface (worker task template).
  final String humanTaskUiName;
  final UiTemplateInfo uiTemplate;

  /// The status of the human task user interface (worker task template). Valid
  /// values are listed below.
  final HumanTaskUiStatus? humanTaskUiStatus;

  DescribeHumanTaskUiResponse({
    required this.creationTime,
    required this.humanTaskUiArn,
    required this.humanTaskUiName,
    required this.uiTemplate,
    this.humanTaskUiStatus,
  });

  factory DescribeHumanTaskUiResponse.fromJson(Map<String, dynamic> json) {
    return DescribeHumanTaskUiResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
      humanTaskUiName: json['HumanTaskUiName'] as String,
      uiTemplate:
          UiTemplateInfo.fromJson(json['UiTemplate'] as Map<String, dynamic>),
      humanTaskUiStatus: (json['HumanTaskUiStatus'] as String?)
          ?.let(HumanTaskUiStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final humanTaskUiArn = this.humanTaskUiArn;
    final humanTaskUiName = this.humanTaskUiName;
    final uiTemplate = this.uiTemplate;
    final humanTaskUiStatus = this.humanTaskUiStatus;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HumanTaskUiArn': humanTaskUiArn,
      'HumanTaskUiName': humanTaskUiName,
      'UiTemplate': uiTemplate,
      if (humanTaskUiStatus != null)
        'HumanTaskUiStatus': humanTaskUiStatus.value,
    };
  }
}

class DescribeHyperParameterTuningJobResponse {
  /// The date and time that the tuning job started.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the tuning job.
  final String hyperParameterTuningJobArn;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>
  /// object that specifies the configuration of the tuning job.
  final HyperParameterTuningJobConfig hyperParameterTuningJobConfig;

  /// The name of the hyperparameter tuning job.
  final String hyperParameterTuningJobName;

  /// The status of the tuning job.
  final HyperParameterTuningJobStatus hyperParameterTuningJobStatus;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ObjectiveStatusCounters.html">ObjectiveStatusCounters</a>
  /// object that specifies the number of training jobs, categorized by the status
  /// of their final objective metric, that this tuning job launched.
  final ObjectiveStatusCounters objectiveStatusCounters;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobStatusCounters.html">TrainingJobStatusCounters</a>
  /// object that specifies the number of training jobs, categorized by status,
  /// that this tuning job launched.
  final TrainingJobStatusCounters trainingJobStatusCounters;

  /// A flag to indicate if autotune is enabled for the hyperparameter tuning job.
  final Autotune? autotune;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a>
  /// object that describes the training job that completed with the best current
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobObjective.html">HyperParameterTuningJobObjective</a>.
  final HyperParameterTrainingJobSummary? bestTrainingJob;
  final HyperParameterTuningJobConsumedResources? consumedResources;

  /// If the tuning job failed, the reason it failed.
  final String? failureReason;

  /// The date and time that the tuning job ended.
  final DateTime? hyperParameterTuningEndTime;

  /// The date and time that the status of the tuning job was modified.
  final DateTime? lastModifiedTime;

  /// If the hyperparameter tuning job is an warm start tuning job with a
  /// <code>WarmStartType</code> of <code>IDENTICAL_DATA_AND_ALGORITHM</code>,
  /// this is the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a>
  /// for the training job with the best objective metric value of all training
  /// jobs launched by this tuning job and all parent jobs specified for the warm
  /// start tuning job.
  final HyperParameterTrainingJobSummary? overallBestTrainingJob;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html">HyperParameterTrainingJobDefinition</a>
  /// object that specifies the definition of the training jobs that this tuning
  /// job launches.
  final HyperParameterTrainingJobDefinition? trainingJobDefinition;

  /// A list of the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html">HyperParameterTrainingJobDefinition</a>
  /// objects launched for this tuning job.
  final List<HyperParameterTrainingJobDefinition>? trainingJobDefinitions;

  /// Tuning job completion information returned as the response from a
  /// hyperparameter tuning job. This information tells if your tuning job has or
  /// has not converged. It also includes the number of training jobs that have
  /// not improved model performance as evaluated against the objective function.
  final HyperParameterTuningJobCompletionDetails? tuningJobCompletionDetails;

  /// The configuration for starting the hyperparameter parameter tuning job using
  /// one or more previous tuning jobs as a starting point. The results of
  /// previous tuning jobs are used to inform which combinations of
  /// hyperparameters to search over in the new tuning job.
  final HyperParameterTuningJobWarmStartConfig? warmStartConfig;

  DescribeHyperParameterTuningJobResponse({
    required this.creationTime,
    required this.hyperParameterTuningJobArn,
    required this.hyperParameterTuningJobConfig,
    required this.hyperParameterTuningJobName,
    required this.hyperParameterTuningJobStatus,
    required this.objectiveStatusCounters,
    required this.trainingJobStatusCounters,
    this.autotune,
    this.bestTrainingJob,
    this.consumedResources,
    this.failureReason,
    this.hyperParameterTuningEndTime,
    this.lastModifiedTime,
    this.overallBestTrainingJob,
    this.trainingJobDefinition,
    this.trainingJobDefinitions,
    this.tuningJobCompletionDetails,
    this.warmStartConfig,
  });

  factory DescribeHyperParameterTuningJobResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeHyperParameterTuningJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String,
      hyperParameterTuningJobConfig: HyperParameterTuningJobConfig.fromJson(
          json['HyperParameterTuningJobConfig'] as Map<String, dynamic>),
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String,
      hyperParameterTuningJobStatus: HyperParameterTuningJobStatus.fromString(
          (json['HyperParameterTuningJobStatus'] as String)),
      objectiveStatusCounters: ObjectiveStatusCounters.fromJson(
          json['ObjectiveStatusCounters'] as Map<String, dynamic>),
      trainingJobStatusCounters: TrainingJobStatusCounters.fromJson(
          json['TrainingJobStatusCounters'] as Map<String, dynamic>),
      autotune: json['Autotune'] != null
          ? Autotune.fromJson(json['Autotune'] as Map<String, dynamic>)
          : null,
      bestTrainingJob: json['BestTrainingJob'] != null
          ? HyperParameterTrainingJobSummary.fromJson(
              json['BestTrainingJob'] as Map<String, dynamic>)
          : null,
      consumedResources: json['ConsumedResources'] != null
          ? HyperParameterTuningJobConsumedResources.fromJson(
              json['ConsumedResources'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      hyperParameterTuningEndTime:
          timeStampFromJson(json['HyperParameterTuningEndTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      overallBestTrainingJob: json['OverallBestTrainingJob'] != null
          ? HyperParameterTrainingJobSummary.fromJson(
              json['OverallBestTrainingJob'] as Map<String, dynamic>)
          : null,
      trainingJobDefinition: json['TrainingJobDefinition'] != null
          ? HyperParameterTrainingJobDefinition.fromJson(
              json['TrainingJobDefinition'] as Map<String, dynamic>)
          : null,
      trainingJobDefinitions: (json['TrainingJobDefinitions'] as List?)
          ?.nonNulls
          .map((e) => HyperParameterTrainingJobDefinition.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      tuningJobCompletionDetails: json['TuningJobCompletionDetails'] != null
          ? HyperParameterTuningJobCompletionDetails.fromJson(
              json['TuningJobCompletionDetails'] as Map<String, dynamic>)
          : null,
      warmStartConfig: json['WarmStartConfig'] != null
          ? HyperParameterTuningJobWarmStartConfig.fromJson(
              json['WarmStartConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    final hyperParameterTuningJobConfig = this.hyperParameterTuningJobConfig;
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    final hyperParameterTuningJobStatus = this.hyperParameterTuningJobStatus;
    final objectiveStatusCounters = this.objectiveStatusCounters;
    final trainingJobStatusCounters = this.trainingJobStatusCounters;
    final autotune = this.autotune;
    final bestTrainingJob = this.bestTrainingJob;
    final consumedResources = this.consumedResources;
    final failureReason = this.failureReason;
    final hyperParameterTuningEndTime = this.hyperParameterTuningEndTime;
    final lastModifiedTime = this.lastModifiedTime;
    final overallBestTrainingJob = this.overallBestTrainingJob;
    final trainingJobDefinition = this.trainingJobDefinition;
    final trainingJobDefinitions = this.trainingJobDefinitions;
    final tuningJobCompletionDetails = this.tuningJobCompletionDetails;
    final warmStartConfig = this.warmStartConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
      'HyperParameterTuningJobConfig': hyperParameterTuningJobConfig,
      'HyperParameterTuningJobName': hyperParameterTuningJobName,
      'HyperParameterTuningJobStatus': hyperParameterTuningJobStatus.value,
      'ObjectiveStatusCounters': objectiveStatusCounters,
      'TrainingJobStatusCounters': trainingJobStatusCounters,
      if (autotune != null) 'Autotune': autotune,
      if (bestTrainingJob != null) 'BestTrainingJob': bestTrainingJob,
      if (consumedResources != null) 'ConsumedResources': consumedResources,
      if (failureReason != null) 'FailureReason': failureReason,
      if (hyperParameterTuningEndTime != null)
        'HyperParameterTuningEndTime':
            unixTimestampToJson(hyperParameterTuningEndTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (overallBestTrainingJob != null)
        'OverallBestTrainingJob': overallBestTrainingJob,
      if (trainingJobDefinition != null)
        'TrainingJobDefinition': trainingJobDefinition,
      if (trainingJobDefinitions != null)
        'TrainingJobDefinitions': trainingJobDefinitions,
      if (tuningJobCompletionDetails != null)
        'TuningJobCompletionDetails': tuningJobCompletionDetails,
      if (warmStartConfig != null) 'WarmStartConfig': warmStartConfig,
    };
  }
}

class DescribeImageResponse {
  /// When the image was created.
  final DateTime? creationTime;

  /// The description of the image.
  final String? description;

  /// The name of the image as displayed.
  final String? displayName;

  /// When a create, update, or delete operation fails, the reason for the
  /// failure.
  final String? failureReason;

  /// The ARN of the image.
  final String? imageArn;

  /// The name of the image.
  final String? imageName;

  /// The status of the image.
  final ImageStatus? imageStatus;

  /// When the image was last modified.
  final DateTime? lastModifiedTime;

  /// The ARN of the IAM role that enables Amazon SageMaker to perform tasks on
  /// your behalf.
  final String? roleArn;

  DescribeImageResponse({
    this.creationTime,
    this.description,
    this.displayName,
    this.failureReason,
    this.imageArn,
    this.imageName,
    this.imageStatus,
    this.lastModifiedTime,
    this.roleArn,
  });

  factory DescribeImageResponse.fromJson(Map<String, dynamic> json) {
    return DescribeImageResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      failureReason: json['FailureReason'] as String?,
      imageArn: json['ImageArn'] as String?,
      imageName: json['ImageName'] as String?,
      imageStatus:
          (json['ImageStatus'] as String?)?.let(ImageStatus.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final failureReason = this.failureReason;
    final imageArn = this.imageArn;
    final imageName = this.imageName;
    final imageStatus = this.imageStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final roleArn = this.roleArn;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (imageArn != null) 'ImageArn': imageArn,
      if (imageName != null) 'ImageName': imageName,
      if (imageStatus != null) 'ImageStatus': imageStatus.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeImageVersionResponse {
  /// The registry path of the container image on which this image version is
  /// based.
  final String? baseImage;

  /// The registry path of the container image that contains this image version.
  final String? containerImage;

  /// When the version was created.
  final DateTime? creationTime;

  /// When a create or delete operation fails, the reason for the failure.
  final String? failureReason;

  /// Indicates Horovod compatibility.
  final bool? horovod;

  /// The ARN of the image the version is based on.
  final String? imageArn;

  /// The ARN of the version.
  final String? imageVersionArn;

  /// The status of the version.
  final ImageVersionStatus? imageVersionStatus;

  /// Indicates SageMaker job type compatibility.
  ///
  /// <ul>
  /// <li>
  /// <code>TRAINING</code>: The image version is compatible with SageMaker
  /// training jobs.
  /// </li>
  /// <li>
  /// <code>INFERENCE</code>: The image version is compatible with SageMaker
  /// inference jobs.
  /// </li>
  /// <li>
  /// <code>NOTEBOOK_KERNEL</code>: The image version is compatible with SageMaker
  /// notebook kernels.
  /// </li>
  /// </ul>
  final JobType? jobType;

  /// When the version was last modified.
  final DateTime? lastModifiedTime;

  /// The machine learning framework vended in the image version.
  final String? mLFramework;

  /// Indicates CPU or GPU compatibility.
  ///
  /// <ul>
  /// <li>
  /// <code>CPU</code>: The image version is compatible with CPU.
  /// </li>
  /// <li>
  /// <code>GPU</code>: The image version is compatible with GPU.
  /// </li>
  /// </ul>
  final Processor? processor;

  /// The supported programming language and its version.
  final String? programmingLang;

  /// The maintainer description of the image version.
  final String? releaseNotes;

  /// The stability of the image version specified by the maintainer.
  ///
  /// <ul>
  /// <li>
  /// <code>NOT_PROVIDED</code>: The maintainers did not provide a status for
  /// image version stability.
  /// </li>
  /// <li>
  /// <code>STABLE</code>: The image version is stable.
  /// </li>
  /// <li>
  /// <code>TO_BE_ARCHIVED</code>: The image version is set to be archived. Custom
  /// image versions that are set to be archived are automatically archived after
  /// three months.
  /// </li>
  /// <li>
  /// <code>ARCHIVED</code>: The image version is archived. Archived image
  /// versions are not searchable and are no longer actively supported.
  /// </li>
  /// </ul>
  final VendorGuidance? vendorGuidance;

  /// The version number.
  final int? version;

  DescribeImageVersionResponse({
    this.baseImage,
    this.containerImage,
    this.creationTime,
    this.failureReason,
    this.horovod,
    this.imageArn,
    this.imageVersionArn,
    this.imageVersionStatus,
    this.jobType,
    this.lastModifiedTime,
    this.mLFramework,
    this.processor,
    this.programmingLang,
    this.releaseNotes,
    this.vendorGuidance,
    this.version,
  });

  factory DescribeImageVersionResponse.fromJson(Map<String, dynamic> json) {
    return DescribeImageVersionResponse(
      baseImage: json['BaseImage'] as String?,
      containerImage: json['ContainerImage'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      horovod: json['Horovod'] as bool?,
      imageArn: json['ImageArn'] as String?,
      imageVersionArn: json['ImageVersionArn'] as String?,
      imageVersionStatus: (json['ImageVersionStatus'] as String?)
          ?.let(ImageVersionStatus.fromString),
      jobType: (json['JobType'] as String?)?.let(JobType.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      mLFramework: json['MLFramework'] as String?,
      processor: (json['Processor'] as String?)?.let(Processor.fromString),
      programmingLang: json['ProgrammingLang'] as String?,
      releaseNotes: json['ReleaseNotes'] as String?,
      vendorGuidance:
          (json['VendorGuidance'] as String?)?.let(VendorGuidance.fromString),
      version: json['Version'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final baseImage = this.baseImage;
    final containerImage = this.containerImage;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final horovod = this.horovod;
    final imageArn = this.imageArn;
    final imageVersionArn = this.imageVersionArn;
    final imageVersionStatus = this.imageVersionStatus;
    final jobType = this.jobType;
    final lastModifiedTime = this.lastModifiedTime;
    final mLFramework = this.mLFramework;
    final processor = this.processor;
    final programmingLang = this.programmingLang;
    final releaseNotes = this.releaseNotes;
    final vendorGuidance = this.vendorGuidance;
    final version = this.version;
    return {
      if (baseImage != null) 'BaseImage': baseImage,
      if (containerImage != null) 'ContainerImage': containerImage,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (horovod != null) 'Horovod': horovod,
      if (imageArn != null) 'ImageArn': imageArn,
      if (imageVersionArn != null) 'ImageVersionArn': imageVersionArn,
      if (imageVersionStatus != null)
        'ImageVersionStatus': imageVersionStatus.value,
      if (jobType != null) 'JobType': jobType.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (mLFramework != null) 'MLFramework': mLFramework,
      if (processor != null) 'Processor': processor.value,
      if (programmingLang != null) 'ProgrammingLang': programmingLang,
      if (releaseNotes != null) 'ReleaseNotes': releaseNotes,
      if (vendorGuidance != null) 'VendorGuidance': vendorGuidance.value,
      if (version != null) 'Version': version,
    };
  }
}

class DescribeInferenceComponentOutput {
  /// The time when the inference component was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint that hosts the inference
  /// component.
  final String endpointArn;

  /// The name of the endpoint that hosts the inference component.
  final String endpointName;

  /// The Amazon Resource Name (ARN) of the inference component.
  final String inferenceComponentArn;

  /// The name of the inference component.
  final String inferenceComponentName;

  /// The time when the inference component was last updated.
  final DateTime lastModifiedTime;

  /// If the inference component status is <code>Failed</code>, the reason for the
  /// failure.
  final String? failureReason;

  /// The status of the inference component.
  final InferenceComponentStatus? inferenceComponentStatus;

  /// Details about the runtime settings for the model that is deployed with the
  /// inference component.
  final InferenceComponentRuntimeConfigSummary? runtimeConfig;

  /// Details about the resources that are deployed with this inference component.
  final InferenceComponentSpecificationSummary? specification;

  /// The name of the production variant that hosts the inference component.
  final String? variantName;

  DescribeInferenceComponentOutput({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointName,
    required this.inferenceComponentArn,
    required this.inferenceComponentName,
    required this.lastModifiedTime,
    this.failureReason,
    this.inferenceComponentStatus,
    this.runtimeConfig,
    this.specification,
    this.variantName,
  });

  factory DescribeInferenceComponentOutput.fromJson(Map<String, dynamic> json) {
    return DescribeInferenceComponentOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointName: json['EndpointName'] as String,
      inferenceComponentArn: json['InferenceComponentArn'] as String,
      inferenceComponentName: json['InferenceComponentName'] as String,
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      failureReason: json['FailureReason'] as String?,
      inferenceComponentStatus: (json['InferenceComponentStatus'] as String?)
          ?.let(InferenceComponentStatus.fromString),
      runtimeConfig: json['RuntimeConfig'] != null
          ? InferenceComponentRuntimeConfigSummary.fromJson(
              json['RuntimeConfig'] as Map<String, dynamic>)
          : null,
      specification: json['Specification'] != null
          ? InferenceComponentSpecificationSummary.fromJson(
              json['Specification'] as Map<String, dynamic>)
          : null,
      variantName: json['VariantName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointName = this.endpointName;
    final inferenceComponentArn = this.inferenceComponentArn;
    final inferenceComponentName = this.inferenceComponentName;
    final lastModifiedTime = this.lastModifiedTime;
    final failureReason = this.failureReason;
    final inferenceComponentStatus = this.inferenceComponentStatus;
    final runtimeConfig = this.runtimeConfig;
    final specification = this.specification;
    final variantName = this.variantName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointName': endpointName,
      'InferenceComponentArn': inferenceComponentArn,
      'InferenceComponentName': inferenceComponentName,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (inferenceComponentStatus != null)
        'InferenceComponentStatus': inferenceComponentStatus.value,
      if (runtimeConfig != null) 'RuntimeConfig': runtimeConfig,
      if (specification != null) 'Specification': specification,
      if (variantName != null) 'VariantName': variantName,
    };
  }
}

class DescribeInferenceExperimentResponse {
  /// The ARN of the inference experiment being described.
  final String arn;

  /// The metadata of the endpoint on which the inference experiment ran.
  final EndpointMetadata endpointMetadata;

  /// An array of <code>ModelVariantConfigSummary</code> objects. There is one for
  /// each variant in the inference experiment. Each
  /// <code>ModelVariantConfigSummary</code> object in the array describes the
  /// infrastructure configuration for deploying the corresponding variant.
  final List<ModelVariantConfigSummary> modelVariants;

  /// The name of the inference experiment.
  final String name;

  /// The status of the inference experiment. The following are the possible
  /// statuses for an inference experiment:
  ///
  /// <ul>
  /// <li>
  /// <code>Creating</code> - Amazon SageMaker is creating your experiment.
  /// </li>
  /// <li>
  /// <code>Created</code> - Amazon SageMaker has finished the creation of your
  /// experiment and will begin the experiment at the scheduled time.
  /// </li>
  /// <li>
  /// <code>Updating</code> - When you make changes to your experiment, your
  /// experiment shows as updating.
  /// </li>
  /// <li>
  /// <code>Starting</code> - Amazon SageMaker is beginning your experiment.
  /// </li>
  /// <li>
  /// <code>Running</code> - Your experiment is in progress.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - Amazon SageMaker is stopping your experiment.
  /// </li>
  /// <li>
  /// <code>Completed</code> - Your experiment has completed.
  /// </li>
  /// <li>
  /// <code>Cancelled</code> - When you conclude your experiment early using the
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopInferenceExperiment.html">StopInferenceExperiment</a>
  /// API, or if any operation fails with an unexpected error, it shows as
  /// cancelled.
  /// </li>
  /// </ul>
  final InferenceExperimentStatus status;

  /// The type of the inference experiment.
  final InferenceExperimentType type;

  /// The timestamp at which the inference experiment was completed.
  final DateTime? completionTime;

  /// The timestamp at which you created the inference experiment.
  final DateTime? creationTime;

  /// The Amazon S3 location and configuration for storing inference request and
  /// response data.
  final InferenceExperimentDataStorageConfig? dataStorageConfig;

  /// The description of the inference experiment.
  final String? description;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume attached to
  /// the ML compute instance that hosts the endpoint. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceExperiment.html">CreateInferenceExperiment</a>.
  final String? kmsKey;

  /// The timestamp at which you last modified the inference experiment.
  final DateTime? lastModifiedTime;

  /// The ARN of the IAM role that Amazon SageMaker can assume to access model
  /// artifacts and container images, and manage Amazon SageMaker Inference
  /// endpoints for model deployment.
  final String? roleArn;

  /// The duration for which the inference experiment ran or will run.
  final InferenceExperimentSchedule? schedule;

  /// The configuration of <code>ShadowMode</code> inference experiment type,
  /// which shows the production variant that takes all the inference requests,
  /// and the shadow variant to which Amazon SageMaker replicates a percentage of
  /// the inference requests. For the shadow variant it also shows the percentage
  /// of requests that Amazon SageMaker replicates.
  final ShadowModeConfig? shadowModeConfig;

  /// The error message or client-specified <code>Reason</code> from the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopInferenceExperiment.html">StopInferenceExperiment</a>
  /// API, that explains the status of the inference experiment.
  final String? statusReason;

  DescribeInferenceExperimentResponse({
    required this.arn,
    required this.endpointMetadata,
    required this.modelVariants,
    required this.name,
    required this.status,
    required this.type,
    this.completionTime,
    this.creationTime,
    this.dataStorageConfig,
    this.description,
    this.kmsKey,
    this.lastModifiedTime,
    this.roleArn,
    this.schedule,
    this.shadowModeConfig,
    this.statusReason,
  });

  factory DescribeInferenceExperimentResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeInferenceExperimentResponse(
      arn: json['Arn'] as String,
      endpointMetadata: EndpointMetadata.fromJson(
          json['EndpointMetadata'] as Map<String, dynamic>),
      modelVariants: (json['ModelVariants'] as List)
          .nonNulls
          .map((e) =>
              ModelVariantConfigSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      name: json['Name'] as String,
      status: InferenceExperimentStatus.fromString((json['Status'] as String)),
      type: InferenceExperimentType.fromString((json['Type'] as String)),
      completionTime: timeStampFromJson(json['CompletionTime']),
      creationTime: timeStampFromJson(json['CreationTime']),
      dataStorageConfig: json['DataStorageConfig'] != null
          ? InferenceExperimentDataStorageConfig.fromJson(
              json['DataStorageConfig'] as Map<String, dynamic>)
          : null,
      description: json['Description'] as String?,
      kmsKey: json['KmsKey'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      roleArn: json['RoleArn'] as String?,
      schedule: json['Schedule'] != null
          ? InferenceExperimentSchedule.fromJson(
              json['Schedule'] as Map<String, dynamic>)
          : null,
      shadowModeConfig: json['ShadowModeConfig'] != null
          ? ShadowModeConfig.fromJson(
              json['ShadowModeConfig'] as Map<String, dynamic>)
          : null,
      statusReason: json['StatusReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final endpointMetadata = this.endpointMetadata;
    final modelVariants = this.modelVariants;
    final name = this.name;
    final status = this.status;
    final type = this.type;
    final completionTime = this.completionTime;
    final creationTime = this.creationTime;
    final dataStorageConfig = this.dataStorageConfig;
    final description = this.description;
    final kmsKey = this.kmsKey;
    final lastModifiedTime = this.lastModifiedTime;
    final roleArn = this.roleArn;
    final schedule = this.schedule;
    final shadowModeConfig = this.shadowModeConfig;
    final statusReason = this.statusReason;
    return {
      'Arn': arn,
      'EndpointMetadata': endpointMetadata,
      'ModelVariants': modelVariants,
      'Name': name,
      'Status': status.value,
      'Type': type.value,
      if (completionTime != null)
        'CompletionTime': unixTimestampToJson(completionTime),
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (dataStorageConfig != null) 'DataStorageConfig': dataStorageConfig,
      if (description != null) 'Description': description,
      if (kmsKey != null) 'KmsKey': kmsKey,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (roleArn != null) 'RoleArn': roleArn,
      if (schedule != null) 'Schedule': schedule,
      if (shadowModeConfig != null) 'ShadowModeConfig': shadowModeConfig,
      if (statusReason != null) 'StatusReason': statusReason,
    };
  }
}

class DescribeInferenceRecommendationsJobResponse {
  /// A timestamp that shows when the job was created.
  final DateTime creationTime;

  /// Returns information about the versioned model package Amazon Resource Name
  /// (ARN), the traffic pattern, and endpoint configurations you provided when
  /// you initiated the job.
  final RecommendationJobInputConfig inputConfig;

  /// The Amazon Resource Name (ARN) of the job.
  final String jobArn;

  /// The name of the job. The name must be unique within an Amazon Web Services
  /// Region in the Amazon Web Services account.
  final String jobName;

  /// The job type that you provided when you initiated the job.
  final RecommendationJobType jobType;

  /// A timestamp that shows when the job was last modified.
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) role you provided when you initiated the job.
  final String roleArn;

  /// The status of the job.
  final RecommendationJobStatus status;

  /// A timestamp that shows when the job completed.
  final DateTime? completionTime;

  /// The performance results from running an Inference Recommender job on an
  /// existing endpoint.
  final List<EndpointPerformance>? endpointPerformances;

  /// If the job fails, provides information why the job failed.
  final String? failureReason;

  /// The recommendations made by Inference Recommender.
  final List<InferenceRecommendation>? inferenceRecommendations;

  /// The job description that you provided when you initiated the job.
  final String? jobDescription;

  /// The stopping conditions that you provided when you initiated the job.
  final RecommendationJobStoppingConditions? stoppingConditions;

  DescribeInferenceRecommendationsJobResponse({
    required this.creationTime,
    required this.inputConfig,
    required this.jobArn,
    required this.jobName,
    required this.jobType,
    required this.lastModifiedTime,
    required this.roleArn,
    required this.status,
    this.completionTime,
    this.endpointPerformances,
    this.failureReason,
    this.inferenceRecommendations,
    this.jobDescription,
    this.stoppingConditions,
  });

  factory DescribeInferenceRecommendationsJobResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeInferenceRecommendationsJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      inputConfig: RecommendationJobInputConfig.fromJson(
          json['InputConfig'] as Map<String, dynamic>),
      jobArn: json['JobArn'] as String,
      jobName: json['JobName'] as String,
      jobType: RecommendationJobType.fromString((json['JobType'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      roleArn: json['RoleArn'] as String,
      status: RecommendationJobStatus.fromString((json['Status'] as String)),
      completionTime: timeStampFromJson(json['CompletionTime']),
      endpointPerformances: (json['EndpointPerformances'] as List?)
          ?.nonNulls
          .map((e) => EndpointPerformance.fromJson(e as Map<String, dynamic>))
          .toList(),
      failureReason: json['FailureReason'] as String?,
      inferenceRecommendations: (json['InferenceRecommendations'] as List?)
          ?.nonNulls
          .map((e) =>
              InferenceRecommendation.fromJson(e as Map<String, dynamic>))
          .toList(),
      jobDescription: json['JobDescription'] as String?,
      stoppingConditions: json['StoppingConditions'] != null
          ? RecommendationJobStoppingConditions.fromJson(
              json['StoppingConditions'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final inputConfig = this.inputConfig;
    final jobArn = this.jobArn;
    final jobName = this.jobName;
    final jobType = this.jobType;
    final lastModifiedTime = this.lastModifiedTime;
    final roleArn = this.roleArn;
    final status = this.status;
    final completionTime = this.completionTime;
    final endpointPerformances = this.endpointPerformances;
    final failureReason = this.failureReason;
    final inferenceRecommendations = this.inferenceRecommendations;
    final jobDescription = this.jobDescription;
    final stoppingConditions = this.stoppingConditions;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'InputConfig': inputConfig,
      'JobArn': jobArn,
      'JobName': jobName,
      'JobType': jobType.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'RoleArn': roleArn,
      'Status': status.value,
      if (completionTime != null)
        'CompletionTime': unixTimestampToJson(completionTime),
      if (endpointPerformances != null)
        'EndpointPerformances': endpointPerformances,
      if (failureReason != null) 'FailureReason': failureReason,
      if (inferenceRecommendations != null)
        'InferenceRecommendations': inferenceRecommendations,
      if (jobDescription != null) 'JobDescription': jobDescription,
      if (stoppingConditions != null) 'StoppingConditions': stoppingConditions,
    };
  }
}

class DescribeLabelingJobResponse {
  /// The date and time that the labeling job was created.
  final DateTime creationTime;

  /// Configuration information required for human workers to complete a labeling
  /// task.
  final HumanTaskConfig humanTaskConfig;

  /// Input configuration information for the labeling job, such as the Amazon S3
  /// location of the data objects and the location of the manifest file that
  /// describes the data objects.
  final LabelingJobInputConfig inputConfig;

  /// A unique identifier for work done as part of a labeling job.
  final String jobReferenceCode;

  /// Provides a breakdown of the number of data objects labeled by humans, the
  /// number of objects labeled by machine, the number of objects than couldn't be
  /// labeled, and the total number of objects labeled.
  final LabelCounters labelCounters;

  /// The Amazon Resource Name (ARN) of the labeling job.
  final String labelingJobArn;

  /// The name assigned to the labeling job when it was created.
  final String labelingJobName;

  /// The processing status of the labeling job.
  final LabelingJobStatus labelingJobStatus;

  /// The date and time that the labeling job was last updated.
  final DateTime lastModifiedTime;

  /// The location of the job's output data and the Amazon Web Services Key
  /// Management Service key ID for the key used to encrypt the output data, if
  /// any.
  final LabelingJobOutputConfig outputConfig;

  /// The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on
  /// your behalf during data labeling.
  final String roleArn;

  /// If the job failed, the reason that it failed.
  final String? failureReason;

  /// The attribute used as the label in the output manifest file.
  final String? labelAttributeName;

  /// The S3 location of the JSON file that defines the categories used to label
  /// data objects. Please note the following label-category limits:
  ///
  /// <ul>
  /// <li>
  /// Semantic segmentation labeling jobs using automated labeling: 20 labels
  /// </li>
  /// <li>
  /// Box bounding labeling jobs (all): 10 labels
  /// </li>
  /// </ul>
  /// The file is a JSON structure in the following format:
  ///
  /// <code>{</code>
  ///
  /// <code> "document-version": "2018-11-28"</code>
  ///
  /// <code> "labels": [</code>
  ///
  /// <code> {</code>
  ///
  /// <code> "label": "<i>label 1</i>"</code>
  ///
  /// <code> },</code>
  ///
  /// <code> {</code>
  ///
  /// <code> "label": "<i>label 2</i>"</code>
  ///
  /// <code> },</code>
  ///
  /// <code> ...</code>
  ///
  /// <code> {</code>
  ///
  /// <code> "label": "<i>label n</i>"</code>
  ///
  /// <code> }</code>
  ///
  /// <code> ]</code>
  ///
  /// <code>}</code>
  final String? labelCategoryConfigS3Uri;

  /// Configuration information for automated data labeling.
  final LabelingJobAlgorithmsConfig? labelingJobAlgorithmsConfig;

  /// The location of the output produced by the labeling job.
  final LabelingJobOutput? labelingJobOutput;

  /// A set of conditions for stopping a labeling job. If any of the conditions
  /// are met, the job is automatically stopped.
  final LabelingJobStoppingConditions? stoppingConditions;

  /// An array of key-value pairs. You can use tags to categorize your Amazon Web
  /// Services resources in different ways, for example, by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  final List<Tag>? tags;

  DescribeLabelingJobResponse({
    required this.creationTime,
    required this.humanTaskConfig,
    required this.inputConfig,
    required this.jobReferenceCode,
    required this.labelCounters,
    required this.labelingJobArn,
    required this.labelingJobName,
    required this.labelingJobStatus,
    required this.lastModifiedTime,
    required this.outputConfig,
    required this.roleArn,
    this.failureReason,
    this.labelAttributeName,
    this.labelCategoryConfigS3Uri,
    this.labelingJobAlgorithmsConfig,
    this.labelingJobOutput,
    this.stoppingConditions,
    this.tags,
  });

  factory DescribeLabelingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeLabelingJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      humanTaskConfig: HumanTaskConfig.fromJson(
          json['HumanTaskConfig'] as Map<String, dynamic>),
      inputConfig: LabelingJobInputConfig.fromJson(
          json['InputConfig'] as Map<String, dynamic>),
      jobReferenceCode: json['JobReferenceCode'] as String,
      labelCounters:
          LabelCounters.fromJson(json['LabelCounters'] as Map<String, dynamic>),
      labelingJobArn: json['LabelingJobArn'] as String,
      labelingJobName: json['LabelingJobName'] as String,
      labelingJobStatus:
          LabelingJobStatus.fromString((json['LabelingJobStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      outputConfig: LabelingJobOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      failureReason: json['FailureReason'] as String?,
      labelAttributeName: json['LabelAttributeName'] as String?,
      labelCategoryConfigS3Uri: json['LabelCategoryConfigS3Uri'] as String?,
      labelingJobAlgorithmsConfig: json['LabelingJobAlgorithmsConfig'] != null
          ? LabelingJobAlgorithmsConfig.fromJson(
              json['LabelingJobAlgorithmsConfig'] as Map<String, dynamic>)
          : null,
      labelingJobOutput: json['LabelingJobOutput'] != null
          ? LabelingJobOutput.fromJson(
              json['LabelingJobOutput'] as Map<String, dynamic>)
          : null,
      stoppingConditions: json['StoppingConditions'] != null
          ? LabelingJobStoppingConditions.fromJson(
              json['StoppingConditions'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final humanTaskConfig = this.humanTaskConfig;
    final inputConfig = this.inputConfig;
    final jobReferenceCode = this.jobReferenceCode;
    final labelCounters = this.labelCounters;
    final labelingJobArn = this.labelingJobArn;
    final labelingJobName = this.labelingJobName;
    final labelingJobStatus = this.labelingJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final outputConfig = this.outputConfig;
    final roleArn = this.roleArn;
    final failureReason = this.failureReason;
    final labelAttributeName = this.labelAttributeName;
    final labelCategoryConfigS3Uri = this.labelCategoryConfigS3Uri;
    final labelingJobAlgorithmsConfig = this.labelingJobAlgorithmsConfig;
    final labelingJobOutput = this.labelingJobOutput;
    final stoppingConditions = this.stoppingConditions;
    final tags = this.tags;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HumanTaskConfig': humanTaskConfig,
      'InputConfig': inputConfig,
      'JobReferenceCode': jobReferenceCode,
      'LabelCounters': labelCounters,
      'LabelingJobArn': labelingJobArn,
      'LabelingJobName': labelingJobName,
      'LabelingJobStatus': labelingJobStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'OutputConfig': outputConfig,
      'RoleArn': roleArn,
      if (failureReason != null) 'FailureReason': failureReason,
      if (labelAttributeName != null) 'LabelAttributeName': labelAttributeName,
      if (labelCategoryConfigS3Uri != null)
        'LabelCategoryConfigS3Uri': labelCategoryConfigS3Uri,
      if (labelingJobAlgorithmsConfig != null)
        'LabelingJobAlgorithmsConfig': labelingJobAlgorithmsConfig,
      if (labelingJobOutput != null) 'LabelingJobOutput': labelingJobOutput,
      if (stoppingConditions != null) 'StoppingConditions': stoppingConditions,
      if (tags != null) 'Tags': tags,
    };
  }
}

class DescribeLineageGroupResponse {
  final UserContext? createdBy;

  /// The creation time of lineage group.
  final DateTime? creationTime;

  /// The description of the lineage group.
  final String? description;

  /// The display name of the lineage group.
  final String? displayName;
  final UserContext? lastModifiedBy;

  /// The last modified time of the lineage group.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupArn;

  /// The name of the lineage group.
  final String? lineageGroupName;

  DescribeLineageGroupResponse({
    this.createdBy,
    this.creationTime,
    this.description,
    this.displayName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.lineageGroupName,
  });

  factory DescribeLineageGroupResponse.fromJson(Map<String, dynamic> json) {
    return DescribeLineageGroupResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      lineageGroupName: json['LineageGroupName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final lineageGroupName = this.lineageGroupName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (lineageGroupName != null) 'LineageGroupName': lineageGroupName,
    };
  }
}

class DescribeModelBiasJobDefinitionResponse {
  /// The time at which the model bias job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model bias job.
  final String jobDefinitionArn;

  /// The name of the bias job definition. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// Configures the model bias job to run a specified Docker container image.
  final ModelBiasAppSpecification modelBiasAppSpecification;

  /// Inputs for the model bias job.
  final ModelBiasJobInput modelBiasJobInput;
  final MonitoringOutputConfig modelBiasJobOutputConfig;

  /// The Amazon Resource Name (ARN) of the IAM role that has read permission to
  /// the input data location and write permission to the output data location in
  /// Amazon S3.
  final String roleArn;

  /// The baseline configuration for a model bias job.
  final ModelBiasBaselineConfig? modelBiasBaselineConfig;

  /// Networking options for a model bias job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeModelBiasJobDefinitionResponse({
    required this.creationTime,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.modelBiasAppSpecification,
    required this.modelBiasJobInput,
    required this.modelBiasJobOutputConfig,
    required this.roleArn,
    this.modelBiasBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeModelBiasJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelBiasJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      modelBiasAppSpecification: ModelBiasAppSpecification.fromJson(
          json['ModelBiasAppSpecification'] as Map<String, dynamic>),
      modelBiasJobInput: ModelBiasJobInput.fromJson(
          json['ModelBiasJobInput'] as Map<String, dynamic>),
      modelBiasJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['ModelBiasJobOutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      modelBiasBaselineConfig: json['ModelBiasBaselineConfig'] != null
          ? ModelBiasBaselineConfig.fromJson(
              json['ModelBiasBaselineConfig'] as Map<String, dynamic>)
          : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final modelBiasAppSpecification = this.modelBiasAppSpecification;
    final modelBiasJobInput = this.modelBiasJobInput;
    final modelBiasJobOutputConfig = this.modelBiasJobOutputConfig;
    final roleArn = this.roleArn;
    final modelBiasBaselineConfig = this.modelBiasBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'ModelBiasAppSpecification': modelBiasAppSpecification,
      'ModelBiasJobInput': modelBiasJobInput,
      'ModelBiasJobOutputConfig': modelBiasJobOutputConfig,
      'RoleArn': roleArn,
      if (modelBiasBaselineConfig != null)
        'ModelBiasBaselineConfig': modelBiasBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeModelCardExportJobResponse {
  /// The date and time that the model export job was created.
  final DateTime createdAt;

  /// The date and time that the model export job was last modified.
  final DateTime lastModifiedAt;

  /// The Amazon Resource Name (ARN) of the model card export job.
  final String modelCardExportJobArn;

  /// The name of the model card export job to describe.
  final String modelCardExportJobName;

  /// The name or Amazon Resource Name (ARN) of the model card that the model
  /// export job exports.
  final String modelCardName;

  /// The version of the model card that the model export job exports.
  final int modelCardVersion;

  /// The export output details for the model card.
  final ModelCardExportOutputConfig outputConfig;

  /// The completion status of the model card export job.
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code>: The model card export job is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code>: The model card export job is complete.
  /// </li>
  /// <li>
  /// <code>Failed</code>: The model card export job failed. To see the reason for
  /// the failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeModelCardExportJob</code> call.
  /// </li>
  /// </ul>
  final ModelCardExportJobStatus status;

  /// The exported model card artifacts.
  final ModelCardExportArtifacts? exportArtifacts;

  /// The failure reason if the model export job fails.
  final String? failureReason;

  DescribeModelCardExportJobResponse({
    required this.createdAt,
    required this.lastModifiedAt,
    required this.modelCardExportJobArn,
    required this.modelCardExportJobName,
    required this.modelCardName,
    required this.modelCardVersion,
    required this.outputConfig,
    required this.status,
    this.exportArtifacts,
    this.failureReason,
  });

  factory DescribeModelCardExportJobResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelCardExportJobResponse(
      createdAt: nonNullableTimeStampFromJson(json['CreatedAt'] as Object),
      lastModifiedAt:
          nonNullableTimeStampFromJson(json['LastModifiedAt'] as Object),
      modelCardExportJobArn: json['ModelCardExportJobArn'] as String,
      modelCardExportJobName: json['ModelCardExportJobName'] as String,
      modelCardName: json['ModelCardName'] as String,
      modelCardVersion: json['ModelCardVersion'] as int,
      outputConfig: ModelCardExportOutputConfig.fromJson(
          json['OutputConfig'] as Map<String, dynamic>),
      status: ModelCardExportJobStatus.fromString((json['Status'] as String)),
      exportArtifacts: json['ExportArtifacts'] != null
          ? ModelCardExportArtifacts.fromJson(
              json['ExportArtifacts'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdAt = this.createdAt;
    final lastModifiedAt = this.lastModifiedAt;
    final modelCardExportJobArn = this.modelCardExportJobArn;
    final modelCardExportJobName = this.modelCardExportJobName;
    final modelCardName = this.modelCardName;
    final modelCardVersion = this.modelCardVersion;
    final outputConfig = this.outputConfig;
    final status = this.status;
    final exportArtifacts = this.exportArtifacts;
    final failureReason = this.failureReason;
    return {
      'CreatedAt': unixTimestampToJson(createdAt),
      'LastModifiedAt': unixTimestampToJson(lastModifiedAt),
      'ModelCardExportJobArn': modelCardExportJobArn,
      'ModelCardExportJobName': modelCardExportJobName,
      'ModelCardName': modelCardName,
      'ModelCardVersion': modelCardVersion,
      'OutputConfig': outputConfig,
      'Status': status.value,
      if (exportArtifacts != null) 'ExportArtifacts': exportArtifacts,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

class DescribeModelCardResponse {
  /// The content of the model card.
  final String content;
  final UserContext createdBy;

  /// The date and time the model card was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model card.
  final String modelCardArn;

  /// The name of the model card.
  final String modelCardName;

  /// The approval status of the model card within your organization. Different
  /// organizations might have different criteria for model card review and
  /// approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates should be
  /// made to the model card, but it can still be exported.
  /// </li>
  /// </ul>
  final ModelCardStatus modelCardStatus;

  /// The version of the model card.
  final int modelCardVersion;
  final UserContext? lastModifiedBy;

  /// The date and time the model card was last modified.
  final DateTime? lastModifiedTime;

  /// The processing status of model card deletion. The
  /// <code>ModelCardProcessingStatus</code> updates throughout the different
  /// deletion steps.
  ///
  /// <ul>
  /// <li>
  /// <code>DeletePending</code>: Model card deletion request received.
  /// </li>
  /// <li>
  /// <code>DeleteInProgress</code>: Model card deletion is in progress.
  /// </li>
  /// <li>
  /// <code>ContentDeleted</code>: Deleted model card content.
  /// </li>
  /// <li>
  /// <code>ExportJobsDeleted</code>: Deleted all export jobs associated with the
  /// model card.
  /// </li>
  /// <li>
  /// <code>DeleteCompleted</code>: Successfully deleted the model card.
  /// </li>
  /// <li>
  /// <code>DeleteFailed</code>: The model card failed to delete.
  /// </li>
  /// </ul>
  final ModelCardProcessingStatus? modelCardProcessingStatus;

  /// The security configuration used to protect model card content.
  final ModelCardSecurityConfig? securityConfig;

  DescribeModelCardResponse({
    required this.content,
    required this.createdBy,
    required this.creationTime,
    required this.modelCardArn,
    required this.modelCardName,
    required this.modelCardStatus,
    required this.modelCardVersion,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.modelCardProcessingStatus,
    this.securityConfig,
  });

  factory DescribeModelCardResponse.fromJson(Map<String, dynamic> json) {
    return DescribeModelCardResponse(
      content: json['Content'] as String,
      createdBy:
          UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelCardArn: json['ModelCardArn'] as String,
      modelCardName: json['ModelCardName'] as String,
      modelCardStatus:
          ModelCardStatus.fromString((json['ModelCardStatus'] as String)),
      modelCardVersion: json['ModelCardVersion'] as int,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelCardProcessingStatus: (json['ModelCardProcessingStatus'] as String?)
          ?.let(ModelCardProcessingStatus.fromString),
      securityConfig: json['SecurityConfig'] != null
          ? ModelCardSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final content = this.content;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final modelCardArn = this.modelCardArn;
    final modelCardName = this.modelCardName;
    final modelCardStatus = this.modelCardStatus;
    final modelCardVersion = this.modelCardVersion;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final modelCardProcessingStatus = this.modelCardProcessingStatus;
    final securityConfig = this.securityConfig;
    return {
      'Content': content,
      'CreatedBy': createdBy,
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelCardArn': modelCardArn,
      'ModelCardName': modelCardName,
      'ModelCardStatus': modelCardStatus.value,
      'ModelCardVersion': modelCardVersion,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelCardProcessingStatus != null)
        'ModelCardProcessingStatus': modelCardProcessingStatus.value,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
    };
  }
}

class DescribeModelExplainabilityJobDefinitionResponse {
  /// The time at which the model explainability job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model explainability job.
  final String jobDefinitionArn;

  /// The name of the explainability job definition. The name must be unique
  /// within an Amazon Web Services Region in the Amazon Web Services account.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// Configures the model explainability job to run a specified Docker container
  /// image.
  final ModelExplainabilityAppSpecification modelExplainabilityAppSpecification;

  /// Inputs for the model explainability job.
  final ModelExplainabilityJobInput modelExplainabilityJobInput;
  final MonitoringOutputConfig modelExplainabilityJobOutputConfig;

  /// The Amazon Resource Name (ARN) of the IAM role that has read permission to
  /// the input data location and write permission to the output data location in
  /// Amazon S3.
  final String roleArn;

  /// The baseline configuration for a model explainability job.
  final ModelExplainabilityBaselineConfig? modelExplainabilityBaselineConfig;

  /// Networking options for a model explainability job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeModelExplainabilityJobDefinitionResponse({
    required this.creationTime,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.modelExplainabilityAppSpecification,
    required this.modelExplainabilityJobInput,
    required this.modelExplainabilityJobOutputConfig,
    required this.roleArn,
    this.modelExplainabilityBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeModelExplainabilityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelExplainabilityJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      modelExplainabilityAppSpecification:
          ModelExplainabilityAppSpecification.fromJson(
              json['ModelExplainabilityAppSpecification']
                  as Map<String, dynamic>),
      modelExplainabilityJobInput: ModelExplainabilityJobInput.fromJson(
          json['ModelExplainabilityJobInput'] as Map<String, dynamic>),
      modelExplainabilityJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['ModelExplainabilityJobOutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      modelExplainabilityBaselineConfig:
          json['ModelExplainabilityBaselineConfig'] != null
              ? ModelExplainabilityBaselineConfig.fromJson(
                  json['ModelExplainabilityBaselineConfig']
                      as Map<String, dynamic>)
              : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final modelExplainabilityAppSpecification =
        this.modelExplainabilityAppSpecification;
    final modelExplainabilityJobInput = this.modelExplainabilityJobInput;
    final modelExplainabilityJobOutputConfig =
        this.modelExplainabilityJobOutputConfig;
    final roleArn = this.roleArn;
    final modelExplainabilityBaselineConfig =
        this.modelExplainabilityBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'ModelExplainabilityAppSpecification':
          modelExplainabilityAppSpecification,
      'ModelExplainabilityJobInput': modelExplainabilityJobInput,
      'ModelExplainabilityJobOutputConfig': modelExplainabilityJobOutputConfig,
      'RoleArn': roleArn,
      if (modelExplainabilityBaselineConfig != null)
        'ModelExplainabilityBaselineConfig': modelExplainabilityBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeModelOutput {
  /// A timestamp that shows when the model was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model.
  final String modelArn;

  /// Name of the SageMaker model.
  final String modelName;

  /// The containers in the inference pipeline.
  final List<ContainerDefinition>? containers;

  /// A set of recommended deployment configurations for the model.
  final DeploymentRecommendation? deploymentRecommendation;

  /// If <code>True</code>, no inbound or outbound network calls can be made to or
  /// from the model container.
  final bool? enableNetworkIsolation;

  /// The Amazon Resource Name (ARN) of the IAM role that you specified for the
  /// model.
  final String? executionRoleArn;

  /// Specifies details of how containers in a multi-container endpoint are
  /// called.
  final InferenceExecutionConfig? inferenceExecutionConfig;

  /// The location of the primary inference code, associated artifacts, and custom
  /// environment map that the inference code uses when it is deployed in
  /// production.
  final ContainerDefinition? primaryContainer;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that this model has access to. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect
  /// Endpoints by Using an Amazon Virtual Private Cloud</a>
  final VpcConfig? vpcConfig;

  DescribeModelOutput({
    required this.creationTime,
    required this.modelArn,
    required this.modelName,
    this.containers,
    this.deploymentRecommendation,
    this.enableNetworkIsolation,
    this.executionRoleArn,
    this.inferenceExecutionConfig,
    this.primaryContainer,
    this.vpcConfig,
  });

  factory DescribeModelOutput.fromJson(Map<String, dynamic> json) {
    return DescribeModelOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelArn: json['ModelArn'] as String,
      modelName: json['ModelName'] as String,
      containers: (json['Containers'] as List?)
          ?.nonNulls
          .map((e) => ContainerDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      deploymentRecommendation: json['DeploymentRecommendation'] != null
          ? DeploymentRecommendation.fromJson(
              json['DeploymentRecommendation'] as Map<String, dynamic>)
          : null,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      executionRoleArn: json['ExecutionRoleArn'] as String?,
      inferenceExecutionConfig: json['InferenceExecutionConfig'] != null
          ? InferenceExecutionConfig.fromJson(
              json['InferenceExecutionConfig'] as Map<String, dynamic>)
          : null,
      primaryContainer: json['PrimaryContainer'] != null
          ? ContainerDefinition.fromJson(
              json['PrimaryContainer'] as Map<String, dynamic>)
          : null,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelArn = this.modelArn;
    final modelName = this.modelName;
    final containers = this.containers;
    final deploymentRecommendation = this.deploymentRecommendation;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final executionRoleArn = this.executionRoleArn;
    final inferenceExecutionConfig = this.inferenceExecutionConfig;
    final primaryContainer = this.primaryContainer;
    final vpcConfig = this.vpcConfig;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelArn': modelArn,
      'ModelName': modelName,
      if (containers != null) 'Containers': containers,
      if (deploymentRecommendation != null)
        'DeploymentRecommendation': deploymentRecommendation,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (executionRoleArn != null) 'ExecutionRoleArn': executionRoleArn,
      if (inferenceExecutionConfig != null)
        'InferenceExecutionConfig': inferenceExecutionConfig,
      if (primaryContainer != null) 'PrimaryContainer': primaryContainer,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

class DescribeModelPackageGroupOutput {
  final UserContext createdBy;

  /// The time that the model group was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model group.
  final String modelPackageGroupArn;

  /// The name of the model group.
  final String modelPackageGroupName;

  /// The status of the model group.
  final ModelPackageGroupStatus modelPackageGroupStatus;

  /// A description of the model group.
  final String? modelPackageGroupDescription;

  DescribeModelPackageGroupOutput({
    required this.createdBy,
    required this.creationTime,
    required this.modelPackageGroupArn,
    required this.modelPackageGroupName,
    required this.modelPackageGroupStatus,
    this.modelPackageGroupDescription,
  });

  factory DescribeModelPackageGroupOutput.fromJson(Map<String, dynamic> json) {
    return DescribeModelPackageGroupOutput(
      createdBy:
          UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
      modelPackageGroupName: json['ModelPackageGroupName'] as String,
      modelPackageGroupStatus: ModelPackageGroupStatus.fromString(
          (json['ModelPackageGroupStatus'] as String)),
      modelPackageGroupDescription:
          json['ModelPackageGroupDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final modelPackageGroupArn = this.modelPackageGroupArn;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageGroupStatus = this.modelPackageGroupStatus;
    final modelPackageGroupDescription = this.modelPackageGroupDescription;
    return {
      'CreatedBy': createdBy,
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageGroupArn': modelPackageGroupArn,
      'ModelPackageGroupName': modelPackageGroupName,
      'ModelPackageGroupStatus': modelPackageGroupStatus.value,
      if (modelPackageGroupDescription != null)
        'ModelPackageGroupDescription': modelPackageGroupDescription,
    };
  }
}

class DescribeModelPackageOutput {
  /// A timestamp specifying when the model package was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model package.
  final String modelPackageArn;

  /// The name of the model package being described.
  final String modelPackageName;

  /// The current status of the model package.
  final ModelPackageStatus modelPackageStatus;

  /// Details about the current status of the model package.
  final ModelPackageStatusDetails modelPackageStatusDetails;

  /// An array of additional Inference Specification objects. Each additional
  /// Inference Specification specifies artifacts based on this model package that
  /// can be used on inference endpoints. Generally used with SageMaker Neo to
  /// store the compiled artifacts.
  final List<AdditionalInferenceSpecificationDefinition>?
      additionalInferenceSpecifications;

  /// A description provided for the model approval.
  final String? approvalDescription;

  /// Whether the model package is certified for listing on Amazon Web Services
  /// Marketplace.
  final bool? certifyForMarketplace;
  final UserContext? createdBy;

  /// The metadata properties associated with the model package versions.
  final Map<String, String>? customerMetadataProperties;

  /// The machine learning domain of the model package you specified. Common
  /// machine learning domains include computer vision and natural language
  /// processing.
  final String? domain;

  /// Represents the drift check baselines that can be used when the model monitor
  /// is set using the model package. For more information, see the topic on <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift
  /// Detection against Previous Baselines in SageMaker Pipelines</a> in the
  /// <i>Amazon SageMaker Developer Guide</i>.
  final DriftCheckBaselines? driftCheckBaselines;

  /// Details about inference jobs that you can run with models based on this
  /// model package.
  final InferenceSpecification? inferenceSpecification;
  final UserContext? lastModifiedBy;

  /// The last time that the model package was modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The approval status of the model package.
  final ModelApprovalStatus? modelApprovalStatus;

  /// The model card associated with the model package. Since
  /// <code>ModelPackageModelCard</code> is tied to a model package, it is a
  /// specific usage of a model card and its schema is simplified compared to the
  /// schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code>
  /// schema does not include <code>model_package_details</code>, and
  /// <code>model_overview</code> is composed of the <code>model_creator</code>
  /// and <code>model_artifact</code> properties. For more information about the
  /// model card associated with the model package, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View
  /// the Details of a Model Version</a>.
  final ModelPackageModelCard? modelCard;

  /// Metrics for the model.
  final ModelMetrics? modelMetrics;

  /// A brief summary of the model package.
  final String? modelPackageDescription;

  /// If the model is a versioned model, the name of the model group that the
  /// versioned model belongs to.
  final String? modelPackageGroupName;

  /// The version of the model package.
  final int? modelPackageVersion;

  /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload
  /// are stored. This path points to a single gzip compressed tar archive
  /// (.tar.gz suffix).
  final String? samplePayloadUrl;

  /// The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package
  /// information.
  final ModelPackageSecurityConfig? securityConfig;

  /// Indicates if you want to skip model validation.
  final SkipModelValidation? skipModelValidation;

  /// Details about the algorithm that was used to create the model package.
  final SourceAlgorithmSpecification? sourceAlgorithmSpecification;

  /// The URI of the source for the model package.
  final String? sourceUri;

  /// The machine learning task you specified that your model package
  /// accomplishes. Common machine learning tasks include object detection and
  /// image classification.
  final String? task;

  /// Configurations for one or more transform jobs that SageMaker runs to test
  /// the model package.
  final ModelPackageValidationSpecification? validationSpecification;

  DescribeModelPackageOutput({
    required this.creationTime,
    required this.modelPackageArn,
    required this.modelPackageName,
    required this.modelPackageStatus,
    required this.modelPackageStatusDetails,
    this.additionalInferenceSpecifications,
    this.approvalDescription,
    this.certifyForMarketplace,
    this.createdBy,
    this.customerMetadataProperties,
    this.domain,
    this.driftCheckBaselines,
    this.inferenceSpecification,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.modelApprovalStatus,
    this.modelCard,
    this.modelMetrics,
    this.modelPackageDescription,
    this.modelPackageGroupName,
    this.modelPackageVersion,
    this.samplePayloadUrl,
    this.securityConfig,
    this.skipModelValidation,
    this.sourceAlgorithmSpecification,
    this.sourceUri,
    this.task,
    this.validationSpecification,
  });

  factory DescribeModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return DescribeModelPackageOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageArn: json['ModelPackageArn'] as String,
      modelPackageName: json['ModelPackageName'] as String,
      modelPackageStatus:
          ModelPackageStatus.fromString((json['ModelPackageStatus'] as String)),
      modelPackageStatusDetails: ModelPackageStatusDetails.fromJson(
          json['ModelPackageStatusDetails'] as Map<String, dynamic>),
      additionalInferenceSpecifications:
          (json['AdditionalInferenceSpecifications'] as List?)
              ?.nonNulls
              .map((e) => AdditionalInferenceSpecificationDefinition.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
      approvalDescription: json['ApprovalDescription'] as String?,
      certifyForMarketplace: json['CertifyForMarketplace'] as bool?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      customerMetadataProperties:
          (json['CustomerMetadataProperties'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
      domain: json['Domain'] as String?,
      driftCheckBaselines: json['DriftCheckBaselines'] != null
          ? DriftCheckBaselines.fromJson(
              json['DriftCheckBaselines'] as Map<String, dynamic>)
          : null,
      inferenceSpecification: json['InferenceSpecification'] != null
          ? InferenceSpecification.fromJson(
              json['InferenceSpecification'] as Map<String, dynamic>)
          : null,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      modelApprovalStatus: (json['ModelApprovalStatus'] as String?)
          ?.let(ModelApprovalStatus.fromString),
      modelCard: json['ModelCard'] != null
          ? ModelPackageModelCard.fromJson(
              json['ModelCard'] as Map<String, dynamic>)
          : null,
      modelMetrics: json['ModelMetrics'] != null
          ? ModelMetrics.fromJson(json['ModelMetrics'] as Map<String, dynamic>)
          : null,
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
      samplePayloadUrl: json['SamplePayloadUrl'] as String?,
      securityConfig: json['SecurityConfig'] != null
          ? ModelPackageSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
      skipModelValidation: (json['SkipModelValidation'] as String?)
          ?.let(SkipModelValidation.fromString),
      sourceAlgorithmSpecification: json['SourceAlgorithmSpecification'] != null
          ? SourceAlgorithmSpecification.fromJson(
              json['SourceAlgorithmSpecification'] as Map<String, dynamic>)
          : null,
      sourceUri: json['SourceUri'] as String?,
      task: json['Task'] as String?,
      validationSpecification: json['ValidationSpecification'] != null
          ? ModelPackageValidationSpecification.fromJson(
              json['ValidationSpecification'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageName = this.modelPackageName;
    final modelPackageStatus = this.modelPackageStatus;
    final modelPackageStatusDetails = this.modelPackageStatusDetails;
    final additionalInferenceSpecifications =
        this.additionalInferenceSpecifications;
    final approvalDescription = this.approvalDescription;
    final certifyForMarketplace = this.certifyForMarketplace;
    final createdBy = this.createdBy;
    final customerMetadataProperties = this.customerMetadataProperties;
    final domain = this.domain;
    final driftCheckBaselines = this.driftCheckBaselines;
    final inferenceSpecification = this.inferenceSpecification;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelCard = this.modelCard;
    final modelMetrics = this.modelMetrics;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageVersion = this.modelPackageVersion;
    final samplePayloadUrl = this.samplePayloadUrl;
    final securityConfig = this.securityConfig;
    final skipModelValidation = this.skipModelValidation;
    final sourceAlgorithmSpecification = this.sourceAlgorithmSpecification;
    final sourceUri = this.sourceUri;
    final task = this.task;
    final validationSpecification = this.validationSpecification;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageArn': modelPackageArn,
      'ModelPackageName': modelPackageName,
      'ModelPackageStatus': modelPackageStatus.value,
      'ModelPackageStatusDetails': modelPackageStatusDetails,
      if (additionalInferenceSpecifications != null)
        'AdditionalInferenceSpecifications': additionalInferenceSpecifications,
      if (approvalDescription != null)
        'ApprovalDescription': approvalDescription,
      if (certifyForMarketplace != null)
        'CertifyForMarketplace': certifyForMarketplace,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (customerMetadataProperties != null)
        'CustomerMetadataProperties': customerMetadataProperties,
      if (domain != null) 'Domain': domain,
      if (driftCheckBaselines != null)
        'DriftCheckBaselines': driftCheckBaselines,
      if (inferenceSpecification != null)
        'InferenceSpecification': inferenceSpecification,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.value,
      if (modelCard != null) 'ModelCard': modelCard,
      if (modelMetrics != null) 'ModelMetrics': modelMetrics,
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
      if (samplePayloadUrl != null) 'SamplePayloadUrl': samplePayloadUrl,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
      if (skipModelValidation != null)
        'SkipModelValidation': skipModelValidation.value,
      if (sourceAlgorithmSpecification != null)
        'SourceAlgorithmSpecification': sourceAlgorithmSpecification,
      if (sourceUri != null) 'SourceUri': sourceUri,
      if (task != null) 'Task': task,
      if (validationSpecification != null)
        'ValidationSpecification': validationSpecification,
    };
  }
}

class DescribeModelQualityJobDefinitionResponse {
  /// The time at which the model quality job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model quality job.
  final String jobDefinitionArn;

  /// The name of the quality job definition. The name must be unique within an
  /// Amazon Web Services Region in the Amazon Web Services account.
  final String jobDefinitionName;
  final MonitoringResources jobResources;

  /// Configures the model quality job to run a specified Docker container image.
  final ModelQualityAppSpecification modelQualityAppSpecification;

  /// Inputs for the model quality job.
  final ModelQualityJobInput modelQualityJobInput;
  final MonitoringOutputConfig modelQualityJobOutputConfig;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String roleArn;

  /// The baseline configuration for a model quality job.
  final ModelQualityBaselineConfig? modelQualityBaselineConfig;

  /// Networking options for a model quality job.
  final MonitoringNetworkConfig? networkConfig;
  final MonitoringStoppingCondition? stoppingCondition;

  DescribeModelQualityJobDefinitionResponse({
    required this.creationTime,
    required this.jobDefinitionArn,
    required this.jobDefinitionName,
    required this.jobResources,
    required this.modelQualityAppSpecification,
    required this.modelQualityJobInput,
    required this.modelQualityJobOutputConfig,
    required this.roleArn,
    this.modelQualityBaselineConfig,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory DescribeModelQualityJobDefinitionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeModelQualityJobDefinitionResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobDefinitionArn: json['JobDefinitionArn'] as String,
      jobDefinitionName: json['JobDefinitionName'] as String,
      jobResources: MonitoringResources.fromJson(
          json['JobResources'] as Map<String, dynamic>),
      modelQualityAppSpecification: ModelQualityAppSpecification.fromJson(
          json['ModelQualityAppSpecification'] as Map<String, dynamic>),
      modelQualityJobInput: ModelQualityJobInput.fromJson(
          json['ModelQualityJobInput'] as Map<String, dynamic>),
      modelQualityJobOutputConfig: MonitoringOutputConfig.fromJson(
          json['ModelQualityJobOutputConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      modelQualityBaselineConfig: json['ModelQualityBaselineConfig'] != null
          ? ModelQualityBaselineConfig.fromJson(
              json['ModelQualityBaselineConfig'] as Map<String, dynamic>)
          : null,
      networkConfig: json['NetworkConfig'] != null
          ? MonitoringNetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobDefinitionArn = this.jobDefinitionArn;
    final jobDefinitionName = this.jobDefinitionName;
    final jobResources = this.jobResources;
    final modelQualityAppSpecification = this.modelQualityAppSpecification;
    final modelQualityJobInput = this.modelQualityJobInput;
    final modelQualityJobOutputConfig = this.modelQualityJobOutputConfig;
    final roleArn = this.roleArn;
    final modelQualityBaselineConfig = this.modelQualityBaselineConfig;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobDefinitionArn': jobDefinitionArn,
      'JobDefinitionName': jobDefinitionName,
      'JobResources': jobResources,
      'ModelQualityAppSpecification': modelQualityAppSpecification,
      'ModelQualityJobInput': modelQualityJobInput,
      'ModelQualityJobOutputConfig': modelQualityJobOutputConfig,
      'RoleArn': roleArn,
      if (modelQualityBaselineConfig != null)
        'ModelQualityBaselineConfig': modelQualityBaselineConfig,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

class DescribeMonitoringScheduleResponse {
  /// The time at which the monitoring job was created.
  final DateTime creationTime;

  /// The time at which the monitoring job was last modified.
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  /// The configuration object that specifies the monitoring schedule and defines
  /// the monitoring job.
  final MonitoringScheduleConfig monitoringScheduleConfig;

  /// Name of the monitoring schedule.
  final String monitoringScheduleName;

  /// The status of an monitoring job.
  final ScheduleStatus monitoringScheduleStatus;

  /// The name of the endpoint for the monitoring job.
  final String? endpointName;

  /// A string, up to one KB in size, that contains the reason a monitoring job
  /// failed, if it failed.
  final String? failureReason;

  /// Describes metadata on the last execution to run, if there was one.
  final MonitoringExecutionSummary? lastMonitoringExecutionSummary;

  /// The type of the monitoring job that this schedule runs. This is one of the
  /// following values.
  ///
  /// <ul>
  /// <li>
  /// <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring
  /// job.
  /// </li>
  /// <li>
  /// <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring
  /// job.
  /// </li>
  /// <li>
  /// <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.
  /// </li>
  /// <li>
  /// <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability
  /// monitoring job.
  /// </li>
  /// </ul>
  final MonitoringType? monitoringType;

  DescribeMonitoringScheduleResponse({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.monitoringScheduleArn,
    required this.monitoringScheduleConfig,
    required this.monitoringScheduleName,
    required this.monitoringScheduleStatus,
    this.endpointName,
    this.failureReason,
    this.lastMonitoringExecutionSummary,
    this.monitoringType,
  });

  factory DescribeMonitoringScheduleResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeMonitoringScheduleResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
      monitoringScheduleConfig: MonitoringScheduleConfig.fromJson(
          json['MonitoringScheduleConfig'] as Map<String, dynamic>),
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
      monitoringScheduleStatus: ScheduleStatus.fromString(
          (json['MonitoringScheduleStatus'] as String)),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastMonitoringExecutionSummary: json['LastMonitoringExecutionSummary'] !=
              null
          ? MonitoringExecutionSummary.fromJson(
              json['LastMonitoringExecutionSummary'] as Map<String, dynamic>)
          : null,
      monitoringType:
          (json['MonitoringType'] as String?)?.let(MonitoringType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleConfig = this.monitoringScheduleConfig;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final lastMonitoringExecutionSummary = this.lastMonitoringExecutionSummary;
    final monitoringType = this.monitoringType;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringScheduleArn': monitoringScheduleArn,
      'MonitoringScheduleConfig': monitoringScheduleConfig,
      'MonitoringScheduleName': monitoringScheduleName,
      'MonitoringScheduleStatus': monitoringScheduleStatus.value,
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastMonitoringExecutionSummary != null)
        'LastMonitoringExecutionSummary': lastMonitoringExecutionSummary,
      if (monitoringType != null) 'MonitoringType': monitoringType.value,
    };
  }
}

class DescribeNotebookInstanceLifecycleConfigOutput {
  /// A timestamp that tells when the lifecycle configuration was created.
  final DateTime? creationTime;

  /// A timestamp that tells when the lifecycle configuration was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lifecycle configuration.
  final String? notebookInstanceLifecycleConfigArn;

  /// The name of the lifecycle configuration.
  final String? notebookInstanceLifecycleConfigName;

  /// The shell script that runs only once, when you create a notebook instance.
  final List<NotebookInstanceLifecycleHook>? onCreate;

  /// The shell script that runs every time you start a notebook instance,
  /// including when you create the notebook instance.
  final List<NotebookInstanceLifecycleHook>? onStart;

  DescribeNotebookInstanceLifecycleConfigOutput({
    this.creationTime,
    this.lastModifiedTime,
    this.notebookInstanceLifecycleConfigArn,
    this.notebookInstanceLifecycleConfigName,
    this.onCreate,
    this.onStart,
  });

  factory DescribeNotebookInstanceLifecycleConfigOutput.fromJson(
      Map<String, dynamic> json) {
    return DescribeNotebookInstanceLifecycleConfigOutput(
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      notebookInstanceLifecycleConfigArn:
          json['NotebookInstanceLifecycleConfigArn'] as String?,
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String?,
      onCreate: (json['OnCreate'] as List?)
          ?.nonNulls
          .map((e) =>
              NotebookInstanceLifecycleHook.fromJson(e as Map<String, dynamic>))
          .toList(),
      onStart: (json['OnStart'] as List?)
          ?.nonNulls
          .map((e) =>
              NotebookInstanceLifecycleHook.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final notebookInstanceLifecycleConfigArn =
        this.notebookInstanceLifecycleConfigArn;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final onCreate = this.onCreate;
    final onStart = this.onStart;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (notebookInstanceLifecycleConfigArn != null)
        'NotebookInstanceLifecycleConfigArn':
            notebookInstanceLifecycleConfigArn,
      if (notebookInstanceLifecycleConfigName != null)
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      if (onCreate != null) 'OnCreate': onCreate,
      if (onStart != null) 'OnStart': onStart,
    };
  }
}

class DescribeNotebookInstanceOutput {
  /// A list of the Elastic Inference (EI) instance types associated with this
  /// notebook instance. Currently only one EI instance type can be associated
  /// with a notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
  /// Inference in Amazon SageMaker</a>.
  final List<NotebookInstanceAcceleratorType>? acceleratorTypes;

  /// An array of up to three Git repositories associated with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of your
  /// notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  final List<String>? additionalCodeRepositories;

  /// A timestamp. Use this parameter to return the time when the notebook
  /// instance was created
  final DateTime? creationTime;

  /// The Git repository associated with the notebook instance as its default code
  /// repository. This can be either the name of a Git repository stored as a
  /// resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open a
  /// notebook instance, it opens in the directory that contains this repository.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  final String? defaultCodeRepository;

  /// Describes whether SageMaker provides internet access to the notebook
  /// instance. If this value is set to <i>Disabled</i>, the notebook instance
  /// does not have internet access, and cannot connect to SageMaker training and
  /// endpoint services.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook
  /// Instances Are Internet-Enabled by Default</a>.
  final DirectInternetAccess? directInternetAccess;

  /// If status is <code>Failed</code>, the reason it failed.
  final String? failureReason;

  /// Information on the IMDS configuration of the notebook instance
  final InstanceMetadataServiceConfiguration?
      instanceMetadataServiceConfiguration;

  /// The type of ML compute instance running on the notebook instance.
  final InstanceType? instanceType;

  /// The Amazon Web Services KMS key ID SageMaker uses to encrypt data when
  /// storing it on the ML storage volume attached to the instance.
  final String? kmsKeyId;

  /// A timestamp. Use this parameter to retrieve the time when the notebook
  /// instance was last modified.
  final DateTime? lastModifiedTime;

  /// The network interface IDs that SageMaker created at the time of creating the
  /// instance.
  final String? networkInterfaceId;

  /// The Amazon Resource Name (ARN) of the notebook instance.
  final String? notebookInstanceArn;

  /// Returns the name of a notebook instance lifecycle configuration.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>
  final String? notebookInstanceLifecycleConfigName;

  /// The name of the SageMaker notebook instance.
  final String? notebookInstanceName;

  /// The status of the notebook instance.
  final NotebookInstanceStatus? notebookInstanceStatus;

  /// The platform identifier of the notebook instance runtime environment.
  final String? platformIdentifier;

  /// The Amazon Resource Name (ARN) of the IAM role associated with the instance.
  final String? roleArn;

  /// Whether root access is enabled or disabled for users of the notebook
  /// instance.
  /// <note>
  /// Lifecycle configurations need root access to be able to set up a notebook
  /// instance. Because of this, lifecycle configurations associated with a
  /// notebook instance always run with root access even if you disable root
  /// access for users.
  /// </note>
  final RootAccess? rootAccess;

  /// The IDs of the VPC security groups.
  final List<String>? securityGroups;

  /// The ID of the VPC subnet.
  final String? subnetId;

  /// The URL that you use to connect to the Jupyter notebook that is running in
  /// your notebook instance.
  final String? url;

  /// The size, in GB, of the ML storage volume attached to the notebook instance.
  final int? volumeSizeInGB;

  DescribeNotebookInstanceOutput({
    this.acceleratorTypes,
    this.additionalCodeRepositories,
    this.creationTime,
    this.defaultCodeRepository,
    this.directInternetAccess,
    this.failureReason,
    this.instanceMetadataServiceConfiguration,
    this.instanceType,
    this.kmsKeyId,
    this.lastModifiedTime,
    this.networkInterfaceId,
    this.notebookInstanceArn,
    this.notebookInstanceLifecycleConfigName,
    this.notebookInstanceName,
    this.notebookInstanceStatus,
    this.platformIdentifier,
    this.roleArn,
    this.rootAccess,
    this.securityGroups,
    this.subnetId,
    this.url,
    this.volumeSizeInGB,
  });

  factory DescribeNotebookInstanceOutput.fromJson(Map<String, dynamic> json) {
    return DescribeNotebookInstanceOutput(
      acceleratorTypes: (json['AcceleratorTypes'] as List?)
          ?.nonNulls
          .map((e) => NotebookInstanceAcceleratorType.fromString((e as String)))
          .toList(),
      additionalCodeRepositories: (json['AdditionalCodeRepositories'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      creationTime: timeStampFromJson(json['CreationTime']),
      defaultCodeRepository: json['DefaultCodeRepository'] as String?,
      directInternetAccess: (json['DirectInternetAccess'] as String?)
          ?.let(DirectInternetAccess.fromString),
      failureReason: json['FailureReason'] as String?,
      instanceMetadataServiceConfiguration:
          json['InstanceMetadataServiceConfiguration'] != null
              ? InstanceMetadataServiceConfiguration.fromJson(
                  json['InstanceMetadataServiceConfiguration']
                      as Map<String, dynamic>)
              : null,
      instanceType:
          (json['InstanceType'] as String?)?.let(InstanceType.fromString),
      kmsKeyId: json['KmsKeyId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      networkInterfaceId: json['NetworkInterfaceId'] as String?,
      notebookInstanceArn: json['NotebookInstanceArn'] as String?,
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String?,
      notebookInstanceName: json['NotebookInstanceName'] as String?,
      notebookInstanceStatus: (json['NotebookInstanceStatus'] as String?)
          ?.let(NotebookInstanceStatus.fromString),
      platformIdentifier: json['PlatformIdentifier'] as String?,
      roleArn: json['RoleArn'] as String?,
      rootAccess: (json['RootAccess'] as String?)?.let(RootAccess.fromString),
      securityGroups: (json['SecurityGroups'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      subnetId: json['SubnetId'] as String?,
      url: json['Url'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final acceleratorTypes = this.acceleratorTypes;
    final additionalCodeRepositories = this.additionalCodeRepositories;
    final creationTime = this.creationTime;
    final defaultCodeRepository = this.defaultCodeRepository;
    final directInternetAccess = this.directInternetAccess;
    final failureReason = this.failureReason;
    final instanceMetadataServiceConfiguration =
        this.instanceMetadataServiceConfiguration;
    final instanceType = this.instanceType;
    final kmsKeyId = this.kmsKeyId;
    final lastModifiedTime = this.lastModifiedTime;
    final networkInterfaceId = this.networkInterfaceId;
    final notebookInstanceArn = this.notebookInstanceArn;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final notebookInstanceName = this.notebookInstanceName;
    final notebookInstanceStatus = this.notebookInstanceStatus;
    final platformIdentifier = this.platformIdentifier;
    final roleArn = this.roleArn;
    final rootAccess = this.rootAccess;
    final securityGroups = this.securityGroups;
    final subnetId = this.subnetId;
    final url = this.url;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      if (acceleratorTypes != null)
        'AcceleratorTypes': acceleratorTypes.map((e) => e.value).toList(),
      if (additionalCodeRepositories != null)
        'AdditionalCodeRepositories': additionalCodeRepositories,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (defaultCodeRepository != null)
        'DefaultCodeRepository': defaultCodeRepository,
      if (directInternetAccess != null)
        'DirectInternetAccess': directInternetAccess.value,
      if (failureReason != null) 'FailureReason': failureReason,
      if (instanceMetadataServiceConfiguration != null)
        'InstanceMetadataServiceConfiguration':
            instanceMetadataServiceConfiguration,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (networkInterfaceId != null) 'NetworkInterfaceId': networkInterfaceId,
      if (notebookInstanceArn != null)
        'NotebookInstanceArn': notebookInstanceArn,
      if (notebookInstanceLifecycleConfigName != null)
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      if (notebookInstanceName != null)
        'NotebookInstanceName': notebookInstanceName,
      if (notebookInstanceStatus != null)
        'NotebookInstanceStatus': notebookInstanceStatus.value,
      if (platformIdentifier != null) 'PlatformIdentifier': platformIdentifier,
      if (roleArn != null) 'RoleArn': roleArn,
      if (rootAccess != null) 'RootAccess': rootAccess.value,
      if (securityGroups != null) 'SecurityGroups': securityGroups,
      if (subnetId != null) 'SubnetId': subnetId,
      if (url != null) 'Url': url,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

class DescribePipelineDefinitionForExecutionResponse {
  /// The time when the pipeline was created.
  final DateTime? creationTime;

  /// The JSON pipeline definition.
  final String? pipelineDefinition;

  DescribePipelineDefinitionForExecutionResponse({
    this.creationTime,
    this.pipelineDefinition,
  });

  factory DescribePipelineDefinitionForExecutionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribePipelineDefinitionForExecutionResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      pipelineDefinition: json['PipelineDefinition'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final pipelineDefinition = this.pipelineDefinition;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (pipelineDefinition != null) 'PipelineDefinition': pipelineDefinition,
    };
  }
}

class DescribePipelineExecutionResponse {
  final UserContext? createdBy;

  /// The time when the pipeline execution was created.
  final DateTime? creationTime;

  /// If the execution failed, a message describing why.
  final String? failureReason;
  final UserContext? lastModifiedBy;

  /// The time when the pipeline execution was modified last.
  final DateTime? lastModifiedTime;

  /// The parallelism configuration applied to the pipeline.
  final ParallelismConfiguration? parallelismConfiguration;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  /// The description of the pipeline execution.
  final String? pipelineExecutionDescription;

  /// The display name of the pipeline execution.
  final String? pipelineExecutionDisplayName;

  /// The status of the pipeline execution.
  final PipelineExecutionStatus? pipelineExecutionStatus;
  final PipelineExperimentConfig? pipelineExperimentConfig;

  /// The selective execution configuration applied to the pipeline run.
  final SelectiveExecutionConfig? selectiveExecutionConfig;

  DescribePipelineExecutionResponse({
    this.createdBy,
    this.creationTime,
    this.failureReason,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.parallelismConfiguration,
    this.pipelineArn,
    this.pipelineExecutionArn,
    this.pipelineExecutionDescription,
    this.pipelineExecutionDisplayName,
    this.pipelineExecutionStatus,
    this.pipelineExperimentConfig,
    this.selectiveExecutionConfig,
  });

  factory DescribePipelineExecutionResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribePipelineExecutionResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      parallelismConfiguration: json['ParallelismConfiguration'] != null
          ? ParallelismConfiguration.fromJson(
              json['ParallelismConfiguration'] as Map<String, dynamic>)
          : null,
      pipelineArn: json['PipelineArn'] as String?,
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
      pipelineExecutionDescription:
          json['PipelineExecutionDescription'] as String?,
      pipelineExecutionDisplayName:
          json['PipelineExecutionDisplayName'] as String?,
      pipelineExecutionStatus: (json['PipelineExecutionStatus'] as String?)
          ?.let(PipelineExecutionStatus.fromString),
      pipelineExperimentConfig: json['PipelineExperimentConfig'] != null
          ? PipelineExperimentConfig.fromJson(
              json['PipelineExperimentConfig'] as Map<String, dynamic>)
          : null,
      selectiveExecutionConfig: json['SelectiveExecutionConfig'] != null
          ? SelectiveExecutionConfig.fromJson(
              json['SelectiveExecutionConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final parallelismConfiguration = this.parallelismConfiguration;
    final pipelineArn = this.pipelineArn;
    final pipelineExecutionArn = this.pipelineExecutionArn;
    final pipelineExecutionDescription = this.pipelineExecutionDescription;
    final pipelineExecutionDisplayName = this.pipelineExecutionDisplayName;
    final pipelineExecutionStatus = this.pipelineExecutionStatus;
    final pipelineExperimentConfig = this.pipelineExperimentConfig;
    final selectiveExecutionConfig = this.selectiveExecutionConfig;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (parallelismConfiguration != null)
        'ParallelismConfiguration': parallelismConfiguration,
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
      if (pipelineExecutionDescription != null)
        'PipelineExecutionDescription': pipelineExecutionDescription,
      if (pipelineExecutionDisplayName != null)
        'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      if (pipelineExecutionStatus != null)
        'PipelineExecutionStatus': pipelineExecutionStatus.value,
      if (pipelineExperimentConfig != null)
        'PipelineExperimentConfig': pipelineExperimentConfig,
      if (selectiveExecutionConfig != null)
        'SelectiveExecutionConfig': selectiveExecutionConfig,
    };
  }
}

class DescribePipelineResponse {
  final UserContext? createdBy;

  /// The time when the pipeline was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// The time when the pipeline was last modified.
  final DateTime? lastModifiedTime;

  /// The time when the pipeline was last run.
  final DateTime? lastRunTime;

  /// Lists the parallelism configuration applied to the pipeline.
  final ParallelismConfiguration? parallelismConfiguration;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The JSON pipeline definition.
  final String? pipelineDefinition;

  /// The description of the pipeline.
  final String? pipelineDescription;

  /// The display name of the pipeline.
  final String? pipelineDisplayName;

  /// The name of the pipeline.
  final String? pipelineName;

  /// The status of the pipeline execution.
  final PipelineStatus? pipelineStatus;

  /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
  final String? roleArn;

  DescribePipelineResponse({
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lastRunTime,
    this.parallelismConfiguration,
    this.pipelineArn,
    this.pipelineDefinition,
    this.pipelineDescription,
    this.pipelineDisplayName,
    this.pipelineName,
    this.pipelineStatus,
    this.roleArn,
  });

  factory DescribePipelineResponse.fromJson(Map<String, dynamic> json) {
    return DescribePipelineResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastRunTime: timeStampFromJson(json['LastRunTime']),
      parallelismConfiguration: json['ParallelismConfiguration'] != null
          ? ParallelismConfiguration.fromJson(
              json['ParallelismConfiguration'] as Map<String, dynamic>)
          : null,
      pipelineArn: json['PipelineArn'] as String?,
      pipelineDefinition: json['PipelineDefinition'] as String?,
      pipelineDescription: json['PipelineDescription'] as String?,
      pipelineDisplayName: json['PipelineDisplayName'] as String?,
      pipelineName: json['PipelineName'] as String?,
      pipelineStatus:
          (json['PipelineStatus'] as String?)?.let(PipelineStatus.fromString),
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lastRunTime = this.lastRunTime;
    final parallelismConfiguration = this.parallelismConfiguration;
    final pipelineArn = this.pipelineArn;
    final pipelineDefinition = this.pipelineDefinition;
    final pipelineDescription = this.pipelineDescription;
    final pipelineDisplayName = this.pipelineDisplayName;
    final pipelineName = this.pipelineName;
    final pipelineStatus = this.pipelineStatus;
    final roleArn = this.roleArn;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastRunTime != null) 'LastRunTime': unixTimestampToJson(lastRunTime),
      if (parallelismConfiguration != null)
        'ParallelismConfiguration': parallelismConfiguration,
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineDefinition != null) 'PipelineDefinition': pipelineDefinition,
      if (pipelineDescription != null)
        'PipelineDescription': pipelineDescription,
      if (pipelineDisplayName != null)
        'PipelineDisplayName': pipelineDisplayName,
      if (pipelineName != null) 'PipelineName': pipelineName,
      if (pipelineStatus != null) 'PipelineStatus': pipelineStatus.value,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

class DescribeProcessingJobResponse {
  /// Configures the processing job to run a specified container image.
  final AppSpecification appSpecification;

  /// The time at which the processing job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the processing job.
  final String processingJobArn;

  /// The name of the processing job. The name must be unique within an Amazon Web
  /// Services Region in the Amazon Web Services account.
  final String processingJobName;

  /// Provides the status of a processing job.
  final ProcessingJobStatus processingJobStatus;

  /// Identifies the resources, ML compute instances, and ML storage volumes to
  /// deploy for a processing job. In distributed training, you specify more than
  /// one instance.
  final ProcessingResources processingResources;

  /// The ARN of an AutoML job associated with this processing job.
  final String? autoMLJobArn;

  /// The environment variables set in the Docker container.
  final Map<String, String>? environment;

  /// An optional string, up to one KB in size, that contains metadata from the
  /// processing container when the processing job exits.
  final String? exitMessage;

  /// The configuration information used to create an experiment.
  final ExperimentConfig? experimentConfig;

  /// A string, up to one KB in size, that contains the reason a processing job
  /// failed, if it failed.
  final String? failureReason;

  /// The time at which the processing job was last modified.
  final DateTime? lastModifiedTime;

  /// The ARN of a monitoring schedule for an endpoint associated with this
  /// processing job.
  final String? monitoringScheduleArn;

  /// Networking options for a processing job.
  final NetworkConfig? networkConfig;

  /// The time at which the processing job completed.
  final DateTime? processingEndTime;

  /// The inputs for a processing job.
  final List<ProcessingInput>? processingInputs;

  /// Output configuration for the processing job.
  final ProcessingOutputConfig? processingOutputConfig;

  /// The time at which the processing job started.
  final DateTime? processingStartTime;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String? roleArn;

  /// The time limit for how long the processing job is allowed to run.
  final ProcessingStoppingCondition? stoppingCondition;

  /// The ARN of a training job associated with this processing job.
  final String? trainingJobArn;

  DescribeProcessingJobResponse({
    required this.appSpecification,
    required this.creationTime,
    required this.processingJobArn,
    required this.processingJobName,
    required this.processingJobStatus,
    required this.processingResources,
    this.autoMLJobArn,
    this.environment,
    this.exitMessage,
    this.experimentConfig,
    this.failureReason,
    this.lastModifiedTime,
    this.monitoringScheduleArn,
    this.networkConfig,
    this.processingEndTime,
    this.processingInputs,
    this.processingOutputConfig,
    this.processingStartTime,
    this.roleArn,
    this.stoppingCondition,
    this.trainingJobArn,
  });

  factory DescribeProcessingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeProcessingJobResponse(
      appSpecification: AppSpecification.fromJson(
          json['AppSpecification'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      processingJobArn: json['ProcessingJobArn'] as String,
      processingJobName: json['ProcessingJobName'] as String,
      processingJobStatus: ProcessingJobStatus.fromString(
          (json['ProcessingJobStatus'] as String)),
      processingResources: ProcessingResources.fromJson(
          json['ProcessingResources'] as Map<String, dynamic>),
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      exitMessage: json['ExitMessage'] as String?,
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      networkConfig: json['NetworkConfig'] != null
          ? NetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      processingEndTime: timeStampFromJson(json['ProcessingEndTime']),
      processingInputs: (json['ProcessingInputs'] as List?)
          ?.nonNulls
          .map((e) => ProcessingInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      processingOutputConfig: json['ProcessingOutputConfig'] != null
          ? ProcessingOutputConfig.fromJson(
              json['ProcessingOutputConfig'] as Map<String, dynamic>)
          : null,
      processingStartTime: timeStampFromJson(json['ProcessingStartTime']),
      roleArn: json['RoleArn'] as String?,
      stoppingCondition: json['StoppingCondition'] != null
          ? ProcessingStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
      trainingJobArn: json['TrainingJobArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appSpecification = this.appSpecification;
    final creationTime = this.creationTime;
    final processingJobArn = this.processingJobArn;
    final processingJobName = this.processingJobName;
    final processingJobStatus = this.processingJobStatus;
    final processingResources = this.processingResources;
    final autoMLJobArn = this.autoMLJobArn;
    final environment = this.environment;
    final exitMessage = this.exitMessage;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final networkConfig = this.networkConfig;
    final processingEndTime = this.processingEndTime;
    final processingInputs = this.processingInputs;
    final processingOutputConfig = this.processingOutputConfig;
    final processingStartTime = this.processingStartTime;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final trainingJobArn = this.trainingJobArn;
    return {
      'AppSpecification': appSpecification,
      'CreationTime': unixTimestampToJson(creationTime),
      'ProcessingJobArn': processingJobArn,
      'ProcessingJobName': processingJobName,
      'ProcessingJobStatus': processingJobStatus.value,
      'ProcessingResources': processingResources,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (environment != null) 'Environment': environment,
      if (exitMessage != null) 'ExitMessage': exitMessage,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (processingEndTime != null)
        'ProcessingEndTime': unixTimestampToJson(processingEndTime),
      if (processingInputs != null) 'ProcessingInputs': processingInputs,
      if (processingOutputConfig != null)
        'ProcessingOutputConfig': processingOutputConfig,
      if (processingStartTime != null)
        'ProcessingStartTime': unixTimestampToJson(processingStartTime),
      if (roleArn != null) 'RoleArn': roleArn,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
      if (trainingJobArn != null) 'TrainingJobArn': trainingJobArn,
    };
  }
}

class DescribeProjectOutput {
  /// The time when the project was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  /// The ID of the project.
  final String projectId;

  /// The name of the project.
  final String projectName;

  /// The status of the project.
  final ProjectStatus projectStatus;

  /// Information used to provision a service catalog product. For information,
  /// see <a
  /// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
  /// is Amazon Web Services Service Catalog</a>.
  final ServiceCatalogProvisioningDetails serviceCatalogProvisioningDetails;
  final UserContext? createdBy;
  final UserContext? lastModifiedBy;

  /// The timestamp when project was last modified.
  final DateTime? lastModifiedTime;

  /// The description of the project.
  final String? projectDescription;

  /// Information about a provisioned service catalog product.
  final ServiceCatalogProvisionedProductDetails?
      serviceCatalogProvisionedProductDetails;

  DescribeProjectOutput({
    required this.creationTime,
    required this.projectArn,
    required this.projectId,
    required this.projectName,
    required this.projectStatus,
    required this.serviceCatalogProvisioningDetails,
    this.createdBy,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.projectDescription,
    this.serviceCatalogProvisionedProductDetails,
  });

  factory DescribeProjectOutput.fromJson(Map<String, dynamic> json) {
    return DescribeProjectOutput(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      projectArn: json['ProjectArn'] as String,
      projectId: json['ProjectId'] as String,
      projectName: json['ProjectName'] as String,
      projectStatus:
          ProjectStatus.fromString((json['ProjectStatus'] as String)),
      serviceCatalogProvisioningDetails:
          ServiceCatalogProvisioningDetails.fromJson(
              json['ServiceCatalogProvisioningDetails']
                  as Map<String, dynamic>),
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      projectDescription: json['ProjectDescription'] as String?,
      serviceCatalogProvisionedProductDetails:
          json['ServiceCatalogProvisionedProductDetails'] != null
              ? ServiceCatalogProvisionedProductDetails.fromJson(
                  json['ServiceCatalogProvisionedProductDetails']
                      as Map<String, dynamic>)
              : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final projectArn = this.projectArn;
    final projectId = this.projectId;
    final projectName = this.projectName;
    final projectStatus = this.projectStatus;
    final serviceCatalogProvisioningDetails =
        this.serviceCatalogProvisioningDetails;
    final createdBy = this.createdBy;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final projectDescription = this.projectDescription;
    final serviceCatalogProvisionedProductDetails =
        this.serviceCatalogProvisionedProductDetails;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ProjectArn': projectArn,
      'ProjectId': projectId,
      'ProjectName': projectName,
      'ProjectStatus': projectStatus.value,
      'ServiceCatalogProvisioningDetails': serviceCatalogProvisioningDetails,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (projectDescription != null) 'ProjectDescription': projectDescription,
      if (serviceCatalogProvisionedProductDetails != null)
        'ServiceCatalogProvisionedProductDetails':
            serviceCatalogProvisionedProductDetails,
    };
  }
}

class DescribeSpaceResponse {
  /// The creation time.
  final DateTime? creationTime;

  /// The ID of the associated domain.
  final String? domainId;

  /// The failure reason.
  final String? failureReason;

  /// The ID of the space's profile in the Amazon EFS volume.
  final String? homeEfsFileSystemUid;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The collection of ownership settings for a space.
  final OwnershipSettings? ownershipSettings;

  /// The space's Amazon Resource Name (ARN).
  final String? spaceArn;

  /// The name of the space that appears in the Amazon SageMaker Studio UI.
  final String? spaceDisplayName;

  /// The name of the space.
  final String? spaceName;

  /// A collection of space settings.
  final SpaceSettings? spaceSettings;

  /// The collection of space sharing settings for a space.
  final SpaceSharingSettings? spaceSharingSettings;

  /// The status.
  final SpaceStatus? status;

  /// Returns the URL of the space. If the space is created with Amazon Web
  /// Services IAM Identity Center (Successor to Amazon Web Services Single
  /// Sign-On) authentication, users can navigate to the URL after appending the
  /// respective redirect parameter for the application type to be federated
  /// through Amazon Web Services IAM Identity Center.
  ///
  /// The following application types are supported:
  ///
  /// <ul>
  /// <li>
  /// Studio Classic: <code>&amp;redirect=JupyterServer</code>
  /// </li>
  /// <li>
  /// JupyterLab: <code>&amp;redirect=JupyterLab</code>
  /// </li>
  /// <li>
  /// Code Editor, based on Code-OSS, Visual Studio Code - Open Source:
  /// <code>&amp;redirect=CodeEditor</code>
  /// </li>
  /// </ul>
  final String? url;

  DescribeSpaceResponse({
    this.creationTime,
    this.domainId,
    this.failureReason,
    this.homeEfsFileSystemUid,
    this.lastModifiedTime,
    this.ownershipSettings,
    this.spaceArn,
    this.spaceDisplayName,
    this.spaceName,
    this.spaceSettings,
    this.spaceSharingSettings,
    this.status,
    this.url,
  });

  factory DescribeSpaceResponse.fromJson(Map<String, dynamic> json) {
    return DescribeSpaceResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      failureReason: json['FailureReason'] as String?,
      homeEfsFileSystemUid: json['HomeEfsFileSystemUid'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      ownershipSettings: json['OwnershipSettings'] != null
          ? OwnershipSettings.fromJson(
              json['OwnershipSettings'] as Map<String, dynamic>)
          : null,
      spaceArn: json['SpaceArn'] as String?,
      spaceDisplayName: json['SpaceDisplayName'] as String?,
      spaceName: json['SpaceName'] as String?,
      spaceSettings: json['SpaceSettings'] != null
          ? SpaceSettings.fromJson(
              json['SpaceSettings'] as Map<String, dynamic>)
          : null,
      spaceSharingSettings: json['SpaceSharingSettings'] != null
          ? SpaceSharingSettings.fromJson(
              json['SpaceSharingSettings'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.let(SpaceStatus.fromString),
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final failureReason = this.failureReason;
    final homeEfsFileSystemUid = this.homeEfsFileSystemUid;
    final lastModifiedTime = this.lastModifiedTime;
    final ownershipSettings = this.ownershipSettings;
    final spaceArn = this.spaceArn;
    final spaceDisplayName = this.spaceDisplayName;
    final spaceName = this.spaceName;
    final spaceSettings = this.spaceSettings;
    final spaceSharingSettings = this.spaceSharingSettings;
    final status = this.status;
    final url = this.url;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (failureReason != null) 'FailureReason': failureReason,
      if (homeEfsFileSystemUid != null)
        'HomeEfsFileSystemUid': homeEfsFileSystemUid,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (ownershipSettings != null) 'OwnershipSettings': ownershipSettings,
      if (spaceArn != null) 'SpaceArn': spaceArn,
      if (spaceDisplayName != null) 'SpaceDisplayName': spaceDisplayName,
      if (spaceName != null) 'SpaceName': spaceName,
      if (spaceSettings != null) 'SpaceSettings': spaceSettings,
      if (spaceSharingSettings != null)
        'SpaceSharingSettings': spaceSharingSettings,
      if (status != null) 'Status': status.value,
      if (url != null) 'Url': url,
    };
  }
}

class DescribeStudioLifecycleConfigResponse {
  /// The creation time of the Amazon SageMaker Studio Lifecycle Configuration.
  final DateTime? creationTime;

  /// This value is equivalent to CreationTime because Amazon SageMaker Studio
  /// Lifecycle Configurations are immutable.
  final DateTime? lastModifiedTime;

  /// The App type that the Lifecycle Configuration is attached to.
  final StudioLifecycleConfigAppType? studioLifecycleConfigAppType;

  /// The ARN of the Lifecycle Configuration to describe.
  final String? studioLifecycleConfigArn;

  /// The content of your Amazon SageMaker Studio Lifecycle Configuration script.
  final String? studioLifecycleConfigContent;

  /// The name of the Amazon SageMaker Studio Lifecycle Configuration that is
  /// described.
  final String? studioLifecycleConfigName;

  DescribeStudioLifecycleConfigResponse({
    this.creationTime,
    this.lastModifiedTime,
    this.studioLifecycleConfigAppType,
    this.studioLifecycleConfigArn,
    this.studioLifecycleConfigContent,
    this.studioLifecycleConfigName,
  });

  factory DescribeStudioLifecycleConfigResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeStudioLifecycleConfigResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      studioLifecycleConfigAppType:
          (json['StudioLifecycleConfigAppType'] as String?)
              ?.let(StudioLifecycleConfigAppType.fromString),
      studioLifecycleConfigArn: json['StudioLifecycleConfigArn'] as String?,
      studioLifecycleConfigContent:
          json['StudioLifecycleConfigContent'] as String?,
      studioLifecycleConfigName: json['StudioLifecycleConfigName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final studioLifecycleConfigAppType = this.studioLifecycleConfigAppType;
    final studioLifecycleConfigArn = this.studioLifecycleConfigArn;
    final studioLifecycleConfigContent = this.studioLifecycleConfigContent;
    final studioLifecycleConfigName = this.studioLifecycleConfigName;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (studioLifecycleConfigAppType != null)
        'StudioLifecycleConfigAppType': studioLifecycleConfigAppType.value,
      if (studioLifecycleConfigArn != null)
        'StudioLifecycleConfigArn': studioLifecycleConfigArn,
      if (studioLifecycleConfigContent != null)
        'StudioLifecycleConfigContent': studioLifecycleConfigContent,
      if (studioLifecycleConfigName != null)
        'StudioLifecycleConfigName': studioLifecycleConfigName,
    };
  }
}

class DescribeSubscribedWorkteamResponse {
  /// A <code>Workteam</code> instance that contains information about the work
  /// team.
  final SubscribedWorkteam subscribedWorkteam;

  DescribeSubscribedWorkteamResponse({
    required this.subscribedWorkteam,
  });

  factory DescribeSubscribedWorkteamResponse.fromJson(
      Map<String, dynamic> json) {
    return DescribeSubscribedWorkteamResponse(
      subscribedWorkteam: SubscribedWorkteam.fromJson(
          json['SubscribedWorkteam'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final subscribedWorkteam = this.subscribedWorkteam;
    return {
      'SubscribedWorkteam': subscribedWorkteam,
    };
  }
}

class DescribeTrainingJobResponse {
  /// Information about the algorithm used for training, and algorithm metadata.
  final AlgorithmSpecification algorithmSpecification;

  /// A timestamp that indicates when the training job was created.
  final DateTime creationTime;

  /// Information about the Amazon S3 location that is configured for storing
  /// model artifacts.
  final ModelArtifacts modelArtifacts;

  /// Resources, including ML compute instances and ML storage volumes, that are
  /// configured for model training.
  final ResourceConfig resourceConfig;

  /// Provides detailed information about the state of the training job. For
  /// detailed information on the secondary status of the training job, see
  /// <code>StatusMessage</code> under <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SecondaryStatusTransition.html">SecondaryStatusTransition</a>.
  ///
  /// SageMaker provides primary statuses and secondary statuses that apply to
  /// each of them:
  /// <dl> <dt>InProgress</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Starting</code> - Starting the training job.
  /// </li>
  /// <li>
  /// <code>Downloading</code> - An optional stage for algorithms that support
  /// <code>File</code> training input mode. It indicates that data is being
  /// downloaded to the ML storage volumes.
  /// </li>
  /// <li>
  /// <code>Training</code> - Training is in progress.
  /// </li>
  /// <li>
  /// <code>Interrupted</code> - The job stopped because the managed spot training
  /// instances were interrupted.
  /// </li>
  /// <li>
  /// <code>Uploading</code> - Training is complete and the model artifacts are
  /// being uploaded to the S3 location.
  /// </li>
  /// </ul> </dd> <dt>Completed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// </ul> </dd> <dt>Failed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Failed</code> - The training job has failed. The reason for the
  /// failure is returned in the <code>FailureReason</code> field of
  /// <code>DescribeTrainingJobResponse</code>.
  /// </li>
  /// </ul> </dd> <dt>Stopped</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>MaxRuntimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed runtime.
  /// </li>
  /// <li>
  /// <code>MaxWaitTimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed wait time.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul> </dd> <dt>Stopping</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Stopping</code> - Stopping the training job.
  /// </li>
  /// </ul> </dd> </dl> <important>
  /// Valid values for <code>SecondaryStatus</code> are subject to change.
  /// </important>
  /// We no longer support the following secondary statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>LaunchingMLInstances</code>
  /// </li>
  /// <li>
  /// <code>PreparingTraining</code>
  /// </li>
  /// <li>
  /// <code>DownloadingTrainingImage</code>
  /// </li>
  /// </ul>
  final SecondaryStatus secondaryStatus;

  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the job
  /// reaches the time limit, SageMaker ends the training job. Use this API to cap
  /// model training costs.
  ///
  /// To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code>
  /// signal, which delays job termination for 120 seconds. Algorithms can use
  /// this 120-second window to save the model artifacts, so the results of
  /// training are not lost.
  final StoppingCondition stoppingCondition;

  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  /// Name of the model training job.
  final String trainingJobName;

  /// The status of the training job.
  ///
  /// SageMaker provides the following training job statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code> - The training is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// <li>
  /// <code>Failed</code> - The training job has failed. To see the reason for the
  /// failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeTrainingJobResponse</code> call.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - The training job is stopping.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul>
  /// For more detailed information, see <code>SecondaryStatus</code>.
  final TrainingJobStatus trainingJobStatus;

  /// The Amazon Resource Name (ARN) of an AutoML job.
  final String? autoMLJobArn;

  /// The billable time in seconds. Billable time refers to the absolute
  /// wall-clock time.
  ///
  /// Multiply <code>BillableTimeInSeconds</code> by the number of instances
  /// (<code>InstanceCount</code>) in your training cluster to get the total
  /// compute time SageMaker bills you if you run distributed training. The
  /// formula is as follows: <code>BillableTimeInSeconds * InstanceCount</code> .
  ///
  /// You can calculate the savings from using managed spot training using the
  /// formula <code>(1 - BillableTimeInSeconds / TrainingTimeInSeconds) *
  /// 100</code>. For example, if <code>BillableTimeInSeconds</code> is 100 and
  /// <code>TrainingTimeInSeconds</code> is 500, the savings is 80%.
  final int? billableTimeInSeconds;
  final CheckpointConfig? checkpointConfig;
  final DebugHookConfig? debugHookConfig;

  /// Configuration information for Amazon SageMaker Debugger rules for debugging
  /// output tensors.
  final List<DebugRuleConfiguration>? debugRuleConfigurations;

  /// Evaluation status of Amazon SageMaker Debugger rules for debugging on a
  /// training job.
  final List<DebugRuleEvaluationStatus>? debugRuleEvaluationStatuses;

  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security for
  /// distributed training, but training might take longer. How long it takes
  /// depends on the amount of communication between compute instances, especially
  /// if you use a deep learning algorithms in distributed training.
  final bool? enableInterContainerTrafficEncryption;

  /// A Boolean indicating whether managed spot training is enabled
  /// (<code>True</code>) or not (<code>False</code>).
  final bool? enableManagedSpotTraining;

  /// If you want to allow inbound or outbound network calls, except for calls
  /// between peers within a training cluster for distributed training, choose
  /// <code>True</code>. If you enable network isolation for training jobs that
  /// are configured to use a VPC, SageMaker downloads and uploads customer data
  /// and model artifacts through the specified VPC, but the training container
  /// does not have network access.
  final bool? enableNetworkIsolation;

  /// The environment variables to set in the Docker container.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the training job failed, the reason it failed.
  final String? failureReason;

  /// A collection of <code>MetricData</code> objects that specify the names,
  /// values, and dates and times that the training algorithm emitted to Amazon
  /// CloudWatch.
  final List<MetricData>? finalMetricDataList;

  /// Algorithm-specific parameters.
  final Map<String, String>? hyperParameters;

  /// Contains information about the infrastructure health check configuration for
  /// the training job.
  final InfraCheckConfig? infraCheckConfig;

  /// An array of <code>Channel</code> objects that describes each data input
  /// channel.
  final List<Channel>? inputDataConfig;

  /// The Amazon Resource Name (ARN) of the SageMaker Ground Truth labeling job
  /// that created the transform or training job.
  final String? labelingJobArn;

  /// A timestamp that indicates when the status of the training job was last
  /// modified.
  final DateTime? lastModifiedTime;

  /// The S3 path where model artifacts that you configured when creating the job
  /// are stored. SageMaker creates subfolders for model artifacts.
  final OutputDataConfig? outputDataConfig;
  final ProfilerConfig? profilerConfig;

  /// Configuration information for Amazon SageMaker Debugger rules for profiling
  /// system and framework metrics.
  final List<ProfilerRuleConfiguration>? profilerRuleConfigurations;

  /// Evaluation status of Amazon SageMaker Debugger rules for profiling on a
  /// training job.
  final List<ProfilerRuleEvaluationStatus>? profilerRuleEvaluationStatuses;

  /// Profiling status of a training job.
  final ProfilingStatus? profilingStatus;

  /// Configuration for remote debugging. To learn more about the remote debugging
  /// functionality of SageMaker, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html">Access
  /// a training container through Amazon Web Services Systems Manager (SSM) for
  /// remote debugging</a>.
  final RemoteDebugConfig? remoteDebugConfig;

  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  final RetryStrategy? retryStrategy;

  /// The Amazon Web Services Identity and Access Management (IAM) role configured
  /// for the training job.
  final String? roleArn;

  /// A history of all of the secondary statuses that the training job has
  /// transitioned through.
  final List<SecondaryStatusTransition>? secondaryStatusTransitions;
  final TensorBoardOutputConfig? tensorBoardOutputConfig;

  /// Indicates the time when the training job ends on training instances. You are
  /// billed for the time interval between the value of
  /// <code>TrainingStartTime</code> and this time. For successful jobs and
  /// stopped jobs, this is the time after model artifacts are uploaded. For
  /// failed jobs, this is the time when SageMaker detects a job failure.
  final DateTime? trainingEndTime;

  /// Indicates the time when the training job starts on training instances. You
  /// are billed for the time interval between this time and the value of
  /// <code>TrainingEndTime</code>. The start time in CloudWatch Logs might be
  /// later than this time. The difference is due to the time it takes to download
  /// the training data and to the size of the training container.
  final DateTime? trainingStartTime;

  /// The training time in seconds.
  final int? trainingTimeInSeconds;

  /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job
  /// if the training job was launched by a hyperparameter tuning job.
  final String? tuningJobArn;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that this training job has access to. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  final VpcConfig? vpcConfig;

  /// The status of the warm pool associated with the training job.
  final WarmPoolStatus? warmPoolStatus;

  DescribeTrainingJobResponse({
    required this.algorithmSpecification,
    required this.creationTime,
    required this.modelArtifacts,
    required this.resourceConfig,
    required this.secondaryStatus,
    required this.stoppingCondition,
    required this.trainingJobArn,
    required this.trainingJobName,
    required this.trainingJobStatus,
    this.autoMLJobArn,
    this.billableTimeInSeconds,
    this.checkpointConfig,
    this.debugHookConfig,
    this.debugRuleConfigurations,
    this.debugRuleEvaluationStatuses,
    this.enableInterContainerTrafficEncryption,
    this.enableManagedSpotTraining,
    this.enableNetworkIsolation,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.finalMetricDataList,
    this.hyperParameters,
    this.infraCheckConfig,
    this.inputDataConfig,
    this.labelingJobArn,
    this.lastModifiedTime,
    this.outputDataConfig,
    this.profilerConfig,
    this.profilerRuleConfigurations,
    this.profilerRuleEvaluationStatuses,
    this.profilingStatus,
    this.remoteDebugConfig,
    this.retryStrategy,
    this.roleArn,
    this.secondaryStatusTransitions,
    this.tensorBoardOutputConfig,
    this.trainingEndTime,
    this.trainingStartTime,
    this.trainingTimeInSeconds,
    this.tuningJobArn,
    this.vpcConfig,
    this.warmPoolStatus,
  });

  factory DescribeTrainingJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTrainingJobResponse(
      algorithmSpecification: AlgorithmSpecification.fromJson(
          json['AlgorithmSpecification'] as Map<String, dynamic>),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelArtifacts: ModelArtifacts.fromJson(
          json['ModelArtifacts'] as Map<String, dynamic>),
      resourceConfig: ResourceConfig.fromJson(
          json['ResourceConfig'] as Map<String, dynamic>),
      secondaryStatus:
          SecondaryStatus.fromString((json['SecondaryStatus'] as String)),
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      trainingJobArn: json['TrainingJobArn'] as String,
      trainingJobName: json['TrainingJobName'] as String,
      trainingJobStatus:
          TrainingJobStatus.fromString((json['TrainingJobStatus'] as String)),
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      billableTimeInSeconds: json['BillableTimeInSeconds'] as int?,
      checkpointConfig: json['CheckpointConfig'] != null
          ? CheckpointConfig.fromJson(
              json['CheckpointConfig'] as Map<String, dynamic>)
          : null,
      debugHookConfig: json['DebugHookConfig'] != null
          ? DebugHookConfig.fromJson(
              json['DebugHookConfig'] as Map<String, dynamic>)
          : null,
      debugRuleConfigurations: (json['DebugRuleConfigurations'] as List?)
          ?.nonNulls
          .map(
              (e) => DebugRuleConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      debugRuleEvaluationStatuses:
          (json['DebugRuleEvaluationStatuses'] as List?)
              ?.nonNulls
              .map((e) =>
                  DebugRuleEvaluationStatus.fromJson(e as Map<String, dynamic>))
              .toList(),
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableManagedSpotTraining: json['EnableManagedSpotTraining'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      finalMetricDataList: (json['FinalMetricDataList'] as List?)
          ?.nonNulls
          .map((e) => MetricData.fromJson(e as Map<String, dynamic>))
          .toList(),
      hyperParameters: (json['HyperParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      infraCheckConfig: json['InfraCheckConfig'] != null
          ? InfraCheckConfig.fromJson(
              json['InfraCheckConfig'] as Map<String, dynamic>)
          : null,
      inputDataConfig: (json['InputDataConfig'] as List?)
          ?.nonNulls
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      labelingJobArn: json['LabelingJobArn'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      outputDataConfig: json['OutputDataConfig'] != null
          ? OutputDataConfig.fromJson(
              json['OutputDataConfig'] as Map<String, dynamic>)
          : null,
      profilerConfig: json['ProfilerConfig'] != null
          ? ProfilerConfig.fromJson(
              json['ProfilerConfig'] as Map<String, dynamic>)
          : null,
      profilerRuleConfigurations: (json['ProfilerRuleConfigurations'] as List?)
          ?.nonNulls
          .map((e) =>
              ProfilerRuleConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      profilerRuleEvaluationStatuses: (json['ProfilerRuleEvaluationStatuses']
              as List?)
          ?.nonNulls
          .map((e) =>
              ProfilerRuleEvaluationStatus.fromJson(e as Map<String, dynamic>))
          .toList(),
      profilingStatus:
          (json['ProfilingStatus'] as String?)?.let(ProfilingStatus.fromString),
      remoteDebugConfig: json['RemoteDebugConfig'] != null
          ? RemoteDebugConfig.fromJson(
              json['RemoteDebugConfig'] as Map<String, dynamic>)
          : null,
      retryStrategy: json['RetryStrategy'] != null
          ? RetryStrategy.fromJson(
              json['RetryStrategy'] as Map<String, dynamic>)
          : null,
      roleArn: json['RoleArn'] as String?,
      secondaryStatusTransitions: (json['SecondaryStatusTransitions'] as List?)
          ?.nonNulls
          .map((e) =>
              SecondaryStatusTransition.fromJson(e as Map<String, dynamic>))
          .toList(),
      tensorBoardOutputConfig: json['TensorBoardOutputConfig'] != null
          ? TensorBoardOutputConfig.fromJson(
              json['TensorBoardOutputConfig'] as Map<String, dynamic>)
          : null,
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      trainingStartTime: timeStampFromJson(json['TrainingStartTime']),
      trainingTimeInSeconds: json['TrainingTimeInSeconds'] as int?,
      tuningJobArn: json['TuningJobArn'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
      warmPoolStatus: json['WarmPoolStatus'] != null
          ? WarmPoolStatus.fromJson(
              json['WarmPoolStatus'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSpecification = this.algorithmSpecification;
    final creationTime = this.creationTime;
    final modelArtifacts = this.modelArtifacts;
    final resourceConfig = this.resourceConfig;
    final secondaryStatus = this.secondaryStatus;
    final stoppingCondition = this.stoppingCondition;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final autoMLJobArn = this.autoMLJobArn;
    final billableTimeInSeconds = this.billableTimeInSeconds;
    final checkpointConfig = this.checkpointConfig;
    final debugHookConfig = this.debugHookConfig;
    final debugRuleConfigurations = this.debugRuleConfigurations;
    final debugRuleEvaluationStatuses = this.debugRuleEvaluationStatuses;
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableManagedSpotTraining = this.enableManagedSpotTraining;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final finalMetricDataList = this.finalMetricDataList;
    final hyperParameters = this.hyperParameters;
    final infraCheckConfig = this.infraCheckConfig;
    final inputDataConfig = this.inputDataConfig;
    final labelingJobArn = this.labelingJobArn;
    final lastModifiedTime = this.lastModifiedTime;
    final outputDataConfig = this.outputDataConfig;
    final profilerConfig = this.profilerConfig;
    final profilerRuleConfigurations = this.profilerRuleConfigurations;
    final profilerRuleEvaluationStatuses = this.profilerRuleEvaluationStatuses;
    final profilingStatus = this.profilingStatus;
    final remoteDebugConfig = this.remoteDebugConfig;
    final retryStrategy = this.retryStrategy;
    final roleArn = this.roleArn;
    final secondaryStatusTransitions = this.secondaryStatusTransitions;
    final tensorBoardOutputConfig = this.tensorBoardOutputConfig;
    final trainingEndTime = this.trainingEndTime;
    final trainingStartTime = this.trainingStartTime;
    final trainingTimeInSeconds = this.trainingTimeInSeconds;
    final tuningJobArn = this.tuningJobArn;
    final vpcConfig = this.vpcConfig;
    final warmPoolStatus = this.warmPoolStatus;
    return {
      'AlgorithmSpecification': algorithmSpecification,
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelArtifacts': modelArtifacts,
      'ResourceConfig': resourceConfig,
      'SecondaryStatus': secondaryStatus.value,
      'StoppingCondition': stoppingCondition,
      'TrainingJobArn': trainingJobArn,
      'TrainingJobName': trainingJobName,
      'TrainingJobStatus': trainingJobStatus.value,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (billableTimeInSeconds != null)
        'BillableTimeInSeconds': billableTimeInSeconds,
      if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
      if (debugHookConfig != null) 'DebugHookConfig': debugHookConfig,
      if (debugRuleConfigurations != null)
        'DebugRuleConfigurations': debugRuleConfigurations,
      if (debugRuleEvaluationStatuses != null)
        'DebugRuleEvaluationStatuses': debugRuleEvaluationStatuses,
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableManagedSpotTraining != null)
        'EnableManagedSpotTraining': enableManagedSpotTraining,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalMetricDataList != null)
        'FinalMetricDataList': finalMetricDataList,
      if (hyperParameters != null) 'HyperParameters': hyperParameters,
      if (infraCheckConfig != null) 'InfraCheckConfig': infraCheckConfig,
      if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (outputDataConfig != null) 'OutputDataConfig': outputDataConfig,
      if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
      if (profilerRuleConfigurations != null)
        'ProfilerRuleConfigurations': profilerRuleConfigurations,
      if (profilerRuleEvaluationStatuses != null)
        'ProfilerRuleEvaluationStatuses': profilerRuleEvaluationStatuses,
      if (profilingStatus != null) 'ProfilingStatus': profilingStatus.value,
      if (remoteDebugConfig != null) 'RemoteDebugConfig': remoteDebugConfig,
      if (retryStrategy != null) 'RetryStrategy': retryStrategy,
      if (roleArn != null) 'RoleArn': roleArn,
      if (secondaryStatusTransitions != null)
        'SecondaryStatusTransitions': secondaryStatusTransitions,
      if (tensorBoardOutputConfig != null)
        'TensorBoardOutputConfig': tensorBoardOutputConfig,
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (trainingStartTime != null)
        'TrainingStartTime': unixTimestampToJson(trainingStartTime),
      if (trainingTimeInSeconds != null)
        'TrainingTimeInSeconds': trainingTimeInSeconds,
      if (tuningJobArn != null) 'TuningJobArn': tuningJobArn,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
      if (warmPoolStatus != null) 'WarmPoolStatus': warmPoolStatus,
    };
  }
}

class DescribeTransformJobResponse {
  /// A timestamp that shows when the transform Job was created.
  final DateTime creationTime;

  /// The name of the model used in the transform job.
  final String modelName;

  /// Describes the dataset to be transformed and the Amazon S3 location where it
  /// is stored.
  final TransformInput transformInput;

  /// The Amazon Resource Name (ARN) of the transform job.
  final String transformJobArn;

  /// The name of the transform job.
  final String transformJobName;

  /// The status of the transform job. If the transform job failed, the reason is
  /// returned in the <code>FailureReason</code> field.
  final TransformJobStatus transformJobStatus;

  /// Describes the resources, including ML instance types and ML instance count,
  /// to use for the transform job.
  final TransformResources transformResources;

  /// The Amazon Resource Name (ARN) of the AutoML transform job.
  final String? autoMLJobArn;

  /// Specifies the number of records to include in a mini-batch for an HTTP
  /// inference request. A <i>record</i> <i/> is a single unit of input data that
  /// inference can be made on. For example, a single line in a CSV file is a
  /// record.
  ///
  /// To enable the batch strategy, you must set <code>SplitType</code> to
  /// <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.
  final BatchStrategy? batchStrategy;

  /// Configuration to control how SageMaker captures inference data.
  final BatchDataCaptureConfig? dataCaptureConfig;
  final DataProcessing? dataProcessing;

  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the transform job failed, <code>FailureReason</code> describes why it
  /// failed. A transform job creates a log file, which includes error messages,
  /// and stores it as an Amazon S3 object. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html">Log
  /// Amazon SageMaker Events with Amazon CloudWatch</a>.
  final String? failureReason;

  /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling
  /// job that created the transform or training job.
  final String? labelingJobArn;

  /// The maximum number of parallel requests on each instance node that can be
  /// launched in a transform job. The default value is 1.
  final int? maxConcurrentTransforms;

  /// The maximum payload size, in MB, used in the transform job.
  final int? maxPayloadInMB;

  /// The timeout and maximum number of retries for processing a transform job
  /// invocation.
  final ModelClientConfig? modelClientConfig;

  /// Indicates when the transform job has been completed, or has stopped or
  /// failed. You are billed for the time interval between this time and the value
  /// of <code>TransformStartTime</code>.
  final DateTime? transformEndTime;

  /// Identifies the Amazon S3 location where you want Amazon SageMaker to save
  /// the results from the transform job.
  final TransformOutput? transformOutput;

  /// Indicates when the transform job starts on ML instances. You are billed for
  /// the time interval between this time and the value of
  /// <code>TransformEndTime</code>.
  final DateTime? transformStartTime;

  DescribeTransformJobResponse({
    required this.creationTime,
    required this.modelName,
    required this.transformInput,
    required this.transformJobArn,
    required this.transformJobName,
    required this.transformJobStatus,
    required this.transformResources,
    this.autoMLJobArn,
    this.batchStrategy,
    this.dataCaptureConfig,
    this.dataProcessing,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.labelingJobArn,
    this.maxConcurrentTransforms,
    this.maxPayloadInMB,
    this.modelClientConfig,
    this.transformEndTime,
    this.transformOutput,
    this.transformStartTime,
  });

  factory DescribeTransformJobResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTransformJobResponse(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelName: json['ModelName'] as String,
      transformInput: TransformInput.fromJson(
          json['TransformInput'] as Map<String, dynamic>),
      transformJobArn: json['TransformJobArn'] as String,
      transformJobName: json['TransformJobName'] as String,
      transformJobStatus:
          TransformJobStatus.fromString((json['TransformJobStatus'] as String)),
      transformResources: TransformResources.fromJson(
          json['TransformResources'] as Map<String, dynamic>),
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      batchStrategy:
          (json['BatchStrategy'] as String?)?.let(BatchStrategy.fromString),
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? BatchDataCaptureConfig.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      dataProcessing: json['DataProcessing'] != null
          ? DataProcessing.fromJson(
              json['DataProcessing'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      labelingJobArn: json['LabelingJobArn'] as String?,
      maxConcurrentTransforms: json['MaxConcurrentTransforms'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
      modelClientConfig: json['ModelClientConfig'] != null
          ? ModelClientConfig.fromJson(
              json['ModelClientConfig'] as Map<String, dynamic>)
          : null,
      transformEndTime: timeStampFromJson(json['TransformEndTime']),
      transformOutput: json['TransformOutput'] != null
          ? TransformOutput.fromJson(
              json['TransformOutput'] as Map<String, dynamic>)
          : null,
      transformStartTime: timeStampFromJson(json['TransformStartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelName = this.modelName;
    final transformInput = this.transformInput;
    final transformJobArn = this.transformJobArn;
    final transformJobName = this.transformJobName;
    final transformJobStatus = this.transformJobStatus;
    final transformResources = this.transformResources;
    final autoMLJobArn = this.autoMLJobArn;
    final batchStrategy = this.batchStrategy;
    final dataCaptureConfig = this.dataCaptureConfig;
    final dataProcessing = this.dataProcessing;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final labelingJobArn = this.labelingJobArn;
    final maxConcurrentTransforms = this.maxConcurrentTransforms;
    final maxPayloadInMB = this.maxPayloadInMB;
    final modelClientConfig = this.modelClientConfig;
    final transformEndTime = this.transformEndTime;
    final transformOutput = this.transformOutput;
    final transformStartTime = this.transformStartTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelName': modelName,
      'TransformInput': transformInput,
      'TransformJobArn': transformJobArn,
      'TransformJobName': transformJobName,
      'TransformJobStatus': transformJobStatus.value,
      'TransformResources': transformResources,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (batchStrategy != null) 'BatchStrategy': batchStrategy.value,
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (dataProcessing != null) 'DataProcessing': dataProcessing,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (maxConcurrentTransforms != null)
        'MaxConcurrentTransforms': maxConcurrentTransforms,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
      if (modelClientConfig != null) 'ModelClientConfig': modelClientConfig,
      if (transformEndTime != null)
        'TransformEndTime': unixTimestampToJson(transformEndTime),
      if (transformOutput != null) 'TransformOutput': transformOutput,
      if (transformStartTime != null)
        'TransformStartTime': unixTimestampToJson(transformStartTime),
    };
  }
}

class DescribeTrialComponentResponse {
  /// Who created the trial component.
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The name of the component as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialComponentName</code> is displayed.
  final String? displayName;

  /// When the component ended.
  final DateTime? endTime;

  /// The input artifacts of the component.
  final Map<String, TrialComponentArtifact>? inputArtifacts;

  /// Who last modified the component.
  final UserContext? lastModifiedBy;

  /// When the component was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupArn;
  final MetadataProperties? metadataProperties;

  /// The metrics for the component.
  final List<TrialComponentMetricSummary>? metrics;

  /// The output artifacts of the component.
  final Map<String, TrialComponentArtifact>? outputArtifacts;

  /// The hyperparameters of the component.
  final Map<String, TrialComponentParameterValue>? parameters;

  /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
  final TrialComponentSource? source;

  /// A list of ARNs and, if applicable, job types for multiple sources of an
  /// experiment run.
  final List<TrialComponentSource>? sources;

  /// When the component started.
  final DateTime? startTime;

  /// The status of the component. States include:
  ///
  /// <ul>
  /// <li>
  /// InProgress
  /// </li>
  /// <li>
  /// Completed
  /// </li>
  /// <li>
  /// Failed
  /// </li>
  /// </ul>
  final TrialComponentStatus? status;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;

  DescribeTrialComponentResponse({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.endTime,
    this.inputArtifacts,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.metadataProperties,
    this.metrics,
    this.outputArtifacts,
    this.parameters,
    this.source,
    this.sources,
    this.startTime,
    this.status,
    this.trialComponentArn,
    this.trialComponentName,
  });

  factory DescribeTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTrialComponentResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      endTime: timeStampFromJson(json['EndTime']),
      inputArtifacts: (json['InputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      metrics: (json['Metrics'] as List?)
          ?.nonNulls
          .map((e) =>
              TrialComponentMetricSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputArtifacts: (json['OutputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      parameters: (json['Parameters'] as Map<String, dynamic>?)?.map((k, e) =>
          MapEntry(
              k,
              TrialComponentParameterValue.fromJson(
                  e as Map<String, dynamic>))),
      source: json['Source'] != null
          ? TrialComponentSource.fromJson(
              json['Source'] as Map<String, dynamic>)
          : null,
      sources: (json['Sources'] as List?)
          ?.nonNulls
          .map((e) => TrialComponentSource.fromJson(e as Map<String, dynamic>))
          .toList(),
      startTime: timeStampFromJson(json['StartTime']),
      status: json['Status'] != null
          ? TrialComponentStatus.fromJson(
              json['Status'] as Map<String, dynamic>)
          : null,
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final endTime = this.endTime;
    final inputArtifacts = this.inputArtifacts;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final metadataProperties = this.metadataProperties;
    final metrics = this.metrics;
    final outputArtifacts = this.outputArtifacts;
    final parameters = this.parameters;
    final source = this.source;
    final sources = this.sources;
    final startTime = this.startTime;
    final status = this.status;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (metrics != null) 'Metrics': metrics,
      if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
      if (parameters != null) 'Parameters': parameters,
      if (source != null) 'Source': source,
      if (sources != null) 'Sources': sources,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (status != null) 'Status': status,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
    };
  }
}

class DescribeTrialResponse {
  /// Who created the trial.
  final UserContext? createdBy;

  /// When the trial was created.
  final DateTime? creationTime;

  /// The name of the trial as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialName</code> is displayed.
  final String? displayName;

  /// The name of the experiment the trial is part of.
  final String? experimentName;

  /// Who last modified the trial.
  final UserContext? lastModifiedBy;

  /// When the trial was last modified.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;

  /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
  final TrialSource? source;

  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The name of the trial.
  final String? trialName;

  DescribeTrialResponse({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.source,
    this.trialArn,
    this.trialName,
  });

  factory DescribeTrialResponse.fromJson(Map<String, dynamic> json) {
    return DescribeTrialResponse(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      source: json['Source'] != null
          ? TrialSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      trialArn: json['TrialArn'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final source = this.source;
    final trialArn = this.trialArn;
    final trialName = this.trialName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (source != null) 'Source': source,
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

class DescribeUserProfileResponse {
  /// The creation time.
  final DateTime? creationTime;

  /// The ID of the domain that contains the profile.
  final String? domainId;

  /// The failure reason.
  final String? failureReason;

  /// The ID of the user's profile in the Amazon Elastic File System volume.
  final String? homeEfsFileSystemUid;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The IAM Identity Center user identifier.
  final String? singleSignOnUserIdentifier;

  /// The IAM Identity Center user value.
  final String? singleSignOnUserValue;

  /// The status.
  final UserProfileStatus? status;

  /// The user profile Amazon Resource Name (ARN).
  final String? userProfileArn;

  /// The user profile name.
  final String? userProfileName;

  /// A collection of settings.
  final UserSettings? userSettings;

  DescribeUserProfileResponse({
    this.creationTime,
    this.domainId,
    this.failureReason,
    this.homeEfsFileSystemUid,
    this.lastModifiedTime,
    this.singleSignOnUserIdentifier,
    this.singleSignOnUserValue,
    this.status,
    this.userProfileArn,
    this.userProfileName,
    this.userSettings,
  });

  factory DescribeUserProfileResponse.fromJson(Map<String, dynamic> json) {
    return DescribeUserProfileResponse(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      failureReason: json['FailureReason'] as String?,
      homeEfsFileSystemUid: json['HomeEfsFileSystemUid'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      singleSignOnUserIdentifier: json['SingleSignOnUserIdentifier'] as String?,
      singleSignOnUserValue: json['SingleSignOnUserValue'] as String?,
      status: (json['Status'] as String?)?.let(UserProfileStatus.fromString),
      userProfileArn: json['UserProfileArn'] as String?,
      userProfileName: json['UserProfileName'] as String?,
      userSettings: json['UserSettings'] != null
          ? UserSettings.fromJson(json['UserSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final failureReason = this.failureReason;
    final homeEfsFileSystemUid = this.homeEfsFileSystemUid;
    final lastModifiedTime = this.lastModifiedTime;
    final singleSignOnUserIdentifier = this.singleSignOnUserIdentifier;
    final singleSignOnUserValue = this.singleSignOnUserValue;
    final status = this.status;
    final userProfileArn = this.userProfileArn;
    final userProfileName = this.userProfileName;
    final userSettings = this.userSettings;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (failureReason != null) 'FailureReason': failureReason,
      if (homeEfsFileSystemUid != null)
        'HomeEfsFileSystemUid': homeEfsFileSystemUid,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (singleSignOnUserIdentifier != null)
        'SingleSignOnUserIdentifier': singleSignOnUserIdentifier,
      if (singleSignOnUserValue != null)
        'SingleSignOnUserValue': singleSignOnUserValue,
      if (status != null) 'Status': status.value,
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
      if (userProfileName != null) 'UserProfileName': userProfileName,
      if (userSettings != null) 'UserSettings': userSettings,
    };
  }
}

class DescribeWorkforceResponse {
  /// A single private workforce, which is automatically created when you create
  /// your first private work team. You can create one private work force in each
  /// Amazon Web Services Region. By default, any workforce-related API operation
  /// used in a specific region will apply to the workforce created in that
  /// region. To learn how to create a private workforce, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create
  /// a Private Workforce</a>.
  final Workforce workforce;

  DescribeWorkforceResponse({
    required this.workforce,
  });

  factory DescribeWorkforceResponse.fromJson(Map<String, dynamic> json) {
    return DescribeWorkforceResponse(
      workforce: Workforce.fromJson(json['Workforce'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workforce = this.workforce;
    return {
      'Workforce': workforce,
    };
  }
}

class DescribeWorkteamResponse {
  /// A <code>Workteam</code> instance that contains information about the work
  /// team.
  final Workteam workteam;

  DescribeWorkteamResponse({
    required this.workteam,
  });

  factory DescribeWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return DescribeWorkteamResponse(
      workteam: Workteam.fromJson(json['Workteam'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workteam = this.workteam;
    return {
      'Workteam': workteam,
    };
  }
}

/// Specifies weight and capacity values for a production variant.
class DesiredWeightAndCapacity {
  /// The name of the variant to update.
  final String variantName;

  /// The variant's capacity.
  final int? desiredInstanceCount;

  /// The variant's weight.
  final double? desiredWeight;

  /// Specifies the serverless update concurrency configuration for an endpoint
  /// variant.
  final ProductionVariantServerlessUpdateConfig? serverlessUpdateConfig;

  DesiredWeightAndCapacity({
    required this.variantName,
    this.desiredInstanceCount,
    this.desiredWeight,
    this.serverlessUpdateConfig,
  });

  Map<String, dynamic> toJson() {
    final variantName = this.variantName;
    final desiredInstanceCount = this.desiredInstanceCount;
    final desiredWeight = this.desiredWeight;
    final serverlessUpdateConfig = this.serverlessUpdateConfig;
    return {
      'VariantName': variantName,
      if (desiredInstanceCount != null)
        'DesiredInstanceCount': desiredInstanceCount,
      if (desiredWeight != null) 'DesiredWeight': desiredWeight,
      if (serverlessUpdateConfig != null)
        'ServerlessUpdateConfig': serverlessUpdateConfig,
    };
  }
}

enum DetailedAlgorithmStatus {
  notStarted('NotStarted'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  ;

  final String value;

  const DetailedAlgorithmStatus(this.value);

  static DetailedAlgorithmStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DetailedAlgorithmStatus'));
}

enum DetailedModelPackageStatus {
  notStarted('NotStarted'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  ;

  final String value;

  const DetailedModelPackageStatus(this.value);

  static DetailedModelPackageStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DetailedModelPackageStatus'));
}

/// Information of a particular device.
class Device {
  /// The name of the device.
  final String deviceName;

  /// Description of the device.
  final String? description;

  /// Amazon Web Services Internet of Things (IoT) object name.
  final String? iotThingName;

  Device({
    required this.deviceName,
    this.description,
    this.iotThingName,
  });

  Map<String, dynamic> toJson() {
    final deviceName = this.deviceName;
    final description = this.description;
    final iotThingName = this.iotThingName;
    return {
      'DeviceName': deviceName,
      if (description != null) 'Description': description,
      if (iotThingName != null) 'IotThingName': iotThingName,
    };
  }
}

enum DeviceDeploymentStatus {
  readytodeploy('READYTODEPLOY'),
  inprogress('INPROGRESS'),
  deployed('DEPLOYED'),
  failed('FAILED'),
  stopping('STOPPING'),
  stopped('STOPPED'),
  ;

  final String value;

  const DeviceDeploymentStatus(this.value);

  static DeviceDeploymentStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DeviceDeploymentStatus'));
}

/// Contains information summarizing device details and deployment status.
class DeviceDeploymentSummary {
  /// The ARN of the device.
  final String deviceArn;

  /// The name of the device.
  final String deviceName;

  /// The ARN of the edge deployment plan.
  final String edgeDeploymentPlanArn;

  /// The name of the edge deployment plan.
  final String edgeDeploymentPlanName;

  /// The name of the stage in the edge deployment plan.
  final String stageName;

  /// The name of the deployed stage.
  final String? deployedStageName;

  /// The time when the deployment on the device started.
  final DateTime? deploymentStartTime;

  /// The description of the device.
  final String? description;

  /// The deployment status of the device.
  final DeviceDeploymentStatus? deviceDeploymentStatus;

  /// The detailed error message for the deployoment status result.
  final String? deviceDeploymentStatusMessage;

  /// The name of the fleet to which the device belongs to.
  final String? deviceFleetName;

  DeviceDeploymentSummary({
    required this.deviceArn,
    required this.deviceName,
    required this.edgeDeploymentPlanArn,
    required this.edgeDeploymentPlanName,
    required this.stageName,
    this.deployedStageName,
    this.deploymentStartTime,
    this.description,
    this.deviceDeploymentStatus,
    this.deviceDeploymentStatusMessage,
    this.deviceFleetName,
  });

  factory DeviceDeploymentSummary.fromJson(Map<String, dynamic> json) {
    return DeviceDeploymentSummary(
      deviceArn: json['DeviceArn'] as String,
      deviceName: json['DeviceName'] as String,
      edgeDeploymentPlanArn: json['EdgeDeploymentPlanArn'] as String,
      edgeDeploymentPlanName: json['EdgeDeploymentPlanName'] as String,
      stageName: json['StageName'] as String,
      deployedStageName: json['DeployedStageName'] as String?,
      deploymentStartTime: timeStampFromJson(json['DeploymentStartTime']),
      description: json['Description'] as String?,
      deviceDeploymentStatus: (json['DeviceDeploymentStatus'] as String?)
          ?.let(DeviceDeploymentStatus.fromString),
      deviceDeploymentStatusMessage:
          json['DeviceDeploymentStatusMessage'] as String?,
      deviceFleetName: json['DeviceFleetName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceArn = this.deviceArn;
    final deviceName = this.deviceName;
    final edgeDeploymentPlanArn = this.edgeDeploymentPlanArn;
    final edgeDeploymentPlanName = this.edgeDeploymentPlanName;
    final stageName = this.stageName;
    final deployedStageName = this.deployedStageName;
    final deploymentStartTime = this.deploymentStartTime;
    final description = this.description;
    final deviceDeploymentStatus = this.deviceDeploymentStatus;
    final deviceDeploymentStatusMessage = this.deviceDeploymentStatusMessage;
    final deviceFleetName = this.deviceFleetName;
    return {
      'DeviceArn': deviceArn,
      'DeviceName': deviceName,
      'EdgeDeploymentPlanArn': edgeDeploymentPlanArn,
      'EdgeDeploymentPlanName': edgeDeploymentPlanName,
      'StageName': stageName,
      if (deployedStageName != null) 'DeployedStageName': deployedStageName,
      if (deploymentStartTime != null)
        'DeploymentStartTime': unixTimestampToJson(deploymentStartTime),
      if (description != null) 'Description': description,
      if (deviceDeploymentStatus != null)
        'DeviceDeploymentStatus': deviceDeploymentStatus.value,
      if (deviceDeploymentStatusMessage != null)
        'DeviceDeploymentStatusMessage': deviceDeploymentStatusMessage,
      if (deviceFleetName != null) 'DeviceFleetName': deviceFleetName,
    };
  }
}

/// Summary of the device fleet.
class DeviceFleetSummary {
  /// Amazon Resource Name (ARN) of the device fleet.
  final String deviceFleetArn;

  /// Name of the device fleet.
  final String deviceFleetName;

  /// Timestamp of when the device fleet was created.
  final DateTime? creationTime;

  /// Timestamp of when the device fleet was last updated.
  final DateTime? lastModifiedTime;

  DeviceFleetSummary({
    required this.deviceFleetArn,
    required this.deviceFleetName,
    this.creationTime,
    this.lastModifiedTime,
  });

  factory DeviceFleetSummary.fromJson(Map<String, dynamic> json) {
    return DeviceFleetSummary(
      deviceFleetArn: json['DeviceFleetArn'] as String,
      deviceFleetName: json['DeviceFleetName'] as String,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetArn = this.deviceFleetArn;
    final deviceFleetName = this.deviceFleetName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'DeviceFleetArn': deviceFleetArn,
      'DeviceFleetName': deviceFleetName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Contains information about the configurations of selected devices.
class DeviceSelectionConfig {
  /// Type of device subsets to deploy to the current stage.
  final DeviceSubsetType deviceSubsetType;

  /// A filter to select devices with names containing this name.
  final String? deviceNameContains;

  /// List of devices chosen to deploy.
  final List<String>? deviceNames;

  /// Percentage of devices in the fleet to deploy to the current stage.
  final int? percentage;

  DeviceSelectionConfig({
    required this.deviceSubsetType,
    this.deviceNameContains,
    this.deviceNames,
    this.percentage,
  });

  factory DeviceSelectionConfig.fromJson(Map<String, dynamic> json) {
    return DeviceSelectionConfig(
      deviceSubsetType:
          DeviceSubsetType.fromString((json['DeviceSubsetType'] as String)),
      deviceNameContains: json['DeviceNameContains'] as String?,
      deviceNames: (json['DeviceNames'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      percentage: json['Percentage'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceSubsetType = this.deviceSubsetType;
    final deviceNameContains = this.deviceNameContains;
    final deviceNames = this.deviceNames;
    final percentage = this.percentage;
    return {
      'DeviceSubsetType': deviceSubsetType.value,
      if (deviceNameContains != null) 'DeviceNameContains': deviceNameContains,
      if (deviceNames != null) 'DeviceNames': deviceNames,
      if (percentage != null) 'Percentage': percentage,
    };
  }
}

/// Status of devices.
class DeviceStats {
  /// The number of devices connected with a heartbeat.
  final int connectedDeviceCount;

  /// The number of registered devices.
  final int registeredDeviceCount;

  DeviceStats({
    required this.connectedDeviceCount,
    required this.registeredDeviceCount,
  });

  factory DeviceStats.fromJson(Map<String, dynamic> json) {
    return DeviceStats(
      connectedDeviceCount: json['ConnectedDeviceCount'] as int,
      registeredDeviceCount: json['RegisteredDeviceCount'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final connectedDeviceCount = this.connectedDeviceCount;
    final registeredDeviceCount = this.registeredDeviceCount;
    return {
      'ConnectedDeviceCount': connectedDeviceCount,
      'RegisteredDeviceCount': registeredDeviceCount,
    };
  }
}

enum DeviceSubsetType {
  percentage('PERCENTAGE'),
  selection('SELECTION'),
  namecontains('NAMECONTAINS'),
  ;

  final String value;

  const DeviceSubsetType(this.value);

  static DeviceSubsetType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DeviceSubsetType'));
}

/// Summary of the device.
class DeviceSummary {
  /// Amazon Resource Name (ARN) of the device.
  final String deviceArn;

  /// The unique identifier of the device.
  final String deviceName;

  /// Edge Manager agent version.
  final String? agentVersion;

  /// A description of the device.
  final String? description;

  /// The name of the fleet the device belongs to.
  final String? deviceFleetName;

  /// The Amazon Web Services Internet of Things (IoT) object thing name
  /// associated with the device..
  final String? iotThingName;

  /// The last heartbeat received from the device.
  final DateTime? latestHeartbeat;

  /// Models on the device.
  final List<EdgeModelSummary>? models;

  /// The timestamp of the last registration or de-reregistration.
  final DateTime? registrationTime;

  DeviceSummary({
    required this.deviceArn,
    required this.deviceName,
    this.agentVersion,
    this.description,
    this.deviceFleetName,
    this.iotThingName,
    this.latestHeartbeat,
    this.models,
    this.registrationTime,
  });

  factory DeviceSummary.fromJson(Map<String, dynamic> json) {
    return DeviceSummary(
      deviceArn: json['DeviceArn'] as String,
      deviceName: json['DeviceName'] as String,
      agentVersion: json['AgentVersion'] as String?,
      description: json['Description'] as String?,
      deviceFleetName: json['DeviceFleetName'] as String?,
      iotThingName: json['IotThingName'] as String?,
      latestHeartbeat: timeStampFromJson(json['LatestHeartbeat']),
      models: (json['Models'] as List?)
          ?.nonNulls
          .map((e) => EdgeModelSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      registrationTime: timeStampFromJson(json['RegistrationTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceArn = this.deviceArn;
    final deviceName = this.deviceName;
    final agentVersion = this.agentVersion;
    final description = this.description;
    final deviceFleetName = this.deviceFleetName;
    final iotThingName = this.iotThingName;
    final latestHeartbeat = this.latestHeartbeat;
    final models = this.models;
    final registrationTime = this.registrationTime;
    return {
      'DeviceArn': deviceArn,
      'DeviceName': deviceName,
      if (agentVersion != null) 'AgentVersion': agentVersion,
      if (description != null) 'Description': description,
      if (deviceFleetName != null) 'DeviceFleetName': deviceFleetName,
      if (iotThingName != null) 'IotThingName': iotThingName,
      if (latestHeartbeat != null)
        'LatestHeartbeat': unixTimestampToJson(latestHeartbeat),
      if (models != null) 'Models': models,
      if (registrationTime != null)
        'RegistrationTime': unixTimestampToJson(registrationTime),
    };
  }
}

/// The model deployment settings for the SageMaker Canvas application.
/// <note>
/// In order to enable model deployment for Canvas, the SageMaker Domain's or
/// user profile's Amazon Web Services IAM execution role must have the
/// <code>AmazonSageMakerCanvasDirectDeployAccess</code> policy attached. You
/// can also turn on model deployment permissions through the SageMaker Domain's
/// or user profile's settings in the SageMaker console.
/// </note>
class DirectDeploySettings {
  /// Describes whether model deployment permissions are enabled or disabled in
  /// the Canvas application.
  final FeatureStatus? status;

  DirectDeploySettings({
    this.status,
  });

  factory DirectDeploySettings.fromJson(Map<String, dynamic> json) {
    return DirectDeploySettings(
      status: (json['Status'] as String?)?.let(FeatureStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }
}

enum DirectInternetAccess {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const DirectInternetAccess(this.value);

  static DirectInternetAccess fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum DirectInternetAccess'));
}

enum Direction {
  both('Both'),
  ascendants('Ascendants'),
  descendants('Descendants'),
  ;

  final String value;

  const Direction(this.value);

  static Direction fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Direction'));
}

class DisableSagemakerServicecatalogPortfolioOutput {
  DisableSagemakerServicecatalogPortfolioOutput();

  factory DisableSagemakerServicecatalogPortfolioOutput.fromJson(
      Map<String, dynamic> _) {
    return DisableSagemakerServicecatalogPortfolioOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class DisassociateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  DisassociateTrialComponentResponse({
    this.trialArn,
    this.trialComponentArn,
  });

  factory DisassociateTrialComponentResponse.fromJson(
      Map<String, dynamic> json) {
    return DisassociateTrialComponentResponse(
      trialArn: json['TrialArn'] as String?,
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

/// A collection of settings that configure the domain's Docker interaction.
class DockerSettings {
  /// Indicates whether the domain can access Docker.
  final FeatureStatus? enableDockerAccess;

  /// The list of Amazon Web Services accounts that are trusted when the domain is
  /// created in VPC-only mode.
  final List<String>? vpcOnlyTrustedAccounts;

  DockerSettings({
    this.enableDockerAccess,
    this.vpcOnlyTrustedAccounts,
  });

  factory DockerSettings.fromJson(Map<String, dynamic> json) {
    return DockerSettings(
      enableDockerAccess: (json['EnableDockerAccess'] as String?)
          ?.let(FeatureStatus.fromString),
      vpcOnlyTrustedAccounts: (json['VpcOnlyTrustedAccounts'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final enableDockerAccess = this.enableDockerAccess;
    final vpcOnlyTrustedAccounts = this.vpcOnlyTrustedAccounts;
    return {
      if (enableDockerAccess != null)
        'EnableDockerAccess': enableDockerAccess.value,
      if (vpcOnlyTrustedAccounts != null)
        'VpcOnlyTrustedAccounts': vpcOnlyTrustedAccounts,
    };
  }
}

/// The domain's details.
class DomainDetails {
  /// The creation time.
  final DateTime? creationTime;

  /// The domain's Amazon Resource Name (ARN).
  final String? domainArn;

  /// The domain ID.
  final String? domainId;

  /// The domain name.
  final String? domainName;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The status.
  final DomainStatus? status;

  /// The domain's URL.
  final String? url;

  DomainDetails({
    this.creationTime,
    this.domainArn,
    this.domainId,
    this.domainName,
    this.lastModifiedTime,
    this.status,
    this.url,
  });

  factory DomainDetails.fromJson(Map<String, dynamic> json) {
    return DomainDetails(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainArn: json['DomainArn'] as String?,
      domainId: json['DomainId'] as String?,
      domainName: json['DomainName'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      status: (json['Status'] as String?)?.let(DomainStatus.fromString),
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainArn = this.domainArn;
    final domainId = this.domainId;
    final domainName = this.domainName;
    final lastModifiedTime = this.lastModifiedTime;
    final status = this.status;
    final url = this.url;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainArn != null) 'DomainArn': domainArn,
      if (domainId != null) 'DomainId': domainId,
      if (domainName != null) 'DomainName': domainName,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (status != null) 'Status': status.value,
      if (url != null) 'Url': url,
    };
  }
}

/// A collection of settings that apply to the <code>SageMaker Domain</code>.
/// These settings are specified through the <code>CreateDomain</code> API call.
class DomainSettings {
  /// A collection of settings that configure the domain's Docker interaction.
  final DockerSettings? dockerSettings;

  /// The configuration for attaching a SageMaker user profile name to the
  /// execution role as a <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity
  /// key</a>.
  final ExecutionRoleIdentityConfig? executionRoleIdentityConfig;

  /// A collection of settings that configure the <code>RStudioServerPro</code>
  /// Domain-level app.
  final RStudioServerProDomainSettings? rStudioServerProDomainSettings;

  /// The security groups for the Amazon Virtual Private Cloud that the
  /// <code>Domain</code> uses for communication between Domain-level apps and
  /// user apps.
  final List<String>? securityGroupIds;

  DomainSettings({
    this.dockerSettings,
    this.executionRoleIdentityConfig,
    this.rStudioServerProDomainSettings,
    this.securityGroupIds,
  });

  factory DomainSettings.fromJson(Map<String, dynamic> json) {
    return DomainSettings(
      dockerSettings: json['DockerSettings'] != null
          ? DockerSettings.fromJson(
              json['DockerSettings'] as Map<String, dynamic>)
          : null,
      executionRoleIdentityConfig:
          (json['ExecutionRoleIdentityConfig'] as String?)
              ?.let(ExecutionRoleIdentityConfig.fromString),
      rStudioServerProDomainSettings: json['RStudioServerProDomainSettings'] !=
              null
          ? RStudioServerProDomainSettings.fromJson(
              json['RStudioServerProDomainSettings'] as Map<String, dynamic>)
          : null,
      securityGroupIds: (json['SecurityGroupIds'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final dockerSettings = this.dockerSettings;
    final executionRoleIdentityConfig = this.executionRoleIdentityConfig;
    final rStudioServerProDomainSettings = this.rStudioServerProDomainSettings;
    final securityGroupIds = this.securityGroupIds;
    return {
      if (dockerSettings != null) 'DockerSettings': dockerSettings,
      if (executionRoleIdentityConfig != null)
        'ExecutionRoleIdentityConfig': executionRoleIdentityConfig.value,
      if (rStudioServerProDomainSettings != null)
        'RStudioServerProDomainSettings': rStudioServerProDomainSettings,
      if (securityGroupIds != null) 'SecurityGroupIds': securityGroupIds,
    };
  }
}

/// A collection of <code>Domain</code> configuration settings to update.
class DomainSettingsForUpdate {
  /// A collection of settings that configure the domain's Docker interaction.
  final DockerSettings? dockerSettings;

  /// The configuration for attaching a SageMaker user profile name to the
  /// execution role as a <a
  /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity
  /// key</a>. This configuration can only be modified if there are no apps in the
  /// <code>InService</code> or <code>Pending</code> state.
  final ExecutionRoleIdentityConfig? executionRoleIdentityConfig;

  /// A collection of <code>RStudioServerPro</code> Domain-level app settings to
  /// update. A single <code>RStudioServerPro</code> application is created for a
  /// domain.
  final RStudioServerProDomainSettingsForUpdate?
      rStudioServerProDomainSettingsForUpdate;

  /// The security groups for the Amazon Virtual Private Cloud that the
  /// <code>Domain</code> uses for communication between Domain-level apps and
  /// user apps.
  final List<String>? securityGroupIds;

  DomainSettingsForUpdate({
    this.dockerSettings,
    this.executionRoleIdentityConfig,
    this.rStudioServerProDomainSettingsForUpdate,
    this.securityGroupIds,
  });

  Map<String, dynamic> toJson() {
    final dockerSettings = this.dockerSettings;
    final executionRoleIdentityConfig = this.executionRoleIdentityConfig;
    final rStudioServerProDomainSettingsForUpdate =
        this.rStudioServerProDomainSettingsForUpdate;
    final securityGroupIds = this.securityGroupIds;
    return {
      if (dockerSettings != null) 'DockerSettings': dockerSettings,
      if (executionRoleIdentityConfig != null)
        'ExecutionRoleIdentityConfig': executionRoleIdentityConfig.value,
      if (rStudioServerProDomainSettingsForUpdate != null)
        'RStudioServerProDomainSettingsForUpdate':
            rStudioServerProDomainSettingsForUpdate,
      if (securityGroupIds != null) 'SecurityGroupIds': securityGroupIds,
    };
  }
}

enum DomainStatus {
  deleting('Deleting'),
  failed('Failed'),
  inService('InService'),
  pending('Pending'),
  updating('Updating'),
  updateFailed('Update_Failed'),
  deleteFailed('Delete_Failed'),
  ;

  final String value;

  const DomainStatus(this.value);

  static DomainStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DomainStatus'));
}

/// Represents the drift check baselines that can be used when the model monitor
/// is set using the model package.
class DriftCheckBaselines {
  /// Represents the drift check bias baselines that can be used when the model
  /// monitor is set using the model package.
  final DriftCheckBias? bias;

  /// Represents the drift check explainability baselines that can be used when
  /// the model monitor is set using the model package.
  final DriftCheckExplainability? explainability;

  /// Represents the drift check model data quality baselines that can be used
  /// when the model monitor is set using the model package.
  final DriftCheckModelDataQuality? modelDataQuality;

  /// Represents the drift check model quality baselines that can be used when the
  /// model monitor is set using the model package.
  final DriftCheckModelQuality? modelQuality;

  DriftCheckBaselines({
    this.bias,
    this.explainability,
    this.modelDataQuality,
    this.modelQuality,
  });

  factory DriftCheckBaselines.fromJson(Map<String, dynamic> json) {
    return DriftCheckBaselines(
      bias: json['Bias'] != null
          ? DriftCheckBias.fromJson(json['Bias'] as Map<String, dynamic>)
          : null,
      explainability: json['Explainability'] != null
          ? DriftCheckExplainability.fromJson(
              json['Explainability'] as Map<String, dynamic>)
          : null,
      modelDataQuality: json['ModelDataQuality'] != null
          ? DriftCheckModelDataQuality.fromJson(
              json['ModelDataQuality'] as Map<String, dynamic>)
          : null,
      modelQuality: json['ModelQuality'] != null
          ? DriftCheckModelQuality.fromJson(
              json['ModelQuality'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final bias = this.bias;
    final explainability = this.explainability;
    final modelDataQuality = this.modelDataQuality;
    final modelQuality = this.modelQuality;
    return {
      if (bias != null) 'Bias': bias,
      if (explainability != null) 'Explainability': explainability,
      if (modelDataQuality != null) 'ModelDataQuality': modelDataQuality,
      if (modelQuality != null) 'ModelQuality': modelQuality,
    };
  }
}

/// Represents the drift check bias baselines that can be used when the model
/// monitor is set using the model package.
class DriftCheckBias {
  /// The bias config file for a model.
  final FileSource? configFile;

  /// The post-training constraints.
  final MetricsSource? postTrainingConstraints;

  /// The pre-training constraints.
  final MetricsSource? preTrainingConstraints;

  DriftCheckBias({
    this.configFile,
    this.postTrainingConstraints,
    this.preTrainingConstraints,
  });

  factory DriftCheckBias.fromJson(Map<String, dynamic> json) {
    return DriftCheckBias(
      configFile: json['ConfigFile'] != null
          ? FileSource.fromJson(json['ConfigFile'] as Map<String, dynamic>)
          : null,
      postTrainingConstraints: json['PostTrainingConstraints'] != null
          ? MetricsSource.fromJson(
              json['PostTrainingConstraints'] as Map<String, dynamic>)
          : null,
      preTrainingConstraints: json['PreTrainingConstraints'] != null
          ? MetricsSource.fromJson(
              json['PreTrainingConstraints'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final configFile = this.configFile;
    final postTrainingConstraints = this.postTrainingConstraints;
    final preTrainingConstraints = this.preTrainingConstraints;
    return {
      if (configFile != null) 'ConfigFile': configFile,
      if (postTrainingConstraints != null)
        'PostTrainingConstraints': postTrainingConstraints,
      if (preTrainingConstraints != null)
        'PreTrainingConstraints': preTrainingConstraints,
    };
  }
}

/// Represents the drift check explainability baselines that can be used when
/// the model monitor is set using the model package.
class DriftCheckExplainability {
  /// The explainability config file for the model.
  final FileSource? configFile;

  /// The drift check explainability constraints.
  final MetricsSource? constraints;

  DriftCheckExplainability({
    this.configFile,
    this.constraints,
  });

  factory DriftCheckExplainability.fromJson(Map<String, dynamic> json) {
    return DriftCheckExplainability(
      configFile: json['ConfigFile'] != null
          ? FileSource.fromJson(json['ConfigFile'] as Map<String, dynamic>)
          : null,
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final configFile = this.configFile;
    final constraints = this.constraints;
    return {
      if (configFile != null) 'ConfigFile': configFile,
      if (constraints != null) 'Constraints': constraints,
    };
  }
}

/// Represents the drift check data quality baselines that can be used when the
/// model monitor is set using the model package.
class DriftCheckModelDataQuality {
  /// The drift check model data quality constraints.
  final MetricsSource? constraints;

  /// The drift check model data quality statistics.
  final MetricsSource? statistics;

  DriftCheckModelDataQuality({
    this.constraints,
    this.statistics,
  });

  factory DriftCheckModelDataQuality.fromJson(Map<String, dynamic> json) {
    return DriftCheckModelDataQuality(
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
      statistics: json['Statistics'] != null
          ? MetricsSource.fromJson(json['Statistics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final constraints = this.constraints;
    final statistics = this.statistics;
    return {
      if (constraints != null) 'Constraints': constraints,
      if (statistics != null) 'Statistics': statistics,
    };
  }
}

/// Represents the drift check model quality baselines that can be used when the
/// model monitor is set using the model package.
class DriftCheckModelQuality {
  /// The drift check model quality constraints.
  final MetricsSource? constraints;

  /// The drift check model quality statistics.
  final MetricsSource? statistics;

  DriftCheckModelQuality({
    this.constraints,
    this.statistics,
  });

  factory DriftCheckModelQuality.fromJson(Map<String, dynamic> json) {
    return DriftCheckModelQuality(
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
      statistics: json['Statistics'] != null
          ? MetricsSource.fromJson(json['Statistics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final constraints = this.constraints;
    final statistics = this.statistics;
    return {
      if (constraints != null) 'Constraints': constraints,
      if (statistics != null) 'Statistics': statistics,
    };
  }
}

/// An object with the recommended values for you to specify when creating an
/// autoscaling policy.
class DynamicScalingConfiguration {
  /// The recommended maximum capacity to specify for your autoscaling policy.
  final int? maxCapacity;

  /// The recommended minimum capacity to specify for your autoscaling policy.
  final int? minCapacity;

  /// The recommended scale in cooldown time for your autoscaling policy.
  final int? scaleInCooldown;

  /// The recommended scale out cooldown time for your autoscaling policy.
  final int? scaleOutCooldown;

  /// An object of the scaling policies for each metric.
  final List<ScalingPolicy>? scalingPolicies;

  DynamicScalingConfiguration({
    this.maxCapacity,
    this.minCapacity,
    this.scaleInCooldown,
    this.scaleOutCooldown,
    this.scalingPolicies,
  });

  factory DynamicScalingConfiguration.fromJson(Map<String, dynamic> json) {
    return DynamicScalingConfiguration(
      maxCapacity: json['MaxCapacity'] as int?,
      minCapacity: json['MinCapacity'] as int?,
      scaleInCooldown: json['ScaleInCooldown'] as int?,
      scaleOutCooldown: json['ScaleOutCooldown'] as int?,
      scalingPolicies: (json['ScalingPolicies'] as List?)
          ?.nonNulls
          .map((e) => ScalingPolicy.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final maxCapacity = this.maxCapacity;
    final minCapacity = this.minCapacity;
    final scaleInCooldown = this.scaleInCooldown;
    final scaleOutCooldown = this.scaleOutCooldown;
    final scalingPolicies = this.scalingPolicies;
    return {
      if (maxCapacity != null) 'MaxCapacity': maxCapacity,
      if (minCapacity != null) 'MinCapacity': minCapacity,
      if (scaleInCooldown != null) 'ScaleInCooldown': scaleInCooldown,
      if (scaleOutCooldown != null) 'ScaleOutCooldown': scaleOutCooldown,
      if (scalingPolicies != null) 'ScalingPolicies': scalingPolicies,
    };
  }
}

/// A file system, created by you in Amazon EFS, that you assign to a user
/// profile or space for an Amazon SageMaker Domain. Permitted users can access
/// this file system in Amazon SageMaker Studio.
class EFSFileSystem {
  /// The ID of your Amazon EFS file system.
  final String fileSystemId;

  EFSFileSystem({
    required this.fileSystemId,
  });

  factory EFSFileSystem.fromJson(Map<String, dynamic> json) {
    return EFSFileSystem(
      fileSystemId: json['FileSystemId'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final fileSystemId = this.fileSystemId;
    return {
      'FileSystemId': fileSystemId,
    };
  }
}

/// The settings for assigning a custom Amazon EFS file system to a user profile
/// or space for an Amazon SageMaker Domain.
class EFSFileSystemConfig {
  /// The ID of your Amazon EFS file system.
  final String fileSystemId;

  /// The path to the file system directory that is accessible in Amazon SageMaker
  /// Studio. Permitted users can access only this directory and below.
  final String? fileSystemPath;

  EFSFileSystemConfig({
    required this.fileSystemId,
    this.fileSystemPath,
  });

  factory EFSFileSystemConfig.fromJson(Map<String, dynamic> json) {
    return EFSFileSystemConfig(
      fileSystemId: json['FileSystemId'] as String,
      fileSystemPath: json['FileSystemPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final fileSystemId = this.fileSystemId;
    final fileSystemPath = this.fileSystemPath;
    return {
      'FileSystemId': fileSystemId,
      if (fileSystemPath != null) 'FileSystemPath': fileSystemPath,
    };
  }
}

/// The configurations and outcomes of an Amazon EMR step execution.
class EMRStepMetadata {
  /// The identifier of the EMR cluster.
  final String? clusterId;

  /// The path to the log file where the cluster step's failure root cause is
  /// recorded.
  final String? logFilePath;

  /// The identifier of the EMR cluster step.
  final String? stepId;

  /// The name of the EMR cluster step.
  final String? stepName;

  EMRStepMetadata({
    this.clusterId,
    this.logFilePath,
    this.stepId,
    this.stepName,
  });

  factory EMRStepMetadata.fromJson(Map<String, dynamic> json) {
    return EMRStepMetadata(
      clusterId: json['ClusterId'] as String?,
      logFilePath: json['LogFilePath'] as String?,
      stepId: json['StepId'] as String?,
      stepName: json['StepName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterId = this.clusterId;
    final logFilePath = this.logFilePath;
    final stepId = this.stepId;
    final stepName = this.stepName;
    return {
      if (clusterId != null) 'ClusterId': clusterId,
      if (logFilePath != null) 'LogFilePath': logFilePath,
      if (stepId != null) 'StepId': stepId,
      if (stepName != null) 'StepName': stepName,
    };
  }
}

/// A collection of EBS storage settings that apply to both private and shared
/// spaces.
class EbsStorageSettings {
  /// The size of an EBS storage volume for a space.
  final int ebsVolumeSizeInGb;

  EbsStorageSettings({
    required this.ebsVolumeSizeInGb,
  });

  factory EbsStorageSettings.fromJson(Map<String, dynamic> json) {
    return EbsStorageSettings(
      ebsVolumeSizeInGb: json['EbsVolumeSizeInGb'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final ebsVolumeSizeInGb = this.ebsVolumeSizeInGb;
    return {
      'EbsVolumeSizeInGb': ebsVolumeSizeInGb,
    };
  }
}

/// A directed edge connecting two lineage entities.
class Edge {
  /// The type of the Association(Edge) between the source and destination. For
  /// example <code>ContributedTo</code>, <code>Produced</code>, or
  /// <code>DerivedFrom</code>.
  final AssociationEdgeType? associationType;

  /// The Amazon Resource Name (ARN) of the destination lineage entity of the
  /// directed edge.
  final String? destinationArn;

  /// The Amazon Resource Name (ARN) of the source lineage entity of the directed
  /// edge.
  final String? sourceArn;

  Edge({
    this.associationType,
    this.destinationArn,
    this.sourceArn,
  });

  factory Edge.fromJson(Map<String, dynamic> json) {
    return Edge(
      associationType: (json['AssociationType'] as String?)
          ?.let(AssociationEdgeType.fromString),
      destinationArn: json['DestinationArn'] as String?,
      sourceArn: json['SourceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final associationType = this.associationType;
    final destinationArn = this.destinationArn;
    final sourceArn = this.sourceArn;
    return {
      if (associationType != null) 'AssociationType': associationType.value,
      if (destinationArn != null) 'DestinationArn': destinationArn,
      if (sourceArn != null) 'SourceArn': sourceArn,
    };
  }
}

/// Contains information about the configuration of a deployment.
class EdgeDeploymentConfig {
  /// Toggle that determines whether to rollback to previous configuration if the
  /// current deployment fails. By default this is turned on. You may turn this
  /// off if you want to investigate the errors yourself.
  final FailureHandlingPolicy failureHandlingPolicy;

  EdgeDeploymentConfig({
    required this.failureHandlingPolicy,
  });

  factory EdgeDeploymentConfig.fromJson(Map<String, dynamic> json) {
    return EdgeDeploymentConfig(
      failureHandlingPolicy: FailureHandlingPolicy.fromString(
          (json['FailureHandlingPolicy'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final failureHandlingPolicy = this.failureHandlingPolicy;
    return {
      'FailureHandlingPolicy': failureHandlingPolicy.value,
    };
  }
}

/// Contains information about the configuration of a model in a deployment.
class EdgeDeploymentModelConfig {
  /// The edge packaging job associated with this deployment.
  final String edgePackagingJobName;

  /// The name the device application uses to reference this model.
  final String modelHandle;

  EdgeDeploymentModelConfig({
    required this.edgePackagingJobName,
    required this.modelHandle,
  });

  factory EdgeDeploymentModelConfig.fromJson(Map<String, dynamic> json) {
    return EdgeDeploymentModelConfig(
      edgePackagingJobName: json['EdgePackagingJobName'] as String,
      modelHandle: json['ModelHandle'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobName = this.edgePackagingJobName;
    final modelHandle = this.modelHandle;
    return {
      'EdgePackagingJobName': edgePackagingJobName,
      'ModelHandle': modelHandle,
    };
  }
}

/// Contains information summarizing an edge deployment plan.
class EdgeDeploymentPlanSummary {
  /// The name of the device fleet used for the deployment.
  final String deviceFleetName;

  /// The number of edge devices that failed the deployment.
  final int edgeDeploymentFailed;

  /// The number of edge devices yet to pick up the deployment, or in progress.
  final int edgeDeploymentPending;

  /// The ARN of the edge deployment plan.
  final String edgeDeploymentPlanArn;

  /// The name of the edge deployment plan.
  final String edgeDeploymentPlanName;

  /// The number of edge devices with the successful deployment.
  final int edgeDeploymentSuccess;

  /// The time when the edge deployment plan was created.
  final DateTime? creationTime;

  /// The time when the edge deployment plan was last updated.
  final DateTime? lastModifiedTime;

  EdgeDeploymentPlanSummary({
    required this.deviceFleetName,
    required this.edgeDeploymentFailed,
    required this.edgeDeploymentPending,
    required this.edgeDeploymentPlanArn,
    required this.edgeDeploymentPlanName,
    required this.edgeDeploymentSuccess,
    this.creationTime,
    this.lastModifiedTime,
  });

  factory EdgeDeploymentPlanSummary.fromJson(Map<String, dynamic> json) {
    return EdgeDeploymentPlanSummary(
      deviceFleetName: json['DeviceFleetName'] as String,
      edgeDeploymentFailed: json['EdgeDeploymentFailed'] as int,
      edgeDeploymentPending: json['EdgeDeploymentPending'] as int,
      edgeDeploymentPlanArn: json['EdgeDeploymentPlanArn'] as String,
      edgeDeploymentPlanName: json['EdgeDeploymentPlanName'] as String,
      edgeDeploymentSuccess: json['EdgeDeploymentSuccess'] as int,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetName = this.deviceFleetName;
    final edgeDeploymentFailed = this.edgeDeploymentFailed;
    final edgeDeploymentPending = this.edgeDeploymentPending;
    final edgeDeploymentPlanArn = this.edgeDeploymentPlanArn;
    final edgeDeploymentPlanName = this.edgeDeploymentPlanName;
    final edgeDeploymentSuccess = this.edgeDeploymentSuccess;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'DeviceFleetName': deviceFleetName,
      'EdgeDeploymentFailed': edgeDeploymentFailed,
      'EdgeDeploymentPending': edgeDeploymentPending,
      'EdgeDeploymentPlanArn': edgeDeploymentPlanArn,
      'EdgeDeploymentPlanName': edgeDeploymentPlanName,
      'EdgeDeploymentSuccess': edgeDeploymentSuccess,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Contains information summarizing the deployment stage results.
class EdgeDeploymentStatus {
  /// The number of edge devices that failed the deployment in current stage.
  final int edgeDeploymentFailedInStage;

  /// The number of edge devices yet to pick up the deployment in current stage,
  /// or in progress.
  final int edgeDeploymentPendingInStage;

  /// The number of edge devices with the successful deployment in the current
  /// stage.
  final int edgeDeploymentSuccessInStage;

  /// The general status of the current stage.
  final StageStatus stageStatus;

  /// The time when the deployment API started.
  final DateTime? edgeDeploymentStageStartTime;

  /// A detailed message about deployment status in current stage.
  final String? edgeDeploymentStatusMessage;

  EdgeDeploymentStatus({
    required this.edgeDeploymentFailedInStage,
    required this.edgeDeploymentPendingInStage,
    required this.edgeDeploymentSuccessInStage,
    required this.stageStatus,
    this.edgeDeploymentStageStartTime,
    this.edgeDeploymentStatusMessage,
  });

  factory EdgeDeploymentStatus.fromJson(Map<String, dynamic> json) {
    return EdgeDeploymentStatus(
      edgeDeploymentFailedInStage: json['EdgeDeploymentFailedInStage'] as int,
      edgeDeploymentPendingInStage: json['EdgeDeploymentPendingInStage'] as int,
      edgeDeploymentSuccessInStage: json['EdgeDeploymentSuccessInStage'] as int,
      stageStatus: StageStatus.fromString((json['StageStatus'] as String)),
      edgeDeploymentStageStartTime:
          timeStampFromJson(json['EdgeDeploymentStageStartTime']),
      edgeDeploymentStatusMessage:
          json['EdgeDeploymentStatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgeDeploymentFailedInStage = this.edgeDeploymentFailedInStage;
    final edgeDeploymentPendingInStage = this.edgeDeploymentPendingInStage;
    final edgeDeploymentSuccessInStage = this.edgeDeploymentSuccessInStage;
    final stageStatus = this.stageStatus;
    final edgeDeploymentStageStartTime = this.edgeDeploymentStageStartTime;
    final edgeDeploymentStatusMessage = this.edgeDeploymentStatusMessage;
    return {
      'EdgeDeploymentFailedInStage': edgeDeploymentFailedInStage,
      'EdgeDeploymentPendingInStage': edgeDeploymentPendingInStage,
      'EdgeDeploymentSuccessInStage': edgeDeploymentSuccessInStage,
      'StageStatus': stageStatus.value,
      if (edgeDeploymentStageStartTime != null)
        'EdgeDeploymentStageStartTime':
            unixTimestampToJson(edgeDeploymentStageStartTime),
      if (edgeDeploymentStatusMessage != null)
        'EdgeDeploymentStatusMessage': edgeDeploymentStatusMessage,
    };
  }
}

/// The model on the edge device.
class EdgeModel {
  /// The name of the model.
  final String modelName;

  /// The model version.
  final String modelVersion;

  /// The timestamp of the last inference that was made.
  final DateTime? latestInference;

  /// The timestamp of the last data sample taken.
  final DateTime? latestSampleTime;

  EdgeModel({
    required this.modelName,
    required this.modelVersion,
    this.latestInference,
    this.latestSampleTime,
  });

  factory EdgeModel.fromJson(Map<String, dynamic> json) {
    return EdgeModel(
      modelName: json['ModelName'] as String,
      modelVersion: json['ModelVersion'] as String,
      latestInference: timeStampFromJson(json['LatestInference']),
      latestSampleTime: timeStampFromJson(json['LatestSampleTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    final latestInference = this.latestInference;
    final latestSampleTime = this.latestSampleTime;
    return {
      'ModelName': modelName,
      'ModelVersion': modelVersion,
      if (latestInference != null)
        'LatestInference': unixTimestampToJson(latestInference),
      if (latestSampleTime != null)
        'LatestSampleTime': unixTimestampToJson(latestSampleTime),
    };
  }
}

/// Status of edge devices with this model.
class EdgeModelStat {
  /// The number of devices that have this model version, a heart beat, and are
  /// currently running.
  final int activeDeviceCount;

  /// The number of devices that have this model version and have a heart beat.
  final int connectedDeviceCount;

  /// The name of the model.
  final String modelName;

  /// The model version.
  final String modelVersion;

  /// The number of devices that have this model version and do not have a heart
  /// beat.
  final int offlineDeviceCount;

  /// The number of devices with this model version and are producing sample data.
  final int samplingDeviceCount;

  EdgeModelStat({
    required this.activeDeviceCount,
    required this.connectedDeviceCount,
    required this.modelName,
    required this.modelVersion,
    required this.offlineDeviceCount,
    required this.samplingDeviceCount,
  });

  factory EdgeModelStat.fromJson(Map<String, dynamic> json) {
    return EdgeModelStat(
      activeDeviceCount: json['ActiveDeviceCount'] as int,
      connectedDeviceCount: json['ConnectedDeviceCount'] as int,
      modelName: json['ModelName'] as String,
      modelVersion: json['ModelVersion'] as String,
      offlineDeviceCount: json['OfflineDeviceCount'] as int,
      samplingDeviceCount: json['SamplingDeviceCount'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final activeDeviceCount = this.activeDeviceCount;
    final connectedDeviceCount = this.connectedDeviceCount;
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    final offlineDeviceCount = this.offlineDeviceCount;
    final samplingDeviceCount = this.samplingDeviceCount;
    return {
      'ActiveDeviceCount': activeDeviceCount,
      'ConnectedDeviceCount': connectedDeviceCount,
      'ModelName': modelName,
      'ModelVersion': modelVersion,
      'OfflineDeviceCount': offlineDeviceCount,
      'SamplingDeviceCount': samplingDeviceCount,
    };
  }
}

/// Summary of model on edge device.
class EdgeModelSummary {
  /// The name of the model.
  final String modelName;

  /// The version model.
  final String modelVersion;

  EdgeModelSummary({
    required this.modelName,
    required this.modelVersion,
  });

  factory EdgeModelSummary.fromJson(Map<String, dynamic> json) {
    return EdgeModelSummary(
      modelName: json['ModelName'] as String,
      modelVersion: json['ModelVersion'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    return {
      'ModelName': modelName,
      'ModelVersion': modelVersion,
    };
  }
}

/// The output configuration.
class EdgeOutputConfig {
  /// The Amazon Simple Storage (S3) bucker URI.
  final String s3OutputLocation;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume after
  /// compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses
  /// the default KMS key for Amazon S3 for your role's account.
  final String? kmsKeyId;

  /// The configuration used to create deployment artifacts. Specify configuration
  /// options with a JSON string. The available configuration options for each
  /// type are:
  ///
  /// <ul>
  /// <li>
  /// <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component.
  /// If not specified, the default name generated consists of
  /// "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging
  /// job.
  /// </li>
  /// <li>
  /// <code>ComponentDescription</code> (optional) - Description of the component.
  /// </li>
  /// <li>
  /// <code>ComponentVersion</code> (optional) - The version of the component.
  /// <note>
  /// Amazon Web Services IoT Greengrass uses semantic versions for components.
  /// Semantic versions follow a<i> major.minor.patch</i> number system. For
  /// example, version 1.0.0 represents the first major release for a component.
  /// For more information, see the <a href="https://semver.org/">semantic version
  /// specification</a>.
  /// </note> </li>
  /// <li>
  /// <code>PlatformOS</code> (optional) - The name of the operating system for
  /// the platform. Supported platforms include Windows and Linux.
  /// </li>
  /// <li>
  /// <code>PlatformArchitecture</code> (optional) - The processor architecture
  /// for the platform.
  ///
  /// Supported architectures Windows include: Windows32_x86, Windows64_x64.
  ///
  /// Supported architectures for Linux include: Linux x86_64, Linux ARMV8.
  /// </li>
  /// </ul>
  final String? presetDeploymentConfig;

  /// The deployment type SageMaker Edge Manager will create. Currently only
  /// supports Amazon Web Services IoT Greengrass Version 2 components.
  final EdgePresetDeploymentType? presetDeploymentType;

  EdgeOutputConfig({
    required this.s3OutputLocation,
    this.kmsKeyId,
    this.presetDeploymentConfig,
    this.presetDeploymentType,
  });

  factory EdgeOutputConfig.fromJson(Map<String, dynamic> json) {
    return EdgeOutputConfig(
      s3OutputLocation: json['S3OutputLocation'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      presetDeploymentConfig: json['PresetDeploymentConfig'] as String?,
      presetDeploymentType: (json['PresetDeploymentType'] as String?)
          ?.let(EdgePresetDeploymentType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputLocation = this.s3OutputLocation;
    final kmsKeyId = this.kmsKeyId;
    final presetDeploymentConfig = this.presetDeploymentConfig;
    final presetDeploymentType = this.presetDeploymentType;
    return {
      'S3OutputLocation': s3OutputLocation,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (presetDeploymentConfig != null)
        'PresetDeploymentConfig': presetDeploymentConfig,
      if (presetDeploymentType != null)
        'PresetDeploymentType': presetDeploymentType.value,
    };
  }
}

enum EdgePackagingJobStatus {
  starting('STARTING'),
  inprogress('INPROGRESS'),
  completed('COMPLETED'),
  failed('FAILED'),
  stopping('STOPPING'),
  stopped('STOPPED'),
  ;

  final String value;

  const EdgePackagingJobStatus(this.value);

  static EdgePackagingJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum EdgePackagingJobStatus'));
}

/// Summary of edge packaging job.
class EdgePackagingJobSummary {
  /// The Amazon Resource Name (ARN) of the edge packaging job.
  final String edgePackagingJobArn;

  /// The name of the edge packaging job.
  final String edgePackagingJobName;

  /// The status of the edge packaging job.
  final EdgePackagingJobStatus edgePackagingJobStatus;

  /// The name of the SageMaker Neo compilation job.
  final String? compilationJobName;

  /// The timestamp of when the job was created.
  final DateTime? creationTime;

  /// The timestamp of when the edge packaging job was last updated.
  final DateTime? lastModifiedTime;

  /// The name of the model.
  final String? modelName;

  /// The version of the model.
  final String? modelVersion;

  EdgePackagingJobSummary({
    required this.edgePackagingJobArn,
    required this.edgePackagingJobName,
    required this.edgePackagingJobStatus,
    this.compilationJobName,
    this.creationTime,
    this.lastModifiedTime,
    this.modelName,
    this.modelVersion,
  });

  factory EdgePackagingJobSummary.fromJson(Map<String, dynamic> json) {
    return EdgePackagingJobSummary(
      edgePackagingJobArn: json['EdgePackagingJobArn'] as String,
      edgePackagingJobName: json['EdgePackagingJobName'] as String,
      edgePackagingJobStatus: EdgePackagingJobStatus.fromString(
          (json['EdgePackagingJobStatus'] as String)),
      compilationJobName: json['CompilationJobName'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelName: json['ModelName'] as String?,
      modelVersion: json['ModelVersion'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobArn = this.edgePackagingJobArn;
    final edgePackagingJobName = this.edgePackagingJobName;
    final edgePackagingJobStatus = this.edgePackagingJobStatus;
    final compilationJobName = this.compilationJobName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final modelName = this.modelName;
    final modelVersion = this.modelVersion;
    return {
      'EdgePackagingJobArn': edgePackagingJobArn,
      'EdgePackagingJobName': edgePackagingJobName,
      'EdgePackagingJobStatus': edgePackagingJobStatus.value,
      if (compilationJobName != null) 'CompilationJobName': compilationJobName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelName != null) 'ModelName': modelName,
      if (modelVersion != null) 'ModelVersion': modelVersion,
    };
  }
}

/// The output of a SageMaker Edge Manager deployable resource.
class EdgePresetDeploymentOutput {
  /// The deployment type created by SageMaker Edge Manager. Currently only
  /// supports Amazon Web Services IoT Greengrass Version 2 components.
  final EdgePresetDeploymentType type;

  /// The Amazon Resource Name (ARN) of the generated deployable resource.
  final String? artifact;

  /// The status of the deployable resource.
  final EdgePresetDeploymentStatus? status;

  /// Returns a message describing the status of the deployed resource.
  final String? statusMessage;

  EdgePresetDeploymentOutput({
    required this.type,
    this.artifact,
    this.status,
    this.statusMessage,
  });

  factory EdgePresetDeploymentOutput.fromJson(Map<String, dynamic> json) {
    return EdgePresetDeploymentOutput(
      type: EdgePresetDeploymentType.fromString((json['Type'] as String)),
      artifact: json['Artifact'] as String?,
      status: (json['Status'] as String?)
          ?.let(EdgePresetDeploymentStatus.fromString),
      statusMessage: json['StatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final artifact = this.artifact;
    final status = this.status;
    final statusMessage = this.statusMessage;
    return {
      'Type': type.value,
      if (artifact != null) 'Artifact': artifact,
      if (status != null) 'Status': status.value,
      if (statusMessage != null) 'StatusMessage': statusMessage,
    };
  }
}

enum EdgePresetDeploymentStatus {
  completed('COMPLETED'),
  failed('FAILED'),
  ;

  final String value;

  const EdgePresetDeploymentStatus(this.value);

  static EdgePresetDeploymentStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum EdgePresetDeploymentStatus'));
}

enum EdgePresetDeploymentType {
  greengrassV2Component('GreengrassV2Component'),
  ;

  final String value;

  const EdgePresetDeploymentType(this.value);

  static EdgePresetDeploymentType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum EdgePresetDeploymentType'));
}

class EnableSagemakerServicecatalogPortfolioOutput {
  EnableSagemakerServicecatalogPortfolioOutput();

  factory EnableSagemakerServicecatalogPortfolioOutput.fromJson(
      Map<String, dynamic> _) {
    return EnableSagemakerServicecatalogPortfolioOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

enum EnabledOrDisabled {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const EnabledOrDisabled(this.value);

  static EnabledOrDisabled fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EnabledOrDisabled'));
}

/// A hosted endpoint for real-time inference.
class Endpoint {
  /// The time that the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// The endpoint configuration associated with the endpoint.
  final String endpointConfigName;

  /// The name of the endpoint.
  final String endpointName;

  /// The status of the endpoint.
  final EndpointStatus endpointStatus;

  /// The last time the endpoint was modified.
  final DateTime lastModifiedTime;
  final DataCaptureConfigSummary? dataCaptureConfig;

  /// If the endpoint failed, the reason it failed.
  final String? failureReason;

  /// A list of monitoring schedules for the endpoint. For information about model
  /// monitoring, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
  /// SageMaker Model Monitor</a>.
  final List<MonitoringSchedule>? monitoringSchedules;

  /// A list of the production variants hosted on the endpoint. Each production
  /// variant is a model.
  final List<ProductionVariantSummary>? productionVariants;

  /// A list of the shadow variants hosted on the endpoint. Each shadow variant is
  /// a model in shadow mode with production traffic replicated from the
  /// production variant.
  final List<ProductionVariantSummary>? shadowProductionVariants;

  /// A list of the tags associated with the endpoint. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  Endpoint({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointConfigName,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
    this.dataCaptureConfig,
    this.failureReason,
    this.monitoringSchedules,
    this.productionVariants,
    this.shadowProductionVariants,
    this.tags,
  });

  factory Endpoint.fromJson(Map<String, dynamic> json) {
    return Endpoint(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus:
          EndpointStatus.fromString((json['EndpointStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? DataCaptureConfigSummary.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      monitoringSchedules: (json['MonitoringSchedules'] as List?)
          ?.nonNulls
          .map((e) => MonitoringSchedule.fromJson(e as Map<String, dynamic>))
          .toList(),
      productionVariants: (json['ProductionVariants'] as List?)
          ?.nonNulls
          .map((e) =>
              ProductionVariantSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      shadowProductionVariants: (json['ShadowProductionVariants'] as List?)
          ?.nonNulls
          .map((e) =>
              ProductionVariantSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointConfigName = this.endpointConfigName;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final dataCaptureConfig = this.dataCaptureConfig;
    final failureReason = this.failureReason;
    final monitoringSchedules = this.monitoringSchedules;
    final productionVariants = this.productionVariants;
    final shadowProductionVariants = this.shadowProductionVariants;
    final tags = this.tags;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointConfigName': endpointConfigName,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (monitoringSchedules != null)
        'MonitoringSchedules': monitoringSchedules,
      if (productionVariants != null) 'ProductionVariants': productionVariants,
      if (shadowProductionVariants != null)
        'ShadowProductionVariants': shadowProductionVariants,
      if (tags != null) 'Tags': tags,
    };
  }
}

enum EndpointConfigSortKey {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const EndpointConfigSortKey(this.value);

  static EndpointConfigSortKey fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum EndpointConfigSortKey'));
}

/// Provides summary information for an endpoint configuration.
class EndpointConfigSummary {
  /// A timestamp that shows when the endpoint configuration was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint configuration.
  final String endpointConfigArn;

  /// The name of the endpoint configuration.
  final String endpointConfigName;

  EndpointConfigSummary({
    required this.creationTime,
    required this.endpointConfigArn,
    required this.endpointConfigName,
  });

  factory EndpointConfigSummary.fromJson(Map<String, dynamic> json) {
    return EndpointConfigSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointConfigArn: json['EndpointConfigArn'] as String,
      endpointConfigName: json['EndpointConfigName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointConfigArn = this.endpointConfigArn;
    final endpointConfigName = this.endpointConfigName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointConfigArn': endpointConfigArn,
      'EndpointConfigName': endpointConfigName,
    };
  }
}

/// Details about a customer endpoint that was compared in an Inference
/// Recommender job.
class EndpointInfo {
  /// The name of a customer's endpoint.
  final String? endpointName;

  EndpointInfo({
    this.endpointName,
  });

  factory EndpointInfo.fromJson(Map<String, dynamic> json) {
    return EndpointInfo(
      endpointName: json['EndpointName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    return {
      if (endpointName != null) 'EndpointName': endpointName,
    };
  }
}

/// Input object for the endpoint
class EndpointInput {
  /// An endpoint in customer's account which has enabled
  /// <code>DataCaptureConfig</code> enabled.
  final String endpointName;

  /// Path to the filesystem where the endpoint data is available to the
  /// container.
  final String localPath;

  /// If specified, monitoring jobs substract this time from the end time. For
  /// information about using offsets for scheduling monitoring jobs, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule
  /// Model Quality Monitoring Jobs</a>.
  final String? endTimeOffset;

  /// The attributes of the input data to exclude from the analysis.
  final String? excludeFeaturesAttribute;

  /// The attributes of the input data that are the input features.
  final String? featuresAttribute;

  /// The attribute of the input data that represents the ground truth label.
  final String? inferenceAttribute;

  /// In a classification problem, the attribute that represents the class
  /// probability.
  final String? probabilityAttribute;

  /// The threshold for the class probability to be evaluated as a positive
  /// result.
  final double? probabilityThresholdAttribute;

  /// Whether input data distributed in Amazon S3 is fully replicated or sharded
  /// by an Amazon S3 key. Defaults to <code>FullyReplicated</code>
  final ProcessingS3DataDistributionType? s3DataDistributionType;

  /// Whether the <code>Pipe</code> or <code>File</code> is used as the input mode
  /// for transferring data for the monitoring job. <code>Pipe</code> mode is
  /// recommended for large datasets. <code>File</code> mode is useful for small
  /// files that fit in memory. Defaults to <code>File</code>.
  final ProcessingS3InputMode? s3InputMode;

  /// If specified, monitoring jobs substract this time from the start time. For
  /// information about using offsets for scheduling monitoring jobs, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html">Schedule
  /// Model Quality Monitoring Jobs</a>.
  final String? startTimeOffset;

  EndpointInput({
    required this.endpointName,
    required this.localPath,
    this.endTimeOffset,
    this.excludeFeaturesAttribute,
    this.featuresAttribute,
    this.inferenceAttribute,
    this.probabilityAttribute,
    this.probabilityThresholdAttribute,
    this.s3DataDistributionType,
    this.s3InputMode,
    this.startTimeOffset,
  });

  factory EndpointInput.fromJson(Map<String, dynamic> json) {
    return EndpointInput(
      endpointName: json['EndpointName'] as String,
      localPath: json['LocalPath'] as String,
      endTimeOffset: json['EndTimeOffset'] as String?,
      excludeFeaturesAttribute: json['ExcludeFeaturesAttribute'] as String?,
      featuresAttribute: json['FeaturesAttribute'] as String?,
      inferenceAttribute: json['InferenceAttribute'] as String?,
      probabilityAttribute: json['ProbabilityAttribute'] as String?,
      probabilityThresholdAttribute:
          json['ProbabilityThresholdAttribute'] as double?,
      s3DataDistributionType: (json['S3DataDistributionType'] as String?)
          ?.let(ProcessingS3DataDistributionType.fromString),
      s3InputMode: (json['S3InputMode'] as String?)
          ?.let(ProcessingS3InputMode.fromString),
      startTimeOffset: json['StartTimeOffset'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    final localPath = this.localPath;
    final endTimeOffset = this.endTimeOffset;
    final excludeFeaturesAttribute = this.excludeFeaturesAttribute;
    final featuresAttribute = this.featuresAttribute;
    final inferenceAttribute = this.inferenceAttribute;
    final probabilityAttribute = this.probabilityAttribute;
    final probabilityThresholdAttribute = this.probabilityThresholdAttribute;
    final s3DataDistributionType = this.s3DataDistributionType;
    final s3InputMode = this.s3InputMode;
    final startTimeOffset = this.startTimeOffset;
    return {
      'EndpointName': endpointName,
      'LocalPath': localPath,
      if (endTimeOffset != null) 'EndTimeOffset': endTimeOffset,
      if (excludeFeaturesAttribute != null)
        'ExcludeFeaturesAttribute': excludeFeaturesAttribute,
      if (featuresAttribute != null) 'FeaturesAttribute': featuresAttribute,
      if (inferenceAttribute != null) 'InferenceAttribute': inferenceAttribute,
      if (probabilityAttribute != null)
        'ProbabilityAttribute': probabilityAttribute,
      if (probabilityThresholdAttribute != null)
        'ProbabilityThresholdAttribute': probabilityThresholdAttribute,
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.value,
      if (s3InputMode != null) 'S3InputMode': s3InputMode.value,
      if (startTimeOffset != null) 'StartTimeOffset': startTimeOffset,
    };
  }
}

/// The endpoint configuration for the load test.
class EndpointInputConfiguration {
  /// The parameter you want to benchmark against.
  final EnvironmentParameterRanges? environmentParameterRanges;

  /// The inference specification name in the model package version.
  final String? inferenceSpecificationName;

  /// The instance types to use for the load test.
  final ProductionVariantInstanceType? instanceType;
  final ProductionVariantServerlessConfig? serverlessConfig;

  EndpointInputConfiguration({
    this.environmentParameterRanges,
    this.inferenceSpecificationName,
    this.instanceType,
    this.serverlessConfig,
  });

  factory EndpointInputConfiguration.fromJson(Map<String, dynamic> json) {
    return EndpointInputConfiguration(
      environmentParameterRanges: json['EnvironmentParameterRanges'] != null
          ? EnvironmentParameterRanges.fromJson(
              json['EnvironmentParameterRanges'] as Map<String, dynamic>)
          : null,
      inferenceSpecificationName: json['InferenceSpecificationName'] as String?,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ProductionVariantInstanceType.fromString),
      serverlessConfig: json['ServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['ServerlessConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final environmentParameterRanges = this.environmentParameterRanges;
    final inferenceSpecificationName = this.inferenceSpecificationName;
    final instanceType = this.instanceType;
    final serverlessConfig = this.serverlessConfig;
    return {
      if (environmentParameterRanges != null)
        'EnvironmentParameterRanges': environmentParameterRanges,
      if (inferenceSpecificationName != null)
        'InferenceSpecificationName': inferenceSpecificationName,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (serverlessConfig != null) 'ServerlessConfig': serverlessConfig,
    };
  }
}

/// The metadata of the endpoint.
class EndpointMetadata {
  /// The name of the endpoint.
  final String endpointName;

  /// The name of the endpoint configuration.
  final String? endpointConfigName;

  /// The status of the endpoint. For possible values of the status of an
  /// endpoint, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_EndpointSummary.html">EndpointSummary</a>.
  final EndpointStatus? endpointStatus;

  /// If the status of the endpoint is <code>Failed</code>, or the status is
  /// <code>InService</code> but update operation fails, this provides the reason
  /// why it failed.
  final String? failureReason;

  EndpointMetadata({
    required this.endpointName,
    this.endpointConfigName,
    this.endpointStatus,
    this.failureReason,
  });

  factory EndpointMetadata.fromJson(Map<String, dynamic> json) {
    return EndpointMetadata(
      endpointName: json['EndpointName'] as String,
      endpointConfigName: json['EndpointConfigName'] as String?,
      endpointStatus:
          (json['EndpointStatus'] as String?)?.let(EndpointStatus.fromString),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    final endpointConfigName = this.endpointConfigName;
    final endpointStatus = this.endpointStatus;
    final failureReason = this.failureReason;
    return {
      'EndpointName': endpointName,
      if (endpointConfigName != null) 'EndpointConfigName': endpointConfigName,
      if (endpointStatus != null) 'EndpointStatus': endpointStatus.value,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// The endpoint configuration made by Inference Recommender during a
/// recommendation job.
class EndpointOutputConfiguration {
  /// The name of the endpoint made during a recommendation job.
  final String endpointName;

  /// The name of the production variant (deployed model) made during a
  /// recommendation job.
  final String variantName;

  /// The number of instances recommended to launch initially.
  final int? initialInstanceCount;

  /// The instance type recommended by Amazon SageMaker Inference Recommender.
  final ProductionVariantInstanceType? instanceType;
  final ProductionVariantServerlessConfig? serverlessConfig;

  EndpointOutputConfiguration({
    required this.endpointName,
    required this.variantName,
    this.initialInstanceCount,
    this.instanceType,
    this.serverlessConfig,
  });

  factory EndpointOutputConfiguration.fromJson(Map<String, dynamic> json) {
    return EndpointOutputConfiguration(
      endpointName: json['EndpointName'] as String,
      variantName: json['VariantName'] as String,
      initialInstanceCount: json['InitialInstanceCount'] as int?,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ProductionVariantInstanceType.fromString),
      serverlessConfig: json['ServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['ServerlessConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    final variantName = this.variantName;
    final initialInstanceCount = this.initialInstanceCount;
    final instanceType = this.instanceType;
    final serverlessConfig = this.serverlessConfig;
    return {
      'EndpointName': endpointName,
      'VariantName': variantName,
      if (initialInstanceCount != null)
        'InitialInstanceCount': initialInstanceCount,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (serverlessConfig != null) 'ServerlessConfig': serverlessConfig,
    };
  }
}

/// The performance results from running an Inference Recommender job on an
/// existing endpoint.
class EndpointPerformance {
  final EndpointInfo endpointInfo;

  /// The metrics for an existing endpoint.
  final InferenceMetrics metrics;

  EndpointPerformance({
    required this.endpointInfo,
    required this.metrics,
  });

  factory EndpointPerformance.fromJson(Map<String, dynamic> json) {
    return EndpointPerformance(
      endpointInfo:
          EndpointInfo.fromJson(json['EndpointInfo'] as Map<String, dynamic>),
      metrics:
          InferenceMetrics.fromJson(json['Metrics'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointInfo = this.endpointInfo;
    final metrics = this.metrics;
    return {
      'EndpointInfo': endpointInfo,
      'Metrics': metrics,
    };
  }
}

enum EndpointSortKey {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const EndpointSortKey(this.value);

  static EndpointSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EndpointSortKey'));
}

enum EndpointStatus {
  outOfService('OutOfService'),
  creating('Creating'),
  updating('Updating'),
  systemUpdating('SystemUpdating'),
  rollingBack('RollingBack'),
  inService('InService'),
  deleting('Deleting'),
  failed('Failed'),
  updateRollbackFailed('UpdateRollbackFailed'),
  ;

  final String value;

  const EndpointStatus(this.value);

  static EndpointStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EndpointStatus'));
}

/// Provides summary information for an endpoint.
class EndpointSummary {
  /// A timestamp that shows when the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// The name of the endpoint.
  final String endpointName;

  /// The status of the endpoint.
  ///
  /// <ul>
  /// <li>
  /// <code>OutOfService</code>: Endpoint is not available to take incoming
  /// requests.
  /// </li>
  /// <li>
  /// <code>Creating</code>: <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
  /// is executing.
  /// </li>
  /// <li>
  /// <code>Updating</code>: <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpoint</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html">UpdateEndpointWeightsAndCapacities</a>
  /// is executing.
  /// </li>
  /// <li>
  /// <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot
  /// be updated or deleted or re-scaled until it has completed. This maintenance
  /// operation does not change any customer-specified values such as VPC config,
  /// KMS encryption, model, instance type, or instance count.
  /// </li>
  /// <li>
  /// <code>RollingBack</code>: Endpoint fails to scale up or down or change its
  /// variant weight and is in the process of rolling back to its previous
  /// configuration. Once the rollback completes, endpoint returns to an
  /// <code>InService</code> status. This transitional status only applies to an
  /// endpoint that has autoscaling enabled and is undergoing variant weight or
  /// capacity changes as part of an <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html">UpdateEndpointWeightsAndCapacities</a>
  /// call or when the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html">UpdateEndpointWeightsAndCapacities</a>
  /// operation is called explicitly.
  /// </li>
  /// <li>
  /// <code>InService</code>: Endpoint is available to process incoming requests.
  /// </li>
  /// <li>
  /// <code>Deleting</code>: <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html">DeleteEndpoint</a>
  /// is executing.
  /// </li>
  /// <li>
  /// <code>Failed</code>: Endpoint could not be created, updated, or re-scaled.
  /// Use <code>DescribeEndpointOutput$FailureReason</code> for information about
  /// the failure. <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html">DeleteEndpoint</a>
  /// is the only operation that can be performed on a failed endpoint.
  /// </li>
  /// </ul>
  /// To get a list of endpoints with a specified status, use the
  /// <code>StatusEquals</code> filter with a call to <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListEndpoints.html">ListEndpoints</a>.
  final EndpointStatus endpointStatus;

  /// A timestamp that shows when the endpoint was last modified.
  final DateTime lastModifiedTime;

  EndpointSummary({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
  });

  factory EndpointSummary.fromJson(Map<String, dynamic> json) {
    return EndpointSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus:
          EndpointStatus.fromString((json['EndpointStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// A list of environment parameters suggested by the Amazon SageMaker Inference
/// Recommender.
class EnvironmentParameter {
  /// The environment key suggested by the Amazon SageMaker Inference Recommender.
  final String key;

  /// The value suggested by the Amazon SageMaker Inference Recommender.
  final String value;

  /// The value type suggested by the Amazon SageMaker Inference Recommender.
  final String valueType;

  EnvironmentParameter({
    required this.key,
    required this.value,
    required this.valueType,
  });

  factory EnvironmentParameter.fromJson(Map<String, dynamic> json) {
    return EnvironmentParameter(
      key: json['Key'] as String,
      value: json['Value'] as String,
      valueType: json['ValueType'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    final valueType = this.valueType;
    return {
      'Key': key,
      'Value': value,
      'ValueType': valueType,
    };
  }
}

/// Specifies the range of environment parameters
class EnvironmentParameterRanges {
  /// Specified a list of parameters for each category.
  final List<CategoricalParameter>? categoricalParameterRanges;

  EnvironmentParameterRanges({
    this.categoricalParameterRanges,
  });

  factory EnvironmentParameterRanges.fromJson(Map<String, dynamic> json) {
    return EnvironmentParameterRanges(
      categoricalParameterRanges: (json['CategoricalParameterRanges'] as List?)
          ?.nonNulls
          .map((e) => CategoricalParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final categoricalParameterRanges = this.categoricalParameterRanges;
    return {
      if (categoricalParameterRanges != null)
        'CategoricalParameterRanges': categoricalParameterRanges,
    };
  }
}

enum ExecutionRoleIdentityConfig {
  userProfileName('USER_PROFILE_NAME'),
  disabled('DISABLED'),
  ;

  final String value;

  const ExecutionRoleIdentityConfig(this.value);

  static ExecutionRoleIdentityConfig fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ExecutionRoleIdentityConfig'));
}

enum ExecutionStatus {
  pending('Pending'),
  completed('Completed'),
  completedWithViolations('CompletedWithViolations'),
  inProgress('InProgress'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const ExecutionStatus(this.value);

  static ExecutionStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ExecutionStatus'));
}

/// The properties of an experiment as returned by the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API.
class Experiment {
  /// Who created the experiment.
  final UserContext? createdBy;

  /// When the experiment was created.
  final DateTime? creationTime;

  /// The description of the experiment.
  final String? description;

  /// The name of the experiment as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>ExperimentName</code> is displayed.
  final String? displayName;

  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  /// The name of the experiment.
  final String? experimentName;
  final UserContext? lastModifiedBy;

  /// When the experiment was last modified.
  final DateTime? lastModifiedTime;
  final ExperimentSource? source;

  /// The list of tags that are associated with the experiment. You can use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search on the tags.
  final List<Tag>? tags;

  Experiment({
    this.createdBy,
    this.creationTime,
    this.description,
    this.displayName,
    this.experimentArn,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.source,
    this.tags,
  });

  factory Experiment.fromJson(Map<String, dynamic> json) {
    return Experiment(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      experimentArn: json['ExperimentArn'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      source: json['Source'] != null
          ? ExperimentSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final description = this.description;
    final displayName = this.displayName;
    final experimentArn = this.experimentArn;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final source = this.source;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (experimentArn != null) 'ExperimentArn': experimentArn,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (source != null) 'Source': source,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// Associates a SageMaker job as a trial component with an experiment and
/// trial. Specified when you call the following APIs:
///
/// <ul>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a>
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a>
/// </li>
/// <li>
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a>
/// </li>
/// </ul>
class ExperimentConfig {
  /// The name of an existing experiment to associate with the trial component.
  final String? experimentName;

  /// The name of the experiment run to associate with the trial component.
  final String? runName;

  /// The display name for the trial component. If this key isn't specified, the
  /// display name is the trial component name.
  final String? trialComponentDisplayName;

  /// The name of an existing trial to associate the trial component with. If not
  /// specified, a new trial is created.
  final String? trialName;

  ExperimentConfig({
    this.experimentName,
    this.runName,
    this.trialComponentDisplayName,
    this.trialName,
  });

  factory ExperimentConfig.fromJson(Map<String, dynamic> json) {
    return ExperimentConfig(
      experimentName: json['ExperimentName'] as String?,
      runName: json['RunName'] as String?,
      trialComponentDisplayName: json['TrialComponentDisplayName'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentName = this.experimentName;
    final runName = this.runName;
    final trialComponentDisplayName = this.trialComponentDisplayName;
    final trialName = this.trialName;
    return {
      if (experimentName != null) 'ExperimentName': experimentName,
      if (runName != null) 'RunName': runName,
      if (trialComponentDisplayName != null)
        'TrialComponentDisplayName': trialComponentDisplayName,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

/// The source of the experiment.
class ExperimentSource {
  /// The Amazon Resource Name (ARN) of the source.
  final String sourceArn;

  /// The source type.
  final String? sourceType;

  ExperimentSource({
    required this.sourceArn,
    this.sourceType,
  });

  factory ExperimentSource.fromJson(Map<String, dynamic> json) {
    return ExperimentSource(
      sourceArn: json['SourceArn'] as String,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceArn = this.sourceArn;
    final sourceType = this.sourceType;
    return {
      'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// A summary of the properties of an experiment. To get the complete set of
/// properties, call the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a>
/// API and provide the <code>ExperimentName</code>.
class ExperimentSummary {
  /// When the experiment was created.
  final DateTime? creationTime;

  /// The name of the experiment as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>ExperimentName</code> is displayed.
  final String? displayName;

  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  /// The name of the experiment.
  final String? experimentName;
  final ExperimentSource? experimentSource;

  /// When the experiment was last modified.
  final DateTime? lastModifiedTime;

  ExperimentSummary({
    this.creationTime,
    this.displayName,
    this.experimentArn,
    this.experimentName,
    this.experimentSource,
    this.lastModifiedTime,
  });

  factory ExperimentSummary.fromJson(Map<String, dynamic> json) {
    return ExperimentSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      experimentArn: json['ExperimentArn'] as String?,
      experimentName: json['ExperimentName'] as String?,
      experimentSource: json['ExperimentSource'] != null
          ? ExperimentSource.fromJson(
              json['ExperimentSource'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final experimentArn = this.experimentArn;
    final experimentName = this.experimentName;
    final experimentSource = this.experimentSource;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (experimentArn != null) 'ExperimentArn': experimentArn,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (experimentSource != null) 'ExperimentSource': experimentSource,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Contains explainability metrics for a model.
class Explainability {
  /// The explainability report for a model.
  final MetricsSource? report;

  Explainability({
    this.report,
  });

  factory Explainability.fromJson(Map<String, dynamic> json) {
    return Explainability(
      report: json['Report'] != null
          ? MetricsSource.fromJson(json['Report'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final report = this.report;
    return {
      if (report != null) 'Report': report,
    };
  }
}

/// A parameter to activate explainers.
class ExplainerConfig {
  /// A member of <code>ExplainerConfig</code> that contains configuration
  /// parameters for the SageMaker Clarify explainer.
  final ClarifyExplainerConfig? clarifyExplainerConfig;

  ExplainerConfig({
    this.clarifyExplainerConfig,
  });

  factory ExplainerConfig.fromJson(Map<String, dynamic> json) {
    return ExplainerConfig(
      clarifyExplainerConfig: json['ClarifyExplainerConfig'] != null
          ? ClarifyExplainerConfig.fromJson(
              json['ClarifyExplainerConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final clarifyExplainerConfig = this.clarifyExplainerConfig;
    return {
      if (clarifyExplainerConfig != null)
        'ClarifyExplainerConfig': clarifyExplainerConfig,
    };
  }
}

/// The container for the metadata for Fail step.
class FailStepMetadata {
  /// A message that you define and then is processed and rendered by the Fail
  /// step when the error occurs.
  final String? errorMessage;

  FailStepMetadata({
    this.errorMessage,
  });

  factory FailStepMetadata.fromJson(Map<String, dynamic> json) {
    return FailStepMetadata(
      errorMessage: json['ErrorMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final errorMessage = this.errorMessage;
    return {
      if (errorMessage != null) 'ErrorMessage': errorMessage,
    };
  }
}

enum FailureHandlingPolicy {
  rollbackOnFailure('ROLLBACK_ON_FAILURE'),
  doNothing('DO_NOTHING'),
  ;

  final String value;

  const FailureHandlingPolicy(this.value);

  static FailureHandlingPolicy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FailureHandlingPolicy'));
}

/// A list of features. You must include <code>FeatureName</code> and
/// <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are
/// <code>Integral</code>, <code>Fractional</code> and <code>String</code>.
class FeatureDefinition {
  /// The name of a feature. The type must be a string. <code>FeatureName</code>
  /// cannot be any of the following: <code>is_deleted</code>,
  /// <code>write_time</code>, <code>api_invocation_time</code>.
  ///
  /// The name:
  ///
  /// <ul>
  /// <li>
  /// Must start with an alphanumeric character.
  /// </li>
  /// <li>
  /// Can only include alphanumeric characters, underscores, and hyphens. Spaces
  /// are not allowed.
  /// </li>
  /// </ul>
  final String featureName;

  /// The value type of a feature. Valid values are Integral, Fractional, or
  /// String.
  final FeatureType featureType;

  /// Configuration for your collection.
  final CollectionConfig? collectionConfig;

  /// A grouping of elements where each element within the collection must have
  /// the same feature type (<code>String</code>, <code>Integral</code>, or
  /// <code>Fractional</code>).
  ///
  /// <ul>
  /// <li>
  /// <code>List</code>: An ordered collection of elements.
  /// </li>
  /// <li>
  /// <code>Set</code>: An unordered collection of unique elements.
  /// </li>
  /// <li>
  /// <code>Vector</code>: A specialized list that represents a fixed-size array
  /// of elements. The vector dimension is determined by you. Must have elements
  /// with fractional feature types.
  /// </li>
  /// </ul>
  final CollectionType? collectionType;

  FeatureDefinition({
    required this.featureName,
    required this.featureType,
    this.collectionConfig,
    this.collectionType,
  });

  factory FeatureDefinition.fromJson(Map<String, dynamic> json) {
    return FeatureDefinition(
      featureName: json['FeatureName'] as String,
      featureType: FeatureType.fromString((json['FeatureType'] as String)),
      collectionConfig: json['CollectionConfig'] != null
          ? CollectionConfig.fromJson(
              json['CollectionConfig'] as Map<String, dynamic>)
          : null,
      collectionType:
          (json['CollectionType'] as String?)?.let(CollectionType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final featureName = this.featureName;
    final featureType = this.featureType;
    final collectionConfig = this.collectionConfig;
    final collectionType = this.collectionType;
    return {
      'FeatureName': featureName,
      'FeatureType': featureType.value,
      if (collectionConfig != null) 'CollectionConfig': collectionConfig,
      if (collectionType != null) 'CollectionType': collectionType.value,
    };
  }
}

/// Amazon SageMaker Feature Store stores features in a collection called
/// Feature Group. A Feature Group can be visualized as a table which has rows,
/// with a unique identifier for each row where each column in the table is a
/// feature. In principle, a Feature Group is composed of features and values
/// per features.
class FeatureGroup {
  /// The time a <code>FeatureGroup</code> was created.
  final DateTime? creationTime;

  /// A free form description of a <code>FeatureGroup</code>.
  final String? description;

  /// The name of the feature that stores the <code>EventTime</code> of a Record
  /// in a <code>FeatureGroup</code>.
  ///
  /// A <code>EventTime</code> is point in time when a new event occurs that
  /// corresponds to the creation or update of a <code>Record</code> in
  /// <code>FeatureGroup</code>. All <code>Records</code> in the
  /// <code>FeatureGroup</code> must have a corresponding <code>EventTime</code>.
  final String? eventTimeFeatureName;

  /// The reason that the <code>FeatureGroup</code> failed to be replicated in the
  /// <code>OfflineStore</code>. This is failure may be due to a failure to create
  /// a <code>FeatureGroup</code> in or delete a <code>FeatureGroup</code> from
  /// the <code>OfflineStore</code>.
  final String? failureReason;

  /// A list of <code>Feature</code>s. Each <code>Feature</code> must include a
  /// <code>FeatureName</code> and a <code>FeatureType</code>.
  ///
  /// Valid <code>FeatureType</code>s are <code>Integral</code>,
  /// <code>Fractional</code> and <code>String</code>.
  ///
  /// <code>FeatureName</code>s cannot be any of the following:
  /// <code>is_deleted</code>, <code>write_time</code>,
  /// <code>api_invocation_time</code>.
  ///
  /// You can create up to 2,500 <code>FeatureDefinition</code>s per
  /// <code>FeatureGroup</code>.
  final List<FeatureDefinition>? featureDefinitions;

  /// The Amazon Resource Name (ARN) of a <code>FeatureGroup</code>.
  final String? featureGroupArn;

  /// The name of the <code>FeatureGroup</code>.
  final String? featureGroupName;

  /// A <code>FeatureGroup</code> status.
  final FeatureGroupStatus? featureGroupStatus;

  /// A timestamp indicating the last time you updated the feature group.
  final DateTime? lastModifiedTime;

  /// A value that indicates whether the feature group was updated successfully.
  final LastUpdateStatus? lastUpdateStatus;
  final OfflineStoreConfig? offlineStoreConfig;
  final OfflineStoreStatus? offlineStoreStatus;
  final OnlineStoreConfig? onlineStoreConfig;

  /// The name of the <code>Feature</code> whose value uniquely identifies a
  /// <code>Record</code> defined in the <code>FeatureGroup</code>
  /// <code>FeatureDefinitions</code>.
  final String? recordIdentifierFeatureName;

  /// The Amazon Resource Name (ARN) of the IAM execution role used to create the
  /// feature group.
  final String? roleArn;

  /// Tags used to define a <code>FeatureGroup</code>.
  final List<Tag>? tags;

  FeatureGroup({
    this.creationTime,
    this.description,
    this.eventTimeFeatureName,
    this.failureReason,
    this.featureDefinitions,
    this.featureGroupArn,
    this.featureGroupName,
    this.featureGroupStatus,
    this.lastModifiedTime,
    this.lastUpdateStatus,
    this.offlineStoreConfig,
    this.offlineStoreStatus,
    this.onlineStoreConfig,
    this.recordIdentifierFeatureName,
    this.roleArn,
    this.tags,
  });

  factory FeatureGroup.fromJson(Map<String, dynamic> json) {
    return FeatureGroup(
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      eventTimeFeatureName: json['EventTimeFeatureName'] as String?,
      failureReason: json['FailureReason'] as String?,
      featureDefinitions: (json['FeatureDefinitions'] as List?)
          ?.nonNulls
          .map((e) => FeatureDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      featureGroupArn: json['FeatureGroupArn'] as String?,
      featureGroupName: json['FeatureGroupName'] as String?,
      featureGroupStatus: (json['FeatureGroupStatus'] as String?)
          ?.let(FeatureGroupStatus.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastUpdateStatus: json['LastUpdateStatus'] != null
          ? LastUpdateStatus.fromJson(
              json['LastUpdateStatus'] as Map<String, dynamic>)
          : null,
      offlineStoreConfig: json['OfflineStoreConfig'] != null
          ? OfflineStoreConfig.fromJson(
              json['OfflineStoreConfig'] as Map<String, dynamic>)
          : null,
      offlineStoreStatus: json['OfflineStoreStatus'] != null
          ? OfflineStoreStatus.fromJson(
              json['OfflineStoreStatus'] as Map<String, dynamic>)
          : null,
      onlineStoreConfig: json['OnlineStoreConfig'] != null
          ? OnlineStoreConfig.fromJson(
              json['OnlineStoreConfig'] as Map<String, dynamic>)
          : null,
      recordIdentifierFeatureName:
          json['RecordIdentifierFeatureName'] as String?,
      roleArn: json['RoleArn'] as String?,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final eventTimeFeatureName = this.eventTimeFeatureName;
    final failureReason = this.failureReason;
    final featureDefinitions = this.featureDefinitions;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final featureGroupStatus = this.featureGroupStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final lastUpdateStatus = this.lastUpdateStatus;
    final offlineStoreConfig = this.offlineStoreConfig;
    final offlineStoreStatus = this.offlineStoreStatus;
    final onlineStoreConfig = this.onlineStoreConfig;
    final recordIdentifierFeatureName = this.recordIdentifierFeatureName;
    final roleArn = this.roleArn;
    final tags = this.tags;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (eventTimeFeatureName != null)
        'EventTimeFeatureName': eventTimeFeatureName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (featureDefinitions != null) 'FeatureDefinitions': featureDefinitions,
      if (featureGroupArn != null) 'FeatureGroupArn': featureGroupArn,
      if (featureGroupName != null) 'FeatureGroupName': featureGroupName,
      if (featureGroupStatus != null)
        'FeatureGroupStatus': featureGroupStatus.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastUpdateStatus != null) 'LastUpdateStatus': lastUpdateStatus,
      if (offlineStoreConfig != null) 'OfflineStoreConfig': offlineStoreConfig,
      if (offlineStoreStatus != null) 'OfflineStoreStatus': offlineStoreStatus,
      if (onlineStoreConfig != null) 'OnlineStoreConfig': onlineStoreConfig,
      if (recordIdentifierFeatureName != null)
        'RecordIdentifierFeatureName': recordIdentifierFeatureName,
      if (roleArn != null) 'RoleArn': roleArn,
      if (tags != null) 'Tags': tags,
    };
  }
}

enum FeatureGroupSortBy {
  name('Name'),
  featureGroupStatus('FeatureGroupStatus'),
  offlineStoreStatus('OfflineStoreStatus'),
  creationTime('CreationTime'),
  ;

  final String value;

  const FeatureGroupSortBy(this.value);

  static FeatureGroupSortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FeatureGroupSortBy'));
}

enum FeatureGroupSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const FeatureGroupSortOrder(this.value);

  static FeatureGroupSortOrder fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FeatureGroupSortOrder'));
}

enum FeatureGroupStatus {
  creating('Creating'),
  created('Created'),
  createFailed('CreateFailed'),
  deleting('Deleting'),
  deleteFailed('DeleteFailed'),
  ;

  final String value;

  const FeatureGroupStatus(this.value);

  static FeatureGroupStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FeatureGroupStatus'));
}

/// The name, ARN, <code>CreationTime</code>, <code>FeatureGroup</code> values,
/// <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of
/// a <code>FeatureGroup</code>.
class FeatureGroupSummary {
  /// A timestamp indicating the time of creation time of the
  /// <code>FeatureGroup</code>.
  final DateTime creationTime;

  /// Unique identifier for the <code>FeatureGroup</code>.
  final String featureGroupArn;

  /// The name of <code>FeatureGroup</code>.
  final String featureGroupName;

  /// The status of a FeatureGroup. The status can be any of the following:
  /// <code>Creating</code>, <code>Created</code>, <code>CreateFail</code>,
  /// <code>Deleting</code> or <code>DetailFail</code>.
  final FeatureGroupStatus? featureGroupStatus;

  /// Notifies you if replicating data into the <code>OfflineStore</code> has
  /// failed. Returns either: <code>Active</code> or <code>Blocked</code>.
  final OfflineStoreStatus? offlineStoreStatus;

  FeatureGroupSummary({
    required this.creationTime,
    required this.featureGroupArn,
    required this.featureGroupName,
    this.featureGroupStatus,
    this.offlineStoreStatus,
  });

  factory FeatureGroupSummary.fromJson(Map<String, dynamic> json) {
    return FeatureGroupSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      featureGroupArn: json['FeatureGroupArn'] as String,
      featureGroupName: json['FeatureGroupName'] as String,
      featureGroupStatus: (json['FeatureGroupStatus'] as String?)
          ?.let(FeatureGroupStatus.fromString),
      offlineStoreStatus: json['OfflineStoreStatus'] != null
          ? OfflineStoreStatus.fromJson(
              json['OfflineStoreStatus'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final featureGroupStatus = this.featureGroupStatus;
    final offlineStoreStatus = this.offlineStoreStatus;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FeatureGroupArn': featureGroupArn,
      'FeatureGroupName': featureGroupName,
      if (featureGroupStatus != null)
        'FeatureGroupStatus': featureGroupStatus.value,
      if (offlineStoreStatus != null) 'OfflineStoreStatus': offlineStoreStatus,
    };
  }
}

/// The metadata for a feature. It can either be metadata that you specify, or
/// metadata that is updated automatically.
class FeatureMetadata {
  /// A timestamp indicating when the feature was created.
  final DateTime? creationTime;

  /// An optional description that you specify to better describe the feature.
  final String? description;

  /// The Amazon Resource Number (ARN) of the feature group.
  final String? featureGroupArn;

  /// The name of the feature group containing the feature.
  final String? featureGroupName;

  /// The name of feature.
  final String? featureName;

  /// The data type of the feature.
  final FeatureType? featureType;

  /// A timestamp indicating when the feature was last modified.
  final DateTime? lastModifiedTime;

  /// Optional key-value pairs that you specify to better describe the feature.
  final List<FeatureParameter>? parameters;

  FeatureMetadata({
    this.creationTime,
    this.description,
    this.featureGroupArn,
    this.featureGroupName,
    this.featureName,
    this.featureType,
    this.lastModifiedTime,
    this.parameters,
  });

  factory FeatureMetadata.fromJson(Map<String, dynamic> json) {
    return FeatureMetadata(
      creationTime: timeStampFromJson(json['CreationTime']),
      description: json['Description'] as String?,
      featureGroupArn: json['FeatureGroupArn'] as String?,
      featureGroupName: json['FeatureGroupName'] as String?,
      featureName: json['FeatureName'] as String?,
      featureType:
          (json['FeatureType'] as String?)?.let(FeatureType.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      parameters: (json['Parameters'] as List?)
          ?.nonNulls
          .map((e) => FeatureParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final featureGroupArn = this.featureGroupArn;
    final featureGroupName = this.featureGroupName;
    final featureName = this.featureName;
    final featureType = this.featureType;
    final lastModifiedTime = this.lastModifiedTime;
    final parameters = this.parameters;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (description != null) 'Description': description,
      if (featureGroupArn != null) 'FeatureGroupArn': featureGroupArn,
      if (featureGroupName != null) 'FeatureGroupName': featureGroupName,
      if (featureName != null) 'FeatureName': featureName,
      if (featureType != null) 'FeatureType': featureType.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (parameters != null) 'Parameters': parameters,
    };
  }
}

/// A key-value pair that you specify to describe the feature.
class FeatureParameter {
  /// A key that must contain a value to describe the feature.
  final String? key;

  /// The value that belongs to a key.
  final String? value;

  FeatureParameter({
    this.key,
    this.value,
  });

  factory FeatureParameter.fromJson(Map<String, dynamic> json) {
    return FeatureParameter(
      key: json['Key'] as String?,
      value: json['Value'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

enum FeatureStatus {
  enabled('ENABLED'),
  disabled('DISABLED'),
  ;

  final String value;

  const FeatureStatus(this.value);

  static FeatureStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FeatureStatus'));
}

enum FeatureType {
  integral('Integral'),
  fractional('Fractional'),
  string('String'),
  ;

  final String value;

  const FeatureType(this.value);

  static FeatureType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum FeatureType'));
}

/// Contains details regarding the file source.
class FileSource {
  /// The Amazon S3 URI for the file source.
  final String s3Uri;

  /// The digest of the file source.
  final String? contentDigest;

  /// The type of content stored in the file source.
  final String? contentType;

  FileSource({
    required this.s3Uri,
    this.contentDigest,
    this.contentType,
  });

  factory FileSource.fromJson(Map<String, dynamic> json) {
    return FileSource(
      s3Uri: json['S3Uri'] as String,
      contentDigest: json['ContentDigest'] as String?,
      contentType: json['ContentType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    final contentDigest = this.contentDigest;
    final contentType = this.contentType;
    return {
      'S3Uri': s3Uri,
      if (contentDigest != null) 'ContentDigest': contentDigest,
      if (contentType != null) 'ContentType': contentType,
    };
  }
}

enum FileSystemAccessMode {
  rw('rw'),
  ro('ro'),
  ;

  final String value;

  const FileSystemAccessMode(this.value);

  static FileSystemAccessMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FileSystemAccessMode'));
}

/// The Amazon Elastic File System storage configuration for a SageMaker image.
class FileSystemConfig {
  /// The default POSIX group ID (GID). If not specified, defaults to
  /// <code>100</code>.
  final int? defaultGid;

  /// The default POSIX user ID (UID). If not specified, defaults to
  /// <code>1000</code>.
  final int? defaultUid;

  /// The path within the image to mount the user's EFS home directory. The
  /// directory should be empty. If not specified, defaults to
  /// <i>/home/sagemaker-user</i>.
  final String? mountPath;

  FileSystemConfig({
    this.defaultGid,
    this.defaultUid,
    this.mountPath,
  });

  factory FileSystemConfig.fromJson(Map<String, dynamic> json) {
    return FileSystemConfig(
      defaultGid: json['DefaultGid'] as int?,
      defaultUid: json['DefaultUid'] as int?,
      mountPath: json['MountPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultGid = this.defaultGid;
    final defaultUid = this.defaultUid;
    final mountPath = this.mountPath;
    return {
      if (defaultGid != null) 'DefaultGid': defaultGid,
      if (defaultUid != null) 'DefaultUid': defaultUid,
      if (mountPath != null) 'MountPath': mountPath,
    };
  }
}

/// Specifies a file system data source for a channel.
class FileSystemDataSource {
  /// The full path to the directory to associate with the channel.
  final String directoryPath;

  /// The access mode of the mount of the directory associated with the channel. A
  /// directory can be mounted either in <code>ro</code> (read-only) or
  /// <code>rw</code> (read-write) mode.
  final FileSystemAccessMode fileSystemAccessMode;

  /// The file system id.
  final String fileSystemId;

  /// The file system type.
  final FileSystemType fileSystemType;

  FileSystemDataSource({
    required this.directoryPath,
    required this.fileSystemAccessMode,
    required this.fileSystemId,
    required this.fileSystemType,
  });

  factory FileSystemDataSource.fromJson(Map<String, dynamic> json) {
    return FileSystemDataSource(
      directoryPath: json['DirectoryPath'] as String,
      fileSystemAccessMode: FileSystemAccessMode.fromString(
          (json['FileSystemAccessMode'] as String)),
      fileSystemId: json['FileSystemId'] as String,
      fileSystemType:
          FileSystemType.fromString((json['FileSystemType'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final directoryPath = this.directoryPath;
    final fileSystemAccessMode = this.fileSystemAccessMode;
    final fileSystemId = this.fileSystemId;
    final fileSystemType = this.fileSystemType;
    return {
      'DirectoryPath': directoryPath,
      'FileSystemAccessMode': fileSystemAccessMode.value,
      'FileSystemId': fileSystemId,
      'FileSystemType': fileSystemType.value,
    };
  }
}

enum FileSystemType {
  efs('EFS'),
  fSxLustre('FSxLustre'),
  ;

  final String value;

  const FileSystemType(this.value);

  static FileSystemType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FileSystemType'));
}

enum FillingType {
  frontfill('frontfill'),
  middlefill('middlefill'),
  backfill('backfill'),
  futurefill('futurefill'),
  frontfillValue('frontfill_value'),
  middlefillValue('middlefill_value'),
  backfillValue('backfill_value'),
  futurefillValue('futurefill_value'),
  ;

  final String value;

  const FillingType(this.value);

  static FillingType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum FillingType'));
}

/// A conditional statement for a search expression that includes a resource
/// property, a Boolean operator, and a value. Resources that match the
/// statement are returned in the results from the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API.
///
/// If you specify a <code>Value</code>, but not an <code>Operator</code>,
/// SageMaker uses the equals operator.
///
/// In search, there are several property types:
/// <dl> <dt>Metrics</dt> <dd>
/// To define a metric filter, enter a value using the form
/// <code>"Metrics.&lt;name&gt;"</code>, where <code>&lt;name&gt;</code> is a
/// metric name. For example, the following filter searches for training jobs
/// with an <code>"accuracy"</code> metric greater than <code>"0.9"</code>:
///
/// <code>{</code>
///
/// <code>"Name": "Metrics.accuracy",</code>
///
/// <code>"Operator": "GreaterThan",</code>
///
/// <code>"Value": "0.9"</code>
///
/// <code>}</code>
/// </dd> <dt>HyperParameters</dt> <dd>
/// To define a hyperparameter filter, enter a value with the form
/// <code>"HyperParameters.&lt;name&gt;"</code>. Decimal hyperparameter values
/// are treated as a decimal in a comparison if the specified <code>Value</code>
/// is also a decimal value. If the specified <code>Value</code> is an integer,
/// the decimal hyperparameter values are treated as integers. For example, the
/// following filter is satisfied by training jobs with a
/// <code>"learning_rate"</code> hyperparameter that is less than
/// <code>"0.5"</code>:
///
/// <code> {</code>
///
/// <code> "Name": "HyperParameters.learning_rate",</code>
///
/// <code> "Operator": "LessThan",</code>
///
/// <code> "Value": "0.5"</code>
///
/// <code> }</code>
/// </dd> <dt>Tags</dt> <dd>
/// To define a tag filter, enter a value with the form
/// <code>Tags.&lt;key&gt;</code>.
/// </dd> </dl>
class Filter {
  /// A resource property name. For example, <code>TrainingJobName</code>. For
  /// valid property names, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html">SearchRecord</a>.
  /// You must specify a valid property for the resource.
  final String name;

  /// A Boolean binary operator that is used to evaluate the filter. The operator
  /// field contains one of the following values:
  /// <dl> <dt>Equals</dt> <dd>
  /// The value of <code>Name</code> equals <code>Value</code>.
  /// </dd> <dt>NotEquals</dt> <dd>
  /// The value of <code>Name</code> doesn't equal <code>Value</code>.
  /// </dd> <dt>Exists</dt> <dd>
  /// The <code>Name</code> property exists.
  /// </dd> <dt>NotExists</dt> <dd>
  /// The <code>Name</code> property does not exist.
  /// </dd> <dt>GreaterThan</dt> <dd>
  /// The value of <code>Name</code> is greater than <code>Value</code>. Not
  /// supported for text properties.
  /// </dd> <dt>GreaterThanOrEqualTo</dt> <dd>
  /// The value of <code>Name</code> is greater than or equal to
  /// <code>Value</code>. Not supported for text properties.
  /// </dd> <dt>LessThan</dt> <dd>
  /// The value of <code>Name</code> is less than <code>Value</code>. Not
  /// supported for text properties.
  /// </dd> <dt>LessThanOrEqualTo</dt> <dd>
  /// The value of <code>Name</code> is less than or equal to <code>Value</code>.
  /// Not supported for text properties.
  /// </dd> <dt>In</dt> <dd>
  /// The value of <code>Name</code> is one of the comma delimited strings in
  /// <code>Value</code>. Only supported for text properties.
  /// </dd> <dt>Contains</dt> <dd>
  /// The value of <code>Name</code> contains the string <code>Value</code>. Only
  /// supported for text properties.
  ///
  /// A <code>SearchExpression</code> can include the <code>Contains</code>
  /// operator multiple times when the value of <code>Name</code> is one of the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// <code>Experiment.DisplayName</code>
  /// </li>
  /// <li>
  /// <code>Experiment.ExperimentName</code>
  /// </li>
  /// <li>
  /// <code>Experiment.Tags</code>
  /// </li>
  /// <li>
  /// <code>Trial.DisplayName</code>
  /// </li>
  /// <li>
  /// <code>Trial.TrialName</code>
  /// </li>
  /// <li>
  /// <code>Trial.Tags</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.DisplayName</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.TrialComponentName</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.Tags</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.InputArtifacts</code>
  /// </li>
  /// <li>
  /// <code>TrialComponent.OutputArtifacts</code>
  /// </li>
  /// </ul>
  /// A <code>SearchExpression</code> can include only one <code>Contains</code>
  /// operator for all other values of <code>Name</code>. In these cases, if you
  /// include multiple <code>Contains</code> operators in the
  /// <code>SearchExpression</code>, the result is the following error message:
  /// "<code>'CONTAINS' operator usage limit of 1 exceeded.</code>"
  /// </dd> </dl>
  final Operator? operator;

  /// A value used with <code>Name</code> and <code>Operator</code> to determine
  /// which resources satisfy the filter's condition. For numerical properties,
  /// <code>Value</code> must be an integer or floating-point decimal. For
  /// timestamp properties, <code>Value</code> must be an ISO 8601 date-time
  /// string of the following format: <code>YYYY-mm-dd'T'HH:MM:SS</code>.
  final String? value;

  Filter({
    required this.name,
    this.operator,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final operator = this.operator;
    final value = this.value;
    return {
      'Name': name,
      if (operator != null) 'Operator': operator.value,
      if (value != null) 'Value': value,
    };
  }
}

/// The best candidate result from an AutoML training job.
class FinalAutoMLJobObjectiveMetric {
  /// The name of the metric with the best result. For a description of the
  /// possible objective metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html">AutoMLJobObjective$MetricName</a>.
  final AutoMLMetricEnum metricName;

  /// The value of the metric with the best result.
  final double value;

  /// The name of the standard metric. For a description of the standard metrics,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics">Autopilot
  /// candidate metrics</a>.
  final AutoMLMetricEnum? standardMetricName;

  /// The type of metric with the best result.
  final AutoMLJobObjectiveType? type;

  FinalAutoMLJobObjectiveMetric({
    required this.metricName,
    required this.value,
    this.standardMetricName,
    this.type,
  });

  factory FinalAutoMLJobObjectiveMetric.fromJson(Map<String, dynamic> json) {
    return FinalAutoMLJobObjectiveMetric(
      metricName: AutoMLMetricEnum.fromString((json['MetricName'] as String)),
      value: json['Value'] as double,
      standardMetricName: (json['StandardMetricName'] as String?)
          ?.let(AutoMLMetricEnum.fromString),
      type: (json['Type'] as String?)?.let(AutoMLJobObjectiveType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final value = this.value;
    final standardMetricName = this.standardMetricName;
    final type = this.type;
    return {
      'MetricName': metricName.value,
      'Value': value,
      if (standardMetricName != null)
        'StandardMetricName': standardMetricName.value,
      if (type != null) 'Type': type.value,
    };
  }
}

/// Shows the latest objective metric emitted by a training job that was
/// launched by a hyperparameter tuning job. You define the objective metric in
/// the <code>HyperParameterTuningJobObjective</code> parameter of <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>.
class FinalHyperParameterTuningJobObjectiveMetric {
  /// The name of the objective metric. For SageMaker built-in algorithms, metrics
  /// are defined per algorithm. See the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html">metrics
  /// for XGBoost</a> as an example. You can also use a custom algorithm for
  /// training and define your own metrics. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define
  /// metrics and environment variables</a>.
  final String metricName;

  /// The value of the objective metric.
  final double value;

  /// Select if you want to minimize or maximize the objective metric during
  /// hyperparameter tuning.
  final HyperParameterTuningJobObjectiveType? type;

  FinalHyperParameterTuningJobObjectiveMetric({
    required this.metricName,
    required this.value,
    this.type,
  });

  factory FinalHyperParameterTuningJobObjectiveMetric.fromJson(
      Map<String, dynamic> json) {
    return FinalHyperParameterTuningJobObjectiveMetric(
      metricName: json['MetricName'] as String,
      value: json['Value'] as double,
      type: (json['Type'] as String?)
          ?.let(HyperParameterTuningJobObjectiveType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final value = this.value;
    final type = this.type;
    return {
      'MetricName': metricName,
      'Value': value,
      if (type != null) 'Type': type.value,
    };
  }
}

enum FlatInvocations {
  $continue('Continue'),
  stop('Stop'),
  ;

  final String value;

  const FlatInvocations(this.value);

  static FlatInvocations fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FlatInvocations'));
}

/// Contains information about where human output will be stored.
class FlowDefinitionOutputConfig {
  /// The Amazon S3 path where the object containing human output will be made
  /// available.
  ///
  /// To learn more about the format of Amazon A2I output data, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-output-data.html">Amazon
  /// A2I Output Data</a>.
  final String s3OutputPath;

  /// The Amazon Key Management Service (KMS) key ID for server-side encryption.
  final String? kmsKeyId;

  FlowDefinitionOutputConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
  });

  factory FlowDefinitionOutputConfig.fromJson(Map<String, dynamic> json) {
    return FlowDefinitionOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum FlowDefinitionStatus {
  initializing('Initializing'),
  active('Active'),
  failed('Failed'),
  deleting('Deleting'),
  ;

  final String value;

  const FlowDefinitionStatus(this.value);

  static FlowDefinitionStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum FlowDefinitionStatus'));
}

/// Contains summary information about the flow definition.
class FlowDefinitionSummary {
  /// The timestamp when SageMaker created the flow definition.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the flow definition.
  final String flowDefinitionArn;

  /// The name of the flow definition.
  final String flowDefinitionName;

  /// The status of the flow definition. Valid values:
  final FlowDefinitionStatus flowDefinitionStatus;

  /// The reason why the flow definition creation failed. A failure reason is
  /// returned only when the flow definition status is <code>Failed</code>.
  final String? failureReason;

  FlowDefinitionSummary({
    required this.creationTime,
    required this.flowDefinitionArn,
    required this.flowDefinitionName,
    required this.flowDefinitionStatus,
    this.failureReason,
  });

  factory FlowDefinitionSummary.fromJson(Map<String, dynamic> json) {
    return FlowDefinitionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      flowDefinitionArn: json['FlowDefinitionArn'] as String,
      flowDefinitionName: json['FlowDefinitionName'] as String,
      flowDefinitionStatus: FlowDefinitionStatus.fromString(
          (json['FlowDefinitionStatus'] as String)),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final flowDefinitionArn = this.flowDefinitionArn;
    final flowDefinitionName = this.flowDefinitionName;
    final flowDefinitionStatus = this.flowDefinitionStatus;
    final failureReason = this.failureReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'FlowDefinitionArn': flowDefinitionArn,
      'FlowDefinitionName': flowDefinitionName,
      'FlowDefinitionStatus': flowDefinitionStatus.value,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

enum Framework {
  tensorflow('TENSORFLOW'),
  keras('KERAS'),
  mxnet('MXNET'),
  onnx('ONNX'),
  pytorch('PYTORCH'),
  xgboost('XGBOOST'),
  tflite('TFLITE'),
  darknet('DARKNET'),
  sklearn('SKLEARN'),
  ;

  final String value;

  const Framework(this.value);

  static Framework fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Framework'));
}

/// The generative AI settings for the SageMaker Canvas application.
///
/// Configure these settings for Canvas users starting chats with generative AI
/// foundation models. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/canvas-fm-chat.html">
/// Use generative AI with foundation models</a>.
class GenerativeAiSettings {
  /// The ARN of an Amazon Web Services IAM role that allows fine-tuning of large
  /// language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3
  /// read and write permissions, as well as a trust relationship that establishes
  /// <code>bedrock.amazonaws.com</code> as a service principal.
  final String? amazonBedrockRoleArn;

  GenerativeAiSettings({
    this.amazonBedrockRoleArn,
  });

  factory GenerativeAiSettings.fromJson(Map<String, dynamic> json) {
    return GenerativeAiSettings(
      amazonBedrockRoleArn: json['AmazonBedrockRoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final amazonBedrockRoleArn = this.amazonBedrockRoleArn;
    return {
      if (amazonBedrockRoleArn != null)
        'AmazonBedrockRoleArn': amazonBedrockRoleArn,
    };
  }
}

class GetDeviceFleetReportResponse {
  /// The Amazon Resource Name (ARN) of the device.
  final String deviceFleetArn;

  /// The name of the fleet.
  final String deviceFleetName;

  /// The versions of Edge Manager agent deployed on the fleet.
  final List<AgentVersion>? agentVersions;

  /// Description of the fleet.
  final String? description;

  /// Status of devices.
  final DeviceStats? deviceStats;

  /// Status of model on device.
  final List<EdgeModelStat>? modelStats;

  /// The output configuration for storing sample data collected by the fleet.
  final EdgeOutputConfig? outputConfig;

  /// Timestamp of when the report was generated.
  final DateTime? reportGenerated;

  GetDeviceFleetReportResponse({
    required this.deviceFleetArn,
    required this.deviceFleetName,
    this.agentVersions,
    this.description,
    this.deviceStats,
    this.modelStats,
    this.outputConfig,
    this.reportGenerated,
  });

  factory GetDeviceFleetReportResponse.fromJson(Map<String, dynamic> json) {
    return GetDeviceFleetReportResponse(
      deviceFleetArn: json['DeviceFleetArn'] as String,
      deviceFleetName: json['DeviceFleetName'] as String,
      agentVersions: (json['AgentVersions'] as List?)
          ?.nonNulls
          .map((e) => AgentVersion.fromJson(e as Map<String, dynamic>))
          .toList(),
      description: json['Description'] as String?,
      deviceStats: json['DeviceStats'] != null
          ? DeviceStats.fromJson(json['DeviceStats'] as Map<String, dynamic>)
          : null,
      modelStats: (json['ModelStats'] as List?)
          ?.nonNulls
          .map((e) => EdgeModelStat.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputConfig: json['OutputConfig'] != null
          ? EdgeOutputConfig.fromJson(
              json['OutputConfig'] as Map<String, dynamic>)
          : null,
      reportGenerated: timeStampFromJson(json['ReportGenerated']),
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetArn = this.deviceFleetArn;
    final deviceFleetName = this.deviceFleetName;
    final agentVersions = this.agentVersions;
    final description = this.description;
    final deviceStats = this.deviceStats;
    final modelStats = this.modelStats;
    final outputConfig = this.outputConfig;
    final reportGenerated = this.reportGenerated;
    return {
      'DeviceFleetArn': deviceFleetArn,
      'DeviceFleetName': deviceFleetName,
      if (agentVersions != null) 'AgentVersions': agentVersions,
      if (description != null) 'Description': description,
      if (deviceStats != null) 'DeviceStats': deviceStats,
      if (modelStats != null) 'ModelStats': modelStats,
      if (outputConfig != null) 'OutputConfig': outputConfig,
      if (reportGenerated != null)
        'ReportGenerated': unixTimestampToJson(reportGenerated),
    };
  }
}

class GetLineageGroupPolicyResponse {
  /// The Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupArn;

  /// The resource policy that gives access to the lineage group in another
  /// account.
  final String? resourcePolicy;

  GetLineageGroupPolicyResponse({
    this.lineageGroupArn,
    this.resourcePolicy,
  });

  factory GetLineageGroupPolicyResponse.fromJson(Map<String, dynamic> json) {
    return GetLineageGroupPolicyResponse(
      lineageGroupArn: json['LineageGroupArn'] as String?,
      resourcePolicy: json['ResourcePolicy'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final lineageGroupArn = this.lineageGroupArn;
    final resourcePolicy = this.resourcePolicy;
    return {
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (resourcePolicy != null) 'ResourcePolicy': resourcePolicy,
    };
  }
}

class GetModelPackageGroupPolicyOutput {
  /// The resource policy for the model group.
  final String resourcePolicy;

  GetModelPackageGroupPolicyOutput({
    required this.resourcePolicy,
  });

  factory GetModelPackageGroupPolicyOutput.fromJson(Map<String, dynamic> json) {
    return GetModelPackageGroupPolicyOutput(
      resourcePolicy: json['ResourcePolicy'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final resourcePolicy = this.resourcePolicy;
    return {
      'ResourcePolicy': resourcePolicy,
    };
  }
}

class GetSagemakerServicecatalogPortfolioStatusOutput {
  /// Whether Service Catalog is enabled or disabled in SageMaker.
  final SagemakerServicecatalogStatus? status;

  GetSagemakerServicecatalogPortfolioStatusOutput({
    this.status,
  });

  factory GetSagemakerServicecatalogPortfolioStatusOutput.fromJson(
      Map<String, dynamic> json) {
    return GetSagemakerServicecatalogPortfolioStatusOutput(
      status: (json['Status'] as String?)
          ?.let(SagemakerServicecatalogStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }
}

class GetScalingConfigurationRecommendationResponse {
  /// An object with the recommended values for you to specify when creating an
  /// autoscaling policy.
  final DynamicScalingConfiguration? dynamicScalingConfiguration;

  /// The name of an endpoint benchmarked during a previously completed Inference
  /// Recommender job.
  final String? endpointName;

  /// The name of a previously completed Inference Recommender job.
  final String? inferenceRecommendationsJobName;

  /// An object with a list of metrics that were benchmarked during the previously
  /// completed Inference Recommender job.
  final ScalingPolicyMetric? metric;

  /// The recommendation ID of a previously completed inference recommendation.
  final String? recommendationId;

  /// An object representing the anticipated traffic pattern for an endpoint that
  /// you specified in the request.
  final ScalingPolicyObjective? scalingPolicyObjective;

  /// The percentage of how much utilization you want an instance to use before
  /// autoscaling, which you specified in the request. The default value is 50%.
  final int? targetCpuUtilizationPerCore;

  GetScalingConfigurationRecommendationResponse({
    this.dynamicScalingConfiguration,
    this.endpointName,
    this.inferenceRecommendationsJobName,
    this.metric,
    this.recommendationId,
    this.scalingPolicyObjective,
    this.targetCpuUtilizationPerCore,
  });

  factory GetScalingConfigurationRecommendationResponse.fromJson(
      Map<String, dynamic> json) {
    return GetScalingConfigurationRecommendationResponse(
      dynamicScalingConfiguration: json['DynamicScalingConfiguration'] != null
          ? DynamicScalingConfiguration.fromJson(
              json['DynamicScalingConfiguration'] as Map<String, dynamic>)
          : null,
      endpointName: json['EndpointName'] as String?,
      inferenceRecommendationsJobName:
          json['InferenceRecommendationsJobName'] as String?,
      metric: json['Metric'] != null
          ? ScalingPolicyMetric.fromJson(json['Metric'] as Map<String, dynamic>)
          : null,
      recommendationId: json['RecommendationId'] as String?,
      scalingPolicyObjective: json['ScalingPolicyObjective'] != null
          ? ScalingPolicyObjective.fromJson(
              json['ScalingPolicyObjective'] as Map<String, dynamic>)
          : null,
      targetCpuUtilizationPerCore: json['TargetCpuUtilizationPerCore'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final dynamicScalingConfiguration = this.dynamicScalingConfiguration;
    final endpointName = this.endpointName;
    final inferenceRecommendationsJobName =
        this.inferenceRecommendationsJobName;
    final metric = this.metric;
    final recommendationId = this.recommendationId;
    final scalingPolicyObjective = this.scalingPolicyObjective;
    final targetCpuUtilizationPerCore = this.targetCpuUtilizationPerCore;
    return {
      if (dynamicScalingConfiguration != null)
        'DynamicScalingConfiguration': dynamicScalingConfiguration,
      if (endpointName != null) 'EndpointName': endpointName,
      if (inferenceRecommendationsJobName != null)
        'InferenceRecommendationsJobName': inferenceRecommendationsJobName,
      if (metric != null) 'Metric': metric,
      if (recommendationId != null) 'RecommendationId': recommendationId,
      if (scalingPolicyObjective != null)
        'ScalingPolicyObjective': scalingPolicyObjective,
      if (targetCpuUtilizationPerCore != null)
        'TargetCpuUtilizationPerCore': targetCpuUtilizationPerCore,
    };
  }
}

class GetSearchSuggestionsResponse {
  /// A list of property names for a <code>Resource</code> that match a
  /// <code>SuggestionQuery</code>.
  final List<PropertyNameSuggestion>? propertyNameSuggestions;

  GetSearchSuggestionsResponse({
    this.propertyNameSuggestions,
  });

  factory GetSearchSuggestionsResponse.fromJson(Map<String, dynamic> json) {
    return GetSearchSuggestionsResponse(
      propertyNameSuggestions: (json['PropertyNameSuggestions'] as List?)
          ?.nonNulls
          .map(
              (e) => PropertyNameSuggestion.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final propertyNameSuggestions = this.propertyNameSuggestions;
    return {
      if (propertyNameSuggestions != null)
        'PropertyNameSuggestions': propertyNameSuggestions,
    };
  }
}

/// Specifies configuration details for a Git repository in your Amazon Web
/// Services account.
class GitConfig {
  /// The URL where the Git repository is located.
  final String repositoryUrl;

  /// The default branch for the Git repository.
  final String? branch;

  /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager
  /// secret that contains the credentials used to access the git repository. The
  /// secret must have a staging label of <code>AWSCURRENT</code> and must be in
  /// the following format:
  ///
  /// <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code>
  final String? secretArn;

  GitConfig({
    required this.repositoryUrl,
    this.branch,
    this.secretArn,
  });

  factory GitConfig.fromJson(Map<String, dynamic> json) {
    return GitConfig(
      repositoryUrl: json['RepositoryUrl'] as String,
      branch: json['Branch'] as String?,
      secretArn: json['SecretArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryUrl = this.repositoryUrl;
    final branch = this.branch;
    final secretArn = this.secretArn;
    return {
      'RepositoryUrl': repositoryUrl,
      if (branch != null) 'Branch': branch,
      if (secretArn != null) 'SecretArn': secretArn,
    };
  }
}

/// Specifies configuration details for a Git repository when the repository is
/// updated.
class GitConfigForUpdate {
  /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager
  /// secret that contains the credentials used to access the git repository. The
  /// secret must have a staging label of <code>AWSCURRENT</code> and must be in
  /// the following format:
  ///
  /// <code>{"username": <i>UserName</i>, "password": <i>Password</i>}</code>
  final String? secretArn;

  GitConfigForUpdate({
    this.secretArn,
  });

  Map<String, dynamic> toJson() {
    final secretArn = this.secretArn;
    return {
      if (secretArn != null) 'SecretArn': secretArn,
    };
  }
}

/// Stores the holiday featurization attributes applicable to each item of
/// time-series datasets during the training of a forecasting model. This allows
/// the model to identify patterns associated with specific holidays.
class HolidayConfigAttributes {
  /// The country code for the holiday calendar.
  ///
  /// For the list of public holiday calendars supported by AutoML job V2, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-timeseries-forecasting-holiday-calendars.html#holiday-country-codes">Country
  /// Codes</a>. Use the country code corresponding to the country of your choice.
  final String? countryCode;

  HolidayConfigAttributes({
    this.countryCode,
  });

  factory HolidayConfigAttributes.fromJson(Map<String, dynamic> json) {
    return HolidayConfigAttributes(
      countryCode: json['CountryCode'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final countryCode = this.countryCode;
    return {
      if (countryCode != null) 'CountryCode': countryCode,
    };
  }
}

/// Any dependencies related to hub content, such as scripts, model artifacts,
/// datasets, or notebooks.
class HubContentDependency {
  /// The hub content dependency copy path.
  final String? dependencyCopyPath;

  /// The hub content dependency origin path.
  final String? dependencyOriginPath;

  HubContentDependency({
    this.dependencyCopyPath,
    this.dependencyOriginPath,
  });

  factory HubContentDependency.fromJson(Map<String, dynamic> json) {
    return HubContentDependency(
      dependencyCopyPath: json['DependencyCopyPath'] as String?,
      dependencyOriginPath: json['DependencyOriginPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final dependencyCopyPath = this.dependencyCopyPath;
    final dependencyOriginPath = this.dependencyOriginPath;
    return {
      if (dependencyCopyPath != null) 'DependencyCopyPath': dependencyCopyPath,
      if (dependencyOriginPath != null)
        'DependencyOriginPath': dependencyOriginPath,
    };
  }
}

/// Information about hub content.
class HubContentInfo {
  /// The date and time that the hub content was created.
  final DateTime creationTime;

  /// The version of the hub content document schema.
  final String documentSchemaVersion;

  /// The Amazon Resource Name (ARN) of the hub content.
  final String hubContentArn;

  /// The name of the hub content.
  final String hubContentName;

  /// The status of the hub content.
  final HubContentStatus hubContentStatus;

  /// The type of hub content.
  final HubContentType hubContentType;

  /// The version of the hub content.
  final String hubContentVersion;

  /// A description of the hub content.
  final String? hubContentDescription;

  /// The display name of the hub content.
  final String? hubContentDisplayName;

  /// The searchable keywords for the hub content.
  final List<String>? hubContentSearchKeywords;

  HubContentInfo({
    required this.creationTime,
    required this.documentSchemaVersion,
    required this.hubContentArn,
    required this.hubContentName,
    required this.hubContentStatus,
    required this.hubContentType,
    required this.hubContentVersion,
    this.hubContentDescription,
    this.hubContentDisplayName,
    this.hubContentSearchKeywords,
  });

  factory HubContentInfo.fromJson(Map<String, dynamic> json) {
    return HubContentInfo(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      documentSchemaVersion: json['DocumentSchemaVersion'] as String,
      hubContentArn: json['HubContentArn'] as String,
      hubContentName: json['HubContentName'] as String,
      hubContentStatus:
          HubContentStatus.fromString((json['HubContentStatus'] as String)),
      hubContentType:
          HubContentType.fromString((json['HubContentType'] as String)),
      hubContentVersion: json['HubContentVersion'] as String,
      hubContentDescription: json['HubContentDescription'] as String?,
      hubContentDisplayName: json['HubContentDisplayName'] as String?,
      hubContentSearchKeywords: (json['HubContentSearchKeywords'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final documentSchemaVersion = this.documentSchemaVersion;
    final hubContentArn = this.hubContentArn;
    final hubContentName = this.hubContentName;
    final hubContentStatus = this.hubContentStatus;
    final hubContentType = this.hubContentType;
    final hubContentVersion = this.hubContentVersion;
    final hubContentDescription = this.hubContentDescription;
    final hubContentDisplayName = this.hubContentDisplayName;
    final hubContentSearchKeywords = this.hubContentSearchKeywords;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'DocumentSchemaVersion': documentSchemaVersion,
      'HubContentArn': hubContentArn,
      'HubContentName': hubContentName,
      'HubContentStatus': hubContentStatus.value,
      'HubContentType': hubContentType.value,
      'HubContentVersion': hubContentVersion,
      if (hubContentDescription != null)
        'HubContentDescription': hubContentDescription,
      if (hubContentDisplayName != null)
        'HubContentDisplayName': hubContentDisplayName,
      if (hubContentSearchKeywords != null)
        'HubContentSearchKeywords': hubContentSearchKeywords,
    };
  }
}

enum HubContentSortBy {
  hubContentName('HubContentName'),
  creationTime('CreationTime'),
  hubContentStatus('HubContentStatus'),
  ;

  final String value;

  const HubContentSortBy(this.value);

  static HubContentSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HubContentSortBy'));
}

enum HubContentStatus {
  available('Available'),
  importing('Importing'),
  deleting('Deleting'),
  importFailed('ImportFailed'),
  deleteFailed('DeleteFailed'),
  ;

  final String value;

  const HubContentStatus(this.value);

  static HubContentStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HubContentStatus'));
}

enum HubContentType {
  model('Model'),
  notebook('Notebook'),
  ;

  final String value;

  const HubContentType(this.value);

  static HubContentType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HubContentType'));
}

/// Information about a hub.
class HubInfo {
  /// The date and time that the hub was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the hub.
  final String hubArn;

  /// The name of the hub.
  final String hubName;

  /// The status of the hub.
  final HubStatus hubStatus;

  /// The date and time that the hub was last modified.
  final DateTime lastModifiedTime;

  /// A description of the hub.
  final String? hubDescription;

  /// The display name of the hub.
  final String? hubDisplayName;

  /// The searchable keywords for the hub.
  final List<String>? hubSearchKeywords;

  HubInfo({
    required this.creationTime,
    required this.hubArn,
    required this.hubName,
    required this.hubStatus,
    required this.lastModifiedTime,
    this.hubDescription,
    this.hubDisplayName,
    this.hubSearchKeywords,
  });

  factory HubInfo.fromJson(Map<String, dynamic> json) {
    return HubInfo(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      hubArn: json['HubArn'] as String,
      hubName: json['HubName'] as String,
      hubStatus: HubStatus.fromString((json['HubStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      hubDescription: json['HubDescription'] as String?,
      hubDisplayName: json['HubDisplayName'] as String?,
      hubSearchKeywords: (json['HubSearchKeywords'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final hubArn = this.hubArn;
    final hubName = this.hubName;
    final hubStatus = this.hubStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final hubDescription = this.hubDescription;
    final hubDisplayName = this.hubDisplayName;
    final hubSearchKeywords = this.hubSearchKeywords;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HubArn': hubArn,
      'HubName': hubName,
      'HubStatus': hubStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (hubDescription != null) 'HubDescription': hubDescription,
      if (hubDisplayName != null) 'HubDisplayName': hubDisplayName,
      if (hubSearchKeywords != null) 'HubSearchKeywords': hubSearchKeywords,
    };
  }
}

/// The Amazon S3 storage configuration of a hub.
class HubS3StorageConfig {
  /// The Amazon S3 bucket prefix for hosting hub content.
  final String? s3OutputPath;

  HubS3StorageConfig({
    this.s3OutputPath,
  });

  factory HubS3StorageConfig.fromJson(Map<String, dynamic> json) {
    return HubS3StorageConfig(
      s3OutputPath: json['S3OutputPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    return {
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

enum HubSortBy {
  hubName('HubName'),
  creationTime('CreationTime'),
  hubStatus('HubStatus'),
  accountIdOwner('AccountIdOwner'),
  ;

  final String value;

  const HubSortBy(this.value);

  static HubSortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum HubSortBy'));
}

enum HubStatus {
  inService('InService'),
  creating('Creating'),
  updating('Updating'),
  deleting('Deleting'),
  createFailed('CreateFailed'),
  updateFailed('UpdateFailed'),
  deleteFailed('DeleteFailed'),
  ;

  final String value;

  const HubStatus(this.value);

  static HubStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum HubStatus'));
}

/// Defines under what conditions SageMaker creates a human loop. Used within <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFlowDefinition.html">CreateFlowDefinition</a>.
/// See <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HumanLoopActivationConditionsConfig.html">HumanLoopActivationConditionsConfig</a>
/// for the required format of activation conditions.
class HumanLoopActivationConditionsConfig {
  /// JSON expressing use-case specific conditions declaratively. If any condition
  /// is matched, atomic tasks are created against the configured work team. The
  /// set of conditions is different for Rekognition and Textract. For more
  /// information about how to structure the JSON, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html">JSON
  /// Schema for Human Loop Activation Conditions in Amazon Augmented AI</a> in
  /// the <i>Amazon SageMaker Developer Guide</i>.
  final Object humanLoopActivationConditions;

  HumanLoopActivationConditionsConfig({
    required this.humanLoopActivationConditions,
  });

  factory HumanLoopActivationConditionsConfig.fromJson(
      Map<String, dynamic> json) {
    return HumanLoopActivationConditionsConfig(
      humanLoopActivationConditions:
          jsonDecode(json['HumanLoopActivationConditions'] as String) as Object,
    );
  }

  Map<String, dynamic> toJson() {
    final humanLoopActivationConditions = this.humanLoopActivationConditions;
    return {
      'HumanLoopActivationConditions':
          jsonEncode(humanLoopActivationConditions),
    };
  }
}

/// Provides information about how and under what conditions SageMaker creates a
/// human loop. If <code>HumanLoopActivationConfig</code> is not given, then all
/// requests go to humans.
class HumanLoopActivationConfig {
  /// Container structure for defining under what conditions SageMaker creates a
  /// human loop.
  final HumanLoopActivationConditionsConfig humanLoopActivationConditionsConfig;

  HumanLoopActivationConfig({
    required this.humanLoopActivationConditionsConfig,
  });

  factory HumanLoopActivationConfig.fromJson(Map<String, dynamic> json) {
    return HumanLoopActivationConfig(
      humanLoopActivationConditionsConfig:
          HumanLoopActivationConditionsConfig.fromJson(
              json['HumanLoopActivationConditionsConfig']
                  as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final humanLoopActivationConditionsConfig =
        this.humanLoopActivationConditionsConfig;
    return {
      'HumanLoopActivationConditionsConfig':
          humanLoopActivationConditionsConfig,
    };
  }
}

/// Describes the work to be performed by human workers.
class HumanLoopConfig {
  /// The Amazon Resource Name (ARN) of the human task user interface.
  ///
  /// You can use standard HTML and Crowd HTML Elements to create a custom worker
  /// task template. You use this template to create a human task UI.
  ///
  /// To learn how to create a custom HTML template, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html">Create
  /// Custom Worker Task Template</a>.
  ///
  /// To learn how to create a human task UI, which is a worker task template that
  /// can be used in a flow definition, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-worker-template-console.html">Create
  /// and Delete a Worker Task Templates</a>.
  final String humanTaskUiArn;

  /// The number of distinct workers who will perform the same task on each
  /// object. For example, if <code>TaskCount</code> is set to <code>3</code> for
  /// an image classification labeling job, three workers will classify each input
  /// image. Increasing <code>TaskCount</code> can improve label accuracy.
  final int taskCount;

  /// A description for the human worker task.
  final String taskDescription;

  /// A title for the human worker task.
  final String taskTitle;

  /// Amazon Resource Name (ARN) of a team of workers. To learn more about the
  /// types of workforces and work teams you can create and use with Amazon A2I,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management.html">Create
  /// and Manage Workforces</a>.
  final String workteamArn;
  final PublicWorkforceTaskPrice? publicWorkforceTaskPrice;

  /// The length of time that a task remains available for review by human
  /// workers.
  final int? taskAvailabilityLifetimeInSeconds;

  /// Keywords used to describe the task so that workers can discover the task.
  final List<String>? taskKeywords;

  /// The amount of time that a worker has to complete a task. The default value
  /// is 3,600 seconds (1 hour).
  final int? taskTimeLimitInSeconds;

  HumanLoopConfig({
    required this.humanTaskUiArn,
    required this.taskCount,
    required this.taskDescription,
    required this.taskTitle,
    required this.workteamArn,
    this.publicWorkforceTaskPrice,
    this.taskAvailabilityLifetimeInSeconds,
    this.taskKeywords,
    this.taskTimeLimitInSeconds,
  });

  factory HumanLoopConfig.fromJson(Map<String, dynamic> json) {
    return HumanLoopConfig(
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
      taskCount: json['TaskCount'] as int,
      taskDescription: json['TaskDescription'] as String,
      taskTitle: json['TaskTitle'] as String,
      workteamArn: json['WorkteamArn'] as String,
      publicWorkforceTaskPrice: json['PublicWorkforceTaskPrice'] != null
          ? PublicWorkforceTaskPrice.fromJson(
              json['PublicWorkforceTaskPrice'] as Map<String, dynamic>)
          : null,
      taskAvailabilityLifetimeInSeconds:
          json['TaskAvailabilityLifetimeInSeconds'] as int?,
      taskKeywords: (json['TaskKeywords'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      taskTimeLimitInSeconds: json['TaskTimeLimitInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiArn = this.humanTaskUiArn;
    final taskCount = this.taskCount;
    final taskDescription = this.taskDescription;
    final taskTitle = this.taskTitle;
    final workteamArn = this.workteamArn;
    final publicWorkforceTaskPrice = this.publicWorkforceTaskPrice;
    final taskAvailabilityLifetimeInSeconds =
        this.taskAvailabilityLifetimeInSeconds;
    final taskKeywords = this.taskKeywords;
    final taskTimeLimitInSeconds = this.taskTimeLimitInSeconds;
    return {
      'HumanTaskUiArn': humanTaskUiArn,
      'TaskCount': taskCount,
      'TaskDescription': taskDescription,
      'TaskTitle': taskTitle,
      'WorkteamArn': workteamArn,
      if (publicWorkforceTaskPrice != null)
        'PublicWorkforceTaskPrice': publicWorkforceTaskPrice,
      if (taskAvailabilityLifetimeInSeconds != null)
        'TaskAvailabilityLifetimeInSeconds': taskAvailabilityLifetimeInSeconds,
      if (taskKeywords != null) 'TaskKeywords': taskKeywords,
      if (taskTimeLimitInSeconds != null)
        'TaskTimeLimitInSeconds': taskTimeLimitInSeconds,
    };
  }
}

/// Container for configuring the source of human task requests.
class HumanLoopRequestSource {
  /// Specifies whether Amazon Rekognition or Amazon Textract are used as the
  /// integration source. The default field settings and JSON parsing rules are
  /// different based on the integration source. Valid values:
  final AwsManagedHumanLoopRequestSource awsManagedHumanLoopRequestSource;

  HumanLoopRequestSource({
    required this.awsManagedHumanLoopRequestSource,
  });

  factory HumanLoopRequestSource.fromJson(Map<String, dynamic> json) {
    return HumanLoopRequestSource(
      awsManagedHumanLoopRequestSource:
          AwsManagedHumanLoopRequestSource.fromString(
              (json['AwsManagedHumanLoopRequestSource'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final awsManagedHumanLoopRequestSource =
        this.awsManagedHumanLoopRequestSource;
    return {
      'AwsManagedHumanLoopRequestSource':
          awsManagedHumanLoopRequestSource.value,
    };
  }
}

/// Information required for human workers to complete a labeling task.
class HumanTaskConfig {
  /// Configures how labels are consolidated across human workers.
  final AnnotationConsolidationConfig annotationConsolidationConfig;

  /// The number of human workers that will label an object.
  final int numberOfHumanWorkersPerDataObject;

  /// The Amazon Resource Name (ARN) of a Lambda function that is run before a
  /// data object is sent to a human worker. Use this function to provide input to
  /// a custom labeling job.
  ///
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task types</a>, use one of the following Amazon SageMaker Ground Truth
  /// Lambda function ARNs for <code>PreHumanTaskLambdaArn</code>. For custom
  /// labeling workflows, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-prelambda">Pre-annotation
  /// Lambda</a>.
  ///
  /// <b>Bounding box</b> - Finds the most similar boxes from different workers
  /// based on the Jaccard index of the boxes.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Image classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of an image based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label image classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of an image based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel annotations from workers as
  /// "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Text classification</b> - Uses a variant of the Expectation Maximization
  /// approach to estimate the true class of text based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Multi-label text classification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true classes of text based on
  /// annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel</code>
  /// </li>
  /// </ul>
  /// <b>Named entity recognition</b> - Groups similar selections and calculates
  /// aggregate boundaries, resolving to most-assigned label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition</code>
  /// </li>
  /// </ul>
  /// <b>Video Classification</b> - Use this task type when you need workers to
  /// classify videos using predefined labels that you specify. Workers are shown
  /// videos and are asked to choose one label for each video.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection</b> - Use this task type to have workers
  /// identify and locate objects in a sequence of video frames (images extracted
  /// from a video) using bounding boxes. For example, you can use this task to
  /// ask workers to identify and localize various objects in a series of video
  /// frames, such as cars, bikes, and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking</b> - Use this task type to have workers
  /// track the movement of objects in a sequence of video frames (images
  /// extracted from a video) using bounding boxes. For example, you can use this
  /// task to ask workers to track the movement of objects, such as cars, bikes,
  /// and pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Modalities</b>
  ///
  /// Use the following pre-annotation lambdas for 3D point cloud labeling
  /// modality tasks. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-task-types.html">3D
  /// Point Cloud Task types </a> to learn more.
  ///
  /// <b>3D Point Cloud Object Detection</b> - Use this task type when you want
  /// workers to classify objects in a 3D point cloud by drawing 3D cuboids around
  /// objects. For example, you can use this task type to ask workers to identify
  /// different types of objects in a point cloud, such as cars, bikes, and
  /// pedestrians.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Object Tracking</b> - Use this task type when you want
  /// workers to draw 3D cuboids around objects that appear in a sequence of 3D
  /// point cloud frames. For example, you can use this task type to ask workers
  /// to track the movement of vehicles across multiple point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D Point Cloud Semantic Segmentation</b> - Use this task type when you
  /// want workers to create a point-level semantic segmentation masks by painting
  /// objects in a 3D point cloud using different colors where each color is
  /// assigned to one of the classes you specify.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
  ///
  /// Use label verification and adjustment jobs to review and adjust labels. To
  /// learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify
  /// and Adjust Labels </a>.
  ///
  /// <b>Bounding box verification</b> - Uses a variant of the Expectation
  /// Maximization approach to estimate the true class of verification judgement
  /// for bounding box labels based on annotations from individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Bounding box adjustment</b> - Finds the most similar boxes from different
  /// workers based on the Jaccard index of the adjusted annotations.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation verification</b> - Uses a variant of the
  /// Expectation Maximization approach to estimate the true class of verification
  /// judgment for semantic segmentation labels based on annotations from
  /// individual workers.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Semantic segmentation adjustment</b> - Treats each pixel in an image as a
  /// multi-class classification and treats pixel adjusted annotations from
  /// workers as "votes" for the correct label.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Detection Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to classify and localize objects in a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame Object Tracking Adjustment</b> - Use this task type when you
  /// want workers to adjust bounding boxes that workers have added to video
  /// frames to track object movement across a sequence of video frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D point cloud object detection adjustment</b> - Adjust 3D cuboids in a
  /// point cloud frame.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// <b>3D point cloud object tracking adjustment</b> - Adjust 3D cuboids across
  /// a sequence of point cloud frames.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// <b>3D point cloud semantic segmentation adjustment</b> - Adjust semantic
  /// segmentation masks in a 3D point cloud.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// <li>
  /// <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  final String preHumanTaskLambdaArn;

  /// A description of the task for your human workers.
  final String taskDescription;

  /// The amount of time that a worker has to complete a task.
  ///
  /// If you create a custom labeling job, the maximum value for this parameter is
  /// 8 hours (28,800 seconds).
  ///
  /// If you create a labeling job using a <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in
  /// task type</a> the maximum for this parameter depends on the task type you
  /// use:
  ///
  /// <ul>
  /// <li>
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-images.html">image</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-text.html">text</a>
  /// labeling jobs, the maximum is 8 hours (28,800 seconds).
  /// </li>
  /// <li>
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud.html">3D
  /// point cloud</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-video.html">video
  /// frame</a> labeling jobs, the maximum is 30 days (2952,000 seconds) for
  /// non-AL mode. For most users, the maximum is also 30 days.
  /// </li>
  /// </ul>
  final int taskTimeLimitInSeconds;

  /// A title for the task for your human workers.
  final String taskTitle;

  /// Information about the user interface that workers use to complete the
  /// labeling task.
  final UiConfig uiConfig;

  /// The Amazon Resource Name (ARN) of the work team assigned to complete the
  /// tasks.
  final String workteamArn;

  /// Defines the maximum number of data objects that can be labeled by human
  /// workers at the same time. Also referred to as batch size. Each object may
  /// have more than one worker at one time. The default value is 1000 objects. To
  /// increase the maximum value to 5000 objects, contact Amazon Web Services
  /// Support.
  final int? maxConcurrentTaskCount;

  /// The price that you pay for each task performed by an Amazon Mechanical Turk
  /// worker.
  final PublicWorkforceTaskPrice? publicWorkforceTaskPrice;

  /// The length of time that a task remains available for labeling by human
  /// workers. The default and maximum values for this parameter depend on the
  /// type of workforce you use.
  ///
  /// <ul>
  /// <li>
  /// If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours
  /// (43,200 seconds). The default is 6 hours (21,600 seconds).
  /// </li>
  /// <li>
  /// If you choose a private or vendor workforce, the default value is 30 days
  /// (2592,000 seconds) for non-AL mode. For most users, the maximum is also 30
  /// days.
  /// </li>
  /// </ul>
  final int? taskAvailabilityLifetimeInSeconds;

  /// Keywords used to describe the task so that workers on Amazon Mechanical Turk
  /// can discover the task.
  final List<String>? taskKeywords;

  HumanTaskConfig({
    required this.annotationConsolidationConfig,
    required this.numberOfHumanWorkersPerDataObject,
    required this.preHumanTaskLambdaArn,
    required this.taskDescription,
    required this.taskTimeLimitInSeconds,
    required this.taskTitle,
    required this.uiConfig,
    required this.workteamArn,
    this.maxConcurrentTaskCount,
    this.publicWorkforceTaskPrice,
    this.taskAvailabilityLifetimeInSeconds,
    this.taskKeywords,
  });

  factory HumanTaskConfig.fromJson(Map<String, dynamic> json) {
    return HumanTaskConfig(
      annotationConsolidationConfig: AnnotationConsolidationConfig.fromJson(
          json['AnnotationConsolidationConfig'] as Map<String, dynamic>),
      numberOfHumanWorkersPerDataObject:
          json['NumberOfHumanWorkersPerDataObject'] as int,
      preHumanTaskLambdaArn: json['PreHumanTaskLambdaArn'] as String,
      taskDescription: json['TaskDescription'] as String,
      taskTimeLimitInSeconds: json['TaskTimeLimitInSeconds'] as int,
      taskTitle: json['TaskTitle'] as String,
      uiConfig: UiConfig.fromJson(json['UiConfig'] as Map<String, dynamic>),
      workteamArn: json['WorkteamArn'] as String,
      maxConcurrentTaskCount: json['MaxConcurrentTaskCount'] as int?,
      publicWorkforceTaskPrice: json['PublicWorkforceTaskPrice'] != null
          ? PublicWorkforceTaskPrice.fromJson(
              json['PublicWorkforceTaskPrice'] as Map<String, dynamic>)
          : null,
      taskAvailabilityLifetimeInSeconds:
          json['TaskAvailabilityLifetimeInSeconds'] as int?,
      taskKeywords: (json['TaskKeywords'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final annotationConsolidationConfig = this.annotationConsolidationConfig;
    final numberOfHumanWorkersPerDataObject =
        this.numberOfHumanWorkersPerDataObject;
    final preHumanTaskLambdaArn = this.preHumanTaskLambdaArn;
    final taskDescription = this.taskDescription;
    final taskTimeLimitInSeconds = this.taskTimeLimitInSeconds;
    final taskTitle = this.taskTitle;
    final uiConfig = this.uiConfig;
    final workteamArn = this.workteamArn;
    final maxConcurrentTaskCount = this.maxConcurrentTaskCount;
    final publicWorkforceTaskPrice = this.publicWorkforceTaskPrice;
    final taskAvailabilityLifetimeInSeconds =
        this.taskAvailabilityLifetimeInSeconds;
    final taskKeywords = this.taskKeywords;
    return {
      'AnnotationConsolidationConfig': annotationConsolidationConfig,
      'NumberOfHumanWorkersPerDataObject': numberOfHumanWorkersPerDataObject,
      'PreHumanTaskLambdaArn': preHumanTaskLambdaArn,
      'TaskDescription': taskDescription,
      'TaskTimeLimitInSeconds': taskTimeLimitInSeconds,
      'TaskTitle': taskTitle,
      'UiConfig': uiConfig,
      'WorkteamArn': workteamArn,
      if (maxConcurrentTaskCount != null)
        'MaxConcurrentTaskCount': maxConcurrentTaskCount,
      if (publicWorkforceTaskPrice != null)
        'PublicWorkforceTaskPrice': publicWorkforceTaskPrice,
      if (taskAvailabilityLifetimeInSeconds != null)
        'TaskAvailabilityLifetimeInSeconds': taskAvailabilityLifetimeInSeconds,
      if (taskKeywords != null) 'TaskKeywords': taskKeywords,
    };
  }
}

enum HumanTaskUiStatus {
  active('Active'),
  deleting('Deleting'),
  ;

  final String value;

  const HumanTaskUiStatus(this.value);

  static HumanTaskUiStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum HumanTaskUiStatus'));
}

/// Container for human task user interface information.
class HumanTaskUiSummary {
  /// A timestamp when SageMaker created the human task user interface.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the human task user interface.
  final String humanTaskUiArn;

  /// The name of the human task user interface.
  final String humanTaskUiName;

  HumanTaskUiSummary({
    required this.creationTime,
    required this.humanTaskUiArn,
    required this.humanTaskUiName,
  });

  factory HumanTaskUiSummary.fromJson(Map<String, dynamic> json) {
    return HumanTaskUiSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      humanTaskUiArn: json['HumanTaskUiArn'] as String,
      humanTaskUiName: json['HumanTaskUiName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final humanTaskUiArn = this.humanTaskUiArn;
    final humanTaskUiName = this.humanTaskUiName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HumanTaskUiArn': humanTaskUiArn,
      'HumanTaskUiName': humanTaskUiName,
    };
  }
}

/// Specifies which training algorithm to use for training jobs that a
/// hyperparameter tuning job launches and the metrics to monitor.
class HyperParameterAlgorithmSpecification {
  final TrainingInputMode trainingInputMode;

  /// The name of the resource algorithm to use for the hyperparameter tuning job.
  /// If you specify a value for this parameter, do not specify a value for
  /// <code>TrainingImage</code>.
  final String? algorithmName;

  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html">MetricDefinition</a>
  /// objects that specify the metrics that the algorithm emits.
  final List<MetricDefinition>? metricDefinitions;

  /// The registry path of the Docker image that contains the training algorithm.
  /// For information about Docker registry paths for built-in algorithms, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html">Algorithms
  /// Provided by Amazon SageMaker: Common Parameters</a>. SageMaker supports both
  /// <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  final String? trainingImage;

  HyperParameterAlgorithmSpecification({
    required this.trainingInputMode,
    this.algorithmName,
    this.metricDefinitions,
    this.trainingImage,
  });

  factory HyperParameterAlgorithmSpecification.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterAlgorithmSpecification(
      trainingInputMode:
          TrainingInputMode.fromString((json['TrainingInputMode'] as String)),
      algorithmName: json['AlgorithmName'] as String?,
      metricDefinitions: (json['MetricDefinitions'] as List?)
          ?.nonNulls
          .map((e) => MetricDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingImage: json['TrainingImage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingInputMode = this.trainingInputMode;
    final algorithmName = this.algorithmName;
    final metricDefinitions = this.metricDefinitions;
    final trainingImage = this.trainingImage;
    return {
      'TrainingInputMode': trainingInputMode.value,
      if (algorithmName != null) 'AlgorithmName': algorithmName,
      if (metricDefinitions != null) 'MetricDefinitions': metricDefinitions,
      if (trainingImage != null) 'TrainingImage': trainingImage,
    };
  }
}

enum HyperParameterScalingType {
  auto('Auto'),
  linear('Linear'),
  logarithmic('Logarithmic'),
  reverseLogarithmic('ReverseLogarithmic'),
  ;

  final String value;

  const HyperParameterScalingType(this.value);

  static HyperParameterScalingType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterScalingType'));
}

/// Defines a hyperparameter to be used by an algorithm.
class HyperParameterSpecification {
  /// The name of this hyperparameter. The name must be unique.
  final String name;

  /// The type of this hyperparameter. The valid types are <code>Integer</code>,
  /// <code>Continuous</code>, <code>Categorical</code>, and
  /// <code>FreeText</code>.
  final ParameterType type;

  /// The default value for this hyperparameter. If a default value is specified,
  /// a hyperparameter cannot be required.
  final String? defaultValue;

  /// A brief description of the hyperparameter.
  final String? description;

  /// Indicates whether this hyperparameter is required.
  final bool? isRequired;

  /// Indicates whether this hyperparameter is tunable in a hyperparameter tuning
  /// job.
  final bool? isTunable;

  /// The allowed range for this hyperparameter.
  final ParameterRange? range;

  HyperParameterSpecification({
    required this.name,
    required this.type,
    this.defaultValue,
    this.description,
    this.isRequired,
    this.isTunable,
    this.range,
  });

  factory HyperParameterSpecification.fromJson(Map<String, dynamic> json) {
    return HyperParameterSpecification(
      name: json['Name'] as String,
      type: ParameterType.fromString((json['Type'] as String)),
      defaultValue: json['DefaultValue'] as String?,
      description: json['Description'] as String?,
      isRequired: json['IsRequired'] as bool?,
      isTunable: json['IsTunable'] as bool?,
      range: json['Range'] != null
          ? ParameterRange.fromJson(json['Range'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final type = this.type;
    final defaultValue = this.defaultValue;
    final description = this.description;
    final isRequired = this.isRequired;
    final isTunable = this.isTunable;
    final range = this.range;
    return {
      'Name': name,
      'Type': type.value,
      if (defaultValue != null) 'DefaultValue': defaultValue,
      if (description != null) 'Description': description,
      if (isRequired != null) 'IsRequired': isRequired,
      if (isTunable != null) 'IsTunable': isTunable,
      if (range != null) 'Range': range,
    };
  }
}

/// Defines the training jobs launched by a hyperparameter tuning job.
class HyperParameterTrainingJobDefinition {
  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterAlgorithmSpecification.html">HyperParameterAlgorithmSpecification</a>
  /// object that specifies the resource algorithm to use for the training jobs
  /// that the tuning job launches.
  final HyperParameterAlgorithmSpecification algorithmSpecification;

  /// Specifies the path to the Amazon S3 bucket where you store model artifacts
  /// from the training jobs that the tuning job launches.
  final OutputDataConfig outputDataConfig;

  /// The Amazon Resource Name (ARN) of the IAM role associated with the training
  /// jobs that the tuning job launches.
  final String roleArn;

  /// Specifies a limit to how long a model hyperparameter training job can run.
  /// It also specifies how long a managed spot training job has to complete. When
  /// the job reaches the time limit, SageMaker ends the training job. Use this
  /// API to cap model training costs.
  final StoppingCondition stoppingCondition;
  final CheckpointConfig? checkpointConfig;

  /// The job definition name.
  final String? definitionName;

  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security for
  /// distributed training, but training might take longer. How long it takes
  /// depends on the amount of communication between compute instances, especially
  /// if you use a deep learning algorithm in distributed training.
  final bool? enableInterContainerTrafficEncryption;

  /// A Boolean indicating whether managed spot training is enabled
  /// (<code>True</code>) or not (<code>False</code>).
  final bool? enableManagedSpotTraining;

  /// Isolates the training container. No inbound or outbound network calls can be
  /// made, except for calls between peers within a training cluster for
  /// distributed training. If network isolation is used for training jobs that
  /// are configured to use a VPC, SageMaker downloads and uploads customer data
  /// and model artifacts through the specified VPC, but the training container
  /// does not have network access.
  final bool? enableNetworkIsolation;

  /// An environment variable that you can pass into the SageMaker <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a>
  /// API. You can use an existing <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html#sagemaker-CreateTrainingJob-request-Environment">environment
  /// variable from the training container</a> or use your own. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define
  /// metrics and variables</a> for more information.
  /// <note>
  /// The maximum number of items specified for <code>Map Entries</code> refers to
  /// the maximum number of environment variables for each
  /// <code>TrainingJobDefinition</code> and also the maximum for the
  /// hyperparameter tuning job itself. That is, the sum of the number of
  /// environment variables for all the training job definitions can't exceed the
  /// maximum number specified.
  /// </note>
  final Map<String, String>? environment;
  final ParameterRanges? hyperParameterRanges;

  /// The configuration for the hyperparameter tuning resources, including the
  /// compute instances and storage volumes, used for training jobs launched by
  /// the tuning job. By default, storage volumes hold model artifacts and
  /// incremental states. Choose <code>File</code> for
  /// <code>TrainingInputMode</code> in the <code>AlgorithmSpecification</code>
  /// parameter to additionally store training data in the storage volume
  /// (optional).
  final HyperParameterTuningResourceConfig? hyperParameterTuningResourceConfig;

  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html">Channel</a>
  /// objects that specify the input for the training jobs that the tuning job
  /// launches.
  final List<Channel>? inputDataConfig;

  /// The resources, including the compute instances and storage volumes, to use
  /// for the training jobs that the tuning job launches.
  ///
  /// Storage volumes store model artifacts and incremental states. Training
  /// algorithms might also use storage volumes for scratch space. If you want
  /// SageMaker to use the storage volume to store the training data, choose
  /// <code>File</code> as the <code>TrainingInputMode</code> in the algorithm
  /// specification. For distributed training algorithms, specify an instance
  /// count greater than 1.
  /// <note>
  /// If you want to use hyperparameter optimization with instance type
  /// flexibility, use <code>HyperParameterTuningResourceConfig</code> instead.
  /// </note>
  final ResourceConfig? resourceConfig;

  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  final RetryStrategy? retryStrategy;

  /// Specifies the values of hyperparameters that do not change for the tuning
  /// job.
  final Map<String, String>? staticHyperParameters;
  final HyperParameterTuningJobObjective? tuningObjective;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that you want the training jobs that this
  /// hyperparameter tuning job launches to connect to. Control access to and from
  /// your training container by configuring the VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  final VpcConfig? vpcConfig;

  HyperParameterTrainingJobDefinition({
    required this.algorithmSpecification,
    required this.outputDataConfig,
    required this.roleArn,
    required this.stoppingCondition,
    this.checkpointConfig,
    this.definitionName,
    this.enableInterContainerTrafficEncryption,
    this.enableManagedSpotTraining,
    this.enableNetworkIsolation,
    this.environment,
    this.hyperParameterRanges,
    this.hyperParameterTuningResourceConfig,
    this.inputDataConfig,
    this.resourceConfig,
    this.retryStrategy,
    this.staticHyperParameters,
    this.tuningObjective,
    this.vpcConfig,
  });

  factory HyperParameterTrainingJobDefinition.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTrainingJobDefinition(
      algorithmSpecification: HyperParameterAlgorithmSpecification.fromJson(
          json['AlgorithmSpecification'] as Map<String, dynamic>),
      outputDataConfig: OutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      checkpointConfig: json['CheckpointConfig'] != null
          ? CheckpointConfig.fromJson(
              json['CheckpointConfig'] as Map<String, dynamic>)
          : null,
      definitionName: json['DefinitionName'] as String?,
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableManagedSpotTraining: json['EnableManagedSpotTraining'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      hyperParameterRanges: json['HyperParameterRanges'] != null
          ? ParameterRanges.fromJson(
              json['HyperParameterRanges'] as Map<String, dynamic>)
          : null,
      hyperParameterTuningResourceConfig:
          json['HyperParameterTuningResourceConfig'] != null
              ? HyperParameterTuningResourceConfig.fromJson(
                  json['HyperParameterTuningResourceConfig']
                      as Map<String, dynamic>)
              : null,
      inputDataConfig: (json['InputDataConfig'] as List?)
          ?.nonNulls
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      resourceConfig: json['ResourceConfig'] != null
          ? ResourceConfig.fromJson(
              json['ResourceConfig'] as Map<String, dynamic>)
          : null,
      retryStrategy: json['RetryStrategy'] != null
          ? RetryStrategy.fromJson(
              json['RetryStrategy'] as Map<String, dynamic>)
          : null,
      staticHyperParameters:
          (json['StaticHyperParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
      tuningObjective: json['TuningObjective'] != null
          ? HyperParameterTuningJobObjective.fromJson(
              json['TuningObjective'] as Map<String, dynamic>)
          : null,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSpecification = this.algorithmSpecification;
    final outputDataConfig = this.outputDataConfig;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final checkpointConfig = this.checkpointConfig;
    final definitionName = this.definitionName;
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableManagedSpotTraining = this.enableManagedSpotTraining;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final environment = this.environment;
    final hyperParameterRanges = this.hyperParameterRanges;
    final hyperParameterTuningResourceConfig =
        this.hyperParameterTuningResourceConfig;
    final inputDataConfig = this.inputDataConfig;
    final resourceConfig = this.resourceConfig;
    final retryStrategy = this.retryStrategy;
    final staticHyperParameters = this.staticHyperParameters;
    final tuningObjective = this.tuningObjective;
    final vpcConfig = this.vpcConfig;
    return {
      'AlgorithmSpecification': algorithmSpecification,
      'OutputDataConfig': outputDataConfig,
      'RoleArn': roleArn,
      'StoppingCondition': stoppingCondition,
      if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
      if (definitionName != null) 'DefinitionName': definitionName,
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableManagedSpotTraining != null)
        'EnableManagedSpotTraining': enableManagedSpotTraining,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (environment != null) 'Environment': environment,
      if (hyperParameterRanges != null)
        'HyperParameterRanges': hyperParameterRanges,
      if (hyperParameterTuningResourceConfig != null)
        'HyperParameterTuningResourceConfig':
            hyperParameterTuningResourceConfig,
      if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
      if (resourceConfig != null) 'ResourceConfig': resourceConfig,
      if (retryStrategy != null) 'RetryStrategy': retryStrategy,
      if (staticHyperParameters != null)
        'StaticHyperParameters': staticHyperParameters,
      if (tuningObjective != null) 'TuningObjective': tuningObjective,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// The container for the summary information about a training job.
class HyperParameterTrainingJobSummary {
  /// The date and time that the training job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  /// The name of the training job.
  final String trainingJobName;

  /// The status of the training job.
  final TrainingJobStatus trainingJobStatus;

  /// A list of the hyperparameters for which you specified ranges to search.
  final Map<String, String> tunedHyperParameters;

  /// The reason that the training job failed.
  final String? failureReason;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_FinalHyperParameterTuningJobObjectiveMetric.html">FinalHyperParameterTuningJobObjectiveMetric</a>
  /// object that specifies the value of the objective metric of the tuning job
  /// that launched this training job.
  final FinalHyperParameterTuningJobObjectiveMetric?
      finalHyperParameterTuningJobObjectiveMetric;

  /// The status of the objective metric for the training job:
  ///
  /// <ul>
  /// <li>
  /// Succeeded: The final objective metric for the training job was evaluated by
  /// the hyperparameter tuning job and used in the hyperparameter tuning process.
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// Pending: The training job is in progress and evaluation of its final
  /// objective metric is pending.
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// Failed: The final objective metric for the training job was not evaluated,
  /// and was not used in the hyperparameter tuning process. This typically occurs
  /// when the training job failed or did not emit an objective metric.
  /// </li>
  /// </ul>
  final ObjectiveStatus? objectiveStatus;

  /// Specifies the time when the training job ends on training instances. You are
  /// billed for the time interval between the value of
  /// <code>TrainingStartTime</code> and this time. For successful jobs and
  /// stopped jobs, this is the time after model artifacts are uploaded. For
  /// failed jobs, this is the time when SageMaker detects a job failure.
  final DateTime? trainingEndTime;

  /// The training job definition name.
  final String? trainingJobDefinitionName;

  /// The date and time that the training job started.
  final DateTime? trainingStartTime;

  /// The HyperParameter tuning job that launched the training job.
  final String? tuningJobName;

  HyperParameterTrainingJobSummary({
    required this.creationTime,
    required this.trainingJobArn,
    required this.trainingJobName,
    required this.trainingJobStatus,
    required this.tunedHyperParameters,
    this.failureReason,
    this.finalHyperParameterTuningJobObjectiveMetric,
    this.objectiveStatus,
    this.trainingEndTime,
    this.trainingJobDefinitionName,
    this.trainingStartTime,
    this.tuningJobName,
  });

  factory HyperParameterTrainingJobSummary.fromJson(Map<String, dynamic> json) {
    return HyperParameterTrainingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      trainingJobArn: json['TrainingJobArn'] as String,
      trainingJobName: json['TrainingJobName'] as String,
      trainingJobStatus:
          TrainingJobStatus.fromString((json['TrainingJobStatus'] as String)),
      tunedHyperParameters:
          (json['TunedHyperParameters'] as Map<String, dynamic>)
              .map((k, e) => MapEntry(k, e as String)),
      failureReason: json['FailureReason'] as String?,
      finalHyperParameterTuningJobObjectiveMetric:
          json['FinalHyperParameterTuningJobObjectiveMetric'] != null
              ? FinalHyperParameterTuningJobObjectiveMetric.fromJson(
                  json['FinalHyperParameterTuningJobObjectiveMetric']
                      as Map<String, dynamic>)
              : null,
      objectiveStatus:
          (json['ObjectiveStatus'] as String?)?.let(ObjectiveStatus.fromString),
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      trainingJobDefinitionName: json['TrainingJobDefinitionName'] as String?,
      trainingStartTime: timeStampFromJson(json['TrainingStartTime']),
      tuningJobName: json['TuningJobName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final tunedHyperParameters = this.tunedHyperParameters;
    final failureReason = this.failureReason;
    final finalHyperParameterTuningJobObjectiveMetric =
        this.finalHyperParameterTuningJobObjectiveMetric;
    final objectiveStatus = this.objectiveStatus;
    final trainingEndTime = this.trainingEndTime;
    final trainingJobDefinitionName = this.trainingJobDefinitionName;
    final trainingStartTime = this.trainingStartTime;
    final tuningJobName = this.tuningJobName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'TrainingJobArn': trainingJobArn,
      'TrainingJobName': trainingJobName,
      'TrainingJobStatus': trainingJobStatus.value,
      'TunedHyperParameters': tunedHyperParameters,
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalHyperParameterTuningJobObjectiveMetric != null)
        'FinalHyperParameterTuningJobObjectiveMetric':
            finalHyperParameterTuningJobObjectiveMetric,
      if (objectiveStatus != null) 'ObjectiveStatus': objectiveStatus.value,
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (trainingJobDefinitionName != null)
        'TrainingJobDefinitionName': trainingJobDefinitionName,
      if (trainingStartTime != null)
        'TrainingStartTime': unixTimestampToJson(trainingStartTime),
      if (tuningJobName != null) 'TuningJobName': tuningJobName,
    };
  }
}

enum HyperParameterTuningAllocationStrategy {
  prioritized('Prioritized'),
  ;

  final String value;

  const HyperParameterTuningAllocationStrategy(this.value);

  static HyperParameterTuningAllocationStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterTuningAllocationStrategy'));
}

/// The configuration for hyperparameter tuning resources for use in training
/// jobs launched by the tuning job. These resources include compute instances
/// and storage volumes. Specify one or more compute instance configurations and
/// allocation strategies to select resources (optional).
class HyperParameterTuningInstanceConfig {
  /// The number of instances of the type specified by <code>InstanceType</code>.
  /// Choose an instance count larger than 1 for distributed training algorithms.
  /// See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/data-parallel-use-api.html">Step
  /// 2: Launch a SageMaker Distributed Training Job Using the SageMaker Python
  /// SDK</a> for more information.
  final int instanceCount;

  /// The instance type used for processing of hyperparameter optimization jobs.
  /// Choose from general purpose (no GPUs) instance types: ml.m5.xlarge,
  /// ml.m5.2xlarge, and ml.m5.4xlarge or compute optimized (no GPUs) instance
  /// types: ml.c5.xlarge and ml.c5.2xlarge. For more information about instance
  /// types, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html">instance
  /// type descriptions</a>.
  final TrainingInstanceType instanceType;

  /// The volume size in GB of the data to be processed for hyperparameter
  /// optimization (optional).
  final int volumeSizeInGB;

  HyperParameterTuningInstanceConfig({
    required this.instanceCount,
    required this.instanceType,
    required this.volumeSizeInGB,
  });

  factory HyperParameterTuningInstanceConfig.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningInstanceConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType:
          TrainingInstanceType.fromString((json['InstanceType'] as String)),
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.value,
      'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

/// A structure that contains runtime information about both current and
/// completed hyperparameter tuning jobs.
class HyperParameterTuningJobCompletionDetails {
  /// The time in timestamp format that AMT detected model convergence, as defined
  /// by a lack of significant improvement over time based on criteria developed
  /// over a wide range of diverse benchmarking tests.
  final DateTime? convergenceDetectedTime;

  /// The number of training jobs launched by a tuning job that are not improving
  /// (1% or less) as measured by model performance evaluated against an objective
  /// function.
  final int? numberOfTrainingJobsObjectiveNotImproving;

  HyperParameterTuningJobCompletionDetails({
    this.convergenceDetectedTime,
    this.numberOfTrainingJobsObjectiveNotImproving,
  });

  factory HyperParameterTuningJobCompletionDetails.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningJobCompletionDetails(
      convergenceDetectedTime:
          timeStampFromJson(json['ConvergenceDetectedTime']),
      numberOfTrainingJobsObjectiveNotImproving:
          json['NumberOfTrainingJobsObjectiveNotImproving'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final convergenceDetectedTime = this.convergenceDetectedTime;
    final numberOfTrainingJobsObjectiveNotImproving =
        this.numberOfTrainingJobsObjectiveNotImproving;
    return {
      if (convergenceDetectedTime != null)
        'ConvergenceDetectedTime': unixTimestampToJson(convergenceDetectedTime),
      if (numberOfTrainingJobsObjectiveNotImproving != null)
        'NumberOfTrainingJobsObjectiveNotImproving':
            numberOfTrainingJobsObjectiveNotImproving,
    };
  }
}

/// Configures a hyperparameter tuning job.
class HyperParameterTuningJobConfig {
  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>
  /// object that specifies the maximum number of training and parallel training
  /// jobs that can be used for this hyperparameter tuning job.
  final ResourceLimits resourceLimits;

  /// Specifies how hyperparameter tuning chooses the combinations of
  /// hyperparameter values to use for the training job it launches. For
  /// information about search strategies, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
  /// Hyperparameter Tuning Works</a>.
  final HyperParameterTuningJobStrategyType strategy;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobObjective.html">HyperParameterTuningJobObjective</a>
  /// specifies the objective metric used to evaluate the performance of training
  /// jobs launched by this tuning job.
  final HyperParameterTuningJobObjective? hyperParameterTuningJobObjective;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ParameterRanges.html">ParameterRanges</a>
  /// object that specifies the ranges of hyperparameters that this tuning job
  /// searches over to find the optimal configuration for the highest model
  /// performance against your chosen objective metric.
  final ParameterRanges? parameterRanges;

  /// A value used to initialize a pseudo-random number generator. Setting a
  /// random seed and using the same seed later for the same tuning job will allow
  /// hyperparameter optimization to find more a consistent hyperparameter
  /// configuration between the two runs.
  final int? randomSeed;

  /// The configuration for the <code>Hyperband</code> optimization strategy. This
  /// parameter should be provided only if <code>Hyperband</code> is selected as
  /// the strategy for <code>HyperParameterTuningJobConfig</code>.
  final HyperParameterTuningJobStrategyConfig? strategyConfig;

  /// Specifies whether to use early stopping for training jobs launched by the
  /// hyperparameter tuning job. Because the <code>Hyperband</code> strategy has
  /// its own advanced internal early stopping mechanism,
  /// <code>TrainingJobEarlyStoppingType</code> must be <code>OFF</code> to use
  /// <code>Hyperband</code>. This parameter can take on one of the following
  /// values (the default value is <code>OFF</code>):
  /// <dl> <dt>OFF</dt> <dd>
  /// Training jobs launched by the hyperparameter tuning job do not use early
  /// stopping.
  /// </dd> <dt>AUTO</dt> <dd>
  /// SageMaker stops training jobs launched by the hyperparameter tuning job when
  /// they are unlikely to perform better than previously completed training jobs.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">Stop
  /// Training Jobs Early</a>.
  /// </dd> </dl>
  final TrainingJobEarlyStoppingType? trainingJobEarlyStoppingType;

  /// The tuning job's completion criteria.
  final TuningJobCompletionCriteria? tuningJobCompletionCriteria;

  HyperParameterTuningJobConfig({
    required this.resourceLimits,
    required this.strategy,
    this.hyperParameterTuningJobObjective,
    this.parameterRanges,
    this.randomSeed,
    this.strategyConfig,
    this.trainingJobEarlyStoppingType,
    this.tuningJobCompletionCriteria,
  });

  factory HyperParameterTuningJobConfig.fromJson(Map<String, dynamic> json) {
    return HyperParameterTuningJobConfig(
      resourceLimits: ResourceLimits.fromJson(
          json['ResourceLimits'] as Map<String, dynamic>),
      strategy: HyperParameterTuningJobStrategyType.fromString(
          (json['Strategy'] as String)),
      hyperParameterTuningJobObjective:
          json['HyperParameterTuningJobObjective'] != null
              ? HyperParameterTuningJobObjective.fromJson(
                  json['HyperParameterTuningJobObjective']
                      as Map<String, dynamic>)
              : null,
      parameterRanges: json['ParameterRanges'] != null
          ? ParameterRanges.fromJson(
              json['ParameterRanges'] as Map<String, dynamic>)
          : null,
      randomSeed: json['RandomSeed'] as int?,
      strategyConfig: json['StrategyConfig'] != null
          ? HyperParameterTuningJobStrategyConfig.fromJson(
              json['StrategyConfig'] as Map<String, dynamic>)
          : null,
      trainingJobEarlyStoppingType:
          (json['TrainingJobEarlyStoppingType'] as String?)
              ?.let(TrainingJobEarlyStoppingType.fromString),
      tuningJobCompletionCriteria: json['TuningJobCompletionCriteria'] != null
          ? TuningJobCompletionCriteria.fromJson(
              json['TuningJobCompletionCriteria'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final resourceLimits = this.resourceLimits;
    final strategy = this.strategy;
    final hyperParameterTuningJobObjective =
        this.hyperParameterTuningJobObjective;
    final parameterRanges = this.parameterRanges;
    final randomSeed = this.randomSeed;
    final strategyConfig = this.strategyConfig;
    final trainingJobEarlyStoppingType = this.trainingJobEarlyStoppingType;
    final tuningJobCompletionCriteria = this.tuningJobCompletionCriteria;
    return {
      'ResourceLimits': resourceLimits,
      'Strategy': strategy.value,
      if (hyperParameterTuningJobObjective != null)
        'HyperParameterTuningJobObjective': hyperParameterTuningJobObjective,
      if (parameterRanges != null) 'ParameterRanges': parameterRanges,
      if (randomSeed != null) 'RandomSeed': randomSeed,
      if (strategyConfig != null) 'StrategyConfig': strategyConfig,
      if (trainingJobEarlyStoppingType != null)
        'TrainingJobEarlyStoppingType': trainingJobEarlyStoppingType.value,
      if (tuningJobCompletionCriteria != null)
        'TuningJobCompletionCriteria': tuningJobCompletionCriteria,
    };
  }
}

/// The total resources consumed by your hyperparameter tuning job.
class HyperParameterTuningJobConsumedResources {
  /// The wall clock runtime in seconds used by your hyperparameter tuning job.
  final int? runtimeInSeconds;

  HyperParameterTuningJobConsumedResources({
    this.runtimeInSeconds,
  });

  factory HyperParameterTuningJobConsumedResources.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningJobConsumedResources(
      runtimeInSeconds: json['RuntimeInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final runtimeInSeconds = this.runtimeInSeconds;
    return {
      if (runtimeInSeconds != null) 'RuntimeInSeconds': runtimeInSeconds,
    };
  }
}

/// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
/// tuning uses the value of this metric to evaluate the training jobs it
/// launches, and returns the training job that results in either the highest or
/// lowest value for this metric, depending on the value you specify for the
/// <code>Type</code> parameter. If you want to define a custom objective
/// metric, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Define
/// metrics and environment variables</a>.
class HyperParameterTuningJobObjective {
  /// The name of the metric to use for the objective metric.
  final String metricName;

  /// Whether to minimize or maximize the objective metric.
  final HyperParameterTuningJobObjectiveType type;

  HyperParameterTuningJobObjective({
    required this.metricName,
    required this.type,
  });

  factory HyperParameterTuningJobObjective.fromJson(Map<String, dynamic> json) {
    return HyperParameterTuningJobObjective(
      metricName: json['MetricName'] as String,
      type: HyperParameterTuningJobObjectiveType.fromString(
          (json['Type'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final type = this.type;
    return {
      'MetricName': metricName,
      'Type': type.value,
    };
  }
}

enum HyperParameterTuningJobObjectiveType {
  maximize('Maximize'),
  minimize('Minimize'),
  ;

  final String value;

  const HyperParameterTuningJobObjectiveType(this.value);

  static HyperParameterTuningJobObjectiveType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterTuningJobObjectiveType'));
}

/// An entity returned by the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html">SearchRecord</a>
/// API containing the properties of a hyperparameter tuning job.
class HyperParameterTuningJobSearchEntity {
  final HyperParameterTrainingJobSummary? bestTrainingJob;

  /// The total amount of resources consumed by a hyperparameter tuning job.
  final HyperParameterTuningJobConsumedResources? consumedResources;

  /// The time that a hyperparameter tuning job was created.
  final DateTime? creationTime;

  /// The error that was created when a hyperparameter tuning job failed.
  final String? failureReason;

  /// The time that a hyperparameter tuning job ended.
  final DateTime? hyperParameterTuningEndTime;

  /// The Amazon Resource Name (ARN) of a hyperparameter tuning job.
  final String? hyperParameterTuningJobArn;
  final HyperParameterTuningJobConfig? hyperParameterTuningJobConfig;

  /// The name of a hyperparameter tuning job.
  final String? hyperParameterTuningJobName;

  /// The status of a hyperparameter tuning job.
  final HyperParameterTuningJobStatus? hyperParameterTuningJobStatus;

  /// The time that a hyperparameter tuning job was last modified.
  final DateTime? lastModifiedTime;
  final ObjectiveStatusCounters? objectiveStatusCounters;
  final HyperParameterTrainingJobSummary? overallBestTrainingJob;

  /// The tags associated with a hyperparameter tuning job. For more information
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a>.
  final List<Tag>? tags;
  final HyperParameterTrainingJobDefinition? trainingJobDefinition;

  /// The job definitions included in a hyperparameter tuning job.
  final List<HyperParameterTrainingJobDefinition>? trainingJobDefinitions;
  final TrainingJobStatusCounters? trainingJobStatusCounters;

  /// Information about either a current or completed hyperparameter tuning job.
  final HyperParameterTuningJobCompletionDetails? tuningJobCompletionDetails;
  final HyperParameterTuningJobWarmStartConfig? warmStartConfig;

  HyperParameterTuningJobSearchEntity({
    this.bestTrainingJob,
    this.consumedResources,
    this.creationTime,
    this.failureReason,
    this.hyperParameterTuningEndTime,
    this.hyperParameterTuningJobArn,
    this.hyperParameterTuningJobConfig,
    this.hyperParameterTuningJobName,
    this.hyperParameterTuningJobStatus,
    this.lastModifiedTime,
    this.objectiveStatusCounters,
    this.overallBestTrainingJob,
    this.tags,
    this.trainingJobDefinition,
    this.trainingJobDefinitions,
    this.trainingJobStatusCounters,
    this.tuningJobCompletionDetails,
    this.warmStartConfig,
  });

  factory HyperParameterTuningJobSearchEntity.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningJobSearchEntity(
      bestTrainingJob: json['BestTrainingJob'] != null
          ? HyperParameterTrainingJobSummary.fromJson(
              json['BestTrainingJob'] as Map<String, dynamic>)
          : null,
      consumedResources: json['ConsumedResources'] != null
          ? HyperParameterTuningJobConsumedResources.fromJson(
              json['ConsumedResources'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      hyperParameterTuningEndTime:
          timeStampFromJson(json['HyperParameterTuningEndTime']),
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String?,
      hyperParameterTuningJobConfig:
          json['HyperParameterTuningJobConfig'] != null
              ? HyperParameterTuningJobConfig.fromJson(
                  json['HyperParameterTuningJobConfig'] as Map<String, dynamic>)
              : null,
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String?,
      hyperParameterTuningJobStatus:
          (json['HyperParameterTuningJobStatus'] as String?)
              ?.let(HyperParameterTuningJobStatus.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      objectiveStatusCounters: json['ObjectiveStatusCounters'] != null
          ? ObjectiveStatusCounters.fromJson(
              json['ObjectiveStatusCounters'] as Map<String, dynamic>)
          : null,
      overallBestTrainingJob: json['OverallBestTrainingJob'] != null
          ? HyperParameterTrainingJobSummary.fromJson(
              json['OverallBestTrainingJob'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingJobDefinition: json['TrainingJobDefinition'] != null
          ? HyperParameterTrainingJobDefinition.fromJson(
              json['TrainingJobDefinition'] as Map<String, dynamic>)
          : null,
      trainingJobDefinitions: (json['TrainingJobDefinitions'] as List?)
          ?.nonNulls
          .map((e) => HyperParameterTrainingJobDefinition.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      trainingJobStatusCounters: json['TrainingJobStatusCounters'] != null
          ? TrainingJobStatusCounters.fromJson(
              json['TrainingJobStatusCounters'] as Map<String, dynamic>)
          : null,
      tuningJobCompletionDetails: json['TuningJobCompletionDetails'] != null
          ? HyperParameterTuningJobCompletionDetails.fromJson(
              json['TuningJobCompletionDetails'] as Map<String, dynamic>)
          : null,
      warmStartConfig: json['WarmStartConfig'] != null
          ? HyperParameterTuningJobWarmStartConfig.fromJson(
              json['WarmStartConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final bestTrainingJob = this.bestTrainingJob;
    final consumedResources = this.consumedResources;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final hyperParameterTuningEndTime = this.hyperParameterTuningEndTime;
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    final hyperParameterTuningJobConfig = this.hyperParameterTuningJobConfig;
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    final hyperParameterTuningJobStatus = this.hyperParameterTuningJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final objectiveStatusCounters = this.objectiveStatusCounters;
    final overallBestTrainingJob = this.overallBestTrainingJob;
    final tags = this.tags;
    final trainingJobDefinition = this.trainingJobDefinition;
    final trainingJobDefinitions = this.trainingJobDefinitions;
    final trainingJobStatusCounters = this.trainingJobStatusCounters;
    final tuningJobCompletionDetails = this.tuningJobCompletionDetails;
    final warmStartConfig = this.warmStartConfig;
    return {
      if (bestTrainingJob != null) 'BestTrainingJob': bestTrainingJob,
      if (consumedResources != null) 'ConsumedResources': consumedResources,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (hyperParameterTuningEndTime != null)
        'HyperParameterTuningEndTime':
            unixTimestampToJson(hyperParameterTuningEndTime),
      if (hyperParameterTuningJobArn != null)
        'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
      if (hyperParameterTuningJobConfig != null)
        'HyperParameterTuningJobConfig': hyperParameterTuningJobConfig,
      if (hyperParameterTuningJobName != null)
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
      if (hyperParameterTuningJobStatus != null)
        'HyperParameterTuningJobStatus': hyperParameterTuningJobStatus.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (objectiveStatusCounters != null)
        'ObjectiveStatusCounters': objectiveStatusCounters,
      if (overallBestTrainingJob != null)
        'OverallBestTrainingJob': overallBestTrainingJob,
      if (tags != null) 'Tags': tags,
      if (trainingJobDefinition != null)
        'TrainingJobDefinition': trainingJobDefinition,
      if (trainingJobDefinitions != null)
        'TrainingJobDefinitions': trainingJobDefinitions,
      if (trainingJobStatusCounters != null)
        'TrainingJobStatusCounters': trainingJobStatusCounters,
      if (tuningJobCompletionDetails != null)
        'TuningJobCompletionDetails': tuningJobCompletionDetails,
      if (warmStartConfig != null) 'WarmStartConfig': warmStartConfig,
    };
  }
}

enum HyperParameterTuningJobSortByOptions {
  name('Name'),
  status('Status'),
  creationTime('CreationTime'),
  ;

  final String value;

  const HyperParameterTuningJobSortByOptions(this.value);

  static HyperParameterTuningJobSortByOptions fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterTuningJobSortByOptions'));
}

enum HyperParameterTuningJobStatus {
  completed('Completed'),
  inProgress('InProgress'),
  failed('Failed'),
  stopped('Stopped'),
  stopping('Stopping'),
  deleting('Deleting'),
  deleteFailed('DeleteFailed'),
  ;

  final String value;

  const HyperParameterTuningJobStatus(this.value);

  static HyperParameterTuningJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterTuningJobStatus'));
}

/// The configuration for a training job launched by a hyperparameter tuning
/// job. Choose <code>Bayesian</code> for Bayesian optimization, and
/// <code>Random</code> for random search optimization. For more advanced use
/// cases, use <code>Hyperband</code>, which evaluates objective metrics for
/// training jobs after every epoch. For more information about strategies, see
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
/// Hyperparameter Tuning Works</a>.
class HyperParameterTuningJobStrategyConfig {
  /// The configuration for the object that specifies the <code>Hyperband</code>
  /// strategy. This parameter is only supported for the <code>Hyperband</code>
  /// selection for <code>Strategy</code> within the
  /// <code>HyperParameterTuningJobConfig</code> API.
  final HyperbandStrategyConfig? hyperbandStrategyConfig;

  HyperParameterTuningJobStrategyConfig({
    this.hyperbandStrategyConfig,
  });

  factory HyperParameterTuningJobStrategyConfig.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningJobStrategyConfig(
      hyperbandStrategyConfig: json['HyperbandStrategyConfig'] != null
          ? HyperbandStrategyConfig.fromJson(
              json['HyperbandStrategyConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperbandStrategyConfig = this.hyperbandStrategyConfig;
    return {
      if (hyperbandStrategyConfig != null)
        'HyperbandStrategyConfig': hyperbandStrategyConfig,
    };
  }
}

/// The strategy hyperparameter tuning uses to find the best combination of
/// hyperparameters for your model.
enum HyperParameterTuningJobStrategyType {
  bayesian('Bayesian'),
  random('Random'),
  hyperband('Hyperband'),
  grid('Grid'),
  ;

  final String value;

  const HyperParameterTuningJobStrategyType(this.value);

  static HyperParameterTuningJobStrategyType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterTuningJobStrategyType'));
}

/// Provides summary information about a hyperparameter tuning job.
class HyperParameterTuningJobSummary {
  /// The date and time that the tuning job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the tuning job.
  final String hyperParameterTuningJobArn;

  /// The name of the tuning job.
  final String hyperParameterTuningJobName;

  /// The status of the tuning job.
  final HyperParameterTuningJobStatus hyperParameterTuningJobStatus;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ObjectiveStatusCounters.html">ObjectiveStatusCounters</a>
  /// object that specifies the numbers of training jobs, categorized by objective
  /// metric status, that this tuning job launched.
  final ObjectiveStatusCounters objectiveStatusCounters;

  /// Specifies the search strategy hyperparameter tuning uses to choose which
  /// hyperparameters to evaluate at each iteration.
  final HyperParameterTuningJobStrategyType strategy;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobStatusCounters.html">TrainingJobStatusCounters</a>
  /// object that specifies the numbers of training jobs, categorized by status,
  /// that this tuning job launched.
  final TrainingJobStatusCounters trainingJobStatusCounters;

  /// The date and time that the tuning job ended.
  final DateTime? hyperParameterTuningEndTime;

  /// The date and time that the tuning job was modified.
  final DateTime? lastModifiedTime;

  /// The <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>
  /// object that specifies the maximum number of training jobs and parallel
  /// training jobs allowed for this tuning job.
  final ResourceLimits? resourceLimits;

  HyperParameterTuningJobSummary({
    required this.creationTime,
    required this.hyperParameterTuningJobArn,
    required this.hyperParameterTuningJobName,
    required this.hyperParameterTuningJobStatus,
    required this.objectiveStatusCounters,
    required this.strategy,
    required this.trainingJobStatusCounters,
    this.hyperParameterTuningEndTime,
    this.lastModifiedTime,
    this.resourceLimits,
  });

  factory HyperParameterTuningJobSummary.fromJson(Map<String, dynamic> json) {
    return HyperParameterTuningJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      hyperParameterTuningJobArn: json['HyperParameterTuningJobArn'] as String,
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String,
      hyperParameterTuningJobStatus: HyperParameterTuningJobStatus.fromString(
          (json['HyperParameterTuningJobStatus'] as String)),
      objectiveStatusCounters: ObjectiveStatusCounters.fromJson(
          json['ObjectiveStatusCounters'] as Map<String, dynamic>),
      strategy: HyperParameterTuningJobStrategyType.fromString(
          (json['Strategy'] as String)),
      trainingJobStatusCounters: TrainingJobStatusCounters.fromJson(
          json['TrainingJobStatusCounters'] as Map<String, dynamic>),
      hyperParameterTuningEndTime:
          timeStampFromJson(json['HyperParameterTuningEndTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      resourceLimits: json['ResourceLimits'] != null
          ? ResourceLimits.fromJson(
              json['ResourceLimits'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final hyperParameterTuningJobArn = this.hyperParameterTuningJobArn;
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    final hyperParameterTuningJobStatus = this.hyperParameterTuningJobStatus;
    final objectiveStatusCounters = this.objectiveStatusCounters;
    final strategy = this.strategy;
    final trainingJobStatusCounters = this.trainingJobStatusCounters;
    final hyperParameterTuningEndTime = this.hyperParameterTuningEndTime;
    final lastModifiedTime = this.lastModifiedTime;
    final resourceLimits = this.resourceLimits;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'HyperParameterTuningJobArn': hyperParameterTuningJobArn,
      'HyperParameterTuningJobName': hyperParameterTuningJobName,
      'HyperParameterTuningJobStatus': hyperParameterTuningJobStatus.value,
      'ObjectiveStatusCounters': objectiveStatusCounters,
      'Strategy': strategy.value,
      'TrainingJobStatusCounters': trainingJobStatusCounters,
      if (hyperParameterTuningEndTime != null)
        'HyperParameterTuningEndTime':
            unixTimestampToJson(hyperParameterTuningEndTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (resourceLimits != null) 'ResourceLimits': resourceLimits,
    };
  }
}

/// Specifies the configuration for a hyperparameter tuning job that uses one or
/// more previous hyperparameter tuning jobs as a starting point. The results of
/// previous tuning jobs are used to inform which combinations of
/// hyperparameters to search over in the new tuning job.
///
/// All training jobs launched by the new hyperparameter tuning job are
/// evaluated by using the objective metric, and the training job that performs
/// the best is compared to the best training jobs from the parent tuning jobs.
/// From these, the training job that performs the best as measured by the
/// objective metric is returned as the overall best training job.
/// <note>
/// All training jobs launched by parent hyperparameter tuning jobs and the new
/// hyperparameter tuning jobs count against the limit of training jobs for the
/// tuning job.
/// </note>
class HyperParameterTuningJobWarmStartConfig {
  /// An array of hyperparameter tuning jobs that are used as the starting point
  /// for the new hyperparameter tuning job. For more information about warm
  /// starting a hyperparameter tuning job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-warm-start.html">Using
  /// a Previous Hyperparameter Tuning Job as a Starting Point</a>.
  ///
  /// Hyperparameter tuning jobs created before October 1, 2018 cannot be used as
  /// parent jobs for warm start tuning jobs.
  final List<ParentHyperParameterTuningJob> parentHyperParameterTuningJobs;

  /// Specifies one of the following:
  /// <dl> <dt>IDENTICAL_DATA_AND_ALGORITHM</dt> <dd>
  /// The new hyperparameter tuning job uses the same input data and training
  /// image as the parent tuning jobs. You can change the hyperparameter ranges to
  /// search and the maximum number of training jobs that the hyperparameter
  /// tuning job launches. You cannot use a new version of the training algorithm,
  /// unless the changes in the new version do not affect the algorithm itself.
  /// For example, changes that improve logging or adding support for a different
  /// data format are allowed. You can also change hyperparameters from tunable to
  /// static, and from static to tunable, but the total number of static plus
  /// tunable hyperparameters must remain the same as it is in all parent jobs.
  /// The objective metric for the new tuning job must be the same as for all
  /// parent jobs.
  /// </dd> <dt>TRANSFER_LEARNING</dt> <dd>
  /// The new hyperparameter tuning job can include input data, hyperparameter
  /// ranges, maximum number of concurrent training jobs, and maximum number of
  /// training jobs that are different than those of its parent hyperparameter
  /// tuning jobs. The training image can also be a different version from the
  /// version used in the parent hyperparameter tuning job. You can also change
  /// hyperparameters from tunable to static, and from static to tunable, but the
  /// total number of static plus tunable hyperparameters must remain the same as
  /// it is in all parent jobs. The objective metric for the new tuning job must
  /// be the same as for all parent jobs.
  /// </dd> </dl>
  final HyperParameterTuningJobWarmStartType warmStartType;

  HyperParameterTuningJobWarmStartConfig({
    required this.parentHyperParameterTuningJobs,
    required this.warmStartType,
  });

  factory HyperParameterTuningJobWarmStartConfig.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningJobWarmStartConfig(
      parentHyperParameterTuningJobs: (json['ParentHyperParameterTuningJobs']
              as List)
          .nonNulls
          .map((e) =>
              ParentHyperParameterTuningJob.fromJson(e as Map<String, dynamic>))
          .toList(),
      warmStartType: HyperParameterTuningJobWarmStartType.fromString(
          (json['WarmStartType'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final parentHyperParameterTuningJobs = this.parentHyperParameterTuningJobs;
    final warmStartType = this.warmStartType;
    return {
      'ParentHyperParameterTuningJobs': parentHyperParameterTuningJobs,
      'WarmStartType': warmStartType.value,
    };
  }
}

enum HyperParameterTuningJobWarmStartType {
  identicalDataAndAlgorithm('IdenticalDataAndAlgorithm'),
  transferLearning('TransferLearning'),
  ;

  final String value;

  const HyperParameterTuningJobWarmStartType(this.value);

  static HyperParameterTuningJobWarmStartType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum HyperParameterTuningJobWarmStartType'));
}

/// The configuration of resources, including compute instances and storage
/// volumes for use in training jobs launched by hyperparameter tuning jobs.
/// <code>HyperParameterTuningResourceConfig</code> is similar to
/// <code>ResourceConfig</code>, but has the additional
/// <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to
/// allow for flexible instance management. Specify one or more instance types,
/// count, and the allocation strategy for instance selection.
/// <note>
/// <code>HyperParameterTuningResourceConfig</code> supports the capabilities of
/// <code>ResourceConfig</code> with the exception of
/// <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm
/// pools by default, which reuse clusters between training jobs.
/// </note>
class HyperParameterTuningResourceConfig {
  /// The strategy that determines the order of preference for resources specified
  /// in <code>InstanceConfigs</code> used in hyperparameter optimization.
  final HyperParameterTuningAllocationStrategy? allocationStrategy;

  /// A list containing the configuration(s) for one or more resources for
  /// processing hyperparameter jobs. These resources include compute instances
  /// and storage volumes to use in model training jobs launched by hyperparameter
  /// tuning jobs. The <code>AllocationStrategy</code> controls the order in which
  /// multiple configurations provided in <code>InstanceConfigs</code> are used.
  /// <note>
  /// If you only want to use a single instance configuration inside the
  /// <code>HyperParameterTuningResourceConfig</code> API, do not provide a value
  /// for <code>InstanceConfigs</code>. Instead, use <code>InstanceType</code>,
  /// <code>VolumeSizeInGB</code> and <code>InstanceCount</code>. If you use
  /// <code>InstanceConfigs</code>, do not provide values for
  /// <code>InstanceType</code>, <code>VolumeSizeInGB</code> or
  /// <code>InstanceCount</code>.
  /// </note>
  final List<HyperParameterTuningInstanceConfig>? instanceConfigs;

  /// The number of compute instances of type <code>InstanceType</code> to use.
  /// For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/data-parallel-use-api.html">distributed
  /// training</a>, select a value greater than 1.
  final int? instanceCount;

  /// The instance type used to run hyperparameter optimization tuning jobs. See
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html">
  /// descriptions of instance types</a> for more information.
  final TrainingInstanceType? instanceType;

  /// A key used by Amazon Web Services Key Management Service to encrypt data on
  /// the storage volume attached to the compute instances used to run the
  /// training job. You can use either of the following formats to specify a key.
  ///
  /// KMS Key ID:
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  ///
  /// Amazon Resource Name (ARN) of a KMS key:
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  ///
  /// Some instances use local storage, which use a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">hardware
  /// module to encrypt</a> storage volumes. If you choose one of these instance
  /// types, you cannot request a <code>VolumeKmsKeyId</code>. For a list of
  /// instance types that use local storage, see <a
  /// href="http://aws.amazon.com/releasenotes/host-instance-storage-volumes-table/">instance
  /// store volumes</a>. For more information about Amazon Web Services Key
  /// Management Service, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-kms-permissions.html">KMS
  /// encryption</a> for more information.
  final String? volumeKmsKeyId;

  /// The volume size in GB for the storage volume to be used in processing
  /// hyperparameter optimization jobs (optional). These volumes store model
  /// artifacts, incremental states and optionally, scratch space for training
  /// algorithms. Do not provide a value for this parameter if a value for
  /// <code>InstanceConfigs</code> is also specified.
  ///
  /// Some instance types have a fixed total local storage size. If you select one
  /// of these instances for training, <code>VolumeSizeInGB</code> cannot be
  /// greater than this total size. For a list of instance types with local
  /// instance storage and their sizes, see <a
  /// href="http://aws.amazon.com/releasenotes/host-instance-storage-volumes-table/">instance
  /// store volumes</a>.
  /// <note>
  /// SageMaker supports only the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html">General
  /// Purpose SSD (gp2)</a> storage volume type.
  /// </note>
  final int? volumeSizeInGB;

  HyperParameterTuningResourceConfig({
    this.allocationStrategy,
    this.instanceConfigs,
    this.instanceCount,
    this.instanceType,
    this.volumeKmsKeyId,
    this.volumeSizeInGB,
  });

  factory HyperParameterTuningResourceConfig.fromJson(
      Map<String, dynamic> json) {
    return HyperParameterTuningResourceConfig(
      allocationStrategy: (json['AllocationStrategy'] as String?)
          ?.let(HyperParameterTuningAllocationStrategy.fromString),
      instanceConfigs: (json['InstanceConfigs'] as List?)
          ?.nonNulls
          .map((e) => HyperParameterTuningInstanceConfig.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      instanceCount: json['InstanceCount'] as int?,
      instanceType: (json['InstanceType'] as String?)
          ?.let(TrainingInstanceType.fromString),
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final allocationStrategy = this.allocationStrategy;
    final instanceConfigs = this.instanceConfigs;
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      if (allocationStrategy != null)
        'AllocationStrategy': allocationStrategy.value,
      if (instanceConfigs != null) 'InstanceConfigs': instanceConfigs,
      if (instanceCount != null) 'InstanceCount': instanceCount,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

/// The configuration for <code>Hyperband</code>, a multi-fidelity based
/// hyperparameter tuning strategy. <code>Hyperband</code> uses the final and
/// intermediate results of a training job to dynamically allocate resources to
/// utilized hyperparameter configurations while automatically stopping
/// under-performing configurations. This parameter should be provided only if
/// <code>Hyperband</code> is selected as the <code>StrategyConfig</code> under
/// the <code>HyperParameterTuningJobConfig</code> API.
class HyperbandStrategyConfig {
  /// The maximum number of resources (such as epochs) that can be used by a
  /// training job launched by a hyperparameter tuning job. Once a job reaches the
  /// <code>MaxResource</code> value, it is stopped. If a value for
  /// <code>MaxResource</code> is not provided, and <code>Hyperband</code> is
  /// selected as the hyperparameter tuning strategy,
  /// <code>HyperbandTraining</code> attempts to infer <code>MaxResource</code>
  /// from the following keys (if present) in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-StaticHyperParameters">StaticsHyperParameters</a>:
  ///
  /// <ul>
  /// <li>
  /// <code>epochs</code>
  /// </li>
  /// <li>
  /// <code>numepochs</code>
  /// </li>
  /// <li>
  /// <code>n-epochs</code>
  /// </li>
  /// <li>
  /// <code>n_epochs</code>
  /// </li>
  /// <li>
  /// <code>num_epochs</code>
  /// </li>
  /// </ul>
  /// If <code>HyperbandStrategyConfig</code> is unable to infer a value for
  /// <code>MaxResource</code>, it generates a validation error. The maximum value
  /// is 20,000 epochs. All metrics that correspond to an objective metric are
  /// used to derive <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html">early
  /// stopping decisions</a>. For <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html">distributed</a>
  /// training jobs, ensure that duplicate metrics are not printed in the logs
  /// across the individual nodes in a training job. If multiple nodes are
  /// publishing duplicate or incorrect metrics, training jobs may make an
  /// incorrect stopping decision and stop the job prematurely.
  final int? maxResource;

  /// The minimum number of resources (such as epochs) that can be used by a
  /// training job launched by a hyperparameter tuning job. If the value for
  /// <code>MinResource</code> has not been reached, the training job is not
  /// stopped by <code>Hyperband</code>.
  final int? minResource;

  HyperbandStrategyConfig({
    this.maxResource,
    this.minResource,
  });

  factory HyperbandStrategyConfig.fromJson(Map<String, dynamic> json) {
    return HyperbandStrategyConfig(
      maxResource: json['MaxResource'] as int?,
      minResource: json['MinResource'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxResource = this.maxResource;
    final minResource = this.minResource;
    return {
      if (maxResource != null) 'MaxResource': maxResource,
      if (minResource != null) 'MinResource': minResource,
    };
  }
}

/// The IAM Identity details associated with the user. These details are
/// associated with model package groups, model packages and project entities
/// only.
class IamIdentity {
  /// The Amazon Resource Name (ARN) of the IAM identity.
  final String? arn;

  /// The ID of the principal that assumes the IAM identity.
  final String? principalId;

  /// The person or application which assumes the IAM identity.
  final String? sourceIdentity;

  IamIdentity({
    this.arn,
    this.principalId,
    this.sourceIdentity,
  });

  factory IamIdentity.fromJson(Map<String, dynamic> json) {
    return IamIdentity(
      arn: json['Arn'] as String?,
      principalId: json['PrincipalId'] as String?,
      sourceIdentity: json['SourceIdentity'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final principalId = this.principalId;
    final sourceIdentity = this.sourceIdentity;
    return {
      if (arn != null) 'Arn': arn,
      if (principalId != null) 'PrincipalId': principalId,
      if (sourceIdentity != null) 'SourceIdentity': sourceIdentity,
    };
  }
}

/// Use this parameter to specify a supported global condition key that is added
/// to the IAM policy.
class IamPolicyConstraints {
  /// When <code>SourceIp</code> is <code>Enabled</code> the worker's IP address
  /// when a task is rendered in the worker portal is added to the IAM policy as a
  /// <code>Condition</code> used to generate the Amazon S3 presigned URL. This IP
  /// address is checked by Amazon S3 and must match in order for the Amazon S3
  /// resource to be rendered in the worker portal.
  final EnabledOrDisabled? sourceIp;

  /// When <code>VpcSourceIp</code> is <code>Enabled</code> the worker's IP
  /// address when a task is rendered in private worker portal inside the VPC is
  /// added to the IAM policy as a <code>Condition</code> used to generate the
  /// Amazon S3 presigned URL. To render the task successfully Amazon S3 checks
  /// that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and
  /// that the worker's IP address matches the IP address in the IAM policy. To
  /// learn more about configuring private worker portal, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html">Use
  /// Amazon VPC mode from a private worker portal</a>.
  final EnabledOrDisabled? vpcSourceIp;

  IamPolicyConstraints({
    this.sourceIp,
    this.vpcSourceIp,
  });

  factory IamPolicyConstraints.fromJson(Map<String, dynamic> json) {
    return IamPolicyConstraints(
      sourceIp:
          (json['SourceIp'] as String?)?.let(EnabledOrDisabled.fromString),
      vpcSourceIp:
          (json['VpcSourceIp'] as String?)?.let(EnabledOrDisabled.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final sourceIp = this.sourceIp;
    final vpcSourceIp = this.vpcSourceIp;
    return {
      if (sourceIp != null) 'SourceIp': sourceIp.value,
      if (vpcSourceIp != null) 'VpcSourceIp': vpcSourceIp.value,
    };
  }
}

/// The Amazon SageMaker Canvas application setting where you configure OAuth
/// for connecting to an external data source, such as Snowflake.
class IdentityProviderOAuthSetting {
  /// The name of the data source that you're connecting to. Canvas currently
  /// supports OAuth for Snowflake and Salesforce Data Cloud.
  final DataSourceName? dataSourceName;

  /// The ARN of an Amazon Web Services Secrets Manager secret that stores the
  /// credentials from your identity provider, such as the client ID and secret,
  /// authorization URL, and token URL.
  final String? secretArn;

  /// Describes whether OAuth for a data source is enabled or disabled in the
  /// Canvas application.
  final FeatureStatus? status;

  IdentityProviderOAuthSetting({
    this.dataSourceName,
    this.secretArn,
    this.status,
  });

  factory IdentityProviderOAuthSetting.fromJson(Map<String, dynamic> json) {
    return IdentityProviderOAuthSetting(
      dataSourceName:
          (json['DataSourceName'] as String?)?.let(DataSourceName.fromString),
      secretArn: json['SecretArn'] as String?,
      status: (json['Status'] as String?)?.let(FeatureStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final dataSourceName = this.dataSourceName;
    final secretArn = this.secretArn;
    final status = this.status;
    return {
      if (dataSourceName != null) 'DataSourceName': dataSourceName.value,
      if (secretArn != null) 'SecretArn': secretArn,
      if (status != null) 'Status': status.value,
    };
  }
}

/// A SageMaker image. A SageMaker image represents a set of container images
/// that are derived from a common base container image. Each of these container
/// images is represented by a SageMaker <code>ImageVersion</code>.
class Image {
  /// When the image was created.
  final DateTime creationTime;

  /// The ARN of the image.
  final String imageArn;

  /// The name of the image.
  final String imageName;

  /// The status of the image.
  final ImageStatus imageStatus;

  /// When the image was last modified.
  final DateTime lastModifiedTime;

  /// The description of the image.
  final String? description;

  /// The name of the image as displayed.
  final String? displayName;

  /// When a create, update, or delete operation fails, the reason for the
  /// failure.
  final String? failureReason;

  Image({
    required this.creationTime,
    required this.imageArn,
    required this.imageName,
    required this.imageStatus,
    required this.lastModifiedTime,
    this.description,
    this.displayName,
    this.failureReason,
  });

  factory Image.fromJson(Map<String, dynamic> json) {
    return Image(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      imageArn: json['ImageArn'] as String,
      imageName: json['ImageName'] as String,
      imageStatus: ImageStatus.fromString((json['ImageStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      description: json['Description'] as String?,
      displayName: json['DisplayName'] as String?,
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final imageArn = this.imageArn;
    final imageName = this.imageName;
    final imageStatus = this.imageStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final description = this.description;
    final displayName = this.displayName;
    final failureReason = this.failureReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ImageArn': imageArn,
      'ImageName': imageName,
      'ImageStatus': imageStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (description != null) 'Description': description,
      if (displayName != null) 'DisplayName': displayName,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// The collection of settings used by an AutoML job V2 for the image
/// classification problem type.
class ImageClassificationJobConfig {
  /// How long a job is allowed to run, or how many candidates a job is allowed to
  /// generate.
  final AutoMLJobCompletionCriteria? completionCriteria;

  ImageClassificationJobConfig({
    this.completionCriteria,
  });

  factory ImageClassificationJobConfig.fromJson(Map<String, dynamic> json) {
    return ImageClassificationJobConfig(
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final completionCriteria = this.completionCriteria;
    return {
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
    };
  }
}

/// Specifies whether the model container is in Amazon ECR or a private Docker
/// registry accessible from your Amazon Virtual Private Cloud (VPC).
class ImageConfig {
  /// Set this to one of the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>Platform</code> - The model image is hosted in Amazon ECR.
  /// </li>
  /// <li>
  /// <code>Vpc</code> - The model image is hosted in a private Docker registry in
  /// your VPC.
  /// </li>
  /// </ul>
  final RepositoryAccessMode repositoryAccessMode;

  /// (Optional) Specifies an authentication configuration for the private docker
  /// registry where your model image is hosted. Specify a value for this property
  /// only if you specified <code>Vpc</code> as the value for the
  /// <code>RepositoryAccessMode</code> field, and the private Docker registry
  /// where the model image is hosted requires authentication.
  final RepositoryAuthConfig? repositoryAuthConfig;

  ImageConfig({
    required this.repositoryAccessMode,
    this.repositoryAuthConfig,
  });

  factory ImageConfig.fromJson(Map<String, dynamic> json) {
    return ImageConfig(
      repositoryAccessMode: RepositoryAccessMode.fromString(
          (json['RepositoryAccessMode'] as String)),
      repositoryAuthConfig: json['RepositoryAuthConfig'] != null
          ? RepositoryAuthConfig.fromJson(
              json['RepositoryAuthConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryAccessMode = this.repositoryAccessMode;
    final repositoryAuthConfig = this.repositoryAuthConfig;
    return {
      'RepositoryAccessMode': repositoryAccessMode.value,
      if (repositoryAuthConfig != null)
        'RepositoryAuthConfig': repositoryAuthConfig,
    };
  }
}

enum ImageSortBy {
  creationTime('CREATION_TIME'),
  lastModifiedTime('LAST_MODIFIED_TIME'),
  imageName('IMAGE_NAME'),
  ;

  final String value;

  const ImageSortBy(this.value);

  static ImageSortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ImageSortBy'));
}

enum ImageSortOrder {
  ascending('ASCENDING'),
  descending('DESCENDING'),
  ;

  final String value;

  const ImageSortOrder(this.value);

  static ImageSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ImageSortOrder'));
}

enum ImageStatus {
  creating('CREATING'),
  created('CREATED'),
  createFailed('CREATE_FAILED'),
  updating('UPDATING'),
  updateFailed('UPDATE_FAILED'),
  deleting('DELETING'),
  deleteFailed('DELETE_FAILED'),
  ;

  final String value;

  const ImageStatus(this.value);

  static ImageStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ImageStatus'));
}

/// A version of a SageMaker <code>Image</code>. A version represents an
/// existing container image.
class ImageVersion {
  /// When the version was created.
  final DateTime creationTime;

  /// The ARN of the image the version is based on.
  final String imageArn;

  /// The ARN of the version.
  final String imageVersionArn;

  /// The status of the version.
  final ImageVersionStatus imageVersionStatus;

  /// When the version was last modified.
  final DateTime lastModifiedTime;

  /// The version number.
  final int version;

  /// When a create or delete operation fails, the reason for the failure.
  final String? failureReason;

  ImageVersion({
    required this.creationTime,
    required this.imageArn,
    required this.imageVersionArn,
    required this.imageVersionStatus,
    required this.lastModifiedTime,
    required this.version,
    this.failureReason,
  });

  factory ImageVersion.fromJson(Map<String, dynamic> json) {
    return ImageVersion(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      imageArn: json['ImageArn'] as String,
      imageVersionArn: json['ImageVersionArn'] as String,
      imageVersionStatus:
          ImageVersionStatus.fromString((json['ImageVersionStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      version: json['Version'] as int,
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final imageArn = this.imageArn;
    final imageVersionArn = this.imageVersionArn;
    final imageVersionStatus = this.imageVersionStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final version = this.version;
    final failureReason = this.failureReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ImageArn': imageArn,
      'ImageVersionArn': imageVersionArn,
      'ImageVersionStatus': imageVersionStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'Version': version,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

enum ImageVersionSortBy {
  creationTime('CREATION_TIME'),
  lastModifiedTime('LAST_MODIFIED_TIME'),
  version('VERSION'),
  ;

  final String value;

  const ImageVersionSortBy(this.value);

  static ImageVersionSortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ImageVersionSortBy'));
}

enum ImageVersionSortOrder {
  ascending('ASCENDING'),
  descending('DESCENDING'),
  ;

  final String value;

  const ImageVersionSortOrder(this.value);

  static ImageVersionSortOrder fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ImageVersionSortOrder'));
}

enum ImageVersionStatus {
  creating('CREATING'),
  created('CREATED'),
  createFailed('CREATE_FAILED'),
  deleting('DELETING'),
  deleteFailed('DELETE_FAILED'),
  ;

  final String value;

  const ImageVersionStatus(this.value);

  static ImageVersionStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ImageVersionStatus'));
}

class ImportHubContentResponse {
  /// The ARN of the hub that the content was imported into.
  final String hubArn;

  /// The ARN of the hub content that was imported.
  final String hubContentArn;

  ImportHubContentResponse({
    required this.hubArn,
    required this.hubContentArn,
  });

  factory ImportHubContentResponse.fromJson(Map<String, dynamic> json) {
    return ImportHubContentResponse(
      hubArn: json['HubArn'] as String,
      hubContentArn: json['HubContentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final hubArn = this.hubArn;
    final hubContentArn = this.hubContentArn;
    return {
      'HubArn': hubArn,
      'HubContentArn': hubContentArn,
    };
  }
}

/// Defines the compute resources to allocate to run a model that you assign to
/// an inference component. These resources include CPU cores, accelerators, and
/// memory.
class InferenceComponentComputeResourceRequirements {
  /// The minimum MB of memory to allocate to run a model that you assign to an
  /// inference component.
  final int minMemoryRequiredInMb;

  /// The maximum MB of memory to allocate to run a model that you assign to an
  /// inference component.
  final int? maxMemoryRequiredInMb;

  /// The number of accelerators to allocate to run a model that you assign to an
  /// inference component. Accelerators include GPUs and Amazon Web Services
  /// Inferentia.
  final double? numberOfAcceleratorDevicesRequired;

  /// The number of CPU cores to allocate to run a model that you assign to an
  /// inference component.
  final double? numberOfCpuCoresRequired;

  InferenceComponentComputeResourceRequirements({
    required this.minMemoryRequiredInMb,
    this.maxMemoryRequiredInMb,
    this.numberOfAcceleratorDevicesRequired,
    this.numberOfCpuCoresRequired,
  });

  factory InferenceComponentComputeResourceRequirements.fromJson(
      Map<String, dynamic> json) {
    return InferenceComponentComputeResourceRequirements(
      minMemoryRequiredInMb: json['MinMemoryRequiredInMb'] as int,
      maxMemoryRequiredInMb: json['MaxMemoryRequiredInMb'] as int?,
      numberOfAcceleratorDevicesRequired:
          json['NumberOfAcceleratorDevicesRequired'] as double?,
      numberOfCpuCoresRequired: json['NumberOfCpuCoresRequired'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final minMemoryRequiredInMb = this.minMemoryRequiredInMb;
    final maxMemoryRequiredInMb = this.maxMemoryRequiredInMb;
    final numberOfAcceleratorDevicesRequired =
        this.numberOfAcceleratorDevicesRequired;
    final numberOfCpuCoresRequired = this.numberOfCpuCoresRequired;
    return {
      'MinMemoryRequiredInMb': minMemoryRequiredInMb,
      if (maxMemoryRequiredInMb != null)
        'MaxMemoryRequiredInMb': maxMemoryRequiredInMb,
      if (numberOfAcceleratorDevicesRequired != null)
        'NumberOfAcceleratorDevicesRequired':
            numberOfAcceleratorDevicesRequired,
      if (numberOfCpuCoresRequired != null)
        'NumberOfCpuCoresRequired': numberOfCpuCoresRequired,
    };
  }
}

/// Defines a container that provides the runtime environment for a model that
/// you deploy with an inference component.
class InferenceComponentContainerSpecification {
  /// The Amazon S3 path where the model artifacts, which result from model
  /// training, are stored. This path must point to a single gzip compressed tar
  /// archive (.tar.gz suffix).
  final String? artifactUrl;

  /// The environment variables to set in the Docker container. Each key and value
  /// in the Environment string-to-string map can have length of up to 1024. We
  /// support up to 16 entries in the map.
  final Map<String, String>? environment;

  /// The Amazon Elastic Container Registry (Amazon ECR) path where the Docker
  /// image for the model is stored.
  final String? image;

  InferenceComponentContainerSpecification({
    this.artifactUrl,
    this.environment,
    this.image,
  });

  Map<String, dynamic> toJson() {
    final artifactUrl = this.artifactUrl;
    final environment = this.environment;
    final image = this.image;
    return {
      if (artifactUrl != null) 'ArtifactUrl': artifactUrl,
      if (environment != null) 'Environment': environment,
      if (image != null) 'Image': image,
    };
  }
}

/// Details about the resources that are deployed with this inference component.
class InferenceComponentContainerSpecificationSummary {
  /// The Amazon S3 path where the model artifacts are stored.
  final String? artifactUrl;
  final DeployedImage? deployedImage;

  /// The environment variables to set in the Docker container.
  final Map<String, String>? environment;

  InferenceComponentContainerSpecificationSummary({
    this.artifactUrl,
    this.deployedImage,
    this.environment,
  });

  factory InferenceComponentContainerSpecificationSummary.fromJson(
      Map<String, dynamic> json) {
    return InferenceComponentContainerSpecificationSummary(
      artifactUrl: json['ArtifactUrl'] as String?,
      deployedImage: json['DeployedImage'] != null
          ? DeployedImage.fromJson(
              json['DeployedImage'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final artifactUrl = this.artifactUrl;
    final deployedImage = this.deployedImage;
    final environment = this.environment;
    return {
      if (artifactUrl != null) 'ArtifactUrl': artifactUrl,
      if (deployedImage != null) 'DeployedImage': deployedImage,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// Runtime settings for a model that is deployed with an inference component.
class InferenceComponentRuntimeConfig {
  /// The number of runtime copies of the model container to deploy with the
  /// inference component. Each copy can serve inference requests.
  final int copyCount;

  InferenceComponentRuntimeConfig({
    required this.copyCount,
  });

  Map<String, dynamic> toJson() {
    final copyCount = this.copyCount;
    return {
      'CopyCount': copyCount,
    };
  }
}

/// Details about the runtime settings for the model that is deployed with the
/// inference component.
class InferenceComponentRuntimeConfigSummary {
  /// The number of runtime copies of the model container that are currently
  /// deployed.
  final int? currentCopyCount;

  /// The number of runtime copies of the model container that you requested to
  /// deploy with the inference component.
  final int? desiredCopyCount;

  InferenceComponentRuntimeConfigSummary({
    this.currentCopyCount,
    this.desiredCopyCount,
  });

  factory InferenceComponentRuntimeConfigSummary.fromJson(
      Map<String, dynamic> json) {
    return InferenceComponentRuntimeConfigSummary(
      currentCopyCount: json['CurrentCopyCount'] as int?,
      desiredCopyCount: json['DesiredCopyCount'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final currentCopyCount = this.currentCopyCount;
    final desiredCopyCount = this.desiredCopyCount;
    return {
      if (currentCopyCount != null) 'CurrentCopyCount': currentCopyCount,
      if (desiredCopyCount != null) 'DesiredCopyCount': desiredCopyCount,
    };
  }
}

enum InferenceComponentSortKey {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const InferenceComponentSortKey(this.value);

  static InferenceComponentSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InferenceComponentSortKey'));
}

/// Details about the resources to deploy with this inference component,
/// including the model, container, and compute resources.
class InferenceComponentSpecification {
  /// The compute resources allocated to run the model assigned to the inference
  /// component.
  final InferenceComponentComputeResourceRequirements
      computeResourceRequirements;

  /// Defines a container that provides the runtime environment for a model that
  /// you deploy with an inference component.
  final InferenceComponentContainerSpecification? container;

  /// The name of an existing SageMaker model object in your account that you want
  /// to deploy with the inference component.
  final String? modelName;

  /// Settings that take effect while the model container starts up.
  final InferenceComponentStartupParameters? startupParameters;

  InferenceComponentSpecification({
    required this.computeResourceRequirements,
    this.container,
    this.modelName,
    this.startupParameters,
  });

  Map<String, dynamic> toJson() {
    final computeResourceRequirements = this.computeResourceRequirements;
    final container = this.container;
    final modelName = this.modelName;
    final startupParameters = this.startupParameters;
    return {
      'ComputeResourceRequirements': computeResourceRequirements,
      if (container != null) 'Container': container,
      if (modelName != null) 'ModelName': modelName,
      if (startupParameters != null) 'StartupParameters': startupParameters,
    };
  }
}

/// Details about the resources that are deployed with this inference component.
class InferenceComponentSpecificationSummary {
  /// The compute resources allocated to run the model assigned to the inference
  /// component.
  final InferenceComponentComputeResourceRequirements?
      computeResourceRequirements;

  /// Details about the container that provides the runtime environment for the
  /// model that is deployed with the inference component.
  final InferenceComponentContainerSpecificationSummary? container;

  /// The name of the SageMaker model object that is deployed with the inference
  /// component.
  final String? modelName;

  /// Settings that take effect while the model container starts up.
  final InferenceComponentStartupParameters? startupParameters;

  InferenceComponentSpecificationSummary({
    this.computeResourceRequirements,
    this.container,
    this.modelName,
    this.startupParameters,
  });

  factory InferenceComponentSpecificationSummary.fromJson(
      Map<String, dynamic> json) {
    return InferenceComponentSpecificationSummary(
      computeResourceRequirements: json['ComputeResourceRequirements'] != null
          ? InferenceComponentComputeResourceRequirements.fromJson(
              json['ComputeResourceRequirements'] as Map<String, dynamic>)
          : null,
      container: json['Container'] != null
          ? InferenceComponentContainerSpecificationSummary.fromJson(
              json['Container'] as Map<String, dynamic>)
          : null,
      modelName: json['ModelName'] as String?,
      startupParameters: json['StartupParameters'] != null
          ? InferenceComponentStartupParameters.fromJson(
              json['StartupParameters'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final computeResourceRequirements = this.computeResourceRequirements;
    final container = this.container;
    final modelName = this.modelName;
    final startupParameters = this.startupParameters;
    return {
      if (computeResourceRequirements != null)
        'ComputeResourceRequirements': computeResourceRequirements,
      if (container != null) 'Container': container,
      if (modelName != null) 'ModelName': modelName,
      if (startupParameters != null) 'StartupParameters': startupParameters,
    };
  }
}

/// Settings that take effect while the model container starts up.
class InferenceComponentStartupParameters {
  /// The timeout value, in seconds, for your inference container to pass health
  /// check by Amazon S3 Hosting. For more information about health check, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests">How
  /// Your Container Should Respond to Health Check (Ping) Requests</a>.
  final int? containerStartupHealthCheckTimeoutInSeconds;

  /// The timeout value, in seconds, to download and extract the model that you
  /// want to host from Amazon S3 to the individual inference instance associated
  /// with this inference component.
  final int? modelDataDownloadTimeoutInSeconds;

  InferenceComponentStartupParameters({
    this.containerStartupHealthCheckTimeoutInSeconds,
    this.modelDataDownloadTimeoutInSeconds,
  });

  factory InferenceComponentStartupParameters.fromJson(
      Map<String, dynamic> json) {
    return InferenceComponentStartupParameters(
      containerStartupHealthCheckTimeoutInSeconds:
          json['ContainerStartupHealthCheckTimeoutInSeconds'] as int?,
      modelDataDownloadTimeoutInSeconds:
          json['ModelDataDownloadTimeoutInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final containerStartupHealthCheckTimeoutInSeconds =
        this.containerStartupHealthCheckTimeoutInSeconds;
    final modelDataDownloadTimeoutInSeconds =
        this.modelDataDownloadTimeoutInSeconds;
    return {
      if (containerStartupHealthCheckTimeoutInSeconds != null)
        'ContainerStartupHealthCheckTimeoutInSeconds':
            containerStartupHealthCheckTimeoutInSeconds,
      if (modelDataDownloadTimeoutInSeconds != null)
        'ModelDataDownloadTimeoutInSeconds': modelDataDownloadTimeoutInSeconds,
    };
  }
}

enum InferenceComponentStatus {
  inService('InService'),
  creating('Creating'),
  updating('Updating'),
  failed('Failed'),
  deleting('Deleting'),
  ;

  final String value;

  const InferenceComponentStatus(this.value);

  static InferenceComponentStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InferenceComponentStatus'));
}

/// A summary of the properties of an inference component.
class InferenceComponentSummary {
  /// The time when the inference component was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint that hosts the inference
  /// component.
  final String endpointArn;

  /// The name of the endpoint that hosts the inference component.
  final String endpointName;

  /// The Amazon Resource Name (ARN) of the inference component.
  final String inferenceComponentArn;

  /// The name of the inference component.
  final String inferenceComponentName;

  /// The time when the inference component was last updated.
  final DateTime lastModifiedTime;

  /// The name of the production variant that hosts the inference component.
  final String variantName;

  /// The status of the inference component.
  final InferenceComponentStatus? inferenceComponentStatus;

  InferenceComponentSummary({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointName,
    required this.inferenceComponentArn,
    required this.inferenceComponentName,
    required this.lastModifiedTime,
    required this.variantName,
    this.inferenceComponentStatus,
  });

  factory InferenceComponentSummary.fromJson(Map<String, dynamic> json) {
    return InferenceComponentSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointName: json['EndpointName'] as String,
      inferenceComponentArn: json['InferenceComponentArn'] as String,
      inferenceComponentName: json['InferenceComponentName'] as String,
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      variantName: json['VariantName'] as String,
      inferenceComponentStatus: (json['InferenceComponentStatus'] as String?)
          ?.let(InferenceComponentStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointName = this.endpointName;
    final inferenceComponentArn = this.inferenceComponentArn;
    final inferenceComponentName = this.inferenceComponentName;
    final lastModifiedTime = this.lastModifiedTime;
    final variantName = this.variantName;
    final inferenceComponentStatus = this.inferenceComponentStatus;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointName': endpointName,
      'InferenceComponentArn': inferenceComponentArn,
      'InferenceComponentName': inferenceComponentName,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'VariantName': variantName,
      if (inferenceComponentStatus != null)
        'InferenceComponentStatus': inferenceComponentStatus.value,
    };
  }
}

/// Specifies details about how containers in a multi-container endpoint are
/// run.
class InferenceExecutionConfig {
  /// How containers in a multi-container are run. The following values are valid.
  ///
  /// <ul>
  /// <li>
  /// <code>SERIAL</code> - Containers run as a serial pipeline.
  /// </li>
  /// <li>
  /// <code>DIRECT</code> - Only the individual container that you specify is run.
  /// </li>
  /// </ul>
  final InferenceExecutionMode mode;

  InferenceExecutionConfig({
    required this.mode,
  });

  factory InferenceExecutionConfig.fromJson(Map<String, dynamic> json) {
    return InferenceExecutionConfig(
      mode: InferenceExecutionMode.fromString((json['Mode'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final mode = this.mode;
    return {
      'Mode': mode.value,
    };
  }
}

enum InferenceExecutionMode {
  serial('Serial'),
  direct('Direct'),
  ;

  final String value;

  const InferenceExecutionMode(this.value);

  static InferenceExecutionMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InferenceExecutionMode'));
}

/// The Amazon S3 location and configuration for storing inference request and
/// response data.
class InferenceExperimentDataStorageConfig {
  /// The Amazon S3 bucket where the inference request and response data is
  /// stored.
  final String destination;
  final CaptureContentTypeHeader? contentType;

  /// The Amazon Web Services Key Management Service key that Amazon SageMaker
  /// uses to encrypt captured data at rest using Amazon S3 server-side
  /// encryption.
  final String? kmsKey;

  InferenceExperimentDataStorageConfig({
    required this.destination,
    this.contentType,
    this.kmsKey,
  });

  factory InferenceExperimentDataStorageConfig.fromJson(
      Map<String, dynamic> json) {
    return InferenceExperimentDataStorageConfig(
      destination: json['Destination'] as String,
      contentType: json['ContentType'] != null
          ? CaptureContentTypeHeader.fromJson(
              json['ContentType'] as Map<String, dynamic>)
          : null,
      kmsKey: json['KmsKey'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destination = this.destination;
    final contentType = this.contentType;
    final kmsKey = this.kmsKey;
    return {
      'Destination': destination,
      if (contentType != null) 'ContentType': contentType,
      if (kmsKey != null) 'KmsKey': kmsKey,
    };
  }
}

/// The start and end times of an inference experiment.
///
/// The maximum duration that you can set for an inference experiment is 30
/// days.
class InferenceExperimentSchedule {
  /// The timestamp at which the inference experiment ended or will end.
  final DateTime? endTime;

  /// The timestamp at which the inference experiment started or will start.
  final DateTime? startTime;

  InferenceExperimentSchedule({
    this.endTime,
    this.startTime,
  });

  factory InferenceExperimentSchedule.fromJson(Map<String, dynamic> json) {
    return InferenceExperimentSchedule(
      endTime: timeStampFromJson(json['EndTime']),
      startTime: timeStampFromJson(json['StartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final endTime = this.endTime;
    final startTime = this.startTime;
    return {
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
    };
  }
}

enum InferenceExperimentStatus {
  creating('Creating'),
  created('Created'),
  updating('Updating'),
  running('Running'),
  starting('Starting'),
  stopping('Stopping'),
  completed('Completed'),
  cancelled('Cancelled'),
  ;

  final String value;

  const InferenceExperimentStatus(this.value);

  static InferenceExperimentStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InferenceExperimentStatus'));
}

enum InferenceExperimentStopDesiredState {
  completed('Completed'),
  cancelled('Cancelled'),
  ;

  final String value;

  const InferenceExperimentStopDesiredState(this.value);

  static InferenceExperimentStopDesiredState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InferenceExperimentStopDesiredState'));
}

/// Lists a summary of properties of an inference experiment.
class InferenceExperimentSummary {
  /// The timestamp at which the inference experiment was created.
  final DateTime creationTime;

  /// The timestamp when you last modified the inference experiment.
  final DateTime lastModifiedTime;

  /// The name of the inference experiment.
  final String name;

  /// The status of the inference experiment.
  final InferenceExperimentStatus status;

  /// The type of the inference experiment.
  final InferenceExperimentType type;

  /// The timestamp at which the inference experiment was completed.
  final DateTime? completionTime;

  /// The description of the inference experiment.
  final String? description;

  /// The ARN of the IAM role that Amazon SageMaker can assume to access model
  /// artifacts and container images, and manage Amazon SageMaker Inference
  /// endpoints for model deployment.
  final String? roleArn;

  /// The duration for which the inference experiment ran or will run.
  ///
  /// The maximum duration that you can set for an inference experiment is 30
  /// days.
  final InferenceExperimentSchedule? schedule;

  /// The error message for the inference experiment status result.
  final String? statusReason;

  InferenceExperimentSummary({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.name,
    required this.status,
    required this.type,
    this.completionTime,
    this.description,
    this.roleArn,
    this.schedule,
    this.statusReason,
  });

  factory InferenceExperimentSummary.fromJson(Map<String, dynamic> json) {
    return InferenceExperimentSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      name: json['Name'] as String,
      status: InferenceExperimentStatus.fromString((json['Status'] as String)),
      type: InferenceExperimentType.fromString((json['Type'] as String)),
      completionTime: timeStampFromJson(json['CompletionTime']),
      description: json['Description'] as String?,
      roleArn: json['RoleArn'] as String?,
      schedule: json['Schedule'] != null
          ? InferenceExperimentSchedule.fromJson(
              json['Schedule'] as Map<String, dynamic>)
          : null,
      statusReason: json['StatusReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final name = this.name;
    final status = this.status;
    final type = this.type;
    final completionTime = this.completionTime;
    final description = this.description;
    final roleArn = this.roleArn;
    final schedule = this.schedule;
    final statusReason = this.statusReason;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'Name': name,
      'Status': status.value,
      'Type': type.value,
      if (completionTime != null)
        'CompletionTime': unixTimestampToJson(completionTime),
      if (description != null) 'Description': description,
      if (roleArn != null) 'RoleArn': roleArn,
      if (schedule != null) 'Schedule': schedule,
      if (statusReason != null) 'StatusReason': statusReason,
    };
  }
}

enum InferenceExperimentType {
  shadowMode('ShadowMode'),
  ;

  final String value;

  const InferenceExperimentType(this.value);

  static InferenceExperimentType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum InferenceExperimentType'));
}

/// The metrics for an existing endpoint compared in an Inference Recommender
/// job.
class InferenceMetrics {
  /// The expected maximum number of requests per minute for the instance.
  final int maxInvocations;

  /// The expected model latency at maximum invocations per minute for the
  /// instance.
  final int modelLatency;

  InferenceMetrics({
    required this.maxInvocations,
    required this.modelLatency,
  });

  factory InferenceMetrics.fromJson(Map<String, dynamic> json) {
    return InferenceMetrics(
      maxInvocations: json['MaxInvocations'] as int,
      modelLatency: json['ModelLatency'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxInvocations = this.maxInvocations;
    final modelLatency = this.modelLatency;
    return {
      'MaxInvocations': maxInvocations,
      'ModelLatency': modelLatency,
    };
  }
}

/// A list of recommendations made by Amazon SageMaker Inference Recommender.
class InferenceRecommendation {
  /// Defines the endpoint configuration parameters.
  final EndpointOutputConfiguration endpointConfiguration;

  /// The metrics used to decide what recommendation to make.
  final RecommendationMetrics metrics;

  /// Defines the model configuration.
  final ModelConfiguration modelConfiguration;

  /// A timestamp that shows when the benchmark completed.
  final DateTime? invocationEndTime;

  /// A timestamp that shows when the benchmark started.
  final DateTime? invocationStartTime;

  /// The recommendation ID which uniquely identifies each recommendation.
  final String? recommendationId;

  InferenceRecommendation({
    required this.endpointConfiguration,
    required this.metrics,
    required this.modelConfiguration,
    this.invocationEndTime,
    this.invocationStartTime,
    this.recommendationId,
  });

  factory InferenceRecommendation.fromJson(Map<String, dynamic> json) {
    return InferenceRecommendation(
      endpointConfiguration: EndpointOutputConfiguration.fromJson(
          json['EndpointConfiguration'] as Map<String, dynamic>),
      metrics: RecommendationMetrics.fromJson(
          json['Metrics'] as Map<String, dynamic>),
      modelConfiguration: ModelConfiguration.fromJson(
          json['ModelConfiguration'] as Map<String, dynamic>),
      invocationEndTime: timeStampFromJson(json['InvocationEndTime']),
      invocationStartTime: timeStampFromJson(json['InvocationStartTime']),
      recommendationId: json['RecommendationId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointConfiguration = this.endpointConfiguration;
    final metrics = this.metrics;
    final modelConfiguration = this.modelConfiguration;
    final invocationEndTime = this.invocationEndTime;
    final invocationStartTime = this.invocationStartTime;
    final recommendationId = this.recommendationId;
    return {
      'EndpointConfiguration': endpointConfiguration,
      'Metrics': metrics,
      'ModelConfiguration': modelConfiguration,
      if (invocationEndTime != null)
        'InvocationEndTime': unixTimestampToJson(invocationEndTime),
      if (invocationStartTime != null)
        'InvocationStartTime': unixTimestampToJson(invocationStartTime),
      if (recommendationId != null) 'RecommendationId': recommendationId,
    };
  }
}

/// A structure that contains a list of recommendation jobs.
class InferenceRecommendationsJob {
  /// A timestamp that shows when the job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the recommendation job.
  final String jobArn;

  /// The job description.
  final String jobDescription;

  /// The name of the job.
  final String jobName;

  /// The recommendation job type.
  final RecommendationJobType jobType;

  /// A timestamp that shows when the job was last modified.
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
  /// to perform tasks on your behalf.
  final String roleArn;

  /// The status of the job.
  final RecommendationJobStatus status;

  /// A timestamp that shows when the job completed.
  final DateTime? completionTime;

  /// If the job fails, provides information why the job failed.
  final String? failureReason;

  /// The name of the created model.
  final String? modelName;

  /// The Amazon Resource Name (ARN) of a versioned model package.
  final String? modelPackageVersionArn;

  /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload
  /// is stored. This path must point to a single gzip compressed tar archive
  /// (.tar.gz suffix).
  final String? samplePayloadUrl;

  InferenceRecommendationsJob({
    required this.creationTime,
    required this.jobArn,
    required this.jobDescription,
    required this.jobName,
    required this.jobType,
    required this.lastModifiedTime,
    required this.roleArn,
    required this.status,
    this.completionTime,
    this.failureReason,
    this.modelName,
    this.modelPackageVersionArn,
    this.samplePayloadUrl,
  });

  factory InferenceRecommendationsJob.fromJson(Map<String, dynamic> json) {
    return InferenceRecommendationsJob(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobArn: json['JobArn'] as String,
      jobDescription: json['JobDescription'] as String,
      jobName: json['JobName'] as String,
      jobType: RecommendationJobType.fromString((json['JobType'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      roleArn: json['RoleArn'] as String,
      status: RecommendationJobStatus.fromString((json['Status'] as String)),
      completionTime: timeStampFromJson(json['CompletionTime']),
      failureReason: json['FailureReason'] as String?,
      modelName: json['ModelName'] as String?,
      modelPackageVersionArn: json['ModelPackageVersionArn'] as String?,
      samplePayloadUrl: json['SamplePayloadUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobArn = this.jobArn;
    final jobDescription = this.jobDescription;
    final jobName = this.jobName;
    final jobType = this.jobType;
    final lastModifiedTime = this.lastModifiedTime;
    final roleArn = this.roleArn;
    final status = this.status;
    final completionTime = this.completionTime;
    final failureReason = this.failureReason;
    final modelName = this.modelName;
    final modelPackageVersionArn = this.modelPackageVersionArn;
    final samplePayloadUrl = this.samplePayloadUrl;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobArn': jobArn,
      'JobDescription': jobDescription,
      'JobName': jobName,
      'JobType': jobType.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'RoleArn': roleArn,
      'Status': status.value,
      if (completionTime != null)
        'CompletionTime': unixTimestampToJson(completionTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (modelName != null) 'ModelName': modelName,
      if (modelPackageVersionArn != null)
        'ModelPackageVersionArn': modelPackageVersionArn,
      if (samplePayloadUrl != null) 'SamplePayloadUrl': samplePayloadUrl,
    };
  }
}

/// A returned array object for the <code>Steps</code> response field in the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListInferenceRecommendationsJobSteps.html">ListInferenceRecommendationsJobSteps</a>
/// API command.
class InferenceRecommendationsJobStep {
  /// The name of the Inference Recommender job.
  final String jobName;

  /// The current status of the benchmark.
  final RecommendationJobStatus status;

  /// The type of the subtask.
  ///
  /// <code>BENCHMARK</code>: Evaluate the performance of your model on different
  /// instance types.
  final RecommendationStepType stepType;

  /// The details for a specific benchmark.
  final RecommendationJobInferenceBenchmark? inferenceBenchmark;

  InferenceRecommendationsJobStep({
    required this.jobName,
    required this.status,
    required this.stepType,
    this.inferenceBenchmark,
  });

  factory InferenceRecommendationsJobStep.fromJson(Map<String, dynamic> json) {
    return InferenceRecommendationsJobStep(
      jobName: json['JobName'] as String,
      status: RecommendationJobStatus.fromString((json['Status'] as String)),
      stepType: RecommendationStepType.fromString((json['StepType'] as String)),
      inferenceBenchmark: json['InferenceBenchmark'] != null
          ? RecommendationJobInferenceBenchmark.fromJson(
              json['InferenceBenchmark'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final jobName = this.jobName;
    final status = this.status;
    final stepType = this.stepType;
    final inferenceBenchmark = this.inferenceBenchmark;
    return {
      'JobName': jobName,
      'Status': status.value,
      'StepType': stepType.value,
      if (inferenceBenchmark != null) 'InferenceBenchmark': inferenceBenchmark,
    };
  }
}

/// Defines how to perform inference generation after a training job is run.
class InferenceSpecification {
  /// The Amazon ECR registry path of the Docker image that contains the inference
  /// code.
  final List<ModelPackageContainerDefinition> containers;

  /// The supported MIME types for the input data.
  final List<String>? supportedContentTypes;

  /// A list of the instance types that are used to generate inferences in
  /// real-time.
  ///
  /// This parameter is required for unversioned models, and optional for
  /// versioned models.
  final List<ProductionVariantInstanceType>?
      supportedRealtimeInferenceInstanceTypes;

  /// The supported MIME types for the output data.
  final List<String>? supportedResponseMIMETypes;

  /// A list of the instance types on which a transformation job can be run or on
  /// which an endpoint can be deployed.
  ///
  /// This parameter is required for unversioned models, and optional for
  /// versioned models.
  final List<TransformInstanceType>? supportedTransformInstanceTypes;

  InferenceSpecification({
    required this.containers,
    this.supportedContentTypes,
    this.supportedRealtimeInferenceInstanceTypes,
    this.supportedResponseMIMETypes,
    this.supportedTransformInstanceTypes,
  });

  factory InferenceSpecification.fromJson(Map<String, dynamic> json) {
    return InferenceSpecification(
      containers: (json['Containers'] as List)
          .nonNulls
          .map((e) => ModelPackageContainerDefinition.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      supportedContentTypes: (json['SupportedContentTypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      supportedRealtimeInferenceInstanceTypes: (json[
              'SupportedRealtimeInferenceInstanceTypes'] as List?)
          ?.nonNulls
          .map((e) => ProductionVariantInstanceType.fromString((e as String)))
          .toList(),
      supportedResponseMIMETypes: (json['SupportedResponseMIMETypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      supportedTransformInstanceTypes:
          (json['SupportedTransformInstanceTypes'] as List?)
              ?.nonNulls
              .map((e) => TransformInstanceType.fromString((e as String)))
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final containers = this.containers;
    final supportedContentTypes = this.supportedContentTypes;
    final supportedRealtimeInferenceInstanceTypes =
        this.supportedRealtimeInferenceInstanceTypes;
    final supportedResponseMIMETypes = this.supportedResponseMIMETypes;
    final supportedTransformInstanceTypes =
        this.supportedTransformInstanceTypes;
    return {
      'Containers': containers,
      if (supportedContentTypes != null)
        'SupportedContentTypes': supportedContentTypes,
      if (supportedRealtimeInferenceInstanceTypes != null)
        'SupportedRealtimeInferenceInstanceTypes':
            supportedRealtimeInferenceInstanceTypes
                .map((e) => e.value)
                .toList(),
      if (supportedResponseMIMETypes != null)
        'SupportedResponseMIMETypes': supportedResponseMIMETypes,
      if (supportedTransformInstanceTypes != null)
        'SupportedTransformInstanceTypes':
            supportedTransformInstanceTypes.map((e) => e.value).toList(),
    };
  }
}

/// Configuration information for the infrastructure health check of a training
/// job. A SageMaker-provided health check tests the health of instance hardware
/// and cluster network connectivity.
class InfraCheckConfig {
  /// Enables an infrastructure health check.
  final bool? enableInfraCheck;

  InfraCheckConfig({
    this.enableInfraCheck,
  });

  factory InfraCheckConfig.fromJson(Map<String, dynamic> json) {
    return InfraCheckConfig(
      enableInfraCheck: json['EnableInfraCheck'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInfraCheck = this.enableInfraCheck;
    return {
      if (enableInfraCheck != null) 'EnableInfraCheck': enableInfraCheck,
    };
  }
}

/// Contains information about the location of input model artifacts, the name
/// and shape of the expected data inputs, and the framework in which the model
/// was trained.
class InputConfig {
  /// Identifies the framework in which the model was trained. For example:
  /// TENSORFLOW.
  final Framework framework;

  /// The S3 path where the model artifacts, which result from model training, are
  /// stored. This path must point to a single gzip compressed tar archive
  /// (.tar.gz suffix).
  final String s3Uri;

  /// Specifies the name and shape of the expected data inputs for your trained
  /// model with a JSON dictionary form. The data inputs are
  /// <code>Framework</code> specific.
  ///
  /// <ul>
  /// <li>
  /// <code>TensorFlow</code>: You must specify the name and shape (NHWC format)
  /// of the expected data inputs using a dictionary format for your trained
  /// model. The dictionary formats required for the console and CLI are
  /// different.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input":[1,1024,1024,3]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input\":[1,1024,1024,3]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Examples for two inputs:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"data1": [1,28,28,1],
  /// "data2":[1,28,28,1]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"data1\": [1,28,28,1],
  /// \"data2\":[1,28,28,1]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <code>KERAS</code>: You must specify the name and shape (NCHW format) of
  /// expected data inputs using a dictionary format for your trained model. Note
  /// that while Keras model artifacts should be uploaded in NHWC (channel-last)
  /// format, <code>DataInputConfig</code> should be specified in NCHW
  /// (channel-first) format. The dictionary formats required for the console and
  /// CLI are different.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input_1":[1,3,224,224]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input_1\":[1,3,224,224]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Examples for two inputs:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input_1": [1,3,224,224],
  /// "input_2":[1,3,224,224]} </code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input_1\": [1,3,224,224],
  /// \"input_2\":[1,3,224,224]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <code>MXNET/ONNX/DARKNET</code>: You must specify the name and shape (NCHW
  /// format) of the expected data inputs in order using a dictionary format for
  /// your trained model. The dictionary formats required for the console and CLI
  /// are different.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"data":[1,3,1024,1024]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"data\":[1,3,1024,1024]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Examples for two inputs:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"var1": [1,1,28,28], "var2":[1,1,28,28]}
  /// </code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"var1\": [1,1,28,28], \"var2\":[1,1,28,28]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul> </li>
  /// <li>
  /// <code>PyTorch</code>: You can either specify the name and shape (NCHW
  /// format) of expected data inputs in order using a dictionary format for your
  /// trained model or you can specify the shape only using a list format. The
  /// dictionary formats required for the console and CLI are different. The list
  /// formats for the console and CLI are the same.
  ///
  /// <ul>
  /// <li>
  /// Examples for one input in dictionary format:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input0":[1,3,224,224]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input0\":[1,3,224,224]}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Example for one input in list format: <code>[[1,3,224,224]]</code>
  /// </li>
  /// <li>
  /// Examples for two inputs in dictionary format:
  ///
  /// <ul>
  /// <li>
  /// If using the console, <code>{"input0":[1,3,224,224],
  /// "input1":[1,3,224,224]}</code>
  /// </li>
  /// <li>
  /// If using the CLI, <code>{\"input0\":[1,3,224,224], \"input1\":[1,3,224,224]}
  /// </code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Example for two inputs in list format: <code>[[1,3,224,224],
  /// [1,3,224,224]]</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>XGBOOST</code>: input data name and shape are not needed.
  /// </li>
  /// </ul>
  /// <code>DataInputConfig</code> supports the following parameters for
  /// <code>CoreML</code> <code>TargetDevice</code> (ML Model format):
  ///
  /// <ul>
  /// <li>
  /// <code>shape</code>: Input shape, for example <code>{"input_1": {"shape":
  /// [1,224,224,3]}}</code>. In addition to static input shapes, CoreML converter
  /// supports Flexible input shapes:
  ///
  /// <ul>
  /// <li>
  /// Range Dimension. You can use the Range Dimension feature if you know the
  /// input shape will be within some specific interval in that dimension, for
  /// example: <code>{"input_1": {"shape": ["1..10", 224, 224, 3]}}</code>
  /// </li>
  /// <li>
  /// Enumerated shapes. Sometimes, the models are trained to work only on a
  /// select set of inputs. You can enumerate all supported input shapes, for
  /// example: <code>{"input_1": {"shape": [[1, 224, 224, 3], [1, 160, 160,
  /// 3]]}}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>default_shape</code>: Default input shape. You can set a default shape
  /// during conversion for both Range Dimension and Enumerated Shapes. For
  /// example <code>{"input_1": {"shape": ["1..10", 224, 224, 3], "default_shape":
  /// [1, 224, 224, 3]}}</code>
  /// </li>
  /// <li>
  /// <code>type</code>: Input type. Allowed values: <code>Image</code> and
  /// <code>Tensor</code>. By default, the converter generates an ML Model with
  /// inputs of type Tensor (MultiArray). User can set input type to be Image.
  /// Image input type requires additional input parameters such as
  /// <code>bias</code> and <code>scale</code>.
  /// </li>
  /// <li>
  /// <code>bias</code>: If the input type is an Image, you need to provide the
  /// bias vector.
  /// </li>
  /// <li>
  /// <code>scale</code>: If the input type is an Image, you need to provide a
  /// scale factor.
  /// </li>
  /// </ul>
  /// CoreML <code>ClassifierConfig</code> parameters can be specified using <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html">OutputConfig</a>
  /// <code>CompilerOptions</code>. CoreML converter supports Tensorflow and
  /// PyTorch models. CoreML conversion examples:
  ///
  /// <ul>
  /// <li>
  /// Tensor type input:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"input_1": {"shape": [[1,224,224,3],
  /// [1,160,160,3]], "default_shape": [1,224,224,3]}}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Tensor type input without input name (PyTorch):
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]],
  /// "default_shape": [1,3,224,224]}]</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Image type input:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"input_1": {"shape": [[1,224,224,3],
  /// [1,160,160,3]], "default_shape": [1,224,224,3], "type": "Image", "bias":
  /// [-1,-1,-1], "scale": 0.007843137255}}</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Image type input without input name (PyTorch):
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]],
  /// "default_shape": [1,3,224,224], "type": "Image", "bias": [-1,-1,-1],
  /// "scale": 0.007843137255}]</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// Depending on the model format, <code>DataInputConfig</code> requires the
  /// following parameters for <code>ml_eia2</code> <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-TargetDevice">OutputConfig:TargetDevice</a>.
  ///
  /// <ul>
  /// <li>
  /// For TensorFlow models saved in the SavedModel format, specify the input
  /// names from <code>signature_def_key</code> and the input model shapes for
  /// <code>DataInputConfig</code>. Specify the <code>signature_def_key</code> in
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions">
  /// <code>OutputConfig:CompilerOptions</code> </a> if the model does not use
  /// TensorFlow's default signature def key. For example:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"inputs": [1, 224, 224, 3]}</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"signature_def_key": "serving_custom"}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// For TensorFlow models saved as a frozen graph, specify the input tensor
  /// names and shapes in <code>DataInputConfig</code> and the output tensor names
  /// for <code>output_names</code> in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions">
  /// <code>OutputConfig:CompilerOptions</code> </a>. For example:
  ///
  /// <ul>
  /// <li>
  /// <code>"DataInputConfig": {"input_tensor:0": [1, 224, 224, 3]}</code>
  /// </li>
  /// <li>
  /// <code>"CompilerOptions": {"output_names": ["output_tensor:0"]}</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  final String? dataInputConfig;

  /// Specifies the framework version to use. This API field is only supported for
  /// the MXNet, PyTorch, TensorFlow and TensorFlow Lite frameworks.
  ///
  /// For information about framework versions supported for cloud targets and
  /// edge devices, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-cloud.html">Cloud
  /// Supported Instance Types and Frameworks</a> and <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-devices-edge-frameworks.html">Edge
  /// Supported Frameworks</a>.
  final String? frameworkVersion;

  InputConfig({
    required this.framework,
    required this.s3Uri,
    this.dataInputConfig,
    this.frameworkVersion,
  });

  factory InputConfig.fromJson(Map<String, dynamic> json) {
    return InputConfig(
      framework: Framework.fromString((json['Framework'] as String)),
      s3Uri: json['S3Uri'] as String,
      dataInputConfig: json['DataInputConfig'] as String?,
      frameworkVersion: json['FrameworkVersion'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final framework = this.framework;
    final s3Uri = this.s3Uri;
    final dataInputConfig = this.dataInputConfig;
    final frameworkVersion = this.frameworkVersion;
    return {
      'Framework': framework.value,
      'S3Uri': s3Uri,
      if (dataInputConfig != null) 'DataInputConfig': dataInputConfig,
      if (frameworkVersion != null) 'FrameworkVersion': frameworkVersion,
    };
  }
}

enum InputMode {
  pipe('Pipe'),
  file('File'),
  ;

  final String value;

  const InputMode(this.value);

  static InputMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum InputMode'));
}

/// Defines an instance group for heterogeneous cluster training. When
/// requesting a training job using the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a>
/// API, you can configure multiple instance groups .
class InstanceGroup {
  /// Specifies the number of instances of the instance group.
  final int instanceCount;

  /// Specifies the name of the instance group.
  final String instanceGroupName;

  /// Specifies the instance type of the instance group.
  final TrainingInstanceType instanceType;

  InstanceGroup({
    required this.instanceCount,
    required this.instanceGroupName,
    required this.instanceType,
  });

  factory InstanceGroup.fromJson(Map<String, dynamic> json) {
    return InstanceGroup(
      instanceCount: json['InstanceCount'] as int,
      instanceGroupName: json['InstanceGroupName'] as String,
      instanceType:
          TrainingInstanceType.fromString((json['InstanceType'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceGroupName = this.instanceGroupName;
    final instanceType = this.instanceType;
    return {
      'InstanceCount': instanceCount,
      'InstanceGroupName': instanceGroupName,
      'InstanceType': instanceType.value,
    };
  }
}

/// Information on the IMDS configuration of the notebook instance
class InstanceMetadataServiceConfiguration {
  /// Indicates the minimum IMDS version that the notebook instance supports. When
  /// passed as part of <code>CreateNotebookInstance</code>, if no value is
  /// selected, then it defaults to IMDSv1. This means that both IMDSv1 and IMDSv2
  /// are supported. If passed as part of <code>UpdateNotebookInstance</code>,
  /// there is no default.
  final String minimumInstanceMetadataServiceVersion;

  InstanceMetadataServiceConfiguration({
    required this.minimumInstanceMetadataServiceVersion,
  });

  factory InstanceMetadataServiceConfiguration.fromJson(
      Map<String, dynamic> json) {
    return InstanceMetadataServiceConfiguration(
      minimumInstanceMetadataServiceVersion:
          json['MinimumInstanceMetadataServiceVersion'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final minimumInstanceMetadataServiceVersion =
        this.minimumInstanceMetadataServiceVersion;
    return {
      'MinimumInstanceMetadataServiceVersion':
          minimumInstanceMetadataServiceVersion,
    };
  }
}

enum InstanceType {
  mlT2Medium('ml.t2.medium'),
  mlT2Large('ml.t2.large'),
  mlT2Xlarge('ml.t2.xlarge'),
  mlT2_2xlarge('ml.t2.2xlarge'),
  mlT3Medium('ml.t3.medium'),
  mlT3Large('ml.t3.large'),
  mlT3Xlarge('ml.t3.xlarge'),
  mlT3_2xlarge('ml.t3.2xlarge'),
  mlM4Xlarge('ml.m4.xlarge'),
  mlM4_2xlarge('ml.m4.2xlarge'),
  mlM4_4xlarge('ml.m4.4xlarge'),
  mlM4_10xlarge('ml.m4.10xlarge'),
  mlM4_16xlarge('ml.m4.16xlarge'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlM5dLarge('ml.m5d.large'),
  mlM5dXlarge('ml.m5d.xlarge'),
  mlM5d_2xlarge('ml.m5d.2xlarge'),
  mlM5d_4xlarge('ml.m5d.4xlarge'),
  mlM5d_8xlarge('ml.m5d.8xlarge'),
  mlM5d_12xlarge('ml.m5d.12xlarge'),
  mlM5d_16xlarge('ml.m5d.16xlarge'),
  mlM5d_24xlarge('ml.m5d.24xlarge'),
  mlC4Xlarge('ml.c4.xlarge'),
  mlC4_2xlarge('ml.c4.2xlarge'),
  mlC4_4xlarge('ml.c4.4xlarge'),
  mlC4_8xlarge('ml.c4.8xlarge'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlC5dXlarge('ml.c5d.xlarge'),
  mlC5d_2xlarge('ml.c5d.2xlarge'),
  mlC5d_4xlarge('ml.c5d.4xlarge'),
  mlC5d_9xlarge('ml.c5d.9xlarge'),
  mlC5d_18xlarge('ml.c5d.18xlarge'),
  mlP2Xlarge('ml.p2.xlarge'),
  mlP2_8xlarge('ml.p2.8xlarge'),
  mlP2_16xlarge('ml.p2.16xlarge'),
  mlP3_2xlarge('ml.p3.2xlarge'),
  mlP3_8xlarge('ml.p3.8xlarge'),
  mlP3_16xlarge('ml.p3.16xlarge'),
  mlP3dn_24xlarge('ml.p3dn.24xlarge'),
  mlG4dnXlarge('ml.g4dn.xlarge'),
  mlG4dn_2xlarge('ml.g4dn.2xlarge'),
  mlG4dn_4xlarge('ml.g4dn.4xlarge'),
  mlG4dn_8xlarge('ml.g4dn.8xlarge'),
  mlG4dn_12xlarge('ml.g4dn.12xlarge'),
  mlG4dn_16xlarge('ml.g4dn.16xlarge'),
  mlR5Large('ml.r5.large'),
  mlR5Xlarge('ml.r5.xlarge'),
  mlR5_2xlarge('ml.r5.2xlarge'),
  mlR5_4xlarge('ml.r5.4xlarge'),
  mlR5_8xlarge('ml.r5.8xlarge'),
  mlR5_12xlarge('ml.r5.12xlarge'),
  mlR5_16xlarge('ml.r5.16xlarge'),
  mlR5_24xlarge('ml.r5.24xlarge'),
  mlG5Xlarge('ml.g5.xlarge'),
  mlG5_2xlarge('ml.g5.2xlarge'),
  mlG5_4xlarge('ml.g5.4xlarge'),
  mlG5_8xlarge('ml.g5.8xlarge'),
  mlG5_16xlarge('ml.g5.16xlarge'),
  mlG5_12xlarge('ml.g5.12xlarge'),
  mlG5_24xlarge('ml.g5.24xlarge'),
  mlG5_48xlarge('ml.g5.48xlarge'),
  mlInf1Xlarge('ml.inf1.xlarge'),
  mlInf1_2xlarge('ml.inf1.2xlarge'),
  mlInf1_6xlarge('ml.inf1.6xlarge'),
  mlInf1_24xlarge('ml.inf1.24xlarge'),
  mlP4d_24xlarge('ml.p4d.24xlarge'),
  mlP4de_24xlarge('ml.p4de.24xlarge'),
  mlP5_48xlarge('ml.p5.48xlarge'),
  mlM6iLarge('ml.m6i.large'),
  mlM6iXlarge('ml.m6i.xlarge'),
  mlM6i_2xlarge('ml.m6i.2xlarge'),
  mlM6i_4xlarge('ml.m6i.4xlarge'),
  mlM6i_8xlarge('ml.m6i.8xlarge'),
  mlM6i_12xlarge('ml.m6i.12xlarge'),
  mlM6i_16xlarge('ml.m6i.16xlarge'),
  mlM6i_24xlarge('ml.m6i.24xlarge'),
  mlM6i_32xlarge('ml.m6i.32xlarge'),
  mlM7iLarge('ml.m7i.large'),
  mlM7iXlarge('ml.m7i.xlarge'),
  mlM7i_2xlarge('ml.m7i.2xlarge'),
  mlM7i_4xlarge('ml.m7i.4xlarge'),
  mlM7i_8xlarge('ml.m7i.8xlarge'),
  mlM7i_12xlarge('ml.m7i.12xlarge'),
  mlM7i_16xlarge('ml.m7i.16xlarge'),
  mlM7i_24xlarge('ml.m7i.24xlarge'),
  mlM7i_48xlarge('ml.m7i.48xlarge'),
  mlC6iLarge('ml.c6i.large'),
  mlC6iXlarge('ml.c6i.xlarge'),
  mlC6i_2xlarge('ml.c6i.2xlarge'),
  mlC6i_4xlarge('ml.c6i.4xlarge'),
  mlC6i_8xlarge('ml.c6i.8xlarge'),
  mlC6i_12xlarge('ml.c6i.12xlarge'),
  mlC6i_16xlarge('ml.c6i.16xlarge'),
  mlC6i_24xlarge('ml.c6i.24xlarge'),
  mlC6i_32xlarge('ml.c6i.32xlarge'),
  mlC7iLarge('ml.c7i.large'),
  mlC7iXlarge('ml.c7i.xlarge'),
  mlC7i_2xlarge('ml.c7i.2xlarge'),
  mlC7i_4xlarge('ml.c7i.4xlarge'),
  mlC7i_8xlarge('ml.c7i.8xlarge'),
  mlC7i_12xlarge('ml.c7i.12xlarge'),
  mlC7i_16xlarge('ml.c7i.16xlarge'),
  mlC7i_24xlarge('ml.c7i.24xlarge'),
  mlC7i_48xlarge('ml.c7i.48xlarge'),
  mlR6iLarge('ml.r6i.large'),
  mlR6iXlarge('ml.r6i.xlarge'),
  mlR6i_2xlarge('ml.r6i.2xlarge'),
  mlR6i_4xlarge('ml.r6i.4xlarge'),
  mlR6i_8xlarge('ml.r6i.8xlarge'),
  mlR6i_12xlarge('ml.r6i.12xlarge'),
  mlR6i_16xlarge('ml.r6i.16xlarge'),
  mlR6i_24xlarge('ml.r6i.24xlarge'),
  mlR6i_32xlarge('ml.r6i.32xlarge'),
  mlR7iLarge('ml.r7i.large'),
  mlR7iXlarge('ml.r7i.xlarge'),
  mlR7i_2xlarge('ml.r7i.2xlarge'),
  mlR7i_4xlarge('ml.r7i.4xlarge'),
  mlR7i_8xlarge('ml.r7i.8xlarge'),
  mlR7i_12xlarge('ml.r7i.12xlarge'),
  mlR7i_16xlarge('ml.r7i.16xlarge'),
  mlR7i_24xlarge('ml.r7i.24xlarge'),
  mlR7i_48xlarge('ml.r7i.48xlarge'),
  mlM6idLarge('ml.m6id.large'),
  mlM6idXlarge('ml.m6id.xlarge'),
  mlM6id_2xlarge('ml.m6id.2xlarge'),
  mlM6id_4xlarge('ml.m6id.4xlarge'),
  mlM6id_8xlarge('ml.m6id.8xlarge'),
  mlM6id_12xlarge('ml.m6id.12xlarge'),
  mlM6id_16xlarge('ml.m6id.16xlarge'),
  mlM6id_24xlarge('ml.m6id.24xlarge'),
  mlM6id_32xlarge('ml.m6id.32xlarge'),
  mlC6idLarge('ml.c6id.large'),
  mlC6idXlarge('ml.c6id.xlarge'),
  mlC6id_2xlarge('ml.c6id.2xlarge'),
  mlC6id_4xlarge('ml.c6id.4xlarge'),
  mlC6id_8xlarge('ml.c6id.8xlarge'),
  mlC6id_12xlarge('ml.c6id.12xlarge'),
  mlC6id_16xlarge('ml.c6id.16xlarge'),
  mlC6id_24xlarge('ml.c6id.24xlarge'),
  mlC6id_32xlarge('ml.c6id.32xlarge'),
  mlR6idLarge('ml.r6id.large'),
  mlR6idXlarge('ml.r6id.xlarge'),
  mlR6id_2xlarge('ml.r6id.2xlarge'),
  mlR6id_4xlarge('ml.r6id.4xlarge'),
  mlR6id_8xlarge('ml.r6id.8xlarge'),
  mlR6id_12xlarge('ml.r6id.12xlarge'),
  mlR6id_16xlarge('ml.r6id.16xlarge'),
  mlR6id_24xlarge('ml.r6id.24xlarge'),
  mlR6id_32xlarge('ml.r6id.32xlarge'),
  mlG6Xlarge('ml.g6.xlarge'),
  mlG6_2xlarge('ml.g6.2xlarge'),
  mlG6_4xlarge('ml.g6.4xlarge'),
  mlG6_8xlarge('ml.g6.8xlarge'),
  mlG6_12xlarge('ml.g6.12xlarge'),
  mlG6_16xlarge('ml.g6.16xlarge'),
  mlG6_24xlarge('ml.g6.24xlarge'),
  mlG6_48xlarge('ml.g6.48xlarge'),
  ;

  final String value;

  const InstanceType(this.value);

  static InstanceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum InstanceType'));
}

/// For a hyperparameter of the integer type, specifies the range that a
/// hyperparameter tuning job searches.
class IntegerParameterRange {
  /// The maximum value of the hyperparameter to search.
  final String maxValue;

  /// The minimum value of the hyperparameter to search.
  final String minValue;

  /// The name of the hyperparameter to search.
  final String name;

  /// The scale that hyperparameter tuning uses to search the hyperparameter
  /// range. For information about choosing a hyperparameter scale, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter
  /// Scaling</a>. One of the following values:
  /// <dl> <dt>Auto</dt> <dd>
  /// SageMaker hyperparameter tuning chooses the best scale for the
  /// hyperparameter.
  /// </dd> <dt>Linear</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a linear scale.
  /// </dd> <dt>Logarithmic</dt> <dd>
  /// Hyperparameter tuning searches the values in the hyperparameter range by
  /// using a logarithmic scale.
  ///
  /// Logarithmic scaling works only for ranges that have only values greater than
  /// 0.
  /// </dd> </dl>
  final HyperParameterScalingType? scalingType;

  IntegerParameterRange({
    required this.maxValue,
    required this.minValue,
    required this.name,
    this.scalingType,
  });

  factory IntegerParameterRange.fromJson(Map<String, dynamic> json) {
    return IntegerParameterRange(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
      name: json['Name'] as String,
      scalingType: (json['ScalingType'] as String?)
          ?.let(HyperParameterScalingType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    final name = this.name;
    final scalingType = this.scalingType;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
      'Name': name,
      if (scalingType != null) 'ScalingType': scalingType.value,
    };
  }
}

/// Defines the possible values for an integer hyperparameter.
class IntegerParameterRangeSpecification {
  /// The maximum integer value allowed.
  final String maxValue;

  /// The minimum integer value allowed.
  final String minValue;

  IntegerParameterRangeSpecification({
    required this.maxValue,
    required this.minValue,
  });

  factory IntegerParameterRangeSpecification.fromJson(
      Map<String, dynamic> json) {
    return IntegerParameterRangeSpecification(
      maxValue: json['MaxValue'] as String,
      minValue: json['MinValue'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final maxValue = this.maxValue;
    final minValue = this.minValue;
    return {
      'MaxValue': maxValue,
      'MinValue': minValue,
    };
  }
}

enum JobType {
  training('TRAINING'),
  inference('INFERENCE'),
  notebookKernel('NOTEBOOK_KERNEL'),
  ;

  final String value;

  const JobType(this.value);

  static JobType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum JobType'));
}

enum JoinSource {
  input('Input'),
  none('None'),
  ;

  final String value;

  const JoinSource(this.value);

  static JoinSource fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum JoinSource'));
}

/// The configuration for the file system and kernels in a SageMaker image
/// running as a JupyterLab app. The <code>FileSystemConfig</code> object is not
/// supported.
class JupyterLabAppImageConfig {
  final ContainerConfig? containerConfig;
  final FileSystemConfig? fileSystemConfig;

  JupyterLabAppImageConfig({
    this.containerConfig,
    this.fileSystemConfig,
  });

  factory JupyterLabAppImageConfig.fromJson(Map<String, dynamic> json) {
    return JupyterLabAppImageConfig(
      containerConfig: json['ContainerConfig'] != null
          ? ContainerConfig.fromJson(
              json['ContainerConfig'] as Map<String, dynamic>)
          : null,
      fileSystemConfig: json['FileSystemConfig'] != null
          ? FileSystemConfig.fromJson(
              json['FileSystemConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final containerConfig = this.containerConfig;
    final fileSystemConfig = this.fileSystemConfig;
    return {
      if (containerConfig != null) 'ContainerConfig': containerConfig,
      if (fileSystemConfig != null) 'FileSystemConfig': fileSystemConfig,
    };
  }
}

/// The settings for the JupyterLab application.
class JupyterLabAppSettings {
  /// A list of Git repositories that SageMaker automatically displays to users
  /// for cloning in the JupyterLab application.
  final List<CodeRepository>? codeRepositories;

  /// A list of custom SageMaker images that are configured to run as a JupyterLab
  /// app.
  final List<CustomImage>? customImages;
  final ResourceSpec? defaultResourceSpec;

  /// The Amazon Resource Name (ARN) of the lifecycle configurations attached to
  /// the user profile or domain. To remove a lifecycle config, you must set
  /// <code>LifecycleConfigArns</code> to an empty list.
  final List<String>? lifecycleConfigArns;

  JupyterLabAppSettings({
    this.codeRepositories,
    this.customImages,
    this.defaultResourceSpec,
    this.lifecycleConfigArns,
  });

  factory JupyterLabAppSettings.fromJson(Map<String, dynamic> json) {
    return JupyterLabAppSettings(
      codeRepositories: (json['CodeRepositories'] as List?)
          ?.nonNulls
          .map((e) => CodeRepository.fromJson(e as Map<String, dynamic>))
          .toList(),
      customImages: (json['CustomImages'] as List?)
          ?.nonNulls
          .map((e) => CustomImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
      lifecycleConfigArns: (json['LifecycleConfigArns'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositories = this.codeRepositories;
    final customImages = this.customImages;
    final defaultResourceSpec = this.defaultResourceSpec;
    final lifecycleConfigArns = this.lifecycleConfigArns;
    return {
      if (codeRepositories != null) 'CodeRepositories': codeRepositories,
      if (customImages != null) 'CustomImages': customImages,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
      if (lifecycleConfigArns != null)
        'LifecycleConfigArns': lifecycleConfigArns,
    };
  }
}

/// The JupyterServer app settings.
class JupyterServerAppSettings {
  /// A list of Git repositories that SageMaker automatically displays to users
  /// for cloning in the JupyterServer application.
  final List<CodeRepository>? codeRepositories;

  /// The default instance type and the Amazon Resource Name (ARN) of the default
  /// SageMaker image used by the JupyterServer app. If you use the
  /// <code>LifecycleConfigArns</code> parameter, then this parameter is also
  /// required.
  final ResourceSpec? defaultResourceSpec;

  /// The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to
  /// the JupyterServerApp. If you use this parameter, the
  /// <code>DefaultResourceSpec</code> parameter is also required.
  /// <note>
  /// To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code>
  /// to an empty list.
  /// </note>
  final List<String>? lifecycleConfigArns;

  JupyterServerAppSettings({
    this.codeRepositories,
    this.defaultResourceSpec,
    this.lifecycleConfigArns,
  });

  factory JupyterServerAppSettings.fromJson(Map<String, dynamic> json) {
    return JupyterServerAppSettings(
      codeRepositories: (json['CodeRepositories'] as List?)
          ?.nonNulls
          .map((e) => CodeRepository.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
      lifecycleConfigArns: (json['LifecycleConfigArns'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositories = this.codeRepositories;
    final defaultResourceSpec = this.defaultResourceSpec;
    final lifecycleConfigArns = this.lifecycleConfigArns;
    return {
      if (codeRepositories != null) 'CodeRepositories': codeRepositories,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
      if (lifecycleConfigArns != null)
        'LifecycleConfigArns': lifecycleConfigArns,
    };
  }
}

/// The Amazon SageMaker Canvas application setting where you configure document
/// querying.
class KendraSettings {
  /// Describes whether the document querying feature is enabled or disabled in
  /// the Canvas application.
  final FeatureStatus? status;

  KendraSettings({
    this.status,
  });

  factory KendraSettings.fromJson(Map<String, dynamic> json) {
    return KendraSettings(
      status: (json['Status'] as String?)?.let(FeatureStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    return {
      if (status != null) 'Status': status.value,
    };
  }
}

/// The KernelGateway app settings.
class KernelGatewayAppSettings {
  /// A list of custom SageMaker images that are configured to run as a
  /// KernelGateway app.
  final List<CustomImage>? customImages;

  /// The default instance type and the Amazon Resource Name (ARN) of the default
  /// SageMaker image used by the KernelGateway app.
  /// <note>
  /// The Amazon SageMaker Studio UI does not use the default instance type value
  /// set here. The default instance type set here is used when Apps are created
  /// using the CLI or CloudFormation and the instance type parameter value is not
  /// passed.
  /// </note>
  final ResourceSpec? defaultResourceSpec;

  /// The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to
  /// the the user profile or domain.
  /// <note>
  /// To remove a Lifecycle Config, you must set <code>LifecycleConfigArns</code>
  /// to an empty list.
  /// </note>
  final List<String>? lifecycleConfigArns;

  KernelGatewayAppSettings({
    this.customImages,
    this.defaultResourceSpec,
    this.lifecycleConfigArns,
  });

  factory KernelGatewayAppSettings.fromJson(Map<String, dynamic> json) {
    return KernelGatewayAppSettings(
      customImages: (json['CustomImages'] as List?)
          ?.nonNulls
          .map((e) => CustomImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
      lifecycleConfigArns: (json['LifecycleConfigArns'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final customImages = this.customImages;
    final defaultResourceSpec = this.defaultResourceSpec;
    final lifecycleConfigArns = this.lifecycleConfigArns;
    return {
      if (customImages != null) 'CustomImages': customImages,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
      if (lifecycleConfigArns != null)
        'LifecycleConfigArns': lifecycleConfigArns,
    };
  }
}

/// The configuration for the file system and kernels in a SageMaker image
/// running as a KernelGateway app.
class KernelGatewayImageConfig {
  /// The specification of the Jupyter kernels in the image.
  final List<KernelSpec> kernelSpecs;

  /// The Amazon Elastic File System storage configuration for a SageMaker image.
  final FileSystemConfig? fileSystemConfig;

  KernelGatewayImageConfig({
    required this.kernelSpecs,
    this.fileSystemConfig,
  });

  factory KernelGatewayImageConfig.fromJson(Map<String, dynamic> json) {
    return KernelGatewayImageConfig(
      kernelSpecs: (json['KernelSpecs'] as List)
          .nonNulls
          .map((e) => KernelSpec.fromJson(e as Map<String, dynamic>))
          .toList(),
      fileSystemConfig: json['FileSystemConfig'] != null
          ? FileSystemConfig.fromJson(
              json['FileSystemConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final kernelSpecs = this.kernelSpecs;
    final fileSystemConfig = this.fileSystemConfig;
    return {
      'KernelSpecs': kernelSpecs,
      if (fileSystemConfig != null) 'FileSystemConfig': fileSystemConfig,
    };
  }
}

/// The specification of a Jupyter kernel.
class KernelSpec {
  /// The name of the Jupyter kernel in the image. This value is case sensitive.
  final String name;

  /// The display name of the kernel.
  final String? displayName;

  KernelSpec({
    required this.name,
    this.displayName,
  });

  factory KernelSpec.fromJson(Map<String, dynamic> json) {
    return KernelSpec(
      name: json['Name'] as String,
      displayName: json['DisplayName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final displayName = this.displayName;
    return {
      'Name': name,
      if (displayName != null) 'DisplayName': displayName,
    };
  }
}

/// Provides a breakdown of the number of objects labeled.
class LabelCounters {
  /// The total number of objects that could not be labeled due to an error.
  final int? failedNonRetryableError;

  /// The total number of objects labeled by a human worker.
  final int? humanLabeled;

  /// The total number of objects labeled by automated data labeling.
  final int? machineLabeled;

  /// The total number of objects labeled.
  final int? totalLabeled;

  /// The total number of objects not yet labeled.
  final int? unlabeled;

  LabelCounters({
    this.failedNonRetryableError,
    this.humanLabeled,
    this.machineLabeled,
    this.totalLabeled,
    this.unlabeled,
  });

  factory LabelCounters.fromJson(Map<String, dynamic> json) {
    return LabelCounters(
      failedNonRetryableError: json['FailedNonRetryableError'] as int?,
      humanLabeled: json['HumanLabeled'] as int?,
      machineLabeled: json['MachineLabeled'] as int?,
      totalLabeled: json['TotalLabeled'] as int?,
      unlabeled: json['Unlabeled'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final failedNonRetryableError = this.failedNonRetryableError;
    final humanLabeled = this.humanLabeled;
    final machineLabeled = this.machineLabeled;
    final totalLabeled = this.totalLabeled;
    final unlabeled = this.unlabeled;
    return {
      if (failedNonRetryableError != null)
        'FailedNonRetryableError': failedNonRetryableError,
      if (humanLabeled != null) 'HumanLabeled': humanLabeled,
      if (machineLabeled != null) 'MachineLabeled': machineLabeled,
      if (totalLabeled != null) 'TotalLabeled': totalLabeled,
      if (unlabeled != null) 'Unlabeled': unlabeled,
    };
  }
}

/// Provides counts for human-labeled tasks in the labeling job.
class LabelCountersForWorkteam {
  /// The total number of data objects labeled by a human worker.
  final int? humanLabeled;

  /// The total number of data objects that need to be labeled by a human worker.
  final int? pendingHuman;

  /// The total number of tasks in the labeling job.
  final int? total;

  LabelCountersForWorkteam({
    this.humanLabeled,
    this.pendingHuman,
    this.total,
  });

  factory LabelCountersForWorkteam.fromJson(Map<String, dynamic> json) {
    return LabelCountersForWorkteam(
      humanLabeled: json['HumanLabeled'] as int?,
      pendingHuman: json['PendingHuman'] as int?,
      total: json['Total'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanLabeled = this.humanLabeled;
    final pendingHuman = this.pendingHuman;
    final total = this.total;
    return {
      if (humanLabeled != null) 'HumanLabeled': humanLabeled,
      if (pendingHuman != null) 'PendingHuman': pendingHuman,
      if (total != null) 'Total': total,
    };
  }
}

/// Provides configuration information for auto-labeling of your data objects. A
/// <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to
/// use auto-labeling.
class LabelingJobAlgorithmsConfig {
  /// Specifies the Amazon Resource Name (ARN) of the algorithm used for
  /// auto-labeling. You must select one of the following ARNs:
  ///
  /// <ul>
  /// <li>
  /// <i>Image classification</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/image-classification</code>
  /// </li>
  /// <li>
  /// <i>Text classification</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/text-classification</code>
  /// </li>
  /// <li>
  /// <i>Object detection</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/object-detection</code>
  /// </li>
  /// <li>
  /// <i>Semantic Segmentation</i>
  ///
  /// <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/semantic-segmentation</code>
  /// </li>
  /// </ul>
  final String labelingJobAlgorithmSpecificationArn;

  /// At the end of an auto-label job Ground Truth sends the Amazon Resource Name
  /// (ARN) of the final model used for auto-labeling. You can use this model as
  /// the starting point for subsequent similar jobs by providing the ARN of the
  /// model here.
  final String? initialActiveLearningModelArn;

  /// Provides configuration information for a labeling job.
  final LabelingJobResourceConfig? labelingJobResourceConfig;

  LabelingJobAlgorithmsConfig({
    required this.labelingJobAlgorithmSpecificationArn,
    this.initialActiveLearningModelArn,
    this.labelingJobResourceConfig,
  });

  factory LabelingJobAlgorithmsConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobAlgorithmsConfig(
      labelingJobAlgorithmSpecificationArn:
          json['LabelingJobAlgorithmSpecificationArn'] as String,
      initialActiveLearningModelArn:
          json['InitialActiveLearningModelArn'] as String?,
      labelingJobResourceConfig: json['LabelingJobResourceConfig'] != null
          ? LabelingJobResourceConfig.fromJson(
              json['LabelingJobResourceConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobAlgorithmSpecificationArn =
        this.labelingJobAlgorithmSpecificationArn;
    final initialActiveLearningModelArn = this.initialActiveLearningModelArn;
    final labelingJobResourceConfig = this.labelingJobResourceConfig;
    return {
      'LabelingJobAlgorithmSpecificationArn':
          labelingJobAlgorithmSpecificationArn,
      if (initialActiveLearningModelArn != null)
        'InitialActiveLearningModelArn': initialActiveLearningModelArn,
      if (labelingJobResourceConfig != null)
        'LabelingJobResourceConfig': labelingJobResourceConfig,
    };
  }
}

/// Attributes of the data specified by the customer. Use these to describe the
/// data to be labeled.
class LabelingJobDataAttributes {
  /// Declares that your content is free of personally identifiable information or
  /// adult content. SageMaker may restrict the Amazon Mechanical Turk workers
  /// that can view your task based on this information.
  final List<ContentClassifier>? contentClassifiers;

  LabelingJobDataAttributes({
    this.contentClassifiers,
  });

  factory LabelingJobDataAttributes.fromJson(Map<String, dynamic> json) {
    return LabelingJobDataAttributes(
      contentClassifiers: (json['ContentClassifiers'] as List?)
          ?.nonNulls
          .map((e) => ContentClassifier.fromString((e as String)))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final contentClassifiers = this.contentClassifiers;
    return {
      if (contentClassifiers != null)
        'ContentClassifiers': contentClassifiers.map((e) => e.value).toList(),
    };
  }
}

/// Provides information about the location of input data.
///
/// You must specify at least one of the following: <code>S3DataSource</code> or
/// <code>SnsDataSource</code>.
///
/// Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming
/// labeling job. If you do not specify and SNS input topic ARN, Ground Truth
/// will create a one-time labeling job.
///
/// Use <code>S3DataSource</code> to specify an input manifest file for both
/// streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is
/// optional if you use <code>SnsDataSource</code> to create a streaming
/// labeling job.
class LabelingJobDataSource {
  /// The Amazon S3 location of the input data objects.
  final LabelingJobS3DataSource? s3DataSource;

  /// An Amazon SNS data source used for streaming labeling jobs. To learn more,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-send-data">Send
  /// Data to a Streaming Labeling Job</a>.
  final LabelingJobSnsDataSource? snsDataSource;

  LabelingJobDataSource({
    this.s3DataSource,
    this.snsDataSource,
  });

  factory LabelingJobDataSource.fromJson(Map<String, dynamic> json) {
    return LabelingJobDataSource(
      s3DataSource: json['S3DataSource'] != null
          ? LabelingJobS3DataSource.fromJson(
              json['S3DataSource'] as Map<String, dynamic>)
          : null,
      snsDataSource: json['SnsDataSource'] != null
          ? LabelingJobSnsDataSource.fromJson(
              json['SnsDataSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    final snsDataSource = this.snsDataSource;
    return {
      if (s3DataSource != null) 'S3DataSource': s3DataSource,
      if (snsDataSource != null) 'SnsDataSource': snsDataSource,
    };
  }
}

/// Provides summary information for a work team.
class LabelingJobForWorkteamSummary {
  /// The date and time that the labeling job was created.
  final DateTime creationTime;

  /// A unique identifier for a labeling job. You can use this to refer to a
  /// specific labeling job.
  final String jobReferenceCode;

  /// The Amazon Web Services account ID of the account used to start the labeling
  /// job.
  final String workRequesterAccountId;

  /// Provides information about the progress of a labeling job.
  final LabelCountersForWorkteam? labelCounters;

  /// The name of the labeling job that the work team is assigned to.
  final String? labelingJobName;

  /// The configured number of workers per data object.
  final int? numberOfHumanWorkersPerDataObject;

  LabelingJobForWorkteamSummary({
    required this.creationTime,
    required this.jobReferenceCode,
    required this.workRequesterAccountId,
    this.labelCounters,
    this.labelingJobName,
    this.numberOfHumanWorkersPerDataObject,
  });

  factory LabelingJobForWorkteamSummary.fromJson(Map<String, dynamic> json) {
    return LabelingJobForWorkteamSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      jobReferenceCode: json['JobReferenceCode'] as String,
      workRequesterAccountId: json['WorkRequesterAccountId'] as String,
      labelCounters: json['LabelCounters'] != null
          ? LabelCountersForWorkteam.fromJson(
              json['LabelCounters'] as Map<String, dynamic>)
          : null,
      labelingJobName: json['LabelingJobName'] as String?,
      numberOfHumanWorkersPerDataObject:
          json['NumberOfHumanWorkersPerDataObject'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final jobReferenceCode = this.jobReferenceCode;
    final workRequesterAccountId = this.workRequesterAccountId;
    final labelCounters = this.labelCounters;
    final labelingJobName = this.labelingJobName;
    final numberOfHumanWorkersPerDataObject =
        this.numberOfHumanWorkersPerDataObject;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'JobReferenceCode': jobReferenceCode,
      'WorkRequesterAccountId': workRequesterAccountId,
      if (labelCounters != null) 'LabelCounters': labelCounters,
      if (labelingJobName != null) 'LabelingJobName': labelingJobName,
      if (numberOfHumanWorkersPerDataObject != null)
        'NumberOfHumanWorkersPerDataObject': numberOfHumanWorkersPerDataObject,
    };
  }
}

/// Input configuration information for a labeling job.
class LabelingJobInputConfig {
  /// The location of the input data.
  final LabelingJobDataSource dataSource;

  /// Attributes of the data specified by the customer.
  final LabelingJobDataAttributes? dataAttributes;

  LabelingJobInputConfig({
    required this.dataSource,
    this.dataAttributes,
  });

  factory LabelingJobInputConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobInputConfig(
      dataSource: LabelingJobDataSource.fromJson(
          json['DataSource'] as Map<String, dynamic>),
      dataAttributes: json['DataAttributes'] != null
          ? LabelingJobDataAttributes.fromJson(
              json['DataAttributes'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final dataSource = this.dataSource;
    final dataAttributes = this.dataAttributes;
    return {
      'DataSource': dataSource,
      if (dataAttributes != null) 'DataAttributes': dataAttributes,
    };
  }
}

/// Specifies the location of the output produced by the labeling job.
class LabelingJobOutput {
  /// The Amazon S3 bucket location of the manifest file for labeled data.
  final String outputDatasetS3Uri;

  /// The Amazon Resource Name (ARN) for the most recent SageMaker model trained
  /// as part of automated data labeling.
  final String? finalActiveLearningModelArn;

  LabelingJobOutput({
    required this.outputDatasetS3Uri,
    this.finalActiveLearningModelArn,
  });

  factory LabelingJobOutput.fromJson(Map<String, dynamic> json) {
    return LabelingJobOutput(
      outputDatasetS3Uri: json['OutputDatasetS3Uri'] as String,
      finalActiveLearningModelArn:
          json['FinalActiveLearningModelArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final outputDatasetS3Uri = this.outputDatasetS3Uri;
    final finalActiveLearningModelArn = this.finalActiveLearningModelArn;
    return {
      'OutputDatasetS3Uri': outputDatasetS3Uri,
      if (finalActiveLearningModelArn != null)
        'FinalActiveLearningModelArn': finalActiveLearningModelArn,
    };
  }
}

/// Output configuration information for a labeling job.
class LabelingJobOutputConfig {
  /// The Amazon S3 location to write output data.
  final String s3OutputPath;

  /// The Amazon Web Services Key Management Service ID of the key used to encrypt
  /// the output data, if any.
  ///
  /// If you provide your own KMS key ID, you must add the required permissions to
  /// your KMS key described in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-permission.html#sms-security-kms-permissions">Encrypt
  /// Output Data and Storage Volume with Amazon Web Services KMS</a>.
  ///
  /// If you don't provide a KMS key ID, Amazon SageMaker uses the default Amazon
  /// Web Services KMS key for Amazon S3 for your role's account to encrypt your
  /// output data.
  ///
  /// If you use a bucket policy with an <code>s3:PutObject</code> permission that
  /// only allows objects with server-side encryption, set the condition key of
  /// <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  final String? kmsKeyId;

  /// An Amazon Simple Notification Service (Amazon SNS) output topic ARN. Provide
  /// a <code>SnsTopicArn</code> if you want to do real time chaining to another
  /// streaming job and receive an Amazon SNS notifications each time a data
  /// object is submitted by a worker.
  ///
  /// If you provide an <code>SnsTopicArn</code> in <code>OutputConfig</code>,
  /// when workers complete labeling tasks, Ground Truth will send labeling task
  /// output data to the SNS output topic you specify here.
  ///
  /// To learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-output-data">Receive
  /// Output Data from a Streaming Labeling Job</a>.
  final String? snsTopicArn;

  LabelingJobOutputConfig({
    required this.s3OutputPath,
    this.kmsKeyId,
    this.snsTopicArn,
  });

  factory LabelingJobOutputConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      snsTopicArn: json['SnsTopicArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final kmsKeyId = this.kmsKeyId;
    final snsTopicArn = this.snsTopicArn;
    return {
      'S3OutputPath': s3OutputPath,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (snsTopicArn != null) 'SnsTopicArn': snsTopicArn,
    };
  }
}

/// Configure encryption on the storage volume attached to the ML compute
/// instance used to run automated data labeling model training and inference.
class LabelingJobResourceConfig {
  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume attached to
  /// the ML compute instance(s) that run the training and inference jobs used for
  /// automated data labeling.
  ///
  /// You can only specify a <code>VolumeKmsKeyId</code> when you create a
  /// labeling job with automated data labeling enabled using the API operation
  /// <code>CreateLabelingJob</code>. You cannot specify an Amazon Web Services
  /// KMS key to encrypt the storage volume used for automated data labeling model
  /// training and inference when you create a labeling job using the console. To
  /// learn more, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security.html">Output
  /// Data and Storage Volume Encryption</a>.
  ///
  /// The <code>VolumeKmsKeyId</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// </ul>
  final String? volumeKmsKeyId;
  final VpcConfig? vpcConfig;

  LabelingJobResourceConfig({
    this.volumeKmsKeyId,
    this.vpcConfig,
  });

  factory LabelingJobResourceConfig.fromJson(Map<String, dynamic> json) {
    return LabelingJobResourceConfig(
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final volumeKmsKeyId = this.volumeKmsKeyId;
    final vpcConfig = this.vpcConfig;
    return {
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// The Amazon S3 location of the input data objects.
class LabelingJobS3DataSource {
  /// The Amazon S3 location of the manifest file that describes the input data
  /// objects.
  ///
  /// The input manifest file referenced in <code>ManifestS3Uri</code> must
  /// contain one of the following keys: <code>source-ref</code> or
  /// <code>source</code>. The value of the keys are interpreted as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>source-ref</code>: The source of the object is the Amazon S3 object
  /// specified in the value. Use this value when the object is a binary object,
  /// such as an image.
  /// </li>
  /// <li>
  /// <code>source</code>: The source of the object is the value. Use this value
  /// when the object is a text value.
  /// </li>
  /// </ul>
  /// If you are a new user of Ground Truth, it is recommended you review <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-input-data-input-manifest.html">Use
  /// an Input Manifest File </a> in the Amazon SageMaker Developer Guide to learn
  /// how to create an input manifest file.
  final String manifestS3Uri;

  LabelingJobS3DataSource({
    required this.manifestS3Uri,
  });

  factory LabelingJobS3DataSource.fromJson(Map<String, dynamic> json) {
    return LabelingJobS3DataSource(
      manifestS3Uri: json['ManifestS3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final manifestS3Uri = this.manifestS3Uri;
    return {
      'ManifestS3Uri': manifestS3Uri,
    };
  }
}

/// An Amazon SNS data source used for streaming labeling jobs.
class LabelingJobSnsDataSource {
  /// The Amazon SNS input topic Amazon Resource Name (ARN). Specify the ARN of
  /// the input topic you will use to send new data objects to a streaming
  /// labeling job.
  final String snsTopicArn;

  LabelingJobSnsDataSource({
    required this.snsTopicArn,
  });

  factory LabelingJobSnsDataSource.fromJson(Map<String, dynamic> json) {
    return LabelingJobSnsDataSource(
      snsTopicArn: json['SnsTopicArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final snsTopicArn = this.snsTopicArn;
    return {
      'SnsTopicArn': snsTopicArn,
    };
  }
}

enum LabelingJobStatus {
  initializing('Initializing'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const LabelingJobStatus(this.value);

  static LabelingJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum LabelingJobStatus'));
}

/// A set of conditions for stopping a labeling job. If any of the conditions
/// are met, the job is automatically stopped. You can use these conditions to
/// control the cost of data labeling.
/// <note>
/// Labeling jobs fail after 30 days with an appropriate client error message.
/// </note>
class LabelingJobStoppingConditions {
  /// The maximum number of objects that can be labeled by human workers.
  final int? maxHumanLabeledObjectCount;

  /// The maximum number of input data objects that should be labeled.
  final int? maxPercentageOfInputDatasetLabeled;

  LabelingJobStoppingConditions({
    this.maxHumanLabeledObjectCount,
    this.maxPercentageOfInputDatasetLabeled,
  });

  factory LabelingJobStoppingConditions.fromJson(Map<String, dynamic> json) {
    return LabelingJobStoppingConditions(
      maxHumanLabeledObjectCount: json['MaxHumanLabeledObjectCount'] as int?,
      maxPercentageOfInputDatasetLabeled:
          json['MaxPercentageOfInputDatasetLabeled'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxHumanLabeledObjectCount = this.maxHumanLabeledObjectCount;
    final maxPercentageOfInputDatasetLabeled =
        this.maxPercentageOfInputDatasetLabeled;
    return {
      if (maxHumanLabeledObjectCount != null)
        'MaxHumanLabeledObjectCount': maxHumanLabeledObjectCount,
      if (maxPercentageOfInputDatasetLabeled != null)
        'MaxPercentageOfInputDatasetLabeled':
            maxPercentageOfInputDatasetLabeled,
    };
  }
}

/// Provides summary information about a labeling job.
class LabelingJobSummary {
  /// The date and time that the job was created (timestamp).
  final DateTime creationTime;

  /// Counts showing the progress of the labeling job.
  final LabelCounters labelCounters;

  /// The Amazon Resource Name (ARN) assigned to the labeling job when it was
  /// created.
  final String labelingJobArn;

  /// The name of the labeling job.
  final String labelingJobName;

  /// The current status of the labeling job.
  final LabelingJobStatus labelingJobStatus;

  /// The date and time that the job was last modified (timestamp).
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of a Lambda function. The function is run
  /// before each data object is sent to a worker.
  final String preHumanTaskLambdaArn;

  /// The Amazon Resource Name (ARN) of the work team assigned to the job.
  final String workteamArn;

  /// The Amazon Resource Name (ARN) of the Lambda function used to consolidate
  /// the annotations from individual workers into a label for a data object. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html">Annotation
  /// Consolidation</a>.
  final String? annotationConsolidationLambdaArn;

  /// If the <code>LabelingJobStatus</code> field is <code>Failed</code>, this
  /// field contains a description of the error.
  final String? failureReason;

  /// Input configuration for the labeling job.
  final LabelingJobInputConfig? inputConfig;

  /// The location of the output produced by the labeling job.
  final LabelingJobOutput? labelingJobOutput;

  LabelingJobSummary({
    required this.creationTime,
    required this.labelCounters,
    required this.labelingJobArn,
    required this.labelingJobName,
    required this.labelingJobStatus,
    required this.lastModifiedTime,
    required this.preHumanTaskLambdaArn,
    required this.workteamArn,
    this.annotationConsolidationLambdaArn,
    this.failureReason,
    this.inputConfig,
    this.labelingJobOutput,
  });

  factory LabelingJobSummary.fromJson(Map<String, dynamic> json) {
    return LabelingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      labelCounters:
          LabelCounters.fromJson(json['LabelCounters'] as Map<String, dynamic>),
      labelingJobArn: json['LabelingJobArn'] as String,
      labelingJobName: json['LabelingJobName'] as String,
      labelingJobStatus:
          LabelingJobStatus.fromString((json['LabelingJobStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      preHumanTaskLambdaArn: json['PreHumanTaskLambdaArn'] as String,
      workteamArn: json['WorkteamArn'] as String,
      annotationConsolidationLambdaArn:
          json['AnnotationConsolidationLambdaArn'] as String?,
      failureReason: json['FailureReason'] as String?,
      inputConfig: json['InputConfig'] != null
          ? LabelingJobInputConfig.fromJson(
              json['InputConfig'] as Map<String, dynamic>)
          : null,
      labelingJobOutput: json['LabelingJobOutput'] != null
          ? LabelingJobOutput.fromJson(
              json['LabelingJobOutput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final labelCounters = this.labelCounters;
    final labelingJobArn = this.labelingJobArn;
    final labelingJobName = this.labelingJobName;
    final labelingJobStatus = this.labelingJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final preHumanTaskLambdaArn = this.preHumanTaskLambdaArn;
    final workteamArn = this.workteamArn;
    final annotationConsolidationLambdaArn =
        this.annotationConsolidationLambdaArn;
    final failureReason = this.failureReason;
    final inputConfig = this.inputConfig;
    final labelingJobOutput = this.labelingJobOutput;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LabelCounters': labelCounters,
      'LabelingJobArn': labelingJobArn,
      'LabelingJobName': labelingJobName,
      'LabelingJobStatus': labelingJobStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'PreHumanTaskLambdaArn': preHumanTaskLambdaArn,
      'WorkteamArn': workteamArn,
      if (annotationConsolidationLambdaArn != null)
        'AnnotationConsolidationLambdaArn': annotationConsolidationLambdaArn,
      if (failureReason != null) 'FailureReason': failureReason,
      if (inputConfig != null) 'InputConfig': inputConfig,
      if (labelingJobOutput != null) 'LabelingJobOutput': labelingJobOutput,
    };
  }
}

/// Metadata for a Lambda step.
class LambdaStepMetadata {
  /// The Amazon Resource Name (ARN) of the Lambda function that was run by this
  /// step execution.
  final String? arn;

  /// A list of the output parameters of the Lambda step.
  final List<OutputParameter>? outputParameters;

  LambdaStepMetadata({
    this.arn,
    this.outputParameters,
  });

  factory LambdaStepMetadata.fromJson(Map<String, dynamic> json) {
    return LambdaStepMetadata(
      arn: json['Arn'] as String?,
      outputParameters: (json['OutputParameters'] as List?)
          ?.nonNulls
          .map((e) => OutputParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final outputParameters = this.outputParameters;
    return {
      if (arn != null) 'Arn': arn,
      if (outputParameters != null) 'OutputParameters': outputParameters,
    };
  }
}

/// A value that indicates whether the update was successful.
class LastUpdateStatus {
  /// A value that indicates whether the update was made successful.
  final LastUpdateStatusValue status;

  /// If the update wasn't successful, indicates the reason why it failed.
  final String? failureReason;

  LastUpdateStatus({
    required this.status,
    this.failureReason,
  });

  factory LastUpdateStatus.fromJson(Map<String, dynamic> json) {
    return LastUpdateStatus(
      status: LastUpdateStatusValue.fromString((json['Status'] as String)),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final failureReason = this.failureReason;
    return {
      'Status': status.value,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

enum LastUpdateStatusValue {
  successful('Successful'),
  failed('Failed'),
  inProgress('InProgress'),
  ;

  final String value;

  const LastUpdateStatusValue(this.value);

  static LastUpdateStatusValue fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum LastUpdateStatusValue'));
}

/// Lists a summary of the properties of a lineage group. A lineage group
/// provides a group of shareable lineage entity resources.
class LineageGroupSummary {
  /// The creation time of the lineage group summary.
  final DateTime? creationTime;

  /// The display name of the lineage group summary.
  final String? displayName;

  /// The last modified time of the lineage group summary.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group resource.
  final String? lineageGroupArn;

  /// The name or Amazon Resource Name (ARN) of the lineage group.
  final String? lineageGroupName;

  LineageGroupSummary({
    this.creationTime,
    this.displayName,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.lineageGroupName,
  });

  factory LineageGroupSummary.fromJson(Map<String, dynamic> json) {
    return LineageGroupSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      lineageGroupName: json['LineageGroupName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final lineageGroupName = this.lineageGroupName;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (lineageGroupName != null) 'LineageGroupName': lineageGroupName,
    };
  }
}

enum LineageType {
  trialComponent('TrialComponent'),
  artifact('Artifact'),
  context('Context'),
  action('Action'),
  ;

  final String value;

  const LineageType(this.value);

  static LineageType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum LineageType'));
}

class ListActionsResponse {
  /// A list of actions and their properties.
  final List<ActionSummary>? actionSummaries;

  /// A token for getting the next set of actions, if there are any.
  final String? nextToken;

  ListActionsResponse({
    this.actionSummaries,
    this.nextToken,
  });

  factory ListActionsResponse.fromJson(Map<String, dynamic> json) {
    return ListActionsResponse(
      actionSummaries: (json['ActionSummaries'] as List?)
          ?.nonNulls
          .map((e) => ActionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionSummaries = this.actionSummaries;
    final nextToken = this.nextToken;
    return {
      if (actionSummaries != null) 'ActionSummaries': actionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAlgorithmsOutput {
  /// &gt;An array of <code>AlgorithmSummary</code> objects, each of which lists
  /// an algorithm.
  final List<AlgorithmSummary> algorithmSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of algorithms, use it in the subsequent request.
  final String? nextToken;

  ListAlgorithmsOutput({
    required this.algorithmSummaryList,
    this.nextToken,
  });

  factory ListAlgorithmsOutput.fromJson(Map<String, dynamic> json) {
    return ListAlgorithmsOutput(
      algorithmSummaryList: (json['AlgorithmSummaryList'] as List)
          .nonNulls
          .map((e) => AlgorithmSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSummaryList = this.algorithmSummaryList;
    final nextToken = this.nextToken;
    return {
      'AlgorithmSummaryList': algorithmSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAliasesResponse {
  /// A token for getting the next set of aliases, if more aliases exist.
  final String? nextToken;

  /// A list of SageMaker image version aliases.
  final List<String>? sageMakerImageVersionAliases;

  ListAliasesResponse({
    this.nextToken,
    this.sageMakerImageVersionAliases,
  });

  factory ListAliasesResponse.fromJson(Map<String, dynamic> json) {
    return ListAliasesResponse(
      nextToken: json['NextToken'] as String?,
      sageMakerImageVersionAliases:
          (json['SageMakerImageVersionAliases'] as List?)
              ?.nonNulls
              .map((e) => e as String)
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final sageMakerImageVersionAliases = this.sageMakerImageVersionAliases;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (sageMakerImageVersionAliases != null)
        'SageMakerImageVersionAliases': sageMakerImageVersionAliases,
    };
  }
}

class ListAppImageConfigsResponse {
  /// A list of AppImageConfigs and their properties.
  final List<AppImageConfigDetails>? appImageConfigs;

  /// A token for getting the next set of AppImageConfigs, if there are any.
  final String? nextToken;

  ListAppImageConfigsResponse({
    this.appImageConfigs,
    this.nextToken,
  });

  factory ListAppImageConfigsResponse.fromJson(Map<String, dynamic> json) {
    return ListAppImageConfigsResponse(
      appImageConfigs: (json['AppImageConfigs'] as List?)
          ?.nonNulls
          .map((e) => AppImageConfigDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigs = this.appImageConfigs;
    final nextToken = this.nextToken;
    return {
      if (appImageConfigs != null) 'AppImageConfigs': appImageConfigs,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAppsResponse {
  /// The list of apps.
  final List<AppDetails>? apps;

  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  ListAppsResponse({
    this.apps,
    this.nextToken,
  });

  factory ListAppsResponse.fromJson(Map<String, dynamic> json) {
    return ListAppsResponse(
      apps: (json['Apps'] as List?)
          ?.nonNulls
          .map((e) => AppDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final apps = this.apps;
    final nextToken = this.nextToken;
    return {
      if (apps != null) 'Apps': apps,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListArtifactsResponse {
  /// A list of artifacts and their properties.
  final List<ArtifactSummary>? artifactSummaries;

  /// A token for getting the next set of artifacts, if there are any.
  final String? nextToken;

  ListArtifactsResponse({
    this.artifactSummaries,
    this.nextToken,
  });

  factory ListArtifactsResponse.fromJson(Map<String, dynamic> json) {
    return ListArtifactsResponse(
      artifactSummaries: (json['ArtifactSummaries'] as List?)
          ?.nonNulls
          .map((e) => ArtifactSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactSummaries = this.artifactSummaries;
    final nextToken = this.nextToken;
    return {
      if (artifactSummaries != null) 'ArtifactSummaries': artifactSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAssociationsResponse {
  /// A list of associations and their properties.
  final List<AssociationSummary>? associationSummaries;

  /// A token for getting the next set of associations, if there are any.
  final String? nextToken;

  ListAssociationsResponse({
    this.associationSummaries,
    this.nextToken,
  });

  factory ListAssociationsResponse.fromJson(Map<String, dynamic> json) {
    return ListAssociationsResponse(
      associationSummaries: (json['AssociationSummaries'] as List?)
          ?.nonNulls
          .map((e) => AssociationSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final associationSummaries = this.associationSummaries;
    final nextToken = this.nextToken;
    return {
      if (associationSummaries != null)
        'AssociationSummaries': associationSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListAutoMLJobsResponse {
  /// Returns a summary list of jobs.
  final List<AutoMLJobSummary> autoMLJobSummaries;

  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  final String? nextToken;

  ListAutoMLJobsResponse({
    required this.autoMLJobSummaries,
    this.nextToken,
  });

  factory ListAutoMLJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListAutoMLJobsResponse(
      autoMLJobSummaries: (json['AutoMLJobSummaries'] as List)
          .nonNulls
          .map((e) => AutoMLJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobSummaries = this.autoMLJobSummaries;
    final nextToken = this.nextToken;
    return {
      'AutoMLJobSummaries': autoMLJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListCandidatesForAutoMLJobResponse {
  /// Summaries about the <code>AutoMLCandidates</code>.
  final List<AutoMLCandidate> candidates;

  /// If the previous response was truncated, you receive this token. Use it in
  /// your next request to receive the next set of results.
  final String? nextToken;

  ListCandidatesForAutoMLJobResponse({
    required this.candidates,
    this.nextToken,
  });

  factory ListCandidatesForAutoMLJobResponse.fromJson(
      Map<String, dynamic> json) {
    return ListCandidatesForAutoMLJobResponse(
      candidates: (json['Candidates'] as List)
          .nonNulls
          .map((e) => AutoMLCandidate.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final candidates = this.candidates;
    final nextToken = this.nextToken;
    return {
      'Candidates': candidates,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListClusterNodesResponse {
  /// The summaries of listed instances in a SageMaker HyperPod cluster
  final List<ClusterNodeSummary> clusterNodeSummaries;

  /// The next token specified for listing instances in a SageMaker HyperPod
  /// cluster.
  final String nextToken;

  ListClusterNodesResponse({
    required this.clusterNodeSummaries,
    required this.nextToken,
  });

  factory ListClusterNodesResponse.fromJson(Map<String, dynamic> json) {
    return ListClusterNodesResponse(
      clusterNodeSummaries: (json['ClusterNodeSummaries'] as List)
          .nonNulls
          .map((e) => ClusterNodeSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterNodeSummaries = this.clusterNodeSummaries;
    final nextToken = this.nextToken;
    return {
      'ClusterNodeSummaries': clusterNodeSummaries,
      'NextToken': nextToken,
    };
  }
}

class ListClustersResponse {
  /// The summaries of listed SageMaker HyperPod clusters.
  final List<ClusterSummary> clusterSummaries;

  /// If the result of the previous <code>ListClusters</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of clusters, use the token in the next request.
  final String nextToken;

  ListClustersResponse({
    required this.clusterSummaries,
    required this.nextToken,
  });

  factory ListClustersResponse.fromJson(Map<String, dynamic> json) {
    return ListClustersResponse(
      clusterSummaries: (json['ClusterSummaries'] as List)
          .nonNulls
          .map((e) => ClusterSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterSummaries = this.clusterSummaries;
    final nextToken = this.nextToken;
    return {
      'ClusterSummaries': clusterSummaries,
      'NextToken': nextToken,
    };
  }
}

class ListCodeRepositoriesOutput {
  /// Gets a list of summaries of the Git repositories. Each summary specifies the
  /// following values for the repository:
  ///
  /// <ul>
  /// <li>
  /// Name
  /// </li>
  /// <li>
  /// Amazon Resource Name (ARN)
  /// </li>
  /// <li>
  /// Creation time
  /// </li>
  /// <li>
  /// Last modified time
  /// </li>
  /// <li>
  /// Configuration information, including the URL location of the repository and
  /// the ARN of the Amazon Web Services Secrets Manager secret that contains the
  /// credentials used to access the repository.
  /// </li>
  /// </ul>
  final List<CodeRepositorySummary> codeRepositorySummaryList;

  /// If the result of a <code>ListCodeRepositoriesOutput</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To get the next
  /// set of Git repositories, use the token in the next request.
  final String? nextToken;

  ListCodeRepositoriesOutput({
    required this.codeRepositorySummaryList,
    this.nextToken,
  });

  factory ListCodeRepositoriesOutput.fromJson(Map<String, dynamic> json) {
    return ListCodeRepositoriesOutput(
      codeRepositorySummaryList: (json['CodeRepositorySummaryList'] as List)
          .nonNulls
          .map((e) => CodeRepositorySummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositorySummaryList = this.codeRepositorySummaryList;
    final nextToken = this.nextToken;
    return {
      'CodeRepositorySummaryList': codeRepositorySummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListCompilationJobsResponse {
  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CompilationJobSummary.html">CompilationJobSummary</a>
  /// objects, each describing a model compilation job.
  final List<CompilationJobSummary> compilationJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this
  /// <code>NextToken</code>. To retrieve the next set of model compilation jobs,
  /// use this token in the next request.
  final String? nextToken;

  ListCompilationJobsResponse({
    required this.compilationJobSummaries,
    this.nextToken,
  });

  factory ListCompilationJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListCompilationJobsResponse(
      compilationJobSummaries: (json['CompilationJobSummaries'] as List)
          .nonNulls
          .map((e) => CompilationJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobSummaries = this.compilationJobSummaries;
    final nextToken = this.nextToken;
    return {
      'CompilationJobSummaries': compilationJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListCompilationJobsSortBy {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const ListCompilationJobsSortBy(this.value);

  static ListCompilationJobsSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListCompilationJobsSortBy'));
}

class ListContextsResponse {
  /// A list of contexts and their properties.
  final List<ContextSummary>? contextSummaries;

  /// A token for getting the next set of contexts, if there are any.
  final String? nextToken;

  ListContextsResponse({
    this.contextSummaries,
    this.nextToken,
  });

  factory ListContextsResponse.fromJson(Map<String, dynamic> json) {
    return ListContextsResponse(
      contextSummaries: (json['ContextSummaries'] as List?)
          ?.nonNulls
          .map((e) => ContextSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextSummaries = this.contextSummaries;
    final nextToken = this.nextToken;
    return {
      if (contextSummaries != null) 'ContextSummaries': contextSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListDataQualityJobDefinitionsResponse {
  /// A list of data quality monitoring job definitions.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// If the result of the previous <code>ListDataQualityJobDefinitions</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of data quality monitoring job definitions, use the
  /// token in the next request.
  final String? nextToken;

  ListDataQualityJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListDataQualityJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListDataQualityJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .nonNulls
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListDeviceFleetsResponse {
  /// Summary of the device fleet.
  final List<DeviceFleetSummary> deviceFleetSummaries;

  /// The response from the last list when returning a list large enough to need
  /// tokening.
  final String? nextToken;

  ListDeviceFleetsResponse({
    required this.deviceFleetSummaries,
    this.nextToken,
  });

  factory ListDeviceFleetsResponse.fromJson(Map<String, dynamic> json) {
    return ListDeviceFleetsResponse(
      deviceFleetSummaries: (json['DeviceFleetSummaries'] as List)
          .nonNulls
          .map((e) => DeviceFleetSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceFleetSummaries = this.deviceFleetSummaries;
    final nextToken = this.nextToken;
    return {
      'DeviceFleetSummaries': deviceFleetSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListDeviceFleetsSortBy {
  name('NAME'),
  creationTime('CREATION_TIME'),
  lastModifiedTime('LAST_MODIFIED_TIME'),
  ;

  final String value;

  const ListDeviceFleetsSortBy(this.value);

  static ListDeviceFleetsSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListDeviceFleetsSortBy'));
}

class ListDevicesResponse {
  /// Summary of devices.
  final List<DeviceSummary> deviceSummaries;

  /// The response from the last list when returning a list large enough to need
  /// tokening.
  final String? nextToken;

  ListDevicesResponse({
    required this.deviceSummaries,
    this.nextToken,
  });

  factory ListDevicesResponse.fromJson(Map<String, dynamic> json) {
    return ListDevicesResponse(
      deviceSummaries: (json['DeviceSummaries'] as List)
          .nonNulls
          .map((e) => DeviceSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceSummaries = this.deviceSummaries;
    final nextToken = this.nextToken;
    return {
      'DeviceSummaries': deviceSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListDomainsResponse {
  /// The list of domains.
  final List<DomainDetails>? domains;

  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  ListDomainsResponse({
    this.domains,
    this.nextToken,
  });

  factory ListDomainsResponse.fromJson(Map<String, dynamic> json) {
    return ListDomainsResponse(
      domains: (json['Domains'] as List?)
          ?.nonNulls
          .map((e) => DomainDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domains = this.domains;
    final nextToken = this.nextToken;
    return {
      if (domains != null) 'Domains': domains,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListEdgeDeploymentPlansResponse {
  /// List of summaries of edge deployment plans.
  final List<EdgeDeploymentPlanSummary> edgeDeploymentPlanSummaries;

  /// The token to use when calling the next page of results.
  final String? nextToken;

  ListEdgeDeploymentPlansResponse({
    required this.edgeDeploymentPlanSummaries,
    this.nextToken,
  });

  factory ListEdgeDeploymentPlansResponse.fromJson(Map<String, dynamic> json) {
    return ListEdgeDeploymentPlansResponse(
      edgeDeploymentPlanSummaries: (json['EdgeDeploymentPlanSummaries'] as List)
          .nonNulls
          .map((e) =>
              EdgeDeploymentPlanSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgeDeploymentPlanSummaries = this.edgeDeploymentPlanSummaries;
    final nextToken = this.nextToken;
    return {
      'EdgeDeploymentPlanSummaries': edgeDeploymentPlanSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListEdgeDeploymentPlansSortBy {
  name('NAME'),
  deviceFleetName('DEVICE_FLEET_NAME'),
  creationTime('CREATION_TIME'),
  lastModifiedTime('LAST_MODIFIED_TIME'),
  ;

  final String value;

  const ListEdgeDeploymentPlansSortBy(this.value);

  static ListEdgeDeploymentPlansSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListEdgeDeploymentPlansSortBy'));
}

class ListEdgePackagingJobsResponse {
  /// Summaries of edge packaging jobs.
  final List<EdgePackagingJobSummary> edgePackagingJobSummaries;

  /// Token to use when calling the next page of results.
  final String? nextToken;

  ListEdgePackagingJobsResponse({
    required this.edgePackagingJobSummaries,
    this.nextToken,
  });

  factory ListEdgePackagingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListEdgePackagingJobsResponse(
      edgePackagingJobSummaries: (json['EdgePackagingJobSummaries'] as List)
          .nonNulls
          .map((e) =>
              EdgePackagingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final edgePackagingJobSummaries = this.edgePackagingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'EdgePackagingJobSummaries': edgePackagingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListEdgePackagingJobsSortBy {
  name('NAME'),
  modelName('MODEL_NAME'),
  creationTime('CREATION_TIME'),
  lastModifiedTime('LAST_MODIFIED_TIME'),
  status('STATUS'),
  ;

  final String value;

  const ListEdgePackagingJobsSortBy(this.value);

  static ListEdgePackagingJobsSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListEdgePackagingJobsSortBy'));
}

class ListEndpointConfigsOutput {
  /// An array of endpoint configurations.
  final List<EndpointConfigSummary> endpointConfigs;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of endpoint configurations, use it in the subsequent request
  final String? nextToken;

  ListEndpointConfigsOutput({
    required this.endpointConfigs,
    this.nextToken,
  });

  factory ListEndpointConfigsOutput.fromJson(Map<String, dynamic> json) {
    return ListEndpointConfigsOutput(
      endpointConfigs: (json['EndpointConfigs'] as List)
          .nonNulls
          .map((e) => EndpointConfigSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointConfigs = this.endpointConfigs;
    final nextToken = this.nextToken;
    return {
      'EndpointConfigs': endpointConfigs,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListEndpointsOutput {
  /// An array or endpoint objects.
  final List<EndpointSummary> endpoints;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of training jobs, use it in the subsequent request.
  final String? nextToken;

  ListEndpointsOutput({
    required this.endpoints,
    this.nextToken,
  });

  factory ListEndpointsOutput.fromJson(Map<String, dynamic> json) {
    return ListEndpointsOutput(
      endpoints: (json['Endpoints'] as List)
          .nonNulls
          .map((e) => EndpointSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpoints = this.endpoints;
    final nextToken = this.nextToken;
    return {
      'Endpoints': endpoints,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListExperimentsResponse {
  /// A list of the summaries of your experiments.
  final List<ExperimentSummary>? experimentSummaries;

  /// A token for getting the next set of experiments, if there are any.
  final String? nextToken;

  ListExperimentsResponse({
    this.experimentSummaries,
    this.nextToken,
  });

  factory ListExperimentsResponse.fromJson(Map<String, dynamic> json) {
    return ListExperimentsResponse(
      experimentSummaries: (json['ExperimentSummaries'] as List?)
          ?.nonNulls
          .map((e) => ExperimentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentSummaries = this.experimentSummaries;
    final nextToken = this.nextToken;
    return {
      if (experimentSummaries != null)
        'ExperimentSummaries': experimentSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListFeatureGroupsResponse {
  /// A summary of feature groups.
  final List<FeatureGroupSummary> featureGroupSummaries;

  /// A token to resume pagination of <code>ListFeatureGroups</code> results.
  final String? nextToken;

  ListFeatureGroupsResponse({
    required this.featureGroupSummaries,
    this.nextToken,
  });

  factory ListFeatureGroupsResponse.fromJson(Map<String, dynamic> json) {
    return ListFeatureGroupsResponse(
      featureGroupSummaries: (json['FeatureGroupSummaries'] as List)
          .nonNulls
          .map((e) => FeatureGroupSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupSummaries = this.featureGroupSummaries;
    final nextToken = this.nextToken;
    return {
      'FeatureGroupSummaries': featureGroupSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListFlowDefinitionsResponse {
  /// An array of objects describing the flow definitions.
  final List<FlowDefinitionSummary> flowDefinitionSummaries;

  /// A token to resume pagination.
  final String? nextToken;

  ListFlowDefinitionsResponse({
    required this.flowDefinitionSummaries,
    this.nextToken,
  });

  factory ListFlowDefinitionsResponse.fromJson(Map<String, dynamic> json) {
    return ListFlowDefinitionsResponse(
      flowDefinitionSummaries: (json['FlowDefinitionSummaries'] as List)
          .nonNulls
          .map((e) => FlowDefinitionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final flowDefinitionSummaries = this.flowDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'FlowDefinitionSummaries': flowDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHubContentVersionsResponse {
  /// The summaries of the listed hub content versions.
  final List<HubContentInfo> hubContentSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of hub content versions, use it in the subsequent request.
  final String? nextToken;

  ListHubContentVersionsResponse({
    required this.hubContentSummaries,
    this.nextToken,
  });

  factory ListHubContentVersionsResponse.fromJson(Map<String, dynamic> json) {
    return ListHubContentVersionsResponse(
      hubContentSummaries: (json['HubContentSummaries'] as List)
          .nonNulls
          .map((e) => HubContentInfo.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hubContentSummaries = this.hubContentSummaries;
    final nextToken = this.nextToken;
    return {
      'HubContentSummaries': hubContentSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHubContentsResponse {
  /// The summaries of the listed hub content.
  final List<HubContentInfo> hubContentSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of hub content, use it in the subsequent request.
  final String? nextToken;

  ListHubContentsResponse({
    required this.hubContentSummaries,
    this.nextToken,
  });

  factory ListHubContentsResponse.fromJson(Map<String, dynamic> json) {
    return ListHubContentsResponse(
      hubContentSummaries: (json['HubContentSummaries'] as List)
          .nonNulls
          .map((e) => HubContentInfo.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hubContentSummaries = this.hubContentSummaries;
    final nextToken = this.nextToken;
    return {
      'HubContentSummaries': hubContentSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHubsResponse {
  /// The summaries of the listed hubs.
  final List<HubInfo> hubSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of hubs, use it in the subsequent request.
  final String? nextToken;

  ListHubsResponse({
    required this.hubSummaries,
    this.nextToken,
  });

  factory ListHubsResponse.fromJson(Map<String, dynamic> json) {
    return ListHubsResponse(
      hubSummaries: (json['HubSummaries'] as List)
          .nonNulls
          .map((e) => HubInfo.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hubSummaries = this.hubSummaries;
    final nextToken = this.nextToken;
    return {
      'HubSummaries': hubSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHumanTaskUisResponse {
  /// An array of objects describing the human task user interfaces.
  final List<HumanTaskUiSummary> humanTaskUiSummaries;

  /// A token to resume pagination.
  final String? nextToken;

  ListHumanTaskUisResponse({
    required this.humanTaskUiSummaries,
    this.nextToken,
  });

  factory ListHumanTaskUisResponse.fromJson(Map<String, dynamic> json) {
    return ListHumanTaskUisResponse(
      humanTaskUiSummaries: (json['HumanTaskUiSummaries'] as List)
          .nonNulls
          .map((e) => HumanTaskUiSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiSummaries = this.humanTaskUiSummaries;
    final nextToken = this.nextToken;
    return {
      'HumanTaskUiSummaries': humanTaskUiSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListHyperParameterTuningJobsResponse {
  /// A list of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html">HyperParameterTuningJobSummary</a>
  /// objects that describe the tuning jobs that the
  /// <code>ListHyperParameterTuningJobs</code> request returned.
  final List<HyperParameterTuningJobSummary> hyperParameterTuningJobSummaries;

  /// If the result of this <code>ListHyperParameterTuningJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of tuning jobs, use the token in the next request.
  final String? nextToken;

  ListHyperParameterTuningJobsResponse({
    required this.hyperParameterTuningJobSummaries,
    this.nextToken,
  });

  factory ListHyperParameterTuningJobsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListHyperParameterTuningJobsResponse(
      hyperParameterTuningJobSummaries:
          (json['HyperParameterTuningJobSummaries'] as List)
              .nonNulls
              .map((e) => HyperParameterTuningJobSummary.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperParameterTuningJobSummaries =
        this.hyperParameterTuningJobSummaries;
    final nextToken = this.nextToken;
    return {
      'HyperParameterTuningJobSummaries': hyperParameterTuningJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListImageVersionsResponse {
  /// A list of versions and their properties.
  final List<ImageVersion>? imageVersions;

  /// A token for getting the next set of versions, if there are any.
  final String? nextToken;

  ListImageVersionsResponse({
    this.imageVersions,
    this.nextToken,
  });

  factory ListImageVersionsResponse.fromJson(Map<String, dynamic> json) {
    return ListImageVersionsResponse(
      imageVersions: (json['ImageVersions'] as List?)
          ?.nonNulls
          .map((e) => ImageVersion.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageVersions = this.imageVersions;
    final nextToken = this.nextToken;
    return {
      if (imageVersions != null) 'ImageVersions': imageVersions,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListImagesResponse {
  /// A list of images and their properties.
  final List<Image>? images;

  /// A token for getting the next set of images, if there are any.
  final String? nextToken;

  ListImagesResponse({
    this.images,
    this.nextToken,
  });

  factory ListImagesResponse.fromJson(Map<String, dynamic> json) {
    return ListImagesResponse(
      images: (json['Images'] as List?)
          ?.nonNulls
          .map((e) => Image.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final images = this.images;
    final nextToken = this.nextToken;
    return {
      if (images != null) 'Images': images,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListInferenceComponentsOutput {
  /// A list of inference components and their properties that matches any of the
  /// filters you specified in the request.
  final List<InferenceComponentSummary> inferenceComponents;

  /// The token to use in a subsequent request to get the next set of results
  /// following a truncated response.
  final String? nextToken;

  ListInferenceComponentsOutput({
    required this.inferenceComponents,
    this.nextToken,
  });

  factory ListInferenceComponentsOutput.fromJson(Map<String, dynamic> json) {
    return ListInferenceComponentsOutput(
      inferenceComponents: (json['InferenceComponents'] as List)
          .nonNulls
          .map((e) =>
              InferenceComponentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceComponents = this.inferenceComponents;
    final nextToken = this.nextToken;
    return {
      'InferenceComponents': inferenceComponents,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListInferenceExperimentsResponse {
  /// List of inference experiments.
  final List<InferenceExperimentSummary>? inferenceExperiments;

  /// The token to use when calling the next page of results.
  final String? nextToken;

  ListInferenceExperimentsResponse({
    this.inferenceExperiments,
    this.nextToken,
  });

  factory ListInferenceExperimentsResponse.fromJson(Map<String, dynamic> json) {
    return ListInferenceExperimentsResponse(
      inferenceExperiments: (json['InferenceExperiments'] as List?)
          ?.nonNulls
          .map((e) =>
              InferenceExperimentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceExperiments = this.inferenceExperiments;
    final nextToken = this.nextToken;
    return {
      if (inferenceExperiments != null)
        'InferenceExperiments': inferenceExperiments,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListInferenceRecommendationsJobStepsResponse {
  /// A token that you can specify in your next request to return more results
  /// from the list.
  final String? nextToken;

  /// A list of all subtask details in Inference Recommender.
  final List<InferenceRecommendationsJobStep>? steps;

  ListInferenceRecommendationsJobStepsResponse({
    this.nextToken,
    this.steps,
  });

  factory ListInferenceRecommendationsJobStepsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListInferenceRecommendationsJobStepsResponse(
      nextToken: json['NextToken'] as String?,
      steps: (json['Steps'] as List?)
          ?.nonNulls
          .map((e) => InferenceRecommendationsJobStep.fromJson(
              e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final steps = this.steps;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (steps != null) 'Steps': steps,
    };
  }
}

class ListInferenceRecommendationsJobsResponse {
  /// The recommendations created from the Amazon SageMaker Inference Recommender
  /// job.
  final List<InferenceRecommendationsJob> inferenceRecommendationsJobs;

  /// A token for getting the next set of recommendations, if there are any.
  final String? nextToken;

  ListInferenceRecommendationsJobsResponse({
    required this.inferenceRecommendationsJobs,
    this.nextToken,
  });

  factory ListInferenceRecommendationsJobsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListInferenceRecommendationsJobsResponse(
      inferenceRecommendationsJobs: (json['InferenceRecommendationsJobs']
              as List)
          .nonNulls
          .map((e) =>
              InferenceRecommendationsJob.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceRecommendationsJobs = this.inferenceRecommendationsJobs;
    final nextToken = this.nextToken;
    return {
      'InferenceRecommendationsJobs': inferenceRecommendationsJobs,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListInferenceRecommendationsJobsSortBy {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const ListInferenceRecommendationsJobsSortBy(this.value);

  static ListInferenceRecommendationsJobsSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListInferenceRecommendationsJobsSortBy'));
}

class ListLabelingJobsForWorkteamResponse {
  /// An array of <code>LabelingJobSummary</code> objects, each describing a
  /// labeling job.
  final List<LabelingJobForWorkteamSummary> labelingJobSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of labeling jobs, use it in the subsequent request.
  final String? nextToken;

  ListLabelingJobsForWorkteamResponse({
    required this.labelingJobSummaryList,
    this.nextToken,
  });

  factory ListLabelingJobsForWorkteamResponse.fromJson(
      Map<String, dynamic> json) {
    return ListLabelingJobsForWorkteamResponse(
      labelingJobSummaryList: (json['LabelingJobSummaryList'] as List)
          .nonNulls
          .map((e) =>
              LabelingJobForWorkteamSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobSummaryList = this.labelingJobSummaryList;
    final nextToken = this.nextToken;
    return {
      'LabelingJobSummaryList': labelingJobSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListLabelingJobsForWorkteamSortByOptions {
  creationTime('CreationTime'),
  ;

  final String value;

  const ListLabelingJobsForWorkteamSortByOptions(this.value);

  static ListLabelingJobsForWorkteamSortByOptions fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListLabelingJobsForWorkteamSortByOptions'));
}

class ListLabelingJobsResponse {
  /// An array of <code>LabelingJobSummary</code> objects, each describing a
  /// labeling job.
  final List<LabelingJobSummary>? labelingJobSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of labeling jobs, use it in the subsequent request.
  final String? nextToken;

  ListLabelingJobsResponse({
    this.labelingJobSummaryList,
    this.nextToken,
  });

  factory ListLabelingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListLabelingJobsResponse(
      labelingJobSummaryList: (json['LabelingJobSummaryList'] as List?)
          ?.nonNulls
          .map((e) => LabelingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final labelingJobSummaryList = this.labelingJobSummaryList;
    final nextToken = this.nextToken;
    return {
      if (labelingJobSummaryList != null)
        'LabelingJobSummaryList': labelingJobSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListLineageGroupsResponse {
  /// A list of lineage groups and their properties.
  final List<LineageGroupSummary>? lineageGroupSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of algorithms, use it in the subsequent request.
  final String? nextToken;

  ListLineageGroupsResponse({
    this.lineageGroupSummaries,
    this.nextToken,
  });

  factory ListLineageGroupsResponse.fromJson(Map<String, dynamic> json) {
    return ListLineageGroupsResponse(
      lineageGroupSummaries: (json['LineageGroupSummaries'] as List?)
          ?.nonNulls
          .map((e) => LineageGroupSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final lineageGroupSummaries = this.lineageGroupSummaries;
    final nextToken = this.nextToken;
    return {
      if (lineageGroupSummaries != null)
        'LineageGroupSummaries': lineageGroupSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelBiasJobDefinitionsResponse {
  /// A JSON array in which each element is a summary for a model bias jobs.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// The token returned if the response is truncated. To retrieve the next set of
  /// job executions, use it in the next request.
  final String? nextToken;

  ListModelBiasJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListModelBiasJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListModelBiasJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .nonNulls
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelCardExportJobsResponse {
  /// The summaries of the listed model card export jobs.
  final List<ModelCardExportJobSummary> modelCardExportJobSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of model card export jobs, use it in the subsequent request.
  final String? nextToken;

  ListModelCardExportJobsResponse({
    required this.modelCardExportJobSummaries,
    this.nextToken,
  });

  factory ListModelCardExportJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListModelCardExportJobsResponse(
      modelCardExportJobSummaries: (json['ModelCardExportJobSummaries'] as List)
          .nonNulls
          .map((e) =>
              ModelCardExportJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardExportJobSummaries = this.modelCardExportJobSummaries;
    final nextToken = this.nextToken;
    return {
      'ModelCardExportJobSummaries': modelCardExportJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelCardVersionsResponse {
  /// The summaries of the listed versions of the model card.
  final List<ModelCardVersionSummary> modelCardVersionSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of model card versions, use it in the subsequent request.
  final String? nextToken;

  ListModelCardVersionsResponse({
    required this.modelCardVersionSummaryList,
    this.nextToken,
  });

  factory ListModelCardVersionsResponse.fromJson(Map<String, dynamic> json) {
    return ListModelCardVersionsResponse(
      modelCardVersionSummaryList: (json['ModelCardVersionSummaryList'] as List)
          .nonNulls
          .map((e) =>
              ModelCardVersionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardVersionSummaryList = this.modelCardVersionSummaryList;
    final nextToken = this.nextToken;
    return {
      'ModelCardVersionSummaryList': modelCardVersionSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelCardsResponse {
  /// The summaries of the listed model cards.
  final List<ModelCardSummary> modelCardSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of model cards, use it in the subsequent request.
  final String? nextToken;

  ListModelCardsResponse({
    required this.modelCardSummaries,
    this.nextToken,
  });

  factory ListModelCardsResponse.fromJson(Map<String, dynamic> json) {
    return ListModelCardsResponse(
      modelCardSummaries: (json['ModelCardSummaries'] as List)
          .nonNulls
          .map((e) => ModelCardSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardSummaries = this.modelCardSummaries;
    final nextToken = this.nextToken;
    return {
      'ModelCardSummaries': modelCardSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelExplainabilityJobDefinitionsResponse {
  /// A JSON array in which each element is a summary for a explainability bias
  /// jobs.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// The token returned if the response is truncated. To retrieve the next set of
  /// job executions, use it in the next request.
  final String? nextToken;

  ListModelExplainabilityJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListModelExplainabilityJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListModelExplainabilityJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .nonNulls
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelMetadataResponse {
  /// A structure that holds model metadata.
  final List<ModelMetadataSummary> modelMetadataSummaries;

  /// A token for getting the next set of recommendations, if there are any.
  final String? nextToken;

  ListModelMetadataResponse({
    required this.modelMetadataSummaries,
    this.nextToken,
  });

  factory ListModelMetadataResponse.fromJson(Map<String, dynamic> json) {
    return ListModelMetadataResponse(
      modelMetadataSummaries: (json['ModelMetadataSummaries'] as List)
          .nonNulls
          .map((e) => ModelMetadataSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelMetadataSummaries = this.modelMetadataSummaries;
    final nextToken = this.nextToken;
    return {
      'ModelMetadataSummaries': modelMetadataSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelPackageGroupsOutput {
  /// A list of summaries of the model groups in your Amazon Web Services account.
  final List<ModelPackageGroupSummary> modelPackageGroupSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of model groups, use it in the subsequent request.
  final String? nextToken;

  ListModelPackageGroupsOutput({
    required this.modelPackageGroupSummaryList,
    this.nextToken,
  });

  factory ListModelPackageGroupsOutput.fromJson(Map<String, dynamic> json) {
    return ListModelPackageGroupsOutput(
      modelPackageGroupSummaryList:
          (json['ModelPackageGroupSummaryList'] as List)
              .nonNulls
              .map((e) =>
                  ModelPackageGroupSummary.fromJson(e as Map<String, dynamic>))
              .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageGroupSummaryList = this.modelPackageGroupSummaryList;
    final nextToken = this.nextToken;
    return {
      'ModelPackageGroupSummaryList': modelPackageGroupSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelPackagesOutput {
  /// An array of <code>ModelPackageSummary</code> objects, each of which lists a
  /// model package.
  final List<ModelPackageSummary> modelPackageSummaryList;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of model packages, use it in the subsequent request.
  final String? nextToken;

  ListModelPackagesOutput({
    required this.modelPackageSummaryList,
    this.nextToken,
  });

  factory ListModelPackagesOutput.fromJson(Map<String, dynamic> json) {
    return ListModelPackagesOutput(
      modelPackageSummaryList: (json['ModelPackageSummaryList'] as List)
          .nonNulls
          .map((e) => ModelPackageSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageSummaryList = this.modelPackageSummaryList;
    final nextToken = this.nextToken;
    return {
      'ModelPackageSummaryList': modelPackageSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelQualityJobDefinitionsResponse {
  /// A list of summaries of model quality monitoring job definitions.
  final List<MonitoringJobDefinitionSummary> jobDefinitionSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of model quality monitoring job definitions, use it in
  /// the next request.
  final String? nextToken;

  ListModelQualityJobDefinitionsResponse({
    required this.jobDefinitionSummaries,
    this.nextToken,
  });

  factory ListModelQualityJobDefinitionsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListModelQualityJobDefinitionsResponse(
      jobDefinitionSummaries: (json['JobDefinitionSummaries'] as List)
          .nonNulls
          .map((e) => MonitoringJobDefinitionSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final jobDefinitionSummaries = this.jobDefinitionSummaries;
    final nextToken = this.nextToken;
    return {
      'JobDefinitionSummaries': jobDefinitionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListModelsOutput {
  /// An array of <code>ModelSummary</code> objects, each of which lists a model.
  final List<ModelSummary> models;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of models, use it in the subsequent request.
  final String? nextToken;

  ListModelsOutput({
    required this.models,
    this.nextToken,
  });

  factory ListModelsOutput.fromJson(Map<String, dynamic> json) {
    return ListModelsOutput(
      models: (json['Models'] as List)
          .nonNulls
          .map((e) => ModelSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final models = this.models;
    final nextToken = this.nextToken;
    return {
      'Models': models,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListMonitoringAlertHistoryResponse {
  /// An alert history for a model monitoring schedule.
  final List<MonitoringAlertHistorySummary>? monitoringAlertHistory;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of alerts, use it in the subsequent request.
  final String? nextToken;

  ListMonitoringAlertHistoryResponse({
    this.monitoringAlertHistory,
    this.nextToken,
  });

  factory ListMonitoringAlertHistoryResponse.fromJson(
      Map<String, dynamic> json) {
    return ListMonitoringAlertHistoryResponse(
      monitoringAlertHistory: (json['MonitoringAlertHistory'] as List?)
          ?.nonNulls
          .map((e) =>
              MonitoringAlertHistorySummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringAlertHistory = this.monitoringAlertHistory;
    final nextToken = this.nextToken;
    return {
      if (monitoringAlertHistory != null)
        'MonitoringAlertHistory': monitoringAlertHistory,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListMonitoringAlertsResponse {
  /// A JSON array where each element is a summary for a monitoring alert.
  final List<MonitoringAlertSummary>? monitoringAlertSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of alerts, use it in the subsequent request.
  final String? nextToken;

  ListMonitoringAlertsResponse({
    this.monitoringAlertSummaries,
    this.nextToken,
  });

  factory ListMonitoringAlertsResponse.fromJson(Map<String, dynamic> json) {
    return ListMonitoringAlertsResponse(
      monitoringAlertSummaries: (json['MonitoringAlertSummaries'] as List?)
          ?.nonNulls
          .map(
              (e) => MonitoringAlertSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringAlertSummaries = this.monitoringAlertSummaries;
    final nextToken = this.nextToken;
    return {
      if (monitoringAlertSummaries != null)
        'MonitoringAlertSummaries': monitoringAlertSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListMonitoringExecutionsResponse {
  /// A JSON array in which each element is a summary for a monitoring execution.
  final List<MonitoringExecutionSummary> monitoringExecutionSummaries;

  /// The token returned if the response is truncated. To retrieve the next set of
  /// job executions, use it in the next request.
  final String? nextToken;

  ListMonitoringExecutionsResponse({
    required this.monitoringExecutionSummaries,
    this.nextToken,
  });

  factory ListMonitoringExecutionsResponse.fromJson(Map<String, dynamic> json) {
    return ListMonitoringExecutionsResponse(
      monitoringExecutionSummaries: (json['MonitoringExecutionSummaries']
              as List)
          .nonNulls
          .map((e) =>
              MonitoringExecutionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringExecutionSummaries = this.monitoringExecutionSummaries;
    final nextToken = this.nextToken;
    return {
      'MonitoringExecutionSummaries': monitoringExecutionSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListMonitoringSchedulesResponse {
  /// A JSON array in which each element is a summary for a monitoring schedule.
  final List<MonitoringScheduleSummary> monitoringScheduleSummaries;

  /// The token returned if the response is truncated. To retrieve the next set of
  /// job executions, use it in the next request.
  final String? nextToken;

  ListMonitoringSchedulesResponse({
    required this.monitoringScheduleSummaries,
    this.nextToken,
  });

  factory ListMonitoringSchedulesResponse.fromJson(Map<String, dynamic> json) {
    return ListMonitoringSchedulesResponse(
      monitoringScheduleSummaries: (json['MonitoringScheduleSummaries'] as List)
          .nonNulls
          .map((e) =>
              MonitoringScheduleSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleSummaries = this.monitoringScheduleSummaries;
    final nextToken = this.nextToken;
    return {
      'MonitoringScheduleSummaries': monitoringScheduleSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListNotebookInstanceLifecycleConfigsOutput {
  /// If the response is truncated, SageMaker returns this token. To get the next
  /// set of lifecycle configurations, use it in the next request.
  final String? nextToken;

  /// An array of <code>NotebookInstanceLifecycleConfiguration</code> objects,
  /// each listing a lifecycle configuration.
  final List<NotebookInstanceLifecycleConfigSummary>?
      notebookInstanceLifecycleConfigs;

  ListNotebookInstanceLifecycleConfigsOutput({
    this.nextToken,
    this.notebookInstanceLifecycleConfigs,
  });

  factory ListNotebookInstanceLifecycleConfigsOutput.fromJson(
      Map<String, dynamic> json) {
    return ListNotebookInstanceLifecycleConfigsOutput(
      nextToken: json['NextToken'] as String?,
      notebookInstanceLifecycleConfigs:
          (json['NotebookInstanceLifecycleConfigs'] as List?)
              ?.nonNulls
              .map((e) => NotebookInstanceLifecycleConfigSummary.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final notebookInstanceLifecycleConfigs =
        this.notebookInstanceLifecycleConfigs;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (notebookInstanceLifecycleConfigs != null)
        'NotebookInstanceLifecycleConfigs': notebookInstanceLifecycleConfigs,
    };
  }
}

class ListNotebookInstancesOutput {
  /// If the response to the previous <code>ListNotebookInstances</code> request
  /// was truncated, SageMaker returns this token. To retrieve the next set of
  /// notebook instances, use the token in the next request.
  final String? nextToken;

  /// An array of <code>NotebookInstanceSummary</code> objects, one for each
  /// notebook instance.
  final List<NotebookInstanceSummary>? notebookInstances;

  ListNotebookInstancesOutput({
    this.nextToken,
    this.notebookInstances,
  });

  factory ListNotebookInstancesOutput.fromJson(Map<String, dynamic> json) {
    return ListNotebookInstancesOutput(
      nextToken: json['NextToken'] as String?,
      notebookInstances: (json['NotebookInstances'] as List?)
          ?.nonNulls
          .map((e) =>
              NotebookInstanceSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final notebookInstances = this.notebookInstances;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (notebookInstances != null) 'NotebookInstances': notebookInstances,
    };
  }
}

class ListPipelineExecutionStepsResponse {
  /// If the result of the previous <code>ListPipelineExecutionSteps</code>
  /// request was truncated, the response includes a <code>NextToken</code>. To
  /// retrieve the next set of pipeline execution steps, use the token in the next
  /// request.
  final String? nextToken;

  /// A list of <code>PipeLineExecutionStep</code> objects. Each
  /// <code>PipeLineExecutionStep</code> consists of StepName, StartTime, EndTime,
  /// StepStatus, and Metadata. Metadata is an object with properties for each job
  /// that contains relevant information about the job created by the step.
  final List<PipelineExecutionStep>? pipelineExecutionSteps;

  ListPipelineExecutionStepsResponse({
    this.nextToken,
    this.pipelineExecutionSteps,
  });

  factory ListPipelineExecutionStepsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListPipelineExecutionStepsResponse(
      nextToken: json['NextToken'] as String?,
      pipelineExecutionSteps: (json['PipelineExecutionSteps'] as List?)
          ?.nonNulls
          .map((e) => PipelineExecutionStep.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineExecutionSteps = this.pipelineExecutionSteps;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineExecutionSteps != null)
        'PipelineExecutionSteps': pipelineExecutionSteps,
    };
  }
}

class ListPipelineExecutionsResponse {
  /// If the result of the previous <code>ListPipelineExecutions</code> request
  /// was truncated, the response includes a <code>NextToken</code>. To retrieve
  /// the next set of pipeline executions, use the token in the next request.
  final String? nextToken;

  /// Contains a sorted list of pipeline execution summary objects matching the
  /// specified filters. Each run summary includes the Amazon Resource Name (ARN)
  /// of the pipeline execution, the run date, and the status. This list can be
  /// empty.
  final List<PipelineExecutionSummary>? pipelineExecutionSummaries;

  ListPipelineExecutionsResponse({
    this.nextToken,
    this.pipelineExecutionSummaries,
  });

  factory ListPipelineExecutionsResponse.fromJson(Map<String, dynamic> json) {
    return ListPipelineExecutionsResponse(
      nextToken: json['NextToken'] as String?,
      pipelineExecutionSummaries: (json['PipelineExecutionSummaries'] as List?)
          ?.nonNulls
          .map((e) =>
              PipelineExecutionSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineExecutionSummaries = this.pipelineExecutionSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineExecutionSummaries != null)
        'PipelineExecutionSummaries': pipelineExecutionSummaries,
    };
  }
}

class ListPipelineParametersForExecutionResponse {
  /// If the result of the previous
  /// <code>ListPipelineParametersForExecution</code> request was truncated, the
  /// response includes a <code>NextToken</code>. To retrieve the next set of
  /// parameters, use the token in the next request.
  final String? nextToken;

  /// Contains a list of pipeline parameters. This list can be empty.
  final List<Parameter>? pipelineParameters;

  ListPipelineParametersForExecutionResponse({
    this.nextToken,
    this.pipelineParameters,
  });

  factory ListPipelineParametersForExecutionResponse.fromJson(
      Map<String, dynamic> json) {
    return ListPipelineParametersForExecutionResponse(
      nextToken: json['NextToken'] as String?,
      pipelineParameters: (json['PipelineParameters'] as List?)
          ?.nonNulls
          .map((e) => Parameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineParameters = this.pipelineParameters;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineParameters != null) 'PipelineParameters': pipelineParameters,
    };
  }
}

class ListPipelinesResponse {
  /// If the result of the previous <code>ListPipelines</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of pipelines, use the token in the next request.
  final String? nextToken;

  /// Contains a sorted list of <code>PipelineSummary</code> objects matching the
  /// specified filters. Each <code>PipelineSummary</code> consists of
  /// PipelineArn, PipelineName, ExperimentName, PipelineDescription,
  /// CreationTime, LastModifiedTime, LastRunTime, and RoleArn. This list can be
  /// empty.
  final List<PipelineSummary>? pipelineSummaries;

  ListPipelinesResponse({
    this.nextToken,
    this.pipelineSummaries,
  });

  factory ListPipelinesResponse.fromJson(Map<String, dynamic> json) {
    return ListPipelinesResponse(
      nextToken: json['NextToken'] as String?,
      pipelineSummaries: (json['PipelineSummaries'] as List?)
          ?.nonNulls
          .map((e) => PipelineSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final pipelineSummaries = this.pipelineSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (pipelineSummaries != null) 'PipelineSummaries': pipelineSummaries,
    };
  }
}

class ListProcessingJobsResponse {
  /// An array of <code>ProcessingJobSummary</code> objects, each listing a
  /// processing job.
  final List<ProcessingJobSummary> processingJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of processing jobs, use it in the subsequent request.
  final String? nextToken;

  ListProcessingJobsResponse({
    required this.processingJobSummaries,
    this.nextToken,
  });

  factory ListProcessingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListProcessingJobsResponse(
      processingJobSummaries: (json['ProcessingJobSummaries'] as List)
          .nonNulls
          .map((e) => ProcessingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final processingJobSummaries = this.processingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'ProcessingJobSummaries': processingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListProjectsOutput {
  /// A list of summaries of projects.
  final List<ProjectSummary> projectSummaryList;

  /// If the result of the previous <code>ListCompilationJobs</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of model compilation jobs, use the token in the next request.
  final String? nextToken;

  ListProjectsOutput({
    required this.projectSummaryList,
    this.nextToken,
  });

  factory ListProjectsOutput.fromJson(Map<String, dynamic> json) {
    return ListProjectsOutput(
      projectSummaryList: (json['ProjectSummaryList'] as List)
          .nonNulls
          .map((e) => ProjectSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final projectSummaryList = this.projectSummaryList;
    final nextToken = this.nextToken;
    return {
      'ProjectSummaryList': projectSummaryList,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListResourceCatalogsResponse {
  /// A token to resume pagination of <code>ListResourceCatalogs</code> results.
  final String? nextToken;

  /// A list of the requested <code>ResourceCatalog</code>s.
  final List<ResourceCatalog>? resourceCatalogs;

  ListResourceCatalogsResponse({
    this.nextToken,
    this.resourceCatalogs,
  });

  factory ListResourceCatalogsResponse.fromJson(Map<String, dynamic> json) {
    return ListResourceCatalogsResponse(
      nextToken: json['NextToken'] as String?,
      resourceCatalogs: (json['ResourceCatalogs'] as List?)
          ?.nonNulls
          .map((e) => ResourceCatalog.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final resourceCatalogs = this.resourceCatalogs;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (resourceCatalogs != null) 'ResourceCatalogs': resourceCatalogs,
    };
  }
}

class ListSpacesResponse {
  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  /// The list of spaces.
  final List<SpaceDetails>? spaces;

  ListSpacesResponse({
    this.nextToken,
    this.spaces,
  });

  factory ListSpacesResponse.fromJson(Map<String, dynamic> json) {
    return ListSpacesResponse(
      nextToken: json['NextToken'] as String?,
      spaces: (json['Spaces'] as List?)
          ?.nonNulls
          .map((e) => SpaceDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final spaces = this.spaces;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (spaces != null) 'Spaces': spaces,
    };
  }
}

class ListStageDevicesResponse {
  /// List of summaries of devices allocated to the stage.
  final List<DeviceDeploymentSummary> deviceDeploymentSummaries;

  /// The token to use when calling the next page of results.
  final String? nextToken;

  ListStageDevicesResponse({
    required this.deviceDeploymentSummaries,
    this.nextToken,
  });

  factory ListStageDevicesResponse.fromJson(Map<String, dynamic> json) {
    return ListStageDevicesResponse(
      deviceDeploymentSummaries: (json['DeviceDeploymentSummaries'] as List)
          .nonNulls
          .map((e) =>
              DeviceDeploymentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final deviceDeploymentSummaries = this.deviceDeploymentSummaries;
    final nextToken = this.nextToken;
    return {
      'DeviceDeploymentSummaries': deviceDeploymentSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListStudioLifecycleConfigsResponse {
  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  /// A list of Lifecycle Configurations and their properties.
  final List<StudioLifecycleConfigDetails>? studioLifecycleConfigs;

  ListStudioLifecycleConfigsResponse({
    this.nextToken,
    this.studioLifecycleConfigs,
  });

  factory ListStudioLifecycleConfigsResponse.fromJson(
      Map<String, dynamic> json) {
    return ListStudioLifecycleConfigsResponse(
      nextToken: json['NextToken'] as String?,
      studioLifecycleConfigs: (json['StudioLifecycleConfigs'] as List?)
          ?.nonNulls
          .map((e) =>
              StudioLifecycleConfigDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final studioLifecycleConfigs = this.studioLifecycleConfigs;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (studioLifecycleConfigs != null)
        'StudioLifecycleConfigs': studioLifecycleConfigs,
    };
  }
}

class ListSubscribedWorkteamsResponse {
  /// An array of <code>Workteam</code> objects, each describing a work team.
  final List<SubscribedWorkteam> subscribedWorkteams;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of work teams, use it in the subsequent request.
  final String? nextToken;

  ListSubscribedWorkteamsResponse({
    required this.subscribedWorkteams,
    this.nextToken,
  });

  factory ListSubscribedWorkteamsResponse.fromJson(Map<String, dynamic> json) {
    return ListSubscribedWorkteamsResponse(
      subscribedWorkteams: (json['SubscribedWorkteams'] as List)
          .nonNulls
          .map((e) => SubscribedWorkteam.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final subscribedWorkteams = this.subscribedWorkteams;
    final nextToken = this.nextToken;
    return {
      'SubscribedWorkteams': subscribedWorkteams,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTagsOutput {
  /// If response is truncated, SageMaker includes a token in the response. You
  /// can use this token in your subsequent request to fetch next set of tokens.
  final String? nextToken;

  /// An array of <code>Tag</code> objects, each with a tag key and a value.
  final List<Tag>? tags;

  ListTagsOutput({
    this.nextToken,
    this.tags,
  });

  factory ListTagsOutput.fromJson(Map<String, dynamic> json) {
    return ListTagsOutput(
      nextToken: json['NextToken'] as String?,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final tags = this.tags;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (tags != null) 'Tags': tags,
    };
  }
}

class ListTrainingJobsForHyperParameterTuningJobResponse {
  /// A list of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a>
  /// objects that describe the training jobs that the
  /// <code>ListTrainingJobsForHyperParameterTuningJob</code> request returned.
  final List<HyperParameterTrainingJobSummary> trainingJobSummaries;

  /// If the result of this
  /// <code>ListTrainingJobsForHyperParameterTuningJob</code> request was
  /// truncated, the response includes a <code>NextToken</code>. To retrieve the
  /// next set of training jobs, use the token in the next request.
  final String? nextToken;

  ListTrainingJobsForHyperParameterTuningJobResponse({
    required this.trainingJobSummaries,
    this.nextToken,
  });

  factory ListTrainingJobsForHyperParameterTuningJobResponse.fromJson(
      Map<String, dynamic> json) {
    return ListTrainingJobsForHyperParameterTuningJobResponse(
      trainingJobSummaries: (json['TrainingJobSummaries'] as List)
          .nonNulls
          .map((e) => HyperParameterTrainingJobSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobSummaries = this.trainingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'TrainingJobSummaries': trainingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTrainingJobsResponse {
  /// An array of <code>TrainingJobSummary</code> objects, each listing a training
  /// job.
  final List<TrainingJobSummary> trainingJobSummaries;

  /// If the response is truncated, SageMaker returns this token. To retrieve the
  /// next set of training jobs, use it in the subsequent request.
  final String? nextToken;

  ListTrainingJobsResponse({
    required this.trainingJobSummaries,
    this.nextToken,
  });

  factory ListTrainingJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListTrainingJobsResponse(
      trainingJobSummaries: (json['TrainingJobSummaries'] as List)
          .nonNulls
          .map((e) => TrainingJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobSummaries = this.trainingJobSummaries;
    final nextToken = this.nextToken;
    return {
      'TrainingJobSummaries': trainingJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTransformJobsResponse {
  /// An array of <code>TransformJobSummary</code> objects.
  final List<TransformJobSummary> transformJobSummaries;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of transform jobs, use it in the next request.
  final String? nextToken;

  ListTransformJobsResponse({
    required this.transformJobSummaries,
    this.nextToken,
  });

  factory ListTransformJobsResponse.fromJson(Map<String, dynamic> json) {
    return ListTransformJobsResponse(
      transformJobSummaries: (json['TransformJobSummaries'] as List)
          .nonNulls
          .map((e) => TransformJobSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final transformJobSummaries = this.transformJobSummaries;
    final nextToken = this.nextToken;
    return {
      'TransformJobSummaries': transformJobSummaries,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

class ListTrialComponentsResponse {
  /// A token for getting the next set of components, if there are any.
  final String? nextToken;

  /// A list of the summaries of your trial components.
  final List<TrialComponentSummary>? trialComponentSummaries;

  ListTrialComponentsResponse({
    this.nextToken,
    this.trialComponentSummaries,
  });

  factory ListTrialComponentsResponse.fromJson(Map<String, dynamic> json) {
    return ListTrialComponentsResponse(
      nextToken: json['NextToken'] as String?,
      trialComponentSummaries: (json['TrialComponentSummaries'] as List?)
          ?.nonNulls
          .map((e) => TrialComponentSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trialComponentSummaries = this.trialComponentSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (trialComponentSummaries != null)
        'TrialComponentSummaries': trialComponentSummaries,
    };
  }
}

class ListTrialsResponse {
  /// A token for getting the next set of trials, if there are any.
  final String? nextToken;

  /// A list of the summaries of your trials.
  final List<TrialSummary>? trialSummaries;

  ListTrialsResponse({
    this.nextToken,
    this.trialSummaries,
  });

  factory ListTrialsResponse.fromJson(Map<String, dynamic> json) {
    return ListTrialsResponse(
      nextToken: json['NextToken'] as String?,
      trialSummaries: (json['TrialSummaries'] as List?)
          ?.nonNulls
          .map((e) => TrialSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final trialSummaries = this.trialSummaries;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (trialSummaries != null) 'TrialSummaries': trialSummaries,
    };
  }
}

class ListUserProfilesResponse {
  /// If the previous response was truncated, you will receive this token. Use it
  /// in your next request to receive the next set of results.
  final String? nextToken;

  /// The list of user profiles.
  final List<UserProfileDetails>? userProfiles;

  ListUserProfilesResponse({
    this.nextToken,
    this.userProfiles,
  });

  factory ListUserProfilesResponse.fromJson(Map<String, dynamic> json) {
    return ListUserProfilesResponse(
      nextToken: json['NextToken'] as String?,
      userProfiles: (json['UserProfiles'] as List?)
          ?.nonNulls
          .map((e) => UserProfileDetails.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final userProfiles = this.userProfiles;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (userProfiles != null) 'UserProfiles': userProfiles,
    };
  }
}

class ListWorkforcesResponse {
  /// A list containing information about your workforce.
  final List<Workforce> workforces;

  /// A token to resume pagination.
  final String? nextToken;

  ListWorkforcesResponse({
    required this.workforces,
    this.nextToken,
  });

  factory ListWorkforcesResponse.fromJson(Map<String, dynamic> json) {
    return ListWorkforcesResponse(
      workforces: (json['Workforces'] as List)
          .nonNulls
          .map((e) => Workforce.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workforces = this.workforces;
    final nextToken = this.nextToken;
    return {
      'Workforces': workforces,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListWorkforcesSortByOptions {
  name('Name'),
  createDate('CreateDate'),
  ;

  final String value;

  const ListWorkforcesSortByOptions(this.value);

  static ListWorkforcesSortByOptions fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListWorkforcesSortByOptions'));
}

class ListWorkteamsResponse {
  /// An array of <code>Workteam</code> objects, each describing a work team.
  final List<Workteam> workteams;

  /// If the response is truncated, Amazon SageMaker returns this token. To
  /// retrieve the next set of work teams, use it in the subsequent request.
  final String? nextToken;

  ListWorkteamsResponse({
    required this.workteams,
    this.nextToken,
  });

  factory ListWorkteamsResponse.fromJson(Map<String, dynamic> json) {
    return ListWorkteamsResponse(
      workteams: (json['Workteams'] as List)
          .nonNulls
          .map((e) => Workteam.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workteams = this.workteams;
    final nextToken = this.nextToken;
    return {
      'Workteams': workteams,
      if (nextToken != null) 'NextToken': nextToken,
    };
  }
}

enum ListWorkteamsSortByOptions {
  name('Name'),
  createDate('CreateDate'),
  ;

  final String value;

  const ListWorkteamsSortByOptions(this.value);

  static ListWorkteamsSortByOptions fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ListWorkteamsSortByOptions'));
}

enum ManagedInstanceScalingStatus {
  enabled('ENABLED'),
  disabled('DISABLED'),
  ;

  final String value;

  const ManagedInstanceScalingStatus(this.value);

  static ManagedInstanceScalingStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ManagedInstanceScalingStatus'));
}

/// Defines an Amazon Cognito or your own OIDC IdP user group that is part of a
/// work team.
class MemberDefinition {
  /// The Amazon Cognito user group that is part of the work team.
  final CognitoMemberDefinition? cognitoMemberDefinition;

  /// A list user groups that exist in your OIDC Identity Provider (IdP). One to
  /// ten groups can be used to create a single private work team. When you add a
  /// user group to the list of <code>Groups</code>, you can add that user group
  /// to one or more private work teams. If you add a user group to a private work
  /// team, all workers in that user group are added to the work team.
  final OidcMemberDefinition? oidcMemberDefinition;

  MemberDefinition({
    this.cognitoMemberDefinition,
    this.oidcMemberDefinition,
  });

  factory MemberDefinition.fromJson(Map<String, dynamic> json) {
    return MemberDefinition(
      cognitoMemberDefinition: json['CognitoMemberDefinition'] != null
          ? CognitoMemberDefinition.fromJson(
              json['CognitoMemberDefinition'] as Map<String, dynamic>)
          : null,
      oidcMemberDefinition: json['OidcMemberDefinition'] != null
          ? OidcMemberDefinition.fromJson(
              json['OidcMemberDefinition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final cognitoMemberDefinition = this.cognitoMemberDefinition;
    final oidcMemberDefinition = this.oidcMemberDefinition;
    return {
      if (cognitoMemberDefinition != null)
        'CognitoMemberDefinition': cognitoMemberDefinition,
      if (oidcMemberDefinition != null)
        'OidcMemberDefinition': oidcMemberDefinition,
    };
  }
}

/// Metadata properties of the tracking entity, trial, or trial component.
class MetadataProperties {
  /// The commit ID.
  final String? commitId;

  /// The entity this entity was generated by.
  final String? generatedBy;

  /// The project ID.
  final String? projectId;

  /// The repository.
  final String? repository;

  MetadataProperties({
    this.commitId,
    this.generatedBy,
    this.projectId,
    this.repository,
  });

  factory MetadataProperties.fromJson(Map<String, dynamic> json) {
    return MetadataProperties(
      commitId: json['CommitId'] as String?,
      generatedBy: json['GeneratedBy'] as String?,
      projectId: json['ProjectId'] as String?,
      repository: json['Repository'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final commitId = this.commitId;
    final generatedBy = this.generatedBy;
    final projectId = this.projectId;
    final repository = this.repository;
    return {
      if (commitId != null) 'CommitId': commitId,
      if (generatedBy != null) 'GeneratedBy': generatedBy,
      if (projectId != null) 'ProjectId': projectId,
      if (repository != null) 'Repository': repository,
    };
  }
}

/// The name, value, and date and time of a metric that was emitted to Amazon
/// CloudWatch.
class MetricData {
  /// The name of the metric.
  final String? metricName;

  /// The date and time that the algorithm emitted the metric.
  final DateTime? timestamp;

  /// The value of the metric.
  final double? value;

  MetricData({
    this.metricName,
    this.timestamp,
    this.value,
  });

  factory MetricData.fromJson(Map<String, dynamic> json) {
    return MetricData(
      metricName: json['MetricName'] as String?,
      timestamp: timeStampFromJson(json['Timestamp']),
      value: json['Value'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final timestamp = this.timestamp;
    final value = this.value;
    return {
      if (metricName != null) 'MetricName': metricName,
      if (timestamp != null) 'Timestamp': unixTimestampToJson(timestamp),
      if (value != null) 'Value': value,
    };
  }
}

/// Information about the metric for a candidate produced by an AutoML job.
class MetricDatum {
  /// The name of the metric.
  final AutoMLMetricEnum? metricName;

  /// The dataset split from which the AutoML job produced the metric.
  final MetricSetSource? set;

  /// The name of the standard metric.
  /// <note>
  /// For definitions of the standard metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-metrics">
  /// <code>Autopilot candidate metrics</code> </a>.
  /// </note>
  final AutoMLMetricExtendedEnum? standardMetricName;

  /// The value of the metric.
  final double? value;

  MetricDatum({
    this.metricName,
    this.set,
    this.standardMetricName,
    this.value,
  });

  factory MetricDatum.fromJson(Map<String, dynamic> json) {
    return MetricDatum(
      metricName:
          (json['MetricName'] as String?)?.let(AutoMLMetricEnum.fromString),
      set: (json['Set'] as String?)?.let(MetricSetSource.fromString),
      standardMetricName: (json['StandardMetricName'] as String?)
          ?.let(AutoMLMetricExtendedEnum.fromString),
      value: json['Value'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final metricName = this.metricName;
    final set = this.set;
    final standardMetricName = this.standardMetricName;
    final value = this.value;
    return {
      if (metricName != null) 'MetricName': metricName.value,
      if (set != null) 'Set': set.value,
      if (standardMetricName != null)
        'StandardMetricName': standardMetricName.value,
      if (value != null) 'Value': value,
    };
  }
}

/// Specifies a metric that the training algorithm writes to <code>stderr</code>
/// or <code>stdout</code>. You can view these logs to understand how your
/// training job performs and check for any errors encountered during training.
/// SageMaker hyperparameter tuning captures all defined metrics. Specify one of
/// the defined metrics to use as an objective metric using the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective">TuningObjective</a>
/// parameter in the <code>HyperParameterTrainingJobDefinition</code> API to
/// evaluate job performance during hyperparameter tuning.
class MetricDefinition {
  /// The name of the metric.
  final String name;

  /// A regular expression that searches the output of a training job and gets the
  /// value of the metric. For more information about using regular expressions to
  /// define metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html">Defining
  /// metrics and environment variables</a>.
  final String regex;

  MetricDefinition({
    required this.name,
    required this.regex,
  });

  factory MetricDefinition.fromJson(Map<String, dynamic> json) {
    return MetricDefinition(
      name: json['Name'] as String,
      regex: json['Regex'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final regex = this.regex;
    return {
      'Name': name,
      'Regex': regex,
    };
  }
}

enum MetricSetSource {
  train('Train'),
  validation('Validation'),
  test('Test'),
  ;

  final String value;

  const MetricSetSource(this.value);

  static MetricSetSource fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MetricSetSource'));
}

/// An object containing information about a metric.
class MetricSpecification {
  /// Information about a customized metric.
  final CustomizedMetricSpecification? customized;

  /// Information about a predefined metric.
  final PredefinedMetricSpecification? predefined;

  MetricSpecification({
    this.customized,
    this.predefined,
  });

  factory MetricSpecification.fromJson(Map<String, dynamic> json) {
    return MetricSpecification(
      customized: json['Customized'] != null
          ? CustomizedMetricSpecification.fromJson(
              json['Customized'] as Map<String, dynamic>)
          : null,
      predefined: json['Predefined'] != null
          ? PredefinedMetricSpecification.fromJson(
              json['Predefined'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final customized = this.customized;
    final predefined = this.predefined;
    return {
      if (customized != null) 'Customized': customized,
      if (predefined != null) 'Predefined': predefined,
    };
  }
}

/// Details about the metrics source.
class MetricsSource {
  /// The metric source content type.
  final String contentType;

  /// The S3 URI for the metrics source.
  final String s3Uri;

  /// The hash key used for the metrics source.
  final String? contentDigest;

  MetricsSource({
    required this.contentType,
    required this.s3Uri,
    this.contentDigest,
  });

  factory MetricsSource.fromJson(Map<String, dynamic> json) {
    return MetricsSource(
      contentType: json['ContentType'] as String,
      s3Uri: json['S3Uri'] as String,
      contentDigest: json['ContentDigest'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contentType = this.contentType;
    final s3Uri = this.s3Uri;
    final contentDigest = this.contentDigest;
    return {
      'ContentType': contentType,
      'S3Uri': s3Uri,
      if (contentDigest != null) 'ContentDigest': contentDigest,
    };
  }
}

/// The properties of a model as returned by the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API.
class Model {
  /// The containers in the inference pipeline.
  final List<ContainerDefinition>? containers;

  /// A timestamp that indicates when the model was created.
  final DateTime? creationTime;

  /// A set of recommended deployment configurations for the model.
  final DeploymentRecommendation? deploymentRecommendation;

  /// Isolates the model container. No inbound or outbound network calls can be
  /// made to or from the model container.
  final bool? enableNetworkIsolation;

  /// The Amazon Resource Name (ARN) of the IAM role that you specified for the
  /// model.
  final String? executionRoleArn;
  final InferenceExecutionConfig? inferenceExecutionConfig;

  /// The Amazon Resource Name (ARN) of the model.
  final String? modelArn;

  /// The name of the model.
  final String? modelName;
  final ContainerDefinition? primaryContainer;

  /// A list of key-value pairs associated with the model. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;
  final VpcConfig? vpcConfig;

  Model({
    this.containers,
    this.creationTime,
    this.deploymentRecommendation,
    this.enableNetworkIsolation,
    this.executionRoleArn,
    this.inferenceExecutionConfig,
    this.modelArn,
    this.modelName,
    this.primaryContainer,
    this.tags,
    this.vpcConfig,
  });

  factory Model.fromJson(Map<String, dynamic> json) {
    return Model(
      containers: (json['Containers'] as List?)
          ?.nonNulls
          .map((e) => ContainerDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      creationTime: timeStampFromJson(json['CreationTime']),
      deploymentRecommendation: json['DeploymentRecommendation'] != null
          ? DeploymentRecommendation.fromJson(
              json['DeploymentRecommendation'] as Map<String, dynamic>)
          : null,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      executionRoleArn: json['ExecutionRoleArn'] as String?,
      inferenceExecutionConfig: json['InferenceExecutionConfig'] != null
          ? InferenceExecutionConfig.fromJson(
              json['InferenceExecutionConfig'] as Map<String, dynamic>)
          : null,
      modelArn: json['ModelArn'] as String?,
      modelName: json['ModelName'] as String?,
      primaryContainer: json['PrimaryContainer'] != null
          ? ContainerDefinition.fromJson(
              json['PrimaryContainer'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final containers = this.containers;
    final creationTime = this.creationTime;
    final deploymentRecommendation = this.deploymentRecommendation;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final executionRoleArn = this.executionRoleArn;
    final inferenceExecutionConfig = this.inferenceExecutionConfig;
    final modelArn = this.modelArn;
    final modelName = this.modelName;
    final primaryContainer = this.primaryContainer;
    final tags = this.tags;
    final vpcConfig = this.vpcConfig;
    return {
      if (containers != null) 'Containers': containers,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (deploymentRecommendation != null)
        'DeploymentRecommendation': deploymentRecommendation,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (executionRoleArn != null) 'ExecutionRoleArn': executionRoleArn,
      if (inferenceExecutionConfig != null)
        'InferenceExecutionConfig': inferenceExecutionConfig,
      if (modelArn != null) 'ModelArn': modelArn,
      if (modelName != null) 'ModelName': modelName,
      if (primaryContainer != null) 'PrimaryContainer': primaryContainer,
      if (tags != null) 'Tags': tags,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// The access configuration file to control access to the ML model. You can
/// explicitly accept the model end-user license agreement (EULA) within the
/// <code>ModelAccessConfig</code>.
///
/// <ul>
/// <li>
/// If you are a Jumpstart user, see the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula">End-user
/// license agreements</a> section for more details on accepting the EULA.
/// </li>
/// <li>
/// If you are an AutoML user, see the <i>Optional Parameters</i> section of
/// <i>Create an AutoML job to fine-tune text generation models using the
/// API</i> for details on <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-finetune-llms.html#autopilot-llms-finetuning-api-optional-params">How
/// to set the EULA acceptance when fine-tuning a model using the AutoML
/// API</a>.
/// </li>
/// </ul>
class ModelAccessConfig {
  /// Specifies agreement to the model end-user license agreement (EULA). The
  /// <code>AcceptEula</code> value must be explicitly defined as
  /// <code>True</code> in order to accept the EULA that this model requires. You
  /// are responsible for reviewing and complying with any applicable license
  /// terms and making sure they are acceptable for your use case before
  /// downloading or using a model.
  final bool acceptEula;

  ModelAccessConfig({
    required this.acceptEula,
  });

  factory ModelAccessConfig.fromJson(Map<String, dynamic> json) {
    return ModelAccessConfig(
      acceptEula: json['AcceptEula'] as bool,
    );
  }

  Map<String, dynamic> toJson() {
    final acceptEula = this.acceptEula;
    return {
      'AcceptEula': acceptEula,
    };
  }
}

enum ModelApprovalStatus {
  approved('Approved'),
  rejected('Rejected'),
  pendingManualApproval('PendingManualApproval'),
  ;

  final String value;

  const ModelApprovalStatus(this.value);

  static ModelApprovalStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelApprovalStatus'));
}

/// Provides information about the location that is configured for storing model
/// artifacts.
///
/// Model artifacts are outputs that result from training a model. They
/// typically consist of trained parameters, a model definition that describes
/// how to compute inferences, and other metadata. A SageMaker container stores
/// your trained model artifacts in the <code>/opt/ml/model</code> directory.
/// After training has completed, by default, these artifacts are uploaded to
/// your Amazon S3 bucket as compressed files.
class ModelArtifacts {
  /// The path of the S3 object that contains the model artifacts. For example,
  /// <code>s3://bucket-name/keynameprefix/model.tar.gz</code>.
  final String s3ModelArtifacts;

  ModelArtifacts({
    required this.s3ModelArtifacts,
  });

  factory ModelArtifacts.fromJson(Map<String, dynamic> json) {
    return ModelArtifacts(
      s3ModelArtifacts: json['S3ModelArtifacts'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3ModelArtifacts = this.s3ModelArtifacts;
    return {
      'S3ModelArtifacts': s3ModelArtifacts,
    };
  }
}

/// Docker container image configuration object for the model bias job.
class ModelBiasAppSpecification {
  /// JSON formatted S3 file that defines bias parameters. For more information on
  /// this JSON configuration file, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-bias-parameters.html">Configure
  /// bias parameters</a>.
  final String configUri;

  /// The container image to be run by the model bias job.
  final String imageUri;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  ModelBiasAppSpecification({
    required this.configUri,
    required this.imageUri,
    this.environment,
  });

  factory ModelBiasAppSpecification.fromJson(Map<String, dynamic> json) {
    return ModelBiasAppSpecification(
      configUri: json['ConfigUri'] as String,
      imageUri: json['ImageUri'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final configUri = this.configUri;
    final imageUri = this.imageUri;
    final environment = this.environment;
    return {
      'ConfigUri': configUri,
      'ImageUri': imageUri,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// The configuration for a baseline model bias job.
class ModelBiasBaselineConfig {
  /// The name of the baseline model bias job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;

  ModelBiasBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
  });

  factory ModelBiasBaselineConfig.fromJson(Map<String, dynamic> json) {
    return ModelBiasBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
    };
  }
}

/// Inputs for the model bias job.
class ModelBiasJobInput {
  /// Location of ground truth labels to use in model bias job.
  final MonitoringGroundTruthS3Input groundTruthS3Input;

  /// Input object for the batch transform job.
  final BatchTransformInput? batchTransformInput;
  final EndpointInput? endpointInput;

  ModelBiasJobInput({
    required this.groundTruthS3Input,
    this.batchTransformInput,
    this.endpointInput,
  });

  factory ModelBiasJobInput.fromJson(Map<String, dynamic> json) {
    return ModelBiasJobInput(
      groundTruthS3Input: MonitoringGroundTruthS3Input.fromJson(
          json['GroundTruthS3Input'] as Map<String, dynamic>),
      batchTransformInput: json['BatchTransformInput'] != null
          ? BatchTransformInput.fromJson(
              json['BatchTransformInput'] as Map<String, dynamic>)
          : null,
      endpointInput: json['EndpointInput'] != null
          ? EndpointInput.fromJson(
              json['EndpointInput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final groundTruthS3Input = this.groundTruthS3Input;
    final batchTransformInput = this.batchTransformInput;
    final endpointInput = this.endpointInput;
    return {
      'GroundTruthS3Input': groundTruthS3Input,
      if (batchTransformInput != null)
        'BatchTransformInput': batchTransformInput,
      if (endpointInput != null) 'EndpointInput': endpointInput,
    };
  }
}

enum ModelCacheSetting {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ModelCacheSetting(this.value);

  static ModelCacheSetting fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ModelCacheSetting'));
}

/// An Amazon SageMaker Model Card.
class ModelCard {
  /// The content of the model card. Content uses the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema">model
  /// card JSON schema</a> and provided as a string.
  final String? content;
  final UserContext? createdBy;

  /// The date and time that the model card was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// The date and time that the model card was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the model card.
  final String? modelCardArn;

  /// The unique name of the model card.
  final String? modelCardName;

  /// The approval status of the model card within your organization. Different
  /// organizations might have different criteria for model card review and
  /// approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates should be
  /// made to the model card, but it can still be exported.
  /// </li>
  /// </ul>
  final ModelCardStatus? modelCardStatus;

  /// The version of the model card.
  final int? modelCardVersion;

  /// The unique name (ID) of the model.
  final String? modelId;

  /// The model package group that contains the model package. Only relevant for
  /// model cards created for model packages in the Amazon SageMaker Model
  /// Registry.
  final String? modelPackageGroupName;

  /// The risk rating of the model. Different organizations might have different
  /// criteria for model card risk ratings. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-risk-rating.html">Risk
  /// ratings</a>.
  final String? riskRating;

  /// The security configuration used to protect model card data.
  final ModelCardSecurityConfig? securityConfig;

  /// Key-value pairs used to manage metadata for the model card.
  final List<Tag>? tags;

  ModelCard({
    this.content,
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.modelCardArn,
    this.modelCardName,
    this.modelCardStatus,
    this.modelCardVersion,
    this.modelId,
    this.modelPackageGroupName,
    this.riskRating,
    this.securityConfig,
    this.tags,
  });

  factory ModelCard.fromJson(Map<String, dynamic> json) {
    return ModelCard(
      content: json['Content'] as String?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelCardArn: json['ModelCardArn'] as String?,
      modelCardName: json['ModelCardName'] as String?,
      modelCardStatus:
          (json['ModelCardStatus'] as String?)?.let(ModelCardStatus.fromString),
      modelCardVersion: json['ModelCardVersion'] as int?,
      modelId: json['ModelId'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      riskRating: json['RiskRating'] as String?,
      securityConfig: json['SecurityConfig'] != null
          ? ModelCardSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final content = this.content;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final modelCardArn = this.modelCardArn;
    final modelCardName = this.modelCardName;
    final modelCardStatus = this.modelCardStatus;
    final modelCardVersion = this.modelCardVersion;
    final modelId = this.modelId;
    final modelPackageGroupName = this.modelPackageGroupName;
    final riskRating = this.riskRating;
    final securityConfig = this.securityConfig;
    final tags = this.tags;
    return {
      if (content != null) 'Content': content,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelCardArn != null) 'ModelCardArn': modelCardArn,
      if (modelCardName != null) 'ModelCardName': modelCardName,
      if (modelCardStatus != null) 'ModelCardStatus': modelCardStatus.value,
      if (modelCardVersion != null) 'ModelCardVersion': modelCardVersion,
      if (modelId != null) 'ModelId': modelId,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (riskRating != null) 'RiskRating': riskRating,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// The artifacts of the model card export job.
class ModelCardExportArtifacts {
  /// The Amazon S3 URI of the exported model artifacts.
  final String s3ExportArtifacts;

  ModelCardExportArtifacts({
    required this.s3ExportArtifacts,
  });

  factory ModelCardExportArtifacts.fromJson(Map<String, dynamic> json) {
    return ModelCardExportArtifacts(
      s3ExportArtifacts: json['S3ExportArtifacts'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3ExportArtifacts = this.s3ExportArtifacts;
    return {
      'S3ExportArtifacts': s3ExportArtifacts,
    };
  }
}

/// Attribute by which to sort returned export jobs.
enum ModelCardExportJobSortBy {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const ModelCardExportJobSortBy(this.value);

  static ModelCardExportJobSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelCardExportJobSortBy'));
}

enum ModelCardExportJobSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const ModelCardExportJobSortOrder(this.value);

  static ModelCardExportJobSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelCardExportJobSortOrder'));
}

enum ModelCardExportJobStatus {
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  ;

  final String value;

  const ModelCardExportJobStatus(this.value);

  static ModelCardExportJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelCardExportJobStatus'));
}

/// The summary of the Amazon SageMaker Model Card export job.
class ModelCardExportJobSummary {
  /// The date and time that the model card export job was created.
  final DateTime createdAt;

  /// The date and time that the model card export job was last modified..
  final DateTime lastModifiedAt;

  /// The Amazon Resource Name (ARN) of the model card export job.
  final String modelCardExportJobArn;

  /// The name of the model card export job.
  final String modelCardExportJobName;

  /// The name of the model card that the export job exports.
  final String modelCardName;

  /// The version of the model card that the export job exports.
  final int modelCardVersion;

  /// The completion status of the model card export job.
  final ModelCardExportJobStatus status;

  ModelCardExportJobSummary({
    required this.createdAt,
    required this.lastModifiedAt,
    required this.modelCardExportJobArn,
    required this.modelCardExportJobName,
    required this.modelCardName,
    required this.modelCardVersion,
    required this.status,
  });

  factory ModelCardExportJobSummary.fromJson(Map<String, dynamic> json) {
    return ModelCardExportJobSummary(
      createdAt: nonNullableTimeStampFromJson(json['CreatedAt'] as Object),
      lastModifiedAt:
          nonNullableTimeStampFromJson(json['LastModifiedAt'] as Object),
      modelCardExportJobArn: json['ModelCardExportJobArn'] as String,
      modelCardExportJobName: json['ModelCardExportJobName'] as String,
      modelCardName: json['ModelCardName'] as String,
      modelCardVersion: json['ModelCardVersion'] as int,
      status: ModelCardExportJobStatus.fromString((json['Status'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final createdAt = this.createdAt;
    final lastModifiedAt = this.lastModifiedAt;
    final modelCardExportJobArn = this.modelCardExportJobArn;
    final modelCardExportJobName = this.modelCardExportJobName;
    final modelCardName = this.modelCardName;
    final modelCardVersion = this.modelCardVersion;
    final status = this.status;
    return {
      'CreatedAt': unixTimestampToJson(createdAt),
      'LastModifiedAt': unixTimestampToJson(lastModifiedAt),
      'ModelCardExportJobArn': modelCardExportJobArn,
      'ModelCardExportJobName': modelCardExportJobName,
      'ModelCardName': modelCardName,
      'ModelCardVersion': modelCardVersion,
      'Status': status.value,
    };
  }
}

/// Configure the export output details for an Amazon SageMaker Model Card.
class ModelCardExportOutputConfig {
  /// The Amazon S3 output path to export your model card PDF.
  final String s3OutputPath;

  ModelCardExportOutputConfig({
    required this.s3OutputPath,
  });

  factory ModelCardExportOutputConfig.fromJson(Map<String, dynamic> json) {
    return ModelCardExportOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    return {
      'S3OutputPath': s3OutputPath,
    };
  }
}

enum ModelCardProcessingStatus {
  deleteInProgress('DeleteInProgress'),
  deletePending('DeletePending'),
  contentDeleted('ContentDeleted'),
  exportJobsDeleted('ExportJobsDeleted'),
  deleteCompleted('DeleteCompleted'),
  deleteFailed('DeleteFailed'),
  ;

  final String value;

  const ModelCardProcessingStatus(this.value);

  static ModelCardProcessingStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelCardProcessingStatus'));
}

/// Configure the security settings to protect model card data.
class ModelCardSecurityConfig {
  /// A Key Management Service <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
  /// ID</a> to use for encrypting a model card.
  final String? kmsKeyId;

  ModelCardSecurityConfig({
    this.kmsKeyId,
  });

  factory ModelCardSecurityConfig.fromJson(Map<String, dynamic> json) {
    return ModelCardSecurityConfig(
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum ModelCardSortBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const ModelCardSortBy(this.value);

  static ModelCardSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ModelCardSortBy'));
}

enum ModelCardSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const ModelCardSortOrder(this.value);

  static ModelCardSortOrder fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelCardSortOrder'));
}

enum ModelCardStatus {
  draft('Draft'),
  pendingReview('PendingReview'),
  approved('Approved'),
  archived('Archived'),
  ;

  final String value;

  const ModelCardStatus(this.value);

  static ModelCardStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ModelCardStatus'));
}

/// A summary of the model card.
class ModelCardSummary {
  /// The date and time that the model card was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model card.
  final String modelCardArn;

  /// The name of the model card.
  final String modelCardName;

  /// The approval status of the model card within your organization. Different
  /// organizations might have different criteria for model card review and
  /// approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates should be
  /// made to the model card, but it can still be exported.
  /// </li>
  /// </ul>
  final ModelCardStatus modelCardStatus;

  /// The date and time that the model card was last modified.
  final DateTime? lastModifiedTime;

  ModelCardSummary({
    required this.creationTime,
    required this.modelCardArn,
    required this.modelCardName,
    required this.modelCardStatus,
    this.lastModifiedTime,
  });

  factory ModelCardSummary.fromJson(Map<String, dynamic> json) {
    return ModelCardSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelCardArn: json['ModelCardArn'] as String,
      modelCardName: json['ModelCardName'] as String,
      modelCardStatus:
          ModelCardStatus.fromString((json['ModelCardStatus'] as String)),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelCardArn = this.modelCardArn;
    final modelCardName = this.modelCardName;
    final modelCardStatus = this.modelCardStatus;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelCardArn': modelCardArn,
      'ModelCardName': modelCardName,
      'ModelCardStatus': modelCardStatus.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

enum ModelCardVersionSortBy {
  version('Version'),
  ;

  final String value;

  const ModelCardVersionSortBy(this.value);

  static ModelCardVersionSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelCardVersionSortBy'));
}

/// A summary of a specific version of the model card.
class ModelCardVersionSummary {
  /// The date and time that the model card version was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model card.
  final String modelCardArn;

  /// The name of the model card.
  final String modelCardName;

  /// The approval status of the model card version within your organization.
  /// Different organizations might have different criteria for model card review
  /// and approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates should be
  /// made to the model card, but it can still be exported.
  /// </li>
  /// </ul>
  final ModelCardStatus modelCardStatus;

  /// A version of the model card.
  final int modelCardVersion;

  /// The time date and time that the model card version was last modified.
  final DateTime? lastModifiedTime;

  ModelCardVersionSummary({
    required this.creationTime,
    required this.modelCardArn,
    required this.modelCardName,
    required this.modelCardStatus,
    required this.modelCardVersion,
    this.lastModifiedTime,
  });

  factory ModelCardVersionSummary.fromJson(Map<String, dynamic> json) {
    return ModelCardVersionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelCardArn: json['ModelCardArn'] as String,
      modelCardName: json['ModelCardName'] as String,
      modelCardStatus:
          ModelCardStatus.fromString((json['ModelCardStatus'] as String)),
      modelCardVersion: json['ModelCardVersion'] as int,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelCardArn = this.modelCardArn;
    final modelCardName = this.modelCardName;
    final modelCardStatus = this.modelCardStatus;
    final modelCardVersion = this.modelCardVersion;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelCardArn': modelCardArn,
      'ModelCardName': modelCardName,
      'ModelCardStatus': modelCardStatus.value,
      'ModelCardVersion': modelCardVersion,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Configures the timeout and maximum number of retries for processing a
/// transform job invocation.
class ModelClientConfig {
  /// The maximum number of retries when invocation requests are failing. The
  /// default value is 3.
  final int? invocationsMaxRetries;

  /// The timeout value in seconds for an invocation request. The default value is
  /// 600.
  final int? invocationsTimeoutInSeconds;

  ModelClientConfig({
    this.invocationsMaxRetries,
    this.invocationsTimeoutInSeconds,
  });

  factory ModelClientConfig.fromJson(Map<String, dynamic> json) {
    return ModelClientConfig(
      invocationsMaxRetries: json['InvocationsMaxRetries'] as int?,
      invocationsTimeoutInSeconds: json['InvocationsTimeoutInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final invocationsMaxRetries = this.invocationsMaxRetries;
    final invocationsTimeoutInSeconds = this.invocationsTimeoutInSeconds;
    return {
      if (invocationsMaxRetries != null)
        'InvocationsMaxRetries': invocationsMaxRetries,
      if (invocationsTimeoutInSeconds != null)
        'InvocationsTimeoutInSeconds': invocationsTimeoutInSeconds,
    };
  }
}

enum ModelCompressionType {
  none('None'),
  gzip('Gzip'),
  ;

  final String value;

  const ModelCompressionType(this.value);

  static ModelCompressionType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelCompressionType'));
}

/// Defines the model configuration. Includes the specification name and
/// environment parameters.
class ModelConfiguration {
  /// The name of the compilation job used to create the recommended model
  /// artifacts.
  final String? compilationJobName;

  /// Defines the environment parameters that includes key, value types, and
  /// values.
  final List<EnvironmentParameter>? environmentParameters;

  /// The inference specification name in the model package version.
  final String? inferenceSpecificationName;

  ModelConfiguration({
    this.compilationJobName,
    this.environmentParameters,
    this.inferenceSpecificationName,
  });

  factory ModelConfiguration.fromJson(Map<String, dynamic> json) {
    return ModelConfiguration(
      compilationJobName: json['CompilationJobName'] as String?,
      environmentParameters: (json['EnvironmentParameters'] as List?)
          ?.nonNulls
          .map((e) => EnvironmentParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
      inferenceSpecificationName: json['InferenceSpecificationName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final compilationJobName = this.compilationJobName;
    final environmentParameters = this.environmentParameters;
    final inferenceSpecificationName = this.inferenceSpecificationName;
    return {
      if (compilationJobName != null) 'CompilationJobName': compilationJobName,
      if (environmentParameters != null)
        'EnvironmentParameters': environmentParameters,
      if (inferenceSpecificationName != null)
        'InferenceSpecificationName': inferenceSpecificationName,
    };
  }
}

/// An endpoint that hosts a model displayed in the Amazon SageMaker Model
/// Dashboard.
class ModelDashboardEndpoint {
  /// A timestamp that indicates when the endpoint was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  /// The endpoint name.
  final String endpointName;

  /// The endpoint status.
  final EndpointStatus endpointStatus;

  /// The last time the endpoint was modified.
  final DateTime lastModifiedTime;

  ModelDashboardEndpoint({
    required this.creationTime,
    required this.endpointArn,
    required this.endpointName,
    required this.endpointStatus,
    required this.lastModifiedTime,
  });

  factory ModelDashboardEndpoint.fromJson(Map<String, dynamic> json) {
    return ModelDashboardEndpoint(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointArn: json['EndpointArn'] as String,
      endpointName: json['EndpointName'] as String,
      endpointStatus:
          EndpointStatus.fromString((json['EndpointStatus'] as String)),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointArn = this.endpointArn;
    final endpointName = this.endpointName;
    final endpointStatus = this.endpointStatus;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointArn': endpointArn,
      'EndpointName': endpointName,
      'EndpointStatus': endpointStatus.value,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// An alert action taken to light up an icon on the Amazon SageMaker Model
/// Dashboard when an alert goes into <code>InAlert</code> status.
class ModelDashboardIndicatorAction {
  /// Indicates whether the alert action is turned on.
  final bool? enabled;

  ModelDashboardIndicatorAction({
    this.enabled,
  });

  factory ModelDashboardIndicatorAction.fromJson(Map<String, dynamic> json) {
    return ModelDashboardIndicatorAction(
      enabled: json['Enabled'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final enabled = this.enabled;
    return {
      if (enabled != null) 'Enabled': enabled,
    };
  }
}

/// A model displayed in the Amazon SageMaker Model Dashboard.
class ModelDashboardModel {
  /// The endpoints that host a model.
  final List<ModelDashboardEndpoint>? endpoints;
  final TransformJob? lastBatchTransformJob;

  /// A model displayed in the Model Dashboard.
  final Model? model;

  /// The model card for a model.
  final ModelDashboardModelCard? modelCard;

  /// The monitoring schedules for a model.
  final List<ModelDashboardMonitoringSchedule>? monitoringSchedules;

  ModelDashboardModel({
    this.endpoints,
    this.lastBatchTransformJob,
    this.model,
    this.modelCard,
    this.monitoringSchedules,
  });

  factory ModelDashboardModel.fromJson(Map<String, dynamic> json) {
    return ModelDashboardModel(
      endpoints: (json['Endpoints'] as List?)
          ?.nonNulls
          .map(
              (e) => ModelDashboardEndpoint.fromJson(e as Map<String, dynamic>))
          .toList(),
      lastBatchTransformJob: json['LastBatchTransformJob'] != null
          ? TransformJob.fromJson(
              json['LastBatchTransformJob'] as Map<String, dynamic>)
          : null,
      model: json['Model'] != null
          ? Model.fromJson(json['Model'] as Map<String, dynamic>)
          : null,
      modelCard: json['ModelCard'] != null
          ? ModelDashboardModelCard.fromJson(
              json['ModelCard'] as Map<String, dynamic>)
          : null,
      monitoringSchedules: (json['MonitoringSchedules'] as List?)
          ?.nonNulls
          .map((e) => ModelDashboardMonitoringSchedule.fromJson(
              e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final endpoints = this.endpoints;
    final lastBatchTransformJob = this.lastBatchTransformJob;
    final model = this.model;
    final modelCard = this.modelCard;
    final monitoringSchedules = this.monitoringSchedules;
    return {
      if (endpoints != null) 'Endpoints': endpoints,
      if (lastBatchTransformJob != null)
        'LastBatchTransformJob': lastBatchTransformJob,
      if (model != null) 'Model': model,
      if (modelCard != null) 'ModelCard': modelCard,
      if (monitoringSchedules != null)
        'MonitoringSchedules': monitoringSchedules,
    };
  }
}

/// The model card for a model displayed in the Amazon SageMaker Model
/// Dashboard.
class ModelDashboardModelCard {
  final UserContext? createdBy;

  /// A timestamp that indicates when the model card was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// A timestamp that indicates when the model card was last updated.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) for a model card.
  final String? modelCardArn;

  /// The name of a model card.
  final String? modelCardName;

  /// The model card status.
  final ModelCardStatus? modelCardStatus;

  /// The model card version.
  final int? modelCardVersion;

  /// For models created in SageMaker, this is the model ARN. For models created
  /// outside of SageMaker, this is a user-customized string.
  final String? modelId;

  /// A model card's risk rating. Can be low, medium, or high.
  final String? riskRating;

  /// The KMS Key ID (<code>KMSKeyId</code>) for encryption of model card
  /// information.
  final ModelCardSecurityConfig? securityConfig;

  /// The tags associated with a model card.
  final List<Tag>? tags;

  ModelDashboardModelCard({
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.modelCardArn,
    this.modelCardName,
    this.modelCardStatus,
    this.modelCardVersion,
    this.modelId,
    this.riskRating,
    this.securityConfig,
    this.tags,
  });

  factory ModelDashboardModelCard.fromJson(Map<String, dynamic> json) {
    return ModelDashboardModelCard(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelCardArn: json['ModelCardArn'] as String?,
      modelCardName: json['ModelCardName'] as String?,
      modelCardStatus:
          (json['ModelCardStatus'] as String?)?.let(ModelCardStatus.fromString),
      modelCardVersion: json['ModelCardVersion'] as int?,
      modelId: json['ModelId'] as String?,
      riskRating: json['RiskRating'] as String?,
      securityConfig: json['SecurityConfig'] != null
          ? ModelCardSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final modelCardArn = this.modelCardArn;
    final modelCardName = this.modelCardName;
    final modelCardStatus = this.modelCardStatus;
    final modelCardVersion = this.modelCardVersion;
    final modelId = this.modelId;
    final riskRating = this.riskRating;
    final securityConfig = this.securityConfig;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelCardArn != null) 'ModelCardArn': modelCardArn,
      if (modelCardName != null) 'ModelCardName': modelCardName,
      if (modelCardStatus != null) 'ModelCardStatus': modelCardStatus.value,
      if (modelCardVersion != null) 'ModelCardVersion': modelCardVersion,
      if (modelId != null) 'ModelId': modelId,
      if (riskRating != null) 'RiskRating': riskRating,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// A monitoring schedule for a model displayed in the Amazon SageMaker Model
/// Dashboard.
class ModelDashboardMonitoringSchedule {
  final BatchTransformInput? batchTransformInput;

  /// A timestamp that indicates when the monitoring schedule was created.
  final DateTime? creationTime;

  /// The endpoint which is monitored.
  final String? endpointName;

  /// If a monitoring job failed, provides the reason.
  final String? failureReason;

  /// A timestamp that indicates when the monitoring schedule was last updated.
  final DateTime? lastModifiedTime;
  final MonitoringExecutionSummary? lastMonitoringExecutionSummary;

  /// A JSON array where each element is a summary for a monitoring alert.
  final List<MonitoringAlertSummary>? monitoringAlertSummaries;

  /// The Amazon Resource Name (ARN) of a monitoring schedule.
  final String? monitoringScheduleArn;
  final MonitoringScheduleConfig? monitoringScheduleConfig;

  /// The name of a monitoring schedule.
  final String? monitoringScheduleName;

  /// The status of the monitoring schedule.
  final ScheduleStatus? monitoringScheduleStatus;

  /// The monitor type of a model monitor.
  final MonitoringType? monitoringType;

  ModelDashboardMonitoringSchedule({
    this.batchTransformInput,
    this.creationTime,
    this.endpointName,
    this.failureReason,
    this.lastModifiedTime,
    this.lastMonitoringExecutionSummary,
    this.monitoringAlertSummaries,
    this.monitoringScheduleArn,
    this.monitoringScheduleConfig,
    this.monitoringScheduleName,
    this.monitoringScheduleStatus,
    this.monitoringType,
  });

  factory ModelDashboardMonitoringSchedule.fromJson(Map<String, dynamic> json) {
    return ModelDashboardMonitoringSchedule(
      batchTransformInput: json['BatchTransformInput'] != null
          ? BatchTransformInput.fromJson(
              json['BatchTransformInput'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastMonitoringExecutionSummary: json['LastMonitoringExecutionSummary'] !=
              null
          ? MonitoringExecutionSummary.fromJson(
              json['LastMonitoringExecutionSummary'] as Map<String, dynamic>)
          : null,
      monitoringAlertSummaries: (json['MonitoringAlertSummaries'] as List?)
          ?.nonNulls
          .map(
              (e) => MonitoringAlertSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      monitoringScheduleConfig: json['MonitoringScheduleConfig'] != null
          ? MonitoringScheduleConfig.fromJson(
              json['MonitoringScheduleConfig'] as Map<String, dynamic>)
          : null,
      monitoringScheduleName: json['MonitoringScheduleName'] as String?,
      monitoringScheduleStatus: (json['MonitoringScheduleStatus'] as String?)
          ?.let(ScheduleStatus.fromString),
      monitoringType:
          (json['MonitoringType'] as String?)?.let(MonitoringType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final batchTransformInput = this.batchTransformInput;
    final creationTime = this.creationTime;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final lastMonitoringExecutionSummary = this.lastMonitoringExecutionSummary;
    final monitoringAlertSummaries = this.monitoringAlertSummaries;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleConfig = this.monitoringScheduleConfig;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final monitoringType = this.monitoringType;
    return {
      if (batchTransformInput != null)
        'BatchTransformInput': batchTransformInput,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastMonitoringExecutionSummary != null)
        'LastMonitoringExecutionSummary': lastMonitoringExecutionSummary,
      if (monitoringAlertSummaries != null)
        'MonitoringAlertSummaries': monitoringAlertSummaries,
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (monitoringScheduleConfig != null)
        'MonitoringScheduleConfig': monitoringScheduleConfig,
      if (monitoringScheduleName != null)
        'MonitoringScheduleName': monitoringScheduleName,
      if (monitoringScheduleStatus != null)
        'MonitoringScheduleStatus': monitoringScheduleStatus.value,
      if (monitoringType != null) 'MonitoringType': monitoringType.value,
    };
  }
}

/// Data quality constraints and statistics for a model.
class ModelDataQuality {
  /// Data quality constraints for a model.
  final MetricsSource? constraints;

  /// Data quality statistics for a model.
  final MetricsSource? statistics;

  ModelDataQuality({
    this.constraints,
    this.statistics,
  });

  factory ModelDataQuality.fromJson(Map<String, dynamic> json) {
    return ModelDataQuality(
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
      statistics: json['Statistics'] != null
          ? MetricsSource.fromJson(json['Statistics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final constraints = this.constraints;
    final statistics = this.statistics;
    return {
      if (constraints != null) 'Constraints': constraints,
      if (statistics != null) 'Statistics': statistics,
    };
  }
}

/// Specifies the location of ML model data to deploy. If specified, you must
/// specify one and only one of the available data sources.
class ModelDataSource {
  /// Specifies the S3 location of ML model data to deploy.
  final S3ModelDataSource? s3DataSource;

  ModelDataSource({
    this.s3DataSource,
  });

  factory ModelDataSource.fromJson(Map<String, dynamic> json) {
    return ModelDataSource(
      s3DataSource: json['S3DataSource'] != null
          ? S3ModelDataSource.fromJson(
              json['S3DataSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    return {
      if (s3DataSource != null) 'S3DataSource': s3DataSource,
    };
  }
}

/// Specifies how to generate the endpoint name for an automatic one-click
/// Autopilot model deployment.
class ModelDeployConfig {
  /// Set to <code>True</code> to automatically generate an endpoint name for a
  /// one-click Autopilot model deployment; set to <code>False</code> otherwise.
  /// The default value is <code>False</code>.
  /// <note>
  /// If you set <code>AutoGenerateEndpointName</code> to <code>True</code>, do
  /// not specify the <code>EndpointName</code>; otherwise a 400 error is thrown.
  /// </note>
  final bool? autoGenerateEndpointName;

  /// Specifies the endpoint name to use for a one-click Autopilot model
  /// deployment if the endpoint name is not generated automatically.
  /// <note>
  /// Specify the <code>EndpointName</code> if and only if you set
  /// <code>AutoGenerateEndpointName</code> to <code>False</code>; otherwise a 400
  /// error is thrown.
  /// </note>
  final String? endpointName;

  ModelDeployConfig({
    this.autoGenerateEndpointName,
    this.endpointName,
  });

  factory ModelDeployConfig.fromJson(Map<String, dynamic> json) {
    return ModelDeployConfig(
      autoGenerateEndpointName: json['AutoGenerateEndpointName'] as bool?,
      endpointName: json['EndpointName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final autoGenerateEndpointName = this.autoGenerateEndpointName;
    final endpointName = this.endpointName;
    return {
      if (autoGenerateEndpointName != null)
        'AutoGenerateEndpointName': autoGenerateEndpointName,
      if (endpointName != null) 'EndpointName': endpointName,
    };
  }
}

/// Provides information about the endpoint of the model deployment.
class ModelDeployResult {
  /// The name of the endpoint to which the model has been deployed.
  /// <note>
  /// If model deployment fails, this field is omitted from the response.
  /// </note>
  final String? endpointName;

  ModelDeployResult({
    this.endpointName,
  });

  factory ModelDeployResult.fromJson(Map<String, dynamic> json) {
    return ModelDeployResult(
      endpointName: json['EndpointName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointName = this.endpointName;
    return {
      if (endpointName != null) 'EndpointName': endpointName,
    };
  }
}

/// Provides information to verify the integrity of stored model artifacts.
class ModelDigests {
  /// Provides a hash value that uniquely identifies the stored model artifacts.
  final String? artifactDigest;

  ModelDigests({
    this.artifactDigest,
  });

  factory ModelDigests.fromJson(Map<String, dynamic> json) {
    return ModelDigests(
      artifactDigest: json['ArtifactDigest'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactDigest = this.artifactDigest;
    return {
      if (artifactDigest != null) 'ArtifactDigest': artifactDigest,
    };
  }
}

/// Docker container image configuration object for the model explainability
/// job.
class ModelExplainabilityAppSpecification {
  /// JSON formatted Amazon S3 file that defines explainability parameters. For
  /// more information on this JSON configuration file, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-model-explainability-parameters.html">Configure
  /// model explainability parameters</a>.
  final String configUri;

  /// The container image to be run by the model explainability job.
  final String imageUri;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  ModelExplainabilityAppSpecification({
    required this.configUri,
    required this.imageUri,
    this.environment,
  });

  factory ModelExplainabilityAppSpecification.fromJson(
      Map<String, dynamic> json) {
    return ModelExplainabilityAppSpecification(
      configUri: json['ConfigUri'] as String,
      imageUri: json['ImageUri'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final configUri = this.configUri;
    final imageUri = this.imageUri;
    final environment = this.environment;
    return {
      'ConfigUri': configUri,
      'ImageUri': imageUri,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// The configuration for a baseline model explainability job.
class ModelExplainabilityBaselineConfig {
  /// The name of the baseline model explainability job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;

  ModelExplainabilityBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
  });

  factory ModelExplainabilityBaselineConfig.fromJson(
      Map<String, dynamic> json) {
    return ModelExplainabilityBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
    };
  }
}

/// Inputs for the model explainability job.
class ModelExplainabilityJobInput {
  /// Input object for the batch transform job.
  final BatchTransformInput? batchTransformInput;
  final EndpointInput? endpointInput;

  ModelExplainabilityJobInput({
    this.batchTransformInput,
    this.endpointInput,
  });

  factory ModelExplainabilityJobInput.fromJson(Map<String, dynamic> json) {
    return ModelExplainabilityJobInput(
      batchTransformInput: json['BatchTransformInput'] != null
          ? BatchTransformInput.fromJson(
              json['BatchTransformInput'] as Map<String, dynamic>)
          : null,
      endpointInput: json['EndpointInput'] != null
          ? EndpointInput.fromJson(
              json['EndpointInput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final batchTransformInput = this.batchTransformInput;
    final endpointInput = this.endpointInput;
    return {
      if (batchTransformInput != null)
        'BatchTransformInput': batchTransformInput,
      if (endpointInput != null) 'EndpointInput': endpointInput,
    };
  }
}

/// The configuration for the infrastructure that the model will be deployed to.
class ModelInfrastructureConfig {
  /// The inference option to which to deploy your model. Possible values are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// <code>RealTime</code>: Deploy to real-time inference.
  /// </li>
  /// </ul>
  final ModelInfrastructureType infrastructureType;

  /// The infrastructure configuration for deploying the model to real-time
  /// inference.
  final RealTimeInferenceConfig realTimeInferenceConfig;

  ModelInfrastructureConfig({
    required this.infrastructureType,
    required this.realTimeInferenceConfig,
  });

  factory ModelInfrastructureConfig.fromJson(Map<String, dynamic> json) {
    return ModelInfrastructureConfig(
      infrastructureType: ModelInfrastructureType.fromString(
          (json['InfrastructureType'] as String)),
      realTimeInferenceConfig: RealTimeInferenceConfig.fromJson(
          json['RealTimeInferenceConfig'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final infrastructureType = this.infrastructureType;
    final realTimeInferenceConfig = this.realTimeInferenceConfig;
    return {
      'InfrastructureType': infrastructureType.value,
      'RealTimeInferenceConfig': realTimeInferenceConfig,
    };
  }
}

enum ModelInfrastructureType {
  realTimeInference('RealTimeInference'),
  ;

  final String value;

  const ModelInfrastructureType(this.value);

  static ModelInfrastructureType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelInfrastructureType'));
}

/// Input object for the model.
class ModelInput {
  /// The input configuration object for the model.
  final String dataInputConfig;

  ModelInput({
    required this.dataInputConfig,
  });

  factory ModelInput.fromJson(Map<String, dynamic> json) {
    return ModelInput(
      dataInputConfig: json['DataInputConfig'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final dataInputConfig = this.dataInputConfig;
    return {
      'DataInputConfig': dataInputConfig,
    };
  }
}

/// The model latency threshold.
class ModelLatencyThreshold {
  /// The model latency percentile threshold. Acceptable values are
  /// <code>P95</code> and <code>P99</code>. For custom load tests, specify the
  /// value as <code>P95</code>.
  final String? percentile;

  /// The model latency percentile value in milliseconds.
  final int? valueInMilliseconds;

  ModelLatencyThreshold({
    this.percentile,
    this.valueInMilliseconds,
  });

  factory ModelLatencyThreshold.fromJson(Map<String, dynamic> json) {
    return ModelLatencyThreshold(
      percentile: json['Percentile'] as String?,
      valueInMilliseconds: json['ValueInMilliseconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final percentile = this.percentile;
    final valueInMilliseconds = this.valueInMilliseconds;
    return {
      if (percentile != null) 'Percentile': percentile,
      if (valueInMilliseconds != null)
        'ValueInMilliseconds': valueInMilliseconds,
    };
  }
}

/// Part of the search expression. You can specify the name and value (domain,
/// task, framework, framework version, task, and model).
class ModelMetadataFilter {
  /// The name of the of the model to filter by.
  final ModelMetadataFilterType name;

  /// The value to filter the model metadata.
  final String value;

  ModelMetadataFilter({
    required this.name,
    required this.value,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      'Name': name.value,
      'Value': value,
    };
  }
}

enum ModelMetadataFilterType {
  domain('Domain'),
  framework('Framework'),
  task('Task'),
  frameworkVersion('FrameworkVersion'),
  ;

  final String value;

  const ModelMetadataFilterType(this.value);

  static ModelMetadataFilterType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelMetadataFilterType'));
}

/// One or more filters that searches for the specified resource or resources in
/// a search. All resource objects that satisfy the expression's condition are
/// included in the search results
class ModelMetadataSearchExpression {
  /// A list of filter objects.
  final List<ModelMetadataFilter>? filters;

  ModelMetadataSearchExpression({
    this.filters,
  });

  Map<String, dynamic> toJson() {
    final filters = this.filters;
    return {
      if (filters != null) 'Filters': filters,
    };
  }
}

/// A summary of the model metadata.
class ModelMetadataSummary {
  /// The machine learning domain of the model.
  final String domain;

  /// The machine learning framework of the model.
  final String framework;

  /// The framework version of the model.
  final String frameworkVersion;

  /// The name of the model.
  final String model;

  /// The machine learning task of the model.
  final String task;

  ModelMetadataSummary({
    required this.domain,
    required this.framework,
    required this.frameworkVersion,
    required this.model,
    required this.task,
  });

  factory ModelMetadataSummary.fromJson(Map<String, dynamic> json) {
    return ModelMetadataSummary(
      domain: json['Domain'] as String,
      framework: json['Framework'] as String,
      frameworkVersion: json['FrameworkVersion'] as String,
      model: json['Model'] as String,
      task: json['Task'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final domain = this.domain;
    final framework = this.framework;
    final frameworkVersion = this.frameworkVersion;
    final model = this.model;
    final task = this.task;
    return {
      'Domain': domain,
      'Framework': framework,
      'FrameworkVersion': frameworkVersion,
      'Model': model,
      'Task': task,
    };
  }
}

/// Contains metrics captured from a model.
class ModelMetrics {
  /// Metrics that measure bias in a model.
  final Bias? bias;

  /// Metrics that help explain a model.
  final Explainability? explainability;

  /// Metrics that measure the quality of the input data for a model.
  final ModelDataQuality? modelDataQuality;

  /// Metrics that measure the quality of a model.
  final ModelQuality? modelQuality;

  ModelMetrics({
    this.bias,
    this.explainability,
    this.modelDataQuality,
    this.modelQuality,
  });

  factory ModelMetrics.fromJson(Map<String, dynamic> json) {
    return ModelMetrics(
      bias: json['Bias'] != null
          ? Bias.fromJson(json['Bias'] as Map<String, dynamic>)
          : null,
      explainability: json['Explainability'] != null
          ? Explainability.fromJson(
              json['Explainability'] as Map<String, dynamic>)
          : null,
      modelDataQuality: json['ModelDataQuality'] != null
          ? ModelDataQuality.fromJson(
              json['ModelDataQuality'] as Map<String, dynamic>)
          : null,
      modelQuality: json['ModelQuality'] != null
          ? ModelQuality.fromJson(json['ModelQuality'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final bias = this.bias;
    final explainability = this.explainability;
    final modelDataQuality = this.modelDataQuality;
    final modelQuality = this.modelQuality;
    return {
      if (bias != null) 'Bias': bias,
      if (explainability != null) 'Explainability': explainability,
      if (modelDataQuality != null) 'ModelDataQuality': modelDataQuality,
      if (modelQuality != null) 'ModelQuality': modelQuality,
    };
  }
}

/// A versioned model that can be deployed for SageMaker inference.
class ModelPackage {
  /// An array of additional Inference Specification objects.
  final List<AdditionalInferenceSpecificationDefinition>?
      additionalInferenceSpecifications;

  /// A description provided when the model approval is set.
  final String? approvalDescription;

  /// Whether the model package is to be certified to be listed on Amazon Web
  /// Services Marketplace. For information about listing model packages on Amazon
  /// Web Services Marketplace, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html">List
  /// Your Algorithm or Model Package on Amazon Web Services Marketplace</a>.
  final bool? certifyForMarketplace;

  /// Information about the user who created or modified an experiment, trial,
  /// trial component, lineage group, or project.
  final UserContext? createdBy;

  /// The time that the model package was created.
  final DateTime? creationTime;

  /// The metadata properties for the model package.
  final Map<String, String>? customerMetadataProperties;

  /// The machine learning domain of your model package and its components. Common
  /// machine learning domains include computer vision and natural language
  /// processing.
  final String? domain;

  /// Represents the drift check baselines that can be used when the model monitor
  /// is set using the model package.
  final DriftCheckBaselines? driftCheckBaselines;

  /// Defines how to perform inference generation after a training job is run.
  final InferenceSpecification? inferenceSpecification;

  /// Information about the user who created or modified an experiment, trial,
  /// trial component, lineage group, or project.
  final UserContext? lastModifiedBy;

  /// The last time the model package was modified.
  final DateTime? lastModifiedTime;

  /// Metadata properties of the tracking entity, trial, or trial component.
  final MetadataProperties? metadataProperties;

  /// The approval status of the model. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>APPROVED</code> - The model is approved
  /// </li>
  /// <li>
  /// <code>REJECTED</code> - The model is rejected.
  /// </li>
  /// <li>
  /// <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
  /// approval.
  /// </li>
  /// </ul>
  final ModelApprovalStatus? modelApprovalStatus;
  final ModelPackageModelCard? modelCard;

  /// Metrics for the model.
  final ModelMetrics? modelMetrics;

  /// The Amazon Resource Name (ARN) of the model package.
  final String? modelPackageArn;

  /// The description of the model package.
  final String? modelPackageDescription;

  /// The model group to which the model belongs.
  final String? modelPackageGroupName;

  /// The name of the model.
  final String? modelPackageName;

  /// The status of the model package. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The model package is pending being created.
  /// </li>
  /// <li>
  /// <code>IN_PROGRESS</code> - The model package is in the process of being
  /// created.
  /// </li>
  /// <li>
  /// <code>COMPLETED</code> - The model package was successfully created.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - The model package failed.
  /// </li>
  /// <li>
  /// <code>DELETING</code> - The model package is in the process of being
  /// deleted.
  /// </li>
  /// </ul>
  final ModelPackageStatus? modelPackageStatus;

  /// Specifies the validation and image scan statuses of the model package.
  final ModelPackageStatusDetails? modelPackageStatusDetails;

  /// The version number of a versioned model.
  final int? modelPackageVersion;

  /// The Amazon Simple Storage Service path where the sample payload are stored.
  /// This path must point to a single gzip compressed tar archive (.tar.gz
  /// suffix).
  final String? samplePayloadUrl;
  final ModelPackageSecurityConfig? securityConfig;

  /// Indicates if you want to skip model validation.
  final SkipModelValidation? skipModelValidation;

  /// A list of algorithms that were used to create a model package.
  final SourceAlgorithmSpecification? sourceAlgorithmSpecification;

  /// The URI of the source for the model package.
  final String? sourceUri;

  /// A list of the tags associated with the model package. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  /// The machine learning task your model package accomplishes. Common machine
  /// learning tasks include object detection and image classification.
  final String? task;

  /// Specifies batch transform jobs that SageMaker runs to validate your model
  /// package.
  final ModelPackageValidationSpecification? validationSpecification;

  ModelPackage({
    this.additionalInferenceSpecifications,
    this.approvalDescription,
    this.certifyForMarketplace,
    this.createdBy,
    this.creationTime,
    this.customerMetadataProperties,
    this.domain,
    this.driftCheckBaselines,
    this.inferenceSpecification,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.modelApprovalStatus,
    this.modelCard,
    this.modelMetrics,
    this.modelPackageArn,
    this.modelPackageDescription,
    this.modelPackageGroupName,
    this.modelPackageName,
    this.modelPackageStatus,
    this.modelPackageStatusDetails,
    this.modelPackageVersion,
    this.samplePayloadUrl,
    this.securityConfig,
    this.skipModelValidation,
    this.sourceAlgorithmSpecification,
    this.sourceUri,
    this.tags,
    this.task,
    this.validationSpecification,
  });

  factory ModelPackage.fromJson(Map<String, dynamic> json) {
    return ModelPackage(
      additionalInferenceSpecifications:
          (json['AdditionalInferenceSpecifications'] as List?)
              ?.nonNulls
              .map((e) => AdditionalInferenceSpecificationDefinition.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
      approvalDescription: json['ApprovalDescription'] as String?,
      certifyForMarketplace: json['CertifyForMarketplace'] as bool?,
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      customerMetadataProperties:
          (json['CustomerMetadataProperties'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
      domain: json['Domain'] as String?,
      driftCheckBaselines: json['DriftCheckBaselines'] != null
          ? DriftCheckBaselines.fromJson(
              json['DriftCheckBaselines'] as Map<String, dynamic>)
          : null,
      inferenceSpecification: json['InferenceSpecification'] != null
          ? InferenceSpecification.fromJson(
              json['InferenceSpecification'] as Map<String, dynamic>)
          : null,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      modelApprovalStatus: (json['ModelApprovalStatus'] as String?)
          ?.let(ModelApprovalStatus.fromString),
      modelCard: json['ModelCard'] != null
          ? ModelPackageModelCard.fromJson(
              json['ModelCard'] as Map<String, dynamic>)
          : null,
      modelMetrics: json['ModelMetrics'] != null
          ? ModelMetrics.fromJson(json['ModelMetrics'] as Map<String, dynamic>)
          : null,
      modelPackageArn: json['ModelPackageArn'] as String?,
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageName: json['ModelPackageName'] as String?,
      modelPackageStatus: (json['ModelPackageStatus'] as String?)
          ?.let(ModelPackageStatus.fromString),
      modelPackageStatusDetails: json['ModelPackageStatusDetails'] != null
          ? ModelPackageStatusDetails.fromJson(
              json['ModelPackageStatusDetails'] as Map<String, dynamic>)
          : null,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
      samplePayloadUrl: json['SamplePayloadUrl'] as String?,
      securityConfig: json['SecurityConfig'] != null
          ? ModelPackageSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
      skipModelValidation: (json['SkipModelValidation'] as String?)
          ?.let(SkipModelValidation.fromString),
      sourceAlgorithmSpecification: json['SourceAlgorithmSpecification'] != null
          ? SourceAlgorithmSpecification.fromJson(
              json['SourceAlgorithmSpecification'] as Map<String, dynamic>)
          : null,
      sourceUri: json['SourceUri'] as String?,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      task: json['Task'] as String?,
      validationSpecification: json['ValidationSpecification'] != null
          ? ModelPackageValidationSpecification.fromJson(
              json['ValidationSpecification'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final additionalInferenceSpecifications =
        this.additionalInferenceSpecifications;
    final approvalDescription = this.approvalDescription;
    final certifyForMarketplace = this.certifyForMarketplace;
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final customerMetadataProperties = this.customerMetadataProperties;
    final domain = this.domain;
    final driftCheckBaselines = this.driftCheckBaselines;
    final inferenceSpecification = this.inferenceSpecification;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelCard = this.modelCard;
    final modelMetrics = this.modelMetrics;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageName = this.modelPackageName;
    final modelPackageStatus = this.modelPackageStatus;
    final modelPackageStatusDetails = this.modelPackageStatusDetails;
    final modelPackageVersion = this.modelPackageVersion;
    final samplePayloadUrl = this.samplePayloadUrl;
    final securityConfig = this.securityConfig;
    final skipModelValidation = this.skipModelValidation;
    final sourceAlgorithmSpecification = this.sourceAlgorithmSpecification;
    final sourceUri = this.sourceUri;
    final tags = this.tags;
    final task = this.task;
    final validationSpecification = this.validationSpecification;
    return {
      if (additionalInferenceSpecifications != null)
        'AdditionalInferenceSpecifications': additionalInferenceSpecifications,
      if (approvalDescription != null)
        'ApprovalDescription': approvalDescription,
      if (certifyForMarketplace != null)
        'CertifyForMarketplace': certifyForMarketplace,
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (customerMetadataProperties != null)
        'CustomerMetadataProperties': customerMetadataProperties,
      if (domain != null) 'Domain': domain,
      if (driftCheckBaselines != null)
        'DriftCheckBaselines': driftCheckBaselines,
      if (inferenceSpecification != null)
        'InferenceSpecification': inferenceSpecification,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.value,
      if (modelCard != null) 'ModelCard': modelCard,
      if (modelMetrics != null) 'ModelMetrics': modelMetrics,
      if (modelPackageArn != null) 'ModelPackageArn': modelPackageArn,
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageName != null) 'ModelPackageName': modelPackageName,
      if (modelPackageStatus != null)
        'ModelPackageStatus': modelPackageStatus.value,
      if (modelPackageStatusDetails != null)
        'ModelPackageStatusDetails': modelPackageStatusDetails,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
      if (samplePayloadUrl != null) 'SamplePayloadUrl': samplePayloadUrl,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
      if (skipModelValidation != null)
        'SkipModelValidation': skipModelValidation.value,
      if (sourceAlgorithmSpecification != null)
        'SourceAlgorithmSpecification': sourceAlgorithmSpecification,
      if (sourceUri != null) 'SourceUri': sourceUri,
      if (tags != null) 'Tags': tags,
      if (task != null) 'Task': task,
      if (validationSpecification != null)
        'ValidationSpecification': validationSpecification,
    };
  }
}

/// Describes the Docker container for the model package.
class ModelPackageContainerDefinition {
  /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is
  /// stored.
  ///
  /// If you are using your own custom algorithm instead of an algorithm provided
  /// by SageMaker, the inference code must meet SageMaker requirements. SageMaker
  /// supports both <code>registry/repository[:tag]</code> and
  /// <code>registry/repository[@digest]</code> image path formats. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using
  /// Your Own Algorithms with Amazon SageMaker</a>.
  final String image;

  /// The additional data source that is used during inference in the Docker
  /// container for your model package.
  final AdditionalS3DataSource? additionalS3DataSource;

  /// The DNS host name for the Docker container.
  final String? containerHostname;

  /// The environment variables to set in the Docker container. Each key and value
  /// in the <code>Environment</code> string to string map can have length of up
  /// to 1024. We support up to 16 entries in the map.
  final Map<String, String>? environment;

  /// The machine learning framework of the model package container image.
  final String? framework;

  /// The framework version of the Model Package Container Image.
  final String? frameworkVersion;

  /// An MD5 hash of the training algorithm that identifies the Docker image used
  /// for training.
  final String? imageDigest;

  /// Specifies the location of ML model data to deploy during endpoint creation.
  final ModelDataSource? modelDataSource;

  /// The Amazon S3 path where the model artifacts, which result from model
  /// training, are stored. This path must point to a single <code>gzip</code>
  /// compressed tar archive (<code>.tar.gz</code> suffix).
  /// <note>
  /// The model artifacts must be in an S3 bucket that is in the same region as
  /// the model package.
  /// </note>
  final String? modelDataUrl;

  /// A structure with Model Input details.
  final ModelInput? modelInput;

  /// The name of a pre-trained machine learning benchmarked by Amazon SageMaker
  /// Inference Recommender model that matches your model. You can find a list of
  /// benchmarked models by calling <code>ListModelMetadata</code>.
  final String? nearestModelName;

  /// The Amazon Web Services Marketplace product ID of the model package.
  final String? productId;

  ModelPackageContainerDefinition({
    required this.image,
    this.additionalS3DataSource,
    this.containerHostname,
    this.environment,
    this.framework,
    this.frameworkVersion,
    this.imageDigest,
    this.modelDataSource,
    this.modelDataUrl,
    this.modelInput,
    this.nearestModelName,
    this.productId,
  });

  factory ModelPackageContainerDefinition.fromJson(Map<String, dynamic> json) {
    return ModelPackageContainerDefinition(
      image: json['Image'] as String,
      additionalS3DataSource: json['AdditionalS3DataSource'] != null
          ? AdditionalS3DataSource.fromJson(
              json['AdditionalS3DataSource'] as Map<String, dynamic>)
          : null,
      containerHostname: json['ContainerHostname'] as String?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      framework: json['Framework'] as String?,
      frameworkVersion: json['FrameworkVersion'] as String?,
      imageDigest: json['ImageDigest'] as String?,
      modelDataSource: json['ModelDataSource'] != null
          ? ModelDataSource.fromJson(
              json['ModelDataSource'] as Map<String, dynamic>)
          : null,
      modelDataUrl: json['ModelDataUrl'] as String?,
      modelInput: json['ModelInput'] != null
          ? ModelInput.fromJson(json['ModelInput'] as Map<String, dynamic>)
          : null,
      nearestModelName: json['NearestModelName'] as String?,
      productId: json['ProductId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final image = this.image;
    final additionalS3DataSource = this.additionalS3DataSource;
    final containerHostname = this.containerHostname;
    final environment = this.environment;
    final framework = this.framework;
    final frameworkVersion = this.frameworkVersion;
    final imageDigest = this.imageDigest;
    final modelDataSource = this.modelDataSource;
    final modelDataUrl = this.modelDataUrl;
    final modelInput = this.modelInput;
    final nearestModelName = this.nearestModelName;
    final productId = this.productId;
    return {
      'Image': image,
      if (additionalS3DataSource != null)
        'AdditionalS3DataSource': additionalS3DataSource,
      if (containerHostname != null) 'ContainerHostname': containerHostname,
      if (environment != null) 'Environment': environment,
      if (framework != null) 'Framework': framework,
      if (frameworkVersion != null) 'FrameworkVersion': frameworkVersion,
      if (imageDigest != null) 'ImageDigest': imageDigest,
      if (modelDataSource != null) 'ModelDataSource': modelDataSource,
      if (modelDataUrl != null) 'ModelDataUrl': modelDataUrl,
      if (modelInput != null) 'ModelInput': modelInput,
      if (nearestModelName != null) 'NearestModelName': nearestModelName,
      if (productId != null) 'ProductId': productId,
    };
  }
}

/// A group of versioned models in the model registry.
class ModelPackageGroup {
  final UserContext? createdBy;

  /// The time that the model group was created.
  final DateTime? creationTime;

  /// The Amazon Resource Name (ARN) of the model group.
  final String? modelPackageGroupArn;

  /// The description for the model group.
  final String? modelPackageGroupDescription;

  /// The name of the model group.
  final String? modelPackageGroupName;

  /// The status of the model group. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The model group is pending being created.
  /// </li>
  /// <li>
  /// <code>IN_PROGRESS</code> - The model group is in the process of being
  /// created.
  /// </li>
  /// <li>
  /// <code>COMPLETED</code> - The model group was successfully created.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - The model group failed.
  /// </li>
  /// <li>
  /// <code>DELETING</code> - The model group is in the process of being deleted.
  /// </li>
  /// <li>
  /// <code>DELETE_FAILED</code> - SageMaker failed to delete the model group.
  /// </li>
  /// </ul>
  final ModelPackageGroupStatus? modelPackageGroupStatus;

  /// A list of the tags associated with the model group. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  ModelPackageGroup({
    this.createdBy,
    this.creationTime,
    this.modelPackageGroupArn,
    this.modelPackageGroupDescription,
    this.modelPackageGroupName,
    this.modelPackageGroupStatus,
    this.tags,
  });

  factory ModelPackageGroup.fromJson(Map<String, dynamic> json) {
    return ModelPackageGroup(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String?,
      modelPackageGroupDescription:
          json['ModelPackageGroupDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageGroupStatus: (json['ModelPackageGroupStatus'] as String?)
          ?.let(ModelPackageGroupStatus.fromString),
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final modelPackageGroupArn = this.modelPackageGroupArn;
    final modelPackageGroupDescription = this.modelPackageGroupDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageGroupStatus = this.modelPackageGroupStatus;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (modelPackageGroupArn != null)
        'ModelPackageGroupArn': modelPackageGroupArn,
      if (modelPackageGroupDescription != null)
        'ModelPackageGroupDescription': modelPackageGroupDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageGroupStatus != null)
        'ModelPackageGroupStatus': modelPackageGroupStatus.value,
      if (tags != null) 'Tags': tags,
    };
  }
}

enum ModelPackageGroupSortBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const ModelPackageGroupSortBy(this.value);

  static ModelPackageGroupSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelPackageGroupSortBy'));
}

enum ModelPackageGroupStatus {
  pending('Pending'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  deleting('Deleting'),
  deleteFailed('DeleteFailed'),
  ;

  final String value;

  const ModelPackageGroupStatus(this.value);

  static ModelPackageGroupStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ModelPackageGroupStatus'));
}

/// Summary information about a model group.
class ModelPackageGroupSummary {
  /// The time that the model group was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model group.
  final String modelPackageGroupArn;

  /// The name of the model group.
  final String modelPackageGroupName;

  /// The status of the model group.
  final ModelPackageGroupStatus modelPackageGroupStatus;

  /// A description of the model group.
  final String? modelPackageGroupDescription;

  ModelPackageGroupSummary({
    required this.creationTime,
    required this.modelPackageGroupArn,
    required this.modelPackageGroupName,
    required this.modelPackageGroupStatus,
    this.modelPackageGroupDescription,
  });

  factory ModelPackageGroupSummary.fromJson(Map<String, dynamic> json) {
    return ModelPackageGroupSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
      modelPackageGroupName: json['ModelPackageGroupName'] as String,
      modelPackageGroupStatus: ModelPackageGroupStatus.fromString(
          (json['ModelPackageGroupStatus'] as String)),
      modelPackageGroupDescription:
          json['ModelPackageGroupDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelPackageGroupArn = this.modelPackageGroupArn;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageGroupStatus = this.modelPackageGroupStatus;
    final modelPackageGroupDescription = this.modelPackageGroupDescription;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageGroupArn': modelPackageGroupArn,
      'ModelPackageGroupName': modelPackageGroupName,
      'ModelPackageGroupStatus': modelPackageGroupStatus.value,
      if (modelPackageGroupDescription != null)
        'ModelPackageGroupDescription': modelPackageGroupDescription,
    };
  }
}

/// The model card associated with the model package. Since
/// <code>ModelPackageModelCard</code> is tied to a model package, it is a
/// specific usage of a model card and its schema is simplified compared to the
/// schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code>
/// schema does not include <code>model_package_details</code>, and
/// <code>model_overview</code> is composed of the <code>model_creator</code>
/// and <code>model_artifact</code> properties. For more information about the
/// model card associated with the model package, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View
/// the Details of a Model Version</a>.
class ModelPackageModelCard {
  /// The content of the model card.
  final String? modelCardContent;

  /// The approval status of the model card within your organization. Different
  /// organizations might have different criteria for model card review and
  /// approval.
  ///
  /// <ul>
  /// <li>
  /// <code>Draft</code>: The model card is a work in progress.
  /// </li>
  /// <li>
  /// <code>PendingReview</code>: The model card is pending review.
  /// </li>
  /// <li>
  /// <code>Approved</code>: The model card is approved.
  /// </li>
  /// <li>
  /// <code>Archived</code>: The model card is archived. No more updates can be
  /// made to the model card content. If you try to update the model card content,
  /// you will receive the message <code>Model Card is in Archived state</code>.
  /// </li>
  /// </ul>
  final ModelCardStatus? modelCardStatus;

  ModelPackageModelCard({
    this.modelCardContent,
    this.modelCardStatus,
  });

  factory ModelPackageModelCard.fromJson(Map<String, dynamic> json) {
    return ModelPackageModelCard(
      modelCardContent: json['ModelCardContent'] as String?,
      modelCardStatus:
          (json['ModelCardStatus'] as String?)?.let(ModelCardStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardContent = this.modelCardContent;
    final modelCardStatus = this.modelCardStatus;
    return {
      if (modelCardContent != null) 'ModelCardContent': modelCardContent,
      if (modelCardStatus != null) 'ModelCardStatus': modelCardStatus.value,
    };
  }
}

/// An optional Key Management Service key to encrypt, decrypt, and re-encrypt
/// model package information for regulated workloads with highly sensitive
/// data.
class ModelPackageSecurityConfig {
  /// The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package
  /// information.
  final String kmsKeyId;

  ModelPackageSecurityConfig({
    required this.kmsKeyId,
  });

  factory ModelPackageSecurityConfig.fromJson(Map<String, dynamic> json) {
    return ModelPackageSecurityConfig(
      kmsKeyId: json['KmsKeyId'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      'KmsKeyId': kmsKeyId,
    };
  }
}

enum ModelPackageSortBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const ModelPackageSortBy(this.value);

  static ModelPackageSortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelPackageSortBy'));
}

enum ModelPackageStatus {
  pending('Pending'),
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  deleting('Deleting'),
  ;

  final String value;

  const ModelPackageStatus(this.value);

  static ModelPackageStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelPackageStatus'));
}

/// Specifies the validation and image scan statuses of the model package.
class ModelPackageStatusDetails {
  /// The validation status of the model package.
  final List<ModelPackageStatusItem> validationStatuses;

  /// The status of the scan of the Docker image container for the model package.
  final List<ModelPackageStatusItem>? imageScanStatuses;

  ModelPackageStatusDetails({
    required this.validationStatuses,
    this.imageScanStatuses,
  });

  factory ModelPackageStatusDetails.fromJson(Map<String, dynamic> json) {
    return ModelPackageStatusDetails(
      validationStatuses: (json['ValidationStatuses'] as List)
          .nonNulls
          .map(
              (e) => ModelPackageStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
      imageScanStatuses: (json['ImageScanStatuses'] as List?)
          ?.nonNulls
          .map(
              (e) => ModelPackageStatusItem.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final validationStatuses = this.validationStatuses;
    final imageScanStatuses = this.imageScanStatuses;
    return {
      'ValidationStatuses': validationStatuses,
      if (imageScanStatuses != null) 'ImageScanStatuses': imageScanStatuses,
    };
  }
}

/// Represents the overall status of a model package.
class ModelPackageStatusItem {
  /// The name of the model package for which the overall status is being
  /// reported.
  final String name;

  /// The current status.
  final DetailedModelPackageStatus status;

  /// if the overall status is <code>Failed</code>, the reason for the failure.
  final String? failureReason;

  ModelPackageStatusItem({
    required this.name,
    required this.status,
    this.failureReason,
  });

  factory ModelPackageStatusItem.fromJson(Map<String, dynamic> json) {
    return ModelPackageStatusItem(
      name: json['Name'] as String,
      status: DetailedModelPackageStatus.fromString((json['Status'] as String)),
      failureReason: json['FailureReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final status = this.status;
    final failureReason = this.failureReason;
    return {
      'Name': name,
      'Status': status.value,
      if (failureReason != null) 'FailureReason': failureReason,
    };
  }
}

/// Provides summary information about a model package.
class ModelPackageSummary {
  /// A timestamp that shows when the model package was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model package.
  final String modelPackageArn;

  /// The overall status of the model package.
  final ModelPackageStatus modelPackageStatus;

  /// The approval status of the model. This can be one of the following values.
  ///
  /// <ul>
  /// <li>
  /// <code>APPROVED</code> - The model is approved
  /// </li>
  /// <li>
  /// <code>REJECTED</code> - The model is rejected.
  /// </li>
  /// <li>
  /// <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
  /// approval.
  /// </li>
  /// </ul>
  final ModelApprovalStatus? modelApprovalStatus;

  /// A brief description of the model package.
  final String? modelPackageDescription;

  /// If the model package is a versioned model, the model group that the
  /// versioned model belongs to.
  final String? modelPackageGroupName;

  /// The name of the model package.
  final String? modelPackageName;

  /// If the model package is a versioned model, the version of the model.
  final int? modelPackageVersion;

  ModelPackageSummary({
    required this.creationTime,
    required this.modelPackageArn,
    required this.modelPackageStatus,
    this.modelApprovalStatus,
    this.modelPackageDescription,
    this.modelPackageGroupName,
    this.modelPackageName,
    this.modelPackageVersion,
  });

  factory ModelPackageSummary.fromJson(Map<String, dynamic> json) {
    return ModelPackageSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelPackageArn: json['ModelPackageArn'] as String,
      modelPackageStatus:
          ModelPackageStatus.fromString((json['ModelPackageStatus'] as String)),
      modelApprovalStatus: (json['ModelApprovalStatus'] as String?)
          ?.let(ModelApprovalStatus.fromString),
      modelPackageDescription: json['ModelPackageDescription'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      modelPackageName: json['ModelPackageName'] as String?,
      modelPackageVersion: json['ModelPackageVersion'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelPackageArn = this.modelPackageArn;
    final modelPackageStatus = this.modelPackageStatus;
    final modelApprovalStatus = this.modelApprovalStatus;
    final modelPackageDescription = this.modelPackageDescription;
    final modelPackageGroupName = this.modelPackageGroupName;
    final modelPackageName = this.modelPackageName;
    final modelPackageVersion = this.modelPackageVersion;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelPackageArn': modelPackageArn,
      'ModelPackageStatus': modelPackageStatus.value,
      if (modelApprovalStatus != null)
        'ModelApprovalStatus': modelApprovalStatus.value,
      if (modelPackageDescription != null)
        'ModelPackageDescription': modelPackageDescription,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (modelPackageName != null) 'ModelPackageName': modelPackageName,
      if (modelPackageVersion != null)
        'ModelPackageVersion': modelPackageVersion,
    };
  }
}

enum ModelPackageType {
  versioned('Versioned'),
  unversioned('Unversioned'),
  both('Both'),
  ;

  final String value;

  const ModelPackageType(this.value);

  static ModelPackageType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ModelPackageType'));
}

/// Contains data, such as the inputs and targeted instance types that are used
/// in the process of validating the model package.
///
/// The data provided in the validation profile is made available to your buyers
/// on Amazon Web Services Marketplace.
class ModelPackageValidationProfile {
  /// The name of the profile for the model package.
  final String profileName;

  /// The <code>TransformJobDefinition</code> object that describes the transform
  /// job used for the validation of the model package.
  final TransformJobDefinition transformJobDefinition;

  ModelPackageValidationProfile({
    required this.profileName,
    required this.transformJobDefinition,
  });

  factory ModelPackageValidationProfile.fromJson(Map<String, dynamic> json) {
    return ModelPackageValidationProfile(
      profileName: json['ProfileName'] as String,
      transformJobDefinition: TransformJobDefinition.fromJson(
          json['TransformJobDefinition'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final profileName = this.profileName;
    final transformJobDefinition = this.transformJobDefinition;
    return {
      'ProfileName': profileName,
      'TransformJobDefinition': transformJobDefinition,
    };
  }
}

/// Specifies batch transform jobs that SageMaker runs to validate your model
/// package.
class ModelPackageValidationSpecification {
  /// An array of <code>ModelPackageValidationProfile</code> objects, each of
  /// which specifies a batch transform job that SageMaker runs to validate your
  /// model package.
  final List<ModelPackageValidationProfile> validationProfiles;

  /// The IAM roles to be used for the validation of the model package.
  final String validationRole;

  ModelPackageValidationSpecification({
    required this.validationProfiles,
    required this.validationRole,
  });

  factory ModelPackageValidationSpecification.fromJson(
      Map<String, dynamic> json) {
    return ModelPackageValidationSpecification(
      validationProfiles: (json['ValidationProfiles'] as List)
          .nonNulls
          .map((e) =>
              ModelPackageValidationProfile.fromJson(e as Map<String, dynamic>))
          .toList(),
      validationRole: json['ValidationRole'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final validationProfiles = this.validationProfiles;
    final validationRole = this.validationRole;
    return {
      'ValidationProfiles': validationProfiles,
      'ValidationRole': validationRole,
    };
  }
}

/// Model quality statistics and constraints.
class ModelQuality {
  /// Model quality constraints.
  final MetricsSource? constraints;

  /// Model quality statistics.
  final MetricsSource? statistics;

  ModelQuality({
    this.constraints,
    this.statistics,
  });

  factory ModelQuality.fromJson(Map<String, dynamic> json) {
    return ModelQuality(
      constraints: json['Constraints'] != null
          ? MetricsSource.fromJson(json['Constraints'] as Map<String, dynamic>)
          : null,
      statistics: json['Statistics'] != null
          ? MetricsSource.fromJson(json['Statistics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final constraints = this.constraints;
    final statistics = this.statistics;
    return {
      if (constraints != null) 'Constraints': constraints,
      if (statistics != null) 'Statistics': statistics,
    };
  }
}

/// Container image configuration object for the monitoring job.
class ModelQualityAppSpecification {
  /// The address of the container image that the monitoring job runs.
  final String imageUri;

  /// An array of arguments for the container used to run the monitoring job.
  final List<String>? containerArguments;

  /// Specifies the entrypoint for a container that the monitoring job runs.
  final List<String>? containerEntrypoint;

  /// Sets the environment variables in the container that the monitoring job
  /// runs.
  final Map<String, String>? environment;

  /// An Amazon S3 URI to a script that is called after analysis has been
  /// performed. Applicable only for the built-in (first party) containers.
  final String? postAnalyticsProcessorSourceUri;

  /// The machine learning problem type of the model that the monitoring job
  /// monitors.
  final MonitoringProblemType? problemType;

  /// An Amazon S3 URI to a script that is called per row prior to running
  /// analysis. It can base64 decode the payload and convert it into a flattened
  /// JSON so that the built-in container can use the converted data. Applicable
  /// only for the built-in (first party) containers.
  final String? recordPreprocessorSourceUri;

  ModelQualityAppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
    this.environment,
    this.postAnalyticsProcessorSourceUri,
    this.problemType,
    this.recordPreprocessorSourceUri,
  });

  factory ModelQualityAppSpecification.fromJson(Map<String, dynamic> json) {
    return ModelQualityAppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      postAnalyticsProcessorSourceUri:
          json['PostAnalyticsProcessorSourceUri'] as String?,
      problemType: (json['ProblemType'] as String?)
          ?.let(MonitoringProblemType.fromString),
      recordPreprocessorSourceUri:
          json['RecordPreprocessorSourceUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final environment = this.environment;
    final postAnalyticsProcessorSourceUri =
        this.postAnalyticsProcessorSourceUri;
    final problemType = this.problemType;
    final recordPreprocessorSourceUri = this.recordPreprocessorSourceUri;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (environment != null) 'Environment': environment,
      if (postAnalyticsProcessorSourceUri != null)
        'PostAnalyticsProcessorSourceUri': postAnalyticsProcessorSourceUri,
      if (problemType != null) 'ProblemType': problemType.value,
      if (recordPreprocessorSourceUri != null)
        'RecordPreprocessorSourceUri': recordPreprocessorSourceUri,
    };
  }
}

/// Configuration for monitoring constraints and monitoring statistics. These
/// baseline resources are compared against the results of the current job from
/// the series of jobs scheduled to collect data periodically.
class ModelQualityBaselineConfig {
  /// The name of the job that performs baselining for the monitoring job.
  final String? baseliningJobName;
  final MonitoringConstraintsResource? constraintsResource;

  ModelQualityBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
  });

  factory ModelQualityBaselineConfig.fromJson(Map<String, dynamic> json) {
    return ModelQualityBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
    };
  }
}

/// The input for the model quality monitoring job. Currently endpoints are
/// supported for input for model quality monitoring jobs.
class ModelQualityJobInput {
  /// The ground truth label provided for the model.
  final MonitoringGroundTruthS3Input groundTruthS3Input;

  /// Input object for the batch transform job.
  final BatchTransformInput? batchTransformInput;
  final EndpointInput? endpointInput;

  ModelQualityJobInput({
    required this.groundTruthS3Input,
    this.batchTransformInput,
    this.endpointInput,
  });

  factory ModelQualityJobInput.fromJson(Map<String, dynamic> json) {
    return ModelQualityJobInput(
      groundTruthS3Input: MonitoringGroundTruthS3Input.fromJson(
          json['GroundTruthS3Input'] as Map<String, dynamic>),
      batchTransformInput: json['BatchTransformInput'] != null
          ? BatchTransformInput.fromJson(
              json['BatchTransformInput'] as Map<String, dynamic>)
          : null,
      endpointInput: json['EndpointInput'] != null
          ? EndpointInput.fromJson(
              json['EndpointInput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final groundTruthS3Input = this.groundTruthS3Input;
    final batchTransformInput = this.batchTransformInput;
    final endpointInput = this.endpointInput;
    return {
      'GroundTruthS3Input': groundTruthS3Input,
      if (batchTransformInput != null)
        'BatchTransformInput': batchTransformInput,
      if (endpointInput != null) 'EndpointInput': endpointInput,
    };
  }
}

/// The model registry settings for the SageMaker Canvas application.
class ModelRegisterSettings {
  /// The Amazon Resource Name (ARN) of the SageMaker model registry account.
  /// Required only to register model versions created by a different SageMaker
  /// Canvas Amazon Web Services account than the Amazon Web Services account in
  /// which SageMaker model registry is set up.
  final String? crossAccountModelRegisterRoleArn;

  /// Describes whether the integration to the model registry is enabled or
  /// disabled in the Canvas application.
  final FeatureStatus? status;

  ModelRegisterSettings({
    this.crossAccountModelRegisterRoleArn,
    this.status,
  });

  factory ModelRegisterSettings.fromJson(Map<String, dynamic> json) {
    return ModelRegisterSettings(
      crossAccountModelRegisterRoleArn:
          json['CrossAccountModelRegisterRoleArn'] as String?,
      status: (json['Status'] as String?)?.let(FeatureStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final crossAccountModelRegisterRoleArn =
        this.crossAccountModelRegisterRoleArn;
    final status = this.status;
    return {
      if (crossAccountModelRegisterRoleArn != null)
        'CrossAccountModelRegisterRoleArn': crossAccountModelRegisterRoleArn,
      if (status != null) 'Status': status.value,
    };
  }
}

enum ModelSortKey {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const ModelSortKey(this.value);

  static ModelSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ModelSortKey'));
}

/// Metadata for Model steps.
class ModelStepMetadata {
  /// The Amazon Resource Name (ARN) of the created model.
  final String? arn;

  ModelStepMetadata({
    this.arn,
  });

  factory ModelStepMetadata.fromJson(Map<String, dynamic> json) {
    return ModelStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides summary information about a model.
class ModelSummary {
  /// A timestamp that indicates when the model was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the model.
  final String modelArn;

  /// The name of the model that you want a summary for.
  final String modelName;

  ModelSummary({
    required this.creationTime,
    required this.modelArn,
    required this.modelName,
  });

  factory ModelSummary.fromJson(Map<String, dynamic> json) {
    return ModelSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      modelArn: json['ModelArn'] as String,
      modelName: json['ModelName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final modelArn = this.modelArn;
    final modelName = this.modelName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ModelArn': modelArn,
      'ModelName': modelName,
    };
  }
}

enum ModelVariantAction {
  retain('Retain'),
  remove('Remove'),
  promote('Promote'),
  ;

  final String value;

  const ModelVariantAction(this.value);

  static ModelVariantAction fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelVariantAction'));
}

/// Contains information about the deployment options of a model.
class ModelVariantConfig {
  /// The configuration for the infrastructure that the model will be deployed to.
  final ModelInfrastructureConfig infrastructureConfig;

  /// The name of the Amazon SageMaker Model entity.
  final String modelName;

  /// The name of the variant.
  final String variantName;

  ModelVariantConfig({
    required this.infrastructureConfig,
    required this.modelName,
    required this.variantName,
  });

  Map<String, dynamic> toJson() {
    final infrastructureConfig = this.infrastructureConfig;
    final modelName = this.modelName;
    final variantName = this.variantName;
    return {
      'InfrastructureConfig': infrastructureConfig,
      'ModelName': modelName,
      'VariantName': variantName,
    };
  }
}

/// Summary of the deployment configuration of a model.
class ModelVariantConfigSummary {
  /// The configuration of the infrastructure that the model has been deployed to.
  final ModelInfrastructureConfig infrastructureConfig;

  /// The name of the Amazon SageMaker Model entity.
  final String modelName;

  /// The status of deployment for the model variant on the hosted inference
  /// endpoint.
  ///
  /// <ul>
  /// <li>
  /// <code>Creating</code> - Amazon SageMaker is preparing the model variant on
  /// the hosted inference endpoint.
  /// </li>
  /// <li>
  /// <code>InService</code> - The model variant is running on the hosted
  /// inference endpoint.
  /// </li>
  /// <li>
  /// <code>Updating</code> - Amazon SageMaker is updating the model variant on
  /// the hosted inference endpoint.
  /// </li>
  /// <li>
  /// <code>Deleting</code> - Amazon SageMaker is deleting the model variant on
  /// the hosted inference endpoint.
  /// </li>
  /// <li>
  /// <code>Deleted</code> - The model variant has been deleted on the hosted
  /// inference endpoint. This can only happen after stopping the experiment.
  /// </li>
  /// </ul>
  final ModelVariantStatus status;

  /// The name of the variant.
  final String variantName;

  ModelVariantConfigSummary({
    required this.infrastructureConfig,
    required this.modelName,
    required this.status,
    required this.variantName,
  });

  factory ModelVariantConfigSummary.fromJson(Map<String, dynamic> json) {
    return ModelVariantConfigSummary(
      infrastructureConfig: ModelInfrastructureConfig.fromJson(
          json['InfrastructureConfig'] as Map<String, dynamic>),
      modelName: json['ModelName'] as String,
      status: ModelVariantStatus.fromString((json['Status'] as String)),
      variantName: json['VariantName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final infrastructureConfig = this.infrastructureConfig;
    final modelName = this.modelName;
    final status = this.status;
    final variantName = this.variantName;
    return {
      'InfrastructureConfig': infrastructureConfig,
      'ModelName': modelName,
      'Status': status.value,
      'VariantName': variantName,
    };
  }
}

enum ModelVariantStatus {
  creating('Creating'),
  updating('Updating'),
  inService('InService'),
  deleting('Deleting'),
  deleted('Deleted'),
  ;

  final String value;

  const ModelVariantStatus(this.value);

  static ModelVariantStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ModelVariantStatus'));
}

/// A list of alert actions taken in response to an alert going into
/// <code>InAlert</code> status.
class MonitoringAlertActions {
  /// An alert action taken to light up an icon on the Model Dashboard when an
  /// alert goes into <code>InAlert</code> status.
  final ModelDashboardIndicatorAction? modelDashboardIndicator;

  MonitoringAlertActions({
    this.modelDashboardIndicator,
  });

  factory MonitoringAlertActions.fromJson(Map<String, dynamic> json) {
    return MonitoringAlertActions(
      modelDashboardIndicator: json['ModelDashboardIndicator'] != null
          ? ModelDashboardIndicatorAction.fromJson(
              json['ModelDashboardIndicator'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final modelDashboardIndicator = this.modelDashboardIndicator;
    return {
      if (modelDashboardIndicator != null)
        'ModelDashboardIndicator': modelDashboardIndicator,
    };
  }
}

enum MonitoringAlertHistorySortKey {
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const MonitoringAlertHistorySortKey(this.value);

  static MonitoringAlertHistorySortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum MonitoringAlertHistorySortKey'));
}

/// Provides summary information of an alert's history.
class MonitoringAlertHistorySummary {
  /// The current alert status of an alert.
  final MonitoringAlertStatus alertStatus;

  /// A timestamp that indicates when the first alert transition occurred in an
  /// alert history. An alert transition can be from status <code>InAlert</code>
  /// to <code>OK</code>, or from <code>OK</code> to <code>InAlert</code>.
  final DateTime creationTime;

  /// The name of a monitoring alert.
  final String monitoringAlertName;

  /// The name of a monitoring schedule.
  final String monitoringScheduleName;

  MonitoringAlertHistorySummary({
    required this.alertStatus,
    required this.creationTime,
    required this.monitoringAlertName,
    required this.monitoringScheduleName,
  });

  factory MonitoringAlertHistorySummary.fromJson(Map<String, dynamic> json) {
    return MonitoringAlertHistorySummary(
      alertStatus:
          MonitoringAlertStatus.fromString((json['AlertStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      monitoringAlertName: json['MonitoringAlertName'] as String,
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final alertStatus = this.alertStatus;
    final creationTime = this.creationTime;
    final monitoringAlertName = this.monitoringAlertName;
    final monitoringScheduleName = this.monitoringScheduleName;
    return {
      'AlertStatus': alertStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      'MonitoringAlertName': monitoringAlertName,
      'MonitoringScheduleName': monitoringScheduleName,
    };
  }
}

enum MonitoringAlertStatus {
  inAlert('InAlert'),
  ok('OK'),
  ;

  final String value;

  const MonitoringAlertStatus(this.value);

  static MonitoringAlertStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum MonitoringAlertStatus'));
}

/// Provides summary information about a monitor alert.
class MonitoringAlertSummary {
  /// A list of alert actions taken in response to an alert going into
  /// <code>InAlert</code> status.
  final MonitoringAlertActions actions;

  /// The current status of an alert.
  final MonitoringAlertStatus alertStatus;

  /// A timestamp that indicates when a monitor alert was created.
  final DateTime creationTime;

  /// Within <code>EvaluationPeriod</code>, how many execution failures will raise
  /// an alert.
  final int datapointsToAlert;

  /// The number of most recent monitoring executions to consider when evaluating
  /// alert status.
  final int evaluationPeriod;

  /// A timestamp that indicates when a monitor alert was last updated.
  final DateTime lastModifiedTime;

  /// The name of a monitoring alert.
  final String monitoringAlertName;

  MonitoringAlertSummary({
    required this.actions,
    required this.alertStatus,
    required this.creationTime,
    required this.datapointsToAlert,
    required this.evaluationPeriod,
    required this.lastModifiedTime,
    required this.monitoringAlertName,
  });

  factory MonitoringAlertSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringAlertSummary(
      actions: MonitoringAlertActions.fromJson(
          json['Actions'] as Map<String, dynamic>),
      alertStatus:
          MonitoringAlertStatus.fromString((json['AlertStatus'] as String)),
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      datapointsToAlert: json['DatapointsToAlert'] as int,
      evaluationPeriod: json['EvaluationPeriod'] as int,
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringAlertName: json['MonitoringAlertName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final actions = this.actions;
    final alertStatus = this.alertStatus;
    final creationTime = this.creationTime;
    final datapointsToAlert = this.datapointsToAlert;
    final evaluationPeriod = this.evaluationPeriod;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringAlertName = this.monitoringAlertName;
    return {
      'Actions': actions,
      'AlertStatus': alertStatus.value,
      'CreationTime': unixTimestampToJson(creationTime),
      'DatapointsToAlert': datapointsToAlert,
      'EvaluationPeriod': evaluationPeriod,
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringAlertName': monitoringAlertName,
    };
  }
}

/// Container image configuration object for the monitoring job.
class MonitoringAppSpecification {
  /// The container image to be run by the monitoring job.
  final String imageUri;

  /// An array of arguments for the container used to run the monitoring job.
  final List<String>? containerArguments;

  /// Specifies the entrypoint for a container used to run the monitoring job.
  final List<String>? containerEntrypoint;

  /// An Amazon S3 URI to a script that is called after analysis has been
  /// performed. Applicable only for the built-in (first party) containers.
  final String? postAnalyticsProcessorSourceUri;

  /// An Amazon S3 URI to a script that is called per row prior to running
  /// analysis. It can base64 decode the payload and convert it into a flattened
  /// JSON so that the built-in container can use the converted data. Applicable
  /// only for the built-in (first party) containers.
  final String? recordPreprocessorSourceUri;

  MonitoringAppSpecification({
    required this.imageUri,
    this.containerArguments,
    this.containerEntrypoint,
    this.postAnalyticsProcessorSourceUri,
    this.recordPreprocessorSourceUri,
  });

  factory MonitoringAppSpecification.fromJson(Map<String, dynamic> json) {
    return MonitoringAppSpecification(
      imageUri: json['ImageUri'] as String,
      containerArguments: (json['ContainerArguments'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      containerEntrypoint: (json['ContainerEntrypoint'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      postAnalyticsProcessorSourceUri:
          json['PostAnalyticsProcessorSourceUri'] as String?,
      recordPreprocessorSourceUri:
          json['RecordPreprocessorSourceUri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageUri = this.imageUri;
    final containerArguments = this.containerArguments;
    final containerEntrypoint = this.containerEntrypoint;
    final postAnalyticsProcessorSourceUri =
        this.postAnalyticsProcessorSourceUri;
    final recordPreprocessorSourceUri = this.recordPreprocessorSourceUri;
    return {
      'ImageUri': imageUri,
      if (containerArguments != null) 'ContainerArguments': containerArguments,
      if (containerEntrypoint != null)
        'ContainerEntrypoint': containerEntrypoint,
      if (postAnalyticsProcessorSourceUri != null)
        'PostAnalyticsProcessorSourceUri': postAnalyticsProcessorSourceUri,
      if (recordPreprocessorSourceUri != null)
        'RecordPreprocessorSourceUri': recordPreprocessorSourceUri,
    };
  }
}

/// Configuration for monitoring constraints and monitoring statistics. These
/// baseline resources are compared against the results of the current job from
/// the series of jobs scheduled to collect data periodically.
class MonitoringBaselineConfig {
  /// The name of the job that performs baselining for the monitoring job.
  final String? baseliningJobName;

  /// The baseline constraint file in Amazon S3 that the current monitoring job
  /// should validated against.
  final MonitoringConstraintsResource? constraintsResource;

  /// The baseline statistics file in Amazon S3 that the current monitoring job
  /// should be validated against.
  final MonitoringStatisticsResource? statisticsResource;

  MonitoringBaselineConfig({
    this.baseliningJobName,
    this.constraintsResource,
    this.statisticsResource,
  });

  factory MonitoringBaselineConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringBaselineConfig(
      baseliningJobName: json['BaseliningJobName'] as String?,
      constraintsResource: json['ConstraintsResource'] != null
          ? MonitoringConstraintsResource.fromJson(
              json['ConstraintsResource'] as Map<String, dynamic>)
          : null,
      statisticsResource: json['StatisticsResource'] != null
          ? MonitoringStatisticsResource.fromJson(
              json['StatisticsResource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final baseliningJobName = this.baseliningJobName;
    final constraintsResource = this.constraintsResource;
    final statisticsResource = this.statisticsResource;
    return {
      if (baseliningJobName != null) 'BaseliningJobName': baseliningJobName,
      if (constraintsResource != null)
        'ConstraintsResource': constraintsResource,
      if (statisticsResource != null) 'StatisticsResource': statisticsResource,
    };
  }
}

/// Configuration for the cluster used to run model monitoring jobs.
class MonitoringClusterConfig {
  /// The number of ML compute instances to use in the model monitoring job. For
  /// distributed processing jobs, specify a value greater than 1. The default
  /// value is 1.
  final int instanceCount;

  /// The ML compute instance type for the processing job.
  final ProcessingInstanceType instanceType;

  /// The size of the ML storage volume, in gigabytes, that you want to provision.
  /// You must specify sufficient ML storage for your scenario.
  final int volumeSizeInGB;

  /// The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt
  /// data on the storage volume attached to the ML compute instance(s) that run
  /// the model monitoring job.
  final String? volumeKmsKeyId;

  MonitoringClusterConfig({
    required this.instanceCount,
    required this.instanceType,
    required this.volumeSizeInGB,
    this.volumeKmsKeyId,
  });

  factory MonitoringClusterConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringClusterConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType:
          ProcessingInstanceType.fromString((json['InstanceType'] as String)),
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeSizeInGB = this.volumeSizeInGB;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.value,
      'VolumeSizeInGB': volumeSizeInGB,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// The constraints resource for a monitoring job.
class MonitoringConstraintsResource {
  /// The Amazon S3 URI for the constraints resource.
  final String? s3Uri;

  MonitoringConstraintsResource({
    this.s3Uri,
  });

  factory MonitoringConstraintsResource.fromJson(Map<String, dynamic> json) {
    return MonitoringConstraintsResource(
      s3Uri: json['S3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    return {
      if (s3Uri != null) 'S3Uri': s3Uri,
    };
  }
}

/// Represents the CSV dataset format used when running a monitoring job.
class MonitoringCsvDatasetFormat {
  /// Indicates if the CSV data has a header.
  final bool? header;

  MonitoringCsvDatasetFormat({
    this.header,
  });

  factory MonitoringCsvDatasetFormat.fromJson(Map<String, dynamic> json) {
    return MonitoringCsvDatasetFormat(
      header: json['Header'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final header = this.header;
    return {
      if (header != null) 'Header': header,
    };
  }
}

/// Represents the dataset format used when running a monitoring job.
class MonitoringDatasetFormat {
  /// The CSV dataset used in the monitoring job.
  final MonitoringCsvDatasetFormat? csv;

  /// The JSON dataset used in the monitoring job
  final MonitoringJsonDatasetFormat? json;

  /// The Parquet dataset used in the monitoring job
  final MonitoringParquetDatasetFormat? parquet;

  MonitoringDatasetFormat({
    this.csv,
    this.json,
    this.parquet,
  });

  factory MonitoringDatasetFormat.fromJson(Map<String, dynamic> json) {
    return MonitoringDatasetFormat(
      csv: json['Csv'] != null
          ? MonitoringCsvDatasetFormat.fromJson(
              json['Csv'] as Map<String, dynamic>)
          : null,
      json: json['Json'] != null
          ? MonitoringJsonDatasetFormat.fromJson(
              json['Json'] as Map<String, dynamic>)
          : null,
      parquet: json['Parquet'] != null
          ? MonitoringParquetDatasetFormat.fromJson(
              json['Parquet'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final csv = this.csv;
    final json = this.json;
    final parquet = this.parquet;
    return {
      if (csv != null) 'Csv': csv,
      if (json != null) 'Json': json,
      if (parquet != null) 'Parquet': parquet,
    };
  }
}

enum MonitoringExecutionSortKey {
  creationTime('CreationTime'),
  scheduledTime('ScheduledTime'),
  status('Status'),
  ;

  final String value;

  const MonitoringExecutionSortKey(this.value);

  static MonitoringExecutionSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum MonitoringExecutionSortKey'));
}

/// Summary of information about the last monitoring job to run.
class MonitoringExecutionSummary {
  /// The time at which the monitoring job was created.
  final DateTime creationTime;

  /// A timestamp that indicates the last time the monitoring job was modified.
  final DateTime lastModifiedTime;

  /// The status of the monitoring job.
  final ExecutionStatus monitoringExecutionStatus;

  /// The name of the monitoring schedule.
  final String monitoringScheduleName;

  /// The time the monitoring job was scheduled.
  final DateTime scheduledTime;

  /// The name of the endpoint used to run the monitoring job.
  final String? endpointName;

  /// Contains the reason a monitoring job failed, if it failed.
  final String? failureReason;

  /// The name of the monitoring job.
  final String? monitoringJobDefinitionName;

  /// The type of the monitoring job.
  final MonitoringType? monitoringType;

  /// The Amazon Resource Name (ARN) of the monitoring job.
  final String? processingJobArn;

  MonitoringExecutionSummary({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.monitoringExecutionStatus,
    required this.monitoringScheduleName,
    required this.scheduledTime,
    this.endpointName,
    this.failureReason,
    this.monitoringJobDefinitionName,
    this.monitoringType,
    this.processingJobArn,
  });

  factory MonitoringExecutionSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringExecutionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringExecutionStatus: ExecutionStatus.fromString(
          (json['MonitoringExecutionStatus'] as String)),
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
      scheduledTime:
          nonNullableTimeStampFromJson(json['ScheduledTime'] as Object),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String?,
      monitoringType:
          (json['MonitoringType'] as String?)?.let(MonitoringType.fromString),
      processingJobArn: json['ProcessingJobArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringExecutionStatus = this.monitoringExecutionStatus;
    final monitoringScheduleName = this.monitoringScheduleName;
    final scheduledTime = this.scheduledTime;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    final monitoringType = this.monitoringType;
    final processingJobArn = this.processingJobArn;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringExecutionStatus': monitoringExecutionStatus.value,
      'MonitoringScheduleName': monitoringScheduleName,
      'ScheduledTime': unixTimestampToJson(scheduledTime),
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (monitoringJobDefinitionName != null)
        'MonitoringJobDefinitionName': monitoringJobDefinitionName,
      if (monitoringType != null) 'MonitoringType': monitoringType.value,
      if (processingJobArn != null) 'ProcessingJobArn': processingJobArn,
    };
  }
}

/// The ground truth labels for the dataset used for the monitoring job.
class MonitoringGroundTruthS3Input {
  /// The address of the Amazon S3 location of the ground truth labels.
  final String? s3Uri;

  MonitoringGroundTruthS3Input({
    this.s3Uri,
  });

  factory MonitoringGroundTruthS3Input.fromJson(Map<String, dynamic> json) {
    return MonitoringGroundTruthS3Input(
      s3Uri: json['S3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    return {
      if (s3Uri != null) 'S3Uri': s3Uri,
    };
  }
}

/// The inputs for a monitoring job.
class MonitoringInput {
  /// Input object for the batch transform job.
  final BatchTransformInput? batchTransformInput;

  /// The endpoint for a monitoring job.
  final EndpointInput? endpointInput;

  MonitoringInput({
    this.batchTransformInput,
    this.endpointInput,
  });

  factory MonitoringInput.fromJson(Map<String, dynamic> json) {
    return MonitoringInput(
      batchTransformInput: json['BatchTransformInput'] != null
          ? BatchTransformInput.fromJson(
              json['BatchTransformInput'] as Map<String, dynamic>)
          : null,
      endpointInput: json['EndpointInput'] != null
          ? EndpointInput.fromJson(
              json['EndpointInput'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final batchTransformInput = this.batchTransformInput;
    final endpointInput = this.endpointInput;
    return {
      if (batchTransformInput != null)
        'BatchTransformInput': batchTransformInput,
      if (endpointInput != null) 'EndpointInput': endpointInput,
    };
  }
}

/// Defines the monitoring job.
class MonitoringJobDefinition {
  /// Configures the monitoring job to run a specified Docker container image.
  final MonitoringAppSpecification monitoringAppSpecification;

  /// The array of inputs for the monitoring job. Currently we support monitoring
  /// an Amazon SageMaker Endpoint.
  final List<MonitoringInput> monitoringInputs;

  /// The array of outputs from the monitoring job to be uploaded to Amazon S3.
  final MonitoringOutputConfig monitoringOutputConfig;

  /// Identifies the resources, ML compute instances, and ML storage volumes to
  /// deploy for a monitoring job. In distributed processing, you specify more
  /// than one instance.
  final MonitoringResources monitoringResources;

  /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can
  /// assume to perform tasks on your behalf.
  final String roleArn;

  /// Baseline configuration used to validate that the data conforms to the
  /// specified constraints and statistics
  final MonitoringBaselineConfig? baselineConfig;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  /// Specifies networking options for an monitoring job.
  final NetworkConfig? networkConfig;

  /// Specifies a time limit for how long the monitoring job is allowed to run.
  final MonitoringStoppingCondition? stoppingCondition;

  MonitoringJobDefinition({
    required this.monitoringAppSpecification,
    required this.monitoringInputs,
    required this.monitoringOutputConfig,
    required this.monitoringResources,
    required this.roleArn,
    this.baselineConfig,
    this.environment,
    this.networkConfig,
    this.stoppingCondition,
  });

  factory MonitoringJobDefinition.fromJson(Map<String, dynamic> json) {
    return MonitoringJobDefinition(
      monitoringAppSpecification: MonitoringAppSpecification.fromJson(
          json['MonitoringAppSpecification'] as Map<String, dynamic>),
      monitoringInputs: (json['MonitoringInputs'] as List)
          .nonNulls
          .map((e) => MonitoringInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      monitoringOutputConfig: MonitoringOutputConfig.fromJson(
          json['MonitoringOutputConfig'] as Map<String, dynamic>),
      monitoringResources: MonitoringResources.fromJson(
          json['MonitoringResources'] as Map<String, dynamic>),
      roleArn: json['RoleArn'] as String,
      baselineConfig: json['BaselineConfig'] != null
          ? MonitoringBaselineConfig.fromJson(
              json['BaselineConfig'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      networkConfig: json['NetworkConfig'] != null
          ? NetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      stoppingCondition: json['StoppingCondition'] != null
          ? MonitoringStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringAppSpecification = this.monitoringAppSpecification;
    final monitoringInputs = this.monitoringInputs;
    final monitoringOutputConfig = this.monitoringOutputConfig;
    final monitoringResources = this.monitoringResources;
    final roleArn = this.roleArn;
    final baselineConfig = this.baselineConfig;
    final environment = this.environment;
    final networkConfig = this.networkConfig;
    final stoppingCondition = this.stoppingCondition;
    return {
      'MonitoringAppSpecification': monitoringAppSpecification,
      'MonitoringInputs': monitoringInputs,
      'MonitoringOutputConfig': monitoringOutputConfig,
      'MonitoringResources': monitoringResources,
      'RoleArn': roleArn,
      if (baselineConfig != null) 'BaselineConfig': baselineConfig,
      if (environment != null) 'Environment': environment,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
    };
  }
}

enum MonitoringJobDefinitionSortKey {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const MonitoringJobDefinitionSortKey(this.value);

  static MonitoringJobDefinitionSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum MonitoringJobDefinitionSortKey'));
}

/// Summary information about a monitoring job.
class MonitoringJobDefinitionSummary {
  /// The time that the monitoring job was created.
  final DateTime creationTime;

  /// The name of the endpoint that the job monitors.
  final String endpointName;

  /// The Amazon Resource Name (ARN) of the monitoring job.
  final String monitoringJobDefinitionArn;

  /// The name of the monitoring job.
  final String monitoringJobDefinitionName;

  MonitoringJobDefinitionSummary({
    required this.creationTime,
    required this.endpointName,
    required this.monitoringJobDefinitionArn,
    required this.monitoringJobDefinitionName,
  });

  factory MonitoringJobDefinitionSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringJobDefinitionSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      endpointName: json['EndpointName'] as String,
      monitoringJobDefinitionArn: json['MonitoringJobDefinitionArn'] as String,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointName = this.endpointName;
    final monitoringJobDefinitionArn = this.monitoringJobDefinitionArn;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'EndpointName': endpointName,
      'MonitoringJobDefinitionArn': monitoringJobDefinitionArn,
      'MonitoringJobDefinitionName': monitoringJobDefinitionName,
    };
  }
}

/// Represents the JSON dataset format used when running a monitoring job.
class MonitoringJsonDatasetFormat {
  /// Indicates if the file should be read as a JSON object per line.
  final bool? line;

  MonitoringJsonDatasetFormat({
    this.line,
  });

  factory MonitoringJsonDatasetFormat.fromJson(Map<String, dynamic> json) {
    return MonitoringJsonDatasetFormat(
      line: json['Line'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final line = this.line;
    return {
      if (line != null) 'Line': line,
    };
  }
}

/// The networking configuration for the monitoring job.
class MonitoringNetworkConfig {
  /// Whether to encrypt all communications between the instances used for the
  /// monitoring jobs. Choose <code>True</code> to encrypt communications.
  /// Encryption provides greater security for distributed jobs, but the
  /// processing might take longer.
  final bool? enableInterContainerTrafficEncryption;

  /// Whether to allow inbound and outbound network calls to and from the
  /// containers used for the monitoring job.
  final bool? enableNetworkIsolation;
  final VpcConfig? vpcConfig;

  MonitoringNetworkConfig({
    this.enableInterContainerTrafficEncryption,
    this.enableNetworkIsolation,
    this.vpcConfig,
  });

  factory MonitoringNetworkConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringNetworkConfig(
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final vpcConfig = this.vpcConfig;
    return {
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// The output object for a monitoring job.
class MonitoringOutput {
  /// The Amazon S3 storage location where the results of a monitoring job are
  /// saved.
  final MonitoringS3Output s3Output;

  MonitoringOutput({
    required this.s3Output,
  });

  factory MonitoringOutput.fromJson(Map<String, dynamic> json) {
    return MonitoringOutput(
      s3Output:
          MonitoringS3Output.fromJson(json['S3Output'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final s3Output = this.s3Output;
    return {
      'S3Output': s3Output,
    };
  }
}

/// The output configuration for monitoring jobs.
class MonitoringOutputConfig {
  /// Monitoring outputs for monitoring jobs. This is where the output of the
  /// periodic monitoring jobs is uploaded.
  final List<MonitoringOutput> monitoringOutputs;

  /// The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt
  /// the model artifacts at rest using Amazon S3 server-side encryption.
  final String? kmsKeyId;

  MonitoringOutputConfig({
    required this.monitoringOutputs,
    this.kmsKeyId,
  });

  factory MonitoringOutputConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringOutputConfig(
      monitoringOutputs: (json['MonitoringOutputs'] as List)
          .nonNulls
          .map((e) => MonitoringOutput.fromJson(e as Map<String, dynamic>))
          .toList(),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringOutputs = this.monitoringOutputs;
    final kmsKeyId = this.kmsKeyId;
    return {
      'MonitoringOutputs': monitoringOutputs,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// Represents the Parquet dataset format used when running a monitoring job.
class MonitoringParquetDatasetFormat {
  MonitoringParquetDatasetFormat();

  factory MonitoringParquetDatasetFormat.fromJson(Map<String, dynamic> _) {
    return MonitoringParquetDatasetFormat();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

enum MonitoringProblemType {
  binaryClassification('BinaryClassification'),
  multiclassClassification('MulticlassClassification'),
  regression('Regression'),
  ;

  final String value;

  const MonitoringProblemType(this.value);

  static MonitoringProblemType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum MonitoringProblemType'));
}

/// Identifies the resources to deploy for a monitoring job.
class MonitoringResources {
  /// The configuration for the cluster resources used to run the processing job.
  final MonitoringClusterConfig clusterConfig;

  MonitoringResources({
    required this.clusterConfig,
  });

  factory MonitoringResources.fromJson(Map<String, dynamic> json) {
    return MonitoringResources(
      clusterConfig: MonitoringClusterConfig.fromJson(
          json['ClusterConfig'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterConfig = this.clusterConfig;
    return {
      'ClusterConfig': clusterConfig,
    };
  }
}

/// Information about where and how you want to store the results of a
/// monitoring job.
class MonitoringS3Output {
  /// The local path to the Amazon S3 storage location where Amazon SageMaker
  /// saves the results of a monitoring job. LocalPath is an absolute path for the
  /// output data.
  final String localPath;

  /// A URI that identifies the Amazon S3 storage location where Amazon SageMaker
  /// saves the results of a monitoring job.
  final String s3Uri;

  /// Whether to upload the results of the monitoring job continuously or after
  /// the job completes.
  final ProcessingS3UploadMode? s3UploadMode;

  MonitoringS3Output({
    required this.localPath,
    required this.s3Uri,
    this.s3UploadMode,
  });

  factory MonitoringS3Output.fromJson(Map<String, dynamic> json) {
    return MonitoringS3Output(
      localPath: json['LocalPath'] as String,
      s3Uri: json['S3Uri'] as String,
      s3UploadMode: (json['S3UploadMode'] as String?)
          ?.let(ProcessingS3UploadMode.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final localPath = this.localPath;
    final s3Uri = this.s3Uri;
    final s3UploadMode = this.s3UploadMode;
    return {
      'LocalPath': localPath,
      'S3Uri': s3Uri,
      if (s3UploadMode != null) 'S3UploadMode': s3UploadMode.value,
    };
  }
}

/// A schedule for a model monitoring job. For information about model monitor,
/// see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon
/// SageMaker Model Monitor</a>.
class MonitoringSchedule {
  /// The time that the monitoring schedule was created.
  final DateTime? creationTime;

  /// The endpoint that hosts the model being monitored.
  final String? endpointName;

  /// If the monitoring schedule failed, the reason it failed.
  final String? failureReason;

  /// The last time the monitoring schedule was changed.
  final DateTime? lastModifiedTime;
  final MonitoringExecutionSummary? lastMonitoringExecutionSummary;

  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String? monitoringScheduleArn;
  final MonitoringScheduleConfig? monitoringScheduleConfig;

  /// The name of the monitoring schedule.
  final String? monitoringScheduleName;

  /// The status of the monitoring schedule. This can be one of the following
  /// values.
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The schedule is pending being created.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - The schedule failed.
  /// </li>
  /// <li>
  /// <code>SCHEDULED</code> - The schedule was successfully created.
  /// </li>
  /// <li>
  /// <code>STOPPED</code> - The schedule was stopped.
  /// </li>
  /// </ul>
  final ScheduleStatus? monitoringScheduleStatus;

  /// The type of the monitoring job definition to schedule.
  final MonitoringType? monitoringType;

  /// A list of the tags associated with the monitoring schedlue. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services resources</a> in the <i>Amazon Web Services General
  /// Reference Guide</i>.
  final List<Tag>? tags;

  MonitoringSchedule({
    this.creationTime,
    this.endpointName,
    this.failureReason,
    this.lastModifiedTime,
    this.lastMonitoringExecutionSummary,
    this.monitoringScheduleArn,
    this.monitoringScheduleConfig,
    this.monitoringScheduleName,
    this.monitoringScheduleStatus,
    this.monitoringType,
    this.tags,
  });

  factory MonitoringSchedule.fromJson(Map<String, dynamic> json) {
    return MonitoringSchedule(
      creationTime: timeStampFromJson(json['CreationTime']),
      endpointName: json['EndpointName'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastMonitoringExecutionSummary: json['LastMonitoringExecutionSummary'] !=
              null
          ? MonitoringExecutionSummary.fromJson(
              json['LastMonitoringExecutionSummary'] as Map<String, dynamic>)
          : null,
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      monitoringScheduleConfig: json['MonitoringScheduleConfig'] != null
          ? MonitoringScheduleConfig.fromJson(
              json['MonitoringScheduleConfig'] as Map<String, dynamic>)
          : null,
      monitoringScheduleName: json['MonitoringScheduleName'] as String?,
      monitoringScheduleStatus: (json['MonitoringScheduleStatus'] as String?)
          ?.let(ScheduleStatus.fromString),
      monitoringType:
          (json['MonitoringType'] as String?)?.let(MonitoringType.fromString),
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final endpointName = this.endpointName;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final lastMonitoringExecutionSummary = this.lastMonitoringExecutionSummary;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleConfig = this.monitoringScheduleConfig;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final monitoringType = this.monitoringType;
    final tags = this.tags;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (endpointName != null) 'EndpointName': endpointName,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastMonitoringExecutionSummary != null)
        'LastMonitoringExecutionSummary': lastMonitoringExecutionSummary,
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (monitoringScheduleConfig != null)
        'MonitoringScheduleConfig': monitoringScheduleConfig,
      if (monitoringScheduleName != null)
        'MonitoringScheduleName': monitoringScheduleName,
      if (monitoringScheduleStatus != null)
        'MonitoringScheduleStatus': monitoringScheduleStatus.value,
      if (monitoringType != null) 'MonitoringType': monitoringType.value,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// Configures the monitoring schedule and defines the monitoring job.
class MonitoringScheduleConfig {
  /// Defines the monitoring job.
  final MonitoringJobDefinition? monitoringJobDefinition;

  /// The name of the monitoring job definition to schedule.
  final String? monitoringJobDefinitionName;

  /// The type of the monitoring job definition to schedule.
  final MonitoringType? monitoringType;

  /// Configures the monitoring schedule.
  final ScheduleConfig? scheduleConfig;

  MonitoringScheduleConfig({
    this.monitoringJobDefinition,
    this.monitoringJobDefinitionName,
    this.monitoringType,
    this.scheduleConfig,
  });

  factory MonitoringScheduleConfig.fromJson(Map<String, dynamic> json) {
    return MonitoringScheduleConfig(
      monitoringJobDefinition: json['MonitoringJobDefinition'] != null
          ? MonitoringJobDefinition.fromJson(
              json['MonitoringJobDefinition'] as Map<String, dynamic>)
          : null,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String?,
      monitoringType:
          (json['MonitoringType'] as String?)?.let(MonitoringType.fromString),
      scheduleConfig: json['ScheduleConfig'] != null
          ? ScheduleConfig.fromJson(
              json['ScheduleConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringJobDefinition = this.monitoringJobDefinition;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    final monitoringType = this.monitoringType;
    final scheduleConfig = this.scheduleConfig;
    return {
      if (monitoringJobDefinition != null)
        'MonitoringJobDefinition': monitoringJobDefinition,
      if (monitoringJobDefinitionName != null)
        'MonitoringJobDefinitionName': monitoringJobDefinitionName,
      if (monitoringType != null) 'MonitoringType': monitoringType.value,
      if (scheduleConfig != null) 'ScheduleConfig': scheduleConfig,
    };
  }
}

enum MonitoringScheduleSortKey {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const MonitoringScheduleSortKey(this.value);

  static MonitoringScheduleSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum MonitoringScheduleSortKey'));
}

/// Summarizes the monitoring schedule.
class MonitoringScheduleSummary {
  /// The creation time of the monitoring schedule.
  final DateTime creationTime;

  /// The last time the monitoring schedule was modified.
  final DateTime lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  /// The name of the monitoring schedule.
  final String monitoringScheduleName;

  /// The status of the monitoring schedule.
  final ScheduleStatus monitoringScheduleStatus;

  /// The name of the endpoint using the monitoring schedule.
  final String? endpointName;

  /// The name of the monitoring job definition that the schedule is for.
  final String? monitoringJobDefinitionName;

  /// The type of the monitoring job definition that the schedule is for.
  final MonitoringType? monitoringType;

  MonitoringScheduleSummary({
    required this.creationTime,
    required this.lastModifiedTime,
    required this.monitoringScheduleArn,
    required this.monitoringScheduleName,
    required this.monitoringScheduleStatus,
    this.endpointName,
    this.monitoringJobDefinitionName,
    this.monitoringType,
  });

  factory MonitoringScheduleSummary.fromJson(Map<String, dynamic> json) {
    return MonitoringScheduleSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      lastModifiedTime:
          nonNullableTimeStampFromJson(json['LastModifiedTime'] as Object),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
      monitoringScheduleName: json['MonitoringScheduleName'] as String,
      monitoringScheduleStatus: ScheduleStatus.fromString(
          (json['MonitoringScheduleStatus'] as String)),
      endpointName: json['EndpointName'] as String?,
      monitoringJobDefinitionName:
          json['MonitoringJobDefinitionName'] as String?,
      monitoringType:
          (json['MonitoringType'] as String?)?.let(MonitoringType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringScheduleName = this.monitoringScheduleName;
    final monitoringScheduleStatus = this.monitoringScheduleStatus;
    final endpointName = this.endpointName;
    final monitoringJobDefinitionName = this.monitoringJobDefinitionName;
    final monitoringType = this.monitoringType;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      'MonitoringScheduleArn': monitoringScheduleArn,
      'MonitoringScheduleName': monitoringScheduleName,
      'MonitoringScheduleStatus': monitoringScheduleStatus.value,
      if (endpointName != null) 'EndpointName': endpointName,
      if (monitoringJobDefinitionName != null)
        'MonitoringJobDefinitionName': monitoringJobDefinitionName,
      if (monitoringType != null) 'MonitoringType': monitoringType.value,
    };
  }
}

/// The statistics resource for a monitoring job.
class MonitoringStatisticsResource {
  /// The Amazon S3 URI for the statistics resource.
  final String? s3Uri;

  MonitoringStatisticsResource({
    this.s3Uri,
  });

  factory MonitoringStatisticsResource.fromJson(Map<String, dynamic> json) {
    return MonitoringStatisticsResource(
      s3Uri: json['S3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    return {
      if (s3Uri != null) 'S3Uri': s3Uri,
    };
  }
}

/// A time limit for how long the monitoring job is allowed to run before
/// stopping.
class MonitoringStoppingCondition {
  /// The maximum runtime allowed in seconds.
  /// <note>
  /// The <code>MaxRuntimeInSeconds</code> cannot exceed the frequency of the job.
  /// For data quality and model explainability, this can be up to 3600 seconds
  /// for an hourly schedule. For model bias and model quality hourly schedules,
  /// this can be up to 1800 seconds.
  /// </note>
  final int maxRuntimeInSeconds;

  MonitoringStoppingCondition({
    required this.maxRuntimeInSeconds,
  });

  factory MonitoringStoppingCondition.fromJson(Map<String, dynamic> json) {
    return MonitoringStoppingCondition(
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    return {
      'MaxRuntimeInSeconds': maxRuntimeInSeconds,
    };
  }
}

enum MonitoringType {
  dataQuality('DataQuality'),
  modelQuality('ModelQuality'),
  modelBias('ModelBias'),
  modelExplainability('ModelExplainability'),
  ;

  final String value;

  const MonitoringType(this.value);

  static MonitoringType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum MonitoringType'));
}

/// Specifies additional configuration for hosting multi-model endpoints.
class MultiModelConfig {
  /// Whether to cache models for a multi-model endpoint. By default, multi-model
  /// endpoints cache models so that a model does not have to be loaded into
  /// memory each time it is invoked. Some use cases do not benefit from model
  /// caching. For example, if an endpoint hosts a large number of models that are
  /// each invoked infrequently, the endpoint might perform better if you disable
  /// model caching. To disable model caching, set the value of this parameter to
  /// <code>Disabled</code>.
  final ModelCacheSetting? modelCacheSetting;

  MultiModelConfig({
    this.modelCacheSetting,
  });

  factory MultiModelConfig.fromJson(Map<String, dynamic> json) {
    return MultiModelConfig(
      modelCacheSetting: (json['ModelCacheSetting'] as String?)
          ?.let(ModelCacheSetting.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final modelCacheSetting = this.modelCacheSetting;
    return {
      if (modelCacheSetting != null)
        'ModelCacheSetting': modelCacheSetting.value,
    };
  }
}

/// The <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
/// configuration object that specifies the VPC that you want the compilation
/// jobs to connect to. For more information on controlling access to your
/// Amazon S3 buckets used for compilation job, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Give
/// Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon
/// VPC</a>.
class NeoVpcConfig {
  /// The VPC security group IDs. IDs have the form of <code>sg-xxxxxxxx</code>.
  /// Specify the security groups for the VPC that is specified in the
  /// <code>Subnets</code> field.
  final List<String> securityGroupIds;

  /// The ID of the subnets in the VPC that you want to connect the compilation
  /// job to for accessing the model in Amazon S3.
  final List<String> subnets;

  NeoVpcConfig({
    required this.securityGroupIds,
    required this.subnets,
  });

  factory NeoVpcConfig.fromJson(Map<String, dynamic> json) {
    return NeoVpcConfig(
      securityGroupIds: (json['SecurityGroupIds'] as List)
          .nonNulls
          .map((e) => e as String)
          .toList(),
      subnets:
          (json['Subnets'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    return {
      'SecurityGroupIds': securityGroupIds,
      'Subnets': subnets,
    };
  }
}

/// A list of nested <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html">Filter</a>
/// objects. A resource must satisfy the conditions of all filters to be
/// included in the results returned from the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API.
///
/// For example, to filter on a training job's <code>InputDataConfig</code>
/// property with a specific channel name and <code>S3Uri</code> prefix, define
/// the following filters:
///
/// <ul>
/// <li>
/// <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals",
/// "Value":"train"}',</code>
/// </li>
/// <li>
/// <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri",
/// "Operator":"Contains", "Value":"mybucket/catdata"}'</code>
/// </li>
/// </ul>
class NestedFilters {
  /// A list of filters. Each filter acts on a property. Filters must contain at
  /// least one <code>Filters</code> value. For example, a
  /// <code>NestedFilters</code> call might include a filter on the
  /// <code>PropertyName</code> parameter of the <code>InputDataConfig</code>
  /// property: <code>InputDataConfig.DataSource.S3DataSource.S3Uri</code>.
  final List<Filter> filters;

  /// The name of the property to use in the nested filters. The value must match
  /// a listed property name, such as <code>InputDataConfig</code>.
  final String nestedPropertyName;

  NestedFilters({
    required this.filters,
    required this.nestedPropertyName,
  });

  Map<String, dynamic> toJson() {
    final filters = this.filters;
    final nestedPropertyName = this.nestedPropertyName;
    return {
      'Filters': filters,
      'NestedPropertyName': nestedPropertyName,
    };
  }
}

/// Networking options for a job, such as network traffic encryption between
/// containers, whether to allow inbound and outbound network calls to and from
/// containers, and the VPC subnets and security groups to use for VPC-enabled
/// jobs.
class NetworkConfig {
  /// Whether to encrypt all communications between distributed processing jobs.
  /// Choose <code>True</code> to encrypt communications. Encryption provides
  /// greater security for distributed processing jobs, but the processing might
  /// take longer.
  final bool? enableInterContainerTrafficEncryption;

  /// Whether to allow inbound and outbound network calls to and from the
  /// containers used for the processing job.
  final bool? enableNetworkIsolation;
  final VpcConfig? vpcConfig;

  NetworkConfig({
    this.enableInterContainerTrafficEncryption,
    this.enableNetworkIsolation,
    this.vpcConfig,
  });

  factory NetworkConfig.fromJson(Map<String, dynamic> json) {
    return NetworkConfig(
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final vpcConfig = this.vpcConfig;
    return {
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

enum NotebookInstanceAcceleratorType {
  mlEia1Medium('ml.eia1.medium'),
  mlEia1Large('ml.eia1.large'),
  mlEia1Xlarge('ml.eia1.xlarge'),
  mlEia2Medium('ml.eia2.medium'),
  mlEia2Large('ml.eia2.large'),
  mlEia2Xlarge('ml.eia2.xlarge'),
  ;

  final String value;

  const NotebookInstanceAcceleratorType(this.value);

  static NotebookInstanceAcceleratorType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NotebookInstanceAcceleratorType'));
}

enum NotebookInstanceLifecycleConfigSortKey {
  name('Name'),
  creationTime('CreationTime'),
  lastModifiedTime('LastModifiedTime'),
  ;

  final String value;

  const NotebookInstanceLifecycleConfigSortKey(this.value);

  static NotebookInstanceLifecycleConfigSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NotebookInstanceLifecycleConfigSortKey'));
}

enum NotebookInstanceLifecycleConfigSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const NotebookInstanceLifecycleConfigSortOrder(this.value);

  static NotebookInstanceLifecycleConfigSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NotebookInstanceLifecycleConfigSortOrder'));
}

/// Provides a summary of a notebook instance lifecycle configuration.
class NotebookInstanceLifecycleConfigSummary {
  /// The Amazon Resource Name (ARN) of the lifecycle configuration.
  final String notebookInstanceLifecycleConfigArn;

  /// The name of the lifecycle configuration.
  final String notebookInstanceLifecycleConfigName;

  /// A timestamp that tells when the lifecycle configuration was created.
  final DateTime? creationTime;

  /// A timestamp that tells when the lifecycle configuration was last modified.
  final DateTime? lastModifiedTime;

  NotebookInstanceLifecycleConfigSummary({
    required this.notebookInstanceLifecycleConfigArn,
    required this.notebookInstanceLifecycleConfigName,
    this.creationTime,
    this.lastModifiedTime,
  });

  factory NotebookInstanceLifecycleConfigSummary.fromJson(
      Map<String, dynamic> json) {
    return NotebookInstanceLifecycleConfigSummary(
      notebookInstanceLifecycleConfigArn:
          json['NotebookInstanceLifecycleConfigArn'] as String,
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceLifecycleConfigArn =
        this.notebookInstanceLifecycleConfigArn;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    return {
      'NotebookInstanceLifecycleConfigArn': notebookInstanceLifecycleConfigArn,
      'NotebookInstanceLifecycleConfigName':
          notebookInstanceLifecycleConfigName,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
    };
  }
}

/// Contains the notebook instance lifecycle configuration script.
///
/// Each lifecycle configuration script has a limit of 16384 characters.
///
/// The value of the <code>$PATH</code> environment variable that is available
/// to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.
///
/// View Amazon CloudWatch Logs for notebook instance lifecycle configurations
/// in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream
/// <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.
///
/// Lifecycle configuration scripts cannot run for longer than 5 minutes. If a
/// script runs for longer than 5 minutes, it fails and the notebook instance is
/// not created or started.
///
/// For information about notebook instance lifestyle configurations, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
/// 2.1: (Optional) Customize a Notebook Instance</a>.
class NotebookInstanceLifecycleHook {
  /// A base64-encoded string that contains a shell script for a notebook instance
  /// lifecycle configuration.
  final String? content;

  NotebookInstanceLifecycleHook({
    this.content,
  });

  factory NotebookInstanceLifecycleHook.fromJson(Map<String, dynamic> json) {
    return NotebookInstanceLifecycleHook(
      content: json['Content'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final content = this.content;
    return {
      if (content != null) 'Content': content,
    };
  }
}

enum NotebookInstanceSortKey {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const NotebookInstanceSortKey(this.value);

  static NotebookInstanceSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NotebookInstanceSortKey'));
}

enum NotebookInstanceSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const NotebookInstanceSortOrder(this.value);

  static NotebookInstanceSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NotebookInstanceSortOrder'));
}

enum NotebookInstanceStatus {
  pending('Pending'),
  inService('InService'),
  stopping('Stopping'),
  stopped('Stopped'),
  failed('Failed'),
  deleting('Deleting'),
  updating('Updating'),
  ;

  final String value;

  const NotebookInstanceStatus(this.value);

  static NotebookInstanceStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum NotebookInstanceStatus'));
}

/// Provides summary information for an SageMaker notebook instance.
class NotebookInstanceSummary {
  /// The Amazon Resource Name (ARN) of the notebook instance.
  final String notebookInstanceArn;

  /// The name of the notebook instance that you want a summary for.
  final String notebookInstanceName;

  /// An array of up to three Git repositories associated with the notebook
  /// instance. These can be either the names of Git repositories stored as
  /// resources in your account, or the URL of Git repositories in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. These
  /// repositories are cloned at the same level as the default repository of your
  /// notebook instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  final List<String>? additionalCodeRepositories;

  /// A timestamp that shows when the notebook instance was created.
  final DateTime? creationTime;

  /// The Git repository associated with the notebook instance as its default code
  /// repository. This can be either the name of a Git repository stored as a
  /// resource in your account, or the URL of a Git repository in <a
  /// href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon
  /// Web Services CodeCommit</a> or in any other Git repository. When you open a
  /// notebook instance, it opens in the directory that contains this repository.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating
  /// Git Repositories with SageMaker Notebook Instances</a>.
  final String? defaultCodeRepository;

  /// The type of ML compute instance that the notebook instance is running on.
  final InstanceType? instanceType;

  /// A timestamp that shows when the notebook instance was last modified.
  final DateTime? lastModifiedTime;

  /// The name of a notebook instance lifecycle configuration associated with this
  /// notebook instance.
  ///
  /// For information about notebook instance lifestyle configurations, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
  /// 2.1: (Optional) Customize a Notebook Instance</a>.
  final String? notebookInstanceLifecycleConfigName;

  /// The status of the notebook instance.
  final NotebookInstanceStatus? notebookInstanceStatus;

  /// The URL that you use to connect to the Jupyter notebook running in your
  /// notebook instance.
  final String? url;

  NotebookInstanceSummary({
    required this.notebookInstanceArn,
    required this.notebookInstanceName,
    this.additionalCodeRepositories,
    this.creationTime,
    this.defaultCodeRepository,
    this.instanceType,
    this.lastModifiedTime,
    this.notebookInstanceLifecycleConfigName,
    this.notebookInstanceStatus,
    this.url,
  });

  factory NotebookInstanceSummary.fromJson(Map<String, dynamic> json) {
    return NotebookInstanceSummary(
      notebookInstanceArn: json['NotebookInstanceArn'] as String,
      notebookInstanceName: json['NotebookInstanceName'] as String,
      additionalCodeRepositories: (json['AdditionalCodeRepositories'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      creationTime: timeStampFromJson(json['CreationTime']),
      defaultCodeRepository: json['DefaultCodeRepository'] as String?,
      instanceType:
          (json['InstanceType'] as String?)?.let(InstanceType.fromString),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      notebookInstanceLifecycleConfigName:
          json['NotebookInstanceLifecycleConfigName'] as String?,
      notebookInstanceStatus: (json['NotebookInstanceStatus'] as String?)
          ?.let(NotebookInstanceStatus.fromString),
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookInstanceArn = this.notebookInstanceArn;
    final notebookInstanceName = this.notebookInstanceName;
    final additionalCodeRepositories = this.additionalCodeRepositories;
    final creationTime = this.creationTime;
    final defaultCodeRepository = this.defaultCodeRepository;
    final instanceType = this.instanceType;
    final lastModifiedTime = this.lastModifiedTime;
    final notebookInstanceLifecycleConfigName =
        this.notebookInstanceLifecycleConfigName;
    final notebookInstanceStatus = this.notebookInstanceStatus;
    final url = this.url;
    return {
      'NotebookInstanceArn': notebookInstanceArn,
      'NotebookInstanceName': notebookInstanceName,
      if (additionalCodeRepositories != null)
        'AdditionalCodeRepositories': additionalCodeRepositories,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (defaultCodeRepository != null)
        'DefaultCodeRepository': defaultCodeRepository,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (notebookInstanceLifecycleConfigName != null)
        'NotebookInstanceLifecycleConfigName':
            notebookInstanceLifecycleConfigName,
      if (notebookInstanceStatus != null)
        'NotebookInstanceStatus': notebookInstanceStatus.value,
      if (url != null) 'Url': url,
    };
  }
}

enum NotebookOutputOption {
  allowed('Allowed'),
  disabled('Disabled'),
  ;

  final String value;

  const NotebookOutputOption(this.value);

  static NotebookOutputOption fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum NotebookOutputOption'));
}

/// Configures Amazon SNS notifications of available or expiring work items for
/// work teams.
class NotificationConfiguration {
  /// The ARN for the Amazon SNS topic to which notifications should be published.
  final String? notificationTopicArn;

  NotificationConfiguration({
    this.notificationTopicArn,
  });

  factory NotificationConfiguration.fromJson(Map<String, dynamic> json) {
    return NotificationConfiguration(
      notificationTopicArn: json['NotificationTopicArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notificationTopicArn = this.notificationTopicArn;
    return {
      if (notificationTopicArn != null)
        'NotificationTopicArn': notificationTopicArn,
    };
  }
}

enum ObjectiveStatus {
  succeeded('Succeeded'),
  pending('Pending'),
  failed('Failed'),
  ;

  final String value;

  const ObjectiveStatus(this.value);

  static ObjectiveStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ObjectiveStatus'));
}

/// Specifies the number of training jobs that this hyperparameter tuning job
/// launched, categorized by the status of their objective metric. The objective
/// metric status shows whether the final objective metric for the training job
/// has been evaluated by the tuning job and used in the hyperparameter tuning
/// process.
class ObjectiveStatusCounters {
  /// The number of training jobs whose final objective metric was not evaluated
  /// and used in the hyperparameter tuning process. This typically occurs when
  /// the training job failed or did not emit an objective metric.
  final int? failed;

  /// The number of training jobs that are in progress and pending evaluation of
  /// their final objective metric.
  final int? pending;

  /// The number of training jobs whose final objective metric was evaluated by
  /// the hyperparameter tuning job and used in the hyperparameter tuning process.
  final int? succeeded;

  ObjectiveStatusCounters({
    this.failed,
    this.pending,
    this.succeeded,
  });

  factory ObjectiveStatusCounters.fromJson(Map<String, dynamic> json) {
    return ObjectiveStatusCounters(
      failed: json['Failed'] as int?,
      pending: json['Pending'] as int?,
      succeeded: json['Succeeded'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final failed = this.failed;
    final pending = this.pending;
    final succeeded = this.succeeded;
    return {
      if (failed != null) 'Failed': failed,
      if (pending != null) 'Pending': pending,
      if (succeeded != null) 'Succeeded': succeeded,
    };
  }
}

/// The configuration of an <code>OfflineStore</code>.
///
/// Provide an <code>OfflineStoreConfig</code> in a request to
/// <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.
///
/// To encrypt an <code>OfflineStore</code> using at rest data encryption,
/// specify Amazon Web Services Key Management Service (KMS) key ID, or
/// <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.
class OfflineStoreConfig {
  /// The Amazon Simple Storage (Amazon S3) location of <code>OfflineStore</code>.
  final S3StorageConfig s3StorageConfig;

  /// The meta data of the Glue table that is autogenerated when an
  /// <code>OfflineStore</code> is created.
  final DataCatalogConfig? dataCatalogConfig;

  /// Set to <code>True</code> to disable the automatic creation of an Amazon Web
  /// Services Glue table when configuring an <code>OfflineStore</code>. If set to
  /// <code>False</code>, Feature Store will name the <code>OfflineStore</code>
  /// Glue table following <a
  /// href="https://docs.aws.amazon.com/athena/latest/ug/tables-databases-columns-names.html">Athena's
  /// naming recommendations</a>.
  ///
  /// The default value is <code>False</code>.
  final bool? disableGlueTableCreation;

  /// Format for the offline store table. Supported formats are Glue (Default) and
  /// <a href="https://iceberg.apache.org/">Apache Iceberg</a>.
  final TableFormat? tableFormat;

  OfflineStoreConfig({
    required this.s3StorageConfig,
    this.dataCatalogConfig,
    this.disableGlueTableCreation,
    this.tableFormat,
  });

  factory OfflineStoreConfig.fromJson(Map<String, dynamic> json) {
    return OfflineStoreConfig(
      s3StorageConfig: S3StorageConfig.fromJson(
          json['S3StorageConfig'] as Map<String, dynamic>),
      dataCatalogConfig: json['DataCatalogConfig'] != null
          ? DataCatalogConfig.fromJson(
              json['DataCatalogConfig'] as Map<String, dynamic>)
          : null,
      disableGlueTableCreation: json['DisableGlueTableCreation'] as bool?,
      tableFormat:
          (json['TableFormat'] as String?)?.let(TableFormat.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final s3StorageConfig = this.s3StorageConfig;
    final dataCatalogConfig = this.dataCatalogConfig;
    final disableGlueTableCreation = this.disableGlueTableCreation;
    final tableFormat = this.tableFormat;
    return {
      'S3StorageConfig': s3StorageConfig,
      if (dataCatalogConfig != null) 'DataCatalogConfig': dataCatalogConfig,
      if (disableGlueTableCreation != null)
        'DisableGlueTableCreation': disableGlueTableCreation,
      if (tableFormat != null) 'TableFormat': tableFormat.value,
    };
  }
}

/// The status of <code>OfflineStore</code>.
class OfflineStoreStatus {
  /// An <code>OfflineStore</code> status.
  final OfflineStoreStatusValue status;

  /// The justification for why the OfflineStoreStatus is Blocked (if applicable).
  final String? blockedReason;

  OfflineStoreStatus({
    required this.status,
    this.blockedReason,
  });

  factory OfflineStoreStatus.fromJson(Map<String, dynamic> json) {
    return OfflineStoreStatus(
      status: OfflineStoreStatusValue.fromString((json['Status'] as String)),
      blockedReason: json['BlockedReason'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final blockedReason = this.blockedReason;
    return {
      'Status': status.value,
      if (blockedReason != null) 'BlockedReason': blockedReason,
    };
  }
}

enum OfflineStoreStatusValue {
  active('Active'),
  blocked('Blocked'),
  disabled('Disabled'),
  ;

  final String value;

  const OfflineStoreStatusValue(this.value);

  static OfflineStoreStatusValue fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum OfflineStoreStatusValue'));
}

/// Use this parameter to configure your OIDC Identity Provider (IdP).
class OidcConfig {
  /// The OIDC IdP authorization endpoint used to configure your private
  /// workforce.
  final String authorizationEndpoint;

  /// The OIDC IdP client ID used to configure your private workforce.
  final String clientId;

  /// The OIDC IdP client secret used to configure your private workforce.
  final String clientSecret;

  /// The OIDC IdP issuer used to configure your private workforce.
  final String issuer;

  /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private
  /// workforce.
  final String jwksUri;

  /// The OIDC IdP logout endpoint used to configure your private workforce.
  final String logoutEndpoint;

  /// The OIDC IdP token endpoint used to configure your private workforce.
  final String tokenEndpoint;

  /// The OIDC IdP user information endpoint used to configure your private
  /// workforce.
  final String userInfoEndpoint;

  OidcConfig({
    required this.authorizationEndpoint,
    required this.clientId,
    required this.clientSecret,
    required this.issuer,
    required this.jwksUri,
    required this.logoutEndpoint,
    required this.tokenEndpoint,
    required this.userInfoEndpoint,
  });

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final clientSecret = this.clientSecret;
    final issuer = this.issuer;
    final jwksUri = this.jwksUri;
    final logoutEndpoint = this.logoutEndpoint;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      'AuthorizationEndpoint': authorizationEndpoint,
      'ClientId': clientId,
      'ClientSecret': clientSecret,
      'Issuer': issuer,
      'JwksUri': jwksUri,
      'LogoutEndpoint': logoutEndpoint,
      'TokenEndpoint': tokenEndpoint,
      'UserInfoEndpoint': userInfoEndpoint,
    };
  }
}

/// Your OIDC IdP workforce configuration.
class OidcConfigForResponse {
  /// The OIDC IdP authorization endpoint used to configure your private
  /// workforce.
  final String? authorizationEndpoint;

  /// The OIDC IdP client ID used to configure your private workforce.
  final String? clientId;

  /// The OIDC IdP issuer used to configure your private workforce.
  final String? issuer;

  /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private
  /// workforce.
  final String? jwksUri;

  /// The OIDC IdP logout endpoint used to configure your private workforce.
  final String? logoutEndpoint;

  /// The OIDC IdP token endpoint used to configure your private workforce.
  final String? tokenEndpoint;

  /// The OIDC IdP user information endpoint used to configure your private
  /// workforce.
  final String? userInfoEndpoint;

  OidcConfigForResponse({
    this.authorizationEndpoint,
    this.clientId,
    this.issuer,
    this.jwksUri,
    this.logoutEndpoint,
    this.tokenEndpoint,
    this.userInfoEndpoint,
  });

  factory OidcConfigForResponse.fromJson(Map<String, dynamic> json) {
    return OidcConfigForResponse(
      authorizationEndpoint: json['AuthorizationEndpoint'] as String?,
      clientId: json['ClientId'] as String?,
      issuer: json['Issuer'] as String?,
      jwksUri: json['JwksUri'] as String?,
      logoutEndpoint: json['LogoutEndpoint'] as String?,
      tokenEndpoint: json['TokenEndpoint'] as String?,
      userInfoEndpoint: json['UserInfoEndpoint'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final authorizationEndpoint = this.authorizationEndpoint;
    final clientId = this.clientId;
    final issuer = this.issuer;
    final jwksUri = this.jwksUri;
    final logoutEndpoint = this.logoutEndpoint;
    final tokenEndpoint = this.tokenEndpoint;
    final userInfoEndpoint = this.userInfoEndpoint;
    return {
      if (authorizationEndpoint != null)
        'AuthorizationEndpoint': authorizationEndpoint,
      if (clientId != null) 'ClientId': clientId,
      if (issuer != null) 'Issuer': issuer,
      if (jwksUri != null) 'JwksUri': jwksUri,
      if (logoutEndpoint != null) 'LogoutEndpoint': logoutEndpoint,
      if (tokenEndpoint != null) 'TokenEndpoint': tokenEndpoint,
      if (userInfoEndpoint != null) 'UserInfoEndpoint': userInfoEndpoint,
    };
  }
}

/// A list of user groups that exist in your OIDC Identity Provider (IdP). One
/// to ten groups can be used to create a single private work team. When you add
/// a user group to the list of <code>Groups</code>, you can add that user group
/// to one or more private work teams. If you add a user group to a private work
/// team, all workers in that user group are added to the work team.
class OidcMemberDefinition {
  /// A list of comma seperated strings that identifies user groups in your OIDC
  /// IdP. Each user group is made up of a group of private workers.
  final List<String>? groups;

  OidcMemberDefinition({
    this.groups,
  });

  factory OidcMemberDefinition.fromJson(Map<String, dynamic> json) {
    return OidcMemberDefinition(
      groups:
          (json['Groups'] as List?)?.nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final groups = this.groups;
    return {
      if (groups != null) 'Groups': groups,
    };
  }
}

/// Use this to specify the Amazon Web Services Key Management Service (KMS) Key
/// ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn
/// <code>OnlineStore</code> on or off by specifying the
/// <code>EnableOnlineStore</code> flag at General Assembly.
///
/// The default value is <code>False</code>.
class OnlineStoreConfig {
  /// Turn <code>OnlineStore</code> off by specifying <code>False</code> for the
  /// <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by
  /// specifying <code>True</code> for the <code>EnableOnlineStore</code> flag.
  ///
  /// The default value is <code>False</code>.
  final bool? enableOnlineStore;

  /// Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of
  /// your <code>OnlineStore</code>.
  final OnlineStoreSecurityConfig? securityConfig;

  /// Option for different tiers of low latency storage for real-time data
  /// retrieval.
  ///
  /// <ul>
  /// <li>
  /// <code>Standard</code>: A managed low latency data store for feature groups.
  /// </li>
  /// <li>
  /// <code>InMemory</code>: A managed data store for feature groups that supports
  /// very low latency retrieval.
  /// </li>
  /// </ul>
  final StorageType? storageType;

  /// Time to live duration, where the record is hard deleted after the expiration
  /// time is reached; <code>ExpiresAt</code> = <code>EventTime</code> +
  /// <code>TtlDuration</code>. For information on HardDelete, see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a>
  /// API in the Amazon SageMaker API Reference guide.
  final TtlDuration? ttlDuration;

  OnlineStoreConfig({
    this.enableOnlineStore,
    this.securityConfig,
    this.storageType,
    this.ttlDuration,
  });

  factory OnlineStoreConfig.fromJson(Map<String, dynamic> json) {
    return OnlineStoreConfig(
      enableOnlineStore: json['EnableOnlineStore'] as bool?,
      securityConfig: json['SecurityConfig'] != null
          ? OnlineStoreSecurityConfig.fromJson(
              json['SecurityConfig'] as Map<String, dynamic>)
          : null,
      storageType:
          (json['StorageType'] as String?)?.let(StorageType.fromString),
      ttlDuration: json['TtlDuration'] != null
          ? TtlDuration.fromJson(json['TtlDuration'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final enableOnlineStore = this.enableOnlineStore;
    final securityConfig = this.securityConfig;
    final storageType = this.storageType;
    final ttlDuration = this.ttlDuration;
    return {
      if (enableOnlineStore != null) 'EnableOnlineStore': enableOnlineStore,
      if (securityConfig != null) 'SecurityConfig': securityConfig,
      if (storageType != null) 'StorageType': storageType.value,
      if (ttlDuration != null) 'TtlDuration': ttlDuration,
    };
  }
}

/// Updates the feature group online store configuration.
class OnlineStoreConfigUpdate {
  /// Time to live duration, where the record is hard deleted after the expiration
  /// time is reached; <code>ExpiresAt</code> = <code>EventTime</code> +
  /// <code>TtlDuration</code>. For information on HardDelete, see the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a>
  /// API in the Amazon SageMaker API Reference guide.
  final TtlDuration? ttlDuration;

  OnlineStoreConfigUpdate({
    this.ttlDuration,
  });

  Map<String, dynamic> toJson() {
    final ttlDuration = this.ttlDuration;
    return {
      if (ttlDuration != null) 'TtlDuration': ttlDuration,
    };
  }
}

/// The security configuration for <code>OnlineStore</code>.
class OnlineStoreSecurityConfig {
  /// The Amazon Web Services Key Management Service (KMS) key ARN that SageMaker
  /// Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3
  /// server-side encryption.
  ///
  /// The caller (either user or IAM role) of <code>CreateFeatureGroup</code> must
  /// have below permissions to the <code>OnlineStore</code>
  /// <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>"kms:Encrypt"</code>
  /// </li>
  /// <li>
  /// <code>"kms:Decrypt"</code>
  /// </li>
  /// <li>
  /// <code>"kms:DescribeKey"</code>
  /// </li>
  /// <li>
  /// <code>"kms:CreateGrant"</code>
  /// </li>
  /// <li>
  /// <code>"kms:RetireGrant"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ReEncryptFrom"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ReEncryptTo"</code>
  /// </li>
  /// <li>
  /// <code>"kms:GenerateDataKey"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ListAliases"</code>
  /// </li>
  /// <li>
  /// <code>"kms:ListGrants"</code>
  /// </li>
  /// <li>
  /// <code>"kms:RevokeGrant"</code>
  /// </li>
  /// </ul>
  /// The caller (either user or IAM role) to all DataPlane operations
  /// (<code>PutRecord</code>, <code>GetRecord</code>, <code>DeleteRecord</code>)
  /// must have the following permissions to the <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>"kms:Decrypt"</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  OnlineStoreSecurityConfig({
    this.kmsKeyId,
  });

  factory OnlineStoreSecurityConfig.fromJson(Map<String, dynamic> json) {
    return OnlineStoreSecurityConfig(
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final kmsKeyId = this.kmsKeyId;
    return {
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum Operator {
  equals('Equals'),
  notEquals('NotEquals'),
  greaterThan('GreaterThan'),
  greaterThanOrEqualTo('GreaterThanOrEqualTo'),
  lessThan('LessThan'),
  lessThanOrEqualTo('LessThanOrEqualTo'),
  contains('Contains'),
  exists('Exists'),
  notExists('NotExists'),
  $in('In'),
  ;

  final String value;

  const Operator(this.value);

  static Operator fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Operator'));
}

enum OrderKey {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const OrderKey(this.value);

  static OrderKey fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum OrderKey'));
}

enum OutputCompressionType {
  gzip('GZIP'),
  none('NONE'),
  ;

  final String value;

  const OutputCompressionType(this.value);

  static OutputCompressionType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum OutputCompressionType'));
}

/// Contains information about the output location for the compiled model and
/// the target device that the model runs on. <code>TargetDevice</code> and
/// <code>TargetPlatform</code> are mutually exclusive, so you need to choose
/// one between the two to specify your target device or platform. If you cannot
/// find your device you want to use from the <code>TargetDevice</code> list,
/// use <code>TargetPlatform</code> to describe the platform of your edge device
/// and <code>CompilerOptions</code> if there are specific settings that are
/// required or recommended to use for particular TargetPlatform.
class OutputConfig {
  /// Identifies the S3 bucket where you want Amazon SageMaker to store the model
  /// artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.
  final String s3OutputLocation;

  /// Specifies additional parameters for compiler options in JSON format. The
  /// compiler options are <code>TargetPlatform</code> specific. It is required
  /// for NVIDIA accelerators and highly recommended for CPU compilations. For any
  /// other cases, it is optional to specify <code>CompilerOptions.</code>
  ///
  /// <ul>
  /// <li>
  /// <code>DTYPE</code>: Specifies the data type for the input. When compiling
  /// for <code>ml_*</code> (except for <code>ml_inf</code>) instances using
  /// PyTorch framework, provide the data type (dtype) of the model's input.
  /// <code>"float32"</code> is used if <code>"DTYPE"</code> is not specified.
  /// Options for data type are:
  ///
  /// <ul>
  /// <li>
  /// float32: Use either <code>"float"</code> or <code>"float32"</code>.
  /// </li>
  /// <li>
  /// int64: Use either <code>"int64"</code> or <code>"long"</code>.
  /// </li>
  /// </ul>
  /// For example, <code>{"dtype" : "float32"}</code>.
  /// </li>
  /// <li>
  /// <code>CPU</code>: Compilation for CPU supports the following compiler
  /// options.
  ///
  /// <ul>
  /// <li>
  /// <code>mcpu</code>: CPU micro-architecture. For example, <code>{'mcpu':
  /// 'skylake-avx512'}</code>
  /// </li>
  /// <li>
  /// <code>mattr</code>: CPU flags. For example, <code>{'mattr': ['+neon',
  /// '+vfpv4']}</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>ARM</code>: Details of ARM CPU compilations.
  ///
  /// <ul>
  /// <li>
  /// <code>NEON</code>: NEON is an implementation of the Advanced SIMD extension
  /// used in ARMv7 processors.
  ///
  /// For example, add <code>{'mattr': ['+neon']}</code> to the compiler options
  /// if compiling for ARM 32-bit platform with the NEON support.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>NVIDIA</code>: Compilation for NVIDIA GPU supports the following
  /// compiler options.
  ///
  /// <ul>
  /// <li>
  /// <code>gpu_code</code>: Specifies the targeted architecture.
  /// </li>
  /// <li>
  /// <code>trt-ver</code>: Specifies the TensorRT versions in x.y.z. format.
  /// </li>
  /// <li>
  /// <code>cuda-ver</code>: Specifies the CUDA version in x.y format.
  /// </li>
  /// </ul>
  /// For example, <code>{'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver':
  /// '10.1'}</code>
  /// </li>
  /// <li>
  /// <code>ANDROID</code>: Compilation for the Android OS supports the following
  /// compiler options:
  ///
  /// <ul>
  /// <li>
  /// <code>ANDROID_PLATFORM</code>: Specifies the Android API levels. Available
  /// levels range from 21 to 29. For example, <code>{'ANDROID_PLATFORM':
  /// 28}</code>.
  /// </li>
  /// <li>
  /// <code>mattr</code>: Add <code>{'mattr': ['+neon']}</code> to compiler
  /// options if compiling for ARM 32-bit platform with NEON support.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>INFERENTIA</code>: Compilation for target ml_inf1 uses compiler
  /// options passed in as a JSON string. For example, <code>"CompilerOptions":
  /// "\"--verbose 1 --num-neuroncores 2 -O2\""</code>.
  ///
  /// For information about supported compiler options, see <a
  /// href="https://awsdocs-neuron.readthedocs-hosted.com/en/latest/compiler/neuronx-cc/api-reference-guide/neuron-compiler-cli-reference-guide.html">
  /// Neuron Compiler CLI Reference Guide</a>.
  /// </li>
  /// <li>
  /// <code>CoreML</code>: Compilation for the CoreML <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html">OutputConfig</a>
  /// <code>TargetDevice</code> supports the following compiler options:
  ///
  /// <ul>
  /// <li>
  /// <code>class_labels</code>: Specifies the classification labels file name
  /// inside input tar.gz file. For example, <code>{"class_labels":
  /// "imagenet_labels_1000.txt"}</code>. Labels inside the txt file should be
  /// separated by newlines.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>EIA</code>: Compilation for the Elastic Inference Accelerator supports
  /// the following compiler options:
  ///
  /// <ul>
  /// <li>
  /// <code>precision_mode</code>: Specifies the precision of compiled artifacts.
  /// Supported values are <code>"FP16"</code> and <code>"FP32"</code>. Default is
  /// <code>"FP32"</code>.
  /// </li>
  /// <li>
  /// <code>signature_def_key</code>: Specifies the signature to use for models in
  /// SavedModel format. Defaults is TensorFlow's default signature def key.
  /// </li>
  /// <li>
  /// <code>output_names</code>: Specifies a list of output tensor names for
  /// models in FrozenGraph format. Set at most one API field, either:
  /// <code>signature_def_key</code> or <code>output_names</code>.
  /// </li>
  /// </ul>
  /// For example: <code>{"precision_mode": "FP32", "output_names":
  /// ["output:0"]}</code>
  /// </li>
  /// </ul>
  final String? compilerOptions;

  /// The Amazon Web Services Key Management Service key (Amazon Web Services KMS)
  /// that Amazon SageMaker uses to encrypt your output models with Amazon S3
  /// server-side encryption after compilation job. If you don't provide a KMS key
  /// ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's
  /// account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KmsKeyId can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  /// Identifies the target device or the machine learning instance that you want
  /// to run your model on after the compilation has completed. Alternatively, you
  /// can specify OS, architecture, and accelerator using <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TargetPlatform.html">TargetPlatform</a>
  /// fields. It can be used instead of <code>TargetPlatform</code>.
  /// <note>
  /// Currently <code>ml_trn1</code> is available only in US East (N. Virginia)
  /// Region, and <code>ml_inf2</code> is available only in US East (Ohio) Region.
  /// </note>
  final TargetDevice? targetDevice;

  /// Contains information about a target platform that you want your model to run
  /// on, such as OS, architecture, and accelerators. It is an alternative of
  /// <code>TargetDevice</code>.
  ///
  /// The following examples show how to configure the <code>TargetPlatform</code>
  /// and <code>CompilerOptions</code> JSON strings for popular target platforms:
  ///
  /// <ul>
  /// <li>
  /// Raspberry Pi 3 Model B+
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"},</code>
  ///
  /// <code> "CompilerOptions": {'mattr': ['+neon']}</code>
  /// </li>
  /// <li>
  /// Jetson TX2
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator":
  /// "NVIDIA"},</code>
  ///
  /// <code> "CompilerOptions": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1',
  /// 'cuda-ver': '10.0'}</code>
  /// </li>
  /// <li>
  /// EC2 m5.2xlarge instance OS
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator":
  /// "NVIDIA"},</code>
  ///
  /// <code> "CompilerOptions": {'mcpu': 'skylake-avx512'}</code>
  /// </li>
  /// <li>
  /// RK3399
  ///
  /// <code>"TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator":
  /// "MALI"}</code>
  /// </li>
  /// <li>
  /// ARMv7 phone (CPU)
  ///
  /// <code>"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"},</code>
  ///
  /// <code> "CompilerOptions": {'ANDROID_PLATFORM': 25, 'mattr':
  /// ['+neon']}</code>
  /// </li>
  /// <li>
  /// ARMv8 phone (CPU)
  ///
  /// <code>"TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"},</code>
  ///
  /// <code> "CompilerOptions": {'ANDROID_PLATFORM': 29}</code>
  /// </li>
  /// </ul>
  final TargetPlatform? targetPlatform;

  OutputConfig({
    required this.s3OutputLocation,
    this.compilerOptions,
    this.kmsKeyId,
    this.targetDevice,
    this.targetPlatform,
  });

  factory OutputConfig.fromJson(Map<String, dynamic> json) {
    return OutputConfig(
      s3OutputLocation: json['S3OutputLocation'] as String,
      compilerOptions: json['CompilerOptions'] as String?,
      kmsKeyId: json['KmsKeyId'] as String?,
      targetDevice:
          (json['TargetDevice'] as String?)?.let(TargetDevice.fromString),
      targetPlatform: json['TargetPlatform'] != null
          ? TargetPlatform.fromJson(
              json['TargetPlatform'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputLocation = this.s3OutputLocation;
    final compilerOptions = this.compilerOptions;
    final kmsKeyId = this.kmsKeyId;
    final targetDevice = this.targetDevice;
    final targetPlatform = this.targetPlatform;
    return {
      'S3OutputLocation': s3OutputLocation,
      if (compilerOptions != null) 'CompilerOptions': compilerOptions,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (targetDevice != null) 'TargetDevice': targetDevice.value,
      if (targetPlatform != null) 'TargetPlatform': targetPlatform,
    };
  }
}

/// Provides information about how to store model training results (model
/// artifacts).
class OutputDataConfig {
  /// Identifies the S3 path where you want SageMaker to store the model
  /// artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.
  final String s3OutputPath;

  /// The model output compression type. Select <code>None</code> to output an
  /// uncompressed model, recommended for large model outputs. Defaults to gzip.
  final OutputCompressionType? compressionType;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that SageMaker uses to encrypt the model artifacts at rest using Amazon S3
  /// server-side encryption. The <code>KmsKeyId</code> can be any of the
  /// following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // KMS Key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key Alias
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
  /// </li>
  /// </ul>
  /// If you use a KMS key ID or an alias of your KMS key, the SageMaker execution
  /// role must include permissions to call <code>kms:Encrypt</code>. If you don't
  /// provide a KMS key ID, SageMaker uses the default KMS key for Amazon S3 for
  /// your role's account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide</i>. If the output data is stored in Amazon S3 Express One Zone, it is
  /// encrypted with server-side encryption with Amazon S3 managed keys (SSE-S3).
  /// KMS key is not supported for Amazon S3 Express One Zone
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify in
  /// your <code>CreateTrainingJob</code>, <code>CreateTransformJob</code>, or
  /// <code>CreateHyperParameterTuningJob</code> requests. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  final String? kmsKeyId;

  OutputDataConfig({
    required this.s3OutputPath,
    this.compressionType,
    this.kmsKeyId,
  });

  factory OutputDataConfig.fromJson(Map<String, dynamic> json) {
    return OutputDataConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      compressionType: (json['CompressionType'] as String?)
          ?.let(OutputCompressionType.fromString),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final compressionType = this.compressionType;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (compressionType != null) 'CompressionType': compressionType.value,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// An output parameter of a pipeline step.
class OutputParameter {
  /// The name of the output parameter.
  final String name;

  /// The value of the output parameter.
  final String value;

  OutputParameter({
    required this.name,
    required this.value,
  });

  factory OutputParameter.fromJson(Map<String, dynamic> json) {
    return OutputParameter(
      name: json['Name'] as String,
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      'Name': name,
      'Value': value,
    };
  }
}

/// The collection of ownership settings for a space.
class OwnershipSettings {
  /// The user profile who is the owner of the space.
  final String ownerUserProfileName;

  OwnershipSettings({
    required this.ownerUserProfileName,
  });

  factory OwnershipSettings.fromJson(Map<String, dynamic> json) {
    return OwnershipSettings(
      ownerUserProfileName: json['OwnerUserProfileName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final ownerUserProfileName = this.ownerUserProfileName;
    return {
      'OwnerUserProfileName': ownerUserProfileName,
    };
  }
}

/// Specifies summary information about the ownership settings.
class OwnershipSettingsSummary {
  /// The user profile who is the owner of the space.
  final String? ownerUserProfileName;

  OwnershipSettingsSummary({
    this.ownerUserProfileName,
  });

  factory OwnershipSettingsSummary.fromJson(Map<String, dynamic> json) {
    return OwnershipSettingsSummary(
      ownerUserProfileName: json['OwnerUserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final ownerUserProfileName = this.ownerUserProfileName;
    return {
      if (ownerUserProfileName != null)
        'OwnerUserProfileName': ownerUserProfileName,
    };
  }
}

/// Configuration that controls the parallelism of the pipeline. By default, the
/// parallelism configuration specified applies to all executions of the
/// pipeline unless overridden.
class ParallelismConfiguration {
  /// The max number of steps that can be executed in parallel.
  final int maxParallelExecutionSteps;

  ParallelismConfiguration({
    required this.maxParallelExecutionSteps,
  });

  factory ParallelismConfiguration.fromJson(Map<String, dynamic> json) {
    return ParallelismConfiguration(
      maxParallelExecutionSteps: json['MaxParallelExecutionSteps'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxParallelExecutionSteps = this.maxParallelExecutionSteps;
    return {
      'MaxParallelExecutionSteps': maxParallelExecutionSteps,
    };
  }
}

/// Assigns a value to a named Pipeline parameter.
class Parameter {
  /// The name of the parameter to assign a value to. This parameter name must
  /// match a named parameter in the pipeline definition.
  final String name;

  /// The literal value for the parameter.
  final String value;

  Parameter({
    required this.name,
    required this.value,
  });

  factory Parameter.fromJson(Map<String, dynamic> json) {
    return Parameter(
      name: json['Name'] as String,
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      'Name': name,
      'Value': value,
    };
  }
}

/// Defines the possible values for categorical, continuous, and integer
/// hyperparameters to be used by an algorithm.
class ParameterRange {
  /// A <code>CategoricalParameterRangeSpecification</code> object that defines
  /// the possible values for a categorical hyperparameter.
  final CategoricalParameterRangeSpecification?
      categoricalParameterRangeSpecification;

  /// A <code>ContinuousParameterRangeSpecification</code> object that defines the
  /// possible values for a continuous hyperparameter.
  final ContinuousParameterRangeSpecification?
      continuousParameterRangeSpecification;

  /// A <code>IntegerParameterRangeSpecification</code> object that defines the
  /// possible values for an integer hyperparameter.
  final IntegerParameterRangeSpecification? integerParameterRangeSpecification;

  ParameterRange({
    this.categoricalParameterRangeSpecification,
    this.continuousParameterRangeSpecification,
    this.integerParameterRangeSpecification,
  });

  factory ParameterRange.fromJson(Map<String, dynamic> json) {
    return ParameterRange(
      categoricalParameterRangeSpecification:
          json['CategoricalParameterRangeSpecification'] != null
              ? CategoricalParameterRangeSpecification.fromJson(
                  json['CategoricalParameterRangeSpecification']
                      as Map<String, dynamic>)
              : null,
      continuousParameterRangeSpecification:
          json['ContinuousParameterRangeSpecification'] != null
              ? ContinuousParameterRangeSpecification.fromJson(
                  json['ContinuousParameterRangeSpecification']
                      as Map<String, dynamic>)
              : null,
      integerParameterRangeSpecification:
          json['IntegerParameterRangeSpecification'] != null
              ? IntegerParameterRangeSpecification.fromJson(
                  json['IntegerParameterRangeSpecification']
                      as Map<String, dynamic>)
              : null,
    );
  }

  Map<String, dynamic> toJson() {
    final categoricalParameterRangeSpecification =
        this.categoricalParameterRangeSpecification;
    final continuousParameterRangeSpecification =
        this.continuousParameterRangeSpecification;
    final integerParameterRangeSpecification =
        this.integerParameterRangeSpecification;
    return {
      if (categoricalParameterRangeSpecification != null)
        'CategoricalParameterRangeSpecification':
            categoricalParameterRangeSpecification,
      if (continuousParameterRangeSpecification != null)
        'ContinuousParameterRangeSpecification':
            continuousParameterRangeSpecification,
      if (integerParameterRangeSpecification != null)
        'IntegerParameterRangeSpecification':
            integerParameterRangeSpecification,
    };
  }
}

/// Specifies ranges of integer, continuous, and categorical hyperparameters
/// that a hyperparameter tuning job searches. The hyperparameter tuning job
/// launches training jobs with hyperparameter values within these ranges to
/// find the combination of values that result in the training job with the best
/// performance as measured by the objective metric of the hyperparameter tuning
/// job.
/// <note>
/// The maximum number of items specified for <code>Array Members</code> refers
/// to the maximum number of hyperparameters for each range and also the maximum
/// for the hyperparameter tuning job itself. That is, the sum of the number of
/// hyperparameters for all the ranges can't exceed the maximum number
/// specified.
/// </note>
class ParameterRanges {
  /// A list containing hyperparameter names and example values to be used by
  /// Autotune to determine optimal ranges for your tuning job.
  final List<AutoParameter>? autoParameters;

  /// The array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CategoricalParameterRange.html">CategoricalParameterRange</a>
  /// objects that specify ranges of categorical hyperparameters that a
  /// hyperparameter tuning job searches.
  final List<CategoricalParameterRange>? categoricalParameterRanges;

  /// The array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContinuousParameterRange.html">ContinuousParameterRange</a>
  /// objects that specify ranges of continuous hyperparameters that a
  /// hyperparameter tuning job searches.
  final List<ContinuousParameterRange>? continuousParameterRanges;

  /// The array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_IntegerParameterRange.html">IntegerParameterRange</a>
  /// objects that specify ranges of integer hyperparameters that a hyperparameter
  /// tuning job searches.
  final List<IntegerParameterRange>? integerParameterRanges;

  ParameterRanges({
    this.autoParameters,
    this.categoricalParameterRanges,
    this.continuousParameterRanges,
    this.integerParameterRanges,
  });

  factory ParameterRanges.fromJson(Map<String, dynamic> json) {
    return ParameterRanges(
      autoParameters: (json['AutoParameters'] as List?)
          ?.nonNulls
          .map((e) => AutoParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
      categoricalParameterRanges: (json['CategoricalParameterRanges'] as List?)
          ?.nonNulls
          .map((e) =>
              CategoricalParameterRange.fromJson(e as Map<String, dynamic>))
          .toList(),
      continuousParameterRanges: (json['ContinuousParameterRanges'] as List?)
          ?.nonNulls
          .map((e) =>
              ContinuousParameterRange.fromJson(e as Map<String, dynamic>))
          .toList(),
      integerParameterRanges: (json['IntegerParameterRanges'] as List?)
          ?.nonNulls
          .map((e) => IntegerParameterRange.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final autoParameters = this.autoParameters;
    final categoricalParameterRanges = this.categoricalParameterRanges;
    final continuousParameterRanges = this.continuousParameterRanges;
    final integerParameterRanges = this.integerParameterRanges;
    return {
      if (autoParameters != null) 'AutoParameters': autoParameters,
      if (categoricalParameterRanges != null)
        'CategoricalParameterRanges': categoricalParameterRanges,
      if (continuousParameterRanges != null)
        'ContinuousParameterRanges': continuousParameterRanges,
      if (integerParameterRanges != null)
        'IntegerParameterRanges': integerParameterRanges,
    };
  }
}

enum ParameterType {
  integer('Integer'),
  continuous('Continuous'),
  categorical('Categorical'),
  freeText('FreeText'),
  ;

  final String value;

  const ParameterType(this.value);

  static ParameterType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ParameterType'));
}

/// The trial that a trial component is associated with and the experiment the
/// trial is part of. A component might not be associated with a trial. A
/// component can be associated with multiple trials.
class Parent {
  /// The name of the experiment.
  final String? experimentName;

  /// The name of the trial.
  final String? trialName;

  Parent({
    this.experimentName,
    this.trialName,
  });

  factory Parent.fromJson(Map<String, dynamic> json) {
    return Parent(
      experimentName: json['ExperimentName'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentName = this.experimentName;
    final trialName = this.trialName;
    return {
      if (experimentName != null) 'ExperimentName': experimentName,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

/// A previously completed or stopped hyperparameter tuning job to be used as a
/// starting point for a new hyperparameter tuning job.
class ParentHyperParameterTuningJob {
  /// The name of the hyperparameter tuning job to be used as a starting point for
  /// a new hyperparameter tuning job.
  final String? hyperParameterTuningJobName;

  ParentHyperParameterTuningJob({
    this.hyperParameterTuningJobName,
  });

  factory ParentHyperParameterTuningJob.fromJson(Map<String, dynamic> json) {
    return ParentHyperParameterTuningJob(
      hyperParameterTuningJobName:
          json['HyperParameterTuningJobName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final hyperParameterTuningJobName = this.hyperParameterTuningJobName;
    return {
      if (hyperParameterTuningJobName != null)
        'HyperParameterTuningJobName': hyperParameterTuningJobName,
    };
  }
}

/// The summary of an in-progress deployment when an endpoint is creating or
/// updating with a new endpoint configuration.
class PendingDeploymentSummary {
  /// The name of the endpoint configuration used in the deployment.
  final String endpointConfigName;

  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_PendingProductionVariantSummary.html">PendingProductionVariantSummary</a>
  /// objects, one for each model hosted behind this endpoint for the in-progress
  /// deployment.
  final List<PendingProductionVariantSummary>? productionVariants;

  /// An array of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_PendingProductionVariantSummary.html">PendingProductionVariantSummary</a>
  /// objects, one for each model hosted behind this endpoint in shadow mode with
  /// production traffic replicated from the model specified on
  /// <code>ProductionVariants</code> for the in-progress deployment.
  final List<PendingProductionVariantSummary>? shadowProductionVariants;

  /// The start time of the deployment.
  final DateTime? startTime;

  PendingDeploymentSummary({
    required this.endpointConfigName,
    this.productionVariants,
    this.shadowProductionVariants,
    this.startTime,
  });

  factory PendingDeploymentSummary.fromJson(Map<String, dynamic> json) {
    return PendingDeploymentSummary(
      endpointConfigName: json['EndpointConfigName'] as String,
      productionVariants: (json['ProductionVariants'] as List?)
          ?.nonNulls
          .map((e) => PendingProductionVariantSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      shadowProductionVariants: (json['ShadowProductionVariants'] as List?)
          ?.nonNulls
          .map((e) => PendingProductionVariantSummary.fromJson(
              e as Map<String, dynamic>))
          .toList(),
      startTime: timeStampFromJson(json['StartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final endpointConfigName = this.endpointConfigName;
    final productionVariants = this.productionVariants;
    final shadowProductionVariants = this.shadowProductionVariants;
    final startTime = this.startTime;
    return {
      'EndpointConfigName': endpointConfigName,
      if (productionVariants != null) 'ProductionVariants': productionVariants,
      if (shadowProductionVariants != null)
        'ShadowProductionVariants': shadowProductionVariants,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
    };
  }
}

/// The production variant summary for a deployment when an endpoint is creating
/// or updating with the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>
/// or <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpoint</a>
/// operations. Describes the <code>VariantStatus </code>, weight and capacity
/// for a production variant associated with an endpoint.
class PendingProductionVariantSummary {
  /// The name of the variant.
  final String variantName;

  /// The size of the Elastic Inference (EI) instance to use for the production
  /// variant. EI instances provide on-demand GPU computing for inference. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
  /// Inference in Amazon SageMaker</a>.
  final ProductionVariantAcceleratorType? acceleratorType;

  /// The number of instances associated with the variant.
  final int? currentInstanceCount;

  /// The serverless configuration for the endpoint.
  final ProductionVariantServerlessConfig? currentServerlessConfig;

  /// The weight associated with the variant.
  final double? currentWeight;

  /// An array of <code>DeployedImage</code> objects that specify the Amazon EC2
  /// Container Registry paths of the inference images deployed on instances of
  /// this <code>ProductionVariant</code>.
  final List<DeployedImage>? deployedImages;

  /// The number of instances requested in this deployment, as specified in the
  /// endpoint configuration for the endpoint. The value is taken from the request
  /// to the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>
  /// operation.
  final int? desiredInstanceCount;

  /// The serverless configuration requested for this deployment, as specified in
  /// the endpoint configuration for the endpoint.
  final ProductionVariantServerlessConfig? desiredServerlessConfig;

  /// The requested weight for the variant in this deployment, as specified in the
  /// endpoint configuration for the endpoint. The value is taken from the request
  /// to the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>
  /// operation.
  final double? desiredWeight;

  /// The type of instances associated with the variant.
  final ProductionVariantInstanceType? instanceType;

  /// Settings that control the range in the number of instances that the endpoint
  /// provisions as it scales up or down to accommodate traffic.
  final ProductionVariantManagedInstanceScaling? managedInstanceScaling;

  /// Settings that control how the endpoint routes incoming traffic to the
  /// instances that the endpoint hosts.
  final ProductionVariantRoutingConfig? routingConfig;

  /// The endpoint variant status which describes the current deployment stage
  /// status or operational status.
  final List<ProductionVariantStatus>? variantStatus;

  PendingProductionVariantSummary({
    required this.variantName,
    this.acceleratorType,
    this.currentInstanceCount,
    this.currentServerlessConfig,
    this.currentWeight,
    this.deployedImages,
    this.desiredInstanceCount,
    this.desiredServerlessConfig,
    this.desiredWeight,
    this.instanceType,
    this.managedInstanceScaling,
    this.routingConfig,
    this.variantStatus,
  });

  factory PendingProductionVariantSummary.fromJson(Map<String, dynamic> json) {
    return PendingProductionVariantSummary(
      variantName: json['VariantName'] as String,
      acceleratorType: (json['AcceleratorType'] as String?)
          ?.let(ProductionVariantAcceleratorType.fromString),
      currentInstanceCount: json['CurrentInstanceCount'] as int?,
      currentServerlessConfig: json['CurrentServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['CurrentServerlessConfig'] as Map<String, dynamic>)
          : null,
      currentWeight: json['CurrentWeight'] as double?,
      deployedImages: (json['DeployedImages'] as List?)
          ?.nonNulls
          .map((e) => DeployedImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      desiredInstanceCount: json['DesiredInstanceCount'] as int?,
      desiredServerlessConfig: json['DesiredServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['DesiredServerlessConfig'] as Map<String, dynamic>)
          : null,
      desiredWeight: json['DesiredWeight'] as double?,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ProductionVariantInstanceType.fromString),
      managedInstanceScaling: json['ManagedInstanceScaling'] != null
          ? ProductionVariantManagedInstanceScaling.fromJson(
              json['ManagedInstanceScaling'] as Map<String, dynamic>)
          : null,
      routingConfig: json['RoutingConfig'] != null
          ? ProductionVariantRoutingConfig.fromJson(
              json['RoutingConfig'] as Map<String, dynamic>)
          : null,
      variantStatus: (json['VariantStatus'] as List?)
          ?.nonNulls
          .map((e) =>
              ProductionVariantStatus.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final variantName = this.variantName;
    final acceleratorType = this.acceleratorType;
    final currentInstanceCount = this.currentInstanceCount;
    final currentServerlessConfig = this.currentServerlessConfig;
    final currentWeight = this.currentWeight;
    final deployedImages = this.deployedImages;
    final desiredInstanceCount = this.desiredInstanceCount;
    final desiredServerlessConfig = this.desiredServerlessConfig;
    final desiredWeight = this.desiredWeight;
    final instanceType = this.instanceType;
    final managedInstanceScaling = this.managedInstanceScaling;
    final routingConfig = this.routingConfig;
    final variantStatus = this.variantStatus;
    return {
      'VariantName': variantName,
      if (acceleratorType != null) 'AcceleratorType': acceleratorType.value,
      if (currentInstanceCount != null)
        'CurrentInstanceCount': currentInstanceCount,
      if (currentServerlessConfig != null)
        'CurrentServerlessConfig': currentServerlessConfig,
      if (currentWeight != null) 'CurrentWeight': currentWeight,
      if (deployedImages != null) 'DeployedImages': deployedImages,
      if (desiredInstanceCount != null)
        'DesiredInstanceCount': desiredInstanceCount,
      if (desiredServerlessConfig != null)
        'DesiredServerlessConfig': desiredServerlessConfig,
      if (desiredWeight != null) 'DesiredWeight': desiredWeight,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (managedInstanceScaling != null)
        'ManagedInstanceScaling': managedInstanceScaling,
      if (routingConfig != null) 'RoutingConfig': routingConfig,
      if (variantStatus != null) 'VariantStatus': variantStatus,
    };
  }
}

/// Defines the traffic pattern.
class Phase {
  /// Specifies how long a traffic phase should be. For custom load tests, the
  /// value should be between 120 and 3600. This value should not exceed
  /// <code>JobDurationInSeconds</code>.
  final int? durationInSeconds;

  /// Specifies how many concurrent users to start with. The value should be
  /// between 1 and 3.
  final int? initialNumberOfUsers;

  /// Specified how many new users to spawn in a minute.
  final int? spawnRate;

  Phase({
    this.durationInSeconds,
    this.initialNumberOfUsers,
    this.spawnRate,
  });

  factory Phase.fromJson(Map<String, dynamic> json) {
    return Phase(
      durationInSeconds: json['DurationInSeconds'] as int?,
      initialNumberOfUsers: json['InitialNumberOfUsers'] as int?,
      spawnRate: json['SpawnRate'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final durationInSeconds = this.durationInSeconds;
    final initialNumberOfUsers = this.initialNumberOfUsers;
    final spawnRate = this.spawnRate;
    return {
      if (durationInSeconds != null) 'DurationInSeconds': durationInSeconds,
      if (initialNumberOfUsers != null)
        'InitialNumberOfUsers': initialNumberOfUsers,
      if (spawnRate != null) 'SpawnRate': spawnRate,
    };
  }
}

/// A SageMaker Model Building Pipeline instance.
class Pipeline {
  final UserContext? createdBy;

  /// The creation time of the pipeline.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// The time that the pipeline was last modified.
  final DateTime? lastModifiedTime;

  /// The time when the pipeline was last run.
  final DateTime? lastRunTime;

  /// The parallelism configuration applied to the pipeline.
  final ParallelismConfiguration? parallelismConfiguration;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The description of the pipeline.
  final String? pipelineDescription;

  /// The display name of the pipeline.
  final String? pipelineDisplayName;

  /// The name of the pipeline.
  final String? pipelineName;

  /// The status of the pipeline.
  final PipelineStatus? pipelineStatus;

  /// The Amazon Resource Name (ARN) of the role that created the pipeline.
  final String? roleArn;

  /// A list of tags that apply to the pipeline.
  final List<Tag>? tags;

  Pipeline({
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lastRunTime,
    this.parallelismConfiguration,
    this.pipelineArn,
    this.pipelineDescription,
    this.pipelineDisplayName,
    this.pipelineName,
    this.pipelineStatus,
    this.roleArn,
    this.tags,
  });

  factory Pipeline.fromJson(Map<String, dynamic> json) {
    return Pipeline(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lastRunTime: timeStampFromJson(json['LastRunTime']),
      parallelismConfiguration: json['ParallelismConfiguration'] != null
          ? ParallelismConfiguration.fromJson(
              json['ParallelismConfiguration'] as Map<String, dynamic>)
          : null,
      pipelineArn: json['PipelineArn'] as String?,
      pipelineDescription: json['PipelineDescription'] as String?,
      pipelineDisplayName: json['PipelineDisplayName'] as String?,
      pipelineName: json['PipelineName'] as String?,
      pipelineStatus:
          (json['PipelineStatus'] as String?)?.let(PipelineStatus.fromString),
      roleArn: json['RoleArn'] as String?,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lastRunTime = this.lastRunTime;
    final parallelismConfiguration = this.parallelismConfiguration;
    final pipelineArn = this.pipelineArn;
    final pipelineDescription = this.pipelineDescription;
    final pipelineDisplayName = this.pipelineDisplayName;
    final pipelineName = this.pipelineName;
    final pipelineStatus = this.pipelineStatus;
    final roleArn = this.roleArn;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lastRunTime != null) 'LastRunTime': unixTimestampToJson(lastRunTime),
      if (parallelismConfiguration != null)
        'ParallelismConfiguration': parallelismConfiguration,
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineDescription != null)
        'PipelineDescription': pipelineDescription,
      if (pipelineDisplayName != null)
        'PipelineDisplayName': pipelineDisplayName,
      if (pipelineName != null) 'PipelineName': pipelineName,
      if (pipelineStatus != null) 'PipelineStatus': pipelineStatus.value,
      if (roleArn != null) 'RoleArn': roleArn,
      if (tags != null) 'Tags': tags,
    };
  }
}

/// The location of the pipeline definition stored in Amazon S3.
class PipelineDefinitionS3Location {
  /// Name of the S3 bucket.
  final String bucket;

  /// The object key (or key name) uniquely identifies the object in an S3 bucket.
  final String objectKey;

  /// Version Id of the pipeline definition file. If not specified, Amazon
  /// SageMaker will retrieve the latest version.
  final String? versionId;

  PipelineDefinitionS3Location({
    required this.bucket,
    required this.objectKey,
    this.versionId,
  });

  Map<String, dynamic> toJson() {
    final bucket = this.bucket;
    final objectKey = this.objectKey;
    final versionId = this.versionId;
    return {
      'Bucket': bucket,
      'ObjectKey': objectKey,
      if (versionId != null) 'VersionId': versionId,
    };
  }
}

/// An execution of a pipeline.
class PipelineExecution {
  final UserContext? createdBy;

  /// The creation time of the pipeline execution.
  final DateTime? creationTime;

  /// If the execution failed, a message describing why.
  final String? failureReason;
  final UserContext? lastModifiedBy;

  /// The time that the pipeline execution was last modified.
  final DateTime? lastModifiedTime;

  /// The parallelism configuration applied to the pipeline execution.
  final ParallelismConfiguration? parallelismConfiguration;

  /// The Amazon Resource Name (ARN) of the pipeline that was executed.
  final String? pipelineArn;

  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  /// The description of the pipeline execution.
  final String? pipelineExecutionDescription;

  /// The display name of the pipeline execution.
  final String? pipelineExecutionDisplayName;

  /// The status of the pipeline status.
  final PipelineExecutionStatus? pipelineExecutionStatus;
  final PipelineExperimentConfig? pipelineExperimentConfig;

  /// Contains a list of pipeline parameters. This list can be empty.
  final List<Parameter>? pipelineParameters;

  /// The selective execution configuration applied to the pipeline run.
  final SelectiveExecutionConfig? selectiveExecutionConfig;

  PipelineExecution({
    this.createdBy,
    this.creationTime,
    this.failureReason,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.parallelismConfiguration,
    this.pipelineArn,
    this.pipelineExecutionArn,
    this.pipelineExecutionDescription,
    this.pipelineExecutionDisplayName,
    this.pipelineExecutionStatus,
    this.pipelineExperimentConfig,
    this.pipelineParameters,
    this.selectiveExecutionConfig,
  });

  factory PipelineExecution.fromJson(Map<String, dynamic> json) {
    return PipelineExecution(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      failureReason: json['FailureReason'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      parallelismConfiguration: json['ParallelismConfiguration'] != null
          ? ParallelismConfiguration.fromJson(
              json['ParallelismConfiguration'] as Map<String, dynamic>)
          : null,
      pipelineArn: json['PipelineArn'] as String?,
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
      pipelineExecutionDescription:
          json['PipelineExecutionDescription'] as String?,
      pipelineExecutionDisplayName:
          json['PipelineExecutionDisplayName'] as String?,
      pipelineExecutionStatus: (json['PipelineExecutionStatus'] as String?)
          ?.let(PipelineExecutionStatus.fromString),
      pipelineExperimentConfig: json['PipelineExperimentConfig'] != null
          ? PipelineExperimentConfig.fromJson(
              json['PipelineExperimentConfig'] as Map<String, dynamic>)
          : null,
      pipelineParameters: (json['PipelineParameters'] as List?)
          ?.nonNulls
          .map((e) => Parameter.fromJson(e as Map<String, dynamic>))
          .toList(),
      selectiveExecutionConfig: json['SelectiveExecutionConfig'] != null
          ? SelectiveExecutionConfig.fromJson(
              json['SelectiveExecutionConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final failureReason = this.failureReason;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final parallelismConfiguration = this.parallelismConfiguration;
    final pipelineArn = this.pipelineArn;
    final pipelineExecutionArn = this.pipelineExecutionArn;
    final pipelineExecutionDescription = this.pipelineExecutionDescription;
    final pipelineExecutionDisplayName = this.pipelineExecutionDisplayName;
    final pipelineExecutionStatus = this.pipelineExecutionStatus;
    final pipelineExperimentConfig = this.pipelineExperimentConfig;
    final pipelineParameters = this.pipelineParameters;
    final selectiveExecutionConfig = this.selectiveExecutionConfig;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (parallelismConfiguration != null)
        'ParallelismConfiguration': parallelismConfiguration,
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
      if (pipelineExecutionDescription != null)
        'PipelineExecutionDescription': pipelineExecutionDescription,
      if (pipelineExecutionDisplayName != null)
        'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      if (pipelineExecutionStatus != null)
        'PipelineExecutionStatus': pipelineExecutionStatus.value,
      if (pipelineExperimentConfig != null)
        'PipelineExperimentConfig': pipelineExperimentConfig,
      if (pipelineParameters != null) 'PipelineParameters': pipelineParameters,
      if (selectiveExecutionConfig != null)
        'SelectiveExecutionConfig': selectiveExecutionConfig,
    };
  }
}

enum PipelineExecutionStatus {
  executing('Executing'),
  stopping('Stopping'),
  stopped('Stopped'),
  failed('Failed'),
  succeeded('Succeeded'),
  ;

  final String value;

  const PipelineExecutionStatus(this.value);

  static PipelineExecutionStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum PipelineExecutionStatus'));
}

/// An execution of a step in a pipeline.
class PipelineExecutionStep {
  /// The current attempt of the execution step. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html">Retry
  /// Policy for SageMaker Pipelines steps</a>.
  final int? attemptCount;

  /// If this pipeline execution step was cached, details on the cache hit.
  final CacheHitResult? cacheHitResult;

  /// The time that the step stopped executing.
  final DateTime? endTime;

  /// The reason why the step failed execution. This is only returned if the step
  /// failed its execution.
  final String? failureReason;

  /// Metadata to run the pipeline step.
  final PipelineExecutionStepMetadata? metadata;

  /// The ARN from an execution of the current pipeline from which results are
  /// reused for this step.
  final SelectiveExecutionResult? selectiveExecutionResult;

  /// The time that the step started executing.
  final DateTime? startTime;

  /// The description of the step.
  final String? stepDescription;

  /// The display name of the step.
  final String? stepDisplayName;

  /// The name of the step that is executed.
  final String? stepName;

  /// The status of the step execution.
  final StepStatus? stepStatus;

  PipelineExecutionStep({
    this.attemptCount,
    this.cacheHitResult,
    this.endTime,
    this.failureReason,
    this.metadata,
    this.selectiveExecutionResult,
    this.startTime,
    this.stepDescription,
    this.stepDisplayName,
    this.stepName,
    this.stepStatus,
  });

  factory PipelineExecutionStep.fromJson(Map<String, dynamic> json) {
    return PipelineExecutionStep(
      attemptCount: json['AttemptCount'] as int?,
      cacheHitResult: json['CacheHitResult'] != null
          ? CacheHitResult.fromJson(
              json['CacheHitResult'] as Map<String, dynamic>)
          : null,
      endTime: timeStampFromJson(json['EndTime']),
      failureReason: json['FailureReason'] as String?,
      metadata: json['Metadata'] != null
          ? PipelineExecutionStepMetadata.fromJson(
              json['Metadata'] as Map<String, dynamic>)
          : null,
      selectiveExecutionResult: json['SelectiveExecutionResult'] != null
          ? SelectiveExecutionResult.fromJson(
              json['SelectiveExecutionResult'] as Map<String, dynamic>)
          : null,
      startTime: timeStampFromJson(json['StartTime']),
      stepDescription: json['StepDescription'] as String?,
      stepDisplayName: json['StepDisplayName'] as String?,
      stepName: json['StepName'] as String?,
      stepStatus: (json['StepStatus'] as String?)?.let(StepStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final attemptCount = this.attemptCount;
    final cacheHitResult = this.cacheHitResult;
    final endTime = this.endTime;
    final failureReason = this.failureReason;
    final metadata = this.metadata;
    final selectiveExecutionResult = this.selectiveExecutionResult;
    final startTime = this.startTime;
    final stepDescription = this.stepDescription;
    final stepDisplayName = this.stepDisplayName;
    final stepName = this.stepName;
    final stepStatus = this.stepStatus;
    return {
      if (attemptCount != null) 'AttemptCount': attemptCount,
      if (cacheHitResult != null) 'CacheHitResult': cacheHitResult,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (failureReason != null) 'FailureReason': failureReason,
      if (metadata != null) 'Metadata': metadata,
      if (selectiveExecutionResult != null)
        'SelectiveExecutionResult': selectiveExecutionResult,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (stepDescription != null) 'StepDescription': stepDescription,
      if (stepDisplayName != null) 'StepDisplayName': stepDisplayName,
      if (stepName != null) 'StepName': stepName,
      if (stepStatus != null) 'StepStatus': stepStatus.value,
    };
  }
}

/// Metadata for a step execution.
class PipelineExecutionStepMetadata {
  /// The Amazon Resource Name (ARN) of the AutoML job that was run by this step.
  final AutoMLJobStepMetadata? autoMLJob;

  /// The URL of the Amazon SQS queue used by this step execution, the pipeline
  /// generated token, and a list of output parameters.
  final CallbackStepMetadata? callback;

  /// Container for the metadata for a Clarify check step. The configurations and
  /// outcomes of the check step execution. This includes:
  ///
  /// <ul>
  /// <li>
  /// The type of the check conducted,
  /// </li>
  /// <li>
  /// The Amazon S3 URIs of baseline constraints and statistics files to be used
  /// for the drift check.
  /// </li>
  /// <li>
  /// The Amazon S3 URIs of newly calculated baseline constraints and statistics.
  /// </li>
  /// <li>
  /// The model package group name provided.
  /// </li>
  /// <li>
  /// The Amazon S3 URI of the violation report if violations detected.
  /// </li>
  /// <li>
  /// The Amazon Resource Name (ARN) of check processing job initiated by the step
  /// execution.
  /// </li>
  /// <li>
  /// The boolean flags indicating if the drift check is skipped.
  /// </li>
  /// <li>
  /// If step property <code>BaselineUsedForDriftCheck</code> is set the same as
  /// <code>CalculatedBaseline</code>.
  /// </li>
  /// </ul>
  final ClarifyCheckStepMetadata? clarifyCheck;

  /// The outcome of the condition evaluation that was run by this step execution.
  final ConditionStepMetadata? condition;

  /// The configurations and outcomes of an Amazon EMR step execution.
  final EMRStepMetadata? emr;

  /// The configurations and outcomes of a Fail step execution.
  final FailStepMetadata? fail;

  /// The Amazon Resource Name (ARN) of the Lambda function that was run by this
  /// step execution and a list of output parameters.
  final LambdaStepMetadata? lambda;

  /// The Amazon Resource Name (ARN) of the model that was created by this step
  /// execution.
  final ModelStepMetadata? model;

  /// The Amazon Resource Name (ARN) of the processing job that was run by this
  /// step execution.
  final ProcessingJobStepMetadata? processingJob;

  /// The configurations and outcomes of the check step execution. This includes:
  ///
  /// <ul>
  /// <li>
  /// The type of the check conducted.
  /// </li>
  /// <li>
  /// The Amazon S3 URIs of baseline constraints and statistics files to be used
  /// for the drift check.
  /// </li>
  /// <li>
  /// The Amazon S3 URIs of newly calculated baseline constraints and statistics.
  /// </li>
  /// <li>
  /// The model package group name provided.
  /// </li>
  /// <li>
  /// The Amazon S3 URI of the violation report if violations detected.
  /// </li>
  /// <li>
  /// The Amazon Resource Name (ARN) of check processing job initiated by the step
  /// execution.
  /// </li>
  /// <li>
  /// The Boolean flags indicating if the drift check is skipped.
  /// </li>
  /// <li>
  /// If step property <code>BaselineUsedForDriftCheck</code> is set the same as
  /// <code>CalculatedBaseline</code>.
  /// </li>
  /// </ul>
  final QualityCheckStepMetadata? qualityCheck;

  /// The Amazon Resource Name (ARN) of the model package that the model was
  /// registered to by this step execution.
  final RegisterModelStepMetadata? registerModel;

  /// The Amazon Resource Name (ARN) of the training job that was run by this step
  /// execution.
  final TrainingJobStepMetadata? trainingJob;

  /// The Amazon Resource Name (ARN) of the transform job that was run by this
  /// step execution.
  final TransformJobStepMetadata? transformJob;

  /// The Amazon Resource Name (ARN) of the tuning job that was run by this step
  /// execution.
  final TuningJobStepMetaData? tuningJob;

  PipelineExecutionStepMetadata({
    this.autoMLJob,
    this.callback,
    this.clarifyCheck,
    this.condition,
    this.emr,
    this.fail,
    this.lambda,
    this.model,
    this.processingJob,
    this.qualityCheck,
    this.registerModel,
    this.trainingJob,
    this.transformJob,
    this.tuningJob,
  });

  factory PipelineExecutionStepMetadata.fromJson(Map<String, dynamic> json) {
    return PipelineExecutionStepMetadata(
      autoMLJob: json['AutoMLJob'] != null
          ? AutoMLJobStepMetadata.fromJson(
              json['AutoMLJob'] as Map<String, dynamic>)
          : null,
      callback: json['Callback'] != null
          ? CallbackStepMetadata.fromJson(
              json['Callback'] as Map<String, dynamic>)
          : null,
      clarifyCheck: json['ClarifyCheck'] != null
          ? ClarifyCheckStepMetadata.fromJson(
              json['ClarifyCheck'] as Map<String, dynamic>)
          : null,
      condition: json['Condition'] != null
          ? ConditionStepMetadata.fromJson(
              json['Condition'] as Map<String, dynamic>)
          : null,
      emr: json['EMR'] != null
          ? EMRStepMetadata.fromJson(json['EMR'] as Map<String, dynamic>)
          : null,
      fail: json['Fail'] != null
          ? FailStepMetadata.fromJson(json['Fail'] as Map<String, dynamic>)
          : null,
      lambda: json['Lambda'] != null
          ? LambdaStepMetadata.fromJson(json['Lambda'] as Map<String, dynamic>)
          : null,
      model: json['Model'] != null
          ? ModelStepMetadata.fromJson(json['Model'] as Map<String, dynamic>)
          : null,
      processingJob: json['ProcessingJob'] != null
          ? ProcessingJobStepMetadata.fromJson(
              json['ProcessingJob'] as Map<String, dynamic>)
          : null,
      qualityCheck: json['QualityCheck'] != null
          ? QualityCheckStepMetadata.fromJson(
              json['QualityCheck'] as Map<String, dynamic>)
          : null,
      registerModel: json['RegisterModel'] != null
          ? RegisterModelStepMetadata.fromJson(
              json['RegisterModel'] as Map<String, dynamic>)
          : null,
      trainingJob: json['TrainingJob'] != null
          ? TrainingJobStepMetadata.fromJson(
              json['TrainingJob'] as Map<String, dynamic>)
          : null,
      transformJob: json['TransformJob'] != null
          ? TransformJobStepMetadata.fromJson(
              json['TransformJob'] as Map<String, dynamic>)
          : null,
      tuningJob: json['TuningJob'] != null
          ? TuningJobStepMetaData.fromJson(
              json['TuningJob'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJob = this.autoMLJob;
    final callback = this.callback;
    final clarifyCheck = this.clarifyCheck;
    final condition = this.condition;
    final emr = this.emr;
    final fail = this.fail;
    final lambda = this.lambda;
    final model = this.model;
    final processingJob = this.processingJob;
    final qualityCheck = this.qualityCheck;
    final registerModel = this.registerModel;
    final trainingJob = this.trainingJob;
    final transformJob = this.transformJob;
    final tuningJob = this.tuningJob;
    return {
      if (autoMLJob != null) 'AutoMLJob': autoMLJob,
      if (callback != null) 'Callback': callback,
      if (clarifyCheck != null) 'ClarifyCheck': clarifyCheck,
      if (condition != null) 'Condition': condition,
      if (emr != null) 'EMR': emr,
      if (fail != null) 'Fail': fail,
      if (lambda != null) 'Lambda': lambda,
      if (model != null) 'Model': model,
      if (processingJob != null) 'ProcessingJob': processingJob,
      if (qualityCheck != null) 'QualityCheck': qualityCheck,
      if (registerModel != null) 'RegisterModel': registerModel,
      if (trainingJob != null) 'TrainingJob': trainingJob,
      if (transformJob != null) 'TransformJob': transformJob,
      if (tuningJob != null) 'TuningJob': tuningJob,
    };
  }
}

/// A pipeline execution summary.
class PipelineExecutionSummary {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  /// The description of the pipeline execution.
  final String? pipelineExecutionDescription;

  /// The display name of the pipeline execution.
  final String? pipelineExecutionDisplayName;

  /// A message generated by SageMaker Pipelines describing why the pipeline
  /// execution failed.
  final String? pipelineExecutionFailureReason;

  /// The status of the pipeline execution.
  final PipelineExecutionStatus? pipelineExecutionStatus;

  /// The start time of the pipeline execution.
  final DateTime? startTime;

  PipelineExecutionSummary({
    this.pipelineExecutionArn,
    this.pipelineExecutionDescription,
    this.pipelineExecutionDisplayName,
    this.pipelineExecutionFailureReason,
    this.pipelineExecutionStatus,
    this.startTime,
  });

  factory PipelineExecutionSummary.fromJson(Map<String, dynamic> json) {
    return PipelineExecutionSummary(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
      pipelineExecutionDescription:
          json['PipelineExecutionDescription'] as String?,
      pipelineExecutionDisplayName:
          json['PipelineExecutionDisplayName'] as String?,
      pipelineExecutionFailureReason:
          json['PipelineExecutionFailureReason'] as String?,
      pipelineExecutionStatus: (json['PipelineExecutionStatus'] as String?)
          ?.let(PipelineExecutionStatus.fromString),
      startTime: timeStampFromJson(json['StartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    final pipelineExecutionDescription = this.pipelineExecutionDescription;
    final pipelineExecutionDisplayName = this.pipelineExecutionDisplayName;
    final pipelineExecutionFailureReason = this.pipelineExecutionFailureReason;
    final pipelineExecutionStatus = this.pipelineExecutionStatus;
    final startTime = this.startTime;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
      if (pipelineExecutionDescription != null)
        'PipelineExecutionDescription': pipelineExecutionDescription,
      if (pipelineExecutionDisplayName != null)
        'PipelineExecutionDisplayName': pipelineExecutionDisplayName,
      if (pipelineExecutionFailureReason != null)
        'PipelineExecutionFailureReason': pipelineExecutionFailureReason,
      if (pipelineExecutionStatus != null)
        'PipelineExecutionStatus': pipelineExecutionStatus.value,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
    };
  }
}

/// Specifies the names of the experiment and trial created by a pipeline.
class PipelineExperimentConfig {
  /// The name of the experiment.
  final String? experimentName;

  /// The name of the trial.
  final String? trialName;

  PipelineExperimentConfig({
    this.experimentName,
    this.trialName,
  });

  factory PipelineExperimentConfig.fromJson(Map<String, dynamic> json) {
    return PipelineExperimentConfig(
      experimentName: json['ExperimentName'] as String?,
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentName = this.experimentName;
    final trialName = this.trialName;
    return {
      if (experimentName != null) 'ExperimentName': experimentName,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

enum PipelineStatus {
  active('Active'),
  deleting('Deleting'),
  ;

  final String value;

  const PipelineStatus(this.value);

  static PipelineStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum PipelineStatus'));
}

/// A summary of a pipeline.
class PipelineSummary {
  /// The creation time of the pipeline.
  final DateTime? creationTime;

  /// The last time that a pipeline execution began.
  final DateTime? lastExecutionTime;

  /// The time that the pipeline was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the pipeline.
  final String? pipelineArn;

  /// The description of the pipeline.
  final String? pipelineDescription;

  /// The display name of the pipeline.
  final String? pipelineDisplayName;

  /// The name of the pipeline.
  final String? pipelineName;

  /// The Amazon Resource Name (ARN) that the pipeline used to execute.
  final String? roleArn;

  PipelineSummary({
    this.creationTime,
    this.lastExecutionTime,
    this.lastModifiedTime,
    this.pipelineArn,
    this.pipelineDescription,
    this.pipelineDisplayName,
    this.pipelineName,
    this.roleArn,
  });

  factory PipelineSummary.fromJson(Map<String, dynamic> json) {
    return PipelineSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      lastExecutionTime: timeStampFromJson(json['LastExecutionTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      pipelineArn: json['PipelineArn'] as String?,
      pipelineDescription: json['PipelineDescription'] as String?,
      pipelineDisplayName: json['PipelineDisplayName'] as String?,
      pipelineName: json['PipelineName'] as String?,
      roleArn: json['RoleArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastExecutionTime = this.lastExecutionTime;
    final lastModifiedTime = this.lastModifiedTime;
    final pipelineArn = this.pipelineArn;
    final pipelineDescription = this.pipelineDescription;
    final pipelineDisplayName = this.pipelineDisplayName;
    final pipelineName = this.pipelineName;
    final roleArn = this.roleArn;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastExecutionTime != null)
        'LastExecutionTime': unixTimestampToJson(lastExecutionTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
      if (pipelineDescription != null)
        'PipelineDescription': pipelineDescription,
      if (pipelineDisplayName != null)
        'PipelineDisplayName': pipelineDisplayName,
      if (pipelineName != null) 'PipelineName': pipelineName,
      if (roleArn != null) 'RoleArn': roleArn,
    };
  }
}

/// A specification for a predefined metric.
class PredefinedMetricSpecification {
  /// The metric type. You can only apply SageMaker metric types to SageMaker
  /// endpoints.
  final String? predefinedMetricType;

  PredefinedMetricSpecification({
    this.predefinedMetricType,
  });

  factory PredefinedMetricSpecification.fromJson(Map<String, dynamic> json) {
    return PredefinedMetricSpecification(
      predefinedMetricType: json['PredefinedMetricType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final predefinedMetricType = this.predefinedMetricType;
    return {
      if (predefinedMetricType != null)
        'PredefinedMetricType': predefinedMetricType,
    };
  }
}

enum ProblemType {
  binaryClassification('BinaryClassification'),
  multiclassClassification('MulticlassClassification'),
  regression('Regression'),
  ;

  final String value;

  const ProblemType(this.value);

  static ProblemType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ProblemType'));
}

/// Configuration for the cluster used to run a processing job.
class ProcessingClusterConfig {
  /// The number of ML compute instances to use in the processing job. For
  /// distributed processing jobs, specify a value greater than 1. The default
  /// value is 1.
  final int instanceCount;

  /// The ML compute instance type for the processing job.
  final ProcessingInstanceType instanceType;

  /// The size of the ML storage volume in gigabytes that you want to provision.
  /// You must specify sufficient ML storage for your scenario.
  /// <note>
  /// Certain Nitro-based instances include local storage with a fixed total size,
  /// dependent on the instance type. When using these instances for processing,
  /// Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2
  /// storage. You can't request a <code>VolumeSizeInGB</code> greater than the
  /// total size of the local instance storage.
  ///
  /// For a list of instance types that support local instance storage, including
  /// the total size per instance type, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  /// </note>
  final int volumeSizeInGB;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data on the storage volume attached to
  /// the ML compute instance(s) that run the processing job.
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>VolumeKmsKeyId</code> when using
  /// an instance type with local storage.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  final String? volumeKmsKeyId;

  ProcessingClusterConfig({
    required this.instanceCount,
    required this.instanceType,
    required this.volumeSizeInGB,
    this.volumeKmsKeyId,
  });

  factory ProcessingClusterConfig.fromJson(Map<String, dynamic> json) {
    return ProcessingClusterConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType:
          ProcessingInstanceType.fromString((json['InstanceType'] as String)),
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeSizeInGB = this.volumeSizeInGB;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.value,
      'VolumeSizeInGB': volumeSizeInGB,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// Configuration for processing job outputs in Amazon SageMaker Feature Store.
class ProcessingFeatureStoreOutput {
  /// The name of the Amazon SageMaker FeatureGroup to use as the destination for
  /// processing job output. Note that your processing script is responsible for
  /// putting records into your Feature Store.
  final String featureGroupName;

  ProcessingFeatureStoreOutput({
    required this.featureGroupName,
  });

  factory ProcessingFeatureStoreOutput.fromJson(Map<String, dynamic> json) {
    return ProcessingFeatureStoreOutput(
      featureGroupName: json['FeatureGroupName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupName = this.featureGroupName;
    return {
      'FeatureGroupName': featureGroupName,
    };
  }
}

/// The inputs for a processing job. The processing input must specify exactly
/// one of either <code>S3Input</code> or <code>DatasetDefinition</code> types.
class ProcessingInput {
  /// The name for the processing job input.
  final String inputName;

  /// When <code>True</code>, input operations such as data download are managed
  /// natively by the processing job application. When <code>False</code>
  /// (default), input operations are managed by Amazon SageMaker.
  final bool? appManaged;

  /// Configuration for a Dataset Definition input.
  final DatasetDefinition? datasetDefinition;

  /// Configuration for downloading input data from Amazon S3 into the processing
  /// container.
  final ProcessingS3Input? s3Input;

  ProcessingInput({
    required this.inputName,
    this.appManaged,
    this.datasetDefinition,
    this.s3Input,
  });

  factory ProcessingInput.fromJson(Map<String, dynamic> json) {
    return ProcessingInput(
      inputName: json['InputName'] as String,
      appManaged: json['AppManaged'] as bool?,
      datasetDefinition: json['DatasetDefinition'] != null
          ? DatasetDefinition.fromJson(
              json['DatasetDefinition'] as Map<String, dynamic>)
          : null,
      s3Input: json['S3Input'] != null
          ? ProcessingS3Input.fromJson(json['S3Input'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final inputName = this.inputName;
    final appManaged = this.appManaged;
    final datasetDefinition = this.datasetDefinition;
    final s3Input = this.s3Input;
    return {
      'InputName': inputName,
      if (appManaged != null) 'AppManaged': appManaged,
      if (datasetDefinition != null) 'DatasetDefinition': datasetDefinition,
      if (s3Input != null) 'S3Input': s3Input,
    };
  }
}

enum ProcessingInstanceType {
  mlT3Medium('ml.t3.medium'),
  mlT3Large('ml.t3.large'),
  mlT3Xlarge('ml.t3.xlarge'),
  mlT3_2xlarge('ml.t3.2xlarge'),
  mlM4Xlarge('ml.m4.xlarge'),
  mlM4_2xlarge('ml.m4.2xlarge'),
  mlM4_4xlarge('ml.m4.4xlarge'),
  mlM4_10xlarge('ml.m4.10xlarge'),
  mlM4_16xlarge('ml.m4.16xlarge'),
  mlC4Xlarge('ml.c4.xlarge'),
  mlC4_2xlarge('ml.c4.2xlarge'),
  mlC4_4xlarge('ml.c4.4xlarge'),
  mlC4_8xlarge('ml.c4.8xlarge'),
  mlP2Xlarge('ml.p2.xlarge'),
  mlP2_8xlarge('ml.p2.8xlarge'),
  mlP2_16xlarge('ml.p2.16xlarge'),
  mlP3_2xlarge('ml.p3.2xlarge'),
  mlP3_8xlarge('ml.p3.8xlarge'),
  mlP3_16xlarge('ml.p3.16xlarge'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlM5Large('ml.m5.large'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlR5Large('ml.r5.large'),
  mlR5Xlarge('ml.r5.xlarge'),
  mlR5_2xlarge('ml.r5.2xlarge'),
  mlR5_4xlarge('ml.r5.4xlarge'),
  mlR5_8xlarge('ml.r5.8xlarge'),
  mlR5_12xlarge('ml.r5.12xlarge'),
  mlR5_16xlarge('ml.r5.16xlarge'),
  mlR5_24xlarge('ml.r5.24xlarge'),
  mlG4dnXlarge('ml.g4dn.xlarge'),
  mlG4dn_2xlarge('ml.g4dn.2xlarge'),
  mlG4dn_4xlarge('ml.g4dn.4xlarge'),
  mlG4dn_8xlarge('ml.g4dn.8xlarge'),
  mlG4dn_12xlarge('ml.g4dn.12xlarge'),
  mlG4dn_16xlarge('ml.g4dn.16xlarge'),
  ;

  final String value;

  const ProcessingInstanceType(this.value);

  static ProcessingInstanceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ProcessingInstanceType'));
}

/// An Amazon SageMaker processing job that is used to analyze data and evaluate
/// models. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process
/// Data and Evaluate Models</a>.
class ProcessingJob {
  final AppSpecification? appSpecification;

  /// The Amazon Resource Name (ARN) of the AutoML job associated with this
  /// processing job.
  final String? autoMLJobArn;

  /// The time the processing job was created.
  final DateTime? creationTime;

  /// Sets the environment variables in the Docker container.
  final Map<String, String>? environment;

  /// A string, up to one KB in size, that contains metadata from the processing
  /// container when the processing job exits.
  final String? exitMessage;
  final ExperimentConfig? experimentConfig;

  /// A string, up to one KB in size, that contains the reason a processing job
  /// failed, if it failed.
  final String? failureReason;

  /// The time the processing job was last modified.
  final DateTime? lastModifiedTime;

  /// The ARN of a monitoring schedule for an endpoint associated with this
  /// processing job.
  final String? monitoringScheduleArn;
  final NetworkConfig? networkConfig;

  /// The time that the processing job ended.
  final DateTime? processingEndTime;

  /// List of input configurations for the processing job.
  final List<ProcessingInput>? processingInputs;

  /// The ARN of the processing job.
  final String? processingJobArn;

  /// The name of the processing job.
  final String? processingJobName;

  /// The status of the processing job.
  final ProcessingJobStatus? processingJobStatus;
  final ProcessingOutputConfig? processingOutputConfig;
  final ProcessingResources? processingResources;

  /// The time that the processing job started.
  final DateTime? processingStartTime;

  /// The ARN of the role used to create the processing job.
  final String? roleArn;
  final ProcessingStoppingCondition? stoppingCondition;

  /// An array of key-value pairs. For more information, see <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using
  /// Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost
  /// Management User Guide</i>.
  final List<Tag>? tags;

  /// The ARN of the training job associated with this processing job.
  final String? trainingJobArn;

  ProcessingJob({
    this.appSpecification,
    this.autoMLJobArn,
    this.creationTime,
    this.environment,
    this.exitMessage,
    this.experimentConfig,
    this.failureReason,
    this.lastModifiedTime,
    this.monitoringScheduleArn,
    this.networkConfig,
    this.processingEndTime,
    this.processingInputs,
    this.processingJobArn,
    this.processingJobName,
    this.processingJobStatus,
    this.processingOutputConfig,
    this.processingResources,
    this.processingStartTime,
    this.roleArn,
    this.stoppingCondition,
    this.tags,
    this.trainingJobArn,
  });

  factory ProcessingJob.fromJson(Map<String, dynamic> json) {
    return ProcessingJob(
      appSpecification: json['AppSpecification'] != null
          ? AppSpecification.fromJson(
              json['AppSpecification'] as Map<String, dynamic>)
          : null,
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      creationTime: timeStampFromJson(json['CreationTime']),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      exitMessage: json['ExitMessage'] as String?,
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String?,
      networkConfig: json['NetworkConfig'] != null
          ? NetworkConfig.fromJson(
              json['NetworkConfig'] as Map<String, dynamic>)
          : null,
      processingEndTime: timeStampFromJson(json['ProcessingEndTime']),
      processingInputs: (json['ProcessingInputs'] as List?)
          ?.nonNulls
          .map((e) => ProcessingInput.fromJson(e as Map<String, dynamic>))
          .toList(),
      processingJobArn: json['ProcessingJobArn'] as String?,
      processingJobName: json['ProcessingJobName'] as String?,
      processingJobStatus: (json['ProcessingJobStatus'] as String?)
          ?.let(ProcessingJobStatus.fromString),
      processingOutputConfig: json['ProcessingOutputConfig'] != null
          ? ProcessingOutputConfig.fromJson(
              json['ProcessingOutputConfig'] as Map<String, dynamic>)
          : null,
      processingResources: json['ProcessingResources'] != null
          ? ProcessingResources.fromJson(
              json['ProcessingResources'] as Map<String, dynamic>)
          : null,
      processingStartTime: timeStampFromJson(json['ProcessingStartTime']),
      roleArn: json['RoleArn'] as String?,
      stoppingCondition: json['StoppingCondition'] != null
          ? ProcessingStoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingJobArn: json['TrainingJobArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appSpecification = this.appSpecification;
    final autoMLJobArn = this.autoMLJobArn;
    final creationTime = this.creationTime;
    final environment = this.environment;
    final exitMessage = this.exitMessage;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final networkConfig = this.networkConfig;
    final processingEndTime = this.processingEndTime;
    final processingInputs = this.processingInputs;
    final processingJobArn = this.processingJobArn;
    final processingJobName = this.processingJobName;
    final processingJobStatus = this.processingJobStatus;
    final processingOutputConfig = this.processingOutputConfig;
    final processingResources = this.processingResources;
    final processingStartTime = this.processingStartTime;
    final roleArn = this.roleArn;
    final stoppingCondition = this.stoppingCondition;
    final tags = this.tags;
    final trainingJobArn = this.trainingJobArn;
    return {
      if (appSpecification != null) 'AppSpecification': appSpecification,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (environment != null) 'Environment': environment,
      if (exitMessage != null) 'ExitMessage': exitMessage,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (monitoringScheduleArn != null)
        'MonitoringScheduleArn': monitoringScheduleArn,
      if (networkConfig != null) 'NetworkConfig': networkConfig,
      if (processingEndTime != null)
        'ProcessingEndTime': unixTimestampToJson(processingEndTime),
      if (processingInputs != null) 'ProcessingInputs': processingInputs,
      if (processingJobArn != null) 'ProcessingJobArn': processingJobArn,
      if (processingJobName != null) 'ProcessingJobName': processingJobName,
      if (processingJobStatus != null)
        'ProcessingJobStatus': processingJobStatus.value,
      if (processingOutputConfig != null)
        'ProcessingOutputConfig': processingOutputConfig,
      if (processingResources != null)
        'ProcessingResources': processingResources,
      if (processingStartTime != null)
        'ProcessingStartTime': unixTimestampToJson(processingStartTime),
      if (roleArn != null) 'RoleArn': roleArn,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
      if (tags != null) 'Tags': tags,
      if (trainingJobArn != null) 'TrainingJobArn': trainingJobArn,
    };
  }
}

enum ProcessingJobStatus {
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const ProcessingJobStatus(this.value);

  static ProcessingJobStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ProcessingJobStatus'));
}

/// Metadata for a processing job step.
class ProcessingJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the processing job.
  final String? arn;

  ProcessingJobStepMetadata({
    this.arn,
  });

  factory ProcessingJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return ProcessingJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Summary of information about a processing job.
class ProcessingJobSummary {
  /// The time at which the processing job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the processing job..
  final String processingJobArn;

  /// The name of the processing job.
  final String processingJobName;

  /// The status of the processing job.
  final ProcessingJobStatus processingJobStatus;

  /// An optional string, up to one KB in size, that contains metadata from the
  /// processing container when the processing job exits.
  final String? exitMessage;

  /// A string, up to one KB in size, that contains the reason a processing job
  /// failed, if it failed.
  final String? failureReason;

  /// A timestamp that indicates the last time the processing job was modified.
  final DateTime? lastModifiedTime;

  /// The time at which the processing job completed.
  final DateTime? processingEndTime;

  ProcessingJobSummary({
    required this.creationTime,
    required this.processingJobArn,
    required this.processingJobName,
    required this.processingJobStatus,
    this.exitMessage,
    this.failureReason,
    this.lastModifiedTime,
    this.processingEndTime,
  });

  factory ProcessingJobSummary.fromJson(Map<String, dynamic> json) {
    return ProcessingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      processingJobArn: json['ProcessingJobArn'] as String,
      processingJobName: json['ProcessingJobName'] as String,
      processingJobStatus: ProcessingJobStatus.fromString(
          (json['ProcessingJobStatus'] as String)),
      exitMessage: json['ExitMessage'] as String?,
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      processingEndTime: timeStampFromJson(json['ProcessingEndTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final processingJobArn = this.processingJobArn;
    final processingJobName = this.processingJobName;
    final processingJobStatus = this.processingJobStatus;
    final exitMessage = this.exitMessage;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final processingEndTime = this.processingEndTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ProcessingJobArn': processingJobArn,
      'ProcessingJobName': processingJobName,
      'ProcessingJobStatus': processingJobStatus.value,
      if (exitMessage != null) 'ExitMessage': exitMessage,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (processingEndTime != null)
        'ProcessingEndTime': unixTimestampToJson(processingEndTime),
    };
  }
}

/// Describes the results of a processing job. The processing output must
/// specify exactly one of either <code>S3Output</code> or
/// <code>FeatureStoreOutput</code> types.
class ProcessingOutput {
  /// The name for the processing job output.
  final String outputName;

  /// When <code>True</code>, output operations such as data upload are managed
  /// natively by the processing job application. When <code>False</code>
  /// (default), output operations are managed by Amazon SageMaker.
  final bool? appManaged;

  /// Configuration for processing job outputs in Amazon SageMaker Feature Store.
  /// This processing output type is only supported when <code>AppManaged</code>
  /// is specified.
  final ProcessingFeatureStoreOutput? featureStoreOutput;

  /// Configuration for processing job outputs in Amazon S3.
  final ProcessingS3Output? s3Output;

  ProcessingOutput({
    required this.outputName,
    this.appManaged,
    this.featureStoreOutput,
    this.s3Output,
  });

  factory ProcessingOutput.fromJson(Map<String, dynamic> json) {
    return ProcessingOutput(
      outputName: json['OutputName'] as String,
      appManaged: json['AppManaged'] as bool?,
      featureStoreOutput: json['FeatureStoreOutput'] != null
          ? ProcessingFeatureStoreOutput.fromJson(
              json['FeatureStoreOutput'] as Map<String, dynamic>)
          : null,
      s3Output: json['S3Output'] != null
          ? ProcessingS3Output.fromJson(
              json['S3Output'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final outputName = this.outputName;
    final appManaged = this.appManaged;
    final featureStoreOutput = this.featureStoreOutput;
    final s3Output = this.s3Output;
    return {
      'OutputName': outputName,
      if (appManaged != null) 'AppManaged': appManaged,
      if (featureStoreOutput != null) 'FeatureStoreOutput': featureStoreOutput,
      if (s3Output != null) 'S3Output': s3Output,
    };
  }
}

/// Configuration for uploading output from the processing container.
class ProcessingOutputConfig {
  /// An array of outputs configuring the data to upload from the processing
  /// container.
  final List<ProcessingOutput> outputs;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the processing job output.
  /// <code>KmsKeyId</code> can be an ID of a KMS key, ARN of a KMS key, alias of
  /// a KMS key, or alias of a KMS key. The <code>KmsKeyId</code> is applied to
  /// all outputs.
  final String? kmsKeyId;

  ProcessingOutputConfig({
    required this.outputs,
    this.kmsKeyId,
  });

  factory ProcessingOutputConfig.fromJson(Map<String, dynamic> json) {
    return ProcessingOutputConfig(
      outputs: (json['Outputs'] as List)
          .nonNulls
          .map((e) => ProcessingOutput.fromJson(e as Map<String, dynamic>))
          .toList(),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final outputs = this.outputs;
    final kmsKeyId = this.kmsKeyId;
    return {
      'Outputs': outputs,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// Identifies the resources, ML compute instances, and ML storage volumes to
/// deploy for a processing job. In distributed training, you specify more than
/// one instance.
class ProcessingResources {
  /// The configuration for the resources in a cluster used to run the processing
  /// job.
  final ProcessingClusterConfig clusterConfig;

  ProcessingResources({
    required this.clusterConfig,
  });

  factory ProcessingResources.fromJson(Map<String, dynamic> json) {
    return ProcessingResources(
      clusterConfig: ProcessingClusterConfig.fromJson(
          json['ClusterConfig'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterConfig = this.clusterConfig;
    return {
      'ClusterConfig': clusterConfig,
    };
  }
}

enum ProcessingS3CompressionType {
  none('None'),
  gzip('Gzip'),
  ;

  final String value;

  const ProcessingS3CompressionType(this.value);

  static ProcessingS3CompressionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ProcessingS3CompressionType'));
}

enum ProcessingS3DataDistributionType {
  fullyReplicated('FullyReplicated'),
  shardedByS3Key('ShardedByS3Key'),
  ;

  final String value;

  const ProcessingS3DataDistributionType(this.value);

  static ProcessingS3DataDistributionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ProcessingS3DataDistributionType'));
}

enum ProcessingS3DataType {
  manifestFile('ManifestFile'),
  s3Prefix('S3Prefix'),
  ;

  final String value;

  const ProcessingS3DataType(this.value);

  static ProcessingS3DataType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ProcessingS3DataType'));
}

/// Configuration for downloading input data from Amazon S3 into the processing
/// container.
class ProcessingS3Input {
  /// Whether you use an <code>S3Prefix</code> or a <code>ManifestFile</code> for
  /// the data type. If you choose <code>S3Prefix</code>, <code>S3Uri</code>
  /// identifies a key name prefix. Amazon SageMaker uses all objects with the
  /// specified key name prefix for the processing job. If you choose
  /// <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that is a
  /// manifest file containing a list of object keys that you want Amazon
  /// SageMaker to use for the processing job.
  final ProcessingS3DataType s3DataType;

  /// The URI of the Amazon S3 prefix Amazon SageMaker downloads data required to
  /// run a processing job.
  final String s3Uri;

  /// The local path in your container where you want Amazon SageMaker to write
  /// input data to. <code>LocalPath</code> is an absolute path to the input data
  /// and must begin with <code>/opt/ml/processing/</code>. <code>LocalPath</code>
  /// is a required parameter when <code>AppManaged</code> is <code>False</code>
  /// (default).
  final String? localPath;

  /// Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the
  /// processing container. <code>Gzip</code> can only be used when
  /// <code>Pipe</code> mode is specified as the <code>S3InputMode</code>. In
  /// <code>Pipe</code> mode, Amazon SageMaker streams input data from the source
  /// directly to your container without using the EBS volume.
  final ProcessingS3CompressionType? s3CompressionType;

  /// Whether to distribute the data from Amazon S3 to all processing instances
  /// with <code>FullyReplicated</code>, or whether the data from Amazon S3 is
  /// shared by Amazon S3 key, downloading one shard of data to each processing
  /// instance.
  final ProcessingS3DataDistributionType? s3DataDistributionType;

  /// Whether to use <code>File</code> or <code>Pipe</code> input mode. In File
  /// mode, Amazon SageMaker copies the data from the input source onto the local
  /// ML storage volume before starting your processing container. This is the
  /// most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker
  /// streams input data from the source directly to your processing container
  /// into named pipes without using the ML storage volume.
  final ProcessingS3InputMode? s3InputMode;

  ProcessingS3Input({
    required this.s3DataType,
    required this.s3Uri,
    this.localPath,
    this.s3CompressionType,
    this.s3DataDistributionType,
    this.s3InputMode,
  });

  factory ProcessingS3Input.fromJson(Map<String, dynamic> json) {
    return ProcessingS3Input(
      s3DataType:
          ProcessingS3DataType.fromString((json['S3DataType'] as String)),
      s3Uri: json['S3Uri'] as String,
      localPath: json['LocalPath'] as String?,
      s3CompressionType: (json['S3CompressionType'] as String?)
          ?.let(ProcessingS3CompressionType.fromString),
      s3DataDistributionType: (json['S3DataDistributionType'] as String?)
          ?.let(ProcessingS3DataDistributionType.fromString),
      s3InputMode: (json['S3InputMode'] as String?)
          ?.let(ProcessingS3InputMode.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    final localPath = this.localPath;
    final s3CompressionType = this.s3CompressionType;
    final s3DataDistributionType = this.s3DataDistributionType;
    final s3InputMode = this.s3InputMode;
    return {
      'S3DataType': s3DataType.value,
      'S3Uri': s3Uri,
      if (localPath != null) 'LocalPath': localPath,
      if (s3CompressionType != null)
        'S3CompressionType': s3CompressionType.value,
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.value,
      if (s3InputMode != null) 'S3InputMode': s3InputMode.value,
    };
  }
}

enum ProcessingS3InputMode {
  pipe('Pipe'),
  file('File'),
  ;

  final String value;

  const ProcessingS3InputMode(this.value);

  static ProcessingS3InputMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ProcessingS3InputMode'));
}

/// Configuration for uploading output data to Amazon S3 from the processing
/// container.
class ProcessingS3Output {
  /// The local path of a directory where you want Amazon SageMaker to upload its
  /// contents to Amazon S3. <code>LocalPath</code> is an absolute path to a
  /// directory containing output files. This directory will be created by the
  /// platform and exist when your container's entrypoint is invoked.
  final String localPath;

  /// Whether to upload the results of the processing job continuously or after
  /// the job completes.
  final ProcessingS3UploadMode s3UploadMode;

  /// A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker
  /// to save the results of a processing job.
  final String s3Uri;

  ProcessingS3Output({
    required this.localPath,
    required this.s3UploadMode,
    required this.s3Uri,
  });

  factory ProcessingS3Output.fromJson(Map<String, dynamic> json) {
    return ProcessingS3Output(
      localPath: json['LocalPath'] as String,
      s3UploadMode:
          ProcessingS3UploadMode.fromString((json['S3UploadMode'] as String)),
      s3Uri: json['S3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final localPath = this.localPath;
    final s3UploadMode = this.s3UploadMode;
    final s3Uri = this.s3Uri;
    return {
      'LocalPath': localPath,
      'S3UploadMode': s3UploadMode.value,
      'S3Uri': s3Uri,
    };
  }
}

enum ProcessingS3UploadMode {
  continuous('Continuous'),
  endOfJob('EndOfJob'),
  ;

  final String value;

  const ProcessingS3UploadMode(this.value);

  static ProcessingS3UploadMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ProcessingS3UploadMode'));
}

/// Configures conditions under which the processing job should be stopped, such
/// as how long the processing job has been running. After the condition is met,
/// the processing job is stopped.
class ProcessingStoppingCondition {
  /// Specifies the maximum runtime in seconds.
  final int maxRuntimeInSeconds;

  ProcessingStoppingCondition({
    required this.maxRuntimeInSeconds,
  });

  factory ProcessingStoppingCondition.fromJson(Map<String, dynamic> json) {
    return ProcessingStoppingCondition(
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    return {
      'MaxRuntimeInSeconds': maxRuntimeInSeconds,
    };
  }
}

enum Processor {
  cpu('CPU'),
  gpu('GPU'),
  ;

  final String value;

  const Processor(this.value);

  static Processor fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Processor'));
}

/// Identifies a model that you want to host and the resources chosen to deploy
/// for hosting it. If you are deploying multiple models, tell SageMaker how to
/// distribute traffic among the models by specifying variant weights. For more
/// information on production variants, check <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html">
/// Production variants</a>.
class ProductionVariant {
  /// The name of the production variant.
  final String variantName;

  /// The size of the Elastic Inference (EI) instance to use for the production
  /// variant. EI instances provide on-demand GPU computing for inference. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic
  /// Inference in Amazon SageMaker</a>.
  final ProductionVariantAcceleratorType? acceleratorType;

  /// The timeout value, in seconds, for your inference container to pass health
  /// check by SageMaker Hosting. For more information about health check, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests">How
  /// Your Container Should Respond to Health Check (Ping) Requests</a>.
  final int? containerStartupHealthCheckTimeoutInSeconds;

  /// Specifies configuration for a core dump from the model container when the
  /// process crashes.
  final ProductionVariantCoreDumpConfig? coreDumpConfig;

  /// You can use this parameter to turn on native Amazon Web Services Systems
  /// Manager (SSM) access for a production variant behind an endpoint. By
  /// default, SSM access is disabled for all production variants behind an
  /// endpoint. You can turn on or turn off SSM access for a production variant
  /// behind an existing endpoint by creating a new endpoint configuration and
  /// calling <code>UpdateEndpoint</code>.
  final bool? enableSSMAccess;

  /// Number of instances to launch initially.
  final int? initialInstanceCount;

  /// Determines initial traffic distribution among all of the models that you
  /// specify in the endpoint configuration. The traffic to a production variant
  /// is determined by the ratio of the <code>VariantWeight</code> to the sum of
  /// all <code>VariantWeight</code> values across all ProductionVariants. If
  /// unspecified, it defaults to 1.0.
  final double? initialVariantWeight;

  /// The ML compute instance type.
  final ProductionVariantInstanceType? instanceType;

  /// Settings that control the range in the number of instances that the endpoint
  /// provisions as it scales up or down to accommodate traffic.
  final ProductionVariantManagedInstanceScaling? managedInstanceScaling;

  /// The timeout value, in seconds, to download and extract the model that you
  /// want to host from Amazon S3 to the individual inference instance associated
  /// with this production variant.
  final int? modelDataDownloadTimeoutInSeconds;

  /// The name of the model that you want to host. This is the name that you
  /// specified when creating the model.
  final String? modelName;

  /// Settings that control how the endpoint routes incoming traffic to the
  /// instances that the endpoint hosts.
  final ProductionVariantRoutingConfig? routingConfig;

  /// The serverless configuration for an endpoint. Specifies a serverless
  /// endpoint configuration instead of an instance-based endpoint configuration.
  final ProductionVariantServerlessConfig? serverlessConfig;

  /// The size, in GB, of the ML storage volume attached to individual inference
  /// instance associated with the production variant. Currently only Amazon EBS
  /// gp2 storage volumes are supported.
  final int? volumeSizeInGB;

  ProductionVariant({
    required this.variantName,
    this.acceleratorType,
    this.containerStartupHealthCheckTimeoutInSeconds,
    this.coreDumpConfig,
    this.enableSSMAccess,
    this.initialInstanceCount,
    this.initialVariantWeight,
    this.instanceType,
    this.managedInstanceScaling,
    this.modelDataDownloadTimeoutInSeconds,
    this.modelName,
    this.routingConfig,
    this.serverlessConfig,
    this.volumeSizeInGB,
  });

  factory ProductionVariant.fromJson(Map<String, dynamic> json) {
    return ProductionVariant(
      variantName: json['VariantName'] as String,
      acceleratorType: (json['AcceleratorType'] as String?)
          ?.let(ProductionVariantAcceleratorType.fromString),
      containerStartupHealthCheckTimeoutInSeconds:
          json['ContainerStartupHealthCheckTimeoutInSeconds'] as int?,
      coreDumpConfig: json['CoreDumpConfig'] != null
          ? ProductionVariantCoreDumpConfig.fromJson(
              json['CoreDumpConfig'] as Map<String, dynamic>)
          : null,
      enableSSMAccess: json['EnableSSMAccess'] as bool?,
      initialInstanceCount: json['InitialInstanceCount'] as int?,
      initialVariantWeight: json['InitialVariantWeight'] as double?,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ProductionVariantInstanceType.fromString),
      managedInstanceScaling: json['ManagedInstanceScaling'] != null
          ? ProductionVariantManagedInstanceScaling.fromJson(
              json['ManagedInstanceScaling'] as Map<String, dynamic>)
          : null,
      modelDataDownloadTimeoutInSeconds:
          json['ModelDataDownloadTimeoutInSeconds'] as int?,
      modelName: json['ModelName'] as String?,
      routingConfig: json['RoutingConfig'] != null
          ? ProductionVariantRoutingConfig.fromJson(
              json['RoutingConfig'] as Map<String, dynamic>)
          : null,
      serverlessConfig: json['ServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['ServerlessConfig'] as Map<String, dynamic>)
          : null,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final variantName = this.variantName;
    final acceleratorType = this.acceleratorType;
    final containerStartupHealthCheckTimeoutInSeconds =
        this.containerStartupHealthCheckTimeoutInSeconds;
    final coreDumpConfig = this.coreDumpConfig;
    final enableSSMAccess = this.enableSSMAccess;
    final initialInstanceCount = this.initialInstanceCount;
    final initialVariantWeight = this.initialVariantWeight;
    final instanceType = this.instanceType;
    final managedInstanceScaling = this.managedInstanceScaling;
    final modelDataDownloadTimeoutInSeconds =
        this.modelDataDownloadTimeoutInSeconds;
    final modelName = this.modelName;
    final routingConfig = this.routingConfig;
    final serverlessConfig = this.serverlessConfig;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      'VariantName': variantName,
      if (acceleratorType != null) 'AcceleratorType': acceleratorType.value,
      if (containerStartupHealthCheckTimeoutInSeconds != null)
        'ContainerStartupHealthCheckTimeoutInSeconds':
            containerStartupHealthCheckTimeoutInSeconds,
      if (coreDumpConfig != null) 'CoreDumpConfig': coreDumpConfig,
      if (enableSSMAccess != null) 'EnableSSMAccess': enableSSMAccess,
      if (initialInstanceCount != null)
        'InitialInstanceCount': initialInstanceCount,
      if (initialVariantWeight != null)
        'InitialVariantWeight': initialVariantWeight,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (managedInstanceScaling != null)
        'ManagedInstanceScaling': managedInstanceScaling,
      if (modelDataDownloadTimeoutInSeconds != null)
        'ModelDataDownloadTimeoutInSeconds': modelDataDownloadTimeoutInSeconds,
      if (modelName != null) 'ModelName': modelName,
      if (routingConfig != null) 'RoutingConfig': routingConfig,
      if (serverlessConfig != null) 'ServerlessConfig': serverlessConfig,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

enum ProductionVariantAcceleratorType {
  mlEia1Medium('ml.eia1.medium'),
  mlEia1Large('ml.eia1.large'),
  mlEia1Xlarge('ml.eia1.xlarge'),
  mlEia2Medium('ml.eia2.medium'),
  mlEia2Large('ml.eia2.large'),
  mlEia2Xlarge('ml.eia2.xlarge'),
  ;

  final String value;

  const ProductionVariantAcceleratorType(this.value);

  static ProductionVariantAcceleratorType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ProductionVariantAcceleratorType'));
}

/// Specifies configuration for a core dump from the model container when the
/// process crashes.
class ProductionVariantCoreDumpConfig {
  /// The Amazon S3 bucket to send the core dump to.
  final String destinationS3Uri;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that SageMaker uses to encrypt the core dump data at rest using Amazon S3
  /// server-side encryption. The <code>KmsKeyId</code> can be any of the
  /// following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // KMS Key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key Alias
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
  /// </li>
  /// </ul>
  /// If you use a KMS key ID or an alias of your KMS key, the SageMaker execution
  /// role must include permissions to call <code>kms:Encrypt</code>. If you don't
  /// provide a KMS key ID, SageMaker uses the default KMS key for Amazon S3 for
  /// your role's account. SageMaker uses server-side encryption with KMS-managed
  /// keys for <code>OutputDataConfig</code>. If you use a bucket policy with an
  /// <code>s3:PutObject</code> permission that only allows objects with
  /// server-side encryption, set the condition key of
  /// <code>s3:x-amz-server-side-encryption</code> to <code>"aws:kms"</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify in
  /// your <code>CreateEndpoint</code> and <code>UpdateEndpoint</code> requests.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  final String? kmsKeyId;

  ProductionVariantCoreDumpConfig({
    required this.destinationS3Uri,
    this.kmsKeyId,
  });

  factory ProductionVariantCoreDumpConfig.fromJson(Map<String, dynamic> json) {
    return ProductionVariantCoreDumpConfig(
      destinationS3Uri: json['DestinationS3Uri'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final destinationS3Uri = this.destinationS3Uri;
    final kmsKeyId = this.kmsKeyId;
    return {
      'DestinationS3Uri': destinationS3Uri,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

enum ProductionVariantInstanceType {
  mlT2Medium('ml.t2.medium'),
  mlT2Large('ml.t2.large'),
  mlT2Xlarge('ml.t2.xlarge'),
  mlT2_2xlarge('ml.t2.2xlarge'),
  mlM4Xlarge('ml.m4.xlarge'),
  mlM4_2xlarge('ml.m4.2xlarge'),
  mlM4_4xlarge('ml.m4.4xlarge'),
  mlM4_10xlarge('ml.m4.10xlarge'),
  mlM4_16xlarge('ml.m4.16xlarge'),
  mlM5Large('ml.m5.large'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlM5dLarge('ml.m5d.large'),
  mlM5dXlarge('ml.m5d.xlarge'),
  mlM5d_2xlarge('ml.m5d.2xlarge'),
  mlM5d_4xlarge('ml.m5d.4xlarge'),
  mlM5d_12xlarge('ml.m5d.12xlarge'),
  mlM5d_24xlarge('ml.m5d.24xlarge'),
  mlC4Large('ml.c4.large'),
  mlC4Xlarge('ml.c4.xlarge'),
  mlC4_2xlarge('ml.c4.2xlarge'),
  mlC4_4xlarge('ml.c4.4xlarge'),
  mlC4_8xlarge('ml.c4.8xlarge'),
  mlP2Xlarge('ml.p2.xlarge'),
  mlP2_8xlarge('ml.p2.8xlarge'),
  mlP2_16xlarge('ml.p2.16xlarge'),
  mlP3_2xlarge('ml.p3.2xlarge'),
  mlP3_8xlarge('ml.p3.8xlarge'),
  mlP3_16xlarge('ml.p3.16xlarge'),
  mlC5Large('ml.c5.large'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlC5dLarge('ml.c5d.large'),
  mlC5dXlarge('ml.c5d.xlarge'),
  mlC5d_2xlarge('ml.c5d.2xlarge'),
  mlC5d_4xlarge('ml.c5d.4xlarge'),
  mlC5d_9xlarge('ml.c5d.9xlarge'),
  mlC5d_18xlarge('ml.c5d.18xlarge'),
  mlG4dnXlarge('ml.g4dn.xlarge'),
  mlG4dn_2xlarge('ml.g4dn.2xlarge'),
  mlG4dn_4xlarge('ml.g4dn.4xlarge'),
  mlG4dn_8xlarge('ml.g4dn.8xlarge'),
  mlG4dn_12xlarge('ml.g4dn.12xlarge'),
  mlG4dn_16xlarge('ml.g4dn.16xlarge'),
  mlR5Large('ml.r5.large'),
  mlR5Xlarge('ml.r5.xlarge'),
  mlR5_2xlarge('ml.r5.2xlarge'),
  mlR5_4xlarge('ml.r5.4xlarge'),
  mlR5_12xlarge('ml.r5.12xlarge'),
  mlR5_24xlarge('ml.r5.24xlarge'),
  mlR5dLarge('ml.r5d.large'),
  mlR5dXlarge('ml.r5d.xlarge'),
  mlR5d_2xlarge('ml.r5d.2xlarge'),
  mlR5d_4xlarge('ml.r5d.4xlarge'),
  mlR5d_12xlarge('ml.r5d.12xlarge'),
  mlR5d_24xlarge('ml.r5d.24xlarge'),
  mlInf1Xlarge('ml.inf1.xlarge'),
  mlInf1_2xlarge('ml.inf1.2xlarge'),
  mlInf1_6xlarge('ml.inf1.6xlarge'),
  mlInf1_24xlarge('ml.inf1.24xlarge'),
  mlDl1_24xlarge('ml.dl1.24xlarge'),
  mlC6iLarge('ml.c6i.large'),
  mlC6iXlarge('ml.c6i.xlarge'),
  mlC6i_2xlarge('ml.c6i.2xlarge'),
  mlC6i_4xlarge('ml.c6i.4xlarge'),
  mlC6i_8xlarge('ml.c6i.8xlarge'),
  mlC6i_12xlarge('ml.c6i.12xlarge'),
  mlC6i_16xlarge('ml.c6i.16xlarge'),
  mlC6i_24xlarge('ml.c6i.24xlarge'),
  mlC6i_32xlarge('ml.c6i.32xlarge'),
  mlG5Xlarge('ml.g5.xlarge'),
  mlG5_2xlarge('ml.g5.2xlarge'),
  mlG5_4xlarge('ml.g5.4xlarge'),
  mlG5_8xlarge('ml.g5.8xlarge'),
  mlG5_12xlarge('ml.g5.12xlarge'),
  mlG5_16xlarge('ml.g5.16xlarge'),
  mlG5_24xlarge('ml.g5.24xlarge'),
  mlG5_48xlarge('ml.g5.48xlarge'),
  mlG6Xlarge('ml.g6.xlarge'),
  mlG6_2xlarge('ml.g6.2xlarge'),
  mlG6_4xlarge('ml.g6.4xlarge'),
  mlG6_8xlarge('ml.g6.8xlarge'),
  mlG6_12xlarge('ml.g6.12xlarge'),
  mlG6_16xlarge('ml.g6.16xlarge'),
  mlG6_24xlarge('ml.g6.24xlarge'),
  mlG6_48xlarge('ml.g6.48xlarge'),
  mlP4d_24xlarge('ml.p4d.24xlarge'),
  mlC7gLarge('ml.c7g.large'),
  mlC7gXlarge('ml.c7g.xlarge'),
  mlC7g_2xlarge('ml.c7g.2xlarge'),
  mlC7g_4xlarge('ml.c7g.4xlarge'),
  mlC7g_8xlarge('ml.c7g.8xlarge'),
  mlC7g_12xlarge('ml.c7g.12xlarge'),
  mlC7g_16xlarge('ml.c7g.16xlarge'),
  mlM6gLarge('ml.m6g.large'),
  mlM6gXlarge('ml.m6g.xlarge'),
  mlM6g_2xlarge('ml.m6g.2xlarge'),
  mlM6g_4xlarge('ml.m6g.4xlarge'),
  mlM6g_8xlarge('ml.m6g.8xlarge'),
  mlM6g_12xlarge('ml.m6g.12xlarge'),
  mlM6g_16xlarge('ml.m6g.16xlarge'),
  mlM6gdLarge('ml.m6gd.large'),
  mlM6gdXlarge('ml.m6gd.xlarge'),
  mlM6gd_2xlarge('ml.m6gd.2xlarge'),
  mlM6gd_4xlarge('ml.m6gd.4xlarge'),
  mlM6gd_8xlarge('ml.m6gd.8xlarge'),
  mlM6gd_12xlarge('ml.m6gd.12xlarge'),
  mlM6gd_16xlarge('ml.m6gd.16xlarge'),
  mlC6gLarge('ml.c6g.large'),
  mlC6gXlarge('ml.c6g.xlarge'),
  mlC6g_2xlarge('ml.c6g.2xlarge'),
  mlC6g_4xlarge('ml.c6g.4xlarge'),
  mlC6g_8xlarge('ml.c6g.8xlarge'),
  mlC6g_12xlarge('ml.c6g.12xlarge'),
  mlC6g_16xlarge('ml.c6g.16xlarge'),
  mlC6gdLarge('ml.c6gd.large'),
  mlC6gdXlarge('ml.c6gd.xlarge'),
  mlC6gd_2xlarge('ml.c6gd.2xlarge'),
  mlC6gd_4xlarge('ml.c6gd.4xlarge'),
  mlC6gd_8xlarge('ml.c6gd.8xlarge'),
  mlC6gd_12xlarge('ml.c6gd.12xlarge'),
  mlC6gd_16xlarge('ml.c6gd.16xlarge'),
  mlC6gnLarge('ml.c6gn.large'),
  mlC6gnXlarge('ml.c6gn.xlarge'),
  mlC6gn_2xlarge('ml.c6gn.2xlarge'),
  mlC6gn_4xlarge('ml.c6gn.4xlarge'),
  mlC6gn_8xlarge('ml.c6gn.8xlarge'),
  mlC6gn_12xlarge('ml.c6gn.12xlarge'),
  mlC6gn_16xlarge('ml.c6gn.16xlarge'),
  mlR6gLarge('ml.r6g.large'),
  mlR6gXlarge('ml.r6g.xlarge'),
  mlR6g_2xlarge('ml.r6g.2xlarge'),
  mlR6g_4xlarge('ml.r6g.4xlarge'),
  mlR6g_8xlarge('ml.r6g.8xlarge'),
  mlR6g_12xlarge('ml.r6g.12xlarge'),
  mlR6g_16xlarge('ml.r6g.16xlarge'),
  mlR6gdLarge('ml.r6gd.large'),
  mlR6gdXlarge('ml.r6gd.xlarge'),
  mlR6gd_2xlarge('ml.r6gd.2xlarge'),
  mlR6gd_4xlarge('ml.r6gd.4xlarge'),
  mlR6gd_8xlarge('ml.r6gd.8xlarge'),
  mlR6gd_12xlarge('ml.r6gd.12xlarge'),
  mlR6gd_16xlarge('ml.r6gd.16xlarge'),
  mlP4de_24xlarge('ml.p4de.24xlarge'),
  mlTrn1_2xlarge('ml.trn1.2xlarge'),
  mlTrn1_32xlarge('ml.trn1.32xlarge'),
  mlTrn1n_32xlarge('ml.trn1n.32xlarge'),
  mlInf2Xlarge('ml.inf2.xlarge'),
  mlInf2_8xlarge('ml.inf2.8xlarge'),
  mlInf2_24xlarge('ml.inf2.24xlarge'),
  mlInf2_48xlarge('ml.inf2.48xlarge'),
  mlP5_48xlarge('ml.p5.48xlarge'),
  mlM7iLarge('ml.m7i.large'),
  mlM7iXlarge('ml.m7i.xlarge'),
  mlM7i_2xlarge('ml.m7i.2xlarge'),
  mlM7i_4xlarge('ml.m7i.4xlarge'),
  mlM7i_8xlarge('ml.m7i.8xlarge'),
  mlM7i_12xlarge('ml.m7i.12xlarge'),
  mlM7i_16xlarge('ml.m7i.16xlarge'),
  mlM7i_24xlarge('ml.m7i.24xlarge'),
  mlM7i_48xlarge('ml.m7i.48xlarge'),
  mlC7iLarge('ml.c7i.large'),
  mlC7iXlarge('ml.c7i.xlarge'),
  mlC7i_2xlarge('ml.c7i.2xlarge'),
  mlC7i_4xlarge('ml.c7i.4xlarge'),
  mlC7i_8xlarge('ml.c7i.8xlarge'),
  mlC7i_12xlarge('ml.c7i.12xlarge'),
  mlC7i_16xlarge('ml.c7i.16xlarge'),
  mlC7i_24xlarge('ml.c7i.24xlarge'),
  mlC7i_48xlarge('ml.c7i.48xlarge'),
  mlR7iLarge('ml.r7i.large'),
  mlR7iXlarge('ml.r7i.xlarge'),
  mlR7i_2xlarge('ml.r7i.2xlarge'),
  mlR7i_4xlarge('ml.r7i.4xlarge'),
  mlR7i_8xlarge('ml.r7i.8xlarge'),
  mlR7i_12xlarge('ml.r7i.12xlarge'),
  mlR7i_16xlarge('ml.r7i.16xlarge'),
  mlR7i_24xlarge('ml.r7i.24xlarge'),
  mlR7i_48xlarge('ml.r7i.48xlarge'),
  ;

  final String value;

  const ProductionVariantInstanceType(this.value);

  static ProductionVariantInstanceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ProductionVariantInstanceType'));
}

/// Settings that control the range in the number of instances that the endpoint
/// provisions as it scales up or down to accommodate traffic.
class ProductionVariantManagedInstanceScaling {
  /// The maximum number of instances that the endpoint can provision when it
  /// scales up to accommodate an increase in traffic.
  final int? maxInstanceCount;

  /// The minimum number of instances that the endpoint must retain when it scales
  /// down to accommodate a decrease in traffic.
  final int? minInstanceCount;

  /// Indicates whether managed instance scaling is enabled.
  final ManagedInstanceScalingStatus? status;

  ProductionVariantManagedInstanceScaling({
    this.maxInstanceCount,
    this.minInstanceCount,
    this.status,
  });

  factory ProductionVariantManagedInstanceScaling.fromJson(
      Map<String, dynamic> json) {
    return ProductionVariantManagedInstanceScaling(
      maxInstanceCount: json['MaxInstanceCount'] as int?,
      minInstanceCount: json['MinInstanceCount'] as int?,
      status: (json['Status'] as String?)
          ?.let(ManagedInstanceScalingStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final maxInstanceCount = this.maxInstanceCount;
    final minInstanceCount = this.minInstanceCount;
    final status = this.status;
    return {
      if (maxInstanceCount != null) 'MaxInstanceCount': maxInstanceCount,
      if (minInstanceCount != null) 'MinInstanceCount': minInstanceCount,
      if (status != null) 'Status': status.value,
    };
  }
}

/// Settings that control how the endpoint routes incoming traffic to the
/// instances that the endpoint hosts.
class ProductionVariantRoutingConfig {
  /// Sets how the endpoint routes incoming traffic:
  ///
  /// <ul>
  /// <li>
  /// <code>LEAST_OUTSTANDING_REQUESTS</code>: The endpoint routes requests to the
  /// specific instances that have more capacity to process them.
  /// </li>
  /// <li>
  /// <code>RANDOM</code>: The endpoint routes each request to a randomly chosen
  /// instance.
  /// </li>
  /// </ul>
  final RoutingStrategy routingStrategy;

  ProductionVariantRoutingConfig({
    required this.routingStrategy,
  });

  factory ProductionVariantRoutingConfig.fromJson(Map<String, dynamic> json) {
    return ProductionVariantRoutingConfig(
      routingStrategy:
          RoutingStrategy.fromString((json['RoutingStrategy'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final routingStrategy = this.routingStrategy;
    return {
      'RoutingStrategy': routingStrategy.value,
    };
  }
}

/// Specifies the serverless configuration for an endpoint variant.
class ProductionVariantServerlessConfig {
  /// The maximum number of concurrent invocations your serverless endpoint can
  /// process.
  final int maxConcurrency;

  /// The memory size of your serverless endpoint. Valid values are in 1 GB
  /// increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.
  final int memorySizeInMB;

  /// The amount of provisioned concurrency to allocate for the serverless
  /// endpoint. Should be less than or equal to <code>MaxConcurrency</code>.
  /// <note>
  /// This field is not supported for serverless endpoint recommendations for
  /// Inference Recommender jobs. For more information about creating an Inference
  /// Recommender job, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJobs</a>.
  /// </note>
  final int? provisionedConcurrency;

  ProductionVariantServerlessConfig({
    required this.maxConcurrency,
    required this.memorySizeInMB,
    this.provisionedConcurrency,
  });

  factory ProductionVariantServerlessConfig.fromJson(
      Map<String, dynamic> json) {
    return ProductionVariantServerlessConfig(
      maxConcurrency: json['MaxConcurrency'] as int,
      memorySizeInMB: json['MemorySizeInMB'] as int,
      provisionedConcurrency: json['ProvisionedConcurrency'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxConcurrency = this.maxConcurrency;
    final memorySizeInMB = this.memorySizeInMB;
    final provisionedConcurrency = this.provisionedConcurrency;
    return {
      'MaxConcurrency': maxConcurrency,
      'MemorySizeInMB': memorySizeInMB,
      if (provisionedConcurrency != null)
        'ProvisionedConcurrency': provisionedConcurrency,
    };
  }
}

/// Specifies the serverless update concurrency configuration for an endpoint
/// variant.
class ProductionVariantServerlessUpdateConfig {
  /// The updated maximum number of concurrent invocations your serverless
  /// endpoint can process.
  final int? maxConcurrency;

  /// The updated amount of provisioned concurrency to allocate for the serverless
  /// endpoint. Should be less than or equal to <code>MaxConcurrency</code>.
  final int? provisionedConcurrency;

  ProductionVariantServerlessUpdateConfig({
    this.maxConcurrency,
    this.provisionedConcurrency,
  });

  Map<String, dynamic> toJson() {
    final maxConcurrency = this.maxConcurrency;
    final provisionedConcurrency = this.provisionedConcurrency;
    return {
      if (maxConcurrency != null) 'MaxConcurrency': maxConcurrency,
      if (provisionedConcurrency != null)
        'ProvisionedConcurrency': provisionedConcurrency,
    };
  }
}

/// Describes the status of the production variant.
class ProductionVariantStatus {
  /// The endpoint variant status which describes the current deployment stage
  /// status or operational status.
  ///
  /// <ul>
  /// <li>
  /// <code>Creating</code>: Creating inference resources for the production
  /// variant.
  /// </li>
  /// <li>
  /// <code>Deleting</code>: Terminating inference resources for the production
  /// variant.
  /// </li>
  /// <li>
  /// <code>Updating</code>: Updating capacity for the production variant.
  /// </li>
  /// <li>
  /// <code>ActivatingTraffic</code>: Turning on traffic for the production
  /// variant.
  /// </li>
  /// <li>
  /// <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the
  /// automatic rollback configuration.
  /// </li>
  /// </ul>
  final VariantStatus status;

  /// The start time of the current status change.
  final DateTime? startTime;

  /// A message that describes the status of the production variant.
  final String? statusMessage;

  ProductionVariantStatus({
    required this.status,
    this.startTime,
    this.statusMessage,
  });

  factory ProductionVariantStatus.fromJson(Map<String, dynamic> json) {
    return ProductionVariantStatus(
      status: VariantStatus.fromString((json['Status'] as String)),
      startTime: timeStampFromJson(json['StartTime']),
      statusMessage: json['StatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final startTime = this.startTime;
    final statusMessage = this.statusMessage;
    return {
      'Status': status.value,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (statusMessage != null) 'StatusMessage': statusMessage,
    };
  }
}

/// Describes weight and capacities for a production variant associated with an
/// endpoint. If you sent a request to the
/// <code>UpdateEndpointWeightsAndCapacities</code> API and the endpoint status
/// is <code>Updating</code>, you get different desired and current values.
class ProductionVariantSummary {
  /// The name of the variant.
  final String variantName;

  /// The number of instances associated with the variant.
  final int? currentInstanceCount;

  /// The serverless configuration for the endpoint.
  final ProductionVariantServerlessConfig? currentServerlessConfig;

  /// The weight associated with the variant.
  final double? currentWeight;

  /// An array of <code>DeployedImage</code> objects that specify the Amazon EC2
  /// Container Registry paths of the inference images deployed on instances of
  /// this <code>ProductionVariant</code>.
  final List<DeployedImage>? deployedImages;

  /// The number of instances requested in the
  /// <code>UpdateEndpointWeightsAndCapacities</code> request.
  final int? desiredInstanceCount;

  /// The serverless configuration requested for the endpoint update.
  final ProductionVariantServerlessConfig? desiredServerlessConfig;

  /// The requested weight, as specified in the
  /// <code>UpdateEndpointWeightsAndCapacities</code> request.
  final double? desiredWeight;

  /// Settings that control the range in the number of instances that the endpoint
  /// provisions as it scales up or down to accommodate traffic.
  final ProductionVariantManagedInstanceScaling? managedInstanceScaling;

  /// Settings that control how the endpoint routes incoming traffic to the
  /// instances that the endpoint hosts.
  final ProductionVariantRoutingConfig? routingConfig;

  /// The endpoint variant status which describes the current deployment stage
  /// status or operational status.
  final List<ProductionVariantStatus>? variantStatus;

  ProductionVariantSummary({
    required this.variantName,
    this.currentInstanceCount,
    this.currentServerlessConfig,
    this.currentWeight,
    this.deployedImages,
    this.desiredInstanceCount,
    this.desiredServerlessConfig,
    this.desiredWeight,
    this.managedInstanceScaling,
    this.routingConfig,
    this.variantStatus,
  });

  factory ProductionVariantSummary.fromJson(Map<String, dynamic> json) {
    return ProductionVariantSummary(
      variantName: json['VariantName'] as String,
      currentInstanceCount: json['CurrentInstanceCount'] as int?,
      currentServerlessConfig: json['CurrentServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['CurrentServerlessConfig'] as Map<String, dynamic>)
          : null,
      currentWeight: json['CurrentWeight'] as double?,
      deployedImages: (json['DeployedImages'] as List?)
          ?.nonNulls
          .map((e) => DeployedImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      desiredInstanceCount: json['DesiredInstanceCount'] as int?,
      desiredServerlessConfig: json['DesiredServerlessConfig'] != null
          ? ProductionVariantServerlessConfig.fromJson(
              json['DesiredServerlessConfig'] as Map<String, dynamic>)
          : null,
      desiredWeight: json['DesiredWeight'] as double?,
      managedInstanceScaling: json['ManagedInstanceScaling'] != null
          ? ProductionVariantManagedInstanceScaling.fromJson(
              json['ManagedInstanceScaling'] as Map<String, dynamic>)
          : null,
      routingConfig: json['RoutingConfig'] != null
          ? ProductionVariantRoutingConfig.fromJson(
              json['RoutingConfig'] as Map<String, dynamic>)
          : null,
      variantStatus: (json['VariantStatus'] as List?)
          ?.nonNulls
          .map((e) =>
              ProductionVariantStatus.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final variantName = this.variantName;
    final currentInstanceCount = this.currentInstanceCount;
    final currentServerlessConfig = this.currentServerlessConfig;
    final currentWeight = this.currentWeight;
    final deployedImages = this.deployedImages;
    final desiredInstanceCount = this.desiredInstanceCount;
    final desiredServerlessConfig = this.desiredServerlessConfig;
    final desiredWeight = this.desiredWeight;
    final managedInstanceScaling = this.managedInstanceScaling;
    final routingConfig = this.routingConfig;
    final variantStatus = this.variantStatus;
    return {
      'VariantName': variantName,
      if (currentInstanceCount != null)
        'CurrentInstanceCount': currentInstanceCount,
      if (currentServerlessConfig != null)
        'CurrentServerlessConfig': currentServerlessConfig,
      if (currentWeight != null) 'CurrentWeight': currentWeight,
      if (deployedImages != null) 'DeployedImages': deployedImages,
      if (desiredInstanceCount != null)
        'DesiredInstanceCount': desiredInstanceCount,
      if (desiredServerlessConfig != null)
        'DesiredServerlessConfig': desiredServerlessConfig,
      if (desiredWeight != null) 'DesiredWeight': desiredWeight,
      if (managedInstanceScaling != null)
        'ManagedInstanceScaling': managedInstanceScaling,
      if (routingConfig != null) 'RoutingConfig': routingConfig,
      if (variantStatus != null) 'VariantStatus': variantStatus,
    };
  }
}

/// Configuration information for Amazon SageMaker Debugger system monitoring,
/// framework profiling, and storage paths.
class ProfilerConfig {
  /// Configuration to turn off Amazon SageMaker Debugger's system monitoring and
  /// profiling functionality. To turn it off, set to <code>True</code>.
  final bool? disableProfiler;

  /// A time interval for capturing system metrics in milliseconds. Available
  /// values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1
  /// minute) milliseconds. The default value is 500 milliseconds.
  final int? profilingIntervalInMilliseconds;

  /// Configuration information for capturing framework metrics. Available key
  /// strings for different profiling options are
  /// <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>,
  /// and <code>DataLoaderProfilingConfig</code>. The following codes are
  /// configuration structures for the <code>ProfilingParameters</code> parameter.
  /// To learn more about how to configure the <code>ProfilingParameters</code>
  /// parameter, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
  /// the SageMaker and Debugger Configuration API Operations to Create, Update,
  /// and Debug Your Training Job</a>.
  final Map<String, String>? profilingParameters;

  /// Path to Amazon S3 storage location for system and framework metrics.
  final String? s3OutputPath;

  ProfilerConfig({
    this.disableProfiler,
    this.profilingIntervalInMilliseconds,
    this.profilingParameters,
    this.s3OutputPath,
  });

  factory ProfilerConfig.fromJson(Map<String, dynamic> json) {
    return ProfilerConfig(
      disableProfiler: json['DisableProfiler'] as bool?,
      profilingIntervalInMilliseconds:
          json['ProfilingIntervalInMilliseconds'] as int?,
      profilingParameters:
          (json['ProfilingParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
      s3OutputPath: json['S3OutputPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final disableProfiler = this.disableProfiler;
    final profilingIntervalInMilliseconds =
        this.profilingIntervalInMilliseconds;
    final profilingParameters = this.profilingParameters;
    final s3OutputPath = this.s3OutputPath;
    return {
      if (disableProfiler != null) 'DisableProfiler': disableProfiler,
      if (profilingIntervalInMilliseconds != null)
        'ProfilingIntervalInMilliseconds': profilingIntervalInMilliseconds,
      if (profilingParameters != null)
        'ProfilingParameters': profilingParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

/// Configuration information for updating the Amazon SageMaker Debugger profile
/// parameters, system and framework metrics configurations, and storage paths.
class ProfilerConfigForUpdate {
  /// To turn off Amazon SageMaker Debugger monitoring and profiling while a
  /// training job is in progress, set to <code>True</code>.
  final bool? disableProfiler;

  /// A time interval for capturing system metrics in milliseconds. Available
  /// values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1
  /// minute) milliseconds. The default value is 500 milliseconds.
  final int? profilingIntervalInMilliseconds;

  /// Configuration information for capturing framework metrics. Available key
  /// strings for different profiling options are
  /// <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>,
  /// and <code>DataLoaderProfilingConfig</code>. The following codes are
  /// configuration structures for the <code>ProfilingParameters</code> parameter.
  /// To learn more about how to configure the <code>ProfilingParameters</code>
  /// parameter, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use
  /// the SageMaker and Debugger Configuration API Operations to Create, Update,
  /// and Debug Your Training Job</a>.
  final Map<String, String>? profilingParameters;

  /// Path to Amazon S3 storage location for system and framework metrics.
  final String? s3OutputPath;

  ProfilerConfigForUpdate({
    this.disableProfiler,
    this.profilingIntervalInMilliseconds,
    this.profilingParameters,
    this.s3OutputPath,
  });

  Map<String, dynamic> toJson() {
    final disableProfiler = this.disableProfiler;
    final profilingIntervalInMilliseconds =
        this.profilingIntervalInMilliseconds;
    final profilingParameters = this.profilingParameters;
    final s3OutputPath = this.s3OutputPath;
    return {
      if (disableProfiler != null) 'DisableProfiler': disableProfiler,
      if (profilingIntervalInMilliseconds != null)
        'ProfilingIntervalInMilliseconds': profilingIntervalInMilliseconds,
      if (profilingParameters != null)
        'ProfilingParameters': profilingParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

/// Configuration information for profiling rules.
class ProfilerRuleConfiguration {
  /// The name of the rule configuration. It must be unique relative to other rule
  /// configuration names.
  final String ruleConfigurationName;

  /// The Amazon Elastic Container Registry Image for the managed rule evaluation.
  final String ruleEvaluatorImage;

  /// The instance type to deploy a custom rule for profiling a training job.
  final ProcessingInstanceType? instanceType;

  /// Path to local storage location for output of rules. Defaults to
  /// <code>/opt/ml/processing/output/rule/</code>.
  final String? localPath;

  /// Runtime configuration for rule container.
  final Map<String, String>? ruleParameters;

  /// Path to Amazon S3 storage location for rules.
  final String? s3OutputPath;

  /// The size, in GB, of the ML storage volume attached to the processing
  /// instance.
  final int? volumeSizeInGB;

  ProfilerRuleConfiguration({
    required this.ruleConfigurationName,
    required this.ruleEvaluatorImage,
    this.instanceType,
    this.localPath,
    this.ruleParameters,
    this.s3OutputPath,
    this.volumeSizeInGB,
  });

  factory ProfilerRuleConfiguration.fromJson(Map<String, dynamic> json) {
    return ProfilerRuleConfiguration(
      ruleConfigurationName: json['RuleConfigurationName'] as String,
      ruleEvaluatorImage: json['RuleEvaluatorImage'] as String,
      instanceType: (json['InstanceType'] as String?)
          ?.let(ProcessingInstanceType.fromString),
      localPath: json['LocalPath'] as String?,
      ruleParameters: (json['RuleParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      s3OutputPath: json['S3OutputPath'] as String?,
      volumeSizeInGB: json['VolumeSizeInGB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluatorImage = this.ruleEvaluatorImage;
    final instanceType = this.instanceType;
    final localPath = this.localPath;
    final ruleParameters = this.ruleParameters;
    final s3OutputPath = this.s3OutputPath;
    final volumeSizeInGB = this.volumeSizeInGB;
    return {
      'RuleConfigurationName': ruleConfigurationName,
      'RuleEvaluatorImage': ruleEvaluatorImage,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (localPath != null) 'LocalPath': localPath,
      if (ruleParameters != null) 'RuleParameters': ruleParameters,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
      if (volumeSizeInGB != null) 'VolumeSizeInGB': volumeSizeInGB,
    };
  }
}

/// Information about the status of the rule evaluation.
class ProfilerRuleEvaluationStatus {
  /// Timestamp when the rule evaluation status was last modified.
  final DateTime? lastModifiedTime;

  /// The name of the rule configuration.
  final String? ruleConfigurationName;

  /// The Amazon Resource Name (ARN) of the rule evaluation job.
  final String? ruleEvaluationJobArn;

  /// Status of the rule evaluation.
  final RuleEvaluationStatus? ruleEvaluationStatus;

  /// Details from the rule evaluation.
  final String? statusDetails;

  ProfilerRuleEvaluationStatus({
    this.lastModifiedTime,
    this.ruleConfigurationName,
    this.ruleEvaluationJobArn,
    this.ruleEvaluationStatus,
    this.statusDetails,
  });

  factory ProfilerRuleEvaluationStatus.fromJson(Map<String, dynamic> json) {
    return ProfilerRuleEvaluationStatus(
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      ruleConfigurationName: json['RuleConfigurationName'] as String?,
      ruleEvaluationJobArn: json['RuleEvaluationJobArn'] as String?,
      ruleEvaluationStatus: (json['RuleEvaluationStatus'] as String?)
          ?.let(RuleEvaluationStatus.fromString),
      statusDetails: json['StatusDetails'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final lastModifiedTime = this.lastModifiedTime;
    final ruleConfigurationName = this.ruleConfigurationName;
    final ruleEvaluationJobArn = this.ruleEvaluationJobArn;
    final ruleEvaluationStatus = this.ruleEvaluationStatus;
    final statusDetails = this.statusDetails;
    return {
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (ruleConfigurationName != null)
        'RuleConfigurationName': ruleConfigurationName,
      if (ruleEvaluationJobArn != null)
        'RuleEvaluationJobArn': ruleEvaluationJobArn,
      if (ruleEvaluationStatus != null)
        'RuleEvaluationStatus': ruleEvaluationStatus.value,
      if (statusDetails != null) 'StatusDetails': statusDetails,
    };
  }
}

enum ProfilingStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const ProfilingStatus(this.value);

  static ProfilingStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ProfilingStatus'));
}

/// The properties of a project as returned by the Search API.
class Project {
  /// Who created the project.
  final UserContext? createdBy;

  /// A timestamp specifying when the project was created.
  final DateTime? creationTime;
  final UserContext? lastModifiedBy;

  /// A timestamp container for when the project was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the project.
  final String? projectArn;

  /// The description of the project.
  final String? projectDescription;

  /// The ID of the project.
  final String? projectId;

  /// The name of the project.
  final String? projectName;

  /// The status of the project.
  final ProjectStatus? projectStatus;
  final ServiceCatalogProvisionedProductDetails?
      serviceCatalogProvisionedProductDetails;
  final ServiceCatalogProvisioningDetails? serviceCatalogProvisioningDetails;

  /// An array of key-value pairs. You can use tags to categorize your Amazon Web
  /// Services resources in different ways, for example, by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  final List<Tag>? tags;

  Project({
    this.createdBy,
    this.creationTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.projectArn,
    this.projectDescription,
    this.projectId,
    this.projectName,
    this.projectStatus,
    this.serviceCatalogProvisionedProductDetails,
    this.serviceCatalogProvisioningDetails,
    this.tags,
  });

  factory Project.fromJson(Map<String, dynamic> json) {
    return Project(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      projectArn: json['ProjectArn'] as String?,
      projectDescription: json['ProjectDescription'] as String?,
      projectId: json['ProjectId'] as String?,
      projectName: json['ProjectName'] as String?,
      projectStatus:
          (json['ProjectStatus'] as String?)?.let(ProjectStatus.fromString),
      serviceCatalogProvisionedProductDetails:
          json['ServiceCatalogProvisionedProductDetails'] != null
              ? ServiceCatalogProvisionedProductDetails.fromJson(
                  json['ServiceCatalogProvisionedProductDetails']
                      as Map<String, dynamic>)
              : null,
      serviceCatalogProvisioningDetails:
          json['ServiceCatalogProvisioningDetails'] != null
              ? ServiceCatalogProvisioningDetails.fromJson(
                  json['ServiceCatalogProvisioningDetails']
                      as Map<String, dynamic>)
              : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final projectArn = this.projectArn;
    final projectDescription = this.projectDescription;
    final projectId = this.projectId;
    final projectName = this.projectName;
    final projectStatus = this.projectStatus;
    final serviceCatalogProvisionedProductDetails =
        this.serviceCatalogProvisionedProductDetails;
    final serviceCatalogProvisioningDetails =
        this.serviceCatalogProvisioningDetails;
    final tags = this.tags;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (projectArn != null) 'ProjectArn': projectArn,
      if (projectDescription != null) 'ProjectDescription': projectDescription,
      if (projectId != null) 'ProjectId': projectId,
      if (projectName != null) 'ProjectName': projectName,
      if (projectStatus != null) 'ProjectStatus': projectStatus.value,
      if (serviceCatalogProvisionedProductDetails != null)
        'ServiceCatalogProvisionedProductDetails':
            serviceCatalogProvisionedProductDetails,
      if (serviceCatalogProvisioningDetails != null)
        'ServiceCatalogProvisioningDetails': serviceCatalogProvisioningDetails,
      if (tags != null) 'Tags': tags,
    };
  }
}

enum ProjectSortBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const ProjectSortBy(this.value);

  static ProjectSortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ProjectSortBy'));
}

enum ProjectSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const ProjectSortOrder(this.value);

  static ProjectSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ProjectSortOrder'));
}

enum ProjectStatus {
  pending('Pending'),
  createInProgress('CreateInProgress'),
  createCompleted('CreateCompleted'),
  createFailed('CreateFailed'),
  deleteInProgress('DeleteInProgress'),
  deleteFailed('DeleteFailed'),
  deleteCompleted('DeleteCompleted'),
  updateInProgress('UpdateInProgress'),
  updateCompleted('UpdateCompleted'),
  updateFailed('UpdateFailed'),
  ;

  final String value;

  const ProjectStatus(this.value);

  static ProjectStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ProjectStatus'));
}

/// Information about a project.
class ProjectSummary {
  /// The time that the project was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  /// The ID of the project.
  final String projectId;

  /// The name of the project.
  final String projectName;

  /// The status of the project.
  final ProjectStatus projectStatus;

  /// The description of the project.
  final String? projectDescription;

  ProjectSummary({
    required this.creationTime,
    required this.projectArn,
    required this.projectId,
    required this.projectName,
    required this.projectStatus,
    this.projectDescription,
  });

  factory ProjectSummary.fromJson(Map<String, dynamic> json) {
    return ProjectSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      projectArn: json['ProjectArn'] as String,
      projectId: json['ProjectId'] as String,
      projectName: json['ProjectName'] as String,
      projectStatus:
          ProjectStatus.fromString((json['ProjectStatus'] as String)),
      projectDescription: json['ProjectDescription'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final projectArn = this.projectArn;
    final projectId = this.projectId;
    final projectName = this.projectName;
    final projectStatus = this.projectStatus;
    final projectDescription = this.projectDescription;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'ProjectArn': projectArn,
      'ProjectId': projectId,
      'ProjectName': projectName,
      'ProjectStatus': projectStatus.value,
      if (projectDescription != null) 'ProjectDescription': projectDescription,
    };
  }
}

/// Part of the <code>SuggestionQuery</code> type. Specifies a hint for
/// retrieving property names that begin with the specified text.
class PropertyNameQuery {
  /// Text that begins a property's name.
  final String propertyNameHint;

  PropertyNameQuery({
    required this.propertyNameHint,
  });

  Map<String, dynamic> toJson() {
    final propertyNameHint = this.propertyNameHint;
    return {
      'PropertyNameHint': propertyNameHint,
    };
  }
}

/// A property name returned from a <code>GetSearchSuggestions</code> call that
/// specifies a value in the <code>PropertyNameQuery</code> field.
class PropertyNameSuggestion {
  /// A suggested property name based on what you entered in the search textbox in
  /// the SageMaker console.
  final String? propertyName;

  PropertyNameSuggestion({
    this.propertyName,
  });

  factory PropertyNameSuggestion.fromJson(Map<String, dynamic> json) {
    return PropertyNameSuggestion(
      propertyName: json['PropertyName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final propertyName = this.propertyName;
    return {
      if (propertyName != null) 'PropertyName': propertyName,
    };
  }
}

/// A key value pair used when you provision a project as a service catalog
/// product. For information, see <a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ProvisioningParameter {
  /// The key that identifies a provisioning parameter.
  final String? key;

  /// The value of the provisioning parameter.
  final String? value;

  ProvisioningParameter({
    this.key,
    this.value,
  });

  factory ProvisioningParameter.fromJson(Map<String, dynamic> json) {
    return ProvisioningParameter(
      key: json['Key'] as String?,
      value: json['Value'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

/// Defines the amount of money paid to an Amazon Mechanical Turk worker for
/// each task performed.
///
/// Use one of the following prices for bounding box tasks. Prices are in US
/// dollars and should be based on the complexity of the task; the longer it
/// takes in your initial testing, the more you should offer.
///
/// <ul>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 1.200
/// </li>
/// </ul>
/// Use one of the following prices for image classification, text
/// classification, and custom tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 0.012
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 1.200
/// </li>
/// </ul>
/// Use one of the following prices for semantic segmentation tasks. Prices are
/// in US dollars.
///
/// <ul>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 1.200
/// </li>
/// </ul>
/// Use one of the following prices for Textract AnalyzeDocument Important Form
/// Key Amazon Augmented AI review tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 2.400
/// </li>
/// <li>
/// 2.280
/// </li>
/// <li>
/// 2.160
/// </li>
/// <li>
/// 2.040
/// </li>
/// <li>
/// 1.920
/// </li>
/// <li>
/// 1.800
/// </li>
/// <li>
/// 1.680
/// </li>
/// <li>
/// 1.560
/// </li>
/// <li>
/// 1.440
/// </li>
/// <li>
/// 1.320
/// </li>
/// <li>
/// 1.200
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.012
/// </li>
/// </ul>
/// Use one of the following prices for Rekognition DetectModerationLabels
/// Amazon Augmented AI review tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 1.200
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.012
/// </li>
/// </ul>
/// Use one of the following prices for Amazon Augmented AI custom human review
/// tasks. Prices are in US dollars.
///
/// <ul>
/// <li>
/// 1.200
/// </li>
/// <li>
/// 1.080
/// </li>
/// <li>
/// 0.960
/// </li>
/// <li>
/// 0.840
/// </li>
/// <li>
/// 0.720
/// </li>
/// <li>
/// 0.600
/// </li>
/// <li>
/// 0.480
/// </li>
/// <li>
/// 0.360
/// </li>
/// <li>
/// 0.240
/// </li>
/// <li>
/// 0.120
/// </li>
/// <li>
/// 0.072
/// </li>
/// <li>
/// 0.060
/// </li>
/// <li>
/// 0.048
/// </li>
/// <li>
/// 0.036
/// </li>
/// <li>
/// 0.024
/// </li>
/// <li>
/// 0.012
/// </li>
/// </ul>
class PublicWorkforceTaskPrice {
  /// Defines the amount of money paid to an Amazon Mechanical Turk worker in
  /// United States dollars.
  final USD? amountInUsd;

  PublicWorkforceTaskPrice({
    this.amountInUsd,
  });

  factory PublicWorkforceTaskPrice.fromJson(Map<String, dynamic> json) {
    return PublicWorkforceTaskPrice(
      amountInUsd: json['AmountInUsd'] != null
          ? USD.fromJson(json['AmountInUsd'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final amountInUsd = this.amountInUsd;
    return {
      if (amountInUsd != null) 'AmountInUsd': amountInUsd,
    };
  }
}

class PutModelPackageGroupPolicyOutput {
  /// The Amazon Resource Name (ARN) of the model package group.
  final String modelPackageGroupArn;

  PutModelPackageGroupPolicyOutput({
    required this.modelPackageGroupArn,
  });

  factory PutModelPackageGroupPolicyOutput.fromJson(Map<String, dynamic> json) {
    return PutModelPackageGroupPolicyOutput(
      modelPackageGroupArn: json['ModelPackageGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageGroupArn = this.modelPackageGroupArn;
    return {
      'ModelPackageGroupArn': modelPackageGroupArn,
    };
  }
}

/// Container for the metadata for a Quality check step. For more information,
/// see the topic on <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check">QualityCheck
/// step</a> in the <i>Amazon SageMaker Developer Guide</i>.
class QualityCheckStepMetadata {
  /// The Amazon S3 URI of the baseline constraints file used for the drift check.
  final String? baselineUsedForDriftCheckConstraints;

  /// The Amazon S3 URI of the baseline statistics file used for the drift check.
  final String? baselineUsedForDriftCheckStatistics;

  /// The Amazon S3 URI of the newly calculated baseline constraints file.
  final String? calculatedBaselineConstraints;

  /// The Amazon S3 URI of the newly calculated baseline statistics file.
  final String? calculatedBaselineStatistics;

  /// The Amazon Resource Name (ARN) of the Quality check processing job that was
  /// run by this step execution.
  final String? checkJobArn;

  /// The type of the Quality check step.
  final String? checkType;

  /// The model package group name.
  final String? modelPackageGroupName;

  /// This flag indicates if a newly calculated baseline can be accessed through
  /// step properties <code>BaselineUsedForDriftCheckConstraints</code> and
  /// <code>BaselineUsedForDriftCheckStatistics</code>. If it is set to
  /// <code>False</code>, the previous baseline of the configured check type must
  /// also be available. These can be accessed through the
  /// <code>BaselineUsedForDriftCheckConstraints</code> and <code>
  /// BaselineUsedForDriftCheckStatistics</code> properties.
  final bool? registerNewBaseline;

  /// This flag indicates if the drift check against the previous baseline will be
  /// skipped or not. If it is set to <code>False</code>, the previous baseline of
  /// the configured check type must be available.
  final bool? skipCheck;

  /// The Amazon S3 URI of violation report if violations are detected.
  final String? violationReport;

  QualityCheckStepMetadata({
    this.baselineUsedForDriftCheckConstraints,
    this.baselineUsedForDriftCheckStatistics,
    this.calculatedBaselineConstraints,
    this.calculatedBaselineStatistics,
    this.checkJobArn,
    this.checkType,
    this.modelPackageGroupName,
    this.registerNewBaseline,
    this.skipCheck,
    this.violationReport,
  });

  factory QualityCheckStepMetadata.fromJson(Map<String, dynamic> json) {
    return QualityCheckStepMetadata(
      baselineUsedForDriftCheckConstraints:
          json['BaselineUsedForDriftCheckConstraints'] as String?,
      baselineUsedForDriftCheckStatistics:
          json['BaselineUsedForDriftCheckStatistics'] as String?,
      calculatedBaselineConstraints:
          json['CalculatedBaselineConstraints'] as String?,
      calculatedBaselineStatistics:
          json['CalculatedBaselineStatistics'] as String?,
      checkJobArn: json['CheckJobArn'] as String?,
      checkType: json['CheckType'] as String?,
      modelPackageGroupName: json['ModelPackageGroupName'] as String?,
      registerNewBaseline: json['RegisterNewBaseline'] as bool?,
      skipCheck: json['SkipCheck'] as bool?,
      violationReport: json['ViolationReport'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final baselineUsedForDriftCheckConstraints =
        this.baselineUsedForDriftCheckConstraints;
    final baselineUsedForDriftCheckStatistics =
        this.baselineUsedForDriftCheckStatistics;
    final calculatedBaselineConstraints = this.calculatedBaselineConstraints;
    final calculatedBaselineStatistics = this.calculatedBaselineStatistics;
    final checkJobArn = this.checkJobArn;
    final checkType = this.checkType;
    final modelPackageGroupName = this.modelPackageGroupName;
    final registerNewBaseline = this.registerNewBaseline;
    final skipCheck = this.skipCheck;
    final violationReport = this.violationReport;
    return {
      if (baselineUsedForDriftCheckConstraints != null)
        'BaselineUsedForDriftCheckConstraints':
            baselineUsedForDriftCheckConstraints,
      if (baselineUsedForDriftCheckStatistics != null)
        'BaselineUsedForDriftCheckStatistics':
            baselineUsedForDriftCheckStatistics,
      if (calculatedBaselineConstraints != null)
        'CalculatedBaselineConstraints': calculatedBaselineConstraints,
      if (calculatedBaselineStatistics != null)
        'CalculatedBaselineStatistics': calculatedBaselineStatistics,
      if (checkJobArn != null) 'CheckJobArn': checkJobArn,
      if (checkType != null) 'CheckType': checkType,
      if (modelPackageGroupName != null)
        'ModelPackageGroupName': modelPackageGroupName,
      if (registerNewBaseline != null)
        'RegisterNewBaseline': registerNewBaseline,
      if (skipCheck != null) 'SkipCheck': skipCheck,
      if (violationReport != null) 'ViolationReport': violationReport,
    };
  }
}

/// A set of filters to narrow the set of lineage entities connected to the
/// <code>StartArn</code>(s) returned by the <code>QueryLineage</code> API
/// action.
class QueryFilters {
  /// Filter the lineage entities connected to the <code>StartArn</code>(s) after
  /// the create date.
  final DateTime? createdAfter;

  /// Filter the lineage entities connected to the <code>StartArn</code>(s) by
  /// created date.
  final DateTime? createdBefore;

  /// Filter the lineage entities connected to the <code>StartArn</code>(s) by the
  /// type of the lineage entity.
  final List<LineageType>? lineageTypes;

  /// Filter the lineage entities connected to the <code>StartArn</code>(s) after
  /// the last modified date.
  final DateTime? modifiedAfter;

  /// Filter the lineage entities connected to the <code>StartArn</code>(s) before
  /// the last modified date.
  final DateTime? modifiedBefore;

  /// Filter the lineage entities connected to the <code>StartArn</code>(s) by a
  /// set if property key value pairs. If multiple pairs are provided, an entity
  /// is included in the results if it matches any of the provided pairs.
  final Map<String, String>? properties;

  /// Filter the lineage entities connected to the <code>StartArn</code> by type.
  /// For example: <code>DataSet</code>, <code>Model</code>,
  /// <code>Endpoint</code>, or <code>ModelDeployment</code>.
  final List<String>? types;

  QueryFilters({
    this.createdAfter,
    this.createdBefore,
    this.lineageTypes,
    this.modifiedAfter,
    this.modifiedBefore,
    this.properties,
    this.types,
  });

  Map<String, dynamic> toJson() {
    final createdAfter = this.createdAfter;
    final createdBefore = this.createdBefore;
    final lineageTypes = this.lineageTypes;
    final modifiedAfter = this.modifiedAfter;
    final modifiedBefore = this.modifiedBefore;
    final properties = this.properties;
    final types = this.types;
    return {
      if (createdAfter != null)
        'CreatedAfter': unixTimestampToJson(createdAfter),
      if (createdBefore != null)
        'CreatedBefore': unixTimestampToJson(createdBefore),
      if (lineageTypes != null)
        'LineageTypes': lineageTypes.map((e) => e.value).toList(),
      if (modifiedAfter != null)
        'ModifiedAfter': unixTimestampToJson(modifiedAfter),
      if (modifiedBefore != null)
        'ModifiedBefore': unixTimestampToJson(modifiedBefore),
      if (properties != null) 'Properties': properties,
      if (types != null) 'Types': types,
    };
  }
}

class QueryLineageResponse {
  /// A list of edges that connect vertices in the response.
  final List<Edge>? edges;

  /// Limits the number of vertices in the response. Use the
  /// <code>NextToken</code> in a response to to retrieve the next page of
  /// results.
  final String? nextToken;

  /// A list of vertices connected to the start entity(ies) in the lineage graph.
  final List<Vertex>? vertices;

  QueryLineageResponse({
    this.edges,
    this.nextToken,
    this.vertices,
  });

  factory QueryLineageResponse.fromJson(Map<String, dynamic> json) {
    return QueryLineageResponse(
      edges: (json['Edges'] as List?)
          ?.nonNulls
          .map((e) => Edge.fromJson(e as Map<String, dynamic>))
          .toList(),
      nextToken: json['NextToken'] as String?,
      vertices: (json['Vertices'] as List?)
          ?.nonNulls
          .map((e) => Vertex.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final edges = this.edges;
    final nextToken = this.nextToken;
    final vertices = this.vertices;
    return {
      if (edges != null) 'Edges': edges,
      if (nextToken != null) 'NextToken': nextToken,
      if (vertices != null) 'Vertices': vertices,
    };
  }
}

/// A collection of settings that apply to an <code>RSessionGateway</code> app.
class RSessionAppSettings {
  /// A list of custom SageMaker images that are configured to run as a RSession
  /// app.
  final List<CustomImage>? customImages;
  final ResourceSpec? defaultResourceSpec;

  RSessionAppSettings({
    this.customImages,
    this.defaultResourceSpec,
  });

  factory RSessionAppSettings.fromJson(Map<String, dynamic> json) {
    return RSessionAppSettings(
      customImages: (json['CustomImages'] as List?)
          ?.nonNulls
          .map((e) => CustomImage.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final customImages = this.customImages;
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (customImages != null) 'CustomImages': customImages,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

enum RStudioServerProAccessStatus {
  enabled('ENABLED'),
  disabled('DISABLED'),
  ;

  final String value;

  const RStudioServerProAccessStatus(this.value);

  static RStudioServerProAccessStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RStudioServerProAccessStatus'));
}

/// A collection of settings that configure user interaction with the
/// <code>RStudioServerPro</code> app.
class RStudioServerProAppSettings {
  /// Indicates whether the current user has access to the
  /// <code>RStudioServerPro</code> app.
  final RStudioServerProAccessStatus? accessStatus;

  /// The level of permissions that the user has within the
  /// <code>RStudioServerPro</code> app. This value defaults to `User`. The
  /// `Admin` value allows the user access to the RStudio Administrative
  /// Dashboard.
  final RStudioServerProUserGroup? userGroup;

  RStudioServerProAppSettings({
    this.accessStatus,
    this.userGroup,
  });

  factory RStudioServerProAppSettings.fromJson(Map<String, dynamic> json) {
    return RStudioServerProAppSettings(
      accessStatus: (json['AccessStatus'] as String?)
          ?.let(RStudioServerProAccessStatus.fromString),
      userGroup: (json['UserGroup'] as String?)
          ?.let(RStudioServerProUserGroup.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final accessStatus = this.accessStatus;
    final userGroup = this.userGroup;
    return {
      if (accessStatus != null) 'AccessStatus': accessStatus.value,
      if (userGroup != null) 'UserGroup': userGroup.value,
    };
  }
}

/// A collection of settings that configure the <code>RStudioServerPro</code>
/// Domain-level app.
class RStudioServerProDomainSettings {
  /// The ARN of the execution role for the <code>RStudioServerPro</code>
  /// Domain-level app.
  final String domainExecutionRoleArn;
  final ResourceSpec? defaultResourceSpec;

  /// A URL pointing to an RStudio Connect server.
  final String? rStudioConnectUrl;

  /// A URL pointing to an RStudio Package Manager server.
  final String? rStudioPackageManagerUrl;

  RStudioServerProDomainSettings({
    required this.domainExecutionRoleArn,
    this.defaultResourceSpec,
    this.rStudioConnectUrl,
    this.rStudioPackageManagerUrl,
  });

  factory RStudioServerProDomainSettings.fromJson(Map<String, dynamic> json) {
    return RStudioServerProDomainSettings(
      domainExecutionRoleArn: json['DomainExecutionRoleArn'] as String,
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
      rStudioConnectUrl: json['RStudioConnectUrl'] as String?,
      rStudioPackageManagerUrl: json['RStudioPackageManagerUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainExecutionRoleArn = this.domainExecutionRoleArn;
    final defaultResourceSpec = this.defaultResourceSpec;
    final rStudioConnectUrl = this.rStudioConnectUrl;
    final rStudioPackageManagerUrl = this.rStudioPackageManagerUrl;
    return {
      'DomainExecutionRoleArn': domainExecutionRoleArn,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
      if (rStudioConnectUrl != null) 'RStudioConnectUrl': rStudioConnectUrl,
      if (rStudioPackageManagerUrl != null)
        'RStudioPackageManagerUrl': rStudioPackageManagerUrl,
    };
  }
}

/// A collection of settings that update the current configuration for the
/// <code>RStudioServerPro</code> Domain-level app.
class RStudioServerProDomainSettingsForUpdate {
  /// The execution role for the <code>RStudioServerPro</code> Domain-level app.
  final String domainExecutionRoleArn;
  final ResourceSpec? defaultResourceSpec;

  /// A URL pointing to an RStudio Connect server.
  final String? rStudioConnectUrl;

  /// A URL pointing to an RStudio Package Manager server.
  final String? rStudioPackageManagerUrl;

  RStudioServerProDomainSettingsForUpdate({
    required this.domainExecutionRoleArn,
    this.defaultResourceSpec,
    this.rStudioConnectUrl,
    this.rStudioPackageManagerUrl,
  });

  Map<String, dynamic> toJson() {
    final domainExecutionRoleArn = this.domainExecutionRoleArn;
    final defaultResourceSpec = this.defaultResourceSpec;
    final rStudioConnectUrl = this.rStudioConnectUrl;
    final rStudioPackageManagerUrl = this.rStudioPackageManagerUrl;
    return {
      'DomainExecutionRoleArn': domainExecutionRoleArn,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
      if (rStudioConnectUrl != null) 'RStudioConnectUrl': rStudioConnectUrl,
      if (rStudioPackageManagerUrl != null)
        'RStudioPackageManagerUrl': rStudioPackageManagerUrl,
    };
  }
}

enum RStudioServerProUserGroup {
  rStudioAdmin('R_STUDIO_ADMIN'),
  rStudioUser('R_STUDIO_USER'),
  ;

  final String value;

  const RStudioServerProUserGroup(this.value);

  static RStudioServerProUserGroup fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RStudioServerProUserGroup'));
}

/// The infrastructure configuration for deploying the model to a real-time
/// inference endpoint.
class RealTimeInferenceConfig {
  /// The number of instances of the type specified by <code>InstanceType</code>.
  final int instanceCount;

  /// The instance type the model is deployed to.
  final InstanceType instanceType;

  RealTimeInferenceConfig({
    required this.instanceCount,
    required this.instanceType,
  });

  factory RealTimeInferenceConfig.fromJson(Map<String, dynamic> json) {
    return RealTimeInferenceConfig(
      instanceCount: json['InstanceCount'] as int,
      instanceType: InstanceType.fromString((json['InstanceType'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.value,
    };
  }
}

/// The recommended configuration to use for Real-Time Inference.
class RealTimeInferenceRecommendation {
  /// The recommended instance type for Real-Time Inference.
  final ProductionVariantInstanceType instanceType;

  /// The recommendation ID which uniquely identifies each recommendation.
  final String recommendationId;

  /// The recommended environment variables to set in the model container for
  /// Real-Time Inference.
  final Map<String, String>? environment;

  RealTimeInferenceRecommendation({
    required this.instanceType,
    required this.recommendationId,
    this.environment,
  });

  factory RealTimeInferenceRecommendation.fromJson(Map<String, dynamic> json) {
    return RealTimeInferenceRecommendation(
      instanceType: ProductionVariantInstanceType.fromString(
          (json['InstanceType'] as String)),
      recommendationId: json['RecommendationId'] as String,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final instanceType = this.instanceType;
    final recommendationId = this.recommendationId;
    final environment = this.environment;
    return {
      'InstanceType': instanceType.value,
      'RecommendationId': recommendationId,
      if (environment != null) 'Environment': environment,
    };
  }
}

/// Provides information about the output configuration for the compiled model.
class RecommendationJobCompiledOutputConfig {
  /// Identifies the Amazon S3 bucket where you want SageMaker to store the
  /// compiled model artifacts.
  final String? s3OutputUri;

  RecommendationJobCompiledOutputConfig({
    this.s3OutputUri,
  });

  Map<String, dynamic> toJson() {
    final s3OutputUri = this.s3OutputUri;
    return {
      if (s3OutputUri != null) 'S3OutputUri': s3OutputUri,
    };
  }
}

/// Specifies mandatory fields for running an Inference Recommender job directly
/// in the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a>
/// API. The fields specified in <code>ContainerConfig</code> override the
/// corresponding fields in the model package. Use <code>ContainerConfig</code>
/// if you want to specify these fields for the recommendation job but don't
/// want to edit them in your model package.
class RecommendationJobContainerConfig {
  /// Specifies the name and shape of the expected data inputs for your trained
  /// model with a JSON dictionary form. This field is used for optimizing your
  /// model using SageMaker Neo. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_InputConfig.html#sagemaker-Type-InputConfig-DataInputConfig">DataInputConfig</a>.
  final String? dataInputConfig;

  /// The machine learning domain of the model and its components.
  ///
  /// Valid Values: <code>COMPUTER_VISION | NATURAL_LANGUAGE_PROCESSING |
  /// MACHINE_LEARNING</code>
  final String? domain;

  /// The machine learning framework of the container image.
  ///
  /// Valid Values: <code>TENSORFLOW | PYTORCH | XGBOOST |
  /// SAGEMAKER-SCIKIT-LEARN</code>
  final String? framework;

  /// The framework version of the container image.
  final String? frameworkVersion;

  /// The name of a pre-trained machine learning model benchmarked by Amazon
  /// SageMaker Inference Recommender that matches your model.
  ///
  /// Valid Values: <code>efficientnetb7 | unet | xgboost | faster-rcnn-resnet101
  /// | nasnetlarge | vgg16 | inception-v3 | mask-rcnn | sagemaker-scikit-learn |
  /// densenet201-gluon | resnet18v2-gluon | xception | densenet201 | yolov4 |
  /// resnet152 | bert-base-cased | xceptionV1-keras | resnet50 | retinanet</code>
  final String? nearestModelName;

  /// Specifies the <code>SamplePayloadUrl</code> and all other sample
  /// payload-related fields.
  final RecommendationJobPayloadConfig? payloadConfig;

  /// The endpoint type to receive recommendations for. By default this is null,
  /// and the results of the inference recommendation job return a combined list
  /// of both real-time and serverless benchmarks. By specifying a value for this
  /// field, you can receive a longer list of benchmarks for the desired endpoint
  /// type.
  final RecommendationJobSupportedEndpointType? supportedEndpointType;

  /// A list of the instance types that are used to generate inferences in
  /// real-time.
  final List<String>? supportedInstanceTypes;

  /// The supported MIME types for the output data.
  final List<String>? supportedResponseMIMETypes;

  /// The machine learning task that the model accomplishes.
  ///
  /// Valid Values: <code>IMAGE_CLASSIFICATION | OBJECT_DETECTION |
  /// TEXT_GENERATION | IMAGE_SEGMENTATION | FILL_MASK | CLASSIFICATION |
  /// REGRESSION | OTHER</code>
  final String? task;

  RecommendationJobContainerConfig({
    this.dataInputConfig,
    this.domain,
    this.framework,
    this.frameworkVersion,
    this.nearestModelName,
    this.payloadConfig,
    this.supportedEndpointType,
    this.supportedInstanceTypes,
    this.supportedResponseMIMETypes,
    this.task,
  });

  factory RecommendationJobContainerConfig.fromJson(Map<String, dynamic> json) {
    return RecommendationJobContainerConfig(
      dataInputConfig: json['DataInputConfig'] as String?,
      domain: json['Domain'] as String?,
      framework: json['Framework'] as String?,
      frameworkVersion: json['FrameworkVersion'] as String?,
      nearestModelName: json['NearestModelName'] as String?,
      payloadConfig: json['PayloadConfig'] != null
          ? RecommendationJobPayloadConfig.fromJson(
              json['PayloadConfig'] as Map<String, dynamic>)
          : null,
      supportedEndpointType: (json['SupportedEndpointType'] as String?)
          ?.let(RecommendationJobSupportedEndpointType.fromString),
      supportedInstanceTypes: (json['SupportedInstanceTypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      supportedResponseMIMETypes: (json['SupportedResponseMIMETypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      task: json['Task'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final dataInputConfig = this.dataInputConfig;
    final domain = this.domain;
    final framework = this.framework;
    final frameworkVersion = this.frameworkVersion;
    final nearestModelName = this.nearestModelName;
    final payloadConfig = this.payloadConfig;
    final supportedEndpointType = this.supportedEndpointType;
    final supportedInstanceTypes = this.supportedInstanceTypes;
    final supportedResponseMIMETypes = this.supportedResponseMIMETypes;
    final task = this.task;
    return {
      if (dataInputConfig != null) 'DataInputConfig': dataInputConfig,
      if (domain != null) 'Domain': domain,
      if (framework != null) 'Framework': framework,
      if (frameworkVersion != null) 'FrameworkVersion': frameworkVersion,
      if (nearestModelName != null) 'NearestModelName': nearestModelName,
      if (payloadConfig != null) 'PayloadConfig': payloadConfig,
      if (supportedEndpointType != null)
        'SupportedEndpointType': supportedEndpointType.value,
      if (supportedInstanceTypes != null)
        'SupportedInstanceTypes': supportedInstanceTypes,
      if (supportedResponseMIMETypes != null)
        'SupportedResponseMIMETypes': supportedResponseMIMETypes,
      if (task != null) 'Task': task,
    };
  }
}

/// The details for a specific benchmark from an Inference Recommender job.
class RecommendationJobInferenceBenchmark {
  final ModelConfiguration modelConfiguration;
  final EndpointOutputConfiguration? endpointConfiguration;
  final InferenceMetrics? endpointMetrics;

  /// The reason why a benchmark failed.
  final String? failureReason;

  /// A timestamp that shows when the benchmark completed.
  final DateTime? invocationEndTime;

  /// A timestamp that shows when the benchmark started.
  final DateTime? invocationStartTime;
  final RecommendationMetrics? metrics;

  RecommendationJobInferenceBenchmark({
    required this.modelConfiguration,
    this.endpointConfiguration,
    this.endpointMetrics,
    this.failureReason,
    this.invocationEndTime,
    this.invocationStartTime,
    this.metrics,
  });

  factory RecommendationJobInferenceBenchmark.fromJson(
      Map<String, dynamic> json) {
    return RecommendationJobInferenceBenchmark(
      modelConfiguration: ModelConfiguration.fromJson(
          json['ModelConfiguration'] as Map<String, dynamic>),
      endpointConfiguration: json['EndpointConfiguration'] != null
          ? EndpointOutputConfiguration.fromJson(
              json['EndpointConfiguration'] as Map<String, dynamic>)
          : null,
      endpointMetrics: json['EndpointMetrics'] != null
          ? InferenceMetrics.fromJson(
              json['EndpointMetrics'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      invocationEndTime: timeStampFromJson(json['InvocationEndTime']),
      invocationStartTime: timeStampFromJson(json['InvocationStartTime']),
      metrics: json['Metrics'] != null
          ? RecommendationMetrics.fromJson(
              json['Metrics'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final modelConfiguration = this.modelConfiguration;
    final endpointConfiguration = this.endpointConfiguration;
    final endpointMetrics = this.endpointMetrics;
    final failureReason = this.failureReason;
    final invocationEndTime = this.invocationEndTime;
    final invocationStartTime = this.invocationStartTime;
    final metrics = this.metrics;
    return {
      'ModelConfiguration': modelConfiguration,
      if (endpointConfiguration != null)
        'EndpointConfiguration': endpointConfiguration,
      if (endpointMetrics != null) 'EndpointMetrics': endpointMetrics,
      if (failureReason != null) 'FailureReason': failureReason,
      if (invocationEndTime != null)
        'InvocationEndTime': unixTimestampToJson(invocationEndTime),
      if (invocationStartTime != null)
        'InvocationStartTime': unixTimestampToJson(invocationStartTime),
      if (metrics != null) 'Metrics': metrics,
    };
  }
}

/// The input configuration of the recommendation job.
class RecommendationJobInputConfig {
  /// Specifies mandatory fields for running an Inference Recommender job. The
  /// fields specified in <code>ContainerConfig</code> override the corresponding
  /// fields in the model package.
  final RecommendationJobContainerConfig? containerConfig;

  /// Specifies the endpoint configuration to use for a job.
  final List<EndpointInputConfiguration>? endpointConfigurations;

  /// Existing customer endpoints on which to run an Inference Recommender job.
  final List<EndpointInfo>? endpoints;

  /// Specifies the maximum duration of the job, in seconds. The maximum value is
  /// 18,000 seconds.
  final int? jobDurationInSeconds;

  /// The name of the created model.
  final String? modelName;

  /// The Amazon Resource Name (ARN) of a versioned model package.
  final String? modelPackageVersionArn;

  /// Defines the resource limit of the job.
  final RecommendationJobResourceLimit? resourceLimit;

  /// Specifies the traffic pattern of the job.
  final TrafficPattern? trafficPattern;

  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt
  /// data on the storage volume attached to the ML compute instance that hosts
  /// the endpoint. This key will be passed to SageMaker Hosting for endpoint
  /// creation.
  ///
  /// The SageMaker execution role must have <code>kms:CreateGrant</code>
  /// permission in order to encrypt data on the storage volume of the endpoints
  /// created for inference recommendation. The inference recommendation job will
  /// fail asynchronously during endpoint configuration creation if the role
  /// passed does not have <code>kms:CreateGrant</code> permission.
  ///
  /// The <code>KmsKeyId</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:&lt;region&gt;:&lt;account&gt;:key/&lt;key-id-12ab-34cd-56ef-1234567890ab&gt;"</code>
  /// </li>
  /// <li>
  /// // KMS Key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key Alias
  ///
  /// <code>"arn:aws:kms:&lt;region&gt;:&lt;account&gt;:alias/&lt;ExampleAlias&gt;"</code>
  /// </li>
  /// </ul>
  /// For more information about key identifiers, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">Key
  /// identifiers (KeyID)</a> in the Amazon Web Services Key Management Service
  /// (Amazon Web Services KMS) documentation.
  final String? volumeKmsKeyId;

  /// Inference Recommender provisions SageMaker endpoints with access to VPC in
  /// the inference recommendation job.
  final RecommendationJobVpcConfig? vpcConfig;

  RecommendationJobInputConfig({
    this.containerConfig,
    this.endpointConfigurations,
    this.endpoints,
    this.jobDurationInSeconds,
    this.modelName,
    this.modelPackageVersionArn,
    this.resourceLimit,
    this.trafficPattern,
    this.volumeKmsKeyId,
    this.vpcConfig,
  });

  factory RecommendationJobInputConfig.fromJson(Map<String, dynamic> json) {
    return RecommendationJobInputConfig(
      containerConfig: json['ContainerConfig'] != null
          ? RecommendationJobContainerConfig.fromJson(
              json['ContainerConfig'] as Map<String, dynamic>)
          : null,
      endpointConfigurations: (json['EndpointConfigurations'] as List?)
          ?.nonNulls
          .map((e) =>
              EndpointInputConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      endpoints: (json['Endpoints'] as List?)
          ?.nonNulls
          .map((e) => EndpointInfo.fromJson(e as Map<String, dynamic>))
          .toList(),
      jobDurationInSeconds: json['JobDurationInSeconds'] as int?,
      modelName: json['ModelName'] as String?,
      modelPackageVersionArn: json['ModelPackageVersionArn'] as String?,
      resourceLimit: json['ResourceLimit'] != null
          ? RecommendationJobResourceLimit.fromJson(
              json['ResourceLimit'] as Map<String, dynamic>)
          : null,
      trafficPattern: json['TrafficPattern'] != null
          ? TrafficPattern.fromJson(
              json['TrafficPattern'] as Map<String, dynamic>)
          : null,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? RecommendationJobVpcConfig.fromJson(
              json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final containerConfig = this.containerConfig;
    final endpointConfigurations = this.endpointConfigurations;
    final endpoints = this.endpoints;
    final jobDurationInSeconds = this.jobDurationInSeconds;
    final modelName = this.modelName;
    final modelPackageVersionArn = this.modelPackageVersionArn;
    final resourceLimit = this.resourceLimit;
    final trafficPattern = this.trafficPattern;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    final vpcConfig = this.vpcConfig;
    return {
      if (containerConfig != null) 'ContainerConfig': containerConfig,
      if (endpointConfigurations != null)
        'EndpointConfigurations': endpointConfigurations,
      if (endpoints != null) 'Endpoints': endpoints,
      if (jobDurationInSeconds != null)
        'JobDurationInSeconds': jobDurationInSeconds,
      if (modelName != null) 'ModelName': modelName,
      if (modelPackageVersionArn != null)
        'ModelPackageVersionArn': modelPackageVersionArn,
      if (resourceLimit != null) 'ResourceLimit': resourceLimit,
      if (trafficPattern != null) 'TrafficPattern': trafficPattern,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// Provides information about the output configuration for the compiled model.
class RecommendationJobOutputConfig {
  /// Provides information about the output configuration for the compiled model.
  final RecommendationJobCompiledOutputConfig? compiledOutputConfig;

  /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management
  /// Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt
  /// your output artifacts with Amazon S3 server-side encryption. The SageMaker
  /// execution role must have <code>kms:GenerateDataKey</code> permission.
  ///
  /// The <code>KmsKeyId</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:&lt;region&gt;:&lt;account&gt;:key/&lt;key-id-12ab-34cd-56ef-1234567890ab&gt;"</code>
  /// </li>
  /// <li>
  /// // KMS Key Alias
  ///
  /// <code>"alias/ExampleAlias"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key Alias
  ///
  /// <code>"arn:aws:kms:&lt;region&gt;:&lt;account&gt;:alias/&lt;ExampleAlias&gt;"</code>
  /// </li>
  /// </ul>
  /// For more information about key identifiers, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">Key
  /// identifiers (KeyID)</a> in the Amazon Web Services Key Management Service
  /// (Amazon Web Services KMS) documentation.
  final String? kmsKeyId;

  RecommendationJobOutputConfig({
    this.compiledOutputConfig,
    this.kmsKeyId,
  });

  Map<String, dynamic> toJson() {
    final compiledOutputConfig = this.compiledOutputConfig;
    final kmsKeyId = this.kmsKeyId;
    return {
      if (compiledOutputConfig != null)
        'CompiledOutputConfig': compiledOutputConfig,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// The configuration for the payload for a recommendation job.
class RecommendationJobPayloadConfig {
  /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload
  /// is stored. This path must point to a single gzip compressed tar archive
  /// (.tar.gz suffix).
  final String? samplePayloadUrl;

  /// The supported MIME types for the input data.
  final List<String>? supportedContentTypes;

  RecommendationJobPayloadConfig({
    this.samplePayloadUrl,
    this.supportedContentTypes,
  });

  factory RecommendationJobPayloadConfig.fromJson(Map<String, dynamic> json) {
    return RecommendationJobPayloadConfig(
      samplePayloadUrl: json['SamplePayloadUrl'] as String?,
      supportedContentTypes: (json['SupportedContentTypes'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final samplePayloadUrl = this.samplePayloadUrl;
    final supportedContentTypes = this.supportedContentTypes;
    return {
      if (samplePayloadUrl != null) 'SamplePayloadUrl': samplePayloadUrl,
      if (supportedContentTypes != null)
        'SupportedContentTypes': supportedContentTypes,
    };
  }
}

/// Specifies the maximum number of jobs that can run in parallel and the
/// maximum number of jobs that can run.
class RecommendationJobResourceLimit {
  /// Defines the maximum number of load tests.
  final int? maxNumberOfTests;

  /// Defines the maximum number of parallel load tests.
  final int? maxParallelOfTests;

  RecommendationJobResourceLimit({
    this.maxNumberOfTests,
    this.maxParallelOfTests,
  });

  factory RecommendationJobResourceLimit.fromJson(Map<String, dynamic> json) {
    return RecommendationJobResourceLimit(
      maxNumberOfTests: json['MaxNumberOfTests'] as int?,
      maxParallelOfTests: json['MaxParallelOfTests'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxNumberOfTests = this.maxNumberOfTests;
    final maxParallelOfTests = this.maxParallelOfTests;
    return {
      if (maxNumberOfTests != null) 'MaxNumberOfTests': maxNumberOfTests,
      if (maxParallelOfTests != null) 'MaxParallelOfTests': maxParallelOfTests,
    };
  }
}

enum RecommendationJobStatus {
  pending('PENDING'),
  inProgress('IN_PROGRESS'),
  completed('COMPLETED'),
  failed('FAILED'),
  stopping('STOPPING'),
  stopped('STOPPED'),
  deleting('DELETING'),
  deleted('DELETED'),
  ;

  final String value;

  const RecommendationJobStatus(this.value);

  static RecommendationJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RecommendationJobStatus'));
}

/// Specifies conditions for stopping a job. When a job reaches a stopping
/// condition limit, SageMaker ends the job.
class RecommendationJobStoppingConditions {
  /// Stops a load test when the number of invocations (TPS) peaks and flattens,
  /// which means that the instance has reached capacity. The default value is
  /// <code>Stop</code>. If you want the load test to continue after invocations
  /// have flattened, set the value to <code>Continue</code>.
  final FlatInvocations? flatInvocations;

  /// The maximum number of requests per minute expected for the endpoint.
  final int? maxInvocations;

  /// The interval of time taken by a model to respond as viewed from SageMaker.
  /// The interval includes the local communication time taken to send the request
  /// and to fetch the response from the container of a model and the time taken
  /// to complete the inference in the container.
  final List<ModelLatencyThreshold>? modelLatencyThresholds;

  RecommendationJobStoppingConditions({
    this.flatInvocations,
    this.maxInvocations,
    this.modelLatencyThresholds,
  });

  factory RecommendationJobStoppingConditions.fromJson(
      Map<String, dynamic> json) {
    return RecommendationJobStoppingConditions(
      flatInvocations:
          (json['FlatInvocations'] as String?)?.let(FlatInvocations.fromString),
      maxInvocations: json['MaxInvocations'] as int?,
      modelLatencyThresholds: (json['ModelLatencyThresholds'] as List?)
          ?.nonNulls
          .map((e) => ModelLatencyThreshold.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final flatInvocations = this.flatInvocations;
    final maxInvocations = this.maxInvocations;
    final modelLatencyThresholds = this.modelLatencyThresholds;
    return {
      if (flatInvocations != null) 'FlatInvocations': flatInvocations.value,
      if (maxInvocations != null) 'MaxInvocations': maxInvocations,
      if (modelLatencyThresholds != null)
        'ModelLatencyThresholds': modelLatencyThresholds,
    };
  }
}

enum RecommendationJobSupportedEndpointType {
  realTime('RealTime'),
  serverless('Serverless'),
  ;

  final String value;

  const RecommendationJobSupportedEndpointType(this.value);

  static RecommendationJobSupportedEndpointType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RecommendationJobSupportedEndpointType'));
}

enum RecommendationJobType {
  $default('Default'),
  advanced('Advanced'),
  ;

  final String value;

  const RecommendationJobType(this.value);

  static RecommendationJobType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RecommendationJobType'));
}

/// Inference Recommender provisions SageMaker endpoints with access to VPC in
/// the inference recommendation job.
class RecommendationJobVpcConfig {
  /// The VPC security group IDs. IDs have the form of <code>sg-xxxxxxxx</code>.
  /// Specify the security groups for the VPC that is specified in the
  /// <code>Subnets</code> field.
  final List<String> securityGroupIds;

  /// The ID of the subnets in the VPC to which you want to connect your model.
  final List<String> subnets;

  RecommendationJobVpcConfig({
    required this.securityGroupIds,
    required this.subnets,
  });

  factory RecommendationJobVpcConfig.fromJson(Map<String, dynamic> json) {
    return RecommendationJobVpcConfig(
      securityGroupIds: (json['SecurityGroupIds'] as List)
          .nonNulls
          .map((e) => e as String)
          .toList(),
      subnets:
          (json['Subnets'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    return {
      'SecurityGroupIds': securityGroupIds,
      'Subnets': subnets,
    };
  }
}

/// The metrics of recommendations.
class RecommendationMetrics {
  /// Defines the cost per hour for the instance.
  final double costPerHour;

  /// Defines the cost per inference for the instance .
  final double costPerInference;

  /// The expected maximum number of requests per minute for the instance.
  final int maxInvocations;

  /// The expected model latency at maximum invocation per minute for the
  /// instance.
  final int modelLatency;

  /// The expected CPU utilization at maximum invocations per minute for the
  /// instance.
  ///
  /// <code>NaN</code> indicates that the value is not available.
  final double? cpuUtilization;

  /// The expected memory utilization at maximum invocations per minute for the
  /// instance.
  ///
  /// <code>NaN</code> indicates that the value is not available.
  final double? memoryUtilization;

  /// The time it takes to launch new compute resources for a serverless endpoint.
  /// The time can vary depending on the model size, how long it takes to download
  /// the model, and the start-up time of the container.
  ///
  /// <code>NaN</code> indicates that the value is not available.
  final int? modelSetupTime;

  RecommendationMetrics({
    required this.costPerHour,
    required this.costPerInference,
    required this.maxInvocations,
    required this.modelLatency,
    this.cpuUtilization,
    this.memoryUtilization,
    this.modelSetupTime,
  });

  factory RecommendationMetrics.fromJson(Map<String, dynamic> json) {
    return RecommendationMetrics(
      costPerHour: json['CostPerHour'] as double,
      costPerInference: json['CostPerInference'] as double,
      maxInvocations: json['MaxInvocations'] as int,
      modelLatency: json['ModelLatency'] as int,
      cpuUtilization: json['CpuUtilization'] as double?,
      memoryUtilization: json['MemoryUtilization'] as double?,
      modelSetupTime: json['ModelSetupTime'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final costPerHour = this.costPerHour;
    final costPerInference = this.costPerInference;
    final maxInvocations = this.maxInvocations;
    final modelLatency = this.modelLatency;
    final cpuUtilization = this.cpuUtilization;
    final memoryUtilization = this.memoryUtilization;
    final modelSetupTime = this.modelSetupTime;
    return {
      'CostPerHour': costPerHour,
      'CostPerInference': costPerInference,
      'MaxInvocations': maxInvocations,
      'ModelLatency': modelLatency,
      if (cpuUtilization != null) 'CpuUtilization': cpuUtilization,
      if (memoryUtilization != null) 'MemoryUtilization': memoryUtilization,
      if (modelSetupTime != null) 'ModelSetupTime': modelSetupTime,
    };
  }
}

enum RecommendationStatus {
  inProgress('IN_PROGRESS'),
  completed('COMPLETED'),
  failed('FAILED'),
  notApplicable('NOT_APPLICABLE'),
  ;

  final String value;

  const RecommendationStatus(this.value);

  static RecommendationStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RecommendationStatus'));
}

enum RecommendationStepType {
  benchmark('BENCHMARK'),
  ;

  final String value;

  const RecommendationStepType(this.value);

  static RecommendationStepType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RecommendationStepType'));
}

enum RecordWrapper {
  none('None'),
  recordIO('RecordIO'),
  ;

  final String value;

  const RecordWrapper(this.value);

  static RecordWrapper fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum RecordWrapper'));
}

/// Configuration for Redshift Dataset Definition input.
class RedshiftDatasetDefinition {
  final String clusterId;

  /// The IAM role attached to your Redshift cluster that Amazon SageMaker uses to
  /// generate datasets.
  final String clusterRoleArn;
  final String database;
  final String dbUser;
  final RedshiftResultFormat outputFormat;

  /// The location in Amazon S3 where the Redshift query results are stored.
  final String outputS3Uri;
  final String queryString;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt data from a Redshift execution.
  final String? kmsKeyId;
  final RedshiftResultCompressionType? outputCompression;

  RedshiftDatasetDefinition({
    required this.clusterId,
    required this.clusterRoleArn,
    required this.database,
    required this.dbUser,
    required this.outputFormat,
    required this.outputS3Uri,
    required this.queryString,
    this.kmsKeyId,
    this.outputCompression,
  });

  factory RedshiftDatasetDefinition.fromJson(Map<String, dynamic> json) {
    return RedshiftDatasetDefinition(
      clusterId: json['ClusterId'] as String,
      clusterRoleArn: json['ClusterRoleArn'] as String,
      database: json['Database'] as String,
      dbUser: json['DbUser'] as String,
      outputFormat:
          RedshiftResultFormat.fromString((json['OutputFormat'] as String)),
      outputS3Uri: json['OutputS3Uri'] as String,
      queryString: json['QueryString'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      outputCompression: (json['OutputCompression'] as String?)
          ?.let(RedshiftResultCompressionType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final clusterId = this.clusterId;
    final clusterRoleArn = this.clusterRoleArn;
    final database = this.database;
    final dbUser = this.dbUser;
    final outputFormat = this.outputFormat;
    final outputS3Uri = this.outputS3Uri;
    final queryString = this.queryString;
    final kmsKeyId = this.kmsKeyId;
    final outputCompression = this.outputCompression;
    return {
      'ClusterId': clusterId,
      'ClusterRoleArn': clusterRoleArn,
      'Database': database,
      'DbUser': dbUser,
      'OutputFormat': outputFormat.value,
      'OutputS3Uri': outputS3Uri,
      'QueryString': queryString,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (outputCompression != null)
        'OutputCompression': outputCompression.value,
    };
  }
}

/// The compression used for Redshift query results.
enum RedshiftResultCompressionType {
  none('None'),
  gzip('GZIP'),
  bzip2('BZIP2'),
  zstd('ZSTD'),
  snappy('SNAPPY'),
  ;

  final String value;

  const RedshiftResultCompressionType(this.value);

  static RedshiftResultCompressionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum RedshiftResultCompressionType'));
}

/// The data storage format for Redshift query results.
enum RedshiftResultFormat {
  parquet('PARQUET'),
  csv('CSV'),
  ;

  final String value;

  const RedshiftResultFormat(this.value);

  static RedshiftResultFormat fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RedshiftResultFormat'));
}

/// Metadata for a register model job step.
class RegisterModelStepMetadata {
  /// The Amazon Resource Name (ARN) of the model package.
  final String? arn;

  RegisterModelStepMetadata({
    this.arn,
  });

  factory RegisterModelStepMetadata.fromJson(Map<String, dynamic> json) {
    return RegisterModelStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Configuration for remote debugging for the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a>
/// API. To learn more about the remote debugging functionality of SageMaker,
/// see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html">Access
/// a training container through Amazon Web Services Systems Manager (SSM) for
/// remote debugging</a>.
class RemoteDebugConfig {
  /// If set to True, enables remote debugging.
  final bool? enableRemoteDebug;

  RemoteDebugConfig({
    this.enableRemoteDebug,
  });

  factory RemoteDebugConfig.fromJson(Map<String, dynamic> json) {
    return RemoteDebugConfig(
      enableRemoteDebug: json['EnableRemoteDebug'] as bool?,
    );
  }

  Map<String, dynamic> toJson() {
    final enableRemoteDebug = this.enableRemoteDebug;
    return {
      if (enableRemoteDebug != null) 'EnableRemoteDebug': enableRemoteDebug,
    };
  }
}

/// Configuration for remote debugging for the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateTrainingJob.html">UpdateTrainingJob</a>
/// API. To learn more about the remote debugging functionality of SageMaker,
/// see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html">Access
/// a training container through Amazon Web Services Systems Manager (SSM) for
/// remote debugging</a>.
class RemoteDebugConfigForUpdate {
  /// If set to True, enables remote debugging.
  final bool? enableRemoteDebug;

  RemoteDebugConfigForUpdate({
    this.enableRemoteDebug,
  });

  Map<String, dynamic> toJson() {
    final enableRemoteDebug = this.enableRemoteDebug;
    return {
      if (enableRemoteDebug != null) 'EnableRemoteDebug': enableRemoteDebug,
    };
  }
}

class RenderUiTemplateResponse {
  /// A list of one or more <code>RenderingError</code> objects if any were
  /// encountered while rendering the template. If there were no errors, the list
  /// is empty.
  final List<RenderingError> errors;

  /// A Liquid template that renders the HTML for the worker UI.
  final String renderedContent;

  RenderUiTemplateResponse({
    required this.errors,
    required this.renderedContent,
  });

  factory RenderUiTemplateResponse.fromJson(Map<String, dynamic> json) {
    return RenderUiTemplateResponse(
      errors: (json['Errors'] as List)
          .nonNulls
          .map((e) => RenderingError.fromJson(e as Map<String, dynamic>))
          .toList(),
      renderedContent: json['RenderedContent'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final errors = this.errors;
    final renderedContent = this.renderedContent;
    return {
      'Errors': errors,
      'RenderedContent': renderedContent,
    };
  }
}

/// Contains input values for a task.
class RenderableTask {
  /// A JSON object that contains values for the variables defined in the
  /// template. It is made available to the template under the substitution
  /// variable <code>task.input</code>. For example, if you define a variable
  /// <code>task.input.text</code> in your template, you can supply the variable
  /// in the JSON object as <code>"text": "sample text"</code>.
  final String input;

  RenderableTask({
    required this.input,
  });

  Map<String, dynamic> toJson() {
    final input = this.input;
    return {
      'Input': input,
    };
  }
}

/// A description of an error that occurred while rendering the template.
class RenderingError {
  /// A unique identifier for a specific class of errors.
  final String code;

  /// A human-readable message describing the error.
  final String message;

  RenderingError({
    required this.code,
    required this.message,
  });

  factory RenderingError.fromJson(Map<String, dynamic> json) {
    return RenderingError(
      code: json['Code'] as String,
      message: json['Message'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final code = this.code;
    final message = this.message;
    return {
      'Code': code,
      'Message': message,
    };
  }
}

enum RepositoryAccessMode {
  platform('Platform'),
  vpc('Vpc'),
  ;

  final String value;

  const RepositoryAccessMode(this.value);

  static RepositoryAccessMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RepositoryAccessMode'));
}

/// Specifies an authentication configuration for the private docker registry
/// where your model image is hosted. Specify a value for this property only if
/// you specified <code>Vpc</code> as the value for the
/// <code>RepositoryAccessMode</code> field of the <code>ImageConfig</code>
/// object that you passed to a call to <code>CreateModel</code> and the private
/// Docker registry where the model image is hosted requires authentication.
class RepositoryAuthConfig {
  /// The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function
  /// that provides credentials to authenticate to the private Docker registry
  /// where your model image is hosted. For information about how to create an
  /// Amazon Web Services Lambda function, see <a
  /// href="https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html">Create
  /// a Lambda function with the console</a> in the <i>Amazon Web Services Lambda
  /// Developer Guide</i>.
  final String repositoryCredentialsProviderArn;

  RepositoryAuthConfig({
    required this.repositoryCredentialsProviderArn,
  });

  factory RepositoryAuthConfig.fromJson(Map<String, dynamic> json) {
    return RepositoryAuthConfig(
      repositoryCredentialsProviderArn:
          json['RepositoryCredentialsProviderArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final repositoryCredentialsProviderArn =
        this.repositoryCredentialsProviderArn;
    return {
      'RepositoryCredentialsProviderArn': repositoryCredentialsProviderArn,
    };
  }
}

/// The resolved attributes.
class ResolvedAttributes {
  final AutoMLJobObjective? autoMLJobObjective;
  final AutoMLJobCompletionCriteria? completionCriteria;

  /// The problem type.
  final ProblemType? problemType;

  ResolvedAttributes({
    this.autoMLJobObjective,
    this.completionCriteria,
    this.problemType,
  });

  factory ResolvedAttributes.fromJson(Map<String, dynamic> json) {
    return ResolvedAttributes(
      autoMLJobObjective: json['AutoMLJobObjective'] != null
          ? AutoMLJobObjective.fromJson(
              json['AutoMLJobObjective'] as Map<String, dynamic>)
          : null,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      problemType:
          (json['ProblemType'] as String?)?.let(ProblemType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobObjective = this.autoMLJobObjective;
    final completionCriteria = this.completionCriteria;
    final problemType = this.problemType;
    return {
      if (autoMLJobObjective != null) 'AutoMLJobObjective': autoMLJobObjective,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (problemType != null) 'ProblemType': problemType.value,
    };
  }
}

/// A resource catalog containing all of the resources of a specific resource
/// type within a resource owner account. For an example on sharing the Amazon
/// SageMaker Feature Store <code>DefaultFeatureGroupCatalog</code>, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html">Share
/// Amazon SageMaker Catalog resource type</a> in the Amazon SageMaker Developer
/// Guide.
class ResourceCatalog {
  /// The time the <code>ResourceCatalog</code> was created.
  final DateTime creationTime;

  /// A free form description of the <code>ResourceCatalog</code>.
  final String description;

  /// The Amazon Resource Name (ARN) of the <code>ResourceCatalog</code>.
  final String resourceCatalogArn;

  /// The name of the <code>ResourceCatalog</code>.
  final String resourceCatalogName;

  ResourceCatalog({
    required this.creationTime,
    required this.description,
    required this.resourceCatalogArn,
    required this.resourceCatalogName,
  });

  factory ResourceCatalog.fromJson(Map<String, dynamic> json) {
    return ResourceCatalog(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      description: json['Description'] as String,
      resourceCatalogArn: json['ResourceCatalogArn'] as String,
      resourceCatalogName: json['ResourceCatalogName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final description = this.description;
    final resourceCatalogArn = this.resourceCatalogArn;
    final resourceCatalogName = this.resourceCatalogName;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'Description': description,
      'ResourceCatalogArn': resourceCatalogArn,
      'ResourceCatalogName': resourceCatalogName,
    };
  }
}

enum ResourceCatalogSortBy {
  creationTime('CreationTime'),
  ;

  final String value;

  const ResourceCatalogSortBy(this.value);

  static ResourceCatalogSortBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ResourceCatalogSortBy'));
}

enum ResourceCatalogSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const ResourceCatalogSortOrder(this.value);

  static ResourceCatalogSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ResourceCatalogSortOrder'));
}

/// Describes the resources, including machine learning (ML) compute instances
/// and ML storage volumes, to use for model training.
class ResourceConfig {
  /// The size of the ML storage volume that you want to provision.
  ///
  /// ML storage volumes store model artifacts and incremental states. Training
  /// algorithms might also use the ML storage volume for scratch space. If you
  /// want to store the training data in the ML storage volume, choose
  /// <code>File</code> as the <code>TrainingInputMode</code> in the algorithm
  /// specification.
  ///
  /// When using an ML instance with <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html#nvme-ssd-volumes">NVMe
  /// SSD volumes</a>, SageMaker doesn't provision Amazon EBS General Purpose SSD
  /// (gp2) storage. Available storage is fixed to the NVMe-type instance's
  /// storage capacity. SageMaker configures storage paths for training datasets,
  /// checkpoints, model artifacts, and outputs to use the entire capacity of the
  /// instance storage. For example, ML instance families with the NVMe-type
  /// instance storage include <code>ml.p4d</code>, <code>ml.g4dn</code>, and
  /// <code>ml.g5</code>.
  ///
  /// When using an ML instance with the EBS-only storage option and without
  /// instance storage, you must define the size of EBS volume through
  /// <code>VolumeSizeInGB</code> in the <code>ResourceConfig</code> API. For
  /// example, ML instance families that use EBS volumes include
  /// <code>ml.c5</code> and <code>ml.p2</code>.
  ///
  /// To look up instance types and their instance storage types and volumes, see
  /// <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance
  /// Types</a>.
  ///
  /// To find the default local paths defined by the SageMaker training platform,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-train-storage.html">Amazon
  /// SageMaker Training Storage Folders for Training Datasets, Checkpoints, Model
  /// Artifacts, and Outputs</a>.
  final int volumeSizeInGB;

  /// The number of ML compute instances to use. For distributed training, provide
  /// a value greater than 1.
  final int? instanceCount;

  /// The configuration of a heterogeneous cluster in JSON format.
  final List<InstanceGroup>? instanceGroups;

  /// The ML compute instance type.
  /// <note>
  /// SageMaker Training on Amazon Elastic Compute Cloud (EC2) P4de instances is
  /// in preview release starting December 9th, 2022.
  ///
  /// <a href="http://aws.amazon.com/ec2/instance-types/p4/">Amazon EC2 P4de
  /// instances</a> (currently in preview) are powered by 8 NVIDIA A100 GPUs with
  /// 80GB high-performance HBM2e GPU memory, which accelerate the speed of
  /// training ML models that need to be trained on large datasets of
  /// high-resolution data. In this preview release, Amazon SageMaker supports ML
  /// training jobs on P4de instances (<code>ml.p4de.24xlarge</code>) to reduce
  /// model training time. The <code>ml.p4de.24xlarge</code> instances are
  /// available in the following Amazon Web Services Regions.
  ///
  /// <ul>
  /// <li>
  /// US East (N. Virginia) (us-east-1)
  /// </li>
  /// <li>
  /// US West (Oregon) (us-west-2)
  /// </li>
  /// </ul>
  /// To request quota limit increase and start using P4de instances, contact the
  /// SageMaker Training service team through your account team.
  /// </note>
  final TrainingInstanceType? instanceType;

  /// The duration of time in seconds to retain configured resources in a warm
  /// pool for subsequent training jobs.
  final int? keepAlivePeriodInSeconds;

  /// The Amazon Web Services KMS key that SageMaker uses to encrypt data on the
  /// storage volume attached to the ML compute instance(s) that run the training
  /// job.
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>VolumeKmsKeyId</code> when using
  /// an instance type with local storage.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  /// The <code>VolumeKmsKeyId</code> can be in any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// // KMS Key ID
  ///
  /// <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// <li>
  /// // Amazon Resource Name (ARN) of a KMS Key
  ///
  /// <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
  /// </li>
  /// </ul>
  final String? volumeKmsKeyId;

  ResourceConfig({
    required this.volumeSizeInGB,
    this.instanceCount,
    this.instanceGroups,
    this.instanceType,
    this.keepAlivePeriodInSeconds,
    this.volumeKmsKeyId,
  });

  factory ResourceConfig.fromJson(Map<String, dynamic> json) {
    return ResourceConfig(
      volumeSizeInGB: json['VolumeSizeInGB'] as int,
      instanceCount: json['InstanceCount'] as int?,
      instanceGroups: (json['InstanceGroups'] as List?)
          ?.nonNulls
          .map((e) => InstanceGroup.fromJson(e as Map<String, dynamic>))
          .toList(),
      instanceType: (json['InstanceType'] as String?)
          ?.let(TrainingInstanceType.fromString),
      keepAlivePeriodInSeconds: json['KeepAlivePeriodInSeconds'] as int?,
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final volumeSizeInGB = this.volumeSizeInGB;
    final instanceCount = this.instanceCount;
    final instanceGroups = this.instanceGroups;
    final instanceType = this.instanceType;
    final keepAlivePeriodInSeconds = this.keepAlivePeriodInSeconds;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'VolumeSizeInGB': volumeSizeInGB,
      if (instanceCount != null) 'InstanceCount': instanceCount,
      if (instanceGroups != null) 'InstanceGroups': instanceGroups,
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (keepAlivePeriodInSeconds != null)
        'KeepAlivePeriodInSeconds': keepAlivePeriodInSeconds,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// The <code>ResourceConfig</code> to update
/// <code>KeepAlivePeriodInSeconds</code>. Other fields in the
/// <code>ResourceConfig</code> cannot be updated.
class ResourceConfigForUpdate {
  /// The <code>KeepAlivePeriodInSeconds</code> value specified in the
  /// <code>ResourceConfig</code> to update.
  final int keepAlivePeriodInSeconds;

  ResourceConfigForUpdate({
    required this.keepAlivePeriodInSeconds,
  });

  Map<String, dynamic> toJson() {
    final keepAlivePeriodInSeconds = this.keepAlivePeriodInSeconds;
    return {
      'KeepAlivePeriodInSeconds': keepAlivePeriodInSeconds,
    };
  }
}

/// Specifies the maximum number of training jobs and parallel training jobs
/// that a hyperparameter tuning job can launch.
class ResourceLimits {
  /// The maximum number of concurrent training jobs that a hyperparameter tuning
  /// job can launch.
  final int maxParallelTrainingJobs;

  /// The maximum number of training jobs that a hyperparameter tuning job can
  /// launch.
  final int? maxNumberOfTrainingJobs;

  /// The maximum time in seconds that a hyperparameter tuning job can run.
  final int? maxRuntimeInSeconds;

  ResourceLimits({
    required this.maxParallelTrainingJobs,
    this.maxNumberOfTrainingJobs,
    this.maxRuntimeInSeconds,
  });

  factory ResourceLimits.fromJson(Map<String, dynamic> json) {
    return ResourceLimits(
      maxParallelTrainingJobs: json['MaxParallelTrainingJobs'] as int,
      maxNumberOfTrainingJobs: json['MaxNumberOfTrainingJobs'] as int?,
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxParallelTrainingJobs = this.maxParallelTrainingJobs;
    final maxNumberOfTrainingJobs = this.maxNumberOfTrainingJobs;
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    return {
      'MaxParallelTrainingJobs': maxParallelTrainingJobs,
      if (maxNumberOfTrainingJobs != null)
        'MaxNumberOfTrainingJobs': maxNumberOfTrainingJobs,
      if (maxRuntimeInSeconds != null)
        'MaxRuntimeInSeconds': maxRuntimeInSeconds,
    };
  }
}

/// Specifies the ARN's of a SageMaker image and SageMaker image version, and
/// the instance type that the version runs on.
class ResourceSpec {
  /// The instance type that the image version runs on.
  /// <note>
  /// <b>JupyterServer apps</b> only support the <code>system</code> value.
  ///
  /// For <b>KernelGateway apps</b>, the <code>system</code> value is translated
  /// to <code>ml.t3.medium</code>. KernelGateway apps also support all other
  /// values for available instance types.
  /// </note>
  final AppInstanceType? instanceType;

  /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to
  /// the Resource.
  final String? lifecycleConfigArn;

  /// The ARN of the SageMaker image that the image version belongs to.
  final String? sageMakerImageArn;

  /// The SageMakerImageVersionAlias of the image to launch with. This value is in
  /// SemVer 2.0.0 versioning format.
  final String? sageMakerImageVersionAlias;

  /// The ARN of the image version created on the instance.
  final String? sageMakerImageVersionArn;

  ResourceSpec({
    this.instanceType,
    this.lifecycleConfigArn,
    this.sageMakerImageArn,
    this.sageMakerImageVersionAlias,
    this.sageMakerImageVersionArn,
  });

  factory ResourceSpec.fromJson(Map<String, dynamic> json) {
    return ResourceSpec(
      instanceType:
          (json['InstanceType'] as String?)?.let(AppInstanceType.fromString),
      lifecycleConfigArn: json['LifecycleConfigArn'] as String?,
      sageMakerImageArn: json['SageMakerImageArn'] as String?,
      sageMakerImageVersionAlias: json['SageMakerImageVersionAlias'] as String?,
      sageMakerImageVersionArn: json['SageMakerImageVersionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceType = this.instanceType;
    final lifecycleConfigArn = this.lifecycleConfigArn;
    final sageMakerImageArn = this.sageMakerImageArn;
    final sageMakerImageVersionAlias = this.sageMakerImageVersionAlias;
    final sageMakerImageVersionArn = this.sageMakerImageVersionArn;
    return {
      if (instanceType != null) 'InstanceType': instanceType.value,
      if (lifecycleConfigArn != null) 'LifecycleConfigArn': lifecycleConfigArn,
      if (sageMakerImageArn != null) 'SageMakerImageArn': sageMakerImageArn,
      if (sageMakerImageVersionAlias != null)
        'SageMakerImageVersionAlias': sageMakerImageVersionAlias,
      if (sageMakerImageVersionArn != null)
        'SageMakerImageVersionArn': sageMakerImageVersionArn,
    };
  }
}

enum ResourceType {
  trainingJob('TrainingJob'),
  experiment('Experiment'),
  experimentTrial('ExperimentTrial'),
  experimentTrialComponent('ExperimentTrialComponent'),
  endpoint('Endpoint'),
  model('Model'),
  modelPackage('ModelPackage'),
  modelPackageGroup('ModelPackageGroup'),
  pipeline('Pipeline'),
  pipelineExecution('PipelineExecution'),
  featureGroup('FeatureGroup'),
  featureMetadata('FeatureMetadata'),
  image('Image'),
  imageVersion('ImageVersion'),
  project('Project'),
  hyperParameterTuningJob('HyperParameterTuningJob'),
  modelCard('ModelCard'),
  ;

  final String value;

  const ResourceType(this.value);

  static ResourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ResourceType'));
}

/// The retention policy for data stored on an Amazon Elastic File System
/// volume.
class RetentionPolicy {
  /// The default is <code>Retain</code>, which specifies to keep the data stored
  /// on the Amazon EFS volume.
  ///
  /// Specify <code>Delete</code> to delete the data stored on the Amazon EFS
  /// volume.
  final RetentionType? homeEfsFileSystem;

  RetentionPolicy({
    this.homeEfsFileSystem,
  });

  Map<String, dynamic> toJson() {
    final homeEfsFileSystem = this.homeEfsFileSystem;
    return {
      if (homeEfsFileSystem != null)
        'HomeEfsFileSystem': homeEfsFileSystem.value,
    };
  }
}

enum RetentionType {
  retain('Retain'),
  delete('Delete'),
  ;

  final String value;

  const RetentionType(this.value);

  static RetentionType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum RetentionType'));
}

class RetryPipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  RetryPipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory RetryPipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return RetryPipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

/// The retry strategy to use when a training job fails due to an
/// <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as
/// part of the <code>CreateTrainingJob</code> and
/// <code>CreateHyperParameterTuningJob</code> requests. You can add the
/// <code>StoppingCondition</code> parameter to the request to limit the
/// training time for the complete job.
class RetryStrategy {
  /// The number of times to retry the job. When the job is retried, it's
  /// <code>SecondaryStatus</code> is changed to <code>STARTING</code>.
  final int maximumRetryAttempts;

  RetryStrategy({
    required this.maximumRetryAttempts,
  });

  factory RetryStrategy.fromJson(Map<String, dynamic> json) {
    return RetryStrategy(
      maximumRetryAttempts: json['MaximumRetryAttempts'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final maximumRetryAttempts = this.maximumRetryAttempts;
    return {
      'MaximumRetryAttempts': maximumRetryAttempts,
    };
  }
}

/// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
class RollingUpdatePolicy {
  /// Batch size for each rolling step to provision capacity and turn on traffic
  /// on the new endpoint fleet, and terminate capacity on the old endpoint fleet.
  /// Value must be between 5% to 50% of the variant's total instance count.
  final CapacitySize maximumBatchSize;

  /// The length of the baking period, during which SageMaker monitors alarms for
  /// each batch on the new fleet.
  final int waitIntervalInSeconds;

  /// The time limit for the total deployment. Exceeding this limit causes a
  /// timeout.
  final int? maximumExecutionTimeoutInSeconds;

  /// Batch size for rollback to the old endpoint fleet. Each rolling step to
  /// provision capacity and turn on traffic on the old endpoint fleet, and
  /// terminate capacity on the new endpoint fleet. If this field is absent, the
  /// default value will be set to 100% of total capacity which means to bring up
  /// the whole capacity of the old fleet at once during rollback.
  final CapacitySize? rollbackMaximumBatchSize;

  RollingUpdatePolicy({
    required this.maximumBatchSize,
    required this.waitIntervalInSeconds,
    this.maximumExecutionTimeoutInSeconds,
    this.rollbackMaximumBatchSize,
  });

  factory RollingUpdatePolicy.fromJson(Map<String, dynamic> json) {
    return RollingUpdatePolicy(
      maximumBatchSize: CapacitySize.fromJson(
          json['MaximumBatchSize'] as Map<String, dynamic>),
      waitIntervalInSeconds: json['WaitIntervalInSeconds'] as int,
      maximumExecutionTimeoutInSeconds:
          json['MaximumExecutionTimeoutInSeconds'] as int?,
      rollbackMaximumBatchSize: json['RollbackMaximumBatchSize'] != null
          ? CapacitySize.fromJson(
              json['RollbackMaximumBatchSize'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final maximumBatchSize = this.maximumBatchSize;
    final waitIntervalInSeconds = this.waitIntervalInSeconds;
    final maximumExecutionTimeoutInSeconds =
        this.maximumExecutionTimeoutInSeconds;
    final rollbackMaximumBatchSize = this.rollbackMaximumBatchSize;
    return {
      'MaximumBatchSize': maximumBatchSize,
      'WaitIntervalInSeconds': waitIntervalInSeconds,
      if (maximumExecutionTimeoutInSeconds != null)
        'MaximumExecutionTimeoutInSeconds': maximumExecutionTimeoutInSeconds,
      if (rollbackMaximumBatchSize != null)
        'RollbackMaximumBatchSize': rollbackMaximumBatchSize,
    };
  }
}

enum RootAccess {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const RootAccess(this.value);

  static RootAccess fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum RootAccess'));
}

enum RoutingStrategy {
  leastOutstandingRequests('LEAST_OUTSTANDING_REQUESTS'),
  random('RANDOM'),
  ;

  final String value;

  const RoutingStrategy(this.value);

  static RoutingStrategy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum RoutingStrategy'));
}

enum RuleEvaluationStatus {
  inProgress('InProgress'),
  noIssuesFound('NoIssuesFound'),
  issuesFound('IssuesFound'),
  error('Error'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const RuleEvaluationStatus(this.value);

  static RuleEvaluationStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum RuleEvaluationStatus'));
}

enum S3DataDistribution {
  fullyReplicated('FullyReplicated'),
  shardedByS3Key('ShardedByS3Key'),
  ;

  final String value;

  const S3DataDistribution(this.value);

  static S3DataDistribution fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum S3DataDistribution'));
}

/// Describes the S3 data source.
///
/// Your input bucket must be in the same Amazon Web Services region as your
/// training job.
class S3DataSource {
  /// If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
  /// name prefix. SageMaker uses all objects that match the specified key name
  /// prefix for model training.
  ///
  /// If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an
  /// object that is a manifest file containing a list of object keys that you
  /// want SageMaker to use for model training.
  ///
  /// If you choose <code>AugmentedManifestFile</code>, S3Uri identifies an object
  /// that is an augmented manifest file in JSON lines format. This file contains
  /// the data you want to use for model training.
  /// <code>AugmentedManifestFile</code> can only be used if the Channel's input
  /// mode is <code>Pipe</code>.
  final S3DataType s3DataType;

  /// Depending on the value specified for the <code>S3DataType</code>, identifies
  /// either a key name prefix or a manifest. For example:
  ///
  /// <ul>
  /// <li>
  /// A key name prefix might look like this:
  /// <code>s3://bucketname/exampleprefix/</code>
  /// </li>
  /// <li>
  /// A manifest might look like this:
  /// <code>s3://bucketname/example.manifest</code>
  ///
  /// A manifest is an S3 object which is a JSON file consisting of an array of
  /// elements. The first element is a prefix which is followed by one or more
  /// suffixes. SageMaker appends the suffix elements to the prefix to get a full
  /// set of <code>S3Uri</code>. Note that the prefix must be a valid non-empty
  /// <code>S3Uri</code> that precludes users from specifying a manifest whose
  /// individual <code>S3Uri</code> is sourced from different S3 buckets.
  ///
  /// The following code example shows a valid manifest format:
  ///
  /// <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
  ///
  /// <code> "relative/path/to/custdata-1",</code>
  ///
  /// <code> "relative/path/custdata-2",</code>
  ///
  /// <code> ...</code>
  ///
  /// <code> "relative/path/custdata-N"</code>
  ///
  /// <code>]</code>
  ///
  /// This JSON is equivalent to the following <code>S3Uri</code> list:
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
  ///
  /// <code>...</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
  ///
  /// The complete set of <code>S3Uri</code> in this manifest is the input data
  /// for the channel for this data source. The object that each
  /// <code>S3Uri</code> points to must be readable by the IAM role that SageMaker
  /// uses to perform tasks on your behalf.
  /// </li>
  /// </ul>
  /// Your input bucket must be located in same Amazon Web Services region as your
  /// training job.
  final String s3Uri;

  /// A list of one or more attribute names to use that are found in a specified
  /// augmented manifest file.
  final List<String>? attributeNames;

  /// A list of names of instance groups that get data from the S3 data source.
  final List<String>? instanceGroupNames;

  /// If you want SageMaker to replicate the entire dataset on each ML compute
  /// instance that is launched for model training, specify
  /// <code>FullyReplicated</code>.
  ///
  /// If you want SageMaker to replicate a subset of data on each ML compute
  /// instance that is launched for model training, specify
  /// <code>ShardedByS3Key</code>. If there are <i>n</i> ML compute instances
  /// launched for a training job, each instance gets approximately 1/<i>n</i> of
  /// the number of S3 objects. In this case, model training on each machine uses
  /// only the subset of training data.
  ///
  /// Don't choose more ML compute instances for training than available S3
  /// objects. If you do, some nodes won't get any data and you will pay for nodes
  /// that aren't getting any training data. This applies in both File and Pipe
  /// modes. Keep this in mind when developing algorithms.
  ///
  /// In distributed training, where you use multiple ML compute EC2 instances,
  /// you might choose <code>ShardedByS3Key</code>. If the algorithm requires
  /// copying training data to the ML storage volume (when
  /// <code>TrainingInputMode</code> is set to <code>File</code>), this copies
  /// 1/<i>n</i> of the number of objects.
  final S3DataDistribution? s3DataDistributionType;

  S3DataSource({
    required this.s3DataType,
    required this.s3Uri,
    this.attributeNames,
    this.instanceGroupNames,
    this.s3DataDistributionType,
  });

  factory S3DataSource.fromJson(Map<String, dynamic> json) {
    return S3DataSource(
      s3DataType: S3DataType.fromString((json['S3DataType'] as String)),
      s3Uri: json['S3Uri'] as String,
      attributeNames: (json['AttributeNames'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      instanceGroupNames: (json['InstanceGroupNames'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      s3DataDistributionType: (json['S3DataDistributionType'] as String?)
          ?.let(S3DataDistribution.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    final attributeNames = this.attributeNames;
    final instanceGroupNames = this.instanceGroupNames;
    final s3DataDistributionType = this.s3DataDistributionType;
    return {
      'S3DataType': s3DataType.value,
      'S3Uri': s3Uri,
      if (attributeNames != null) 'AttributeNames': attributeNames,
      if (instanceGroupNames != null) 'InstanceGroupNames': instanceGroupNames,
      if (s3DataDistributionType != null)
        'S3DataDistributionType': s3DataDistributionType.value,
    };
  }
}

enum S3DataType {
  manifestFile('ManifestFile'),
  s3Prefix('S3Prefix'),
  augmentedManifestFile('AugmentedManifestFile'),
  ;

  final String value;

  const S3DataType(this.value);

  static S3DataType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum S3DataType'));
}

/// Specifies the S3 location of ML model data to deploy.
class S3ModelDataSource {
  /// Specifies how the ML model data is prepared.
  ///
  /// If you choose <code>Gzip</code> and choose <code>S3Object</code> as the
  /// value of <code>S3DataType</code>, <code>S3Uri</code> identifies an object
  /// that is a gzip-compressed TAR archive. SageMaker will attempt to decompress
  /// and untar the object during model deployment.
  ///
  /// If you choose <code>None</code> and chooose <code>S3Object</code> as the
  /// value of <code>S3DataType</code>, <code>S3Uri</code> identifies an object
  /// that represents an uncompressed ML model to deploy.
  ///
  /// If you choose None and choose <code>S3Prefix</code> as the value of
  /// <code>S3DataType</code>, <code>S3Uri</code> identifies a key name prefix,
  /// under which all objects represents the uncompressed ML model to deploy.
  ///
  /// If you choose None, then SageMaker will follow rules below when creating
  /// model data files under /opt/ml/model directory for use by your inference
  /// code:
  ///
  /// <ul>
  /// <li>
  /// If you choose <code>S3Object</code> as the value of <code>S3DataType</code>,
  /// then SageMaker will split the key of the S3 object referenced by
  /// <code>S3Uri</code> by slash (/), and use the last part as the filename of
  /// the file holding the content of the S3 object.
  /// </li>
  /// <li>
  /// If you choose <code>S3Prefix</code> as the value of <code>S3DataType</code>,
  /// then for each S3 object under the key name pefix referenced by
  /// <code>S3Uri</code>, SageMaker will trim its key by the prefix, and use the
  /// remainder as the path (relative to <code>/opt/ml/model</code>) of the file
  /// holding the content of the S3 object. SageMaker will split the remainder by
  /// slash (/), using intermediate parts as directory names and the last part as
  /// filename of the file holding the content of the S3 object.
  /// </li>
  /// <li>
  /// Do not use any of the following as file names or directory names:
  ///
  /// <ul>
  /// <li>
  /// An empty or blank string
  /// </li>
  /// <li>
  /// A string which contains null bytes
  /// </li>
  /// <li>
  /// A string longer than 255 bytes
  /// </li>
  /// <li>
  /// A single dot (<code>.</code>)
  /// </li>
  /// <li>
  /// A double dot (<code>..</code>)
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Ambiguous file names will result in model deployment failure. For example,
  /// if your uncompressed ML model consists of two S3 objects
  /// <code>s3://mybucket/model/weights</code> and
  /// <code>s3://mybucket/model/weights/part1</code> and you specify
  /// <code>s3://mybucket/model/</code> as the value of <code>S3Uri</code> and
  /// <code>S3Prefix</code> as the value of <code>S3DataType</code>, then it will
  /// result in name clash between <code>/opt/ml/model/weights</code> (a regular
  /// file) and <code>/opt/ml/model/weights/</code> (a directory).
  /// </li>
  /// <li>
  /// Do not organize the model artifacts in <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html">S3
  /// console using folders</a>. When you create a folder in S3 console, S3
  /// creates a 0-byte object with a key set to the folder name you provide. They
  /// key of the 0-byte object ends with a slash (/) which violates SageMaker
  /// restrictions on model artifact file names, leading to model deployment
  /// failure.
  /// </li>
  /// </ul>
  final ModelCompressionType compressionType;

  /// Specifies the type of ML model data to deploy.
  ///
  /// If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
  /// name prefix. SageMaker uses all objects that match the specified key name
  /// prefix as part of the ML model data to deploy. A valid key name prefix
  /// identified by <code>S3Uri</code> always ends with a forward slash (/).
  ///
  /// If you choose <code>S3Object</code>, <code>S3Uri</code> identifies an object
  /// that is the ML model data to deploy.
  final S3ModelDataType s3DataType;

  /// Specifies the S3 path of ML model data to deploy.
  final String s3Uri;

  /// Specifies the access configuration file for the ML model. You can explicitly
  /// accept the model end-user license agreement (EULA) within the
  /// <code>ModelAccessConfig</code>. You are responsible for reviewing and
  /// complying with any applicable license terms and making sure they are
  /// acceptable for your use case before downloading or using a model.
  final ModelAccessConfig? modelAccessConfig;

  S3ModelDataSource({
    required this.compressionType,
    required this.s3DataType,
    required this.s3Uri,
    this.modelAccessConfig,
  });

  factory S3ModelDataSource.fromJson(Map<String, dynamic> json) {
    return S3ModelDataSource(
      compressionType:
          ModelCompressionType.fromString((json['CompressionType'] as String)),
      s3DataType: S3ModelDataType.fromString((json['S3DataType'] as String)),
      s3Uri: json['S3Uri'] as String,
      modelAccessConfig: json['ModelAccessConfig'] != null
          ? ModelAccessConfig.fromJson(
              json['ModelAccessConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final compressionType = this.compressionType;
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    final modelAccessConfig = this.modelAccessConfig;
    return {
      'CompressionType': compressionType.value,
      'S3DataType': s3DataType.value,
      'S3Uri': s3Uri,
      if (modelAccessConfig != null) 'ModelAccessConfig': modelAccessConfig,
    };
  }
}

enum S3ModelDataType {
  s3Prefix('S3Prefix'),
  s3Object('S3Object'),
  ;

  final String value;

  const S3ModelDataType(this.value);

  static S3ModelDataType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum S3ModelDataType'));
}

/// This object defines the access restrictions to Amazon S3 resources that are
/// included in custom worker task templates using the Liquid filter,
/// <code>grant_read_access</code>.
///
/// To learn more about how custom templates are created, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html">Create
/// custom worker task templates</a>.
class S3Presign {
  /// Use this parameter to specify the allowed request source. Possible sources
  /// are either <code>SourceIp</code> or <code>VpcSourceIp</code>.
  final IamPolicyConstraints? iamPolicyConstraints;

  S3Presign({
    this.iamPolicyConstraints,
  });

  factory S3Presign.fromJson(Map<String, dynamic> json) {
    return S3Presign(
      iamPolicyConstraints: json['IamPolicyConstraints'] != null
          ? IamPolicyConstraints.fromJson(
              json['IamPolicyConstraints'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final iamPolicyConstraints = this.iamPolicyConstraints;
    return {
      if (iamPolicyConstraints != null)
        'IamPolicyConstraints': iamPolicyConstraints,
    };
  }
}

/// The Amazon Simple Storage (Amazon S3) location and security configuration
/// for <code>OfflineStore</code>.
class S3StorageConfig {
  /// The S3 URI, or location in Amazon S3, of <code>OfflineStore</code>.
  ///
  /// S3 URIs have a format similar to the following:
  /// <code>s3://example-bucket/prefix/</code>.
  final String s3Uri;

  /// The Amazon Web Services Key Management Service (KMS) key ARN of the key used
  /// to encrypt any objects written into the <code>OfflineStore</code> S3
  /// location.
  ///
  /// The IAM <code>roleARN</code> that is passed as a parameter to
  /// <code>CreateFeatureGroup</code> must have below permissions to the
  /// <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// <code>"kms:GenerateDataKey"</code>
  /// </li>
  /// </ul>
  final String? kmsKeyId;

  /// The S3 path where offline records are written.
  final String? resolvedOutputS3Uri;

  S3StorageConfig({
    required this.s3Uri,
    this.kmsKeyId,
    this.resolvedOutputS3Uri,
  });

  factory S3StorageConfig.fromJson(Map<String, dynamic> json) {
    return S3StorageConfig(
      s3Uri: json['S3Uri'] as String,
      kmsKeyId: json['KmsKeyId'] as String?,
      resolvedOutputS3Uri: json['ResolvedOutputS3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Uri = this.s3Uri;
    final kmsKeyId = this.kmsKeyId;
    final resolvedOutputS3Uri = this.resolvedOutputS3Uri;
    return {
      'S3Uri': s3Uri,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (resolvedOutputS3Uri != null)
        'ResolvedOutputS3Uri': resolvedOutputS3Uri,
    };
  }
}

enum SagemakerServicecatalogStatus {
  enabled('Enabled'),
  disabled('Disabled'),
  ;

  final String value;

  const SagemakerServicecatalogStatus(this.value);

  static SagemakerServicecatalogStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SagemakerServicecatalogStatus'));
}

/// An object containing a recommended scaling policy.
class ScalingPolicy {
  /// A target tracking scaling policy. Includes support for predefined or
  /// customized metrics.
  final TargetTrackingScalingPolicyConfiguration? targetTracking;

  ScalingPolicy({
    this.targetTracking,
  });

  factory ScalingPolicy.fromJson(Map<String, dynamic> json) {
    return ScalingPolicy(
      targetTracking: json['TargetTracking'] != null
          ? TargetTrackingScalingPolicyConfiguration.fromJson(
              json['TargetTracking'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final targetTracking = this.targetTracking;
    return {
      if (targetTracking != null) 'TargetTracking': targetTracking,
    };
  }
}

/// The metric for a scaling policy.
class ScalingPolicyMetric {
  /// The number of invocations sent to a model, normalized by
  /// <code>InstanceCount</code> in each ProductionVariant.
  /// <code>1/numberOfInstances</code> is sent as the value on each request, where
  /// <code>numberOfInstances</code> is the number of active instances for the
  /// ProductionVariant behind the endpoint at the time of the request.
  final int? invocationsPerInstance;

  /// The interval of time taken by a model to respond as viewed from SageMaker.
  /// This interval includes the local communication times taken to send the
  /// request and to fetch the response from the container of a model and the time
  /// taken to complete the inference in the container.
  final int? modelLatency;

  ScalingPolicyMetric({
    this.invocationsPerInstance,
    this.modelLatency,
  });

  factory ScalingPolicyMetric.fromJson(Map<String, dynamic> json) {
    return ScalingPolicyMetric(
      invocationsPerInstance: json['InvocationsPerInstance'] as int?,
      modelLatency: json['ModelLatency'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final invocationsPerInstance = this.invocationsPerInstance;
    final modelLatency = this.modelLatency;
    return {
      if (invocationsPerInstance != null)
        'InvocationsPerInstance': invocationsPerInstance,
      if (modelLatency != null) 'ModelLatency': modelLatency,
    };
  }
}

/// An object where you specify the anticipated traffic pattern for an endpoint.
class ScalingPolicyObjective {
  /// The maximum number of expected requests to your endpoint per minute.
  final int? maxInvocationsPerMinute;

  /// The minimum number of expected requests to your endpoint per minute.
  final int? minInvocationsPerMinute;

  ScalingPolicyObjective({
    this.maxInvocationsPerMinute,
    this.minInvocationsPerMinute,
  });

  factory ScalingPolicyObjective.fromJson(Map<String, dynamic> json) {
    return ScalingPolicyObjective(
      maxInvocationsPerMinute: json['MaxInvocationsPerMinute'] as int?,
      minInvocationsPerMinute: json['MinInvocationsPerMinute'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxInvocationsPerMinute = this.maxInvocationsPerMinute;
    final minInvocationsPerMinute = this.minInvocationsPerMinute;
    return {
      if (maxInvocationsPerMinute != null)
        'MaxInvocationsPerMinute': maxInvocationsPerMinute,
      if (minInvocationsPerMinute != null)
        'MinInvocationsPerMinute': minInvocationsPerMinute,
    };
  }
}

/// Configuration details about the monitoring schedule.
class ScheduleConfig {
  /// A cron expression that describes details about the monitoring schedule.
  ///
  /// The supported cron expressions are:
  ///
  /// <ul>
  /// <li>
  /// If you want to set the job to start every hour, use the following:
  ///
  /// <code>Hourly: cron(0 * ? * * *)</code>
  /// </li>
  /// <li>
  /// If you want to start the job daily:
  ///
  /// <code>cron(0 [00-23] ? * * *)</code>
  /// </li>
  /// <li>
  /// If you want to run the job one time, immediately, use the following keyword:
  ///
  /// <code>NOW</code>
  /// </li>
  /// </ul>
  /// For example, the following are valid cron expressions:
  ///
  /// <ul>
  /// <li>
  /// Daily at noon UTC: <code>cron(0 12 ? * * *)</code>
  /// </li>
  /// <li>
  /// Daily at midnight UTC: <code>cron(0 0 ? * * *)</code>
  /// </li>
  /// </ul>
  /// To support running every 6, 12 hours, the following are also supported:
  ///
  /// <code>cron(0 [00-23]/[01-24] ? * * *)</code>
  ///
  /// For example, the following are valid cron expressions:
  ///
  /// <ul>
  /// <li>
  /// Every 12 hours, starting at 5pm UTC: <code>cron(0 17/12 ? * * *)</code>
  /// </li>
  /// <li>
  /// Every two hours starting at midnight: <code>cron(0 0/2 ? * * *)</code>
  /// </li>
  /// </ul> <note>
  /// <ul>
  /// <li>
  /// Even though the cron expression is set to start at 5PM UTC, note that there
  /// could be a delay of 0-20 minutes from the actual requested time to run the
  /// execution.
  /// </li>
  /// <li>
  /// We recommend that if you would like a daily schedule, you do not provide
  /// this parameter. Amazon SageMaker will pick a time for running every day.
  /// </li>
  /// </ul> </note>
  /// You can also specify the keyword <code>NOW</code> to run the monitoring job
  /// immediately, one time, without recurring.
  final String scheduleExpression;

  /// Sets the end time for a monitoring job window. Express this time as an
  /// offset to the times that you schedule your monitoring jobs to run. You
  /// schedule monitoring jobs with the <code>ScheduleExpression</code> parameter.
  /// Specify this offset in ISO 8601 duration format. For example, if you want to
  /// end the window one hour before the start of each monitoring job, you would
  /// specify: <code>"-PT1H"</code>.
  ///
  /// The end time that you specify must not follow the start time that you
  /// specify by more than 24 hours. You specify the start time with the
  /// <code>DataAnalysisStartTime</code> parameter.
  ///
  /// If you set <code>ScheduleExpression</code> to <code>NOW</code>, this
  /// parameter is required.
  final String? dataAnalysisEndTime;

  /// Sets the start time for a monitoring job window. Express this time as an
  /// offset to the times that you schedule your monitoring jobs to run. You
  /// schedule monitoring jobs with the <code>ScheduleExpression</code> parameter.
  /// Specify this offset in ISO 8601 duration format. For example, if you want to
  /// monitor the five hours of data in your dataset that precede the start of
  /// each monitoring job, you would specify: <code>"-PT5H"</code>.
  ///
  /// The start time that you specify must not precede the end time that you
  /// specify by more than 24 hours. You specify the end time with the
  /// <code>DataAnalysisEndTime</code> parameter.
  ///
  /// If you set <code>ScheduleExpression</code> to <code>NOW</code>, this
  /// parameter is required.
  final String? dataAnalysisStartTime;

  ScheduleConfig({
    required this.scheduleExpression,
    this.dataAnalysisEndTime,
    this.dataAnalysisStartTime,
  });

  factory ScheduleConfig.fromJson(Map<String, dynamic> json) {
    return ScheduleConfig(
      scheduleExpression: json['ScheduleExpression'] as String,
      dataAnalysisEndTime: json['DataAnalysisEndTime'] as String?,
      dataAnalysisStartTime: json['DataAnalysisStartTime'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final scheduleExpression = this.scheduleExpression;
    final dataAnalysisEndTime = this.dataAnalysisEndTime;
    final dataAnalysisStartTime = this.dataAnalysisStartTime;
    return {
      'ScheduleExpression': scheduleExpression,
      if (dataAnalysisEndTime != null)
        'DataAnalysisEndTime': dataAnalysisEndTime,
      if (dataAnalysisStartTime != null)
        'DataAnalysisStartTime': dataAnalysisStartTime,
    };
  }
}

enum ScheduleStatus {
  pending('Pending'),
  failed('Failed'),
  scheduled('Scheduled'),
  stopped('Stopped'),
  ;

  final String value;

  const ScheduleStatus(this.value);

  static ScheduleStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ScheduleStatus'));
}

/// A multi-expression that searches for the specified resource or resources in
/// a search. All resource objects that satisfy the expression's condition are
/// included in the search results. You must specify at least one subexpression,
/// filter, or nested filter. A <code>SearchExpression</code> can contain up to
/// twenty elements.
///
/// A <code>SearchExpression</code> contains the following components:
///
/// <ul>
/// <li>
/// A list of <code>Filter</code> objects. Each filter defines a simple Boolean
/// expression comprised of a resource property name, Boolean operator, and
/// value.
/// </li>
/// <li>
/// A list of <code>NestedFilter</code> objects. Each nested filter defines a
/// list of Boolean expressions using a list of resource properties. A nested
/// filter is satisfied if a single object in the list satisfies all Boolean
/// expressions.
/// </li>
/// <li>
/// A list of <code>SearchExpression</code> objects. A search expression object
/// can be nested in a list of search expression objects.
/// </li>
/// <li>
/// A Boolean operator: <code>And</code> or <code>Or</code>.
/// </li>
/// </ul>
class SearchExpression {
  /// A list of filter objects.
  final List<Filter>? filters;

  /// A list of nested filter objects.
  final List<NestedFilters>? nestedFilters;

  /// A Boolean operator used to evaluate the search expression. If you want every
  /// conditional statement in all lists to be satisfied for the entire search
  /// expression to be true, specify <code>And</code>. If only a single
  /// conditional statement needs to be true for the entire search expression to
  /// be true, specify <code>Or</code>. The default value is <code>And</code>.
  final BooleanOperator? operator;

  /// A list of search expression objects.
  final List<SearchExpression>? subExpressions;

  SearchExpression({
    this.filters,
    this.nestedFilters,
    this.operator,
    this.subExpressions,
  });

  Map<String, dynamic> toJson() {
    final filters = this.filters;
    final nestedFilters = this.nestedFilters;
    final operator = this.operator;
    final subExpressions = this.subExpressions;
    return {
      if (filters != null) 'Filters': filters,
      if (nestedFilters != null) 'NestedFilters': nestedFilters,
      if (operator != null) 'Operator': operator.value,
      if (subExpressions != null) 'SubExpressions': subExpressions,
    };
  }
}

/// A single resource returned as part of the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API response.
class SearchRecord {
  final Endpoint? endpoint;

  /// The properties of an experiment.
  final Experiment? experiment;
  final FeatureGroup? featureGroup;

  /// The feature metadata used to search through the features.
  final FeatureMetadata? featureMetadata;

  /// The properties of a hyperparameter tuning job.
  final HyperParameterTuningJobSearchEntity? hyperParameterTuningJob;
  final ModelDashboardModel? model;

  /// An Amazon SageMaker Model Card that documents details about a machine
  /// learning model.
  final ModelCard? modelCard;
  final ModelPackage? modelPackage;
  final ModelPackageGroup? modelPackageGroup;
  final Pipeline? pipeline;
  final PipelineExecution? pipelineExecution;

  /// The properties of a project.
  final Project? project;

  /// The properties of a training job.
  final TrainingJob? trainingJob;

  /// The properties of a trial.
  final Trial? trial;

  /// The properties of a trial component.
  final TrialComponent? trialComponent;

  SearchRecord({
    this.endpoint,
    this.experiment,
    this.featureGroup,
    this.featureMetadata,
    this.hyperParameterTuningJob,
    this.model,
    this.modelCard,
    this.modelPackage,
    this.modelPackageGroup,
    this.pipeline,
    this.pipelineExecution,
    this.project,
    this.trainingJob,
    this.trial,
    this.trialComponent,
  });

  factory SearchRecord.fromJson(Map<String, dynamic> json) {
    return SearchRecord(
      endpoint: json['Endpoint'] != null
          ? Endpoint.fromJson(json['Endpoint'] as Map<String, dynamic>)
          : null,
      experiment: json['Experiment'] != null
          ? Experiment.fromJson(json['Experiment'] as Map<String, dynamic>)
          : null,
      featureGroup: json['FeatureGroup'] != null
          ? FeatureGroup.fromJson(json['FeatureGroup'] as Map<String, dynamic>)
          : null,
      featureMetadata: json['FeatureMetadata'] != null
          ? FeatureMetadata.fromJson(
              json['FeatureMetadata'] as Map<String, dynamic>)
          : null,
      hyperParameterTuningJob: json['HyperParameterTuningJob'] != null
          ? HyperParameterTuningJobSearchEntity.fromJson(
              json['HyperParameterTuningJob'] as Map<String, dynamic>)
          : null,
      model: json['Model'] != null
          ? ModelDashboardModel.fromJson(json['Model'] as Map<String, dynamic>)
          : null,
      modelCard: json['ModelCard'] != null
          ? ModelCard.fromJson(json['ModelCard'] as Map<String, dynamic>)
          : null,
      modelPackage: json['ModelPackage'] != null
          ? ModelPackage.fromJson(json['ModelPackage'] as Map<String, dynamic>)
          : null,
      modelPackageGroup: json['ModelPackageGroup'] != null
          ? ModelPackageGroup.fromJson(
              json['ModelPackageGroup'] as Map<String, dynamic>)
          : null,
      pipeline: json['Pipeline'] != null
          ? Pipeline.fromJson(json['Pipeline'] as Map<String, dynamic>)
          : null,
      pipelineExecution: json['PipelineExecution'] != null
          ? PipelineExecution.fromJson(
              json['PipelineExecution'] as Map<String, dynamic>)
          : null,
      project: json['Project'] != null
          ? Project.fromJson(json['Project'] as Map<String, dynamic>)
          : null,
      trainingJob: json['TrainingJob'] != null
          ? TrainingJob.fromJson(json['TrainingJob'] as Map<String, dynamic>)
          : null,
      trial: json['Trial'] != null
          ? Trial.fromJson(json['Trial'] as Map<String, dynamic>)
          : null,
      trialComponent: json['TrialComponent'] != null
          ? TrialComponent.fromJson(
              json['TrialComponent'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final endpoint = this.endpoint;
    final experiment = this.experiment;
    final featureGroup = this.featureGroup;
    final featureMetadata = this.featureMetadata;
    final hyperParameterTuningJob = this.hyperParameterTuningJob;
    final model = this.model;
    final modelCard = this.modelCard;
    final modelPackage = this.modelPackage;
    final modelPackageGroup = this.modelPackageGroup;
    final pipeline = this.pipeline;
    final pipelineExecution = this.pipelineExecution;
    final project = this.project;
    final trainingJob = this.trainingJob;
    final trial = this.trial;
    final trialComponent = this.trialComponent;
    return {
      if (endpoint != null) 'Endpoint': endpoint,
      if (experiment != null) 'Experiment': experiment,
      if (featureGroup != null) 'FeatureGroup': featureGroup,
      if (featureMetadata != null) 'FeatureMetadata': featureMetadata,
      if (hyperParameterTuningJob != null)
        'HyperParameterTuningJob': hyperParameterTuningJob,
      if (model != null) 'Model': model,
      if (modelCard != null) 'ModelCard': modelCard,
      if (modelPackage != null) 'ModelPackage': modelPackage,
      if (modelPackageGroup != null) 'ModelPackageGroup': modelPackageGroup,
      if (pipeline != null) 'Pipeline': pipeline,
      if (pipelineExecution != null) 'PipelineExecution': pipelineExecution,
      if (project != null) 'Project': project,
      if (trainingJob != null) 'TrainingJob': trainingJob,
      if (trial != null) 'Trial': trial,
      if (trialComponent != null) 'TrialComponent': trialComponent,
    };
  }
}

class SearchResponse {
  /// If the result of the previous <code>Search</code> request was truncated, the
  /// response includes a NextToken. To retrieve the next set of results, use the
  /// token in the next request.
  final String? nextToken;

  /// A list of <code>SearchRecord</code> objects.
  final List<SearchRecord>? results;

  SearchResponse({
    this.nextToken,
    this.results,
  });

  factory SearchResponse.fromJson(Map<String, dynamic> json) {
    return SearchResponse(
      nextToken: json['NextToken'] as String?,
      results: (json['Results'] as List?)
          ?.nonNulls
          .map((e) => SearchRecord.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final nextToken = this.nextToken;
    final results = this.results;
    return {
      if (nextToken != null) 'NextToken': nextToken,
      if (results != null) 'Results': results,
    };
  }
}

enum SearchSortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const SearchSortOrder(this.value);

  static SearchSortOrder fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SearchSortOrder'));
}

enum SecondaryStatus {
  starting('Starting'),
  launchingMLInstances('LaunchingMLInstances'),
  preparingTrainingStack('PreparingTrainingStack'),
  downloading('Downloading'),
  downloadingTrainingImage('DownloadingTrainingImage'),
  training('Training'),
  uploading('Uploading'),
  stopping('Stopping'),
  stopped('Stopped'),
  maxRuntimeExceeded('MaxRuntimeExceeded'),
  completed('Completed'),
  failed('Failed'),
  interrupted('Interrupted'),
  maxWaitTimeExceeded('MaxWaitTimeExceeded'),
  updating('Updating'),
  restarting('Restarting'),
  pending('Pending'),
  ;

  final String value;

  const SecondaryStatus(this.value);

  static SecondaryStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SecondaryStatus'));
}

/// An array element of <code>SecondaryStatusTransitions</code> for <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a>.
/// It provides additional details about a status that the training job has
/// transitioned through. A training job can be in one of several states, for
/// example, starting, downloading, training, or uploading. Within each state,
/// there are a number of intermediate states. For example, within the starting
/// state, SageMaker could be starting the training job or launching the ML
/// instances. These transitional states are referred to as the job's secondary
/// status.
/// <p/>
class SecondaryStatusTransition {
  /// A timestamp that shows when the training job transitioned to the current
  /// secondary status state.
  final DateTime startTime;

  /// Contains a secondary status information from a training job.
  ///
  /// Status might be one of the following secondary statuses:
  /// <dl> <dt>InProgress</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Starting</code> - Starting the training job.
  /// </li>
  /// <li>
  /// <code>Downloading</code> - An optional stage for algorithms that support
  /// <code>File</code> training input mode. It indicates that data is being
  /// downloaded to the ML storage volumes.
  /// </li>
  /// <li>
  /// <code>Training</code> - Training is in progress.
  /// </li>
  /// <li>
  /// <code>Uploading</code> - Training is complete and the model artifacts are
  /// being uploaded to the S3 location.
  /// </li>
  /// </ul> </dd> <dt>Completed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// </ul> </dd> <dt>Failed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Failed</code> - The training job has failed. The reason for the
  /// failure is returned in the <code>FailureReason</code> field of
  /// <code>DescribeTrainingJobResponse</code>.
  /// </li>
  /// </ul> </dd> <dt>Stopped</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>MaxRuntimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed runtime.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul> </dd> <dt>Stopping</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Stopping</code> - Stopping the training job.
  /// </li>
  /// </ul> </dd> </dl>
  /// We no longer support the following secondary statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>LaunchingMLInstances</code>
  /// </li>
  /// <li>
  /// <code>PreparingTrainingStack</code>
  /// </li>
  /// <li>
  /// <code>DownloadingTrainingImage</code>
  /// </li>
  /// </ul>
  final SecondaryStatus status;

  /// A timestamp that shows when the training job transitioned out of this
  /// secondary status state into another secondary status state or when the
  /// training job has ended.
  final DateTime? endTime;

  /// A detailed description of the progress within a secondary status.
  ///
  /// SageMaker provides secondary statuses and status messages that apply to each
  /// of them:
  /// <dl> <dt>Starting</dt> <dd>
  /// <ul>
  /// <li>
  /// Starting the training job.
  /// </li>
  /// <li>
  /// Launching requested ML instances.
  /// </li>
  /// <li>
  /// Insufficient capacity error from EC2 while launching instances, retrying!
  /// </li>
  /// <li>
  /// Launched instance was unhealthy, replacing it!
  /// </li>
  /// <li>
  /// Preparing the instances for training.
  /// </li>
  /// </ul> </dd> <dt>Training</dt> <dd>
  /// <ul>
  /// <li>
  /// Training image download completed. Training in progress.
  /// </li>
  /// </ul> </dd> </dl> <important>
  /// Status messages are subject to change. Therefore, we recommend not including
  /// them in code that programmatically initiates actions. For examples, don't
  /// use status messages in if statements.
  /// </important>
  /// To have an overview of your training job's progress, view
  /// <code>TrainingJobStatus</code> and <code>SecondaryStatus</code> in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a>,
  /// and <code>StatusMessage</code> together. For example, at the start of a
  /// training job, you might see the following:
  ///
  /// <ul>
  /// <li>
  /// <code>TrainingJobStatus</code> - InProgress
  /// </li>
  /// <li>
  /// <code>SecondaryStatus</code> - Training
  /// </li>
  /// <li>
  /// <code>StatusMessage</code> - Downloading the training image
  /// </li>
  /// </ul>
  final String? statusMessage;

  SecondaryStatusTransition({
    required this.startTime,
    required this.status,
    this.endTime,
    this.statusMessage,
  });

  factory SecondaryStatusTransition.fromJson(Map<String, dynamic> json) {
    return SecondaryStatusTransition(
      startTime: nonNullableTimeStampFromJson(json['StartTime'] as Object),
      status: SecondaryStatus.fromString((json['Status'] as String)),
      endTime: timeStampFromJson(json['EndTime']),
      statusMessage: json['StatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final startTime = this.startTime;
    final status = this.status;
    final endTime = this.endTime;
    final statusMessage = this.statusMessage;
    return {
      'StartTime': unixTimestampToJson(startTime),
      'Status': status.value,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (statusMessage != null) 'StatusMessage': statusMessage,
    };
  }
}

/// A step selected to run in selective execution mode.
class SelectedStep {
  /// The name of the pipeline step.
  final String stepName;

  SelectedStep({
    required this.stepName,
  });

  factory SelectedStep.fromJson(Map<String, dynamic> json) {
    return SelectedStep(
      stepName: json['StepName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final stepName = this.stepName;
    return {
      'StepName': stepName,
    };
  }
}

/// The selective execution configuration applied to the pipeline run.
class SelectiveExecutionConfig {
  /// A list of pipeline steps to run. All step(s) in all path(s) between two
  /// selected steps should be included.
  final List<SelectedStep> selectedSteps;

  /// The ARN from a reference execution of the current pipeline. Used to copy
  /// input collaterals needed for the selected steps to run. The execution status
  /// of the pipeline can be either <code>Failed</code> or <code>Success</code>.
  ///
  /// This field is required if the steps you specify for
  /// <code>SelectedSteps</code> depend on output collaterals from any
  /// non-specified pipeline steps. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-selective-ex.html">Selective
  /// Execution for Pipeline Steps</a>.
  final String? sourcePipelineExecutionArn;

  SelectiveExecutionConfig({
    required this.selectedSteps,
    this.sourcePipelineExecutionArn,
  });

  factory SelectiveExecutionConfig.fromJson(Map<String, dynamic> json) {
    return SelectiveExecutionConfig(
      selectedSteps: (json['SelectedSteps'] as List)
          .nonNulls
          .map((e) => SelectedStep.fromJson(e as Map<String, dynamic>))
          .toList(),
      sourcePipelineExecutionArn: json['SourcePipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final selectedSteps = this.selectedSteps;
    final sourcePipelineExecutionArn = this.sourcePipelineExecutionArn;
    return {
      'SelectedSteps': selectedSteps,
      if (sourcePipelineExecutionArn != null)
        'SourcePipelineExecutionArn': sourcePipelineExecutionArn,
    };
  }
}

/// The ARN from an execution of the current pipeline.
class SelectiveExecutionResult {
  /// The ARN from an execution of the current pipeline.
  final String? sourcePipelineExecutionArn;

  SelectiveExecutionResult({
    this.sourcePipelineExecutionArn,
  });

  factory SelectiveExecutionResult.fromJson(Map<String, dynamic> json) {
    return SelectiveExecutionResult(
      sourcePipelineExecutionArn: json['SourcePipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourcePipelineExecutionArn = this.sourcePipelineExecutionArn;
    return {
      if (sourcePipelineExecutionArn != null)
        'SourcePipelineExecutionArn': sourcePipelineExecutionArn,
    };
  }
}

class SendPipelineExecutionStepFailureResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  SendPipelineExecutionStepFailureResponse({
    this.pipelineExecutionArn,
  });

  factory SendPipelineExecutionStepFailureResponse.fromJson(
      Map<String, dynamic> json) {
    return SendPipelineExecutionStepFailureResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

class SendPipelineExecutionStepSuccessResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  SendPipelineExecutionStepSuccessResponse({
    this.pipelineExecutionArn,
  });

  factory SendPipelineExecutionStepSuccessResponse.fromJson(
      Map<String, dynamic> json) {
    return SendPipelineExecutionStepSuccessResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

/// Details of a provisioned service catalog product. For information about
/// service catalog, see <a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ServiceCatalogProvisionedProductDetails {
  /// The ID of the provisioned product.
  final String? provisionedProductId;

  /// The current status of the product.
  ///
  /// <ul>
  /// <li>
  /// <code>AVAILABLE</code> - Stable state, ready to perform any operation. The
  /// most recent operation succeeded and completed.
  /// </li>
  /// <li>
  /// <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not
  /// have valid results. Wait for an AVAILABLE status before performing
  /// operations.
  /// </li>
  /// <li>
  /// <code>TAINTED</code> - Stable state, ready to perform any operation. The
  /// stack has completed the requested operation but is not exactly what was
  /// requested. For example, a request to update to a new version failed and the
  /// stack rolled back to the current version.
  /// </li>
  /// <li>
  /// <code>ERROR</code> - An unexpected error occurred. The provisioned product
  /// exists but the stack is not running. For example, CloudFormation received a
  /// parameter value that was not valid and could not launch the stack.
  /// </li>
  /// <li>
  /// <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were
  /// performed to provision a new product, but resources have not yet been
  /// created. After reviewing the list of resources to be created, execute the
  /// plan. Wait for an AVAILABLE status before performing operations.
  /// </li>
  /// </ul>
  final String? provisionedProductStatusMessage;

  ServiceCatalogProvisionedProductDetails({
    this.provisionedProductId,
    this.provisionedProductStatusMessage,
  });

  factory ServiceCatalogProvisionedProductDetails.fromJson(
      Map<String, dynamic> json) {
    return ServiceCatalogProvisionedProductDetails(
      provisionedProductId: json['ProvisionedProductId'] as String?,
      provisionedProductStatusMessage:
          json['ProvisionedProductStatusMessage'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final provisionedProductId = this.provisionedProductId;
    final provisionedProductStatusMessage =
        this.provisionedProductStatusMessage;
    return {
      if (provisionedProductId != null)
        'ProvisionedProductId': provisionedProductId,
      if (provisionedProductStatusMessage != null)
        'ProvisionedProductStatusMessage': provisionedProductStatusMessage,
    };
  }
}

/// Details that you specify to provision a service catalog product. For
/// information about service catalog, see <a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ServiceCatalogProvisioningDetails {
  /// The ID of the product to provision.
  final String productId;

  /// The path identifier of the product. This value is optional if the product
  /// has a default path, and required if the product has more than one path.
  final String? pathId;

  /// The ID of the provisioning artifact.
  final String? provisioningArtifactId;

  /// A list of key value pairs that you specify when you provision a product.
  final List<ProvisioningParameter>? provisioningParameters;

  ServiceCatalogProvisioningDetails({
    required this.productId,
    this.pathId,
    this.provisioningArtifactId,
    this.provisioningParameters,
  });

  factory ServiceCatalogProvisioningDetails.fromJson(
      Map<String, dynamic> json) {
    return ServiceCatalogProvisioningDetails(
      productId: json['ProductId'] as String,
      pathId: json['PathId'] as String?,
      provisioningArtifactId: json['ProvisioningArtifactId'] as String?,
      provisioningParameters: (json['ProvisioningParameters'] as List?)
          ?.nonNulls
          .map((e) => ProvisioningParameter.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final productId = this.productId;
    final pathId = this.pathId;
    final provisioningArtifactId = this.provisioningArtifactId;
    final provisioningParameters = this.provisioningParameters;
    return {
      'ProductId': productId,
      if (pathId != null) 'PathId': pathId,
      if (provisioningArtifactId != null)
        'ProvisioningArtifactId': provisioningArtifactId,
      if (provisioningParameters != null)
        'ProvisioningParameters': provisioningParameters,
    };
  }
}

/// Details that you specify to provision a service catalog product. For
/// information about service catalog, see <a
/// href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What
/// is Amazon Web Services Service Catalog</a>.
class ServiceCatalogProvisioningUpdateDetails {
  /// The ID of the provisioning artifact.
  final String? provisioningArtifactId;

  /// A list of key value pairs that you specify when you provision a product.
  final List<ProvisioningParameter>? provisioningParameters;

  ServiceCatalogProvisioningUpdateDetails({
    this.provisioningArtifactId,
    this.provisioningParameters,
  });

  Map<String, dynamic> toJson() {
    final provisioningArtifactId = this.provisioningArtifactId;
    final provisioningParameters = this.provisioningParameters;
    return {
      if (provisioningArtifactId != null)
        'ProvisioningArtifactId': provisioningArtifactId,
      if (provisioningParameters != null)
        'ProvisioningParameters': provisioningParameters,
    };
  }
}

/// Contains information about attribute-based access control (ABAC) for a
/// training job. The session chaining configuration uses Amazon Security Token
/// Service (STS) for your training job to request temporary, limited-privilege
/// credentials to tenants. For more information, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-access-training-data.html#model-access-training-data-abac">Attribute-based
/// access control (ABAC) for multi-tenancy training</a>.
class SessionChainingConfig {
  /// Set to <code>True</code> to allow SageMaker to extract session tags from a
  /// training job creation role and reuse these tags when assuming the training
  /// job execution role.
  final bool? enableSessionTagChaining;

  SessionChainingConfig({
    this.enableSessionTagChaining,
  });

  Map<String, dynamic> toJson() {
    final enableSessionTagChaining = this.enableSessionTagChaining;
    return {
      if (enableSessionTagChaining != null)
        'EnableSessionTagChaining': enableSessionTagChaining,
    };
  }
}

/// The configuration of <code>ShadowMode</code> inference experiment type,
/// which specifies a production variant to take all the inference requests, and
/// a shadow variant to which Amazon SageMaker replicates a percentage of the
/// inference requests. For the shadow variant it also specifies the percentage
/// of requests that Amazon SageMaker replicates.
class ShadowModeConfig {
  /// List of shadow variant configurations.
  final List<ShadowModelVariantConfig> shadowModelVariants;

  /// The name of the production variant, which takes all the inference requests.
  final String sourceModelVariantName;

  ShadowModeConfig({
    required this.shadowModelVariants,
    required this.sourceModelVariantName,
  });

  factory ShadowModeConfig.fromJson(Map<String, dynamic> json) {
    return ShadowModeConfig(
      shadowModelVariants: (json['ShadowModelVariants'] as List)
          .nonNulls
          .map((e) =>
              ShadowModelVariantConfig.fromJson(e as Map<String, dynamic>))
          .toList(),
      sourceModelVariantName: json['SourceModelVariantName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final shadowModelVariants = this.shadowModelVariants;
    final sourceModelVariantName = this.sourceModelVariantName;
    return {
      'ShadowModelVariants': shadowModelVariants,
      'SourceModelVariantName': sourceModelVariantName,
    };
  }
}

/// The name and sampling percentage of a shadow variant.
class ShadowModelVariantConfig {
  /// The percentage of inference requests that Amazon SageMaker replicates from
  /// the production variant to the shadow variant.
  final int samplingPercentage;

  /// The name of the shadow variant.
  final String shadowModelVariantName;

  ShadowModelVariantConfig({
    required this.samplingPercentage,
    required this.shadowModelVariantName,
  });

  factory ShadowModelVariantConfig.fromJson(Map<String, dynamic> json) {
    return ShadowModelVariantConfig(
      samplingPercentage: json['SamplingPercentage'] as int,
      shadowModelVariantName: json['ShadowModelVariantName'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final samplingPercentage = this.samplingPercentage;
    final shadowModelVariantName = this.shadowModelVariantName;
    return {
      'SamplingPercentage': samplingPercentage,
      'ShadowModelVariantName': shadowModelVariantName,
    };
  }
}

/// Specifies options for sharing Amazon SageMaker Studio notebooks. These
/// settings are specified as part of <code>DefaultUserSettings</code> when the
/// <code>CreateDomain</code> API is called, and as part of
/// <code>UserSettings</code> when the <code>CreateUserProfile</code> API is
/// called. When <code>SharingSettings</code> is not specified, notebook sharing
/// isn't allowed.
class SharingSettings {
  /// Whether to include the notebook cell output when sharing the notebook. The
  /// default is <code>Disabled</code>.
  final NotebookOutputOption? notebookOutputOption;

  /// When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon
  /// Web Services Key Management Service (KMS) encryption key ID used to encrypt
  /// the notebook cell output in the Amazon S3 bucket.
  final String? s3KmsKeyId;

  /// When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon
  /// S3 bucket used to store the shared notebook snapshots.
  final String? s3OutputPath;

  SharingSettings({
    this.notebookOutputOption,
    this.s3KmsKeyId,
    this.s3OutputPath,
  });

  factory SharingSettings.fromJson(Map<String, dynamic> json) {
    return SharingSettings(
      notebookOutputOption: (json['NotebookOutputOption'] as String?)
          ?.let(NotebookOutputOption.fromString),
      s3KmsKeyId: json['S3KmsKeyId'] as String?,
      s3OutputPath: json['S3OutputPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final notebookOutputOption = this.notebookOutputOption;
    final s3KmsKeyId = this.s3KmsKeyId;
    final s3OutputPath = this.s3OutputPath;
    return {
      if (notebookOutputOption != null)
        'NotebookOutputOption': notebookOutputOption.value,
      if (s3KmsKeyId != null) 'S3KmsKeyId': s3KmsKeyId,
      if (s3OutputPath != null) 'S3OutputPath': s3OutputPath,
    };
  }
}

enum SharingType {
  private('Private'),
  shared('Shared'),
  ;

  final String value;

  const SharingType(this.value);

  static SharingType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SharingType'));
}

/// A configuration for a shuffle option for input data in a channel. If you use
/// <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key
/// prefix matches are shuffled. If you use <code>ManifestFile</code>, the order
/// of the S3 object references in the <code>ManifestFile</code> is shuffled. If
/// you use <code>AugmentedManifestFile</code>, the order of the JSON lines in
/// the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is
/// determined using the <code>Seed</code> value.
///
/// For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling
/// is done at the start of every epoch. With large datasets, this ensures that
/// the order of the training data is different for each epoch, and it helps
/// reduce bias and possible overfitting. In a multi-node training job when
/// <code>ShuffleConfig</code> is combined with
/// <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data
/// is shuffled across nodes so that the content sent to a particular node on
/// the first epoch might be sent to a different node on the second epoch.
class ShuffleConfig {
  /// Determines the shuffling order in <code>ShuffleConfig</code> value.
  final int seed;

  ShuffleConfig({
    required this.seed,
  });

  factory ShuffleConfig.fromJson(Map<String, dynamic> json) {
    return ShuffleConfig(
      seed: json['Seed'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final seed = this.seed;
    return {
      'Seed': seed,
    };
  }
}

enum SkipModelValidation {
  all('All'),
  none('None'),
  ;

  final String value;

  const SkipModelValidation(this.value);

  static SkipModelValidation fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum SkipModelValidation'));
}

enum SortActionsBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortActionsBy(this.value);

  static SortActionsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SortActionsBy'));
}

enum SortArtifactsBy {
  creationTime('CreationTime'),
  ;

  final String value;

  const SortArtifactsBy(this.value);

  static SortArtifactsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SortArtifactsBy'));
}

enum SortAssociationsBy {
  sourceArn('SourceArn'),
  destinationArn('DestinationArn'),
  sourceType('SourceType'),
  destinationType('DestinationType'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortAssociationsBy(this.value);

  static SortAssociationsBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum SortAssociationsBy'));
}

enum SortBy {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const SortBy(this.value);

  static SortBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception('$value is not known in enum SortBy'));
}

enum SortContextsBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortContextsBy(this.value);

  static SortContextsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SortContextsBy'));
}

enum SortExperimentsBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortExperimentsBy(this.value);

  static SortExperimentsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SortExperimentsBy'));
}

enum SortInferenceExperimentsBy {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  ;

  final String value;

  const SortInferenceExperimentsBy(this.value);

  static SortInferenceExperimentsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SortInferenceExperimentsBy'));
}

enum SortLineageGroupsBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortLineageGroupsBy(this.value);

  static SortLineageGroupsBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum SortLineageGroupsBy'));
}

enum SortOrder {
  ascending('Ascending'),
  descending('Descending'),
  ;

  final String value;

  const SortOrder(this.value);

  static SortOrder fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SortOrder'));
}

enum SortPipelineExecutionsBy {
  creationTime('CreationTime'),
  pipelineExecutionArn('PipelineExecutionArn'),
  ;

  final String value;

  const SortPipelineExecutionsBy(this.value);

  static SortPipelineExecutionsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum SortPipelineExecutionsBy'));
}

enum SortPipelinesBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortPipelinesBy(this.value);

  static SortPipelinesBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SortPipelinesBy'));
}

enum SortTrialComponentsBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortTrialComponentsBy(this.value);

  static SortTrialComponentsBy fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum SortTrialComponentsBy'));
}

enum SortTrialsBy {
  name('Name'),
  creationTime('CreationTime'),
  ;

  final String value;

  const SortTrialsBy(this.value);

  static SortTrialsBy fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SortTrialsBy'));
}

/// Specifies an algorithm that was used to create the model package. The
/// algorithm must be either an algorithm resource in your SageMaker account or
/// an algorithm in Amazon Web Services Marketplace that you are subscribed to.
class SourceAlgorithm {
  /// The name of an algorithm that was used to create the model package. The
  /// algorithm must be either an algorithm resource in your SageMaker account or
  /// an algorithm in Amazon Web Services Marketplace that you are subscribed to.
  final String algorithmName;

  /// Specifies the location of ML model data to deploy during endpoint creation.
  final ModelDataSource? modelDataSource;

  /// The Amazon S3 path where the model artifacts, which result from model
  /// training, are stored. This path must point to a single <code>gzip</code>
  /// compressed tar archive (<code>.tar.gz</code> suffix).
  /// <note>
  /// The model artifacts must be in an S3 bucket that is in the same Amazon Web
  /// Services region as the algorithm.
  /// </note>
  final String? modelDataUrl;

  SourceAlgorithm({
    required this.algorithmName,
    this.modelDataSource,
    this.modelDataUrl,
  });

  factory SourceAlgorithm.fromJson(Map<String, dynamic> json) {
    return SourceAlgorithm(
      algorithmName: json['AlgorithmName'] as String,
      modelDataSource: json['ModelDataSource'] != null
          ? ModelDataSource.fromJson(
              json['ModelDataSource'] as Map<String, dynamic>)
          : null,
      modelDataUrl: json['ModelDataUrl'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmName = this.algorithmName;
    final modelDataSource = this.modelDataSource;
    final modelDataUrl = this.modelDataUrl;
    return {
      'AlgorithmName': algorithmName,
      if (modelDataSource != null) 'ModelDataSource': modelDataSource,
      if (modelDataUrl != null) 'ModelDataUrl': modelDataUrl,
    };
  }
}

/// A list of algorithms that were used to create a model package.
class SourceAlgorithmSpecification {
  /// A list of the algorithms that were used to create a model package.
  final List<SourceAlgorithm> sourceAlgorithms;

  SourceAlgorithmSpecification({
    required this.sourceAlgorithms,
  });

  factory SourceAlgorithmSpecification.fromJson(Map<String, dynamic> json) {
    return SourceAlgorithmSpecification(
      sourceAlgorithms: (json['SourceAlgorithms'] as List)
          .nonNulls
          .map((e) => SourceAlgorithm.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final sourceAlgorithms = this.sourceAlgorithms;
    return {
      'SourceAlgorithms': sourceAlgorithms,
    };
  }
}

/// A list of IP address ranges (<a
/// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>).
/// Used to create an allow list of IP addresses for a private workforce.
/// Workers will only be able to login to their worker portal from an IP address
/// within this range. By default, a workforce isn't restricted to specific IP
/// addresses.
class SourceIpConfig {
  /// A list of one to ten <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Classless
  /// Inter-Domain Routing</a> (CIDR) values.
  ///
  /// Maximum: Ten CIDR values
  /// <note>
  /// The following Length Constraints apply to individual CIDR values in the CIDR
  /// value list.
  /// </note>
  final List<String> cidrs;

  SourceIpConfig({
    required this.cidrs,
  });

  factory SourceIpConfig.fromJson(Map<String, dynamic> json) {
    return SourceIpConfig(
      cidrs: (json['Cidrs'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final cidrs = this.cidrs;
    return {
      'Cidrs': cidrs,
    };
  }
}

/// The application settings for a Code Editor space.
class SpaceCodeEditorAppSettings {
  final ResourceSpec? defaultResourceSpec;

  SpaceCodeEditorAppSettings({
    this.defaultResourceSpec,
  });

  factory SpaceCodeEditorAppSettings.fromJson(Map<String, dynamic> json) {
    return SpaceCodeEditorAppSettings(
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

/// The space's details.
class SpaceDetails {
  /// The creation time.
  final DateTime? creationTime;

  /// The ID of the associated domain.
  final String? domainId;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// Specifies summary information about the ownership settings.
  final OwnershipSettingsSummary? ownershipSettingsSummary;

  /// The name of the space that appears in the Studio UI.
  final String? spaceDisplayName;

  /// The name of the space.
  final String? spaceName;

  /// Specifies summary information about the space settings.
  final SpaceSettingsSummary? spaceSettingsSummary;

  /// Specifies summary information about the space sharing settings.
  final SpaceSharingSettingsSummary? spaceSharingSettingsSummary;

  /// The status.
  final SpaceStatus? status;

  SpaceDetails({
    this.creationTime,
    this.domainId,
    this.lastModifiedTime,
    this.ownershipSettingsSummary,
    this.spaceDisplayName,
    this.spaceName,
    this.spaceSettingsSummary,
    this.spaceSharingSettingsSummary,
    this.status,
  });

  factory SpaceDetails.fromJson(Map<String, dynamic> json) {
    return SpaceDetails(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      ownershipSettingsSummary: json['OwnershipSettingsSummary'] != null
          ? OwnershipSettingsSummary.fromJson(
              json['OwnershipSettingsSummary'] as Map<String, dynamic>)
          : null,
      spaceDisplayName: json['SpaceDisplayName'] as String?,
      spaceName: json['SpaceName'] as String?,
      spaceSettingsSummary: json['SpaceSettingsSummary'] != null
          ? SpaceSettingsSummary.fromJson(
              json['SpaceSettingsSummary'] as Map<String, dynamic>)
          : null,
      spaceSharingSettingsSummary: json['SpaceSharingSettingsSummary'] != null
          ? SpaceSharingSettingsSummary.fromJson(
              json['SpaceSharingSettingsSummary'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.let(SpaceStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final lastModifiedTime = this.lastModifiedTime;
    final ownershipSettingsSummary = this.ownershipSettingsSummary;
    final spaceDisplayName = this.spaceDisplayName;
    final spaceName = this.spaceName;
    final spaceSettingsSummary = this.spaceSettingsSummary;
    final spaceSharingSettingsSummary = this.spaceSharingSettingsSummary;
    final status = this.status;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (ownershipSettingsSummary != null)
        'OwnershipSettingsSummary': ownershipSettingsSummary,
      if (spaceDisplayName != null) 'SpaceDisplayName': spaceDisplayName,
      if (spaceName != null) 'SpaceName': spaceName,
      if (spaceSettingsSummary != null)
        'SpaceSettingsSummary': spaceSettingsSummary,
      if (spaceSharingSettingsSummary != null)
        'SpaceSharingSettingsSummary': spaceSharingSettingsSummary,
      if (status != null) 'Status': status.value,
    };
  }
}

/// The settings for the JupyterLab application within a space.
class SpaceJupyterLabAppSettings {
  /// A list of Git repositories that SageMaker automatically displays to users
  /// for cloning in the JupyterLab application.
  final List<CodeRepository>? codeRepositories;
  final ResourceSpec? defaultResourceSpec;

  SpaceJupyterLabAppSettings({
    this.codeRepositories,
    this.defaultResourceSpec,
  });

  factory SpaceJupyterLabAppSettings.fromJson(Map<String, dynamic> json) {
    return SpaceJupyterLabAppSettings(
      codeRepositories: (json['CodeRepositories'] as List?)
          ?.nonNulls
          .map((e) => CodeRepository.fromJson(e as Map<String, dynamic>))
          .toList(),
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositories = this.codeRepositories;
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (codeRepositories != null) 'CodeRepositories': codeRepositories,
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

/// A collection of space settings.
class SpaceSettings {
  /// The type of app created within the space.
  final AppType? appType;

  /// The Code Editor application settings.
  final SpaceCodeEditorAppSettings? codeEditorAppSettings;

  /// A file system, created by you, that you assign to a space for an Amazon
  /// SageMaker Domain. Permitted users can access this file system in Amazon
  /// SageMaker Studio.
  final List<CustomFileSystem>? customFileSystems;

  /// The settings for the JupyterLab application.
  final SpaceJupyterLabAppSettings? jupyterLabAppSettings;
  final JupyterServerAppSettings? jupyterServerAppSettings;
  final KernelGatewayAppSettings? kernelGatewayAppSettings;

  /// The storage settings for a space.
  final SpaceStorageSettings? spaceStorageSettings;

  SpaceSettings({
    this.appType,
    this.codeEditorAppSettings,
    this.customFileSystems,
    this.jupyterLabAppSettings,
    this.jupyterServerAppSettings,
    this.kernelGatewayAppSettings,
    this.spaceStorageSettings,
  });

  factory SpaceSettings.fromJson(Map<String, dynamic> json) {
    return SpaceSettings(
      appType: (json['AppType'] as String?)?.let(AppType.fromString),
      codeEditorAppSettings: json['CodeEditorAppSettings'] != null
          ? SpaceCodeEditorAppSettings.fromJson(
              json['CodeEditorAppSettings'] as Map<String, dynamic>)
          : null,
      customFileSystems: (json['CustomFileSystems'] as List?)
          ?.nonNulls
          .map((e) => CustomFileSystem.fromJson(e as Map<String, dynamic>))
          .toList(),
      jupyterLabAppSettings: json['JupyterLabAppSettings'] != null
          ? SpaceJupyterLabAppSettings.fromJson(
              json['JupyterLabAppSettings'] as Map<String, dynamic>)
          : null,
      jupyterServerAppSettings: json['JupyterServerAppSettings'] != null
          ? JupyterServerAppSettings.fromJson(
              json['JupyterServerAppSettings'] as Map<String, dynamic>)
          : null,
      kernelGatewayAppSettings: json['KernelGatewayAppSettings'] != null
          ? KernelGatewayAppSettings.fromJson(
              json['KernelGatewayAppSettings'] as Map<String, dynamic>)
          : null,
      spaceStorageSettings: json['SpaceStorageSettings'] != null
          ? SpaceStorageSettings.fromJson(
              json['SpaceStorageSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final appType = this.appType;
    final codeEditorAppSettings = this.codeEditorAppSettings;
    final customFileSystems = this.customFileSystems;
    final jupyterLabAppSettings = this.jupyterLabAppSettings;
    final jupyterServerAppSettings = this.jupyterServerAppSettings;
    final kernelGatewayAppSettings = this.kernelGatewayAppSettings;
    final spaceStorageSettings = this.spaceStorageSettings;
    return {
      if (appType != null) 'AppType': appType.value,
      if (codeEditorAppSettings != null)
        'CodeEditorAppSettings': codeEditorAppSettings,
      if (customFileSystems != null) 'CustomFileSystems': customFileSystems,
      if (jupyterLabAppSettings != null)
        'JupyterLabAppSettings': jupyterLabAppSettings,
      if (jupyterServerAppSettings != null)
        'JupyterServerAppSettings': jupyterServerAppSettings,
      if (kernelGatewayAppSettings != null)
        'KernelGatewayAppSettings': kernelGatewayAppSettings,
      if (spaceStorageSettings != null)
        'SpaceStorageSettings': spaceStorageSettings,
    };
  }
}

/// Specifies summary information about the space settings.
class SpaceSettingsSummary {
  /// The type of app created within the space.
  final AppType? appType;

  /// The storage settings for a space.
  final SpaceStorageSettings? spaceStorageSettings;

  SpaceSettingsSummary({
    this.appType,
    this.spaceStorageSettings,
  });

  factory SpaceSettingsSummary.fromJson(Map<String, dynamic> json) {
    return SpaceSettingsSummary(
      appType: (json['AppType'] as String?)?.let(AppType.fromString),
      spaceStorageSettings: json['SpaceStorageSettings'] != null
          ? SpaceStorageSettings.fromJson(
              json['SpaceStorageSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final appType = this.appType;
    final spaceStorageSettings = this.spaceStorageSettings;
    return {
      if (appType != null) 'AppType': appType.value,
      if (spaceStorageSettings != null)
        'SpaceStorageSettings': spaceStorageSettings,
    };
  }
}

/// A collection of space sharing settings.
class SpaceSharingSettings {
  /// Specifies the sharing type of the space.
  final SharingType sharingType;

  SpaceSharingSettings({
    required this.sharingType,
  });

  factory SpaceSharingSettings.fromJson(Map<String, dynamic> json) {
    return SpaceSharingSettings(
      sharingType: SharingType.fromString((json['SharingType'] as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final sharingType = this.sharingType;
    return {
      'SharingType': sharingType.value,
    };
  }
}

/// Specifies summary information about the space sharing settings.
class SpaceSharingSettingsSummary {
  /// Specifies the sharing type of the space.
  final SharingType? sharingType;

  SpaceSharingSettingsSummary({
    this.sharingType,
  });

  factory SpaceSharingSettingsSummary.fromJson(Map<String, dynamic> json) {
    return SpaceSharingSettingsSummary(
      sharingType:
          (json['SharingType'] as String?)?.let(SharingType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final sharingType = this.sharingType;
    return {
      if (sharingType != null) 'SharingType': sharingType.value,
    };
  }
}

enum SpaceSortKey {
  creationTime('CreationTime'),
  lastModifiedTime('LastModifiedTime'),
  ;

  final String value;

  const SpaceSortKey(this.value);

  static SpaceSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum SpaceSortKey'));
}

enum SpaceStatus {
  deleting('Deleting'),
  failed('Failed'),
  inService('InService'),
  pending('Pending'),
  updating('Updating'),
  updateFailed('Update_Failed'),
  deleteFailed('Delete_Failed'),
  ;

  final String value;

  const SpaceStatus(this.value);

  static SpaceStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SpaceStatus'));
}

/// The storage settings for a space.
class SpaceStorageSettings {
  /// A collection of EBS storage settings for a space.
  final EbsStorageSettings? ebsStorageSettings;

  SpaceStorageSettings({
    this.ebsStorageSettings,
  });

  factory SpaceStorageSettings.fromJson(Map<String, dynamic> json) {
    return SpaceStorageSettings(
      ebsStorageSettings: json['EbsStorageSettings'] != null
          ? EbsStorageSettings.fromJson(
              json['EbsStorageSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final ebsStorageSettings = this.ebsStorageSettings;
    return {
      if (ebsStorageSettings != null) 'EbsStorageSettings': ebsStorageSettings,
    };
  }
}

enum SplitType {
  none('None'),
  line('Line'),
  recordIO('RecordIO'),
  tFRecord('TFRecord'),
  ;

  final String value;

  const SplitType(this.value);

  static SplitType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SplitType'));
}

enum StageStatus {
  creating('CREATING'),
  readytodeploy('READYTODEPLOY'),
  starting('STARTING'),
  inprogress('INPROGRESS'),
  deployed('DEPLOYED'),
  failed('FAILED'),
  stopping('STOPPING'),
  stopped('STOPPED'),
  ;

  final String value;

  const StageStatus(this.value);

  static StageStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum StageStatus'));
}

/// Defines the stairs traffic pattern for an Inference Recommender load test.
/// This pattern type consists of multiple steps where the number of users
/// increases at each step.
///
/// Specify either the stairs or phases traffic pattern.
class Stairs {
  /// Defines how long each traffic step should be.
  final int? durationInSeconds;

  /// Specifies how many steps to perform during traffic.
  final int? numberOfSteps;

  /// Specifies how many new users to spawn in each step.
  final int? usersPerStep;

  Stairs({
    this.durationInSeconds,
    this.numberOfSteps,
    this.usersPerStep,
  });

  factory Stairs.fromJson(Map<String, dynamic> json) {
    return Stairs(
      durationInSeconds: json['DurationInSeconds'] as int?,
      numberOfSteps: json['NumberOfSteps'] as int?,
      usersPerStep: json['UsersPerStep'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final durationInSeconds = this.durationInSeconds;
    final numberOfSteps = this.numberOfSteps;
    final usersPerStep = this.usersPerStep;
    return {
      if (durationInSeconds != null) 'DurationInSeconds': durationInSeconds,
      if (numberOfSteps != null) 'NumberOfSteps': numberOfSteps,
      if (usersPerStep != null) 'UsersPerStep': usersPerStep,
    };
  }
}

class StartInferenceExperimentResponse {
  /// The ARN of the started inference experiment to start.
  final String inferenceExperimentArn;

  StartInferenceExperimentResponse({
    required this.inferenceExperimentArn,
  });

  factory StartInferenceExperimentResponse.fromJson(Map<String, dynamic> json) {
    return StartInferenceExperimentResponse(
      inferenceExperimentArn: json['InferenceExperimentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceExperimentArn = this.inferenceExperimentArn;
    return {
      'InferenceExperimentArn': inferenceExperimentArn,
    };
  }
}

class StartPipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  StartPipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory StartPipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return StartPipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

enum Statistic {
  average('Average'),
  minimum('Minimum'),
  maximum('Maximum'),
  sampleCount('SampleCount'),
  sum('Sum'),
  ;

  final String value;

  const Statistic(this.value);

  static Statistic fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum Statistic'));
}

enum StepStatus {
  starting('Starting'),
  executing('Executing'),
  stopping('Stopping'),
  stopped('Stopped'),
  failed('Failed'),
  succeeded('Succeeded'),
  ;

  final String value;

  const StepStatus(this.value);

  static StepStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum StepStatus'));
}

class StopInferenceExperimentResponse {
  /// The ARN of the stopped inference experiment.
  final String inferenceExperimentArn;

  StopInferenceExperimentResponse({
    required this.inferenceExperimentArn,
  });

  factory StopInferenceExperimentResponse.fromJson(Map<String, dynamic> json) {
    return StopInferenceExperimentResponse(
      inferenceExperimentArn: json['InferenceExperimentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceExperimentArn = this.inferenceExperimentArn;
    return {
      'InferenceExperimentArn': inferenceExperimentArn,
    };
  }
}

class StopPipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the pipeline execution.
  final String? pipelineExecutionArn;

  StopPipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory StopPipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return StopPipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

/// Specifies a limit to how long a model training job or model compilation job
/// can run. It also specifies how long a managed spot training job has to
/// complete. When the job reaches the time limit, SageMaker ends the training
/// or compilation job. Use this API to cap model training costs.
///
/// To stop a training job, SageMaker sends the algorithm the
/// <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
/// Algorithms can use this 120-second window to save the model artifacts, so
/// the results of training are not lost.
///
/// The training algorithms provided by SageMaker automatically save the
/// intermediate results of a model training job when possible. This attempt to
/// save artifacts is only a best effort case as model might not be in a state
/// from which it can be saved. For example, if training has just started, the
/// model might not be ready to save. When saved, this intermediate data is a
/// valid model artifact. You can use it to create a model with
/// <code>CreateModel</code>.
/// <note>
/// The Neural Topic Model (NTM) currently does not support saving intermediate
/// model artifacts. When training NTMs, make sure that the maximum runtime is
/// sufficient for the training job to complete.
/// </note>
class StoppingCondition {
  /// The maximum length of time, in seconds, that a training or compilation job
  /// can be pending before it is stopped.
  final int? maxPendingTimeInSeconds;

  /// The maximum length of time, in seconds, that a training or compilation job
  /// can run before it is stopped.
  ///
  /// For compilation jobs, if the job does not complete during this time, a
  /// <code>TimeOut</code> error is generated. We recommend starting with 900
  /// seconds and increasing as necessary based on your model.
  ///
  /// For all other jobs, if the job does not complete during this time, SageMaker
  /// ends the job. When <code>RetryStrategy</code> is specified in the job
  /// request, <code>MaxRuntimeInSeconds</code> specifies the maximum time for all
  /// of the attempts in total, not each individual attempt. The default value is
  /// 1 day. The maximum value is 28 days.
  ///
  /// The maximum time that a <code>TrainingJob</code> can run in total, including
  /// any time spent publishing metrics or archiving and uploading models after it
  /// has been stopped, is 30 days.
  final int? maxRuntimeInSeconds;

  /// The maximum length of time, in seconds, that a managed Spot training job has
  /// to complete. It is the amount of time spent waiting for Spot capacity plus
  /// the amount of time the job can run. It must be equal to or greater than
  /// <code>MaxRuntimeInSeconds</code>. If the job does not complete during this
  /// time, SageMaker ends the job.
  ///
  /// When <code>RetryStrategy</code> is specified in the job request,
  /// <code>MaxWaitTimeInSeconds</code> specifies the maximum time for all of the
  /// attempts in total, not each individual attempt.
  final int? maxWaitTimeInSeconds;

  StoppingCondition({
    this.maxPendingTimeInSeconds,
    this.maxRuntimeInSeconds,
    this.maxWaitTimeInSeconds,
  });

  factory StoppingCondition.fromJson(Map<String, dynamic> json) {
    return StoppingCondition(
      maxPendingTimeInSeconds: json['MaxPendingTimeInSeconds'] as int?,
      maxRuntimeInSeconds: json['MaxRuntimeInSeconds'] as int?,
      maxWaitTimeInSeconds: json['MaxWaitTimeInSeconds'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final maxPendingTimeInSeconds = this.maxPendingTimeInSeconds;
    final maxRuntimeInSeconds = this.maxRuntimeInSeconds;
    final maxWaitTimeInSeconds = this.maxWaitTimeInSeconds;
    return {
      if (maxPendingTimeInSeconds != null)
        'MaxPendingTimeInSeconds': maxPendingTimeInSeconds,
      if (maxRuntimeInSeconds != null)
        'MaxRuntimeInSeconds': maxRuntimeInSeconds,
      if (maxWaitTimeInSeconds != null)
        'MaxWaitTimeInSeconds': maxWaitTimeInSeconds,
    };
  }
}

enum StorageType {
  standard('Standard'),
  inMemory('InMemory'),
  ;

  final String value;

  const StorageType(this.value);

  static StorageType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum StorageType'));
}

enum StudioLifecycleConfigAppType {
  jupyterServer('JupyterServer'),
  kernelGateway('KernelGateway'),
  codeEditor('CodeEditor'),
  jupyterLab('JupyterLab'),
  ;

  final String value;

  const StudioLifecycleConfigAppType(this.value);

  static StudioLifecycleConfigAppType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum StudioLifecycleConfigAppType'));
}

/// Details of the Amazon SageMaker Studio Lifecycle Configuration.
class StudioLifecycleConfigDetails {
  /// The creation time of the Amazon SageMaker Studio Lifecycle Configuration.
  final DateTime? creationTime;

  /// This value is equivalent to CreationTime because Amazon SageMaker Studio
  /// Lifecycle Configurations are immutable.
  final DateTime? lastModifiedTime;

  /// The App type to which the Lifecycle Configuration is attached.
  final StudioLifecycleConfigAppType? studioLifecycleConfigAppType;

  /// The Amazon Resource Name (ARN) of the Lifecycle Configuration.
  final String? studioLifecycleConfigArn;

  /// The name of the Amazon SageMaker Studio Lifecycle Configuration.
  final String? studioLifecycleConfigName;

  StudioLifecycleConfigDetails({
    this.creationTime,
    this.lastModifiedTime,
    this.studioLifecycleConfigAppType,
    this.studioLifecycleConfigArn,
    this.studioLifecycleConfigName,
  });

  factory StudioLifecycleConfigDetails.fromJson(Map<String, dynamic> json) {
    return StudioLifecycleConfigDetails(
      creationTime: timeStampFromJson(json['CreationTime']),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      studioLifecycleConfigAppType:
          (json['StudioLifecycleConfigAppType'] as String?)
              ?.let(StudioLifecycleConfigAppType.fromString),
      studioLifecycleConfigArn: json['StudioLifecycleConfigArn'] as String?,
      studioLifecycleConfigName: json['StudioLifecycleConfigName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final lastModifiedTime = this.lastModifiedTime;
    final studioLifecycleConfigAppType = this.studioLifecycleConfigAppType;
    final studioLifecycleConfigArn = this.studioLifecycleConfigArn;
    final studioLifecycleConfigName = this.studioLifecycleConfigName;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (studioLifecycleConfigAppType != null)
        'StudioLifecycleConfigAppType': studioLifecycleConfigAppType.value,
      if (studioLifecycleConfigArn != null)
        'StudioLifecycleConfigArn': studioLifecycleConfigArn,
      if (studioLifecycleConfigName != null)
        'StudioLifecycleConfigName': studioLifecycleConfigName,
    };
  }
}

enum StudioLifecycleConfigSortKey {
  creationTime('CreationTime'),
  lastModifiedTime('LastModifiedTime'),
  name('Name'),
  ;

  final String value;

  const StudioLifecycleConfigSortKey(this.value);

  static StudioLifecycleConfigSortKey fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum StudioLifecycleConfigSortKey'));
}

enum StudioWebPortal {
  enabled('ENABLED'),
  disabled('DISABLED'),
  ;

  final String value;

  const StudioWebPortal(this.value);

  static StudioWebPortal fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum StudioWebPortal'));
}

/// Describes a work team of a vendor that does the a labelling job.
class SubscribedWorkteam {
  /// The Amazon Resource Name (ARN) of the vendor that you have subscribed.
  final String workteamArn;

  /// Marketplace product listing ID.
  final String? listingId;

  /// The description of the vendor from the Amazon Marketplace.
  final String? marketplaceDescription;

  /// The title of the service provided by the vendor in the Amazon Marketplace.
  final String? marketplaceTitle;

  /// The name of the vendor in the Amazon Marketplace.
  final String? sellerName;

  SubscribedWorkteam({
    required this.workteamArn,
    this.listingId,
    this.marketplaceDescription,
    this.marketplaceTitle,
    this.sellerName,
  });

  factory SubscribedWorkteam.fromJson(Map<String, dynamic> json) {
    return SubscribedWorkteam(
      workteamArn: json['WorkteamArn'] as String,
      listingId: json['ListingId'] as String?,
      marketplaceDescription: json['MarketplaceDescription'] as String?,
      marketplaceTitle: json['MarketplaceTitle'] as String?,
      sellerName: json['SellerName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final workteamArn = this.workteamArn;
    final listingId = this.listingId;
    final marketplaceDescription = this.marketplaceDescription;
    final marketplaceTitle = this.marketplaceTitle;
    final sellerName = this.sellerName;
    return {
      'WorkteamArn': workteamArn,
      if (listingId != null) 'ListingId': listingId,
      if (marketplaceDescription != null)
        'MarketplaceDescription': marketplaceDescription,
      if (marketplaceTitle != null) 'MarketplaceTitle': marketplaceTitle,
      if (sellerName != null) 'SellerName': sellerName,
    };
  }
}

/// Specified in the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_GetSearchSuggestions.html">GetSearchSuggestions</a>
/// request. Limits the property names that are included in the response.
class SuggestionQuery {
  /// Defines a property name hint. Only property names that begin with the
  /// specified hint are included in the response.
  final PropertyNameQuery? propertyNameQuery;

  SuggestionQuery({
    this.propertyNameQuery,
  });

  Map<String, dynamic> toJson() {
    final propertyNameQuery = this.propertyNameQuery;
    return {
      if (propertyNameQuery != null) 'PropertyNameQuery': propertyNameQuery,
    };
  }
}

enum TableFormat {
  $default('Default'),
  glue('Glue'),
  iceberg('Iceberg'),
  ;

  final String value;

  const TableFormat(this.value);

  static TableFormat fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum TableFormat'));
}

/// The collection of settings used by an AutoML job V2 for the tabular problem
/// type.
class TabularJobConfig {
  /// The name of the target variable in supervised learning, usually represented
  /// by 'y'.
  final String targetAttributeName;

  /// The configuration information of how model candidates are generated.
  final CandidateGenerationConfig? candidateGenerationConfig;
  final AutoMLJobCompletionCriteria? completionCriteria;

  /// A URL to the Amazon S3 data source containing selected features from the
  /// input data source to run an Autopilot job V2. You can input
  /// <code>FeatureAttributeNames</code> (optional) in JSON format as shown below:
  ///
  /// <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.
  ///
  /// You can also specify the data type of the feature (optional) in the format
  /// shown below:
  ///
  /// <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... }
  /// }</code>
  /// <note>
  /// These column keys may not include the target column.
  /// </note>
  /// In ensembling mode, Autopilot only supports the following data types:
  /// <code>numeric</code>, <code>categorical</code>, <code>text</code>, and
  /// <code>datetime</code>. In HPO mode, Autopilot can support
  /// <code>numeric</code>, <code>categorical</code>, <code>text</code>,
  /// <code>datetime</code>, and <code>sequence</code>.
  ///
  /// If only <code>FeatureDataTypes</code> is provided, the column keys
  /// (<code>col1</code>, <code>col2</code>,..) should be a subset of the column
  /// names in the input data.
  ///
  /// If both <code>FeatureDataTypes</code> and <code>FeatureAttributeNames</code>
  /// are provided, then the column keys should be a subset of the column names
  /// provided in <code>FeatureAttributeNames</code>.
  ///
  /// The key name <code>FeatureAttributeNames</code> is fixed. The values listed
  /// in <code>["col1", "col2", ...]</code> are case sensitive and should be a
  /// list of strings containing unique values that are a subset of the column
  /// names in the input data. The list of columns provided must not include the
  /// target column.
  final String? featureSpecificationS3Uri;

  /// Generates possible candidates without training the models. A model candidate
  /// is a combination of data preprocessors, algorithms, and algorithm parameter
  /// settings.
  final bool? generateCandidateDefinitionsOnly;

  /// The method that Autopilot uses to train the data. You can either specify the
  /// mode manually or let Autopilot choose for you based on the dataset size by
  /// selecting <code>AUTO</code>. In <code>AUTO</code> mode, Autopilot chooses
  /// <code>ENSEMBLING</code> for datasets smaller than 100 MB, and
  /// <code>HYPERPARAMETER_TUNING</code> for larger ones.
  ///
  /// The <code>ENSEMBLING</code> mode uses a multi-stack ensemble model to
  /// predict classification and regression tasks directly from your dataset. This
  /// machine learning mode combines several base models to produce an optimal
  /// predictive model. It then uses a stacking ensemble method to combine
  /// predictions from contributing members. A multi-stack ensemble model can
  /// provide better performance over a single model by combining the predictive
  /// capabilities of multiple models. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support">Autopilot
  /// algorithm support</a> for a list of algorithms supported by
  /// <code>ENSEMBLING</code> mode.
  ///
  /// The <code>HYPERPARAMETER_TUNING</code> (HPO) mode uses the best
  /// hyperparameters to train the best version of a model. HPO automatically
  /// selects an algorithm for the type of problem you want to solve. Then HPO
  /// finds the best hyperparameters according to your objective metric. See <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support">Autopilot
  /// algorithm support</a> for a list of algorithms supported by
  /// <code>HYPERPARAMETER_TUNING</code> mode.
  final AutoMLMode? mode;

  /// The type of supervised learning problem available for the model candidates
  /// of the AutoML job V2. For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-problem-types">
  /// SageMaker Autopilot problem types</a>.
  /// <note>
  /// You must either specify the type of supervised learning problem in
  /// <code>ProblemType</code> and provide the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html#sagemaker-CreateAutoMLJobV2-request-AutoMLJobObjective">AutoMLJobObjective</a>
  /// metric, or none at all.
  /// </note>
  final ProblemType? problemType;

  /// If specified, this column name indicates which column of the dataset should
  /// be treated as sample weights for use by the objective metric during the
  /// training, evaluation, and the selection of the best model. This column is
  /// not considered as a predictive feature. For more information on Autopilot
  /// metrics, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html">Metrics
  /// and validation</a>.
  ///
  /// Sample weights should be numeric, non-negative, with larger values
  /// indicating which rows are more important than others. Data points that have
  /// invalid or no weight value are excluded.
  ///
  /// Support for sample weights is available in <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html">Ensembling</a>
  /// mode only.
  final String? sampleWeightAttributeName;

  TabularJobConfig({
    required this.targetAttributeName,
    this.candidateGenerationConfig,
    this.completionCriteria,
    this.featureSpecificationS3Uri,
    this.generateCandidateDefinitionsOnly,
    this.mode,
    this.problemType,
    this.sampleWeightAttributeName,
  });

  factory TabularJobConfig.fromJson(Map<String, dynamic> json) {
    return TabularJobConfig(
      targetAttributeName: json['TargetAttributeName'] as String,
      candidateGenerationConfig: json['CandidateGenerationConfig'] != null
          ? CandidateGenerationConfig.fromJson(
              json['CandidateGenerationConfig'] as Map<String, dynamic>)
          : null,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      featureSpecificationS3Uri: json['FeatureSpecificationS3Uri'] as String?,
      generateCandidateDefinitionsOnly:
          json['GenerateCandidateDefinitionsOnly'] as bool?,
      mode: (json['Mode'] as String?)?.let(AutoMLMode.fromString),
      problemType:
          (json['ProblemType'] as String?)?.let(ProblemType.fromString),
      sampleWeightAttributeName: json['SampleWeightAttributeName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final targetAttributeName = this.targetAttributeName;
    final candidateGenerationConfig = this.candidateGenerationConfig;
    final completionCriteria = this.completionCriteria;
    final featureSpecificationS3Uri = this.featureSpecificationS3Uri;
    final generateCandidateDefinitionsOnly =
        this.generateCandidateDefinitionsOnly;
    final mode = this.mode;
    final problemType = this.problemType;
    final sampleWeightAttributeName = this.sampleWeightAttributeName;
    return {
      'TargetAttributeName': targetAttributeName,
      if (candidateGenerationConfig != null)
        'CandidateGenerationConfig': candidateGenerationConfig,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (featureSpecificationS3Uri != null)
        'FeatureSpecificationS3Uri': featureSpecificationS3Uri,
      if (generateCandidateDefinitionsOnly != null)
        'GenerateCandidateDefinitionsOnly': generateCandidateDefinitionsOnly,
      if (mode != null) 'Mode': mode.value,
      if (problemType != null) 'ProblemType': problemType.value,
      if (sampleWeightAttributeName != null)
        'SampleWeightAttributeName': sampleWeightAttributeName,
    };
  }
}

/// The resolved attributes specific to the tabular problem type.
class TabularResolvedAttributes {
  /// The type of supervised learning problem available for the model candidates
  /// of the AutoML job V2 (Binary Classification, Multiclass Classification,
  /// Regression). For more information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-problem-types">
  /// SageMaker Autopilot problem types</a>.
  final ProblemType? problemType;

  TabularResolvedAttributes({
    this.problemType,
  });

  factory TabularResolvedAttributes.fromJson(Map<String, dynamic> json) {
    return TabularResolvedAttributes(
      problemType:
          (json['ProblemType'] as String?)?.let(ProblemType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final problemType = this.problemType;
    return {
      if (problemType != null) 'ProblemType': problemType.value,
    };
  }
}

/// A tag object that consists of a key and an optional value, used to manage
/// metadata for SageMaker Amazon Web Services resources.
///
/// You can add tags to notebook instances, training jobs, hyperparameter tuning
/// jobs, batch transform jobs, models, labeling jobs, work teams, endpoint
/// configurations, and endpoints. For more information on adding tags to
/// SageMaker resources, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a>.
///
/// For more information on adding metadata to your Amazon Web Services
/// resources with tagging, see <a
/// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
/// Amazon Web Services resources</a>. For advice on best practices for managing
/// Amazon Web Services resources with tagging, see <a
/// href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging
/// Best Practices: Implement an Effective Amazon Web Services Resource Tagging
/// Strategy</a>.
class Tag {
  /// The tag key. Tag keys must be unique per resource.
  final String key;

  /// The tag value.
  final String value;

  Tag({
    required this.key,
    required this.value,
  });

  factory Tag.fromJson(Map<String, dynamic> json) {
    return Tag(
      key: json['Key'] as String,
      value: json['Value'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      'Key': key,
      'Value': value,
    };
  }
}

enum TargetDevice {
  lambda('lambda'),
  mlM4('ml_m4'),
  mlM5('ml_m5'),
  mlM6g('ml_m6g'),
  mlC4('ml_c4'),
  mlC5('ml_c5'),
  mlC6g('ml_c6g'),
  mlP2('ml_p2'),
  mlP3('ml_p3'),
  mlG4dn('ml_g4dn'),
  mlInf1('ml_inf1'),
  mlInf2('ml_inf2'),
  mlTrn1('ml_trn1'),
  mlEia2('ml_eia2'),
  jetsonTx1('jetson_tx1'),
  jetsonTx2('jetson_tx2'),
  jetsonNano('jetson_nano'),
  jetsonXavier('jetson_xavier'),
  rasp3b('rasp3b'),
  rasp4b('rasp4b'),
  imx8qm('imx8qm'),
  deeplens('deeplens'),
  rk3399('rk3399'),
  rk3288('rk3288'),
  aisage('aisage'),
  sbeC('sbe_c'),
  qcs605('qcs605'),
  qcs603('qcs603'),
  sitaraAm57x('sitara_am57x'),
  ambaCv2('amba_cv2'),
  ambaCv22('amba_cv22'),
  ambaCv25('amba_cv25'),
  x86Win32('x86_win32'),
  x86Win64('x86_win64'),
  coreml('coreml'),
  jacintoTda4vm('jacinto_tda4vm'),
  imx8mplus('imx8mplus'),
  ;

  final String value;

  const TargetDevice(this.value);

  static TargetDevice fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TargetDevice'));
}

/// Contains information about a target platform that you want your model to run
/// on, such as OS, architecture, and accelerators. It is an alternative of
/// <code>TargetDevice</code>.
class TargetPlatform {
  /// Specifies a target platform architecture.
  ///
  /// <ul>
  /// <li>
  /// <code>X86_64</code>: 64-bit version of the x86 instruction set.
  /// </li>
  /// <li>
  /// <code>X86</code>: 32-bit version of the x86 instruction set.
  /// </li>
  /// <li>
  /// <code>ARM64</code>: ARMv8 64-bit CPU.
  /// </li>
  /// <li>
  /// <code>ARM_EABIHF</code>: ARMv7 32-bit, Hard Float.
  /// </li>
  /// <li>
  /// <code>ARM_EABI</code>: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM
  /// platform.
  /// </li>
  /// </ul>
  final TargetPlatformArch arch;

  /// Specifies a target platform OS.
  ///
  /// <ul>
  /// <li>
  /// <code>LINUX</code>: Linux-based operating systems.
  /// </li>
  /// <li>
  /// <code>ANDROID</code>: Android operating systems. Android API level can be
  /// specified using the <code>ANDROID_PLATFORM</code> compiler option. For
  /// example, <code>"CompilerOptions": {'ANDROID_PLATFORM': 28}</code>
  /// </li>
  /// </ul>
  final TargetPlatformOs os;

  /// Specifies a target platform accelerator (optional).
  ///
  /// <ul>
  /// <li>
  /// <code>NVIDIA</code>: Nvidia graphics processing unit. It also requires
  /// <code>gpu-code</code>, <code>trt-ver</code>, <code>cuda-ver</code> compiler
  /// options
  /// </li>
  /// <li>
  /// <code>MALI</code>: ARM Mali graphics processor
  /// </li>
  /// <li>
  /// <code>INTEL_GRAPHICS</code>: Integrated Intel graphics
  /// </li>
  /// </ul>
  final TargetPlatformAccelerator? accelerator;

  TargetPlatform({
    required this.arch,
    required this.os,
    this.accelerator,
  });

  factory TargetPlatform.fromJson(Map<String, dynamic> json) {
    return TargetPlatform(
      arch: TargetPlatformArch.fromString((json['Arch'] as String)),
      os: TargetPlatformOs.fromString((json['Os'] as String)),
      accelerator: (json['Accelerator'] as String?)
          ?.let(TargetPlatformAccelerator.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final arch = this.arch;
    final os = this.os;
    final accelerator = this.accelerator;
    return {
      'Arch': arch.value,
      'Os': os.value,
      if (accelerator != null) 'Accelerator': accelerator.value,
    };
  }
}

enum TargetPlatformAccelerator {
  intelGraphics('INTEL_GRAPHICS'),
  mali('MALI'),
  nvidia('NVIDIA'),
  nna('NNA'),
  ;

  final String value;

  const TargetPlatformAccelerator(this.value);

  static TargetPlatformAccelerator fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TargetPlatformAccelerator'));
}

enum TargetPlatformArch {
  x86_64('X86_64'),
  x86('X86'),
  arm64('ARM64'),
  armEabi('ARM_EABI'),
  armEabihf('ARM_EABIHF'),
  ;

  final String value;

  const TargetPlatformArch(this.value);

  static TargetPlatformArch fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TargetPlatformArch'));
}

enum TargetPlatformOs {
  android('ANDROID'),
  linux('LINUX'),
  ;

  final String value;

  const TargetPlatformOs(this.value);

  static TargetPlatformOs fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TargetPlatformOs'));
}

/// A target tracking scaling policy. Includes support for predefined or
/// customized metrics.
///
/// When using the <a
/// href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PutScalingPolicy.html">PutScalingPolicy</a>
/// API, this parameter is required when you are creating a policy with the
/// policy type <code>TargetTrackingScaling</code>.
class TargetTrackingScalingPolicyConfiguration {
  /// An object containing information about a metric.
  final MetricSpecification? metricSpecification;

  /// The recommended target value to specify for the metric when creating a
  /// scaling policy.
  final double? targetValue;

  TargetTrackingScalingPolicyConfiguration({
    this.metricSpecification,
    this.targetValue,
  });

  factory TargetTrackingScalingPolicyConfiguration.fromJson(
      Map<String, dynamic> json) {
    return TargetTrackingScalingPolicyConfiguration(
      metricSpecification: json['MetricSpecification'] != null
          ? MetricSpecification.fromJson(
              json['MetricSpecification'] as Map<String, dynamic>)
          : null,
      targetValue: json['TargetValue'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final metricSpecification = this.metricSpecification;
    final targetValue = this.targetValue;
    return {
      if (metricSpecification != null)
        'MetricSpecification': metricSpecification,
      if (targetValue != null) 'TargetValue': targetValue,
    };
  }
}

/// The TensorBoard app settings.
class TensorBoardAppSettings {
  /// The default instance type and the Amazon Resource Name (ARN) of the
  /// SageMaker image created on the instance.
  final ResourceSpec? defaultResourceSpec;

  TensorBoardAppSettings({
    this.defaultResourceSpec,
  });

  factory TensorBoardAppSettings.fromJson(Map<String, dynamic> json) {
    return TensorBoardAppSettings(
      defaultResourceSpec: json['DefaultResourceSpec'] != null
          ? ResourceSpec.fromJson(
              json['DefaultResourceSpec'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final defaultResourceSpec = this.defaultResourceSpec;
    return {
      if (defaultResourceSpec != null)
        'DefaultResourceSpec': defaultResourceSpec,
    };
  }
}

/// Configuration of storage locations for the Amazon SageMaker Debugger
/// TensorBoard output data.
class TensorBoardOutputConfig {
  /// Path to Amazon S3 storage location for TensorBoard output.
  final String s3OutputPath;

  /// Path to local storage location for tensorBoard output. Defaults to
  /// <code>/opt/ml/output/tensorboard</code>.
  final String? localPath;

  TensorBoardOutputConfig({
    required this.s3OutputPath,
    this.localPath,
  });

  factory TensorBoardOutputConfig.fromJson(Map<String, dynamic> json) {
    return TensorBoardOutputConfig(
      s3OutputPath: json['S3OutputPath'] as String,
      localPath: json['LocalPath'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final localPath = this.localPath;
    return {
      'S3OutputPath': s3OutputPath,
      if (localPath != null) 'LocalPath': localPath,
    };
  }
}

/// The collection of settings used by an AutoML job V2 for the text
/// classification problem type.
class TextClassificationJobConfig {
  /// The name of the column used to provide the sentences to be classified. It
  /// should not be the same as the target column.
  final String contentColumn;

  /// The name of the column used to provide the class labels. It should not be
  /// same as the content column.
  final String targetLabelColumn;

  /// How long a job is allowed to run, or how many candidates a job is allowed to
  /// generate.
  final AutoMLJobCompletionCriteria? completionCriteria;

  TextClassificationJobConfig({
    required this.contentColumn,
    required this.targetLabelColumn,
    this.completionCriteria,
  });

  factory TextClassificationJobConfig.fromJson(Map<String, dynamic> json) {
    return TextClassificationJobConfig(
      contentColumn: json['ContentColumn'] as String,
      targetLabelColumn: json['TargetLabelColumn'] as String,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final contentColumn = this.contentColumn;
    final targetLabelColumn = this.targetLabelColumn;
    final completionCriteria = this.completionCriteria;
    return {
      'ContentColumn': contentColumn,
      'TargetLabelColumn': targetLabelColumn,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
    };
  }
}

/// The collection of settings used by an AutoML job V2 for the text generation
/// problem type.
/// <note>
/// The text generation models that support fine-tuning in Autopilot are
/// currently accessible exclusively in regions supported by Canvas. Refer to
/// the documentation of Canvas for the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/canvas.html">full list
/// of its supported Regions</a>.
/// </note>
class TextGenerationJobConfig {
  /// The name of the base model to fine-tune. Autopilot supports fine-tuning a
  /// variety of large language models. For information on the list of supported
  /// models, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-models.html#autopilot-llms-finetuning-supported-llms">Text
  /// generation models supporting fine-tuning in Autopilot</a>. If no
  /// <code>BaseModelName</code> is provided, the default model used is
  /// <b>Falcon7BInstruct</b>.
  final String? baseModelName;

  /// How long a fine-tuning job is allowed to run. For
  /// <code>TextGenerationJobConfig</code> problem types, the
  /// <code>MaxRuntimePerTrainingJobInSeconds</code> attribute of
  /// <code>AutoMLJobCompletionCriteria</code> defaults to 72h (259200s).
  final AutoMLJobCompletionCriteria? completionCriteria;
  final ModelAccessConfig? modelAccessConfig;

  /// The hyperparameters used to configure and optimize the learning process of
  /// the base model. You can set any combination of the following hyperparameters
  /// for all base models. For more information on each supported hyperparameter,
  /// see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-set-hyperparameters.html">Optimize
  /// the learning process of your text generation models with
  /// hyperparameters</a>.
  ///
  /// <ul>
  /// <li>
  /// <code>"epochCount"</code>: The number of times the model goes through the
  /// entire training dataset. Its value should be a string containing an integer
  /// value within the range of "1" to "10".
  /// </li>
  /// <li>
  /// <code>"batchSize"</code>: The number of data samples used in each iteration
  /// of training. Its value should be a string containing an integer value within
  /// the range of "1" to "64".
  /// </li>
  /// <li>
  /// <code>"learningRate"</code>: The step size at which a model's parameters are
  /// updated during training. Its value should be a string containing a
  /// floating-point value within the range of "0" to "1".
  /// </li>
  /// <li>
  /// <code>"learningRateWarmupSteps"</code>: The number of training steps during
  /// which the learning rate gradually increases before reaching its target or
  /// maximum value. Its value should be a string containing an integer value
  /// within the range of "0" to "250".
  /// </li>
  /// </ul>
  /// Here is an example where all four hyperparameters are configured.
  ///
  /// <code>{ "epochCount":"5", "learningRate":"0.5", "batchSize": "32",
  /// "learningRateWarmupSteps": "10" }</code>
  final Map<String, String>? textGenerationHyperParameters;

  TextGenerationJobConfig({
    this.baseModelName,
    this.completionCriteria,
    this.modelAccessConfig,
    this.textGenerationHyperParameters,
  });

  factory TextGenerationJobConfig.fromJson(Map<String, dynamic> json) {
    return TextGenerationJobConfig(
      baseModelName: json['BaseModelName'] as String?,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      modelAccessConfig: json['ModelAccessConfig'] != null
          ? ModelAccessConfig.fromJson(
              json['ModelAccessConfig'] as Map<String, dynamic>)
          : null,
      textGenerationHyperParameters:
          (json['TextGenerationHyperParameters'] as Map<String, dynamic>?)
              ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final baseModelName = this.baseModelName;
    final completionCriteria = this.completionCriteria;
    final modelAccessConfig = this.modelAccessConfig;
    final textGenerationHyperParameters = this.textGenerationHyperParameters;
    return {
      if (baseModelName != null) 'BaseModelName': baseModelName,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (modelAccessConfig != null) 'ModelAccessConfig': modelAccessConfig,
      if (textGenerationHyperParameters != null)
        'TextGenerationHyperParameters': textGenerationHyperParameters,
    };
  }
}

/// The resolved attributes specific to the text generation problem type.
class TextGenerationResolvedAttributes {
  /// The name of the base model to fine-tune.
  final String? baseModelName;

  TextGenerationResolvedAttributes({
    this.baseModelName,
  });

  factory TextGenerationResolvedAttributes.fromJson(Map<String, dynamic> json) {
    return TextGenerationResolvedAttributes(
      baseModelName: json['BaseModelName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final baseModelName = this.baseModelName;
    return {
      if (baseModelName != null) 'BaseModelName': baseModelName,
    };
  }
}

/// Used to set feature group throughput configuration. There are two modes:
/// <code>ON_DEMAND</code> and <code>PROVISIONED</code>. With on-demand mode,
/// you are charged for data reads and writes that your application performs on
/// your feature group. You do not need to specify read and write throughput
/// because Feature Store accommodates your workloads as they ramp up and down.
/// You can switch a feature group to on-demand only once in a 24 hour period.
/// With provisioned throughput mode, you specify the read and write capacity
/// per second that you expect your application to require, and you are billed
/// based on those limits. Exceeding provisioned throughput will result in your
/// requests being throttled.
///
/// Note: <code>PROVISIONED</code> throughput mode is supported only for feature
/// groups that are offline-only, or use the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType">
/// <code>Standard</code> </a> tier online store.
class ThroughputConfig {
  /// The mode used for your feature group throughput: <code>ON_DEMAND</code> or
  /// <code>PROVISIONED</code>.
  final ThroughputMode throughputMode;

  /// For provisioned feature groups with online store enabled, this indicates the
  /// read throughput you are billed for and can consume without throttling.
  ///
  /// This field is not applicable for on-demand feature groups.
  final int? provisionedReadCapacityUnits;

  /// For provisioned feature groups, this indicates the write throughput you are
  /// billed for and can consume without throttling.
  ///
  /// This field is not applicable for on-demand feature groups.
  final int? provisionedWriteCapacityUnits;

  ThroughputConfig({
    required this.throughputMode,
    this.provisionedReadCapacityUnits,
    this.provisionedWriteCapacityUnits,
  });

  Map<String, dynamic> toJson() {
    final throughputMode = this.throughputMode;
    final provisionedReadCapacityUnits = this.provisionedReadCapacityUnits;
    final provisionedWriteCapacityUnits = this.provisionedWriteCapacityUnits;
    return {
      'ThroughputMode': throughputMode.value,
      if (provisionedReadCapacityUnits != null)
        'ProvisionedReadCapacityUnits': provisionedReadCapacityUnits,
      if (provisionedWriteCapacityUnits != null)
        'ProvisionedWriteCapacityUnits': provisionedWriteCapacityUnits,
    };
  }
}

/// Active throughput configuration of the feature group. There are two modes:
/// <code>ON_DEMAND</code> and <code>PROVISIONED</code>. With on-demand mode,
/// you are charged for data reads and writes that your application performs on
/// your feature group. You do not need to specify read and write throughput
/// because Feature Store accommodates your workloads as they ramp up and down.
/// You can switch a feature group to on-demand only once in a 24 hour period.
/// With provisioned throughput mode, you specify the read and write capacity
/// per second that you expect your application to require, and you are billed
/// based on those limits. Exceeding provisioned throughput will result in your
/// requests being throttled.
///
/// Note: <code>PROVISIONED</code> throughput mode is supported only for feature
/// groups that are offline-only, or use the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType">
/// <code>Standard</code> </a> tier online store.
class ThroughputConfigDescription {
  /// The mode used for your feature group throughput: <code>ON_DEMAND</code> or
  /// <code>PROVISIONED</code>.
  final ThroughputMode throughputMode;

  /// For provisioned feature groups with online store enabled, this indicates the
  /// read throughput you are billed for and can consume without throttling.
  ///
  /// This field is not applicable for on-demand feature groups.
  final int? provisionedReadCapacityUnits;

  /// For provisioned feature groups, this indicates the write throughput you are
  /// billed for and can consume without throttling.
  ///
  /// This field is not applicable for on-demand feature groups.
  final int? provisionedWriteCapacityUnits;

  ThroughputConfigDescription({
    required this.throughputMode,
    this.provisionedReadCapacityUnits,
    this.provisionedWriteCapacityUnits,
  });

  factory ThroughputConfigDescription.fromJson(Map<String, dynamic> json) {
    return ThroughputConfigDescription(
      throughputMode:
          ThroughputMode.fromString((json['ThroughputMode'] as String)),
      provisionedReadCapacityUnits:
          json['ProvisionedReadCapacityUnits'] as int?,
      provisionedWriteCapacityUnits:
          json['ProvisionedWriteCapacityUnits'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final throughputMode = this.throughputMode;
    final provisionedReadCapacityUnits = this.provisionedReadCapacityUnits;
    final provisionedWriteCapacityUnits = this.provisionedWriteCapacityUnits;
    return {
      'ThroughputMode': throughputMode.value,
      if (provisionedReadCapacityUnits != null)
        'ProvisionedReadCapacityUnits': provisionedReadCapacityUnits,
      if (provisionedWriteCapacityUnits != null)
        'ProvisionedWriteCapacityUnits': provisionedWriteCapacityUnits,
    };
  }
}

/// The new throughput configuration for the feature group. You can switch
/// between on-demand and provisioned modes or update the read / write capacity
/// of provisioned feature groups. You can switch a feature group to on-demand
/// only once in a 24 hour period.
class ThroughputConfigUpdate {
  /// For provisioned feature groups with online store enabled, this indicates the
  /// read throughput you are billed for and can consume without throttling.
  final int? provisionedReadCapacityUnits;

  /// For provisioned feature groups, this indicates the write throughput you are
  /// billed for and can consume without throttling.
  final int? provisionedWriteCapacityUnits;

  /// Target throughput mode of the feature group. Throughput update is an
  /// asynchronous operation, and the outcome should be monitored by polling
  /// <code>LastUpdateStatus</code> field in <code>DescribeFeatureGroup</code>
  /// response. You cannot update a feature group's throughput while another
  /// update is in progress.
  final ThroughputMode? throughputMode;

  ThroughputConfigUpdate({
    this.provisionedReadCapacityUnits,
    this.provisionedWriteCapacityUnits,
    this.throughputMode,
  });

  Map<String, dynamic> toJson() {
    final provisionedReadCapacityUnits = this.provisionedReadCapacityUnits;
    final provisionedWriteCapacityUnits = this.provisionedWriteCapacityUnits;
    final throughputMode = this.throughputMode;
    return {
      if (provisionedReadCapacityUnits != null)
        'ProvisionedReadCapacityUnits': provisionedReadCapacityUnits,
      if (provisionedWriteCapacityUnits != null)
        'ProvisionedWriteCapacityUnits': provisionedWriteCapacityUnits,
      if (throughputMode != null) 'ThroughputMode': throughputMode.value,
    };
  }
}

enum ThroughputMode {
  onDemand('OnDemand'),
  provisioned('Provisioned'),
  ;

  final String value;

  const ThroughputMode(this.value);

  static ThroughputMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ThroughputMode'));
}

/// The collection of components that defines the time-series.
class TimeSeriesConfig {
  /// The name of the column that represents the set of item identifiers for which
  /// you want to predict the target value.
  final String itemIdentifierAttributeName;

  /// The name of the column representing the target variable that you want to
  /// predict for each item in your dataset. The data type of the target variable
  /// must be numerical.
  final String targetAttributeName;

  /// The name of the column indicating a point in time at which the target value
  /// of a given item is recorded.
  final String timestampAttributeName;

  /// A set of columns names that can be grouped with the item identifier column
  /// to create a composite key for which a target value is predicted.
  final List<String>? groupingAttributeNames;

  TimeSeriesConfig({
    required this.itemIdentifierAttributeName,
    required this.targetAttributeName,
    required this.timestampAttributeName,
    this.groupingAttributeNames,
  });

  factory TimeSeriesConfig.fromJson(Map<String, dynamic> json) {
    return TimeSeriesConfig(
      itemIdentifierAttributeName:
          json['ItemIdentifierAttributeName'] as String,
      targetAttributeName: json['TargetAttributeName'] as String,
      timestampAttributeName: json['TimestampAttributeName'] as String,
      groupingAttributeNames: (json['GroupingAttributeNames'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final itemIdentifierAttributeName = this.itemIdentifierAttributeName;
    final targetAttributeName = this.targetAttributeName;
    final timestampAttributeName = this.timestampAttributeName;
    final groupingAttributeNames = this.groupingAttributeNames;
    return {
      'ItemIdentifierAttributeName': itemIdentifierAttributeName,
      'TargetAttributeName': targetAttributeName,
      'TimestampAttributeName': timestampAttributeName,
      if (groupingAttributeNames != null)
        'GroupingAttributeNames': groupingAttributeNames,
    };
  }
}

/// The collection of settings used by an AutoML job V2 for the time-series
/// forecasting problem type.
class TimeSeriesForecastingJobConfig {
  /// The frequency of predictions in a forecast.
  ///
  /// Valid intervals are an integer followed by Y (Year), M (Month), W (Week), D
  /// (Day), H (Hour), and min (Minute). For example, <code>1D</code> indicates
  /// every day and <code>15min</code> indicates every 15 minutes. The value of a
  /// frequency must not overlap with the next larger frequency. For example, you
  /// must use a frequency of <code>1H</code> instead of <code>60min</code>.
  ///
  /// The valid values for each frequency are the following:
  ///
  /// <ul>
  /// <li>
  /// Minute - 1-59
  /// </li>
  /// <li>
  /// Hour - 1-23
  /// </li>
  /// <li>
  /// Day - 1-6
  /// </li>
  /// <li>
  /// Week - 1-4
  /// </li>
  /// <li>
  /// Month - 1-11
  /// </li>
  /// <li>
  /// Year - 1
  /// </li>
  /// </ul>
  final String forecastFrequency;

  /// The number of time-steps that the model predicts. The forecast horizon is
  /// also called the prediction length. The maximum forecast horizon is the
  /// lesser of 500 time-steps or 1/4 of the time-steps in the dataset.
  final int forecastHorizon;

  /// The collection of components that defines the time-series.
  final TimeSeriesConfig timeSeriesConfig;
  final CandidateGenerationConfig? candidateGenerationConfig;
  final AutoMLJobCompletionCriteria? completionCriteria;

  /// A URL to the Amazon S3 data source containing additional selected features
  /// that complement the target, itemID, timestamp, and grouped columns set in
  /// <code>TimeSeriesConfig</code>. When not provided, the AutoML job V2 includes
  /// all the columns from the original dataset that are not already declared in
  /// <code>TimeSeriesConfig</code>. If provided, the AutoML job V2 only considers
  /// these additional columns as a complement to the ones declared in
  /// <code>TimeSeriesConfig</code>.
  ///
  /// You can input <code>FeatureAttributeNames</code> (optional) in JSON format
  /// as shown below:
  ///
  /// <code>{ "FeatureAttributeNames":["col1", "col2", ...] }</code>.
  ///
  /// You can also specify the data type of the feature (optional) in the format
  /// shown below:
  ///
  /// <code>{ "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... }
  /// }</code>
  ///
  /// Autopilot supports the following data types: <code>numeric</code>,
  /// <code>categorical</code>, <code>text</code>, and <code>datetime</code>.
  /// <note>
  /// These column keys must not include any column set in
  /// <code>TimeSeriesConfig</code>.
  /// </note>
  final String? featureSpecificationS3Uri;

  /// The quantiles used to train the model for forecasts at a specified quantile.
  /// You can specify quantiles from <code>0.01</code> (p1) to <code>0.99</code>
  /// (p99), by increments of 0.01 or higher. Up to five forecast quantiles can be
  /// specified. When <code>ForecastQuantiles</code> is not provided, the AutoML
  /// job uses the quantiles p10, p50, and p90 as default.
  final List<String>? forecastQuantiles;

  /// The collection of holiday featurization attributes used to incorporate
  /// national holiday information into your forecasting model.
  final List<HolidayConfigAttributes>? holidayConfig;

  /// The transformations modifying specific attributes of the time-series, such
  /// as filling strategies for missing values.
  final TimeSeriesTransformations? transformations;

  TimeSeriesForecastingJobConfig({
    required this.forecastFrequency,
    required this.forecastHorizon,
    required this.timeSeriesConfig,
    this.candidateGenerationConfig,
    this.completionCriteria,
    this.featureSpecificationS3Uri,
    this.forecastQuantiles,
    this.holidayConfig,
    this.transformations,
  });

  factory TimeSeriesForecastingJobConfig.fromJson(Map<String, dynamic> json) {
    return TimeSeriesForecastingJobConfig(
      forecastFrequency: json['ForecastFrequency'] as String,
      forecastHorizon: json['ForecastHorizon'] as int,
      timeSeriesConfig: TimeSeriesConfig.fromJson(
          json['TimeSeriesConfig'] as Map<String, dynamic>),
      candidateGenerationConfig: json['CandidateGenerationConfig'] != null
          ? CandidateGenerationConfig.fromJson(
              json['CandidateGenerationConfig'] as Map<String, dynamic>)
          : null,
      completionCriteria: json['CompletionCriteria'] != null
          ? AutoMLJobCompletionCriteria.fromJson(
              json['CompletionCriteria'] as Map<String, dynamic>)
          : null,
      featureSpecificationS3Uri: json['FeatureSpecificationS3Uri'] as String?,
      forecastQuantiles: (json['ForecastQuantiles'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      holidayConfig: (json['HolidayConfig'] as List?)
          ?.nonNulls
          .map((e) =>
              HolidayConfigAttributes.fromJson(e as Map<String, dynamic>))
          .toList(),
      transformations: json['Transformations'] != null
          ? TimeSeriesTransformations.fromJson(
              json['Transformations'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final forecastFrequency = this.forecastFrequency;
    final forecastHorizon = this.forecastHorizon;
    final timeSeriesConfig = this.timeSeriesConfig;
    final candidateGenerationConfig = this.candidateGenerationConfig;
    final completionCriteria = this.completionCriteria;
    final featureSpecificationS3Uri = this.featureSpecificationS3Uri;
    final forecastQuantiles = this.forecastQuantiles;
    final holidayConfig = this.holidayConfig;
    final transformations = this.transformations;
    return {
      'ForecastFrequency': forecastFrequency,
      'ForecastHorizon': forecastHorizon,
      'TimeSeriesConfig': timeSeriesConfig,
      if (candidateGenerationConfig != null)
        'CandidateGenerationConfig': candidateGenerationConfig,
      if (completionCriteria != null) 'CompletionCriteria': completionCriteria,
      if (featureSpecificationS3Uri != null)
        'FeatureSpecificationS3Uri': featureSpecificationS3Uri,
      if (forecastQuantiles != null) 'ForecastQuantiles': forecastQuantiles,
      if (holidayConfig != null) 'HolidayConfig': holidayConfig,
      if (transformations != null) 'Transformations': transformations,
    };
  }
}

/// Time series forecast settings for the SageMaker Canvas application.
class TimeSeriesForecastingSettings {
  /// The IAM role that Canvas passes to Amazon Forecast for time series
  /// forecasting. By default, Canvas uses the execution role specified in the
  /// <code>UserProfile</code> that launches the Canvas application. If an
  /// execution role is not specified in the <code>UserProfile</code>, Canvas uses
  /// the execution role specified in the Domain that owns the
  /// <code>UserProfile</code>. To allow time series forecasting, this IAM role
  /// should have the <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess">
  /// AmazonSageMakerCanvasForecastAccess</a> policy attached and
  /// <code>forecast.amazonaws.com</code> added in the trust relationship as a
  /// service principal.
  final String? amazonForecastRoleArn;

  /// Describes whether time series forecasting is enabled or disabled in the
  /// Canvas application.
  final FeatureStatus? status;

  TimeSeriesForecastingSettings({
    this.amazonForecastRoleArn,
    this.status,
  });

  factory TimeSeriesForecastingSettings.fromJson(Map<String, dynamic> json) {
    return TimeSeriesForecastingSettings(
      amazonForecastRoleArn: json['AmazonForecastRoleArn'] as String?,
      status: (json['Status'] as String?)?.let(FeatureStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final amazonForecastRoleArn = this.amazonForecastRoleArn;
    final status = this.status;
    return {
      if (amazonForecastRoleArn != null)
        'AmazonForecastRoleArn': amazonForecastRoleArn,
      if (status != null) 'Status': status.value,
    };
  }
}

/// Transformations allowed on the dataset. Supported transformations are
/// <code>Filling</code> and <code>Aggregation</code>. <code>Filling</code>
/// specifies how to add values to missing values in the dataset.
/// <code>Aggregation</code> defines how to aggregate data that does not align
/// with forecast frequency.
class TimeSeriesTransformations {
  /// A key value pair defining the aggregation method for a column, where the key
  /// is the column name and the value is the aggregation method.
  ///
  /// The supported aggregation methods are <code>sum</code> (default),
  /// <code>avg</code>, <code>first</code>, <code>min</code>, <code>max</code>.
  /// <note>
  /// Aggregation is only supported for the target column.
  /// </note>
  final Map<String, AggregationTransformationValue>? aggregation;

  /// A key value pair defining the filling method for a column, where the key is
  /// the column name and the value is an object which defines the filling logic.
  /// You can specify multiple filling methods for a single column.
  ///
  /// The supported filling methods and their corresponding options are:
  ///
  /// <ul>
  /// <li>
  /// <code>frontfill</code>: <code>none</code> (Supported only for target column)
  /// </li>
  /// <li>
  /// <code>middlefill</code>: <code>zero</code>, <code>value</code>,
  /// <code>median</code>, <code>mean</code>, <code>min</code>, <code>max</code>
  /// </li>
  /// <li>
  /// <code>backfill</code>: <code>zero</code>, <code>value</code>,
  /// <code>median</code>, <code>mean</code>, <code>min</code>, <code>max</code>
  /// </li>
  /// <li>
  /// <code>futurefill</code>: <code>zero</code>, <code>value</code>,
  /// <code>median</code>, <code>mean</code>, <code>min</code>, <code>max</code>
  /// </li>
  /// </ul>
  /// To set a filling method to a specific value, set the fill parameter to the
  /// chosen filling method value (for example <code>"backfill" : "value"</code>),
  /// and define the filling value in an additional parameter prefixed with
  /// "_value". For example, to set <code>backfill</code> to a value of
  /// <code>2</code>, you must include two parameters: <code>"backfill":
  /// "value"</code> and <code>"backfill_value":"2"</code>.
  final Map<String, Map<FillingType, String>>? filling;

  TimeSeriesTransformations({
    this.aggregation,
    this.filling,
  });

  factory TimeSeriesTransformations.fromJson(Map<String, dynamic> json) {
    return TimeSeriesTransformations(
      aggregation: (json['Aggregation'] as Map<String, dynamic>?)?.map((k, e) =>
          MapEntry(
              k, AggregationTransformationValue.fromString((e as String)))),
      filling: (json['Filling'] as Map<String, dynamic>?)?.map((k, e) =>
          MapEntry(
              k,
              (e as Map<String, dynamic>).map(
                  (k, e) => MapEntry(FillingType.fromString(k), e as String)))),
    );
  }

  Map<String, dynamic> toJson() {
    final aggregation = this.aggregation;
    final filling = this.filling;
    return {
      if (aggregation != null)
        'Aggregation': aggregation.map((k, e) => MapEntry(k, e.value)),
      if (filling != null)
        'Filling': filling
            .map((k, e) => MapEntry(k, e.map((k, e) => MapEntry(k.value, e)))),
    };
  }
}

/// Defines the traffic pattern of the load test.
class TrafficPattern {
  /// Defines the phases traffic specification.
  final List<Phase>? phases;

  /// Defines the stairs traffic pattern.
  final Stairs? stairs;

  /// Defines the traffic patterns. Choose either <code>PHASES</code> or
  /// <code>STAIRS</code>.
  final TrafficType? trafficType;

  TrafficPattern({
    this.phases,
    this.stairs,
    this.trafficType,
  });

  factory TrafficPattern.fromJson(Map<String, dynamic> json) {
    return TrafficPattern(
      phases: (json['Phases'] as List?)
          ?.nonNulls
          .map((e) => Phase.fromJson(e as Map<String, dynamic>))
          .toList(),
      stairs: json['Stairs'] != null
          ? Stairs.fromJson(json['Stairs'] as Map<String, dynamic>)
          : null,
      trafficType:
          (json['TrafficType'] as String?)?.let(TrafficType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final phases = this.phases;
    final stairs = this.stairs;
    final trafficType = this.trafficType;
    return {
      if (phases != null) 'Phases': phases,
      if (stairs != null) 'Stairs': stairs,
      if (trafficType != null) 'TrafficType': trafficType.value,
    };
  }
}

/// Defines the traffic routing strategy during an endpoint deployment to shift
/// traffic from the old fleet to the new fleet.
class TrafficRoutingConfig {
  /// Traffic routing strategy type.
  ///
  /// <ul>
  /// <li>
  /// <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet in a
  /// single step.
  /// </li>
  /// <li>
  /// <code>CANARY</code>: Endpoint traffic shifts to the new fleet in two steps.
  /// The first step is the canary, which is a small portion of the traffic. The
  /// second step is the remainder of the traffic.
  /// </li>
  /// <li>
  /// <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in n steps of
  /// a configurable size.
  /// </li>
  /// </ul>
  final TrafficRoutingConfigType type;

  /// The waiting time (in seconds) between incremental steps to turn on traffic
  /// on the new endpoint fleet.
  final int waitIntervalInSeconds;

  /// Batch size for the first step to turn on traffic on the new endpoint fleet.
  /// <code>Value</code> must be less than or equal to 50% of the variant's total
  /// instance count.
  final CapacitySize? canarySize;

  /// Batch size for each step to turn on traffic on the new endpoint fleet.
  /// <code>Value</code> must be 10-50% of the variant's total instance count.
  final CapacitySize? linearStepSize;

  TrafficRoutingConfig({
    required this.type,
    required this.waitIntervalInSeconds,
    this.canarySize,
    this.linearStepSize,
  });

  factory TrafficRoutingConfig.fromJson(Map<String, dynamic> json) {
    return TrafficRoutingConfig(
      type: TrafficRoutingConfigType.fromString((json['Type'] as String)),
      waitIntervalInSeconds: json['WaitIntervalInSeconds'] as int,
      canarySize: json['CanarySize'] != null
          ? CapacitySize.fromJson(json['CanarySize'] as Map<String, dynamic>)
          : null,
      linearStepSize: json['LinearStepSize'] != null
          ? CapacitySize.fromJson(
              json['LinearStepSize'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final type = this.type;
    final waitIntervalInSeconds = this.waitIntervalInSeconds;
    final canarySize = this.canarySize;
    final linearStepSize = this.linearStepSize;
    return {
      'Type': type.value,
      'WaitIntervalInSeconds': waitIntervalInSeconds,
      if (canarySize != null) 'CanarySize': canarySize,
      if (linearStepSize != null) 'LinearStepSize': linearStepSize,
    };
  }
}

enum TrafficRoutingConfigType {
  allAtOnce('ALL_AT_ONCE'),
  canary('CANARY'),
  linear('LINEAR'),
  ;

  final String value;

  const TrafficRoutingConfigType(this.value);

  static TrafficRoutingConfigType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrafficRoutingConfigType'));
}

enum TrafficType {
  phases('PHASES'),
  stairs('STAIRS'),
  ;

  final String value;

  const TrafficType(this.value);

  static TrafficType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum TrafficType'));
}

/// The configuration to use an image from a private Docker registry for a
/// training job.
class TrainingImageConfig {
  /// The method that your training job will use to gain access to the images in
  /// your private Docker registry. For access to an image in a private Docker
  /// registry, set to <code>Vpc</code>.
  final TrainingRepositoryAccessMode trainingRepositoryAccessMode;

  /// An object containing authentication information for a private Docker
  /// registry containing your training images.
  final TrainingRepositoryAuthConfig? trainingRepositoryAuthConfig;

  TrainingImageConfig({
    required this.trainingRepositoryAccessMode,
    this.trainingRepositoryAuthConfig,
  });

  factory TrainingImageConfig.fromJson(Map<String, dynamic> json) {
    return TrainingImageConfig(
      trainingRepositoryAccessMode: TrainingRepositoryAccessMode.fromString(
          (json['TrainingRepositoryAccessMode'] as String)),
      trainingRepositoryAuthConfig: json['TrainingRepositoryAuthConfig'] != null
          ? TrainingRepositoryAuthConfig.fromJson(
              json['TrainingRepositoryAuthConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingRepositoryAccessMode = this.trainingRepositoryAccessMode;
    final trainingRepositoryAuthConfig = this.trainingRepositoryAuthConfig;
    return {
      'TrainingRepositoryAccessMode': trainingRepositoryAccessMode.value,
      if (trainingRepositoryAuthConfig != null)
        'TrainingRepositoryAuthConfig': trainingRepositoryAuthConfig,
    };
  }
}

/// The training input mode that the algorithm supports. For more information
/// about input modes, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.
///
/// <b>Pipe mode</b>
///
/// If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams
/// data directly from Amazon S3 to the container.
///
/// <b>File mode</b>
///
/// If an algorithm supports <code>File</code> mode, SageMaker downloads the
/// training data from S3 to the provisioned ML storage volume, and mounts the
/// directory to the Docker volume for the training container.
///
/// You must provision the ML storage volume with sufficient capacity to
/// accommodate the data downloaded from S3. In addition to the training data,
/// the ML storage volume also stores the output model. The algorithm container
/// uses the ML storage volume to also store intermediate information, if any.
///
/// For distributed algorithms, training data is distributed uniformly. Your
/// training duration is predictable if the input data objects sizes are
/// approximately the same. SageMaker does not split the files any further for
/// model training. If the object sizes are skewed, training won't be optimal as
/// the data distribution is also skewed when one host in a training cluster is
/// overloaded, thus becoming a bottleneck in training.
///
/// <b>FastFile mode</b>
///
/// If an algorithm supports <code>FastFile</code> mode, SageMaker streams data
/// directly from S3 to the container with no code changes, and provides file
/// system access to the data. Users can author their training script to
/// interact with these files as if they were stored on disk.
///
/// <code>FastFile</code> mode works best when the data is read sequentially.
/// Augmented manifest files aren't supported. The startup time is lower when
/// there are fewer files in the S3 bucket provided.
enum TrainingInputMode {
  pipe('Pipe'),
  file('File'),
  fastFile('FastFile'),
  ;

  final String value;

  const TrainingInputMode(this.value);

  static TrainingInputMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TrainingInputMode'));
}

enum TrainingInstanceType {
  mlM4Xlarge('ml.m4.xlarge'),
  mlM4_2xlarge('ml.m4.2xlarge'),
  mlM4_4xlarge('ml.m4.4xlarge'),
  mlM4_10xlarge('ml.m4.10xlarge'),
  mlM4_16xlarge('ml.m4.16xlarge'),
  mlG4dnXlarge('ml.g4dn.xlarge'),
  mlG4dn_2xlarge('ml.g4dn.2xlarge'),
  mlG4dn_4xlarge('ml.g4dn.4xlarge'),
  mlG4dn_8xlarge('ml.g4dn.8xlarge'),
  mlG4dn_12xlarge('ml.g4dn.12xlarge'),
  mlG4dn_16xlarge('ml.g4dn.16xlarge'),
  mlM5Large('ml.m5.large'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlC4Xlarge('ml.c4.xlarge'),
  mlC4_2xlarge('ml.c4.2xlarge'),
  mlC4_4xlarge('ml.c4.4xlarge'),
  mlC4_8xlarge('ml.c4.8xlarge'),
  mlP2Xlarge('ml.p2.xlarge'),
  mlP2_8xlarge('ml.p2.8xlarge'),
  mlP2_16xlarge('ml.p2.16xlarge'),
  mlP3_2xlarge('ml.p3.2xlarge'),
  mlP3_8xlarge('ml.p3.8xlarge'),
  mlP3_16xlarge('ml.p3.16xlarge'),
  mlP3dn_24xlarge('ml.p3dn.24xlarge'),
  mlP4d_24xlarge('ml.p4d.24xlarge'),
  mlP4de_24xlarge('ml.p4de.24xlarge'),
  mlP5_48xlarge('ml.p5.48xlarge'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlC5nXlarge('ml.c5n.xlarge'),
  mlC5n_2xlarge('ml.c5n.2xlarge'),
  mlC5n_4xlarge('ml.c5n.4xlarge'),
  mlC5n_9xlarge('ml.c5n.9xlarge'),
  mlC5n_18xlarge('ml.c5n.18xlarge'),
  mlG5Xlarge('ml.g5.xlarge'),
  mlG5_2xlarge('ml.g5.2xlarge'),
  mlG5_4xlarge('ml.g5.4xlarge'),
  mlG5_8xlarge('ml.g5.8xlarge'),
  mlG5_16xlarge('ml.g5.16xlarge'),
  mlG5_12xlarge('ml.g5.12xlarge'),
  mlG5_24xlarge('ml.g5.24xlarge'),
  mlG5_48xlarge('ml.g5.48xlarge'),
  mlTrn1_2xlarge('ml.trn1.2xlarge'),
  mlTrn1_32xlarge('ml.trn1.32xlarge'),
  mlTrn1n_32xlarge('ml.trn1n.32xlarge'),
  mlM6iLarge('ml.m6i.large'),
  mlM6iXlarge('ml.m6i.xlarge'),
  mlM6i_2xlarge('ml.m6i.2xlarge'),
  mlM6i_4xlarge('ml.m6i.4xlarge'),
  mlM6i_8xlarge('ml.m6i.8xlarge'),
  mlM6i_12xlarge('ml.m6i.12xlarge'),
  mlM6i_16xlarge('ml.m6i.16xlarge'),
  mlM6i_24xlarge('ml.m6i.24xlarge'),
  mlM6i_32xlarge('ml.m6i.32xlarge'),
  mlC6iXlarge('ml.c6i.xlarge'),
  mlC6i_2xlarge('ml.c6i.2xlarge'),
  mlC6i_8xlarge('ml.c6i.8xlarge'),
  mlC6i_4xlarge('ml.c6i.4xlarge'),
  mlC6i_12xlarge('ml.c6i.12xlarge'),
  mlC6i_16xlarge('ml.c6i.16xlarge'),
  mlC6i_24xlarge('ml.c6i.24xlarge'),
  mlC6i_32xlarge('ml.c6i.32xlarge'),
  ;

  final String value;

  const TrainingInstanceType(this.value);

  static TrainingInstanceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TrainingInstanceType'));
}

/// Contains information about a training job.
class TrainingJob {
  /// Information about the algorithm used for training, and algorithm metadata.
  final AlgorithmSpecification? algorithmSpecification;

  /// The Amazon Resource Name (ARN) of the job.
  final String? autoMLJobArn;

  /// The billable time in seconds.
  final int? billableTimeInSeconds;
  final CheckpointConfig? checkpointConfig;

  /// A timestamp that indicates when the training job was created.
  final DateTime? creationTime;
  final DebugHookConfig? debugHookConfig;

  /// Information about the debug rule configuration.
  final List<DebugRuleConfiguration>? debugRuleConfigurations;

  /// Information about the evaluation status of the rules for the training job.
  final List<DebugRuleEvaluationStatus>? debugRuleEvaluationStatuses;

  /// To encrypt all communications between ML compute instances in distributed
  /// training, choose <code>True</code>. Encryption provides greater security for
  /// distributed training, but training might take longer. How long it takes
  /// depends on the amount of communication between compute instances, especially
  /// if you use a deep learning algorithm in distributed training.
  final bool? enableInterContainerTrafficEncryption;

  /// When true, enables managed spot training using Amazon EC2 Spot instances to
  /// run training jobs instead of on-demand instances. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed
  /// Spot Training</a>.
  final bool? enableManagedSpotTraining;

  /// If the <code>TrainingJob</code> was created with network isolation, the
  /// value is set to <code>true</code>. If network isolation is enabled, nodes
  /// can't communicate beyond the VPC they run in.
  final bool? enableNetworkIsolation;

  /// The environment variables to set in the Docker container.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the training job failed, the reason it failed.
  final String? failureReason;

  /// A list of final metric values that are set when the training job completes.
  /// Used only if the training job was configured to use metrics.
  final List<MetricData>? finalMetricDataList;

  /// Algorithm-specific parameters.
  final Map<String, String>? hyperParameters;

  /// An array of <code>Channel</code> objects that describes each data input
  /// channel.
  ///
  /// Your input must be in the same Amazon Web Services region as your training
  /// job.
  final List<Channel>? inputDataConfig;

  /// The Amazon Resource Name (ARN) of the labeling job.
  final String? labelingJobArn;

  /// A timestamp that indicates when the status of the training job was last
  /// modified.
  final DateTime? lastModifiedTime;

  /// Information about the Amazon S3 location that is configured for storing
  /// model artifacts.
  final ModelArtifacts? modelArtifacts;

  /// The S3 path where model artifacts that you configured when creating the job
  /// are stored. SageMaker creates subfolders for model artifacts.
  final OutputDataConfig? outputDataConfig;
  final ProfilerConfig? profilerConfig;

  /// Resources, including ML compute instances and ML storage volumes, that are
  /// configured for model training.
  final ResourceConfig? resourceConfig;

  /// The number of times to retry the job when the job fails due to an
  /// <code>InternalServerError</code>.
  final RetryStrategy? retryStrategy;

  /// The Amazon Web Services Identity and Access Management (IAM) role configured
  /// for the training job.
  final String? roleArn;

  /// Provides detailed information about the state of the training job. For
  /// detailed information about the secondary status of the training job, see
  /// <code>StatusMessage</code> under <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SecondaryStatusTransition.html">SecondaryStatusTransition</a>.
  ///
  /// SageMaker provides primary statuses and secondary statuses that apply to
  /// each of them:
  /// <dl> <dt>InProgress</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Starting</code> - Starting the training job.
  /// </li>
  /// <li>
  /// <code>Downloading</code> - An optional stage for algorithms that support
  /// <code>File</code> training input mode. It indicates that data is being
  /// downloaded to the ML storage volumes.
  /// </li>
  /// <li>
  /// <code>Training</code> - Training is in progress.
  /// </li>
  /// <li>
  /// <code>Uploading</code> - Training is complete and the model artifacts are
  /// being uploaded to the S3 location.
  /// </li>
  /// </ul> </dd> <dt>Completed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// </ul> </dd> <dt>Failed</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Failed</code> - The training job has failed. The reason for the
  /// failure is returned in the <code>FailureReason</code> field of
  /// <code>DescribeTrainingJobResponse</code>.
  /// </li>
  /// </ul> </dd> <dt>Stopped</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>MaxRuntimeExceeded</code> - The job stopped because it exceeded the
  /// maximum allowed runtime.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul> </dd> <dt>Stopping</dt> <dd>
  /// <ul>
  /// <li>
  /// <code>Stopping</code> - Stopping the training job.
  /// </li>
  /// </ul> </dd> </dl> <important>
  /// Valid values for <code>SecondaryStatus</code> are subject to change.
  /// </important>
  /// We no longer support the following secondary statuses:
  ///
  /// <ul>
  /// <li>
  /// <code>LaunchingMLInstances</code>
  /// </li>
  /// <li>
  /// <code>PreparingTrainingStack</code>
  /// </li>
  /// <li>
  /// <code>DownloadingTrainingImage</code>
  /// </li>
  /// </ul>
  final SecondaryStatus? secondaryStatus;

  /// A history of all of the secondary statuses that the training job has
  /// transitioned through.
  final List<SecondaryStatusTransition>? secondaryStatusTransitions;

  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the job
  /// reaches the time limit, SageMaker ends the training job. Use this API to cap
  /// model training costs.
  ///
  /// To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code>
  /// signal, which delays job termination for 120 seconds. Algorithms can use
  /// this 120-second window to save the model artifacts, so the results of
  /// training are not lost.
  final StoppingCondition? stoppingCondition;

  /// An array of key-value pairs. You can use tags to categorize your Amazon Web
  /// Services resources in different ways, for example, by purpose, owner, or
  /// environment. For more information, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
  /// Amazon Web Services Resources</a>.
  final List<Tag>? tags;
  final TensorBoardOutputConfig? tensorBoardOutputConfig;

  /// Indicates the time when the training job ends on training instances. You are
  /// billed for the time interval between the value of
  /// <code>TrainingStartTime</code> and this time. For successful jobs and
  /// stopped jobs, this is the time after model artifacts are uploaded. For
  /// failed jobs, this is the time when SageMaker detects a job failure.
  final DateTime? trainingEndTime;

  /// The Amazon Resource Name (ARN) of the training job.
  final String? trainingJobArn;

  /// The name of the training job.
  final String? trainingJobName;

  /// The status of the training job.
  ///
  /// Training job statuses are:
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code> - The training is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code> - The training job has completed.
  /// </li>
  /// <li>
  /// <code>Failed</code> - The training job has failed. To see the reason for the
  /// failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeTrainingJobResponse</code> call.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - The training job is stopping.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The training job has stopped.
  /// </li>
  /// </ul>
  /// For more detailed information, see <code>SecondaryStatus</code>.
  final TrainingJobStatus? trainingJobStatus;

  /// Indicates the time when the training job starts on training instances. You
  /// are billed for the time interval between this time and the value of
  /// <code>TrainingEndTime</code>. The start time in CloudWatch Logs might be
  /// later than this time. The difference is due to the time it takes to download
  /// the training data and to the size of the training container.
  final DateTime? trainingStartTime;

  /// The training time in seconds.
  final int? trainingTimeInSeconds;

  /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job
  /// if the training job was launched by a hyperparameter tuning job.
  final String? tuningJobArn;

  /// A <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a>
  /// object that specifies the VPC that this training job has access to. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect
  /// Training Jobs by Using an Amazon Virtual Private Cloud</a>.
  final VpcConfig? vpcConfig;

  TrainingJob({
    this.algorithmSpecification,
    this.autoMLJobArn,
    this.billableTimeInSeconds,
    this.checkpointConfig,
    this.creationTime,
    this.debugHookConfig,
    this.debugRuleConfigurations,
    this.debugRuleEvaluationStatuses,
    this.enableInterContainerTrafficEncryption,
    this.enableManagedSpotTraining,
    this.enableNetworkIsolation,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.finalMetricDataList,
    this.hyperParameters,
    this.inputDataConfig,
    this.labelingJobArn,
    this.lastModifiedTime,
    this.modelArtifacts,
    this.outputDataConfig,
    this.profilerConfig,
    this.resourceConfig,
    this.retryStrategy,
    this.roleArn,
    this.secondaryStatus,
    this.secondaryStatusTransitions,
    this.stoppingCondition,
    this.tags,
    this.tensorBoardOutputConfig,
    this.trainingEndTime,
    this.trainingJobArn,
    this.trainingJobName,
    this.trainingJobStatus,
    this.trainingStartTime,
    this.trainingTimeInSeconds,
    this.tuningJobArn,
    this.vpcConfig,
  });

  factory TrainingJob.fromJson(Map<String, dynamic> json) {
    return TrainingJob(
      algorithmSpecification: json['AlgorithmSpecification'] != null
          ? AlgorithmSpecification.fromJson(
              json['AlgorithmSpecification'] as Map<String, dynamic>)
          : null,
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      billableTimeInSeconds: json['BillableTimeInSeconds'] as int?,
      checkpointConfig: json['CheckpointConfig'] != null
          ? CheckpointConfig.fromJson(
              json['CheckpointConfig'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      debugHookConfig: json['DebugHookConfig'] != null
          ? DebugHookConfig.fromJson(
              json['DebugHookConfig'] as Map<String, dynamic>)
          : null,
      debugRuleConfigurations: (json['DebugRuleConfigurations'] as List?)
          ?.nonNulls
          .map(
              (e) => DebugRuleConfiguration.fromJson(e as Map<String, dynamic>))
          .toList(),
      debugRuleEvaluationStatuses:
          (json['DebugRuleEvaluationStatuses'] as List?)
              ?.nonNulls
              .map((e) =>
                  DebugRuleEvaluationStatus.fromJson(e as Map<String, dynamic>))
              .toList(),
      enableInterContainerTrafficEncryption:
          json['EnableInterContainerTrafficEncryption'] as bool?,
      enableManagedSpotTraining: json['EnableManagedSpotTraining'] as bool?,
      enableNetworkIsolation: json['EnableNetworkIsolation'] as bool?,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      finalMetricDataList: (json['FinalMetricDataList'] as List?)
          ?.nonNulls
          .map((e) => MetricData.fromJson(e as Map<String, dynamic>))
          .toList(),
      hyperParameters: (json['HyperParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      inputDataConfig: (json['InputDataConfig'] as List?)
          ?.nonNulls
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      labelingJobArn: json['LabelingJobArn'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      modelArtifacts: json['ModelArtifacts'] != null
          ? ModelArtifacts.fromJson(
              json['ModelArtifacts'] as Map<String, dynamic>)
          : null,
      outputDataConfig: json['OutputDataConfig'] != null
          ? OutputDataConfig.fromJson(
              json['OutputDataConfig'] as Map<String, dynamic>)
          : null,
      profilerConfig: json['ProfilerConfig'] != null
          ? ProfilerConfig.fromJson(
              json['ProfilerConfig'] as Map<String, dynamic>)
          : null,
      resourceConfig: json['ResourceConfig'] != null
          ? ResourceConfig.fromJson(
              json['ResourceConfig'] as Map<String, dynamic>)
          : null,
      retryStrategy: json['RetryStrategy'] != null
          ? RetryStrategy.fromJson(
              json['RetryStrategy'] as Map<String, dynamic>)
          : null,
      roleArn: json['RoleArn'] as String?,
      secondaryStatus:
          (json['SecondaryStatus'] as String?)?.let(SecondaryStatus.fromString),
      secondaryStatusTransitions: (json['SecondaryStatusTransitions'] as List?)
          ?.nonNulls
          .map((e) =>
              SecondaryStatusTransition.fromJson(e as Map<String, dynamic>))
          .toList(),
      stoppingCondition: json['StoppingCondition'] != null
          ? StoppingCondition.fromJson(
              json['StoppingCondition'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      tensorBoardOutputConfig: json['TensorBoardOutputConfig'] != null
          ? TensorBoardOutputConfig.fromJson(
              json['TensorBoardOutputConfig'] as Map<String, dynamic>)
          : null,
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      trainingJobArn: json['TrainingJobArn'] as String?,
      trainingJobName: json['TrainingJobName'] as String?,
      trainingJobStatus: (json['TrainingJobStatus'] as String?)
          ?.let(TrainingJobStatus.fromString),
      trainingStartTime: timeStampFromJson(json['TrainingStartTime']),
      trainingTimeInSeconds: json['TrainingTimeInSeconds'] as int?,
      tuningJobArn: json['TuningJobArn'] as String?,
      vpcConfig: json['VpcConfig'] != null
          ? VpcConfig.fromJson(json['VpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final algorithmSpecification = this.algorithmSpecification;
    final autoMLJobArn = this.autoMLJobArn;
    final billableTimeInSeconds = this.billableTimeInSeconds;
    final checkpointConfig = this.checkpointConfig;
    final creationTime = this.creationTime;
    final debugHookConfig = this.debugHookConfig;
    final debugRuleConfigurations = this.debugRuleConfigurations;
    final debugRuleEvaluationStatuses = this.debugRuleEvaluationStatuses;
    final enableInterContainerTrafficEncryption =
        this.enableInterContainerTrafficEncryption;
    final enableManagedSpotTraining = this.enableManagedSpotTraining;
    final enableNetworkIsolation = this.enableNetworkIsolation;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final finalMetricDataList = this.finalMetricDataList;
    final hyperParameters = this.hyperParameters;
    final inputDataConfig = this.inputDataConfig;
    final labelingJobArn = this.labelingJobArn;
    final lastModifiedTime = this.lastModifiedTime;
    final modelArtifacts = this.modelArtifacts;
    final outputDataConfig = this.outputDataConfig;
    final profilerConfig = this.profilerConfig;
    final resourceConfig = this.resourceConfig;
    final retryStrategy = this.retryStrategy;
    final roleArn = this.roleArn;
    final secondaryStatus = this.secondaryStatus;
    final secondaryStatusTransitions = this.secondaryStatusTransitions;
    final stoppingCondition = this.stoppingCondition;
    final tags = this.tags;
    final tensorBoardOutputConfig = this.tensorBoardOutputConfig;
    final trainingEndTime = this.trainingEndTime;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final trainingStartTime = this.trainingStartTime;
    final trainingTimeInSeconds = this.trainingTimeInSeconds;
    final tuningJobArn = this.tuningJobArn;
    final vpcConfig = this.vpcConfig;
    return {
      if (algorithmSpecification != null)
        'AlgorithmSpecification': algorithmSpecification,
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (billableTimeInSeconds != null)
        'BillableTimeInSeconds': billableTimeInSeconds,
      if (checkpointConfig != null) 'CheckpointConfig': checkpointConfig,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (debugHookConfig != null) 'DebugHookConfig': debugHookConfig,
      if (debugRuleConfigurations != null)
        'DebugRuleConfigurations': debugRuleConfigurations,
      if (debugRuleEvaluationStatuses != null)
        'DebugRuleEvaluationStatuses': debugRuleEvaluationStatuses,
      if (enableInterContainerTrafficEncryption != null)
        'EnableInterContainerTrafficEncryption':
            enableInterContainerTrafficEncryption,
      if (enableManagedSpotTraining != null)
        'EnableManagedSpotTraining': enableManagedSpotTraining,
      if (enableNetworkIsolation != null)
        'EnableNetworkIsolation': enableNetworkIsolation,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (finalMetricDataList != null)
        'FinalMetricDataList': finalMetricDataList,
      if (hyperParameters != null) 'HyperParameters': hyperParameters,
      if (inputDataConfig != null) 'InputDataConfig': inputDataConfig,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (modelArtifacts != null) 'ModelArtifacts': modelArtifacts,
      if (outputDataConfig != null) 'OutputDataConfig': outputDataConfig,
      if (profilerConfig != null) 'ProfilerConfig': profilerConfig,
      if (resourceConfig != null) 'ResourceConfig': resourceConfig,
      if (retryStrategy != null) 'RetryStrategy': retryStrategy,
      if (roleArn != null) 'RoleArn': roleArn,
      if (secondaryStatus != null) 'SecondaryStatus': secondaryStatus.value,
      if (secondaryStatusTransitions != null)
        'SecondaryStatusTransitions': secondaryStatusTransitions,
      if (stoppingCondition != null) 'StoppingCondition': stoppingCondition,
      if (tags != null) 'Tags': tags,
      if (tensorBoardOutputConfig != null)
        'TensorBoardOutputConfig': tensorBoardOutputConfig,
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (trainingJobArn != null) 'TrainingJobArn': trainingJobArn,
      if (trainingJobName != null) 'TrainingJobName': trainingJobName,
      if (trainingJobStatus != null)
        'TrainingJobStatus': trainingJobStatus.value,
      if (trainingStartTime != null)
        'TrainingStartTime': unixTimestampToJson(trainingStartTime),
      if (trainingTimeInSeconds != null)
        'TrainingTimeInSeconds': trainingTimeInSeconds,
      if (tuningJobArn != null) 'TuningJobArn': tuningJobArn,
      if (vpcConfig != null) 'VpcConfig': vpcConfig,
    };
  }
}

/// Defines the input needed to run a training job using the algorithm.
class TrainingJobDefinition {
  /// An array of <code>Channel</code> objects, each of which specifies an input
  /// source.
  final List<Channel> inputDataConfig;

  /// the path to the S3 bucket where you want to store model artifacts. SageMaker
  /// creates subfolders for the artifacts.
  final OutputDataConfig outputDataConfig;

  /// The resources, including the ML compute instances and ML storage volumes, to
  /// use for model training.
  final ResourceConfig resourceConfig;

  /// Specifies a limit to how long a model training job can run. It also
  /// specifies how long a managed Spot training job has to complete. When the job
  /// reaches the time limit, SageMaker ends the training job. Use this API to cap
  /// model training costs.
  ///
  /// To stop a job, SageMaker sends the algorithm the SIGTERM signal, which
  /// delays job termination for 120 seconds. Algorithms can use this 120-second
  /// window to save the model artifacts.
  final StoppingCondition stoppingCondition;
  final TrainingInputMode trainingInputMode;

  /// The hyperparameters used for the training job.
  final Map<String, String>? hyperParameters;

  TrainingJobDefinition({
    required this.inputDataConfig,
    required this.outputDataConfig,
    required this.resourceConfig,
    required this.stoppingCondition,
    required this.trainingInputMode,
    this.hyperParameters,
  });

  factory TrainingJobDefinition.fromJson(Map<String, dynamic> json) {
    return TrainingJobDefinition(
      inputDataConfig: (json['InputDataConfig'] as List)
          .nonNulls
          .map((e) => Channel.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputDataConfig: OutputDataConfig.fromJson(
          json['OutputDataConfig'] as Map<String, dynamic>),
      resourceConfig: ResourceConfig.fromJson(
          json['ResourceConfig'] as Map<String, dynamic>),
      stoppingCondition: StoppingCondition.fromJson(
          json['StoppingCondition'] as Map<String, dynamic>),
      trainingInputMode:
          TrainingInputMode.fromString((json['TrainingInputMode'] as String)),
      hyperParameters: (json['HyperParameters'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
    );
  }

  Map<String, dynamic> toJson() {
    final inputDataConfig = this.inputDataConfig;
    final outputDataConfig = this.outputDataConfig;
    final resourceConfig = this.resourceConfig;
    final stoppingCondition = this.stoppingCondition;
    final trainingInputMode = this.trainingInputMode;
    final hyperParameters = this.hyperParameters;
    return {
      'InputDataConfig': inputDataConfig,
      'OutputDataConfig': outputDataConfig,
      'ResourceConfig': resourceConfig,
      'StoppingCondition': stoppingCondition,
      'TrainingInputMode': trainingInputMode.value,
      if (hyperParameters != null) 'HyperParameters': hyperParameters,
    };
  }
}

enum TrainingJobEarlyStoppingType {
  off('Off'),
  auto('Auto'),
  ;

  final String value;

  const TrainingJobEarlyStoppingType(this.value);

  static TrainingJobEarlyStoppingType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrainingJobEarlyStoppingType'));
}

enum TrainingJobSortByOptions {
  name('Name'),
  creationTime('CreationTime'),
  status('Status'),
  finalObjectiveMetricValue('FinalObjectiveMetricValue'),
  ;

  final String value;

  const TrainingJobSortByOptions(this.value);

  static TrainingJobSortByOptions fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrainingJobSortByOptions'));
}

enum TrainingJobStatus {
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const TrainingJobStatus(this.value);

  static TrainingJobStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TrainingJobStatus'));
}

/// The numbers of training jobs launched by a hyperparameter tuning job,
/// categorized by status.
class TrainingJobStatusCounters {
  /// The number of completed training jobs launched by the hyperparameter tuning
  /// job.
  final int? completed;

  /// The number of in-progress training jobs launched by a hyperparameter tuning
  /// job.
  final int? inProgress;

  /// The number of training jobs that failed and can't be retried. A failed
  /// training job can't be retried if it failed because a client error occurred.
  final int? nonRetryableError;

  /// The number of training jobs that failed, but can be retried. A failed
  /// training job can be retried only if it failed because an internal service
  /// error occurred.
  final int? retryableError;

  /// The number of training jobs launched by a hyperparameter tuning job that
  /// were manually stopped.
  final int? stopped;

  TrainingJobStatusCounters({
    this.completed,
    this.inProgress,
    this.nonRetryableError,
    this.retryableError,
    this.stopped,
  });

  factory TrainingJobStatusCounters.fromJson(Map<String, dynamic> json) {
    return TrainingJobStatusCounters(
      completed: json['Completed'] as int?,
      inProgress: json['InProgress'] as int?,
      nonRetryableError: json['NonRetryableError'] as int?,
      retryableError: json['RetryableError'] as int?,
      stopped: json['Stopped'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final completed = this.completed;
    final inProgress = this.inProgress;
    final nonRetryableError = this.nonRetryableError;
    final retryableError = this.retryableError;
    final stopped = this.stopped;
    return {
      if (completed != null) 'Completed': completed,
      if (inProgress != null) 'InProgress': inProgress,
      if (nonRetryableError != null) 'NonRetryableError': nonRetryableError,
      if (retryableError != null) 'RetryableError': retryableError,
      if (stopped != null) 'Stopped': stopped,
    };
  }
}

/// Metadata for a training job step.
class TrainingJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the training job that was run by this step
  /// execution.
  final String? arn;

  TrainingJobStepMetadata({
    this.arn,
  });

  factory TrainingJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return TrainingJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides summary information about a training job.
class TrainingJobSummary {
  /// A timestamp that shows when the training job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  /// The name of the training job that you want a summary for.
  final String trainingJobName;

  /// The status of the training job.
  final TrainingJobStatus trainingJobStatus;

  /// Timestamp when the training job was last modified.
  final DateTime? lastModifiedTime;

  /// A timestamp that shows when the training job ended. This field is set only
  /// if the training job has one of the terminal statuses
  /// (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).
  final DateTime? trainingEndTime;

  /// The status of the warm pool associated with the training job.
  final WarmPoolStatus? warmPoolStatus;

  TrainingJobSummary({
    required this.creationTime,
    required this.trainingJobArn,
    required this.trainingJobName,
    required this.trainingJobStatus,
    this.lastModifiedTime,
    this.trainingEndTime,
    this.warmPoolStatus,
  });

  factory TrainingJobSummary.fromJson(Map<String, dynamic> json) {
    return TrainingJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      trainingJobArn: json['TrainingJobArn'] as String,
      trainingJobName: json['TrainingJobName'] as String,
      trainingJobStatus:
          TrainingJobStatus.fromString((json['TrainingJobStatus'] as String)),
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      trainingEndTime: timeStampFromJson(json['TrainingEndTime']),
      warmPoolStatus: json['WarmPoolStatus'] != null
          ? WarmPoolStatus.fromJson(
              json['WarmPoolStatus'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final trainingJobArn = this.trainingJobArn;
    final trainingJobName = this.trainingJobName;
    final trainingJobStatus = this.trainingJobStatus;
    final lastModifiedTime = this.lastModifiedTime;
    final trainingEndTime = this.trainingEndTime;
    final warmPoolStatus = this.warmPoolStatus;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'TrainingJobArn': trainingJobArn,
      'TrainingJobName': trainingJobName,
      'TrainingJobStatus': trainingJobStatus.value,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (trainingEndTime != null)
        'TrainingEndTime': unixTimestampToJson(trainingEndTime),
      if (warmPoolStatus != null) 'WarmPoolStatus': warmPoolStatus,
    };
  }
}

enum TrainingRepositoryAccessMode {
  platform('Platform'),
  vpc('Vpc'),
  ;

  final String value;

  const TrainingRepositoryAccessMode(this.value);

  static TrainingRepositoryAccessMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrainingRepositoryAccessMode'));
}

/// An object containing authentication information for a private Docker
/// registry.
class TrainingRepositoryAuthConfig {
  /// The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function
  /// used to give SageMaker access credentials to your private Docker registry.
  final String trainingRepositoryCredentialsProviderArn;

  TrainingRepositoryAuthConfig({
    required this.trainingRepositoryCredentialsProviderArn,
  });

  factory TrainingRepositoryAuthConfig.fromJson(Map<String, dynamic> json) {
    return TrainingRepositoryAuthConfig(
      trainingRepositoryCredentialsProviderArn:
          json['TrainingRepositoryCredentialsProviderArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingRepositoryCredentialsProviderArn =
        this.trainingRepositoryCredentialsProviderArn;
    return {
      'TrainingRepositoryCredentialsProviderArn':
          trainingRepositoryCredentialsProviderArn,
    };
  }
}

/// Defines how the algorithm is used for a training job.
class TrainingSpecification {
  /// A list of the instance types that this algorithm can use for training.
  final List<TrainingInstanceType> supportedTrainingInstanceTypes;

  /// A list of <code>ChannelSpecification</code> objects, which specify the input
  /// sources to be used by the algorithm.
  final List<ChannelSpecification> trainingChannels;

  /// The Amazon ECR registry path of the Docker image that contains the training
  /// algorithm.
  final String trainingImage;

  /// The additional data source used during the training job.
  final AdditionalS3DataSource? additionalS3DataSource;

  /// A list of <code>MetricDefinition</code> objects, which are used for parsing
  /// metrics generated by the algorithm.
  final List<MetricDefinition>? metricDefinitions;

  /// A list of the <code>HyperParameterSpecification</code> objects, that define
  /// the supported hyperparameters. This is required if the algorithm supports
  /// automatic model tuning.&gt;
  final List<HyperParameterSpecification>? supportedHyperParameters;

  /// A list of the metrics that the algorithm emits that can be used as the
  /// objective metric in a hyperparameter tuning job.
  final List<HyperParameterTuningJobObjective>?
      supportedTuningJobObjectiveMetrics;

  /// Indicates whether the algorithm supports distributed training. If set to
  /// false, buyers can't request more than one instance during training.
  final bool? supportsDistributedTraining;

  /// An MD5 hash of the training algorithm that identifies the Docker image used
  /// for training.
  final String? trainingImageDigest;

  TrainingSpecification({
    required this.supportedTrainingInstanceTypes,
    required this.trainingChannels,
    required this.trainingImage,
    this.additionalS3DataSource,
    this.metricDefinitions,
    this.supportedHyperParameters,
    this.supportedTuningJobObjectiveMetrics,
    this.supportsDistributedTraining,
    this.trainingImageDigest,
  });

  factory TrainingSpecification.fromJson(Map<String, dynamic> json) {
    return TrainingSpecification(
      supportedTrainingInstanceTypes:
          (json['SupportedTrainingInstanceTypes'] as List)
              .nonNulls
              .map((e) => TrainingInstanceType.fromString((e as String)))
              .toList(),
      trainingChannels: (json['TrainingChannels'] as List)
          .nonNulls
          .map((e) => ChannelSpecification.fromJson(e as Map<String, dynamic>))
          .toList(),
      trainingImage: json['TrainingImage'] as String,
      additionalS3DataSource: json['AdditionalS3DataSource'] != null
          ? AdditionalS3DataSource.fromJson(
              json['AdditionalS3DataSource'] as Map<String, dynamic>)
          : null,
      metricDefinitions: (json['MetricDefinitions'] as List?)
          ?.nonNulls
          .map((e) => MetricDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      supportedHyperParameters: (json['SupportedHyperParameters'] as List?)
          ?.nonNulls
          .map((e) =>
              HyperParameterSpecification.fromJson(e as Map<String, dynamic>))
          .toList(),
      supportedTuningJobObjectiveMetrics:
          (json['SupportedTuningJobObjectiveMetrics'] as List?)
              ?.nonNulls
              .map((e) => HyperParameterTuningJobObjective.fromJson(
                  e as Map<String, dynamic>))
              .toList(),
      supportsDistributedTraining: json['SupportsDistributedTraining'] as bool?,
      trainingImageDigest: json['TrainingImageDigest'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final supportedTrainingInstanceTypes = this.supportedTrainingInstanceTypes;
    final trainingChannels = this.trainingChannels;
    final trainingImage = this.trainingImage;
    final additionalS3DataSource = this.additionalS3DataSource;
    final metricDefinitions = this.metricDefinitions;
    final supportedHyperParameters = this.supportedHyperParameters;
    final supportedTuningJobObjectiveMetrics =
        this.supportedTuningJobObjectiveMetrics;
    final supportsDistributedTraining = this.supportsDistributedTraining;
    final trainingImageDigest = this.trainingImageDigest;
    return {
      'SupportedTrainingInstanceTypes':
          supportedTrainingInstanceTypes.map((e) => e.value).toList(),
      'TrainingChannels': trainingChannels,
      'TrainingImage': trainingImage,
      if (additionalS3DataSource != null)
        'AdditionalS3DataSource': additionalS3DataSource,
      if (metricDefinitions != null) 'MetricDefinitions': metricDefinitions,
      if (supportedHyperParameters != null)
        'SupportedHyperParameters': supportedHyperParameters,
      if (supportedTuningJobObjectiveMetrics != null)
        'SupportedTuningJobObjectiveMetrics':
            supportedTuningJobObjectiveMetrics,
      if (supportsDistributedTraining != null)
        'SupportsDistributedTraining': supportsDistributedTraining,
      if (trainingImageDigest != null)
        'TrainingImageDigest': trainingImageDigest,
    };
  }
}

/// Describes the location of the channel data.
class TransformDataSource {
  /// The S3 location of the data source that is associated with a channel.
  final TransformS3DataSource s3DataSource;

  TransformDataSource({
    required this.s3DataSource,
  });

  factory TransformDataSource.fromJson(Map<String, dynamic> json) {
    return TransformDataSource(
      s3DataSource: TransformS3DataSource.fromJson(
          json['S3DataSource'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataSource = this.s3DataSource;
    return {
      'S3DataSource': s3DataSource,
    };
  }
}

/// Describes the input source of a transform job and the way the transform job
/// consumes it.
class TransformInput {
  /// Describes the location of the channel data, which is, the S3 location of the
  /// input data that the model can consume.
  final TransformDataSource dataSource;

  /// If your transform data is compressed, specify the compression type. Amazon
  /// SageMaker automatically decompresses the data for the transform job
  /// accordingly. The default value is <code>None</code>.
  final CompressionType? compressionType;

  /// The multipurpose internet mail extension (MIME) type of the data. Amazon
  /// SageMaker uses the MIME type with each http call to transfer data to the
  /// transform job.
  final String? contentType;

  /// The method to use to split the transform job's data files into smaller
  /// batches. Splitting is necessary when the total size of each object is too
  /// large to fit in a single request. You can also use data splitting to improve
  /// performance by processing multiple concurrent mini-batches. The default
  /// value for <code>SplitType</code> is <code>None</code>, which indicates that
  /// input data files are not split, and request payloads contain the entire
  /// contents of an input object. Set the value of this parameter to
  /// <code>Line</code> to split records on a newline character boundary.
  /// <code>SplitType</code> also supports a number of record-oriented binary data
  /// formats. Currently, the supported record formats are:
  ///
  /// <ul>
  /// <li>
  /// RecordIO
  /// </li>
  /// <li>
  /// TFRecord
  /// </li>
  /// </ul>
  /// When splitting is enabled, the size of a mini-batch depends on the values of
  /// the <code>BatchStrategy</code> and <code>MaxPayloadInMB</code> parameters.
  /// When the value of <code>BatchStrategy</code> is <code>MultiRecord</code>,
  /// Amazon SageMaker sends the maximum number of records in each request, up to
  /// the <code>MaxPayloadInMB</code> limit. If the value of
  /// <code>BatchStrategy</code> is <code>SingleRecord</code>, Amazon SageMaker
  /// sends individual records in each request.
  /// <note>
  /// Some data formats represent a record as a binary payload wrapped with extra
  /// padding bytes. When splitting is applied to a binary data format, padding is
  /// removed if the value of <code>BatchStrategy</code> is set to
  /// <code>SingleRecord</code>. Padding is not removed if the value of
  /// <code>BatchStrategy</code> is set to <code>MultiRecord</code>.
  ///
  /// For more information about <code>RecordIO</code>, see <a
  /// href="https://mxnet.apache.org/api/faq/recordio">Create a Dataset Using
  /// RecordIO</a> in the MXNet documentation. For more information about
  /// <code>TFRecord</code>, see <a
  /// href="https://www.tensorflow.org/guide/data#consuming_tfrecord_data">Consuming
  /// TFRecord data</a> in the TensorFlow documentation.
  /// </note>
  final SplitType? splitType;

  TransformInput({
    required this.dataSource,
    this.compressionType,
    this.contentType,
    this.splitType,
  });

  factory TransformInput.fromJson(Map<String, dynamic> json) {
    return TransformInput(
      dataSource: TransformDataSource.fromJson(
          json['DataSource'] as Map<String, dynamic>),
      compressionType:
          (json['CompressionType'] as String?)?.let(CompressionType.fromString),
      contentType: json['ContentType'] as String?,
      splitType: (json['SplitType'] as String?)?.let(SplitType.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final dataSource = this.dataSource;
    final compressionType = this.compressionType;
    final contentType = this.contentType;
    final splitType = this.splitType;
    return {
      'DataSource': dataSource,
      if (compressionType != null) 'CompressionType': compressionType.value,
      if (contentType != null) 'ContentType': contentType,
      if (splitType != null) 'SplitType': splitType.value,
    };
  }
}

enum TransformInstanceType {
  mlM4Xlarge('ml.m4.xlarge'),
  mlM4_2xlarge('ml.m4.2xlarge'),
  mlM4_4xlarge('ml.m4.4xlarge'),
  mlM4_10xlarge('ml.m4.10xlarge'),
  mlM4_16xlarge('ml.m4.16xlarge'),
  mlC4Xlarge('ml.c4.xlarge'),
  mlC4_2xlarge('ml.c4.2xlarge'),
  mlC4_4xlarge('ml.c4.4xlarge'),
  mlC4_8xlarge('ml.c4.8xlarge'),
  mlP2Xlarge('ml.p2.xlarge'),
  mlP2_8xlarge('ml.p2.8xlarge'),
  mlP2_16xlarge('ml.p2.16xlarge'),
  mlP3_2xlarge('ml.p3.2xlarge'),
  mlP3_8xlarge('ml.p3.8xlarge'),
  mlP3_16xlarge('ml.p3.16xlarge'),
  mlC5Xlarge('ml.c5.xlarge'),
  mlC5_2xlarge('ml.c5.2xlarge'),
  mlC5_4xlarge('ml.c5.4xlarge'),
  mlC5_9xlarge('ml.c5.9xlarge'),
  mlC5_18xlarge('ml.c5.18xlarge'),
  mlM5Large('ml.m5.large'),
  mlM5Xlarge('ml.m5.xlarge'),
  mlM5_2xlarge('ml.m5.2xlarge'),
  mlM5_4xlarge('ml.m5.4xlarge'),
  mlM5_12xlarge('ml.m5.12xlarge'),
  mlM5_24xlarge('ml.m5.24xlarge'),
  mlM6iLarge('ml.m6i.large'),
  mlM6iXlarge('ml.m6i.xlarge'),
  mlM6i_2xlarge('ml.m6i.2xlarge'),
  mlM6i_4xlarge('ml.m6i.4xlarge'),
  mlM6i_8xlarge('ml.m6i.8xlarge'),
  mlM6i_12xlarge('ml.m6i.12xlarge'),
  mlM6i_16xlarge('ml.m6i.16xlarge'),
  mlM6i_24xlarge('ml.m6i.24xlarge'),
  mlM6i_32xlarge('ml.m6i.32xlarge'),
  mlC6iLarge('ml.c6i.large'),
  mlC6iXlarge('ml.c6i.xlarge'),
  mlC6i_2xlarge('ml.c6i.2xlarge'),
  mlC6i_4xlarge('ml.c6i.4xlarge'),
  mlC6i_8xlarge('ml.c6i.8xlarge'),
  mlC6i_12xlarge('ml.c6i.12xlarge'),
  mlC6i_16xlarge('ml.c6i.16xlarge'),
  mlC6i_24xlarge('ml.c6i.24xlarge'),
  mlC6i_32xlarge('ml.c6i.32xlarge'),
  mlR6iLarge('ml.r6i.large'),
  mlR6iXlarge('ml.r6i.xlarge'),
  mlR6i_2xlarge('ml.r6i.2xlarge'),
  mlR6i_4xlarge('ml.r6i.4xlarge'),
  mlR6i_8xlarge('ml.r6i.8xlarge'),
  mlR6i_12xlarge('ml.r6i.12xlarge'),
  mlR6i_16xlarge('ml.r6i.16xlarge'),
  mlR6i_24xlarge('ml.r6i.24xlarge'),
  mlR6i_32xlarge('ml.r6i.32xlarge'),
  mlM7iLarge('ml.m7i.large'),
  mlM7iXlarge('ml.m7i.xlarge'),
  mlM7i_2xlarge('ml.m7i.2xlarge'),
  mlM7i_4xlarge('ml.m7i.4xlarge'),
  mlM7i_8xlarge('ml.m7i.8xlarge'),
  mlM7i_12xlarge('ml.m7i.12xlarge'),
  mlM7i_16xlarge('ml.m7i.16xlarge'),
  mlM7i_24xlarge('ml.m7i.24xlarge'),
  mlM7i_48xlarge('ml.m7i.48xlarge'),
  mlC7iLarge('ml.c7i.large'),
  mlC7iXlarge('ml.c7i.xlarge'),
  mlC7i_2xlarge('ml.c7i.2xlarge'),
  mlC7i_4xlarge('ml.c7i.4xlarge'),
  mlC7i_8xlarge('ml.c7i.8xlarge'),
  mlC7i_12xlarge('ml.c7i.12xlarge'),
  mlC7i_16xlarge('ml.c7i.16xlarge'),
  mlC7i_24xlarge('ml.c7i.24xlarge'),
  mlC7i_48xlarge('ml.c7i.48xlarge'),
  mlR7iLarge('ml.r7i.large'),
  mlR7iXlarge('ml.r7i.xlarge'),
  mlR7i_2xlarge('ml.r7i.2xlarge'),
  mlR7i_4xlarge('ml.r7i.4xlarge'),
  mlR7i_8xlarge('ml.r7i.8xlarge'),
  mlR7i_12xlarge('ml.r7i.12xlarge'),
  mlR7i_16xlarge('ml.r7i.16xlarge'),
  mlR7i_24xlarge('ml.r7i.24xlarge'),
  mlR7i_48xlarge('ml.r7i.48xlarge'),
  mlG4dnXlarge('ml.g4dn.xlarge'),
  mlG4dn_2xlarge('ml.g4dn.2xlarge'),
  mlG4dn_4xlarge('ml.g4dn.4xlarge'),
  mlG4dn_8xlarge('ml.g4dn.8xlarge'),
  mlG4dn_12xlarge('ml.g4dn.12xlarge'),
  mlG4dn_16xlarge('ml.g4dn.16xlarge'),
  mlG5Xlarge('ml.g5.xlarge'),
  mlG5_2xlarge('ml.g5.2xlarge'),
  mlG5_4xlarge('ml.g5.4xlarge'),
  mlG5_8xlarge('ml.g5.8xlarge'),
  mlG5_12xlarge('ml.g5.12xlarge'),
  mlG5_16xlarge('ml.g5.16xlarge'),
  mlG5_24xlarge('ml.g5.24xlarge'),
  mlG5_48xlarge('ml.g5.48xlarge'),
  ;

  final String value;

  const TransformInstanceType(this.value);

  static TransformInstanceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TransformInstanceType'));
}

/// A batch transform job. For information about SageMaker batch transform, see
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use
/// Batch Transform</a>.
class TransformJob {
  /// The Amazon Resource Name (ARN) of the AutoML job that created the transform
  /// job.
  final String? autoMLJobArn;

  /// Specifies the number of records to include in a mini-batch for an HTTP
  /// inference request. A record is a single unit of input data that inference
  /// can be made on. For example, a single line in a CSV file is a record.
  final BatchStrategy? batchStrategy;

  /// A timestamp that shows when the transform Job was created.
  final DateTime? creationTime;
  final BatchDataCaptureConfig? dataCaptureConfig;
  final DataProcessing? dataProcessing;

  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  final Map<String, String>? environment;
  final ExperimentConfig? experimentConfig;

  /// If the transform job failed, the reason it failed.
  final String? failureReason;

  /// The Amazon Resource Name (ARN) of the labeling job that created the
  /// transform job.
  final String? labelingJobArn;

  /// The maximum number of parallel requests that can be sent to each instance in
  /// a transform job. If <code>MaxConcurrentTransforms</code> is set to 0 or left
  /// unset, SageMaker checks the optional execution-parameters to determine the
  /// settings for your chosen algorithm. If the execution-parameters endpoint is
  /// not enabled, the default value is 1. For built-in algorithms, you don't need
  /// to set a value for <code>MaxConcurrentTransforms</code>.
  final int? maxConcurrentTransforms;

  /// The maximum allowed size of the payload, in MB. A payload is the data
  /// portion of a record (without metadata). The value in
  /// <code>MaxPayloadInMB</code> must be greater than, or equal to, the size of a
  /// single record. To estimate the size of a record in MB, divide the size of
  /// your dataset by the number of records. To ensure that the records fit within
  /// the maximum payload size, we recommend using a slightly larger value. The
  /// default value is 6 MB. For cases where the payload might be arbitrarily
  /// large and is transmitted using HTTP chunked encoding, set the value to 0.
  /// This feature works only in supported algorithms. Currently, SageMaker
  /// built-in algorithms do not support HTTP chunked encoding.
  final int? maxPayloadInMB;
  final ModelClientConfig? modelClientConfig;

  /// The name of the model associated with the transform job.
  final String? modelName;

  /// A list of tags associated with the transform job.
  final List<Tag>? tags;

  /// Indicates when the transform job has been completed, or has stopped or
  /// failed. You are billed for the time interval between this time and the value
  /// of <code>TransformStartTime</code>.
  final DateTime? transformEndTime;
  final TransformInput? transformInput;

  /// The Amazon Resource Name (ARN) of the transform job.
  final String? transformJobArn;

  /// The name of the transform job.
  final String? transformJobName;

  /// The status of the transform job.
  ///
  /// Transform job statuses are:
  ///
  /// <ul>
  /// <li>
  /// <code>InProgress</code> - The job is in progress.
  /// </li>
  /// <li>
  /// <code>Completed</code> - The job has completed.
  /// </li>
  /// <li>
  /// <code>Failed</code> - The transform job has failed. To see the reason for
  /// the failure, see the <code>FailureReason</code> field in the response to a
  /// <code>DescribeTransformJob</code> call.
  /// </li>
  /// <li>
  /// <code>Stopping</code> - The transform job is stopping.
  /// </li>
  /// <li>
  /// <code>Stopped</code> - The transform job has stopped.
  /// </li>
  /// </ul>
  final TransformJobStatus? transformJobStatus;
  final TransformOutput? transformOutput;
  final TransformResources? transformResources;

  /// Indicates when the transform job starts on ML instances. You are billed for
  /// the time interval between this time and the value of
  /// <code>TransformEndTime</code>.
  final DateTime? transformStartTime;

  TransformJob({
    this.autoMLJobArn,
    this.batchStrategy,
    this.creationTime,
    this.dataCaptureConfig,
    this.dataProcessing,
    this.environment,
    this.experimentConfig,
    this.failureReason,
    this.labelingJobArn,
    this.maxConcurrentTransforms,
    this.maxPayloadInMB,
    this.modelClientConfig,
    this.modelName,
    this.tags,
    this.transformEndTime,
    this.transformInput,
    this.transformJobArn,
    this.transformJobName,
    this.transformJobStatus,
    this.transformOutput,
    this.transformResources,
    this.transformStartTime,
  });

  factory TransformJob.fromJson(Map<String, dynamic> json) {
    return TransformJob(
      autoMLJobArn: json['AutoMLJobArn'] as String?,
      batchStrategy:
          (json['BatchStrategy'] as String?)?.let(BatchStrategy.fromString),
      creationTime: timeStampFromJson(json['CreationTime']),
      dataCaptureConfig: json['DataCaptureConfig'] != null
          ? BatchDataCaptureConfig.fromJson(
              json['DataCaptureConfig'] as Map<String, dynamic>)
          : null,
      dataProcessing: json['DataProcessing'] != null
          ? DataProcessing.fromJson(
              json['DataProcessing'] as Map<String, dynamic>)
          : null,
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      experimentConfig: json['ExperimentConfig'] != null
          ? ExperimentConfig.fromJson(
              json['ExperimentConfig'] as Map<String, dynamic>)
          : null,
      failureReason: json['FailureReason'] as String?,
      labelingJobArn: json['LabelingJobArn'] as String?,
      maxConcurrentTransforms: json['MaxConcurrentTransforms'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
      modelClientConfig: json['ModelClientConfig'] != null
          ? ModelClientConfig.fromJson(
              json['ModelClientConfig'] as Map<String, dynamic>)
          : null,
      modelName: json['ModelName'] as String?,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      transformEndTime: timeStampFromJson(json['TransformEndTime']),
      transformInput: json['TransformInput'] != null
          ? TransformInput.fromJson(
              json['TransformInput'] as Map<String, dynamic>)
          : null,
      transformJobArn: json['TransformJobArn'] as String?,
      transformJobName: json['TransformJobName'] as String?,
      transformJobStatus: (json['TransformJobStatus'] as String?)
          ?.let(TransformJobStatus.fromString),
      transformOutput: json['TransformOutput'] != null
          ? TransformOutput.fromJson(
              json['TransformOutput'] as Map<String, dynamic>)
          : null,
      transformResources: json['TransformResources'] != null
          ? TransformResources.fromJson(
              json['TransformResources'] as Map<String, dynamic>)
          : null,
      transformStartTime: timeStampFromJson(json['TransformStartTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final autoMLJobArn = this.autoMLJobArn;
    final batchStrategy = this.batchStrategy;
    final creationTime = this.creationTime;
    final dataCaptureConfig = this.dataCaptureConfig;
    final dataProcessing = this.dataProcessing;
    final environment = this.environment;
    final experimentConfig = this.experimentConfig;
    final failureReason = this.failureReason;
    final labelingJobArn = this.labelingJobArn;
    final maxConcurrentTransforms = this.maxConcurrentTransforms;
    final maxPayloadInMB = this.maxPayloadInMB;
    final modelClientConfig = this.modelClientConfig;
    final modelName = this.modelName;
    final tags = this.tags;
    final transformEndTime = this.transformEndTime;
    final transformInput = this.transformInput;
    final transformJobArn = this.transformJobArn;
    final transformJobName = this.transformJobName;
    final transformJobStatus = this.transformJobStatus;
    final transformOutput = this.transformOutput;
    final transformResources = this.transformResources;
    final transformStartTime = this.transformStartTime;
    return {
      if (autoMLJobArn != null) 'AutoMLJobArn': autoMLJobArn,
      if (batchStrategy != null) 'BatchStrategy': batchStrategy.value,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (dataCaptureConfig != null) 'DataCaptureConfig': dataCaptureConfig,
      if (dataProcessing != null) 'DataProcessing': dataProcessing,
      if (environment != null) 'Environment': environment,
      if (experimentConfig != null) 'ExperimentConfig': experimentConfig,
      if (failureReason != null) 'FailureReason': failureReason,
      if (labelingJobArn != null) 'LabelingJobArn': labelingJobArn,
      if (maxConcurrentTransforms != null)
        'MaxConcurrentTransforms': maxConcurrentTransforms,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
      if (modelClientConfig != null) 'ModelClientConfig': modelClientConfig,
      if (modelName != null) 'ModelName': modelName,
      if (tags != null) 'Tags': tags,
      if (transformEndTime != null)
        'TransformEndTime': unixTimestampToJson(transformEndTime),
      if (transformInput != null) 'TransformInput': transformInput,
      if (transformJobArn != null) 'TransformJobArn': transformJobArn,
      if (transformJobName != null) 'TransformJobName': transformJobName,
      if (transformJobStatus != null)
        'TransformJobStatus': transformJobStatus.value,
      if (transformOutput != null) 'TransformOutput': transformOutput,
      if (transformResources != null) 'TransformResources': transformResources,
      if (transformStartTime != null)
        'TransformStartTime': unixTimestampToJson(transformStartTime),
    };
  }
}

/// Defines the input needed to run a transform job using the inference
/// specification specified in the algorithm.
class TransformJobDefinition {
  /// A description of the input source and the way the transform job consumes it.
  final TransformInput transformInput;

  /// Identifies the Amazon S3 location where you want Amazon SageMaker to save
  /// the results from the transform job.
  final TransformOutput transformOutput;

  /// Identifies the ML compute instances for the transform job.
  final TransformResources transformResources;

  /// A string that determines the number of records included in a single
  /// mini-batch.
  ///
  /// <code>SingleRecord</code> means only one record is used per mini-batch.
  /// <code>MultiRecord</code> means a mini-batch is set to contain as many
  /// records that can fit within the <code>MaxPayloadInMB</code> limit.
  final BatchStrategy? batchStrategy;

  /// The environment variables to set in the Docker container. We support up to
  /// 16 key and values entries in the map.
  final Map<String, String>? environment;

  /// The maximum number of parallel requests that can be sent to each instance in
  /// a transform job. The default value is 1.
  final int? maxConcurrentTransforms;

  /// The maximum payload size allowed, in MB. A payload is the data portion of a
  /// record (without metadata).
  final int? maxPayloadInMB;

  TransformJobDefinition({
    required this.transformInput,
    required this.transformOutput,
    required this.transformResources,
    this.batchStrategy,
    this.environment,
    this.maxConcurrentTransforms,
    this.maxPayloadInMB,
  });

  factory TransformJobDefinition.fromJson(Map<String, dynamic> json) {
    return TransformJobDefinition(
      transformInput: TransformInput.fromJson(
          json['TransformInput'] as Map<String, dynamic>),
      transformOutput: TransformOutput.fromJson(
          json['TransformOutput'] as Map<String, dynamic>),
      transformResources: TransformResources.fromJson(
          json['TransformResources'] as Map<String, dynamic>),
      batchStrategy:
          (json['BatchStrategy'] as String?)?.let(BatchStrategy.fromString),
      environment: (json['Environment'] as Map<String, dynamic>?)
          ?.map((k, e) => MapEntry(k, e as String)),
      maxConcurrentTransforms: json['MaxConcurrentTransforms'] as int?,
      maxPayloadInMB: json['MaxPayloadInMB'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final transformInput = this.transformInput;
    final transformOutput = this.transformOutput;
    final transformResources = this.transformResources;
    final batchStrategy = this.batchStrategy;
    final environment = this.environment;
    final maxConcurrentTransforms = this.maxConcurrentTransforms;
    final maxPayloadInMB = this.maxPayloadInMB;
    return {
      'TransformInput': transformInput,
      'TransformOutput': transformOutput,
      'TransformResources': transformResources,
      if (batchStrategy != null) 'BatchStrategy': batchStrategy.value,
      if (environment != null) 'Environment': environment,
      if (maxConcurrentTransforms != null)
        'MaxConcurrentTransforms': maxConcurrentTransforms,
      if (maxPayloadInMB != null) 'MaxPayloadInMB': maxPayloadInMB,
    };
  }
}

enum TransformJobStatus {
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const TransformJobStatus(this.value);

  static TransformJobStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TransformJobStatus'));
}

/// Metadata for a transform job step.
class TransformJobStepMetadata {
  /// The Amazon Resource Name (ARN) of the transform job that was run by this
  /// step execution.
  final String? arn;

  TransformJobStepMetadata({
    this.arn,
  });

  factory TransformJobStepMetadata.fromJson(Map<String, dynamic> json) {
    return TransformJobStepMetadata(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Provides a summary of a transform job. Multiple
/// <code>TransformJobSummary</code> objects are returned as a list after in
/// response to a <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTransformJobs.html">ListTransformJobs</a>
/// call.
class TransformJobSummary {
  /// A timestamp that shows when the transform Job was created.
  final DateTime creationTime;

  /// The Amazon Resource Name (ARN) of the transform job.
  final String transformJobArn;

  /// The name of the transform job.
  final String transformJobName;

  /// The status of the transform job.
  final TransformJobStatus transformJobStatus;

  /// If the transform job failed, the reason it failed.
  final String? failureReason;

  /// Indicates when the transform job was last modified.
  final DateTime? lastModifiedTime;

  /// Indicates when the transform job ends on compute instances. For successful
  /// jobs and stopped jobs, this is the exact time recorded after the results are
  /// uploaded. For failed jobs, this is when Amazon SageMaker detected that the
  /// job failed.
  final DateTime? transformEndTime;

  TransformJobSummary({
    required this.creationTime,
    required this.transformJobArn,
    required this.transformJobName,
    required this.transformJobStatus,
    this.failureReason,
    this.lastModifiedTime,
    this.transformEndTime,
  });

  factory TransformJobSummary.fromJson(Map<String, dynamic> json) {
    return TransformJobSummary(
      creationTime:
          nonNullableTimeStampFromJson(json['CreationTime'] as Object),
      transformJobArn: json['TransformJobArn'] as String,
      transformJobName: json['TransformJobName'] as String,
      transformJobStatus:
          TransformJobStatus.fromString((json['TransformJobStatus'] as String)),
      failureReason: json['FailureReason'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      transformEndTime: timeStampFromJson(json['TransformEndTime']),
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final transformJobArn = this.transformJobArn;
    final transformJobName = this.transformJobName;
    final transformJobStatus = this.transformJobStatus;
    final failureReason = this.failureReason;
    final lastModifiedTime = this.lastModifiedTime;
    final transformEndTime = this.transformEndTime;
    return {
      'CreationTime': unixTimestampToJson(creationTime),
      'TransformJobArn': transformJobArn,
      'TransformJobName': transformJobName,
      'TransformJobStatus': transformJobStatus.value,
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (transformEndTime != null)
        'TransformEndTime': unixTimestampToJson(transformEndTime),
    };
  }
}

/// Describes the results of a transform job.
class TransformOutput {
  /// The Amazon S3 path where you want Amazon SageMaker to store the results of
  /// the transform job. For example,
  /// <code>s3://bucket-name/key-name-prefix</code>.
  ///
  /// For every S3 object used as input for the transform job, batch transform
  /// stores the transformed data with an .<code>out</code> suffix in a
  /// corresponding subfolder in the location in the output prefix. For example,
  /// for the input data stored at
  /// <code>s3://bucket-name/input-name-prefix/dataset01/data.csv</code>, batch
  /// transform stores the transformed data at
  /// <code>s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out</code>.
  /// Batch transform doesn't upload partially processed objects. For an input S3
  /// object that contains multiple records, it creates an .<code>out</code> file
  /// only if the transform job succeeds on the entire file. When the input
  /// contains multiple S3 objects, the batch transform job processes the listed
  /// S3 objects and uploads only the output for successfully processed objects.
  /// If any object fails in the transform job batch transform marks the job as
  /// failed to prompt investigation.
  final String s3OutputPath;

  /// The MIME type used to specify the output data. Amazon SageMaker uses the
  /// MIME type with each http call to transfer data from the transform job.
  final String? accept;

  /// Defines how to assemble the results of the transform job as a single S3
  /// object. Choose a format that is most convenient to you. To concatenate the
  /// results in binary format, specify <code>None</code>. To add a newline
  /// character at the end of every transformed record, specify <code>Line</code>.
  final AssemblyType? assembleWith;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt the model artifacts at rest using
  /// Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of
  /// the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  /// If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key
  /// for Amazon S3 for your role's account. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">KMS-Managed
  /// Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
  /// Guide.</i>
  ///
  /// The KMS key policy must grant permission to the IAM role that you specify in
  /// your <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Using
  /// Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  final String? kmsKeyId;

  TransformOutput({
    required this.s3OutputPath,
    this.accept,
    this.assembleWith,
    this.kmsKeyId,
  });

  factory TransformOutput.fromJson(Map<String, dynamic> json) {
    return TransformOutput(
      s3OutputPath: json['S3OutputPath'] as String,
      accept: json['Accept'] as String?,
      assembleWith:
          (json['AssembleWith'] as String?)?.let(AssemblyType.fromString),
      kmsKeyId: json['KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3OutputPath = this.s3OutputPath;
    final accept = this.accept;
    final assembleWith = this.assembleWith;
    final kmsKeyId = this.kmsKeyId;
    return {
      'S3OutputPath': s3OutputPath,
      if (accept != null) 'Accept': accept,
      if (assembleWith != null) 'AssembleWith': assembleWith.value,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
    };
  }
}

/// Describes the resources, including ML instance types and ML instance count,
/// to use for transform job.
class TransformResources {
  /// The number of ML compute instances to use in the transform job. The default
  /// value is <code>1</code>, and the maximum is <code>100</code>. For
  /// distributed transform jobs, specify a value greater than <code>1</code>.
  final int instanceCount;

  /// The ML compute instance type for the transform job. If you are using
  /// built-in algorithms to transform moderately sized datasets, we recommend
  /// using ml.m4.xlarge or <code>ml.m5.large</code>instance types.
  final TransformInstanceType instanceType;

  /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key
  /// that Amazon SageMaker uses to encrypt model data on the storage volume
  /// attached to the ML compute instance(s) that run the batch transform job.
  /// <note>
  /// Certain Nitro-based instances include local storage, dependent on the
  /// instance type. Local storage volumes are encrypted using a hardware module
  /// on the instance. You can't request a <code>VolumeKmsKeyId</code> when using
  /// an instance type with local storage.
  ///
  /// For a list of instance types that support local instance storage, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance
  /// Store Volumes</a>.
  ///
  /// For more information about local instance storage encryption, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
  /// Instance Store Volumes</a>.
  /// </note>
  /// The <code>VolumeKmsKeyId</code> can be any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias name ARN:
  /// <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  final String? volumeKmsKeyId;

  TransformResources({
    required this.instanceCount,
    required this.instanceType,
    this.volumeKmsKeyId,
  });

  factory TransformResources.fromJson(Map<String, dynamic> json) {
    return TransformResources(
      instanceCount: json['InstanceCount'] as int,
      instanceType:
          TransformInstanceType.fromString((json['InstanceType'] as String)),
      volumeKmsKeyId: json['VolumeKmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final instanceCount = this.instanceCount;
    final instanceType = this.instanceType;
    final volumeKmsKeyId = this.volumeKmsKeyId;
    return {
      'InstanceCount': instanceCount,
      'InstanceType': instanceType.value,
      if (volumeKmsKeyId != null) 'VolumeKmsKeyId': volumeKmsKeyId,
    };
  }
}

/// Describes the S3 data source.
class TransformS3DataSource {
  /// If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
  /// name prefix. Amazon SageMaker uses all objects with the specified key name
  /// prefix for batch transform.
  ///
  /// If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an
  /// object that is a manifest file containing a list of object keys that you
  /// want Amazon SageMaker to use for batch transform.
  ///
  /// The following values are compatible: <code>ManifestFile</code>,
  /// <code>S3Prefix</code>
  ///
  /// The following value is not compatible: <code>AugmentedManifestFile</code>
  final S3DataType s3DataType;

  /// Depending on the value specified for the <code>S3DataType</code>, identifies
  /// either a key name prefix or a manifest. For example:
  ///
  /// <ul>
  /// <li>
  /// A key name prefix might look like this:
  /// <code>s3://bucketname/exampleprefix/</code>.
  /// </li>
  /// <li>
  /// A manifest might look like this:
  /// <code>s3://bucketname/example.manifest</code>
  ///
  /// The manifest is an S3 object which is a JSON file with the following format:
  ///
  /// <code>[ {"prefix": "s3://customer_bucket/some/prefix/"},</code>
  ///
  /// <code>"relative/path/to/custdata-1",</code>
  ///
  /// <code>"relative/path/custdata-2",</code>
  ///
  /// <code>...</code>
  ///
  /// <code>"relative/path/custdata-N"</code>
  ///
  /// <code>]</code>
  ///
  /// The preceding JSON matches the following <code>S3Uris</code>:
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
  ///
  /// <code>...</code>
  ///
  /// <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
  ///
  /// The complete set of <code>S3Uris</code> in this manifest constitutes the
  /// input data for the channel for this datasource. The object that each
  /// <code>S3Uris</code> points to must be readable by the IAM role that Amazon
  /// SageMaker uses to perform tasks on your behalf.
  /// </li>
  /// </ul>
  final String s3Uri;

  TransformS3DataSource({
    required this.s3DataType,
    required this.s3Uri,
  });

  factory TransformS3DataSource.fromJson(Map<String, dynamic> json) {
    return TransformS3DataSource(
      s3DataType: S3DataType.fromString((json['S3DataType'] as String)),
      s3Uri: json['S3Uri'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final s3DataType = this.s3DataType;
    final s3Uri = this.s3Uri;
    return {
      'S3DataType': s3DataType.value,
      'S3Uri': s3Uri,
    };
  }
}

/// The properties of a trial as returned by the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API.
class Trial {
  /// Who created the trial.
  final UserContext? createdBy;

  /// When the trial was created.
  final DateTime? creationTime;

  /// The name of the trial as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialName</code> is displayed.
  final String? displayName;

  /// The name of the experiment the trial is part of.
  final String? experimentName;
  final UserContext? lastModifiedBy;

  /// Who last modified the trial.
  final DateTime? lastModifiedTime;
  final MetadataProperties? metadataProperties;
  final TrialSource? source;

  /// The list of tags that are associated with the trial. You can use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search on the tags.
  final List<Tag>? tags;

  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// A list of the components associated with the trial. For each component, a
  /// summary of the component's properties is included.
  final List<TrialComponentSimpleSummary>? trialComponentSummaries;

  /// The name of the trial.
  final String? trialName;

  Trial({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.experimentName,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.metadataProperties,
    this.source,
    this.tags,
    this.trialArn,
    this.trialComponentSummaries,
    this.trialName,
  });

  factory Trial.fromJson(Map<String, dynamic> json) {
    return Trial(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      experimentName: json['ExperimentName'] as String?,
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      source: json['Source'] != null
          ? TrialSource.fromJson(json['Source'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trialArn: json['TrialArn'] as String?,
      trialComponentSummaries: (json['TrialComponentSummaries'] as List?)
          ?.nonNulls
          .map((e) =>
              TrialComponentSimpleSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      trialName: json['TrialName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final experimentName = this.experimentName;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final metadataProperties = this.metadataProperties;
    final source = this.source;
    final tags = this.tags;
    final trialArn = this.trialArn;
    final trialComponentSummaries = this.trialComponentSummaries;
    final trialName = this.trialName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (experimentName != null) 'ExperimentName': experimentName,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (source != null) 'Source': source,
      if (tags != null) 'Tags': tags,
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialComponentSummaries != null)
        'TrialComponentSummaries': trialComponentSummaries,
      if (trialName != null) 'TrialName': trialName,
    };
  }
}

/// The properties of a trial component as returned by the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
/// API.
class TrialComponent {
  /// Who created the trial component.
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The name of the component as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialComponentName</code> is displayed.
  final String? displayName;

  /// When the component ended.
  final DateTime? endTime;

  /// The input artifacts of the component.
  final Map<String, TrialComponentArtifact>? inputArtifacts;
  final UserContext? lastModifiedBy;

  /// When the component was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the lineage group resource.
  final String? lineageGroupArn;
  final MetadataProperties? metadataProperties;

  /// The metrics for the component.
  final List<TrialComponentMetricSummary>? metrics;

  /// The output artifacts of the component.
  final Map<String, TrialComponentArtifact>? outputArtifacts;

  /// The hyperparameters of the component.
  final Map<String, TrialComponentParameterValue>? parameters;

  /// An array of the parents of the component. A parent is a trial the component
  /// is associated with and the experiment the trial is part of. A component
  /// might not have any parents.
  final List<Parent>? parents;

  /// The name of the experiment run.
  final String? runName;

  /// The Amazon Resource Name (ARN) and job type of the source of the component.
  final TrialComponentSource? source;

  /// Details of the source of the component.
  final TrialComponentSourceDetail? sourceDetail;

  /// When the component started.
  final DateTime? startTime;
  final TrialComponentStatus? status;

  /// The list of tags that are associated with the component. You can use <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a>
  /// API to search on the tags.
  final List<Tag>? tags;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;

  TrialComponent({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.endTime,
    this.inputArtifacts,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.lineageGroupArn,
    this.metadataProperties,
    this.metrics,
    this.outputArtifacts,
    this.parameters,
    this.parents,
    this.runName,
    this.source,
    this.sourceDetail,
    this.startTime,
    this.status,
    this.tags,
    this.trialComponentArn,
    this.trialComponentName,
  });

  factory TrialComponent.fromJson(Map<String, dynamic> json) {
    return TrialComponent(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      endTime: timeStampFromJson(json['EndTime']),
      inputArtifacts: (json['InputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      lineageGroupArn: json['LineageGroupArn'] as String?,
      metadataProperties: json['MetadataProperties'] != null
          ? MetadataProperties.fromJson(
              json['MetadataProperties'] as Map<String, dynamic>)
          : null,
      metrics: (json['Metrics'] as List?)
          ?.nonNulls
          .map((e) =>
              TrialComponentMetricSummary.fromJson(e as Map<String, dynamic>))
          .toList(),
      outputArtifacts: (json['OutputArtifacts'] as Map<String, dynamic>?)?.map(
          (k, e) => MapEntry(
              k, TrialComponentArtifact.fromJson(e as Map<String, dynamic>))),
      parameters: (json['Parameters'] as Map<String, dynamic>?)?.map((k, e) =>
          MapEntry(
              k,
              TrialComponentParameterValue.fromJson(
                  e as Map<String, dynamic>))),
      parents: (json['Parents'] as List?)
          ?.nonNulls
          .map((e) => Parent.fromJson(e as Map<String, dynamic>))
          .toList(),
      runName: json['RunName'] as String?,
      source: json['Source'] != null
          ? TrialComponentSource.fromJson(
              json['Source'] as Map<String, dynamic>)
          : null,
      sourceDetail: json['SourceDetail'] != null
          ? TrialComponentSourceDetail.fromJson(
              json['SourceDetail'] as Map<String, dynamic>)
          : null,
      startTime: timeStampFromJson(json['StartTime']),
      status: json['Status'] != null
          ? TrialComponentStatus.fromJson(
              json['Status'] as Map<String, dynamic>)
          : null,
      tags: (json['Tags'] as List?)
          ?.nonNulls
          .map((e) => Tag.fromJson(e as Map<String, dynamic>))
          .toList(),
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final endTime = this.endTime;
    final inputArtifacts = this.inputArtifacts;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final lineageGroupArn = this.lineageGroupArn;
    final metadataProperties = this.metadataProperties;
    final metrics = this.metrics;
    final outputArtifacts = this.outputArtifacts;
    final parameters = this.parameters;
    final parents = this.parents;
    final runName = this.runName;
    final source = this.source;
    final sourceDetail = this.sourceDetail;
    final startTime = this.startTime;
    final status = this.status;
    final tags = this.tags;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (inputArtifacts != null) 'InputArtifacts': inputArtifacts,
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (lineageGroupArn != null) 'LineageGroupArn': lineageGroupArn,
      if (metadataProperties != null) 'MetadataProperties': metadataProperties,
      if (metrics != null) 'Metrics': metrics,
      if (outputArtifacts != null) 'OutputArtifacts': outputArtifacts,
      if (parameters != null) 'Parameters': parameters,
      if (parents != null) 'Parents': parents,
      if (runName != null) 'RunName': runName,
      if (source != null) 'Source': source,
      if (sourceDetail != null) 'SourceDetail': sourceDetail,
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (status != null) 'Status': status,
      if (tags != null) 'Tags': tags,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
    };
  }
}

/// Represents an input or output artifact of a trial component. You specify
/// <code>TrialComponentArtifact</code> as part of the
/// <code>InputArtifacts</code> and <code>OutputArtifacts</code> parameters in
/// the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a>
/// request.
///
/// Examples of input artifacts are datasets, algorithms, hyperparameters,
/// source code, and instance types. Examples of output artifacts are metrics,
/// snapshots, logs, and images.
class TrialComponentArtifact {
  /// The location of the artifact.
  final String value;

  /// The media type of the artifact, which indicates the type of data in the
  /// artifact file. The media type consists of a <i>type</i> and a <i>subtype</i>
  /// concatenated with a slash (/) character, for example, text/csv, image/jpeg,
  /// and s3/uri. The type specifies the category of the media. The subtype
  /// specifies the kind of data.
  final String? mediaType;

  TrialComponentArtifact({
    required this.value,
    this.mediaType,
  });

  factory TrialComponentArtifact.fromJson(Map<String, dynamic> json) {
    return TrialComponentArtifact(
      value: json['Value'] as String,
      mediaType: json['MediaType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final value = this.value;
    final mediaType = this.mediaType;
    return {
      'Value': value,
      if (mediaType != null) 'MediaType': mediaType,
    };
  }
}

/// A summary of the metrics of a trial component.
class TrialComponentMetricSummary {
  /// The average value of the metric.
  final double? avg;

  /// The number of samples used to generate the metric.
  final int? count;

  /// The most recent value of the metric.
  final double? last;

  /// The maximum value of the metric.
  final double? max;

  /// The name of the metric.
  final String? metricName;

  /// The minimum value of the metric.
  final double? min;

  /// The Amazon Resource Name (ARN) of the source.
  final String? sourceArn;

  /// The standard deviation of the metric.
  final double? stdDev;

  /// When the metric was last updated.
  final DateTime? timeStamp;

  TrialComponentMetricSummary({
    this.avg,
    this.count,
    this.last,
    this.max,
    this.metricName,
    this.min,
    this.sourceArn,
    this.stdDev,
    this.timeStamp,
  });

  factory TrialComponentMetricSummary.fromJson(Map<String, dynamic> json) {
    return TrialComponentMetricSummary(
      avg: json['Avg'] as double?,
      count: json['Count'] as int?,
      last: json['Last'] as double?,
      max: json['Max'] as double?,
      metricName: json['MetricName'] as String?,
      min: json['Min'] as double?,
      sourceArn: json['SourceArn'] as String?,
      stdDev: json['StdDev'] as double?,
      timeStamp: timeStampFromJson(json['TimeStamp']),
    );
  }

  Map<String, dynamic> toJson() {
    final avg = this.avg;
    final count = this.count;
    final last = this.last;
    final max = this.max;
    final metricName = this.metricName;
    final min = this.min;
    final sourceArn = this.sourceArn;
    final stdDev = this.stdDev;
    final timeStamp = this.timeStamp;
    return {
      if (avg != null) 'Avg': avg,
      if (count != null) 'Count': count,
      if (last != null) 'Last': last,
      if (max != null) 'Max': max,
      if (metricName != null) 'MetricName': metricName,
      if (min != null) 'Min': min,
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (stdDev != null) 'StdDev': stdDev,
      if (timeStamp != null) 'TimeStamp': unixTimestampToJson(timeStamp),
    };
  }
}

/// The value of a hyperparameter. Only one of <code>NumberValue</code> or
/// <code>StringValue</code> can be specified.
///
/// This object is specified in the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a>
/// request.
class TrialComponentParameterValue {
  /// The numeric value of a numeric hyperparameter. If you specify a value for
  /// this parameter, you can't specify the <code>StringValue</code> parameter.
  final double? numberValue;

  /// The string value of a categorical hyperparameter. If you specify a value for
  /// this parameter, you can't specify the <code>NumberValue</code> parameter.
  final String? stringValue;

  TrialComponentParameterValue({
    this.numberValue,
    this.stringValue,
  });

  factory TrialComponentParameterValue.fromJson(Map<String, dynamic> json) {
    return TrialComponentParameterValue(
      numberValue: json['NumberValue'] as double?,
      stringValue: json['StringValue'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final numberValue = this.numberValue;
    final stringValue = this.stringValue;
    return {
      if (numberValue != null) 'NumberValue': numberValue,
      if (stringValue != null) 'StringValue': stringValue,
    };
  }
}

enum TrialComponentPrimaryStatus {
  inProgress('InProgress'),
  completed('Completed'),
  failed('Failed'),
  stopping('Stopping'),
  stopped('Stopped'),
  ;

  final String value;

  const TrialComponentPrimaryStatus(this.value);

  static TrialComponentPrimaryStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum TrialComponentPrimaryStatus'));
}

/// A short summary of a trial component.
class TrialComponentSimpleSummary {
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;
  final TrialComponentSource? trialComponentSource;

  TrialComponentSimpleSummary({
    this.createdBy,
    this.creationTime,
    this.trialComponentArn,
    this.trialComponentName,
    this.trialComponentSource,
  });

  factory TrialComponentSimpleSummary.fromJson(Map<String, dynamic> json) {
    return TrialComponentSimpleSummary(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
      trialComponentSource: json['TrialComponentSource'] != null
          ? TrialComponentSource.fromJson(
              json['TrialComponentSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    final trialComponentSource = this.trialComponentSource;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
      if (trialComponentSource != null)
        'TrialComponentSource': trialComponentSource,
    };
  }
}

/// The Amazon Resource Name (ARN) and job type of the source of a trial
/// component.
class TrialComponentSource {
  /// The source Amazon Resource Name (ARN).
  final String sourceArn;

  /// The source job type.
  final String? sourceType;

  TrialComponentSource({
    required this.sourceArn,
    this.sourceType,
  });

  factory TrialComponentSource.fromJson(Map<String, dynamic> json) {
    return TrialComponentSource(
      sourceArn: json['SourceArn'] as String,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceArn = this.sourceArn;
    final sourceType = this.sourceType;
    return {
      'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// Detailed information about the source of a trial component. Either
/// <code>ProcessingJob</code> or <code>TrainingJob</code> is returned.
class TrialComponentSourceDetail {
  /// Information about a processing job that's the source of a trial component.
  final ProcessingJob? processingJob;

  /// The Amazon Resource Name (ARN) of the source.
  final String? sourceArn;

  /// Information about a training job that's the source of a trial component.
  final TrainingJob? trainingJob;

  /// Information about a transform job that's the source of a trial component.
  final TransformJob? transformJob;

  TrialComponentSourceDetail({
    this.processingJob,
    this.sourceArn,
    this.trainingJob,
    this.transformJob,
  });

  factory TrialComponentSourceDetail.fromJson(Map<String, dynamic> json) {
    return TrialComponentSourceDetail(
      processingJob: json['ProcessingJob'] != null
          ? ProcessingJob.fromJson(
              json['ProcessingJob'] as Map<String, dynamic>)
          : null,
      sourceArn: json['SourceArn'] as String?,
      trainingJob: json['TrainingJob'] != null
          ? TrainingJob.fromJson(json['TrainingJob'] as Map<String, dynamic>)
          : null,
      transformJob: json['TransformJob'] != null
          ? TransformJob.fromJson(json['TransformJob'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final processingJob = this.processingJob;
    final sourceArn = this.sourceArn;
    final trainingJob = this.trainingJob;
    final transformJob = this.transformJob;
    return {
      if (processingJob != null) 'ProcessingJob': processingJob,
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (trainingJob != null) 'TrainingJob': trainingJob,
      if (transformJob != null) 'TransformJob': transformJob,
    };
  }
}

/// The status of the trial component.
class TrialComponentStatus {
  /// If the component failed, a message describing why.
  final String? message;

  /// The status of the trial component.
  final TrialComponentPrimaryStatus? primaryStatus;

  TrialComponentStatus({
    this.message,
    this.primaryStatus,
  });

  factory TrialComponentStatus.fromJson(Map<String, dynamic> json) {
    return TrialComponentStatus(
      message: json['Message'] as String?,
      primaryStatus: (json['PrimaryStatus'] as String?)
          ?.let(TrialComponentPrimaryStatus.fromString),
    );
  }

  Map<String, dynamic> toJson() {
    final message = this.message;
    final primaryStatus = this.primaryStatus;
    return {
      if (message != null) 'Message': message,
      if (primaryStatus != null) 'PrimaryStatus': primaryStatus.value,
    };
  }
}

/// A summary of the properties of a trial component. To get all the properties,
/// call the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a>
/// API and provide the <code>TrialComponentName</code>.
class TrialComponentSummary {
  /// Who created the trial component.
  final UserContext? createdBy;

  /// When the component was created.
  final DateTime? creationTime;

  /// The name of the component as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialComponentName</code> is displayed.
  final String? displayName;

  /// When the component ended.
  final DateTime? endTime;

  /// Who last modified the component.
  final UserContext? lastModifiedBy;

  /// When the component was last modified.
  final DateTime? lastModifiedTime;

  /// When the component started.
  final DateTime? startTime;

  /// The status of the component. States include:
  ///
  /// <ul>
  /// <li>
  /// InProgress
  /// </li>
  /// <li>
  /// Completed
  /// </li>
  /// <li>
  /// Failed
  /// </li>
  /// </ul>
  final TrialComponentStatus? status;

  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  /// The name of the trial component.
  final String? trialComponentName;
  final TrialComponentSource? trialComponentSource;

  TrialComponentSummary({
    this.createdBy,
    this.creationTime,
    this.displayName,
    this.endTime,
    this.lastModifiedBy,
    this.lastModifiedTime,
    this.startTime,
    this.status,
    this.trialComponentArn,
    this.trialComponentName,
    this.trialComponentSource,
  });

  factory TrialComponentSummary.fromJson(Map<String, dynamic> json) {
    return TrialComponentSummary(
      createdBy: json['CreatedBy'] != null
          ? UserContext.fromJson(json['CreatedBy'] as Map<String, dynamic>)
          : null,
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      endTime: timeStampFromJson(json['EndTime']),
      lastModifiedBy: json['LastModifiedBy'] != null
          ? UserContext.fromJson(json['LastModifiedBy'] as Map<String, dynamic>)
          : null,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      startTime: timeStampFromJson(json['StartTime']),
      status: json['Status'] != null
          ? TrialComponentStatus.fromJson(
              json['Status'] as Map<String, dynamic>)
          : null,
      trialComponentArn: json['TrialComponentArn'] as String?,
      trialComponentName: json['TrialComponentName'] as String?,
      trialComponentSource: json['TrialComponentSource'] != null
          ? TrialComponentSource.fromJson(
              json['TrialComponentSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final createdBy = this.createdBy;
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final endTime = this.endTime;
    final lastModifiedBy = this.lastModifiedBy;
    final lastModifiedTime = this.lastModifiedTime;
    final startTime = this.startTime;
    final status = this.status;
    final trialComponentArn = this.trialComponentArn;
    final trialComponentName = this.trialComponentName;
    final trialComponentSource = this.trialComponentSource;
    return {
      if (createdBy != null) 'CreatedBy': createdBy,
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (endTime != null) 'EndTime': unixTimestampToJson(endTime),
      if (lastModifiedBy != null) 'LastModifiedBy': lastModifiedBy,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (startTime != null) 'StartTime': unixTimestampToJson(startTime),
      if (status != null) 'Status': status,
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
      if (trialComponentName != null) 'TrialComponentName': trialComponentName,
      if (trialComponentSource != null)
        'TrialComponentSource': trialComponentSource,
    };
  }
}

/// The source of the trial.
class TrialSource {
  /// The Amazon Resource Name (ARN) of the source.
  final String sourceArn;

  /// The source job type.
  final String? sourceType;

  TrialSource({
    required this.sourceArn,
    this.sourceType,
  });

  factory TrialSource.fromJson(Map<String, dynamic> json) {
    return TrialSource(
      sourceArn: json['SourceArn'] as String,
      sourceType: json['SourceType'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final sourceArn = this.sourceArn;
    final sourceType = this.sourceType;
    return {
      'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
  }
}

/// A summary of the properties of a trial. To get the complete set of
/// properties, call the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a>
/// API and provide the <code>TrialName</code>.
class TrialSummary {
  /// When the trial was created.
  final DateTime? creationTime;

  /// The name of the trial as displayed. If <code>DisplayName</code> isn't
  /// specified, <code>TrialName</code> is displayed.
  final String? displayName;

  /// When the trial was last modified.
  final DateTime? lastModifiedTime;

  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  /// The name of the trial.
  final String? trialName;
  final TrialSource? trialSource;

  TrialSummary({
    this.creationTime,
    this.displayName,
    this.lastModifiedTime,
    this.trialArn,
    this.trialName,
    this.trialSource,
  });

  factory TrialSummary.fromJson(Map<String, dynamic> json) {
    return TrialSummary(
      creationTime: timeStampFromJson(json['CreationTime']),
      displayName: json['DisplayName'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      trialArn: json['TrialArn'] as String?,
      trialName: json['TrialName'] as String?,
      trialSource: json['TrialSource'] != null
          ? TrialSource.fromJson(json['TrialSource'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final displayName = this.displayName;
    final lastModifiedTime = this.lastModifiedTime;
    final trialArn = this.trialArn;
    final trialName = this.trialName;
    final trialSource = this.trialSource;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (displayName != null) 'DisplayName': displayName,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (trialArn != null) 'TrialArn': trialArn,
      if (trialName != null) 'TrialName': trialName,
      if (trialSource != null) 'TrialSource': trialSource,
    };
  }
}

/// Time to live duration, where the record is hard deleted after the expiration
/// time is reached; <code>ExpiresAt</code> = <code>EventTime</code> +
/// <code>TtlDuration</code>. For information on HardDelete, see the <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a>
/// API in the Amazon SageMaker API Reference guide.
class TtlDuration {
  /// <code>TtlDuration</code> time unit.
  final TtlDurationUnit? unit;

  /// <code>TtlDuration</code> time value.
  final int? value;

  TtlDuration({
    this.unit,
    this.value,
  });

  factory TtlDuration.fromJson(Map<String, dynamic> json) {
    return TtlDuration(
      unit: (json['Unit'] as String?)?.let(TtlDurationUnit.fromString),
      value: json['Value'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final unit = this.unit;
    final value = this.value;
    return {
      if (unit != null) 'Unit': unit.value,
      if (value != null) 'Value': value,
    };
  }
}

enum TtlDurationUnit {
  seconds('Seconds'),
  minutes('Minutes'),
  hours('Hours'),
  days('Days'),
  weeks('Weeks'),
  ;

  final String value;

  const TtlDurationUnit(this.value);

  static TtlDurationUnit fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum TtlDurationUnit'));
}

/// The job completion criteria.
class TuningJobCompletionCriteria {
  /// A flag to stop your hyperparameter tuning job if model performance fails to
  /// improve as evaluated against an objective function.
  final BestObjectiveNotImproving? bestObjectiveNotImproving;

  /// A flag to top your hyperparameter tuning job if automatic model tuning (AMT)
  /// has detected that your model has converged as evaluated against your
  /// objective function.
  final ConvergenceDetected? convergenceDetected;

  /// The value of the objective metric.
  final double? targetObjectiveMetricValue;

  TuningJobCompletionCriteria({
    this.bestObjectiveNotImproving,
    this.convergenceDetected,
    this.targetObjectiveMetricValue,
  });

  factory TuningJobCompletionCriteria.fromJson(Map<String, dynamic> json) {
    return TuningJobCompletionCriteria(
      bestObjectiveNotImproving: json['BestObjectiveNotImproving'] != null
          ? BestObjectiveNotImproving.fromJson(
              json['BestObjectiveNotImproving'] as Map<String, dynamic>)
          : null,
      convergenceDetected: json['ConvergenceDetected'] != null
          ? ConvergenceDetected.fromJson(
              json['ConvergenceDetected'] as Map<String, dynamic>)
          : null,
      targetObjectiveMetricValue: json['TargetObjectiveMetricValue'] as double?,
    );
  }

  Map<String, dynamic> toJson() {
    final bestObjectiveNotImproving = this.bestObjectiveNotImproving;
    final convergenceDetected = this.convergenceDetected;
    final targetObjectiveMetricValue = this.targetObjectiveMetricValue;
    return {
      if (bestObjectiveNotImproving != null)
        'BestObjectiveNotImproving': bestObjectiveNotImproving,
      if (convergenceDetected != null)
        'ConvergenceDetected': convergenceDetected,
      if (targetObjectiveMetricValue != null)
        'TargetObjectiveMetricValue': targetObjectiveMetricValue,
    };
  }
}

/// Metadata for a tuning step.
class TuningJobStepMetaData {
  /// The Amazon Resource Name (ARN) of the tuning job that was run by this step
  /// execution.
  final String? arn;

  TuningJobStepMetaData({
    this.arn,
  });

  factory TuningJobStepMetaData.fromJson(Map<String, dynamic> json) {
    return TuningJobStepMetaData(
      arn: json['Arn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    return {
      if (arn != null) 'Arn': arn,
    };
  }
}

/// Represents an amount of money in United States dollars.
class USD {
  /// The fractional portion, in cents, of the amount.
  final int? cents;

  /// The whole number of dollars in the amount.
  final int? dollars;

  /// Fractions of a cent, in tenths.
  final int? tenthFractionsOfACent;

  USD({
    this.cents,
    this.dollars,
    this.tenthFractionsOfACent,
  });

  factory USD.fromJson(Map<String, dynamic> json) {
    return USD(
      cents: json['Cents'] as int?,
      dollars: json['Dollars'] as int?,
      tenthFractionsOfACent: json['TenthFractionsOfACent'] as int?,
    );
  }

  Map<String, dynamic> toJson() {
    final cents = this.cents;
    final dollars = this.dollars;
    final tenthFractionsOfACent = this.tenthFractionsOfACent;
    return {
      if (cents != null) 'Cents': cents,
      if (dollars != null) 'Dollars': dollars,
      if (tenthFractionsOfACent != null)
        'TenthFractionsOfACent': tenthFractionsOfACent,
    };
  }
}

/// Provided configuration information for the worker UI for a labeling job.
/// Provide either <code>HumanTaskUiArn</code> or <code>UiTemplateS3Uri</code>.
///
/// For named entity recognition, 3D point cloud and video frame labeling jobs,
/// use <code>HumanTaskUiArn</code>.
///
/// For all other Ground Truth built-in task types and custom task types, use
/// <code>UiTemplateS3Uri</code> to specify the location of a worker task
/// template in Amazon S3.
class UiConfig {
  /// The ARN of the worker task template used to render the worker UI and tools
  /// for labeling job tasks.
  ///
  /// Use this parameter when you are creating a labeling job for named entity
  /// recognition, 3D point cloud and video frame labeling jobs. Use your labeling
  /// job task type to select one of the following ARNs and use it with this
  /// parameter when you create a labeling job. Replace <code>aws-region</code>
  /// with the Amazon Web Services Region you are creating your labeling job in.
  /// For example, replace <code>aws-region</code> with <code>us-west-1</code> if
  /// you create a labeling job in US West (N. California).
  ///
  /// <b>Named Entity Recognition</b>
  ///
  /// Use the following <code>HumanTaskUiArn</code> for named entity recognition
  /// labeling jobs:
  ///
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/NamedEntityRecognition</code>
  ///
  /// <b>3D Point Cloud HumanTaskUiArns</b>
  ///
  /// Use this <code>HumanTaskUiArn</code> for 3D point cloud object detection and
  /// 3D point cloud object detection adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection</code>
  /// </li>
  /// </ul>
  /// Use this <code>HumanTaskUiArn</code> for 3D point cloud object tracking and
  /// 3D point cloud object tracking adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking</code>
  /// </li>
  /// </ul>
  /// Use this <code>HumanTaskUiArn</code> for 3D point cloud semantic
  /// segmentation and 3D point cloud semantic segmentation adjustment labeling
  /// jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation</code>
  /// </li>
  /// </ul>
  /// <b>Video Frame HumanTaskUiArns</b>
  ///
  /// Use this <code>HumanTaskUiArn</code> for video frame object detection and
  /// video frame object detection adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection</code>
  /// </li>
  /// </ul>
  /// Use this <code>HumanTaskUiArn</code> for video frame object tracking and
  /// video frame object tracking adjustment labeling jobs.
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking</code>
  /// </li>
  /// </ul>
  final String? humanTaskUiArn;

  /// The Amazon S3 bucket location of the UI template, or worker task template.
  /// This is the template used to render the worker UI and tools for labeling job
  /// tasks. For more information about the contents of a UI template, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step2.html">
  /// Creating Your Custom Labeling Task Template</a>.
  final String? uiTemplateS3Uri;

  UiConfig({
    this.humanTaskUiArn,
    this.uiTemplateS3Uri,
  });

  factory UiConfig.fromJson(Map<String, dynamic> json) {
    return UiConfig(
      humanTaskUiArn: json['HumanTaskUiArn'] as String?,
      uiTemplateS3Uri: json['UiTemplateS3Uri'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final humanTaskUiArn = this.humanTaskUiArn;
    final uiTemplateS3Uri = this.uiTemplateS3Uri;
    return {
      if (humanTaskUiArn != null) 'HumanTaskUiArn': humanTaskUiArn,
      if (uiTemplateS3Uri != null) 'UiTemplateS3Uri': uiTemplateS3Uri,
    };
  }
}

/// The Liquid template for the worker user interface.
class UiTemplate {
  /// The content of the Liquid template for the worker user interface.
  final String content;

  UiTemplate({
    required this.content,
  });

  Map<String, dynamic> toJson() {
    final content = this.content;
    return {
      'Content': content,
    };
  }
}

/// Container for user interface template information.
class UiTemplateInfo {
  /// The SHA-256 digest of the contents of the template.
  final String? contentSha256;

  /// The URL for the user interface template.
  final String? url;

  UiTemplateInfo({
    this.contentSha256,
    this.url,
  });

  factory UiTemplateInfo.fromJson(Map<String, dynamic> json) {
    return UiTemplateInfo(
      contentSha256: json['ContentSha256'] as String?,
      url: json['Url'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contentSha256 = this.contentSha256;
    final url = this.url;
    return {
      if (contentSha256 != null) 'ContentSha256': contentSha256,
      if (url != null) 'Url': url,
    };
  }
}

class UpdateActionResponse {
  /// The Amazon Resource Name (ARN) of the action.
  final String? actionArn;

  UpdateActionResponse({
    this.actionArn,
  });

  factory UpdateActionResponse.fromJson(Map<String, dynamic> json) {
    return UpdateActionResponse(
      actionArn: json['ActionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final actionArn = this.actionArn;
    return {
      if (actionArn != null) 'ActionArn': actionArn,
    };
  }
}

class UpdateAppImageConfigResponse {
  /// The ARN for the AppImageConfig.
  final String? appImageConfigArn;

  UpdateAppImageConfigResponse({
    this.appImageConfigArn,
  });

  factory UpdateAppImageConfigResponse.fromJson(Map<String, dynamic> json) {
    return UpdateAppImageConfigResponse(
      appImageConfigArn: json['AppImageConfigArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final appImageConfigArn = this.appImageConfigArn;
    return {
      if (appImageConfigArn != null) 'AppImageConfigArn': appImageConfigArn,
    };
  }
}

class UpdateArtifactResponse {
  /// The Amazon Resource Name (ARN) of the artifact.
  final String? artifactArn;

  UpdateArtifactResponse({
    this.artifactArn,
  });

  factory UpdateArtifactResponse.fromJson(Map<String, dynamic> json) {
    return UpdateArtifactResponse(
      artifactArn: json['ArtifactArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final artifactArn = this.artifactArn;
    return {
      if (artifactArn != null) 'ArtifactArn': artifactArn,
    };
  }
}

class UpdateClusterResponse {
  /// The Amazon Resource Name (ARN) of the updated SageMaker HyperPod cluster.
  final String clusterArn;

  UpdateClusterResponse({
    required this.clusterArn,
  });

  factory UpdateClusterResponse.fromJson(Map<String, dynamic> json) {
    return UpdateClusterResponse(
      clusterArn: json['ClusterArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterArn = this.clusterArn;
    return {
      'ClusterArn': clusterArn,
    };
  }
}

class UpdateClusterSoftwareResponse {
  /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster being
  /// updated for security patching.
  final String clusterArn;

  UpdateClusterSoftwareResponse({
    required this.clusterArn,
  });

  factory UpdateClusterSoftwareResponse.fromJson(Map<String, dynamic> json) {
    return UpdateClusterSoftwareResponse(
      clusterArn: json['ClusterArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final clusterArn = this.clusterArn;
    return {
      'ClusterArn': clusterArn,
    };
  }
}

class UpdateCodeRepositoryOutput {
  /// The ARN of the Git repository.
  final String codeRepositoryArn;

  UpdateCodeRepositoryOutput({
    required this.codeRepositoryArn,
  });

  factory UpdateCodeRepositoryOutput.fromJson(Map<String, dynamic> json) {
    return UpdateCodeRepositoryOutput(
      codeRepositoryArn: json['CodeRepositoryArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final codeRepositoryArn = this.codeRepositoryArn;
    return {
      'CodeRepositoryArn': codeRepositoryArn,
    };
  }
}

class UpdateContextResponse {
  /// The Amazon Resource Name (ARN) of the context.
  final String? contextArn;

  UpdateContextResponse({
    this.contextArn,
  });

  factory UpdateContextResponse.fromJson(Map<String, dynamic> json) {
    return UpdateContextResponse(
      contextArn: json['ContextArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final contextArn = this.contextArn;
    return {
      if (contextArn != null) 'ContextArn': contextArn,
    };
  }
}

class UpdateDomainResponse {
  /// The Amazon Resource Name (ARN) of the domain.
  final String? domainArn;

  UpdateDomainResponse({
    this.domainArn,
  });

  factory UpdateDomainResponse.fromJson(Map<String, dynamic> json) {
    return UpdateDomainResponse(
      domainArn: json['DomainArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainArn = this.domainArn;
    return {
      if (domainArn != null) 'DomainArn': domainArn,
    };
  }
}

class UpdateEndpointOutput {
  /// The Amazon Resource Name (ARN) of the endpoint.
  final String endpointArn;

  UpdateEndpointOutput({
    required this.endpointArn,
  });

  factory UpdateEndpointOutput.fromJson(Map<String, dynamic> json) {
    return UpdateEndpointOutput(
      endpointArn: json['EndpointArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointArn = this.endpointArn;
    return {
      'EndpointArn': endpointArn,
    };
  }
}

class UpdateEndpointWeightsAndCapacitiesOutput {
  /// The Amazon Resource Name (ARN) of the updated endpoint.
  final String endpointArn;

  UpdateEndpointWeightsAndCapacitiesOutput({
    required this.endpointArn,
  });

  factory UpdateEndpointWeightsAndCapacitiesOutput.fromJson(
      Map<String, dynamic> json) {
    return UpdateEndpointWeightsAndCapacitiesOutput(
      endpointArn: json['EndpointArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final endpointArn = this.endpointArn;
    return {
      'EndpointArn': endpointArn,
    };
  }
}

class UpdateExperimentResponse {
  /// The Amazon Resource Name (ARN) of the experiment.
  final String? experimentArn;

  UpdateExperimentResponse({
    this.experimentArn,
  });

  factory UpdateExperimentResponse.fromJson(Map<String, dynamic> json) {
    return UpdateExperimentResponse(
      experimentArn: json['ExperimentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final experimentArn = this.experimentArn;
    return {
      if (experimentArn != null) 'ExperimentArn': experimentArn,
    };
  }
}

class UpdateFeatureGroupResponse {
  /// The Amazon Resource Number (ARN) of the feature group that you're updating.
  final String featureGroupArn;

  UpdateFeatureGroupResponse({
    required this.featureGroupArn,
  });

  factory UpdateFeatureGroupResponse.fromJson(Map<String, dynamic> json) {
    return UpdateFeatureGroupResponse(
      featureGroupArn: json['FeatureGroupArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final featureGroupArn = this.featureGroupArn;
    return {
      'FeatureGroupArn': featureGroupArn,
    };
  }
}

class UpdateHubResponse {
  /// The Amazon Resource Name (ARN) of the updated hub.
  final String hubArn;

  UpdateHubResponse({
    required this.hubArn,
  });

  factory UpdateHubResponse.fromJson(Map<String, dynamic> json) {
    return UpdateHubResponse(
      hubArn: json['HubArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final hubArn = this.hubArn;
    return {
      'HubArn': hubArn,
    };
  }
}

class UpdateImageResponse {
  /// The ARN of the image.
  final String? imageArn;

  UpdateImageResponse({
    this.imageArn,
  });

  factory UpdateImageResponse.fromJson(Map<String, dynamic> json) {
    return UpdateImageResponse(
      imageArn: json['ImageArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageArn = this.imageArn;
    return {
      if (imageArn != null) 'ImageArn': imageArn,
    };
  }
}

class UpdateImageVersionResponse {
  /// The ARN of the image version.
  final String? imageVersionArn;

  UpdateImageVersionResponse({
    this.imageVersionArn,
  });

  factory UpdateImageVersionResponse.fromJson(Map<String, dynamic> json) {
    return UpdateImageVersionResponse(
      imageVersionArn: json['ImageVersionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final imageVersionArn = this.imageVersionArn;
    return {
      if (imageVersionArn != null) 'ImageVersionArn': imageVersionArn,
    };
  }
}

class UpdateInferenceComponentOutput {
  /// The Amazon Resource Name (ARN) of the inference component.
  final String inferenceComponentArn;

  UpdateInferenceComponentOutput({
    required this.inferenceComponentArn,
  });

  factory UpdateInferenceComponentOutput.fromJson(Map<String, dynamic> json) {
    return UpdateInferenceComponentOutput(
      inferenceComponentArn: json['InferenceComponentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceComponentArn = this.inferenceComponentArn;
    return {
      'InferenceComponentArn': inferenceComponentArn,
    };
  }
}

class UpdateInferenceComponentRuntimeConfigOutput {
  /// The Amazon Resource Name (ARN) of the inference component.
  final String inferenceComponentArn;

  UpdateInferenceComponentRuntimeConfigOutput({
    required this.inferenceComponentArn,
  });

  factory UpdateInferenceComponentRuntimeConfigOutput.fromJson(
      Map<String, dynamic> json) {
    return UpdateInferenceComponentRuntimeConfigOutput(
      inferenceComponentArn: json['InferenceComponentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceComponentArn = this.inferenceComponentArn;
    return {
      'InferenceComponentArn': inferenceComponentArn,
    };
  }
}

class UpdateInferenceExperimentResponse {
  /// The ARN of the updated inference experiment.
  final String inferenceExperimentArn;

  UpdateInferenceExperimentResponse({
    required this.inferenceExperimentArn,
  });

  factory UpdateInferenceExperimentResponse.fromJson(
      Map<String, dynamic> json) {
    return UpdateInferenceExperimentResponse(
      inferenceExperimentArn: json['InferenceExperimentArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final inferenceExperimentArn = this.inferenceExperimentArn;
    return {
      'InferenceExperimentArn': inferenceExperimentArn,
    };
  }
}

class UpdateModelCardResponse {
  /// The Amazon Resource Name (ARN) of the updated model card.
  final String modelCardArn;

  UpdateModelCardResponse({
    required this.modelCardArn,
  });

  factory UpdateModelCardResponse.fromJson(Map<String, dynamic> json) {
    return UpdateModelCardResponse(
      modelCardArn: json['ModelCardArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelCardArn = this.modelCardArn;
    return {
      'ModelCardArn': modelCardArn,
    };
  }
}

class UpdateModelPackageOutput {
  /// The Amazon Resource Name (ARN) of the model.
  final String modelPackageArn;

  UpdateModelPackageOutput({
    required this.modelPackageArn,
  });

  factory UpdateModelPackageOutput.fromJson(Map<String, dynamic> json) {
    return UpdateModelPackageOutput(
      modelPackageArn: json['ModelPackageArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final modelPackageArn = this.modelPackageArn;
    return {
      'ModelPackageArn': modelPackageArn,
    };
  }
}

class UpdateMonitoringAlertResponse {
  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  /// The name of a monitoring alert.
  final String? monitoringAlertName;

  UpdateMonitoringAlertResponse({
    required this.monitoringScheduleArn,
    this.monitoringAlertName,
  });

  factory UpdateMonitoringAlertResponse.fromJson(Map<String, dynamic> json) {
    return UpdateMonitoringAlertResponse(
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
      monitoringAlertName: json['MonitoringAlertName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleArn = this.monitoringScheduleArn;
    final monitoringAlertName = this.monitoringAlertName;
    return {
      'MonitoringScheduleArn': monitoringScheduleArn,
      if (monitoringAlertName != null)
        'MonitoringAlertName': monitoringAlertName,
    };
  }
}

class UpdateMonitoringScheduleResponse {
  /// The Amazon Resource Name (ARN) of the monitoring schedule.
  final String monitoringScheduleArn;

  UpdateMonitoringScheduleResponse({
    required this.monitoringScheduleArn,
  });

  factory UpdateMonitoringScheduleResponse.fromJson(Map<String, dynamic> json) {
    return UpdateMonitoringScheduleResponse(
      monitoringScheduleArn: json['MonitoringScheduleArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final monitoringScheduleArn = this.monitoringScheduleArn;
    return {
      'MonitoringScheduleArn': monitoringScheduleArn,
    };
  }
}

class UpdateNotebookInstanceLifecycleConfigOutput {
  UpdateNotebookInstanceLifecycleConfigOutput();

  factory UpdateNotebookInstanceLifecycleConfigOutput.fromJson(
      Map<String, dynamic> _) {
    return UpdateNotebookInstanceLifecycleConfigOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class UpdateNotebookInstanceOutput {
  UpdateNotebookInstanceOutput();

  factory UpdateNotebookInstanceOutput.fromJson(Map<String, dynamic> _) {
    return UpdateNotebookInstanceOutput();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class UpdatePipelineExecutionResponse {
  /// The Amazon Resource Name (ARN) of the updated pipeline execution.
  final String? pipelineExecutionArn;

  UpdatePipelineExecutionResponse({
    this.pipelineExecutionArn,
  });

  factory UpdatePipelineExecutionResponse.fromJson(Map<String, dynamic> json) {
    return UpdatePipelineExecutionResponse(
      pipelineExecutionArn: json['PipelineExecutionArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineExecutionArn = this.pipelineExecutionArn;
    return {
      if (pipelineExecutionArn != null)
        'PipelineExecutionArn': pipelineExecutionArn,
    };
  }
}

class UpdatePipelineResponse {
  /// The Amazon Resource Name (ARN) of the updated pipeline.
  final String? pipelineArn;

  UpdatePipelineResponse({
    this.pipelineArn,
  });

  factory UpdatePipelineResponse.fromJson(Map<String, dynamic> json) {
    return UpdatePipelineResponse(
      pipelineArn: json['PipelineArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final pipelineArn = this.pipelineArn;
    return {
      if (pipelineArn != null) 'PipelineArn': pipelineArn,
    };
  }
}

class UpdateProjectOutput {
  /// The Amazon Resource Name (ARN) of the project.
  final String projectArn;

  UpdateProjectOutput({
    required this.projectArn,
  });

  factory UpdateProjectOutput.fromJson(Map<String, dynamic> json) {
    return UpdateProjectOutput(
      projectArn: json['ProjectArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final projectArn = this.projectArn;
    return {
      'ProjectArn': projectArn,
    };
  }
}

class UpdateSpaceResponse {
  /// The space's Amazon Resource Name (ARN).
  final String? spaceArn;

  UpdateSpaceResponse({
    this.spaceArn,
  });

  factory UpdateSpaceResponse.fromJson(Map<String, dynamic> json) {
    return UpdateSpaceResponse(
      spaceArn: json['SpaceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final spaceArn = this.spaceArn;
    return {
      if (spaceArn != null) 'SpaceArn': spaceArn,
    };
  }
}

class UpdateTrainingJobResponse {
  /// The Amazon Resource Name (ARN) of the training job.
  final String trainingJobArn;

  UpdateTrainingJobResponse({
    required this.trainingJobArn,
  });

  factory UpdateTrainingJobResponse.fromJson(Map<String, dynamic> json) {
    return UpdateTrainingJobResponse(
      trainingJobArn: json['TrainingJobArn'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    final trainingJobArn = this.trainingJobArn;
    return {
      'TrainingJobArn': trainingJobArn,
    };
  }
}

class UpdateTrialComponentResponse {
  /// The Amazon Resource Name (ARN) of the trial component.
  final String? trialComponentArn;

  UpdateTrialComponentResponse({
    this.trialComponentArn,
  });

  factory UpdateTrialComponentResponse.fromJson(Map<String, dynamic> json) {
    return UpdateTrialComponentResponse(
      trialComponentArn: json['TrialComponentArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialComponentArn = this.trialComponentArn;
    return {
      if (trialComponentArn != null) 'TrialComponentArn': trialComponentArn,
    };
  }
}

class UpdateTrialResponse {
  /// The Amazon Resource Name (ARN) of the trial.
  final String? trialArn;

  UpdateTrialResponse({
    this.trialArn,
  });

  factory UpdateTrialResponse.fromJson(Map<String, dynamic> json) {
    return UpdateTrialResponse(
      trialArn: json['TrialArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final trialArn = this.trialArn;
    return {
      if (trialArn != null) 'TrialArn': trialArn,
    };
  }
}

class UpdateUserProfileResponse {
  /// The user profile Amazon Resource Name (ARN).
  final String? userProfileArn;

  UpdateUserProfileResponse({
    this.userProfileArn,
  });

  factory UpdateUserProfileResponse.fromJson(Map<String, dynamic> json) {
    return UpdateUserProfileResponse(
      userProfileArn: json['UserProfileArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final userProfileArn = this.userProfileArn;
    return {
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
    };
  }
}

class UpdateWorkforceResponse {
  /// A single private workforce. You can create one private work force in each
  /// Amazon Web Services Region. By default, any workforce-related API operation
  /// used in a specific region will apply to the workforce created in that
  /// region. To learn how to create a private workforce, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create
  /// a Private Workforce</a>.
  final Workforce workforce;

  UpdateWorkforceResponse({
    required this.workforce,
  });

  factory UpdateWorkforceResponse.fromJson(Map<String, dynamic> json) {
    return UpdateWorkforceResponse(
      workforce: Workforce.fromJson(json['Workforce'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workforce = this.workforce;
    return {
      'Workforce': workforce,
    };
  }
}

class UpdateWorkteamResponse {
  /// A <code>Workteam</code> object that describes the updated work team.
  final Workteam workteam;

  UpdateWorkteamResponse({
    required this.workteam,
  });

  factory UpdateWorkteamResponse.fromJson(Map<String, dynamic> json) {
    return UpdateWorkteamResponse(
      workteam: Workteam.fromJson(json['Workteam'] as Map<String, dynamic>),
    );
  }

  Map<String, dynamic> toJson() {
    final workteam = this.workteam;
    return {
      'Workteam': workteam,
    };
  }
}

/// Information about the user who created or modified an experiment, trial,
/// trial component, lineage group, project, or model card.
class UserContext {
  /// The domain associated with the user.
  final String? domainId;

  /// The IAM Identity details associated with the user. These details are
  /// associated with model package groups, model packages, and project entities
  /// only.
  final IamIdentity? iamIdentity;

  /// The Amazon Resource Name (ARN) of the user's profile.
  final String? userProfileArn;

  /// The name of the user's profile.
  final String? userProfileName;

  UserContext({
    this.domainId,
    this.iamIdentity,
    this.userProfileArn,
    this.userProfileName,
  });

  factory UserContext.fromJson(Map<String, dynamic> json) {
    return UserContext(
      domainId: json['DomainId'] as String?,
      iamIdentity: json['IamIdentity'] != null
          ? IamIdentity.fromJson(json['IamIdentity'] as Map<String, dynamic>)
          : null,
      userProfileArn: json['UserProfileArn'] as String?,
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final domainId = this.domainId;
    final iamIdentity = this.iamIdentity;
    final userProfileArn = this.userProfileArn;
    final userProfileName = this.userProfileName;
    return {
      if (domainId != null) 'DomainId': domainId,
      if (iamIdentity != null) 'IamIdentity': iamIdentity,
      if (userProfileArn != null) 'UserProfileArn': userProfileArn,
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

/// The user profile details.
class UserProfileDetails {
  /// The creation time.
  final DateTime? creationTime;

  /// The domain ID.
  final String? domainId;

  /// The last modified time.
  final DateTime? lastModifiedTime;

  /// The status.
  final UserProfileStatus? status;

  /// The user profile name.
  final String? userProfileName;

  UserProfileDetails({
    this.creationTime,
    this.domainId,
    this.lastModifiedTime,
    this.status,
    this.userProfileName,
  });

  factory UserProfileDetails.fromJson(Map<String, dynamic> json) {
    return UserProfileDetails(
      creationTime: timeStampFromJson(json['CreationTime']),
      domainId: json['DomainId'] as String?,
      lastModifiedTime: timeStampFromJson(json['LastModifiedTime']),
      status: (json['Status'] as String?)?.let(UserProfileStatus.fromString),
      userProfileName: json['UserProfileName'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final creationTime = this.creationTime;
    final domainId = this.domainId;
    final lastModifiedTime = this.lastModifiedTime;
    final status = this.status;
    final userProfileName = this.userProfileName;
    return {
      if (creationTime != null)
        'CreationTime': unixTimestampToJson(creationTime),
      if (domainId != null) 'DomainId': domainId,
      if (lastModifiedTime != null)
        'LastModifiedTime': unixTimestampToJson(lastModifiedTime),
      if (status != null) 'Status': status.value,
      if (userProfileName != null) 'UserProfileName': userProfileName,
    };
  }
}

enum UserProfileSortKey {
  creationTime('CreationTime'),
  lastModifiedTime('LastModifiedTime'),
  ;

  final String value;

  const UserProfileSortKey(this.value);

  static UserProfileSortKey fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum UserProfileSortKey'));
}

enum UserProfileStatus {
  deleting('Deleting'),
  failed('Failed'),
  inService('InService'),
  pending('Pending'),
  updating('Updating'),
  updateFailed('Update_Failed'),
  deleteFailed('Delete_Failed'),
  ;

  final String value;

  const UserProfileStatus(this.value);

  static UserProfileStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum UserProfileStatus'));
}

/// A collection of settings that apply to users in a domain. These settings are
/// specified when the <code>CreateUserProfile</code> API is called, and as
/// <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is
/// called.
///
/// <code>SecurityGroups</code> is aggregated when specified in both calls. For
/// all other settings in <code>UserSettings</code>, the values specified in
/// <code>CreateUserProfile</code> take precedence over those specified in
/// <code>CreateDomain</code>.
class UserSettings {
  /// The Canvas app settings.
  final CanvasAppSettings? canvasAppSettings;

  /// The Code Editor application settings.
  final CodeEditorAppSettings? codeEditorAppSettings;

  /// The settings for assigning a custom file system to a user profile. Permitted
  /// users can access this file system in Amazon SageMaker Studio.
  final List<CustomFileSystemConfig>? customFileSystemConfigs;

  /// Details about the POSIX identity that is used for file system operations.
  final CustomPosixUserConfig? customPosixUserConfig;

  /// The default experience that the user is directed to when accessing the
  /// domain. The supported values are:
  ///
  /// <ul>
  /// <li>
  /// <code>studio::</code>: Indicates that Studio is the default experience. This
  /// value can only be passed if <code>StudioWebPortal</code> is set to
  /// <code>ENABLED</code>.
  /// </li>
  /// <li>
  /// <code>app:JupyterServer:</code>: Indicates that Studio Classic is the
  /// default experience.
  /// </li>
  /// </ul>
  final String? defaultLandingUri;

  /// The execution role for the user.
  final String? executionRole;

  /// The settings for the JupyterLab application.
  final JupyterLabAppSettings? jupyterLabAppSettings;

  /// The Jupyter server's app settings.
  final JupyterServerAppSettings? jupyterServerAppSettings;

  /// The kernel gateway app settings.
  final KernelGatewayAppSettings? kernelGatewayAppSettings;

  /// A collection of settings that configure the <code>RSessionGateway</code>
  /// app.
  final RSessionAppSettings? rSessionAppSettings;

  /// A collection of settings that configure user interaction with the
  /// <code>RStudioServerPro</code> app.
  final RStudioServerProAppSettings? rStudioServerProAppSettings;

  /// The security groups for the Amazon Virtual Private Cloud (VPC) that the
  /// domain uses for communication.
  ///
  /// Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter
  /// is set to <code>PublicInternetOnly</code>.
  ///
  /// Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter
  /// is set to <code>VpcOnly</code>, unless specified as part of the
  /// <code>DefaultUserSettings</code> for the domain.
  ///
  /// Amazon SageMaker adds a security group to allow NFS traffic from Amazon
  /// SageMaker Studio. Therefore, the number of security groups that you can
  /// specify is one less than the maximum number shown.
  final List<String>? securityGroups;

  /// Specifies options for sharing Amazon SageMaker Studio notebooks.
  final SharingSettings? sharingSettings;

  /// The storage settings for a space.
  final DefaultSpaceStorageSettings? spaceStorageSettings;

  /// Whether the user can access Studio. If this value is set to
  /// <code>DISABLED</code>, the user cannot access Studio, even if that is the
  /// default experience for the domain.
  final StudioWebPortal? studioWebPortal;

  /// The TensorBoard app settings.
  final TensorBoardAppSettings? tensorBoardAppSettings;

  UserSettings({
    this.canvasAppSettings,
    this.codeEditorAppSettings,
    this.customFileSystemConfigs,
    this.customPosixUserConfig,
    this.defaultLandingUri,
    this.executionRole,
    this.jupyterLabAppSettings,
    this.jupyterServerAppSettings,
    this.kernelGatewayAppSettings,
    this.rSessionAppSettings,
    this.rStudioServerProAppSettings,
    this.securityGroups,
    this.sharingSettings,
    this.spaceStorageSettings,
    this.studioWebPortal,
    this.tensorBoardAppSettings,
  });

  factory UserSettings.fromJson(Map<String, dynamic> json) {
    return UserSettings(
      canvasAppSettings: json['CanvasAppSettings'] != null
          ? CanvasAppSettings.fromJson(
              json['CanvasAppSettings'] as Map<String, dynamic>)
          : null,
      codeEditorAppSettings: json['CodeEditorAppSettings'] != null
          ? CodeEditorAppSettings.fromJson(
              json['CodeEditorAppSettings'] as Map<String, dynamic>)
          : null,
      customFileSystemConfigs: (json['CustomFileSystemConfigs'] as List?)
          ?.nonNulls
          .map(
              (e) => CustomFileSystemConfig.fromJson(e as Map<String, dynamic>))
          .toList(),
      customPosixUserConfig: json['CustomPosixUserConfig'] != null
          ? CustomPosixUserConfig.fromJson(
              json['CustomPosixUserConfig'] as Map<String, dynamic>)
          : null,
      defaultLandingUri: json['DefaultLandingUri'] as String?,
      executionRole: json['ExecutionRole'] as String?,
      jupyterLabAppSettings: json['JupyterLabAppSettings'] != null
          ? JupyterLabAppSettings.fromJson(
              json['JupyterLabAppSettings'] as Map<String, dynamic>)
          : null,
      jupyterServerAppSettings: json['JupyterServerAppSettings'] != null
          ? JupyterServerAppSettings.fromJson(
              json['JupyterServerAppSettings'] as Map<String, dynamic>)
          : null,
      kernelGatewayAppSettings: json['KernelGatewayAppSettings'] != null
          ? KernelGatewayAppSettings.fromJson(
              json['KernelGatewayAppSettings'] as Map<String, dynamic>)
          : null,
      rSessionAppSettings: json['RSessionAppSettings'] != null
          ? RSessionAppSettings.fromJson(
              json['RSessionAppSettings'] as Map<String, dynamic>)
          : null,
      rStudioServerProAppSettings: json['RStudioServerProAppSettings'] != null
          ? RStudioServerProAppSettings.fromJson(
              json['RStudioServerProAppSettings'] as Map<String, dynamic>)
          : null,
      securityGroups: (json['SecurityGroups'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      sharingSettings: json['SharingSettings'] != null
          ? SharingSettings.fromJson(
              json['SharingSettings'] as Map<String, dynamic>)
          : null,
      spaceStorageSettings: json['SpaceStorageSettings'] != null
          ? DefaultSpaceStorageSettings.fromJson(
              json['SpaceStorageSettings'] as Map<String, dynamic>)
          : null,
      studioWebPortal:
          (json['StudioWebPortal'] as String?)?.let(StudioWebPortal.fromString),
      tensorBoardAppSettings: json['TensorBoardAppSettings'] != null
          ? TensorBoardAppSettings.fromJson(
              json['TensorBoardAppSettings'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final canvasAppSettings = this.canvasAppSettings;
    final codeEditorAppSettings = this.codeEditorAppSettings;
    final customFileSystemConfigs = this.customFileSystemConfigs;
    final customPosixUserConfig = this.customPosixUserConfig;
    final defaultLandingUri = this.defaultLandingUri;
    final executionRole = this.executionRole;
    final jupyterLabAppSettings = this.jupyterLabAppSettings;
    final jupyterServerAppSettings = this.jupyterServerAppSettings;
    final kernelGatewayAppSettings = this.kernelGatewayAppSettings;
    final rSessionAppSettings = this.rSessionAppSettings;
    final rStudioServerProAppSettings = this.rStudioServerProAppSettings;
    final securityGroups = this.securityGroups;
    final sharingSettings = this.sharingSettings;
    final spaceStorageSettings = this.spaceStorageSettings;
    final studioWebPortal = this.studioWebPortal;
    final tensorBoardAppSettings = this.tensorBoardAppSettings;
    return {
      if (canvasAppSettings != null) 'CanvasAppSettings': canvasAppSettings,
      if (codeEditorAppSettings != null)
        'CodeEditorAppSettings': codeEditorAppSettings,
      if (customFileSystemConfigs != null)
        'CustomFileSystemConfigs': customFileSystemConfigs,
      if (customPosixUserConfig != null)
        'CustomPosixUserConfig': customPosixUserConfig,
      if (defaultLandingUri != null) 'DefaultLandingUri': defaultLandingUri,
      if (executionRole != null) 'ExecutionRole': executionRole,
      if (jupyterLabAppSettings != null)
        'JupyterLabAppSettings': jupyterLabAppSettings,
      if (jupyterServerAppSettings != null)
        'JupyterServerAppSettings': jupyterServerAppSettings,
      if (kernelGatewayAppSettings != null)
        'KernelGatewayAppSettings': kernelGatewayAppSettings,
      if (rSessionAppSettings != null)
        'RSessionAppSettings': rSessionAppSettings,
      if (rStudioServerProAppSettings != null)
        'RStudioServerProAppSettings': rStudioServerProAppSettings,
      if (securityGroups != null) 'SecurityGroups': securityGroups,
      if (sharingSettings != null) 'SharingSettings': sharingSettings,
      if (spaceStorageSettings != null)
        'SpaceStorageSettings': spaceStorageSettings,
      if (studioWebPortal != null) 'StudioWebPortal': studioWebPortal.value,
      if (tensorBoardAppSettings != null)
        'TensorBoardAppSettings': tensorBoardAppSettings,
    };
  }
}

/// Specifies a production variant property type for an Endpoint.
///
/// If you are updating an endpoint with the
/// <code>RetainAllVariantProperties</code> option of <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a>
/// set to <code>true</code>, the <code>VariantProperty</code> objects listed in
/// the <code>ExcludeRetainedVariantProperties</code> parameter of <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a>
/// override the existing variant properties of the endpoint.
class VariantProperty {
  /// The type of variant property. The supported values are:
  ///
  /// <ul>
  /// <li>
  /// <code>DesiredInstanceCount</code>: Overrides the existing variant instance
  /// counts using the <code>InitialInstanceCount</code> values in the
  /// <code>ProductionVariants</code> of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>.
  /// </li>
  /// <li>
  /// <code>DesiredWeight</code>: Overrides the existing variant weights using the
  /// <code>InitialVariantWeight</code> values in the
  /// <code>ProductionVariants</code> of <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a>.
  /// </li>
  /// <li>
  /// <code>DataCaptureConfig</code>: (Not currently supported.)
  /// </li>
  /// </ul>
  final VariantPropertyType variantPropertyType;

  VariantProperty({
    required this.variantPropertyType,
  });

  Map<String, dynamic> toJson() {
    final variantPropertyType = this.variantPropertyType;
    return {
      'VariantPropertyType': variantPropertyType.value,
    };
  }
}

enum VariantPropertyType {
  desiredInstanceCount('DesiredInstanceCount'),
  desiredWeight('DesiredWeight'),
  dataCaptureConfig('DataCaptureConfig'),
  ;

  final String value;

  const VariantPropertyType(this.value);

  static VariantPropertyType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum VariantPropertyType'));
}

enum VariantStatus {
  creating('Creating'),
  updating('Updating'),
  deleting('Deleting'),
  activatingTraffic('ActivatingTraffic'),
  baking('Baking'),
  ;

  final String value;

  const VariantStatus(this.value);

  static VariantStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum VariantStatus'));
}

/// Configuration for your vector collection type.
class VectorConfig {
  /// The number of elements in your vector.
  final int dimension;

  VectorConfig({
    required this.dimension,
  });

  factory VectorConfig.fromJson(Map<String, dynamic> json) {
    return VectorConfig(
      dimension: json['Dimension'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    final dimension = this.dimension;
    return {
      'Dimension': dimension,
    };
  }
}

enum VendorGuidance {
  notProvided('NOT_PROVIDED'),
  stable('STABLE'),
  toBeArchived('TO_BE_ARCHIVED'),
  archived('ARCHIVED'),
  ;

  final String value;

  const VendorGuidance(this.value);

  static VendorGuidance fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum VendorGuidance'));
}

/// A lineage entity connected to the starting entity(ies).
class Vertex {
  /// The Amazon Resource Name (ARN) of the lineage entity resource.
  final String? arn;

  /// The type of resource of the lineage entity.
  final LineageType? lineageType;

  /// The type of the lineage entity resource. For example: <code>DataSet</code>,
  /// <code>Model</code>, <code>Endpoint</code>, etc...
  final String? type;

  Vertex({
    this.arn,
    this.lineageType,
    this.type,
  });

  factory Vertex.fromJson(Map<String, dynamic> json) {
    return Vertex(
      arn: json['Arn'] as String?,
      lineageType:
          (json['LineageType'] as String?)?.let(LineageType.fromString),
      type: json['Type'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final arn = this.arn;
    final lineageType = this.lineageType;
    final type = this.type;
    return {
      if (arn != null) 'Arn': arn,
      if (lineageType != null) 'LineageType': lineageType.value,
      if (type != null) 'Type': type,
    };
  }
}

/// The list of key-value pairs used to filter your search results. If a search
/// result contains a key from your list, it is included in the final search
/// response if the value associated with the key in the result matches the
/// value you specified. If the value doesn't match, the result is excluded from
/// the search response. Any resources that don't have a key from the list that
/// you've provided will also be included in the search response.
class VisibilityConditions {
  /// The key that specifies the tag that you're using to filter the search
  /// results. It must be in the following format: <code>Tags.&lt;key&gt;</code>.
  final String? key;

  /// The value for the tag that you're using to filter the search results.
  final String? value;

  VisibilityConditions({
    this.key,
    this.value,
  });

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

/// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs,
/// hosted models, and compute resources have access to. You can control access
/// to and from your resources by configuring a VPC. For more information, see
/// <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give
/// SageMaker Access to Resources in your Amazon VPC</a>.
class VpcConfig {
  /// The VPC security group IDs, in the form <code>sg-xxxxxxxx</code>. Specify
  /// the security groups for the VPC that is specified in the
  /// <code>Subnets</code> field.
  final List<String> securityGroupIds;

  /// The ID of the subnets in the VPC to which you want to connect your training
  /// job or model. For information about the availability of specific instance
  /// types, see <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html">Supported
  /// Instance Types and Availability Zones</a>.
  final List<String> subnets;

  VpcConfig({
    required this.securityGroupIds,
    required this.subnets,
  });

  factory VpcConfig.fromJson(Map<String, dynamic> json) {
    return VpcConfig(
      securityGroupIds: (json['SecurityGroupIds'] as List)
          .nonNulls
          .map((e) => e as String)
          .toList(),
      subnets:
          (json['Subnets'] as List).nonNulls.map((e) => e as String).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    return {
      'SecurityGroupIds': securityGroupIds,
      'Subnets': subnets,
    };
  }
}

enum WarmPoolResourceStatus {
  available('Available'),
  terminated('Terminated'),
  reused('Reused'),
  inUse('InUse'),
  ;

  final String value;

  const WarmPoolResourceStatus(this.value);

  static WarmPoolResourceStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum WarmPoolResourceStatus'));
}

/// Status and billing information about the warm pool.
class WarmPoolStatus {
  /// The status of the warm pool.
  ///
  /// <ul>
  /// <li>
  /// <code>InUse</code>: The warm pool is in use for the training job.
  /// </li>
  /// <li>
  /// <code>Available</code>: The warm pool is available to reuse for a matching
  /// training job.
  /// </li>
  /// <li>
  /// <code>Reused</code>: The warm pool moved to a matching training job for
  /// reuse.
  /// </li>
  /// <li>
  /// <code>Terminated</code>: The warm pool is no longer available. Warm pools
  /// are unavailable if they are terminated by a user, terminated for a patch
  /// update, or terminated for exceeding the specified
  /// <code>KeepAlivePeriodInSeconds</code>.
  /// </li>
  /// </ul>
  final WarmPoolResourceStatus status;

  /// The billable time in seconds used by the warm pool. Billable time refers to
  /// the absolute wall-clock time.
  ///
  /// Multiply <code>ResourceRetainedBillableTimeInSeconds</code> by the number of
  /// instances (<code>InstanceCount</code>) in your training cluster to get the
  /// total compute time SageMaker bills you if you run warm pool training. The
  /// formula is as follows: <code>ResourceRetainedBillableTimeInSeconds *
  /// InstanceCount</code>.
  final int? resourceRetainedBillableTimeInSeconds;

  /// The name of the matching training job that reused the warm pool.
  final String? reusedByJob;

  WarmPoolStatus({
    required this.status,
    this.resourceRetainedBillableTimeInSeconds,
    this.reusedByJob,
  });

  factory WarmPoolStatus.fromJson(Map<String, dynamic> json) {
    return WarmPoolStatus(
      status: WarmPoolResourceStatus.fromString((json['Status'] as String)),
      resourceRetainedBillableTimeInSeconds:
          json['ResourceRetainedBillableTimeInSeconds'] as int?,
      reusedByJob: json['ReusedByJob'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final status = this.status;
    final resourceRetainedBillableTimeInSeconds =
        this.resourceRetainedBillableTimeInSeconds;
    final reusedByJob = this.reusedByJob;
    return {
      'Status': status.value,
      if (resourceRetainedBillableTimeInSeconds != null)
        'ResourceRetainedBillableTimeInSeconds':
            resourceRetainedBillableTimeInSeconds,
      if (reusedByJob != null) 'ReusedByJob': reusedByJob,
    };
  }
}

/// Use this optional parameter to constrain access to an Amazon S3 resource
/// based on the IP address using supported IAM global condition keys. The
/// Amazon S3 resource is accessed in the worker portal using a Amazon S3
/// presigned URL.
class WorkerAccessConfiguration {
  /// Defines any Amazon S3 resource constraints.
  final S3Presign? s3Presign;

  WorkerAccessConfiguration({
    this.s3Presign,
  });

  factory WorkerAccessConfiguration.fromJson(Map<String, dynamic> json) {
    return WorkerAccessConfiguration(
      s3Presign: json['S3Presign'] != null
          ? S3Presign.fromJson(json['S3Presign'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final s3Presign = this.s3Presign;
    return {
      if (s3Presign != null) 'S3Presign': s3Presign,
    };
  }
}

/// A single private workforce, which is automatically created when you create
/// your first private work team. You can create one private work force in each
/// Amazon Web Services Region. By default, any workforce-related API operation
/// used in a specific region will apply to the workforce created in that
/// region. To learn how to create a private workforce, see <a
/// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create
/// a Private Workforce</a>.
class Workforce {
  /// The Amazon Resource Name (ARN) of the private workforce.
  final String workforceArn;

  /// The name of the private workforce.
  final String workforceName;

  /// The configuration of an Amazon Cognito workforce. A single Cognito workforce
  /// is created using and corresponds to a single <a
  /// href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
  /// Amazon Cognito user pool</a>.
  final CognitoConfig? cognitoConfig;

  /// The date that the workforce is created.
  final DateTime? createDate;

  /// The reason your workforce failed.
  final String? failureReason;

  /// The most recent date that <a
  /// href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateWorkforce.html">UpdateWorkforce</a>
  /// was used to successfully add one or more IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>)
  /// to a private workforce's allow list.
  final DateTime? lastUpdatedDate;

  /// The configuration of an OIDC Identity Provider (IdP) private workforce.
  final OidcConfigForResponse? oidcConfig;

  /// A list of one to ten IP address ranges (<a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>)
  /// to be added to the workforce allow list. By default, a workforce isn't
  /// restricted to specific IP addresses.
  final SourceIpConfig? sourceIpConfig;

  /// The status of your workforce.
  final WorkforceStatus? status;

  /// The subdomain for your OIDC Identity Provider.
  final String? subDomain;

  /// The configuration of a VPC workforce.
  final WorkforceVpcConfigResponse? workforceVpcConfig;

  Workforce({
    required this.workforceArn,
    required this.workforceName,
    this.cognitoConfig,
    this.createDate,
    this.failureReason,
    this.lastUpdatedDate,
    this.oidcConfig,
    this.sourceIpConfig,
    this.status,
    this.subDomain,
    this.workforceVpcConfig,
  });

  factory Workforce.fromJson(Map<String, dynamic> json) {
    return Workforce(
      workforceArn: json['WorkforceArn'] as String,
      workforceName: json['WorkforceName'] as String,
      cognitoConfig: json['CognitoConfig'] != null
          ? CognitoConfig.fromJson(
              json['CognitoConfig'] as Map<String, dynamic>)
          : null,
      createDate: timeStampFromJson(json['CreateDate']),
      failureReason: json['FailureReason'] as String?,
      lastUpdatedDate: timeStampFromJson(json['LastUpdatedDate']),
      oidcConfig: json['OidcConfig'] != null
          ? OidcConfigForResponse.fromJson(
              json['OidcConfig'] as Map<String, dynamic>)
          : null,
      sourceIpConfig: json['SourceIpConfig'] != null
          ? SourceIpConfig.fromJson(
              json['SourceIpConfig'] as Map<String, dynamic>)
          : null,
      status: (json['Status'] as String?)?.let(WorkforceStatus.fromString),
      subDomain: json['SubDomain'] as String?,
      workforceVpcConfig: json['WorkforceVpcConfig'] != null
          ? WorkforceVpcConfigResponse.fromJson(
              json['WorkforceVpcConfig'] as Map<String, dynamic>)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    final workforceArn = this.workforceArn;
    final workforceName = this.workforceName;
    final cognitoConfig = this.cognitoConfig;
    final createDate = this.createDate;
    final failureReason = this.failureReason;
    final lastUpdatedDate = this.lastUpdatedDate;
    final oidcConfig = this.oidcConfig;
    final sourceIpConfig = this.sourceIpConfig;
    final status = this.status;
    final subDomain = this.subDomain;
    final workforceVpcConfig = this.workforceVpcConfig;
    return {
      'WorkforceArn': workforceArn,
      'WorkforceName': workforceName,
      if (cognitoConfig != null) 'CognitoConfig': cognitoConfig,
      if (createDate != null) 'CreateDate': unixTimestampToJson(createDate),
      if (failureReason != null) 'FailureReason': failureReason,
      if (lastUpdatedDate != null)
        'LastUpdatedDate': unixTimestampToJson(lastUpdatedDate),
      if (oidcConfig != null) 'OidcConfig': oidcConfig,
      if (sourceIpConfig != null) 'SourceIpConfig': sourceIpConfig,
      if (status != null) 'Status': status.value,
      if (subDomain != null) 'SubDomain': subDomain,
      if (workforceVpcConfig != null) 'WorkforceVpcConfig': workforceVpcConfig,
    };
  }
}

enum WorkforceStatus {
  initializing('Initializing'),
  updating('Updating'),
  deleting('Deleting'),
  failed('Failed'),
  active('Active'),
  ;

  final String value;

  const WorkforceStatus(this.value);

  static WorkforceStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum WorkforceStatus'));
}

/// The VPC object you use to create or update a workforce.
class WorkforceVpcConfigRequest {
  /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups
  /// must be for the same VPC as specified in the subnet.
  final List<String>? securityGroupIds;

  /// The ID of the subnets in the VPC that you want to connect.
  final List<String>? subnets;

  /// The ID of the VPC that the workforce uses for communication.
  final String? vpcId;

  WorkforceVpcConfigRequest({
    this.securityGroupIds,
    this.subnets,
    this.vpcId,
  });

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    final vpcId = this.vpcId;
    return {
      if (securityGroupIds != null) 'SecurityGroupIds': securityGroupIds,
      if (subnets != null) 'Subnets': subnets,
      if (vpcId != null) 'VpcId': vpcId,
    };
  }
}

/// A VpcConfig object that specifies the VPC that you want your workforce to
/// connect to.
class WorkforceVpcConfigResponse {
  /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups
  /// must be for the same VPC as specified in the subnet.
  final List<String> securityGroupIds;

  /// The ID of the subnets in the VPC that you want to connect.
  final List<String> subnets;

  /// The ID of the VPC that the workforce uses for communication.
  final String vpcId;

  /// The IDs for the VPC service endpoints of your VPC workforce when it is
  /// created and updated.
  final String? vpcEndpointId;

  WorkforceVpcConfigResponse({
    required this.securityGroupIds,
    required this.subnets,
    required this.vpcId,
    this.vpcEndpointId,
  });

  factory WorkforceVpcConfigResponse.fromJson(Map<String, dynamic> json) {
    return WorkforceVpcConfigResponse(
      securityGroupIds: (json['SecurityGroupIds'] as List)
          .nonNulls
          .map((e) => e as String)
          .toList(),
      subnets:
          (json['Subnets'] as List).nonNulls.map((e) => e as String).toList(),
      vpcId: json['VpcId'] as String,
      vpcEndpointId: json['VpcEndpointId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final securityGroupIds = this.securityGroupIds;
    final subnets = this.subnets;
    final vpcId = this.vpcId;
    final vpcEndpointId = this.vpcEndpointId;
    return {
      'SecurityGroupIds': securityGroupIds,
      'Subnets': subnets,
      'VpcId': vpcId,
      if (vpcEndpointId != null) 'VpcEndpointId': vpcEndpointId,
    };
  }
}

/// The workspace settings for the SageMaker Canvas application.
class WorkspaceSettings {
  /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating
  /// the Amazon S3 location impacts existing configuration settings, and Canvas
  /// users no longer have access to their artifacts. Canvas users must log out
  /// and log back in to apply the new location.
  final String? s3ArtifactPath;

  /// The Amazon Web Services Key Management Service (KMS) encryption key ID that
  /// is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
  final String? s3KmsKeyId;

  WorkspaceSettings({
    this.s3ArtifactPath,
    this.s3KmsKeyId,
  });

  factory WorkspaceSettings.fromJson(Map<String, dynamic> json) {
    return WorkspaceSettings(
      s3ArtifactPath: json['S3ArtifactPath'] as String?,
      s3KmsKeyId: json['S3KmsKeyId'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final s3ArtifactPath = this.s3ArtifactPath;
    final s3KmsKeyId = this.s3KmsKeyId;
    return {
      if (s3ArtifactPath != null) 'S3ArtifactPath': s3ArtifactPath,
      if (s3KmsKeyId != null) 'S3KmsKeyId': s3KmsKeyId,
    };
  }
}

/// Provides details about a labeling work team.
class Workteam {
  /// A description of the work team.
  final String description;

  /// A list of <code>MemberDefinition</code> objects that contains objects that
  /// identify the workers that make up the work team.
  ///
  /// Workforces can be created using Amazon Cognito or your own OIDC Identity
  /// Provider (IdP). For private workforces created using Amazon Cognito use
  /// <code>CognitoMemberDefinition</code>. For workforces created using your own
  /// OIDC identity provider (IdP) use <code>OidcMemberDefinition</code>.
  final List<MemberDefinition> memberDefinitions;

  /// The Amazon Resource Name (ARN) that identifies the work team.
  final String workteamArn;

  /// The name of the work team.
  final String workteamName;

  /// The date and time that the work team was created (timestamp).
  final DateTime? createDate;

  /// The date and time that the work team was last updated (timestamp).
  final DateTime? lastUpdatedDate;

  /// Configures SNS notifications of available or expiring work items for work
  /// teams.
  final NotificationConfiguration? notificationConfiguration;

  /// The Amazon Marketplace identifier for a vendor's work team.
  final List<String>? productListingIds;

  /// The URI of the labeling job's user interface. Workers open this URI to start
  /// labeling your data objects.
  final String? subDomain;

  /// Describes any access constraints that have been defined for Amazon S3
  /// resources.
  final WorkerAccessConfiguration? workerAccessConfiguration;

  /// The Amazon Resource Name (ARN) of the workforce.
  final String? workforceArn;

  Workteam({
    required this.description,
    required this.memberDefinitions,
    required this.workteamArn,
    required this.workteamName,
    this.createDate,
    this.lastUpdatedDate,
    this.notificationConfiguration,
    this.productListingIds,
    this.subDomain,
    this.workerAccessConfiguration,
    this.workforceArn,
  });

  factory Workteam.fromJson(Map<String, dynamic> json) {
    return Workteam(
      description: json['Description'] as String,
      memberDefinitions: (json['MemberDefinitions'] as List)
          .nonNulls
          .map((e) => MemberDefinition.fromJson(e as Map<String, dynamic>))
          .toList(),
      workteamArn: json['WorkteamArn'] as String,
      workteamName: json['WorkteamName'] as String,
      createDate: timeStampFromJson(json['CreateDate']),
      lastUpdatedDate: timeStampFromJson(json['LastUpdatedDate']),
      notificationConfiguration: json['NotificationConfiguration'] != null
          ? NotificationConfiguration.fromJson(
              json['NotificationConfiguration'] as Map<String, dynamic>)
          : null,
      productListingIds: (json['ProductListingIds'] as List?)
          ?.nonNulls
          .map((e) => e as String)
          .toList(),
      subDomain: json['SubDomain'] as String?,
      workerAccessConfiguration: json['WorkerAccessConfiguration'] != null
          ? WorkerAccessConfiguration.fromJson(
              json['WorkerAccessConfiguration'] as Map<String, dynamic>)
          : null,
      workforceArn: json['WorkforceArn'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    final description = this.description;
    final memberDefinitions = this.memberDefinitions;
    final workteamArn = this.workteamArn;
    final workteamName = this.workteamName;
    final createDate = this.createDate;
    final lastUpdatedDate = this.lastUpdatedDate;
    final notificationConfiguration = this.notificationConfiguration;
    final productListingIds = this.productListingIds;
    final subDomain = this.subDomain;
    final workerAccessConfiguration = this.workerAccessConfiguration;
    final workforceArn = this.workforceArn;
    return {
      'Description': description,
      'MemberDefinitions': memberDefinitions,
      'WorkteamArn': workteamArn,
      'WorkteamName': workteamName,
      if (createDate != null) 'CreateDate': unixTimestampToJson(createDate),
      if (lastUpdatedDate != null)
        'LastUpdatedDate': unixTimestampToJson(lastUpdatedDate),
      if (notificationConfiguration != null)
        'NotificationConfiguration': notificationConfiguration,
      if (productListingIds != null) 'ProductListingIds': productListingIds,
      if (subDomain != null) 'SubDomain': subDomain,
      if (workerAccessConfiguration != null)
        'WorkerAccessConfiguration': workerAccessConfiguration,
      if (workforceArn != null) 'WorkforceArn': workforceArn,
    };
  }
}

class ConflictException extends _s.GenericAwsException {
  ConflictException({String? type, String? message})
      : super(type: type, code: 'ConflictException', message: message);
}

class ResourceInUse extends _s.GenericAwsException {
  ResourceInUse({String? type, String? message})
      : super(type: type, code: 'ResourceInUse', message: message);
}

class ResourceLimitExceeded extends _s.GenericAwsException {
  ResourceLimitExceeded({String? type, String? message})
      : super(type: type, code: 'ResourceLimitExceeded', message: message);
}

class ResourceNotFound extends _s.GenericAwsException {
  ResourceNotFound({String? type, String? message})
      : super(type: type, code: 'ResourceNotFound', message: message);
}

final _exceptionFns = <String, _s.AwsExceptionFn>{
  'ConflictException': (type, message) =>
      ConflictException(type: type, message: message),
  'ResourceInUse': (type, message) =>
      ResourceInUse(type: type, message: message),
  'ResourceLimitExceeded': (type, message) =>
      ResourceLimitExceeded(type: type, message: message),
  'ResourceNotFound': (type, message) =>
      ResourceNotFound(type: type, message: message),
};
